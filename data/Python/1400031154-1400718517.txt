Writing C extensions wrappers for Python can be hard depending on what you need to do. There a bunch of ways you could do it though. The most primitive way is using the Python C APIs directly. * https://docs.python.org/2/extending/index.html Higher level alternatives which try and avoid you needing to write actual C code are: * http://www.swig.org * http://cython.org * https://cffi.readthedocs.org/en/release-0.8/ * https://docs.python.org/2/library/ctypes.html 
At the end of the game when it prompts to continue or be done. When a user says no it only breaks the loop it is nested in and not the loop running the game environment. The main while loop needs a boolean that can be made False if the user decides to quit playing. I did this myself adding a variable called running as a True boolean that if the user decides not to play again it is set to False therefore ending the loop. Other than that caveat, I really enjoyed what you have written. Seeing other people complete projects that you've done in the past in different ways is always fun and interesting. Good luck on your adventures. As far as suggestions to what you should do in the future, the hangman game is a good idea, or you can dip into GUI in python and make a tic-tac-toe GUI and create a script to play tic-tac-toe against the user. Just some thoughts from a college CS guy.
Well shit... How did you land the job? You'll need a little C knowledge and then look into python ctypes. You'll be writing python that interfaces with the C code. The wrapper allows people to access C libraries whilst writing in python.
Great work! In case you are interested Step by step presentation on how to do all you need for checkers. Finishing the game is left has an exercise to the student. There is also step by step for a simple hangman. https://www.dropbox.com/sh/y7kig1ar47qk68h/AABeVNQV4Qk2_69bsTDxVVcLa/Workshop 
Good stuff! I wrote the article and these topics come up in our every day work so I'm always eager to hear more about computational geometry.
I've done that a bit but found being too dogmatic encouraged different bad code with things like descriptive variable names or chaining APIs where you end up trading cheap horizontal space for more limited vertical space. In things like Django models, with statements, etc. where code or, worse, docstrings starts a couple of indents in the extra few characters is actually a significant percentage of the usable space. My current rule is 100 characters but sticking to one logical thought per statement. One of the really good habits from working at a shorter line length was ensuring that e.g. a dictionary declaration puts each key on its own line so you avoid missing something at the end of a long line (this is also easy to do if you don't break up a long list comprehension).
Congrats!
I can already hear "pandas!" :) no, I didn't use it, because from time to time I have to work over limited terminal access on our high performance computing cluster where this package is not installed, but I will make a similar notebook with for pandas some time...
ctrl-c would still quit - KeyboardInterrupt is a special exception in that way.
Personally, I try to keep things under 80, but I allow myself up to 120. It still fits pretty well with my font size on a 1080p monitor with two files side-by-side. I use Sublime Text which has a handy feature of showing those columns, and I keep one at 80 and one at 120.
Looks good! A small suggestion: your implementation of hasAll() is a very common pattern that is more succinctly (and more efficiently) expressed as: def hasAll(listOf3, player): return all(i in player for i in listOf3) 
*zealous
I think one of the best things about Python is heavy API and toolkit integration. If you're interested in web-scraping, I'd hit up some of the Twitter or Wikipedia API libraries to do some data scraping. I felt like a goddamned wizard when I posted a Twitter status from IDLE. Feels good man.
Are you interested in continuing to work on this? If so there's some constructive criticism I can offer and I'm sure others would love to help. Good work! Completing a project, no matter how big or small, is an accomplishment. I can't count how many I've started and not finished. You might want to look into using a site like bitbucket or github to save your work. It's great to have a backup, you'll learn how to use a version control system, and it's very easy to look back at previous projects and see how you approached a problem. It's also a piece of cake to share with other people. Always good to see more people excited about programming and solving problems! Don't lose that enthusiasm, it will serve you well in whatever you do.
'A Foolish Consistency is the Hobgoblin of Little Minds' -Emerson
So I'm new to Python as well, but I want to ask: Why did you make it in Python 2.7 instead of 3.4???
You're only in high school. You are in great shape if you keep this up. You are ahead of a large number of your peers already. Keep it up and your lead will only increase as you go into undergrad.
Yeah, PEP8 (and style in general) isn't just about collaboration, either- there will come a time where you need to look back at the code you wrote a week ago...or a month, or a year... And when that time comes you will be very thankful towards past you if you wrote clear, well-documented code or very hateful if you did not. What seems obvious to you now will not be given enough time!
Yep. C/C++ is a great way to learn programming- if you want to put the time, effort, and frustration into banging your head against syntax while you're still trying to learn the thought processes of programming. There is no better way to make people hate computer science than by throwing them into C/C++. C/C++ will come much more naturally and soundly once someone has a strong foundation in the ideas of programming. Program flow has to come before bit twiddling.
That makes sense thanks! Any idea how I write python functions that can call C functions though? Or do I just basically rewrite the exact same code but in python rather than C?
Is there any advantage to the higher level alternatives if I already know some C? or would they end up just being more complicated to learn? Thanks for the help!
Of course! I completely agree with you. I was just saying in my previous comment that having multiple conditions return the same value might prove to be an issue for later projects down the road. I was just insuring that OP was aware of this to make sure they didn't make a habit of it in future projects.
That's incorrect. A bare `except` catches *everything*, which is partially why it's such a bad thing to use. Using `except Exception` would let `KeyboardInterrupt` through, because `KeyboardInterrupt` inherits from `BaseException` but not `Exception`. If it were me, I'd ban bare `except`s... but backwards compatibility and all that.
The only missing library is sane-unicode-byte-handling.py
Dude, I don't want to sound harsh, but you're not qualified for this role. What you're asking is entry level stuff for the position you've described. If what's being said on the swig site is going above your head, it's going to take a lot more than just knowing what a wrapper is to reach the level required to be able to do your job properly. I blame who ever hired you for this job. They've completely failed, IMO. That said, try to hang on for dear life, and try to absorb as much information as you can, as quickly as you can. You might be able to 'fake it til you make it', but it's going to be very difficult for you. 
&gt; with statements, etc. where code or, worse, docstrings starts a couple of indents in the extra few characters is actually a significant percentage of the usable space. I actually think that's part of why 80-character line limits encourage better code. It makes it very hard to nest code deeply. :)
&gt; which I guess can only happen if someone pipe a text file into your input. Or if someone presses \^D.
Other peope already wrote some useful technical suggestions, just wanted to offer some words of support - being dropped off into the deep end of the pool is something that happens along a programmer's career. Go over the suggested technical reading, start building small example wrappers, take one of the simpler C functions that are currently in production, wrap it, test the hell out of it, show it to your boss so he can see you're making progress. Two panicked weeks from now you'll be an expert :)
I can fit 241 characters on my display. Widescreen with a small font. Minus the vim numberline (3 digits, 1 spacer), that's 237. If people stick to 80 characters, that's almost 3 files open at a time. Possibly 2 files and documentation. 120 character lines is almost 2 files.
Pretty sure botting is frowned upon. 
Well done! It's an awesome feeling. * Line 7 can't actually happen. Should probably remove it. * Don't use bare `except`s! Ever! You have *no idea* what weird exception could pop up. On lines 48 and 73, specify exactly what kind of exception to look out for: `except KeyError` or `except ValueError` or whatever.
Why? People just assume it's bad automatically just like torrents. Torrents aren't unethical/illegal/bad- they have legitimate uses. It's just that people CAN use them for bad things. Why would it be frowned upon if I create an AI in starcraft to follow a specific build/play style so I can practice against a timing attack? 
Really awesome and such a fun project. I would suggest writing it again as your next project. Minimizing the code, refining features, getting really deep into it and going through the process of how you made the first version again to better understand your own processes. 
Yep and that's fine. Then you look down on cheaters and hackers, not botting. 
Oh my god lighten up on your pedantic bullshit. You know what I meant. 
I finished my part of the final report early, so i made myself a github and translated the comments on my the 3d polymer visualisation. I'll add more stuff when i'm less busy. https://github.com/krunos
Great idea for your first program. You will pick up the Python idioms along the way. Here's one: to alternate between n players, use itertools.cycle. https://docs.python.org/2/library/itertools.html#itertools.cycle
Just to add to the post if /u/joshu: You should not re-write the C code. That wouldn't be a wrapper. And there are huge risks in re-writing existing software. Unless you are 100% certain that you understand every little piece of the existing code including C idiosyncrasies, you should not touch that code. Unless there is a *very* good reason. I suppose that the existing code is working, and you are tasked to write wrappers for that exact reason. That is, to be able to re-use existing, working code in another programming environment (in this case, Python). Re-writing it risks re-introducing old bugs, and introducing new ones.
Awesome! Love the license :)
Wait... they don't know how to code, but have written C libraries? Please make sure their code is sane before diving in. I've been in the same boat (taking over code from non-coders) a few times already, and that can be really painful sometimes. In any case, good luck! You will only learn from the experience. :D
Great! I just found a bunch of typos everywhere, i'm getting them ironed out. I'd also like to apologise about the name of my .py, but i just couldn't resist.
Everything is possible. Now let's talk compensation...
Looks good. I'd expect your function that checks for wins to be broken out into checkHorizontal, checkDiagonal and checkVertical because I had to work through which slice referred to each. This is a perfect example of "explicit is better than implicit" .
+1 for CFFI, I've written several 'wrappers' with it now, and it's a joy to use.
That's very kind of you.
Well, I ran the code on windows and it did not catch ctrl-c: the program exited. Game Over. Would you like to play again? y/n?: That is not 'y' or 'n'. Please try again. Traceback (most recent call last): File "tictactoe.py", line 74, in &lt;module&gt; print "That is not 'y' or 'n'. Please try again." KeyboardInterrupt C:\Users\André\Documents\test&gt;
hangman is one of the first things i coded in python aswell. learned a bit about handling strings and lists, its not a bad pick. i remember being amazed by how few lines of code i had to write just tried it again, if you want to have a look: http://pastebin.com/a56bTcCt
But where is the error?
&gt; I'm still super beginner. In programming in general? Or just Python?
in general
http://stackoverflow.com/questions/23647225/typesel-get-not-working?noredirect=1#comment36323043_23647225 the typeSel.get() is at the moment getting nothing. the code is atrocious, don't laugh
I think you're being downvoted by people who watched that "Stop Writing Classes" video and swallowed it whole. I agree with your recommendation, not because this tic-tac-toe game *needs* OOP, but because Python is pretty much built around OOP and this is a good way to dive in. So basically what you said.
To add to this. A lot of heavy computations are also faster to do in C than in Python. This also motivates why you would write functions in C and call them through python 
I think the 80-char guideline is about collaboration. I'd go out on a limb to say that most programmers will often tile windows horizontally, even if you don't. tl;dr: you might not care, but the majority of people liable to read your code do.
Of course it is. So is vim. Or nano. Or anything else. It just doesn't get significantly more useful after 80 columns, so lots of people design their desktop setups around 80-character terminals, e.g. tiling four terminals onto a 1280xsomething viewport.
I'm with you on this. Screw the 80 character limit. It is time to move past punched cards and go for at least 100 chars, if not 120. I wish people here would stop down-voting you just because they disagree. HD monitors are cheap. Get two and put them side-by-side. If you are a professional or serious hobbyist, then you owe it to your self to get as many pixels as possible. 2560x1440 is in the realm of affordable. As a professional I haven't used any language with a limit below 120 for years. 
Ok then run with it! Make sure they know programming isn't just five minutes of hand waving. Ctype docs will help. There are alternatives that I haven't used like cython and swig, could look into them
Very good, but you should put in exit handling. The program doesn't like ctrl+c or ctrl + d to exit, which it should account for. Also gets stuck in a loop of asking if you want to play again.
&gt; guess what, lots of people love their vims and emacsen and their terminal programs And they use them from a modern terminal emulator with *loads* of horizontal pixels: it's 2014, yadda yadda
It is however the easiest to get up and running. Depends on the complexity of the library IMO. If there's only 10 or so functions in the API then ctypes is fine, and has the advantage of being in the stdlib and not requiring any special build step.
Turtle has been around since at least the 70's, maybe earlier, as a way to teach programming to children. You should check out the book "Mindstorms" by Seymour Paypert.
Write some AI to play against. Player vs. CPU. That gives you a chance to refactor your code, maybe learn a few things about what you did right and wrong from an extensibility point of view. - - - Stylistically, from PEP8: &gt; **Function Names** &gt; &gt; Function names should be lowercase, with words separated by underscores as necessary to improve readability. &gt; &gt; mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility. Some folks will argue that it doesn't matter or it's a preference, but you'll also find this in PEP8: &gt; Class names should normally use the CapWords convention. And I doubt many would argue with that one. 
Ayep, but two points in my own defense: 1) There is a difference between being a Python programmer who writes beautiful things for yourself where you are free to use the best, cutting edge (dare I substitute: trendy?) practices and someone who needs to be able to go into a legacy code base and quickly figure out not just what the code does, but *why* it was written the way it was. 2) This is a teaching exercise for OP - the point of learning more with it is to play with it, refactor it, break it, fix it, improve it, etc. Notice how you can implement code that does the same thing in different ways, and then figure out how each one of those ways makes sense in a different context. That's how you get better at writing code over the long term.
Seems to be platform-specific. It does not exit on linux.
You're right! [Stackoverflow](http://stackoverflow.com/questions/20953273/install-opencv-for-python-3-3) suggests that installing from Git master would allow you to use opencv for Python 3.
I am also learning Flask these days. A `requirement.txt` could've helped IMHO. Hope this helps: pip freeze &gt; requirements.txt So someone can clone your repo and do: pip install -r requirements.txt in his virtualenv. But I think `pip freeze` would make sense if you're also having a virtualenv at your end for this project. Some expert can comment better on that.
I saw your comment that the GH repo is outdated (https://github.com/rpicard/explore-flask) but judging by the content on GitHub I'm unlikely to shell out any cash for this book. The chapters are short and the style is very amateurish. e.g. &gt; Pick a version control system and use it. I recommend Git. From what I've seen, Git is the most popular choice for projects these days. Being able to delete code without worrying about making a critical mistake is invaluable. The chapter on SQA is incredibly brief, a topic I'd think warrants quite an in-depth discussion: https://github.com/rpicard/explore-flask/blob/master/10-storing-data.md
If you're looking for a book, Programming Collective Intelligence has a smattering of algorithms and python implementations for just this type of problem.
wrt. email: prose flows, and you read it that way. In code (and espc. Python) structure matters a lot for comprehension. I don't think the fact that email wraps at 70-something chars is relevant to anything when talking about code formatting. I understand that 80 column terminals were common and that's (probably) why pep8 was written that way, but when I had an 80 column monitor I also had an acoustically-coupled modem (150 baud!). I don't use that anymore either.
I hope you all enjoy reading this post and find it informative. If anything is unclear, please leave a comment either here or on the post, and I'll try my best to answer. If you're curious about the BM25 implementation, you can check the source code [here](https://github.com/coleifer/peewee/blob/master/playhouse/sqlite_ext.py#L324-L387) -- it's a bit longer so I did not include it inline w/the rest of the post.
sorry I should've included the requirement file. Yes, it only requires flask and flask-sqlalchemy.
Python 2 doesn't work.
I'm surprised to see you move from postgresql to sqlite for a public site. How do you handle the fact that sqlite is single threaded? What happens when two visitors visit your site at the same time?
Hey! Since I already know Python well, I decided to do the same thing in Ruby (Which I just learned over the last week). You inspired me dude. [Bitbucket](https://bitbucket.org/cohix/ruby-tic-tac-toe)
I describe the rationale in [this post](http://charlesleifer.com/blog/migrating-to-sqlite/), but to sum up: * I wasn't using any postgres-only features * Postgres requires a server process and when RAM is at a premium, SQLite is a better choice * SQLite is fast as hell, so no performance issues * My site is read heavy I think there are some popular misconceptions about SQLite, namely that it does not support concurrency. In fact SQLite is not single threaded, and can handle concurrent reads very well. SQLite locks the database for writes, so there are no concurrent writes, but there is a built-in busy timeout so assuming the writes finish in less than 5 seconds (and they usually take one thousandth of that) there's no problem there either.
And last, but not least at all, http://cffi.readthedocs.org 
Why has no one said this? you need comments!! it's not "poorly documented", it has nothing! You will look back at this program in 2 weeks and spend 20 minutes trying to remember why line 7 has a `return board`. It looks great, but believe me, your life will be a lot, lot easier in the future if you get in the habit of adding a comments as you code. For starters, (no joke) add a comment line for every line of code.
&gt; 2560x1440 is in the realm of affordable. My BenQ 27" BL2710PT was only $600. Crazy cheap.
You could make a redditbot, it's a great way to learn how APIs work. Hers's a great tutorial if you're interested: http://praw.readthedocs.org/en/latest/pages/writing_a_bot.html
Why would that be an issue if you don't mind me asking?
So brave
Thanks. Is there some setting you have to set in order for the multi threading to work? I have vague memories of using the sqlite3 command line tool and not being able to connect to a database that was in use by another process. I believe I used the precompiled binaries on windows, but it was a few years ago.
i'm a little late but [Nine Men's Morris](http://en.wikipedia.org/wiki/Nine_Men's_Morris) would be a cool progression from Tic Tac Toe or [Go](http://en.wikipedia.org/wiki/Go_\(game\) )
If you're using peewee, you would write: db = SqliteDatabase('my-db.db', threadlocals=True) This creates a connection-per-thread and I believe that is the best way to go. If you want to share connections between threads, you would instead write: db = SqliteDatabase('my-db.db', check_same_thread=False) Standard library sqlite3 does not have a mechanism for connection-per-thread, but it does support sharing conns across threads. If you're using standard library sqlite3, you would write: db = sqlite3.connect('my-db.db', check_same_thread=False) Now this is only if you want to share connections across threads
Thanks man, most of the credit goes to [bootswatch](http://bootswatch.com/darkly/). I'm using a modified version of the Darkly theme.
oh, cool, thanks for the tip, was not familiar.
You know that salt can use python for its config files, instead of YAML right?
That's because raw_input is a Python 2.x specific function which has been renamed input in Python 3.x (and the old input from 2.x no longer exists)
good start. consider adding some security to your admin page. example : http://flask.pocoo.org/snippets/111/ 
Yeah but following those instructions are a pain in the ass. So that is why I am going to wait until they have a build which I can download.
Pressing CTRL-C while waiting on `raw_input()` will raise a a `KeyboardInterrupt` exception as well.
Don't feel you have to change just because it's trendy. Python will be here for you when you are ready but you should approach it from an angle of pragmatism or fun, not just for the me too factor.
Grandfather Turing already invented all tne languages and we've been fighting over them ever since.
Thanks for the plug to my website :)
Looks cool! I'm going to fork it on github and make commits with my comments in them, then make a pull request so you can view them easily. You probably won't want to merge the pull request, because it'll have comments etc in it, we'll just use the pull request interface for a nice display.
yeah. it's by far and away the easiest to deal with generally.
Programs inevitably get longer. You start moving code to different files and importing functions and your program no longer functions properly. For one off scripts (almost all code starts that way), I don't even put my code in an if name=='__main__' block (which are global variables). Once I start adding functions/classes, I'll add the name=main block and put the code in a def main() function because I'll inevitably import that function and I want it to work.
Yes. It's 2014. People now manage server *farms* from one terminal, which also means more often than not we're *multiplexing* terminal emulators. "Loads" of horizontal pixels are still not a lot when you're tiling 6 terminals on one screen, or when you have a web browser, a javascript debugger, a man page, the output of your continuous unit testing job, and the source code, side-by-side. Granted, 80 characters is an arbitrary limit in this context, but it's as good as any - 85 or 78 would work equally well, but why not stick with the established standard.
This is more of a /r/learnpython question i guess, but I could answer it here. In this case it is likely that an experienced Python programmer would use a class. If you don't know already, classes are sort of like objects that have their own namespace, this is true for all python objects actually, try running " string ".strip() and it will call the strip() in str(), but if you tried calling strip(" string ") then that would not work because strip() does not exist in the global namespace. So you would make a class like this. class Board(object): def __init__(self, board): self.board = board def newShip(self, x, y, length): """ modifies self.board to add a new ship """ Then any other function which could be considered to be heavily tied in with modifying the board would be added inside that class, and any other variables belonging to the board would also be placed inside the __init__ function (we call them methods, actually when they are part of a class.) What you need to know about __init__ is that it is run whenever a new Board "instance" is created, like such: &gt;&gt;&gt; board = Board(initial_board) &gt;&gt;&gt; print(board.board) """ Whatever datatype you store the board in """ &gt;&gt;&gt; board.addShip(...)
&gt; wrt. email: prose flows, and you read it that way. In code (and espc. Python) structure matters a lot for comprehension. You actually just made my point. Prose flows, so for that the column limit is irrelevant, because you can rewrap as needed. But for code, structure matters, so it needs to be written to the expected column limit, otherwise it'll wrap or cut off. Also, 80-character terminals are still pretty common; it's no longer a hardware limit, what with 1280-pixel framebuffers, 132-character text mode built into kernels, and GUIs everywhere. But it's still a somewhat established standard. Fire up a terminal on a vanilla Linux distro install, and check the default size. Embedded terminals inside GUI applications, too.
TBH I couldn't find a decent explanation on the if name == main block, so I've been doing while(True): main() if replay(): print "\nRestarting..." else: raw_input("\nThank you for playing. Press enter to exit.") break 
Using globals doesn't solve the problem of 'passing 5 parameters to every function'. It simply hides it. Your class still needs all of those variables, only now you are hiding the fact that they are required to make your function run properly. Your code is lying to you, and that's why it's a bad thing.
&gt;Armin explained my complains in great detail already. I didn't see any explanation, just ridiculously bloated code that would never appear in the Real World.
I understand it is for clarity, but it is still, at its base, a suggested limitation on the creativity of the python programmer, for the sake of the clarity of others. I'm not going to stop reading someone's code just because it goes beyond said arbitrary limit. And yes, I frequent the shitty and bad code subs. TL;DR: If ignoring it helps the programmer, in any way, then the programmer should ignore it.
You should use ? and executeMany instead of replacing '%s' with your variables. DB API and Python Sqlite3 docs are a must read https://docs.python.org/2/library/sqlite3.html
In general, globals keep state somewhere other than in plain sight and that makes the functions less portable and more difficult to comprehend. &gt; I mean, everything in moderation, right? Sure. If you are teaching yourself programming and you're focusing on syntax or other concepts, `global` your heart out. Just be aware that it will impede scalability and portability. &gt; I don't really want to pass 5 variables to every function that effects the board, just so main() and makeShip() can "talk" to each other You may have just discovered that it's appropriate to have another data structure(s) to represent those five variables. e.g. instead of main(): makeShip(shipLength, board_x_len, board_x_offset, board_y_len, board_y_offset) maybe you should: main(): ShipPosition = namedtuple('ShipPosition', ['x', 'y']) ShipSize = namedtuple('ShipSize', ['width', 'height']) BoardDims = namedtuple('BoardDims', ['x', 'y']) board_dims = BoardDims(10,10) makeShip(ShipPosition(a, b), ShipSize(c, d), board_dims) 
The point of the `if name == '__main__'` block is that it allows you to use any script as an importable module, too. When you run it as a script, the `if name == '__main__'` block gets executed, but not when you import it in another Python module. For example, I wrote a script to add an "unwatched" tag to any video files added to my Mac in the last hour or so. Then I decided I wanted to also add a "duplicate" tag to any videos whose filenames are the same but have different extensions. A lot of the code is basically the same, so I changed the first script to use an `if name == '__main__'` block, so I could also use it as a library and import the `add_tag` and `find_videos` functions into the second script.
To be fair, unless you have clean up to do you probably shouldn't catch that. Generally SIGTERM is meant to signal a graceful exit, and if you can already, you probably should without catching it.
&gt; I'm having a hard time understanding the hate. That's because it comes *entirely* from incompetence. Just as you said: Abuse them (or anything else) and you'll have problems. Use them well, and benefit. It's just that simple. 
It should be platform specific. It's a low level SIGTERM interrupt.
Thanks, looking forward to seeing it
Global variables are fine as long as they're constants (i.e. read-only). In fact, it's often the best place for them. However, you don't want to be storing state in global variables. An example: Python's locale is global, i.e. if you change it, it changes for the entire program. What this means is you can't use it in a webapp that needs to support different languages in the same process. Which is a major bummer. Similarly, by keeping your game state in global variables, you make it impossible to have more than one game running at a time. So no web version…
I've had issues using classes as well. My background is in linear programming and classes confuse the hell out of me. I'm taking a Coursera class that is forcing me to use them and as such I'm starting to get better at understanding them. It just takes repeatedly using them. It also helps to take a program you wrote without classes, and re-write it using them.
In object oriented programming, objects store data and functions together in the same place. Objects are defined in code by a class. Basically think of a class as a description of an object, and an object is any place where class is used to manage a specific set of data. In a purely functional language if you have an array of values [1, 2, 3] that you want to extend. You need a function to do it. &gt;&gt;&gt; extend_array([1, 2, 3], 4) [1, 2, 3, 4] If the array was a object (as it is in python), we can just access the function from the object itself. &gt;&gt;&gt; my_array = [1,2,3,4] &gt;&gt;&gt; my_array.append(5) &gt;&gt;&gt; print(my_array) &gt;&gt;&gt; [1, 2, 3, 4, 5] As you see, OOP isn't actually that big of a braintwister, it's just a slightly different way of solving problems. Once you learn the syntax of defining classes and try a few sample apps you can really expand your ability to solve complex problems. 
I, too, am a new Python coder. Currently working on adding proper logs to a DDNS updater script. Congrat's, and keep up the good work!
Great post. I just started re-acquainting myself with sqlite in python for a new project a few days ago. Can you recommend any other intermediate to advanced resources/tutorials on this topic? 
Global variables are not bad. Code using global variables generally is. Avoiding globals, unless you REALLY need to, (like embedded C systems and stuff), will lead to you coding better.
Academia is dumb. For CS less than other things, but it still is. Don't ever think less of yourself for not having studied programming academically.
I thought CTypes was generally pretty good.
[**@domix**](https://twitter.com/domix): &gt;[2014-05-14 01:06:43 UTC](https://twitter.com/domix/status/466384077915181056) &gt;Program your microwave oven they said, use python they said [*pic.twitter.com*](http://pbs.twimg.com/media/Bnjt2QTIcAA7zoe.jpg) [^[Imgur]](http://i.imgur.com/26JjYVO.jpg) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/25kane%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
And if you use the Write Ahead Log journaling mode, the processes can even read and write simultaneously! The only blocking situation in that case is if two or more processes are trying to write at the same time. [SQLite Write-Ahead Logging](https://www.sqlite.org/wal.html) 
Only browsed some of the code but since it's python, I'd use [PEP8](http://legacy.python.org/dev/peps/pep-0008/) style guides.
Heh, it's not that I think less of myself. I'm just explaining the fact that I've been coding for a while (it's my favorite hobby) and since I don't know any programmers AFK, I have absolutely no idea whether I'm any good at it. So I just posted a project that I'm fairly happy with here, to see what some more experienced people think of it, and what they think I should improve on. I might get into CS (or robotics, manipulating "real" objects instead of just bytes using computers is cool) academically (i.e get a masters/bachelors degree) when I've finished High School.
Thanks for your comment, glad you enjoyed the post, and even more glad to hear you're getting back into SQLite! &gt; other intermediate to advanced resources/tutorials on this topic? If the topic is full-text search, then I'm afraid I don't know of any other resources. If the topic is SQLite in general, here are a few (shameless self promotion ahead, watch out!): * [Using BerkeleyDB's SQL API as a drop-in replacement for the standard library's SQLite library](http://charlesleifer.com/blog/building-the-python-sqlite-driver-for-use-with-berkeleydb/) -- this is handy if you want better concurrency on writes. * [The peewee SQLite extension has a lot of fun goodies](http://peewee.readthedocs.org/en/latest/peewee/playhouse.html#sqlite-extensions), including helpers for defining your own functions, aggregates and collations. * [APSW](https://github.com/rogerbinns/apsw) is an advanced SQLite driver for Python that unlocks some really neat features. There is also [some lightweight peewee integration for APSW](http://peewee.readthedocs.org/en/latest/peewee/playhouse.html#apsw)
Pretty good for 100 lines of code. All of my first projects blew up and bloated insanely. You're off to a fine start!
Just remember, if you get into uni and take a CS course, don't let it turn you off programming as a whole. :3
I think rather for CS *more* than other things
Im currently working on connect4. The AI is a bit of a challenge. What I have so far is here: www.github.com/mstagg/Connect4
That's exactly what my next project is. The current code for my battleship game is complete and fully functional... but the code is also a steaming pile of mess, since I was actively learning the code as I was writing it. Re-writing it to be cleaner and probably with classes is going to be a challenge, but a welcome one.
Also, I went through learnpythonthehardway. I feel that Zed makes a pretty good transition to classes with the text based games. Maybe it can help you out (it's somewhere around lesson 40something)
&gt;Sure. If you are teaching yourself programming and you're focusing on syntax or other concepts, global your heart out. Just be aware that it will impede scalability and portability. Having a background as a classically trained musician, I know the difficulties of building bad habits because you're "learning something else." I'd rather stop those bad habits from forming right now, early in my programming career, than to have to unlearn the habits a year from now.
Good point. Now that I think about it, it's not a big deal right now while my program is small and I'm able to hold the full program in my head, but a year from now when the code is ten thousand lines long spread across 10 files, this probably won't be so easy. May as well try to build good habits while my code is small and manageable. 
Thanks for the guidance. I was aware of the eBay API, but I never really looked into the full extent of it. I appreciate the links, this saves me some time!
Thanks, I'll look into it!
You're right. I never thought to simply Google the solution and see what other sellers are doing. 
Possibly. I figured there'd be _some_ useless stuff in CS courses.
&gt; I think both these products are fantastic What products are you referring to? This blog post was about SQLite full-text search...
He is saying some of your methods return values when they don't have to. Your function will still work if it returns nothing. Example (sry for the format, on mobile): def foo(bar): pass pass pass return That function will still perform whatever operation is written inside, it just wont return a value, IE you could not set a variable with that function or use it for flow control statements.
Thanks!
Ha, sorry. Sqlite &amp; ostgres - I kept reading the blog and got into the broader conversation about the migration from postgres to sqlite.
The problem with global variables is that they make it difficult to draw a connection between cause and effect within your code. The more places a global is used and modified, the harder it is to figure out what caused what to happen. This does not make them always bad, it just means that there is a complexity there that needs to be managed appropriately. One good way of managing the complexity of global variables is dynamic scope. Both Perl and Common Lisp have the ability to use dynamic scope in some circumstances but to use lexical scope in others. Dynamic scope allows you to limit the impact of global variable modification to a particular timespan within the program. Unfortunately, Python does not support this, but you can simulate it using try/finally. Making your functions clean up after themselves, and leave globals in the state they found them can really help here. Another tool for managing complexity is invariants. Explicitly document the relationships between certain globals and other globals, the state of the program, the external world, etc., and check that documentation when writing or reviewing any code that hits those global variables. Good luck!
And you know it's a mess, that shows you're getting better :)
great tips thanks a lot! Would you also happen to know what rich text editor can be used with flask?
Classes are tough to think about sometimes, and I know I don't use them nearly as often as I should. However, for your use they work PERFECTLY. Just think about it physically. You're playing a game of Battleship. What objects do you have? You have the game itself as one large object. It contains the board, and all your other objects operate in that board. You want to design your program to follow this flow. Everything is operating on the board, and you can create methods to allow those operations. Maybe your board will have a method that binds an object to it (in an array, probably) and then you can count how many ships a player has alive. Hopefully this illustrated a little to you a natural use-case. Then your program (this is the part that bothers me...) would just be the UI. In the text case, it'll just be polling the user for the game and manipulating your Battleship object appropriately. Now behind the scenes the game is played. This would allow you to get a GUI in a similar, easy fashion. This modular approach is part of the power of classes. You could technically have the UI IN the battleship object, but that would limit you and would make your class unwieldy. Sorry for rambling, hopefully this makes sense to you! I know when I'm learning these kind of paradigms it always seems like the 1000th time someone explains it to me I finally get the whole picture. 
This is the code (py, CSS, HTML) for an actual blog. GitHub is where I open source for this program. You can download the files and follow the instructions so you can test it on your local computer.
Would love to, but my project load is way too high right now.
I can see why they're as important as good naming but I never got to learn the conventions. Is there a way to learn them or some ruleset the conventions follow? E.g. more capital letters for highlever constructs or something like that? 
Use collections.OrderedDict if order matters.
[Source](https://gist.github.com/mattr555/43f3bc8e037d1ac6982c). Turtle is a standard module that lets you draw vectors, like the old educational language [LOGO](https://en.wikipedia.org/wiki/Logo_%28programming_language%29).
Unfortunately, the keywords dictionary does not preserve order. So if you use a keyword constructor to make an OrderedDict, the order will not be preserved. You'd end up having to doing each one manually, so it wouldn't be nearly so nice. The advantage of a list is that it would maintain a similarly clean format.
I'm the opposite of you. I've been writing classes for so long, I think I would have trouble if I went back to C (my first language and I was never a guru or anything). I'm sure my code would be a spaghetti mess of random functions. I can even envision myself (like OP) tossing in a smorgasbord of globals all over the place. I think this is why I struggle with JS. I know it uses objects, but everything seems to be treated like a function. It hurts my brain when trying to visualize entire project. Props to the excellent JS coders. I'll stick with my happy OO world (mostly Ruby and Obj-C), I guess.
For sure!
Pretty cool. I'm actually planning on writing some sort of a simple caching proxy web archiver with full-text search in python. It'll be for reddit only at first, and maybe later extend to other sites. Thank you for sharing.
Python is Beautiful &lt;3
This. You simply won't see the problems *practically* with a small program that is one or two pages long. Which also means some global variables are just fine for a one-off script that will never grow big (if it does [and they do], refactor it before you cause headaches for yourself or others).
I'm willing to bet it's actually almost completely imperative code, but simply organised by some functions. A proper functional style would *completely and utterly* forbid global variables, as well as usually passing and mutating all state through functions. 
I'd volunteer to assist in a python community subreddit for post like this and th is one could remain a help/general subreddit.
&gt; Re-writing it to be cleaner and probably with classes is going to be a challenge, but a welcome one. Link to your code and I'll explain how to get started with this. There are certain techniques involved but without an example you are familiar with, it will be difficult to grasp.
Nice, but is anyone wondering what kind of job have lego boards?
Sounds awesome, if you ever open-source it please send me a link!
&gt; Specifically talking about websites, just replace Firefox with Mozilla Well, they should have said Mozilla. Firefox is written in C++.
I would create a class for your data items that automatically handles that null logic. class Field(object): def __init__(self, data): """ receive data as string and store for easy retrieval. """ # default value is None to "allocate" it. # use the setter to assign it with logic. self._data = None self.data = data @property def data(self): """ return data """ return self._data @data.setter def data(self, value): """ set data to value if value is not None. Else set to None """ if value.isspace(): self._data = None else: self._data = value def __str__(self): """ with respect to printing, we return "" if data is None else we return data. """ if not self._data: return "" return self._data For an example, here's a function that mimics the behavior: def example(): """ this will utilize the features of the Field class as proof-of-concept. """ # from original code: #flags = line[27:34] flags1 = "0123456" #simulate use-case flags2 = " " #simulate space in record from text file flags3 = "" #simulate empty detail # create our fields field1 = Field(flags1) field2 = Field(flags2) field3 = Field(flags3) # print our fields through property access: print("{0}:{1}".format(1,field1.data)) print("{0}:{1}".format(2,field2.data)) print("{0}:{1}".format(3,field3.data)) # separator: print("-"*10) # print our fields through string representation: print("{0}:{1}".format(1,field1)) print("{0}:{1}".format(2,field2)) print("{0}:{1}".format(3,field3)) And here's the output of what happens: 1:0123456 2:None 3: ---------- 1:0123456 2: 3: So, maybe this would clean up what you have a bit since checking for null has now been moved to the field object itself.
/r/python does not need shitposts.
I just get "Wrong query lolz" whenever I type in my username. I tried yours, too, and got the same thing.
you sound like you hang around #python... 
dammit, i forgot to add the environment variables in dokku. Now it should work. Thanks for noticing!
It *is* a good /r/learnpython question, but I can attest to the fact that they get pretty confusing after a while. I'm trying to make simple script now, and I have different cross references to different globals, and ugh. Not fun at all. Classes are a lot better once you can get your head around them because it's just self._____ and you can get any variable. 
As a blanket statement, this isn't true (to suggest that global constants are fine and dandy). Secondly, it's worth mentioning for the OP that there are no constants in python to avoid confusion, as they're new to the language.
I'm often surprised how often I end up reusing code from my "one-off scripts" that I think will never be reused. Its probably still best to avoid extensive use even there. I'm not saying you're wrong, just simply sharing my experience with this shared thought process.
Oh hey Bryan. Thanks!
How come /u/c3534l and c3454l produce different recommendations?
hmm, it shouldnt. gonna check the logs. EDIT. I see. The reason is that the app assumes the default subs (the set of default subs a new user is subscribed to) when recommending to a user that doesnt exist. /u/c3534l doesnt exist and thus, gets the recommendation for a default user. The app stores the subs a user is subscribed and will update the results once enough new data is in (calculating similarities is process intensive and I cant afford right now a more powerful server instance)
Or you know, I realize that a lego creation that happens to be the python logo doesn't actually belong in this subreddit...
A global in a single file program makes for a handy, simple-syntax, fast up-front configuration switch or datum. For those who are looking for more speed and/or efficiency, the less indirect access to something generally is, the faster it will be. In languages like c, a global can turn into one machine instruction, as opposed to, for instance, passing something on the stack where it has to be loaded, pushed, re-loaded from the stack, used, and then later cleaned off the stack. If there are multiple variables being passed, the cleanup, generally a single LEA instruction or equivalent, can hide the cost of getting rid of it, but nothing saves the cycles it costs to push the thing in the first place. Every language is different as to how it handles variables, but a general rule that almost always applies is *reduce indirection in order to gain efficiency.* Same thing applies to a config routine that returns one or more values in response to a parameter request -- that's oodles more complex than grabbing something from a known location, and it certainly ought to be faster, unless the language is pretty weird internally. I go so far as to set up config files with the config variables isolated -- for the user's convenience, then at startup, stuff them into globals -- for the program's efficiency. For example, one of my Python programs is a real-time TCP message passer and arbitrator between a radio transceiver and a software defined radio application. The message rate can be very high, particularly when one or the other system is being tuned by the user. Messages have to be examined, translated, converted to or from UTF16, and values converted, sometimes adjusted. Even in a 8-core, 3 GHz system, where I am assured that a core is available and that the CPU is reasonable, this system can be overloaded just by setting the message rate too high. But the thing is, the higher it is, the better it all works -- right up until it is overloaded. So efficiency really matters here. The faster the program executes, the closer to overload it can be pushed in terms of message rates, and the smoother everything runs. So when something, for instance a TCP port, is used a lot, it's really nice to have it right there, available to everything in one easy access, as opposed to having to grab it indirectly one way or another. When you go the other way -- for instance, Apple's setters and getters in Objective C -- you lose performance every step of the way. Sometimes it doesn't matter; sometimes it does. It depends on the kind of code you're writing. Again, in really high performance situations, like my SLR RAW live, non-destructive image editing application, direct, immediate access to often-accessed control variables can create, or break, critical bottlenecks -- or, if non critical, they simply speed things up, which benefits the user. Global variables are like pretty much anything else: they have perfectly good uses that won't bite you, that will assist you in obtaining your goals. But you need to understand when and where they are called for, and then design the system such that this works well. If everything you do has no realtime pressure, you may never run into such a need (although even syntax simplification isn't a bad thing for maintainability); but rest assured, there are plenty of applications out there where response is a factor, and knowing what's fast, efficient, and how to use those features is one of the required programming tools.
I have to ask, are you purposefully referencing his example of an ambiguous sentence from the first lecture? If so, well done. If not, thats a great coincidence. I just started with the course though, and am super excited to go through it. How long did it take you to complete it?
there's a subreddit for these kinds of questions, and it's not this one.
Large-scale, real-time data? Then use HDF5 files. Works nicely together with pandas for me. One drawback that made me ditch Sqlite was the lack of concurrency. If the math is tough, you might want to benefit from doing multithreading/multiprocessing. I suggest PostgreSQL as an alternative.
#python aint like that 
Thanks i'll try out your suggestion. (I know JUST enough python to be dangerous and literally last week i wrote my first class in PHP so much of this is new)
/r/Pythoff?
Hence all the jokes about object-oriented programmers seeing the world around them as objects. 
good stuff, now you dont need dev server for every little thin u want to try out.
you may just be a functional programmer. not better or worse than oo. for scientific works, functional is often the way to go.
Make saying python a bannable offense there.
I like it. Not as much as the python pillow though.
Oh be nice.
Go with C#
Now, someone try the Lego logo in Python.
I am guessing he means functioning (as in works correctly without bugs), not the functional kind of programming.
I just integrated the ckeditor with my miniblog today:)
What does this logo represent, what is the meaning behind it?
This: https://www.google.com/search?q=python3+stdout+bytes And https://docs.python.org/dev/library/io.html?highlight=buffer#io.TextIOBase.buffer &gt; This is not part of the TextIOBase API and may not exist in some implementations. You are kidding me? Using implementation details is a bad thing. Ask your mommy!
In a pure MS environment it's hard to beat C# and Powershell. You get a ton of things "for free" so to speak because of C#/VisualStudio having a lot of out-of-the-box functionality that ties in with the MS ecosystem. Besides once you have C# under your belt it will be trivial to get up to speed in Python. At work I use C#/Powershell mainly but privately I use Python/Shell most of the time (because it's more fun ofcourse :) 
In your module - your python file, that is - you have functions and variables. For example: x = 5 def foo (): print "Hello" These are sitting out in the global scope, which is to say "out in the world" of your module. They can see each other. You could have made `foo` print `x`, and it would have printed 5. What if you wanted to have another `x` that did something else, though? What if `x` is the position of something on the x axis, and there are dozens of these things? You can't just have a ton of `x`s, as they'll overwrite each other. You could keep them in a list, or you could name them `x1`, `x2`, etc., but another way to do it is to make each of your objects a class instance, and let them each have their own `x`. Class Blub (object): def __init__ (self): self.x = 0 This is a class definition, just as a written-out function is a function definition. You call a function to do some work. You call a class to make an instance of that class, which is also called an object. Our Blub class definition is like a blueprint for building Blubs. The Blubs you make will each be "instances" of a Blub, just as you can use woodworking plans to make a bunch of instances of the same chair. Each can then be modified separately. Just as you can paint one chair, and shoot holes in another, you can also add things or change them in one instance of a class, and not affect the situation in any of the others. Each is like its own world, inside the outer world we spoke of at the beginning of this comment. myblub = Blub() # this makes a new Blub instance, called myblub print myblub.x # prints out the 0 that's in the x inside of myblub print x # errors - there is no x out here in the 'world' Now you can have multiple blubs, each with their own 'state' (i.e. current set of values). blub1 = Blub() # makes a blub blub2 = Blub() # makes another blub print blub1.x # 0 print blub2.x # 0 blub1.x = 42 # you can change properties in any instance print blub1.x # 42 - now it's changed print blub2.x # still 0 - but we didn't affect the other instance So now instead of having a variable `x` out in the world, you have a separate 'property' `x` inside of each blub instance, and each can be dealt with independently. Of course, now you have to deal with all the blubs, so you have to put them in a list, or number them, or whatever, which was the original problem with the `x`s, but hey, that's your problem. I'm just trying to teach you what a class is :) So 'properties' are like variables, but 'bound' to class instances. What about functions? Well, when a function is bound to a class instance, it's called a 'method'. Here are 3 (1 you already saw) in our Blub class: class Blub (object): def __init__ (self): # note - __init__ is a method - a "magic" method¹ self.resetX() # this calls Blub's reset method, which creates x def resetX (self): self.x = 0 # now we can set x to 0 whenever, not just on init def moveX (self, amount): self.x += amount myblub = Blub() myblub.x # 0 myblub.moveX(3) myblub.x # 3 myblub.moveX(6) myblub.x # 9 myblub.reset() myblub.x # 0 again ¹ "magic methods" look like __this__, with 2 underscores on either side. If you do dir(SomeClassName) you'll see any that are defined for a particular class. __init__ is the most common. It gets fired off once after a class is created. It's the place for setup work, as we saw in our first Blub example. Now we have a class instance with both properties (instance-bound variables) and methods (instance-bound functions). Inside any method, if you use `self.var`, then you're working on a var inside of the class. If you just use a name without `self.` in front of it, then you're making a temporary variable that will only exist inside of that particular method. This is useful for temp/intermediate values, say in the middle of doing some math in a method. When the method is done, those vars will go away. The ones you set with `self.var` will stay in the instance, however. As such, classes are a way to hold a bunch of related values and functionality in one place, away from everything else. Typically the methods in a class will either modify various self.values, or output them in some way - e.g. to pretty-print them, or export something, or generate a report, or move a sprite on-screen. That's mostly what classes are. The class definition is like a blueprint that lets you spawn little, stateful worlds - called instances - that have their own functions and variables - called methods and properties. One other aspect of classes is inheritance. This lets you make one class definition inherit from another: class A (object): pass class B (A): pass Here, class `B` inherits from class `A`. This means it will have all of the abilities of `A`; if you try to call a method that doesn't exist on an instance of `B`, it'll then look up to `A` to find it. I've personally found (and read many times, from many sources) that inheritance is not a great thing, and it should be used very sparingly, if at all. Most of the time when people think "I know, I'll inherit from this class here!" they're wrong. I had 12 classes last year, all inheriting from one another, and now I have none, because it was all terrible. In fact, the next thing you'll learn about all this class stuff is that it's unnecessary. I'd say learn it, play, have fun, but keep an eye out for the horizon. If you keep going, I think you'll find your way out of the object-oriented jungle, and into the functional-programming prairie. I don't know if that metaphor holds up, exactly, but I know that functional programming - while stretching my brain more than OO did - has reduced the size and complexity of my code by at least half. Still, I'd play in OO first, and get familiar, because it's everywhere. Java is all OO, and it's crazy popular. It's hard for it not to be OO. Python is mixed paradigm, but it still often favors OO, from what I've seen in the wild. So, it's good to know what it is, and to try out it's powers. I think it can be very useful for smaller projects. As things grow, I tend to find it becomes a nightmare rat's nest of interconnected complexity, and lots of 'design patterns' for trying to deal with it all. Good luck!
it represents two snakes. it's the python logo. it's supposed to represent [this](http://thumbs.reddit.com/t5_2qh0y.png?v=c619ba68805100086134e36ebcd24efc) logo.
Yeah I guessed as much. Python just looks a lot more fun to me :) But you are all right and somewhere I guess I knew it too, c# is the obvious choice here, thanks for your advice!
I highly recommend downloading pycharm and using that. It'll show a lot of things you're doing that is potentially dangerous. For example class Menu(Game): def __init__(self, _id, header_font={"size":60, "bold":False}, option_font={"size":60, "bold":False}, decorate_options=False, **kwargs): Super bad! def colorOf(obj): return self.colorscheme.get(obj, self.colorscheme[obj]) There's no "self' there, your arguments are wrong. And I'd also suggest looking at PEP8 and just going with it (except the line length thing which is just stupid). Otherwise I think it looks pretty ok!
We have modern computers that can do proper line breaks. It's not the 1970s anymore! The argument used in PEP8 are stupid and/or objectively wrong: &gt; Limiting the required editor window width makes it possible to have several files open side-by-side, If by "side-by-side" you mean "exact multiple of 80 columns". Obviously that's stupid. What if you have a screen and font combination where three windows of 70 columns fit? Scroll in all of them? Just have two windows and throw away ~30% of the available space of the screen? This statement hasn't been thought through. &gt; and works well when using code review tools that present the two versions in adjacent columns. Fix those tools if they're that broken please. In my experience gerrit (which guido was involved in) is broken in a myriad other ways that make the line break issue just drown in the sea of horror. &gt; The default wrapping in most tools disrupts the visual structure of the code, Please don't use tools that are broken. &gt; Some web based tools may not offer dynamic line wrapping at all. Most web based tools *can't handle python at all*, because they throw away starting whitespace! This argument is stupid because it is just as strong an argument against the entire python syntax. &gt; Some teams strongly prefer a longer line length. For code maintained exclusively or primarily by a team that can reach agreement on this issue, it is okay to increase the nominal line length from 80 to 100 characters Some teams don't live in the 1970s. For those teams just don't have a maximum line length, because it's arbitrary and stupid. If a line is unreadable with automatic line break, it's just as unreadable OR MORE with an arbitrary column limit. 
One good way to think about this - and it's kind of the crux of functional programming - is that you want your functions to behave the same way all the time. If your functions might do something different once in awhile, you really can't trust anything. It's like a dog that's usually nice, but once in awhile bites your finger off. You don't want that, and none of us wants our code to be dangerous like that. So let's talk about the functional paradigm. In that world, when we talk about something that's "purely functional," we probably mean a couple of things, but chief among them is what's called "referential transparency." It's a fancy name that doesn't really sound like what it means (naming things is really difficult), but put simply, it means that for a given input to the function, you will always get the same output. A good example, from the world of math, which is a world full of examples of referential transparency, is the 'square' function. This function returns the product of a number with itself; the square of 2 is 2*2, or 4. Always. At any given moment in your life you'll be able to yell "Everyone stop! Okay, what's the square of 2?" and the correct people will correctly tell you that it's 4. It will always be 4. In fact, if it's not, the universe probably broke. We all like to be able to depend on things, and each other. It's *really* nice when you can depend on a function to *always* do *exactly* the same thing, given a particular input. Our input above was 2, and our output - as ever - was 4. Always. So nice. You can even replace a pure function call with its result; square(2) IS 4, after all. Globals make this impossible. If you use a global variable in your function, you render it completely incapable of returning the same value, always. Here's an example: x = 5 def gimme5 (): return x gimme5() # 5 x = 7 gimme5() # 7 &lt;-wtf? This may not seem so bad, but oh man, is it ever. For a small program - your game, for example - it might work out just fine. Keep coding in there for another year or two, though, and I would bet you $10 that a global variable bites you one day. You'll spend 7 hours on a Wednesday, before some deadline for something, trying desperately to figure out why something is not working, and eventually you'll realize some random thing was changing a global variable some other place, and the output was 5 function calls away from there, and it was nearly impossible to track down. Chaos *loves* globals variables. The idea behind a purely functional function is that the output is 100% based on the input(s). Because of this, you can think of it like a mathematical function. The sum of 2 and 7 is ALWAYS 9. The square root of 9 is ALWAYS 3. The factorial of 7 is ALWAYS 5040. The state of your game board + a particular move should ALWAYS yield the same resulting board, not a 7, or "foo". It shouldn't raise an error. It should be dependable, like math. If math didn't always work, the universe would be completely unnavigable and insane, just like programs that have globals in them. The extreme side of this is a different kind of downer. If you go *completely* purely functional, you're never allowed to change anything. You can't base anything on the date. You can't accept input from the user. Your code is a train on a track, only doing what the rails allow. You're dirty! If you interacted with the program you'd be adding who-knows-what values into the system? You're not allowed to have a say in what square root does, after all. I mean, you can use it for your needs - send in a value and get a value back - but you can't change anything in the system itself. It has to remain entirely closed to outside influence. How could such a thing be useful? Well, there are closed systems that should actually work exactly the same way, without any stateful changes, like math, but most programs do end up needing to deal with people and their messy problems. *Sigh...* How do you change anything in a universe that won't let you change it? You don't! We're not out of the fight yet, though. When the universe won't let you change anything about it, you leave it behind and make a new universe, a universe that has the change already in it (the one you wished for in the old universe). You said x is 5; why are you trying to say it's now 7? Are you a liar? Were you lying when said it was 5? Well, make a new universe where x is 7, and no worries. Haskell is a [mostly] purely functional language, and it won't let you just change the value in x once you've set it up. It's almost like setting it up in the first place wasn't really creating it, but revealing what always existed, that we just never noticed before. It's like you discovered a mathematical truth, that there's an x, and its value is 5. What a pain, right? One way around this is monads. They wrap things up and create new universes to sidestep this issue. For every change you want to make, monads let you return a copy of the universe with that change in it. Like your game board, they return a changed copy of the world. I find this mirrors the actual universe. In programs we say x = 5, and later we say x = 7, and the computer forgets forever that there was an x that was 5. Rich Hickey (developer of Clojure, a language that deals in this stuff nicely) has a great talk about this called "The Value of Values." He goes over how we always treat facts as 'places', and then change the facts in these places. He reads from the dictionary, quoting that a "fact" is "a thing that happened." His example is that when we get a new president, we don't forget forever who the old president was, or that there even was one. We update our information with new information - we have a new president - but we don't forget what used to be - we used to have a different president. Facts don't disappear. New facts appear and accrete onto the ever-growing collection of facts. Place-based facts ignore time. When you add time back in (the president was ___; the president is now ___), you get some nice powers. When our universe changes, as it does constantly - the old one is no more, but it still *was*. It's like we keep getting a new universe. When we look at two photos taken seconds apart, we know they're not the same. Everyone breathed in or out. Every electron moved. The universe changed. We look at a person and see a stable thing, but what we're really seeing is a very complicated system of processes, all in motion, constantly changing by little bits. OO treats things like... things. The person isn't a collection of a process, but an object. Instead of functionally transforming that person into a slightly different person, OO destroys the old person and everyone's memory of it forever, and spawns a new, slightly different person. It's not possible in place-based programming to have any history of facts, because we keep overwriting each fact with a changed version of itself. It's possible to have this history in a functional language, because you're always making copies. I mean, you might not keep the copies, and thus lose the info, but you're losing it because you're a bad historian, not because you're actively overwriting all evidence across time and space of what once was. There's a difference. Clojure actually does maintain the history. It uses a thing called structural sharing to allow you to change some parts of something - say a few elements of a list - and get a copy back of the 'changed' list, while not having to actually copy all of the unchanged values. Imagine a list of 3 numbers, 1 to 3, and we change the 2 to a 7. We could have a new list that points to the old 1 and 3, with a new 7 in the second slot. This very dumbed-down example (Clojure has a much more complicated, tree-based method of structural sharing) probably wouldn't save you much, if anything, but you can imagine the numbers being data structures with lots of things in them, and pointing back to those structures for all of the unchanged parts actually saves quite a lot: 1 &lt;- 1 2 7 3 &lt;- 3 One of the big problems with place-based data systems is that if you ever want to read the state of the system at a given moment - and let's say it's a ton of data, like all of customer information for a bank - you can't do it. People are constantly changing information in there. You could end up reading values that are in the process of changing. You might even get mixed information within a seemingly discrete thing, like the information for one customer might end up as a mix of old and new values. The only way to get a 'whole read' at a single instant is to stop everyone else from changing anything until you're done. It could take you minutes, or hours to read it all, though, so you can't do it. You just have to read while everything's changing out from under you the whole time. That is, you have to do that unless you're using an immutable system where new values are added on, but old values are not replaced or deleted. Clojure actually lets you read everything in a huge structure at a particular time while everything keeps changing ahead of that point in time. It's like grabbing the film coming out of a projector and looking at a particular frame while the rest of the film keeps running through the camera. What's being projected on the screen is the constantly-updating new values, and they're always moving further ahead of you, but you didn't have to stop anyone watching the film just to look at the previous 'current' value, and that's very useful. If you wanted to run statistics on bank transactions, you could grab a point each hour and compare them, and you'd know they were whole views of everything, and thus completely reliable. Anyway, this is just a brain dump. It might get you thinking functional thoughts earlier in your career than happened for me. I've been learning about this stuff for a little while, and it's fun to blab it all back out to someone else. So... thanks!
Keep in mind that in your case you still **SHOULD NOT** make shipPos, shipNumber etc instance variables and covertly pass them to the createShip function. A good rule of thumb: if the lifetime of a variable is logically limited to one function or method, it should not be a global variable or a class member. def do_stuff(self): # ... this.stuff_counter = 1 this.do_other_stuff() # this.stuff_counter is never used anymore ... is bad code. If you want to pass a value to a function, do it. Don't assign it somewhere and then have that function pick it from there. If you feel that you have too many arguments, all right, make a class ShipCreationParams to hold them. The only time you're allowed to assign to a non-local variable in a function or a method is when this variable still has meaning when you return from the function or method. For instance, `board.contents` still has meaning when `board.addShip()` returns.
nice work. seems a bit blocky though. using some bezier curves makes it pretty easy to replicate the python logo. [output](http://i.imgur.com/n63cdOv.png) | [source](https://gist.github.com/SuperDoxin/d7bb473dcec7e1c55f48) all the coordinates are hardcoded. have a look at the bezier and lerp functions though. pretty simple stuff that can create some really nice curves. leave a reply if you'd like me to explain anything about the program.
Ouch, that colorOf method was never used so I never caught that error, didn't test it properly because I thought it was so simple. Removed now. Also, could you give me an explanation of why pycharm considers this: class Menu(Game): def __init__(self, _id, header_font={"size":60, "bold":False}, option_font={"size":60, "bold":False}, decorate_options=False, **kwargs): to be very bad? I can sort of see that it could cause arguments to not be passed onto the Game.__init__ method properly because they are "picked up" by the keyword arguments of the Menu.__init__ method before **kwargs slurps the rest of the arguments. Standard way of doing something like this?
Could you link to github? Or maybe just more info. It's hard to give feedback just looking at the javascript on the front end. I'd like to see how you're determining recommendations using PRAW/Reddit API since that's the main feature of the site. If you use [OAuth](https://github.com/reddit/reddit/wiki/OAuth2), you can look at the subreddits that the user is subscribed to and use that information for whatever (ignore them in results perhaps). 
hmm, since you can do custom widgets in UPython notebooks, i’m a bit underwhelmed about the “notebook support”
That's a good point. I kind of expected someone to bring up very extremely specific performance situations. Still, I wouldn't call the hate as coming from 'incompetence' - merely a lack of need. Most programmers do not work in situations where the advantages of global variable access speed will override the disadvantages of maintainability and code clarity.
https://github.com/noamraph/tqdm also works in IPython notebook well.
Am I missing something here........ my @matrix=map [(0)x5], 1..5; $matrix[0][0] = 1; 
Python user in a Microsoft shop here. It sounds like you've already decided to learn C#, and that probably makes the most sense. My recommendation is to download [LINQpad](https://www.linqpad.net/) and, if you can swing it, purchase the autocomplete/intellisense plugin. This is really close to the Python REPL in that you can type single statements and see them execute almost instantaneously. You can use it to connect to databases such as SQL Server and Access and print the queries in a table. It's a really handy tool for a Microsoft-heavy environment.
Cool, but why ASCII art? 
Building graphs or creating a sparse matrix representation is what I have used dicts for in the past... But it might be too advanced...
Then graph it 
You mean like just the tracking (elapsed time, cpu, memory etc.) and some endless-animation? that would be a good idea I think. Thanks!
Is there an email alert service or similar? I'd like to know of security releases when they happen and not when I randomly decide to procrastinate and go on reddit.
I would also do something for counting elements like the M&amp;M exercise in the comments below. This might be a good exercise since there are so many solutions ([I came up with 6](http://htmlpreview.github.io/?https://github.com/rasbt/One-Python-benchmark-per-day/blob/master/htmls/day3_dictionary_counting.html)) how a dictionary can be used to count elements. I am sure your students will come up with all of the first 3 methods, and as a bonus you can discuss with them which method is the fastest and why :) 
im putting the code together and will put it on my repo soon. I was thinking of asking for oauth permission, but i feel like asking for that permission will drive users away.
I wrote a comment explaining how it works.
I wrote a comment explaining how it works.
That's one of the reasons why I created this module: I was running on stuff on our high perf. computing cluster and the `progressbar` module didn't work... And ASCII art looks very classy in a termninal shell paired with a green font and a black background :)
I'm not crawling through Google hits. Either link to a specific thing or don't. As for "this is not part of the TextIOBase API", I'd say it *is* part of the [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout) API since the docs specifically tell you to use it.
You only have to ask for "mysubreddits" in the scope. The auth page will say pretty clearly that OAuth credentials will not allow access to anything else. If you're using PRAW try auth_url = r.get_authorize_url('DifferentUniqueKey',{'mysubreddits'},refreshable=False) and see what the auth page looks like and see if it doesn't look too ominous. I think it could add a lot of value to your app. EDIT: by the way, I'm working on a Flask app that uses OAuth [[nba-gamethread-generator]](https://github.com/asmoore/nba_gamethread_generator) if you want to see how I implemented it.
Brilliant. This will be a great way to learn Kivy for me :)
Oh I thought this was specifically for Notebook, in which case you could use fancier graphics. 
This is a great technical article (and I really like peewee), but just a bit of counterpoint on the SQLite vs Postgres thing. The main thing I dislike about SQLite is its lack of ability to do schema changes. For example, to rename a column, you need to do these complicated, error-prone steps which take an hour or so to get right each time you need to do it: http://stackoverflow.com/questions/805363/how-do-i-rename-a-column-in-a-sqlite-database-table You don't need to make these changes often, but when you do ... SQLite is a [real dog](http://dustycloud.org/blog/sqlite-alter-pain/). (Postgres is just super-good at this kind of thing, and it's trivial: `ALTER TABLE RENAME COLUMN ...` Also, some of the newer features of Postgres, like JSON support, seem really nice. I help run a fairly large-scale website (Oyster.com), and I just can't stop thinking how great Postgres is for our use case.
Oh. No it's jsut that I made it notebook compatible yesterday. But that's a good idea. I should come up with a fancier Class for IPython notebook execution :)
Yeah, I though since it was only two lines in a local namespace it didn't really matter all that much (it would, in my mind stand for list.) Changed it though: for row in matrix: row.reverse() Have you got any more examples? You did use the plural form of variable.
I agree, the app sounds great, but I want to see something before testing.
/u/booty_bumping is strictly business and has no time for shenanigans or joy. 
If I start with C# should I go with 5.0 or earlier ones ? 
&gt; in VBA (yes, I said it) I don't understand why people seem to feel they should be apologetic about using Excel VBA. These 2 are like siamese twins. You don't see people feel the same way with coding JavaScript. in my case: With xlsx files: VBA, Python if it's trivial. Outside Excel: Python. 
&gt; use something like py2exe or install python runtime (and necessary libraries) Shameless plug: [Pynsist](http://pynsist.readthedocs.org/en/latest/) is designed for precisely this case. It builds an installer that sets up the Python runtime and the libraries you specify along with your application.
https://groups.google.com/d/forum/django-announce
Honest question - why wouldn't you just use Redis?
Yes, modifying, renaming and dropping columns is a pain. I've written a migrations library for peewee, so hopefully in practice it isn't much of an issue.
But `collections.Counter` is clearly a better choice for this...
Yes.
I absolutely agree. This is banal, pop-culture reference junk food crap belongs in some other subreddit.
You should make a decision on a case by case basis, knowing that in general using them is a bad idea. If you are writing some fun game or script that you are going to forget about in a week, who cares, use as much globals as you want. Serious long-term code that needs to be maintained, you have to think real damn hard before choosing to use a global there, and you better have a damn good reason. Apart from the obvious problem that globals create, which is "uncertainty", they also make your program hard to configure/reproduce/test. When your program state is contained inside something else, you can create 50 of them and do things with it, when there is some global state that affects the entire program you can't do that, and also your program can behave differently based on that value. It's like standing on a rug that some crazy fucker could pull from under your feet any moment.
You're welcome! Also if you can find the time, getting comfortable with Powershell might be prudent. As a language it's a little clunky compared to Python but it's a nice language for automation and quick dirty scripts (less mental overhead than C#). One overlooked benefit to using Powershell is that you can seamlessly dip into the .Net framework if you need to do anything exotic.
C# is actually a lot of fun for me too. I've used it to throw together a [Snake](https://github.com/LegNBass/Snake) game using the windows console on a whim, and I also use it to throw together CRUD apps that talk to SharePoint and SQL in a matter of minutes. Once you get a library of your most used methods and extension methods for work, your C# programs become so much simpler and more fun. With the right setup, you can use the same extension method to update SQL in any app just by using: dataset.toSQL("TableName"); or something similar. Also, I realize that this kind of thing holds true in python as well, but when coupled with the M$ provided libraries for M$ products, C# wins. Now don't get me wrong, I almost exclusively use python for fun stuff that I do "off the clock", but i have found VisualStudio and C# so much easier for dealing with the monotony of the business world. -written from the perspective of a beginner coder in a similar work situation 
Interesting post, both [mysql](http://dev.mysql.com/doc/refman/5.0/en/fulltext-search.html) and [postgres](http://www.postgresql.org/docs/8.3/static/textsearch.html) have full text search capabilities. As a long time postgres user and occasional mysql user, I'd be interested in seeing a similar treatment of using full text search with those databases.
&gt; Download python and the packages all separately? yes. &gt; But then what IDE do I use. assuming you're on windows, the python IDLE, until it annoys you enough, then you switch to a basic text editor with highlighting.
Enjoy: http://perlmaven.com/multi-dimensional-arrays-in-perl 
There is a screenshot in the GitHub description, and here's a picture of Rockivy running on a phone: http://cl.ly/image/020Q0U3t0w3y Since the app just displays guitar scales on a fretboard-like grid, video won't add much – it would be just a series of static screens.
yes, right, the `Counter` is by far the fastest method (in terms of performance and the syntax to write) &gt;&gt; collections.Counter(['a','c','b','a']) Counter({'a': 2, 'b': 1, 'c': 1}) But to illustrate the mechanics of the dictionary container, I would to it more classic: def add_element_check1(elements): """if ele not in dict (v1)""" d = dict() for e in elements: if e not in d: d[e] = 1 else: d[e] += 1 return d def add_element_check2(elements): """if ele not in dict (v2)""" d = dict() for e in elements: if e not in d: d[e] = 0 d[e] += 1 return d
Wow, first off, thanks for taking the time to write a long, detailed response. Reading your response raised a few questions, if you don't mind: What do other 'magic' methods do? I've seen code where classes had their own custom magic method, like def __hash__(self): return hash(self.coord) On a similar note, can you explain private methods? ...I think that's what they're called. Methods which look like `class._this`, with one underscore before it. ________________________________________________________________________ If each Blub must be named Blub1, Blub2, etc now, what's the advantage to doing `Blub1.x, Blub2.x ... Blubn.x` over just having similarly numbered variables for each blub? You said yourself: &gt;Of course, now you have to deal with all the blubs, so you have to put them in a list, or number them, or whatever, which was the original problem with the xs, but hey, that's your problem. So what's the advantage? Looks like a whole lot of extra typing (the object's name every time) just to move the problem somewhere else without really getting rid of it? ________________________________________________________________________ Your last two paragraphs make it seem like classes are ultimately a bad thing, wasting time and length. What is the alternative (functional programming?) and what are its advantages?
I wasn't going to comment since overall the code looks quite fine, but thought you may need some pointers on this: #The PBX sends EXACTLY 128 Bytes of data for each call #We take advantage of this in a pretty bad way and we have our fingers #crossed that we NEVER get a partial line as that would break all rows after it If this becomes problematic (i.e. you get partial lines), what you want to do is establish a buffer - just a string that you continually populate with new data as it is read. Then, you process off the buffer once you know it has enough data to include one complete log entry. Something like: buffer = "" while True: #Read data from the serial port data = ser.readline() #only process the data if we get stuff over the line if data: #Strip Newlines out of the data so we don't screw up the next part data_stripped = data.rstrip('\r\n') buffer += data_stripped if len(buffer) &gt;= 128: line = buffer[:128] # Get first 128 bytes in buffer buffer = buffer[128:] # Update buffer to begin from 129th byte If each log entry finishes with a \r\n you could probably achieve the same using linesplit (and making sure an \r\n exists in your buffer before parsing any). Edit: changed data_stripped to an assignment (=) rather than addition (+=)
No no no, this is the internet. The proper response is "Fuck you! You're wrong, I'm right!" :D
Thanks for this tip I will definitely implement this as it has been bugging me.
Nice, thanks for reading. I don't use mysql but in the future I may look into the postrgesql FTS.
Not trying to be a douche... But... Here you go : lmgtfy.com/?q=python+jobs
I've never used Ipython, so I can't comment on that. I can comment on the general state of IDEs. they are all horrid. just grab a text editor that does syntax highlighting and run your program from the terminal.
in checkTetris: ps, nblocks in genkey: d, ret
Appreciate the advice
Here is channel of Kivy tutorials: https://www.youtube.com/user/kivycrashcourse/videos Kivy official channel: https://www.youtube.com/user/kivyframework
I use ipython, I think it's great and very helpful. But nothing beats vim, there are a lot of plugins for python (a lot). :)
I was hoping someone had built a logo turtle in Lego and controlled it with python...
IPython notebooks are wonderful to showcase what the python scientific stack can bring to the table.
The standard libraries are some of the best written/tested/maintained open source libraries in any language, that'd be a good place to start, and it'd be practical.
I think the Anaconda distribution is the way forward. Conda package management circumvents the installation nightmare that are the linked C libraries for most scientific modules. IDE wise, I've heard good things about Spyder, but the IPython notebook is pretty amazing to write scientific scripts in, and PyCharm is quite good for writing modules.
Requests, Flask and Tornado are some really well engineered pieces of software.
Kivy is great. I'm working on a huge cross platform app for work and kivy is very easy to build on. Kudos to all the developers.
Try the IPython notebook. Install Anaconda from http://continuum.io/downloads and type `ipython notebook`. It's like mathematica, but with Python.
I probably shouldn't say anything, but for as long as I have been a programmer, plus the length of this sentence, I've never seen a perfectly structured anything. It kinda is the little secret they don't tell you in school - successful projects are most often haphazardly put together messes, that miss every opportunity to use an awesome design pattern or a language feature. I wont bore you with my ideas as to why that is. :)
&gt; What's the next step towards becoming a real programmer and not just a canned matlab guy. Download python and the packages all separately? You (I think) already have everything you need, because of Enthought Canopy... I wasn't aware of this, but from the Enthought website it appears that Canopy has replaced the previous Enthought Python Distribution, and so Canopy should have already installed all sorts of goodies on your machine for scientific/numeric Python, such as: * Python itself * numpy * Matplotlib * iPython * scipy And other libraries. &gt; But then what IDE do I use. For an IDE, you can just start with IDLE (included with Python), or try something bigger (the free community edition of PyCharm seems to get very good reviews here). It's up to you. A Google search for "Python IDE" returns a lot. There is so much info about Python for scientific or numeric applications out there (including a book by the person who wrote pandas) nowadays. It's a great time to do this. 
especially `namedtuple`
Kenneth Reitz (requests) makes some beautiful APIs. Armin Ronacher (Jinja, Flask) turns out exemplary projects and code. It always makes me laugh when one of his "Python 3 and Unicode" articles gets posted on here (they're invariably negative) and some eejit accuses "the author" of not understanding Unicode. Your man Armin knows his stuff backwards and forwards and inside out. I must admit, I don't know the lead dev's name, but Scrapy is mightily impressive. Masterful marshalling of the power of async and Twisted. 
This is absolutely **not** true for all of the standard library. I am a fan of the stdlib but it is far from perfect e.g., * There's a continued holy war going on about whether the use of *eval* in collections.namedtuple's implementation is bad * There's an inconsistency in the [shlex](https://docs.python.org/2/library/shlex.html) module - shlex.split is posix by default, shlex.shlex is not posix by default In addition a significant chunk of it is written in C
Use Anaconda to install everything. Building numpy and scipy on a mac is a huge pain, and you won't get great support from macports, brew, etc. You'll probably need xcode if you don't have it already. Install numpy, scipy, pandas, and whatever domain-specific packages you need (e.g. scikit-learn). Instead of an eclipse-type IDE, I use MacVim and the iPython notebook. The notebook lets you work in the browser, editing short snippets of code and getting inline plots, html renderings of matrices, and so forth. It's going to be closer to Matlab for interactive numerical stuff, although you'll still want to move your code out of the notebook and into modules and scripts as you get it working.
&gt; installation nightmare that are the linked C libraries that depends entirely on the platform, it's pretty bad on windows, but there you often have binaries available. and it's not really a problem on linux. no idea what it's like on osx though.
Following some major differences: * No validation of queries in client code (make code much more lightweight) * Send and receive as json. (Faster 20k docs from 6.5s to 1.3s) * API is more lightweight e.g. add consums now only dicts. * Wildcard search strings need to be explicitly set. * **Python 3**
idk, I'm a newb and love Ronacher's work, and yet I've found the criticisms are very on-point. I haven't seen anyone accuse him of not 'understanding unicode', it has more to do with a fallacious central argument being too tied to doing things 'the Unix way'. I think everybody respects his work a lot, and it's disingenuous to portray all the excellent retorts to his dismissive Py3 pieces as some ignorant drivel.
Second for requests. 
You're not going to find a job like that. You have to make one.
There are always some great, valid retorts. Typically, one of the most highly-voted response is, however, of a "this guy just doesn't get Unicode" nature, assuming he's some ASCII jock who's never seen an umlaut in his life. Perhaps I haven't understood you correctly. Why is arguing that code needs to run properly on UNIX/Linux and Py3 makes that significantly more difficult "fallacious"? Sounds like a fairly reasonable expectation to me. 
I completely agree. I'll add to you: One thing I had hoped to see with Python 3000 was a complete break. I wanted rewritten, cleaned up stdlib code with new and human-comprehensible APIs that would power backwards compatible API shims. Unfortunately, what we got wasn't anything like my hopes. While some parts of Python 3 are wonderful, that the APIs barely changed was disappointing. In the meantime, people are writing layers over Python's stdlib. Kenneth Reitz's requests is an excellent example of that, but there are others out there. I think everyone's dream project is to provide this kind of cleaned up API layer to the Python community. Do keep in mind that I understand that writing programming languages is hard. I've done a lot of Python 3 work and really enjoy. I just wish I could enjoy it more.
&gt;What do other 'magic' methods do? There are lots of them, shown in the language reference from [here](https://docs.python.org/2/reference/datamodel.html#specialnames) to the bottom of that page. Many do things based on certain syntax used on the instance. Your class will be provided with different ones based on which class or classes it inherits from. For example: &gt;&gt;&gt; class Foo (str): pass # inherit from the string class &gt;&gt;&gt; dir(Foo) ['__add__', '__class__', '__contains__', '__delattr__', '__dict__', '__doc__', ' __eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewarg s__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__ lt__', '__mod__', '__module__', '__mul__', '__ne__', '__new__', '__reduce__', '_ _reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser ', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs' , 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspac e', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'repl ace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'sp litlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zf ill'] &gt;&gt;&gt; class Bar (int): pass # inherit from the int class &gt;&gt;&gt; dir(Bar) ['__abs__', '__add__', '__and__', '__class__', '__cmp__', '__coerce__', '__delat tr__', '__dict__', '__div__', '__divmod__', '__doc__', '__float__', '__floordiv_ _', '__format__', '__getattribute__', '__getnewargs__', '__hash__', '__hex__', ' __index__', '__init__', '__int__', '__invert__', '__long__', '__lshift__', '__mo d__', '__module__', '__mul__', '__neg__', '__new__', '__nonzero__', '__oct__', ' __or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdiv__', '__rdivmod__' , '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__ rmod__', '__rmul__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub __', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub_ _', '__subclasshook__', '__truediv__', '__trunc__', '__weakref__', '__xor__', 'c onjugate', 'denominator', 'imag', 'numerator', 'real'] You can see string words, like `__getslice__` in the former, and number words, like `__mul__` (multiply) in the latter. Let's overwrite something in the latter: class NonAddableInt (int): def __add__ (self, other): print "I'm not letting you add %d to me!" % other &gt;&gt;&gt; myNAI = NonAddableInt(7) &gt;&gt;&gt; myNAI # the int type has its own init that takes that 7 we passed 7 &gt;&gt;&gt; myNAI - 3 # subtraction works 4 &gt;&gt;&gt; myNAI # we didn't modify the original, of course 7 &gt;&gt;&gt; myNAI + 5 # we can't do this, though I'm not letting you add 5 to me! &gt;&gt;&gt; myNAI + 23 # or this I'm not letting you add 23 to me! So the `__add__` method is a special one that Python calls on an instance when you try to `+ &lt;something&gt;` to it. There's nothing special about the code in the special methods themselves, mind you. What makes them special is that Python just automatically looks for them at certain times, and runs them if it finds them. It runs `__new__` before it creates your instance. It runs `__init__` after it creates your instance. It runs `__add__` when you try to add something to your instance, etc... Other than that, though, they're just methods like any other. You can overwrite them or delete them. `&lt;&lt;` is the shift-left operator. `1 &lt;&lt; 3` is 8 (i.e. the binary '0001' under the hood is turned into binary '1000', or 8 in decimal). `&gt;&gt;` is shift-right. The PyMEL library for Maya took over the `&gt;&gt;` operator (via `__rshift__`) to make it connect nodes together. Nodes in PyMEL aren't numbers, so you'll never right-shift them, but it's handy to say that you want to connect the output of one attribute to the input of another, so they wrote their own `__rshift__` hook to handle it: This would hook the position of locator1 into the position of polyCube1, making polyCube1 follow locator1 around: locator1.translate &gt;&gt; polyCube1.translate I think took over division (via `__div__`) to allow you to break such connections, because it looks like you're cutting the connection between them: locator1.translate / polyCube1.translate You can define your own methods with `__underscores__`, though it's usually not considered a good thing, as it'll confuse others. Python isn't going to know to call your methods at any special times, so it's kind of a false indicator. Here's [some more info](http://www.rafekettler.com/magicmethods.html). &gt;On a similar note, can you explain private methods? Other languages, e.g. C and Java let you mark variables and methods private, and then it's impossible to use them if you're not their owner. A class can use its private things, but nothing outside the class can. Python simply doesn't have this. You can always get to anything. This panics people not used to being unable to hide things. The way Python devs deal with it is just a convention. They name things with a leading underscore as an indicator to others that they don't intend for you to use that particular method or property. You still can, which is nice (Python errs on the side of not knowing what you might want to do with things), but at least when you see `_fooMethod` you'll know you're not really supposed to call that yourself. &gt;If each Blub must be named Blub1, Blub2, etc now, what's the advantage Well, suppose it's more complicated. Suppose instead of Blubs we have Chars - characters in your game - and each has health, experience, money, hit points, an items inventory, and 50 other things. You can write up that set of things, and the methods to work on them one time, and then spawn as many characters as you want, and each can keep track of its things for you. You could also write methods that take other characters as arguments: char1.summon(char2, char3, char4) This could cause the other 3 characters to check their own state, like where they are in the world, what they're currently doing, if they 'feel like' responding, if they're more powerful and important than the calling character, and so don't need to be bothered responding... You'd write summon as a method of Char, and build all that logic into it, and then every new character you created could be summoned, and would figure out what to do when summoned on its own. &gt;Your last two paragraphs make it seem like classes are ultimately a bad thing, wasting time and length. What is the alternative (functional programming?) and what are its advantages? This is the subject of long books, debate, and ongoing research. Object oriented programming was a big, exciting, new discovery a few decades ago, and it made perfect sense to the human mind. A car has all this information built into it. We should model that in the computer. When you drive a car around, it brings all of its state around with it, and the object model seems to mirror that very well. Your car class instance has properties, like how much gas is in its tank, how full its tires are, which direction its facing, etc, and these things are really tied to the car. They're not just bits of info floating around in the world. Java in particular is very fussy about all of this stuff. You really have to define relationships, and say what things are, and what implements what, and it gets very involved. I've seen examples of Python code that are rewrites of Java code, and they're often 7x smaller than the Java, because there's so much boilerplate and ceremony around objects. But even Python's classes can lead to large code. I just rewrote a module at work yesterday. It was two large classes. Now it's just a bunch of loose functions. It's far more generic - not specifically about the 1 thing it used to be about - and it's half its former size. It was very easy to see it as objects, though, and the OO code was fairly straightforward. I had to learn a lot more over the last year to get to a point where I could deal with it in a functional way. Given my history, it was harder for me to see it in that light. One of the ways people get away from objects, but still hold onto all that data, is to treat it as just that - some data. So instead of having an object full of properties and methods, you might have a dictionary full of data, and then there are functions that take data and transform it and hand it back. This is a very light way to work. You can pass that dictionary to anything that expects a dictionary, which is nice. Python isn't well equipped for this paradigm, though. Clojure and Common Lisp, in contrast, have a wide open class system that lets you write methods that can key off of multiple bits of data in such a structure, so you could call a particular 'multimethod' on a map (Lisp's word for Python's dicts), and it will find the appropriate method based on say, 3 different elements of that map. If you want your character to take damage, the multimethod could have a concrete method that notices that your data says you have an elf with more than 50% health, and she's holding The Amulet of Healing, and it could call a particular damage method based on that particular situation. I think it's fine to play in the OO playground for awhile. I just wanted to give you a heads up that there is more out there after that. By learning OO, you'll see how people have been solving issues for a long time, and you'll see what is still by far the most popular way that people work (outside of imperative style). That makes it useful. You'll get a lot of mileage out of being able to read and understand other people's code. New programmers - your peers who you'll likely be learning with - will probably be working this way, so you'll be able to share with them.
Bore us!
&gt; If only it was shiny enough linux can look *so* pretty, it's just a total pain in the hind quarters to get working.
Oh I know that, I've work in agencies for 10 years and its very much a case of "as long as it works". For my personal stuff though I want to try and do as good a job as possible.
Yeah, I've got a Linux box at work too, and work on a linux server. But its not designed to be a general purpose OS like OS X - I can't stand Libre/Open Office, and scientists INSIST on using word to write papers...
&gt; https://github.com/richlewis42/progressbar Oh, cool, the ProgressBarHTML class looks pretty handy! I think I/someone could integrate it some time ... Only need to add something like "estimated time left" to make it even more useful :) THank you !
&gt; But its not designed to be a general purpose OS actually it is. from the start linux was aimed at the desktop, it just happened to gain more popularity on the server. &gt; I can't stand Libre/Open Office yeah it's horrid, not that MS Word is much better. &gt; scientists INSIST on using word to write papers a *LOT* of papers get written using LaTex. if not most.
&gt;I have read that pandas, numpy, and scipy are good for manipulating data and doing math with them. I have no experience in any of these libraries and in SQL. In that case, I would start off using sqlite3 since it sounds like you are pretty new to programming and SQL in general. If you go straight to something like PostgreSQL or MySQL, you'll get bogged down or intimidated by just trying to install them and trying to get setup. With sqlite3, there is pretty much zero configuration or setup required to use it. You can use the console or GUI front ends with sqlite3 (sqliteman on linux, sqlitestudio on windows). Once you feel comfortable with SQL and making transactions to the database, then I would then graduate to the heavyweight databases.
&gt; assuming he's some ASCII jock who's never seen an umlaut in his life. That's especially funny considering he's Austrian.
It's not dead, Jython 2.7beta2 was released just a few days ago.
Those are hexadecimal numbers.
0x00, 0x16, 0x3e are first 3 parts of the mac that are fixed. The other 3 chunks are randomized. map() is used to transform the numbers to their actual 2 char wide hex representation using anonymous, inlined function and then ':' is used as a glue
Why does it use this . import style? from . import utils from .models import Request, Response, PreparedRequest 
thanks. this is more interesting that the original post
IMHO, SqlAlchemy is gorgeous, especially for their documentation.
One of the reasons python has such a strong following today is that (in addition to standard python syntax) the standard library was so well documented and relatively easy to use (in comparison to other things out there), not that it followed pep8 or was a super clean api. I can't help but think that py3k still hasn't really offered anything special to the python community other than the expected evolution over several generations of maturing software. Edit: Py3k really needed to be the promise of Julia, power of Go and cleaned up API of requests all rolled into one nice package.
I use 2 out of 3. I still don't understand what Flask is for if I already use Tornado.
Twisted and Zope have been around for a long time &amp; are still used by a lot of people. They might not be the best place to look for *learning* Python. They have a reputation for doing things "their own way".
I can't think of a real good one right now, but stuff like "As a programmer, I treat women like objects."
Really? I found it terribly confusing first time I used it in a Flask project. I wanted less exhaustive API details and more usage guide.
Switching to Python from MATLAB is a great choice. If you're interested in where science is going, though, keep an eye on [julia](http://julialang.org/).
numpy, scipy, matplotlib
Lots of Kenneth's work is awesome
No offense and I know this is really just half-whining, but I think it's really pointless to talk about formatting that is inherently visual and things like that without showing a screenshot/actual implementation.
I did something like this with a non-console, non-GUI program. (packaged exe) I wanted to display at run-time progress and log-like info. So I settled on writing to a local page in browser on auto-refresh. On top of the page is a CSS progress bar. My first time doing it this way w/o reading how people have been doing this. Turns out pretty well. 
I've been playing around with [MyHDL](http://www.myhdl.org/) recently. I really like the interface but I haven't looked inside yet.
SQLAlchemy is the gold standard for an ORM in any language.
I felt that way as well when I was using it heavily. But when I needed it to do the exact thing I needed those API details were invaluable. I'd love more examples in the docs but they are already huge and well written and they started with the most important parts. That just isn't ideal for beginners unfortunately. 
I got deep into the code while developing some tricky custom mappers and column types, I completely agree. It's one of the first I think of when asked questions like this. 
Can't speak for IPython notebook, but Sublime Text is fantastic. My "IDE" is Sublime Text and Terminal.
Anyone have any word on the “beauty” of the code for Mercurial? I haven’t actually looked yet, but it’s a project I’m interested in. I know one of their main design thrusts is performance, so I don’t know what kinds of compromises they’d have had to make.
Scrapy's lead developper is called Pablo Hoffman. And I second the fact that Scrapy is one impressive, well-written, extremely well documented software beast.
since you're starting out, the best to understand this is to put it on prompt and see what i produces. Let me break this down for you: &gt;&gt;&gt; 0x00 0 &gt;&gt;&gt; 0x16 22 &gt;&gt;&gt; 0x3e 62 Now we know what those 3 values are. `0x` followed by a number of alphabets a to e implies a [hexadecimal number] (http://en.wikipedia.org/wiki/Hexadecimal) The other numbers in the program are: `0x7f` and `0xff`, which are decimal equivalent of 127 and 255 The array after `import random` contains: [0, 22, 62, &lt;a random num between 0 and 127&gt;, &lt;a random num between 0 and 255&gt;, &lt;a random num between 0 and 255&gt;] So, if the 3 random numbers are 60, 64, 232, the value of the array now contains: `[0, 22, 62, 60, 64, 232]`. In the joining function: `"%02x"` is a [string formatter] (https://docs.python.org/2/library/stdtypes.html#string-formatting). `"%02x"` tells python to format the given number with leading zero, but only of size 2 digits, so the formatting result looks like this: &gt;&gt;&gt; "%02x" % 232 'e8' &gt;&gt;&gt; "%02x" % 0 '00' &gt;&gt;&gt; "%02x" % 12 '0c'
I'm just glad nobody has said Twisted. 
They are amazing pieces of software I use everyday but I don't think they are engineered that well, mainly because of the vast amount of legacy code.
Not a single picture?
My project http://ym2149.org/ has some decent unit tests. Edit: Why the downvote? OP asked for best examples of testing, maybe my unit tests aren't the best but they do enforce behaviour, are well-named etc. Please comment if you disagree and I might learn something too. Notice also that the project is integrated with a (free) continuous integration service, which is a valuable thing to implement if you're looking to up your game. 
Are you willing to pay for it? Then try /r/forhire. 
SQLAlchemy, Flask, ipython, jinja2 and requests
Quite bland based on the parts I have looked at. Besides, *everybody* uses git nowadays. At least in my mental checklist, not being on github is a strong hint of open source project being dead or dying ;)
Hahaha I came here to say **not** twisted.
&gt; through a process called Python Web Scraping. giggle
i wouldn't add matplotlib, but instead mention statsmodels, pandas and of course IPython
Those three bytes are vendor id's. 00:16:3e represent Xensource. You can look them up: http://standards.ieee.org/develop/regauth/oui/oui.txt
Certainly true, but it's never a bad idea to learn and follow good practices. 
Second for Tornado.
can also explain Jaccard Index? 
Pygame is based on SDL1, so no, this will never be API-compatible with pygame. SDL2 has a different API that is better for modern graphics hardware, so in SDL2 you are much more likely to get hardware acceleration. But it means surfaces, blitting, and refreshing the screen work differently. This project aims to be a straightforward binding to libSDL2 and its companions like SDL-image, leaving the helpers or higher-level game engine type stuff to other libraries.
as a long time django user maybe I'm missing something fundamental, but I recently started a project w/ flask and I'm hating every second of it. I can't see any good reason for all the wierd globals and black magic everywhere. The batteries-not-included philosophy sounds good in theory, but in reality you end spending all your time kludging together 3rd party libs until you have something like django, but significantly worse. The only good parts about using flask have been jinja and SQLAlchemy. ALL of the other libraries that are used to fill in the gaps appear to be sub-par, poorly documented clones of things django ships out of the box, with comprehensive documentation and all the edge cases figured out. 
One thing, from one pedantic scientist to another, please make sure the font in your plots and pictures matches the font you used for text in your document. There is nothing more embarrasing than having an ugly mismatch between fonts within a single document. Edit: matplotlib can do this if you use the tikz/pgf backend. I highly recommend it.
Anything that isn't a web framework?
Flask is not meant to be used as a Django replacement, it is meant to be used for creating small apps that don't need all the batteries included. There are loads of libraries to give flask the cool things django has but at the end of the day Flask itself is a microframework. I use flask if I need to whip together a web interface for a small app with one purpose ie: an app that pings a server once a minute and graphs a result. Its a lame example but you get the idea.
This all presumes that there is some ideal language and all we have to do is work toward that ideal. Unfortunately we really don't know what that ideal language will look like yet or even if it exists. As a result, every time you change an existing language, some will agree and others will disagree. It would be way more productive to start considering Python 3 as a separate thing. Tying it together with Python 2 by presenting it as an upgrade is creating pointless inertia. The Python 3 project deserves to fly on its own.
I am admittedly not the smartest programmer you'll ever meet but FUCK, Twisted is ridiculously complicated. Yes, the whole async way of doing things is unusual the first time you see it. I'm not talking about that, I'm talking about the API and look and feel of Twisted. It smells bad. And feels un-Pythonic. I've tried using it a few times, it just makes me angry. Now that there's asyncio I won't even be tempted to look at Twisted again. tl;dr Twisted is aptly named.
Add lxml to that. Fast and beautiful.
Python 3 is like Obama. Sounded like a great idea at first but ultimately ended up being a disappointment.
Thats awesome, thanks.
You can check wikipedia article [here](http://en.wikipedia.org/wiki/Jaccard_index) Long story short, Jaccard index computes the intersection of users of two subs divided by the union. so if two subs had 100 redditors subscribed to both subs, and 1000 redditors subscribed to one or the other, the similarity between those subs would be 100/1000 = 0.1
thank you! \^_^
&gt; NOT TRUE. OKAY. no need to shout. there are some packages that don't have binaries, but they really should. &gt;You want the same version of a package on both platforms if you grab a binary from the cheese shop it should *be* the same version of the package. &gt; you want the confidence that the packages you use on one are available on the other. or you could check beforehand. look, I'm sure anaconda is a great solution to a real problem, but not to most of the problems you mentioned.
You can use the dot on its own!? I wish I'd known that a month ago!
&gt;Python is considered a strongly typed and dynamically typed language. Most of its type checking is done at compile time. &gt;So, does that mean Python is also not a statically typed language? Can python do type checking at compile time? &gt;Yes, Python can be type checked somewhat at compile time. Uh... what? 
Dammit, at first I thought it was a way to code on an android device in python.
If I were to install a 3rd party library called `utils`, I personally wouldn't be certain about which would be used. I expect Python would consistently choose one or the other, but explicit is better than implicit.
His love for UTF-8 makes me think he's either worked **A LOT** with CJK, or not much at all. Frankly, UTF-8 is amazing and I wish everyone used it, but **SO** many places don't that it isn't practical for a project like Python to say "You know what, just use UTF-8 or get out".
How much of LXML is Python and how much is CFFI to bind to the C lib?
I'm sorry, but Kenneth Reitz' code is pretentious as hell. "For Humans"? Blow it out bro. And that podcast?? With the cheesy piano? Don't get me started.
Does it work for CPython as well?
You can do this with [qpython](https://play.google.com/store/apps/details?id=com.hipipal.qpyplus).
Oh nice, thanks.
Awesome. Keep up the good work.
Python's much easier to figure out than crypto; I'd head towards /r/netsec's advice sibling (should be in the sidebar, but it's difficult for me to see on mobile) and ask there. Do you have an example command to compare with? Do you know what the specific input being tested is?
Python 3 is not really an entirely different language from Python 2. Python 3 is a backward incompatible version of Python 2. There are already a good number of [packages working with Python 3 and Python 2](https://pypi.python.org/pypi?:action=browse&amp;c=533).
[Python 2 tutorial](https://docs.python.org/2/tutorial/appetite.html): &gt;By the way, the language is named after the BBC show “Monty Python’s Flying Circus” and has nothing to do with reptiles. Making references to Monty Python skits in documentation is not only allowed, it is encouraged! I guess they changed their mind
If we are taking about "publication ready", then the font in your plots and figures will almost always be prescribed by the journal, and it won't match the body text in the final published version. This pedantic scientist has noticed that biomedical journals tend to ask for Helvetica or Arial in figures - not sure about other fields.
Thanks. Ill post it there as well. There are a lot of sample programs out there for sdes. I chose to use Python for the programming part and the output goes bad along the way. The input was just a very simple 10 bit string of 1's and 0's. Basically the teacher wanted us to take the string and create several functions to manipulate the string similar to what sdes does. I have several online tutorials that walk step by step. 
This is true, it's meant for small single responsibility apps. A better example, and what I use Flask for: RESTful apis with some sort of admin dashboard. Django would be overkill for many of these since i really only need bits and pieces depending on what the API needs to process its requests. Working on a cross-functional team this helps to enforce small services that have one responsibility in a SOA 
&gt; it is part of the sys.stdout And current sys.stdout is always is ... Close your eyes and follow for Guido's horn. AFAIK python3 is the only language with text interface to stdin/stdout by default.
Some of these dont make sense at all. It reccomended nfl. The national football league. I am not a fan of sports in any fashion. I dont get it.
The project says works best under pypy, so it seems to that it should work under CPython
While python will 'proof read' at run time, it's pretty clear he didn't. I couldn't get passed that first paragraph. 
Thanks for this post. How do you get into freelance work? I'm about to graduate from undergrad and I regard myself as a pretty competent Pythoneer. How can I start/market my freelance career? Where do you find work?
generally, it's a bad idea to copypaste code into a prompt without understanding what it does, for the same reason why eval() is a security risk of course generating some strings is read only and safe, but a piece of code can as well wipe your files
Fifosine, I started out (and still am) on Odesk. 
At least for documentation, Django.
It's so new, I haven't tried it yet. Why don't you tell me :-) It should.
Nobody mentioned the Pyramid?
Honestly, the first few years as a freelancer sucks. There's too many things to watch out for and you're going to get a few "The Devil wear's prada" like client's. /u/greedy_python's suggestion about oDesk is a viable path but there's serious competition on there as well.
PradaDevil clients are very easy to spot. Apart from the obvious "build me a facebook for 50$" I've only had one that got past my filters and I just gifted him the ~2 hours or so I spent on the project and closed the contract. Some clients one just can't afford :) 
I recently discovered requests. It's so clean. Love it. 
Isn't this what Perl tried to do? That seems self defeating to me. When I talk to curious people outside the community, they always mention the schism between 2 and 3 as something keeping them away from the language. It seems the python project has given up on 2.7 as well. I was recently trying to use NamedTemporaryFiles in Python 2 and noticed a bug. I looked at the bug report and it said fixed for 3.3 and 3.4 (which I normally use for my own projects). 2.7 was what I was using though, and someone mentioned that 2.7 seemed to be neglected. The guy that closed the bug report said something to the effect of, Python 2 doesn't matter anymore, and closed the thread. 
No its full time. 800 USD gets you going in India ;)
:)
well, it is a beta app. As more users are stored it will become more reliable. It is not Netflix, you know.
The code for all of the figures in "Statistics, Data Mining, and Machine Learning in Astronomy" is available at: http://www.astroml.org/book_figures/index.html I find this to be the single best jumping off point for making publication quality figures with Matplotlib. Basically I find something that looks in the ballpark of what I'm hoping to do, and then start tweaking settings. 
I like seaborn quite a bit for my personal data visualization, but I find the aesthetic less compelling for figures that go into print. Maybe it's just a personal bias. 
Were you into web development? Which frameworks did you use?
Why not build a small portfolio and get your own profile going?
I have one but its very hard to get work off elance/odesk, its very competitive there :(
Thanks. I've tried to improve the article.
I tried oDesk for a while, but I found that: * The quality of the clients is low. The best I found was people implementing a Minimum Viable Product - "just get something shipped to show investors" sort of work. While it's a doable business strategy, I want to be the guy who writes quality, bulletproof code, not the guy who can squeeze out something low quality but acceptable in a minimal amount of time. * The quality of the competition is low. Every job seems to get at least half-a-dozen bids in broken english for less than $20/hour. Couple that with clients who aren't really knowledgeable and you find yourself having to explain why code is a craft that involves quality rather than a commodity and the sweatshop in the Philippines probably won't give that quality and will end up costing more in the long run. * The lack of trust on both sides leads to some really crappy arrangements. The oDesk team software, for example, randomly takes screenshots for the client so that they can ensure you're working. I've also seen ads where they legitimately wanted you to do a screenshare the entire time you're working. I have other clients' info on my machine - I am not willing to expose them to this sort of spyware. Not to mention that if I'm designing your software, I might be scribbling notes and diagrams onto a physical piece of paper, so my screen is not a good reflection of whether I'm working. This also ties in to the low-quality clients bit - if you want to do this to someone, what you want is an employee, not a contractor. If you think this is something acceptable to do to a contractor, you aren't they sort of person I want to work for. * The bidding process is also screwed up by this lack of trust. So many clients want you to do a test project for very little pay before they'll hire you. I don't have time to work for next-to-nothing. Not to mention the fact that I'm pretty sure some clients divide their work into discrete chunks and make all of them into test projects, so they get their software and never have to actually hire someone. * Because of all of the above, I found myself spending more time bidding than actually working. The quality of my code began to suffer. I basically saw my work turning into the same sort of bargain-basement code that I've heard oDesk described as. I don't want to be a bargain-basement coder, so I stopped working on oDesk. Is there some secret I'm missing? Does it get better after a while so that you don't have to spend more time bidding than coding? Is there a hidden group of clients that are decent and knowledgeable, and aren't just trying to implement an MVP? 
Took a look. You're getting paid $5 an hour by your current emplyer? Would you be willing to subcontract ?
Python is a server side language, It is not executed in the browser (at least not without making major modifications to the website infrastructure) The task you describe could be possibly achieved using JavaScript if you have a decent jsonp source of information. But alas Reddit posts cannot contain JavaScript. The best option may be to create a bot which makes a post and then periodically edits it with the latest stock information. The bot will run of a different server(perhaps your own machine) and use the Reddit API. There are many bots posting useful information on Reddit, the one I remember off the top of my head is [RelevantXKCD](http://reddit.com/r/RelevantXKCD)
I only fix bugs other people make on my spare time and i charge 130 an hour on Elance. I started charging less and going up the price every time i got to where i'm at. Second year doing i make 45k additional last year.
* Find quality clients by drafting a serious, well-written and well-researched proposal. I don't do websites so it might be a bit different for me, but I will spend half an hour researching possible solutions and show to the client that this isn't a boilerplate proposal. * I've won jobs with over a dozen total bids - I think that non-broken english helps. * No screenshots. I'm at my most productive with emacs open on the left side of the screen and bangbus on the right side. That's how I roll, Mr potential customer. * No test projects, small proof of concept-s are ok. Hope this helps. 
Difficult to start off doing high end freelance gigs; what experience do you have? you're in school, have you contributed to open source projects? You have to have something on the resume that says you can actually do something vs. courses. I didn't start doing contracts until I was 8 years into the career; I had been places and done things for real companies. That being said, you can always find contacts on Dice, need to filter carefully though. Read up on employment law and understand what a contractor really is: they cannot make you work in a given spot nor time. Once you're ready, look at 1099 contracts or corp-corp. I used a passthrough agency to handle billing, it also provides direct deposit, retirement, option for healthcare, expense reimbursement, etc. Contract rates are not hourly rate * 2080 to get your annual salary, you're a contractor, you have to think in terms of being occupied 1/2 the time with a contract and the other 1/2 trying to find the next one. $60,000 a year is not $28.85 an hour, it's closer to $60/hour. If it's a longer term contract, you can tweak the numbers down a bit for the stability and guaranteed income, but I wouldn't go lower than $50 in this scenario.
I wouldn't freelance straight out of school. It takes years to build up contacts. If you want to see what it's like, go work for a consulting firm for a couple of years, during which you'll meet a lot of people who will inevitably need help later. I do python and android development, usually have 3-4 clients at a time, turn down work regularly, and bill $90-120/hour. This is also my 2nd stint at being self-employed. The first time did not go so well, and I learned a lot in the process.
I guess you know about pysdl2?
Mind elaborating? What kind of bugs? 
Real world example, I had a lazy admin ask me to make him something that would let him send a wake on lan packet to his desktop from his home machine so that he could use remote desktop. Flask + wake on lan library and a button were all the ingredients needed. The firewall was configured to only allow his home IP access to the app. It was dirty but then so was the rest of their network.
The Devil Wears Prada is a movie about an infamously cruel and strict boss. I assume PradaDevil is his shortening of typing out "Devil Wear's Prada" 
I started out with PySDL2, which was fast enough, but I wanted to know how much faster a cffi version would be. In pypy the cffi version is five times faster than the ctypes version on a little scrolling TMX (Tiled) map demo. I was a little confused by the relationship between PySDL2's ext module which contains higher-level wrappers &amp; game engine stuff, some quite nice, some not coupled to SDL2 at all, and the lower level stuff. pysdl2-cffi aims to only expose the C libSDL2 interface as a flat namespace. It could become the backend for a higher-level game engine but it won't itself contain, for example, a sprites library or a function that uses PIL to load images into textures.
Do you often have to convince people of your framework? Whenever I look into a little freelancing, 99.9% of stuff is always "Wordpress/PHP only", but the people aren't technical that are posting it. Always tempted to say yes, and just deliver a product in Django. Except that definitely isn't the right thing to do, haha. 
Know A LOT of talented people in various fields. Don't do fixed price projects unless you are certain requirements won't change (they always do) and you'd make more than if you charged hourly. If you bill hourly your clients will consider your time to be valuable, and every change they want has a price. Always have multiple clients at the same time if you can. Each client adds an amount of overhead though, so too many clients &amp; you'll lower your effective rate. Track your time well, and always update your records at the end of the day. Invoice regularly. You'll need a steady cash flow. Your bill rate should include enough for you to save toward dry periods. 
Performance, Memory management, Logic. I was working last week on a board game that someone made that a specific place on the board would crash the app in windows. It happened every time and there was really no info on it. I used a tool to instrument it and then ran through the output to realize that one of the objects was overflowing that was 4 hours of work.
While I greatly dislike PHP/WP, Wordpress is a fantastic product for non-tech savy people that provides a lot more value to them than what anyone could provide as a specialized/made for product in the same budget. Free + $100-$200 in plugins will still trump $1200/week invoices, even if WP is a halfassed solution to what they need. Otherwise if I get to a client first, I may stear them towards a specific framework ( ultimately it might be WP just because it fits what they need over what I want ). Side note, my favorite ( most hated client ) was this crazy expatriot british gentleman. I was the only one to land a contract with him because I was able to decipher "Our website is written in blue but I want it to go red!" In human he was saying "Our website is written in PHP ( blue themed ) and I want it to go to Ruby on Rails ( red theme, and for a lot of non-tech people; Rails == Ruby )" Otherwise, choosing technology requires social skills and is irrelevant to technical merit. Client's don't care or know what the hell you're talking about so you have to present yourself as confident and in control when promoting decisions ( or perhaps not presenting the decision and just making it. )* * I made a lot of mistakes when I originaly went freelance, one of them was deferring constantly to clients for decisions. In the last few years I just made decisions and iterated quickly, demonstrating what I was doing to them and letting them vote on what is versus what could be.
&gt; Not to mention the fact that I'm pretty sure some clients divide their work into discrete chunks and make all of them into test projects, so they get their software and never have to actually hire someone. I haven't been doing Python freelancing, but I've encountered this in other types of projects on elance. 
Indeed their parallel infrastructure, kernel architecture and overall design is all impressive.
I just started freelancing last year. I do 20 hours/week. Django stuff, mostly. $80/hour. San Francisco.
You ate searching for an algorithm. There are plenty. http://en.m.wikibooks.org/wiki/Efficient_Prime_Number_Generating_Algorithms Did you even *try* Google?
Thanks for the reply :D I don't really dislike WP, but web design isn't really my main interest. For that reason, I've never really taken the time to learn/master it. PHP is familiar to me, but I'm just not interested. For that reason, I've taken to looking for projects in Python (or Django for the web mostly), but there's just not very many people asking for things in Python that I see. Although there is a ton of stuff that COULD be in Python or Django... 
Oh great, now I have "bangbus" in my Google search history! ;(
A board game in Python? Or are you working mostly in C?
The mark of a man. 
supplementary or primary income?
Last thing I charged $150/hr for (though I initially asked for $200). Plenty of work to be had if you can communicate and use Python &amp; other tools well. Why confine yourself to one language, though? I basically told people that I could use whatever they needed (within reason), and this ended up being SQL, Python, Ruby, JavaScript. Flask, Rails, Backbone.js. Whatever. Don't confine yourself to a few tools; don't be a carpenter who can't use a screwdriver. I hate consulting, though. So I don't do it anymore.
primary
That's just an example of a simple app that exists. The point is more that Flask is for building small applications that don't need all the functionality baked into something like Django. The other great thing about Flask is that because it is so stripped down it can be used for light weight web apps. Think embedded systems. Someone else pointed out that they use it for creating Restful API's. I have done this myself and it works like a charm, no need for extra bells and whistles.
Damn it, I couldnt resist. Thwarted again! :/
that's ~ 80k without taxes. the impression i get from SF is that things are expensive. you hold up fine? single, as far as financial responsibility is concerned? 
Mercurial code is so heavily optimized that it definitely not winning awards for it's beauty.
I've been doing Python freelance for about 3 and a half years. I'm primarily a full-stack web application generalist, my specialization is in Django. I tend to rotate clients (and rates) every 3-6 months, trying to keep one or two longer-term lower-demand maintenance types of clients and one novel development more full time client. I started at $35 an hour, my current asking rate is $85 (but I have legacy clients as low as $60.) Django is pretty hot right now, especially for someone who also has either dev-ops or front-end skills (on team projects my front-end experience usually guides me towards handling a lot of front-end development, integration, and debugging.) Most of my larger clients come through technical recruiters, which is certainly costing me some potential on my rates but also limits some of the stress involved with finding, vetting, and maintaining clients.
I've lost some potential clients this way, but I always just try to assess their needs and guide them in the right direction. Some clients just want some basic marketing pages with some non-novel, no customization required basic content management. For them Wordpress is probably just fine, and cheaper than a custom Django project. But if someone is looking for a more enterprise level system, is specing out a project with a larger scope and the propensity for change and customization down the road, or has novel requirements for architecture or features, I'll usually try to guide them towards Django as it is simultaneously what I'm most comfortable with, and often a good fit (I work a lot with other Python people, or algorithmic projects with needs paired well with existing computational libraries in Python.)
&gt; I only fix bugs other people make on my spare time and i charge 130 an hour on Elance. &gt; What tool do you use for instrumentation?
Twisted was remarkable in its day, it's just showing its age. Asyncio exists in part because Twisted and other early async modules paved the way. That said, I agree it's not a great example if you want to learn about clean Python APIs from a modern perspective.
It was in python with the OpenGL bindings i think they are planning on greenlighting it. Won't talk about the customer though. I do python C# and java only venture into c or c++ if there is a reason. You can't make me work on javascript even if you buy me car.
Depends on the problem in this case i used a tool i have that is custom made and figleaf. I do this for play budget since i have a normal job and a programming class that i teach. If there is interest i can probably put a whole video class on debugging python.
If you could turn this into an api i would love you forever is in my list of things to do. Would simplify building quite a few of my apps. http://www.dmoz.org/
Do you have any experience with Zipkin (https://github.com/twitter/zipkin)? I have never used it, but I am curious to see what other people think of it. I use some enterprise grade instrumentation tools myself at the moment (IBM stuff, Compuware stuff, CA stuff, etc...). But doing one off contracting gigs on the side with those sets of tools is kinda overkill.
Zipkin needs to be made has a conscious decision when you design the system and its a really powerful tool. Most of the problems i get though are localized or in the app space. I feel there is a correlation between service developers and people that take longer to look for help with problems. I use it on my own services at normal work.
80k is higher than the median **household** income in SF. I assume he manages.
Sorry, but it is scraping and scrape, not scrapping and scrap. Anyways, try crawling IMDB or Facebook.
Twisted is my favorite library but its definity not an example of a great python project... its simply not user friendly but i can make it talk to damn near anything properly AND fast.
whats wrong with autobahn ?
How would you recommend getting involved writing statistics scripts? I have degrees in Math and Statistics plus know my way around R, Python, SAS, and SPSS
I wrote more than a couple of Flask+SQLAlchemy "simple" web applications and I reused a lot of my own code, and while I missed some Django functionalities from time to time, I chose to deal with my own *patchwork* instead of a framework with a lot of promises **and** a lot of code to read to actually get complex things done. Also all the knowledge I needed about Flask or SQLAlchemy was available in the documentation, which is a very big win for me. 
I really wouldn't consider django to be overkill in this case.. for JUST a simple rest api, sure. but when you add "admin dashboard" you're talking about forms, users, login and session management. All of which are 3rd party libraries in flask. not to mention you'd have to write your entire dashboard from scratch. Django would give it to you out of the box. 
While this may be technically true, it isn't at all relevant. The request object in django is explicitly passed to every request, and nothing will ever attempt to make use of the request object without my knowledge. this makes my views easily testable by simply calling them with a mock request. I can easily reason about how other code will behave in the absence of that request. I can easily reuse parts of my code outside of "the request context" because none of it will attempt to access the request unless I explicitly give it the request to work with. Explicit is better than implicit. 
I like [Function Annotations](http://legacy.python.org/dev/peps/pep-3107/) much more than putting the types into the docstring.
Not much. I just googled "median household income san francisco" and clicked a link that said 72k. I'm sure you can do the same and probably get a better distribution if you look. My point was that tipu was concerned that 80k is not enough to live comfortably in any part of the US, which is hilarious.
Payment by the hour would work out as... Getting paid on say a weely basis of how many hours you put in that week, delivering small features as you complete them/invoicing when you complete them although tha'ts less consistant.
There are no global variables in Flask. Everything is either in the context of an app or a request. It's like saying that using `self` in a class is passing around a global variable. If you know of some exception to this in Flask, then please give an example.
It's also broken, don't use it. Consider a project with the structure: foo/ __init__.py models.py views.py If you do some setup in the __init__ where say you do (and this is typical for a basic Pyramid project): from .models import DBSession DBSession.init(connection_args) Then in the view you do: from foo.models import DBSession The Python interpreter actually creates 2 instances of the models module, with the one in views having an uninitialized DBSession object. You have to be completely consistent about import paths so it's much better to be explicit given Python's capability for somebody else to monkey patch your code. I ran into this exact problem, with my DBSession object, in a Pyramid project (but it's a problem with Python's import system, nothing to do with Pyramid). Also, Pyramid is a great example of how to build a framework in general, not just in Python. It does the basics that every web application will have to do (configuration, request parsing, url routing, and response serialization), then defines interfaces for just about anything else letting you plug in any libraries and backends you want to use with pretty minimal work, and more importantly, letting them interact reliably without having to know what is on the other side of the interface. It actually lets you replace the configuration, request parsing, url routing, and response serialization too if you want to. It's all just done through more interfaces.
Completely impartial: peewee n huey!
&gt; It's like saying that using self in a class is passing around a global variable. You can't use self in a class unless you've received 'self' as the first argument of the method call. None of my views receive a request or an app as the first argument. so your analogy is completely flawed. 
The "API" abbreviation has been hijacked by web folks to mean "XML/JSON-via-HTTP call/response interface", but it has a much more general meaning ("call/response interface", e.g. any old native method/function/whatever in any old programming language). Which one do you mean?
Perhaps not globals per se, but there are definitely things that one might call "contextual variables". Essentially, when I import `request` and `g` (and a few other variables iirc) I'm not importing a request object, or a global object. I'm essentially importing names that, in the right context, will point to the things I want them to point to. That's magic, pure and simple, and I just don't like it. `self` isn't one of these contextual variables, because it directly points to something. In every context that it is visible, it points directly to the object I'm working with. That's completely different to variables that I import in one context, but need to move to another context for them to be relevant. It's weird, and icky. That said, Flask is still a brilliant microframework, and when I need small, simple Python webapp, I usually turn to it, because nothing else really works quite so well. I've just got to cope with the fact that not every library works in exactly the way I expect it to.
Zope probably because it's long been a dumping ground for first-attempts. &gt; Python doesn't have a library for date times, let's create one called DateTime. *time passes* &gt; Man, that's shit. Let's write a better one for core
&gt; from foo.models import DBSession You don't. You do this instead: from .models import DBSession 
This is basically my complaint, but phrased far better than I could put it. Thanks! :P
That's a valid complaint, but the entire point of importing those variables is so you don't have to constantly keep writing them over and over again in your function signatures. They are somewhat magical, but there are only a few such variables, and they do exactly what you would think they do.
I mean the "XML/JSON-via-HTTP call/response interface".
Go to Odesk, I see at least one job per day that requires one of the four tools you mentioned.
Go ahead and put up a link to your code. You'll have much greater chances at getting feedback if you don't add unnecessary steps to the process. (It's like when somebody asks you if they can ask you a question…)
Requests. BeautifulSoup4.
I didn't; I met people through friends &amp; friends of friends. Being in a major city probably helps with this; I could generally talk to the client in person. But there are plenty of people willing to pay $150+ if they believe you are worth it.
Sure as long as you're not trying to reuse anything outside of the request context (like in a celery task perhaps). in which case all bets are off and things you wouldn't expect (like url_for) will just blowup on you. 
the language might be named after monty python, but a python is still a snake. it's probably a bit of both.
You could also [just run this from the command line](http://stackoverflow.com/a/3452888/1309020): ``` pip freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs pip install -U ``` Be super careful with batch-upgrading packages, though, because you might break old projects. Of course, all the virtual environments you are using ;) negate that issue.
I have a rent controlled apartment, so I'm "only" paying 1200/month in rent. A few weeks ago I think I calculated my monthly survival at $2400. (rent + medical insurance + transportation + burritos). So $30K is the income a single, healthy adult needs in SF to *just survive*. One thing to consider with contracting is that not all weeks are going to be working weeks. You're gonna have some time off and you're gonna spend some time looking for the next gig / improving your skills / researching. So for 20-hour weeks, don't do hourly_rate * 52 * 20 Instead it's something like hourly_rate * 45 * 20
Python allows you to add attributes to classes: class Foo: bar = 7 def __init__(self): pass &gt;&gt;&gt; Foo.bar 7 If you're asking for a way to do this: &gt;&gt;&gt; x = Foo() &gt;&gt;&gt; x.bar 7 Then you can do something like this (although I don't immediately imagine a situation in which this would be useful in well-designed code): class Foo: _bar = 7 def __init__(self): pass @property def bar(self): return Foo._bar &gt;&gt;&gt; x = Foo() &gt;&gt;&gt; x.bar 7 &gt;&gt;&gt; Foo.bar = 10 &gt;&gt;&gt; x.bar 10 &gt;&gt;&gt; Also, these kinds of questions are probably better suited for /r/learnpython. Despite the connotations of it being called "learn python", it's a good place for people of all levels of experience to ask questions.
I'm confused what you're trying to accomplish. I've described a way for you to use the same attribute for every object of a certain class. The attribute in my example is "allocated" once as a property of the `Foo` class (not as a property of a `Foo` object), and it accessed via a property of a `Foo` object. Any and all objects of type `Foo` will access the same attribute of the `Foo` class. From the vague description of what you're trying to do, I'm getting a sneaking suspicion that this may end up being an XY-problem, in which you're asking about what you think is the best solution to a problem when in reality it would be better if you backed up and asked about the original problem you're trying to solve.
In Python programming we generally don't worry about low-level things like when memory is being allocated or what thing is the most efficient. Instead, we try to do what is most *correct*, or simplest, or elegant, or easy to understand. An attribute assigned directly in the class is a *class attribute*. It is stored on the class object and thus will be "shared" by all instances: class Foo: bar = 5 I'm pretty sure that's what you want to do. The other option is an attribute assigned *onto an instance*, which is called an *instance attribute*: class Foo: def __init__(self): self.bar = 5 In that case each instance will have its own `bar`.
&gt; First off, you didn't describe, you through code at me If you have a specific question about how the above code works, I would be happy to explain it to you. &gt;I understand you have a problem with people asking "noob" questions, but I've never had a problem in any other programming sub asking questions I have no such problem. If I did, I would not spend hours on reddit answering questions in various programming subreddits. I linked /r/learnpython not as a smug "what are you doing here" gesture, but rather as a suggestion for the future as that subreddit is more likely to get good answers to questions like this one. It's a subreddit dedicated to Python questions. &gt;Maybe it's your own personal problem, maybe it's the communities. I don't know. I'm going to ignore that in an attempt to help you further. Now, the actual question: &gt;Let's say I make a class with an attribute x = 1 and instantiate two objects. Memory isn't allocated to make x = 1 in both seperate objects? What if I changed one object's x attribute to x = 2? Would it allocate memory then? /u/kalgynirae is right. There is a difference between class attributes and object attributes. When you instantiate an object, its `__init__` constructor is called, which can assign properties to the object itself. In doing so, memory is necessarily allocated to store these properties. The syntax class Foo: x = 10 Does **not** create an `x` property automatically for any objects of type `Foo`. It creates a property of the **class** which is only created once and is accessible as `Foo.x`. My above example uses the `@property` decorator (which is explained in detail [here](https://docs.python.org/3/library/functions.html?highlight=property#property) if you are curious) to allow you to access the class property conveniently as a property of an object, because I was guessing that was what you were trying to do. If you have further questions, feel free to ask them. I simply ask that you don't put words in my mouth or make claims about my intentions while doing so.
Except that is not true at all. For instance there is an implicit thread local for hoir database transaction which is completely implicit. The request is also very frequently accessed through magical interals for the django translation system. Explicit does not mean that you need to pass information through as arguments. In Flask the app and request context is explicitly constructed. No magic. You create it, you destroy it. It's fulky documented. No hidden magic like in django.
Right there should be fine. I'd put it wherever it makes the most sense, really. (Another option is initializing it *after* the class definition.) By the way, if you really are creating a list from an iterator, then you probably can (and should) use a list comprehension or even just `list()` if the scenario is that simple.
Actually, I just remembered that there are some unexpected scope-related gotchas when you put code directly in a class block. In particular, there's trouble accessing already-defined class attributes inside of list comprehensions. That probably won't affect you, but if it does, read the details here: http://stackoverflow.com/questions/13905741/accessing-class-variables-from-a-list-comprehension-in-the-class-definition
Thanks. I'll definitely keep my eye out. It looks like it has the same syntax as python. Is it just pretty much python syntax with optimized math operations?
I've been doing freelance dev, mostly web, for 12 years now. I do a lot of python work at the moment, charge rate is USD$145/hr. I agree with zynix, a good solid base in tech is enormously valuable. Skills I have that set me above most of the competition: * I can represent my clients effectively - to the point where I perform the CTO role on contract for some of them, so that they have a competent, engaging and well-presented person who they can use in talks with investors and their own clients. * I can do strategy - I follow just about everything in tech to a reasonable degree and can assist in predicting where a tech market is going, what technologies to invest in etc. * I have reasonable networks - I can find people to fill gaps if needed, I can always find people who are specialists in particular areas for advice or review as a favour. * I am very strong in a broad range of related tasks - I can tell you which colours work together, I can configure your Juniper network gear (including VPNs, VLANs, OSPF etc), I can design and implement your systems and devops setup, I can review your security and crypto code, I can advise on, and implement, safeguards for financial and health data, do stakeholder engagement, budgets, architecture, design and implementation, testing, hire people, manage technical teams and much more. Much of this doesn't sound like python work but coding is at the root of much of it, and the remainder is the environment around my code - the networks it runs on, the people who need it, use it and write it. I really wouldn't say it's everyones cup of tea, but this is where nearly 20 years of commercial coding, 12 on my own or (now) as a partnership with a couple of other guys with similar skills has got me. Happy to answer questions if people have 'em, especially for people in the early steps - starting off on your own is hell and even if you're lucky and well informed, it's only slightly less hellish.
Cost of living, and lifestyle differences, aside... FUCK! you made in less than 5 hours what I've made in a full month! Kudos to you, and I hope you keep getting what you deserve. It's only that I become baffled sometimes with how much difference can have in your life where on Earth do you live (I'm aware that I'm still doing better that half of the world population).
&gt; statistical analysis scripts Python ?
It's very similar to MATLAB's syntax, actually. That can be either good or bad, depending on who you talk to. &gt; Is it just pretty much python syntax with optimized math operations? Not quite. Julia is designed to be faster all around. To understand the advantages it has over Python and MATLAB, though, you should understand a little bit about how they work. Coming from MATLAB, you know that in order to squeeze performance out of your code, you need to "vectorize" it. This often requires some extra thinking. For example, you might have an algorithm that is naturally expressed as a `for`-loop, but iteration in MATLAB tends to be slow, so you have to frame it in terms of "vectorized" operations. What is happening when you're "vectorizing" your code is using primitive functions that MATLAB provides which are written in some low-level language, such as C or Fortran. Basically, that's how you make your numerical code fast in Python and MATLAB: you write the part that needs to be fast in C or Fortran, and make bindings for the higher level languages. One major reason that MATLAB and Python are often slow when numerical algorithms are implemented naively is their dynamic typing. Very basically, the type of a variable is not known until runtime, so that the interpreter must do a lot of checking to determine what type the variable is and what operations apply to it. So something as simple as adding two integers, `a` and `b`, involves first determining that `a` is an integer, then that `b` is an integer, then looking up the appropriate addition function for two integers. In a statically-typed language, we already know that `a` and `b` are integers and the proper addition function to run at compile time, so these checks don't need to be done at runtime. Julia uses a "just-in-time" compiler to compile the code at runtime, resulting in vast performance gains by effectively gets rid of the constant type checking done by MATLAB and Python. Nevertheless, the language is still dynamically-typed, so it writes very much like Python and MATLAB. The bottom line is that you won't have to "vectorize" your Julia code to get performance: you can often write it in the naive way and still get something that runs quite fast. You probably shouldn't switch to Julia quite yet: it's a very new language with a nascent ecosystem. But I think you should keep an eye on it.
Are you in India or something? $750/mo seems extremely low. 
I'll be honest, it looks fine to me but there's not enough code to really analyze; unless I'm missing something, there's only about 60 or so lines of code to critique.
Appreciate your comment, 2 years after graduating MSc in Civil &amp; Structural eng I ducked out of a great but stressful Estimator/bidding job at a small contractor in London to get some space and perspective. Now making headway with Python programming (w/ unix, emacs setup) and taking my FE exam later this year to get Texas EIT status. I decided to pursue what interested me but from what you've seen do you think that combination of technical skills has a place in the market? I may only be able to find out once I start getting my hands dirty. EDIT: I guess all I'm asking is, have you come across people managing to put programming to work alongside more traditional engineering skills?
&gt; How do you avoid getting screwed over? Contracts? Lawyer here (for an IT consulting firm, actually). Holy shit, brother, of course a contract. If you don't have a contract, you will be fucked over by any client who isn't your best friend IRL, and even then, possibly still so. If you want to roll the dice, don't have any contract. But if I were you, I would pay a lawyer to draft a contract (a one-time thing) that you offer to any potential client before they offer you one of theirs. The person who starts the round of contract negotiations is in a stronger position. I would also incorporate your business or otherwise create a limited liability entity. Basically only ignorant people don't operate under limited liability. If you operate under a limited liability entity (corp, LLC, etc.) and get sued, worst case scenario your company goes under. If you operate without that umbrella of protection and get sued, worst case scenario you lose everything you own. The liability limitation prevents people from coming after your non-business assets. And don't worry—I'm an in-house attorney (meaning I have one client, and that's my non-legal employer), so I'm not trying to get business for myself.
This is by no means a compete answer, just glancing though on my phone. First, code reminds me of [stop writing classes]( https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;ei=Wcx2U-ukHcGxoQS7noDgBQ&amp;url=http://m.youtube.com/watch%3Fv%3Do9pEzgHorH0&amp;cd=1&amp;ved=0CDYQtwIwAA&amp;usg=AFQjCNHP7QXJvs74tLqbyaF9yRmwt3vJbQ&amp;sig2=eThj3UVd2k1fIvCru5k47g). The link says it better than I can, but the gist is that classes with one or two methods can probably be better phrased as separate functions. Second, asserting types with isinstance is pretty unpythonic. Just use when you need from the args you get, perhaps with a try except(s) to try a few different ways. For example, your code now would fail unnecessarily if passed a object to filters that has a __getitem__ but doesn't inherit from dict. 
Thanks for the detailed response. It makes a lot of sense the way you put it. I always wondered why vectorizing my code made it so much faster and now I have an answer. I also appreciate the heads up on Julia. Another reason why I love the open source community is they tell it like it is. If matlab had a new project they would tell everyone how great it is and to switch over immediately. None of this brutal honesty. 
PA is not the same as SF. Median PA household income is literally more than *double* the median SF household income.
edited, thank you! can you give more info about crawling IMDB or FB? that looks an easy task to me
Very true. But this shouldn't sour you on learning python: it's arguably the best language for science right now. It's what I write most of my code in.
Well, in comparing Scrapy with Beautiful Soup, Scrapy's power lies in its spider/crawling functionality. See how much data you can get from IMBD. Crawl through pages and try and mine the most comprehensive dataset allowed by your ability.
Argentina. And due to the exchange here, I was doing about $700/month. And I was in the lucky side of things :-/ Currently unemployed (got laid off along with 3 coworkers over a payment dispute), after serving for 7 years on the same Japanese multinational. I've started as a trainee in QA (embedded systems, fiscal controllers). Eventually I ended up restructuring everything related to how things were done in that department (I've designed, implemented, and maintained the testing automation framework currently in use), besides my tasks as tester. I was kind of the "QA Tech Leader". Heck, I've introduced there half of the process they are using (as a trainee, I've said, fuck all this, I'll at least use SVN/Trac and installed/maintained that for two years). You ask for traceability? I'll give you that, along with automatically generated reports in PDF. Having a hard time now getting a new job. I can, more or less (as you can attest) communicate in written English (orally, I kinda suck), after teaching myself to do it. I can learn new things (I've done Delphi, C/C++ in kernel space, Python) on my own. Sadly, I've never been a freelancer, I'm bad at selling my skills, and terrible at judging how much to ask for my work. Sorry for the rant. TL/DR: I'm pissed I got fired for asking for a raise. I would be in half-Nirvana if I've made something along the lines of $1k/month.
&gt; Money isn't everything. Oh, I understand that, alright. Otherwise, I should be living in Bs. As, Argentina, instead on one of its poorest cities :-). Still, I can walk around here without carrying a gun :-D That, and the lesser noise/polution/long commute, means I would be happier here selling hot-dogs than in [Insert Great City Here] earing 4 or 10 times more. Edit: &gt; and more meaningful that could help many people. And I'm learning. That means a lot to me. Of course, if I could make a living (spartan) and learn/help, that would be Nirvana!
Thank you for sharing this. Great insights from experience fellow programmers have shared. 
Well keep it up. Seems like you can handle yourself. I'm only starting my first full-time development job out of school in July. I've had a tiny bit of freelance experience but not with Python. 
Thanks! I'm all about keeping a life outside of work. Software Development is a great job but it's just that for me: a job. 
Anything goes, and it's usually around $125 an hour. I found a bunch of people asking for help on alumni lists for my college...it kind of fanned out from there. 
Great response, I'm taking the modicum of strategic effort and running with it. Really nice to have your longer perspective on it. I'm tutoring math and doing clinical trials for my bread, the python &amp; engineering is entirely blue skies at the moment, feels too important to get it mixed up with money right now! Absolutely, the abstract idea of learning to program is fine but it's almost meaningless without something interesting to do with it. In the workforce the 'do' is not an issue, finding a 'do' that is interesting and technically/financially viable while solo seems like a fun issue. The code should not be the focus I guess, it's just a tool like you said! Edit: Wow this is reminding me how long it's been since I've tried to write anything of substance, time to shake the rust off!
&gt;If there is interest i can probably put a whole video class on debugging python. That sounds interesting. You might also consider trying to get something like that on pluralsight.com. They don't have a whole lot of content that's python specific.
I haven't checked out the code yet cause I'm on a mobile device at the moment but based off the other comments check out Jeff Knupp's "Idiomatic Python" I learned a TON from it!
Be very careful with Facebook. It's one of the few sites that has actively sued developers attempting to scrape their content. OP is likely trolling.
Just as an FYI, Twisted was established before a number of "Pythonic" conventions became established.
If David Beasley can't grok the PyPy codebase, then there's no way I would be able to.
My friends studio apartment in SF costs him ~$3k a month. After taxes... it's a huge chunk of his income, and he has good income
None of the things you criticized are his code, and yet you act as though you have criticized his code.
If you are thinking REST API, then: http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api Then you can consider things like [Cornice](http://cornice.readthedocs.org/en/latest/), [Flask MethodView](http://flask.pocoo.org/docs/views/#method-views-for-apis) or [Tastypie](http://tastypieapi.org/). Depending which framework yo prefer
Made something similar a month ago, should be cross-platform: import pip, subprocess [subprocess.call("pip install -U " + d.project_name, shell=1) for d in pip.get_installed_distributions()]
&gt; I was doing about $700/month Is that after taxes?
Best of luck with the MS... but at least you can retire and take care of yourself, right?
If I saw my worker had emacs and bangbus open, I'd be disgusted and outraged... I'd give them a call and tell them to close that trash immediately and install vim.
Sounds nice! Next step would be a straightforward object-based wrapper of the whole thing, I think.
Is there anything you should specifically be wary of if a potential client offers a contract and you haven't drafted one yet? Or is it potential to be screwed every which way unless you know exactly what you're doing? I'm interested in trying out contract work at some point, but it sounds a little intense getting an LLC or corp going just to "try it out". What's the best way to jump in and accept a contract without having any foundation down for a business? Is it best to contact someone to get you set up, or is this something you have to do yourself? I wouldn't have any idea where to start...
filthy casual
What would you like the api to look like? How would you use the data that is?
TIL about bangbus.
Kids these days.. 
whoops 
Thanks. There should be more tests. Is PEP-8 really an issue? It's a Style Guide not a style requirement, the underscores are specified "as necessary", and when I'm working on pym2149 on the train on a small laptop while standing, they never seem necessary. Following instructions is a good place to start, but religious adherence is an effective way to fail to become a better programmer. 
Yeah, cool. Do you know of any tools that use them. I know someone used them in a version of tinypy that compiled to C++, but not sure if there's much else. Found this though... http://stackoverflow.com/questions/1275646/python-3-and-static-typing
Apple has put a stop to cross compilers, I've heard. If your developing for Apple, your best bet is obj-c
haha. Hilarious exchange. :)
Neat! So that is immediately usable on python3?
Yes
Learn how to do all those things with Apache Storm. It's going to be huge a year from now.
Where do such clients host their sites? It seems to me that most hosting providers focus on PHP, and you have to go to something like Heroku to get Python, which I don't find very fitting for hosting a website.
That's fucking great :) moving to London. 
Definitely something I have been looking for, thanks!
Great. I'll put the kettle on.
Screen shots?
There's no preset way to become a freelancer, for me I just went to meetups, conventions, and presentations to network with people. Try looking at small business centric message boards/forums for your area and expand from there.
I do a mix of coding, distributed systems architecture and business analysis. Mostly backend heavy engineering, a bit of Django webdev. Clients are mainly startups, sometimes I get a whole project, sometimes I'm just filling out an existing development team. Rates range from $90-$120/hour (Chicago, though clients all over USA). 95% of the code I've written in the last 12 years has been Python - I don't look for clients, people just find me. :-) Also, check out [/r/freelance](http://freelance.reddit.com/), a nice little subreddit. 
In academics, students should be learning something more complicated than Python. They shouldn't get used to the easier nature of Python. Once they are out from school, armed with academic knowledge, they can ace any language they want! The above is true for college. For a 6th grade or 8th, Python can be a good starting point.
&gt;They shouldn't get used to the easier nature of Python. Did you read the article?
Yes, I understand that the newbie programmers (freshmen undergrads with no programming exp.)have no programming background whatsoever but they still have to be taught basic foundations of programming in a general sense before settling with a language such as Python IMO. I was forced to learn C, C++, Data Structures,.. in my undergrad classes. The only background I had back then was BASIC, DBASE from high school.
&gt;Yes, I understand that the newbie programmers (freshmen undergrads with no programming exp.)have no programming background whatsoever OK, now I'm pretty sure you didn't read the article at all.
yes.
There isn't one really. That's why the addage "You can have it good, fast, or cheap: Pick two" exists.
Well, writing things good and fast is difficult. Writing things good and cheap is easier. I guess most beginners are like that. It takes time to write something good when you still are a beginner.
It takes time to gain speed and fluency, like with any other language.
It mostly boils down to experience as a developer, with the problem domain and with the language, so you spend less time with less effective approaches. Once you are solid in these, it's just as fast as it goes and "fast, good, cheap, pick two" kicks in hard. 
Thanks, that's a bit comforting. I guess I'll just need to keep at it. But when you are freelancing reality certainly knocks on your door. 
Awesome sir.
For the most part i would like to pass this has a parameter and get back and object containing the following: Link:{ type:In-website(can be out-website), description: (text for description for out links), url: (the url) } Mostly i would use it to power bots has a starting point. Let say i want to do a recommendation engine. I can get the programming book list has a starting point of books that exist. Is not the greatest project but seems like a good stepping stone to learn scrappy it just happens that i need it.
OK, this isn't legal advice, I'm not your lawyer, this is just general statements about the law that isn't tailored to any specific person. The most important things I'd look out for are: * indemnification clause (if some shit goes down and your client loses $$$$, are you responsible for covering that) * termination (how much notice needed, can you fire the client, etc.) * something that says any future changes to the agreement must be mutually made in writing (usually toward the end, as this is often "boilerplate language" that appears standard in nearly all agreements) * try to get something in there that clarifies they need to be reasonably responsive to your requests if you need something from them like more info, so you aren't sitting on your ass doing nothing and then get blamed for it when you were waiting on lazy-ass John Doe to give you a new requirement * fee (how much per hour, how often you invoice, how much time they have to pay you, **a penalty if they delay beyond that of some percentage of interest**) Most importantly: **Fix in a statement of work as precisely as fucking possible what exactly your task is. Especially if this is a flat fee thing, you want to make sure they don't start adding new things on without having to pay you for them. You don't want them to destroy your previous work with incompatible new requirements.** Here's a decent outline of what you want (and it references boilerplate language in it, too) http://www.techrepublic.com/blog/it-consultant/independent-contractors-make-sure-your-contract-protects-your-interests/#. Also, do a quick google on the IRS regulations regarding independent contractors (1099) vs employees (W-2). The regs boil down to this: It doesn't matter whether your agreement calls you an IC or an employee. That's just bullshit language. What matters is the actual *facts* of your relationship, not the title given to it. The IRS uses a test of a bunch of factors to determine whether you're an independent contractor or an employee. A company hiring you to be an independent contractor wants you to be an IC, not employee, because of many reasons including tax. They are scared to death that you might accidentally be characterized as an employee at tax time. Given that they absolutely want you to be an IC, observe the factors the IRS set forth for IC vs employee. Make sure, then, that you don't let the client force you to do employee-type things. Like fix your specific hours of work, location of work, how you accomplish your job, etc. That would make you an employee. Now, I'm not saying this to warn you that you don't want to be an employee. I'm saying this so you know there are things the client *cannot* force you to do because you are an IC. Generalized overview, but the IRS will give you an exhaustive list somewhere: http://www.learnvest.com/knowledge-center/the-difference-between-a-1099-and-a-w-2/
Soon :)
I found discussion of the Richardson Maturity Model enlightening when referring to a REST API. http://martinfowler.com/articles/richardsonMaturityModel.html Read through some of the links there and if you feel like going deeper you can go read Richardson's doctoral thesis on the design. 
It was really fun to use Hy in this context with the goal of facilitating the use of this Python module as much as possible to the point it would become as simple a configuration file. If you are not familiar with Lisp and going to try Hy I can recommend reading about other Lisps in order to understand different concept like symbols, quoting. Taking more time to understand the different keywords the language offers before starting to hack would also have saved me some time :) Have fun!
I've read SICP and written a bit of code in Scheme, so I'm familiar with Lisp, at least the fundamentals, yes :)
Mostly, hype. But if you're ahead of the curve, hype is money you can put in your pocket. In 5 years, Storm may or not be a predominant technology, but it's definitely on the rise right now. The more concrete advantages are that it's very easy to do many of the things you do already, but doing them in real time, at scale, interoperating with legacy systems, on the cheap. It's easier for developers than MapReduce, it has very low latency and very high throughput, it's fault-tolerant, and super flexible. Lots of people use the churn in the big data community to poke fun at Hadoop and friends, but the reality is that IT budgets continue to grow and Hadoop is helping shift a lot of that money from HW/SW to developers. EDIT: In more clear terms, Storm is a framework for moving data from inputs through algorithms to outputs, at web scale. So you can pull in data from a bunch of sources (web logs, twitter, transaction data, etc.) and move it through algorithms (ETL, machine learning, filtering, sentiment analysis, fraud detection) to outputs (archival, RDBMS loading, populating dashboards).
A variety of locations. In order of frequency on the projects I've worked: - Amazon Web Services. - Rackspace. - Webfaction. - Private server. Most of these projects are large enough that you are using a team that contains at least some members with dev-ops experience, and you generally are just building out and deploying to a Linux box somewhere.
If you want to get information from a screen. maybe screenscraping would help. Look up Beautiful Soup. Maybe work on the database/storage part first and do manual entry and work on ocr later. I don't know hearthtracker at all. I just looked at it right ow. Seems like a big program, so I would approach this project in stages. 
Money in pocket is an excellent advantage. Thanks for the tip. 
Very interesting. It sounds like there's a ton of planning before even considering contract work. I'll have to look more into this. Thank you!
Thanks I will look into that...it does seem to be more difficult than I had originally thought.
Yes, I have read about that earlier. I also try to be mindful about reusing code in a good way. I included it here to give some kind of impression of what my work was. 
So oDesk and Elance are shit. What other options are there?
Fair enough :). Here is a snippet for the Chrome store. https://gist.github.com/jonathan-s/97ab8f32ac1379d23fa4
Wouldn't it be easier to understand if figure was square? Since I'm guessing that would make it more look like a circle. I've only looked at the figure and I'm guessing it is random dots and the frequency of above/under line is taken into account. Cool stuff anyway!
Sort of hard without a baseline from Valgrind output of like uname or something. - Can you list out the Python version? Like loading python should list the compiler used - Is this 64 bit or 32 bit? - any problems with other stuff or java? - this is the repo version of python? 
That's normal. Valgrind throws a lot of false positives for things which CPython does at a low level (custom memory allocation, for example). It's not a perfect tool. If you really need to look at a CPython process with valgrind, you can find or make suppression files to quiet the spurious errors. I think there are also some changes to defines you can make when compiling python in order to make valgrind happier at the cost of some performance, see [here](http://svn.python.org/projects/python/trunk/Misc/README.valgrind).
The offender is the PyMalloc memory allocator. It makes the assumption that rounding an address down to the beginning of the page (4k) gives you an address that can be safely read without causing a segmentation fault. That's something that is not guaranteed by C but is true on virtually all architectures. The code reads data that may be uninitialized from that address, something that valgrind definitely does not like. It can't know that PyMalloc verifies that data through other means.
Cool, but is there a link with instructions or a GitHub repo for setting it up?
Thank you for your response, I'm looking to grow, and any resource is greatly appreciated.
I really like your review format, keep up the good work!
Practice and experience are pretty much the only way you'll start getting programs finished faster. Once you spend time working on a certain class of problem (text parsing, web scraping, GUI making, web forms, socket servers, whatever), making a program (or part of a program) that deals with that problem will start to become second nature. Then you'll stop having to Google for documentation or read blog posts and Stack Overflow for examples. Plus as you become more experienced with different problem domains, you can spend less time researching and planning how to tackle the problem from a high level, since you'll already have some ideas before going into it. Writing tests is an entirely different beast. If you want really robust, comprehensive tests then there isn't a whole lot you can do to speed that up, since you'll need to constantly check that you're actually covering all the cases. Just make sure you persistently keep a good mental image of your own code and go back to read it a lot, or alternatively, try out TDD. 
oh god scheme, i have such a love/hate thing with that language after learning it for class
The plural instead of singular model names makes this kind of confusing. Example: self.user = Users(name='admin', email='admin@admin.local', description='Im a testing user', password=generate_password_hash('default'))
Thank you for the useful post! Lots of good info in here!
You know of any good contract templates for web devs?
Having macros is kind of a deal-breaker for me, otherwise I'd be interested in it.
Not off the top of my head. In general the canned stuff is not the greatest. It's better than nothing, but I have seen very educated non-lawyers borrow from templates and end up with the most unbelievably nonsensical stuff. But if you don't deviate from a single one, at least your agreement won't look weird. In all honesty, when you hire a lawyer, a major benefit is that if he fucks up, you can sue the shit out of him. If you fuck up drafting it, you're just fucked. Find out where your local law library is and see if they have any independent consulting agreements. You'll be asking the librarian if they have any *form books*. You might also borrow from documents that were used by large public universities (large = good lawyers working for them; public = contracts are often available online through Google). Preferably a public uni in the same state as you, since that way the governing law will be the same (that reminds me: contracts almost always (well, *always* will unless it was a crappy lawyer drafting it) have a clause governing which jurisdiction's law will control interpretation of stuff. Good luck.
Well, you don't have to plan for this stuff. But the planning makes it safer for you. If you're working off good contacts, then you don't have to worry *as much* because your close contacts are not out to completely fuck you because they want to keep meeting you at the bar to chase skirts.
Your `CH_get_names` function would probably be simpler like this: def CH_get_names(enclosing): """ webstore-P-Yf-Z-yb # big 36 webstore-P-ag-Z-yb # medium 228 webstore-P-cf-Z-yb # small 226 Total 490 """ queries = [ '//div[contains(@class, "webstore-P-Yf-Z-yb")]', # big '//div[contains(@class, "webstore-P-ag-Z-yb")]', # medium '//div[@class="webstore-P-cf-Z-yb"]', # small ] for query in queries: elements = enclosing.find_elements_by_xpath(query) for element in elements: yield element.get_attribute('innerHTML') You may need a minor change in other parts of your code to get this to work because it returns a generator instead of a list. A generator can be converted into a list by calling the `list` function on it. You might want to work on picking better names. For example `scroll_element_into_view` doesn't actually scroll until an element is in view. It trys to scroll and tells you whether the view went down. The while loop should really go inside that function instead of inside `scroll_and_fetch_box` or else rename it to `try_scrolling_to_element`. Similarly, `element_clickable` doesn't tell you if an element is visible. It should really be called `get_element_if_visible` or else be refactored. Think about someone using your function; would a reader be able to tell what it does by looking just at the code that it's called from and not where it's defined? I could nit-pick all day but, all in all, this is decent looking code. It has some minor problems, but there's nothing serious to worry about.
Why is that?
Very cool. This will be a fun way to use Lisp and also have access to everything I've already learned and every tool I've built. I love that I can just import from all the libraries available in Python. Is there any difference in performance or any sort of extra optimization, or does it come out running exactly the same, just a different syntax? I'd expect it's exactly the same?
This is a great idea. X-post it to /r/IPython.
580 lines in two working days is kind of a lot. But every project, every programmer, every task is different. Sometimes you do a lot of work without writing much code, and sometimes you churn out a ton of code in a short time. I almost never even think about how many lines of code I write per hour/day/whatever. It just isn't very meaningful. 
I have used nimrod (although I have not used python much). To me it feels quite different from the little bit of python I have used. It feels more like what would happen if c++ was designed in reverse. By this I mean that it looks at features common in other languages such as classes and iterators and splits them up in a way that is more orthogonal than any other language I have used. 
Macros destroy readability of code. When auditing or debugging a system, it's much harder to figure out the control and data flow of a piece of code when macros are present.
I've got mixed feelings regarding this, apparently it has some good features from lisp such as the macros but being python below it lacks important things like immutability, TCO and who knows what else. I think it would been better to implement proper lisp and output bytecode instead, similiar to what clojure does in javaland.
awesome
once you get past something like C you have pretty much lost that battle. Also note that Nimrod's macros can do things like forming partial control statements and they have sane scope, they are not like C macros.
You should add PyPy and C implementations.
Use python 3 The maintenance of python 2 will stop in 2020. And there is no evolutions for this versions.
That's what I was thinking. Could you by chance recommend a book like byte of python that teaches 3?
Use 3 unless you have legacy dependencies, but you won't be hugely disadvantaged learning 2 over 3 or vice versa, they're similar except for Unicode handling and the standard module layout.
May be this book: http://www.diveintopython3.net You can try with the book of David Beazley
Yes :) But this is an ongoing project where I split the benchmark into smaller digestible chunks...PyPy is a topic for another day...It's on the to do list!
I'll check it out. Thanks.
If you don't get confused, you can learn both at the same time, since the differences aren't that big. If it's confusing, I would recommend focussing on 3 first, because: * It's the future * It fixes some gotchas * It gives you some really neat new tools (oh `yield from`, how have I ever lived without you?)
You are right. Setting a 1:1 aspect can make it look better.
Thanks. There are some deviations from python I don't understand that actually makes it surprising and not fun to use. Stick with cython when I want speed I suppose.
I definitely prefer dookie.
**PyEye** Information: Author: theauditor Description: Python OCR (Text from Image) Teeseract python binding. Main Language: Python Number of Forks: 0 Number of Watchers: 0 Number of Stars: 0 
**physics** Information: Author: svineet Description: A Physics Activity in kivy, for the kivy app challenge Main Language: C Number of Forks: 0 Number of Watchers: 5 Number of Stars: 5 
'the fuck?? This is the whole source of this "binding": from PIL import Image import os import subprocess def riptext(Img): Img.save(".tmptif.tif") Com = ["tesseract", ".tmptif.tif", ".ripdata"] FNULL = open(os.devnull, 'w') retcode = subprocess.call(Com, stdout=FNULL, stderr=subprocess.STDOUT) Com = "cat .ripdata.txt" Output = subprocess.check_output(Com, shell=True) os.remove('.tmptif.tif') os.remove('.ripdata.txt') return Output More like /r/badcode ...
Check out the fortune server examples in the Qt docs.
Obviously, the best way to avoid runtime errors is writing code that doesn't fail with runtime errors, and fixing existing code that contains runtime errors. Unit testing and/or TDD are good tools to help you do the former. Due to the nature of dynamic programming languages like Python, there are many things that can go wrong on runtime that would be caught by compilers in other languages, so the best defense is testing as much as you can test. There's no better solution.
Cam someone explain how IPython notebooks work and why I should be using them?
Excellent review, good sir! I'm incorporating your changes now. Thank you so much!
Why would you wan't to avoid runtime errors? Let's say you write a huge chuck of code and it runs perfectly, what did you learn from it? Nothing, right? But with every error, no matter how tiny it is, your knowledge expands. So I think you shouldn't try to avoid them. Face the problem! ;)
And then move on to the threaded fortune example. This is a common signal and slots problem. By default all slots are processed in the main thread. This will block other slots from being triggered as the signals build up in the background. These get processed in order after you release the main thread.
PyQT is far superior to python's built-in GUI library for all but the simplest of GUI tasks. The only real advantage of tkinter is it is lowest common denominator and built-in to python.
Bubblesort normally exits once a pass has been made with no swaps. Your implementations always act as if the data is worst-case (reverse sorted at start). Most of the iterations in your test code are spent simply comparing already-sorted pairs and doing nothing. I know it's a benchmark but you might implement the algorithm a bit more realistically. 
the problem starts when the errors are caused by typos, then it starts to be annoying.
Indeed the human element is king, for a contract with a local university, most of my time was spent talking to the faculty almost like a therapist/fixer. I pretty much ignored what the Dean told me was needed and wrote a system for the faculty. I got fairly glowing feedback on that project which wouldn't have been possible if I hadn't gone on site. 
Or you can use a real binding, with SWIG: https://github.com/veezio/pytesseract PS: I made it.
As an alternative, you may consider [Learning Python](http://shop.oreilly.com/product/0636920028154.do) by Mark Lutz. I went all the way through it to learn Python, and I was happy with it. It is really long (and the Amazon reviews are mixed for this reason), but he seems to have a good sense of the common sticking points and conceptual hurdles, and he addresses them. I'd use an ebook over paper, though. As a followup to the book (with more of a computer science orientation), I was also really happy with the MIT 6.00.1x class on edX. You could even start there if you like. It uses Python 2.7, but everything you learn there is nearly identical between versions. For that course (but not 6.00.2x), I actually used Python 3.x all the way through and adapted code as needed. About 95 percent of the time it was changing `print` statements to the `print()` function. Even so, apart from a couple cases, the automated graders (running 2.x) ran them without issue.
It'd be game changing if Google officially added Notebook integration in Drive. 
Is Parakeet still being developed? 
Official [site](http://ipython.org/notebook.html) for starters. If you need a web-based document that allows you to show results live or interact with your data or to explain how things are done in a step-by-step basis, IPython notebooks are great for that IMO. If you are a web developer or into web development, then IPython notebook won't be of interest to you. It is geared more towards scientists, mathematicians, engineers, or people that deal with data analysis and visualization. More examples: [example1](http://nbviewer.ipython.org/) [example2](https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks)
do you just not like defining objects period? I wager you could use hashtables like you do in python, but that would kinda defeat the point. On the other hand if you do not like the way objects work that is another issue.
This would be nice, but I'm not sure I understand the full potential or use case for this. Most of my notebooks are work or company related, no way I would be allowed to share them via Drive. I'm sure there are several others in similar situation. We set up our own internal notebook server at work because of this. For personal or non-work related stuff this is convenient for sure. Maybe someone can chime in about other advantages or use cases.
**with_fixture** Information: Author: abingham Description: An experiment in using context-managers naturally with Python `unittest` fixtures. Main Language: Python Number of Forks: 0 Number of Watchers: 0 Number of Stars: 0 
There are some minor performance penalities, like the parsing is done in Python instead of C which is a problem the first time you run Hy. Afterwards you got the .pyc files doing the heavy works. There are some minor issues and rough edges when it comes to pypy, but its not really a big problem. The overall difference is minor and mostly applies to the initial parsing of the language. We havent come around trying to optimize the AST Hy generates, but its something we have talked about and want todo.
&gt; **sudo** pip install pygeoip Hell no, damnit!
The article mentions Chrome + Google Drive. Is it a Chrome only prodcut? In the other case, this is insane news!
If people spent as much energy converting as they do fighting about not wanting to convert python 3 would be dominant by now.
You are absolutely right, tweaked the bubblesort and will run the benchmarks now. %%cython import numpy as np cimport numpy as np cimport cython @cython.boundscheck(False) @cython.wraparound(False) cpdef cython_bubblesort(long[:] np_ary): """ The Cython implementation of bubblesort with NumPy memoryview. """ cdef unsigned int length, i, swapped, ele length = np_ary.shape[0] for i in xrange(0, length): swapped = 0 for ele in xrange(0, length-i-1): if np_ary[ele] &gt; np_ary[ele + 1]: temp = np_ary[ele + 1] np_ary[ele + 1] = np_ary[ele] np_ary[ele] = temp swapped = 1 if not swapped: break return np_ary
Code completion, man. Use it! Every decent IDE / editor has it.
List comprehensions (or, preferably, generators) are usually more idiomatic and mostly serve the same purpose. I'm not a fan of reduce if it's anything more complex than a single operation.
This package makes those a first class citizen through decorators: https://github.com/Yelp/Testify See `@setup_teardown`
it's not really an argument but more like an inquiry, I'm not familiar with Hy and it seemed more like syntactic sugar than a different paradigm but if that's not the case then great.
Hy is something in between really. You get macros, lisp syntax and a few other goodies, but its still just python. Which means you get a whockey scope. Let over lambdas can't be done at this moment for instance.
If you're using py.test, you can do something similar using the `yield_fixture` decorator: http://pytest.org/latest/yieldfixture.html
Calling 9 lines of code that call tesseract through `subprocess` a 'binding' is quite... confident oO
Eh, I'm in my 30's and while I had been saving for retirement for a long time ( since my teens ) I am still going to have to file for SSDI which is something I am not exactly happy about because I do not trust the US Federal government and rather not be at their mercy.
I did the comparisons of Python lists vs. NumPy arrays [here in Day 4](http://nbviewer.ipython.org/github/rasbt/One-Python-benchmark-per-day/blob/master/ipython_nbs/day4_python_cython_numba.ipynb?create=1), and also the version with C arrays instead of the memoryview on the ndarray. But here, I wanted to declutter the plot a little bit and focus on the more significant cases.
I think bubble sort by definition doesn't exit. That modification to bubble sort is called... something else. I can't remember. Shakersort?
Okay, I uploaded the first results for a sample size of 10^4, parakeet looks pretty interesting. I know, I will get some requests for larger sample sizes now... and I want to run it on 10^5, but this will take a while...will probably be an over-night thing ... so please be patient :)
Unfortunately, yes, it's Chrome only. It runs the IPython kernel using [Google Native Client](http://en.wikipedia.org/wiki/Google_Native_Client).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Google Native Client**](https://en.wikipedia.org/wiki/Google%20Native%20Client): [](#sfw) --- &gt; &gt;&gt;*Not to be confused with [Networking and Cryptography library](https://en.wikipedia.org/wiki/NaCl_(software\)).* &gt;__Google Native Client__ (__NaCl__) is a [sandboxing](https://en.wikipedia.org/wiki/Sandbox_(computer_security\)) technology for running a subset of [Intel x86](https://en.wikipedia.org/wiki/Intel_x86), [ARM](https://en.wikipedia.org/wiki/ARM_architecture) or [MIPS](https://en.wikipedia.org/wiki/MIPS_architecture) native code in a [sandbox](https://en.wikipedia.org/wiki/Sandbox_(computer_security\)). It allows safely running native code from a [web browser](https://en.wikipedia.org/wiki/Web_browser), independent of user operating system, allowing web-based applications to run at near-native speeds, which aligns well with Google's plans with [Chrome OS](https://en.wikipedia.org/wiki/Chrome_OS). It may also be used for securing browser [plugins](https://en.wikipedia.org/wiki/Plug-in_(computing\)), as well as parts of other applications or full applications such as [ZeroVM](https://en.wikipedia.org/wiki/ZeroVM). &gt;To demonstrate the readiness of the technology, on 9 December 2011, Google announced the availability of several new Chrome-only versions of games known for their rich and processor-intensive graphics, including *[Bastion](https://en.wikipedia.org/wiki/Bastion_(video_game\))*. NaCl runs hardware-accelerated 3D graphics (via [OpenGL ES](https://en.wikipedia.org/wiki/OpenGL_ES) 2.0), sandboxed local file storage, dynamic loading, full screen mode, and mouse capture. There are also plans to make NaCl available on handheld devices. &gt; --- ^Interesting: [^Plug-in ^\(computing)](https://en.wikipedia.org/wiki/Plug-in_\(computing\)) ^| [^NPAPI](https://en.wikipedia.org/wiki/NPAPI) ^| [^NaCl ^\(software)](https://en.wikipedia.org/wiki/NaCl_\(software\)) ^| [^OpenGL ^ES](https://en.wikipedia.org/wiki/OpenGL_ES) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chl56c1) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chl56c1)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Also, decent IDEs now will do static analysis of your program and highlight names that aren't defined.
These functions are not considered idiomatic. List comprehensions are almost always better. However, if you're working with the multiprocessing library, map becomes very useful with the Pool class to farm work out to multiple processes. https://docs.python.org/2/library/multiprocessing.html#using-a-pool-of-workers
Nice job. I see you added a test html document. There is an excellent test library called 'vcr' ( https://github.com/kevin1024/vcrpy) that will do this for you. All you need to do is apply a decoratoer to your test method, and it will intercept http requests; the first time the test is run it will download the document and store it as a fixture, and subsequent test runs will use that fixture.
Hey there. I forgot to thank you. Yours was the only comment that was somewhat helpful to my cause. Sincerely, Thank you. I wish that you'll always be happy and your enemies always know it.
I don't get those "create an app in five minutes" examples. Those apps are completely useless and I don't consider them apps. 
For the record: placing a `yield` inside of a `with` or a `try` that has a `finally` is questionable. If the generator is not resumed or explicitly closed, responsibility for executing cleanup code falls to a [finalizer](http://en.wikipedia.org/wiki/Finalizer), and relying on finalizers is generally bad practice. This is particularly bad in PyPy which does not use reference counting and cannot guarantee prompt collection. Python 3.4 [does guarantee all finalizers will eventually run](http://legacy.python.org/dev/peps/pep-0442/), but older versions of CPython (particularly 2.x) may have problems with reference cycles. Unfortunately, the standard library encourages this practice via [`contextlib.contextmanager`](http://docs.python.org/3/library/contextlib.html#contextlib.contextmanager), for reasons which elude me.
I used one of tesseract binding in the past, and it was one of those that called the binary. The SWIG version did not compile at that time. The goal was to get text from jokes posted as text on PNG/JPG files and that worked at a very high accuracy. 
 import requests r = requests.get('http://whatismyipaddress.com/ip/xxx.xxx.xxx.xxx') now parse `r.text`. Was that so hard?
Can you compare this to flask and Django? I have not used any of them. 
Cmon bro don't you want all your python programs having root powers?
Any more than Hello World; is that a good reason to discourage that as a beginner's project? Now, in contrast to many server demos, this one scales; waitress is production-ready, and Pyramid is simple but very feature rich and powerful. I think it's a great intro, and +1 for emphasising modern versions of Python; we need more of that.
yeah [bottlepy](http://bottlepy.org/docs/dev/index.html) has supported Python 3 for a long time. You only need to download one file, bottle.py, to get up and running too.
Every framework needs a "hello world" to get people's feet wet with some of its most basic concepts and some reinforcement that they can actually get something working. The example here allows people to create a project that responds to http requests. It's always good to get something running without requiring you to take a deep dive into all of Pyramid's features at once. Pyramid also has a reputation for being a "full stack framework" which apparently means that it's big and scary rather than a sexy "micro framework" that's easier to get started with (a la flask and bottle). Examples like this attempt to bridge the gap and show that it's not so scary.
Really? Like what?
I think it would be nice if Google had a product like Wakari, where you basically have an IPython Notebook running in the cloud, with batteries included or the ability to install more libraries. Though obviously it wouldn't have the performance of running locally, it would allow me to work off a Chromebook for example. Also if everything runs inside the Native Client sandbox, perhaps it would become easier to compile libraries on Windows, because the libraries at least know what to expect inside the sandbox. Also, given that its Google Drive, some nice APIs for accessing your own and/or other data from within the Notebook would be nice. Even better if they could provide some database layer, so you could do some real data analysis stuff. Basically, take away all the Ops work and just let me focus on programming. Ah well, a man can dream :-)
You're right, that's extremely efficient.
Examples: * [1,2,3] + [4,5,6] gives an error - basic data types in nimrod and python are different * Strings don't have methods on them ( I can't use a format method on a string ) * it's not print it's echo * slices don't work the same...I can't write range(10)[-2:] to get the last two elements * put an = at the end of a proc definition * implicit result variable I could think of more if you want. 
Blender has a game engine that uses python. 
You can scrape the data and then use Python to update your Reddit post.
Flaskr project is for creating a simple blogging app. http://flask.pocoo.org/docs/tutorial/introduction/ Pyramid's blogr is comparable: http://pyramid-blogr.readthedocs.org/en/latest/ Going through both should provide a really nice contrast. Don't know of comparable Django project- someone else may
&gt; I'm not a fan of reduce if it's anything more complex than a single operation. exactly. if you map or filter using exactly one existing function use map or filter. if you’d have to create a lambda or do multiple operations, use list comprehensions/generators.
Well, you can't improve something without changing it...
Ok I'll bite, what makes you think highly successful gaming companies releasing their proprietary engines (aka their secret sauce) would be a good business decision for them? Gaming companies already operate on a pretty low margin, even the successful ones. Oh and before you compare them to the other three engines you listed those companies have their business models based on licensing deals. The second set of companies you mentioned do not. They are also entirely different engines.
Besides JIRA I've used [GitLab](https://www.gitlab.com/) and [Redmine](http://www.redmine.org/). I don't have any familiarity with ProjectPier but if you're considering JIRA then Redmine might be something to look at because they're somewhat similar at a high level in my experience. If you want something closer to GitHub though then GitLab would probably make sense. 
I'd rather stay away from Ruby if possible but GitLab does look promising, especially since all my code is in Git already. Do you know of any that are Python-based by chance?
I fail to see how these examples are not useful. If you'd like to create a basic app that serves data at urls, you can accomplish everything you need by looking at an example like this.
I use "map" all the time. More specifically, I use the lazy version ("itertools.imap" in Python 2 and "map" in Python 3) that returns an iterator. Which of the below is more clear? "map(func, iterable)" or "(func(x) for x in iterable)" I prefer the "map" version, which is also faster than the equivalent *generator* expression. I occasionally use filter. A useful trick is that "filter(None, iterable)" very efficiently removes all Falsy values (like "compress" in some FP languages), and "itertools.ifilterfalse(None, iterable)" removes all Truthy values. I agree with others that "reduce" should generally be avoided, but use your best judgement. As others have pointed out, if you're making a list, many Python users find list comprehensions easier to understand. The idiomatic usage of "map" and "filter" is to efficiently handle iterables, especially in Python 3 where these functions return iterators by default.
Used both, and they're good. Just very overly complex for what I need. Really I think I'm just going to stick with GitLab and test drive it for now.
There isn't enough meat to show any of the strengths of the framework. A much better example (imo) would be something like a guess-the-number game.... that way you can show off basic session storage,forms and form handling, as well. 
This example demonstrates one of Pyramid's greatest strengths - that it scales down to something so simple. The documentation menu has a link to the awesome [Quick Tour](http://docs.pylonsproject.org/projects/pyramid/en/latest/quick_tour.html) which will answer a lot of those questions about scaling up and adding more features.
Thanks!
Try scraping Google Play. We worked on this at my last job and it's pretty complicated especially when you try to grab reviews, and I don't think it's possible grab permissions anymore as far as I know. We used mongoDB to store all of the data because it's not practical in MySQL. Also we were trying to index all of the apps instead of writing a scraper that would just grab a single app's info based on a given package name. Edit: clarification
&gt; but they are completely useless hello world apps Could you please describe what you think the utlity of "hello world" is and why the OP doesn't meet that standard?
Pure python geoip bindings!!!! :):):):) License.txt, GPL :( I got so excited for a second there before I realized I can actually use this at work
I have much to learn, posting on reddit has yielded some fantastic information, ripe for growth. Sincerely, thank you.
GitLab is great, but it has one major flaw. It is written in Ruby. Redmine is great, but it has one major flaw. It is written in Ruby. Jira is also great, but it is proprietary, so you can not have full control of the server. All other things being equal, I suggest Gitlab. I run a private gitlab server for my own projects, it is really easy to set and very powerful.
Hi, You can use tornado websocket wsgi container!!! https://gist.github.com/xianyunwuxin/1441063
Yes, they [are](http://media.readthedocs.org/pdf/pyramid/1.5-branch/pyramid.pdf) 
I think I see your point, but that doesn't concern me too much in the case of `with_fixture` for two reasons. First, for all practical purposes, the generator is guaranteed to be resumed. The `tearDown()` method resumes the generator, and if `tearDown()` is not being called then you've got bigger problems to deal with, e.g. that `unittest` is broken. Second, the problem domain of `with_fixture` is pretty limited and errors are not, in my estimation, likely to cause big problems or - more importantly - go unnoticed for long. Developers are generally very sensitive to failures in their fixtures because that often results in failing tests. My first argument applies reasonably well to `contextmanager`, I suppose. The expected use of any CM is that it will be used in a with-block, and the with-block is effectively guaranteed to resume the generator. Maybe I'm missing some important part of your point, though. Can you describe a situation where either a `with_fixture` or `contextmanager` generator would not be resumed under expected and prescribed use? (Don't worry about try-except-finally...I agree there are definitely plenty of ways to get exception-safety wrong!) 
Thank you!
Python 3. Not so sure about it. Still thinking.
Get a book
Pyramid works without issues on Python 2.{6,7} as well, so feel free to stick with the Python version that best suites your needs.
If you want to downvote please give a reason. Coz what i saying is still true.
I'm also looking forward to more examples of Pyramid applications that start out small, but then grow bigger. One of the nice things I've personally enjoyed developing Pyramid applications is that I started out using just a few of the functions but as my application grows Pyramid has been able to keep up. When I have in the past used Flask, after a little while I felt that it was getting in the way rather than helping me get my job done, whereas with Pyramid the growth has come fairly naturally and simply.
Check BigWorld Engine by Wargaming. World of tanks is very very successful game made using it. It have Record breaking number of concurrent game and they made more than enough money to buy many other game companies. http://www.bigworldtech.com/ But licensing is very bad. and ask for 10% back.
If you want a downvote , please give a reason.
Yes. Just stick with django. 
Well, we all know that some apps will take months to years to make, and some will take X minutes. I think these are nice, because it shows that you can install it and get hello world going in X minutes, despite what you may have heard about pyramid, or framework_foo. Maybe I'm killing some time, I really like Django, but I was curious about Pyramid. I might just run through it. After that, maybe I'd look up a few of pyramids features and see a sample project. It gets you interested and makes it easy to jump in. I'm all for a hello world. That's where I start with any language or framework, but yes, after X minutes you move on. Don't forget, not all hello world's are that simple. When I made my first Android hello world, I hadn't had Eclipse, the Android SDK, debug mode on, any AVD running... It was much more of a pain than this looks to be. It can be quite a bit more of a time commitment.
It's because if you do: option_font['size'] = 10 The next time init is called you'll get {"size": 10, "bold": False}. Instead you should do option_font=None and then in init do if option_font is None: option_font = {"size": 60, "bold": False} ...plus I'd recommend naming it "font_options" :P
It seems like Python's 3.4.1/2.7.7 docs aren't up yet. You could try editing the download link (for example, from **3.4.1rc1** to **3.4.0** like as in https://docs.python.org/3/archives/python-3.4.1rc1-docs-pdf-a4.zip to https://docs.python.org/3/archives/python-3.4.0-docs-pdf-a4.zip) to download the previous version's documentation. Edit: Seems like it's fixed now. Cheers.
That's fun. I shall look into it.
There are too many simple "hello world" examples and not enogh examples about building something big that scales. I really like Python but had to use Rails at work, now I'm trying to use python for a personal web project and it's all really confusing. Currently trying to use Flask and it's difficult to make sense of everything. Want to have authentication? There's a lot of different modules for that but difficult to choose the right one, when I haven't used any of them before. Would be nice if the guys from Flask would put some tips for a newbie on their site, like "want to have authentication? use this library, that's the newest and most popular currently"
The justification seems a bit arbitrary. "The order of the arguments is wrong" is a very strong statement for such a weak problem.
Thanks for the update.
Unordered arguments is not a big problem in general. But in contexts where it matters (say, you are defining data models), ordering has to be precise. In that context the wrong order is wrong! This is not meant to be used everywhere. If you do have situations where precise ordering matters, then it's very useful.
Thanks for sharing
While that's a valid opinion an explanation as to why would be greatly appreciated. :-)
I'm surprised Cython doesn't win for the small-array size limit. Have you verified that Cython is not generating any Python API calls inside any of the loops (using cython -a for an html visualisation)? I note that 'temp' hasn't been declared so this might be a possible slowdown (unless type-inference is doing this automatically).
It would be better with "create an app in 10-15 minutes" and add a few more lines of code so it can do something.
Probably worth looking at [Autobahn](https://github.com/tavendo/AutobahnPython).
But for how long? Maybe a few months later a better auth library is released. It's actually not that difficult to choose - find the one that is most used. A good metric is activity on the library's Github repo. The variety of extensions available makes Flask quite flexible. You only need to add extensions as the need arises. Flask itself gives you the bare essentials required to setup a functioning web app. If you're still lost, try referring to Miguel's superb guide to Flask: http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world 
You can certainly run Twisted to handle websockets and a WSGI app in the same application/process, using [Twisted's WSGI server](http://twistedmatrix.com/documents/13.1.0/web/howto/web-in-60/wsgi.html) and a Websockets library for Twisted like Autobahn. [Here's an example of this architecture](https://github.com/tavendo/AutobahnPython/tree/master/examples/twisted/websocket/echo_wsgi). Note that Twisted's WSGI server is a multithreaded server, so it's separate from Twisted's single-threaded event loop / callback architecture. That means you have to use `reactor.callFromThread()` to use the event loop from the WSGI server.
Nimrod *is* great because it does try to be python in a lot of areas and its efforts to make readability a priority, as well as it's similarity in modules. We can have readability *and* speed. Documentation and books are so important to the success of a project. There needs to be a nimrod book published, and nimrod needs to almost copy the python docs word for word and replace the code snippets with nimrod - that would get the project along quickly.
Giving you a github link where u can get all the materials to study during your journey. https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#python 
I wouldn't be so pessimistic. There's even a functional PyPy3 prototype now. 
The way django does it is pretty nice I think...
You can make it completely transparent by converting the keyword argument from a dict to a collections.OrderedDict. I think this may require patching the function's func_code to convert the keyword dict argument into a regular argument. (Yes, I have reservations about the intrusive implementation, but it's also kinda cool).
I just checked the code Cython generates without cdef'ing temp; it does indeed store the value in a python int object (i.e. slow). This is using cython-0.20. Further testing shows adding the cdef in for temp speeds things up by nearly a factor of 2 (3.4ms -&gt; 1.9ms, for n=10^6). Enough to make Cython the fastest in the large size limit. This doesn't help for small n though. I'm amazed numba can avoid so much calling overhead. One other nice thing about fully cdef'd Cython is you can throw in an Openmp prange to run it multicore for a ~4x speed up (on my 4 core CPU). Of course, the main interesting thing with numba it the ability to target GPUs. Cython can't do that.
Right. Or [virtualenv](https://virtualenv.pypa.io/en/latest/).
my guess is b/c it works reliably just calling /path/to/virtualenv/bin/... with no additional steps. i never activate the virtualenv i'm working in b/c I jump around them too much and it's really unnecessary. 
It's what I decided to run with (GitLab). Only thing in having issues with on it is setting up SMTP to work with man drill.
You can download all my lessons as PDFs and read them. http://milocast.com/free-programming-class.html If you have a laptop you can type them in, too. 
First of all I didn't down vote you. Second, you'll need to rethink your strategy if you have the 'next biggest game idea.' You asked a question, I provided an answer. If you know that everything Python has in the 3D world sucks, why in the hell would you come here and ask for a Python solution? You want the ease of the Python language with the power of a free 3D engine. You're not going to get it anytime soon for cheap or free. You'll have to use a different language. 
If order matters then using named arguments is a poor design choice. Package the data fields in their own sequence datatype.
Try http://www.telize.com, but you need to write your client :(, or find one on Internet :D
You use the framework to make websites. You can package it up so you can load it into apache or whatever webserver you want. Its a big step from the old days of php etc where you embed your code into the page and let it load. Code is seperated logically based upon its uses. eg your actual html is a seperate module, your processing of the data that is passed to the html is another. It makes it alot easier for large scale projects to desegnate tasks to modules and not have them conflicting with each other.
You're eliminating a few parentheses at the cost of tapping into VM internals. Bad design.
Anytime you mention python 2 it gets a ton of down votes in this subreddit. Regardless of the fact that the adoption rate is terrible. 
Sorry, wanted to clarify something. SQLAlchemy (from what I've read) and ActiveRecord both give me tools to compose relational queries that can map directly to SQL queries when necessary, without having to fall back on using an array of hashes as a result. The tools like .join(), .select(), .order() (with sophisticated ordering when necessary), or .having() really do not seem to be there in the Django ORM. I've been working with one ORM or another (and worked on their source) for 6 years now, so I'm very comfortable with the limitations of libraries and know when I can let the ORM do basic operations out of the box, but I'm trying to understand if the Django ORM provides sophisticated relational querying capabilities. I'm investigating the raw() method now with the hope that it can understand how to map values back into objects correctly, but I've already noticed that it does not properly build object graphs for relations.
Sorry, you don't know how to evaluate design. Good and bad in design depend on a lot of factors. One of the key factors is the people who develop/maintain the code. If parsing byte-code is a walk in the park for those people, then it's not bad design at all. The small cost is worth the benefit. In fact, when you have a ton of data model definitions, this small improvement in elegance is magnified, and the code is more readable as a result.
Yes, in general, it really is *that* bad. Even the authors themselves more-or-less admit it. In a rather large django project I was once involved with, over a period of about two years, django's ORM was the first to go (replaced with sqlalchemy), the templating engine was next to go (replaced with jinja2) and forms went after that. At that point, all django was doing was routing; so we ditched django altogether in the end, and never looked back. It has a great community and great docs, but it isn't all that for anything beyond trivial
I am pretty sure you can create such query on Django ORM. The problem is you are trying to map SQL querys directly and Django ORM provides his own way to query Models. I would recommend instead of using "tables" use the Django ORM Models and rephrase the problem described, I am pretty sure any Django dev outthere could make that query in no time. With the same performance described. 
Maxi mind c bindings are fine for my uses
you're welcome!
&gt; One thing I have noticed though is that the ORM seems to be really, really awful I like it.
Thanks for the good tips! Just checked, it seems to be fine. And I will add a type to temp and run it this afternoon to see if I can squeeze out a few milliseconds :)
I'm trying to. I feel like I'm missing something big, but I've found several videos on youtube where the Django ORM developers basically say "It kind of sucks". That's frustrating because I work with really large sets of data, and the ORM really seems to be that bad.
"The only purpose of 'reduce' is to write really obfuscated code that shows how cool you are. I'm just not that cool." — [Guido van Rossum](http://www.techtalkshub.com/guido-van-rossum-history-python/)
I checked out the queries that it generates and while it does seem like the "dumb" way to resolve that particular query, it's also not terribly slow (basically uses an IN with every id, which creates a massive query, unnecessarily). After 2 dozen trials of making sure to restart the code to avoid the Django ORM cache, the average run-time is 70 seconds. I wrote the code that builds the same result set from a SQL query (not using .raw() on the model, because it doesn't properly build the associated objects), and have a reducer that reduces records from t1 that map to multiple records in t2 into a hash with an array indexed by key for the associated N records, and the whole thing runs in (average) 1.7 seconds. Using the Django ORM is 35x+ slower than a SQL query. Speed is important in this case because this code is building other indexes of data from these records, so having to wait that long for the smallest data sets means it's going to scale even more poorly beyond that.
I posted this above, but here is some useful data: I checked out the queries that it generates and while it does seem like the "dumb" way to resolve that particular query, it's also not terribly slow (basically uses an IN with everyday, which creates a massive query, unnecessarily). After 2 dozen trials of making sure to restart the code to avoid the Django ORM cache, the average run-time is 70 seconds. I wrote the code that builds the same result set from a SQL query (not using .raw() on the model, because it doesn't properly build the associated objects), and have a reducer that reduces records from t1 that map to multiple records in t2 into a hash with a keyed array for the N associated records, and the whole thing runs in (average) 1.7 seconds. Using the Django ORM is 35x+ slower than a SQL query. Speed is important in this case because this code is building other indexes of data from these records, so having to wait that long for the smallest data sets means it's going to scale even more poorly beyond that.
Not without doing things in a hacky way - at which point, don't use the ORM. Even if you manage to use .extra() and similar to get the job done, you'll be scratching your head when you want slightly more fancy queries. If its a one off, use raw sql - if its a common thing, use a more powerful ORM.
It would help if you actually told us something about the structure of the models and their relationships, and the way you're attempting to write the query using ORM methods.
That doesn't tell us much. Maybe you just like things that are awful.
&gt; once you get past something like C you have pretty much lost that battle. C is *way* worse in this regard than many other languages, as you point out, so what do you even mean?
Actually, I wrote the query out above. Basically the table names / field names have been replaced, but that is the exact query. It's a trivial query joining two tables in an M:N relationship over a join table, where the records from the left side of the join should returned regardless of whether or not they have a corresponding record in the right table. The approach in the benchmarking I did was to just use the simplest possible Django query that should line up 1:1 with the produced SQL query, which was asking for all the objects from Table 1 and prefetch_related("table2").
Still on work. Call it a link for now :)
Flask is all about freedom of choice, you can pick/craft your own pieces for your app, if you want something more complete out of the box then try django which is the Rails counterpart in Python. In the Ruby world, using Flask would be like using Sinatra with lots of gems to build the app. So many choices, not too friendly for newcomers.
Is that 70secs the SQL time for the 2 queries, or the time for python to run the block of code? The former can be obtained from connection.queries (from django.db import connection) with DEBUG=True. Or with django debug toolbar if its running inside a view. If the SQL time is on a par with your .raw() commands, then have you tried things like .values() (or .values_list()) to only pull back the data you want from the tables? How many table rows are we talking about here?
Except you really *haven't* provided that information. And without it, it's hard to tell what exactly you want to accomplish and whether there is an easier way. From what you've posted, for example, it sounds like what you have, in Django model-field terms, is a `ManyToManyField` with `through`. But that's just a guess -- I have no way of knowing that, and without knowing it there's no way I can look at it and see if there's something better.
I agree. But there are always more important things to be done, like fixing bugs in the compiler, which is why we need a bigger community to do these things. So help us do it!
Well, that is the construct the Django ORM uses, but that is literally the SQL query that is executed (names changed, yada yada). I can c/p that and get the result set I want back, and there is a Django relationship from a table through a join table to another table, that it created via migration. So that's really the core information to the problem. I want the records from the left side table as Django model objects, with the associated list of objects joined from the right side. This is all pretty basic stuff. You could model it out in a few lines of code: class Table1(models.Model): # fields table_2s = models.ManyToManyField(Table2, null=True) class Table2(models.Model): # fields That is an incredibly simple schema to model, and the data base was generated from Django based on this layout. *** Just to make it clear, I'm not trying to just come down hard on the Django ORM here. I just assumed given experience with other ORMs that this would be something straight-forward and well-optimized. My assumption was that I was just missing something simple in the docs. I came here looking for that missing piece.
and you'd be correct. my advice is start planning to ditch it as it'll only continue to get in your way
Ok, but have you tried or used anything else, out of interest? You might like it only because you've not got anything to compare it to
Trac is written in Python, and it's very similar to Redmine. There are significant differences too, of course.
i'm running syntastic with pylint, but it still doesn't weed out the annoying kind of errors eh.
That's a tough one to answer cos I don't know much about your project, but here's some general info - of course it's easy to put the two together (as in, use alchemy alongside django) much like using any other library would be, but: No or few django plugins are going to provide alchemy support out of the box (at least, this was the way in ~2011) The django admin app thingy (another can of worms) isn't going to play with alchemy if at all It'll be worth it in the end though!
C programmers tend not to like control flow abstractions. Your argument was that macros are bad because they obfuscate control flow. In c control flow is usually obvious from the code and one can easily imagine what code will be generated when the program is compiled. As soon as you move away from c this becomes harder to do, I do not think this is always bad. I bet most in r/python would agree with me. If that argument still did not convince you than just think about how often you have seen macros and metaprogramming reimplemented badly, I would rather a powerful and idomatic mechanism for metaprogramming than many specific ones. Again do note that Nimrod macros are not based on text replacement like C macros are.
It seems you're not clear on what an ORM *is*. They're supposed to make relational databases look like object databases, and that's what you got. Django is pretty good in that it's easy to drop through that abstraction and get to raw SQL at various levels easily....
The Django admin panel is, IMHO, crap and only useful for a narrow little band of work. The team I took over tried to make it limp along for a while and spent so much wasted time trying to shoe-horn in the actual editorial workflows that were needed instead of just building the tools proper for the team. Very frustrating experience to have to go back and fix all that stuff. I guess the only thing I know of that is being used is an authentication/authorization plugin, and Sentry for monitoring. Maybe because of the limited plugin use it won't be too bad to move away. Thanks for your advice.
[Bottle.py](http://bottlepy.org/docs/dev/index.html) is just a single python file that you place in your project directory
no. But people tends to be blinded by their beliefs. Django is quite the opposite of aikido, it tries to follow its own way, and it yields a lots of surprises on the path. I would say that like every single heavy frameworks I used, they tend towards a big spaghetti mud of a leaking abstraction (symfony, rails, mason, django, and the weird new stuff in JS) . I tend to prefer glued techno for frameworks like ramaze (ruby) or turbogears, and avoid like plague the «heavy league» players, they are wrong for beginners, wrong for advanced users. 
Trac is an install-per-project though too, which would take up too much time and resources since I'll be adding projects frequently. :/ Unless I'm mistaken, that's how I thought of it as when I went to install it before.
Personally I'd choose [Tornado](http://www.tornadoweb.org/en/stable/) over Twisted for websocket stuff.
trying to use django-admin as an editorial CMS is quite frankly equal parts hilarious &amp; depressing. good luck!
&gt; Was that so hard? No. But it's far too slow for many uses. For example, go get ISP block level info for 2 million ip addresses. You've got 30 seconds.
You are welcome, check also this post http://www.reddit.com/r/Python/comments/226ahl/some_links_about_python_oop/ which contains other interesting links about Python OOP.
you should read his post in more detail. he's not asking "how do I do this query in django?" he's asking if there are some tricks to optimizing the performance of the query. have you profiled the performance of your query in web2py? if not than you're not addressing the point of OP. 
Got bored a little: import requests from lxml import html resp = requests.get('http://whatismyipaddress.com/ip/xxx.xxx.xxx.xxx') doc = html.fromstring(resp.text) country_xp = '//*[@id="section_left_3rd"]/table/tr[1]/td[1]/text()[1]' region_xp = '//*[@id="section_left_3rd"]/table/tr[2]/td[1]/text()[1]' city_xp = '//*[@id="section_left_3rd"]/table/tr[3]/td[1]/text()[1]' print doc.xpath(country_xp)[0] print doc.xpath(region_xp)[0] print doc.xpath(city_xp)[0]
&gt; The way you described it sounds right, only trying twice. A common failure mode is to accidentally loop if compiling produces a bad fortran module I don't loop on the "trying to import" thing, I just try once, if it fails I compile, if it fails again I exit. I expect it to fail the first time, I am abusing the "try" as an "if". Actually I have seen setups where it was required to "sudo" f2py because of the removal of some temporary files. I have no idea how to catch that exception since I have never tried my script on one of those. I guess "os.system()" is not the best way to catch shell outputs. &gt; Out of date targets. If the module is out of date but present, you'll skip compiling, even if the source is newer. This can lead to stupid errors, such as trying to debug bugs you've already fixed. Suggest at least checking that the fortan module timestamp is newer than the python one. This is a good one. In this precise case the imported loop is very simple, and I don't intend to modify it and provide updated versions, but this is definitely something I should pay attention to in other situations. &gt; Safe, correct codegen is tricky, but it sounds like you don't use user input in code generation so you should be fine. Exactly, it is just one string, with a few declared variables and a few IFs and DOs. Especially with Fortran, if I had to start worrying about line length, user-given strings etc I would quickly go crazy. And switch to Cython maybe. :p
Ok, so it wasn't a perfect, example. If you were importing DBSession into something outside the example package, the point would still be valid. You've solved for a one off specific case.
this is what I am using to test the function. The first way you suggested did not work, it is still returning the entire list without removing anything. I'm still new to python and I haven't learned filter yet. l = ['a','b','c','d','e','f','g','h','i'] remove(l,(lambda x : x in 'aeiou')) print(l)
***[You can use SQL directly.](https://docs.djangoproject.com/en/dev/topics/db/sql/)***
You didn't really answer the question but yeah... Here's a way to mutate the list. I wouldn't recommend it but it works. def remove(alist, p): to_remove = [] for i, x in enumerate(alist): # enumerate just returns the element + an index (0,1,2..) if p(x): to_remove.append(i) for j, y in enumerate(to_remove): del alist[y - j] Regarding enumerate(): These two snippets are equivalent: for i, x in enumerate(alist): print i, x and i = 0 for x in alist: print i, x i += 1 
The query in web2py translates exactly into the his SQL query. The web2py DAL can be used in Django if he so wishes. (it is a [single file](https://github.com/web2py/web2py/blob/master/gluon/dal.py)). I am not sure I am addressing his issue, I just telling what I know.
Would you be happy with python byte code? Then maybe [py_compile](http://effbot.org/librarybook/py-compile.htm) could work. Also there's [Freeze](https://wiki.python.org/moin/Freeze) which compiles binaries for Unix systems (probably works on Linux distributions). Furthermore, there's is [cx_freeze](http://cx-freeze.readthedocs.org/en/latest/index.html) which has cross platform support. 
I could certainly suffice with just the byte code for the most part. Ideally though I could get something down to a C level and use the Linux environments Native Cross-Compiler and not have to worry about even having Python on the device. I will take a closer look at the tools you mentioned.
well then it isn't worth much of anything then is it?
Yea I'm not sure I believe the ORM is completely at fault here. Well it might be at fault for not being obvious how to do what you want, but I've never seen it be 35x slower than SQL without something else going on. Hard to say without code!
Besides using SQL directly, you should be able to achieve this using a standard query using the double underscore ('__') syntax. As long as the models are setup the relationships correctly; then it should work. For your example, it would be something like: items = t1.objects.values('a', 'b', 't2__a', 't2__b').all() print items.query.__str__() #to see the query EDIT; sorry, reddit doesn't format double underscores well. 
Can you please share how you are building the query using the ORM?
Where did you end up? Given SalAlchemy and jinja2, Flask?
I tried to get into SqlAlchemy, I found the documentation too poor.
&gt; That's frustrating because I work with really large sets of data, and the ORM really seems to be that bad I was under impression that an ORM, at least one as abstracted as Django just wasn't the best idea. Sounds like you need something less abstracted.
Don't do something like `for i in range(0,len(alist))`. It's unnecessary because Python provides more convenient, less error-prone ways to iterate over lists (and other iterables): for elem in alist: # do something with elem And if you need an index: for i, elem in enumerate(alist): # do something with i and elem However, when iterating over a list and removing elements from that list at the same time, you might get unexpected results: &gt;&gt;&gt; def remove(alist, func): ... for i, elem in enumerate(alist): ... if func(elem): ... del alist[i] ... &gt;&gt;&gt;l = [0,1,2,3,4,5] &gt;&gt;&gt; f = lambda x: x &gt; 2 &gt;&gt;&gt; remove(l, f) &gt;&gt;&gt; l [0, 1, 2, 4] Do you see why this is happening? A simple trick to get around this problem is to traverse the list backwards. You can iterate over a list in reverse like this: for i, elem in reversed(list(enumerate(alist))): # do something with i and elem Try to understand why the problem doesn't occur this way. Also note that there is a difference between `reversed(list(enumerate(alist)))` and `enumerate(list(reversed(alist)`. Only one of these works.
no, unless you use any django plugins or the admin or anything else that expects the orm stuff to be there which is damn near everything .
&gt; ORMs are bad at nontrivial SQL except for SQLA, I haven't run into a query I cant do in SQLA yet. And line of business apps usually have pretty hairy queries especially if you are dealing with a db schema designed 10 years ago or by an actual DBA that gives no fucks about your code. 
Decorators are never my go-to method (except for caching or memoizing as you said). Maybe it's just the way I think, but I feel like if you jump to decorators as your first solution then you might be doing it wrong. In my experience if decorators become your first solution it makes the code overly complex and gets ugly quick. I'm sure it can be a good solution for some things, but I can't think of any.
It has a function and a place - but for involved, very bespoke things, it isn't the best choice
If there's a common pattern of doing something before/after a function call, or as a way to tag/add information to function calls. I've used them for caching, to convert functions into events and the corresponding handlers, to create converters between the underlying types in a wrapper function, and seen them used to implement properties (this is the `@property` decorator in vanilla python), as well as routing and authentication for web applications.
Lack of basic understanding of material. Making game is not easy, especially True REAL successful game as you put it. Your English is really not that good, and you sound like a prick. While sounding like a prick may be intentional and you are just trolling, there is also possibility you just do not know how to express yourself very well in English. 
&gt; Who're the big winners from HTTP/2, then? Two answers: browsers and servers. For servers, they have to handle fewer concurrent connections (so tying up fewer system resources) Obviously, if Google went that direction, at some point it made sense to them. But, I thought that we had event-based servers that weren't shy of keeping thousands of requests opened at the same time? I know, they aren't cheap memory wise though. &gt; and can more effectively distribute resources to clients (thanks to server push). Don't we have WebSockets for this? It even has data frames... &gt; For browsers, they can avoid the current limit on the number of concurrent connections per host, while taking advantage of complex flow-control and prioritisation schemes to maximise the efficiency of their bandwidth usage. Fair enough.
I respectfully disagree. From what I saw of the docs, there are roughly 4 ways to even get started mapping to a DB.
&gt; But, I thought that we had event-based servers that weren't shy of keeping thousands of requests opened at the same time? We do, but any reduction there allows even more clients to be served by the same server. If you can serve 20% more clients from one server, then you can reduce your total server count by 20%, regardless of whether you originally had 5 or 500. &gt; Don't we have WebSockets for this? It even has data frames... We do, and the similarity of WebSockets to HTTP/2 hasn't gone unnoticed. My understanding is there's a plan to have a new WS spec that basically runs WS through a HTTP/2 connection as an extra stream, mapping nearly perfectly onto the HTTP/2 framing layer. The reason WS isn't good enough, though, is that things like CSS and JS which are normally embedded into the HTML need to be fetched over HTTP by the browser. You can't push them via WS, but you can via HTTP/2. Ditto other web pages on your site if you want to prime a cache.
If it *works* for you, do it!
If you like Flask's API, consider [Klein](https://pypi.python.org/pypi/klein). It has an API similar to Flask's but it's built on Twisted. I would try to avoid having part of your application use blocking calls (Flask) and part of it be event-driven (Twisted), that sounds like a situation that would make it unnecessarily difficult to share code between the two. 
`activate` is an attractive nuisance, less useful than it looks.
Pretty much all 'freeze' utilities work by bundling the interpreter and source or byte code, which is not much better than bytecode.
That could be my motto. But in terms of programming, what I'm best at is reinventing the wheel. And this "get Python to write some code to a file, then get Python to get the system to get f2py to get a Fortran compiler to compile it, and finally import it inside Python" seemed a bit of a stretch. Now, I never had programming training, so maybe I'd be horrified (and/or excited) to see what hacks hide in "respectable" codes. It's always interesting to read people's "this is what I would do" comments.
You mentioned using MySql with the Django ORM. I once had a problem with an ORM genrated query that caused trouble with the MySql query optimizer. Replacing JOIN with STRAIGHT JOIN was a huge boost...
This presentation covers a lot of the options: Brandon Rhodes: The Day of the EXE Is Upon Us - PyCon 2014 https://www.youtube.com/watch?v=wsczq6j3_bA
Well that is because the post explains how to use git to publish the static content on github, also this applies to any static site generator (even non python ones).
pythonanywhere.com is the easiest solution. 1. Go there, signup for a beginner account. 2. Then click I want to build a web application. 3. Go to files tab on the next page 4. Upload you txt there 5. Go to consoles and click a suitable python console (2.7 or ipython 2.7) 6. Then in the opened console put your code 7. Alternatively also upload your script and in the console do execfile(''you_file.py) 8. In the file just load up your dictionary like it was in the same directory as your script, which it is. You can also just put your dictionary in the code. Or fetch it from pastebin in a repl that has the requests or urllib modules , which it seems only pythonanywhere does in an easy way (no proxy block). You can also just host an ipython notebook on your pc and use dynamic dns or something along those lines. But thats getting to much into it.
Right... What I was doing was questioning how relevant this post was to /r/python. &gt; news about the dynamic, interpreted, interactive, object-oriented, extensible programming language Python
Well that is if you have any repository that will have a url like username.github.io/reponame. That doesn't apply for the special repository called username.github.io
This is embarrassing. I am gonna die in my 2-point-something world alone.
Thanks so much for the reply. I tried this approach and was able to get it to work in the pythonanywhere console but NOT on the 'free web app' URL, which is my next goal. Is there an easy way have this run on the web app URL? ( [username].pythonanywhere.com ) in a console-like UI, where the user can type inputs and react with the .py script, or does that require Django/databases? So far my attempts lead me to this message: (i.e. I don't know how to actually RUN my python script as a web app): "It worked! Congratulations on your first Django-powered page. Of course, you haven't actually done any work yet. Here's what to do next: If you plan to use a database, edit the DATABASES setting in mygame/settings.py. Start your first app by running python mygame/manage.py startapp [appname]." I will keep working at this and would always appreciate help! 
People who haven't taken the time to learn it always say this.
Nah. You'll have plenty of company.
The most common way I use decorators is for alternate constructors. I'd explain but the guy in [this](http://stackoverflow.com/questions/141545/overloading-init-in-python) link does a much better job than I would.
I've mostly used them in our test frameworks to flag functions we want to have logged in the test results. Have a standard function for capturing the function name, inputs, outputs, time to execute, etc. Using decorators makes it easy to flag which test functions should be included/excluded. 
This article covers an old school topic. In this day and age we use concurrent. futures or the new asyncio module to perform multi-threaded operations in Python.
Probably not important.
Nice! I made [a little one](https://github.com/fewf/curtsies_2048/blob/master/fungame.py) too with a friend last week using [a terminal wrapper](https://github.com/thomasballinger/curtsies) I wrote that's like curses, but less compatible and higher level.
If you honestly and truly think that then [you do not understand the issue](http://www.jeffknupp.com/blog/2012/03/31/pythons-hardest-problem/).
There will be a separate article talking about GIL, so don't worry and take it easy!
They're higher order functions useful for modifying a group of functions a specific way. They're like context managers for functions. Memoizing and debugging decorators are common examples. They also get used a lot in web development when managing account permissions or a pool of database cursors. Flask and Mock uses them extensively. Some common Python native decorators include property, staticmethod, and classmethod. If Python had proper multithreading, you could use them to acquire and release mutexes. If you're familiar with Go and `defer`, you can kind of mimic the same behavior with decorators.
It's a pretty glaring omission from an introduction to threading, the failure to note that multiple CPU-bound Python threads *don't work at all*.
I did look into blender games and i was disappointed. I really want to see a Powerful , commercial 3D engine that have python as secondary scripting language.
That article is interesting, but a bit hard to follow. The spelling and grammar could use another edit.
Oh, I am sorry that you took it so personally. English is also not my native language, and I am sorry if I sound like racist. Sometimes stuff that I write comes off as rude, I hope that it will happen less often as my English gets better. You asked why downvotes, I gave you my reasons, it is also possible (I think even likely) that other people gave you downvotes for similar reasons. First and major reason is that information you are looking for should be easy to find on your own if you were half serious about game development, that is what I meant by lack of basic understanding of material. English bit: I wrote it because there is chance you have similar problem to me and while you do not mean anything bad it just comes off wrong. About racism, I am very very strongly against that kind of stuff. It is just pure evil. It is not just racism, I do not have much higher opinion about nationalism too.
This is exactly what happened to us. We started a rather large internal project in Django, then slowly stripped parts off of it until Django became nothing more than a router, at which point we replaced Django with Flask and never looked back.
Why? Is Tornado better in this case?
You mean using Twisted WSGI Server to talk to nginx directly without flask at all? 
The post makes reference of how to make use of class methods, not decorators. It just happens that declaring a class method requires the use of a builtin decorator... 
I think too many ORM implementations are actually OrM (paying too little attention to Relations). In general, my rule of thumb is if you are *really* dealing with objects, then a non-relational DB such as Mongo or Couch is your best storage anyway. For systems with relational data? I prefer a DAL over an ORM.
The summary is pretty much the declaration of intend of SPDY &amp; http2 so it's not very surprising. I'm pretty sure the whole purpose was to optimize normal web browsing use case by enabling header compression and resource pushing (which required multiplexing bidi communication). It's not an accelerating magic wand.
Sorry for the delay in replying, and so sorry you came across the worst of us Argentinians (the more vocal and economically accommodated tend to ruin it for the rest, as in every place on Earth, try to not generalize your opinion based on that too much, and all will be fine :-D). Take care, thanks for your wishes, and I hope the best for you! 
On my MacOS machines, I personally prefer Miniconda to manage Python versions, modules, and packages
There's a framework which employs a very beautiful use of decorators to apply permissions to controller functions. (I can't mention the framework on /r/python by name, because an army of karma-killing robots will down-vote me if I do...)
There are billion ways to get around GIL, if not trillions. GIL is over-hyped.
The thing is, if you python code is CPU bound, threading is last your problems. There are gazillion popular programming languages out there that does *NOT* support native threading, of any kind at all. The most recent example is that NodeJS is single core single process with no threading support yet still kicks ass. (I knew there's Nodejs cluster, but which language does not have a cluster?) So many people want threading as the magic bullet and pissed of with this imaginary CPython "GIL" issue. In fact, if you have a problem and want to solve using `import threading`, then congratulations, have now you. problems two 
Just a couple thousand @mock.patch()s a day keeps the sanity at bay.
Python 2 as a series was deprecated 7 years ago - the norm in the open source community is "release early, release often" and support is for the current version - 2.7 has been deprecated by 3.0, 3.1, 3.2, 3.3 and 3.4 - what you're asking is the equivalent of people demanding Microsoft still fully support Windows 3.1. What Perl tried to do with Perl 6 was completely re-write the entire language including the core infrastructure (changing from bytecode interpretation to JIT compilation) then tried to bite off more than they could chew by making a generic framework for any language to use the same JIT engine - neglecting Perl in the process. What PSF did with Python 3 was make a few minor backwards-incompatible changes, one of which exposed how poorly many programmers were dealing with text encodings - and doing it properly meant a lot of work in rewriting, sometimes refactoring, and also regression testing the codebase. Note the proper way to do things was always supported and documented in Python 2, it was clearly misunderstood &amp; _enforcing_ it in Python 3 causes problems for bad programmers. There is a huge difference. 
... given that you have the luxury of running a recent version of Python. Granted, concurrent.futures is already available on 3.2 I would love to have 3.4 in production for the exact reason of asyncio :'(
I can't speak for windows because I do not use it, but I code python at work and at home. At work I use Fedora20 and at home I work on a 2011 Mac and on the go a macbook air. I have never felt any difference between the two OS. I also use vagrant for both OS. 
Not exactly, I meant hosting your Flask app within Twisted's WSGI server, and running a Websocket server in Twisted as well. Then you could put nginx in front of Twisted if you want.
I'm not sure what you're suggesting, that people uses a linux vm everytime they want to use python (which is incredibly stupid) or that they just use linux for everything, in which case why not just tell them to install linux natively?
Delegating is much better and more pythonic (explicit) way of doing such things.
You dont need Django, you can use flask or bottle, much simpler
Windows/macs are fantastic for 'casual use' - eg, playing games, browsing the web, etc. Linux is the only sensible operating system for programming on (mac is borderline ok though). If you're spending 7.5+hrs/day programming, even if its mostly just python, using a virtualbox is justifiable. Especially if your company has a mac/windows-only policy - goodluck getting permission to format your machine with linux! Nothing wrong with having virtualbox on one monitor, windows on the other. Does get annoying when you'd rather have both monitors with linux though.
You should be using the context manager interface to locks. with lock: bla
Thank you for the comment. **Delegation** is a generic word that encompasses both inheritance and composition, since its purpose is to 'delegate', i.e. have another object to perform the requested action. I think you probably mean *composition*. The *inheritance vs delegation* is an always interesting debate and, as for many things, I think that error lies on the boundaries. The right tool for the job: sometimes is composition, sometimes is inheritance. I however agree that inheritance is often overused, and the problem lies exactly in introducing it as a fundamental part of OOP. OOP is about delegation, not inheritance. Check http://lgiordani.github.io/blog/2014/03/05/oop-concepts-in-python-2-dot-x-part-1/, section "The Delegation Run" for a more detailed view on the subject. About the *is more pythonic* stuff: I think this sentence is overused too. Explicit is better than implicit, but not always. Otherwise we should ask Guido to remove inheritance from Python, which performs implicit calls. And multiple inheritance with MRO, which is implicit. And the call to `__new__()` and `__init__()`, which are implicit. And so on. So, if your point is that inheritance is used most of the times where composition could be a better choice, I agree. The purpose of the post, however, was to introduce Python beginners to the way Python inheritance and overriding work, and Python has inheritance and overriding, so probably sometimes it is worth using them. Thanks!
how about you post it with a throwaway?
[futures](https://pypi.python.org/pypi/futures) is a backport of concurrent.futures to python &gt;= 2.5.
What about this [pokemon](http://i.imgur.com/6xDO6TJ.jpg)?
For some people it'll be worth it, but for highly bespoke workflows, time is better spent building something ground-up rather than spending inordinate amounts of time wrestling something into doing something that it doesn't want to do. i don't know if you've ever worked in publishing but the kinds of editorial workflows they require, django-admin isn't the right tool for that job in the slightest
You start off with range(0, len(a list) but you delete items from the list, so the length will change. You could traverse the list backwards, counting down from the length - 1 to 0. But the more pythonic way is as tst__ suggests, to use a list comprehension.
I find them to be generally pretty terrible, outside of mock.patch.
Yeah, I don't have a lego board at my job :( I guess I could make one using the 3d printer, though.
Terminal or terminal like access: @log @login @telnet def runcmd() ...
I concur. I'd say that SQLAlchemy has some of the most thorough documentation I have seen, but that is not the same as the best documentation. I'm using it for a current project, partly because I think it would be a good thing to know about, but I've found it pretty hard going.
&gt;... what you're asking is the equivalent of people demanding Microsoft still fully support Windows 3.1. It is exactly this way of thinking about things that is causing the problems around Python these days. A language specification normally exists separate from implementations of that specification. In the case of Python the dominant implementation is often confused with the specification. People still support C implementations even though the vast majority of the specification is ancient. A language specification does not require constant upgrading. Normally things are better when a language specification is kept mostly static over time. 
Personally, I think the api is much simpler. Also, I could be wrong, but isn't websocket support is not merged to twisted main branch yet? 
BTW, none of this is necessary for Mac Python. You can do this all without homebrew manually, with virtualenv. In fact, I do all this on a per virtualenv basis, and have a template for it. In this way, I can have a completely fresh, custom Python environment for a project or a client -- all without adding software to the user folders, etc.
xD
I'd like to know too, especially which framework would /r/python be downvoting (if)
Education is a worthy concept, but how exactly does trinket.io make money?
My experience is that the homebrew and anaconda don't like playing with each other. brew doctor will complain about unmanaged config files and anaconda will bin stomp your homebrew installation. I find that both have their advantages/disadvantages which boils down to this. Homebrew ------------ ## Advantages * Made to live symbiotically with OS X as a POSIX compliant OS * Leaves system python alone. * User customizable API. Very easy to edit brew files and install from git repos. You want to play with Python 3.5? Sure go ahead. * Has a very "OPEN SOURCE ALL THE THINGS!" mentality. Great GitHub community and is one of the best supported packages. * It's FREE ## Disadvantages * Apple doesn't give you gcc * Compiling numpy/scipy/pandas/matplotlib * No GUI installer, all CLI tools. * Getting used to /usr/local/Cellar. Anaconda ------------ ## Advantages * All in one installation * Conda binary package manager. No long compilation, dealing with mismatched fortran abi or is linking required. * Access to fast linear algebra libraries and compiler optimizations like MKL, Numba, Nvidia CUDA. ## Disadvantages * Doesn't play nice with system python. Tools linked to system python will break. * Doesn't play nice with virtualenvs outside it's own virtualenv. * Slower update cycles. * Still very Python 2.7x centric. Python 3.3 support is still very bare bone. * Breaks every once in a while when apple ships new patch or OS rev.
I don't think I can linearize my problem (it is some kind of convolution, but with a variable function). NumPy makes table access and operations faster, but still much slower than Fortran (I didn't time it, but I see no difference between the "pure Fortran" and the "Python with Fortran in the nested loop" codes).
Memoization of function and method results is a wonderful use of decorators. `lru_cache` is part of Python now, but `cached_property` is not. Fortunately there is https://pypi.python.org/pypi/cached-property
Trinket co-founder here. Great question; solid business models are key for doing lasting good. Our forthcoming premium plans will turn on enhanced student-teacher interaction, management of student data, etc. in these existing embedded trinkets. That means you can teach with them for free and upgrade at any time to turn on better functionality. We're aiming to provide a permanent community resource (embeddable Trinkets) that get even better for premium users (seeing what students are doing during class, collecting assignments, centralized curriculum for schools). The free version helps us grow and the premium version makes the tool even better for teaching and gives us revenue. Win-win if we can pull it off :)
Uh, why would Django experience not be relevant to a reimplementation of Django's template system? Why would interacting with a database not be relevant to interacting with it through another library? Surely one knows SQL in either case, what are we, bakers and butchers?
bottle.py does this too. I wish UI toolkits allowed me to use decorators to attach functions to UI elements
These are relative imports. http://chimera.labs.oreilly.com/books/1230000000393/ch10.html They are great because you can change the package name without having to change all of the imports inside the package. 
3-6 extra lines of code, but minus one slow abstraction layer...is not technical debt. It may not be the right trade-off for every project, but it's hardly debt.
&gt; ORMs are bad at nontrivial SQL And a lot of applications are kept trivial and suffer from usability issues - merely because their developers can't implement non-trivial SQL. A perfect example of this is the selection list. Most applications will allow me to pull down a list of items to work with. And almost never will they provide the extra info that I really need to know which one: counts of related objects, statuses, etc - because that would make the SQL difficult &amp; slow for the ORM. Even though it should still be a fairly easy query for any developer to write.
I haven't used numexpr extensively, but I think where the package shines (and you don't test) is situations where Numpy would create a number of temporary arrays like in: a*b-4.1*a &gt; 2.5*b as suggested in the docs. Where a and b are large arrays (1e6), numpexpr is 15x faster on my machine
&gt; a*b-4.1*a &gt; 2.5*b Thanks, I will check it out now!
and virtualenv and pip... anaconda is all I will use from now on unless I see reason to do otherwise.
I loved that book as well. I have many Python books, but I'd have to say the closest to K&amp;R in style and goals would be The Quick Python Book[1]. It's great. [1] http://www.manning.com/ceder/
This book is similar. Not really a beginner's book like the other O'Reilly "Learning" books. [Learning Python](http://www.amazon.com/Learning-Python-Edition-Mark-Lutz/dp/1449355730/ref=zg_bs_285856_2)
You could do the exercises from K&amp;R in Python. Of course, they're aimed at teaching C and at a lower level, so some of them will be trivial and some of them will make it annoying to do something that would be simpler in a more pythonic way. But they're a great set of exercises and I bet you'd know Python better by the end of it.
Was a nice suggestion, did this for matrix sizes up to 10^4 x 10^4 now, and there it is ~500% faster than NumPy... Want to see 10^5 x 10^5, but I guess this is more like a over-night(s) project
thanks, I am looking into this
hmm ok, I will give flask a try when I get back to this, thanks
I always recommend Learn Python The Hard Way.
You see, this is the kind of info that it would help to have in your initial post. Does [this](https://docs.python.org/3/library/turtle.html) help?
yes thank you
Is this needed if I'm using setuptools? I thought it handles the `setup_requires` argument properly.
Say goodbye to the Django admin and syncdb mgmt commands if you switch to sqlalchemy
The real life person that movie is based on, Anna Wintour, editor of Vogue magazine in the US, reportedly does things like refusing to take a public elevator and having [her bodyguards carry her downstairs instead](http://www.huffingtonpost.com/2010/06/21/tim-gunn-anna-wintours-bo_n_619154.html).
I agree, however I add virtualenvwrapper. A nice set of bash scripts and hooks for those who work with multiple virtualenvs.
David Beazley's "[Python Essential Reference](http://www.amazon.com/gp/product/0672329786/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0672329786&amp;linkCode=as2&amp;tag=jexnet&amp;linkId=A3SKQUHKCJKKLJUO)" is very concise and clearly written.
From my personal experience with Django and GAE I would avoid using Django at all with GAE. It simply a not perfect fit and there will be bits of it which won't work as well as you would expect. Flask or webapp2 type frameworks are definitely more suited to GAE. You may want to even consider google's Go Language as an option.
That would be a fair comparison if "Learning Python" covered anything in addition to the core language, but it doesn't. There's a second book ("Programming Python") that devotes another (more justified) 1600 pages to the standard library. In its 275 pages, K&amp;R has a step-by-step tutorial, a detailed language reference and a brief standard library reference (as per the ANSI standard). I'm not arguing that they should be the same length - but as someone who has read "Learning Python" from cover to cover, easily half of it was redundant or useless. The author just seems incapable of explaining anything without rambling on and on. Other books cover the same material with far fewer words.
I found your article interesting, but I disagree with your conclusion. In your summary, you wrote: "Always call the original implementation of a method you are overriding. This makes the underlying API work as expected." While I would agree that it is generally good practice, "*always*" is far too strong, due to potential side-effects in the base method. Two simple counter-examples built around your Logger base class: * Consider a class FilteredLogger that subclasses logger providing the ability to restrict logged events to only those that meet some specified criterion such as severity level. In this case, super() should only be invoked if the event passes the filter test. * Consider another class RemoteLogger that subclasses logger to log events to some remote service rather than simply print locally. In this case super() should never be invoked. One might argue that the base class should probably be refactored to better support these use cases, but in practice it is often impractical, such as when subclassing from another library that you do not own nor wish to maintain. I suggest that super() should be called whenever possible, and certainly when the intent is to *extend* or *augment* the base class method. When it redefines the behavior, such as the classical case of a draw() method for a Shape being overridden by Rectangle, Circle, Triangle, etc subclasses it would be an error to invoke super(). In practice, I believe that good class design and proper documentation largely prevents the issues that you raise.
That's fantastic! I've just been using it as a graphic calculator that supports lambdas and higher order functions.
I haven't had any problems with homebrew and anaconda interacting since I always use them separately; I only add anaconda to PATH when using anaconda and I don't run my brew commands with anaconda at the front of the path (much like I don't run my brew commands with a regular python virtualenv activated). I do remember some overlaps with the virtualenv / virtualenvwrapper in my homebrew python and the virtualenv support in anaconda. Just two points on the anaconda disadvantages: * Continuum (Anaconda) is slower to update the full Anaconda release but I find that you can usually just update what you want to get the latest version of something. A current example is that the anaconda 1.9.1 release includes iPython 1.1.0 but you can simply run 'conda update ipython' to get iPython 2.0.0 if you want the newest version. * Python 3.x support is not so bad (see [available packages](http://docs.continuum.io/anaconda/pkgs.html)). Even if you can not find what you want to install with conda then you can always use pip in your anaconda Python 3.x environment (right?).
I would definitely think about using Go Lang. But since its new, I am not sure how mature its web frameworks are actually.. 
Thanks. I usually make it a PDF with syntax highlighting. Glad to help.
^^^ this. A thousand times.
link no work... =(
That would be ok if it weren't for the fact that not all of us control what we can use at work, let alone have admin rights to our machine, if at all. With Anaconda/miniconda, I can install Python virtual environments even on a Windows 7 machine with no admin rights. At home, I use Linux, and of course, it doesn't get better than that when it comes to developer-friendly OSes. Just don't forget in the real, working world, a lot of us just don't have a choice. I think it is why you're getting down votes. 
So... Build Jekyll for practice?
I am intrigued... is anyone actually using this or is it just an academic exercise?
Still ask to register?
[here](http://www.amazon.com/Python-Essential-Reference-4th-Edition/dp/0672329786/ref=sr_1_1?ie=UTF8&amp;qid=1400644408&amp;sr=8-1&amp;keywords=python+essential+reference+4th+edition) you go sir
One thing that this demonstrates to me is that the function annotation syntax introduced by [PEP 3107](http://legacy.python.org/dev/peps/pep-3107/) can be cleanly implemented with decorators. The annotations are really one of the most drastic, yet least used, additions to the language added recently.
And [here's](https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;cad=rja&amp;uact=8&amp;ved=0CDUQFjAB&amp;url=https%3A%2F%2Fmicroembedded.googlecode.com%2Ffiles%2FPython_Essential_Reference_3rd_Edition.pdf&amp;ei=_TN8U8HuH4WcyASg_4KYBQ&amp;usg=AFQjCNHMo9zUSa8ZpwAqhOb1NNqCR3rhlQ&amp;sig2=efgMYJTEQW0A6HmM9uyDLg&amp;bvm=bv.67229260,d.aWw) a link to a pdf of the actual book for all us poor programmers 
Thanks oh fellow poor programmer.
What IDE would be useful for Pyhtln coding?
please use bytearrays and skip all those += ops that are only quick on cpython because they have a hack for refcount==1
Thanks for making the effort to share your work! Not very long ago, this style of programming seemed insane to me but you're absolutely right that "full" OOP is useful for the right problems. Spotify's [Luigi](https://github.com/spotify/luigi) ETL library is a great example of this. The problem domain is very messy by nature so the ability to override methods to interact with bizarre inputs or work around constraints unique to your environment adds significant value. 
Thanks for the advice! :] &gt;+= ops that are only quick on cpython because they have a hack for refcount==1 could you point me at an article or some docs that will help me understand this? It sounds interesting (the hack you're referring to).
Thanks! I downloaded the pdf and it looks great! I'll buy it though, as I much prefer to have a physical copy to use while programming
Thank you very much. I see your point and I agree with you, sometimes refactoring is impractical and you need to avoid calling the orginal implementation. So that "always" is really too strong. Im going to update the post with your considerations. Many thanks!
 import subprocess import StringIO input = StringIO.StringIO() output = StringIO.StringIO() subprocess.Popen('ssh remotehost', stdin = input, stdout = output) This doesn't actually work though I don't think, and I forget why. Sorry
Nice! Now hopefully a stable Eclipse will hit the streets soon. 
K&amp;R is a complete manual for the entire C specification, not specifically written to be an introduction but rather a complete reference. So with that in mind, I think Programming Python from O'Reilly, with its bible thickness and 1600 pages, seems like a good bet. 
Try [Spur](https://pypi.python.org/pypi/spur), or [Fabric](http://docs.fabfile.org/en/0.9.1/).
If you are interested, I made a second version where I [compared `a*b-4.1*a &gt; 2.5*b` for Numexpr and Numba and parakeet](http://nbviewer.ipython.org/github/rasbt/One-Python-benchmark-per-day/blob/master/ipython_nbs/day7_2_jit_numpy.ipynb?create=1) 
im not aware of the exact location of the docs on that, but its one of the performance differences between cpython an pypy because those ops are basically O(N^2) instead of O(N) on any python implementation thats not having that refcount hack
Vbox supports assigning multiple "displays" to VMs. Can't give you specifics for linux-vm on windows-host, as my setup is the other way round. 
I would strongly advise NOT to use django-nonrel. We are currently using it with MongoDB as a backend and it really hurts as big time. One thing for sure is that Django is relational by design/nature and using NoSQL defeats the purpose of using it. Some points you might need to consider before doing anything. (This is coming from a mongo perspective) 1. Is your application relational by nature? Expecting lots of joins? 2. Do you need transactions? Mongo doesn't support transactions (yet) I think flask/bottle are good choices.
Its quite decent, I use both pydev and pycharm daily.
thanks, reading it now 
If you ever get a chance to attend a class put on by him, its totally worth it too. 
I think posting jobs if you are not a recruiter or HR person is fine. If you are, then not.
what is the use case? for remote administration I'm using fabric that supports the python sudo function, in python you do something like sudo("command") and that command is executed remotely as another user, root by default.
What kind of language requirements are talking here?
A snake language.
I'd second the vote for "Python Essential Reference". K&amp;R has two parts: a concise language description followed by examples of using the language. PER has the same format, except that the examples part involves using the standard modules. I've bought multiple copies of K&amp;R and the second, third and fourth editions of PER.
The one that goes, 'SSssssSSSSsssss' :p
Is opening the Chamber of Secrets involved?
&gt; Or simply using native Google API with a framework like Flask would rather be more productive? if you are committed to appengine, why wouldn't you? it's like buying a ferarri but only driving it on sundays at 30mph. using the native api with something like flask or bottle or pyramid is totally reasonable IMO. FWIW, the backend to [this product](http://batterii.com) was written in pyramid using just the appengine sdk and the front end is all emberjs. (i used to work there). I think it was the right tech stack for the job. 
Thank you so much!
I think it would be best if you allowed your recruiting staff post this, otherwise you might misrepresent exactly what they are putting forth and could be liable for the results.
 def make_money() return "just enough dollars" Sorry, couldn't stop me!!!! :P Seriously, I don't know... Maybe tell us more about you? Where you live? Here is one advice. Do what you like, people who don't like doing it will pay money for it ;)
I'm an 18 year old Computer Science Major and just finished my first 2 semester (which included 2 java courses). I'm taking 4 summer courses, so i can't really work much. I live outside Philadelphia, PA. Even if it doesn't make me money, I would love to learn and do some neat projects! Nothing too crazy, but I want to be slightly challenged. Programming is such a creative and amazing hobby, which I would love to get more into.
im lazy, for new projects with different configuration and conventions i use pycharms, for others i use pydev with different configuration :]. I like both and both are usable imo.
Get a job where they pay you to write Python software. That's what I do anyway.
Stackoverflow might be a better place for this question. Anyway, could you give a small example of what you want to happen? It's a little confusing.
Unfortunately they don't work with decorators that wrap functions so they are pretty useless for relying on. You generally have to come up with an alternative API that works in the absence of them. Aside from that, very few people write python 3.x exclusive code so that feature is often not possible because people need to support 2.x.
Pythonium seems dead, but this seems to be the same idea, and actively being worked on : https://github.com/PythonJS/PythonJS 
Learn a python framework like kivy and then make an app that you can sell on the Google play store or the apple app store. That's probably your fastest bet. If you don't want a paid app, just put ads in.
very few things aren't real subreddits :P.
Yeah, it seems i find one every week just by random shit like /r/webdevelopment.
Apparently /r/snuffleupagus isn't a thing. yet.
Consider a setup.py that works like this: import x; setup(setup_requires = [ 'x' ]) The x package is needed to call setup() itself, before setup_requires = ['x'] can possibly be executed. As you can imagine a lot of useful helpers, for example code that finds the version number to pass to setup(), would fall into this category.
Thanks. You might also want to post at https://www.python.org/community/jobs/ if not already done.
Doesn't trying to recruit people make you a recruiter? 
I learned Python (well, started to learn, as it is an essentially unending process) by reading the [official Python tutorial](https://docs.python.org/2/tutorial/index.html).
What about the modulus operator? If you only want to zero out 256, and 512, and your range is restricted to 0 - 512, then testing array values mod 256 seems like the way to go.
Try posting on https://djangogigs.com/ maybe?
[mypy](http://www.mypy-lang.org/) looks quite promising (and Guido thinks so too).
/r/forhire ;)
Maybe. I figure that if you are not paid for it, then no. 
Does Cython use this? I haven't looked deep enough into it to tell for sure so I thought I'd throw that out there.
Look up [index arrays](http://docs.scipy.org/doc/numpy/user/basics.indexing.html#boolean-or-mask-index-arrays): &gt;&gt;&gt; arr = np.array([14, 152, 256, 256, 143, 512, 414]) &gt;&gt;&gt; ind = (arr == 256) or (arr == 512) &gt;&gt;&gt; arr[ind] = 0 &gt;&gt;&gt; arr array([14, 152, 0, 0, 143, 0, 414]) Tough I haven't tested this it shouldn't be too far off.
That page hasn't been updated in months.
Sadly, I don't meet the requirements but I was curious, if you could please ask your friend to recommend some good Japanese websites with job offers for foreigners? 
Nothing is out there. 
Find people that have problems, then solve them using python and charge them money.
like Parsel Tongue? 
They work just fine if the decorator uses ``functools.wraps`` or equivalent. ``inspect.signature`` will unroll the wrap chain to reveal them. You do have to come up with an alternate API for Python 2 users though.
I believe it has since been moved to [media.py](https://github.com/reddit/reddit/blob/master/r2/r2/lib/media.py#L444) if you are interested in the code (link on page is broken.)
From what you're saying it sounds like you're trying to set the 256 and 512 bits to 0. I'm not sure that will solve your problem, but if it will and that is what you're trying to do then you can make use of the &amp; operator. &amp; is fairly straight forward, it looks at the bits each of the operands and if they're both 1 then the resulting number will have a 1 in the corresponding bit. For example, 13 &amp; 7 = 5 as 1101 = 13 0111 = 7 Looking at the bits, the 2nd and 4th bits from the left both have 1s in, producing 0101 = 5 Applying this to your problem, using a bit mask of 0011111111 should produce the desired effect, ie. Iterating through the loop and changing every value to 255 &amp; arr[i] EDIT: Hopped on my PC to fix the atrocity that was my formatting.
That's the idea =] Except a much smaller and less feature-rich version. When you're stuck, you can go see how Jekyll solves it.
Don't treat MongoDB as a drop-in replacement for SQL databases. Treat MongoDB as a document storage facility, or a key-value store. If you try to shoehorn it into your application, you're gonna lose.
Could you just write fortran in its own file and ship that alongside with python script? Or better yet, have some build logic that invokes f2py and boundles the extension?
That's the "natural" way to do it, but I wanted to make it even more convenient by sharing one single file.
you could also try piping your user password to sudo -S - the -S option tells sudo to accept the password from stdin. Something like: echo "&lt;password&gt;" | sudo -S su - 
Take a look at the python debugger, documented [here](https://docs.python.org/2/library/pdb.html). If you're at all familiar with `gdb`, you should feel at home in `pdb`. I'd also recommend installing IPython and looking at the `%pdb` and `%debug` magic functions, which are both very useful. You can set breakpoints, but the workflow I have adopted is to use the `%pdb` magic function in IPython to drop me into the debugger whenever an exception is thrown. Have you looked at the [IPython notebook documentation](http://ipython.org/ipython-doc/stable/notebook/notebook.html#introduction)? In general, the documentation in Python is very good, but obviously more scattered than MATLAB's documentation. Also, if you're doing a lot of scientific work, you might want to consider using python through a scientific python distribution, such as [anaconda](http://continuum.io/downloads), which will make the installation of packages with compiled components much easier.
I haven't bothered to look at Reddit's source yet. TIL they have a nice and well-documented codebase. :)
&gt; Also, if you're doing a lot of scientific work, you might want to consider using python through a scientific python distribution, such as anaconda, which will make the installation of packages with compiled components much easier. Thanks. Part of my problem is that I do not know how all this fits together. For example I keep hearing about this-python and that-python... I do not know how it all fits together... For example there is Ipython - and then Spyder Python? What is just python? Why use Ipython and not just Python? What is a 'distribution' of Python like Anaconda? ... Thanks - sorry for the noobishness, I think I just need someone to un-noob me with all those terms so that I can get a clearer picture.. 
also check out http://blogs.siam.org/from-matlab-guide-to-ipython-notebook/ and others that are quite specifically helpful for those converting from matlab.. Google is your friend..
Yes, thanks, very useful. I was not aware that the entire Reddit codebase is on Github. It sure will be fun reading through it
To get started I highly recommend IPython notebook. While you might end up moving on from the notebook as your main programming environment after a while, you won't move on from it entirely --- it's outstanding, and in any case you'll continue to use IPython in some guise. So all you need to do is install Anaconda as per hbweb500's link and then fire up IPython notebook. There are lots of nice notebook examples [here](http://nbviewer.ipython.org/)
IPython notebook is just a browser based interface to an IPython session --- which is in turn a nice science-orientated interface to Python. So you're using your browser to write your code and see the output, that's all. When you work this way you create notebook files (ipynb files) that contain the content of your session. These can be converted to static HTML files.
My second TIL today :)
OOHHHH! I got it now! Cool thanks! So you just type away, save the session, and then like, one entry in my blog can just have that HTML file for all to see...
No problem -- it certainly can be confusing. Here's a quick rundown: *Python* is a language specification. There are several *implementations* of python. The most popular implementation is called *CPython*. It's the reference implementation developed by the Python Software foundation. Other versions of Python include PyPy and Jython, though I can almost guarantee that what you have downloaded and are using is CPython. IPython *isn't* an implementation of Python, as the name might suggest. Rather, it is a set of tools designed for using Python interactively (the "I" in "IPython" stands for "interactive"). The main component of IPython is the console. It has added comforts, like magic functions, which make it nicer for things like exploratory data analysis. CPython provides a Python interpreter, and IPython runs on top of this interpreter. It doesn't provide a new interpreter or implementation of Python. It's sort of like if someone wrote a new interface for MATLAB, but still used MATLAB under the hood. IPython also provides a "notebook" interface, which is akin to a Mathematica notebook. It is an interactive Python session that you can use in your browser and share with others. Along the way, you'll need to download packages for Python. The problem with some of these packages is that they include components which need to be compiled, and this can be difficult to do in a portable way. Some people have worked hard to build "distributions" of pre-compiled packages that should work on your system. Canopy and Anaconda are two such distributions. These are both "Python", but with some packages already included. If you are just using Python for web development, I'd suggest installing CPython and IPython, then using the python debugger. Do some searches for tools such as `pip` and `virtualenv` or `venv` -- these will help you deal with packages.
Your post should show up on the top anytime someone googles Python! :-) Thanks so much - some followups, So, when we 'add' libraries like numpy and scipy and stuff... are those libraries already compiled? ... Is having those libraries different from what a distribution might already have?... (Does that make sense?) 
Well, there are multiple ways of installing packages. If you go through your operating system's package manager, then these packages are usually precompiled. If you install using a python package manager, then they are not. Many libraries consist of python code only, and so they don't need to be compiled. Others include C or Fortran code, and do need to be compiled. Numpy and Scipy are included in the latter. The compilation process is handled by `pip`, but some of the dependencies cannot be handled by `pip`. So it can sometimes be easier to install a distribution instead. This distribution supplants your system installation of python when you are working in a terminal. It comes with its own versions of certain packages, such as numpy, but you can install other packages that were not included in the distribution too. On Linux, I've found that installing Numpy and Scipy with `pip` doesn't pose that much of a problem, and so I don't use Canopy or Anaconda. I think that the situation on Windows is quite different. I'm not sure about OSX.
You got it. You can either convert the ipynb file (notebook file) to HTML yourself or pass it to [nbviewer](http://nbviewer.ipython.org/) and they will host it for you.
Sure, you can. I guess the answer is that after an IPython notebook session you have an ipynb file that can be converted to HTML ... but it's just as easy to pass the ipynb over to nbviewer and they do a nice job of hosting these files.
Ahh, gotcha. Right right, you put your *file* there, and they host it so that you can just send a link over. I think I got it! :-)
Thanks! You are a gentleman and a scholar. :-)
s/comprimising/compromising/ in README.md I wonder if pylint pukes a lot of complaints when chewing the example code like abstract methods with missing body
Thank you sir, and please enjoy your Python adventures ;-) BTW, I'm one of the authors of [quant-econ](http://quant-econ.net/), which might or might not provide you with some useful info on making the leap to Python. 
Yeah, kind of makes sense
All decorators should use wraps anyway. You lose more than just the annotations without wraps; you also lose the docstring and, IIRC, the name of the wrapped function.
Hoping others will add some more links/pointers here. This is a (free) Blender game engine tutorial at cgcookie.com that might get you started: [CGCookie Blender Game Engine Scripting Tutorial](http://cgcookie.com/blender/cgc-courses/introduction-to-scripting-in-the-blender-game-engine-2/) I saw that the game engine is part of this year's Google Summer of Code. Here's the text from the announcement page at blender.org: Inez Almeida – BGE – Cleanup &amp; Support Mentor: Daniel Stokes This proposal targets some of the currently identified problems with Blender’s Game Engine. These issues include a high number of unsolved bugs, bad consistency of the user and python interface, lack of support and maintenance and poor performance for now-a-days standards. All these were acknowledged in Blender’s 2.7/2.8 roadmap, along with plans for better integration of the GE as an interactive mode. I hope Inez has a great Summer
Unfortunately, the last update was almost 12 month ago. I don't think it is going somewhere. 
This isn't a Python problem, this is a math problem. Using your notation, the original problem statement is B\*A, not A\*B. [Matrix multiplication is not commutative.](http://en.wikipedia.org/wiki/Matrix_multiplication#Properties_of_the_matrix_product_.28two_matrices.29) This means there is a distinction between left-multiplying and right-multiplying. This is what the ValueError is telling you, but it looks like it's not displaying that B is a 3x1 matrix, it's just calling it 3 (not super familiar with numpy, maybe they draw a distinction between vectors and matrices).
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 6. [**Properties of the matrix product (two matrices)**](https://en.wikipedia.org/wiki/Matrix_multiplication#Properties_of_the_matrix_product_.28two_matrices.29) of article [**Matrix multiplication**](https://en.wikipedia.org/wiki/Matrix%20multiplication): [](#sfw) --- &gt; &gt;Analogous to [numbers](https://en.wikipedia.org/wiki/Number) (elements of a [field](https://en.wikipedia.org/wiki/Field_(mathematics\))), matrices satisfy the following [general properties](https://en.wikipedia.org/wiki/Field_(mathematics\)#Definition_and_illustration), although there is one subtlety, due to the nature of matrix multiplication. &gt; &gt;* __Not [commutative](https://en.wikipedia.org/wiki/Commutative):__ &gt;In general: &gt;&gt; &gt;because __AB__ and __BA__ may not be simultaneously defined, and even if they are they may still not be equal. This is contrary to ordinary [multiplication](https://en.wikipedia.org/wiki/Multiplication) of numbers. To specify the ordering of matrix multiplication in words; "pre-multiply (or left multiply) __A__ by __B__" means __BA__, while "post-multiply (or right multiply) __A__ by __C__" means __AC__. As long as the entries of the matrix come from a ring that has an identity, and *n* &gt; 1 there is a pair of *n* × *n* noncommuting matrices over the ring. A notable exception is that the [identity matrix](https://en.wikipedia.org/wiki/Identity_matrix) (or any scalar multiple of it) commutes with every square matrix. &gt;In index notation: &gt;&gt; &gt;* __[Distributive](https://en.wikipedia.org/wiki/Distributive_property) over matrix addition:__ &gt; Left distributivity: &gt;&gt; &gt;Right distributivity: &gt;&gt; &gt;In index notation, these are respectively: &gt;&gt; &gt;&gt; &gt;* __[Scalar multiplication](https://en.wikipedia.org/wiki/Scalar_multiplication) is compatible with matrix multiplication:__ &gt;&gt; and &gt;where *λ* is a scalar. If the entries of the matrix are real or complex numbers (or from any other [commutative ring](https://en.wikipedia.org/wiki/Commutative_ring)), then all four quantities are equal. More generally, all four are equal if *λ* belongs to the [center](https://en.wikipedia.org/wiki/Center_(algebra\)) of the ring of entries of the matrix, because in this case *λ___X__ = __X___λ* for all matrices __X__. In index notation, these are respectively: &gt;&gt; &gt;&gt; &gt;* __[Transpose](https://en.wikipedia.org/wiki/Transpose):__ &gt;&gt; &gt;where T denotes the transpose, the interchange of row *i* with column *i* in a matrix. This identity holds for any matrices over a commutative ring, but not for all rings in general. Note that __A__ and __B__ are reversed. &gt;In index notation: &gt;&gt; &gt;* __[Complex conjugate](https://en.wikipedia.org/wiki/Complex_conjugate):__ &gt;If __A__ and __B__ have complex entries, then &gt;&gt; &gt;where * denotes the [complex conjugate](https://en.wikipedia.org/wiki/Complex_conjugate) of a matrix. &gt;In index notation: &gt;&gt; &gt;* __[Conjugate transpose](https://en.wikipedia.org/wiki/Conjugate_transpose):__ &gt;If __A__ and __B__ have complex entries, then &gt;&gt; &gt;where † denotes the Conjugate transpose of a matrix (complex conjugate and transposed). &gt;In index notation: &gt;&gt; &gt;* __[Traces](https://en.wikipedia.org/wiki/Trace_(linear_algebra\)):__ &gt;The trace of a product __AB__ is independent of the order of __A__ and __B__: &gt;&gt; &gt;In index notation: &gt;&gt; &gt; &gt;* __[Identity element](https://en.wikipedia.org/wiki/Identity_element):__ &gt;If __A__ is a square matrix, then &gt;&gt; &gt;* __[Inverse matrix](https://en.wikipedia.org/wiki/Inverse_matrix):__ &gt;If __A__ is a square matrix, there *may* be an inverse matrix __A__^−1 of __A__ such that &gt;&gt; &gt;If this property holds then __A__ is an [invertible matrix](https://en.wikipedia.org/wiki/Invertible_matrix), if not __A__ is a [singular matrix](https://en.wikipedia.org/wiki/Singular_matrix). Moreover, &gt;&gt; &gt;* __[Determinants](https://en.wikipedia.org/wiki/Determinant):__ &gt;The determinant of a product __AB__ is the product of the determinants of square matrices __A__ and __B__ (not defined when the underlying ring is not commutative): &gt;&gt; &gt; &gt; --- ^Interesting: [^Matrix ^\(mathematics)](https://en.wikipedia.org/wiki/Matrix_\(mathematics\)) ^| [^Cache-oblivious ^matrix ^multiplication](https://en.wikipedia.org/wiki/Cache-oblivious_matrix_multiplication) ^| [^Matrix ^chain ^multiplication](https://en.wikipedia.org/wiki/Matrix_chain_multiplication) ^| [^Min-plus ^matrix ^multiplication](https://en.wikipedia.org/wiki/Min-plus_matrix_multiplication) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chnuu6h) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chnuu6h)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Amazing stuff, love it! I'd like some more documentation though, so I could learn how to make my own animations. By the way, I'm using python 2.7.5 on Mac OSX Mavericks with PIL 1.1.7 and I had to change something in the xkcd.py example to make it work. I was getting the following error: Traceback (most recent call last): File "xkcd.py", line 66, in &lt;module&gt; for pix in i.tobytes(): File "/Library/Python/2.7/site-packages/PIL/Image.py", line 512, in __getattr__ raise AttributeError(name) AttributeError: tobytes This stackoverflow question helped me find a fix - http://stackoverflow.com/questions/10854903/what-is-causing-dimension-dependent-attributeerror-in-pil-fromarray-function - looks like the Python 2 version of PIL 1.1.7 uses to "tostring" instead of "tobytes" which seems to be available only on Pillow (a fork of PIL) but not merged upstream (someone please correct me if I'm saying something that doesn't make any sense). So on xkcd.py change line 66 from: for pix in i.tobytes(): to for pix in i.tostring(): if you run into the same problem. &amp;nbsp; UPDATE: /u/asciimoo fixed it quite quickly ([commit 516318a47f11ebf79254a5c7d57b51f25340e292](https://github.com/asciimoo/drawille/commit/516318a47f11ebf79254a5c7d57b51f25340e292)) after I reported it, thanks!
Well, this could be interesting, because Go, which is written in C right now, tries to be written in itself, see http://gophercon.sourcegraph.com/post/83820197495/russ-cox-porting-the-go-compiler-from-c-to-go And if they Go this way, then we could _perhaps_ utilize their C to Go tools to migrate CPython's C code over to Go as well. And after that initially running, we could for instance remove the refcounting and other things, and converge to a more readable, more maintainable source of Python. Just a rough idea, never did anything but reading the whole Go spec, which looks nice.
I figured out how to do this when I wrote sshpt: https://code.google.com/p/sshpt/source/browse/trunk/sshpt.py On my phone at the moment so I can't give you an exact line number, sorry. The code isn't that complicated so you should be able to figure out where it becomes root via sudo.
Really nice app, I'm impressed! I think I said this last time you posted as well, but it's really nice to see a full visual themeing since a lot of kivy apps use the defaults and look kind of samey. Also really nice writeup, I have a few comments that might be useful to you: &gt; One of the most frustrating things - is antialising (actually absense of that). One development since you last posted is that an [EffectWidget](http://kivy.org/docs/api-kivy.uix.effectwidget.html) has made it into the master branch. It's not explicitly there for antialiasing - it's intended to let users easily apply their own opengl effects - but one of the defaults is a simple ntialiasing shader using fxaa. It gets pretty good results on some things, and I'd be interested to see if it helps your app. You can just put the entire thing in an EffectWidget with the FXAAEffect() if you want to try that. There's currently a bug where the EffectWidget doesn't work right if its position isn't (0, 0), but that wouldn't be a barrier for that basic test. &gt; Kivy won't let you move a child widget from one parent widget to another. This is either a problem of syntax at your end, or a bug. You should always be able to move a widget to another parent, as long as you remove it from the first one. self.parent.remove_widget(self) some_new_parent.add_widget(self) If you're having this problem but everything seems like it should work, could you open a bug or post here about it? &gt; python injections are awesome, I like it. But what about multiline statements? Probably the idea was, that if you want to write a multiline, you have to do it in python. But what if I just need it? You can do multiline stuff in kv, I think something like this should work: &lt;SomeRule&gt;: SomeWidget: someproperty: (some_long_variable_name + 'some long string' + 'etc etc' + '...') It messes up the indentation, which is annoying if you're writing more complex python like a multiline function call, but it meets the 'what if I just need it' requirement. I use it occasionally for the same reasons. &gt; But the thing is, as much as you want to make something platform specific, for example use notifications or execute some code in a separate service, you need to know how the point platform works. Kivy's [plyer](https://github.com/kivy/plyer) project aims to address this, by providing a platform agnostic pythonic api to common platform-specific apis. It's a little bare at the moment as the project is relatively new, but we have a gsoc student working on it (as well as other contributions) so hopefully it should support a lot more soon. I'm not sure if we can expect services exposed this way in the near future (maybe they will, but I don't know much about it, and I guess the big differences between platforms are important here), but maybe it can help you. Notifications are supported on most platforms (ios hopefully *will* come soon), and maybe you can do scheduling with a timing api. &gt; Or maybe you want make a mobile equations solver with scipy and numpy. For what it's worth, we have a numpy recipe and it seems to work okay though I haven't tried it much (mainly ffts and basic array stuff). I think scipy is unlikely to work though, unfortunately, because of the dependencies thing. &gt; Secondly you can of course contribute, the code is placed on github. I have never done that, I think I'm just too stupid Honestly, I think your app and extensive write-up demonstrate a great vision and understanding, don't be afraid to contribute. Even if you don't want to submit code, some of your suggestions for features or syntax would be interesting to discuss on the mailing list. ----- Other than that, thanks again for the great writeup. You touch on several things I've thought myself and gave me some new ideas! And good luck with your app.
The ever popular github profile and open sourcing stuff is a proactive way to go about advertising your proficiency as a developer. Alternatively you can always claim that you are an "intermediate" and leave it up to the potential employer to assert that you are telling the truth! 
Have you written anything useful in Python? If so, I'd say intermediate is justified. I think it covers a pretty broad range. Don't stress too much over it. As long as you can reasonably justify it when asked, go as high as you think you can get away with.
&gt; It's quite strange that B is (3) and not (1,3)... A is (3) and not (1,3). Numpy guesses at the intended shape (assumes it's A is (3,1) if it's on the left side and (1,3) on the right (e.g. B*A). If you're doing matrix multiplacation, it's easier to just do it right than constantly fight with it.
Multiplication on arrays is component-wise in Numpy, that's why it didn't work. But the matrix class is a subclass of the array class, so most of the stuff you can do with an array works the same with a matrix.
1. This isn't really an appropriate place to post about a job. 2. Send me details. I'm an American; Python developer; lived in Japan for 2 years; JLPT 2 a couple of years ago, more like JLPT 1.5 now…
Just a suggestion, it might be worth using Anaconda, which is Python distributed alongside many commonly used packages (including pip). I don't use windows, but I've heard Anaconda is quite good on that platform. Download [here](http://continuum.io/downloads). 
Wow, thanks! May I PM you?
As somebody who interviews Python developers for a large company which employs lots of python developers: * I don't pay that much attention to resumes. Brilliant people often undersell themselves, average people often over-sell. I've got time to see what you can do. * I really like to see involvement with open-source projects, especially important ones which we use in our work. I'm also delighted to see 'for the love of it' projects if they display the kind of values we look for in developers. * I'm going to test your knowledge. Some of our best programmers will test you. By the end of the process we will have a pretty good idea of how good you are at Python, hence it didn't actually matter what you wrote on the CV. * It's not all about experience. Sometimes we hire less experienced people who seem like they might be a good fit. Curiosity, team-play and energy matter!
Hi There, If you type python into the command prompt do you still get '[Errno 2] No such file or directory'? If you are developing from windows, the first step is installing python 2.7. Second is to right click on my computer, go to properties. Advanced system settings. Environment variables. Scroll down the system variables until you see Path Edit the path variable and put C:\Python27; C:\Python27\Scripts; At the beginning of the path variable. Now open command prompt. Type python and it should open up python. Type 'exit()' to exit out of python. Now create a text file and rename the text file to get-pip.py and copy that python code in there. Now you can open command prompt, navigate to the directory where get-pip.py is with cd C:\users\asdka\desktop etc. type python get-pip.py to install pip. Now you can type pip install into command prompt to install packages.
I'm very happy to announce the 1.0 release of click. There is so much stuff already in it that I'm not sure what to list here. Example: import click @click.command() @click.option('--count', default=1, help='Number of greetings.') @click.option('--name', prompt='Your name', help='The person to greet.') def hello(count, name): """Simple program that greets NAME for a total of COUNT times.""" for x in range(count): click.echo('Hello %s!' % name) if __name__ == '__main__': hello() Some links to answer questions: * [Why does it exist?](http://click.pocoo.org/why/) Also answers the question of why not argparse/optparse/docopt etc. * Examples from the repo: https://github.com/mitsuhiko/click/tree/master/examples * An example with plugin support for large applications: https://github.com/mitsuhiko/click/tree/master/examples/complex
/r/webdev
Hi Armin, just want to say I really appreciate the amount of work you're contributing to open source.
I wrote [a little quiz](http://ballingt.com/python_essential_reference_intro_quiz.html) to go along with the first twenty pages of Python Essential Reference - it's remarkable how much is covered in this little tutorial at the front. (this is also part of the book K&amp;R doesn't have an analogue to, as is the last half on the standard library)
Thanks for the insight. To clarify, I really am not asking how to make my resume look good -- I just want to have a better grasp on where I am so I can represent myself *accurately*. My worry is that I'll waste everyone's time. I have an acquaintance who'll be passing my resume along. I don't know him well enough to ask him for unoffered advice (that's what strangers on the Internet are for, heh), but I know him well enough to not want to bomb an interview that he sets up. I have been mostly self-taught and suffer from interest creep, so it's hard to show any standalone projects. I feel most confident with Python, so I'm thinking I'll be emphasizing that. Can you offer any sorts of things that you test for? Thanks again.
Fortunately, I'm only a friend of the person looking for a recommendation. Thought I'd check the community to see if anyone was already in Tokyo and looking for a job here. I feel bad because a lot of cool, skilled people PM'd me and I didn't mention that :/
Thanks for the advice!
Thanks for the advice!
Just yesterday I've learned of click!. I expect to use it from now on. Thanks for your work!