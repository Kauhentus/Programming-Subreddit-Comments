Anything Unix-like.
Get the best of both worlds: develop in Windows 8.1 + PyCharm with it setup to push to a Linux box to actually run your code.
OSX + SublimeText 3 + Virtualenvs It's wonderful, especially if you have a bunch of linters integrated into ST3
Yep, but I've seen some weirdness occasionally where virtualenv-3.3 get linked to virtualenv which creates a 2.7 virtualenv.
the version of python that comes with your distro, is there for what comes with your distribution there is no reason to tie yourself to the version of your distribution; buid your own and use virtualenv to keep projects separate from each other and the system
[click](http://click.pocoo.org/3/options/#prompting) can do that, and many much more. Maybe you'll be interested in watching this [PyTexas conf](http://youtu.be/1fsgxOGHl6M) about it.
no, i have a better solution: i use arch linux. i wrap every library that isn’t already packaged in the repos or in the AUR with a simple PKGBUILD (takes 5 minutes, and i only had to do it some few times), upload it to the AUR, and then install it systemwide. now i don’t have unmanaged stuff lying around in my file system, everything is where it belongs, i contributed to the arch community by creating a PKGBUILD, and if there are incompatibilities, i’m in a prime position to report them as the bugs they are. works flawlessly, and i never have to activate/deactivate virtualenvs.
Next step after Cygwin is Linux in Virtualbox.
Eheh that's a feature! I love its simplicity and flexibility.
Then I did that. Then I just said screw windows and put linux on my box. xD You are definitely right about that progression
Recent Linux with vim+youcompleteme
They really should supply a job description, so that you know if you're even interested at any rate. That description should have required skills and optional skills. Depending on the skills that you bring to the job, the salary may vary a lot, which is why they don't want to list a range. 
Me too. :)
Id recommend Arch, since its easy to switch DE/WM's. Cant recommend a Tiling window manager enough like BSPWM (That I use) or i3. The reason why I prefer it for coding is that while coding I tend to have a lot of windows open. A few for browser as I'm searching for stuff, and looking up API's. One for Terminal, one for IRC, and several for the code I'm working on as well as one for older code in case I need to look at something I've done before. So lots of windows, typically in varying degrees of importance. But then its time to take a break and I wanna watch some youtube or something, I wanna leave all my windows exactly as they are and move on to another Desktop. (This is why windows is a no go for me) I can do that, and all the windows will be nice and tiled correctly for me when I get back. [Here is an example by](http://imgur.com/a/Pky94) /u/jwbuurlage 
Just because nobody has said it yet: The one that the final product will run on. To me it makes more sense to develop in an environment that will match production, be that a virtualenv set up with the right tools, or a whole new VM that matches the target architecture/OS. You should know exactly what it will take to release something that will work no matter what. Obviously Python is pretty platform agnostic out of the box, but you never know what fun you'll run into when you move your code from a case-sensitive filesystem to one that isn't and some jackhole accidentally made a "Messenger.py" file in the same directory as "messenger.py". That said, I'm a big fan of Crunchbang and Arch for development purposes. Arch for the bleeding edge and Crunchbang because it feels like Ubuntu used to. And then there is always Gentoo...
sublime text is the best. much better than notepad++ but it doesn't like user input. :(
Dynamic typing pretty much makes it impossible to make an IDE that is feature equivalent to VS.
Thanks. Also found a [reference](http://pythondoeswhat.blogspot.com/2011/12/easily-import-dynamically-created.html) that gives more details. This seems to be a working minimal example: # dynmod.py import sys from types import ModuleType class Blah(ModuleType): def __getattr__(self, name): print 'Request for attrib: ', name return None sys.modules[__name__] = Blah(__name__) And to test: from dynmod import random_nonsense
Not windows.
Anything but Windows. OS X is pretty good if you want to have access to "mainstream" stuff like the MS Office suite without having to get involved with dual booting or VMs. 
What type of user input? 
I write most of my Python in sublime text and run it in whatever Python that comes with full numpy and scipy, typically on my dev Mac, or on some virtual instance at some computing center. My favorite Python environment though is pythonista on my iPad, I think the limitations, small screen, etc only makes me more focused and happier..
\^V
Windows was easier to setup than linux for me. The pain I went through trying to upgrade from 2.7.6 to 2.7.8 on mint was entirely unnecessary. 
For desktop GUIs, PyQt is probably the best (best looking, most powerful). I've written [a blog post comparing different GUI toolkits](http://takluyver.github.io/posts/so-you-want-to-write-a-desktop-app-in-python.html). Most of the options support Python 3. I don't know in detail how you'd go about showing SVGs, but I'm sure it's possible with Qt.
I use WinPython for developing and math/science/engineering stuff at work. Comes with most of the basic scientific libs baked in. Then I just target those libs for deployment. On Linux, I use Slackware and build everything myself. I wouldn't recommend it unless you want a no-held-hands approach.
To answer the question posed in your title: OS X. It's a flavor of BSD if you're willing to go outside the Linux realm. Since I don't just sit in an IDE all day when developing, I prefer my entire UI to be as good as it can be, and through my years of running Win 3.0 through Win 8, Debian, Slackware, Red Hat, Gentoo, Ubuntu, and OS X, I've settled on OS X. All the standard tools are installed by default, the IDEs are great, and the overall UI is the tits. To answer the question posed in the rest of your OP: I have no opinion on that. I don't use Linux outside the CLI anymore (for that I run Arch and Ubuntu depending on whether the device is running on an ARM processor or not).
Or, to a lesser extent, Colin Percival being told to be less arrogant unless he has a Putnam. He has a Putnam.
It's very common for simple Python programs to use the input() or raw_input() functions; ST does not allow for those to work. It can be frustrating for a beginner who might not understand why their code isn't working. I think there is a special REPL you can install to run code that uses input().
I am a linux guy. I know my tools will work fine on window and mac, but I find the typical linux environment to be more comfortable and productive. 
For starters, autocomplete becomes challenging when you can have code like this: setattr(foo, '%s_%s' % (bar(), requests.get('https://example.com/filename').content[x:y]), value Throw in liberal use of `__getattribute__`, and the fact that you can even change an object's class at runtime simply by setting a text attribute, and you've got a recipe for not being able to do better than guess at likely attribute names.
The ST forums aren't loading for me right now, but a search for 'sublime text python input' will lead to many SO questions and responses on the topic. I believe ST just doesn't play well with stdin: http://stackoverflow.com/questions/10604409/sublime-text-2-console-input http://stackoverflow.com/questions/9142290/python-3-1-and-sublime-text-2-error
Agreed. I've developed Python on Ubuntu, OSX, RHEL, and Windows. It's not all that fun on Windows simply because I do all my development these days on the command line, and without installing cygwin or something, that's a pain in the ass on Windows. But Python development on virtually any Unix system is gonna be easy as pie.
Oh I see, this is for running things from ST. I probably haven't run into this since I always just run stuff from Terminal.
Huh? Nothing tricky about it. I ALWAYS build python from source and install into (usually /opt/&lt;project name&gt;). Keeps things simple, and I know what my dependancies will be when I move to production. I'm not a fan of virtualenv, mostly because I'm set in my ways though
Same here, but for Windows -&gt; Ubuntu. Just be careful with processes and files, but otherwise you'll be fine.
No, it's the production-correct way to code. That way you never pooch the system when upgrading, installing additional packages and so on. 
Nothing like realizing that "apt-get install foo-dev; pip install pyfoo" becomes a three week ordeal of figuring out who on the ops team even knows what's going on, building your own RPMs, running them through QA and change control and then finding out that they built the wrong version &amp; you have to repeat it.
Tricky from the standpoint of someone who's experience with installing software Linux mostly consist of apt-get install python How trivial or how difficult something is depends on the experience and skill level of the individual &gt;.&gt; 
Large companies will treat you like cattle if you let them, even if they need you more than you need them. But if you set the tone from the start that you don't really need them, they will frequently accommodate.
Yea, I need to start doing that 
... in a world where 3 out of 4 computers are VAX mainframes. Yes.
You can also use something like [shoebot](http://shoebot.net) to draw svgs and modify them, just run the sketch with sbot -w 
Arch Linux. What ever you do, arch is the way.
Metaquestion: How do you make a pip package, everyone can download via pip? I never tried and it never came to my mind untill now, but I thought you have to be a wizard lvl 10 or something to do this. 
I prefer OSX
I'm using openSUSE, it's stable, powerful and very easy to use. As many programming languages, Python works better on Linux than Windows ;)
Impressive - [here's the youtube link](https://www.youtube.com/watch?v=G-jA0EmYvX4#t=1499)
Well, I am in the somewhat questionable luxury position of not having to deal with crusty old corporate RHEL servers - I do get to deal with shitty shared hosting servers and inappropriately configured VPS servers though.
wow!!! this might force me to move from [argh](https://pythonhosted.org/argh/tutorial.html) for command-line processing. I've always loved argh, but for this project click seems PERFECT. Thanks
I have friends who give me shit but I could never get into the groove while using an IDE. Give me a *nix environment and VIM-(enhanced or whatever your preferred distro calls) and I feel right at home. I keep my vimrc on my webserver so I can easily wget/scp it to an environment if I need to. 
That's a very *mathematical* mindset there :) in response to something that was clearly exaggerated, you replied with pedantic precision. I think you're proving his point, really...
Thanks for correcting me, I shouldn't have said something without looking it up first.
I was trying programs like keepass today and they all lacked of a deterministic password generation option. I thought I'd hack something together :) enjoy
I use Rasbian on a Raspberry Pi at home and at work I use Red Hat VM.
Haha! That's awesome, i'd love to see that.
https://mail.python.org/pipermail/python-ideas/2014-August/028618.html seems like a step in the right direction.
Yeah, I read about that. If there'd be some way of statically typing in Python for no other reason than for IDE hinting, that'd be so awesome.
Actually a pretty clever solution. Not sure how strictly cryptographically secure it is, but would still be leaps and bounds ahead of most peoples password usage. With the bonus of it being recoverable on any computer and not stored locally.
I use pycharm almost daily - it chokes unless you either docstring or assert isinstance your expected types. It's literally impossible for pycharm to do autocompletion otherwise. 
IMO PyCharms is way better than VS, which is seriously bloated and very slow on the same hardware on which PyCharm just works.
Trust me, it does. It is impossible to know the attributes of such object without executing the code
Bloated? yes. Uneatable? Also yes
So how does it handle the auto-completion of web2py projects?
For simple stuff, I like using vim on Linux. Apparently there are plugins for more features like autocomplete, although I haven't tried them out. Like others have said distro doesn't really matter, so just pick you favorite one.
it is not bad but it's used for class names
In terms of IDE/editor features, JetBrains IDEs outrank VS by a lot. Multi-Caret is just one thing. And VS still cannot remove trailing whitespace without an addon...
How many apps have you worked on that have a large number of dependencies that haven't migrated to Python 3 yet? I assure you that as soon as you're in this situation you'll see the appeal of using deployment environments. 
&gt; It is too decoupled from where you will deploy your app. Python is ridiculously easy to install and use multiple versions. you’re contradicting youself. it’s most pleasurable to code for the newest version, and it’s easy to install any python version. therefore, if i e.g. have to deploy on CentOS 6, i of course won’t install CentOS’ ancient python version on my system and code for it, but instead i’ll install Python 3.4 from source on CentOS and code for that.
But if you are using mod_python with apache -- not by choice mind you -- you have to use the python version that was compiled with mod_python. It can become quite the headache very quickly, especially in a production environment where the default version of python is 2.4
Ubuntu is slow on my laptop and I dont need anything fancy looking. I agree about apt get and I usually roll with a debian based os like crunchbang. Still, it takes some time after a fresh install to get my dev environment as I want it. I sort of wish for something ready out of the box.
Can you explain why? I have never tried arch and I admit it is partially because of the stigma against it. I really know almost nothing about it.
I know what you mean. I've tried to make things as reproducible as possible by doing stuff like checking in dot-files to a github repo, and even wrote a chef recipe for myself that installs all the usual crap that is sometimes a pain in the butt (postgresql, imagemagic, etc.) but its still annoying to set-up all the little things. 
Most people don't care about ideologism
Arch is way more vanilla python than Debian. Debian patches all sorts of stuff for their python, Arch tries to leave it alone as much as possible.
That might be a current bug with pip wheel installs.
You have to look what are your develop going to be focused, be carefull with the libs thas you need. I recommend you GNU\Linux , is more comfortable and you have a big support, you have the Linux and Python's power !!! so you can do a big develop.
Absolutely not. Mount your files over SSH and add a remote interpreter (it takes 7 clicks, I just counted). This will allow you to edit and run you code remotely and even allows remote debugging inside PyCharm. It also inspects all installed remote libraries and offers inspection/completion for them.
Because ST, probably to save its' programmer's mind, doesn't run a full-VT compliant console window, it's pretty much just there to echo output.
well, i don’t have those problems (whatever they may be) so no matter how easy venvs are, they’re not worth it for me in every single usecase i ever encountered.
Yep...ran face first into this problem myself. I wrote a quick Flask app that would just take in JSON data and save it to a DB. Did that in Python3, tried to get it working on a CentOS box with apache. A few hours later I gave up and rewrote the server side in PHP because I just needed a quick prototype working.
I'll have to try that once I switch from my Windows workstation to a Linux one (maybe this weekend actually). Should be easy enough to mount ~/virt/ Thanks.
10 read 20 think 30 code 40 goto 10
Hell, the great thing about python is it doesn't even matter if you use Windows or Linux or Mac. The only issues that crop up switching from Linux to windows are if you deal with the filesystem or terminal commands.
Once you get along with it, it has everything you need. If stuff isn't in official repos, there is AUR and with aur helper (yaourt for example) you can install stuff from AUR with just one command. And you have the newest stuff there is with arch.
Your PATH variable will still end up growing when you realize how far behind Cygwin's packages are, especially GIT. Massive pain in the ass.
Yup! I really enjoy Win7 host =&gt; Arch guest.
I like docopt. You literally write the docstring and docopt parses it. https://pypi.python.org/pypi/docopt
PyCharm community edition is free, and open source. [Link](http://blog.jetbrains.com/pycharm/2013/10/pycharm-3-0-community-edition-source-code-now-available/)
Of course I did. I disagree with most of it though: maybe it's great compared to Vim, but have you used emacs? This is some of what emacs can do with javascript: http://youtu.be/p3Te_a-AGqM And most of this works fine for langauges other than javascript too!
Can you tell me why? Serious, I don't see anything special about it, I've checked it out a few times.
Am I doing it wrong with pyCharm? Why does it always ask me for a run configuration? I have 1, I use the same config for every python file....on eclipse I have 2, Java and Python. I don't need one for every file....(I'm doing it wrong aren't I).
https://github.com/I3ck/determ-pwgen/commit/6cfb2c7ac0992f92b1137fa3315143f18c51542d
Why are you editing files directly on a remote server? 
They haven't done a very good job of documenting it, but most files in the repo have an Apache 2 license header, and [a JetBrains employee says](http://blog.jetbrains.com/pycharm/2013/09/jetbrains-delights-the-python-community-with-a-free-edition-of-its-famous-ide-pycharm-3-0/#comment-11062) it's meant to be Apache 2 licensed.
Thanks for the info.
Nice! It'll be a breaking change, but you could really wait until the very end to do the base64 encode. It'll be much faster that way.
Note that this is not included in the free version.
well, I loop it a million times to make it slow So I don't really care :) (strong brute-force protection) it takes about 1 second per password on my machine you could of course fork a version with only a single iteration if you need speed
Hmm.. I'm not sure what you're talking about. I just tried a basic hello world script and was prompted for the run configuration once. Then I ran the file again using both 'Run' and 'Debug' and they just ran. Then I copied the Hi.py to Hi2.py, and did it all over again, and it didn't even prompt me that time. Ok.. wait - I got it to do it as well. To make it behave, click on the Run menu, Edit Configurations. Click the config button you want to use, then click the Save Configuration button. Then in the toolbar, look for the configuration drop-down selector. Select your configuration from that list, then click Debug or Run and it should be hassle free at that point. Something to keep in mind is that IDEA's Run Configuration are like a Run or Debug Configuration in Eclipse. In Eclipse, you have perspectives, but in IDEA you don't. IDEA has modes like perspectives, but it switches that stuff around for you depending on what you're doing.
So long as your actual password that's used as part of the seed is kept secure, it should be fine. Hashing it 1000 times helps to eliminate any of the hash function's failures or predictability.
Solid, thank you.
I thought Python was a female-friendly place???
I'm just waiting for multi-cursor support
&gt; Uneatable? Also yes I guess it's a good thing that I never have the desire to eat my IDE, then ;)
IDE in 'being better than a text editor' shocker. 
Not sure why you're being downvoted. This is what source control, ftp, sftp, ssh, rsync, and many any other things are for. I'm with you buddy.
You're funny. Emacs doesn't come close to PyCharm, or any Jet brains IDE for that matter.
Alt+Shift+Click works for me in PyCharm 3.4 on Windows.
Hahahaha but the calories! I will not even edit that
Er, a collection of various strings in a particularly structured order? ;p In all seriousness though, is the fact that pycharm can't always guess at the types I'm passing into methods an indicator that I'm doing something wrong? 
The one downside I can think of is that changing a password is very inconvenient. You can change the master password to change *all* of your passwords, or you can use a different name for the new one, but it's kind of a hassle. 
PySide seems to be gaining traction these days, though, and it's very very similar. You may want to look into that.
He's question does not apply, he made a bad assumption.
I never used the word server. It's just my Linux dev machine that sits right next to me.
this, so many times over. it drives me absolutely insane when people are developing on localhost (often windows or mac) and then they push to staging (ubuntu) and fuck it all up. dev environments should always be as identical as possible to prod. this is continuous integration 101.
PyCharm won me over until I had to edit files via SSH from my windows machine to an AIX box. Until I was at a big company with millions of lines of code and it choked trying to do all of it's code linking and introspection. I always end up back in Emacs.
It says right on the main page of JetBrains that it's Apache 2 licensed as well.
It somewhat makes sense. I know places that have produced PostgreSQL drivers for Delphi and want at least $150 for them (more if you want the source). I had to ask one of the employees: who's going to choose a free database and then spend up to $300 on a language interface for it? If someone chooses a main product that's free or close to it, they're not likely to spend a significant amount of money on accessories. 
 def foo( a, b ): return a + b No Python IDE can tell you that if any of your calls to foo in your code will throw an "I don't know how to add x to y" error. IDEs built around statically typed languages can.
Cool. Take pictures and post them here for uber-karma. In the mean time, I'll be over here in /opt safe and sound :)
a generalised version: to become a proficient programmer, you should become aware of key topics in your language and problem domain and use what you learn to improve the way you program. the blog lists four topics, but there are many others. almost every single module in the standard library relates to more than one technique or domain worth learning about. there is no essential subset - what you get the most value out of depends on your goals. this blog seems to be from the perspective of someone who is or wishes to be a commercial application software engineer. this is fine, but is not even close to a survey of the language's life amongst humans.
I'm having trouble visualizing your code. Maybe you could post an example? I don't think your are wrong necessarily, python is weakly typed. One way currently to provide type hinting would be to provide default values for parameters.
1) I'm not bemoaning. It is a feature of the language and means you cannot get too fancy with your static code analysis. 2) Your link says exactly what I did. So I'm not sure what your point is.
I love PyCharm, but I had to abandon it once I started building out the front-end of my apps with React and the .jsx syntax. They've essentially done a feature-freeze on supporting new languages/syntaxes whilst they do a massive refactor or something, so I've gone back to Sublime Text whilst I wait.
I currently using Mac OS X Yosemite for development and deploy to Ubuntu. Theres sometimes issues with modules on OS X - but nothing that can't be fixed with a little Googling.
&gt; I don't know man, I am yet to see an IDE that comes within a shot of Visual Studio You have never used a JetBrains product then. Visual Studio is useless without ReSharper, which adds the features that Visual Studio is missing compared to IntelliJ/RubyMine/PyCharm/etc.
I recommend PyCharm to people wanting to do python development, but for me it's not the right fit. I actively develop in multiple languages and I like having one environment with all the same keyboard shortcuts for all languages, etc etc. Sublime is my editor of choice, especially after investing in the pay for SVN and Sublimerge plugins. I use them every day, and they have greatly accelerated my work flow. Not saying PyCharm is bad by any means, just not the editor for me. 
Thought I'd leave this here since the review is for the pro edition: http://www.jetbrains.com/student/ Free for students. I gave it a try but emacs is providing me the same navigation, running of tests etc. I'll continue to experiment with it though. 
You know, sometimes the free "alternative" is simply better. Not always, but sometimes. In those cases, where you selected it *even though* it was free, not *because* it was free, I don't see any reason why you wouldn't spend money on "accessories". Of course there are often business use cases where there is an advantage to using open source projects and then paying to improve them or have them improve. Closer to home, for professional programmers, they basically live in their IDE. They'll spend more time in it than their car, and possibly more than their bed. So I imagine a lot are more than willing to pay for perceived creature comforts. 
Apparently not!
Wow, I love this explanation. Thanks!
I think I may have just misunderstood your comment.
I know nothing of Emacs, but the one thing I'm always concerned about is breakpoints. I make heavy use of them -- is there a way to do that in Emacs? (or Vim?)
It can be easier, since you don't have to make a search string to match all the lines (and only the lines) you're interested in - you just select them directly.
You can't just ask people to do your homework. Explain a specific part of this homework that's giving you trouble, what you've tried, what you got, and what you were expecting. Also, you should post in /r/learnpython.
Played with PHPstorm. Resharp is god given. I have never once met a .net developer who doesn't use resharper. not once. I don't even consider VS complete without resharper. I will rephrase then VS+ resharper &gt; all other IDE's, period. 
Because we do ad hoc data analysis using python? And sometimes it involves uploading data into a gigantic parallel relational database to join this external data with data in existing database tables. Loading 100 million rows goes a lot faster if you're local to the database.
What have you tried so far? Which part are you stuck in?
Search and replace is contextual, and for many situations there's not enough specific/common context surrounding the areas you want to format to do a search and replace without using a regex (which comes with its own problems...)
Oh? I guess I was doing it wrong - I'm used to the subtle text method, which is just holding down Ctrl and clicking/dragging multiple areas.
You haven't done anything wrong. We just can't help you because we don't know how to yet. Break the problem down into parts. First you need to read the file. Do you know how to do that? Then you need to read each line. Can you loop over the lines in a file? Try to think of little subproblems like that, one at a time, and see if you can google how to do them. Then if you're really stuck, post why you're stuck, what you've tried, and so forth. 
Okay hun... I'm going to give you a walk-through. Not through this homework, though. Take it as general homework advice. And I'm only doing this because I've been there before. * First things first: calm down. Let me tell you, that "lost beyond words" feeling? I still get that, after maany years programming, every time I read a new programming assignment. So, calm down. It happens. All the time. Many times I read the problem, call it a night and then just go about thinking about it. * **THINK ABOUT IT**. One of the biggest mistakes you can make when you start programming (and many years later too, I know I've done it too many times) is to read the problem and jump straight into coding without knowing specifically what to do. That will just make you more confused. Think about the problem. Some of my classmates do it just in their heads; I use an old school notebook and pen and start writing and doodling ideas. * Make a list of what you have to do. In this case, for example, you need to: 1. Read a text file. **DON'T** focus on the details of how it has to be passed as input blah blah. You need to read a text file. 2. Take each line from the text file and save the data. 3. Calculate some stuff with that data. 4. Return some results. Just the basic first. Then go with the details, like 5. Ok, now I actually have to pass the filename as input. 6. And then I have to return the results in a new file, or whatever. * **GOOGLE**. Now this is what I do when I don't know where to start. Suppose I have to read a text file in python and have no idea how to do it. I google: "*How to read text file in python*". Googling takes you places. Start with your first problem, solve it, then google the next one. Don't be afraid to google silly stuff, believe me: somebody has asked it before. I have found myself googling ridiculously specific questions and ended up finding someone had already asked it (and someone else answered it) on [stack overflow](http://stackoverflow.com) (AKA the holy grial of programming answers). * Solved the first problem? GREAT! Now onto the next one! This is the approach I take when I feel like I'm in your current situation. Will it be slow? Maybe. But you'll learn. In a while you won't have to google as much stuff. Believe me. Best of luck with this &amp; any other homework that crosses your path. **EDIT:** I feel like I needed to add that I'm not telling you to google and copy&amp;paste your homework to oblivion. What I mean is google and *try to understand* the answers you find and how they work. You can always copy&amp;paste, sure, but you won't learn anything that way and it'll get rockier as homeworks get more complicated.
Sometimes you need to edit scripts on a server. That's a thing people do. You are already SSH'd in. You need to make some changes, and run the scripts. Maybe I don't want to make an SSH filesystem on every one of the 500 nodes we have in our lab.. I don't want to scp or rsync files around. I want to edit files in place, on the server I am already logged into. In those cases, vim or emacs is pretty much your best friend. Don't get me wrong though, I personally love PyCharm and use it every day.
raspbian (raspberry pi)
I am interested in this as well as I have recently just discoverd how to fully use Flask. Most jobs that I ever see want crazy amount of experience or degrees. It's pretty bewildering when you see some ad posting for wanting someone with 5+ years of Django experience when it hasn't even been around for 10 years total. Learning Django is a skill but there is no point learning pure Django, time should be put in to understand how to operate in python without Django to fully understand how to create the best web appliciation. It is from what I can tell very hard to find a entry level or free lance job without years of experience. Those who can't afford these kinds of developers do it themselves I think, or just require more of the already employed workers without having to pay for it. 
Hi, Sorry to hear that you're having trouble. This problem is all about nested loop management and variable scoping. /u/fractalica above has some great advice about managing your stress and breaking down the problem. I would add that trying to draw a quick block diagram of the loops will help you to visualize the different pieces of the problem. I think that once you slow down and analyze this, the solution will start to come to you. Remember, you aren't doing anything that needs to cross into or out of a nested loop, and you know ahead of time how many data elements that you are going to deal with in each loop level. Give it a go, and you can PM me if you want a little more help.
+1, confirmed. PyCharm rocks. And, well, as there is "upvote" button for that, let me make my response a bit longer... In the old times, I specifically wrote external tools (in python) and integrated them with Emacs to run either a specific test file OR a specific test class or method. In PyCharm there is a right-click menu option for that. Want to debug those? Just click one option below. There were some problems with Django integration in the past, especially with new versions, but guess what? PyCharm devs fix those. They seem to actually listen to the users.
I definitely agree with your points. I know I'd choose PostgreSQL over some of the commercial DBs even if the costs were reversed. That said, there would still be something unsettling about paying more for an interface library than you did for the database.
Woo, emacs high five! Just migrating over from vim, it's been great so far.
I don't want to use the commercial version because it's proprietary and community edition doesn't have all the features and for some reason nobody's forking and improving it.
Of course! The psychological valuations we make are pretty relative. I've paid hundreds of dollars for an OS in the past, and it didn't feel unusual in the least, but if you asked me to pay for Android I'd balk. I might get 200+ hours of enjoyment from a $10/month ebook subscription, yet I don't balk at getting only 30ish hours of enjoyment from a $50 dollar game. But I will say that open source continually surprises me. It's got not right to be as good as it (often) is. Its only real failures, typically, are GUIs and hand-holding. If what you want is pure function, open source has it in spades. 
Does anyone else have ugly looking fonts on the Linux version?
PyCharm was nice enough to give me an option to mirror Visual Studio keybinds, and that's the other IDE i'm using on a daily basis. Do you recommend any plugins for SublimeText for development?
Wait, the are ides that work over ssh? That will make my work so much easier, any suggestions? Do they work over tunnelling? Thank you.
For your windows box, try cygwin instead of putty. Gives you a nice bash like environment to work out of, and supports scp, rsync, tar, and most everything else you could want.
Set up a VM with something like Vagrant to replicate your server environment locally, and use your virtualization provider's shared/synced folder capabilities to edit the source files live. You won't lose the possibility to SSH in an edit via a terminal if you set up git remotes in all directions. Edit locally and git push to server, or edit on server and git pull locally.
I have that ugly fonts issue in all Java programs.
So my current list of plugins is pretty long, but the important ones are: * Arduino-like IDE - Better than the Arduino IDE * AsAbove - Think the ST2 version works as is with ST3, but not in package control * BracketHighlighter * Case Conversion * ChangeQuotes * EasyMotion * FileSystem Autocompletion * Fold Python Docstrings * Jedi - Python autocompletion - deciding if I like it better than CodeIntel * Missing Palette Commands * Python Breakpoints - Inserts ipdb breakpoints very easily * SublimeCodeIntel - doesn't play nice with Jedi * SublimeREPL * Sublimerge Pro - Costs money, but a good diff/merge tool is worth it * SVN - Also costs money, but greatly improves my workflow * Text Pastry There's a bunch of others, but they're mostly general utility or unrelated to Python.
Thanks, that's a great list. I've always felt like I've only got half of the Sublime Text experience running basically vanilla.
Perhaps this might help? https://wiki.archlinux.org/index.php/Java_Runtime_Environment_Fonts Just remember that some font rendering algorithms are patent-encumbered and therefore do not exist in open source font rendering libraries. This is why you will see e.g. OSX render fonts better. There's some [patches for freetype](http://www.infinality.net/) that make it better, but Java again is its own beast. If you rotate your LCD screens for portrait positioning, you will want to use lcd_vrgb instead of lcd_hrgb - you should do the same in GNOME/KDE/whatever as well (go into monitor settings and ensure the right subpixel rendering option is selected - hrgb for landscape, vrgb for portrait. 
Pushed some updates, now at least you can run `ctox -- --pdb --pdb-fail`, which basically was my objective. *(My future hope is to cache the dist build a little better for projects using cython, pretty happy with behaviour for pure python projects.)*
Personally, running Ubuntu, I've found that using OpenJDK and -Dawt.useSystemAAFontSettings=on to produce the best results. It's worth experimenting with the different options though because how good it looks will depend on the font you've chosen. I use Source Code Pro.
Depends what you need in an IDE. I use vim + pep8 + pdb, because that's all I need in an IDE. All of those are command line and will work over SSH, you can use tmux to split the screen.
SublimeText is ok but it has nothing on PyCharm.
And when app A needs a different version of library X than app B?
Pycharm is one of them
I'm using the Oracle jdk. Plus, I've set the java options without success.
Author here. Saw a spike on my three year old article. Thank you for posting it and I'm happy to see you found it useful^^
**EDIT: http://files.ax86.net/terminus-ttf/ has a version of terminus that on linux scales properly (it has the glyphs emedded for 12,14,16,18,20 all the way up to 32pt and so forth this looks the best and you are not stuck on 16pt if you have a high resolution screen*** All the intellij IDE's suffer from this issue. The best "solution" I have found is to use a font that has been converted over from a bitmap font and that has *no* aliasing or hints in the font, you then have to use it at the correct resolution (since it will have been designed for 12 or 16pt usually because of DPI scaling). Examples * http://i.imgur.com/EObVHmU.png this one is my modifcation to "Perfect DOS 437" where I fixed some spacing and the horrible 'single' quotes. * http://i.imgur.com/J1qH5f5.png that one is Terminus at 16pt if you prefer a less chunky look. EDIT: http://terminus-font.sourceforge.net/ https://github.com/Swordfish90/cool-retro-term/tree/master/app/qml/fonts/1985-ibm-pc-vga has Perfect DOS font and license (I don't know where *they* got it from). 
nope, i used in several latest distro
I'm using Komodo Edit for it.
When you develop on a different OS than the server OS you end up like the first version of Reddit. 
Don't know who downvoted you but this is the solution! OP, you could have googled this very easily: http://www.webupd8.org/2013/06/install-openjdk-patched-with-font-fixes.html
I have done this to parse pricing information off of various products that I am following. The problem I ran into was that amazon will eventually give you the bot response even with valid headers. I temporarily got around this rotating out user agents but eventually that stopped working as well. My next step is to use the api but it, too this point, isn't giving me all the information that I want which caused me to put the project on hold. Just some FYI stuff, depending on what you are aiming to do, using the api for the data in this blog would be a better approach. 
Perfect! The only things that Linux lacked was a MS Office clone. The Chinese copy cat King Soft office solved that!
docker ftw
I'm genuinely interested, can you give me a brief lesson on that particular part of reddit's history?
You should really look into [git](http://git-scm.com/).
Do you understand that Python does not have static class members? Python has *class attributes*. They are dynamic, not static, just like instance attributes, except that they live inside the class `__dict__` not the instance `__dict__`. They are added to the class `__dict__` when the class statement is executed, not at compile-time. *Most* of the time, the difference doesn't make any difference, but there are occasional times when it does make a difference.
It is the job of an encyclopedia to simplify topics so as to be at least broadly understandable by a layman.
Some find cygwin nice, some ... don't. There seems to be a large component of personal style in its acceptance. rsync, scp, ... are crucial to me, but, when I type at a Win*-connected keyboard, I incline toward more "native" approaches. To "try cygwin", though, is advice I second.
I find that, in general, the explanations on Wolfram Mathworld tend to be less technical and more accessible than the explanations on Wikipedia. I always go to Wikipedia first, and when I don't understand it, I go to Mathworld. 
I am a network administrator, so most of my uses are around Cisco switches, so it involves ping, telnet, packet capturing, and SSH. I made a script that I feed every possible IP address where we might have a device. It first pings all of these IPs with nmap (A very fast pinger, but designed as a port scanner and penetration tester) and then it telnets or SSHs (using plink - putty command line) to all of the IPs that responded and back up their configuration to text files. I do this weekly so we always have a backup and never have to add or remove devices from the script as we add or remove devices from our network. I made a simple one that just looks for a specific packet with TCPdump (packet sniffer) and then parses the output and presents it to me. (For the nerds, the packet is a CDP packet so I know which port my laptop is plugged into.) Then I use it to combine text files which would be tedious and time-consuming if done by hand. I read in a list of mac addresses which also have port numbers listed. Then in a separate text file, I have port numbers and descriptions. In another document I might have IP addresses and mac addresses. I use Python dicts or sets to parse through and find the matching relevant data and it returns a list of IPs, their macs, their ports, and their port descriptions in rows. Finally, for a non-work project: I'm writing an app that pings the internet every minute for my house internet connection. It will run on a Raspberry Pi and flip a relay if the internet is down for two pings. This will reboot my router and cable modem. I'm not even a good programmer but this stuff works for me and I'm learning more every day. 
I do use git, but I'm still learning how to use it. The automatic backups was before I even knew git existed :P.
let’s say application A only works with version 1.0 - 2.7 of library X, while application B needs 2.9+ 1. it’s a bug in application A. not a big one, but A’s devs should look at the incompatibilities and fix them soonish 2. until then, application A has to come with a copy of library X 2.7 that it loads from some directory by prepending that directory to `sys.path` (like [requests does here](https://github.com/kennethreitz/requests/tree/master/requests/packages)) 2\. is inelegant but does the trick. if the library is huge or difficult to install, A’s devs should really hurry doing 1. instead.
Sure, that's a good answer too. But sometimes you want to be a bit more careful, and not just rely on *remembering* not to instantiate a class twice, but actually code something that will *guarantee* that there will only ever be one instance. So you make it a singleton, like `None`. But because singleton is the easiest Design Pattern to understand, legions of Java weenies have made every single class they can a singleton. So it is the most abused and over-used Design Pattern ever too. That's where Alex came in, all those years ago, and realised that the important thing is usually *not* identity, but state. The singleton DP assumes that if you want to ensure that your class only reflects one state, the only way to do it is to make sure there is only one instance. But Alex reasoned, what if you had multiple instances, which you could create and throw away, *but they all had the same state*? That's the Borg design pattern. It solves the same problem as singleton, namely ensuring that you can't have two instances with different state, but in a different way. Another solution is to eschew instances completely and just use the class object itself. That's a little less convenient, because you have to decorate every method with `@classmethod`, but it works. This is a solution you can't use in Java, because classes in Java aren't first-class values. They're known to the compiler, but you can't pass them around as values at runtime. 
They developed with the programming language Common Lisp on Macs but the servers were Linux or FreeBSD.
Just use Vagrant to replicate the server OS then.
Combining text files would come in hand for me. Would it work the same way for .csv? Do you mind sharing the code? I'm really interested in learning that. I like that router reboot idea also. I used to always have issues with my home router. Not so much anymore though. 
Python is my go-to language for stuff that is too complex for a shell script, but not complex enough to warrant using a "real" programming language. For example: - A build system that applies a few build configuration variables and bakes a project tree of HTML and JavaScript files, assets, and templates, into something that Adobe's PhoneGap build service can understands, triggers a build, downloads the results for all platforms, and uploads them to a dropbox folder, from where we can push them to the various app stores. This means that rolling out a new version of our app is now just a two-step process. - A little zoo of scripts that give me all sorts of information about my system, and massage it into a format that my dzen2 toolbar can understand and display. The other use case stems from how the Python community has developed a lot of useful hands-on libraries, doing things that I would often have to code myself if I used another language. For example, my running web app (written in Haskell) includes a Python helper that parses Garmin's binary .fit format and turns it into a JSON format that my application can understand. Haskell is great for building parsers, but the .fit file format is kind of a mess, and a working Python parser already existed, so instead of reverse-engineering that parser and porting it to Haskell, I decided to just output whatever it finds and use an existing JSON parser on the Haskell side to extract the stuff I need. Works like a charm. Another example of the "batteries included" factor is an application I am currently developing at work; it's an umbrella web app that hooks into all the applications we use to organize our work, and consolidates information from those into a nicely formatted overview page. Python has libraries for everything and their pet peeve, flask is mostly sane and straightforward to work with, and I get to call subprocesses without having to go through a shell (which, frankly, is a blatant security oversight in, for example, PHP). And of course BeautifulSoup is a life saver.
What you developed is still really cool. Even if something like git arguably makes it moot, you still learned a lot and had something to be proud of in the end.
Python has generally replaced MATLAB for both fun and profit. 
Have you tried SublimeREPL?
We've sold a python application which does heavy duty 3D data visualisation for over 10 years. Sure all the heavy graphics work and CPU intensive functions are in C++, but the actual application, all the networking, GUI, etc are pure python. So, I guess my benefit has been a stable well paid job for the past ten years and hopeful many more to come :-D
Python has changed my entire life. I've started 3 businesses off of it. NLTK / sentiment analysis @ sentdex.com. Automated bitcoin trading at seaofbtc.com (the website itself is built with Flask and the actual trading bot is in python). Finally, teaching programming tutorial on YouTube.com/sentdex as well as pythonprogramming.net For other things: I now have a full computer in my car using a pi and python, all done in under $100, including the screen... which is just insane. I have cameras around the perimeter of my house with pis and more python code... all done for far cheaper than could be done any other way. I've used python for simple spreadsheet tasks as well, and use it every day for automation in all sorts of ways. Very thankful to have found Python in my life.
It's funny, because OSX also has these problems with any of Oracle's JDK. Apple rolled their own for Java 1.6 just to get around this. https://youtrack.jetbrains.com/issue/IDEA-117324#comment=27-706613
This is almost exactly what I use it for at my job with everything related to SSH. Paramiko is a awesome tool, as well as Exscript and SH.
What does the computer in your car do? How did you do it? Sounds awesome! And what kind of screen do you use for the pi? I've been trying to figure out how to use an android tablet as a monitor. 
I use it in my classes (numerical methods, and datastructures and design) for rapid proof of concepts. I also use it for science mathmatics. It works great.
Check out web frameworks like flask: http://flask.pocoo.org/ You could visit a url, run your code, and return a result to the page.
Great minds think alike.
You can use it as a full desktop, of course, but I have it connected via OBD for all sorts of fun stuff. You can also use it as a media center for your car. I like to take my car to the track (road courses), and it's really cool to have all the stats from the car's cpu. There's another solution for doing the same thing I am doing, minus a monitor, for ~1,000 USD. I don't have everything they have just yet, but I think it can be done for ~200-300 at most, with a monitor as an addition. The screen I bought was from amazon, here: http://www.amazon.com/gp/product/B00IUGW7PM/ref=oh_aui_detailpage_o03_s00?ie=UTF8&amp;psc=1 I got the 4.3 inch screen. I actually got a few of them because they are so cheap. They work with the pi really well, and they're cheap as heck. The only downside is you need the previous version model b, NOT the b+, so you can keep the composite out. All of the HDMI monitors I found, no matter the size, are still outrageously expensive. I suspect they are phasing out the composites, which is why they are marked down. The screen happens to mount really well on the very left hand side of my dash, then I run the cables down thru the side framing (the screen comes with 3m tape, or you can apply your own). I opted to use 3m velcro instead, so I can remove the screen when necessary. All of my cables and wires go through the dash in the back, so if I wanted to re-wire, I needed to be able to remove the monitor, and 3m tape isn't the easiest! I also bought a few switches from http://mausberry-circuits.myshopify.com/ You can use them to automatically send a shutdown message to your pi when you cut the power. Most cars have built in accessory slots, but you can also just wire it to anything that is powered by ignition, especially if you're already using up your accessory slots. I have the 3a switch, so basically, once you shut down the pi, you have 3a of power (if the car was on long enough to charge it / you had the charge already). The shutdown is sent immediately, so when you shut down the car the computer will be issued a shutdown as well. I will eventually put a tutorial on everything I did, including the code, on my youtube channel. If you have any other questions til then, I'd be happy to answer as best I can here. I bought 1 of every switch they had. Very happy with all of them, actually. 
I think I just watched all your Pygame videos on YouTube. Thanks for that.
&gt; but not complex enough to warrant using a "real" programming language How DARE you sir. 
I decided I wanted to learn some Python by writing some stuff so I took a look at what I could possibly use it for. Well I read comicbooks, but these days I mostly just download them, and it's a hassle figuring out when they are released, what titles are currently out and what the latest issue is etc... Yeah, you can see where this is leading.... Python webscraper to the rescue, requests + bs + regex and a few hours later I get every episode of current ongoing titles assorted and listed in a file. Than I then parse into relevant categories, and then I made a conky tool to display it all on my desktop. 
Hah, I just added some more (not sure how recent "just" was) and there's a few more to come after that! :O Then a massive tkinter series, and a large flask series. I'm going to re-write sentdex.com in Flask. It's been giving me too many problems being in partial wordpress still, so I figure I can kill 2 birds with 1 stone. Tkinter will be the creation of a bitcoin trading GUI (though you wont be required to actually make trades to do the tutorial of course).
Don't trivialize it. When you Google for this issue, you get tons of responses that are half-wrong, entirely wrong, or specific to releases of Ubuntu that are six versions old. For example, usually people will describe *one* of the two fixes that Rybue listed. So you end up with antialiasing but broken hinting, or unbroken hinting with jaggy aliases. Sometimes you also get the third fix of installing a font that deliberately has no hints in it. This is the first time I've seen a combination of fixes that solves the problem in one place.
yeah, the channel is youtube.com/sentdex. I originally created the channel just to do a few sentiment analysis vids / marketing for sentdex.com... but then people seemed to like the tutorials a lot, and since then I just kept doing more and more... so now it has very little to do with sentdex.com, and probably more to do with pythonprogramming.net... but it's too late to change the name. Basically the same story with my twitter account.
Hmm, don't know .. I had the exact same problem with PyCharm as well and I found this solution pretty quickly.
&gt; Just remember that some font rendering algorithms are patent-encumbered and therefore do not exist in open source font rendering libraries. This shouldn't be the end user's problem. GTK's font rendering is fine. It's just Java Swing in particular that has such an aggressively bad hinting algorithm, on top of being mostly clueless about antialiasing. You'll notice that Linux users complain about bad fonts in their Java apps, but not in their web browser, their terminal, and so on.
With python as my programming tool, I've made a code to design heliostat fields for a solar power plant concept my university owns as my master's thesis. I felt very motivated all the time and as a result my grade was 10/10 and expecting to graduate with honors. Don't give up, you won't regret it. EDIT: And I think I have a new hobby.
Here is the equivalent in BeautifulSoup: def get_book_info(url): response = requests.get(url, headers=headers) bs = BeautifulSoup(response.content) book = {} title = bs.select('#productTitle')[0].text book['title'] = title author = bs.select('.contributorNameID')[0].text book['author'] = author price_text = bs.select("span.offer-price.a-color-price")[0].text price = float(price_text[1:]) # get rid of the dollar sign book['price'] = price return book It's almost identical. Cool post nonetheless.
Well, my job is a python developer. So learning python has helped a lot ;) Background: got a job as a Linux sysadmin. Started learning python and picked it up quickly. My boss saw this(as we have built a lot of python applications to help us in our work, and I contributed a bit), and decided I'd get to take over much of Tue development of the tools. I love it. I've developed a job that scans all company subnets (barring some excluded ones) and dumps raw data to a table in our database. This includes open ports on those boxes and other info. I've built a very useful tool to monitor our website, testing 7 logins every minute. I'll soon expand it to handle testing other aspects of the site to ensure we don't have to wait for complaints to know something is up. There's more, but most of it is very specific to my job...
I use Python to generate an e-mail signature for every e-mail I send. It has the current time, the weather and the song that's playing on my media player. It's a bit of a gimmick, but judging by the reactions I've had people seem to like it.
Joined a company doing heavy data analysis in Excel with VBA. We were looking at 700MB xls files that took 20 minutes to calculate and crashed more often than not. Started moving most of the analysis into python scripts that dumped the results into Excel and we've saved a TON of time and headaches.
It's not all Java programs, but all Java programs that use Swing as the GUI toolkit. Eclipse, for example, that does not, looks fine for me.
Vagrant can be configured to mount files on your local drive in the VM. No need for remote access.
I have made a program to check on crypto currency prices every 15 minutes and put the data on a spreadsheet. At the end of every day it puts the averages into another spreadsheet. Each sheet gives me differences in price since the last update, the average difference, and total value in USD. It is basically there to check and cross check different websites to make sure I am getting good numbers. It saves me a shit load of time trying to figure out how much Dogecoin I have. I also created a separate GUI to immediately show me how much each coin is worth in BTC and USD, how much coin I have, and how much profit I have made. I made a program to balance my budget. It also calculates average tax taken out of my paycheck depending on how many hours I work and keeps track of how much money I am spending and where (which I have organized by categories and sub categories). This was all done using WxPython and GSpread I have also made a twitter scraper using tweepy that pops up a notification window on my desktop (using WxPython) whenever one of my closer friends tweets. However it just decided to stop working the other day so I need to try to fix it :c
I worked as a nightshift Network Operations Technician and was regularly assigned data processing chores. every time, I'd turn to Python and reduce a 30hr manual process into 3-4hrs of research, programming and debugging. the code wasn't pretty or efficient, but it kept me sane and taught me valuable skills :)
you could probably use a process management tool like monit, supervisord or god. while writing software yourself can be a fun learning process, it's usually better to use (and contribute to!) an existing project unless you're needs are extremely specialized.
These two blog posts show an instance of how I keep things working at work. There are others. http://paddy3118.blogspot.co.uk/2008/07/ranking-modelsim-coverage-results-using.html http://paddy3118.blogspot.co.uk/2013/05/greedy-ranking-algorithm-in-python.html 
I would love to see a Tkinter series. 
I've written some scripts that we use at home for the kids to practice their math homework. As my 13 year old gets into more complex math this is becoming more challenging, but fun.
Heres a patched version of the Ubuntu monospace font (hints/instructions removed) that works with Oracle jdk: https://mega.co.nz/#!JhNmEA4B!1p8wdGQzRhjciQV3NeU_U_F6pBtVu0QAruMI061pQCQ You have to uncheck "Show only monospaced fonts" to make it show up in the list (event though it is monospaced). [Font patching instructions](https://superuser.com/questions/614960/how-to-fix-font-anti-aliasing-in-intellij-idea-when-using-high-dpi/623596#623596) 
Some of you may remember me, I've posted similar links before to my courses on Udemy (I'd give coupons to take that class for free here on r/python). This is my newest course and I'd like if you checked it out :) Unfortunately I cannot give coupons here, **BUT** Pluralsight subscription comes with a free 10 day trial and you automatically have access to hundreds of courses (that are honestly really awesome). I always appreciate feedback and criticism! 
&gt;You'll notice that Linux users complain about bad fonts in their Java apps, but not in &gt;their web browser, their terminal, and so on. Not so. I see obsessive posts complaining about fonts throughout the Linux community. Even in the rare instance where they post screen caps the rest of us can't see a dang bit of difference. I remember the former community manager of OpenSUSE making a similar remark that he can't understand the font obsession among certain Linux users over fonts.
Can anyone post a "before" picture so the rest of us have an idea what we're supposed to be looking for?
This and TuxJDK fixed this issue for me. 
But that simulink tho
This is the kind of advice that keeps programmers sane. The only thing I would add is to become very disciplined at giving yourself a break. What happens when we program is we jump down the rabbit hole and it can serve as a detriment when we hit the point of diminishing returns trying to solve a problem. At this point, it's really best to go and do something completely different and unrelated to programming like taking a walk, lying down and listening to music, get something to eat, have a nap. Personally, I find that I will continue to passively think about the problem in the back of my mind and eventually a solution will reveal itself when I least expect it. The important takeaway is to free your mind and not get tunnel vision trying to solve one problem. Programming is as much abstract as it is logical, so give your mind the freedom to be both. 
Thanks for the heads up. I will definitely consider using the API depending on the project I'm working on.
I use python professionally. My company runs a web based data service and we have a polyglot stack (including Go, Ruby, Javascript, and Python) but most of our codebase is written in Python. We prefer it to other languages just because its a pleasure to work with and has a large and active community with lots of useful libraries for all kinds of tasks.
Hm...I don't have this issue on the latest version of Kubuntu. Sounds like you might be missing a font or random library. What distro are you running?
Thank you for the comment. Yes, I'm planning to write more stuff like this.
Its tits for batch processing. I've used it to sort and sift through test results. One of the more fun ones involved sifting through a few hundred .CSV files with upwards of 10k lines/ file, seeking particular values and then dropping them into another file. That one I'm proud of because I got it down to less than 60 lines to do the scrape and convert. 
I can click the items in the table of contents but nothing happens (linux/chrome) ಠ_ಠ 
Ubuntu. I had the same problem a year ago with another program and I solved it by doing something with the fc-cache .I tried this time without luck. The weirdest thing: IDEA works fine.
[seagull](https://bitbucket.org/rndblnch/seagull) is a python3 package that displays SVG using opengl. It can be used in conjunction with any toolkit that is able to open an opengl context (e.g glut or qt5, see https://bitbucket.org/rndblnch/seagull/src/tip/demos/svg_viewer.py )
I don't think that is true anymore. I am on OSX using the Oracle JDK8 (was JDK7) and I don't have a problem with any of Jetbrains products font wise.
Search is also based on your search history. I can sit next to another person in my office and find an answer faster for certain things because the question I am asking is showing me results closer to the answer I am seeking, vs my buddy right next to me just because the answer is closely aligned to the things I often look for.
Assuming that I use a search engine that stores my history.
Interesting, looking at the photos of the before and after - I actually prefer the before. I guess that is why I never noticed before.
You should probably ask the one who programmed it.
I have high standards.
Hence the quotes. The thing is, Python is a great language, with lots of strengths, but when it comes to scaling to large codebases, it shares the common weakness of all the dynamic languages, namely that you have to go through great lengths to keep your code manageable - something like Haskell keeps you honest and makes for extremely refactorable code (basically, you just boldly make the change and let the compiler tell you what you need to fix to avoid regressions); if you want the same in Python, or any other dynamic language, even 100% test coverage isn't enough to get you there. It's doable, but it's just so much easier in a language that has this stuff built into it. (OTOH, if a 90% correct solution acceptable, then Haskell has the downside of still demanding 100%...)
Did you start your free trial? I think it'll only let you click the actual lessons if you register and start the trial. 
I haven't written the hardware part, yet. You can google "python relay raspberry pi" and see a few youtube examples of people doing this. Doesn't look too hard. As for the pinging part, here is there short function from an internet uptime monitor I did: def itsUp(r,c): #gets passed the row and column accordingly and runs nmap looking for google to reply. Writes green or red grid box for up or down p = subprocess.Popen("nmap -oG - -sn -Pn 8.8.8.8", shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0] #Really small, simple nMap code! if "google" in p: Tkinter.Label(main, fg="white", bg="green", borderwidth=1, text="P").grid(column=c,row=r, sticky='NSEW') #It's up! else: Tkinter.Label(main, fg="white", bg="red", borderwidth=1, text="X").grid(column=c,row=r, sticky='NSEW') #It's down. You have to have nmap installed and in the path variable list...
Admittedly, I've never used that. I'll check into it. I usually use plink because it will handle telnet and ssh. Parsing the subprocess.popen output is probably more annoying than the function returns from something like Paramiko, though.
Well, I've made *an* update. I hope the others on the watch list are OK with the general idea of adding a methodcaller example, even if they don't like this one.
Then the word is static... just cause it doesn't have type safety doesn't make it any less of a language.
Personal preferences for frameworks/languages aside, Heroku has decent docs on deploying Django apps to the web for free: https://devcenter.heroku.com/articles/getting-started-with-django
Would I use something like this if I wanted to alert users on my flask app with a special message? Like they did their 10th blog post or something like that and I wanted to give them a special message? Or is there a better way of implementing such a system?
&gt;2.7 [http://i.imgur.com/092uyry.gif](http://i.imgur.com/092uyry.gif)
Sublime. No particular reason. I have a copy, and that's what I use. I don't particularly *care* what I use, so long as it doesn't get in my way. That's all I want- I want my tools to get out of my way.
Good point. Tell me more about that. If I declare it once in the global namespace would it still work?
I am a network administrator too.. we have a reddit for Python network admins [/r/r/pythonnetengineering](/http://www.reddit.com/r/pythonnetengineering) which honestly hasn't yet caught fire in terms of popularity but come on over! That said I have found this trick to come in very handy: import socket import os import sys def scanHost(host,port): # print host, port, type(host), type(port) port = int(port) sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.settimeout(5.0) try: result = sock.connect_ex((host,port)) if result == 0: header = sock.recv(1024) print host, port, header.strip() sock.close() except: print 'Something went wrong', sys.exc_info()[0] def main(): # let's see if we have an ip address to work with check_arg_len = len(sys.argv) if check_arg_len &lt; 3: print '\n\nYou must pass an IP addrss and port number for testing\n\n' exit else: # print sys.argv, type(sys.argv[1]), type(sys.argv[2]) scanHost(str(sys.argv[1]),int(sys.argv[2])) if __name__ == '__main__': main() So what this does is tell you what "thing" on the network is using what type of ssh. 192.168.122.2 22 SSH-2.0-OpenSSH_6.2 is a Mac, 192.168.12.8 22 SSH-2.0-OpenSSH_6.0p1 Debian-4+deb7u2 is a Raspberry Pi, Cisco routers respond with one thing, Cisco WLCs respond with another.. it's handy and fast way to group devices (or try to figure our what something is) without having to do a full nmap scan against a host with the -O flag. I use Python for a lot of different stuff on a daily basis at my day job. So much so that I've pretty much carved out a niche role for myself as the "person to go to when the NMS system can't make a change on the network". One *very* handy thing I've done is learn how to interact with Expect. Python + Expect is a network admin's dream. Pexpect works too, if you're not worried about speed. Where this really comes in handy is when you have to make changes to a vlan configuration, for instance. Given we have well over 15,000 switches and routers touching each one by hand is out of the question and the NMS system can't make changes to routers if they vlan is not known (could be different on each device)&gt; Anyway. Good times.
I do this literally every day. Give me a scenario and I will program it in Python (as far as combining two or more .csv files). Do you use UNIX? Working with text files is something UNIX and Linux excel at greatly (no .csv pun intended).
I'm not sure what your point is. Are you saying you "can't see a dang bit of difference" between correct font rendering and what Java does? If you can see the difference between "e" and "c" you can see the difference with a font renderer so bad that it occasionally leaves the crossbars off of e's. Or are you saying that nobody should complain about Java while there exist other people who will complain about anything?
If you say Java..... ;)
Just starting using Atom. Very nice for python (won't really find any files over its 2MB file cap), runs just fine on my setup. It also has some of the major features that ST has, and it's free. I use bpython to actually run everything and mess around, then Atom to put it all together.
Pyscripter. I'm just starting to learn python and it seems to do the basics pretty well.and very lightweight. Anyone have experience with pythontools for vs?
`git-bash` for windows is pretty good.
I much prefer this one: http://rgruet.free.fr/PQR27/PQR2.7.html I have it hotkeyed through Alfred. I've been developing in Python for 7 years now, but I still occasionally use it.
Notepad++/Sublime Text for small scripts. Pycharm I've used mostly for django lately. 
Thanks, this is pretty good. I teach python to kids from time to time and this could really come in handy.
So it's vim with caw.vim (or the emacs equivalent) as a program? 
Yeah, the beauty of the editor to me is how customizable it is. Which is one thing interesting about atom to me, but I'd still rather use python than javascript for plugins, particularly considering the massive number of desktop application oriented libraries already written in python, while javascript is mostly Web libraries. With vanilla you still get a great editor, but it's not until you have a bunch of plugins that it really becomes powerful. Luckily, this was an intentional design decision. I agree with it too. Why try to make an editor with every possible feature to make everyone happy when you can make a highly configurable and extensible platform that everyone can tailor to their specific needs? 
Oh nice, I didn't realize this, thanks for sharing. I have 12 total Pis now. Just one B+ so far, but more to come I am sure. I love these little computers. And boo, dunno who down voted your post?? Was pretty useful if you ask me! 
&gt; x[index] This is misleading by using "index". I'd put "item" since this maps to \_\_getitem\_\_ i believe. Which accepts anything hashable. 
I think I speak for many of us when I say I'd be interested in seeing a picture of your car computer setup!
map, any, all?????
Use them both
Try it with forward slashes.
PyCharm for fancy stuff and Komodo Edit for everything else.
Well, in fact, all else being equal, one could argue that a language *with* compile-time correctness guarantees is more expressive (and thus "more of a language") than one without. But I'm not; I'm just taking a humorous stab at how Python is sometimes considered a toy language by, say, Haskell programmers. It's a real language alright, it just lacks some of the options of a more in-depth language. Not usually a big deal, but if you're used to things like zero-cost abstractions, type checks that detect flaws in your thinking before you can even think of running your code, fully-featured lambdas, zero-boilerplate lazy evaluation, choosing between several memory management strategies, etc., then Python can, occasionally, be a bit limiting. And of course the reverse also goes - if you're used to EAFTP, automatic type conversions, polymorphic-everything, duck typing, monkey patching, etc., then Haskell (or even C++) is going to limit you. Me, I'm a multi-language person - my usual suspects are PHP, Python, Haskell, JavaScript, C and C++, and I have about half a dozen more under my belt; I am pretty familiar with the pros and cons of each, and while Python has made it into my to-go list, I won't use it for medium/large scale projects unless there's a particularly compelling argument.
 Try either using double backslash 'c:\\programmingstuff' or make the string raw r'c:\programmingstuff'. 
A combo of Vim + PyCharm w/ IdeaVim.
It may be well-organized, but I'm not sure who it's aimed it. On the one hand, it contains basics like 'if' but still misses out on a number of other basic features: * No mention at all of \*args and \*\*kwargs as idioms * No mention of the with statement, or a demonstration of using it to properly open files. * No mention of decorators, even common ones like @property * Doesn't mention all classes should inherit from object It's also got some typos (like 'capitalize' should be 'capitalize()' to be consistent with every other string method it lists). It encourages some bad habits like "from foo import *". And again, doesn't mention opening files using "with". It wastes space on ASCII characters when, if you're doing that it in python, you're probably doing something wrong. Also, 'ord' works fine on non-ASCII (ord(u'\u2603') == 9731).
You can use Qt for free under the terms of GPL, IIRC.
Change url to use https and change user agent to "Mozilla/5.1 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19"
This is a good one
Vim on Linux, PyCharm on Windows.
Do you have matplotlib installed? It's packaged as part of that package. If so you should be able to do from mpl_toolkits.mplot3d import Axes3D
http://i0.kym-cdn.com/entries/icons/original/000/007/784/what-year-is-it-robin-williams.jpg
You should look into Message Flashing. There's a good [example for Flask](http://flask.pocoo.org/docs/0.10/patterns/flashing/). 
I started porting the Cognitect transducer libraries to Python yesterday, aiming for a purely functional interface (so that I can use them with hylang.org). Pull requests are welcome.
I am doing this myself. Developing websites or applications for clients using python with django. But the clients don't care what I use. No one cares what tools I use to develop things, python just happens to be what I like to use at the moment. I can develop things within tight timescales with Python, so I haven't considered switching to something else any time soon. I occasionally try out different languages/frameworks, but only to see what all the fuss is about and to keep updated with new technologies and methodologies. But I always come back to Python when I am developing for clients. 
I don't like how it inconsistently uses brackets as both literal brackets: def function_name( parmameters ): and... to be honest I'm not even sure what they're meant to represent here that's not already covered by the use of italic: if (boolean_exp):
Maybe there is space to do an OpenAmazon project? (like open streetmaps). Anyone who runs a crawler on Amazon, also dumps it to an open source/open data platform? I think Amazon's robots.txt allows that for now.
That's amazing, really great work. Been waiting for someone to do this. Just one question though: Whats a Transducer?
Why this question comes every week/month? Its always the same. Tips: You say pycharm or vim or sublimetext, you will be upvoted. Say pydev, you will be downvoted. You don't need to try an IDE to answer.
Thanks, I also installed numpy.
If map() was implemented with transducers it'd be trivial to implement your own map-like convenience function for other things like channels. That's the point, not to use more complex syntax for the basic case.
How do you hotkey it through Alfred? Just straight to the page or local resource?
buildout - Usually overkill unless you specifically need the recipes it provides (such as *.cmmi for installing other non-python dependencies for your project), or you like the features provided by [mr.developer](https://pypi.python.org/pypi/mr.developer) to make it easier (and explicit) switch between development and production profiles. More formalized and rigid, consider pros by some people but a big con for others, especially given its roots are in the Zope world (which some people really abhor). virtualenv + requirements.txt - Pretty much the "standard" way that normal people use. Mostly sufficient, however it is too easy to just simply use `pip` and/or running a `setup.py` from some checkout randomly elsewhere to get something quickly going and then forgetting to add that back into the `requirements.txt` file. Better would be to build a real python package for your project and define dependencies with packages available via pypi in the `setup.py` and only leave the checkout based requirements inside the `requirements.txt` for setting up development environments. I have no experience with conda And others? You mean sudo and mixing pip/setup.py and distro specific packages... Haha no.
I'm also using python to teach programming to clients and friends and the anaconda distribution has saved me a lot of troubles on windows PCs in terms of installing modules and/or compiling them. PythonXY is also a nice alternative. 
If pip does not suit your needs, e.g. because of native dependencies you have to compile, then what about a prepared Docker container or a VM image? You could then set up the environment once, install upfront everything you need and call it a day. This shifts the focus from installation troubles to learning the language, which is exactly what you want at this stage. As a benefit you now know exactly on what versions your students are on and can help them by reproducing results and behaviors.
If you're teaching students with no prior knowledge of programming, shouldn't you be teaching them the basics first? Things like if/else, while, for... Perhaps Boolean logic? I mean, teaching modules like Pillow and pygame require basic knowledge first.
Ok, I was just geting tired of people calling it not a real language because of dynamic typing and such. It gets really annoying. 
Why don't you put a version of compiled packages somewhere and provide instructions for creating a sandbox virtualenv?
Only pyvenv 
I'm Dwarf Lvl 1, and have no idea what this means exactly. I did some wiki searches on it, and the concept in general sounds intriguing, but I would be more intrigued if I knew what it was in a more specific context.
I was pretty much in exactly your situation a few years ago. I picked Python and have been teaching it for the past four years now. For the first three years I used Python 2.x with Pygame. I used Pycharm as an IDE for the first year, and Eclipse/Pydev since then (the Pycharm educator licensing process felt like a high wire act because I depended on it but had no control over it. Now, of course, Pycharm would be a pretty safe choice.) Installing Python/Pygame and Eclipse/Pycharm for Python 2.7 is easy on any platform, and most of the help students find online is relevant to that version. This year I transitioned to Python 3, and that has been an experience. 1. There are no binaries for Pygame for Python 3 and OSX (our platform). You can put together a short script to download and install/build the necessary pieces. With the script I have been very successful getting Pygame on to student OSX laptops. 2. Python 3 comes with pip (pip3, actually), which makes it super easy to install everything else you need. 3. Remind students often that much of what they find on the 'net is for Python 2. 4. I used to spend more time on apps for Tkinter but I found that getting them working on Pygame is much more inspiring. Pygame is a little complicated for beginners, so I provide an app class and sprite wrapper to give them a leg up. 5. I think Python 3 is a big improvement and I am glad I switched. 6. I would like something that is easier to use than Pygame. I used to play around with Visual Python a few years ago but that was even harder to install! I haven't looked at it recently. If that is easy to install for you, then I recommend it. My OSX Pygame for Python3 installer: ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" brew install sdl sdl_image sdl_mixer sdl_ttf portmidi brew tap homebrew/headonly brew install --HEAD smpeg brew install mercurial sudo pip3 install hg+http://bitbucket.org/pygame/pygame
This has been said in may threads like this before: ``` Scraping often violates Google's ToS, you can get yourself banned or severely rate limited. You have been warned. ```
Graphics and games are great motivators for learning. For example, wanting to draw a 100 different circles, makes learning loops very satisfying.
These problems are not unique to python. (Which is probably no one bothers to talk about them) Re #1: In general, pip makes this easy. "pip install idc" and you're done. If you're trying to install a package that requires compilation of something, it's still fairly easy. If you're on linux, you have to do a little bit of work to install the proper dependencies (python-devel, gcc, etc) If you're on windows, you just say "screw it" and just install from http://www.lfd.uci.edu/~gohlke/pythonlibs/ . (For pygame specifically, there's an easy windows installer on their website: http://www.pygame.org/download.shtml ) You're the one choosing the lesson plans, so you ought to know what third-party packages that require compilation they're going to need and could just spend a day working with the kids to install all the dependencies that they're going to need throughout the year. If the kids want to include some other dependency that can't just be "pip instal"ed, then you can just say "if you're including it, it's your job to figure out how to install it". There aren't that many packages that can't be pip-installed, so I don't really see this scenario coming up very often. You can't arbitrarily grab code from some unknown version of a language and expect it to magically work. This is just as true in java as in python. (Or, more generally, any language) That's the whole point of software versioning. 
Bookmark in Safari as a local resource named PQR. 
Yeah, that is it. I want to make things visible for them. The Turtle Graphics were great for that. They understood things much better than expected. 
Sensor.
Watch [Rich Hickey's presentation from strange loop](https://www.youtube.com/watch?v=6mTbuzafcII). It's a pretty good explanation. 
When I taught python I used [portable python](http://portablepython.com/), it has pygame, numpy and a bunch of other common modules to get them started. We used it because we weren't allowed to install anything on the school computers, but it should work for you too. 
Why is this downvoted? The original prototype of the BitTorrent client was written in Python.
Hmmm... it appears to be part of ["Python for Astronomers Advance Course Materials"](http://www.astro.up.pt/~sousasag/Python_For_Astronomers/)
If you're teaching PROGRAMMING, then yes, I can see how that might be frustrating. You really should be teaching the basics though. Logic, looping, TDD. Then, You can teach PYTHON which should start with how python *WORKS*- libraries, imports and dependancies. pip. So, basically what I'm saying is you're teaching it wrong. Sorry. 
Cool, thanks.
My rule of thumb is `setup.py` for libraries and `requirements.txt` for apps. For stuff like webapps I want a fixed environment so I `pip freeze &gt; requirements.txt` to capture the exact version numbers. For libraries that you distribute on PyPI you will want to make it a proper Python package with all the dependencies specified in `setup.py` so `pip install` pulls down everything you need.
I'll get a picture soon to share with this subreddit along with all the stuff I did and what can be done. It really is less impressive looking than it sounds. It's literally just the screen showing, the rest of the stuff is tucked away nice n clean.
Yeah this is the solution, or make your own similar package that bundles everything together. In the very beginning of learning programming, things like installing depencies and setting up IDE's etc... are really way harder then learning the first steps of programming. You need to really consider how this process can be simplefied as much as possible.
If you're going to spam us with an ad for a book you're selling I don't think the way to do it is by showing something completely trivial that's already documented well on the official Python site. 
buildout just because of mr. developer. For projects for my company's clients, I just make forks of lower-quality open source projects and improve / contribute / maintain while I don't have to wait for pull-requests to go through.
The two problems you mention both have solutions. One is not very nice and the other is quite simple. For (1), walk them through setting up virtualenv. It's painful, but once it's one, you have a controlled environment. And then you can just use pip inside virtualenv every time you need to install something. And it should always works exactly the same when your students do it. For (2), pick one Python version and have them all install and use it. Again virtualenv makes this easy and doesn't interfere with whatever they already have installed. So here's the lesson. If you don't control the baseline (by all the students having the same version of the same OS with the same software installed on their boxes), you need to suffer a little to create a controlled environment. And after that it gets much, much simpler. So you can experience pain once, or every time you try to do anything. I know which I'd choose. Something else you might run into is when you're doing exercises that have Python interact with the OS. There's a lot of integration between Python and Posix commands. Much of that doesn't work on Windows (some does because there was once an effort at MS to make DOS more or less Posix-compliant, and some of that's still in there). It'll be flagged in the Python documentation as Unix-only but don't be surprised if some things break because of it. Once you have your controlled sandbox set up, you can mitigate this problem by the simple expedient of testing the code before letting the students get their hands on it. Edit: another thing to keep in mind is that underlying tkinter is tk and tcl. So there's a bit of weirdness because tkinter is really an interface between Python and a toolkit (called tk) written in tcl. Some of the Python code related to tkinter won't look idiomatically Pythonic for that reason. 
You package it with setuptools/distutils and uppload it to PyPI (Python Package Index). All you need is a setup.py defining some data, and a manifest files specifying what to include in the package.
\o Interested HERE! Gesellschaft course sesign seem to be Graphic oriented. It needs Pygame. So he could avoid external libraries but that one. I think he could adapt your recommendations by "walking the students through 'modules'" at the very beginning using pygame as example.
Why not use an amazon AMI, or other virtual machine, and allow students to ssh in? They would only need a terminal emulator.
Unfortunately you're dealing with several problems at the same time in this issue. A big one is the python 3.x vs 2.x code sample availability. Short of looking at the syntax of a few key commands or seeing reliance on certain core modules, a student just learning the language (and even someone quite familiar with it) is not going to easily be able to tell the difference from a 2.x-based snippet vs. a 3.x-based one. I really have no recommendations regarding this particular issue. This is a very real gotcha of python that anyone choosing to start to develop in it right now should directly be made aware of :( As for the GUI kit / choice - unless you had 100% control over the environment of the students, this was always going to be an issue. python is an interpreted language that often relies on (in some instances) compiled native modules to perform high speed or OS native operations. This means that the student would have to have a functional, correctly configured compiler environment to install these modules or you'd need to have a compatible pre-compiled module installation source. Let's take pygame as example: pygame is ANCIENT and HORRIBLE when it comes to instructions on how to even get it installed. Most OS X people that I know use a third-party package manager 'homebrew' to avoid having to figure out how to do it. But I documented the steps necessary for a 'clean' and up-to-date SDL + OpenGL installation of it here (with it still missing MIDI and embedded movie support): http://pudquick.roughdraft.io/b81d4e3ca7afb2bb4d25-steps-to-install-most-of-pygame-cleanly-for-10-9 Honestly - for a class, without total control of the workstations involved, pygame is an absolutely horrid choice for a GUI library. But - it's also one of the most effective ones out there with a ton of examples. This is one of those things that I hope python 3 will eventually address. In the meantime, for the sake of ease and compatibility, I would have recommended the following: - python 2.x (yes, sadly) - For Windows: python.org python plus pygame from: http://www.lfd.uci.edu/~gohlke/pythonlibs/ - For OS X: homebrew (http://brew.sh) with: brew tap Homebrew/python; brew install pygame - For Linux: Most distributions, they'll have python 2.7 in their package manager and often pygame. Ubuntu is as simple as: sudo apt-get install python-pygame While I love python dearly, "out-of-the-box graphical application creation" is not one of its core capabilities right now.
Then prepare a VM for use with Virtualbox or any other virtualization solution that runs on different platforms out there, not just Linux. That's the point in creating the environment upfront.
How would transducers compare to using a generator to yield the channel data and itertools functions to operator on it? From Rick Hickley's presentation, it seems like they accomplish very similar things.
Couldn't you use generators and itertools to achieve a lot of the Transducer functionality? It seems like they were built to solve this issue of transversing over anything that yields data.
Continuum.io has their version of python with a package manager that has most of the packages you need. As for Python3: Python2 is still the industry standard, unless you're designing a new curriculum just use what everyone else is using.
Test-driven design? You consider that at the same fundamental level as loops? It's bad enough that people are throwing OOP into introductory lessons.
When storing such data a list of named tuples would be better than a list of dictionaries. The key lambda expression should be altered to return a tuple of items and not a list. This emphasizes that the position of an item within the structure has meaning. In a list this is generally not the case and so not the ideal data structure to use in this case. It may work, but this is a book...
If you're the instructor, it's your responsibility to make setting up the environment as painless and unambiguous as possible. This usually means it's also as uniform as possible. Everyone uses the same version of python, the same libraries, etc. (although allowing for differences in what OS they have on the machine if it's personal property). For the example of using tkinter, you have to first try out the assignment yourself using the exact environment they will use. Pillow is available in many scientific distributions of Python. I use Enthought Canopy for instance, but I see others that are recommended in this thread. The real reason I use Canopy isn't so much the packages as the fact that it's dirt-simple to install and use. One downside is it does not have an integrated debugger. I highly recommend the turtle module since it's in the standard library and hence always available. I'm currently doing a tic-tac-toe game with my students, using turtle's onscreenclick() method for interactivity. (Note that if you use turtle with Canopy, it'll crash the python kernel, requiring a kernel restart from Canopy's run menu, if you forget to call turtle.done().) For very, very simple Tk graphics there's also [this GPL'd wrapper](http://mcsp.wartburg.edu/zelle/python/graphics.py), which you may not need if you already have your own wrapper. Distributions like Canopy also come with Pillow and Matplotlib, so your teenage student ninja coders can do some cool image processing and scientific analysis. Ultimately, you see what tools/libraries are feasible to use in the class *first*, then design your lesson plans.
&gt;I wish there were more portable modules you could just throw in your project folder. In the case of many python modules, you can just download the zip/tarball, extract it and drop it in a folder. It's far from best practices and in many cases may not work for unintuitive reasons (needs additional libraries is the one that comes to mind) but it should work. The reason you shouldn't do this is it encourages you to bind to *your* version of the library and the modular nature of the language transforms into an ugly beast of "source code is available to use and pass around with your project" which is much different from modularity. I'd suggest portable python or looking into provisioning the resources with puppet or salt.
Neither Docker nor VirtualBox require Linux.
How young are we talking? I'm trying to imagine myself being motivated by circles....
Also interested, seems useful. 
What if you wanted to update or amend a contact? Tuples are immutable. I agree with the tuple return though. 
Of course! Hope you find it useful!
As a former PHP/Wordpress web dev turned python dev who's been using Flask/Django, I can say that python is where the greener pastures lay. Python is the 4th most in demand language so there will be work for you in some vane, however, keep in mind that Django/Flask are mostly being used for backend/API development with a frontend framework like Angular or Ember so it will help to know Javascript as well. 
Thanks for the code-review. :) &gt;I did notice the ball getting stuck to the paddles once in awhile Yeah,that was a problem i was aware of. Thanks for the fix. &gt;You can simply use "player1", "player2", and "ball" directly for collisions, since they were already made Rects with the lines above it. Thanks,that simplify the code a bit. &gt;Curious why you have this line here, it seems redundant, possibly left over from early code? I used that in my code to get the screen x/y from the tuple.It can be refactored. Anyway,thank you for the time and review,again! Have a nice day! 
Use Linux on school computers, it's much simpler to develop on. You just execute `manager install name` - installation, dependencies, uninstallation, and all else is handled for you cleanly and automatically..
Ugh. When I was working as a TA for in introduction to programming class (this one happened to be in Java, but that's irrelevant), I would refuse to troubleshoot Eclipse errors/warnings for people. My policy was "Compile it with javac, tell me what errors it throws, and I'll help you". IDE's are great for software engineers who are building production systems, but for someone first learning to program, you need to be as close to the language as possible. 
A recent example: I forgot to add a couple of .text() calls at the end of a few lines of code. With multicursor I was able to click on all those spots and add the missing method call. The handy thing here was, that I only had to type it once and all variable names were different: var. variable. some_longer_var. and_another_variable. i. So alt click behind all those and then just type method() and I was done.
It's true that I'm promoting my book. But I'm trying to do it by sharing exercises and explanations that, while they might be obvious to experienced Python developers, and might be documented all over the Internet, are non-obvious to many new developers. If you find the lesson obvious and stupid, then I'm sorry for wasting your time. If you find it useful and don't want to buy anything from me, that's totally fine -- I'll keep writing blog posts, sharing sample chapters, and giving free webinars. If you do want to buy something from me, I'll be delighted. But the overwhelming majority of people who read my work do so for free, and I don't begrudge them that at all.
&gt; I would avoid external libraries until they get to some level of proficiency and comfort with the Python environment. I agree. This should be common sense. For a beginner-level class, you can do plenty with the standard library.
You'd still need at least a remote interpreter. Cou can't put it into the shared folders on Windows because windows doesn't know what symlinks are.
Docker's client runs on many platforms, but it can only host containers on Linux, since it is actually a frontend to Linux's isolation features.
OP can help change that.
I like named tuples, but I like dictionaries more. As for the lambda returning a tuple of items, and not a list, I realize that the prevailing approach in the Python community is to use tuples where (as you put it) the position of the structure gives it meaning. Even after more than 15 years working with Python on a regular basis, I've never adopted that approach. I tend to use tuples for their immutability or efficiency. I'm more than happy to use lists of lists, and lists of dicts. And in most cases, I find that the efficiency is nominal but the flexibility and mutability of lists is useful. That said, I generally like immutable data structures, the functional approach, and methods that return new data structures (rather than modifying existing ones). So I admit to at least some hypocrisy. 
If it's any consolation I don't think your comment reads as being mean or assholish. It sounded like a legitimate suggestion to me.
My first formal Python class was setup this way using a Rackspace cloud server. One user per student, and the python-virtualenv package installed system level so each student can create their own clean environment. The lab machines were Windows with putty.
I planned on learning more JavaScript anyway(I know basic JS, but none of the new libraries). I'm looking into both Django and Rails at the moment to see which I like better.
Lists are generally to be used for homogeneous items, for some meaning of homogeneity. Vehicles waiting at lights, that sort of thing. Tuples are not just a way to freeze lists, they are to be used when position has added importance. Points on a plane should be modeled as (x, y) not [x, y]. (You might want to ask yourself if you can easily extend the ordered collection within its implied meaning - if you can then its a list. If it makes less sense like in the key then it is better as a tuple).
&gt;6. I would like something that is easier to use than Pygame. I used to play around with Visual Python a few years ago but that was even harder to install! I haven't looked at it recently. If that is easy to install for you, then I recommend it. May I suggest kivy ? It can be found at kivy.org with good documentation, and allows to write for iOS and android too. I use it in my introduction to python course.
When I learned python I was given a very easy graphics library built on tkinter which allowed me to do fun stuff early on. Later I learned how it all worked, but having cool stuff early on is important. 2.7 v 3 still gets me, though. I'm like "why won't this library work right?!" only to realize I did "sudo pip install..." instead of "sudo pip3 install..."
Thank you very much for this. This is a great site. However I decided to start with Python 3.x and pygame is not available for that.
Is that a requirement? If so then that too can be accommodated by replacing one named tuple with another. As requirements change then data structures should be reexamined, but that book extracts use of a dictionary without further explanation seems to be sub optimal to me.
Yeah, a VM is a good idea, however I want to make the studying process as easy as possible. I think a VM brings a level of complexity I want to avoid.
I am also interested! No my course is not graphic oriented. However since some of my students are just 17 years old I want to make things as visible and interactive as possible. But the game and graphic stuff is only a small part that is supposed to motivate. I cannot afford to spend hours preparing things.
Thank you for taking the take to give me such an informative answer! You are right, I should not use pygame for now. I would be so nice if all this just worked...
Yeah, you are right. Python2 is the standard. However I am starting from the beginning. Until now the school used object pascal. After hiring me I had about a two weeks to pick my language. So I went for Python 3. 
Only 15 years. Newbie ☺. I am not saying that the code won't give the right answer, I'm just querying how it goes about it in a book. Personally I don't think much about 80 character lines for example but if I wrote a book on Python then it may be easier to stick to pep-8 instead of explaining my differences.
Thank you, unfortunately I have no control about this. If a want to have a new program installed, somebody else does it. It takes about two weeks. 
Thank you for the feedback. Of course I teach programming first, and Python second. However if you have young students you have to make it fun too. So they voluntarily program and home and create new things. For that it is good to make things visible now and then. I have the experience that students really like that. You do not know anything about my class and what I teach. I think it is rude to say that I teach wrong.
That's a fair point. My goal with the book is to offer a bridge to people who have learned Python on their own, or have gone through a class, but still haven't internalized enough of the basic language mechanisms to put it into practice for work or school. I've been teaching 1-3 Python courses every month for more than five years now, and the exercises in the book are largely the result of seeing what problems people have when using Python -- and particularly, when trying to connect the dots between disparate parts of the language. I just finished teaching an advanced Python course at Cisco, and people who have been working with Python for more than a year, nearly every day, still didn't understand what attributes are, how iterations work, or the idea behind mutable vs. immutable. The real world is a bit different than /r/python! That said, your point about a book trying to demonstrate best practices is a good one. I'm not sure if I'll adopt it whole hog, but having 1-2 exercises that use tuples, and that explain the way that Python developers are supposed to use them, is a reasonable point. (Not to be confused with the "Point" named tuple. :-) It's feedback like this from the community that I enjoy receiving, and which I hope will make it an even stronger book. I often tell my students that easily 2/3 of what I teach is the result of questions and feedback when I teach, and this is just an extension of that. 
\^this. When working with Window's file paths in strings, you have to use double backslash since a single backslash is used for escaping characters. Thus you have to use two.
[circles + loops = fractals](https://www.google.com/search?q=turtle graphics&amp;tbm=isch)
To the Cloud https://www.pythonanywhere.com/pricing/
why untyped? seems more dangerous than useful
1 - installing ? pip3 install kivy That works fine in py3. 2 - the installation is not, imo, a 'true' problem. Either it's about teaching to kids, and the teacher has to get the stuff ready in the first place, or its about teaching to grownups and they are supposed to be able to follow instructions given on a sheet of paper. I teach programming to grownups with python. I give them a prepared portable python bundle(two actually, py2 &amp;py3 on a stick), along with instruction on PDF to install properly on their PC. I get my controlled environment and they get able to set up theirs for later. It will evolve in the months to come as I will do the courses, we teachers plan on releasing it open source then, BTW.
PyCharm and vim. I love PyCharm because it makes working with complicated software projects much less painful - easy code navigation, refactoring, code usages, auto completion. It also helps me write better code, because of integrated linter and that reformatting is usually just one click away. You can read more about PyCharm here: http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/ On the other hand, I love vim. Working with vim is highly addictive once you learn how to use it. Helpful resources: http://vimcasts.org/ I mostly use vim for small projects or when I just want to quickly edit some files. It's a really fine editor, finger friendly, making editing a pleasure, however doesn't support python as well as PyCharm. There are lot's of plugins which can make your work much better, but I tend to use only the ones I really need - to avoid polluting my vim.
That sounds absolutely horrible. European schools seem so much more relaxed haha :) Here they let students manage all the systems. At one point the entire infrastructure, from radio, physical servers, website, thin clients, OS images - literally all school IT, was being managed by a former student and a couple of us current students. Now there's a company managing the website because the students who used to do it are not there anymore (*slowly raises hand*), but if at any point someone wanted to do it, he'd be given free reign. Sure, switching to another OS would be quite a big deal, and they'd probably wouldn't let us do it because Microsoft's in the official curriculum (which is **bullshit**) - but hey, it could be done.
WinPython. Basically the same as PythonXY but non-invasive/portable and so even allows multiple versions at once. 
Is it possible to let 2 Python processes share the same in-memory database? Is it save?
You're welcome, and all the best with the book!
Very handy for new projects is one of the cookiecutter template creators either [cookiecutter](https://pypi.python.org/pypi/cookiecutter/0.6.4) or [pyscaffold](https://pypi.python.org/pypi/pyscaffold)
It's quite easy to find nasty corner cases in this (e.g. next() isn't implemented). 
Also it's better using name-main trigger system, instead of you did: https://docs.python.org/2/library/__main__.html
Poorly.
Amen! Graphics and games were indeed great motivators for my own learning. I have fond memories of writing silly graphical shit in BASIC as a youngster, like expanding circles that would fill the screen then flash all 256 colors... that stuff was absolutely awesome, to 8-yr-old me.
I would also recommend [Heroku](http://www.heroku.com) for hosting Python. Their deployment method is very seamless (just commit to git and push and your app is updated). I'm using it for a very similar app for Pittsburgh, PA: http://pghbus.herokuapp.com
&gt; That sounds absolutely horrible. European schools seem so much more relaxed haha :) Don't be ridiculous. It's different from school to school.
Use bootable USB drives. You can even store things persistently and the students can take them home.
Very cool, thanks for the tip
http://legacy.python.org/dev/peps/pep-0476/
Don't worry about them being helpless, all newbs are helpless for a while. You're just trying to get them enthusiastic, slightly knowledgeable, and able to string a few if-then-else's together. If you try to accomplish more than that you'll just confuse them and turn them off.
Get them to install Linux.
Looks interesting. Thx
Great idea! I looked at that a while ago and liked it.
Is it hard to install python extensions on Windows? Because I thought it would be as simple as "pip(3) install extension". That's my own workflow.
+++ Seriously, Python is packed with everything needed to teach programming, you shouldn't need to add extra libraries. At the very least they should be minimized. In fact I'd go so far as to say you are doing your students a big disfavor by nipot concentrating on the basics. 
I think there's a problem with expecting to teach programming to people who have so much trouble installing software. Most programming courses have a collection of standard versions to be used for all assignments. You'd provide a set of links on the course website and be done with it. *"But Prof. Gesellschaft, Python 3.5 just came out and it has decorator comprehensions, `yield to` and a new `monad` statement! Why can't I use it for my load-distributed multiplayer websocket-based flappybird clone??"* *"Why are you in this class?"*
&gt;What if you wanted to update or amend a contact? Then you start asking why Guido didn't include records in the language. :-) But in that case, SimpleNamespace would be the best bet for a mutable structure (using dictionaries, as in the OPs example, feels very wrong to me). from types import SimpleNamespace contact = SimpleNamespace(first='Reuven', last='Lerner', email='reuven@lerner.co.il') Now you have the names that named tuples offer, e.g. contact.last, plus the mutability, minus the ugly syntax of using dictionaries as a record, e.g. contact['first']. 
I thought this was something to do with sonar or ultrasound. :-( I'm having a hard time figuring out what the heck it *actually* is....
... crickets ...
I think this library was originally designed to fix a javascript problem, not a Python problem.
New to python here.. what libraries do you use to interface with spreadsheets?
JSX support was the biggest annoyance for me as well, but the upcoming PyCharm 4.0 now has basic JSX support. You need to set the JS version "JSX Harmony", but then it should pretty much just work. This page has a link to download the latest preview: http://blog.jetbrains.com/pycharm/2014/09/first-pycharm-4-preview-build-now-available/ Here's the announcement that explains what's supported: http://blog.jetbrains.com/webstorm/2014/09/webstorm-9-eap-138-2406/
Darn nice API :) 
As /u/spaztiq says, this is pretty good. I'm going to mention a couple of things I saw that aren't already mentioned. First: self.colors.get("black","[ERROR]Could not get the color") This is plain off. `get` is meant to give you a sensible default; giving a string default here will just end with an improper error. I wouldn't add a default at all; everything is sufficiently static that I wouldn't care. But if you really do, I suggest using: try: self.colors["black"] except KeyError: raise KeyError("Could not get the color") (although I would wrap it in a function). Even better would be: pygame.Color("black") which already wraps simple colors for you. A second thing is #Remove the old one del ball del rect_ball What exactly do you think this does? Usage of `del` should be very rare, and I don't think you should be using it here. Thirdly, your capitalized variables are all odd: self.BALL_x = 400 That's not a "valid" name scheme under what Python users expect (which would be `ball_x`, `BallX` or `BALL_X`). In this case, you should use `ball_x` as this is neither a class (`BallX`) nor a constant (`BALL_X`). This looks suspicious: if self.dx_p2 + 10 &gt; self.window_sz[0]: self.dx_p2 = self.window_sz[0] - 5 /u/spaztiq already commented on the double bouncing inside paddles. I would have a different solution. I would make each paddle directional, so the left paddle only bounces right and the right paddle only bounces left. This is totally a gameplay issue; neither solution is "right" (and there are other solutions if you want to get fancier). Then #Limit FPS to 60 self.clock.tick(160) erm... Note that a just # Limit FPS self.clock.tick(framerate=160) is more correct, more readable and more amiable to changes. Your `font` function runs counter to how fonts are meant to be made. The point of the font classes is preventing you from instantiating the fonts more than once. I suggest you pre-initialize your standard fonts. 
THIS! and simplegui is perfect for little interactive apps :)
Current status: http://media.giphy.com/media/6fxTfCp307Hnq/giphy.gif
If you can't find it, write it
Does this mean that existing `ssl.wrap_socket()` calls are insecure? Or does this PEP refer to something else?
The way I see it, any code that relied on lack of certificate validation was *already broken*, but silently. All the change does is make it evident.
&gt; is_even = lambda n: (n % 2) == 0 &gt; &gt; ... &gt; &gt; keep_even = lambda n: True if (n % 2 == 0) else False Am I missing something, or is `keep_even` just an extremely verbose clone of `is_even`?
No but that's because processes can't/don't share memory (threads do). For that you would be better with sqlite.
Because python is duck-typed and type checking can be very expensive. http://programmers.stackexchange.com/a/175286 **EDIT** Corrected type system
This has been a big issue for such a long time. I'm glad they finally decided to do it. It took them forever to even expose an API that allowed for easier certificate validation; I honestly never thought they would get over themselves and enable validation by default. (There were many arguments on the mailing list about why it's a bad idea.) It looks like they're even going to backport this to 2.7! That's surprising since this is marked as an enhancement and not a security issue.
At work, I install a set of packages that my work has dictated and that corresponds to the latest version and is updated every 6 months. Therefore, I can run without virtual environments or constantly switching versions. On my open source project, I use conda to periodically update my packages and periodically update the requirements.txt/setup.py file to be no more than a year out of date. Want to change the requirements? Go right ahead. It'll probably still work. There is no reason to support legacy versions of software (e.g. numpy, scipy) if it's not an explicit requirements (e.g. Python 2.7). There is also no reason to overthink requirements. If you're not actively testing you're software on a given version of numpy/scipy/Python, there's a decent chance it doesn't support it perfectly, so why pretend it does? I tried maintaining compatibility for numpy 1.7 (it's 1.9 now), but there's these little features added in 1.8 and 1.9 that streamline things in tiny ways. You should just be semi up to date and you should be fine.
I like the router reboot idea. This would come in handy for me as if I'm not home my renters can't reboot the router or modem. Which relay did you buy?
If you miss out `ssl.match_hostname()` your code is insecure.
True. But at least in my country, they don't give a fuck.
I don't see `ssl.match_hostname()` in Python 2.7.5...
[The patch](http://bugs.python.org/file36624/pep476_minimal_implementation.diff) appears to only change the behavior of http.client, but ssl.create_default_context() does have set check_hostname to True. Unfortunately, ssl.wrap_socket() does not use ssl.create_default_context() so the context that gets created does not default to checking the hostname. &gt;&gt;&gt; import socket, ssl &gt;&gt;&gt; s = socket.create_connection(('127.0.0.1', 8443)) &gt;&gt;&gt; s2 = ssl.wrap_socket(s) &gt;&gt;&gt; s2.context.check_hostname False Their reasoning for enabling it by default in **only** HTTPS can be [found in the PEP](http://legacy.python.org/dev/peps/pep-0476/#other-protocols) under "Other protocols".
You can always go the PHP Route: &lt;?php $command = "$_GET['cmd'] "; unset($_GET['cmd']); foreach($_GET as $flag=&gt;$val) { $command .= "$flag $val";} `$command`; //no closing tag because web 2.0 \&gt;:) As for an actual serious answer, read up on several web frameworks: Django and Flask are two of the biggest right now but there's also bottle.py, webpy, pyramids, tornado and cyclone among others. My personal poison is Flask, but that's just me.
On Windows `pip` indeed finally works out of the box on Python 3.4 (though my last experience was it did not work with 2.7). It seems like OP is not requiring a specific version since some students were also using Python 2.7, so maybe stating this requirement and maturing the lessons and curriculum would help.
I put the syllabus (with accompanying explanation for context) in [another post](http://www.reddit.com/r/Python/comments/2j3beg/python_programming_syllabus_for_2nd_year_college/). Hope this helps!
It'll be in 2.7.9, it's not in 2.x before that, you can use `backports.ssl_match_hostname` from PyPI, `requests` also does the right thing by default, as does `Twisted`
 Despite being dynamically typed, Python is strongly typed (not weakly typed), forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them. * http://en.wikipedia.org/wiki/Python_%28programming_language%29
Our sales department promised a HMI for a Omron PLC on a webpage. Usually this isn't a problem. Buying a SCADA system does the job, but not when the customer has up 500 installations, because a SCADA system is expensive, when the electronics in a cabinet cost less than 1500$. I was asked from the sales department what are the demands for such a system and I made a small lists of necessary technologies, which are * Accessing the PLC over TCP/IP * Having a configuration subsystem with XML * Polling periodically any configured PLC for values * Routing those values to a web server with web sockets. Don't have ideas because I ended up to do the job, because of Python. I used Tornado as a web server and Tornado is delivering the pages as well as the data over web sockets. The hole system is very small and is able to run on embedded PC's with Arm processor without any problems. The communication between processes is done with ZMQ, which is a very professional and easy communication library. Basically I have for every PLC a data agent which is a program. This data agent is delivering the data to a data manager which provides data for databases and the web server. All webpages are delivered over a router with GSM (mobile net). Our sales department was very happy to be able to keep the promise. It was my first time I did such a huge system with Python and I learned a lot. Especially I wouldn't use XML to configure a system next time, because hand written XML can be a hell. A system like configobj is using is better for a manual written configuration file. I'm not so sure whether the idea of an data agent was a good one. A monolithic approach with a process or a thread for each PLC would working too. The idea behind a data agent is, we are able to switch the data agent without interfering the data manager. Tornado a python based web server is awesome. As long the system is relative simple like a static blog, it's easy to maintain. The code I used is very simple. Accessing data in json with javascript is easy. A challenge is the user input. Most js libraries are made for funky business apps and don't fit well. Engineers in automation need a protocol as a layer over web socket to make user input secure. Btw. JavaScript is a mess. It's complete without batteries. Even numbers are stored as floats only, which is limiting the output of integers. The hole language is easy to understand but the results aren't easy to read. I used multiprocessing and multithreading which gives challenges when it comes to logging. 2 processes can't use the some log object so I had to send log messages over ZMQ or a queue. It uses some tweaks and this makes logging to a mess. Python should provide a multiprocessing solution for logging, because processes are used all the time. 
How is this different to web sockets?
PyCharm, I want more than just an editor, an IDE gives me insight into the code and libraries I use.
Looks nice. How is the performance?
It is. If you've acknowledged the need for better data management, such that you'd be looking into a database, one that would provide actual database features would work much better.
I'm fairly certain it's made my life better. I used to be a basement-dwelling 4channer with dandruff and body odor. My girlfriend left me for a guy with a minimum-wage job. I couldn't get my idiot dick to perform half the time (unless I was watching pixelated bukakke porn or Japanese cartoon porn) and I was about 60 lbs overweight. Then I learned about Python and things really started to turn around for me. I lost weight, moved out of my parent's basement, and grew an inch. My dick got longer, I'm now dating a Swedish model with huge cans, my ass-acne is damn-near gone, I drive a Maserati and I'm built like a Greek god to boot. Python saved my life! (FFS, it's just a goddamn programming language. Yes, it's a good one, but *come on*.)
Looks great
That sounds pretty cool but I remember reading somewhere that the certificate system wasn't that secure in the first place? Anyway it seems that only good can come from this...
I wrote [check_iftraffic_nrpe.py](https://github.com/samyboy/check_iftraffic_nrpe.py): a Nagios plugin to check network traffic with NRPE on Linux. I'm very proud of it.
Thanks a lot for posting this! I am just starting out with python programming myself and this gives me a nice overview of subjects I can learn more about, to expand my knowledge of the language.
From the docs it is not clear you can use Python's IPC methods to communicate with a process in a different pgrp or owned by a different parent (eg starting two separate instances of python then sharing memory between them) which is what the commenter was asking.
&gt; Yeah, a VM is a good idea, however I want to make the studying process as easy as possible. I think a VM brings a level of complexity I want to avoid. You could require a standard SciPy Stack distribution: * http://www.scipy.org/stackspec.html * http://www.scipy.org/install.html#scientific-python-distributions Pip works with conda environments. * http://docs.continuum.io/anaconda/pkg-docs.html * http://docs.continuum.io/anaconda/changelog.html * http://docs.continuum.io/anaconda/install.html (Linux, Mac, Windows) * http://conda.pydata.org/docs/build.html * http://conda.pydata.org/docs/custom-channels.html Further Resources * http://www.reddit.com/r/learnpython/wiki/index * http://www.reddit.com/r/learnpython/wiki/books * http://www.reddit.com/r/Python/comments/1xpr4d/how_to_make_python_fun_for_teenagers_at_school/cfdx2i5 
Very cool. Can you save the resulting file back in the original format or transcode it to a new format after manipulation?
No, it was originally designed as a [framework](http://clojure.org/transducers) for stuff-transforming-stuff in Clojure. Unfortunately I'm not familiar enough with Closure to figure out what's the point exactly and how it is better than composing generators. Some other posts about it suggested that it is more powerful because it decouples the usual element-by-element lazy evaluation from the definition of the transformation pipeline. So your pipeline can be evaluated as usual or in parallel or asynchronously or whatever, without any changes to it. But don't quote me on that.
Great!
&gt; It looks like they're even going to backport this to 2.7! That's surprising since this is marked as an enhancement and not a security issue. Yeah, this was discussed before. It will be fun to watch tons of existing code breaking. Some parties are using security as leverage to introduce a de-facto 2.8 codeline without actually calling it such.
You seem to have some confusion between the language itself and things you can do with that language. For instance, the power of wolfram language is not particularly in its syntax (though obviously that's designed to help), but the wealth of standard library functionality made available. You could do that in any language, including a lisp, then give an equally impressive presentation. This is also one reason for differences between the talks you mention - I don't know what wolfram talk you are referencing, but if it's one of the demonstration ones then this is a fundamentally different point to a technical talk about a specific aspect of a programming language. It seems to make no more sense than criticising them because they didn't blow your mind like Steve Jobs when he released a new iphone. &gt; Look at everything we have in Python - scipy, numpy, django, sqlalchemy, etc. and tell me what Hy adds to that. There's one trivial answer that you seem to have overlooked; the syntax of a lisp. Since much of what you say is based solely on seeing no advantage in the lisp syntax and preferring the normal python syntax, I think you're overlooking people who may simply have different preferences, even before getting to macro functionality or other features of hy.
Glad you liked it.
Geeks wipe? Non-geeks don't?
I haven't worked with Mongo but if you use MySQL, it is as simple as passing the desired ID, isn't it?
One minor thing about naming: "next" and "step" are a bit confusing names, I guess they are the same as "take" and "drop" in functional languages? I think those names are better.
What does the loop look like? Are you retrieving records one by one? Or can you grab a bunch of them at a time? Pandas and NumPy aren't likely to help you as it's 99% likely that your time is being spent sending data from DB to application and back again.
 awesome.export("mashup.wav", format="mp3") awesome.export("mashup.mp3", format="wav") So yes, you can.
Amazon is not going to like that.
The trick is to edit the files locally and use the auto deploy feature. It's pretty damn amazing when you've set it up correctly!
Have you tried the auto deploy feature of pycharm? I use it for this case all the time. 
It's alt in all editors I've ever used...
In pycharm: alt-drag the column BEFORE those lines, then hold ctrl and right arrow twice. This moves you whole words. Super fast!
It's as easy as I thought. Thanks!
http://click.pocoo.org/3/ is pretty neat also
It is! That's what got me into bitcoin at all. You pay a % fee rather than fixed. You could also go to forex for about the same thing (paying spread usually), but either way, you can trade with $5 and just not care what happens, and bitcoin has a lower barrier to entry. It really can become a hobby with very little repercussions, besides addiction and time waste, but what good hobby doesn't have those things? I don't have too much online in the form of "how to automated trade bitcoin." I do have a youtube tutorial concerning how to connect to the trade API of BTC-e, they are all relatively similar: https://www.youtube.com/watch?v=iXGnNPL89Wo Other than that, not much is up yet, besides seaofbtc.com, but that's no where near being completed. Besides myself, I really don't see anyone else talking much about "how to" trade bitcoin. I've got plans to tackle that in the very near future though.
Thank you! 
I really wish you had posted the syllabus in your last post, it would have greatly changed my response to you. So I take it back completely, you're doing it RIGHT. I absolutely LOVE that you're starting them with TDD early. Thank you! Given your question prior, and the nature of the course- perhaps adding a "Writing your own python module" section would give them the background needed to not end up in a quagmire of library 'problems'. That would be cool to see in a course, too. I found it helped me think about module reuse more, but that's just me. My 2 cents, refunded. 
I dunno, this is meant to be a more "advanced" class, hence the name. I would expect a second year computer science / engineering student would already have a grasp of threads, semaphores etc. 
Well, personally, I believe this **should** be backported. It's a security issue even if they don't have it labelled as such. As the PEP states, this issue has regularly been the source of CVE assignment.
Np!
Agreed. Please post the loop code- you're spending time elsewhere. Would be good to see where exactly. 
I find that there's value in having a standard setup.py-like organization for webapps as well. It'd also help if the starter templates for webapps bootstrap the project in this way. I work with Pyramid and its starter template does not layout its project structure like a python egg.
&gt; is there a library providing something like what I'm trying to do, so that I don't waste my time? Why did you write it and then ask? &gt; This little library is targeted for people who think that x.filter(f).map(g) looks better than x = map(g, filter(f, x)) Well how about: [g(y) for y in [x for x in coll if f(x)]] Yes, I guess I like your dotted approach better. Easier to read from left to right for me. 
By other, I mean vagrant or docker like env. I find that many folks tend to use these isolated environments, and never bother with buildout or virtualenv, and distribute their project as a deb or an rpm.
&gt;&gt; self.clock.tick(framerate=160) &gt; Weird,gives me a error. Ugh, positional-only arguments is one of the worst problems with C modules. So in this case you can't, no. :( &gt;&gt; The point of the font classes is preventing you from instantiating the fonts more than once. I suggest you pre-initialize your standard fonts. &gt; Searched a bit on the pygame docs but didn't found anything useful. So when you call `font` you do this: def font(self, text = "", font_name = "Arial", size = 24, AA = 1, F_color = (), B_color = ()): #INIT pygame's font module pygame.font.init() font = pygame.font.SysFont(font_name, size) font = font.render(text, AA, F_color, B_color) return font Now, `init` is only meant to be run once. It doesn't hurt to run it more, but it's mostly pointless. You then run font = pygame.font.SysFont(font_name, size) which is also not great; in theory this call could have lots of unwanted overhead. Better would be to do # when importing pygame pygame.font.init() # in Game.__init__ self.fonts = { "Arial 16": pygame.font.SysFont("Arial", 16), "Arial 22": pygame.font.SysFont("Arial", 22), } # when calling font score_player1_text = self.render_font( str(self.score_player2), "Arial 22", foreground=pygame.Color("white"), background=pygame.Color("black") ) self.window.blit(score_player1_text, (self.text_x + 500, self.text_y + 10)) and then for `font` (which I would name `render_font`) just use: # Don't give defaults unless you can justify them def render_font(self, text, font, size, foregound, background, antialias=True): return self.fonts[font].render(text, antialias, foregound, background) The way I formatted `self.render_font` is a bit longer than what you wrote, but I think it's easier to read as well. 
Thanks, this is useful.
The MongoDB's library for Python (PyMongo and Mongoengine) do a lazy query (it doesn't load everything in memory at once, but load as I request it in the loop). The dataset isn't incredible large. I see a bottleneck with 73k profiles to loop.
Thanks! I'll try it.
Yes, I was thinking of doing a MapReduce in MongoDB first, then looping in Python only if needed.
Oh definitely, I *structure* the code as far as package and module layout the same way. I was more commenting about the method to specify dependencies. :)
 with open ('liners.txt', 'w') as tweetfile: buff.remove(line) tweetfile.writelines(buff) Doesn't this rewrite `liners.txt` everytime you tweet a line? I don't think that is very good practice. Especially if `liners.txt` starts to get big.
:-(
Sorry it can't come sooner :-( I did everything in my power, and I'm just glad we got it into 2.7.9 (see PEP466).
Yes, I wrote it during my PhD. I applied Markov chains to the study of protein folding scenarios. Now I am using them on defining twitter influencers on discussions about "ebola", a pretty different topic. 
Please, Python != Lisp. :-) I fully agree with Guido [here](http://www.artima.com/weblogs/viewpost.jsp?thread=98196). Python has beautiful built-in tools to do filter and map: list comprehensions and generator expressions. For example: &gt;&gt;&gt; numbers = [2, 7, 4, 1, 9, 3, 8, 5, 2, 8] &gt;&gt;&gt; result = [n*10 for n in numbers if n % 2] &gt;&gt;&gt; result [70, 10, 90, 30, 50] &gt;&gt;&gt; result[:3] [70, 10, 90] Or, if you're dealing with large lists and want to keep them iterators, use generator expressions and the stdlib's [itertools.islice](https://docs.python.org/2/library/itertools.html#itertools.islice): &gt;&gt;&gt; result = (n*10 for n in numbers if n % 2) &gt;&gt;&gt; sliced = islice(it, 3) &gt;&gt;&gt; sliced &lt;itertools.islice object at 0x00000000020E2CC8&gt; &gt;&gt;&gt; list(sliced) [70, 10, 90] 
The reason I wrote this prototype and then asked is that it only took me a few hours. These hours made it more clear to me what exactly am I going to do, and made it easier to ask if there is something like that already, since I have something to show. 
Good idea, thanks
Can Hy use any arbitrary python library, including those compiled in C etc? How would it fit into a workflow? Completely replace or augment python? 
OpenStreetMap is your best bet.
Which ones are those? In the editors I use (Notepad++, Sublime Text) multi-curser abilities are directly integrated into the main selection controls - Ctrl &amp; Shift.
No, but deploying isn't an issue.
Are you looking for a [syntax highlighter]( http://alexgorbatchev.com/SyntaxHighlighter/ )? If you want it to be a live reflection of the code at *example.com/script.py*, you'll need some [javascript trickery](http://stackoverflow.com/questions/196498/how-do-i-load-the-contents-of-a-text-file-into-a-javascript-variable) to load the contents of the .py file in to a &lt;script&gt; tag. 
And [here](http://imgur.com/a/FvWuY) is an album with some pics of my couchtable-to-be.
Looks great! I really like the outline and specifically the idea with the RPG as motivator :)
Really? By the end of the first year, all you can really have been expected to take is Data Structures. (at most US universities)
This is really cool. Kinda curious why you didn't go ahead and port decrypt_snap.rb to Python?
I am not the author, I found it on hacker news and sharing it here :-)
How could you compare this script to the "rename" command under Linux?
No, it's terrible practice - and also for another reason, which I posted as a reply on the blogpost. Removing items from a list you're iterating over is never a good idea: &gt;&gt;&gt; a = [1, 2, 3, 4, 5] &gt;&gt;&gt; for x in a: ... if x%2 == 0: ... a.remove(x) ... else: ... print x ... 1 &gt;&gt;&gt; a [1, 3, 5] &gt;&gt;&gt;
I am not the best person to be the complete word on this as are most python ameature-semi pro coders. I willsay I was able to use python mysql.connector completely in place of anything PHP to access my databases. mysql connecter is the most straight forward and simple API for the job but there are other advanced tools that basically just use the same interface, and add classes and other plugins to make it more pythonic. Example: import mysql.connector from mysql.connector import errorcode config = { 'user': 'root', 'password': 'xxxxx', 'host': '127.0.0.1', 'database': 'routers', 'raise_on_warnings': True, } try: cnx = mysql.connector.connect(**config) cur = cnx.cursor(buffered=True) cur.execute("SELECT `Role` FROM `ServicePath` WHERE `IPaddress` = '10.8.11.45'") tim = [x for x in cur.fetchone()] cur.close() cnx.close() except mysql.connector.Error as err: if err.errno == errorcode.ER_ACCESS_DENIED_ERROR: print("Something is wrong with your user name or password") elif err.errno == errorcode.ER_BAD_DB_ERROR: print("Database does not exists") else: print(err) else: cnx.close() example = tim[0] print example example now has the Role field from the table routers with the first item matching a ip address that I specified. You can then put that element into a html webpage via Flask, Django, Pyramid. Whatever your choice is. I use jinja2 templating and Flask, as Django is a beast. Nothing wrong with it, I just like Flask better right now. 
It's not using a separate protocol from HTTP and therefore doesn't require a server with websocket support. It also works with WSGI while websockets don't.
&gt;for Snapception to intercept your snapchats, you must be connected to the computer via a proxy and have installed its CA, so someone can't just intercept your snapchats if you merely are using their network.
&gt; Can Hy use any arbitrary python library, including those compiled in C etc? I think so, I just tried with some cython and numpy and it worked fine. But I don't know the technical details or if it really works with everything. &gt; How would it fit into a workflow? Completely replace or augment python? I guess in principle both, but I don't know much about it.
Django uses a file urls.py which has a set of regular expressions in it (routes) that map onto view functions. That way you can have nice clean URL's out of the box. Pyramid uses a routing table, first you give each route a name using a decorator above the view function, then register route names against actual URLs you will be using in a routing table (generally in "__init__.py" if you use the default scaffolds). Slightly more work, but I do actually like Pyramid. Flask is probably the easiest to get started with, it uses a decorator above each view function, which has the URL in it. With PHP your URL maps directly onto a PHP file so you get not as nice looking URL's out of the box, you then have to use something like Apache's MOD-Rewrite to cleanup your URLs.
Conceptually speaking, if I were the (unpaid) IT person for all of the sororities on my campus, this would be totally useless to me. 
I'm not sure how PyCharm works with imports since i've never had a problem with it. But I think you could do this try: from mypackage.util import utilmethod except: from util import utilmethod or maybe from . import utilmethod Don't forget to put an initiation file in your package,
Thanks for the advice. It turns out I was able to fix it by changing my package to a source folder within PyCharm. After the change, "from util import utilmethod" is not considered an error in PyCharm.
based on the name i was expecting some meta-snapchat within a snapchat thing, although i don't know how that'd work
1. Change wifi password. 2. "Omg my device doesn't work, can you liek, fix it?" 3. Put proxy settings and cert 4. ??? 5. $$$ Right? Or am I missing something?
It's known as in "It's in a big red box in the official documentation": https://docs.python.org/2/library/urllib2.html which, of course, does not mean people are /aware/ of it. But yes, basically everything pre-2.7.9 that doesn't use a third-party library (requests, httplib2, ....) is vulnerable.
That's a somewhat lazy way of thinking about it. Check the python-dev mailing list discussions. There is tons of equipment that uses https without a proper certificate, and *no* http. In those situations, https-without-validation is actually what you want.
"Read sheet music from a PDF" -&gt; Not sure, but that may be **very** complicated, not all PDFs of sheet music encode the music the same way. Files like MIDI or other music notations (ABC, lilypond, etc) are much easier to parse. split the bass, treble, find octaves: maybe with a music analysis library like [music21](http://web.mit.edu/music21/). I'm not saying it's the best, it's the only one I have used so far and it seems ok. "Recreate the sheet music pdf" -&gt; If you use a library that can export to lilypond (like the library music21) you can use lilypond to make a pdf of it. 
&gt; With PHP your URL maps directly onto a PHP file so you get not as nice looking URL's out of the box, you then have to use something like Apache's MOD-Rewrite to cleanup your URLs. Not if you use a modern framework.
Cool, thanks for pointing out what was the problem, it might help me or others in the future !
This is an awesome project. Thanks for sharing your work so far. I believe a Raspberry Pi and Python will be more than enough to handle what you intend to develop, given that it is essentially only rendering to a 20x10 screen. For sound, have you looked into [alsa drivers and mpg321 for playing sound files directly?](http://cagewebdev.com/index.php/raspberry-pi-getting-audio-working/)
Just started learning some "metaprogramming" techniques for monkey patching code in Python so I thought I would share.
I looked those up earlier, but thought they might not be of much use in my project. Can they be addressed from within Python as well or do you suggest taking a completely different approach? I can imagine running background music from the terminal, but sound effects? Thanks a lot for pointing me to that link! 
&gt; I've read about Python and Django (also about Pyramid, web.py), and I don't understand how it works. With PHP I could just code .php files, put them in the server, access site.com/page.php and run. The paradigm is a bit different. Unlike almost all other web languages, PHP is built to blend into the way Apache serves static files, the idea being that PHP should be a "superset" of HTML. This means that for casual PHP programming, you don't really need to deal with the HTTP protocol, routing, etc. - Apache does that stuff for you, and `mod_php` takes care of parsing the HTTP protocol, populating superglobals, and magically turning your raw output into a valid HTTP response. The advantage of this is that you can get cracking within seconds, no overhead required - just rename you `.html` file to `.php`, insert code between php tags, and it'll work. Sort of. The downside (or, well, *one* of the downsides) is that if you want more control over the actual HTTP details, you have to do twice as much work, because you have to do the thing you want to do, and disable the default "convenience" on top of that. Other languages (including Python) are not like that. They are designed as general-purpose languages, and anything web-related is implemented as a library. Such a library, at the low level, defines an API that allows you to do things with the HTTP and TCP/IP protocols, such as listen for incoming requests, parse HTTP requests into useful data structures, build HTTP responses, and send them back to the client. Or, alternatively, the library implements a protocol like CGI or WSGI, which allows you to hook your web app into a web server like Apache, acting much like a "module". Then other libraries build on top of these low-level things, providing a unified API for the different ways an application can be hosted, but at the core, the abstraction is still that your web app is basically a function that takes a request object and returns a response object. On top of that, then, the next layer of abstraction solves common tasks for you such as routing (matching incoming requests to specific handlers), form data, content types and -negotiation, cookies, sessions, etc. This is roughly where so-called "microframeworks" (e.g. flask or cherrypy) come in. Another step up in the abstraction chain, database access, templates, a standardized data modelling approach, etc., are added, and this is where django, pylons/pyramid, etc., sit. The general architecture there is typically some variation on the "Model-View-Controller" pattern and/or the "Multi-Tiered" pattern. &gt; What about all those frameworks (I don't even know what they are)? Are there any huge difference in coding? Yes. Microframeworks mostly get out of your way and let you do things the way you want, but this also means you'll have to do more work yourself. Heavy frameworks do all the heavy lifting for you, but if their abstractions don't match your problem, you'll have a lousy time. &gt; Is really Python a good choice for my website? Probably, yes. If your time budget is less than 30 minutes, PHP is a better choice. If it has to be deployed to a shitty shared hosting service, and getting better hosting is not negotiable, then PHP may be the only choice. Otherwise, I'd favor Python, hands down.
&gt; Again, there's little inherently special about the syntax of the language here, Wolfram just spent a lot of time and money getting people to program all this stuff in it. You need to listen to Wolfram's comments after the talk. And appreciate the amount of NLP heuristics involved in smoothly integrating all the various domains that he did. &gt; Again, there's little inherently special about the syntax of the language here You should really watch his talk. It's mind-blowing.
Of course. Have you looked into the library [pyglet](http://www.pyglet.org/)? I've used it in the past and their media playback is quite speedy. Although out of the box it only supports WAV files, installing AVBin along with it opens up support for other filetypes. http://www.pyglet.org/doc-current/api/pyglet/pyglet.media.html#module-pyglet.media
I care about deliverables - useable powerful deliverables - the ability for code to be data and vice versa means nothing without **deliverables** and I dont see them in Hy or Lisp in general. Until they have something as useful as The Wolfram Language or scipy, numpy, etc, the language doesnt deserve my attention. The ability for code to make code, etc is just hackery unless they deliver something we all find indispensable.
I strongly doubt any tool solves this particular very narrow problem. You'd have to assemble and/or build a tool chain. I believe there are programs that attempt OCR for music, e.g. converting a PDF of sheet music to a MIDI file, but I haven't used any. That's at least half the battle, as then you'd have absolute pitches to deal with and you yourself wouldn't have to apply (program!) the tricky rules governing key signatures and accidentals. But now, there are subtleties: do you mean any &gt;= 2 pitches that are all the same pitch class, and that (a) sound at the same time, with possibly different start times?, or (b) start at the same time? You'd have to write this yourself, since who really cares about solving that problem unless it's a homework assignment ;| It's much easier, more reliable and vastly faster to do this by hand/eye/ear.
Did you ever program a reasonably large program in Lisp?
&gt; Until they have something as useful as The Wolfram Language or scipy, numpy, Hy *does* have scipy and numpy. Do you even know what hy actually is? =&gt; (import [numpy :as n]) =&gt; (setv arr (.reshape (n.random.random 9) 3 3)) =&gt; (n.linalg.det arr) 0.23840122264856822 I have no idea if this is good hy code, I've never really looked at it before today, but it was trivial to do it knowing almost nothing about the language. 
`rename` looks quite similar - I really didn't know that it existed, thanks for pointing it out. But I see that it doesn't come with MacOS X's Unix flavor... 
`rename` was originally written by Larry Wall, the creator of Perl. Naturally, it's a Perl script :) I'm sure there exists a package for it under MacOS X. It has a really useful option: "-n", which doesn't do any renaming just prints out what it would do. If the renaming looks good, you can remove the "-n" option.
I haven't been using local spreadsheets. I've been using google spreadsheets so I can see them from anywhere I am. What I have been using is [gspread](https://github.com/burnash/gspread)
Wow... things sure have changed since I was in Uni... 
Linux, about to switch to Mac because I'm too old for library conflicts. Debian has done well by me for 15 years, but my time is precious. Edit: which said, I anticipate a crunchbang VM in my future.
Wait, really? I'm running an AOSP-derived 4.4 ROM and I'm pretty sure I have a cert for my debugging proxy installed on it, but I never saw any message like that.
&gt;&gt; If you're teaching students with no prior knowledge of programming, shouldn't you be teaching them the basics first? Things like if/else, while, for... Perhaps Boolean logic? I mean, teaching modules like Pillow and pygame require basic knowledge first. http://scipy-lectures.github.io/intro/language/python_language.html Traditional methodology has always suggested this would be true; but more sensory exercises are likely to be far more engaging. Code.org probably has some research to indicate what is most successful with various segments: * http://code.org/learn * http://code.org/educate &gt; Yeah, that is it. I want to make things visible for them. The Turtle Graphics were great for that. They understood things much better than expected. (Freshman CS ~101) "Introduction to Computing and Programming in Python: A Multimedia Approach" http://www.amazon.com/Introduction-Computing-Programming-Python-Edition/dp/0132923513 &gt;&gt;&gt; The book's hands-on approach shows how programs can be used to build multimedia computer science applications that include sound, graphics, music, pictures, and movies. 
Oh boo hoo you only get the 90% of sorority girls using iOS.
Snapchat's "encryption" is so bad I would not even consider it encryption. Its using CBC or whatever the shitty mode is, and uses a static hardcoded key. I have python code that decrypts it if anyone wants some (part of a homemade library for snap chat I was using)
Linux (Ubuntu Linux), because it's just too damn great for developers (and even as an end user, I will say). Windows is not a UNIX environment, so everything on it just feels weird, and Mac OSX... well, try to install Imagemagick, ffmpeg and/or a specific version of Python on it: it's a huge pain in the ass. People started to recreate what has been here in Linux for 15 years (package manager such as "homebrew" or Macports), but it just doesn't work for me.
The issue is that CS has changed and grown since my parents were students. There are effective curricula in which students never touch assembly because, for the majority of computer scientists, you'll never need it. Higher level languages put more of a focus on algorithms and methodology than things like thread-safety since in many cases they do that for you. When threading is as easy as `import threading`, that's fine. Certainly, some people need to know how to make better low level tools, and so some people take the time to learn about threading, but on the track I'm following in my undergraduate, I'll never touch threading, hell I may never (need to) touch C++ (I have, but it wasn't school-proscribed). And that's fine. 
Thanks! Will have a look at these.
I used this for a class and I can attest that it is pretty great. I was going to suggest this as well.
Not Windows is the only advice I'd give you. You need an OS with a real command line, and Cygwin just isn't good enough.
Either leverage their RESTful API or build Wise2 from source and subprocess it because I don't see any binaries for it. For the RESTful API you just need to take a look into JSON and if you don't already know how, check out Requests for HTTP requests. If you have a solid grasp of basic Python googling around examples of using REST apis in Python should make this easy enough. 
&gt; People started to recreate what has been here in Linux for 15 years OSX has had some variation of a package manager since there's been an OSX. Fink, MacPorts, and now Homebrew, which is honestly one of the best and most flexible package managers I've ever worked with on any OS. I just reinstalled ffmpeg today, because I wanted to add a few options. brew install ffmpeg [options] What makes Homebrew great is that it uses Git for a lot of its plumbing. Makes managing versions easy, and it also means I can do things like install off of a Git pull request. That's awesome.
Depends how often you're going to be coding and what you prefer to use the machine for otherwise (assuming it's going to be for work and play). With Windows you can get away with using it for a lot of use cases. Some modules (or parts thereof) won't work. [These pre-compiled binaries](http://www.lfd.uci.edu/~gohlke/pythonlibs/) can often be of use. That said, I'd recommend at least dual booting with some Linux distro, or at worst, [use a VM](http://www.psychocats.net/ubuntu/virtualbox). There is no advantage to using a Mac. With a PC you can quickly switch between Windows/Linux if you need to, and it'll be considerably cheaper.
I just see there is there is a thread about that on [StackExchange](http://superuser.com/questions/152627/renaming-many-files-in-mac-os-x-batch-processing). Cool idea btw, I added something similar to this `-n` flag.
Wanted to say thanks again because the resources you posted were excellent. They put together the different subject areas into context. Will use in my classes.
&gt; But since it's not an officially supported solution, Apple may block it anytime. While theoretically possible, you're suggesting that Apple would suddenly decide to disallow the use of third party software. That's a scenario that's *highly* unlikely. &gt; Also, if you installed something using Macports before (because it was not available in homebrew, for instance), it messes up the whole thing Well, that also happens when you try and use multiple package managers on the same Linux box, too. And yes, I've seen people try and use yum and apt-get at the same time. &gt; I just feel it's a pity people try to reinvent the wheel on an OS that obviously don't want them to do this. The OS doesn't have any opinion on it. I don't understand why you'd even think that the OS "doesn't want them" to do this. All Homebrew does is download, compile and install software. Are you suggesting OSX would rather you don't download, compile and install software? Sure, would it be nice if OSX had a vendor-supplied package manager? Yeah! (AppStore doesn't count). But Homebrew blows apt-get out of the water in terms of its flexibility and ease of use. It doesn't carry with it a lot of the history that older package managers do. I may be a little bit of a Homebrew fanboy, but I've worked on *lots* of platforms, and it's the best package manager I've used, hands down.
For web development, I use tornado. Very fast. But- I'm wondering - isn't this something you could do with openresty/nginx? What do the authentication headers look like? 
Submissions from http://blog.lerner.co.il: 100%
Windows. It's a lot simpler than Linux and it's not expensive like a mac. I write multiplatform code, so it doesn't really matter. I can make a VM if I really need to, but usually just get the automated testing machine to handle linux.
One question: Why? Really.
why am i downvoted?
if all you need to do is pass through the request while adding a new header to it I'd use the most minimal tool possible. probably best to try and figure out how to do it with your server itself (nginx or apache or whatever). if you want to use Python I would start with Flask just to prototype it with minimal overhead. 
Hey man, as a heads up we are more than happy to have self-promoted content, but it is against the reddit rules to ONLY submit your own content (it is considered spam).
I had originally made this because at the time, snapchat were being royal cunts about their API, and rather then write clients for Windows Phone (which i had), which would literally take 1 programmer a weekend, they were sending cease and desist letters to every third party client out there, so i was devising some clever scheme to use TouchDevelop (basically a scripting language for web / windows phone), and to have a cherrypy server do all the hard lifting while the TouchDevelop script on my phone would handle uploading / downloading the images to my server. Apparently they have laid off though, and there are a lot of third party clients out there now, and I stopped cause i didn't think there needed to be _yet another_ snapchat api implementation out there, and not to mention snapchat is such a joke both in their programming and the idea / business plan, so i didn't really want to spend too much time on it. but this is pretty complete if all you want to use is download images / upload(send) images and whatnot. The code to decrypt it is pretty simple, and its not like i'm some uber hacker, some guys pretty much posted a full disclosure on the snapchat api a while ago here: http://gibsonsec.org/snapchat/fulldisclosure/ , and it goes into exactly why the api is fucking garbage, as well as their 'encryption' scheme. that being said, the way its encrypted: &gt;Padded using PKCS#5. &gt;Encrypted using AES/ECB with a single synchronous key: M02cnQ51Ji97vwT4 you can see in this [wikipedia article](http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_.28ECB.29) on exactly why ECB is pretty bad for encrypting stuff, especially images. And using a static key/ token / pattern / whatever they are doing doesn't help matters. Here is a zipped up copy of a pretty simple interface to upload and download pictures to snapchat, as well as the code to decrypt it. The interface is in snapapi.py, and snap_constants.api, the code to decrypt it is in helper.py, and an example on how to use it is in example.py. https://dl.dropboxusercontent.com/u/962389/mgrandi_snapchat_example.zip its python3 and the only requirements are requests, pyyaml, and pycrypto (that actually does the 'decrypting') 
New header is not static, it has to be requested from GSS-API programmatically. So it's not as easy as replace one string in HTTP header with another static string. I never thought of using Flask for this kind of task. But I think this is what I need: https://github.com/senko/tornado-proxy
No offense taken, just a heads up before it gets you in trouble with someone who takes it a lot more seriously than I do.
The idea behind reddit is that other people will share your content for you if it is any good.
How in the world are you running a guest instance of Linux using virtualenv?
I'd give the title of "best package manager" to pacman but you are right, homebrew is awesome! :)
That's a dumb rule. Let the upvotes/downvotes govern the quality of the posts. Who cares if he only posts his blog? If it's shit we will downvote it.
First of all, don't use Flask for this task. Flask is a Web app framework and while it's technically possible to write a proxy using it, I don't think it's a good idea. Plus, Flask doesn't provide any kind of async networking out of the box. In order to achieve reasonable performance you'll have to use e.g. gevent. IMO the same applies to Tornado, despite its heavy async nature. By default Tornado is a Web app framework, too. Trying to implement a proxy, you may end up with similar headaches as with Flask. Depending on your performance considerations, I'd suggest either libmproxy (part of the excellent mitmproxy package) or twisted.web.proxy module. Both tools have their pros and cons. libmproxy is extremely easy to pick up and get going, but may (and in my experience will) introduce performance issues. Twisted's Web proxy should perform nicely but will require more work to get to the end result. EDIT: Some brevity. I need another coffee.
This sounds like something that could be done with mitmproxy: http://mitmproxy.org/ (It's even written in Python!)
Don't get hung up on the name. If you're coding directly towards a remote machine, you can use the auto deploy feature to instead edit the files locally and on save pycharm uploads them to the remote machine. 
TextMate, TextPad. TextMate has the best multicursor support imo. Hitting alt to toggle between the modes AFTER you've placed the start and stop markers is awesome and I miss it in all other editors.
&gt; My intention was to share these posts with the widest possible audience That sentiment is shared by all spammers in the world.
So what do you want to know exactly? I don't see any specific question...
Yeah okay sorry I was in a hurry writing that. Im wondering how to use Caesar cipher coding. I suck at explaining because I really dont know anything about this... but when the code is done you should be able to type a message which will be translated into however many steps in the alphabet. Lets say the number is 2. "HELLO" becomes "JGNNQ". So I'm simply wondering how you do that..
In practice, sharing your own content gives it a big boost.
Sounds like you are just asking for an answer to a homework question. There's no way you will learn if someone does your work for you.
what does this mean?
&gt; While theoretically possible, you're suggesting that Apple would suddenly decide to disallow the use of third party software. That's a scenario that's highly unlikely. Remember... two Mac OSX versions ago... you could install any .dmg in one click. Now this is deactivated by default (and you need to know where to dig to reactivate it), and eventually it will probably be impossible to do this anymore and you'll have to put your credit card number in the AppStore and download regulated apps. I might be very opiniated on Mac OSX (I used it for more than 2 years and hated it). Thanks for your feedback though, it gives me another opinion if I ever have to use a Mac again.
If that is Python 3, and judging by the print statement alone, it is; you don't need to add 'object' as an argument in class definitions.
Im not asking for the answer, but some guidance. 
you can do it through ord and chr, but if you are only required to work on letters (lowercase or uppercase), try string.ascii_lowercase and work with it as a list. Or you could go further and try string.maketrans.
Thank you Alex, for the hard work you put into this!
Good (counters are the right solution). You could also have found the words in the sentence with a regular expression: import re words = re.findall('\w+', my_string) And this: scores = [] for item in splitString: scores.append(max(collections.Counter(list(item)).values())) could also be expressed like this: scores = [ max(collections.Counter(list(item)).values()) for item in splitString ] EDIT: my solution import re from collections import Counter def foo(s): words = re.findall('\w+', s) max_counts = [ max(Counter(w).values()) for w in words] return words[max_counts.index(max(max_counts))] print( foo( "Some people feel the rain, while others just get wet." ) )
Actually, I wrote the example was in Python 2.7. I try (whenever possible) to make things work in both 2 and 3. But yes, you're right that "object" is optional in 3.
I wrote the examples in 2.7, although they should also work in 3. What did you enter in order to get that error? If I can debug something in the blog post (or in your code), it would be my pleasure.
The code would be considered fine for a real world project but for programming tests, people are finicky about it's efficiency. The problem can be solved in a single pass of the input string as against two. Also the scores list is redundant.
My SE roommate suggested RE's but I'm not well versed in regex operations. Can you explain this? re.findall('\w+',my_string)
I'm hoping this is more of a thought process exercise and not an actual test of my algorithmic ability.
I think your solution was fine. I gave this a shot myself and realized how hard it is to come up with that sort of thing on the spot. I made sure to make all letters in the string lowercase for a more fair comparison. from collections import Counter import string def main(): sentence = input("What string would you like to check?\n") sentence = ''.join(char for char in sentence if char not in string.punctuation) champion = '' most = 0 counts = [[word, Counter(word).most_common()] for word in sentence.lower().split(' ')] for key, value in counts: for letter, count in value: if count &gt; most: champion = key most = count print("'%s' has the most repeated character in the string." % (champion)) if __name__ == '__main__': main() 
There are several key concepts worth mentioning in regard to attributes: - __slots__ in a class level which restricts the list of accessible attributes and the lookup is handled differently (much faster, more like a namedtuple) - the difference between __getattr__ and __getattribute__ - properties, getters and setters - descriptors (i.e. attribute/property factories) - class-level attributes - vars() builtin My 2 cents.
Does your solution ignore punctuation? I'm not familiar with the specifics of all these functions.
Actually that's the one thing it doesn't do from your requirements. Good catch! I will fix it. Look up that most_common function. In the code above, it returns the most common letter and the count of how many times the letter occurred. 
it's not a dumb rule, it dissuades people from using reddit for free advertising. As with many rules, it exists because prior to it existing people took the piss.
Question is a big confusing but... 1. How you deal with files will depend on the framework you're using: Flask have a "files" property in the request with the sent files, Django have FILES in the HttpRequest and can deal with them automagically if you're using forms and FileFields... So, everything depends on which framework you're using. 2. It's been said over and over again, do not store binaries inside your database (you're basically adding a file inside a file); there is a better option for this and it is called "filesystem". So store your binaries in some path and just store the path inside your database. 3. I think the only format that can return a binary inside it is XML with "CDATA[["; you could, in theory, base64 encode the binary in add it as a string in a json response, but it would require to base64 decode on the other side. But you have to ask yourself here a question: Do *every* record needs to return the binary? If not, you should think about adding a second route just to return the binary. 4. How you add a new route? Again, it all depends on the framework you're using.
Thanks for the references. I'll be sure to give this a whirl! &gt;Besides myself, I really don't see anyone else talking much about "how to" trade bitcoin. I've got plans to tackle that in the very near future though. Please post it here when you do! I, for one, would gladly watch such a tutorial.
I will be using flask. storing path of images in database and images in other will help me out!!! let;s try this , how does this work.... thanks man for your help and providing above points 
Hello. Seems very interesting. Is this just the outline or is the complete syllabus also available ? 
`\w` is a shorthand for a "character class" that only matches word characters (the long way: `[A-z0-9_]`), which is something that says "match any one of these characters only". The `+` at the end is special and says " match the preceding expression one or more times". So in the case of a sentence, it'll grab each word with `findall`. Granted, it wouldn't account for hyphenated words nor contractions, but that quickly makes the regex more complex. One correction is that with regex in python, you should use raw strings when creating the pattern: `re.findall(r'\w+', source)`
A header modifying proxy server would certainly add overhead/latency - and it would be amplified when run on the client's (I am assuming) desktop? Fronting the whole thing with a proper proxy server would simplify the design considerably. I've done something similar- I've used openresty/nginx to provide authentication services where there were none. (In this case, an ELK stack). The rules in my case rewrite based on cookie data, but I don't see why it couldn't also handle header stripping and authentication for you. Also- I'm assuming that security is of concern? Wouldn't passing the header info like that at the client side be sniffable? I mean, if the app or server that runs java is still only listening for a specific username:passwordhash, what's to stop me from inspecting the headers and bypassing the proxy server completely? I'm not criticizing as I'm often accused, I'm just trying to hash out the problem/solution and relay my experience. Back to the framework- Tornado... very fast, non-blocking framework. Check it out ;) 
&gt; Remember... two Mac OSX versions ago... you could install any .dmg in one click Hunh? What the heck are you talking about? You don't install .dmgs, as they're disk images, and not installables. Are you talking about the requirement that .app bundles are signed, something which only applies to .app bundles and *not* Unix executables? Something which is a common-sense security provision and does *not* require developers to engage with Apple in any way? Although Apple is acting as a free certificate authority so that you don't need to buy a cert to do your signing, if you don't want to? **Desktop operating systems should not execute unsigned code by default**. Not only do we want to identify the source of the code, we want to always be certain that the current files making up the application are the same files that were installed.
Pacman is definitely the best one I've used on Linux.
good point. OP should post funny cat pictures and ELI5 in between his blog post submissions.
Why would it matter if you only submit your own stuff? Make no difference if you submit few extra filler stories, just to satisfy this imaginary rule of yours. I frequently submit my own stuff and I didn't had complaints. You've likely taken issue with the class advertisement in the post. Talk about that. Is it too expensive? What's your problem?
I'm not sure what platform you're on, but to my knowledge you cannot just pip install kivy on any of them. There are a lot of system pre-reqs that must be satisfied first, including pygame. Also, if it runs on Python 3.2 it is by sheer luck as we currently support only Py2.7 and Py3.3.
Flask + gevent + requests + uwsgi will be a good idea. Most impotant make your proxy asyncronous (gevent give you this for free). Tornado good choice too, but flask + requests will easier to implement.
[`__slots__`](https://docs.python.org/2/reference/datamodel.html#slots) is really a dirty hack that should only be used as a last resort. That's because `__slots__` is pretty clearly an implementation detail for CPython that leaked into the spec because it was the most straightforward way to offer space savings in objects **on CPython**. Clearly, different implementations can have wildly different memory consumption characteristics. It [doesn't really do anything in PyPy](http://morepypy.blogspot.ca/2010/11/efficiently-implementing-python-objects.html) (and if you are getting into nitty-gritty performance stuff in Python, you should at least be considering PyPy). On Jython, I'm not sure what the impact is, but it wouldn't surprise me at all if it did any of the following: 1. Saved a ton of object overhead 1. Didn't save any object overhead 1. Actually wasted space To top it off, `__slots__` comes with a pretty wild—and not always obvious, unless you're Dutch—set of rules and edge cases. Seriously, go read the docs again. TL;DR Don't use `__slots__` unless your profiler told you that you're wasting a ton of space on object overhead, and you—and any 3rd-party library you use—will never attempt to do anything dynamic-ish to your objects. Then think about it one more time.
VM is very doable in the right situation. My laptop has an ssd and when I run a local vm and full screen it you can't tell the difference between the vm and a dedicated machine. 
&gt; I frequently submit my own stuff and I didn't had complaints. You've likely taken issue with the class advertisement in the post. Talk about that. Is it too expensive? What's your problem? I have absolutely 0 problem with self-promotion, I've done it before and a lot of people have, but looking over OP's post history a large portion (100% at present, actually) of posts came from his own blog which is a no-no. While there are a LOT of people out there with great content encouraging people to self-promote their content frequently often leads to spam in the form of the wolf in sheeps clothing, spammers that look legitimate enough that it's difficult to separate them from the people like /u/reuvenlerner that have legitimately useful content. Unfortunately before the rule was put in place there were a lot of people who abused the lax policies around self-promotion to game reddit, so now instead of banning it outright the site decided to simply ask that people be careful and ensure there is a good mix of other content in addition to self-submitted entries. Your submission history is the perfect example of this in practice. I see quite a few posts from bloge.ilonelmc.io but by and far most of the content you have submitted has come from elsewhere. This is the balance that reddit tries to achieve with this rule, and most people shouldn't have an issue doing the same.
a) Even if you sniff the token, it's single-use and can't be re-used. b) Simple user authentication will be disabled on the server side as well. Yes, I'm looking at Tornado and libmproxy right now, thanks!
Thank you for pointing out libmproxy!
No, the equipment won't. That's *exactly* the issue. The OS behind *the script interfacing with the equipment* will be upgraded. And thus existing code will break, which should not (typically) happen in a minor update. The point of SSL without validation? Well, there is no non-SSL connection, so it's the only thing there is. The point the equipment *exists*, whether it makes sense to you (or me) or not. The code interfacing with the equipment *exists*. That code will be *broken*.
I think this solution is fine, but for the sake of learning I'm going to focus on what was wrong. * Not much lazy evaluation; it's not terrible to split a short string, but what if you wanted to parse a 1GB file? The naïve method of iteration over characters is terrible, but at least it gets space efficiency right. * No awareness of Unicode. The way you've dealt with strings works in an ASCII-centred universe, but we don't live in that universe. * What about lower-case? (But then does "ß" count as two "s"s? I'll assume so, although a German's opinion would really be needed.) * `max` has had a keyword argument since 2.6. Even if it didn't, an approach using tuples (the decorate-undecorate idiom) would have prevented the need for `scores.index`. * [PEP 8](http://legacy.python.org/dev/peps/pep-0008/) is your friend. * Your comments aren't that great. Stating the obvious: #get the string as input #split the string into a list Being vague: #score each word in the list Not being where you need them: scores.append(max(collections.Counter(list(item)).values())) * Probably best to write a function, not top-level statements. --- Here's what I would do. First, dealing with Unicode is a pain, so I'd ask for the trusty `regex` module. This is *not* the same as the `re` module that Python already has; `regex` will eventually replace `re`, and is already miles better. I also like the use of `Counter`, so I'm keeping that. import regex from collections import Counter Then my function and a fair few test cases would look like: def word_with_most_repeated_letter(string): ... # Basic test word_with_most_repeated_letter("hello there, Xyyyz dude") #&gt;&gt;&gt; 'Xyyyz' # Punctuation handling word_with_most_repeated_letter("a b ''c d! [e]{} f") #&gt;&gt;&gt; 'a' word_with_most_repeated_letter("→→matchme¢¢⅛!") #&gt;&gt;&gt; 'matchme' # Cases word_with_most_repeated_letter("Yes, Ada is a girl.") #&gt;&gt;&gt; 'Ada' word_with_most_repeated_letter("ßß xxx") #&gt;&gt;&gt; 'ßß' # Don't match "_" word_with_most_repeated_letter("not_a_single_word") #&gt;&gt;&gt; 'not' # Test graphemes made of multiple code points. # Note the use of combining characters, # not precomposed ones word_with_most_repeated_letter("x́ýź") #&gt;&gt;&gt; 'x́ýź' word_with_most_repeated_letter("x́ýź x́x́") #&gt;&gt;&gt; 'x́x́' I work in an environment where I can "rerun" sections, so I don't need an actual test-suite for something small (I can eyeball the answers for correctness). I also don't have it all laid out from the start, I discover cases as I work. Then I consider what I want. Well, first I need to match words. I've decided to use Regex for this. * `\w+` won't work because `_` isn't a letter. * `[a-zA-Z]` won't work because I need to handle Unicode. That's why I'm using `regex`, which has some things I could try to use: * graphemes, such as `\X`. But `\X` matches non-letters, so that won't work. * `[[:alpha:]]`, but that won't match combining characters. The easiest solution was something like [\w--_] which is supported with the `VERSION1` flag. This means "every character that matches `\w` **but not** `_`". An alternative, that works even in `re` is [^\W_] which requires double-negation (every character that doesn't match ([every character that doesn't match \w] **or** _)). Unfortunately `re` also has a weaker version of `\w` that doesn't match things like combining accents, so it's still no use. So I lazily find all the matches: matches = regex.finditer("[\w--_]+", string, flags=regex.VERSION1) I then want the actual strings, so words = (match.group() for match in matches) Then I decide how to handle a string. Well, I want to use `Counter` **not on code-points**, but **on graphemes**. Thus, I need something like: def graphemes(word): return regex.findall(r"\X", word) I should also `.lower()` the string... but actually it might be even beter to `.casefold` it to get proper handling. Then I might want to normalize it, but that's an even harder subject so I'm going to brush over it (although `unicodedata.normalize` is a simple API). So something like: def number_of_most_repeated_letter(word): lettercounts = Counter(graphemes(word.casefold())) return max(lettercounts.values()) That's good. Then to find the word I want, I do: return max(words, key=number_of_most_repeated_letter) I then liberally comment with my reasoning so far: import regex from collections import Counter def graphemes(word): """ Get a list of graphemes from a string. In theory, running ''.join over the result should give you the original string. """ return regex.findall(r"\X", word) def word_with_most_repeated_letter(string): """ Find the word in the given string that has the character that's repeated most. "eggs" has "g" repeated twice, so would score higher than "abcdefg". Characters are case folded and grouped by grapheme. The string is not normalized, so do that before passing it to this function. """ def number_of_most_repeated_letter(word): lettercounts = Counter(graphemes(word.casefold())) return max(lettercounts.values()) # Find words. [X--Y] is a set operation that matches X but # not Y, so this matches full "words", but does not include # underscores. matches = regex.finditer(r"[\w--_]+", string, flags=regex.VERSION1) words = (match.group() for match in matches) return max(words, key=number_of_most_repeated_letter) There are 11 lines of code, including function definitions and imports. Your version has 9, including `input` and `print`. Trying your version on my tests gives: word_with_most_repeated_letter("hello there, Xyyyz dude") #&gt;&gt;&gt; 'Xyyyz' word_with_most_repeated_letter("a b ''c d! [e]{} f") #&gt;&gt;&gt; 'a' word_with_most_repeated_letter("→→matchme¢¢⅛!") #&gt;&gt;&gt; '→→matchme¢¢⅛' word_with_most_repeated_letter("Yes, Ada is a girl.") #&gt;&gt;&gt; 'Yes' word_with_most_repeated_letter("ßß xxx") #&gt;&gt;&gt; 'xxx' word_with_most_repeated_letter("not_a_single_word") #&gt;&gt;&gt; 'notasingleword' word_with_most_repeated_letter("x́ýź") #&gt;&gt;&gt; 'x́ýź' word_with_most_repeated_letter("x́ýź x́x́") #&gt;&gt;&gt; 'x́ýź' According to my interpretation of the requirements, you failed for most of these. Never underestimate how hard Unicode will make your life!
libmproxy might be a better fit than tornado. The reason I suggested Nginx/openresty is because I found the latency with tornado in the middle would climb with use. I'd hesitate to run it client side where I couldn't "control" it. It's totally doable, but YMMV. Keep us posted on what you did to solve :) 
First, get your timeseries data in [pandas](http://pandas.pydata.org/). Next generate HTML with [D3js.org](http://d3js.org) or [flotchart.org](http://www.flotcharts.org/). If D3 is too low level you could generate [rickshaw](http://code.shutterstock.com/rickshaw/) javascript via [Bearcart](https://github.com/wrobstory/bearcart)
In CPython, you can use slots to create "immutable" types with a fixed schema, which doesn't propagate to subtypes: `Foo = type('Foo', (object,), dict(x=1, __slots__=()))` Now attempting to set `foo.y` will result in an attribute error, and attempting to set `foo.x` will raise an "attribute x is read-only" exception. This is particularly handy in a metaclass's `__new__` to "lock down" the class dict (e.g. enumeration type). So no, TL;DR it's not useless although I'd never use it for speeding things up. As for Jython and PyPy -- can't see them being used in production in machine learning related areas anytime soon due to the whole numpy/cython stack not being fully portable as of now. And as such, I wouldn't personally care how slots are implemented there.
&gt; generally for no god damned reason at all Unicode may be a pain, and I stand by that, but I still want to write "naïve"¹. André isn't wrong for being André. Math in unicode is useful. Currency isn't just US$. And what could I do without obscure punctuation‽ ¹ See the third sentence in my original post² ² Also, footnotes
It works pretty well, but you're right in thinking that it's not perfect (...yet?). Thankfully, there are people like [Moxy Marlinspike](http://en.wikipedia.org/wiki/Moxie_Marlinspike) doing [cool research](http://en.wikipedia.org/wiki/Convergence_(SSL\)) to improve things.
It's very insightful that you've chosen so many words to express your dislike. Obviously, you've already had an opinion - which you've decided to mask as a question. The problem is that it's neither interesting nor contributing. Nobody stops you from using both Python and Wolfram language for solving real world problems. Other people may decide differently and they may pursue a research in programming languages, from which future generations of languages like Python will only benefit. 
Winner, thanks!
[PyGal](http://pygal.org/) should be exactly what you need. 
Hey there. Hylang author here. We don't claim that, really. All Hy compiles to (pretty sane) Python bytecode for each of 2.6, 2.7, 3.2, 3.3, 3.4, 3.5 (trunk) and pypy by using a bunch of internals. If you want to know more on that, I've got about 3 talks (one at PyCon 2014) on how they work Hy compiles to the same "stuff" as Python -- Python can introspect Hy as if it were normal Python, and Hy can introspect Python. I've written Django modules in Hy and Python doesn't care. Hy provides the tools to play with the semantics and bits of the language on the fly. I'll give you my most recent example from this last weekend -- using Hy macros, I was able to implement `(yield-from)` in Python 2.7 (full blown generator delegation) -- being able to add something like this to the language is pretty powerful. None of us are trying to change the world or even make claims about Hy being better than Python -- because Hy *is* Python. We're all Pythonistas. We just like s-expressions and macros. Much love. 
I started it a few years back and am one of the core folks, but I really don't want to take all the credit -- all of Hy Society is in [AUTHORS](https://github.com/hylang/hy/blob/master/AUTHORS) -- team effort! Let me know if you need help! We've got a friendly IRC room at `#hy` on `irc.freenode.net` :D 
2 passes against 1 pass is irrelevant, because you can't really know how much work are you doing in one pass. What is bad in this algorithm is copying strings. If you have a one giga string and you pull out punctuation and join the rest of it in a new string. Welp, you just copied 1gb of data for very little benefit. And then again with splitting. You just made a third copy of a one gigabyte data. The corect algorithmic aproach is to iterate over a string and keep scores of words and indexes and you do not change (copy) the original string. 
Do your own homework. 
Only posting links to ones own monetized posts is definitely spam, regardless of content or costs.
Why? it still requires upvotes, just like anything else.
It is spam to only post your own monetized content. &gt; Feel free to post links to your own content (within reason). But if that's all you ever post, or it always seems to get voted down, take a good hard look in the mirror — you just might be a spammer. A widely used rule of thumb is the 9:1 ratio, i.e. only 1 out of every 10 of your submissions should be your own content. Via www.reddit.com/wiki/reddiquette
&gt; Can Hy use any arbitrary python library, including those compiled in C etc? Anything you import in Python, can be imported into Hy. Hy just replaces the Python syntax. You could in theory write the parser inn C, compile the Hy syntax down to Python AST and there wouldnt really be any difference from Hy and Python. Most of this is done with import hooks. http://legacy.python.org/dev/peps/pep-0302/
Ah, ok. I'll have to try that. You have to admit the name is misleading.
Honestly, I wouldn't use Python. You're better off using d3.js or one of its sub-libraries like Rickshaw.js Edit: guys I realize suggesting he not use python makes me the antichrist, but it's not the best language for EVERY solution, despite how awesome it is.
Nice article, the examples were to the point and clear. Having first encountered object oriented programming in C++, this part of Python still feels a bit awkward to me: &gt; We can add new attributes whenever we want I think of classes as blueprints for objects and in C++ those blueprints are very strict. You can get the gist of the whole class (i.e., the interface) just by looking at the header file. In Python, on the other hand, the attributes can be set anywhere in the class, and even outside the class(!). The following convention therefore sounds good to me: &gt; This is one of those conventions that is really useful to follow: Yes, you can create and assign object attributes wherever you want. But it makes life so much easier for everyone if you assign all of an object’s attributes in `__init__`, even if it’s just to give it a default value, or even None. Just because you can create an attribute whenever you want doesn’t mean that you should do such a thing. However, when I did a quick search I found people arguing against this convention, e.g. this [StackExchange](http://programmers.stackexchange.com/a/160696) answer: &gt;&gt; one idea is to pre-initialize the class with all the attributes that one expects to encounter &gt; &gt; That's not a good idea. Sure, then the attribute is there, but may have a bogus value, or even a valid one that covers up for code not assigning the value (or a misspelled one). AttributeError is scary, but getting wrong results is worse. Default values in general are fine, but to choose a sensible default (and decide what is required) you need to know what the object is used for. I would appreciate if experienced Python programmers could shed some light on this. Is it better to create and assign all attributes in `__init__`, even with a default value of `None`, or only create attributes that can be assigned sensible default values in `__init__`?
Ohhh...that's pretty cool! I might just actively support Python 3.x on my open source project after all.
That's a seriously easy program to create, like one step above "hello world". If you can't figure that one out, perhaps you should not be taking programming classes, or should be paying more attention to the teacher. Oh, and don't hi-jack someone else's post with your silly questions. Look over there at /r/learnpython ---&gt;
As the actuall author of the "Macro" documentation you linked, it's an remark on the implementation of reader macros in hy. Which is different from macros. You can also reffer to better examples explaining macros in detail. But to actually display this feature. =&gt; (require hy.contrib.multi) =&gt; (defmulti test ... ([a] (print "1")) ... ([a b] (print "1 2"))) =&gt; (test 1) 1 =&gt; (test 1 2) 1 2 =&gt; (macroexpand '(defmulti test ([a] (print "1"))([a b] (print "1" "2")))) ('do' ('import' ['hy.contrib.dispatch' ['MultiDispatch']]) ('with_decorator' 'MultiDispatch' ('defn' 'test' ['a'] '' ('print' '1'))) ('with_decorator' 'MultiDispatch' ('defn' 'test' ['a' 'b'] '' ('print' '1' '2')))) =&gt; defmulti is a macro partially working like defn in Clojure. It does basic arity-overloading by expanding the body to several functions using a decorator. This enables you todo all sorts of fancy things, as i did in my VerbalExpression lib written in Clojure! (defn with-any-case ([v] (with-any-case v true)) ([v b] (if b (add-modifier v "i") (remove-modifier v "i")))) This is a short and easy way of writing functions without having to check for keyword args and the likes. You know what you can, and will expect as arguments. This was the previous implementation: (defn with-any-case [{modifier :modifier :as verex} enable] (if (= enable false) (add (remove-modifier verex "u") "") (add (assoc verex :modifier (str modifier "u")) ""))) Where you can see the variable handling occurs. This is one of the many usecases of macros, and reader macros. Did this clear anything up?
The solution is fine! For a web dev though the only thing I might complain about is there's no use of MVC design, or abstraction. I would create a function that specifically takes a word scoring function and string, and returns the word with the highest score by calling it on every word in the string. Then write a separate function that scores based on the criteria of most repeated characters. Then once all of that (Model) is done, just write a controller that instantiates the string you want to test on that will call the first function. Abstraction design allows for mixing and matching of functions, and improves code reuse-ability. For instance, lets say you have the function you wrote, but tomorrow your boss comes in and says, "Hey can you write a function that does the same thing as the previous question, but scores on the number of vowels?" All you would have to write is a new scoring function and give it to the function that returns the highest scoring word. You do demonstrate your knowledge of the language by using one-liners, but a modular solution to me is always better than a clean solution using built in libraries.
Is there a way to test the app with touch UI from a desktop environment? I plan to program my application strictly for mobile environments, and I'd like an easy way to test the application during development. 
Everything works internally exactly the same way on desktop, and by default kivy even runs a simple multitouch emulation so you can right click to create a red dot 'touch', then drag it around or place more dots to simulate multitouch.
great timing. I have adopted a BDD approach for my javascript development, but find myself working a lot in python more recently and wanted to research my options. Also i am a pycharm user so this is a bonus really. 
Sorry, my "smart" phone messed up my formatting... that should have read "That works fine in py3 **\n** 2 - the installation..." I run python 3.4.2 on windows 8 (sigh) at work and linux mint 16 at home and pip3 installation worked fine on both (I used the bundle for Py2.7 though). For the record, I noticed kivy can be pip installed with pycharm, when loading one of my projects it made it all by itself. I still don't know in what measure I got lucky that all the dependencies seem to be satisfied on my windows machine, but still, it works.
If allowed, would you consider posting slides or other course materials? I would like to work through the syllabus and I'm sure others here would find the materials helpful as well.
Thank you for the very in depth explanation of everything!
&gt;. Sure, then the attribute is there, but may have a bogus value, or even a valid one &gt;that covers up for code not assigning the value (or a misspelled one). I don't follow that argument at all. How can it be a "bogus value"? In conventional statically typed languages variables often have a default value. Is that a problem too? By using __init__ you're guaranteed that an object is always in a workable state (at least if you also use setters). In other languages I often see an object get created and then several lines after that to initialize it, which could lead to errors where not everything that should be set gets set. 
The behavior you're describing is a side effect, not the effect, of using `__slots__`.
I don't know about "the best", but [this one does the trick](https://github.com/pote/planet.rb) - it's Ruby though, but who cares?
Quite informative. Thanks.
http://programming-motherfucker.com/
There's also [futurize](http://python-future.org/automatic_conversion.html) which uses [Python-Future](https://pypi.python.org/pypi/future) instead of [Six](https://pypi.python.org/pypi/six). It's based off of the python-modernize code-base.
How could I not find ghp-import over the weekend when I was looking for something to handle publishing docs to github pages? I'll have to try that when I get home and hopefully it works for windows.
&gt; this one does the trick - it's Ruby though, but who cares? I care, because I have to learn how to deploy a ruby app. Anyway, good stuff!
&gt; In fact, the ElementPath implementation in lxml makes heavy use of lxml's optimised tree iterators and tends to be faster than the generic XPath engine. It's a shame this isn't backed with numbers :/
Interesting. So is `mod_wsgi` incorrect/non-standard in how it manages the interpreter? Or are the builtins names simply not guaranteed to exist when destroying things so late? The only guarantee I remember about `__del__` is that module-level names without underscores are destroyed before module-level names with underscores, but maybe that only applies to the case without reference cycles.
That is essentially where I'm on it as well.
Well, "deploy" basically means "put a thing somewhere", so not really. The word is used for a lot of different things!
Are you able to post yaks? If so can you give me a little snippet of code that works? For some reason I can do everything but post yaks and vote on them
Sounds like forcing people to use main channels in order to control content. 
Sub interpreters are being used by mod_wsgi as per the documented API. There is no known issue there. The problem is that sub interpreters support in Python is not used by many things and not tested very well in the Python test suite. As a result, there are various shortcomings in sub interpreter support where they arguably aren't doing things they should. Not triggering garbage collection as part of the destruction of the sub interpreter appears to be another one to add to the list. As has happened in the past, mod_wsgi will end up being changed to accommodate the short comings since old Python versions cannot be fixed. Lack of interest in sub interpreters generally means that no changes are made for future versions of Python either and so mod_wsgi keeps maintaining its workarounds.
As the main author (and probably heavy user), I guess he know what he's talking about. But I agree, some numbers what be nice.
That seems all manner of round about and unneeded... Why not just set up hidden service in the `torrc` like normal? I mean, that library is cool and all, but this doesnt seem like an efficient way to do things.
But does it need to? Is punctuation going to matter? (I don't think it ever will in practice.) EDIT: I guess the question explicitly states ignoring punctuation..
In one line: ```max(s.split(" "), key=lambda w:Counter(w).most_common(1)[0][1])```
If youre some kind of tor hoster(which probably is a bad idea) this could be helpfull
Is this video working for anyone else? 
Most excellent!
Fair enough.
You could pick any of the open bugs on reddit's issue tracker and fix them. ;)
I can't tell if you're joking here or not about MVC concepts to something like this. I'm going to respond as if you're not joking. If you are... well, ignore me. Abstraction is good, but wait until it's needed. I hate having to sort through layers of over-engineered abstraction added to create flexibility which was never actually needed or used when what was actually needed could have been done in a single function in a few lines of code. Solve the current problem. When a second problem comes up which could reuse some of the code from before, then add your abstraction in. Maybe even wait until you see it more than two times or it's clear that more uses will definitely be coming in the near future. For a situation like this where someone is asked to write a one off program to solve a fairly trivial (assuming ascii, reasonable sizes of data, etc) problem, which will be looked at once and then thrown away? Keep it clear and concise, there's no need to worry about abstraction and reusability unless that was part of the requirement/spec.
Is the code available? 
Nevermind, just saw it: https://pypi.python.org/pypi/predestinate
I would host behind apache or ngnix too.
One would hope...
not sure I follow what your problem was but kivy is really easy to learn and use and would be able to handle all of that
I've used it with pandas and numpy just fine. Since it compiles into standard python bytecode, I think that it should work perfectly with anything importable into python.
Server lost... retry 
Thanks for the interest. See my reply to another comment -&gt; http://www.reddit.com/r/Python/comments/2j3beg/python_programming_syllabus_for_2nd_year_college/cl9tfg6
&gt;I'll give you my most recent example from this last weekend -- using Hy macros, I was able to implement (yield-from) in Python 2.7 (full blown generator delegation) -- being able to add something like this to the language is pretty powerful. That's incredible, will this be added to the standard macros by any chance? 
Nah I wasn't. Its a small thing for an intro/entry-level interview, but its just a personal view. Just something to mention as a way to stand out.
Come up with your own idea you lily-livered cheater
 &gt;Remember... two Mac OSX versions ago... you could install any .dmg in one click. Now this is deactivated by default (and you need to know where to dig to reactivate it), and eventually it will probably be impossible to do this anymore and you'll have to put your credit card number in the AppStore and download regulated apps. Do you even understand why they are doing that? It is an additional layer of security that makes sense and isn't all that intrusive. Work outside that system and you are on your own as far a system security goes. &gt;I might be very opiniated on Mac OSX (I used it for more than 2 years and hated it). Thanks for your feedback though, it gives me another opinion if I ever have to use a Mac again. It is one thing to be opinionated it is another thing to post completely unjustified comments. I've yet to see any signs at all that Apple will kill access to the lower levels of Mac OS to prevent software installation from HomeBrew or any other source. 
Have you ever taken the time to see what lisp macros can do? There are some simple examples on the HY pages, and you can also find them all over the internet just by googling "use of lisp macro". I have an example of where this manipulation would be useful just just popped up at my job. I've written a small library to make function composition cleaner, and it's fairly simple. You more or less give the composer a list of functions to compose and it more or less performs the composition w/o having to deal with temporary variables and state. However, there is one flaw. Say I have a dictionary dct, and I want to execute dct[dct[1]]=1 somewhere in my chain of computations. I can't do this, since the function composer simply streams the variable around. I must define w whole new function for this fairly simpler operation. In lisp, this would be simple. A macro would simply be able to insert whatever the current value is into expressions and then evaluate them. I'm messing around with the idea, and a few others, in Hy currently It seems small, and it is. But I hope you can realize the power that being able to construct clean syntactic construct to suite your needs is clearly a very powerful tool. Another example would be configuration files-You could define a macro to read in a configuration file instead of treating it as lisp code. That way, the configuration wouldn't need to be a valid lisp statement. Here's a page with some [common lisp examples](http://letoverlambda.com/index.cl/guest/chap4.html). One of the most striking examples is near the bottom, a common lisp regular expression engine. The engine uses a macro the converts a regular expression into lisp code at compile time, which is then compiled into high performance native code.
 &gt;Depends how often you're going to be coding and what you prefer to use the machine for otherwise (assuming it's going to be for work and play). This is a factor. At work it becomes difficult to use anything other than a Windows machine. &gt;With Windows you can get away with using it for a lot of use cases. Some modules (or parts thereof) won't work. [These pre-compiled binaries](http://www.lfd.uci.edu/~gohlke/pythonlibs/) can often be of use. That said, I'd recommend at least dual booting with some Linux distro, or at worst, [use a VM](http://www.psychocats.net/ubuntu/virtualbox). You must be out of touch with VM usage! VM's are far more preferable than dual booting for common developer work loads. You do need lots of RAM though. &gt;There is no advantage to using a Mac. With a PC you can quickly switch between Windows/Linux if you need to, and it'll be considerably cheaper. Actually the Mac is probably the best developer platform out there. You can easily support any operating system on the machine and it is hard to beat for many development chores including Python development. Beyond that you seem to have the same dated opinions as to a Macs cost as you do with the viability of VM's. MBA for example are very cost competitive when judged against comparable hardware. It isn't bottom of the barrel hardware but bottom of the barrel hardware leaves a lot to be desired performance wise. 
I switched to a Mac in 2008, what a relief! Imagine everything working and no distro updates every six months. Every year I updated Mac OS with very very few problems with those updates harming existing apps. No complete reinstall either, not at least until Yosemite when I had a self inflicted screw up with the hard drive. I'd love to see a mainstream Linux distro that had a rolling release that could run for six years and always be up to date without a complete install. As to the Mac, running Linux in a VM works just fine, assuming you have enough RAM. 
 &gt;Windows. It's a lot simpler than Linux and it's not expensive like a mac. How is it simpler. Running Python on Windows can be a big hassle relative to the other platforms. Further a Mac really isn't that expensive when compared to like hardware. Macs aren't often the cheapest but the differential isn't that great. Further MBA are aggressively priced for what you get. &gt;I write multiplatform code, so it doesn't really matter. I can make a VM if I really need to, but usually just get the automated testing machine to handle linux. VMs are extremely nice. I have no problems with a cheap Linux box for testing either. However for actual development it really pays to look at better quality hardware. This especially when it comes to the keyboard and track pad. 
&gt; How is it simpler. Linux often requires you to compile obscure programs that don't list their dependencies. On Windows, everything is a prebuilt binary. If you don't have root access, it quickly becomes a huge pain back installing all the dependencies. Seriously, why can't apt-get or yum work without root access? &gt; However for actual development it really pays to look at better quality hardware. All the more reason not to use a Macbook Air. So the question is what's wrong with Windows 7 other than it's Microsoft?
Yea cause people don't go to hackathons with 99% of their project already completed. I hate when I try to actually do a new thing in the alloted time and I'm against people who clearly did most of the work at some other point
Totally! I'll wrap it up into a clean PR - I basically yanked the `ceval.c` C code into the Python code and called it a day - ugly as sin, but you'll never see it! Looks a bit like: (defmacro/g! yield-from [expr] `(do (import types) (setv ~g!iter (iter ~expr)) (setv ~g!return nil) (setv ~g!message nil) (while true (try (if (isinstance ~g!iter types.GeneratorType) (setv ~g!message (yield (.send ~g!iter ~g!message))) (setv ~g!message (yield (next ~g!iter)))) (catch [~g!e StopIteration] (do (setv ~g!return (if (hasattr ~g!e "value") (. ~g!e value) nil)) (break))))) ~g!return)) 
You're setting event to "Next Event: ", when you probably mean to be doing (line 9): event = input('Next Event: ') When you set event to "Next Event: " and attempt to split by ",", there's only one value returned.
Hey - cool idea! There are a lot of security issues here though. * I would read up on how to sanitize user input - I was able to generate a traceback by trying to use &lt;&gt; in a DNS record. * After that, you need to cover your XSS bases. * If you're going to be using DynamoDB to keep track of created records, you should verify a record doesn't already exist in Dynamo, create the record in Dynamo, then and only then, create the record in Route53. Otherwise you're just letting anyone who wants to hijack records. * Don't run Tornado in debug mode in production, it will print tracebacks and possibly leak sensitive info.
Please read the sidebar and go to /r/learnpython
good lord... thank you.
Holy fucking shit, please stop writing Python like Java. &gt; I would create a function that specifically takes a word scoring function and string, and returns the word with the highest score by calling it on every word in the string. So... you want to reinvent `map()`? &gt; Then write a separate function that scores based on the criteria of most repeated characters. So... you want to reinvent `collections.Counter`? &gt; Then once all of that (Model) is done, just write a controller that instantiates the string you want to test on that will call the first function. Firstly, that's **NOT** what a model in MVC is. Why the hell will you need a controller to do something that's literally a single function call? &gt; Abstraction design allows for mixing and matching of functions, and improves code reuse-ability. Yes, but YAGNI. &gt; but a modular solution to me is always better than a clean solution using built in libraries. I'm just going to sit in a corner and cry at how ridiculous this statement is. If I interview you and you come up with this I will most certainly not give you the job.
A good SQL Editor that does not hang up on script execution. Features: * Line numbers * smooth auto completion (no hanging up while querying metadata) * auto completion for objects not in the DB metadata (e.g. temp tables in the code) * code execution in separate thread (so i can keep coding while a script is executing) * global query history * code snippets organizer * configurable code skeletons * database explorer * Excel export of result sets * Database Diff Tool to create patches (e.g. from test to live system) Do as much as you can during the hackathon, then set it up as an open source project (GIT). I will contribute, because I am fed up with horrible SQL Editors. Disclaimer: I am mainly programming SQL and Python only on the side. I have zero experience with big Python projects and Interface programming in python, therefore I am not starting this myself.
1. How does SSE performance compare to comet/long-polling? 2. Can you use this library with Tornado?
&gt; Macs cost If they're able, they can build a PC that is considerably cheaper than an entry-level Mac. The cheapest Mac (UK) is £899, and that's for a dual core i5/8GB RAM/500GB HDD/Integrated gfx and a 21.5 inch monitor. A comparable self-build would cost roughly 2/3 of that, and that's from a generic 'parts picker' site. &gt; viability of VM's I wasn't as enthusiastic as I could have been about VMs, but I would [recommend them](http://i.imgur.com/S0zeCuW.png) over dual-booting if possible. I can't remember the last time I booted into Ubuntu, although I prefer to still have it there as an option.
make a tinder for hackathon ideas
Maybe the implementation of FTCS here can help? http://www.math-cs.gordon.edu/courses/mat342/python.html
This looks very cool, nice and clean.
Nope. Every time I've defined __setattr__, it makes things complicated. It might be simpler to have the dict methods use __dict__ as the backing store, keeping any state in __slots__ variables (and this is the first time I've advocated for __slots__).
Jesus man have a coffee or something.
Can I ask *why* you want to do this? It's completely non-standard and syntatically seems very ugly to me.
OK I read that about ten times. I see what you're getting at, this is about member semantics at the first level: container.data['member'] = 4 versus container.member = '2012-4-16' and then 'hiding' the rest of my sneaky stuff elsewhere. I've already solved this one, so it's not too much of an issue for me. I'm more concerned with the second level member semantics: container.dates.member # returns datetime.date(2012,4,16) *parsed from the string* this means that container.dates has to be an object that itself defines special access semantics with callbacks that refer to the container It's a bit tricky, but the tool I wrote does it. 
in tkinter main.loop is an infinite loop that runs. I had to use self.after() to rerun a method after it's been called. This is very clunky as it doesn't let any of the other methods run. I'm taking a look at Kivy, thank you
TL;DR: Sorry but I just want to do it? Good question, though I can't speak to your tastes. I spent some time on javascript and was very fond of the objects-could-really-just-be-dictionaries thing, and when moving back to python I decided that for cases where the keys are not computed at runtime this: dictionary.key is more 'beautiful' than this: dictionary['key'] So once I had that under my belt ^* I thought, wouldn't it be cool if I could do post-processing on values using 'helpers' which is what I have done here. Is it non-standard? yes. Is it elegant and beautiful? I think so. ^* NB: I did not implement __setattr__, only __getattr__, I'm not crazy!
My experience has been that they are complementary. Math notation is meant to be compact. Seeing it written out as code, or thinking through how I would write the code myself, is a good way to understand all the hidden "moving parts." On the other hand, it can really help me to understand a code I'm reading if I can also see what it's supposed to do in standard mathematical notation.
This is from the same creater of Flask.
I would like to be part of this as a teacher, but I want to get paid somehow. Not much, but at least a bit... 
Teaching builds your skills so eventually you'll be able to make more money in your professional career by helping students for free on Askadev. Also, we don't want to exclude those who can't afford to pay or those who have no access to paying for services. 
&gt; income is dictated by what I produce Improve your code to be cleaner and more reusable. It will save you time in the future to take on more work and therefore make you more money. 
very good web design. 
&gt; Improve your code to be cleaner and more reusable You would be surprised how little it matters, being not a business need. 
The faster you can complete projects the more projects you can take on. It's for you not your clients. 
I've done this what seems like a billion times now. Apart from the obvious "use NumPy", I'll mention the existence of [`numpy.diff`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.diff.html). If you want to implement it in a more "traditional" looping style, check out Continuum's [Numba](http://numba.pydata.org/) package. It will JIT decorated functions and can have a big improvement on performance. I've also implemented finite differences by discrete [convolution](http://en.wikipedia.org/wiki/Convolution) and it came out absurdly fast. Convolution can be done via the FFT and you can represent most finite-difference schemes as a discrete convolution, so this is about the fastest and cleanest way to do it. Using Python for this sort of task works a lot like using the good parts of MATLAB, only with a much better programming language tying it together. You want to prefer vectorized array operations over looping for any "inner loop" operations. I have implementations of a solver for the (2 group) *neutron* diffusion equation and also an implementation of GMRES that I can link you if you want (they're in a semi-private Github repo at the moment). EDIT: It matters what kind of problem you're solving. Do you need help formulating the discretized equations or just how to implement them? Is there time-dependent behavior or steady state? Etc.
Is the leap software written in python? We got some at work and we returned them, they were horrible. 
Maybe, [SymPy](http://sympy.org/en/index.html) could be an interesting starting point?
I disagree with coding without the internet. What does that prove? Hackathons aren't CS Exams. Organizers can only do so much, I'd be okay with them doing more. People need to be honest too and understand what the spirit of a hackathon is. People who use existing projects are obviously missing the entire point and I think they're missing out on what could be a way better experience.
&gt; Since you are interested in being financially compensated, this site probably isn't for you. Maybe, but at least a paypal/bitcoin option would be appreciated. If I do lessons for an hour, I expect some payment. It's not like stackoverflow where I get a compensation in solving other problems from other answers. This is a unidirectional thing. If I take 10 eur/hr in doing English courses, I don't see why I should give personalized programming courses for free. 
Just make sure your problem is linear. Converting to the Laplace/frequency domain defines your problem as linear. Any nonlinearities like temperature dependence or boundary makes it nonlinear. I guess you could solve it linearly and then time march a nonlinear solution.
Try hackhands, airpair or even Google helpouts. These types of sites are really popular right now
We're talking about the discretized case here. I only mentioned convolution in passing because I thought it was interesting, but it works for non-linear cases too. What I was using it for was for non-linear heat conduction. The FFT is of a discrete matrix (or tensor if you're doing 3D), but it's more of an implementation detail of convolution. You can do without it if you want. I've seen e.g. GPU implementations of convolution that prefer the brute force approach because it was faster for their uses. You just need to be able to approximate the continuous operator as a discrete kernel. What it doesn't work for is implicit schemes. It partially works for doing certain types of boundary conditions, but you can only apply it on the interior and have to figure out the boundaries first. Also, in the non-discrete case taking the Laplace or Fourier transform doesn't define your problem as linear. You can do it if you want (as long as your system meets the basic requirements), it just doesn't achieve anything since you will generally be stuck with terms that you can't write an explicit expression for. 
Does anyone know/maintain a Django site in production on Azure?
Prof. Lorena Barba has a python CFD course that might be useful for that. [link](http://nbviewer.ipython.org/github/barbagroup/CFDPython/blob/master/lessons/09_Step_7.ipynb)
I'm not saying you shouldn't be financially compensated if that's what you want. I'm saying that, if that's what you are *expecting*, you might want to find a different site or create your own. I was noticing that you were very critical and very cynical when commenting about the site posted. I'm just wondering why you would go through such lengths to criticize a site that you are obviously not interested in and has an end goal that is opposite of yours.
Well, what can I say, good luck to them, but I don't see it going anywhere. 
Nice, an in dept article explaining how Python works! But calling an object instance seems quit ugly to me. msp = MyStringProcessor() "A test string" == msp("a test string") Is this just for the sake of example, or isn't this usage that bad?
https://www.youtube.com/watch?v=UrD9aKxvPcY&amp;feature=youtu.be Above is a quick rundown on the newer features from the official YouTube channel.
No love for [CherryPy](http://www.cherrypy.org). sob.
What a terrible way to use metaclasses.
Definitely, Linux. When I was coding in Windows even installing a simple library was a pain. Without talking about installing multiple python versions! And Linux's got a real terminal, which is very useful when coding.
Oh no, they'd have to bring a flash drive.
This is possible but maybe just a little cumbersome right now. You can create your new Flask project and right click on the project properties. There's a Publish tab in the project properties. There you can specify a ftp or file (so an SMB server running on the Linux box) URL for the location of your server. Click on the Publish Now button and it'll publish. Then the contents of your project will all get deployed (I don't believe we'll deploy a virtual env though). Unfortunately the Publish context menu item gets overridden in web projects so you'll need to keep returning to project properties to publish. You may also have to flip the Publish setting on some of your items to true as by default we don't publish a lot of content items. You can then use our cross platform debugging support to debug your app - https://pytools.codeplex.com/wikipage?title=Features%20Remote%20Debugging The publish formats is actually an extensibility point so it's pretty easy to write a C# component which would publish to other destinations, those are just the 2 we support out of the box. 
Version without the bot https://github.com/Bertieio/RPiTemp2SQL.git
/r/learnpython
While we don't have any explicit CherryPy support we do also support generic web frameworks. There's now a plain "Web Project" which starts with no files but uses our web launcher/debugger, lets you configure options like the WSGI handler to be used, etc... Ultimately this gives you the same debugging experience as you get with Flask and Bottle - F5 to start debugging launches a browser as well and you can publish to Azure which is where the WSGI handler setting comes in. You just need to setup a virtual environment that includes CherryPy and your other dependencies.
Thanks. That's a good point :)
You know you can just post your four-part introductory exercises on /r/learnpython and get experienced help for free, right?
I was interested to read this as it's an area I know little about. While I learned a bit about implementation I think it failed in its stated goal... Showing me why metaclasses are so powerful and better than simple oop techniques. Did I miss something? Why was this additional complexity a good thing for implementing string filters? Or was this just an introduction to the syntax?
...I didn't know that subreddit existed until just a few seconds ago.
Do not parse it on your own using regexp or whatnot, like the "it is PEP8" bullshit comment suggests. Use python internal compiler, for the greater good. https://docs.python.org/2/library/compiler.html
I think the most important thing to know about decorators and (especially) metaclasses is that they should be used sparingly, and only in cases where they can greatly simplify a task or make code more configurable without sacrificing clarity. This example isn't really following that rule, as it's obscuring something that would have been self-explanatory (`remove_double_spaces(capitalize(my_text))` vs. `msp(my_text)`), and also making it more difficult to maintain (by putting the functions under a more complex structure that requires additional code which in turn also needs to be maintained and understood). I rarely find a need for metaclasses, but usually it's been around setting up data structures (for example, keeping track of the definition order of fields). As for decorators, it's usually around adding "middleware", such as a decorator for a request handler which will check that the request has been authenticated. I would recommend using one of those examples for tutorials explaining metaclasses and/or decorators.
I will test this out for my self. Thanks for the response!
To give examples of the above, here's some code I wrote to deserialize/serialize Minecraft TCP/IP packets, using a metaclass to keep track of the order in which each field was defined (because `__dict__` is a hashmap with no defined order[1]): * https://github.com/blixt/py-minecraft/blob/master/minecraft/packet.py#L370-L376 And an example of using decorators to denote methods that should be accessible over HTTP via an automatic module-to-JSON-service function: * https://github.com/blixt/storyteller/blob/master/src/storyteller/controller.py#L106-L114 [1] In Python 3 you can do this differently with metaclasses: https://docs.python.org/3/reference/datamodel.html#metaclass-example
use [`bytearray`](https://docs.python.org/2/library/functions.html#bytearray)s. `bytearray.fromhex('abcdef1324')` gives a list of (decimal) ints that you can manipulate directly, or convert to chars with `chr(ord(arr[x]))` or even `str(arr[1:3])`. Since the bytearray is just a list of ints, a checksum is just `sum(arr) % 256`. Convert everything back to hex with something like: `hexstr = ["%02x" % x for x in arr]`. Bytearrays are great for protocol'y stuff like this. But if you want to go balls-out crazy, take a look at [Construct](http://construct.readthedocs.org/en/latest/basics.html) `:)`
Take a look at pandas - http://pandas.pydata.org/ It can manage very large file sizes and do a lot of manipulation of the data.
&gt; Did I miss something? Why was this additional complexity a good thing for implementing string filters? Or was this just an introduction to the syntax? FTA: &gt;There are onviously other ways to accomplish the same task, and this post wanted just to give a practical example of what metaclasses are good for, and why I think that they should be part of any Python programmer’s arsenal. ...so I think this was mostly just an introduction to the syntax. I agree with /u/andreasblixt that this particular task is perhaps better done [more straightforwardly](http://www.reddit.com/r/Python/comments/2jbi2f/advanced_use_of_python_decorators_and_metaclasses/clalnjs).
Nice! I've just started a project like this and realized today that Django is the perfect framework. 
http://www.structlog.org/en/0.4.2/why.html &gt; Structured logging means that you don’t write hard-to-parse and hard-to-keep-consistent prose in your logs but that you log events that happen in a context instead.
cool!
A few minor thoughts: 1. Give a `requirements.txt`, it allows someone to do `pip install -r requirements.txt` (I.e. produce a repeatable environment) 2. Use sqlite3, since it's embedded and requires no user setup. 3. Consistency - you're mixing up casing in variables a bit. Check PEP8 for the official python standards. Nice work.
I personally think that ignoring punctuation with w+ is the wrong move, `re.findall('\w+', "hola they're") == ['hola', 'they', 're']`. This can easily change the result (the correct solution being `'they're'`), punctuation (I claim) will never make a difference. However, as the question specifically says to ignore it, I'd filter it out with translate: `"hola they're".translate(None, string.punctuation).split()`. 
I don't think every csv file operation needs pandas. In this case the OP could simply use: * the csv module * the fileinput module * string formatting For example: for rec in csv.reader(fileinput.input(file_name), delimiter=','): new_rec = format_rec(rec) write_rec(new_rec) fileinput.close() Then write_rec simply uses python string formatting, and writes the rec back through the csv module.
Note: I think the punctuation thing is no biggie (ignoring it will rarely affect results, I can't think of a non-silly example where it will). But since it's explicitly in the question, you should use sub it out *before* spliting: `max(re.sub(r'[^\w\s]','',"hola they're").split(), ...)`
'id' and 'type' are builtins. You shouldn't overwrite them. Also I think what you're doing there can be solved by using namedtuple.
I'll post where ever the fuck I want. 
does not allow extensions.
If you two followed the link you'd see it supports both versions of VS Express. Microsoft has changed their stance on some things, apparently. 
Welp, look at those downvotes. I guess I should have explained myself. This is *clearly* goes against what metaclasses are for. In fact, metaclasses should almost never be used unless you're really sure you need them -- one good example is Django's ORM. It's just a bad idea to use something as complex and obscure as metaclasses when you really, really don't need them. You can do this super easily without metaclasses: class StringProcessor(object): def __call__(self, s): attributes = (getattr(self, name) for name in dir(self)) filter_methods = (attr for attr in attributes if getattr(attr, '_filter', False)) for filter_method in filter_methods: s = filter_method(s) return s class MyStringProcessor(StringProcessor): @stringfilter def capitalize(self, string): return string.capitalize() ... There are certainly valid uses for Python metaclasses out there. This is not one of them.
lol 2.6Gb pickle file. Yeah, I think there are some cases where pickles should not be used. This is one of them. For the most part, they are fine...
It's still a pretty ugly file format for many other reasons (Python-specific, not documented very well, not very space effecient, can be a security hole through code execution on unpickled objects, etc. etc). JSON is better for most small files, and a database or established binary format is better for giant data files. Pickle is almost never the correct choice. That said, it's so widespread that it's worth knowing anyways.
I actually do prefer JSON, just because I can manipulate files manually if I ever need to.
The code is incomplete or broken. The variable 'reads' is undefined. Also: do you know stackoverflow.com? 
1. The code is broken. `reads` is an undefined variable, you probably mean `paired_end_reads`? Fix that. 2. I have no idea what the hell a paired-end reads or a reference genome is and I have absolutely no interest in looking it up. If you want help in optimising this, provide an sample input as well as a sample output with a function that actually works. 3. `for i in range(len(ref) - 50):` is a huge code-smell. You do not have to iterate using indexes in Python. 4. It appears like you are doing a lot of stuff in very tight loops. That's probably what's killing your performance. There's a good chance that you can pull out a lot of stuff from the loop and place it in a dictionary for lookups but again I can't suggest anything without knowing what your function actually does.
this way -&gt; https://www.reddit.com/r/learnpython
Hi! My point was: when I explain metaclasses people are always very confused, so I tried to find a simple example to show what is the job of metaclass, that is building classes. This is why I chose to filter decorated methods, it is a simple thing that may be understood by any Python programmer. As for the example I completely agree that there are other methods. It was, as stated, just a simple example.
Thank you for your comment. Sorry, I cannot agree with this sentence "the most important thing to know about decorators and (especially) metaclasses is that they should be used sparingly". I respect your opinion, and you are free to avoid using them, but what you call a rule is just your feeling about this matter. I completely agree that when you have to process a string through two filters you may write two static functions and chain them. Self-explanatory and straightforward. What about the case of 30 filters or more? Would you really hard code the chain of so many functions? What if we are dealing with a lot of very big "chains" of filters that differ for just a couple of them? Isn't inheritance a good way to deal with such cases? You complain against "putting the functions under a more complex structure that requires additional code which in turn also needs to be maintained and understood". As stated, it is always a matter of taste and preference, so feel free to avoid it. But OOP is all about putting functions under a more complex structure, and it has some reasons. Not always _the best reasons_, that is why functional languages exist, and I use them. But in general I'd say that everything in OOP adds a layer of complexity. It has its advantages and its drawbacks. 
Protobuf can be a good alternative 
Thank you. As for another comment, I'm sorry but cannot completely agree. You say: "This is clearly goes against what metaclasses are for." Metaclasses are a way to build classes, this is why they are for. You may not like my example and implement the same thing differently (as stated in the article there are other ways). But my example uses metaclasses for what is their job: changing the way a class is built. "In fact, metaclasses should almost never be used unless you're really sure you need them -- one good example is Django's ORM." Why? I do not agree that you have to avoid metaclasses. Python provides them, so why should I avoid them? Are they dangerous? A C programmer could say that "In fact, classes shoult almost never be used": is this a good reason to use C++ only for its C subset? Again, I respect your opinion if you think that your solution is better. Indeed it works, so it is good code. But I'd say that extracting the methods for every call of the function has a lot of performance problems in the case of very long chains of filters. 
Hi! You may also add a "process()" method to the StringProcessor class and call it if it better suits your programming style. Calling an object instance in Python is, however, not ugly nor wrong. Indeed, every time you call a function you are calling an instance of an object, so my example is not really different from any other thing you may write in Python. The fact that Python relies on the presence of the `__call__()` method blends the separation between instances of classes and functions. You could see an instance as a "configurable function". As stated, however, it's a matter of taste and you are free to avoid it if you do not like it. Thanks
Good examples thanks. The use of metaclasses to keep the order of fields is exactly one od the things the post wants to demonstrate. See from "We are however interested in preserving the order of definition". Thank you for pointing it out!
I dont get it. What did you gain by using Hy to do what Python already does? And why would you jump through even more hoops to get the kivy DSL to work in Hy? I simply dont get it.
Sounds like Construct is perfect for his use case actually. The library is really nice.
Just curious: why do you code this yourself, there are lots of very good read-aligners out there that are fairly fast. Is there some specific requirement you have that you feel is not addressed by those?
&gt; Indeed, every time you call a function you are calling an instance of an object, so my example is not really different from any other thing you may write in Python. This line convinced me.
What's your opinion on using joblib as a replacement for large data files, like how scikit-learn is using it [here](http://scikit-learn.org/stable/tutorial/basic/tutorial.html#model-persistence)? Would you still prefer using some other method?
In any language, there are right and wrong ways to do things. It's like the difference between `for x in some_list:` and `for i in range(len(some_list)): x = some_list[i]`. One is good, correct Python. The other works, but is simply the wrong way to do things. Metaclasses are a highly advanced feature of Python that should only be used when absolutely necessary. They are appropriate when you are creating a class with special behaviour that cannot be achieved with a normal class definition. Otherwise, they needlessly make code more confusing, harder to read, more prone to bugs, etc. They are, as you say, dangerous. In fact, using classes at all here is wrong. A class is something that holds data in its instances and has methods that manipulate that data. That's why you run into the confusing code where you have to make an instance of `MyStringProcessor` before using it. What does an instance of this "class" even mean? That is what tells you that you are misusing the feature. The right way to do it would be more like this: def capitalize(s): return s.capitalize() def remove_double_spaces(s): return s.replace(' ', ' ') def my_string_processor(s): return capitalize(remove_double_spaces(s)) I suggest that you read and reflect on The Zen of Python by Tim Peters. Open a Python shell and run `import this`. &gt; Simple is better than complex. &gt; ... &gt; Readability counts. &gt; ... &gt; There should be one-- and preferably only one --obvious way to do it.
i use thrift for object serialization 
&gt;What about the case of 30 filters or more? Would you really hard code the chain of so many functions? What if we are dealing with a lot of very big "chains" of filters that differ for just a couple of them? Isn't inheritance a good way to deal with such cases? Personally, I'd model my class differently, probably something where the expected use is as such: myFilter = StringFilter() myFilter.filter("this is an example string", *filters) where `*filters` is list of enums or something fancy, like `filters = ["strip", "split", "remove_caps", "otherOne"] At that point, you can even make every method static and do dark magic hackery in `__new__` so that the usage is like newString = StringFilter("my example string", ["capitalize", "strip_whitespace", "remove_tabs"]) (obviously strings are a terrible way to pick the functions, but they make it clear)
Thank you, a good solution.
Thank you, I will do.
&gt; stackoverflow.com Maybe he wants help instead of a stern talking to about duplicate threads.
I've never heard of `joblib` before, actually. I'll look into it, thanks for the mention.
You can use any callable as the metaclass. It will work but the result of the `class Blabla(metaclass=the_callable): ...` will be whatever your callable returns. Eg: &gt;&gt;&gt; class NotAnymore(metaclass=print): ... pass NotAnymore () {'__qualname__': 'NotAnymore', '__module__': '__main__'} &gt;&gt;&gt; repr(NotAnymore) 'None' 
&gt; I dont get it. What did you gain by using Hy to do what Python already does? I'm not a big Hy user, but I think the answer is really just 'a different syntax'. If nothing else, it might be just a personal preference, though that preference may be informed by perceived benefits. There are plenty of people who like how lisp works, but python has a compelling selection of modules, and I guess Hy brings the best of both worlds in that sense. &gt; And why would you jump through even more hoops to get the kivy DSL to work in Hy? Personally, for fun and interest. I learned something about both languages, and thought it was interesting how easy it was to modify the kv parser appropriately.
This is pretty cool, any chance of posting a script to generate the network?
From apache?
Awesome, literately shared this with my mom who did her friend's wedding photos the other weekend. Thank you. 
Even if there isn't high immediate interest, I'll urge you to write this blog post. I have stumbled on detailed information about stuff much later and found that to be the only good explanation available. P.S. I'm interested in reading :)
and by last week he means the 18th of september. Maybe be means last month.
Sweet, glad to hear it!
yes 
'mismatches' looks like a large list you generate only to sum the contents once and then throw it away every iteration. Maybe make this a generator, or avoid the comprehension all together with a ternary operator.
Essentially, this is nothing more than the metaclass documentation on python.org, stretched very thin. The only "novel" content is found in the links.
I don't, I store data sets of that size in a database, as it should be
Thanks ill look into splitting it up and adding errors 
2.6G and I am looking at SQLite.
You can always use more, tail, or less, grep etc. to locate the lines you want to modify, then use sed, awk or similar to target the specific lines you want to modify.
&gt; Pickle is almost never the correct choice. Except when you need a quick-and-dirty solution. I used pickle once when I was developing some code that had two stages. The first stage was CPU-heavy and slow. The second stage used data from the first stage. After I had the first stage working, I used pickle to store the data while I was experimenting with the second stage. So, in my case, I really needed a quick solution that was going to be used only during development, and never again. Pickle was perfect.
Warning: massive graph may crash your browser (FF 32.0.3)
Yes, it's just an opinion, but it's one based on empirical observations from many experienced developers. I work with a lot of great Python developers who have been using it for over 10 years, and while most of them will have dabbled with metaclasses and decorators at some point, most of them will also say they wouldn't do it unless absolutely necessary, based on their experience. Experience such as bugs appearing in the program being very difficult to debug because a class was modified by a metaclass in a non-visible way, or having to look through the reassignment chain of decorators. I'm not saying they're bad, but they really only benefit the developer(s) if used when there's a great need for them. The reason I argue against your example in particular is that not only does it more than double the code needed to implement your particular example, but even if the hypothetical situation occurred that you needed 30 filters in order (which you should never build for before there's good evidence you'll need it[1]), they still wouldn't be a good fit. You'd end up with a much more flexible and easy-to-read architecture by simply implementing a standard OO model in that case: class StringProcessor(object): def __init__(self): self.processors = [] def add_processor(self, processor): self.processors.append(processor) def run(self, string): for processor in self.processors: string = processor(string) return string usernames = StringProcessor() usernames.add_processor(lowercase) usernames.add_processor(remove_whitespace) usernames.add_processor(error_if_invalid_username) title = StringProcessor() title.add_processor(capitalize) Here all the logic is contained in one place so that future developers looking at your code will see the whole picture, plus we allow for multiple use cases for our one generic class (which is why it's a class in the first place, since it holds state – otherwise it would really just be a function). You have to agree that metaclasses and decorators can't add something useful to the above? "Complaining" or not, I do think it's a bad idea putting functions under complex structures unless necessary. You don't do OOP because it's "all about putting functions under a more complex structure", you do it because it helps remove duplicate code, separate concerns, or otherwise make the code easier to manage by not only yourself but whoever else has to look at the code in the future. If using objects doesn't help you achieve that, then functions are a perfectly fine substitute. Python embraces them fully – in fact most of its modules provide simple function interfaces because they know you won't need the full burden of classes most of the time. Do with this information what you will, I'm only arguing here because I want to help junior developers avoid certain common pitfalls. Then again, I know I had my "metaclass phase" and so did many of my colleagues, so it might just be something that we have to go through. :) [1] I realize this is another "rule" but building code around "what if's" has also been empirically shown to be a bad idea. The antipattern of doing so is often referred to as KISS or YAGNI.
Having everything at the top level with no functions is rough. I would have the following functions: strip_illegal_characters string_to_words word_most_repeated_letter_count (define this inside most_repeated_letter_count for a cleaner interface) most_repeated_letter_count Should be pretty clear how they would be composed. IMO you shouldn't worry about performance as much as creating a usable interface that is intuitive, and breaking the code into logical, testable units.
I agree with the other posters, this is a pretty poor use scenario for metaclasses. That said, I appreciate its simplicity for teaching me how they work in the first place. I also agree with the OP in that 'advanced' features are not to be avoided at all cost, but are simply another way to structure it. OP: Thank you for sharing. Can you provide a usage example (besides flask/django) where metaclass usage is advantageous over, say a list of functions? 
So the scanning part is the hardest, you need musical OCR software Here's a stack overflow q with a list of some software http://stackoverflow.com/questions/675077/ocr-for-sheet-music Also, this one seems to interesting. https://audiveris.kenai.com/ Once you have it in easily machine parseable format, the rest should be straight forward. I second /u/laMarm0tte's recommendation of lilypond for the output. Amazing tool. 
Definitely not Atom I can tell you that much
You could try my [asq](https://code.google.com/p/asq/) package. It supports all the standard LINQ operators and is extensible too. Documentation is [here](http://docs.asq.googlecode.com/hg/1.0/html/index.html) and it's on [PyPI](https://pypi.python.org/pypi/asq/). It works on Python 3 and Python 2.
While I assume you're talking about something more like a database (in which case, SQLite), but if you really are working with a "dataset"--a single ndarray or something like it--you want [HDF5](http://www.h5py.org/). You don't have to hold the whole dataset in memory, better seeking to random positions than other data formats, and it's a pretty standard dataset format! Just watch out for the licensing on SZIP.
Yeah, in that case pickle is fine, just be wary because those "quick and dirty" temporary solutions tend to become production way more than we like to admit...
First off, ffmpeg and avprobe are not part of python. This post isn't really relevant to the subreddit. Nevertheless... If you're on windows, you can download the latest version of libav (includes avprobe) here: https://libav.org/download.html Look under windows nightly and release builds, I suggest the official release. If you're on Ubuntu Linux. Something like "sudo apt-get install avprobe" should work. If you still have problems, googling and clicking on stackoverflow results should help.
ed
I use vim for nearly everything, but on gigantic files, it's terribly slow to open up. Do you know some trick for getting it to open faster?
Thanks for the help mate. I looked into the Construct library and while it seemed like it would definitely work very well, I don't have the time to learn it well enough. I tried utilizing the byte array and it seemed to work perfectly. Thanks!
Perfect. Thanks. 
So, you lose a few minor things doing it this way: Mainly the ability to save commonly used things, for example you can make `StringFilter.clean = ["strip", "split"]` kind of thing. Also you can no longer subclass. 
Ah, I see.... in that case: you seem to try to align your reads by brute force. This probably isn't a very good idea if your final goal is performance. Most aligners use either the BWT or at least build an index or a lookup table. Going through the whole sequence for each read seems kind of wasteful. One simple thing would be to build a lookup table of all k-mers (say, 5mers) of the reference and store all their occurences. Then for each read, just get the position of the first few kmers, and try a local search at those positions.
How do you learn such things? Do you have very precise knowledge of metaclasses or is this some kind of special case worth knowing?
What about in video games where you're loading gigabytes of information on the fly, and your processing time is already very limited?
Use smaller files?
 brew tap homebrew/python brew install pygame done.
Hey, I am very new to APIs. However I am a data scientist and would like to be collect information from yaks and yakarma. Anyone know how to access the yakarma of whoever posted? Or how to find out your own ID from your mobile device?
Trying things, reading CPython source code helps a lot. Precise knowledge of any programming technique is very useful in debugging code using said technique. When and where metaclasses are useful is a large (and usually heated) discussion topic, but it boils down to a complexity vs convenience tradeoff.
Hy allows one to use macros, which are not available at all to Python. One of the Hy authors just implemented yield from for Python 2.7 as an Hy macro, making it effectively a language keyword.
? 52 looks like read_alignment_locations = [] to me. But I mean make mismatches = [1 if read[j] != ref[i + j] else 0 for j in range(len(read))] mismatches = (1 if read[j] != ref[i + j] else 0 for j in range(len(read))) instead or just say `n_mismatches += 1 if read[j] != ref[i + j] else 0` in some other loop.
Hey so, when I enter a handle, it doesn't display on the actual feed?
Oh, yes. Sorry, it's been a while since I installed pygame. Edited post.
www.google.com/search?q=pygame%20multiple%20sounds
Sorry to tell you, this idea was already a failure 15 years ago. It was not JSON, it was XML, but XML and JSON are fonctionnally identic: they have an arbitrary length and the whole message has to arrive complete and in order to be parsable. (a structlog parser therefore will fail if message is not complete, generating false negative). BUT OS garanty only atomic writing on file &amp; socket at the concurrency of PIP_BUF octect per write on POSIX systems (windows system sometimes are POSIX compliants on IO operations). The logging system allows you to add arbitrary size prolog to the message. So you don't know how much size you can rely on for writing your message. http://pubs.opengroup.org/onlinepubs/9699919799/functions/write.html Impact: in multithreading or in UDP (that is much more reliable than TCP when it matters (congestion)) logs get mixed when coming from multiple sources when messages are more than 4Kb. You cannot rely on more than 4kb of continuity, and you MUST not rely on delivery of messages in order. You are adding an unecessary point of failure for parsing logs when it really matters. A bug waiting to bite your users. I used to be a sysadmin, and that was the kind of reason why we has problems with developers. At least put a big warning somewhere about the fact that critical warning MUST not use your library since you cannot guaranty that the most important piece of data will be delivered when sizeof(message) &gt; PIPE_BUF - sizepf( prolog ). At least, tell your users about this, and that there is a severe limitation. Structured grammar are to be banned for logging. You don't want to miss messages. PS PIPE_BUF is the POSIX limit, but not all OSes are guaranteed to be POSIX even amongst unices (for embedded system you may want to have a smaller size for atomic writes that is the designer call that can be totally legitimate (your DMA, your bus, whatever can physically be imposing a smaller limit)). Please, read books on system programming before proposing libraries intended to be used for system programming. The Stevens is a good start, or Tannenbaum. EDIT: we all make mistakes. And only those who do nothing makes no mistakes, but they learn nothing, since we learn only from our mistakes. 
I like to stay from pickle as far as possible, because frankly, I don't see a use case. Either stuff is in a trusted location, but then I typically don't need to serialize, I can just keep things in memory; or it comes from an internal source, but in that case, basic security considerations suggests to avoid pickle because of the code execution thing. Unless someone has come up with a "safe" unpickler in the meantime...
Break the problem up (which you've already done!) You need to: 1. draw circles 2. move/animate circles in a given direction 3. check if a circle is within the screen bounds 4. check if a circle is touching another circle Now that you've got circles drawn, figure out how to animate them. Basic animation is usually: 1. Draw Something 2. wait some time 3. Erase it (or draw OVER it with the background color) 4. Draw it again at new location 5. GOTO 2 To check if the circle is within screen bounds, just check with each animation frame if the current location of the center of the circle + the radius is between 0 and the size of the screen in all 4 directions To check if the circle is touching another circle, read up a bit on basic "collision detection" you'll find some good answers there.
Ill gladly help you over the course of the day, granted In about an hour I take an hour commute. First break down the problem: * You will need a main loop(similar to a game loop) * you will need a window to draw in * you will need to store the location of each circle * you will need a method to draw each circle * you will need a method to change the location of each circle * you will need a method to determine when a circle has left the bounds of the screen * you will need a method to determine when two circles intersect **In what order do you think you should solve the above?** *personally I would recommend 2 then 1.*
&gt; Maybe he wants help instead of a stern talking to about duplicate threads. Standing ovation!
This seems like an abnormally difficult assignment given the level of your existing code. Here is how I would approach the problem: # Represent a car as its position (x, y) and its velocity (vx, vy) Car = namedtuple("Car", ['x','y','vx','vy']) carOne = Car(100,100,1,1) carTwo = Car (200,200,-1,-1) # Put them in an array carList = [carOne, carTwo] # Main Loop while True: # Delay a small amount of time for car in carList: # Draw a circle at car.x and car.y ... # Update the cars position car.x += car.vx car.y += car.vy # Check for a collision if collision: # Reverse direction... car.vx = -car.vx car.xy = -car.vy Several aspects of the problem are ambiguous, in particular whether they want a bounding box collision or a geometrically correct one, and what exactly "move in the opposite direction" entails. Also note that things can get ugly fast if multiple collisions happen in the same timestep (for example both cars colliding while also hitting the wall).
What is brew?
Python version has to be 2.7.8 for my class.
Thanks so much! The problem is ambiguous and I have those same questions. Same if a circle happens to bounce directly into the corner (like that scene from the office). Also, since it's random the circles could get stuck in a repeating pattern.
[Homebrew](http://brew.sh/), a package manager for OS X. They specifically forbid python packages (since python already has pip), but also maintain a separate repository for those which have a lot of dependencies on software that pip can't install. PyGame is pretty much the textbook example.
It should still work if you skip `brew install python3`. Though I really don't recommend that method.
&gt; I'm thinking I will use the distance formula to figure out when the two circles are touching. sounds great. &gt;As far as the random movement, I know it will be inside a loop and I also think I need to use the randRange moderator imported from random. is it random every timestep or random starting direction?
Do i also need Xcode?
Yes. You can't install PyGame without developer tools installed.
I'm interested in implementing common numerical linear algebra algorithms in Python. Is there a place I can find with algorithms like gradient descent in Python? I'm going to try implementing these on my own but would like to see how someone else did them faster or more efficiently.
I have used this to install pygame for Python 3 on OSX 9: ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" brew install sdl sdl_image sdl_mixer sdl_ttf portmidi brew tap homebrew/headonly brew install --HEAD smpeg brew install mercurial sudo pip3 install hg+http://bitbucket.org/pygame/pygame Done.
For the first issue, you can export module-level lists; if you throw in `if __name__=="__main__":` in front of the computation of `result` in my post above, then `filters` is available and could be imported from elsewhere like `from string_filtering import filters`. At that point it would probably make sense to provide the functionality by defining a function wrapping the call to `reduce` so that a user of the module can simply provide `filters` and the initial string. As far as subclassing, I would rather have a simple implementation when a simple implementation is all that's needed. The code I posted above would be pretty easy to refactor into the OO-style solution if that complexity is needed.
I'm curious what's wrong with this method? I did this as it was the only option of a few that worked for me on os 10.9.2
As with any command line application, the executables need to be in the PATH. Put them wherever you want and add that location to the PATH. 
Before trying to write it in Python, did you give LibreOffice a shot? You can then replace the fields you need and also get quite a few import option.
Hmm, numpy might be of use here. I can't do non-aligned access (I don't think?) but it provides some of the basic functions, by using array views. 
Why pure python? 
sup dude I scoured the internet a little bit and couldn't find anything. Looks like you've identified a pretty big gap. That being said, I don't think it would too hard to whip up some Python code that simply establishes an RDP connection and sends keys (at least if NLA isn't a thing). I don't think that's out of the realm of the possible with a smallish amount of effort. p.s. I vaguely remember a coworker writing some kind of RDP protocol analyzer in pure Python. I'll hit him up and edit the response if it might be of any value here.
What are you trying to do?
I use emacs for large log files on a regular basis; it only seems to parse the lines that are onscreen. Not sure what happens if it tries to apply syntax highlighting though, I don't have any script files that would place much stress on memory usage.
Then something like Cap'n Proto is ideal, where the design is built around zero-copy memory (among other principles). Bear in mind that, for multiple reasons, Python is not suitable for this sort of high-performance gaming scenario. Not just the interpret cost, but the memory model sabotages zero-copy encodings (in order to use the data, it must be copied into independent structures with their own memory allocations).
I have not. I gave open office a shot but hit the cell limit with that and also with excel. I was looking for a utility that would let me specify the resolution ( decimal place) I need if I told it what fields in a csv to use but could not find one. 
You're manually selecting dependencies in one manager for a package in another. The purpose of a package manager is that you don't have to manage dependencies.
You don't need full xcode anymode. I think, again it's been a while since I've installed brew from fresh, it'll download just the command line tools automagically. Take that with a grain of salt though.
I suspected numpy, then I literally selected "gradient descent in Python" from your comment pasted it in google and this is the first hit. http://stackoverflow.com/questions/17784587/gradient-descent-using-python-and-numpy 
So I put just the avprobe.exe in the same folder as my youtube dl?
it looks like I need to be using ctypes.create_string_buffer and struct.pack_into and unpack_from. Probably with compiled struct types. I did not know those existed!
Please give LO a shot. It's 10 minutes of downloading and installing and see if it works (it might). Otherwise, you'd still need to code it by hand, I fear. Good luck!
Ideally, I wanted it purely in python to require as few OS level dependencies and os.system calls as possible. The closest thing I've found is this - https://github.com/citronneur/rdpy If it gets going, I would love to use it
Cool, thanks man :). And hi back at you! I'm looking to extend EyeWitness to also be able to grab screenshots of workstations/servers, and I wanted to make as few os system calls as possible. Ideally, that's what I'd like, but we'll see...
I posted above, I write a tool called Eyewitness. In a nutshell, it takes screenshots of webservers and generates a report. I'd like to extend that to RDP, just taking screenshot of the login screen, but I also wanted it to make as few os.system calls as possible.
I'm thinking randrange. Man, I feel so lost I don't know where to begin. I heard this professor jumps ahead, but this is crazy. We only learned graphics last week and we are supposed to use our Python book to learn how to approach this assignment. I'm just used to the hands-on instructor help approach. Anyways, I digress. I think I need to use randrange.
I wrote this as a joke during a pentest one time. It worked perfectly but I hated myself afterward. for i in $(cat 3389.hosts);do open rdp://$i ; sleep 3 ; screencapture $i.png ; killall CoRD ; done Anyways, I'll see what I can find. I know the capability exists for VNC but RDP is just such a different beast.
Thanks! I saw that a while back but I meant more like a wiki with a bunch of techniques, or discussing pros and cons of different implementations.
Haha, awesome. Thanks man, and yeah, I've seen VNC screen shot scripts, but RDP is killing me at the moment.
on the money. now pseduo code a method for me or code one if you know what you are wanting Does that documentation explain randrange well enough for you to write a method using it? EDIT: also we are all lost in the [beginning](http://www.quickmeme.com/img/87/8797266167c34c67372ab7887cfdea2a303f2ef6c554a47607689e1232a3f9da.jpg)
I don't know — is that directory in the PATH? 
There is none, nothing, nada. Believe me, I looked. To be fair, I was trying to do something a bit more advanced (screenshots of actual windows), but as Raymond Chen put it in [his answer to my question on StackOverflow](http://stackoverflow.com/questions/9879534/how-does-one-get-a-handle-details-for-a-window-inside-rdp-window), "it's like trying to ask your LCD monitor for information about the foreground application". The best you can do is to get your hands dirty with PyWin32 and mstsc.exe, or whatever RDP tool you like to use, and get a screenshot through your desktop facilities. Basically the same approach /u/andrew_balls mentioned.
 carOne = Circle(Point(100, 200), 50) carOne.setFill("red") carOne.draw(win) carOne.undraw(win) time.sleep(0.1) while carOne is drawn move random.randrange (0, 600) I'm not sure if I'm getting it
You seem to be proposing a use case and rejecting the usefulness of this method for that use case. As it stands, this is far more useful than adding ad-hoc patterns of '%s' and '%r' in logging messages. It may even be possible to add a shell-injection filter as a cross-cutting concern, given that this provides a standard key-value API for logging.
&gt; Pickle is almost never the correct choice. If you can pickle something, you can unpickle it. The issue is probably the hardware/version (e.g. 32/64) of python changed.
&gt; Pickle is almost never the correct choice. If you would like risk execution of arbitrary code in the process space of your Python application, pickle is a good way to do that. From "DOC: Pickle is unsafe" https://github.com/zopefoundation/zodbpickle/issues/2 : &gt; From http://docs.python.org/2/library/pickle.html#pickle-python-object-serialization &gt; &gt; **Warning The pickle module is not intended to be secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.** With pickle, there is no data/code boundary. See: https://en.wikipedia.org/wiki/Separation_of_concerns
Any decent modern text editor. I use 64-bit Textpad. Granted you could do it with vi with 64 KB of RAM, but why?
jsonpickle is useful for many of the same use cases, though *datetime* support is not easy: https://github.com/jsonpickle/jsonpickle For many applications, the overhead of JSON-LD serialization is worth the extra time: http://json-ld.org/#developers [EDIT] A bit OT, but schema.org provides an already-developed (extensible) schema with URIs for JSON-LD attributes: http://schema.org/docs/full.html
It really should work. He could pickle it so it'll probably work in reverse. Really, he should have made 30 files. Taking two weeks to run without having incremental files was a mistake.
dont bother with that nonsense, lets just get this speed thing. &gt;random.randrange (0, 600) close, but not quite you want to store it in a variable. EDIT: how do we define a function, one that returns a number&gt;? 
moveCarOne = random.randrange (0, 600) to return a number you use 'return' or can use a print statement. maybe a get(X) or get(Y) Something tells me I'm way off 
The closest I've found is to use [FreeRDP's HTML5 web connect](https://github.com/FreeRDP/FreeRDP-WebConnect) and then use PhantomJS. This is what I do with the [webshot valkyrie](https://github.com/KvasirSecurity/Kvasir/blob/master/modules/skaldship/valkyries/webimaging.py) for Kvasir but I'll look at Ghost now, too. 
kinda far off, your solution moves a random direction each frame. we want a single random direction. return is correct though EDIT: just define a function that takes a maxspeed as input and returns a random number in that range
What information can't you get by running a remote command via SSH or whatever the Windows equivalent is?
Path? Is that like cd/downloads/foldername ?
no user input, but configuration input. Very close function, although the name doesn't describe what it does. That and that range doesnt include the ability to move backwards, IE there are no negative numbers. try calling it GetRandomSpeed() &gt;Hope this isn't too frustrating for you. As you can see I'm no Gosling. fuck no I am not, we were all new once.
def GetRandomSpeed(): return random.randrange (-600, 600) *I'm using 600 because it's both the width and length of the window. *I'm used to using x,y coordinates so I'm not too sure if this would work.
FUCK YEAH SUCCESS!! That function is exactly what I was trying to lead you to. Now replace 600 with a number you input. Which will be a configuration variable. and yes this will work in both x and y, you just need a separate variable for each direction.
hmmm. something like: def GetRandomSpeed(): return random.randrange (dx,dy) dx = (-600, 600) dy = (-600, 600) shit that wouldn't work. would the variable be a range?
yes the variable would be a range. so like def GetRandomSpeed( MaxSpeed ): blah blah blah
ahh so would MaxSpeed be a totally different function also? I haven't learned about functions accessing a different function. Might need to see how that's done in the book. somthing like: def getRandomspeed(maxSpeed): def maxSpeed(): return random.randrange (-600, 600)
Would an FM-index (e.g. bowtie) be fastest for read alignment? https://en.wikipedia.org/wiki/FM-index https://en.wikipedia.org/wiki/Bowtie_(sequence_analysis) http://bowtie-bio.sourceforge.net/index.shtml
nah maxspeed is just a variable near the top of the file after imports add maxspeed = 600 def getRandomspeed(maxSpeed): return random.randrange (-maxSpeed, maxSpeed) 
shit. I'm an idiot. Of course. I still have my def graphicWindow function. I guess I keep that for now. does maxSpeed = 600 need to be inside that function or can I set that variable outside of it. I know that function will change as I keep progressing. [What I have now](http://i.imgur.com/TEINHSe.png)
I need to do a while loop that states while the circles are moving continue to keep at the same pace until the circles collide or a circle hits the vertical or horizontal wall. When either of these things happens the circle(s) switch directions.
[something like this?](http://i.imgur.com/XtV95Ka.png) I need to define the X and Y. Probably don't need to undraw, but I can do something like carOne.move (-x, -y)
Not really more like while true: #move circles #draw circles #check for collisions 
it is late, and I would gladly continue tomorrow, but ill be up for another hour. You moved a lot around.
It also sits on top of some media transfer protocol and a few others, with each type of interaction having its own paper. The spec is out there and released from Microsoft themselves. The formal name of the protocol is called RDC. I found this: http://download.microsoft.com/download/9/5/E/95EF66AF-9026-4BB0-A41D-A4F81802D92C/[MS-RDSOD].pdf but it leads to other specs.
well thanks for the short deadline, luckily Its not too hard. focus on these [tasks](http://www.reddit.com/r/Python/comments/2jg0w1/moving_two_circles_in_random_directions_and_upon/clbe4gr) we have the window and are working on a simple loop. it should look like: main(): while true: do our stuff here!!! so your file should contain that, the imports, max speed, and our getrandomspeed function
What information are you going to get from screen shotting a server?
Some things should work, but that doesn't mean they should be used. I agree, splitting it up is the right idea. A pickle file for each record is usually what I do.
Yeah, at the LEAST! :P
The closest I have ever found to this in python is the following: https://gist.github.com/cetanu/9c9c7b0b339110680eb1 All I will say is good luck trying to rework that to connect and take a screenshot... If you get it going, let me know, because that would be very cool.
Try the hex(...) function. It should give you what you want.
This goes into parts of Python I never use, but you may want to look into redefining the `__repr__` method of the int class. Since it's a built-in primitive type that may not be possible, I dunno. Did you try searching SO yet?
 &gt;&gt;&gt; x=0xff &gt;&gt;&gt; x 255 So you're wanting to have Python display integer values as hex rather than as decimal, without using hex() and int(,16)? I haven't found anything that says that's possible, but I'll be curious to see what others say. Maybe you'd be happier with a plain calculator in hex mode rather than trying to change how Python displays integers by default.
I scoured the internets for this very thing 8 months ago. I ended up giving up and using a combination of rdesktop and xdotool to automate a few windows machines. It's hacky, and ugly, but it works. I would love to see a library with python bindings for doing this very thing.
Not possible as far as I know. (redefining attributes of builtins) 
I think it's here: https://github.com/rolandshoemaker/PyPiAP
It should have given you a URL to get Xquartz. If not, http://xquartz.macosforge.org/downloads/SL/XQuartz-2.7.7.dmg is what you want.
Replace [`sys.displayhook`](https://docs.python.org/3/library/sys.html#sys.displayhook): import builtins import sys old_displayhook = sys.displayhook def new_displayhook(value): if value is None: return # Set '_' to None to avoid recursion builtins._ = None if isinstance(value, int) and not isinstance(value, bool): text = hex(value) else: text = repr(value) try: sys.stdout.write(text) except UnicodeEncodeError: bytes = text.encode(sys.stdout.encoding, 'backslashreplace') if hasattr(sys.stdout, 'buffer'): sys.stdout.buffer.write(bytes) else: text = bytes.decode(sys.stdout.encoding, 'strict') sys.stdout.write(text) sys.stdout.write("\n") builtins._ = value sys.displayhook = new_displayhook Example: &gt;&gt;&gt; 0xff + 0xff 0x1fe Edit: Instead of assuming anything about what `sys.displayhook` does, just call it with a wrapper object: import sys class HexWrapper: def __init__(self, value): self.value = value def __repr__(self): return hex(self.value) old_displayhook = sys.displayhook def new_displayhook(value): if isinstance(value, int) and not isinstance(value, bool): value = HexWrapper(value) return old_displayhook(value) sys.displayhook = new_displayhook
I'd look into WinRM, or psexec in Poweshell, and look that route.
&gt; Since it's a built-in primitive type that may not be possible It's possible if you hack the interpreter using ctypes. The following code turn on the heaptype flag* for 'int': import ctypes address = 0 old_flags = int.__flags__ # Search the address of int's tp_flags for i in range(2048): if (ctypes.c_int32.from_address(id(int)+i).value == int.__flags__): address = id(int)+i break else: raise Exception("Address not found.") # Remove write protection ctypes.c_int32.from_address(address).value = int.__flags__ | (1&lt;&lt;9) def proxy_method(self): return hex(self) # Set proxy int.__repr__ = proxy_method int.__str__ = proxy_method # Restore write protection ctypes.c_int32.from_address(address).value = old_flags print(4, 3157, 89789, repr(0xFF), str(0xFF)) http://ideone.com/v5GRKD \* heaptype write protection: https://hg.python.org/cpython/file/7ee79c3d4f5f/Objects/typeobject.c#l2846 https://hg.python.org/cpython/file/7ee79c3d4f5f/Include/object.h#l608
Holy shit that is some wild stuff. I didn't realize you could just patch the interpreter heap dynamically like that with nothing but Python code, but I guess you can pretty much do anything with ctypes.
One gets hacked, the rest are. There's that security risk. I can't really think of a benefit other than convenience, and maybe allowing the different services to share data or communicate quickly and securely. Maybe if all the services depend on each other's data, then i'd see a point.
thanks! 댓글 감사합니다.
I thought this was very cool. Can I ask why you chose Kivy over pygame? Im just beginning to make games and Im trying to decide what is best.
I think mostly for the multitouch support, Android/iOS support. The hype around Kivy is high right now, so you will find the community more active and attractive/
Depending on what you need to do, you might also find the bitstring module useful.
Ah funny! I just used the same components to scale employee images uploaded to self service.
Use PyPy (no, I'm serious) [I would measure for you if you provided the input file]
I was actually addressing the parent commenter (who sai json and XML were suitable for everything, and didn't mention python at all), sorry. But that pretty much spot on, I haven't tried cap'n proto yet (we use VS in work so that's not happening) but it's definitely one I'm keeping an eye on!
that's very interesting from a number theory point of view. i wonder why even completely static pages these days want me to enable javascript. looks like a workaround against "frames are bad" to me, but that's even worse! (SSI anyone?)
Tip for formatting strings especially when you require more advanced formatting. print("Experimental value recorded as " + str(exp) +"\n") This can be rewritten as print("Experimental value recorded as {0} n\".format(exp)) `string.format()` allows you to do all sorts of interesting tricks, look it up. :)
Thank you for the non-intimidating intro to metaclasses
/r/incremental_games would be a good place to hang out. How hard was this to build?
Good job man. Looks really good.
I understand your arguments (I don't personally agree with them but that's not relevant) but let's face it, list comprehensions and generator expressions are almost certainly the Pythonic way to do things. I'd personally liked it if they just killed off `map()` in Python 3 but I know many who disagree.
I've made apps with kivy just not games looks like fun though.
Except that if your pickle is stored anywhere long term you are committing to keeping that object around in your code base forever. I suggest you watch this Pycon talk: https://www.youtube.com/watch?v=7eeEf_rAJds
&gt; I understand that the "explicit is better than implicit" mantra will dictate choosing the loop when you don't need the results and the list comprehension when you do. In my opinion, both of these are a big step back from map(function,iterable). I can't find the exact reasoning, but Guido changed this himself: http://svn.python.org/view?view=revision&amp;revision=56135 &gt; But forcing (formerly nonexistent) xmap itertools.imap.
About this line: q = input("To quit, type 'leave', if not, type 'stay'\n") print("Note that the single quotes are required, because Python is kind of stupid") Python isn't *kind of stupid*, but the parser needs to know when strings begin and end, and: 'To quit, type 'leave'...' Looks to the parser as if 'To quit, type ' is the first string followed by some characters that make no sense to it. You can rewrite it this way: q = input('To quit, type "leave", if not, type "stay"\n') q = input("""To quit, type "leave", if not, type "stay"\n""") 
thanks build is easy with buildozer android test ok
Have you come across the [cryptography](https://cryptography.io) library for python? Also the python3 `bytes` and `bytearray` types might be useful to you.
One of my Lectures always told me writing the code is &gt;10% of the work. Sitting down with a pencil and paper and planning out you entire projects e.g. classes, functions, variables etc. is the other 90%. Basically before you open a text editor you need to know exactly what your going to write. Saves time in the grand scheme. 
&gt; map or some kind of R-like apply function would be great. It'll not be called `map` because `map` function [is lazy in a lot of languages](http://stackoverflow.com/questions/2311528/clojure-apply-vs-map). Using it for side-effects (like in python2) is a hack and it's not really readable. You can define your own function that just returns a list but probably wrapping `map` in `list` is cleaner.
I want to make some android games and this is one of prototype It is my first try take 8days Its good working more then expected thanks 안드로이드 프로토타입을 만들기 편하드라구요, 첫 시도가 8일 걸렸네요, 제 주언어가 파이썬이기도 하구요
Just try not to go in blind, this usually leads to lots of changes and unnecessary headaches. Now I'm not saying for for the [Waterfall](http://en.wikipedia.org/wiki/Waterfall_model) approach but have some sort of plan in place check out [agile](http://en.wikipedia.org/wiki/Agile_software_development) Small planned iterations one at a time, seeking feedback and review after each, the project evolve into what you or the customer wants.
thank you 감사합니다ㅋ
You should never use `input` and you should always use `raw_input`. Also, /r/learnpython.
Thanks for the link. It seems that the distinction between "side effects" and return values is more canonical than I had imagined. I guess it simplifies things conceptually. However, I often find myself writing functions that graph data but also return the data that they graphed, e.g. in inspectable form. The paradigmatically correct solution would be to split the functions but that seems like a headache. I'll experiment with it and see how it goes.
Then OP wouldn't have had to have put a comment in explaining that someone should type their answer in quotes if they were using Python 3.
"Write one to throw away." Wise words. The *first* one often is a bit of a mess, as there were things you hadn't foreseen, and stories often grow in the telling. It comes out much better the second time. I suspect you're comparing your first one to other people's second or third one. Also, start writing tests. The nature of the exercise pushes you very strongly towards writing short and clean functions without too many side effects (i.e. easily testable). They're also bloody helpful when you need to refactor your code (which you usually do). 
There's nothing says you have to use classes ('cept Java). Sometimes they're handy to have, but C has done very well for itself without them. I suggest you read some more of that open source code you admire and see how the developers put things together. No renowned writer got to where they are by not reading books.
Your models will all be classes as well.
Slightly OT: I'd like a `consume(iterator)` or `iterator.consume()` functionality that consumes an iterator and throws away the results, written in C and properly optimized. Because that is what you actually want when you write `list(map(..., ...))` or `[f(x) for x in ...]` and don't use the list. Edit: consume = functools.partial(collections.deque, maxlen=0) 
i have no idea what's going on but that looks really cute :D
Hello, I feel very strongly that the book of Steve Mcconnell - Code Complete can help you. As bigtomygunn said you have to know and understand what you are going to do. Before write python code, describe program/script using pseudo-code (book describes such approach). If you are working on API, create a few user cases for you API to feel is it handy or not. 
That `displayhook` looks overly complicated. I'd just do import builtins import sys old_displayhook = sys.displayhook def new_displayhook(value): if isinstance(value, int) and not isinstance(value, bool): print(hex(value)) else: old_displayhook(value) sys.displayhook = new_displayhook Actually, maybe I'd even use `type(value) is int` for the type check; I don't really want to overload subclasses (eg `IntEnum`s).
Well done, thanks for sharing.
Thanks for the suggesstion - I ordered it right away
Wow that looks usefull I will totaly do this
This book is helping me to get cleaner code... https://www.packtpub.com/application-development/mastering-object-oriented-python
As it stands you are as smart as systemd creator (this is sarcasm). don't force feed a solution that can fail to people needing reliability. The use case I «propose» is the nominal case. On which planet are you living mr astronaut architect? And what the heck are you talking about shell injection in logs? Are you THAT clueless? and if you think of logging inputs that arrives AFTER a web page is served to detect vulnerabilities and then parse a truncated log to know if the KV are wrong you don't even understand causality, nor what a DOS by amplification means. 
Can you share the code for that? Looks interesting
Itertools lists this out explicitly as a recipe: def consume(iterator, n): "Advance the iterator n-steps ahead. If n is none, consume entirely." # Use functions that consume iterators at C speed. if n is None: # feed the entire iterator into a zero-length deque collections.deque(iterator, maxlen=0) else: # advance to the empty slice starting at position n next(islice(iterator, n, n), None) https://docs.python.org/3.4/library/itertools.html#itertools-recipes
You didn't mention the option that is the primary reason for the changes to `map`: for x in map(function, iterable): #use x This gets you your side effects, as well as the return values for processing. This way, even if iterable is HUGE, you aren't creating a huge temporary list in memory just to iterate over.
This might be a biased place to ask, but I am considering learning Kivy, but I am also interested in Unity. What should I put my time into? I know there is hype around Kivy but I think Unity would be more useful in the long run. I have experience with Pygame and limited experience with SDL, if that matters. 
I guess escaping works also, although it doesn't look very pretty. q = input("To quit, type \"leave\", if not, type \"stay\"\n")
I know they are not straight 1:1 alternatives, I just feel that I can only learn one right now. I would probably be doing the same types of things in either no matter which I picked. I want to make a 2D game that is cross platform, to be able to play it on either a PC or Android device. I know both can do that, but I don't know what is involved in learning and using either.
Practice, practice, practice. Same way people become good at writing books, composing music, or drawing.
It's somewhat ambiguous. The comment could refer to that particular python2 feature you mentioned, or it could refer to OP being unable to wrap the command words with double quotation marks without causing an error, hence OP would be complaining about having to wrap the words with single quotation marks in the input statement. Using brackets with print statement at least slightly hints towards python3, or at least towards an user learning python from python3 based tutorials.
is the overarching functionality of macros not doable in Python via Python metaprogramming?
Don't use pygame.
It is to some extent, as long as you are willing to use eval gratuitously. It's far harder to deal with/understand. A library that I like, fn.py, has parts of it's code running regexs on code strings to manipulate for use in eval. It's kinda like C++ templates vs C macros. You probably could get most of the functionality of templates with macros, but the code is quite obfuscated and difficult to use/understand. Also, in Hy, yield from very much becomes a language keyword, indistinguishable from other language keywords/builtins due to the way lisp is structured. With python metaprogramming, it would at best be a normal function, possibly without a friendly interface.
Either way, you still shouldn't be using `input` in Python 2.
&gt;Python 2 Python 3. &gt;or it could refer to OP being unable to wrap the command words with double quotation marks without causing an error, hence OP would be complaining about having to wrap the words with single quotation marks in the input statement Yes.
Thanks, I wasn't aware you could make mobile games in Python. Looks like I'll be looking into alternatives once I'm at the point where I can make a game. 
Welcome! You're on your way. Go grab yourself pylint, pep8, autopep and, if you want a great IDE PyCharm If you had used any of those - you would have caught the unused variable pretty quickly :) What I will suggest for your next python program - your functions should do only one thing then return. For example, I would have built my calculate function like this: def calculate(experimental, theoretical): """ Calculates &amp; returns the percentage error from the experimental and theoretical values. :param experimental: The Experimental Value :param theoretical: The Theoretical Value :return: Percent Error """ return ((experimental-theoretical)/theoretical)*100 ...and moved all of the "user interaction" to the main body of the program. That makes your program easier to change. or clone for different functionality. or grow for more features. 
PyCharm looks awesome, especially since I already use IntelliJ for all my Java and Rust work, so I'm used to that look. I'm currently using IDLE, and it's.. fine. I put all that user interaction into the calculate function so that it would be easier for me to loop it based on interaction in the question function. I definitely could've done this a much better and simpler way, but I just went with what I knew :)
I've always found it strange that people use Python classes even in relatively simple programs and scripts; I always have to remind myself of the syntax every once in a while because dictionaries, lists, tuples, and sets serve pretty much all my basic needs. There's obviously myriad use cases for them in larger applications, but Python's pre-packaged types are pretty expressive.
I doubt the del method will be called as long the class holds a reference to the object. you should probably use weakref here. 
It also wraps SDL1, SDL2 is *greatly* preferred -- the built-in drawing routines in SDL1 (which pygame uses extensively) are slow as molasses when you attempt to use them on a display with modern resolutions (&gt; 720p). You can use pygame to do modern OpenGL stuff, but in that case, you're better off to just use something more lightweight, since you are not exercising 99% of the code that pygame contains (yet bringing it along.)
The art is from /u/KenNL, (http://www.kenney.nl/) by the way. He makes lots of free assets that everyone can use.
Alrighty, you probably saw /u/vindolin's tips on workarounds.
That' a good point! You're definitely right.
learn how to write tests. that is definitely the first and most important step in improving the quality of your code. writing code that is easy to test usually also means writing code that is easy to reason about. that's good code, in my opinion. 
I strongly suspect AP Computer Science's use of Java has a lot to do with this.
classes are not intended to be a replacement for built in data structures (dictionaries, lists, etc.). they are intended to be a code organization pattern that facilitates re-usability. 
kinda neat, but definitely a bad idea in practice. nice example though. learned something new. 
My bad read that half asleep. 
http://legacy.python.org/dev/peps/pep-0020/ Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!
Really, it just takes lots of practice and willingness to revise your work. It's not much different from being a writer or musician. Write something. Submit it for [peer review](http://codereview.stackexchange.com/). Incorporate improvements. Repeat.
&gt;but definitely a bad idea in practice Yes, for example you can not do int()-&gt;str()-&gt;int() anymore int x = str(1234) # '0x4d2' int y = int(x) # ValueError: invalid literal for int() with base 10: '0x4d2' That's why the trick doesn't work with IPython (not sure).
Yes, but it's recommend to use package pattern and blueprints. You can read about it here: http://flask.pocoo.org/docs/0.10/patterns/packages/ If you're new in python flask webdev I recommend this tutorial too: https://github.com/mitsuhiko/flask/wiki/Large-app-how-to