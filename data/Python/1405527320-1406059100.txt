All green nodes are clickable and take you to algorithm's page.
In a tree an algorithm counldn't have two tags parents
Sure it can. Just duplicate the entry. The point is to understand the hierarchical characteristics of a given algo, to visualize its scope, role, and partners. It doesn't matter if its node is duplicated.
No, there is no documentation anywhere on how to do this. Kivy privide bindings to java though and can run on android, your app will be a bit on the large side though.
I've actually ended up just learning Java itself to develop apps. Its similarish to Python, at least enough to where I'm not overwhelmed now compared to years past I've tried. I wish I could use Python directly, but this is the next best thing.
Why you can use? site doesn't open? 
That's something completely different.
I can't click on anything on the home page... then I tried to browse through stuff but all the categories are empty; so I'm not exactly sure what to do to see the "stuff."
I highly recommend this, much cheaper;http://m.barnesandnoble.com/w/python-programming-for-the-absolute-beginner-michael-dawson/1100212232?cm_mmc=googlepla-_-textbook_instock_26to75_pt107-_-q000000633-_-9781435455009&amp;ean=9781435455009&amp;isbn=9781435455009&amp;r=1 
You can give a try to [wizpert](https://wizpert.com/)
Also: https://docs.djangoproject.com/en/dev/howto/deployment/fastcgi/#running-django-on-a-shared-hosting-provider-with-apache on using .htaccess files, if that's what you can do.
What exactly are you looking tutor for? If you just need occasional help with with your code or something you can try making a thread on /r/learnpython (and similar websites) or asking on IRC.
http://golang.org
Really, anything that you can get out of a tutor you can get online. As a programmer you will always be learning new aspects of the language you use, new frameworks and libraries also algorithms, math and ways of approaching problems and data. You really should learn to learn because that is what you are going to be doing on a regular basis as long as you program.
Handy resource. But for those that don't like the interface, there's always the classic [DADS](http://xlinux.nist.gov/dads/)
You could try [lynda.com](http://www.lynda.com/search?q=python). I'm going through their 'up and running with Python' course at the moment. 
&gt; I suppose I could put the plugins in a separate repo as well, I only ask because the Willie IRC bot guys do that. Python itself with the standard library is batteries included so including them seems more pythonic. I'm not aware of any spec (RFC, etc.) that's out there for writing plugins that would really put the argument on the side of having the plugins be a separate repo for consumption by others, unless you're making the functionality generic and then adding in hooks. It'd be worth it if other IRC bot people wanted to collaborate but beyond that it'd just be more code to write for not much benefit. Just kind of thinking out loud.
d *is* the distance to a vertex. Here is a diagram. http://i.imgur.com/UU03rVC.jpg
It's ok, it was a joke....
[here](http://pastebin.com/U68jDSG4)
Right, this is what I figured -- my question stemmed from the blocking I/O coming from extra large text files. Currently I use generators for this, however I don't think I'll be processing more than one file at a time per process so asyncio is probably unnecessary; unless I orchestrate the sub-processes and use the event loop for that purpose. Thank you! 
Don't limit yourself to a local tutor. How about using something like [Helpouts](https://helpouts.google.com/search?q=python)?
Don't go over too many tutorials, once you know basics you gain very little for the time invested in reading them. Go over lpthw and then start making things.
Good work. On a related note, I released Algorithm- Implementations last year, a Github based repo with a lot of great contributions so far. I also wrote web and Android apps to go along with it for public-facing viewing. http://github.com/kennyledet/algorithm-implementations
I'd value - no vendor lock-in - few or no technology lock-in - performance - as few as possible framework code , as much as possible libraries components (your code should not inherit from framework classes, it should instead be calling external libraries you could easily replace in the future) - scalability. Be wary of the microframework approach, which might seem very tempting at first, especially if you aim to scale - testability. Avoid database centric framework Ã -la Rails I think this (opinionated) long post gives a lot of food for thought http://docs.pylonsproject.org/projects/pyramid/en/1.3-branch/designdefense.html 
I do signal engineering, and there isn't a whole lot of crossover with ChemE, however there's always benefits to learning Python. Python is a great language for "I have a problem that needs a quick solution." Every field has that. You may be interested in numpy and scipy ( and their friends), which add an extra dimension. Between that and matplotlib, you have a very robust scientific computing language. Who needs Octave or Matlab? I would highly recommend it if you are planning on any research OR analysis-based career, or any type postgrad work.
IME, I find the first thing to do is ask yourself about who is going to maintain it. If it is likely the same people who built it will be maintaining it in 5+yrs then it hardly matters what you choose. If it's almost certainly going to be mostly fresh eyes after a few years, then using tools/frameworks that are more "popular" like django, flask, web2py, or pyramid are a great choices as there is lest to grok when getting acquainted. I have done some django, some web2py, and am starting some flask now. I chose django because that project was going to have very normalized data and I knew django's ORM would likely be more of a benefit than a drag. Also this site had to do a lot of user input so djnagos forms were pretty great. I don't like how django does routing however so if the project grew much more I would be itching to look at something better. Also I had someone to help with design/CSS so I could stick to backend stuff. For my web2py projects I have been the sole "full stack" dev on the project. Fortunately these internal apps didn't require more than the default bootstrap themes. I chose web2py because it helps me be efficient as a one man shop. With literally everything you could possibly need to get started already built in, it's a great one stop shop. Also its structure is easy to understand and well documented. However, due to its slow pace in dev, it seems to be stuck on python 2.7 for the foreseeable future. The flask project I am embarking on now is going to be a REST API to force several apps to stop talking directly to the database. I chose flask because I wanted to implement a plugin system to add arbitrary endpoints. This way I could extend/add new endpoints just by dropping new modules into the plugin directory. Also flask doesn't bundle a bunch of BS stuff I won't use for a rest API (with the exception of templates however I may see a use for that if I end up returning HTML as well as JSON). Also the lack of an ORM is great. I will use SQLAlchemy core to provide functional query generation but I will mostly skip the automatic object hydration. So each one has its strengths and weakness, its just going to depend on what kind of application you want to build and how your data will look. If you want *all the choices* made up front and have very limited number of developers, web2py. If you want some choices made up front, but enough flexibility for normalized data (this is key, is your data easily normalized or will you have lots of empty columns in each row?) and can delegate tasks to different people then django is an excellent choice. If you want to build a small tight core, have strange/denomalized/nosql/insert exotic storage engine here... and want to have flexibility at every level, often rolling your own solutions, flask is the winner. **tl;dr** What kind of app are you building, how many people do you have to work on it, and what does your data look like? 
what exactly are you using Artoo for? I looked at the project page and it looked similar to [ROS](http://www.ros.org/) which i have used and has full python support.
I think our data will not be very normalized. So judging be your emphasis on that point (and by your other comments) I am inclining towards web2py. ANyways, thanks for that great response. I appreciate it and I hope others with the same dilemma can read it and take advantage of it as well.
I think there isn't. /u/fabioz would know though.
I honestly love web2py in the "enterprise" environment. Easy to upgrade, easy to deploy, easy to extend. Good luck and if you have any questions feel free to PM me and I'll try to help.
Not a ChemE, but programming, in general, is a useful skill in any engineering/scientific field. In the job market, this could be something to set you apart from other applicants with similar background. The real question is: Is Python a good language for you to start out with? I won't list off all of the selling points of Python, you can find that in dozens of other posts and plastered all over the interwebs. But if you really want to know what languages would be most useful in your field, ask your professors or other professionals you may know. If it is the case that the language of choice is LabView or Matlab, I would suggest you try to learn some other language at some point just because those are both commercial products with (potentially) very expensive licenses. Python, C, C++, or even Java are all good alternatives. Of these, Python will probably be the easiest to learn. These are also all languages that are free to use and have lots and lots of users, which means there are lots and lots of resources online. 
No, absolutely not. Python is not capable of this behavior. Transfering files is hard but possible, but saving them to a locale store isnt... no. Since you are learning it for months now, you should know this.
Without looking to far into it: http://stackoverflow.com/questions/11573817/how-to-download-a-file-via-ftp-with-python-ftplib and http://stackoverflow.com/questions/19476232/save-file-dialog-in-tkinter may help you out 
https://github.com/JonnoFTW/TwatBot2
[Jeff Knupp Python Videos](https://www.youtube.com/channel/UC8jQsBz_w948kSc7ehMRGmQ) [Neckbeard Republic](http://www.neckbeardrepublic.com/) 
The way I've looked at it since I started developing with asyncio is that if I'm not using anything from the import beyond the event loop itself or sync primitives, there's no real reason to use it.
[FTP is super easy with this lib](https://pypi.python.org/pypi/ftpretty) &gt; is there a way for python connect to an FTP server, download a file, and me to select a location to save the file To do this, a simple flow would be * Go to web page * Pick where you want to download the file on the server through whatever UI * Connect to FTP and download there if you want to download it locally * Go to web page * It connects the FTP and downloads the file * It returns a link, something like NGINX can download the static file OR just serve it straight from python (usually a bad idea) 
I would but PyCharm has won me over. 
Um? https://www.dlitz.net/software/pycrypto/doc/#crypto-cipher-encryption-algorithms
I dunno. ;)
asyncio is more useful when it comes to networking (web servers...). generators are fine
This series is amazing, if only for the challenges. 
I have saved the thread as I'm interested to hear Massimo's opinion on this. 
Web2py is great for prototyping, or for pounding something out that won't haunt you with years of maintenance. Stay away if you are writing code that will grow beyond a form-fill type site. My personal gripes: - it messes with import in subtle ways that'll bite you - the database layer is fine if you are creating a db from scratch. - it's painful to do any kind of restful interfaces. It's as easy as it gets for simple protoypes. Anything else and you'll soon be swimming upstream.
I personally love using this framework. Its easily the fastest to implement things type of framework that i've used. My only frustrations come from how the documentation is laid out, its supposed to be setup like a book but it just makes it hard to find out how to do something.
It's a practical beginners book - not an in-depth tutorial.
1) How active are the developers? 2) How active is the community? 3) How much X is there from 3rd parties? Where X is support, plugins/addons, tool dev, etc. If you're in the python realm and you're asking these questions, Django will give the highest aggregate answer to these questions. BUT that's not to say that Pyramid, Flask, et.al. are *worse*. There's plenty of support, documentation, etc for the top 5 python frameworks. 
It's called computer *science* for a reason. Benchmark it and report the results.
It is true that web2py messes up with the import mechanism but it does it for a reason. web2py is the only framework that allows different applications to coexist under one process. Different applications may be written by different people, not designed to work together, and may have conflicting libraries or different versions of the same library. Web2py allows hot plug and play of these applications with any web server. The custom import allows this to work. The side effects are really minimal compared with the benefits in our opinion. I am not sure what you mean about dal and restful services. Could you tell us more? By the way, if you are interested in restful API you may be interested in this: https://groups.google.com/forum/#!topic/web2py/WN9yzLIfi6M web2py it provides customizable hypermedia restful API, automatically generated from the dal models. You can choose which models to expose, which models to expose, which methods, filter data, and the JSON is self-documented based on the Collection-JSON specs. 
Web2py is designed to be portable. This is a priority for us. It is used in industrial robots. It is used in various types of appliances. It is used on the Raspberry PI. In order to be portable we make sure that every library required for its operation and described in the manual is present in the distribution in pure pyhton form. If it finds an equivalent binary library it will use it otherwise will fall back to the pure python one. We did not write our own encryption libraries. In fact we rely on python-ssl for almost everything. We ship with a pure python implementation of AES encryption (we did not write it, we took it, we did not modify it, we tested it, and we acknowledge the author) because we need it for one single purpose: to encrypt sessions in cookies. Note that web2py does not default to sessions in cookies and we do not recommend it either. We recommend storing sessions in files or in database. yet a few users have requested the ability to store sessions in cookies and we provide them. Unlike other frameworks that provide them un-encrypted by default (opening the door to all kind of vulnerabilities) we provide them encrypted by default using EAS. If the user has not installed an encryption library we fallback to the module that has been mentioned. 
PyCharm uses at least the remote debugging module from PyDev, IIRC.
What are you most experienced with? What have your devs worked with already? How big does this web app need to scale? Not that one of them can't do that, but how would you plan on scaling it if you chose one or the other and what seems more doable? Do you want to use Django's ORM or sqlalchemy with flask? How are you planning to incorporate a database if you are? Honestly, I'd go for whichever seems the simplest and most straightforward to do how you know, and that's going to be different for everyone. Don't overcomplicate your setup. Don't worry about handling thousands of requests per second unless you expect it someday. Look up tutorials for either approach and see which seems the most reasonable. Keep It Simple, Stupid. Don't pick something that makes you do crazy mental gymnastics when you try to come up with a plan. Pick what seems easy to do, even if it may sound boring. Boring can be good, as long as it's not tedious.
1) that is the default behavior. You can change the order in which they are imported by providing a list. In fact you can also conditionally run models based on the controller and action. 2) Controllers in web2py are not python modules (although they use the python syntax). Controllers are designed to contain actions not arbitrary functions. If you have python functions that are not actions they do not belong to controllers but they belong in a module which you can import where you need (for example in a controller). I can see why one would get confused coming from Django or Flask where you can put everything in one file. In web2py you are required to be tidy. controllers/.py contain actions. Everything else goes in modules/.py 3) Web2py has been tested with these servers: apache, nginx, bjoern, cgi, cherrypy, diesel, eventlet, fapws, flup, gevent, gunicorn, mongrel2, motor, paste, pulsar, rocket, tornado, twisted, wsgiref. It is based on WSGI (it was based on WSGI since 2007 when Django was still mod_python) therefore you can do more or less what you want with any WSGI server. Most web2py modules (the dal, the template, the helpers, the forms) are designed with work with any framework (although we do not ship them as separate models) and web2py can use any third party Python library (including components from other frameworks when those are made to be portable). 4) I answered there. EDIT: spelling
tl;dr: Too much magic. web2py is in the "omg I made an entire site with three clicks of a button!" category that looks really impressive in demos and tutorials. Unfortunately, since it's 90% magic, you'll find yourself fighting it as soon as you want to do something the framework wasn't designed for. And since you'll have less understanding of how it works because it's been doing everything so magically, you'll really be up a creek. I'd suggest the route that's slightly harder up front, but easier to maintain in the long run. I'd recommend flask/tornado etc microframeworks. You can understand the entire thing really easy, and there's no nasty surprises when you need to change things later. Edit: you know what? I'm kinda talking out of my ass here. I haven't used web2py in a long time, and while I have a general bias against large integrated frameworks, I'm not qualified to pass judgement on web2py due to lack of familiarity.
I up-voted you! yes there is lots of "magic" in web2py where to me "magic" means that web2py does lot more for you than other frameworks too. Actually I have been amazed by how slow other frameworks have been to catch up and boy they have tried. ;-) I disagree with your last statement. In fact I believe the opposite: The more the user app delegates to the framework, the easier it is to maintain. Not the other way around. For example I do not read the source code of the python interpreter and I do not need to understand that to use Python. Python lists and dictionaries may be "magic" to me but they are useful and make my code neat. Some frameworks are easy to read because they do very very little compared to web2py. For those are looking for something very basic that works I would then recommend bottle.py. It is a fantastic micro-framework. In fact I have myself been experimenting with bottle.py + web2py's dal.py + everything else client side.
You have a good point. I think in general though, I've seen too much leaky abstraction in web frameworks that do too much. That goes for Rails/Django etc. Maybe someone will come up with as clean an abstraction for web frameworks that won't end up making the 80 easy at the cost of making the 20 impossible, but I haven't seen it yet. Specifically, dictionaries, lists etc are simple, their behavior is modelable mathematically, there aren't any corner cases to trip you up. Web frameworks have so many moving parts it's hard to see how all of it could work smoothly together without the developer needing to know how it works underneath. That being said, assuming you're the creator of web2py, I have to say it's a large accomplishment. It may not be my preference now that I have more experience, but it did help me build a SOAP application in a day back when I was first starting.
Your comment gives the impression web2py is a point and click framework. It is not. web2py has a web based IDE but its use is optional. I use emacs and so do most experience developers. web2py applications are a set of files very much like Django or Flask and they are developed in the manner, whether or not one uses the web based IDE. The "magic" of web2py comes from the expressiveness of its commands: # MODEL db.define_table('thing',Field('name'),auth.signature) # CONTROLLER @auth.requires_login() def index(): return {'grid': SQLFORM.grid(db.thing)} # VIEW {{extend 'layout.html'}} &lt;h1&gt;Manage interface for my things&lt;/h1&gt; {{=grid}} We do have a tool that automatically generates code but nobody uses that and I believe it should be deprecated.
I actually thought about making a video or two an putting them on youtube the other day. But I'm worried that the audience would be very limited and my videos would get buried. I'm not particulary good either, just randomly mocking about and testing diffrent ways of programming usually.
Edited my original comment.
Try [SublimeREPL](https://github.com/wuub/SublimeREPL).
yes, i tried it, but it only opens a new tab whith the python interpreter... i want to be able to run my script INTO sublime, like any other script without raw_input
Code formatting still seems messed up. Also wildcard imports are generally considered poor style by [pep8](http://legacy.python.org/dev/peps/pep-0008/#imports).
Was it written by a Django or a Flask developer?
Yes, I started the project and named it, but we have many contributors right now.
I am glad to say you used web2py to deal with millions of users. Which company is this? Could you substantiate your claims? Could you point to one or two vulnerabilities in Django that was also found in web2py and that was patched after Django's? Or could you point us to any known un-patched vulnerability in web2py? My experience is the opposite. For example web2py had CSRF protection since 2007 by default, Django introduced it after, it was optional, then it was still broken until 1.2 in 2010 http://www.securityfocus.com/bid/43116/info. Here is another CSRF issue again in 2013 (https://groups.google.com/forum/#!searchin/web2py/Subject$3A$20%5Bweb2py%5D$20Re$3A$20Security$20advisory$3A$20BREACH$20and$20Django/web2py/Uzp_rY0Kx9g/P_WNiekbJdUJ) Django was not randomizing CSRF tokens until then and we were doing it already. This is not to say that web2py did not have its own fair share of vulnerabilities but it is not true they were the same as Django's and it is not true they were patched after Django's. The vulnerabilities we had were usually about features that have no Django equivalent. For example until recently we were not randomizing CSRF token in forms that have the detect_record_change=True property. This is when two users try to edit the same record at the same time and we want to notify them by preventing them from overwriting each other's edits. We fixed in less than 24hrs. Django, to my knowledge, does not provide this functionality to my knowledge. Anyway, this feature is off by default and very few people use it, therefore the vulnerability was not affecting most users. Django does a much better job at reporting this kind of problems and keeps better records. Kudos to Django for this. EDIT. To partially answer my own question. Here is a vulnerability which we shared with Django: http://threatpost.com/patches-for-django-framework-fix-dos-vulnerability It was reported on 14 Sep 2013. They fixed in Sep 2013 (CVE-2013-1443). We use the same algorithm and we fixed the day after it was reported in Django, on 15 Sep 2013 (https://github.com/web2py/web2py/commit/4556a355a29a30ba634e9468245c559c5754e2c5). 
To execute file with sublimerepl go to `Tools &gt; SublimeREPL &gt; Python &gt; Python RUN current file` or create new build: `Tools &gt; Build System &gt; New build system` enter: { "target": "run_existing_window_command", "id": "repl_python_run", "file": "config/Python/Main.sublime-menu" } You can now change your build system to whatever you named it when saving and pressing `CTRL + B` will execute the current file in SublimeREPL tab with stdin working.
WTF, it uses exec? Why on earth would it do that? You only use exec for dynamically generated or user-provided code, neither of which are stellar ideas on a web service!
Thanks for that constructive and detailed opinion, really contributed to the discussion here.
Very slow Python3 support turned me off initially, and since then I've played with bottle and later flask, and never looked back. Flask is just as quick to develop with, and appears to scale better. Plus; someone in this thread tells me that web2py uses a lot of `exec` calls. This discomfits me greatly.
AFAIK SublimeText's console doesn't support input.
Thank you for sharing your teaching experience with us! The whole Python community can profit from such best practices. Maybe you could use [Docker](https://www.docker.com) to speed up the setup. Everyone would just install Docker and the prepared container which already has all needed packages installed. Plus the container can later get deployed in the wild. It's a bit hard to install on Windows and I don't know whether you can put everything on and install from a USB drive, but that would be the way to make sure everyone has the same setup. A solution I [recently came across](http://www.oscon.com/oscon2014/public/schedule/detail/34873#requirements) is to use VagrantVM for this. It means larger files than Docker, but maybe it is easier to set up.
Lots of misinformation has been spread on this thread. There are things web2py is for and things it is not. Web2py is great for prototyping and for writing structured web applications that follow good practice. web2py apps are easy to maintain because we kept our promise of backward compatibility since 2007 and because it does not have external dependences. web2py helps in creating default forms and , if you do not like them, you can customize them at the form level, widget level, or html level. Web2py handle all security issues by the book but does not allow you to switch some features off. For example web2py checks if you have a valid session token and tries retrieve the corresponding session. You cannot switch this off. This means if you need a controller that does not access db, does not uses session, and perhaps only relies on ram cached content, then other frameworks are faster. I would argue that in this case you do not need a framework. web2py is definitively not an async framework (although it can be used with async servers) and that means you would not use it to build a chat line. It ships with a module that let you use tornado along with web2py to handle websockets but that is definitively an afterthought. If you need to keep open many websockets than you should look into tornado or gevent or the new python 3.4 features. web2py scales using the same mechanism that most frameworks use: horizontally, behind a load balancer. web2py has a DAL, not and ORM. This means that it abstracts the SQL generation but does not get in the way of the SQL (we had supports for left joins and aggregates years before Django did and we still do it better; Django makes it easer to deal with certain types of many2many relations but it constraints you more). The web2py DAL works out of the box with MongoDB and the Google Datastore. This is another unique feature. The web based IDE is more for newbies than for experienced users but unfortunately it is the first thing that people see and some love it and some hate it. The web IDE IS NOT WEB2PY. That is just one of the applications it ships with. 
There is never enough videos on youtube! Make them specialized or work on good tagging. Overtime you'll probably save a couple of hours to someone in need! I cannot count the number of videos with less than 200 views that actually offered me some great piece of advice from people that were not pros nor very good at making videos. If you think about making videos do them, don't think about the audience you cannot predict how it will react anyway...
thanks, it works :) i just moved from pycharm to sublime...
TLTR. web2py calls the interpreter inside the interpreter to allow multiple concurrent apps to run without interfere with each other and reflect changes to the source immediately. This is why people like it. This is another point of contention. exec is a python command and it is there for a reason. It can be used and abused. web2py does not exec any input coming from the user of a web application. That would be an abuse and may be a vulnerability. web2py execs models and controllers as an alternative to import because models and controllers in web2py are not python modules although they use the python syntax. They allow 19 symbols that are not python keywords nor they are imported. The exec command allows web2py to involve the interpreter without the need to create our own and allows us to be sure we are compliant with Python syntax. Why are models and controllers not Python modules you may ask? To allow concurrent independent apps to run under one web2py (a unique web2py feature) and avoid reloading apps when modules change (something other frameworks do which is equally bad and does not work as well with production web servers). This enables hot plug and play of applications and plugins using the web interface, in production, without having ever to restart the server. Exec is a python command for a reason. Not using on religious ground is a mistake as much as abusing it. If one does not ever need to invoke the interpreter explicitly, one may as well program in a compiled language instead. EDIT: if you look in the Python libs/*.py files you will find that many python modules use eval/exec/execfile so chances are you are using it too. You just do not know about it.
I am using web2py since a few months and I like it a lot. It follows a very user-friendly approach. Compared to django, which I tried too, I was able to realize a lot more. I guess r/web2py is not used because the place to discuss and ask questions is this google group: https://groups.google.com/forum/#!forum/web2py That group is quite active and people take time to answer and find solution to most problems. It makes sense to keep it at a central place. I am looking forward for new great stuff based on the web2py approach. 
Tools don't champion themselves, people do. Who will carry the flag for the framework you choose? That will make the difference. 
Thanks :) I'm gonna try it. Just to learn how it's done, and alot of the times explaining something makes one understand it better after aswell.
Mentions bitcoin at the bottom.
I'm saying there isn't a way to **make** st console support input. 
Django (based on the other application I inherited) but I think it was a skill thing in general. In the code base you can see amature to novice growth in the way constructs are done in the later code. My biggest issue with it is just the way it obscurs everything, it allows you to do a bunch of stuff in terrible terrible ways, which then provides a platform for trying to do those elsewhere. I particularly dislike the way the build in ORM works.
&gt; 773 downloads in the last day Funny how an empty package can have seven versions. 
&gt; web2py is the only framework that allows different applications to coexist under one process. That is simply wrong.
Django: class Entry(models.Model): headline = models.CharField() entry = Entry.objects.filter(headline__startswith="What").order_by('headline')[0] Web2py: db.define_table('Entry', Field('headline')) entry = db(db.Entry.headline.startwith('What')).select(orderby=db.Entry.headline)[0] where is Django doing the query? in web2py (..).select(..) -&gt; SQL SELECT! `headline__startswith` c'mon. It is 2014. what if you have a column called `headline__startswith`? In web2py the table name does not pollute the namespace.
...and that's why apt-get prompts users to confirm changes before it starts downloading packages.
This is semantics. For me an application is something that has its own set of modules, its own databases, its own sessions. What I call "application" in web2py is what you call a "project" in Django. What I call a "plugin" in web2py, is what you call an "application" in Django. In Django applications can coexist but they share the settings.py file therefore they share sessions and database. If two applications in Django do "import x" they mean the same "x" because they share the same sys.path. In web2py When they do "import x" they may mean different x.py in different locations. I have 100's of web applications developed at different times using different databases, different modules, different sessions, different authentication mechanisms, etc. and they all run one web2py instance. They share nothing unless I want to. 
I have been using it for a long time. What people here call "magic" I call - a very good example of "convention over configuration". It saves you a ton of time once you know what web2py's standard behavior is. That behavior is very well documented in the freely available online book, so the only reason anyone can complain is that they're so retarded they haven't read the first 4 chapters of the book before starting to mess with a web2py's application code. Thank you Massimo and the rest of the team - it's an absolute joy. 
&gt; This enables hot plug and play of applications and plugins using the web interface, in production, without having ever to restart the server. I don't understand this point. If you're using a web server at the scale where you need to worry about downtime, wouldn't you be able to use a reverse proxy instead? What real-world benefit does the "hot plug and play of applications and plugins" get you? Implementing a new import system and changing the language of the .py files to "not python" (but with "python syntax") seems like a pretty heavy-handed move for a few seconds of downtime on one of your backend instances. I think there are also other ways to do this with pure python, but I'm not sure how it would normally be done. And if you're learning it as a student, you'd want "real python" instead of another language that's very very python-like (enough to get run through exec), but not quite python. Based on your other comments, I'm sure you have a good reason, but this one has always baffled me. 
I use it. Main benefits: * Really easy to learn * Very fast for developing something quickly in only a few lines of code * Has a lot of built in defaults that allow you to do stuff with minimal boilerplate * Lots of built in security * Modular. You don't have to use the bits you don't want to. * Great for picking up new concepts - everything seems to have an implementation in web2py * The DAL is really simple and in one file so you can just import it and use the same interface for any script/application outside of web2py * Use of python as the template language - brilliant. * Fast response from the community to questions and bugs get fixed fast. Some downsides: * I wonder why it is not used more widely. Perhaps there is a problem I am not aware of? I have no experience of using it at scale but it looks just as scaleable as other frameworks. * Not sure about the automatic execution of models. If you have lots of models it can be hard to see where stuff has come from. * No python3 version
Actually you are right. For an experienced developer this a minor benefit but, in my experience, for a new developer working on a new app this saves lots of time. Also it allows me to have multiple apps under under web2py each with its own modules, session, databases, etc. and they do not step on each other's toes. Actually I would love to find an alternative way to accomplish the same without exec and custom import but so far I have not found one and I am happy to hear about alternatives. 
When you start web2py you start web2py.py. It then finds the applications in subfolders and execs them. Not one line to edit. In Flask, it is your application that "import flask; ... app.run()". So if I have two applications that "import flask;...app.run()" you must merge them and then they become one application. For example: #app1.py from flask import Flask app = Flask(__name__) @app.route('/') def hello_world(): return 'Hello World!' if __name__ == '__main__': app.run() #app2.py from flask import Flask app = Flask(__name__) @app.route('/') def hello_mars(): return 'Hello Mars!' if __name__ == '__main__': app.run() How do you merge them? You have to edit the code and do something like: #app3.py from flask import Flask app = Flask(__name__) @app.route('/world') def hello_world(): return 'Hello World!' @app.route('/mars') def hello_mars(): return 'Hello Mars!' if __name__ == '__main__': app.run() In web2py there is nothing like this. You do not have to edit any file to host two apps under one instance. The "import web2py;... app.run()" is not part of the applications. I will agree that in the end you can achieve the same final result with any framework. The difference how much work you need to do to get there. I guess you could have one flask app that periodically inspects subfolders and when it finds changes reload the modules and updates the routes and exposes new actions, etc. unloading loaded modules would be more complicated but can be done too. It isn't obvious to me that module reloading is better then exec and that it would work on non-pythonic web servers. 
Next time leave some informative reasons why it in particular gave you a hard time at work and I'd be happy to upvote you instead.
I use it at work for a few projects where I am the sole Dev. I have found it to be a boon to my productivity because of how quick and easy it is to get reacquainted with an old app and extend/upgrade it. Built is ide is nice too. Also the community is helpful and receptive to fixes (speaking from experience). In addition, much of the source is very well documented and easy to read. The DAL is much better than djangos ORM IMO. I am not a fan of ORMs most if the time however. The AD authentication works great out of the box. The authorization (group membership) however is not implemented last time I checked. I thought about spending some time implementing it but I haven't had the need. That being said, my next project will be in flask. I like the idea of bundling less since I am building an API rather than a full site. Also I want to play with SQLAlchemy core. 
I am not sure how that compares with the web2py plug and play model but I will look into it. Thanks for the pointer.
A couple years ago, I had a python guy who taught at NYU do an AMA. "David B" He had also worked at Google, where he had to teach seminars. You might look up his AMA and find some answers. 
No problem :)
What is really needed is prebuilt wheels on PyPI. There's no need for eggs or having each developer build it with setuptools. I've gotten a wheel built for 64bit Windows. You can find the scripts and a couple of patches on github: https://github.com/alangibson/subversion-windows-64bit I found that building subversion itself is the real challenge, which explains the lack of prebuilt packages. I'm alking pysvn's maintainer about building wheels for all the important platforms, so hopefully that will happen soon.
I used LPTHW to get into Python and later I did CodeAcademy's Python track out of interest and I enjoyed both. Both are very good at teaching you the basics of the language in my opinion so you'll do fine picking either one (or both). I'd say CodeAcademy is the more comfortable learning resource because of it's interactive approach.
Are you on mobile? It looked fine on desktop when I posted it but can check again. Also didn't know that I'll fix that. The one import from Dependencies is a library written by me so I am using everything in it unless its still bad style?
Personally I would use a framework delevoped around it. If this is a network issue then Twisted very well might work, otherwise I am not sure what to suggest.
And why asyncio itself, why not selectors, for example? https://docs.python.org/3/library/selectors.html
They should do one for "requirements.txt". God knows how many times I missed the -r flag.
asyncio being quite new is a bit short on great tutorials. Async stuff in general can be quite difficult to wrap your head around (the Javascript Uncertainty Principal - you can either know when something will run or where it will run, but not both) You really need to think what you are trying to achieve - async won't magically make anything faster! If you need you program to stay responsive while processing asyncio is one option, others include threads, processes, and task queues (like celery). If you want to increase performance or reduce RAM use you might also look at selectors, file chunking+streaming, mapreduce style frameworks, etc. If you are mostly interested in learning async in python then good luck - maybe write a good tutorial once you've figured it out :D
&gt; Oh yeah and also there are hardly any answers on stack overflow about web2py, you have to dig in the code a LOT to debug. Most web2py questions are asked and answered on the [web2py Google Group](https://groups.google.com/forum/#!forum/web2py), which has about 10 times as much activity as the Stack Overflow web2py tag. If you compare to Flask, the web2py Google Group plus SO has about twice as much activity as the Flask mailing list plus SO. No doubt, the web2py community is smaller than that of Django, but it is nevertheless a very active (and friendly) community, and questions do get answered, typically quite rapidly. I would also note that web2py has a similar rate of opening and closing issues as Flask (Django has much higher rates). So, there is enough production usage to identify bugs and feature needs as well as enough developer talent to address those issues. web2py has thousands of users and has consistently had very active development by dozens of contributors.
&gt; I use emacs and so do most experience developers What? No, we use Vim. ;) Thanks for all your answers here!
http://showmedo.com/ - I'm a past co-founder (but haven't been involved for several years), we made 100s of open src Python videos over a number of years. Includes starting with Python 2.7, IPython, basic website building etc.
Vim vs emacs. Wrong thread. This is Flask vs web2py. ;-)
There was P3 port started at some point. I think it is stale at this point.
After much research, I've found a solution to do this. Lookup the module "pysftp". This module requires Pycrypto and Paramiko modules to be installed first. The way it works is this: import pysftp s = pysftp.Connection([hostname/ip], [username], [password]) remote_path = [Path to file on sftp server] local_path = [Where you would like to save on local computer] s.get(remote, local) s.close() #You're welcome.
Would you say web2py is better for intranet vs Internet web applications?
&gt; I think there are also other ways to do this with pure python... &gt; And if you're learning it as a student, you'd want "real python" instead of another language that's very very python-like (enough to get run through exec), but not quite python. If it's "enough to get run through exec," then it is "pure Python." It appears you are attempting to marginalize web2py via linguistic trickery. The web2py framework is pure Python, as is the application code. Even if it weren't, though, that would hardly be a principled argument against it (unless you believe that "real Python" has somehow achieved perfection as a language).
I didn't say I liked Django either. I dislike Django more. I am a Flask fanboy.
Seems a great project to back if you use this with any django projects. 
and sudo so that it can bork your whole system. Jokes aside, I think the idea is that you should re-read everything carefully when specifying `-y` or prepending with `sudo`. 
I used this once a few years ago and liked it but since then it's gotten so complex that I've started doing REST myself, which it turns out isn't that hard and forces you to learn more about what's happening. Is there a tier for removing features? Setting up the subset of features I need on a given project has gotten easier than navigating through a complex framework with its own layer of (changing) proprietary abstractions and wrappers.
Nice, backed! I love kickstarter for open source. Much better than just paypal donations. You have an exact goal laid out in front of you, and tasks are prioritized based on donation amounts. I hope this trend continues and that people keep backing the projects they use.
The design's very modular yeah, so you can use as much or as little of it as you want. I do dig that the docs appear intimidating in scope at first, but at it's simplest you can just write regular function based views. @api_view(['GET']) def hello_world(request): return Response({"message": "Hello, world!"}) Then if you need more you can move into the class based views, add the various authentication, permissioning or filtering options, use the serializers for validation and so on.
Have a look at [this MIT](https://www.edx.org/course/mitx/mitx-6-00-1x-introduction-computer-1841#.U8fpoI1_tfs) course at Edx.org. The course has started, so you won't be able to deliver all the exercises, but you can still watch all the lectures.
apt-get doesn't install local packages (you have to use dpkg), so it would never have this problem to begin with.
By definition, local packages don't need to be downloaded. And dpkg doesn't handle package downloads. That's what tools such as apt-get is for. Taken from dpkg's man page: &gt; Note that this will not actually install or remove anything, but just set the selection state on the requested packages. **You will need some other application to actually download and install the requested packages. For example, run apt-get dselect-upgrade.**
I think this is actually a good question, a lot has been asked about web2py vs django, or any other frameworks out there, but this is a good one, and maybe would be awesome to read what @mdipierro has to say to: what do you think web2py lacks of?. To go with the original question, I must say that it's been four years now that I'm using this awesome framework, still question myself why didn't before!. Came from Django, TG, TG2, flask... Anyway, as a web app developer you have all you need from web2py, like forms, which are easy to manipulate, views, with python embedded it's super cool to write them!, models and queries, that are graciously simplified by dal. The framework itself plays really well with third party python modules, javascript libraries and frameworks, even css frameworks!. No problem with services what so ever. I've read people who agues that they tried to read someones code with no success, complaining it's legibility, but... that's not a framework issue, is more a developer fault not to write good, organized, clean, commented code... The only problem I ever had, was trying to set up apache with wsgi in a very old centos version... yeah, I know, shame on me... but hey!, I'm not a sys admin, still got it working after tweaking and pulling my hair off... Not framework fault, but mine. Only thing left to improve I think would be write the styling system in a way to be more flexible with other css frameworks besides bootstrap... My 2 cents.
lol fine! Be that way. :D
Probably updating the readme to make it more obvious.
Thanks Nerkles!! Much appreciated.
In a good way though! :)
I feel differently. But just the same, it's all the more reason to automate your provisioning and deployment processes.
Weird that you're letting management dictate tech. What benchmarks are you using? I'd love to do a comparison. We're using Tornado 3.2 heavily here. 
Hi, Mahdi from Neckbeard Republic. We have over 30 screencasts on ranging topics and quite a few beginner videos. We also have iPhone/iPad app for those of you interested in watching videos on the go. Totally free. https://itunes.apple.com/us/app/neckbeard/id765193308?mt=8 
It's called Idle but you'll have to open it seperately
yep, I'm aware of that, but it's sooo good, that I needed something to complain about... =)
It seems to me the wsgi dispatcher helps but does not fully solve the problem. There are some issues for example: - links. links break if the URL change. web2py takes care of that - imports. Two apps may need different version of simplejson (or other lib) the web2py custom import takes care of that - hot install/uninstall. What if an app is removed? The dispatcher would still cache the imported python modules that may have registered routes. - hot changes. What if code changes? Flask would need to monitor files for changes, reload those modules, and update routes accordingly. It is not obvious to me that module reloading is any better then the web2py way. More importantly, as you say, web2py takes are of all of this and does not require any coding.
You say not to use web2py and that the code is terrible, and then point to only a single example. Furthermore, you do not even claim to be aware of any problems with that single example -- you are simply assuming there might be some problems without having made any investigation. In fact, web2py did not write its own AES module but is using an external library. Furthermore, its only use is to encrypt sessions stored in cookies, which is not the default session storage mechanism and not widely used. The sessions are also signed in addition to being encrypted. Note, Flask also stores sessions in cookies but doesn't encrypt the contents at all. So, you are saying you are a fan of Flask, which (1) uses cookie-based sessions by default, and (2) signs but does not encrypt the contents. But you advise against web2py, which (1) stores sessions on the server by default, and (2) when optional cookie-based sessions are used, it both encrypts and signs the cookies. Even if there is a flaw in the pure Python AES module (which you have not shown to be the case), it sounds like web2py sessions are still likely to be more secure than those of your preferred framework.
If you're going for Python 3 then I would recommend Tornado, but if you're sticking with 2.7 then Twisted might be the better route. Again, though, it hasn't been said what will be done via async, so Tornado may be overkill.
This is funny. You are a fan of Flask, which uses cookie-based sessions by default, and signs but does not encrypt the contents of the session. web2py, on the other hand, stores session data on the server by default, and when optional cookie-based sessions are used, it both encrypts and signs the sessions. So, even if there is a flaw in the pure Python AES module (which you have not shown or even claimed to be the case), web2py sessions would still be as secure as those of your preferred framework (more secure when relying on the default behavior). You advise against web2py and say the code is terrible; yet you offer only a single example, you show no evidence that this single example is a problem, and even if it were a problem, it would still be an improvement over your preferred framework. Thanks, but I don't think I'll be taking your advice.
Thanks for this. I'm writing an app in Pyramid but i still found this useful in thinking about how to separate out my logic so that everything isn't sitting in my view classes. Being new to OOP, the modularization is a challenge.
I find the idea of a DAL rather than an ORM to be kind of nice. I hadn't heard of web2py before (working on learning Pyramid atm) but i'll have to give it a look.
the docs could be much better if for example they said this :)
&gt; Python is executable pseudocode. Perl is executable linenoise. Randall Munroe
Fortunately PyPI have already blocked this package name. 
Backed. I love DRF. It is one of the best RESTful frameworks I've used. Its simple when you need it to be simple and complex when you need it to be complex. Thanks so much for your contribution, and the contribution of everyone involved in this project.
Thanks, Idk why I didn't just use a list comprehension in the first place. I think I was already way too hung up in trying to chain functions with logical and-or expressions.
uhh... thats kind of a dick-ish thing?
no. i used to run a website that took over 400,000 hit a day and it worked fine.
Don't use list comprehensions for this. [List comprehensions shouldn't have side effects](http://stackoverflow.com/questions/5753597/is-it-pythonic-to-use-list-comprehensions-for-just-side-effects). You can do something like this instead: def compose(*funcs): def funcs_composed(): for func in funcs: func() return funcs_composed 
If you do not mind, Can I insert direct on DB with your repository?
Nothing wrong with friendly jabs about each others programming language of choice.
backed it, looking forward to rest3!
Oh okay. So it depends on what SMTP server I'm using. Gotcha.
While code-reuse is a good thing, doesn't Two Scoops advocate putting logic into functions and **avoiding signals**? That way you can test the function without the signal machinery and if you must, put the function call within a signal. **A much better code reuse pattern IMO.**
&gt; Web2py does NOT play nicely with other frameworks. Our server is running three different sites; the other two were both Flask. Although I can easily get the Flask servers to play nicely with each other, the Web2py instance was constantly swallowing the other servers requests, and there was nothing I could do about it. Uhh, what are you on about? I run web2py, Flask, and PHP all through a single uWSGI instance. web2py can't "swallow" your server requests. This is a symptom of a poorly configured server stack. It has nothing to do with web2py and everything to do with you not configuring your servers to route the request to the proper app.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Sender Policy Framework**](https://en.wikipedia.org/wiki/Sender%20Policy%20Framework): [](#sfw) --- &gt;__Sender Policy Framework__ (__SPF__) is a simple [email](https://en.wikipedia.org/wiki/Email) validation system designed to detect [email spoofing](https://en.wikipedia.org/wiki/Email_spoofing) by providing a mechanism to allow receiving [mail exchangers](https://en.wikipedia.org/wiki/Mail_exchanger) to check that incoming mail from a domain is being sent from a host authorized by that domain's administrators. The list of authorized sending hosts for a domain is published in the [Domain Name System](https://en.wikipedia.org/wiki/Domain_Name_System) (DNS) records for that domain in the form of a specially formatted [TXT record](https://en.wikipedia.org/wiki/List_of_DNS_record_types). [Email spam](https://en.wikipedia.org/wiki/Email_spam) and [phishing](https://en.wikipedia.org/wiki/Phishing) often use forged sender addresses, so publishing and checking SPF records can be considered [anti-spam techniques](https://en.wikipedia.org/wiki/Anti-spam_techniques). &gt; --- ^Interesting: [^Sender ^ID](https://en.wikipedia.org/wiki/Sender_ID) ^| [^DMARC](https://en.wikipedia.org/wiki/DMARC) ^| [^Sender ^Rewriting ^Scheme](https://en.wikipedia.org/wiki/Sender_Rewriting_Scheme) ^| [^Simple ^Mail ^Transfer ^Protocol](https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cj095fk) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cj095fk)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Apache Bench at concurrency 5, 10k requests. Apparently Tornado 2.14 on AWS had twice as many requests per second than tornado 3.0 I would welcome better benchmarks. 
Frankly, if we could take a static Python and give it Go's concurrency features and its elegant compilation capabilities (even if modules had to be rewritten), that would surely be The Perfect Language -- Pyfect... :-)
While asyncio is targeted at well, async i/o, it doesn't have any mechanism to do asynchronous file operations. So reading from a file will block, but it will release the GIL, so if you have any other threads they'll be able to run in the meantime. Due to platform differences sticking to a threadpool is kind-of the only thing you can do (which would work cross-platform), so I don't really see any benefit from using asyncio for this task.
Because if you pass a file descriptor which points to a regular file it will always say it's readable/writable, even if it will block afterwards.
Why would you do that out of interest? I use Sublime for other things but can't imagine choosing it over Pycharm 
&gt; Apparently Tornado 2.14 on AWS had twice as many requests per second than tornado 3.0 &gt; Would be insanely cool if we could a/b the same web app against 2.x, 3.x and now 4.x... 
That thread has been clarified. There's some misunderstanding how exec is used or being used, whether in web2py or across Python. 
The [paper](https://www.cs.purdue.edu/homes/gkrichar/papers/onward2013-wuerthinger-truffle.pdf) instead of the talk.
Its [page 2](http://www.django-rest-framework.org/tutorial/2-requests-and-responses) of the tutorial.
http://en.wikipedia.org/wiki/Method_chaining http://en.wikipedia.org/wiki/Method_cascading http://en.wikipedia.org/wiki/Function_composition_(computer_science) * https://github.com/kachayev/fn.py/blob/master/README.rst#high-level-operations-with-functions * http://funcy.readthedocs.org/en/latest/funcs.html 
Have you see dabeaz's coroutines and generators slide decks? Fantastic. Doesn't really get into the asyncio stuff, a little old for that, but they're excellent nonetheless and cover your use case of extra large text files. (The examples he gives covers parsing huge log files.) http://www.dabeaz.com/coroutines/Coroutines.pdf http://www.dabeaz.com/generators/Generators.pdf
I may be misunderstanding, but it doesn't sound like what you're doing would benefit from async programming. Async is usually used where you have network requests, or communication between processes, so that your program can carry on doing something else while it waits for a message to arrive. Your problem sounds like it would be limited either by the processor, or by how fast you can read data from the file. Asynchronous programming doesn't help with either of those. Parallel processing (which is not the same as async) can help if processing is the limiting factor - see the [multiprocessing module](https://docs.python.org/3/library/multiprocessing.html) for that. If getting data from the disk is the limiting factor, the only way to speed it up is to buy a faster disk.
A million monkeys at a million typewriters, one will eventually produce a python program. The rest will produce perl programs.
Yes, but a giant chunk gets eaten by Kickstarter. That's a big drawback. :(
I'm only a couple years into Python (casually), and I've been putting a lot of effort lately into writing "beautiful, idiomatic Python". Watching Hettinger's YouTube videos, reading, etc. So forgive me if this question is totally stupid! :) I'm trying to understand the motivation behind placing several function calls together on the same line rather than wrapping them in a nice, logically-named function. This isn't really "chaining", since you're not calling methods directly on objects returned from each function. This looks tantamount to the "Compound statements" [Other Recommendation](http://legacy.python.org/dev/peps/pep-0008/#other-recommendations) discouraged in PEP 8. To me, your original approach has the highest maintainability. "K_RETURN: doSomething" is clear and explicit, and I can scan doSomething() in a fraction of a second and pick up what it's effects are. If I had never seen your chain() call before, I'd have to stop and check what chain() does. Encapsulating the tasks of doSomething() into a method with a clear, logical name seems way more valuable and maintainable to me than trying to save vertical screen space by fitting all the calls together on the same line. So my question is, am I wrong? Am I still living in C/C++/Java land? Why is the chain() approach preferable or more "Pythonic" than a well-named method?
In the case of SDEs the noise 'self.d' variance depends on the step of the method. You can find more information on the simulation of SDEs on the wiki page for the [EulerâMaruyama method](http://en.wikipedia.org/wiki/Euler%E2%80%93Maruyama_method).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**EulerâMaruyama method**](https://en.wikipedia.org/wiki/Euler%E2%80%93Maruyama%20method): [](#sfw) --- &gt; &gt;In [mathematics](https://en.wikipedia.org/wiki/Mathematics), the __EulerâMaruyama method__ is a method for the approximate [numerical solution](https://en.wikipedia.org/wiki/Numerical_analysis) of a [stochastic differential equation](https://en.wikipedia.org/wiki/Stochastic_differential_equation) (SDE). It is a simple generalization of the [Euler method](https://en.wikipedia.org/wiki/Euler_method) for [ordinary differential equations](https://en.wikipedia.org/wiki/Ordinary_differential_equation) to stochastic differential equations. It is named after [Leonhard Euler](https://en.wikipedia.org/wiki/Leonhard_Euler) and [Gisiro Maruyama](https://en.wikipedia.org/wiki/Gisiro_Maruyama). &gt;Consider the stochastic differential equation (see [ItÅ calculus](https://en.wikipedia.org/wiki/It%C5%8D_calculus)) &gt;&gt; &gt;with [initial condition](https://en.wikipedia.org/wiki/Initial_condition) *X*0 = *x*0, where *W**t* stands for the [Wiener process](https://en.wikipedia.org/wiki/Wiener_process), and suppose that we wish to solve this SDE on some interval of time [0, *T*]. Then the __EulerâMaruyama approximation__ to the true solution *X* is the [Markov chain](https://en.wikipedia.org/wiki/Markov_chain) *Y* defined as follows: &gt; &gt;* partition the interval [0, *T*] into *N* equal subintervals of width : &gt;&gt; &gt;&gt; &gt; &gt;* set *Y*0 = *x*0; &gt; &gt;* recursively define *Y**n* for 1 â¤ *n* â¤ *N* by &gt;&gt; &gt;&gt; &gt;&gt;where &gt;&gt; &gt;&gt; &gt;The [random variables](https://en.wikipedia.org/wiki/Random_variable) Î*W**n* are [independent and identically distributed](https://en.wikipedia.org/wiki/Independent_and_identically_distributed) [normal random variables](https://en.wikipedia.org/wiki/Normal_distribution) with [expected value](https://en.wikipedia.org/wiki/Expected_value) zero and [variance](https://en.wikipedia.org/wiki/Variance) . &gt; --- ^Interesting: [^Milstein ^method](https://en.wikipedia.org/wiki/Milstein_method) ^| [^Stochastic ^differential ^equation](https://en.wikipedia.org/wiki/Stochastic_differential_equation) ^| [^Gisiro ^Maruyama](https://en.wikipedia.org/wiki/Gisiro_Maruyama) ^| [^Discretization](https://en.wikipedia.org/wiki/Discretization) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cj0eicu) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cj0eicu)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
[Skulpt](http://www.skulpt.org/) is the closest thing. It doesn't actually run Python in the browser, it compiles Python to Javascript, but it does it in a way that is transparent to both you and the user. In my opinion you're usually better off just writing javascript, but that's a life choice you'll have to make yourself.
PayPal takes a chunk too
Good suggestion. Toolz (and the faster [cytoolz](https://pypi.python.org/pypi/cytoolz/)) has a function that will work for this, [juxt](http://toolz.readthedocs.org/en/latest/api.html#toolz.functoolz.juxt): &gt;&gt;&gt; from toolz import juxt &gt;&gt;&gt; dostuff = juxt(int, float, str) &gt;&gt;&gt; dostuff() (0, 0.0, '') &gt;&gt;&gt; dostuff(1) (1, 1.0, '1') 
something like the python console? I know spyder (comes with the anaconda distribution) has a console you can simple go to town in. or you can just open a python shell, same thing really.
One of my favorite things in python. Now when I code in other languages I miss all of the pythonic stuff.
You'll want to look at [the release notes for all the intermediate Python versions](https://docs.python.org/2/whatsnew/index.html). There are quite a lot of important features missing, such as: * no list comprehensions * no generators or custom iterators * you cannot inherit from built-in types * no static or class methods * no `with` * no unicode * a *lot* of useful standard library modules do not exist * string operations are in the `strings` module and aren't methods of string objects themselves. * no augmented assignment (`x += 1` isn't in Python 1.x) 
&gt; print "G1 X",; sys.stdout.softspace=False; print coords[0],"Y",; sys.stdout.softspace=False; print coords[0],"Z",; sys.stdout.softspace=False; print coords[0], "F381.198 E5.799" coords is supposed to be a list of 3 numbers, one each for X, Y, Z? (I presume?) I haven't used print with the sys.stdout.etc stuff but it does look like you're printing the first value in the list (coords[0]) over and over. What your print appears to do, without the formatting stuff: print "G1 X", coords[0], "Y", coords[0], "Z", coords[0], "F381.198 E5.799" What I think your code is supposed to do, without the formatting stuff: print "G1 X", coords[0], "Y", coords[1], "Z", coords[2], "F381.198 E5.799" Assuming in list coords[] = [10, 20, 30] then: G1 X 10 Y 20 Z 30 F381.198 E5.799 Try: print "G1 X",; sys.stdout.softspace=False; print coords[0],"Y",; sys.stdout.softspace=False; print coords[1],"Z",; sys.stdout.softspace=False; print coords[2], "F381.198 E5.799" P.S. Not to be harsh but your commenting/pythonic naming isn't helping. Edited to try to make the difference more obvious 
Nice. How well do you keep this in sync?
I look for an excuse to use it whenever I can, just so I can gloat about how rad Python is. Then I feel terrible afterwards.
Are you thinking of Tahoe-LAFS? https://tahoe-lafs.org/trac/tahoe-lafs
I wonder what it's like to have good reading comprehension. In that case, was it SpiderOak?
That's okay, I still love you. Isn't OpenStack done in Python?
Why? 
Thanks! You are right W2P really cuts development time!
This usage of else is awful. It's completely unreadable. It's too bad they couldn't come up with a less cryptic syntax way back then. 
Thank you for having time to come here and answer everyone questions without being even asked! Your constructive answers really helped me and mostly certain many others! 
OpenStack Swift is all Python, and it fullfills the "distributed file storage system", but it doesn't really have any capabilities for trustless backups -- though you could build those on top of them, something like Tarsnap does with S3: https://www.tarsnap.com/
Yeah, it's best to avoid it entirely.
I'm working on something like this backed by btsync
It was way before openstack.
When I first started I put breaks in the elses...
Django modularization is potential for good and evil. I spent my a lot of time on diving into Django doc. 
Hey Tom - You might want to make the announcement bigger on [the website](http://www.django-rest-framework.org). Hard to see and I'm sure loads of people go to the site every day for reference who might not check reddit. (Edit: also, backed, of course ;)
SQLite is only going to last you through development, and then only just barely. You don't want to rely on it for any kind of production use (also there is no way to serve a SQLite database file, you have to access it from the same local filesystem generally). As far as MySQL vs Postgres, I doubt you'll have to worry about the performance differences between them until you get really big, and by then you'll have different concerns. I use MySQL myself just because it's what I'm familiar with it since I've had to install and configure it so many times. Just don't try to use a nosql database where you have relational data.
Ah! I was not really aware of that. So it is raising another better implementation. Good to know! I am converting u and @Znt 's comment into my blog.
But how would using SQLite be a bad idea if: 1. There'll be more reads than writes to the db 2. It's going to be accessed from a central location (i.e.: web app will have full control over reading and writing to it) Those two points seem to be the big reasons why someone would use say PgSQL over it, and SQLite's docs even say that as well. I'm just trying to understand why SQLite isn't a good option here is all.
If your web server and database file are always going to be on the same box, sure why not. However, once you need to have a separate DB server and more than one client (webserver) then SQLite won't perform as well (read about SQLite database/table locking). Also think about changes to your database, SQLite only lets you rename a table or add columns to it. No replication, very limited support for concurrency, and won't perform under heavy load. It all depends on your app. If you don't need high availability, row-level locking, the ability to heavily modify tables, etc., then use SQLite. You have to weigh the pros and cons and come up with the answer for yourself. I can give you suggestions but you're the only one that knows for sure what you need. Edit: there is no right or wrong answer here, there is only the right tool for the right job.
Thanks for the information on solving SDEs. This is the first time I heard of these, so I will probably revisit it after exams. In the meantime I will maybe implement an explicit RK4 if I can figure out how to do it. Edit: We were told that we needed to determine the variance ourselves. Does this mean that it is not stochastic? I have no understanding of the concept of probability, unfortunately. 
Looking at what you describe your app to be, it seems SQLite would be a good fit. I'm just trying to outline the kinds of things you have to think about when deciding on what kind of db to use, or what kind of library to use, etc.
It's short and sweet, and it does what you want (presumably?). You should test it under heavy load, see what happens. But the answer is yes ;)
Oh but one thing I would mention is maybe cache the contents of the file in memory, no need to open and close it each time.
&gt;Without the `else` clause you would need to set a flag and then check that later to see if any of the values met the condition[.] Well, explicit is better than implicit so I'd much rather do just that and use a flag, actually.
EDIT: Take a look at /u/kingkilr's comment. If you want to try to remove the repetition, you might try something like this: @app.route("/&lt;slug&gt;/") def get_post(slug): kinds = [('.html', 'text/html'), ('.xml', 'text/xml'), ('.txt', 'text/plain')] for suffix, mime in kinds: try: file = open(join(appconfig.cache, slug + suffix), 'r') except IOError: pass else: with file: return Response(file.read(), mimetype=mime) else: with open(join(appconfig.cache, '404.html'), 'r') as file: return Response(file.read(), mimetype='text/html') You're definitely not being an idiot, though. 
I think the current form makes a lot more sense for `while` loops. while condition: ... else: will execute when condition is false This just seems natural to me. Your version would be highly confusing in this case. So while I think yours makes sense for `for` loops, I prefer the current implementation because it's more consistent with what makes sense for `while` loops.
I am unsure of the point of this usage, though. Any code below the while loop will be executed afterwords anyway, so why is the 'else' necessary? Is there something I'm missing here?
And the else is switched. 
Sorry if I'm missing the point of your question, but it's not equivalent to just leaving off the `else`. If the loop exits without `condition` ever being false (ie through `break`), then the `else` clause will not execute. EDIT: example usage, adapted from StackOverflow, that hopefully makes it clear: while value &lt; threshold: additional = get_additional_value() if additional is None: # something went wrong, abort break value += additional else: handle_threshold_reached()
*Why are you using Flask in the first place*? Your content is static. Compile the markdown into HTML and serve that with any old webserver. Flask is completely unnecessary here.
This would actually be a great pep.
I was scared for a minute, but then I remembered that Flask is looking for one parameter to pass into the controller. Trying to route to my ```requirements.txt``` by visiting ```blog.com/../requirements``` and ```blog.com/../requirements``` gets a 404. Lucky that it worked out without explicitly planning for it.
The project has been evolving. I was actually using Wordpress and Django at one point too. I have definitely thought about it, but I like having the script double as a debugging web server so I can work on any platform. I would rather setup a python environment than a web server configuration every time I want to work on it.
Current implementation makes sense when you have `break` in your loop body (which would be the only time you have `else` clause anyway) for i in range(5): if x == 4: break else: # else if we don't break. .... It would read like "loop until this condition is met then break or return, or else we do this". 
You've missed the point. And this isn't even an argument of "explicit vs implicit" at all.
Just to be clear, this was more meant as an experiment. I wouldn't call it "clean idomatic python." I wrote it because Python's anonymous functions can only contain one statement. For example one can do this in Lua anon = (function () print("statement number one") print("statement number two") end)
 for value in aList: if isinstance(value, list): if findthisword in value: print "found it" elif value == findthisword: print "found it" You can use recursion if it goes n-levels deep
I might be late to the party here, but I've used web2py for a while and I appreciate every bit of magic provided. Thanks Massimo! (I have alternate recipes for some specific things, and that's just fine -- I'm not forced to use that magic.) The first time you really use and understand {{=LOAD('item',ajax_trap=True)}} in a larger application you will be a very happy magician. I can't take Flask or Django users seriously when they talk about performance when they can't byte-compile their views. And how about connection pools that (don't seem to) differentiate between read-write and read-only db mirrors. (Might be out of date on that one. Anyone a Django user?) Read here for more: http://web2py.com/books/default/chapter/29/13/deployment-recipes#Efficiency-and-scalability Add web2py to something like Bluemix and you'll have so much magic that you'll make people who insist on the no-magic policy looking fairly antiquated. Granted, you do need to read and understand what is being done on your behalf (great online documentation) and the caveats for decisions made by the Web2Py team in those shortcuts. When in doubt, hand-code your own implementation if that's what makes you feel safe. [Edit Flask =/= Flash typo]
How so?
rapydccript! This game was written in rapydscript: http://pyjeon.pythonanywhere.com/static/cyborg/index.html The source is here: https://bitbucket.org/claw9184/cyborg/src It's a little awkward, specifically the inheritance, but it's pretty well written. 
Read the "But, why!?" section-- it's more elegant and just as explicit.
UPDATE: There is even a 3D game made with PythonJS! This is future of web now! http://super-snowman.blogspot.com/ Python JS? pythonjs.blogspot.com That create quite a stir in Hackernews:https://news.ycombinator.com/item?id=7865434 &gt;even 2x faster than PyPy. (Yes it even alot faster than pypy in pypy's benchs) It works with three.js very well, you can write full feature 3D games in python , compiled to JS , and run on Browser with WebGL. Combine with cefpython , you can ship it as a bundle, with everything included. And there is also pypyjs https://github.com/rfk/pypyjs http://www.rfk.id.au/blog/entry/pypy-js-faster-than-cpython/ 
When I think "For-&gt;else" I think "This will run the for-loop if there are items in this list.....ELSE it will do what's in the else block." It doesn't make a lot of sense. "Else" if your list is empty or not a list, etc.
Actually if You don't know how many nested lists do You have, its better to stick to recursion. But remember about stack and be really careful with that.
Direct link to video: Threejs editor written in Python : https://github.com/PythonJS/PythonJS/blob/master/regtests/html/threepy.py Look Bro , No JS! https://www.youtube.com/watch?v=USf52MdmjrI 
I think the author explains it pretty well: for x in data: if meets_condition(x): break else: # raise error or do additional processing compared to: condition_is_met = False for x in data: if meets_condition(x): condition_is_met = True if not condition_is_met: # raise error or do additional processing in the second code block (without the use of else) you have to use a separate conditional to test your condition.
I intend to sync it every 2 days.
Oh wow, the 'else' method is a lot cleaner. Thanks for explaining, I now have some code to revise.
I never use it anymore because I can't remember which way it goes. Does it else if you break, or if you don't? I can see use cases for either of these situations, so that means I need to look it up each time. Further, I then need to look it up when reading old code where I *did* use it, to see what I was doing.
Onoz, outside of loops the `break` keyword means "spawn a dead pixel"
I use this feature a lot since discovering it, and it really cleans up code that otherwise does value-checking or iteration counting. It's a great feature! :)
Forgotten? I use it all the time. I just wish they had named the construct "nobreak" instead of "else" to better convey when it is invoked. for i in range(5): pass nobreak: print('We concluded!')
I use Vim too and i use web2py, FLAME ON! :P
I am a CTO and here are my experiences regarding web2py. I've been part of web2py since 2009. &gt;There simply isn't enough people using it in production to be able to have a strong community of contributors. People that use it are rarely strong developpers, because if they were they would have googled: "which python framework to use" and found flask and django right up there. Having a lot of talented people using a framework makes bugs and features pop up, and creates a strong FAQ community. You are very wrong about web2py community. Web2py community = very active and friendly , non toxic , least egocentric community I've ever been in Opensource development.I do not understand why r/python crowd is so negative and toxic on web2py . &gt;There simply isn't enough people Another Misinformation. From my observation web2py have more Active user in Production enviroment than Flask. Alothough less than Django. And On web2py mailing list i've met very experienced IT Professionals, and learnt a lot. Even very highly technological questions not directly related to web2py at all are answered within a few hour. &gt; hardly any answers on stack overflow Because users hit mailing list first , and they got the answer they want within 4 mins, which may not even related to web2py , where you have to wait like a week on SO. Hey , may be web2py community should run its own version of SO and it will surpass SO , haha :D. And web2py's author , Massimo He care about his user like his own students , and will consider web2py like his own children. He is very open minded and consider suggestions carefully. As soon as you enter web2py community you can feel all his positivity. Thank you u/mdiperro! 
I think it does make sense, because you usually break out of a for loop because of a successful search. The else clause is executed if the search is unsuccessful. 
Sounds useful, I really didn't know it existed before :). However it feels a bit unnatural ... when I see "for...else" or "while...else" my first thought is "hey, else probably executes if we never enter the loop" or something
NoSQL is the future. Check out Mongodb and RethinkDB (Very nice concept).
Thanks for the reply. Strangely, in this case I was accessing the server from a Windows PC, but I will definitely save this post for when I add more arch agnostic functionality. I thankfully think the DB admin is on the conservative side, so I doubt there will be too much not supported by freeTDS based on your description. To be on the safe side, I suppose I will use the ODBC implementation, though. pyodbc (specifically pypyodbc) did the trick, and I based my solution on the first answer's suggestion for the Windows version. If the project finally gets a dedicated server I'd like to run everything on CentOS, so that driver may well be what I'd use. The link you just gave will probably be a big help when it reaches that point. I'll definitely be building it against that driver. 
Cool thanks for clarifying!! 
Earlier this week I had a bug in code like that, I had indented the else: one level extra. Superficially it looked fine, but it works completely different. First time the for/else construct bit me.
Even if you discount the boolean variable alternative, there is still little reason to use else with loops. The reason is that the sort of loops you would use else with is typically of the more complicated kind, especially when the code inside else block is considered. As such, it's very often more readable to extract those loops into separate function, change breaks into returns, and obviate the need for else this way.
As much as I like python, will it not be better to use directly JS ?
I disagree. The typical use is if you are looping through to find something, and then you need to handle when you don't find it. 
Of course, you probably realize this, but if your loop is always going to break (your example), definitely don't put an else. dead code. Unless it's some sort of else/raise defensive programming thing, but that's probably very unclear to the reader and then you could likely revise it easily. Maybe if you were defending against some bug in the generator, but that's still a bad way to do defensive programming, because it will stay in the code in production, unlike removing asserts in prod which would be the best way to do defensive or contract coding.
Dear for...else, I have NOT forgotten you! In fact, I used you just last week! https://github.com/regebro/passwordmetrics/blob/master/passwordmetrics/__init__.py#L104 It's not often that you are needed, but when you are needed, boy do you save a lot of work!
It would break a lot of code for people who use the `else`... In very bad ways... It would mean that the else occurs in the opposite scenario for all earlier python code &lt;= 3.4
They could've maybe chosen a better keyword for it, but it's too late now. I would be a fan of for/complete or for/finish or something like that, and the same for while. else just implies a condition of the for was not met, like in `for i in generator()` and `i` was suddenly `False` or false-like. But honestly when I first ran into it, it made complete sense how it was used so I don't understand why people make a big deal about it.
Well, explicit in that the procedural behavior is obvious, but IMO it's very explicit to have an `else` because that implies a `break`, which is explicit and catches your eye in the for block. This will `break` here, and this is what happens if it doesn't. It's very clear to me at least.
I feel like people gripe about it because the behavior isn't obvious if you haven't heard about it, but honestly I think it's completely clear once you learn what it does. It makes sense to me. `for` and `while` are control structures, possibly with `break`, and if it doesn't `break`, they run the `else`. I don't see what's hard to understand once you learn that. If you look at code with them, it's extremely obvious what's going on. On the other hand, we're getting a little deep into "goto" like behavior, just the same if you overuse `break`, `continue`, or even put `return` all over a function so you don't know when it exits early. It's hard to analyze the code. At runtime it might not have obvious behavior of how far it ran your function, or how far along it finished the for loop, and when it exited. But that's the nature with early function `return`, `break` and `continue`. They act like gotos, and people use them. You just need to be very careful with how you use them. I try to only use `continue` when I'm filtering out processing of items in a sequence in a `for` (so at the very start of the for block), and I only use `break` for obvious behavior, like searching for an item or finishing a calculation, etc. I also try not to put function `return`s before something in a function which may have side-effects on the state of an instance, class, or global. I want to know that every time this function runs, those side-effects either happened, or it doesn't have side-effects, not that if this condition is met the function exits out without having an obvious effect like it normally might. 
Me too, glol
That is why it's so useless. Most of the time you need this: condition_is_met = False for x in data: if meets_condition(x): condition_is_met = True break if condition_is_met: do_something() else: do_something_else() The problem is that there is only a keyword for when the condition is not met. If you did this: for x in data: if meets_condition(x): break else: do_something(); do_something_else(); It would be semantically different. You are executing do_something_else regardless of whether the condition was met. /u/unixdrone4life code is how it would become actually useful.
 for i in range(5): pass if not break: print('We concluded!') ?
What if somebody is doing from `itertools import chain`?
Then they won't be doing `from yoanar_module import chain`. It wouldn't make sense for them to have those right beside each other.
That's true.
`collections.deque` seems better for this.
LOL. I apparently need a spell checker in my editor. :-) Yes, your variation works as well. Can't say it's more readable, though. Still, it's good illustration. 
The problem with that though is I have relations between tables and even databases.
Heyyy, late reply but yeah I'm working on it off and on, very often off, but I still want to try it. I haven't worked on it since but I do have a project online. https://bitbucket.org/johannestaas/taskcobra/src
Thinking the same thing - also, doesn't this add an unnecessary level of complexity to _everything_?
&gt; Most of the time you need this: condition_is_met = False for x in data: if meets_condition(x): condition_is_met = True break if condition_is_met: do_something() else: do_something_else() You can write this as: for x in data: if meets_condition(x): do_something() break else: do_something_else()
A little on note on github wouldn't go amiss either
Yeah, my only point is that you shouldn't use `else` when it *SHOULD always* break, but it might not if there's a bug. It shouldn't be used the same way you'd use `assert` in contract coding. When using `assert` you use it in such a way that the code runs exactly the same if you remove all the asserts in production, but by putting an `else` in, you're basically saying that the code's behavior will change if you remove it. I don't know, just an idea that popped into my head when I saw your simple example and I came up with my own strange scenario where else could be misused.
it's slightly bewildering when you first spot it, but so are list comprehensions. it's not especially confusing syntax.
the way to remember it is that you use it if you loop to find something in a list for example, if you don't find anything and break it gives you the option to give some default value or whatnot.
This is a sign of a very bad language feature. It's reminiscent of PHP's weirdly variable function argument order.
Why is flask involved at all? Just use a static file server like nginx and be done with it.
The site has been moved to a custom domain: http://practicepython.org
Good point!
I think about it in terms of opportunity. If I break, I have the opportunity to handle the end of the loop just before the break statement. If I don't break, my only opportunity to handle the end of the loop is the else statement. If 'else' handled break statements, you'd have two opportunities to handle the end of the loop for break statements, and still no opportunity for handling the end of the loop when you run out of items to iterate over. It would be pointless for else to follow a break. Else has a point, so it must not follow breaks. 
List comprehensions were, for me anyway, fairly intuitive. [2*n for thing in range(n)] "It's inside the brackets, so it's probably be a list...hmm, if I unroll the looping, I'd get a sequence of values. That's probably what this does. \*Looks it up in the documentation\* Yep, I was right." The problem with choosing "else" is that it doesn't really have any attachment to the semantic context. Ex: "Sally, for each chair in the room, clean it. Otherwise, put them all in the dining room.". In this sentence, "otherwise" (in python, phrased as "else" of course), makes no sense. What does otherwise have to do with cleaning the chairs? Me and sally have no idea. If you put some implied words in there, e.g. "Sally, for each chair in the room, clean it. [If you can't clean one of them for some reason, stop altogether.] Otherwise, put them all in the dining room." That really long bracketed clause is completely necessary to understand what "otherwise" is referring to. That's not clear at all and goes against readability. Don't forget that python is supposed to be executable pseudocode. To say it another way: in python, "else" is supposed to happen when some falsey value is evaluated. For the "for...else" form, the falsey value is completely implicit and doesn't appear in the code at all. I hate it when people constantly reference the zen, but "Explicit is better than implicit". I actually prefer the flag form. At least then I know what the code is talking about.
Please see http://www.reddit.com/r/Python/comments/2b0053/the_forgotten_optional_else_in_python_loops/cj0u8og
I agree with with you. They should have used another keyword like "done" or something.
Every time this discussion has come up, the proposed replacement keywords tend to be kind of bad or inelegant. `nobreak` is 2 words glued together and just seems ugly, plus `break` is not the only possible way of escaping the loop (like if you `return`). Personally I think `fallthrough` or something of that nature would make a bit more sense, to suggest what the loop will do by default unless there's an earlier loop escape. That's still kind of ugly to read and write, but it captures the semantics well I think.
Think of the `for` loop as a conditional: `for all the time we're inside the loop, do:`, and then `else if the loop completed:`. `else` in this case suggests that some sort of a search in the above loop has failed. It's a good construct, but it definitely does need a better name.
The purpose of DB2API is the API are the same. Just use a DB2API driver for your DB or elixir or sqlalchemy. And, if you don't use too specific construct of your SQL (windows in pgsql, LOAD INTO/FROM ...) your code will be portable from db to db. Meaning you just abstracted the db layer, and you are free to change it when you want. rule of thumb: sqllite is often used for dev/unittesting mysql fast when records &lt; 10K per table/easy to install/lots of help pgsql the most confortable one. Easy to tune, good for heavier load, PITA to install and no phpmyadmin A lot of DB are out there sybase, mssql, oracle. It is never a bad idea to test new things. And a there is no DB or datastore to rule them all. Just avoid like plague nosql when you need consistency. No SQL as it means no SQL means no ACID standard, thus inconsistencies in DB You can give a try to graph oriented db, pytables (HDF5) .... There are a lot of datastore out there with their unique sets of performance and data structure. There are no absolutely good choices, there are good choices relatively to your app. And this if often more a question of testing and measuring and tinking than a question of theoritical knowledge. So instead of asking questions on reddit, you should go back to have fun and not wonder too much if you have the good techs. ;) PS But be curious. It is always fun to play with other techs.
This article doesn't dwell on the details, but I think it's worth noting this is made possible by one of the newer Kivy sister projects, [plyer](https://github.com/kivy/plyer). This is intended to provide a platform-independent, pythonic interface to common platform specific apis such as (in this tutorial) the accelerometer but also vibration, sms, email, camera etc. It uses some of the other Kivy sister projects, pyjnius and pyobjus, for direct api access on Android and iOS, as well as appropriate python modules on standard desktop systems (linux, windows, osx). The idea is to make it easy to call a single function in your cross-platform application and have it do the right thing no matter where it is run, without having to look up the local apis yourself. Plyer doesn't depend on Kivy, and hopefully may be useful to other projects.
Speaking as a Python dev and security analyst... I think 1) architecturally this does not make a lot of sense, and 2) this is way overengineered. If you need one-off time series graphs, Redis is kind of ill-suited for that. In this case the author uses: * HDFS * Kairos * Spark * Pyspark * Kafka * Redis * Pandas When in reality he could be using just one tool to do all of this, possibly extended by a small Python module. The tool would also hand log collecting, indexing, storage, and querying. Many large scale security log management tools provide Python support, so queries can be piped to a Python script automatically that, for example, converts to a Pandas dataframe and displays or describes data however you like. Most of the time that's not necessary though, because all log management tools tend to provide their own expressive query syntax with heavy support for statistics, graphing, and time series data. I could write a 5 word query in my SIEM that gives the exact same result in this blog post, just with a slightly different graph visual. Or I could send the query result to a 3 line Python script that graphs it with `matplotlib` or anything I like. There are some open source SIEMs out there that will do this with ease, like ELK (Elasticsearch - Logstash - Kibana), some semi-enterprise ones with free tiers (Splunk), and others like ArcSight and Alienvault OSSIM.
My advice is to at least use Coffeescript if you're forced to write Javascript. Coffeescript looks and feels a lot like Python, with a bit of Ruby mixed in. I'd say it's closer to Python in general though, just with no colons used to start blocks.
It is not the same. The condition required for the execution of else is reversed. Originally **else** executes when the loop completes successfully. In my example, **else** executes when the loop ends premature. 
~~Eh, it's not so bad, really. The code more or less reads like "for all elements in this expression, or *else*..." The implication that the "else" statements are executed, when less than the entire range is iterated, makes some sense when read this way.~~ Edit: I take it back. It's very, very bad.
just want to point out but fallthrough is also "2 words glued together" :)
&gt;it doesn't really have any attachment to the semantic context. agreed. but adding another keyword is probably worse. maybe they should've gone with "elif break:" or some such.
I disagree with adding another keyword. Let's minimize the amount of keywords in python.
That's a horrible misleading construct. Does not have that much usefulness, and even after learning it, I can never remember which way it works. What is especially sad is that the construct could have been made really, really useful, if it worked as an alternate path to looping. That is, if the else-block was executed if and only if the for-block never executes: for item in some_generator(): "do the funky with the item" else: "some_generator was empty" Now *this* would be useful, and intuitive to understand and remember. It's a very frequent requirement: if there are items, do one thing (like populate a listbox), and if there are no items, do something else (like disable the listbox).
You don't use an else clause unless there was an if in the for loop. There needs to be something that can break it or the else is useless. So the vast majority of the time you have: for chairs in room.chairs: if not sally.clean(chair): print('cannot clean chair ' + chair + ', leaving chairs in room') break; else: sally.move(room.chairs, 'dining room') The clause you call implicit is usually explicit, and so the construct is usually readable. 
There are always tradeoffs. For performance, yeah, I'd think "raw" JavaScript would be better. For development efficiency? Readability? Maintainability? Assembly would be better for performance on the desktop, too. I don't care; I'm still not using it. I'm biased, of course. I hate JS and like Python. Anyway, it's an interesting tool to have.
~~However, the else is not executed when there are 0 items either~~ Apparently, I am incorrect. I could've sworn there was some issue with empty iterators and for-else though.
Technically, the else clause goes with the for or while loop, but conceptually it is a collective else for all the if statements that the loop iterated over. for test in tests: if not test(): print('test ' + test + ' failed!' break else: print('all tests passed!') if any of these things is true, do one thing, else do other thing. The construct allows a single else to a looping-if clause. Another way to provide this might be something like: if [not test() for test in tests]: print('test ' + test + ' failed!') else: print('all tests passed!') But that is much less flexible. 
This example makes no sense because there's no way of breaking out of the loop. Add a check to break out of the loop and then the existing syntax will seem more intuitive. 
Thanks for reminding me about this oft-overlooked language feature. I'm not sure about your use of the word 'suite' though. 'clause' seems more appropriate.
Now add non-trivial code in that loop (multiple if clauses please) and see how well it reads. The second you add code after the if block, the else suddenly is an orphan and no longer makes sense.
or "then"
 /me re-reads the article Mother of god...
I always translate a loop's else clause in my head to an 'ifnotbreak' clause. Or 'ifexitnormal'. Wish they'd fix it.
While I'm starting to do Android apps in Java, this is definitely something that I will be keeping a close eye on, as I'd rather do it in Python than Java. Thanks!
It's been years since I used py2exe, but when I did I had found its ability to trace imports a bit sketchy. To work around that I created a file that just imported everything that the project was going to need and included that from my "main" script, then py2exe would pick them up and include them in the zip. 
How would I go about doing that? Sorry, I'm still fairly new to python. I got a lot of the basics down. I forgot to mention, that I am using Pyton 2.7. Thank you for your post!
I guess I should have said re-read. But anyways, both pieces of syntax are explicit and have well defined meanings (It's in the python syntax... natively). the `else:` syntax is just cleaner. 
I'd use `fallthrough` as well, although personally I have no problem with `nobreak`. I think what I'd prefer is `finally`, but obviously that's out since it's used with the opposite sense (ie. always executed, however you exit the block) with `try` blocks. **edit:** I doubt the Python developers would like either `fallthrough` or `nobreak`, since they sound too "technical". They have a predilection for common English words as keywords. Maybe `last` would've worked for them, although I think that's a particularly annoying word to tie up as a keyword. (Maybe `lastly` would be okay.)
I lost track of where I used what and I'll go over it an edit it. But, my intention was to call the *actual code content* the *suite* and the `else` word itself (or referring to it) the *clause*. But I think I may have used them interchangeably.
Just because you can, doesn't mean you should.
Presumably it's copying the behaviour of `else` in `try` blocks. try: ... except: # do A else: # do b executes the `except` block if an exception occurs and the `else` block otherwise (ie. on "fallthrough"). It makes perfect sense in that context and the `for` loop copies the pattern. I don't think that's an excuse, but I assume it's the reasoning behind it. It's still contrary to what you'd expect. I'm actually kind of surprised it's used in Python given its emphasis on readability. Maybe they liked `else` because it "sounds like simple English" (even though it's outright confusing).
"In case you can't clean them all" How are you getting this from "else"? That's the whole issue. "Else" cannot reasonably (without foreknowledge) be converted into that meaning.
This is kind of cool. The only thing is that I think my coworkers would be pissed if I wrote something that looked like this: add * Just(7) &amp; Just(8)
I hate when people publish broken code... &gt; So, first of all we have to transform this code to something more similar to a real app, written by a real dev. It doesn't work! 
This is pure unadulterated FUD. Saw this post the other day and it should hopefully convince most people that SQLite is a fine choice for 99% of all apps: http://charlesleifer.com/blog/sqlite-small-fast-reliable-choose-any-three-/
Because it's not 'for ... else' but 'for each ... else'. But try suggesting renaming 'for' to 'foreachof' to make this 'else' usage more clear... 
http://www.sqlalchemy.org/
That's not what I'm saying. How are you getting "In case you can't clean them all" from "for each...else"?
Waaaaay too complex for what I need, thanks though.
It's not a black and white issue. There are a bunch of language constructs that are a little unintuitive but occasionally appropriate. You always have to weigh readability against functionality. In this case, it's very easy to rewrite your code in such a way that avoids this construct entirely, retaining full functionality and improving readability.
I doubt you will find any source more comprehensive than the official docs.
&gt;Of course, you probably realize this, but if your loop is always going to break (your example), definitely don't put an else. dead code. Why do you think his code is always going to break? You have no idea if X==4 since X is not defined in the example.
The documentation? Though it's really just expanding the terseness of a programming language into explicit natural language. Implicitly it is ambiguous, but then again so is "open the window if it's hot or stuffy". Else here is the alternate to fulfilling the entire action on every element and once understood it is no more (and arguably less) counterintuitive than xor. Agree to each sentence, otherwise look into Inform 7.
Hahaha what?
Like I said, anything that explains what the code does would be better than the docs, but all I can find online are examples for general Soap clients and not Suds itself.
I would love if this existed. Django templates have it and I miss it whenever I'm writing regular Python. 
Why? It's easier to google a new keyword than it is to find an existing one in the right context, it's not like there's any cost to adding a keyword, and it makes intent clearer in the first place. 
Trust me, sqlalchemy is not complicated to use. It's the best orm of any language I have ever seen. Use it.
Mongodb? You're not serious are you?
I guess in the end, it doesn't really matter any-more, since it will not be changed. I updated and (hopefully) clarified the examples. It was a fun discussion but maybe I shouldn't have said anything. It is what it is, and will not change or we risk breaking existing code. [Link to Modified Post](http://www.reddit.com/r/Python/comments/2b0053/the_forgotten_optional_else_in_python_loops/cj0l150)
So basically, for-else is a template for try-except, right? for x in y: z else: w == try: _iter = iter(y) while True: x = _iter.next() z except StopIteration: w Is that right? (Aside: I love languages whose complex control and data semantics can be described using their simpler control and data operators!)
neat feature, but I would never use syntax that cryptic in a shared codebase without at least a comment specifying what it does.
maybe something like this? http://matplotlib.org/examples/shapes_and_collections/scatter_demo.html Except you could arrange the circles on a line, or whatever works best for your data. You can also superimpose text(the fighter's name) like here: http://matplotlib.org/examples/shapes_and_collections/artist_reference.html
Pretty much, actually. IIRC, when the code produced by a for loop is executed (and runs to completion), the StopIteration actually gets raised and processed internally. Edit: I was able to confirm this by making a quick hack of a wrapper around a list iterator.
I'm using suds- in a couple of interesting ways (ie, via non-blocking tornado calls) - what errors/issues are you seeing? 
 fname = "somefile.txt" fobj = open(fname, "r") text = fobj.read() text = text[:500] text = text.split(";")[0] # text now contains atmost 500 characters or first ; 
The three lines that are confusing me are below. from suds.mx.literal import Typed from suds.mx import Content .... bmx = Typed(report.get_schema()) content = Content(None,report.data) submission_bundle = bmx.process(content) .... The submission_bundle is then sent to the web service after that. I know you don't know what the schema looks like or what the data looks like but if I just understood what Typed(), Content() and bmx.process(content) did, I'd have a better understanding of what's happening when those three lines run.
Nice work, fiedzia!
I haven't had an issue remembering what "else" does in the context of loops, because it does the same thing for try/except blocks. If your try block runs successfully, the else block is also executed. If it catches an exception, the else block is skipped. I've used it a few times with try/except blocks, and had no problems understanding its use during a loop.
&gt; it's very easy to rewrite your code in such a way that avoids this construct entirely, retaining full functionality and improving readability. That's entirely subjective, and the same can be said of any syntactical sugar.
I use http://www.pyinstaller.org/. Steps: python pyinstaller.py --name "NameOfMyProject" ..\project\main.py Then, open the NameOfMyProject.spec inside the NameOfMyProject folder In the COLLECT() part, you want to add a parameter called Tree('..\project') Now you save this file, and run: python pyinstaller.py NameOfMyProject\NameOfMyProject.spec You wait a bit and your executable will be in the NameOfMyProject/dist/NameOfMyProject folder. I hope this works! for you!
are you talking about something like this? print "Foo is %s, bar is %d" % (foo, bar) %s %r %d %g are formatters to tell print what sort of items you are sending in. https://docs.python.org/2.4/lib/typesseq-strings.html
It's also a literal translation of the German word for diarrhoea. 
 Without seeing more context: suds.mx.literal.Typed(schema) returns a marshalled &amp; typed schema. suds.mx.Content(tag,schema) returns the marshalled _content_ the submission bundle is generated via a call to suds.mx.literal.typed.process(content) Processes (marshals) the tag with the specified value using the optional type information. I'll be honest, without the entire code block I'm a little outstretched here- but if you look at the docs and are able to add some trace/debugging methods to the code, you should be able to scale through it. The docs are here: http://jortel.fedorapeople.org/suds/doc/ 
&gt; I'm saying that it's unreadable, unintuitive, and unnatural. You have, so far, demonstrated that you *don't like it*. 
That kind of thing is useful for one-off systems, too, since there never really is a one-off system. You'll eventually have some kind of failure that will require you to set up a replacement, and you don't want to be in the position of figuring all that out again years from last time.
*"How are you getting "In case you can't clean them all" from "for each...else"?"*
&gt; expanding the terseness of a programming language into explicit natural language. Implicitly it is ambiguous, but then again so is "open the window if it's hot or stuffy". Else here is the alternate to fulfilling the entire action on every element &gt; Agree to each sentence, otherwise look into Inform 7.
It ran but nothing is in my outfile
I don't really understand what you're saying here. Could you rephrase this? 
Not forgotten. Buried. And for good reasons.
It's quite convenient, but using a *very* confusing keyword. It's completely unobvious what it would do, unless you know it already.
That would probably work, though is semantically a little bit different. It's nice to suggest some finality or ending, so `after` or `end` may be a bit better.
The second version is not semantically equivalent to the first. There is no way to short circuit/break out of a list comprehension, so there will be unnecessary computation. Such a construct [has been suggested before](https://groups.google.com/forum/#!topic/python-ideas/4O1TCOa2fo8), though.
Not exactly pointless: You could have a break in three places with similar clean-up code.
It's a valid objection. Its name makes it completely unobvious what it does; in fact, people who didn't know it would most likely guess the opposite than what it actually does. It's a useful feature, but a very poorly chosen keyword.
/r/learnpython
Post this in /r/learnpython along with a sample of the what the .txt file looks like and the code you've attempted so far. We will can better help you then.
Certainly, but most people seem to agree this construct is confusing. 
and I wrote that 2 hours before I normally wake up :)
In this sample, he is not outputting anything back to the file. you need to write the output of the text to the file. 
Assuming you can't add a new keyword, what would you use?
py2exe tries to grok your source code in order to automatically find the modules you use. Sometimes it fails. In these cases you must explicitly tell it which modules it should include. In the py2exe options dict, you should include a key 'includes': which takes a list of strings of module names. In your case, it would be 'includes': ['pysftp',] If you need to explicitly include an entire package, use the key 'packages' like this: 'packages': ['matplotlib',]. You can check whether the module was included by looking inside the zip file in the build directory. Here's what one of my setup scripts looks like: # py2exe specific setup options py2exeOptions = { 'dll_excludes':dllExcludes, 'excludes':['_gtk','_gtkcairo'], 'compressed':1, 'dist_dir':os.path.join(outDir,'mydest'), 'includes': ['foo','bar','baz'], 'packages' : ['matplotlib','mako','yaml','pytz'], } # all setup options options = { 'py2exe':py2exeOptions, } 
yes, given the directed nature of *, I would have assumed &lt;&lt; or such to make more sense (if operator overloading should be used at all for this?)
Line 68: for ev, node in parser.read_events(): Looks like it takes in and goes through each element in a specific order. How can I get this to save all of the incoming data to a single variable to parse in another function (called after 'end')? The reason I'm asking is because I'm not familiar with ElementTree, I usually use BeautifulSoup to parse XML.
Only gripe I have with Plyer is that it is a pain to extend/add features to the library. Unless I am reading the docs wrong. I get why their process is how it is but still...
Hold on, save *all* of the data? I though by "XML Pushes" you meant irregular updates that the server sends to the client over a single connection; like messages in XMPP, for example. If that's what you need, you can't save all the data because that would mean waiting indefinitely; instead, you should pass data on to the parser as you receive it and handle events as they appear. And if not, then I've completely misunderstood your question and my code will not help you.
Touche! *tips fedora* to you, good python sir. While I have you, what do you think of my new REST API schema? All you do is ask a question at the end of the URL and you get an english response (because JSON isn't for humans): for-humans.com/api/what is the best markup format?
I think keep your ORM (whatever it is), you know it, it does what you need it to do, assuming it supports both PG and Sqlite. Postgres is awesome stuff. sqlite is also awesome stuff. however, they are different kinds of awesome. If you are already using PG, there is no harm in keeping it, it adds overhead you perhaps don't need. It sounds like your app will likely never need to grow past 1 web serving machine right? Unless you are monitoring millions of servers (or hundreds of thousands maybe) you likely will be fine with sqlite on 1 box. The biggest downside to sqlite for a network monitoring situation is you want your network monitor to be robust and handle failure very nicely. sqlite being a single file, makes this both painless and painful, depending on the level of failure/redundancy you need/want. Most of those topics are complex and outside of the scope of this question. PG has much better redundancy/failover options built in. sqlite would be a DIY failover/redundancy model. either one is fine, I don't think you can really go wrong with either choice. Also it's getting much much easier to move from sqlite to PG if you ever do need to grow into PG's feature set (the FDW stuff).
Basically, it introduces a breaking change. Python as it stands prevents one from using a keyword as a variable, so if any script uses nobreak as a keyword, that script will be broken. It is possible to add new keywords to Python (yield is probably the most recent example) but that requires several versions' worth of deprecation notices and planning, and even then it's just added disruption to any business that wants to keep aging scripts running on the latest system. To be fair, the alternative is covering the language with symbols rather than words, and if there's one thing I love about Python it's that I don't decipher it, I just read what it says.
Oh, I agree *now* it's daft to change it, but the commenter you replied to was talking about the original decision
No, /u/citrauq's code behaves exactly the same as /u/odraencoded's example of "usually you need this". According to that example, we *don't* usually want `do_something_else` to execute after the `break`. This is similar to how else works in the abstract: it gets `executed` if the conditions (for braking) *aren't* met.
I learned how to use suds mostly from the documentation, and then dicking around with it in the interactive interpreter. After I got a basic grasp, I was able to dip into the source code for a lot of other things I didn't understand.
doesn't cover the return case or the exception case (although you could argue that throwing an exception would skip the "tail" block anyway....)
&gt; pass data on to the parser as you receive it and handle events as they appear Yes, this is what I need to do. They are 'XML Pushes' but they are being pushed from the client server to my server at irregular intervals. I know the structure of the incoming data and know how to parse it. What I don't know is how to set up the script to receive Push Data at any time and save it to a parsable XML variable. I wouldn't think this requires an ongoing process, the script would only be called when the client server pushes the XML to my script (www.example.com/incoming/push_handler.py).
The [Python Cookbook]( http://shop.oreilly.com/product/mobile/0636920027072.do) is a pretty good set of examples of python features and the standard library. The [Python Challenge]( http://www.pythonchallenge.com) isn't a book,but is a very entertaining series of online challenges were completing one will take you onto the next. It nicely shows you around both the standard library and some common 3rd party libraries as well. When you complete a challenge, you also get access to the wiki and you can see how other people solved it as well.
Thanks! I'll check them out.
It shouldn't be terribly hard. Do you have a particular problem with it?
Sorry, it was a problem of copy-paste from wrong editor buffers :( In any case, I fixed it. Let me know if it works for you now
I'd say it's even more useful if you use `return` in the middle of a loop because then it's a simple and obvious way of returning a different value if your loop falls through. Plus if you use it in this way, the reasoning for the use of `else` becomes clear.
You have to prgram a specific Java module, then write its C function (which is sevwrely lacking docs and is my major gripe). I get why you have to do Java, its not that. Its that mainly the C portion doesnt provide any comments or docs on how or why to do each line.
Plyer has nothing to do with C, all the api interaction on mobile is via pyjnius (on android) or pyobjus (on iOS), which directly wrap the java/obcj apis via python. For instance, [here](https://github.com/kivy/plyer/blob/master/plyer/platforms/android/vibrator.py) is the vibrator code for android in plyer. It's extremely short, consisting only of a couple of lines to autoclass the relevant java classes, then simply calling their methods with normal python syntax. I think you are talking about the android module in the python-for-android bootstrap. This is older and a much less neat solution that does use C, and the difficulty in extending it is one reason why pyjnius now exists. We're explicitly moving away from this method, and many of the functions have already been replicated in pure python in plyer. 
thanks for Python Challenge. seems cool
Regarding #4, you must either not understand python or you are lazy. It's easy to dive in to understand what is going on. Take some time and read the documentation. It's only a few hours. I read what you did, you shot yourself in the foot and you say it's the gun's fault? It's not terrible that you don't understand it. I help people on the groups all the time, I use it off and on, but it's so simple to understand and dive into that I like being part of the community and helping people out. 
There's nothing wrong with it per-se, and I'm sure it'll run fine with low traffic. SQLite was designed to be embeddable into applications to provide a compact and lightweight SQL database storage mechanism. As I mentioned before, it's all about what you need and what your app needs to be able to do. If you write your app correctly, you can swap out SQLite for MySQL/Postgres/whatever when you realize that it no longer suits your needs.
Writing Idiomatic Python : Knupp and Python Standard Library by Example: Hellman
I fear you 
How are they pushing it? Are they sending an HTTP GET/POST? In that case you need to run a simple web server, python has a built-in web server or you can use any number of frameworks. Are they just opening a raw TCP connection on some port? Then you'll need to at least listen on that port. It will most likely require you to run a server process of some sort, but don't sweat it because something this simple won't use much in the way of resources.
"Invent your Own Computer games with python" if you are interested in developing games in python language. The book is free to read online: http://inventwithpython.com/chapters/
Here's an even better suggestion: don't add the feature in the first place!
(using object oriented : inheritances , decorators , generators) Write a project which needs 10000 lines of well formatted javascript codes. And with another with 10000 lines of Python. Come back after a month. Look which one is more readable now.
[Core Python Applications Programming](http://www.amazon.com/gp/product/0132678209/ref=oh_details_o00_s00_i00?ie=UTF8&amp;psc=1) is a great book. Touches on a TON of different technologies and the examples are very easy to follow.
This doesn't answer your question, and it's a little more expensive than a textbook, but I really recommend Steve Holden's 'Intermediate Python': http://shop.oreilly.com/product/mobile/110000529.do
Is that an intermediate book though? That's how I started with programing as a whole and it's quite beginner friendly.
Can you explain why? - It is very easy to use. - Very high performance. - Easily shardable. - Query langauge , tho not support joins , very powerful. RethinkDB: - Just run queries with your programming langauge of choice's syntax , a lot easier. - Autosharding. - NoSQL with SQL features. - Suppor table and joins. Both DB's data format are JSON , which is totally exchanable with python's Dicts. Both are very easy to get started and master. RethinkDB's REQL is not like SQL - : where you have to think differently from your application programming langauge (python Code), but it supports Joins , GroupBy. Rethinkdb's Locking is Grandular , write perfroamnce is awesome.
[Python Essential Reference]( http://www.amazon.com/gp/aw/d/0672329786?cache=73160b6a1681f113e2d6ed0cd4273df2&amp;pi=AC_SX110_SY165_QL70&amp;qid=1405741886&amp;sr=1-14#ref=mp_s_a_1_14) is great. It has a medium level overview of almost all of the standard library, and has some great explanations of decorators, 'with' statements, generators/yields, functional programming, testing, network stuff, etc...
Desktop computer? On windows, task scheduler should have everything you need to run a script periodically.
Same as Oopsies proposed, use cron for linux/osx 
Hello, thanks for the response. What VPS would you recommend besides heroku? I already have quite abit of data on my sqlite and would like to keep it :) 
Just walking through here and finding my own stuff discussed here. Interesting. http://apython.blogspot.tw/2014/07/writing-python-3-program-in-chinese.html 
I recommend getting a raspberry pi, install rasbian (debian build) or pidora (fedora build) [Google debian vs fedora/centOS]. You will have to plug in an rca tv or hdmi screen for pidora + keyboard and mouse to set it up. I also recommend installing ubuntu on a spare pc or laptop to use for this if you only have windows machines available right now... If you install ubuntu, open a terminal and ssh to its ip (My example KEY (replace the value of PIip and user with your values): PIip=192.168.0.25, user=raspberrypi (you can also specify port number for added security later in /etc/ssh/sshd_config)) (if you are on windows, download and use putty to ssh to the pi) ( the '-l' (lowercase L) is a modifier/option meaning username. NOTE --- for complete list of possible command modifiers for any program, type: [TOOL] --help[enter key] EX.. ssh --help Ex... $ (dollarsign means user level not root; '#' is root... NEVER use ssh as root on a linux machine you value. ) Command (without quotes): "ssh 192.168.025 -l raspberry"[enter key] Now type in user password. Type "nano [scriptname.py]"[enter] ...and create your python script (make sure to put "#!/usr/bin/python" (no quotes) at the very to of script. When you are finished hit ctrl+o to save then ctrl+x to exit back to the directory then type in (no quotes): "su"[Enter key] "root pass you set"[enter] To make your script executable type: "chmod +x [yourscriptname.py]"[enter] Now type: "env EDITOR=nano crontab -e" Make sure the top line in this file reads like this with no quotes: "* * * * * /home/[username]/[nameofyourscript]" Save and exit Now your script will execute every 1 minute. If you want 2 minutes put 2 * * * * instead or every hour: * 1 * * *, day: * * 1 * * I hope that gets you started. 
Would it be crazy to imagine these various libraries authors working together on a PEP ?
hmm, well I don't have any experience with it, but openshift seems to support sqlite and it has a free tier last time I checked. Not sure about any other issues you might come across though. I've heard good things about Digital Ocean if you're willing to pay, but there might be better services out there (I wouldn't really know about this). There are also ways to convert a sqlite database to postgres (some are outlined in [the wiki](https://wiki.postgresql.org/wiki/Converting_from_other_Databases_to_PostgreSQL). There's a [stackoverflow example](https://stackoverflow.com/questions/4581727/convert-sqlite-sql-dump-file-to-postgresql) and a [tutorial](http://blog.flatironschool.com/post/68064669290/porting-sqlite3-data-to-postgresql-database-in-rails-4) on more specific and manual way to do it. Basically it involves creating a dump file of the sqlite database, changing any unique datataypes/syntax issues, and then importing into postgresql. It's not too complicated and interesting to learn (I didn't even know you could export sqlite dbs and import into other types of databases), however, if you don't really know anything about Heroku it could take some figuring out. Either way, it's a good idea to learn about how servers work (since you'll probably need something like this either way, I've used Heroku a ton and Openshfit once). Either one will probably help a lot. 
not really: only fn has an implementation for monads
Well, what does it say in the book?
also too bad the HN discussion of this "died" before it could start: https://news.ycombinator.com/item?id=8054314
I'm a fan of [pythonanywhere.com](https://www.pythonanywhere.com/). It's free for up to 100 seconds of script use a day (remember that a second is a **very** long time for a computer). If you want more time, you can get an upgrade for 5$ a month. It also has a nice built-in feature where you can tell pythonanywhere when to run your script, though, setting more than daily script is a premium user feature.
Completely unformatted, inconsistent, random ... worst instructions I've ever seen.
I agree man. I would have to say that it is not my instructions that suck.. I copied and pasted direct from my lab reports..the true problem will continue as mobile reddit does not automatically detect newline characters and display them accordinglywhen posted...why?!
Even though /u/pro_grampa_ckage already said it, I want to highlight this as well... grab a raspberry pi. You don't need much skill/time/money to make a raspi into a little standalone [whatever]-server. 
I have a small VPS from [yourserver.se](https://www.yourserver.se/), it works reliably and it is quite cheap as far as I have seen. Lowest tier is only 14 EUR a year, and there was a [lifetime 30% off coupon](https://twitter.com/yourserverse/status/473148816406085632) if that is still active.
DigitalOcean is a fantastic VPS provider and very cheap. $5/month for the cheapest option and even less if you have the VM offline during that month.
Look bud. You are more than welcome to proof comments, and I humbly thank you but you wouldn't have written any of that if I hadn't been for my original post. Don't try to tell me not to comment..it makes you sound like a raging arse. 
Well thanks for the proofing
Since this sort of funding model is more attractive to donors and probably draws more money, maybe the FSF could make a Kickstarter-like website for OSS projects? And maybe they could keep a much smaller chunk to cover overhead and help them raise money as well?
As already noted, cron or the windows task scheduler is your best bet. It is also possible to use the [apscheduler](http://apscheduler.readthedocs.org/en/v2.1.2/) module. It runs a function at a given time or periodically. I have used it for a couple of projects and it works fine 
I wish I could upvote this more than once. Shitty instructions do more harm than good, regardless of intentions.
Your sqlite db is just a file. No need to delete or recreate the file if you just want your application to run on a different computer. Another option to what others have been suggesting is to use a while loop and put a sleep call (wait X many ms) before continuing. This means you could just have your app sleep say 4 hrs then auto run again with out needing an external scheduling service. I recently did this with a script I wrote that also scrapes some sites into a sqlite db. Feel free to check out my source code here: http://hg.stephentanner.com/scavenger
How is this easier/better than while True: ... time.sleep(x)
I've tried a few glpk python packages, and I liked pymprog much more than cvxopt. It allow to use all of the glpk solvers and solver options, and I think it's interface for building the equations is much nice.
The Swift developers have stated that part of their inspiration came from Lighttable. 
What do you mean by "push"? Just a simple `HTTP POST` or something else? If it's just a POST request the easiest way would probably be to use some micro framework such as flask.
What if your script crashes or gets killed?
If you do a sleep command, the python script has to always be running. If you use task schedulers in windows or croon in Linux, you only need the computer to be on for the script to run. Also sleep ribs in seconds which will be quite large if it's a one time a day script
This is so true. That is any good engineer will find need for a programming language that can deliver quick answers/solutions or interfaces. Python is extremely good for that sort of thing. You would be surprised to find out how many engineers try to contort things like Excel and matlab into solutions for things that could be done far easier in Python. By the way a spread sheet app like Excel, Numbers or whatever are great tools so I'm not trying to slight these sorts of office apps. In fact I'd go so far as to say learning to program spread sheets is a requirement for most engineers. The trick is to know when they aren't the right tool and to have the ability to code up a solution in programming language. There biggest problem I have with the original poster is this, if you are in school, get formal programming education! That could be a minor or just a few quarters of education. The point here is that it shows up on your transcripts and I believe is more valuable due to being a formal part of your education. Programming skills are in demand for engineers and if it is obvious that you have formal education it will be a feather in your cap. 
I never understood why people insist on using a language that clearly isn't the best tool for the job just because it's their favourite, e.g. python instead of js on web, instead of java on android, etc.
Umm, make sure you have your Generators right.
I always get asked about function wrappers so give those a look because I almost always forget the syntax. Things like what is the difference between __ getattr __ and __ getattribute __ get asked quite often too.
Yes it's http post but sent over https. I'm already building on the Django framework. What functionality should I be looking at?
Expect them to give you a bug involving a mutable container that is being reused unintentionally (either on a class, or in a default argument).
[Computational Physics with Python](http://phys.csuchico.edu/ayars/312/Handouts/comp-phys-python.pdf) is free and teaches some basic numerical methods. It's quite brief, though.
I always ask about generators and decorators, knowing how to use those really indicates to me that you've spent time learning the more advanced tools of Python that are so very useful.
cronjob, if on windows you can use the scheduling to do the same I would imagine.
I got the free version of the Python cookbook from O'Reilly and it was good.
The first book is our coding standard (that and Two Scoops of Django for our Django projects) The second book is a bit dated now but worth the purchase!
It's basically automatic in my experience that you'll be asked the difference between tuples and lists, some basic looping question, PEP-8 basics, and what standard library modules you've worked with. At an intermediate level they'll also cover how instantiation, generation, function passing, and string manipulation work in python, and maybe some Python 2/3 differences if you have claim to have experience with both. For more advanced interviews they'll touch on using decorators, class/static methods, multithreading (especially ensuring that you understand the GIL and its limitations), and the final extremes (to me, anyway) are about metaclasses or writing C extensions. One interesting question that I've gotten before that seems really good, especially for people who call themselves 'Python programmers', is something you don't like about the language. I feel like everyone who is a competent engineer should be able to give some valid answer to this.
really? that's just pointless. asking about the general concept and how to wrap a class with a proxy class makes sense, but who remembers the difference 5 minutes after they're done using them?
I really like the Hacking RSS and Atom book by Leslie Orchard. It's a bit dated, but you learn a whole lot of useful things like state machines in a practical, real-world environment.
Well you could just use one of the process managers around for that such as supervisor, runit, or systemd for example. One advantage of the loop is, that you don't have to introduce more complexity for "long running" tasks which may not be run twice at the same time. Using cron, you would have to do some kind of locking to ensure that another instance of the script is not yet running. Then ... what happens if the application does not release the lock in case of a failure? You would also have to account for that.
I always ask the "what don't you like question" for both development and design interviews. Once someone gets a deeper understanding of a tool or system they find something that drives them bonkers. Tells me how far in they have gotten themselves.
i have dug it deep earlier; pretty good staff ... thank you
generators-step-by-step: http://stackoverflow.com/q/231767/617185
Very cool! I especially like the multicolored edges. Here is an isohedral tiling generator I'm working on called [ashlar](http://ashlar.thirdness.net/#N4IgDgTg9gLrCWAbApiAXKG6QEkASAHASADTjqgBu6A2qAB7oAMZAnswL4kPoCMbnbiEZomAOgCsA0WIIA2ORwC6ZMLR6jpTLhv4h2oncOaStshUZEt9nJVxABndABYATKoCGtXipDI1GCBeaHTGmjaGQlZivFIRALTiTADsyc4AnJlyvAQSAMxMrsl5EpYmea5xBokxBJn12bkFRXnOZTLOznnJVeg1la4ZWTn5hcXJ7eKd3b1oNc5yQ8NNY3l5k5JdPWa8vJUbEtsJU6lLjaMtbVEmckfV4gUEacsXxevXMgSV0v3Je0PnZrFUofcQELazGq8QpnEZA1obIh3PriVyuf4veFXDTidLfY5iJgEboAuGrbFhXGQ1Ewhpklog3RaZRkABG6kpzI+egM2l8AGMOVYuTiYjMflM1s90oDVu9Ra1xQTeFLSStLgcRZSxHIJHJ8byxSTMeTEfrZpLjTL6W92jzbBx7HAoIgKI4YNAANaoNB6aAwDwweBQAB26HR6UdQAA). 
Yeah I've been asked this
Wow, this is nice
&gt; Well you could just use one of the process managers around for that such as supervisor, runit, or systemd for example. I don't think OP needs a long running process. And he probably doesn't need locking either. Rather the opposite, he wants to parse a website regularly because - I assume - there is different data each time. So it's good if a new process is triggered even if there's a previous one still running.
Even crazier than Rex (https://pypi.python.org/pypi/python-rex) :( There is a need for a "regex for humans" lib, but unpythonic operator overloading isn't the way forwards.
As a beginner transitioning into intermediate level, I can't find a reasonable excuse to use decorators in any of my functions. Could you give a quick example?
Just to be clear, here. This is only really useful if you use generators to solve [memory consumption issues](http://stackoverflow.com/a/102634/86263) at run-time or to perform async operations without having to use threads. IMO, I would _NOT_ care if a dev knew this. I would care more about whether the dev knew if/when to use processes, threads, or async. I would also be ecstatic if the dev knew that using threads when performing computationally intensive operations is a major no-no (see GIL). Also, see _Motivation_ section in [PEP-255](http://legacy.python.org/dev/peps/pep-0255). Edit 1: Added _NOT_. :) Greatly changing the meaning.
I think this is really cool and a clever use of magic methods, but I wouldn't personally use it for all the various reasons why using little-known DSLs is annoying. I would kind of like if regex operations were baked into the language though, like in Perl and Ruby.
This would definitely be a plus, if they knew to avoid these sorts of situations.
**Coding** Have the candidate solve [Fizz/Buzz](http://en.wikipedia.org/wiki/Fizz_buzz). **Tool-specific Knowledge** If you're using a framework such as Django, Twisted, Tornado, Pyramid, SqlAlchemy, or ZeroMQ then ask them about it. **SDE Stuff** Ask the candidate questions about data structures and algorithms. Ask them to implement a Binary Search Tree and then ask them questions about algorithmic complexity on Insert/Look-up. Ask them what their top three fav sorting algorithms are, and to implement one of them in Python. **Security Stuff** Ask them what the dangers of using `eval`, access data with raw sql vs passing params to stored procs, or allowing arbitrary access to the file system via API calls. **Day-to-Day Stuff** Ask them about how to sandbox Python deployments (with tools like pip, setuptools, virtualenv, etc). Have they ever had to package a Python project up for deployment? **Editor Stuff** 2 or 4 spaces. If the candidate answers 2 but has an intelligent answer, then they're still good to go. If they answer 2 but don't know why, and don't know that its not the community standard, then ... ick. **Community Stuff** Ask the candidate how they learned the language. Ask them how did they find the answers to questions along the way. This will give you huge insight into how well they know the language, how well they interact with others. In the end, Python is an easy language. If they're a good SDE and a great fit to the team, hire them anyway. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Fizz buzz**](https://en.wikipedia.org/wiki/Fizz%20buzz): [](#sfw) --- &gt; &gt;__Fizz buzz__ (also known as __bizz buzz__, or simply __buzz__) is a group word game for children to teach them about [division](https://en.wikipedia.org/wiki/Division_(mathematics\)). Players take turns to count incrementally, replacing any number divisible by three with the word "fizz", and any number divisible by five with the word "buzz". &gt; --- ^Interesting: [^Pseudocode](https://en.wikipedia.org/wiki/Pseudocode) ^| [^List ^of ^drinking ^games](https://en.wikipedia.org/wiki/List_of_drinking_games) ^| [^Surface ^lure](https://en.wikipedia.org/wiki/Surface_lure) ^| [^Pin-tailed ^snipe](https://en.wikipedia.org/wiki/Pin-tailed_snipe) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cj1ysss) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cj1ysss)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Oh, and here's another question. The suggestions we're giving here on what to ask really depends on the role. Is this a devops role writing lots of system-related code? Or is it a web development role? Or, is it a middleware development role? Is it a data scientist role? 
Generators are also useful if you're implementing container classes, since they greatly simplify writing the `__iter__` method. Yes, you can just return a list, but generator code is arguably easier to read.
From my post: &gt; I don't really suggest that anyone should use this, but it was fun to make and maybe it will give you some ideas on how you might improve the syntax of other libraries.
I saw that as well, but I was kind of responding to this from your post: &gt;What do you think? Easier to use? That may not have been how you meant it though.
I agree with the author, there's a lot of unwanted boilerplate code when it comes to using Python's re module. However, the solution's API needs to be simple. I liked where he was headed with this part: &gt;&gt;&gt; re.get_matches('([0-9]+)', '123foo') ('123',) &gt;&gt;&gt; re.get_matches('([0-9]+)', 'abc') None Unfortunately, operator overloading really confuses the issue. Using the division operator is especially problematic due to its high precedence. For example, as this badly-contrived example shows, mixing in other operators may not give you the desired results: R/'([0-9])'/userPassword + '!&amp;my_SaLT~~' [The division operator binds pretty early](https://docs.python.org/2/reference/expressions.html#operator-precedence), before the string concatenation. Because you want this operator to group expressions, I think the "regex" operator should bind very late, maybe at the same level as the ``**`` operator (just before parentheses and square brackets). The other problem with using operator overloading in this case, is using a binary operator to delimit expressions, which just confuses the point of the operator. It's supposed to go between expressions, not surround them, so you end up fighting with Python's parser instead of having it work for you. 
Decorators are essentially just higher order functions, and there are tons of uses for those (see functional programming). Higher order functions are ones that take a function as an argument and use it in a more complex manner than it was originally intended. The map and filter functions are well known examples of these types of functions. Decorators are a bit different, they let you modify a declaration of a function so that it always has that desired behavior. Common usages include monitoring inputs and outputs for logging or memoization, modifying inputs or outputs to simplify the definition over a common pattern, or even things life rate limiting calls if you're accessing a third party service (like reddits API). For great examples of powerful decorators, look at the nose test framework, flasks routing system, the built in property decorator. Personally, one of my favorite decorators I've implemented was one that let me just put `@async` in front of the def so that any time the function was called, I instead got a promise back that would be run in another thread automatically and I could get the value out with `.result`, wait on the thread to finish, and inspect any exceptions raised. Another good example is written was implementing a background process that could be canceled by the user. I chose to do it by raising a custom exception whenever the flag was set. Instead of putting lots of checks manually in my code, I wrote a decorator that checked the flag and raised the exception if necessary, and applied that decorator to methods that got called frequently. Those methods didn't have to worry about the cancelation feature, and I didn't have a lot of noise in my code from it. 
Imagine that you want to use memoization to calculate fibonnaci number, you can do: __fib_cache = {} def fib(n): if n in __fib_cache: return __fib_cache[n] else: __fib_cache[n] = n if n &lt; 2 else fib(n-2) + fib(n-1) return __fib_cache[n] But you can use the lru_cache decorator from functools to write more readable code: @lru_cache(maxsize=500) def fib(n): if n &lt; 2: return n return fib(n-1) + fib(n-2) 
You know, they haven't actually told me. My guess is middleware/devops.
You might want to post that again here http://www.reddit.com/r/Python/comments/2b53er/playing_with_pythons_magic_methods_to_make_a/ ;)
yesterday I was writing an in-class decorator with optional arguments and when I was done the code looked hard enough that average-joe programmer wouldn't know what's going on...if you don't know how decorator functions work you should learn that.
Maybe that means that you would benefit from a simpler design?
How does this compare to Ansible? Seems pretty similar. Are there significant differences that make it better for some things?
2 or 4 spaces. Oh man I'd always answer tabs. My editor worries about the spaces.
I would definitely care if a Python dev knew what generators were and when to use them. It's pretty common to deal with huge lists/large text blobs. 
How was it moving to C++? I feel like I would grow a bit sick of maintaining a large C/C++ codebase after dealing with Python for most of my life.
You're absolutely right, Ansible is probably the closest of the existing solutions. I definitely want to compile a detailed matrix comparing Blockwart to the other big names out there, just didn't get around to it yet. Overall, Blockwart is a somewhat smaller and simpler tool. One example would be Ansible's modules. Instead of uploading code to the node, Blockwart will only use the binaries (mostly coreutils) already on the node. This makes it very easy to reproduce exactly what Blockwart is doing for debugging purposes and also means that there will be absolutely zero footprint on the node. Ansible defaults to INI- and YAML-formatted files, while Blockwart will have you write Python from the very beginning. Some people will like this, some won't. Then there's item-level parallelism, which may be not the most visible, but largest architectural difference. I did not completely verify this one (so please correct me), but I believe Blockwart is the only system out there that will work on multiple items on the same node simultaneously. For example, one connection to the node will be used to install a package (takes a long time), but three other connections can complete smaller tasks (like uploading config files) in parallel. This will reduce run time for complex configurations quite a bit. That's just from the top of my head and it's getting late. I will definitely add more comparisons to the docs soon. Thanks for asking!
Try peewee? :D
lol hi author! i ended up using it. though ive ran into an issue with proxy database connections i cant seem to figure out...
I think tabs are equivalent to 8 spaces on stock vim though, and you run out of room pretty quickly with that. 
You might want to reconsider the name, seriously. Yes, I've read your FAQ entry and I think it's bullshit IMHO. You want to "keep on having this debate and walking this line" about Nazi terminology? What does that have to do with this project? You're trying to advertise your app here, and at the same time chose a name that you know will turn away a lot of users.
No, it's part of a module I'm building for work and intend to open source it at the end of our project. The decorator was for caching...it just *looked* complicated, and only if you don't know how decorators work.
C++ or Python. Its pretty much the same. Just because in one you build your project before you run it and you manage your own memory (some of the time) it doesn't mean building software changes. You've still got to be concerned about algorithmic complexity, memory management, and blocking tasks. Large Python projects are just as annoying to maintain. Vim [Tabbar](http://majutsushi.github.io/tagbar) helps to navigate a project. Also, writing/maintaining good documentation is invaluable. 
www.pythonanywhere.com They offer a cheap service that does exactly what you're looking for. Great place to start given your fairly new to Python.
 def example(thing=[]) thing.append(1) return thing What does example return the second time it's called? Hint: it's not [1]
You're right, but from what I've seen: * C++ projects get larger faster, due to verbosity and the requirement to more manually manage memory (even with RAII) * Python, and most dynamic languages, are simply more fun and simple to write in than a language like C++
Here's a relatively simple one for initializing static variables in a function: def static(varname, value): def decorate(func): setattr(func, varname, value) return func return decorate @static('some_counter', 0) def inc(): inc.some_counter += 1 return inc.some_counter When inc is passed to the decorator, it simply adds the desired static variable.
Suppose you have a handful of functions that occasionally raise exceptions and you want to put all those exceptions in a log file so you can keep track of them. You could use this decorator by putting @log_exceptions in front of any function whose exceptions you want to log. Of course, you could do all this code inline, but that would be a lot of code repetition and ugliness and if you ever wanted to change how the errors get logged, you'd have to change every place the code was implemented. def log_exceptions(func): def wrapper(*args, **kwargs): try: return func(*args, **kwargs) except: with open('exceptions.txt', 'a') as f: traceback.print_exc(file=f) raise return wrapper @log_exceptions def foo(...): # Your code here... 
They sure haven't produced perl-6.
EDIT: and now I see you're calling the placement functions inside another function. We can do that. This would be a LOT easier if you used classes, but with your current method, how are you setting bsV1? It sounds like you are setting bsV1 inside a function: def setBSPosition1(): bsH1 = [something] bsV1 = [something] and then trying to access that inside another function: def getUserInput(): if verticalUserInput == bsV1: Which will throw that error because bsV1 is only noted in your setting function. Python thinks that the bsV1 variable is only for that function, and thus you cannot access it outside of that function. Try putting: print(bsV1) outside of all functions right before you call getUserInput. If it throws the same exception, that means that the variable isn't getting set the way you want. If thats true, try putting: print(bsV1) inside the function you use to set bsV1 (setShipPosition or whatever). If that succeeds, your problem is that you aren't setting the variable outside of the function. An easy way to fix that would be to add a line to the end of your function: return bsV1 and instead of calling the setting function directly, set bsV1 outside of the function equal to what is "returned" bsV1 = getShipPosInitialV1() Using a "return" statement tells python to make the function _return_ a value. That means that when you call that function, you can either drop the output: setShipPos() or keep it: pos1 = setShipPos() by keeping it named bsV1 like you were using in your other function, it should let you use it. You can always bring in the values to the getUserInput function like so: def getUserInput(bsV1=bsV1, bsV2=bsV2, bsV3=bsV3, ...): and getUserInput(bsV1=bsV1, ...) Also, you can return multiple values at the same time: return bsV1, bsV2, bsV3 ... and bsV1, bsV2, bsV3 ... = randPlaceComputerShips() Or, because you are just using functions to allow easier access to things, and probably don't care about the negative stigma associated with the _global_ keyword, we could just do this to avoid writing an essay: global bsV1, bsV2, bsV3 ... In the functions that will need those variables, either to set or access. This tells python that these variables are meant to be _global_, which means that they are meant for the whole program to access.
Annnndd... no job for me.
Digital ocean
&gt; Is this just because you prefer writing python code over java? Pretty much. I started majorly programming in C/C++ and PHP, and Python feels more natural to me. &gt; I am just concerned about whether apps written in python for android (or iOS) would be as feature rich, or have the ability to run as efficiently as a native android app. I'm not sure how Plyer works to make the APK, but things like Phone Gap let you write in HTML/JS/CSS and it converts a lot of the things to Java thanks to Java's WebKit. That's also why its possible to access things like SMS and such with those, because it really just contains your 'site' in Java, and passes the Java references over through JS. Plyer most likely works the same, and extending it to more features is actually pretty easy looking at how others like notifications and SMS are handled. Performance wise, I think it comes down more to how you program it than what you program it in. Java is going to give a slight edge due to it being compiled where Python runs at runtime, but unless the person is using a very low-end or very old phone, I don't see where it'd be (that) noticable. This is solely based off of running previous code in the emulator, not an actual phone. As for the "why not just in Java?", its most likely because that's where it originally started. Until all these wrappers like Plyer came out, you had to write it in Java, so people who wanted to make apps had to learn the language. This is great for those who want to go that route, but not everyone likes the language or wants to learn yet another language. Its like why I don't learn Ruby. Its similar to Python (as Java has similarities as well), but I feel comfortable with Python and the syntax for Ruby just bothers me for some reason. Personally I say use what you feel comfortable with. If you want to learn another language then awesome, but unless its necessary I don't see why you can't just do what you want to.
Thanks! :)
I have done the same many times. I like to use tuples &amp; I set X = 0 and Y = 1 global variables so that I can write stuff like if ship[X] == missile[X]: ...
"commercial grade" in what sense? I mean, really, if you look at things like Phone Gap, they tote about how some big-name companies like BBC use their system to develop their apps. You go to the app store and see 4-almost-5 star reviews for these. While Phone Gap != Pyler, it gives you an idea as to what people are looking for (experience vs. programic realism).
Learn Python the Hard Way is an incredible book for beginning programmers. Two people on my team started with it. As for TJO CONNER, I have no idea what that is. Care to illuminate me? 
I'd expect a candidate to know why there are two methods and what the difference is-- if you've ever written one, you'll know. As for which is which, it would make no difference if the answer is, "I'd have to check."
How much does this cost?
Cool, thanks for the info! Yeah, as far as I know Ansible won't do item-level parallelism. That is a pretty cool feature, provided it has some concept of dependencies. I'm looking forward to seeing where this project goes!
Javascript is good, when the project is small and not many javascript needed (Eg , web site with not many dynamic elements). Javascript start to suck when you got to maintain &gt; 10 of thousands of lines of code. HTML5 + Javascript is no longer viable on that case. Eg Web based , Desktop/Mobile Applications with desktop like widgets. Thats why Google Invented GWT (where Java Compiles into Javascript).But Java is Hard to read , too long to write , not dynamic. As javscript become very fast thanks to V8 , non GWT solutions are become popular, Coffescript (And its Variants) , oo-js (qxdoo , typescript) You got to design huge project from scratch to understand that. For the projects i have in productions , with &gt;30k lines of Qooxdoo (object orient javascript) code, we really want to replace that with pythonjs.
[Dive Into Python](http://www.diveintopython.net/) Is also quite good
Same goes for me. I was about to apply for a pretty nice job. I know a guy that can get me to the front, but I don't want to make him look bad. Lol :(
I just realized I should've posted this to learnpython. I've been playing around all day with the passing variables from functions. I've tried global variables too. This is what I have so far. http://pastebin.com/FbZbXnu8 It works up until it goes to see if the user input for a hit/miss. I may try the tuple suggestion tomorrow. I've been taught that global variables like these would be a bad idea, but I may give them a shot tomorrow too. Thanks!
Kind of seems like the author is more interested in fighting a political battle of pedantry, or perhaps being edgy, than writing good configuration management software. Not interested in any open source software project that cares more about a name than the inclusiveness of the community or the quality of their product. Sadly too many people want to ignore the fact that inclusiveness is about how you are perceived rather than about what your intentions are.
Perhaps you are thinking of the [IPython Notebook](http://ipython.org/notebook.html)?
Who-ee. That's a biggie. So, first things first, here's a template to get you randplace functions working. def randPlaceComputerDestroyer(): to def randPlaceComputerDestroyer(grid): to pass the grid in properly. Here: if stopPlacement == False: grid[C_desV1][C_desH1] = "*" grid[C_desV2][C_desH2] = "*" grid[C_desV3][C_desH3] = "*" return C_desV1, C_desH1, C_desV2, C_desH2, C_desV3, C_desH3 You are only returning if stopPlacement is false. Not sure if that is correct, it might be. def randPlaceComputerBattleship(C_bsV1, C_bsH1, C_bsV2, C_bsH2, C_bsV3, C_bsH3, C_bsV4, C_bsH4, C_bsV5, C_bsH5): Should be def randPlaceComputerBattleship(grid) as you are tossing whats in C_bsV1 right afterwards anyway. The only change that you appear to have to make is: C_bsV1, C_bsH1, C_bsV2, C_bsH2, C_bsV3, C_bsH3, C_bsV4, C_bsH4, C_bsV5, C_bsH5 = randPlaceComputerBattleship(grid) C_acV1, C_acH1, C_acV2, C_acH2, C_acV3, C_acH3, C_acV4, C_acH4 = randPlaceComputerAircraftCarrier(grid) [etc] print_grid() To catch the returns. Right now you're just dropping them. Like if you wrote 2 + 3 but didn't assign it to a variable. Also, print_grid should take grid as an argument: def print_grid(grid): As you said, saving them is lists makes it a bit easier to read. Here's what it looks like: In placeComputerCruiser: return [C_cruV1, C_cruH1, C_cruV2, C_cruH2] In getUserInput/placeComputer: cruiserLocation = randPlaceComputerCruiser(grid) C_cruV1 = cruiserLocation[0] [etc] Or you could rewrite the getuserinput collision stuff to use the lists. Global variables are usually considered a bad idea, but in this case you only have a few options, and they are essentially the easiest. You can always take them out. 
Thanks a lot, I think that actually might be it. Thanks
Junior or senior position? They're entirely different.
Thank you for your comment. I honestly picked the name because it was the best I could think of that wasn't completely abstract and had some relation to what config management does. Of course I'm aware that the name will turn away some users. I'd like to understand why though. I personally talked to everyone who had concerns so far and asked them whether I should change the name. The end result was always along the lines of "nah, just go for it and see how it goes". That's what I'm doing here.
What makes you think I care more about the name than quality? Your point about inclusiveness is valid of course. Thing is, the overall reactions so far were not that negative (see my reply to your parent comment). And I didn't want to back away from a somewhat fitting name because somebody *might* find this offensive. I just don't know how big a deal this is for people and why. I hope I will find out in the course of this thread and that's good. If this turns into a neverending shitstorm and people really pay more attention to the name than the product itself, then I will change the name.
Glad you like it :) Yes, dependencies are a must for this and it took quite some time to get this right. There are some built-in dependencies, so most of the time, Blockwart will do the right thing. Then you can define your own deps on top to really customize things. If it gets too complicated, `bw plot` will create a representation of your dependency graph that you can feed into graphviz for a graphical overview.
Aand my title apparently edit: I think there's a CSS wrap issue on /r/python. The title doesn't appear for me, but when I look in my post history, I see the whole title.
Mid-level
TJO Conner - Violent Python? LPTHW is a much better choice IMO.
If the job involves comp.sci. in any way, expect questions on vectorization (e.g. numpy), numerical algorithm libraries (e.g. scipy) and multiprocessing.
Why do you care if it's been used by nazis or not
Pardon me, but a good implementation of a @cached_property decorative should make the member function code totally indistinguishable from an normal @property except maybe the need for a call that clears the cache every time a class attribute is updated. How does that make the code complicated?
OP meas T.J. O'Connor, Violent Python. 
If you are into analysis or python notebook, try computable. I have been using it since day 1, very happy with it.
It boils down to django packages that prject might potentially use. Take a look at djangopackages.com Currently out of 2397 packages hosted there only 380 are compatible with Python 3.
Let it go. The guy was looking for interview help, I gave him a suggestion. I'm not here to debate my project.
I'm asking stuff that have to do more with how you solve problems with these tools. What can you achieve with these methods? When would you consider using them? etc.
I'm usually asking 2 kinds of questions: generic programming and architecture problems, and how you'd approach them, and python specific stuff. I'm only asking the Python stuff if a candidate says he's proficient in Python, to gauge their depth of knowledge. So I'd start with generators vs lists (range/xrange, maybe a fizzbuzz generator), advance to decorators and context managers, see if they know about the GIL problem, concurrency issues, async IO, etc. It's usually just a measure of the depth of knowledge, not of skills. I use a real programming assignment to evaluate skill.
I completely agree with you. These are things I'm aware of that exist but would Google to remember the syntax. Find them quite pointless for interviews yet I encountered them on multiple occasions 
If the cost of staying with an old version were bigger than the cost of upgrading *and training*, then Windows XP wouldn't still have a 25% usage share. http://en.wikipedia.org/wiki/Usage_share_of_operating_systems#Desktop_and_laptop_computers
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 1. [**Desktop and laptop computers**](https://en.wikipedia.org/wiki/Usage_share_of_operating_systems#Desktop_and_laptop_computers) of article [**Usage share of operating systems**](https://en.wikipedia.org/wiki/Usage%20share%20of%20operating%20systems): [](#sfw) --- &gt;There is little openly published information on the usage share of desktop and laptop computers. Gartner publishes estimates, but the way the estimates are calculated is not openly published. Also, sales may overstate usage. Most computers are sold with a pre-installed OS; some users replace that OS with a different one due to personal preference, or install another OS alongside it and use both. Conversely, sales underestimate usage by not counting infringing copies. For example, in 2009, approximately 80% of software sold in China was pirated. In 2007, the statistics from an automated push of an IE7 update onto legal copies of Windows contrasted with observed web browser share, leading one author to estimate that 25â35% of all Windows XP installations are illegal. &gt; --- ^Interesting: [^Operating ^system](https://en.wikipedia.org/wiki/Operating_system) ^| [^Microsoft ^Windows](https://en.wikipedia.org/wiki/Microsoft_Windows) ^| [^Comparison ^of ^operating ^systems](https://en.wikipedia.org/wiki/Comparison_of_operating_systems) ^| [^Smartphone](https://en.wikipedia.org/wiki/Smartphone) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cj2g6er) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cj2g6er)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Programming Python By Mark Lutz. Starting form the basic it goes to hight limits as Python internet programming multithreading CGI and alots more it is one big book
Neat! Thanks!
I had a very similar issue when I named my Google Spreadsheets ORM fuckitdb. I was inspired by fuckit.py and thought that it was quite funny. When I posted in my countries' user group asking for feedback and code review, I caused a huge divide between people who thought it was funny and those who were outraged. I ended up changing the name to [butterdb](https://github.com/Widdershin/butterdb) because I was sick of it.
&gt;Take note that most of those packages can be ported/rewritten to python 3 in a matter of hours so it's kinda irrelevant. Unless OP is willing to do that for every package required in his own free time, it's relevant.
You don't have to pay to learn Python, and LPTHW is garbage. If you don't believe me, do a search /r/learnpython for "lesson 39" (through about 46 or so) and see how many posts there are talking about how they don't get Classes. The guy does a piss poor job of explaining OO concepts and you have to pay for it! All I'm saying is most people that I know who know python (myself included) never paid for any books. Check out python.org, codecademy, and hackerrank.com.
The only potential cost in future is due to the fact that python 2.7 is only supported until 2020 (for now), so you might need to upgrade to 3.x in 6 years if nobody continues to provide security updates for 2.x.
urlib2 is in different places. range changed to xrange. also print does not have parenthesis. 
Ok, thanks, that's nice to know. We're working on a one year scope for a single product, so that kind of cost won't matter much yet, I guess.
Of course you shoud be able to call your project however you like. Surely there are many interesting discussions to be had. But (I assume, based on this thread and your defence of the name in the docs): quite a percentage of potential users will have the knee jerk reaction of *"Blockwart" -&gt; bad/stupid/provocative naming choice*. I sure had, and there is no way I could sell this project at my University here in Germany, even if it danced circles around Ansible. And that, in the end, is just bad marketing.
Most of you seem to think its 2.7 to 3.3 and what to watch out for, he is downgrading, so the answers are different. I would just say to learn what new modules came in with py3 and stay away from them.
Employers should at least be interested in evaluating Python 3, now that critical mass is starting to be achieved. Unless you have a lot of existing code that you would need to port, you could make the case that it is worth doing a pilot project with Python 3, to see if there would be any obstacles to a wider rollout - perhaps to tackle some of those immediate obstacles - and evaluate whether it delivers any immediate benefits for your use cases.
I understand your anger here but you don't necessarily have to pay for it. There is a free version that can be read on the net. Not bad for a first time read. Of course, to totally understand OO concepts a well documented 'book' would be the answer. 
Fair enough. Saying you care more about the name was a cheap shot. If it were me, is have probably changed the name the moment anyone was more interested in debating the name than the merits of the software. I just wouldn't want the distraction. As I understand it, Germans are especially bothered by anything even vaguely Nazi related. I suspect this would fit nicely within that box. If it were me, potentially turning off an entire country to my project would be reason enough to change the name. Then again I am not German, so it is possible that their distaste for Naziism has been overstated to me. There is no morality issue here. You're not wrong or evil for using the name. What this is about is taste and sensitivity.
Then again, maybe you are German. I don't know. But I think my point about the name being a distraction stands either way.
Learn how to create 2.7/3.3 compatible code if you aren't doing so already. It may a bit tedious having to create code which always compatible with both versions - but you don't want to be stuck in a situation where you need to add a library which is only usable on Python 2, and end up having to convert either your codebase or the library you need just to finish the job. If you're working with other people who are still stuck with Python 2, it'll probably be easier to push 2.7/3.3+ as the next step instead of advocating Python 3 only. It'll be safer for them knowing that they can still run on Python 2, and at some point in the future you can just flip the switch and go for Python 3 only code. The situation will improve in time.
Why his own free time? What place wouldn't pay you for building and securing robust working platform.
I don't play a lot of games on my phone, so... lol. ;) "Commercial grade" is a relative term, is what I'm getting at.
&gt;What place wouldn't pay you for building and securing robust working platform. The one that already has such thing. Python 2 is secure and robust.
[Python in Practice](http://www.amazon.com/Python-Practice-Concurrency-Libraries-Developers/dp/0321905636/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1405860542&amp;sr=1-1&amp;keywords=python+in+practice) is nice because it not only covers some advanced python techniques, but it also covers general design programs such as flyweights, adapters and abstract factories. be aware the code samples provided are python 3, however you can generally figure out how to implement the examples in python 2.
Fork it
I actually think KickStarter's fee are pretty reasonable. There are alternatives, so wouldn't have used kickstarter if I felt it was an issue. :)
I don't know about python. but it seems libpcap is what is used for that. There seem to be a few python bindings for it. http://sourceforge.net/projects/pylibpcap/ https://pypi.python.org/pypi/pypcap http://corelabs.coresecurity.com/index.php?module=Wiki&amp;action=view&amp;type=tool&amp;name=Pcapy 
The Official Python Tutorial is the very first place to start. Then try LPTHW, then once your rolling on your own code Doug Hellemans Python Module of the Week is indispensable as it walks through the Python Standard Lib with examples.
 R/'(foo|bar)'/'replace foo and bar' % 'Huey!' As a vi/bash user, this is so *incredibly close* to sed syntax, it hurts. I suppose it wouldn't take much more magic to do this: S/'(foo|bar)'/'replace foo and bar'/'Huey!' ... and have that be valid Python that does the right thing.
Could you be so kind and read Q1? :D
Hehe, I was hoping you'll just try it and you'll tell me the answer :)
Paywall, FYI
@chrisalbon Data Origami is exactly what I have been waiting for. Itâs Twitch for data science. Pop a beer, relax, and learn. @treycausey Hard to overstate the individual educational impact that @Cmrn_DP has had with his projects.
&gt;But Python 3 is better Uhmm, from production perspective? No it isn't. The language has some improvements, but that doesn't mean it's a better language for the project. &gt;at the end of the day you'll reap the rewards. Tell me one reward that outweighs invested time, that you gain by going with python 3 and porting all the modules that you need but that don't support it? &gt; the only support it will receive is bug fixes Which is what you need if the language is stable. And as OP said, they expect to maintain the project for a year - python 2 is supported for next 6 years. If you're starting a django project, you don't care about the fact that `pathlib` etc is in stdlib. Plus with 95%+ users still using python 2 (according to pypi stats from few months ago) it's not going to be in any kind of dust any time soon.
You are really driven, huh?
No, we wouldn't? Saying "why have 128KB of memory when 64KB memory is so much better" makes no sense even. It'd be a regression, much like how using atom.io instead of the aforementioned options is a regression. In fact, if we based our tools on "there is a tool X but I am deliberately going to use Y, which is worse than X" , we'd eventually end up making fire with fricking flintstones.
That's some really cool stuff, and seems very well done! I may wait for the "Expert" things to come out, because I already know most of the stuff in the other videos. Although I don't necessarily know the best way to implement them in Python, so that aspect is interesting too!
* [387](http://legacy.python.org/dev/peps/pep-0387/) - essential, not sure how the heck it wasn't even there before * [441](http://legacy.python.org/dev/peps/pep-0441/) - might help with some of the deployment pains, especially if there's a way to run a full venv with it * [448](http://legacy.python.org/dev/peps/pep-0448/) - good stuff, saw some usecases for it in the wild * [455](http://legacy.python.org/dev/peps/pep-0455/) - minor, but useful * [471](http://legacy.python.org/dev/peps/pep-0471/) - faster `os.walk`, just a nice thing to have * [473](http://legacy.python.org/dev/peps/pep-0473/) - cool for IDEs/debuggers/logging, more information == better
This is a package put together by an undergrad. All this this stuff is simple. If you cant do these analyses you are too stupid to be using a computer machine.
Nazi name aside, do you really have to call this "Config management for humans?" For fuck's sake.
I always made my co-workers angry because I always used the [alternate control syntax](http://php.net/manual/en/control-structures.alternative-syntax.php) in PHP, because I hated brackets and wanted to more clearly see my code blocks: if ($a == 5): print $a; endif; Then someone mentioned if I hated loved the alternate syntax and hated brackets, why not try Python? if (a == 5): print a Glorious! I've never looked back. 
I'd like to see 441 (http://legacy.python.org/dev/peps/pep-0441/) Packaging is still way too much of a PITA in python. PEP 441 doesn't resolve all issues, but it certainly is a step in the right direction especially for newcomers.
Indeed it does. And yes, I am German.
Question: I just finished Coursera's course on python (would recommend btw) and LPTHW. Where can I go I to study more advanced python? Any MOOC's offering anything beyond entry level?
Yeah me too. The more I think about it, I'd also love to have [exceptions in expressions](http://legacy.python.org/dev/peps/pep-0463/). 
I definitely will, thanks for asking.
Just a warning, Scapy can be a bitch to get setup and is not 2.7+ compatible out of the box
I've been waiting for 3143 (http://legacy.python.org/dev/peps/pep-3143/) for a long time.
Honestly the best thing I ever did was pick my favorite Python package or app written in Python and start reading. When you come across something you don't know look it up. I started with [reddit](https://github.com/reddit/reddit/tree/master/r2/r2) and [Sickbeard](https://github.com/midgetspy/Sick-Beard/tree/development/sickbeard) and [requests](https://github.com/kennethreitz/requests/tree/master/requests). Try to pick something known to be PEP8 compliant. It will make your learning easier
Guido is against this one (see his 2014 Keynote).
Don't forget about string types. Also, http://python3porting.com/noconv.html
You're changing the value of D1, but then you're printing D2, P1, and P2, none of which you ever changed the value of.
You're assigning every letter to D1. 
This looks pretty cool but I'd probably want to wait before there was more content before subscribing.
The only assignment you make in the code is like this: D1 = "A" #or "Q" or "J" or whatever And yet you never print D1. You print D2, P1, and P2, but none of those ever get changed from what they were originally assigned to by the randrange function. (by the way, if you indent 4 spaces the code will be presented with code formatting on Reddit).
Also, there is a much easier/better way to assign a lot of things like this instead of a ton of "if this then that = this" approach. card_dict = {1:"A", 11:"J", 12:"Q", 13:"K"} D1 = card_dict[D1] 
I kind of assume security improvements will make it in by default, because, well, security's important, yo.
http://youtu.be/0Ef9GudbxXY?t=8m45s Basically he says "You should try to resist the urge to put everything in one line".
Yep, but it's a very different approach.
Thanks everyone, who knows how long I would have gone before I realized I did change the D1's.
Check the permissions of the downloaded files.
The random module has a choice function. Run it on your list to get a random item from that list.
Thanks, I new a lot of this stuff several years ago in college, but I haven't touched it since and have forgotten a lot of it.
Thanks for the help!
So others don't have to open those PEPs manually... http://legacy.python.org/dev/peps/pep-0387/ http://legacy.python.org/dev/peps/pep-0441/ http://legacy.python.org/dev/peps/pep-0448/ http://legacy.python.org/dev/peps/pep-0455/ http://legacy.python.org/dev/peps/pep-0471/ http://legacy.python.org/dev/peps/pep-0473/
If you don't need to do any coding, and just want to show mathematics, then it will be much easier to just learn LaTex. It's like a programming language of its own, but its the standard in formatting papers.
Yes, but its cheap and gets you access to a lot of material.
True but it is a new project and I thought other people might like to know 
I've created this to save some time when designing [argparse](https://docs.python.org/2.7/library/argparse.html) interfaces. It is written in [brython](http://brython.info), the browser python, which is transcompiled to javascript. So far, there is just basic GUI, but patches are welcomed :)
I'd pay for this. However, the 8-10 minute screencasts aren't enough. Minimum, I'd expect a 30-45 minute tutorial once a month, with 2-10 minute snippets at least twice a month. It looks well done and will keep my eye on it.
Disagree. Email is pretty much the worst protocol still in wide use on the internet (FTP isn't really in wide use any more) _except_ for the fact that it's decentralized and not owned by any one corporation. Slowly replacing email with a standardized REST API would be an incredible improvement on the internet's infrastructure. I've been saying someone should do this for years. Obviously, anything that replaces the email protocol needs to be backwards compatible for the foreseeable future, but that's all the more reason to make something good today. WhatApp, Line, iMessage, Facebook messenger, Twitter DMs, etc., etc. are all ways that the market has shown that we need to replace email with something better, but it's not practical to do it all at once.
I still don't get why people run into this. For my understanding, can you give an example where: * You accept a mutable value * You mutate it * It makes sense to have a default What situations call for this?
Thanks for this. Right now I'm making a website with Flask and it's teaching me quite a bit for exactly that reason. 
Yes please. I find myself trying this all time and forgetting it hasn't been implemented. Is there any plan to push it for 3.5? I haven't seen a whole release cycle since starting with Python so I'm not sure how these things work.
Quick question: what's the best way to examine a package? I use pydoc but my packages i.e. Flask, wtforms etc don't appear in the pydoc database. Do I have to find their respective websites in order to learn more about them?
Point taken. University of Waterloo and his ridiculously simple examples makes it very sad for him.
https://github.com/reddit/reddit
Any idea if it's close to being accepting? Excellent idea BTW!
&gt; Email is the database of your life. It's the digital home for your conversations, memories, and identity. Even more than 30 years after its invention, email is the center of our life online. not true. I made it a point to give up all but work email a couple of years ago and i've been fine. and since we use slack, our email needs have been drastically reduced. 
&gt; Any idea if it's close to being accepting? The overall opinion is very positive and the only barrier is finding people to implement it, or fix the old implementation. Unfortunately my skill in that department is definitely not where it would need to be. The core devs are less excited about it than I want them to be, largely because they have a lot of stuff they (rightfully) think is more urgent. So it's a gamble. If somebody implements it, it'll be in that release. What release that is is anybody's guess. &gt; Excellent idea BTW! Just to make doubly clear: it's not my idea, I just wrote the PEP.
As I said [here](http://www.reddit.com/r/Python/comments/2b7rqh/which_open_pep_would_you_most_like_to_see_in/cj2u6ii), it's a manpower thing. Nobody has decided to fully take this up yet, so nobody knows when it'll be done.
Well anyway it was a new to me project that I just found and thought other people might like it. Guess not
I'm very biased :-), but [PEP 471](http://legacy.python.org/dev/peps/pep-0471/). In it I propose adding `os.scandir()`, which is like `os.listdir()`, but doesn't throw away the important file type and stat info the OS gives you for free, which will make recursive tree functions like `os.walk()` 2-20x faster, depending on the system.
Well, defining a class and defining variables for it outside the __init__. All instances of the class share the same mutable object instead of having their own copy. Clearly not the right way to do it, but it made sense to do it when I understood the language less well. Also, in the original example, you don't need to mutate within the function. Any object you return that contains that list will be wonky. Of course, it's only an issue you run into when you're doing things wrong.
Very nice work, but is it still necessary after pathlib?
Have a read of my post on how I did this fairly trivially with Mezzanine, code included: http://blog.jupo.org/2013/04/30/building-social-apps-with-mezzanine-drum/
Have a read of my post on how I did this fairly trivially with Mezzanine, code included: http://blog.jupo.org/2013/04/30/building-social-apps-with-mezzanine-drum/
You mean D1 = card_dict.get(D1, D1), right? Your code will throw a ValueError if the value of D1 isn't 1, 11, 12, or 13.
I'd love to have regular expressions embedded into the syntax like it is in ruby/perl. Unfortunately this will never happen in python. 
why should I use this instead of docopt?
nope. &gt;&gt;&gt; b'{}'.format(b'foo') Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; AttributeError: 'bytes' object has no attribute 'format'
For PEP-455, can I multiple-inherit from `TransformDict` and [`weakref.WeakKeyDictionary`](https://docs.python.org/3/library/weakref.html#weakref.WeakKeyDictionary), specifying `id()` as the transform? Because frankly, that seems like it'd be a lot more useful than vanilla `WeakKeyDictionary` is right now.
I used to think that too, but when I realized that the times when that would really make things cleaner were like .startswith and .endswith mostly. Also I discovered parsley which I use for non-trivial parsing, I use regexes way less often now.
that post was an inspiration for this project, but I don't want to use Mezzanine. 
pyzaa would seem to mostly be useful for desktop or command-line apps. Which are generally better off being packaged by cx_freeze or whatever. It doesn't seem like it would really improve packaging the way a builtin pip/venv and wheel support would.
I have something done using MPTT, it works, its simple and doesnt use the django comments framework. I want to keep everything simple, I honestly thought that there would be a half decent solution that would give me the flexibility that I may need.
If you want to learn how to use them quickly read the API docs on the package's website. If you want to really understand how they work and the best way to implement them skim the API docs then read the source. Both are on github: [flask](https://github.com/mitsuhiko/flask) and [wtforms](https://github.com/wtforms/wtforms). IMO reading source code is by far the best way to learn about a specific package and learn new things about a language and pick-up handy tricks. Once you can fly through Python package code move on to Python Core
I'd say that, going in that direction, one thing that could land you with unexpected results you lose the "generators everywhere" aspect of python 3. They're still in python 2, but you have to be more explicit about asking for them. Not doing so can have memory/performance issues, but it depends on what you're doing. 
Not a PEP but just add Requests to the standard library already. . .
Python would be vastly improved with curly braces. I don't see a PEP for that!!!
You should have double-quotes around the entire path, not just the "My Documents" part. I'm guessing you're confusing the path parser and it's trying to execute "%USERPROFILE%\\"My" with a parameter of "\\[insert filename here]". Try this instead: `os.system('"%USERPROFILE%\\My Documents\\[insert filename here]"')` Notice I've put double-quotes before and after the entire file path, and removed the ones surrounding "My Documents". Not sure if those double-quotes need escaping.
Or even, specify in docopt and output argparse (if you don't want docopt dependency)
Ya I didn't think it was. Um I don't think I have any executing on import. Everything is within functions or objects so nothing should be executing but I can check. I will also run it via CLI and see if it takes that long if it doesn't than I guess it must be sublime than?
Works just fine for me with 2.7.x... 
Whoa, me too. It's one of the few things I miss from Perl.
Yes, good catch. Dashed that off too fast. And wouldn't it be a KeyError? Not that it matters.
very neat!
Is there anything stopping you from running it directly? Try shift clicking in the folder where you keep the script and opening the command menu from that prompt. Then just type your filename.py and watch it go.
Ya that's what I mean I'll just go run it from command line when I get home and see.
I think i've got it working thanks to you! Thanks so much! I don't know that I'd have figured that out myself. 
There's a minimal use-case due to US ASCII-and-binary data network protocols like HTTP.
https://docs.python.org/3/library/urllib.request.html
Yes, I suppose it would be. Of course, I'm a horrible person and normally except Exception instead, so... 
I think this would be my first choice. Generalized unpacking should work but this is more important.
&gt; I think I should put a print statement right at the start and see how long that takes to show up If you're new to things this is a really simple way you can assess whether the program you wrote is actually doing what you think it should.. Just simple stuff like "starting execution", "in function x", "in function y", "in loop z", "done" can help you visualize errors in your logic. It can help you find stuff like "oops, my program never reaches function y because it's stuck in loop z" &gt; Or if there will be one line somewhere that is bottlenecking the speed? Do you have any nested loops? Those can get expensive quickly. It could just be that there is some overhead involved in invoking a python interpreter and feeding it your current file as input via sublime, but that just sounds like a wierd unlikely problem.
Given an EAFP philosophy, it becomes *very* similar to a conditional expression. It's possible Guido disapproves of conditional expressions as well, though. (I wouldn't be surprised, he's fond of excess verbosity and often prefers statements to expressions). Sure, he introduced them himself, but he only did it to stop people using fragile hacks like `(P and X or Y)`.
at the last line i get syntax error
 print "If I add %d, %d, and %d i get %d." % ( my_age, my_height, my_weight, my_age + my_height + my_weight)
At the very least, you're missing some commas. print "If I add %d, %d, and %d i get %d." % (my_age, my_height, my_weight, (my_age + my_height + my_weight))
Im not new at all but for some reason that clicked as soon as I was typing that reply. I already do it throughout my code to see what and when is executing. Umm yes and no I guess. My code is designed to go through all the markets on an exchange so first I get all the market ids then grab info for each market id and parse that info so ya but its necessary unfortunately. Ya what I'm going to do is use a program or module that shows me a breakdown of execution times for each statement and stuff and pinpoint the bottlenecks. It seems to work fine while its running just getting it up and going takes an odd amount of time.
&gt; What am I doing wrong here? 1. Posting in /r/python instead of /r/learnpython. 2. Not formatting your post correctly.
Sounds like this could reasonably take some time if you're grabbing external information. It's also possible you're doing something inefficiently of course. Best bet is to use a profiler, I think cProfile is the most popular Python profiler though I've never actually used it.
&gt; Im not new at all but for some reason that clicked as soon as I was typing that reply. I already do it throughout my code to see what and when is executing. It was ambiguous in the original phrasing of your question. Since you're not new consider using the logging module so you can control how much debug output you get in the command line. :) &gt; Umm yes and no I guess. My code is designed to go through all the markets on an exchange so first I get all the market ids then grab info for each market id and parse that info so ya but its necessary unfortunately. Are you making a separate request for each id, or can you gather them all and make one big request? If you're making a lot of small API requests (assuming you're using an api endpoint to get this information) sequentially, your program might spend a lot of time waiting for I/O, in which case an async library might be useful for speeding it up. If there's a way to retrieve the information for some number of id's in each request that could also be faster.
why are the commas important and why over here can you please explain
The commas are important because the ``%`` string formatting operator only works with something called a [``tuple``](https://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences), which is a special kind of list (which is 'immutable', or not modifiable once you create it.) Putting it in parentheses ``()`` with the commas in between the variables is how you tell the python interpreter that "hey, this stuff I just typed? It's a tuple." Programming languages can be oddly specific like that, and it's generally because you need to be *able* to tell the computer how to do very specific things. The difference between a tuple (``(a, b, c)``) and a list (``[a, b, c]``) is visually pretty subtle; but under the hood, those do very different things, and can end up having huge impacts on things like how your program performs. 
My initial search found a python library for exactly what you mentioned. Is this helpful? https://pypi.python.org/pypi/omr/0.0.7
I would suggest Pillow over PIL since it is still being updated/monitored. 
If you didn't want to do this as a project, there is a good app that does it for iOS (not sure about android) called quick key. https://itunes.apple.com/us/app/quick-key-mobile/id686229501?mt=8
Unless you are using a version of Python that doesn't support it I would strongly suggest using `format()` over the old style of string formatting. It's much cleaner looking. name = 'Some String' age = 16 print('My name is {}'.format(name)) print('I am {} years old'.format(age)) You can read the docs for the syntax [here](https://docs.python.org/2/library/string.html#format-string-syntax)
Ya sorry hahah was a little ambiguous. I'm new to python but not programming. Thanks I'll look into it. Yes I have to make separate requests unfortunately the data I need is not available through one simple call although I might be able to make something work. The bulk of the data is the the original call that I get the market ids from then each additional call is only grabbing like 24 hour high and low and a few other things. I'll see if there is some optimization available there. What exactly is an async program? Running simultaneously? I have already looked into multithreading and multiprocessing and will be using the latter but maybe use threading as well?
Ya it can take a little bit but right now its pretty quick already its just the startup on wondering about. Yes I have heard that and plan on trying it thanks.
https://www.youtube.com/watch?v=JegQQu_vYrI
No probs at all. So if you wanna make an actual figure with display and such, yeah raspberry pi is a way to go. But yeah :) more description would help. 
[If you really must...](http://www.pythonb.org/)
Hm, in short i kinda just wanted to start up the raspberry pi using an animation made in adobe flash of beemos face with a catch phrase such as "who wants to play video games??" and then from there just a menu of old NES and SNES roms that I already have on my pc. Something like that. Kinda still throwing the idea around.
The Pi would start crying blood trying to play Flash.
Damn you're right... lolol
Python + Pygame for the graphics will allow you to display an animation/sound and python can access OS functions to call executables or launch media players.
FYI: "Standard daemon process library"
0458: Surviving a Compromise of PyPI 0452: API for Cryptographic Hash Functions v2.0
&gt; What exactly is an async program? Running simultaneously? I have already looked into multithreading and multiprocessing and will be using the latter but maybe use threading as well? Async = Asynchronous I/O. The basic idea is you fire off multiple requests, continue processing everything else that doesn't rely on them and handle the responses as they come in *rather than* firing off a request, doing nothing while the program waits for a response, then continuing when it arrives. If you've got a lot of requests and and and you have to wait for them to complete one by one before continuing, the response latency can add up. I can't be much help with specifics because I haven't used Python's async modules for anything on my own yet. What I can tell you is you definitely should do some measuring to determine whether that's really the slow bit first.
Because you don't have to write so much? It can be annoying to do same thing again and again and I always forget half of the parameter names and what do they do. This has popup help, so it can save some time and annoyance.
You probably don't need Python for that. Record a video of your animation, then configure the Pi to show it on startup with mplayer or whatever, then run XBMC. You can try making a custom skin for XBMC if you want it to look like Beemo too. Rolling your own interface and doing it right will be a lot of work, and you'll miss out the new XBMC's amazing plugin ecosystem. 
This is definitely the solution OP wants to use. Established, tested, and the only thing his mom would need to change is the bubble sheet to include the QK orientation marker. 
https://ep2014.europython.eu/en/schedule/schedule/
I'd kill for this one. On a semi-daily basis I forget that this isn't the way it already is, because it's so damn intuitive.
He means this. http://docs.python-requests.org/en/latest/ I would guess a majority use that instead of the standard library's urllib.
I don't have to remember any parameter names for docopt, just what sort of format it expects the docstring to be.
Still a problem for me, but this fixes it http://sticksnglue.com/wordpress/source-code-pro-phpstorm-the-plot-thickens/.
I'd rather see something like 'regex for humans' along the lines of the requests lib instead of operator overloading trickery and Rubyisms
SDAPS https://github.com/sdaps/sdaps
Kind of off topic, but are nested loops unnecessary slow and there any alternatives, if you're working with say a coordinate system?
You're awesome! Somehow glossed over this, will go try this out. Thank you for the link.
Thanks for the link! My mom still uses an ancient Nokia phone, so apps are a no-go :/ Will try to convince her to switch to iOS though!
Looks interesting. Will give this a shot if the omr python package doesn't work out. Thank you!
Noted with thanks :)
Biased because I wrote it, but [PEP-472](http://legacy.python.org/dev/peps/pep-0472). Honestly, I think it's very broad in scope. I would restrict it to the "strict dictionary" option, but that's just me.
I saw a post a few days ago which made use of a class exploiting the division operator to do something like R/expression/. It was really clever.
I know that with twisted it's possible to provide telnet or SSH access to your application through manhole. Apparently there is also a non twisted library: https://pypi.python.org/pypi/manhole
I think if you were careful with the way you created the flash it would run fine. I used to be able to run flash on my Nokia n80 which had a 220mhz cpu and 40mb of ram. Obviously I would only use flash if you already know how to program in it.
oh boy... why?!
I've never seen the show, but what I'd do first is work on the actual program itself, then concern yourself with configuring Linux to boot up like Beemo. Since you're an "absolute beginner at programming", working on the program itself will be a good lesson for you on various aspects.
Nope, wouldn't take much, just overload `__div__` on `RegexOperation`.
Agreed, there's plenty to learn here, this is a fantastic way to learn a lot, specially if you're not very knowledgeable about configuring Linux and the like, and unless you wanna make the little thing sentient or something like the one in the show, it's actually doable.
https://github.com/cabazares/automated-exam-parser
This is cool in a retro kind of way. How long did it take to make?
For what you want, I'd say you should start by looking at the [retropie](http://blog.petrockblock.com/retropie/) project - it'll handle most of the gaming side for you. XBMC can handle video playback pretty handily too, so if I were to attempt something like what you want, here's what I'd do: * take the retropie image, set it up for all the emulation you require * use apt-get to install xbmc * write a little python gui (using [tkinter](https://docs.python.org/2.7/library/tkinter.html), perhaps. It's not the greatest, but it is well documented and part of the standard library) with the images you want used set as backgrounds for the frames/buttons. * Set the buttons to call the appropriate commands to launch the emulators or xbmc using [subprocess](https://docs.python.org/2.7/library/subprocess.html) (eg. subprocess.call('xbmc')) * use an @reboot line in crontab to set your python gui to launch on startup * build a BMO case for your pi * *maybe* look into setting up custom skins for xbmc and retropie. I haven't looked into it before so I'm not sure how involved a process that'd be. As an opinion note, I should let you know that I find tkinter quite frustrating. Python does support wx or qt bindings for GUIs too, which I'd recommend if you were familiar with using them in other languages. Since you're new to programming though, tkinter may be the best place to start since it's pure python so you only need to learn one thing. If you need help with python, the folks over at /r/learnpython are quite friendly.
Also I'm using your Cryptsy module /u/hharison I'm the one that was letting you know allmyorders wasn't working and asking other questions.
Ya I'll do some measuring. I was already planning on doing some stuff like that and it wouldnt be hard to just change it so requests are doing the same thing. I'll look into it more when I have some time and done my measuring.
After sleeping on it, I decided to rename the project. It's now called BundleWrap (so we get to keep the bw command line utility name). Thanks to everyone who voiced their opinions.
Ok - I never used docopt and I mistaken it with [optparse](https://docs.python.org/2/library/optparse.html). It looks cool, but from quick look, I think it contains only subset of the argparse capabilities (can you specify type of the argument?). Also it looks like it require a lot of writing, which may be okay if you have to create one script, but not when you have to create 5 or more. My project is just GUI tool for argparse. If you want to use argparse, it may save you some time, if not, feel free to ignore it.
Check out [bokeh](http://bokeh.pydata.org). From their webpage: &gt;Bokeh is a Python interactive visualization library that targets modern web browsers for presentation. Its goal is to provide elegant, concise construction of novel graphics in the style of D3.js, but also deliver this capability with high-performance interactivity over very large or streaming datasets. Bokeh can help anyone who would like to quickly and easily create interactive plots, dashboards, and data applications. It is being built by [Continuum Analytics](http://continuum.io). They're a couple of years into it and are on a 0.5 version, so the API may be subject to changes. But it's starting to come together very nicely. They have samples on their site. 
it is really similar, but using Java instead of RPython... which with http://www.eclipse.org/xtend/ (so you get a little more sane java) can be a good developing environment. The idea that AST jit is better than tracing JIT is the piece of the presentation that I didn't see any proof. She said that in AST you have a more global view of the code, but on a trace you can optimize more as everything is defined. 
Another thing is how to call C code from the vm... as in python we have a lot of it.
I think you're looking for `os.startfile`.
Dude... Get a Raspberry Pi and make your own OMR machine. That would be amazing... 
Doesn't Adobe Flash allow you render / export it in other formats? If not you can get it converted... Also I'd recommend coding it on your Pi or at least debugging and running it on the pi (or virtual linux environment) because from past experience, I've noticed a few variants on code to make various tasks work. (I think I was trying to play some media on a timer, wrote and researched it on my windows pc and run it on my pi after to find certain statements were different on linux.)
Yeah, saw it too but am really more interested in an official solution :)
I hate Windows with a passion and would happily never use it again BUT my current company (and the last few companies where I've worked) build cross platform tools. With that in mind, I would LOVE to see the standard library include Windows service tools. Windows makes it a bit of a pain to run a script (non-exe) as a service but it can be done with the Python's win32 extensions. Would be nice to have this cleaned up and added to the standard though. It's a bit icky to do by hand right now. :)
Someone correct me if I'm wrong, but I believe nested loops are slow just because it amounts to alot of lines(often the same lines over and over again) that need to be interpreted. Interpretation is slow, but once Python has figured out what to do, it can typically do it quickly. If CPython had a JIT(like pypy), then the loop would be interpreted once, compiled, and then run fast for further iterations. Unfortunately, CPython doesn't have a JIT and is unlikely to get one in the near(or far) future. There are several alternatives, depending on what you're doing. Using pypy is probably the easiest, assuming you are using pure python code(last I checked, C extensions are still a little finicky on pypy). Other options include using numpy and vectorizing your processing, or using Cython to create a C extension containing the loopy code. 
Can you post an update on what worked and what didn't, and the ultimate outcome?
As I really grok this Monad implementation for Python, I've changed the operator for this case to use `__rlshift__` instead of `__rmul__`, so now your example would read: add &lt;&lt; Just(7) &amp; Just(8) I did leave the overridden `+` operator, although, because it works nicely for the monadic `List` provided by this package and allows you to have "natural" Monoids (i.e., so you can treat the built-in types as Monoids). The updated library with adapted documentation and test can be cloned from my [GitHub repo](https://github.com/fnl/pymonad).
Haha, small world. So did my fix work? As I said I'm not in a position to test it and I haven't had a chance to write proper tests with mocking and all that. Anyways, yeah, it could be the cryptsy servers, maybe the first request is slow because they do all the authentication and stuff on their end, but after that it's relatively quick.
The alternative is to use numpy.
Without seeing the code, it's impossible to tell why it's slow. "Hundreds" of lines of code is nothing special, but of course it depends what those hundreds of lines do. The first thing I would do is bypass sublime and run it directly using Python via the command line. Are you on Windows, Unix/Linux or Mac? I don't use Windows, but I think this should work: open cmd.exe and run ``python.exe C:\path\to\your\script.py``. You may need to explicitly give the full path to the python executable. In Linux, try this: python /path/to/your/script.py If this is significantly faster then when running under sublime, you have the answer there: sublime is slowing it down. If the speed is about the same, check that you have compiled byte-code files. The *first* time you import (but not run!) a .py file, Python compiles it to a .pyc file. Then any subsequent times you import the file, it loads the pre-compiled version. Obviously this can only happen if you have write-permission. Check whether you have module.pyc files for each of your module.py files being used. Lastly, if neither of these solve the problem, try running the [Python profiler](https://docs.python.org/2/library/profile.html). It will tell you where the majority of time is being spent, which may surprise you. 
&gt; My mom is a teacher and spends hours manually marking bubblesheets. As a former instructor, that makes me cry. 
look at the API
&gt; each additional call is only grabbing like 24 hour high and low and a few other things The `getmarkets` method gets the 24 hour highs and lows from every market with a single call. Depending on "a few other things" you may be able to get away with a single API call.
Done!
FOR HUMANS! FOR HUMANS! FOR HUMANS!
Looking through the source, it looks like the [GetStatus](https://github.com/bear/python-twitter/blob/5f0627c4a23471f32a5b77aa8baebe36eb4f139e/twitter/api.py#L627) function within the [API](https://github.com/bear/python-twitter/blob/5f0627c4a23471f32a5b77aa8baebe36eb4f139e/twitter/api.py) module returns a Status class that contains the [in_reply_to_status_id](https://github.com/bear/python-twitter/blob/5f0627c4a23471f32a5b77aa8baebe36eb4f139e/twitter/status.py#L99). [According to Twitter's documentation](https://dev.twitter.com/docs/platform-objects/tweets), that would contain the status ID of the parent tweet. To get what you're looking for, you could just fetch that attribute and lookup the resulting status ID.
True, standard library would be official enough to me :)
Ya it did work well thanks you. Ended up not needing it :p Hmm OK that makes sense. Who knows with Cryptsy
"Could you guys read documentation for me?" 
All hail the ScanTron! Doesn't really help your post, but my wife is a teacher as well and it boggles the mind they 1980s technology doesn't exist anymore and she spends so much time creating and grading tests.
Unless within the response is a way to tell what market the order is on? (BTC USD or LTC)?
wow thanks I must have been mistaken, I found the exact video i was talking about, it's a joint video on latex and python 
&gt;This is weird to me. Shouldn't pyladies' blog feature stories about women? Their education? Their successes? Right now the blog looks like a social organizer site, not a way for women to become pythoneers. In their "about" page, the focus appears to be "a group for women to discuss python programming" so they seem concerned with talking about programming and arranging meetups to socialize around the subject, including talking about major conventions they intend to be at, as attendees or otherwise. So yeah, it makes sense that it wouldn't feature a lot of discussion about how they are women who program python. A safe space to engage in the practice is just as important to becoming a programmer as seeing material that inspires you to do it. pyladies seems to be focused on providing the former, rather than the latter.
Why don't you email them and ask?
Ya I'll take a look. Maybe I'm completely wrong its been 5 days since I've done any coding cause I've been busy at a wedding getting drunk but I'll look after work today thanks. And do you know if your allmyorders method return has any identifier if the order is on what particular market?
Are you talking about [build your own bmo](http://byobmo.com/)? I think it does what you're asking: http://youtu.be/8F23A6cSraU?t=28s
Yes, it appears that it returns `Order` objects that have an attribute `marketid`.
It would be worth the switch or purchase of an iPod Touch or iPad just for this.
Maybe youll find a trick here that you could use: http://code.activestate.com/recipes/langs/python/ 
&gt;I can't see any disk activity on iotop once the images are loaded the first time Thats because the OS is caching the files for you.
I can respect that pyladies is a place for women to discuss python programming. However, with that in mind, the poster is raising some interesting points. For example: * How does promoting $300 Google I/O tickets promote women discussing python? * Pyladies has chapters around the world. How come no blog posts ever cover their formation or events? My city has a chapter and yet they've never been mentioned in the blog. * Where the poster is commenting from, Europython, has two pyladies events to help women discuss python programming. How come they aren't mentioned in the blog? Don't get me wrong. I think pyladies is a great organization. OTOH, after reading this, I think the blog is completely out of touch.
Hmm OK. Maybe on startup I'll compile a dictionary of marketid/market symbol pairs.
There's a helper function `get_market_ids` that does that already :)
If you showed me a github account where you contributed to several different open-source projects, it would show your ability to work in teams and being able to dive into complex projects.
Like magic card trick ?
Hey there, this is looking like it might be a lifesaver for me. Where is the documentation for it? I'm trying to access the Interpupillary distance and distortion parameters of the HMD.
Right right forgot about that! I'll take a look after work. Does that require another call to Cryptsy though?
&gt; How does promoting $300 Google I/O tickets promote women discussing python? The tickets are normally $900. In coordination with pyladies, Google appears to be subsidizing them for women who are involved in pyladies, and use or are interested in google products and APIs. I would hazard a guess that pyladies reached out to them to get those promotional tickets, or had them available already as something Google provides to certain types of attendees (e.g., if you have a booth) for promotion. So, they're trying to give women in the group the chance to go where they may not have been able to normally.
Nested loops aren't automatically slow or bad, but usually one loop inside another means you've probably got O(n^2) complexity in the worst case. This is fine if you've got a small amount of data to iterate over but O grows quadratically as n increases and deeper nesting raises the power n is raised to. Common cases for nested loops are visiting each cell of a 2d array and applying some computation, naive sorting algorithms and brute forcing searches for some combination of items. In the first case, use numpy if your data set is large. Numpy is fast because offloads work to compiled modules. For sorting remember that Python has a pretty good sort algorithm to begin with, so don't roll your own unless you really know you need to and don't sort the data until you need to. In the last case there is a technique called "Memoization" in which the results of a function call are stored inside a hash using the arguments as a key. This lets you retrieve duplicate results if you already have them, rather than recompute them each time. It can help speed up brute force searches for combinations of things at the cost of using additional memory. 
Not a bad idea. If you can properly encapsulate the logic, feel free to write it into the library and submit a pull request :)
Sounds good! Sorry just a junior programmer haven't had any real world experience yet, by encapsulate the logic you mean?
I just mean if it is its own thing, because if it is all tied together with the rest of your code than it will be hard to contribute it to python-cryptsy without including your entire project. If it's the latter don't worry about it, it was just a suggestion. :)
Oh gotcha! Well I can always just write it for yours anyway... But I think I might do that just so its a single call to the authenticated session object. Have some other ideas too!
Basically Python longs are implemented as an array of digits. So, for example, `1234` might be represented using `[1, 2, 3, 4]`, then mathematical operations are done using the standard grade-school formulas for, ex, adding, subtracting, and multiplying large numbers by hand. (note, though: the "digits" are actually uint32s, and have the range 0..2^30 (or 0..2^15 on some platforms) instead of 0..9, and they are actually stored least-significant-digit first, so internally the above example would be `[4, 3, 2, 1]`). `long`s are imiplemented in `longobject.c`: https://github.com/python-git/python/blob/master/Objects/longobject.c For example, take a look at [the `x_add` function](https://github.com/python-git/python/blob/master/Objects/longobject.c#L2002) (which actaully adds the numbers, as opposed to [`long_add`](https://github.com/python-git/python/blob/master/Objects/longobject.c#L2091) which sets up the call to `x_add` or `x_sub`): /* Add the absolute values of two long integers. */ static PyLongObject * x_add(PyLongObject *a, PyLongObject *b) { Py_ssize_t size_a = ABS(Py_SIZE(a)), size_b = ABS(Py_SIZE(b)); PyLongObject *z; Py_ssize_t i; digit carry = 0; /* Ensure a is the larger of the two: */ if (size_a &lt; size_b) { { PyLongObject *temp = a; a = b; b = temp; } { Py_ssize_t size_temp = size_a; size_a = size_b; size_b = size_temp; } } z = _PyLong_New(size_a+1); if (z == NULL) return NULL; // THIS IS WHERE THE FUN STARTS for (i = 0; i &lt; size_b; ++i) { carry += a-&gt;ob_digit[i] + b-&gt;ob_digit[i]; z-&gt;ob_digit[i] = carry &amp; PyLong_MASK; carry &gt;&gt;= PyLong_SHIFT; } for (; i &lt; size_a; ++i) { carry += a-&gt;ob_digit[i]; z-&gt;ob_digit[i] = carry &amp; PyLong_MASK; carry &gt;&gt;= PyLong_SHIFT; } z-&gt;ob_digit[i] = carry; return long_normalize(z); } 
Okay, that's great that pyladies procured a discount for their members so they could attend Google I/O in the outrageously expensive bay area more affordably. However, how does that aid in getting women into the Python community? Why does that take promotional precedence over clearly organic initiatives like DjangoGirls and the dozens of emerging chapters around the world?
No problems with stock python from python.org. Maybe those people who have problems also have broken fingers.
*"I didnât find it very stable"* Perhaps the writer has a strange idea of what stability means, but I doubt Windows Python is somehow less stable than any other version Python. Admittedly, bootstrapping the system so that you have virtualenv/easy_setup/pip/distribute/whatever is flavour of the month installed properly can be a hassle if you don't stumble upon the correct order in which to do it all.
How does this compare to [Python\(x,y\)](https://code.google.com/p/pythonxy/wiki/Welcome), which is what I've found to be the easiest 'install and go' solution for scientific Python computing on Windows. 
Programming Python - http://shop.oreilly.com/product/9780596158118.do 
A couple tips for Anaconda: * The default install is enormous. There's a miniature version, [miniconda](http://conda.pydata.org/miniconda.html), only 20 megs. * Not every package is available by `conda install`, especially obscure pure-python packages. Use pip to install these, but... * You've got to install pip inside your conda environment for it to work well*. So run `conda install pip` and then you can `pip install` anything. *If you don't, pip tries to install things in the global site-packages directory, which doesn't work.
If you want to test it, in the Python console type the following: from browser import document, html document &lt;= html.P('Hello world from Brython!!!') The stdout/err is not redirected so if you want to see the output of a print, for example, open the console in your browser (ctrl+shift+k in FF,...). It works just on the client side, If someone wants to add a backend to have users and accounts and let people to share 'fiddles' I would be very happy to help on that.
" So run conda install pip and then you can pip install anything." Thanks Resc, that's interesting. I wasn't aware of that.
I normally develop on a linux box, but my laptop has become highly unstable with it. I ~~used~~ use Windows 7 on the laptop now*... Just installed python and PyCharm. Done. Edit: words.
&gt; or other such toy problems, What a pompous ass. I have many scripts deployed in production environments that are not "toy" problems and have no such issues. I try to choose python when I know the default install and libs will be what I need for the job and / or code such that I work out the problems without libs. More often than not I only need one or two things from them anyway and just writing it myself solves those dependency issues. 
DaOneTwo, actually I have heard many people complain about Python on Mac. I'm told Homebrew is a very good system: http://docs.python-guide.org/en/latest/starting/install/osx/
Comparable, but with the superior environment tool, conda. I've switched from x, y to Anaconda
Yeah, I'm not sure what he's talking about. I've written some non-trivial automation hooks using PyWin32 and the biggest problem I ran into was doing a subprocess call and getting the wrong version of Powershell. I'd consider that a problem with the Windows [File System Redirector](http://msdn.microsoft.com/en-us/library/windows/desktop/aa384187%28v=vs.85%29.aspx) more than a problem with Python.
Thanks, I'll look into it. Since it looks to not disrupt existing Python installations, it looks like I could use it in parallel to test it out. What do you use for your IDE? I usually use Spyder for most things with (x,y), or Notepad++ for light edits. 
#Stop Struggling with Python on Windows Step 1: Go [here](http://www.lfd.uci.edu/~gohlke/pythonlibs/), grab an installer for Pip or any other packages you need. Write Christoph Grohlke a very nice thank you email. Step 2: Install [virtualenvwrapper-win](https://github.com/davidmarble/virtualenvwrapper-win). Write David Marble a very nice thank you email. Step 3: Wish you had known this before.
Weird, I've never had a problem with stability of python on windows. I do share your pain with the mess of installing binary packages though. It's really sad that stuff like pip don't work at all when a library has to be compiled (sure, they can work if you have a compiler and everything set up but that's not the case for 99% of windows folks). I found this page with pre-compiled binaries invaluable: http://www.lfd.uci.edu/~gohlke/pythonlibs/ That said, I ended up getting so annoyed with the pain of open source development on windows that I switched to Linux for my main development machine. Much, much easier to just pip install stuff or grab a package for really big stuff.
Whoops. Sorry about that. My reddit toolbar bookmarklet must have failed me
That's brilliant, but why are they stored as int32s instead of, say, int4s?
This is just someone bitching about how installing libraries is so much harder on windows because he doesn't have a package manager to do the thinking for him. He also does a decent job setting himself up to brush off criticism by dismissing it as only working for "toy scripts." And the most beautiful part of this all is that this is just a poorly veiled marketing scheme by a guy who apparently can't even install the libraries he bases his python course on, even though the whole premise of his course is that it's supposedly a lot more practical than any others.
Same here. Python binary installer for Windows from python.org, binary installers for various libraries from their websites or in some cases from the excellent http://www.lfd.uci.edu/~gohlke/pythonlibs/. No problems with instabilities or flakiness at all - at least none that can't be traced to my code or known bugs/instabilities in libraries. 
Does the website have to serve a strict purpose of a social mission? Does every little action they take have to be focused on getting women involved in python? It's possible that they might be less focused on recruiting women into the python community and more focused on giving women who are involved a comfortable space to interact. It is good to closely examine the motivations and focuses of any organization, but one post about discounted Google I/O passes may not deserve such intense scrutiny. They're going to be there, they want to give members of their community a chance at a discounted pass. There really doesn't seem to be more to it and I don't really think there has to be.
Apologies for pursuing this into the ground. The DjangoCon US prices, a *community* event for a python project, leaves a bad taste in my mouth. Then to see that Google I/O not only provides a discount but gets free advertising just feels wrong. Just annoyed in general, I guess.
Haven't tried Anaconda, but I've been having a lot of success recently with [WinPython](http://winpython.sourceforge.net/). I've mostly been using it for scientific/research purposes, so the fact that it comes with things like IPython and Pandas built in is extremely useful. 
GMP uses assembly language for speed and for direct access to the carry and overflow flags of the processor. That allows them to use full machine words without wasting any bits. The Python implementation above wastes 2 bits, by storing 30 bits in a 32 bit integer. This is necessary so that the carry out of adding two digits can still fit into a 32 bit integer. However, the hardware already has a carry flag which acts like a 33rd bit when adding two 32 bit integers, so GMP can exploit that. I haven't checked, but I'd imagine that GMP also uses the native word size. That means that digits will be 64 bits on systems that can natively add two 64 bit integers, and 32 bits on systems that can natively add 32 bit integers, and so on. (I don't imagine that it actually supports 16 bit system as Python tries to cater to with its 15 bit digit option.) 
Added a line of code to ask the user how large the board should be generated.... Didn't require much skill, but it improves functionality.... Source [here](http://pastebin.com/G81dCSmB)
The thing about corporate events like Google I/O is that it's basically a marketing expense. They can afford to pay for the venue, staffing, etc. and provide discounted tickets to certain groups/companies as promotion because the whole point is getting people involved in using Google's products and services (which in various ways, makes them money.) pyladies probably wants to be involved because, on the individual level, there are jobs out there where knowing how to leverage Google's APIs is really advantageous, and frequently these APIs have python bindings. I don't know why pyladies doesn't have any interest in promoting or having a presence at DjangoCon. It might be an issue of location or a lack of organizers. They probably have to do some picking and choosing. It is disappointing that community-driven events cannot provide some of the same ease of access, but without corporate sponsorship, there is a very limited supply of funds. It could be that the organizers around the events want to prevent the event from becoming something that solely serves the interest of sponsors. It could be that companies don't see the same level of marketing potential in community events that Google sees (and exercises in its own convention.)
What language would you embed? Python in Python? In that case, you can use eval() Lua has some embedded stuff. There's definitely some Javascript engines.
If I could choose I would go with Scheme, but as it appears that the number of available alternatives is somewhere between nothing at all and something that some guy's cousin heard once somewhere... It's better to go with what's available. About the eval() route, does this encapsulate the environment of the interpreter running the script, or is it a hack that runs some code along with the app's code?
I do think that the officially distribution is overly complex to install. In particular, the fact that Christoph Gholke graciously provides prebuilt binaries doesn't making them official. Compared to other programming languages, I feel like this is a pain point on Python's behalf. I know for a fact that building Python packages on windows is a huge hassle due to visual studio 2008 bugs. Anaconda, miniconda in particular, gives you a nice middle ground I think. The conda package manager handles complex installs like numpy and opencv very well. In particular, building new environments is very simple due to the fact that conda just links the libraries between environments. This makes building fresh environments very fast. Best of all, conda environment are relocatable and can harbour pip packages, unlike virtualenvs!
"digits" are implemented as unsigned shorts (so, at least uint16). source: https://github.com/python-git/python/blob/715a6e5035bb21ac49382772076ec4c630d6e960/Include/longintrepr.h#L21
Yes, it uses native word size for addition. 
Man, I have the same problems on Windows. I don't think Anaconda is the answer, necessarily, but dismissing complaints about the lack of a package manager (in this day and age!) as "bitching" seems more than a little unfair. 
PyLisp and PyScheme are things. You provide Eval with locals and globals. If you don't provide a globals dictionary, current globals are propagated, which can be a security hole. More info can be found [here](https://docs.python.org/2/library/functions.html#eval). Read more information about sandboxing python [here](http://programmers.stackexchange.com/questions/191623/best-practices-for-execution-of-untrusted-code).
Is there an easy way to swap between the two, given the cruft that installations like Enthought and (I presume) Python(x,y) tend to leave throughout the HDD and $PATH? 
try using /r/flask.
I needed to word that differently I guess. My laptop has a hard time running linux, sound is always cutting off, I get all kinds of errors booting up, no matter what distro I use. I switched to Windows 7, installed python and PyCharm. Everything works perfect now. I still use debian on my PC, but yeah, never had a problem with Windows and Python.
Exactly this. I had a need to create a ton of SQL queries with sequential portions (a b c d etc) and python made it dead simple. Find some data entry that takes hours (preferably something done regularly) and write code to automate it in seconds. 
Gohlke's installers are very nice, but as far as I know, you have to manually download and click through each one - there's no easy way to automate 'now I'd like numpy, scipy, matplotlib and pandas installed in this version of Python'. IIRC, they also can't be installed into virtualenvs. Conda lets you install packages from a command line, into environments if necessary, and automatically gets the right packages for your Python version and bitness.
I guess. I won't lie and say it's not a problem, I guess most of what bothered me about that was the delivery/author. Since I only use python for relatively simple stuff, I've never run into issues with libraries, but from my experience troubleshooting similar types of environment issue, it seemed like this guy was significantly exaggerating the problem. How long does it actually take to make these new libraries work right?
Ahh, apparently this has changed between Py2 and Py3. In Py2 there are `#ifdef`s which allow both 15 and 30 bit digits: https://github.com/pgbovine/Py2crazy/blob/master/Python-2.7.5/Include/longintrepr.h#L40
This is one of the reasons I've found Docker so helpful. It's made standardizing development environments across operating systems SO much easier. Of course, ultimately you're just running Linux on a VM. I don't feel like Python on Windows is actually broken in any way, it just has different steps involved since you're inherently using a different platform. 
No, your post made sense. My response was intended for the OP, but my browser went haywire and it ended up posting three times in various places on the page. I selfishly kept the one of the three that wasn't suffering negative down votes ;)
PyScheme's site states that the last update was published in 2004, and it appears to have been abandoned. It also appears to be the case with PyLisp and Psyche. Are there any Scheme interpreters whose project at least hasn't died so long ago?
I don't know. The developers of scheme stopped updating their site in 2003 [source](http://groups.csail.mit.edu/mac/projects/scheme/). I had no idea people still used it.
No idea what this guy is talking about. Python runs just fine on windows. (I worked on it for all of my coding for several years. (I did eventually move to linux, but only because I moved off windows altogether)) Pip is easy via get-pip.py, and there's always http://www.lfd.uci.edu/~gohlke/pythonlibs/ . (The latter should really be linked to somewhere on python.org)
Well, it's especially problematic if you have projects where you have an embedded Python interpreter, plus a generally installed Python.
I'm not trying to trash your language choice... you seem to have a better handle on this stuff than I do. It is a python subreddit after all. 
So what are the main benefits to doing this?
Anyone learning Python or trying to solve a non-windows specific problem using the language should just use virtualbox (and/)or vagrant.
&gt; It's possible that they might be less focused on recruiting women into the python community and more focused on giving women who are involved a comfortable space to interact. And the latter may help the former: the more the Python community gets the reputation of not being hostile to women, the more women will probably decide to get involved.
I don't use an IDE. Probably should. Moving towards a linux system, though, and I've been kicking around learning emacs. One of these days... Edit: would suggest uninstalling xy before installing anaconda Editer: I use Notepad++
The binaries provided by Christoph Grohlke cover the majority of the issues that the author of this post was running into (getting certain packages installed on Windows), virtualenvwrapper should cover the rest. Mr. Grohlke was nice enough to compile a large set of popular Python libraries so you don't have to. He generally compiles them to work across 32 and 64 bit versions of Windows, as well as multiple versions of Windows. The dude is a saint. virtualenvwrapper-win is the same thing as [virtualenvwrapper](http://virtualenvwrapper.readthedocs.org/en/latest/), except it works on Windows. The original only works on *nix systems. For those not in the know virtualenvwrapper adds a bunch of really nice functions that make setting up and maintaining virtrual environments very easy. With the binaries provided by Christoph Grohlke, and virtualenvwrapper-win most of or all of the author's problems would disappear. The shittiest part is that no one has really documented it. I've been meaning to get around to it, but I don't have a dev blog set up yet.
I don't know. I didn't have issues uninstalling xy then installing anaconda. In fact, I switched back and forth before committing to anaconda. But hey, ymmv. GL!
`WeakKeyDictionary` is often used for implementing descriptors (which are basically more powerful versions of `@property`), as in [this code I wrote](https://bitbucket.org/NYKevin/nbtparse/src/tip/src/semantics/fields.py#cl-99). Specifically, you make a weak keyed dictionary from owning objects to values. In this case, object identity is a more sensible thing to compare on than object equality; if `foo == bar` but `foo is not bar`, it's only common sense that doing `foo.baz = qux` should not affect `bar.baz`. And of course if the objects are unhashable, the whole pattern falls apart.
Maybe some kind of plugin system could work for your case? There are a few libraries that make it simple to support loading plugins (e.g. Yapsy, stevedore)
Welp, maybe it's time I give it another whirl. Pretty productive with my current setup though.
I had a similar story. Turned out the memory was bad; Linux was using all of it all the time for caching, thus errors appeared quickly. Windows was not using it efficiently - and didn't happen on a memory error often. That was Win2K days, perhaps this is no longer relevant - but I would advise you to run a 24hr or 48hr memtest on your laptop as soon as possible.
I've played around with peewee and found it to be excellent!
With pip installed, adding Python packages on Windows is as easy as it is anywhere. There may be small issues if you need to install a compiler, but it's not like you didn't need the compiler on Linux too. (EDIT: didn't 'nerd' the compiler? Thanks, phone.)
In the case of something with dependencies on, say, cython, it's sometimes hardly possible at all. You need the right version of Microsoft Visual Studio installed to be able to compile the binaries, and having a newer (or older) version places some .bat files in the 'wrong' directories, leaving pip et al unable to use them. The whole process is hugely brittle and makes doing anything more than one-off text processing pretty hard. That said, I do use python for quick proof of concept stuff, but not being able to develop for, say, kivy, makes Python on windows pretty unpleasant. Also, to talk about tone: The author even says that people who just want to use the standard lib won't have problems no matter what, so don't read on if that's you. You and a few others have mentioned that you just don't use the 'advanced stuff' (things that require a compiler, I guess) on Windows -- that's sort of the point of the article though, I think. 
Is that a Python problem or a Windows problem?
Spyder is included in Anaconda
Thanks, I'm planning to do something with Brython and this should come in handy.
LPTHW is a great intro to not just python, but programming in general. The free HTML version also means you can use it for free. Or, you can also pony up some cash and buy the book and/or video series. Learning Python is also great, but IMO better for experienced coders learning the language. It was my first Python book and I referenced it for a very long time.
&gt;there's no easy way to automate 'now I'd like numpy, scipy, matplotlib and pandas &gt;installed in this version of Python' There's no easy way to do that with any Windows software, not just Python. It's the fault of the OS having no package management, bundled compiler, and the belief that asking users to install one would just be too hard. Also, if there were a Windows equivalent of SUSE's [Open Build Service](http://www.openbuildservice.org) there also wouldn't be a problem. 
Right, that's why the OP is recommending anaconda, which comes with a package manager (conda).
Compiling packages has been my only real issue too. I'm sure its possible to set up but finding a pre compiled version is usually easier.
&gt;The default install is enormous. There's a miniature version, miniconda, only 20 &gt;megs. Enormous? It's 320MB and took 1m30s to download on my "meh" cable internet connection (in a Windows VM). PyCharm Community edition was another 127MB and 30s. Total time to download and install on a Windows 7 VM inside of Linux was 10m30s, and the VM had memory of either 512MB or 1024MB, I forget which. Meanwhile, Visual Studio Express for Desktop Windows has a download size just under 790MB and says it needs 1GB ram or 1.5GB if running if in a VM and 5GB disk space. Hee hee... granted it targets Windows, OS X, iOS and Android with two languages, but the Delphi/C++ Builder install DVD is over 5.5 GB and the leaked release notes for the beta version read: &gt; Disk Space Requirement: Installing the Beta can require 45 GB of free disk &gt;space (to download the Web media kit and install the product). By comparison, I think 447MB for the cross-platofrm PyCharm IDE and Python interpreter + approximately 132 libraries including such powerhouses as numpy, pandas, sphinx, SQLalchemy, scikit-learn, sympy, etc. is downright parsimonious. I won't even get into the fact that such libraries often cost several hundred dollars a piece for other languages (the closest I could get to the completely open source stack I'm using for a Python project right now would cost almost $5000 if it were Delphi-based; a NumPy equivalent alone costs $600 with source, ORM $300, etc.). 
Doesn't Python 3.4 come bundled with Pip and a virtual environment manager now?
I've gotten 32/64-bit package clashes on Linux, too, but virtualenv under Windows is no walk in the park, and that's not Python's fault. 
&gt;This is just someone bitching about how installing libraries is so much harder on &gt;windows because he doesn't have a package manager to do the thinking for him. This might not end with Windows. Next we may have Slackware users complaining about installing Python. ;-)
&gt;And the most beautiful part of this all is that this is just a poorly veiled marketing &gt;scheme To be fair, Jessica McKellar brought up the issue of Python on Windows in her talk "The Future Of Python: A Choose Your Own Adventure" as one of the areas Python could do better in. 
&gt;You need the right version of Microsoft Visual Studio installed to be able to compile &gt;the binaries, and having a newer (or older) version places some .bat files in the &gt;'wrong' directories, leaving pip et al unable to use them. The whole process is hugely &gt;brittle and makes doing anything more than one-off text processing pretty hard. But isn't this a Windows issue and not a Python issue?
&gt;You need the right version of Microsoft Visual Studio installed to be able to compile &gt;the binaries, and having a newer (or older) version places some .bat files in the &gt;'wrong' directories, leaving pip et al unable to use them. The whole process is hugely &gt;brittle and makes doing anything more than one-off text processing pretty hard. But isn't this a Windows issue and not a Python issue?
Maybe you're holding it wrong?
It works for the most part now. I'm having another issue that I can't figure out though. Here's a place ship module. http://pastebin.com/yf3snute If it has to go through the module again through one of the if statements because a ship was already there, it keeps 0,0 as the coordinate. If I return none for each coordinate, or dont call grid in the function recall, I get nonetype errors. I'd like to figure this out on my own, so could you "pass" me a hint as to what I should be looking for? Thanks again! 
Yes on pip, no on virtualenv manager. Python 3.3+ has native virtualenvs but as far as I know no nice wrappers like virtualenvwrapper. I could be wrong, though. That said, Python 3.4 is so new that my instructions will still be valid for the majority of windows Python users, and Christoph Grohlke's list of binary packages includes more than just pip, so it's useful for everyone, pip or no pip. For example, without Christoph Grohlke's binaries I was unable to install pip on Python 3.3 and unable to install the psycopg2 package.
Do functions keep going after you return? Also, if you successfully ran your function again (randPlaceComputerShip), what are you doing with the output? Also, you should note that calling a function inside itself has a limit. You can only do it somewhere around 100 times before python complains. 
The only gripe I have about the Windows distro of Python is that it doesn't install itself in your PATH environment variable. Annoying to have to set it on every VM/Windows install you have to work on. Including setuptools by default would be nice too.
It's supposed to call that function again to get new positions. If it is called again it just prints ship already place there and goes to the next function. The ship is then 0,0 for all of its coordinates. 
Sort of? On Python's end, if you know something is going to need a compiler, why not have `pip` or whatever be capable of handling that? Or at least give a path towards it for your poor users. It seems like such a generic problem that having no documentation or help for it outside of SO seems worse than odd. From Windows's perspective, yeah, it's a kind of shit OS with no package management and poor software installation practices. The article is about struggling with Python and Windows, so I still think it's a reasonable topic, even if the 'pain point' is Windows more than it is Python. 
How do you know it's a freeze and not the regression/fit taking forever?
Put a print statement at the beginning of the function. Like: print("randPlaceComputerSubmarine reached") And watch.
I may make a while loop instead of the if statements. While (coordinates) do not equal "*", return ...., else (call function again)
I have one. I'll post the output later. I'm not at a computer right now. 
The regression is instant, and verbose=3 will normally print a bunch of junk before, during and after. Increasing the number of jobs should be speeding it up anyways, since its running on an i7-4770k. 
LPTHW is your best friend.
get-pip.py and you're done.
a) getting MSVC installed is actually fairly easy, just install the Windows SDKS, then: SET DISTUILS_USE_SDK=1 C:\Program Files\Microsoft SDKS\Windows\{version}\Bin\SetEnv {arch} /release Where {version} is either v7.0 for python &lt;3.1, or v7.1 for python &gt; 3.1. and arch is either /x86 (32-bit) or /x64 (64-bit) [basically this tutorial](https://github.com/cython/cython/wiki/64BitCythonExtensionsOnWindows) (though you can use it for 32-bit builds as well) You can put that in a .bat file with &lt;path to venv&gt;\Scripts\activate for ultra automation. b) WHEEL! Python 3.4 comes with pip, otherwise get pip, then `pip install -U &lt;whatever&gt;` a lot of things come with wheels, well things I use (PySide, cffi, etc.). Wheel is the future of python binary packages, and... it just works. it's nice. c) you can install most of the gohlke binaries with `easy_install &lt;path_to_exe&gt;`
What is your goal for the project? This could be a good way to learn Flask for the future. But if you would rather just see the project done, and probably done quicker - go with what you're familiar with and use Tornado. Flask doesn't have anything async built in but there are plenty of ways to accomplish it should you go that route.
You should pick up Flask and use it to serve your web app, as that is what it's made for. It is fine to run Flask using the default WSGI server for development purposes, but please don't run it in production (the default WSGI server Flask ships with is single-threaded and will block). Rather, pick one of these standalone containers from this list: http://flask.pocoo.org/docs/deploying/wsgi-standalone/ That will take care of your concern for scalability.
As long as you have a decent amount of ram, I think VMs are no problem. I mainly run OSX, but I have done a lot that required Visual Studio. Instead of dual booting, I just ran it in a VM and it felt native. Occasionally there's oddities, but they're rare. I'm sure Linux in a VM is better.
Yeah. The guy doesn't seem t bother searching For solutions that require more than click/install. Never had problems using python on windows for like 7 years. Pyaudio could be acting funny but it's even worse on mac. 
Python has learned many things from Haskell. I'm learning both languages more-or-less at once, which questions my sanity but reveals undeniably that Python's DFL GvR looked at Haskell for inspiration and kept returning to it for more features. Python is touted as the first language to use meaningful whitespace for indentation of code blocks. Haskell did it first. Look at list comprehensions, also touted as Python's core strength, taken from Haskell. In Python: [x*2 for x in [1, 2, 3, 4]] In Haskell: [x*2 | x &lt;- [1, 2, 3, 4]] How awesome is that?
Some of these issues remind me of where and why I use Go instead of Python.
Has anyone had success with using lighttable on larger projects? Every time I've tried, LT just stalls. 
This is mostly right, except that multiplication uses the Karatsuba algorithm instead of the grade school algorithm if the numbers are big enough. (Because it's faster.) See the k_lopsided_mul functions.
There's a lot of sniffy "Anyone who has a problem with Python on Windows is an idiot" attitude in here. Anyone who tries to install a python package they find on the web will undoubtedly follow instructions to "pip install". Which, in my experience, works about half the time. When it doesn't work, the error messages are lengthy and oblique. Eventually, you might stumble across Christoph Grohlke's page, which is utterly essential for Windows Python users, but which looks unpolished, and thus not necessarily trustworthy. When you can't find your package there, you have to install Visual Studio to make python do what you want. "That can't be right! The instructions just said to pip install, and said nothing about Visual Studio!" If you decide to do that huge install, you still might not succeed. I've certainly never successfully compiled a Python extension that way.
To help him get better, to create a new, better service, to study and learn, etc. I'm not saying you did/do this but I'm tired of the dismissive attitude the programming subreddits have towards stuff like this. Just be nice and say thanks for the hard work and maybe include some tips to get better. No one said this is the next big thing.
Thanks! I'll look at them and see if any fit the bill for my needs specifically!
I had no problem getting pip and a few other packages that I wanted on Windows at all.
The Quick Python Book is my personal favorite. http://www.amazon.com/Quick-Python-Book-Second-Edition/dp/193518220X
Unfortunately, this wasn't the issue. I got the script to point to the right path, but it just doesn't execute the file because of the "access is denied" error.
saying this involves jumping into a discussion that tbh is way over my head, but I really want optional type checking
I am a data-analyst and i work primarily in Windows for Python development with all those scipy packages and its breeze to work in Windows. I never felt any problem with Windows or Python. P.S I use Windows 7 and Python 3.4 and no, i don't use mingw or cygwin.
The installer has the option to add to PATH, you just have to select it. It's a drop down menu.
Own and have read both. LPTHW is a great book to get you up and running quick. Learning Python is a great deep-dive into the language internals.
Ugh, yes. I once spent an entire three-day weekend failing to install numpy, or some library. So much happier on Linux. Getting pip setup should not be more difficult than switching your OS and completely setting up the new one...
Post the latest version of the entire script then.
Windows tip of the day: &gt; pip/pip.ini: &gt; &gt; [install] &gt; use-wheel = yes &gt; &gt; [wheel] &gt; wheel-dir = /some/wheel/dir `pip install wheel` `wheel convert lxml-3.3.5.exe` Move `lxml-3.3.5-cp27-none-win32.whl` to /some/wheel/dir That makes everything so much easier after you get a few common packages converted to wheels. 
I can honestly admit that I have exactly zero problem using Python on Windows. Installed it with scoop once and using it ever since.
It is awesome, but I prefer Python's syntax. "for _ in _" reads better in my brain than than translating "pipe _ stupid arrow _". I'm not a big fan of Ruby's {key =&gt; value} rocketship for hashes either. Good thing it's optional and I can just do {key: value}. edit: admitting this is nitpicky before I get called out for it on le reddit.
[get-pip.py](https://bootstrap.pypa.io/get-pip.py) for those wondering. Installs pip &amp; setuptools at the same time.
You can also `wheel convert &lt;gohlke_installer&gt;.exe` to get a pip-installable `.whl` file that will stay in a virtualenv, very handy.
[Chocolatey](https://chocolatey.org/) is slowly making some inroads.
Is there some PyCharm hate going around that I don't know about? The guy knows nothing about PyCharm except that it is an IDE and therefore he doubts it is anywhere near as good as dialyzer... even though PyCharm takes care of much of what he is complaining about.
`easy_install`ing them doesn't work with virtualenvs? It seems to work for me just fine. Or do I not understand? It'd be nice if we could get the gohlke installers as wheels on PyPI through... magic.
learning python is 1600 pages :(
Not just an AI, a self aware AI with emotions and unique thoughts. Fun stuff
&gt; Python is touted as the first language to use meaningful whitespace for indentation of code blocks. Haskell did it first. Python's indentation actually derives from the ABC programming language, which GvR worked on in the early 80's. So actually, *ABC* did it first. (And the first Python and Haskell implementations were started during the *same year*, so it's hard to pinpoint which one actually implemented whitespace processing first, anyway.) 
Here's the output from the program. It correctly gets the new coordinates, but doesn't save them as the ship values. If you enter either the coordinates of the first, second, third, etc placement of a ship, they're all a miss. It does print an asterisk for the last "iteration", where it correctly gets new coordinates, but they're not cleared later for some reason. And they don't return a Hit. http://pastebin.com/7BjpT4m6 
At work I have a Mac. Not a perfect compromise (e.g. I have to use Outlook at work and the Mac version is randomly missing important/basic features, like no "print selection" option; and you occasionally get), but overall it's a very good middle ground. Makes it easy to bounce between GUI and CLI without having to run a VM or dual boot. The other thing is you'll occasionally get packages (in general, not just Python) which don't have a Mac version, but I've only seen a couple of cases where nobody had a sane solution for how to tweak a *nix version to install on OS X. And it's often not even tweaking the package itself so much as a non-obvious installation procedure. 
Haskell's syntax is that way because it hints at its deeper, monadic structure. 
Easy to use the print function in 2.7 &gt; from \_\_future\_\_ import print_function
You don't even need it man, it's a waste of money if you ask me. Just sit through any one of the 1,000's of tutorials out there. Do multiple tutorials, do like 10 tutorials. You'll never make the mistake of learning too much. Google is your friend. Nearly every question you can have while learning a new language can be typed directly into Google, and your answer will be on the first page. I'm only saying this because the best coders are the ones that can research and find their own answers to their questions. Knowing how to find information you need is the most valuable skill a programmer, or any professional for that matter can have. Forums can be great for finding some obscure answer or getting answers to really complex questions, but when people constantly ask "how do I learn Python" or "what book is good for learning python" then the real, tough questions go unanswered or buried. I wish you success in your undertaking, python is fun. Edit: Also, reading a programming book cover-to-cover is a waste of time, programming is best learned by doing. Plus it's hard to have a book open while you're trying to read and type on the keyboard at the same time. Save the trees and all that crap.
I understand you're doing this to learn python, but if you were doing it to get the game you had in mind written, there are already some great DSLs for text adventures, such as [Inform](https://en.wikipedia.org/wiki/Inform). 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Inform**](https://en.wikipedia.org/wiki/Inform): [](#sfw) --- &gt;__Inform__ is a [programming language](https://en.wikipedia.org/wiki/Programming_language) and design system for [interactive fiction](https://en.wikipedia.org/wiki/Interactive_fiction) originally created in 1993 by [Graham Nelson](https://en.wikipedia.org/wiki/Graham_Nelson). Inform can generate programs designed for the [Z-code](https://en.wikipedia.org/wiki/Z-machine) or [Glulx](https://en.wikipedia.org/wiki/Glulx) virtual machines. Versions 1 through 5 were released between 1993 and 1996. Around 1996, Nelson rewrote Inform from [first principles](https://en.wikipedia.org/wiki/First_principle) to create version 6 (or __Inform 6__). Over the following decade, version 6 became reasonably stable and a popular language for writing interactive fiction. In 2006, Nelson released __Inform 7__ (briefly known as __Natural Inform__), a completely new language [based on principles of natural language](https://en.wikipedia.org/wiki/Natural_language_programming) and a new set of tools based around a book-publishing metaphor. &gt;==== &gt;[**Image**](https://i.imgur.com/XgCtiQj.png) [^(i)](https://commons.wikimedia.org/wiki/File:Inform_7_code_and_skein.png) --- ^Interesting: [^Institute ^for ^Operations ^Research ^and ^the ^Management ^Sciences](https://en.wikipedia.org/wiki/Institute_for_Operations_Research_and_the_Management_Sciences) ^| [^INFORM](https://en.wikipedia.org/wiki/INFORM) ^| [^Information](https://en.wikipedia.org/wiki/Information) ^| [^Informant](https://en.wikipedia.org/wiki/Informant) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cj46gfm) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cj46gfm)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
(*Spyder dev here*) I've got the same freeze while using Anaconda and sklearn 0.14.1. But it disappeared after updating to sklearn 0.15.0.
Are you familiar with another Unix?
Sure, but you almost always have gcc, boost, etc already installed, and if you don't it's one command away. On Windows it's often a pain to get one program to recognize another exists.
" Also, reading a programming book cover-to-cover is a waste of time, programming is best learned by doing" I read those 1600 pages and I learned a lot of things. I'm sorry but what you are saying is not true in all the cases.
I found Spyder to be seriously unstable (win7). I like the free version of PyCharm. Plus it has a tonne more features and it does them all very well. 
I've given up trying to do "pip install mysql-python" . There is always either a dependency problem or it crashes because it can't find some visual c dll duck me whatever. If you want to python, use Linux. And never ever try to create an executable (.exe). It's not worth it. 
and msvc, and gcc, and mingw, and msys, and cygwin, and Ubuntu in vbox. And ubuntu.
I haven't used PyCharm myself, but now that I'm looking at type hinting, here are my thoughts: At first glance it does have some nice features. But it's still a system that sits on top of python and has to be navigated by the IDE. Doesn't change the fact that python could do more with built-in type annotations than just type check. Optimization, typeclassing, and automated testing were mentioned in the talk. I've only been studying Haskell for 2 months, but I sorely miss the elegance and conciseness after going back to write Python, so I definitely empathize with Bob.
I don't think its specifically targeted at PyCharm, but instead that there are still a lot of developers that absolutely refuse to even consider using an IDE (probably because they have this memory of how terribad Eclipse was 10 years ago)
What do you mean? You can check type in Python. Use the `type` or `isinstance` function. Unless I'm missing something.
C# doesn't have an official package manager, that is true. But installing nuget is very easy. I don't even know what to say about Delphi, I certainly have never used it. Java would definitely be my major language of comparison: Maven, whilst not perfect, at least is simple to get going quick. The compilation problem is the fault of both I think. Microsoft's fault for making it so hard to get going on 64-bit machines and Python's fault for sticking to Visual Studio 2008 as the reference compiler for Python 2.7. I can see why they had to do that to ensure compatibility, but it's a horribly old compiler now. Unfortunately, due to various issues that I'm not sure anyone is interested in, you have to use Visual Studio 2008 or you can't guarantee your C-extensions won't generate runtime exceptions. Also, Visual Studio &lt; 2012 doesn't support C-99! Anyhow, Python 3 has gone a long way to fixing these issues with built in pip so I guess the best thing to do is rely on 3rd party tools like conda. Which I'm actually OK with! I struggled against conda for a long time, but I've been fully converted. The conda build system is very similar to homebrew on OSX and makes building extensions much friendlier. 
Please do. Such documentation would be truly appreciated. Also, does anyone know how to get pip to work behind a corporate proxy? I have special characters in my username and password and no solution provided in SO is working for me. Am using Windows.
He probably means *static type-checking*. That is, verify the types of the program make sense before the it's actually run. Don't think it'd be an easy thing to do though.
The pyladies blog is outdated. I think it's lack of time.
In 0.14, sklearn Random Forest models use Python multiprocessing forks while in 0.15 they use threads (but other models and tools still rely on Python multiprocessing). Apparently a library shipped with Anaconda is not robust to multiprocessing `os.fork`. Have you MKL installed in Anaconda? In Python 3.4 you can fix this class of crash by using the [forkserver](https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods) start method instead of the default "fork" method. 
Funny thing about list comprehensions is that I actually *seldomly* use them in Haskell whereas it can be quite common in Python. Part of the reason is that a lot of the typical uses of list comprehensions in Python can be more succinctly translated into point-free forms. For example, [x * 2 for x in [1, 2, 3, 4]] # Python would be translated to map (* 2) [1, 2, 3, 4] -- Python equivalent: -- map(lambda x: x * 2, [1, 2, 3, 4]) rather than a list comprehension. List comprehensions are more powerful than `map`, but the additional flexibility isn't always needed. One reason is that `map` is rather awkward to use in Python because of the lack of currying as well as limitations of Python lambdas. For example, compare [max(0, x) for x in [-2, 1, 3, -5]] # Haskell equivalent: # [max 0 x | x &lt;- [-2, 1, 3, -5]] with map(lambda x: max(0, x), [-2, 1, 3, -5]) # Haskell equivalent: # map (max 0) [-2, 1, 3, -5] # or the less concise version: # map (\ x -&gt; max 0 x) [-2, 1, 3, -5] The advantage with list comprehensions is that they are typically easier to read than their pointfree counterpart though YMMV. :P The advantage of `map` is that it works on more than just lists. It generalizes to `fmap`, which works on any `Functor`. This includes not just most containers but also things like the optional type (`Maybe`), monads, and applicative functors. 
Google is your friend: http://lmgtfy.com/?q=python+open+and+read+file
I think it's pretty neat that any list comprehension can be translated into a monadic `do` block: [f x y | x &lt;- xs, y &lt;- ys, x == y ] is equivalent to do x &lt;- xs y &lt;- ys guard $ x == y return $ f x y z
To open the file and read it's content line by line, you could do the following. with open('filename', 'r') as f: for line in f: #do magic here 
Stop struggling with Windows, basically
I'm pretty sure I didn't have to do anything to let Python know that Visual C++ Express was installed apart from install it. I've not come across a need for Boost, though.
Yeah, that didn't work properly when I first tried it a few years ago. I think you needed easy_install before get-pip would work.
There's already syntax support for function argument annotations at least. It would be trivial to statically type functions with a decorator. I might even do an interface implementation for fun.
Type-checking wouldn't be that hard, it's just that how the language is designed makes full program type inference next to impossible (subtyping, open classes, isinstance, reflection). So you'd be stuck locally annotating everything, and retroactively adding signatures to all existing code. Realistically, given how much pain there has been even over the small changes Py2-&gt;Py3, I don't foresee something as drastic as a typed dialect of Python gaining traction anytime soon.
a looooong time, well, i had to get my head around it at first, but then when i got the idea, it took me like 3 weeks. when i finished, i went out my room and huged my mom, she was pretty confused, but went with it. it was for a school assignment, teacher told me i did, like, the most coding work, but the portfolio was my down fall, still, 83/90
No, if you just want pip, all you need is get-pip.py . (And a working python interpreter, of course) I don't understand why you think you need linux for development. Text editors work fine on nearly any OS (And the python interpreter works on nearly any non-archaic OS).
I'm fairly sure you don't need easy_install for get-pip to work. I don't think you ever did, but maybe.
http://www.reddit.com/r/Python/comments/1nq6re/python_package_managers_easy_install_works_behind/ This might be helpful, As for windows related problems I'm not familiar with those.
If it's just for installing packages you can download them individually here: http://www.lfd.uci.edu/~gohlke/pythonlibs/
This is not an interesting response. If you want to chug the "go is cooler than python" kool-aid, at least put in the effort to explain why.
Python list comprehensions can be used with arbitrary monads as well (unlike Haskell list comprehensions, ironically). And "for x in monad" reads entirely fine, for all monads I can think of, as soon as you manage to switch from the strict programming meaning of "for" to the actual English meaning. I personally like the C# syntax even better, because it makes more sense to have the return in the end so that every variable is declared before it's used. Easier to write code, too, because autocompletion works. Plus, of course, it has "let x = ..." and other goodies. **edit:** I had a mind fart, what I meant to say was that C# list comprehensions are monad comprehensions but have syntax isomorphic to Python list comprehensions (but slightly better because reordered), so it's not about syntax.
Ask your IT department. 
Thanks. I use virtualenv. Won't binaries be installed globally? or is it possible to install a binary in a virtual env.
Subquerying with IN is really simple in peewee. Also pretty fast, not as fast as Perl's DBI though.
Reading this makes me feel so much saner. I've just gotten in to python and have been using this page: http://www.tylerbutler.com/2012/05/how-to-install-python-pip-and-virtualenv-on-windows-with-powershell/ to start, and I feel like I'm taking crazy pills because I have to double check a dozen things with each step.
Note that while few projects do it yet, it is possible to ship Python `.whl` package for Windows on PyPI. When this is the case, `pip install` will install (very quickly) those packages without having to compile anything from source. To help Python projects that have C-compiled extensions generate valid .whl packages for the Windows platforms (32 bit and 64 bit for Python 2 and 3) I have published a sample project that uses the free AppVeyor CI infrastructure to build, run tests and generate packages: https://github.com/ogrisel/python-appveyor-demo
Except your last line is really ugly and hard to read. print('{} - with length: {}'.format(word, len(word))) Also words can occur multiple times and punctuation is handled as words. import re filename = 'some.txt' all_words = set() # all items in a set are unique first_word = None last_word = None for line in open(filename): # open files are automatically line generators words = re.findall('\w+', line) # regular expression that finds "words" if not first_word: first_word = words[0] all_words |= set(words) # merge words into all words if len(words) &gt; 0: # ignore empty lines last_word = words[-1] longest_word = max(all_words, key=len) print(''' file: {} total number of words: {} first word: {} last word: {} longest word: {} '''.format( filename, len(all_words), first_word, last_word, longest_word ) ) (edit: comments, oops) 
"`for x in getLine`" doesn't really make a whole lot of sense. `getLine` is not a container type, therefore there is nothing "in" it. The IO monad and many of the other nontrivial monads are supposed to represent actions rather than things. And if IO doesn't work with the monadic syntax, then haskell doesn't have very much going for it. And do you even `-XMonadComprehensions` bro? /s
Pony ORM is a very interesting library. It does some incredibly hacky, complicated, magic things internally, but the end result is an API that is much more Pythonic and simple to use than most other ORMs. Seems like a loophole in the Zen of Python.
That's also the guide that I used, and PowerShell *still* throws errors whenever I start up a venv. But it works, so I've put off solving those problems because I don't really do Python on Windows for more than simple scripts anyway.
Really? I haven't had a single issue on 7 or 8 on a few different machines when used with x, y. I like it's Matlab feel mostly. 
Thanks, I updated to 0.15.0 and the problem was fixed. For reference I am using anaconda, python 3.3.5. No MKL.
After reading this article, I decided I'd try to install these packages on my Windows system. First I tried virtualenv, and the installation could not possibly be smoother. pip install virtualenv, then I tried it and it just worked as advertised. Next I tried numpy. Minor hitch, something about manifests was broken for compiling with Visual Studio 2010 which was only patched the other day. No worries, I used a workaround and it compiled and installed. Then I tried scipy. Didn't go as well... needed BLAS. Took me a bit to figure out how to compile BLAS. It's a Fortran library. Also needs Lapack. Got lapack to compile but had problems making it link, something about the high number of object files produced. Seems Windows doesn't like when your command line arguments get too long. And so I left it at that for now. I'll try scipy again later. 
Thanks, that looks much better :)
A few reasons: * Because docopt provides no input validation. In order to get it you must *repeat yourself* - and enter information about your arguments at least twice; whereas some input validation is very good and easy to read in argparse. * Because programmers and users don't have the same needs, and don't need the same documentation except in trivial examples. If you have a non-trivial application do these users a favor - and write the documentation they need. * Because much of the motivation behind docopt is flawed. The author bragged about how few lines of code took. That was because it handled no edge cases. It's far larger now, and slow to evolve. The author described how hard argparse is to use - and the reality is that both tools are simple to use for simple needs. Both can get complex. * Because doctopt is based on a flawed premise - that there is a standard for posix CLIs that programmers already know. While there is a standard, pretty much nobody knows it. Certainly not the common edge cases.
This looks very useful to those who seldom write CLIs and are unfamiliar with argparse. It's a nice kind of tool.
This works for me, though I don't have any "special characters" in my user name or password... Try setting the following environment variable in Advanced System Settings of your computer's properties: variable name: https_proxy variable value (something like): http://username:password@10.3.0.99:8080 Note that Pypi uses https. Note that the URL of your proxy server probably starts with "http". No "s" on the end. If that doesn't work, let us know what pip is reporting. Someone might have an idea how to fix things if you post the log entry. 
Seems there's no straightforward way of making pip work. Am trying the other solutions. So far no success. I will update this link once I find a solution that works
You can only pip pure python libs. Many python libs need to compile to .so or .dll or .pyd
And an up-to-date Github mirror is https://github.com/python/cpython
pygame will repeat the work of loading an image every time you ask it to do so. Programs like games would normally load all the needed images or sprites into variables or data structures once, and then blit them repeatedly as needed. Programs like image viewers, where all the possible images would definitely not fit in memory, would normally re-load each image from disk and display as requested.
There is nothing stopping you from using both Tornado and Flask together. They each solve a different problem. Flask is a web framework, where tornado is an async library. At my work, we use both side by side. Flask servers the webpages and Tornado handles the websocket connections for us. 
It's a long shot but Powershell should be able to handle special characters at the command line.
Am a getting a "407 Proxy Authentication Required" error. I have the special characters '/' and '@' on my user name and password. Am substituting the hex %2F and %40 respectively on their stead. Am I doing this right?
did you use the http-proxy with your username and password? sudo pip install âproxy=user:pass@url:port (whatever the equivalent command is on Windows)
I'm just grasping at straws here: Try putting double quotes around your user name and password http://"username":"password"@10.3.0.99:8080
Have you tried [win pip](https://sites.google.com/site/pydatalog/python/pip-for-windows)? It was the only way I could get things to work behind our firewall.
I might not dress properly to be living in Austin and using a Mac. Yeah THAT HAS GOT TO BE IT!!!! Thanks!
Homebrew is great! I have been using it but I found myself breaking the setup tools install by trying to update through my IDE. Finally figured that out and things have been a little better as of late.
This looks promising. Let me try and revert to you.
That was among the first solutions offered in SO. Doesn't work.
I use the official Python Windows binary with Pycharm and can get a virtualenv setup with all of the required package managers in less than 20 seconds
Sorry I am tapped out. Maybe the IT dept. can give you a new user name and password?
This is exactly what Conda does, just that their list of supported packages is even longer, they have binaries for Windows/OSX/Linux, and you can automate the installation `requirements.txt`-style, even on Windows. 
Thanks for your effort. IT here can be pretty inflexible but I will give them a try. The easy solution has been to use my tethered phone.
Sounds like the twistd program is not in your Windows PATH environment. I haven't run it on Windows recently, but [twisted:WindowsBuilds](https://twistedmatrix.com/trac/wiki/WindowsBuilds) says &gt; There is a shortcut in the start menu for the Twisted Command Prompt which is a standard Windows command prompt with PATH and environment variables set up to invoke the Twisted commands the same way you would on Unix; e.g. "mktap". 
Config once solution for me was to setup windows environment variables HTTP_PROXY=http://proxy.company.co:80 and HTTPS_PROXY=http://proxy.company.co:80
Try Guile. It has a decent C embedding API, which you can call into with cffi.
Have you tried locating the executable and then ensuring that you modify the windows %PATH% to have the path to it there so it can find it? If you have it installed and on your machine, that's where I would start.
Hi, I'm the author of peewee. Thank you so much for the write-up. I saw you ran into trouble with `insert_many`. Here is how it works: &gt; The class supports an insert_many method too, but whenever I tried to save the data via the save() method, I received an OperationalError message. If you happen to figure out how to do this, drop me a line in the comments and Iâll update this article. As a workaround, I just looped over a list of dictionaries and added the records that way. albums = [{"artist": new_artist, "title": "Hell is for Wimps", "release_date": datetime.date(1990,07,31), "publisher": "Sparrow", "media_type": "CD" }, {"artist": new_artist, ... etc ... ] Album.insert_many(albums).execute() Hope that helps!
`echo %PATH%` look to see if your python installations `\Scripts` directory is present. Also, if you have Python 2.7 installed on c:\ you can do a test like `c:\Python27\Scripts\twistd.py --version` ( it "should" execute a .py file if you used a windows installer ). WARNING - Below is instructions for adding your Python installation to the Path, if you delete information or cut your path down by accident, you can make life somewhat miserable for yourself when using a cmd or Powershell terminal. I recommend copy'ing your %PATH% output to a file or somewhere as backup until you're sure you've got it right. If the \Scripts directory is NOT in your path, press Windows Key + Break ( it's the right system key on the right side of your keyboard ), the system menu will show up, on the left side is a menu labeled "Control Panel Home", click "Advanced system settings", a new window labeled "System Properties" will show up, near bottom of the window is a button labeled "Environment Variables", click that, in the first list box titled "User variables for..." (it will say your username on the ... part) click on path and APPEND ";c:\PathToYourPythonInstallation\Scripts\" replacing the base directory with your Python installation path. Open a new terminal/shell and type "twistd --version" it should work, if it doesn't check your %PATH% and ensure you put a ; between the directories, there are no typos, and the path you appended is correct. You don't need to restart your computer for this to take affect, just start a new shell prompt and it will load up with an updated path.
Since everything is done in getUserInput(the only call in main), I changed the score to 17 so it would go back to main and it prints the coordinates a 0,0. I also tried making a function to place all the ships in main, print the coordinates, then use getUserInput to play, but still get 0,0 for everything. I've tried a lot of things but still can't get it. The main problem was if a computer ship had to be replaced, the new coordinates would appear as asterisks but the actual coordinates were 0,0. However, if it didn't have to be replaced, the program worked just fine. It's messy, but here's what I have so far, with all of the things I've tried commented out. Main changes I've been making are in def main(), def randPlacePlayerShips(), def randPlacePlayerAircraftCarrier, and the very beginning of defUserInput(). http://pastebin.com/yxYDr9td 
Have you ran into any hiccups or other issues?
&gt; it "should" execute a .py file if you used a windows installer looks like it does not PS &gt; c:\Python27\Scripts\twistd.py --version PS &gt; python c:\Python27\Scripts\twistd.py --version twistd (the Twisted Windows runner) 14.0.0 I do have "Scripts" in PATH: PS &gt; ($env:Path).Replace(';',"`n") --snip-- C:\Python27\Scripts Why is the shebang (#!c:\python27\python.exe) ignored ? what to do now ? thanks 
http://stackoverflow.com/questions/4316883/py-files-opens-up-in-a-text-editor-when-run-from-cmd which links to a MS knowledge base howto http://support.microsoft.com/kb/307859 edit: I always use the installer because I'm lazy, but the Python Documentation is much more concise on what you need to do to get Python and Windows to be friends - https://docs.python.org/2/using/windows.html#executing-scripts 
OK, before I got this comment, I changed default program to python.exe (it was text editor, duh) cmd &gt;twistd --version 'twistd' is not recognized as an internal or external command, operable program or batch file. cmd &gt;twistd.py --version twistd (the Twisted Windows runner) 14.0.0 Do you need the .py extension in your case ? Edit: OK, need to modify PATHEXT thanks ! 
I use this at work every day to get around our proxy. CNTLM has made my life so much easier. It was super easy to set up. Also, if you're having problems with pip you're probably going to have issues with urllib as well until you install CNTLM. Once you do install it, you'll have to point any proxy stuff through CNTLM (e.g. proxy ip below). I also call pip from python (just for ease) which seems to work really well for me. http://cntlm.sourceforge.net/ import os; os.system("pip install pippackage --proxy=https://127.0.0.1:3128") Edit: P.S. Sometimes pip won't work for me for whatever reason, and when it doesn't I just go here https://pypi.python.org/simple/ then I find the package (download it), and run python setup.py install on the package. You probably already knew that, but just making sure.
*"There are clearly cases where I prefer how Go handles or performs, and the video (which I enjoyed) simply reminded me of that....I did contribute something to the conversation. If someone wanted to know more, they could simply have asked."* You keep mentioning how "Clear" these cases are, yet you've yet to specify what these cases are. "X is better than Y sometimes" is not a meaningful or interesting comment. "X is better than Y for case A, B, and C because reason_1, reason_2, and reason_3." is. (Assuming that X or Y are inherently interesting subjects)
Is "revert to you" a real phrase? Where did this come from? 
&gt; Am in a university of about 30,000. Have you thought about going to your Uni's CS office?
When you call: elif grid[acV4][acH4] == "*": print("Ship already placed there.(4) Select another position.") randPlacePlayerAircraftCarrier(grid) What are you doing with the output of randPlaceAircraftCarrier? When you place the computer ships: randPlaceComputerBattleship(grid) randPlaceComputerAircraftCarrier(grid) randPlaceComputerSubmarine(grid) randPlaceComputerDestroyer(grid) randPlaceComputerCruiser(grid) print_grid() Where's the output going. [Spoiler](/s "Hint: nowhere. You aren't saving it so python is dropping it. The reason the grid is changing is because of an neat/annoying quirk where lists don't always have to be passed back.") 
There exist a number of them on Pypy, I made one a terrible one a while back and posted about it here.
This is a pretty cool little app. I just began my study of Flask myself, and this is quite an inspiration, keep at it!
It's not used in the US or Britain, but it has some popularity in places like India, and perhaps Kenya...
I changed all the coordinates for the aircraft carrier to a different variable. I added a P before each one, so PC_acV1. p for place. In the last statement, I have it to where if stopPlacement = False, the actual variable = the P variable. Then it returns a list of the acutal variables. I've ran it a few times and it appears to be working correctly. Thanks again!
Correct. It's funny how if you're not a native speaker people will always find out. Small odd phrases like that always betray you.
 print "your mom"
Don't use windows for open source work? Duh.
If you want to go a little deeper than using a library then give [this](http://www.pythonforpentesting.com/2014/03/python-raw-sockets.html) a read. It gives a quick overview of the OSI model and creates a simple packet sniffer using raw sockets.
Have a look at the pandas package. It does data manipulation and might make your life a bit easier, not entirely sure it fits your problem but give it a shot anyway. 
Source?
Of course! Just make sure to credit the individual contributors and please link back to the repo or site!!
bottom of the page
def oneline_of_python(): pass
 with open(myfile, "r") as file: #a safer way of dealing with file objects values = [] #an empty list of values count = 0 for line in file: tokens = line.split(" ") if tokens[0] == "ITERATOR:": # I think, it might be tokens[1] though if count &gt; 0: #output the current values to a file named [count].txt #something like with open(str(count)+".txt", "w") as output: output.write(values.join("\n") values = [] print(line) count +=1 else: values.append(float(tokens[0]) * 627.05) I think that about covers it
it's a Flask app 
import antigravity
Have you looked at NetworkX yet? You could use a directed graph option for cases where/if "A knows B" but "B does not know A."
So the name of the data structure you're referring to is a "[Graph](http://en.wikipedia.org/wiki/Graph_%28mathematics%29)" or a "Network". I will refer to these as graphs from here on out. [Graph Theory](http://en.wikipedia.org/wiki/Graph_theory) is a whole branch of mathematics that gets very complicated very quickly, but is fascinating if you have some time to check it out. First, let's talk terminology. A graph can either be [Directed](http://en.wikipedia.org/wiki/Directed_graph) or [Undirected](http://mathworld.wolfram.com/UndirectedGraph.html). If a graph is directed the start and endpoints matter, while an undirected graph just connected two nodes. Graphs can have multiple edges connected nodes, or just one. To answer your question, you are on the right track. The type of data structure you're describing is called an [Adjacency Matrix](http://en.wikipedia.org/wiki/Adjacency_matrix) and its entries are usually zeros and ones. | 1 0 1 | | 0 1 0 | | 1 0 1 | Where a zero indicates no relation and a one indicates a relation. This data structure is very powerful as you can use common linear algebra functions to learn more about the relations contained in the dataset, however you are correct in that updating edges requires 2 locations to be changed, but this constraint is unfortunately hard to get around. The next type of commonly used data structure is an [adjacency list](http://en.wikipedia.org/wiki/Adjacency_list), which is formatted as such. A -&gt; [A, C] B -&gt; [B] C -&gt; [A, C] But again you have to update two locations every time you change an edge. The last commonly used format is called an edge list, which is very straightforward: just a list of all connections with nodes implied through edges. [(A, A), (A, C), (B, B), (C, C)] or (if you don't keep self-relationships) [(A, C)] Now let's talk about Python. Python is great for this, but without a doubt I would look at [NetworkX](https://networkx.github.io/) before you rush off to implement your own custom class. NetworkX is the de facto library for dealing with graphs. It has built in connectivity with Matplotlib (so you can do visualizations) and supports every mentioned graph type. It can read the [DOT Language](http://en.wikipedia.org/wiki/DOT_%28graph_description_language%29) using pydot and convert between formats easily. Oh, and the best part? It can use almost anything as a node, so you could create a custom `Node` class that has all the features you want. It wasn't clear from your post whether or not you knew this already, so I apologize if I gave repeat info, but I figured it would help someone. As for my recommendation, I **really** like adjacency matrices. They're fast, easy, and if you use Numpy it's a piece of cake (and hey! NetworkX supports it too!). Please ask questions if there's anything I need to clarify.
I'm going to go object oriented here, because whynot, and because it adds a bit of clarity. Lets say we start by defining a simple person class class Person(object): count = 0 people = dict() def __init__(self, name): self.name = name self.id_ = Person.count + 1 #id is reserved in python, I shouldn't use it Person.count += 1 Person.people[self.id] = self self.relationships = dict() def friends(self): pass #for now This takes advantage of erm, weirdness, but I've essentially just created a less than great database of "People" with names. Now, I'm going to make a class of relationships: class Relationship(object): count = 0 relationships = dict() def __init__(self, person1, person2): #so this will be a linkage between people self.person1 = person1 self.person2 = person2 if person1 is person2: #using "is" and not == is technically correct here, we want them to be the same object self.type = "self" else: self.type = "friends" #or you could pass this in as an argument self.id_ = Relationship.count+1 Relationship.count += 1 Relationships.relationsips.add(self) person1.relationships[person2] = self person2.relationships[person1] = self And this creates a mapping between "People", note that this make a good bit of use of hashing being nice to you. Now we can go back and implement Person.friends: def friends(self): friends = set() for relationship in self.relationships: friends += {relationship.person1, relationship.person2} return friends - {self} and that will return a python set of all of the people who someone is friends with Do note that this isn't a "better" way per say, its more expressive, but using a matrix is probably more space efficient. As an aside, writing relational code about a class called relationship is almost as annoying as writing a tool that deals with school classes. `for class in classes:` "F!*( that causes an error" 
good job bro!
Thanks a million for this overview. I did not know the terminology and NetworkX before, so you gave me very good directions!
Very interesting take on the question and a good solution from scratch. Thanks!