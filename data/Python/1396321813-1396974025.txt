This is cool, perhaps you should also post it to /r/MachineLearning
whats the deadline to writing a review? can I read the book and then give it an honest review? 
I bought a copy back when you were selling the book on the cheap ($5-10) and ended up giving it to a family friend who was 12 at the time. I believe his 8th grade class (in Hewitt, TX) was actually using the text.
Downvoted it for a few reasons. 1, spamming reddit with your own SO answers. To quote [reddiquette](http://www.reddit.com/wiki/reddiquette): &gt; Feel free to post links to your own content (within reason). But if that's all you ever post, or it always seems to get voted down, take a good hard look in the mirror â€” you just might be a spammer. A widely used rule of thumb is the 9:1 ratio, i.e. only 1 out of every 10 of your submissions should be your own content. All of your recent submissions were made in the past week promoting your own SO answers. (2) Suggesting that the reason for `if __name__ == '__main__'` idiom is only for testing. That's definitely one reason, though its often quite common to have a stand alone script that is executed on its own, but also contains functions, classes, and data that you may want to import in other scripts. (3) Suggesting that this: def main() foo = do_important() bar = do_even_more_important(foo) do_super_important(bar) if __name__ == '__main__': main() is more pythonic and runs "faster" than: if __name__ == '__main__': foo = do_important() bar = do_even_more_important(foo) do_super_important(bar) At best this is an incredibly tiny micro-optimization that should be extremely far from any python programmers mind. At worst, its not even true in your example as you add an extra function call (done from the global namespace). Yes if you have many many variable assignments and lookups, it will be slightly better in a local function (where the compiled bytecode will have it in an array) versus as global variables (where they will be in the global dict and have to do a single hash). But you only have two variables that are used once each. And (4) honestly [Mr Fooz](http://stackoverflow.com/a/419185/457571) and [pi](http://stackoverflow.com/a/419986/457571)'s answers were clearer and predated your answer by years.
Please!
Whoa, that's awesome. If they need multiple physical copies of the book, have them email me for the educational discount code. (Roughly 50% off the $25 price.)
Email me so I add you to the spreadsheet I have to track reviewers. Ideally I'd like the reviews done some time in the next 60 or 90 days. And I definitely want an honest review; you'll get a book even for 1-star reviews.
&gt; Expert Python Programming +1 for this one, really mind blowing
I have one of your books! I've had it for a few years, and it was really helpful! I'll try to do a review asap :)
https://pypi.python.org/pypi/SimpleGUICS2Pygame/ :)
&gt;Suggesting that this: ... is more pythonic and runs "faster" than: ... I didn't read the answer, but it is, for two reasons. 1. In CPython, local variables are stored in an array, and global variables are crammed into a dict. Obviously, dereferencing a single address is way faster than doing a dict lookup. 2. You can accidentally overshadow some built-ins or globals in your `if __name__ == '__main__'`, possibly breaking the rest of the module. There's no such danger if everything you do is contained within local namespaces.
Just want to re-iterate: urandom is what you want. urandom is always what you want. Please don't ever do anything but use urandom: http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/ It's also worth noting that `os.urandom` works on Windows as well, where it uses the `CryptGenRandom` API, which is the Windows version of `/dev/urandom`.
What do you mean, only certain objects? I imagine if you started doing some really weird stuff, it'd be an issue, but I was able to drop in a custom class I had with just some attributes and member functions and it worked perfectly.
Here it is again, even cleaner: class MyClass(object): __serialize_attrs__ = ('field', 'field2') def __serialize__(self): return {attr: getattr(self, attr) for attr in sef.__serialize_attrs__)} It doesn't work with inheritance, but you could probably add a simple metaclass to handle concatenating the `__serialize_attrs__` lists. EDIT: if you're on an absurdly old version of python, and don't have dictionary comprehensions, then I _GUESS_ you could do this: return dict((attr, getattr(self, attr)) for attr in self.__serialize_attrs__)
I remember when I started learning from your books when I was 14. When I finally have some money Ill send some your way. I can't thank you enough for making that book. Its amazing how easy it was for young me to just get it.
Sure -- I understand that, but when the global code just uses ~2 global variables each set and used once the difference between being two more extra O(1) hash lookups and one less function call is going to be extremely tiny. I couldn't measure a significant difference. Anyway to quote Knuth: &gt; There is no doubt that the grail of efficiency leads to abuse. Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3 %. This **specific case** definitely seems like a premature microoptimization that doesn't deserve mentioning in this context. Let's test it with timeit. Here's an example, where I create a dict in setup, run the code a million times and repeat it 10 times by setting a dict twice and recalling those values: In [1]: import timeit In [2]: timeit.repeat("d['a']=4; d['a']; d['b'] = 5; d['b']", setup="d = {}", number=1000*1000, repeat=10) Out[2]: [0.1384119987487793, 0.13523101806640625, 0.13491201400756836, 0.13926196098327637, 0.13965988159179688, 0.13502001762390137, 0.13479900360107422, 0.13524103164672852, 0.13978195190429688, 0.13714003562927246] In [3]: sum(_)/10. Out[3]: 0.13694589138031005 Now here, I have a function with a global array set and then assign and access two elements each once inside a called function. In [4]: timeit.repeat("f()", setup="def f():\n arr=[2,3,4]; arr[1]=4; arr[1]; arr[2]=9; arr[2]\n", number=1000*1000,repeat=10) Out[4]: [0.2758049964904785, 0.2698659896850586, 0.2695889472961426, 0.27067995071411133, 0.26947999000549316, 0.27658700942993164, 0.27397704124450684, 0.27173399925231934, 0.2713940143585205, 0.27173495292663574] In [5]: sum(_)/10. Out[5]: 0.2720846891403198 Which is significantly slower. Maybe it was unfair as the function has `arr` defined inside the function, so I could move it out and get it a bit faster: In [7]: timeit.repeat("f(arr)", setup="arr = [4,5,6];\ndef f(arr):\n arr[1]=4; arr[1]; arr[2]=9; arr[2]\n", number=1000*1000,repeat=10) Out[7]: [0.19625020027160645, 0.18582701683044434, 0.18659186363220215, 0.18817687034606934, 0.1868600845336914, 0.18778109550476074, 0.18740200996398926, 0.1860520839691162, 0.1871490478515625, 0.18740200996398926] In [8]: sum(_)/10. Out[8]: 0.18794922828674315 but still much slower. My point is if you really shouldn't be worrying about this in python, at least until your profile and find that your code is too slow and this is a bottleneck and then you really need to test.
This looks like a cool idea. Email just sent. Thanks, Al! EDIT: Also, thanks for publishing this with the Creative Commons License and donating the profits. If you're open to suggestions for donation recipients, you might also look at [Khan Academy](http://khanacademy.org/donate). They're focused more on free education in general, but they've got an impressive interactive programming curriculum that has come a long way, as well as videos on cryptography, and a great community of students. Thanks again!
Writing idiomatic Python is both optimization and readability/maintainability that's baked into the cake, and I'd much rather work with people who do that, rather than code like it's their goof-off activity, or say, "hey, it works." Those are the kinds of people I catch writing their own max function, set type, and trying to use eval everywhere, and during code review, I make them fix it right then and there so that everyone can learn from it. The point isn't to optimize. The point is to write Python the way it was designed to be written, and thereby reap the benefits, including more performant code.
Oh man, I love Khan Academy. I'm currently writing a fourth book, but Khan Academy is what convinced me that I should move away from books and try other mediums for instruction. I started up http://inventwithscratch.com because of it. Thanks!
Thanks!
Sure. Use a language's idioms. I just don't avoiding a main() function for a three line function (where all the work is in previously defined function) is a huge difference. if __name__ == "__main__": lock = thread.allocate_lock() thread.start_new_thread(myfunction, ("Thread #: 1", 2, lock)) thread.start_new_thread(myfunction, ("Thread #: 2", 2, lock)) or def main(): lock = thread.allocate_lock() thread.start_new_thread(myfunction, ("Thread #: 1", 2, lock)) thread.start_new_thread(myfunction, ("Thread #: 2", 2, lock)) if __name__ == "__main__": main() Again, the second makes sense if you ever will need to call `your_module.main()` from something else. But in that case I'd try to give the function a more descriptive name than `main`.
Agreemsg: I could live with the variable names being single letters, but *argument names*? Dude.
Sent you an email for the cypher. Will try to read it asap (finals coming up).
from cmd.exe: find "Error" log.txt
 I have just picked up Python and hopefully will start with the books in the next few days. The free ebooks are more than enough for me. Thanks for doing this. You're awesome!
Yes, I agree, putting the shell right next to the instruction really maximizes the motivation and minimizes frustration. In fact, their cryptography section uses some really nice in-browser JavaScript programs written for learning cryptography and cryptanalysis (great example [here](https://www.khanacademy.org/math/applied-math/cryptography/crypt/p/perfect-secrecy-exploration)). My skills in cryptography are not great, so I'll definitely learn from this book myself. Also, [Sage](http://sagemath.org), which is based on Python, is worth taking a look at if you're moving toward other media. They've got a library ([here](http://sagemath.org/library-publications.html#books) and [here](http://sagemath.org/doc/thematic_tutorials/)) on learning particular subjects using Sage, and I believe there's 1 or 2 books on cryptography. They also have live documentation with inline cells which goes right along with their static documentation. Maybe doing something similar to their live documentation would be worth considering for your own website. Sage is completely open-source, so getting the source code for this would be relatively easy.
tl;dr learning curve is a bitch
I'd happily review your book. I'm the author of Beginning Game Development with Python and PyGame. Not that that will carry any weight on Amazon.
Thanks :-D
hey, I have 90 minutes a day spent in trains, I could flip through one on my kindle. Would it be possible for you to post epub versions (or some other version that scales on e-readers? pdfs are painful on my kindle).
&gt; Now I'm wondering whether there are any good examples of == not being transitive in Python. I'm pretty sure that `==` in Python is transitive. Even with mixed numeric types, equality is exact and transitive. This is easily seen simply from `a == b â‡’ hash(a) == hash(b)`.
Yeah. `if` coerces to `bool`, exactly the same way `bool` does. `if x` is the same as `if bool(x)`.
Shame it's US only, I'll probably pick up a copy anyway. 
I'm listening. 
compiler, not ide. does pycharm provide it's own c compiler for building c extensions? I doubt it. 
Cool! You are great! If someone missed it, Oreilly have similar review program for many *ebooks*. I already have two of them, working on the second review now. Details [here](http://www.oreilly.com/reviews/).
You should [make a setup.py script and upload to pypi](http://guide.python-distribute.org/creation.html) PS. Nice package name, publish the package while [it's free](https://pypi.python.org/pypi/docvert) :)
The basics of the project are just sampling data off a serial port, processing and sending it out via Ethernet or eventually a cellular interface. I have the code working already to some degree, and have actually just tried running it on the mentioned embedded device. It seems to not run away with my memory like I was initially concerned with. But I would like to see more information on best practices and ways to keep Python in check. I also have concerns with getting a embedded Linux environment setup and running with Python properly. The demo board I am using now has ipkg included, but I might not always have access to that. Might have to look more into something like buildroot, or ensure the hardware we go with has a Python package available. So I guess managing, maintenance and distribution of the application are my top concerns coming from doing everything in C and moving to Python.
I've liked your books and used it to understand and learn python. I would like to see you make something that delves into some of the more advanced items though. I think the next step after your books would be an intro into classes or something. especially if you can present it like you present your games and projects you have already.
Python's `pow` already does that, you don't give it enough credit!
https://docs.python.org/2/library/pickle.html#what-can-be-pickled-and-unpickled It doesn't take that wierd of objects to break pickle. I've done it before and I'm sure I'll do it again. Either way, you can't rely on pickle to work in the general case. Passing it arbitrary objects will break eventually. 
Your issue is that you are probably missing an environment variable which tells python where to look for the correct vcvarsall.bat Set this env variable VS90CMNTOOLS to something like %VS110CMNTOOLS% if you are using platform 110 More info here : http://stackoverflow.com/questions/2667069/cannot-find-vcvarsall-bat-when-running-a-python-script Pip will then work for most of your modules.
This is the correct answer.
I believe you should have linked this post: http://www.datarobot.com/blog/python-getting-started-with-data-science/
No love for Canadian residents? :( In seriousness, though, great books. I've been slowly going through IYOCGWP with my 8-year old daughter and she's having a great time with it (and so am I!). It has a great learning curve, and is lots of fun to go through. If you could just write a full chapter on making a Terraria clone, then my daughter would be very happy. ;)
You could try [ws4py](https://github.com/Lawouach/WebSocket-for-Python). It supports server side for cherrypy, gevent, asyncio and pure wsgi.
&gt; UCS-2 is just an obsolete version of UTF-16. Hah! &gt; I should point out that I'm not saying you have to use my whitelist, I just think you should have a whitelist. I'd rather fix the bugs in the broken decoders than be playing support whack-a-mole. &gt; Where do you stop? When the rest of the world stops.
Emailed you. Hope this isn't an April Fool's joke. Great books. 
I highly recommend using Python 3.x rather than 2.x for any new web-related project. There's one reason that makes the choice obvious in my opinion: Python 3 has completely reworked strings, with a clear distinction between byte string and unicode strings. From my experience this is a huge deal for webapps and similar projects. It might not seem to be a big deal to begin with, but if the project grows you will have to start dealing with unicode properly sooner or later. Doing that in Python 2.x is a huge pain.
If you require a library that hasn't been ported to python 3, use python 2.7. If you don't, and won't in the foreseeable future, and your django app will be in use for long time, then maybe you'll be better using python 3 right now instead of migrating your app in the future.
&gt; Python 3 has completely reworked strings, with a clear distinction between byte string and unicode strings. That may be true, but I'm asking specifically regarding Django.
&gt;This is an example of the appeal to novelty fallacy. Just because 3 exists doesn't necessarily mean that 2 is outdated. *It does.* If version A exists, then (A - 1) is outdated. The fact that 2 is in its "extended maintenance" period (i.e. "major bugfixes only mode"; it will end next year, by the way) should have given you a clue. Hell, Python devs even had to draft [a PEP](http://legacy.python.org/dev/peps/pep-0466/) simply to backport security improvements.
Perl 6 exists, does that mean that Perl 5 is outdated and that all Perl 5 programs should be rewritten? C++ exists, should all C programs be rewritten? You aren't forming a valid argument and sound like a zealot. I'm not on any particular side of the fence when it comes to 2 vs 3, but you aren't making logical arguments in favor of using 3. All you are doing is saying "newer is better!" as if it were some self-evident truth.
This is perfectly relevant to development using the Django framework. It's just as true for any other Python web-related project, which is why I phrased my answer as I did. To be clear, Django has supported Python 3.x for a while now, and so do most other dependencies you are likely to need.
The recently released Python 3.4 includes [quite a few major new features](http://docs.python.org/3/whatsnew/3.4.html), some if which are likely to be very useful for web development. Examples: * [the asycio module](http://docs.python.org/3/library/asyncio.html#module-asyncio) * [enum types](http://docs.python.org/3/library/enum.html#module-enum) * [the pathlib module](http://docs.python.org/3/library/pathlib.html#module-pathlib) In the near future I expect various new Django tools based on these to be developed, but if you limit yourself to Python 2.x you won't be able to use them.
&gt;Perl 6 exists, does that mean that Perl 5 is outdated and that all Perl 5 programs should be rewritte? I don't know much about Perl. &gt;C++ exists, should all C programs be rewritten? These are different languages. &gt;All you are doing is saying "newer is better!" as some self-evident truth. And why shouldn't I? New stuff has new features, security improvements, and bugfixes. It's what the developers focus on. What does old, abandoned by its own creators stuff have? A sense of nostalgia and some dust? Sure, live in the past, whatever.
Right up my alley, I'm in the process of learning python!
Python 3 isn't backwards compatible with Python 2, just as C++ isn't with C, and just like Perl 6 isn't with Perl 5, so all of those comparisons are valid and you've yet again responded with "newer is better" which could be said about both of those examples and would be wrong everytime.
&gt;isn't backwards compatible Now *that* certainly isn't a valid reason to claim Python 2 is somehow as good as 3. By that logic, every release that changes existing functionality or removes something is actually a new language. (Here's [Python 1.5](https://www.python.org/ftp/python/src/py152.tgz) if you're really into that stuff.) &gt;just as C++ isn't with C All C code is correct in C++ (and can even be linked with if you disable name mangling through `extern "C" { ... }`.) &gt;which could be said about both of those examples No it couldn't. [Perl 6's website](http://perl6.org/) claims that it's a different language from Perl 5. C++ is *clearly* different from C (you're not comparing D to C++ for some reason, are you? Or claiming that B should be used after it was superceded by C?) Python 2 and 3 are developed by the same people, are clearly stated to be the same language, and the former is also deprecated.
I'm reading through the sample pdf for chapter 8 and am enjoying it thus far. ~~I included a comment, but after ten minutes, it isn't yet visible. But the site is detecting that my comment is a duplicate. Hopefully it'll show up.~~ It's there now. Thanks for posting this!
I work a lot with Django and serialization becomes complicated, especially as relations get complex. I usually use a queryset_to_dict function, which is basically an objects list to dictionary function in which I run my model through [model_to_dict](https://github.com/django/django/blob/master/django/forms/models.py#L112) which gives me a 1 level dict, I specify the depth of serialization and the fields I'd like to exclude (kind of what ModelForm in Django does), as well as the model that my relations fields (foreign key, m2m, etc) should use. Then just serialize my data with json.dumps(). It's more verbose, but you get more control I think. It's Django-specific, but couldn't find a better solution in serializing complex objects. I avoid writing a serialize method on my models, because data that I need might differ from case to case.
Haha, yeah, bad timing on my part. Technically I published this on 3/31 though. :) Thanks!
Does this mean that for windows it's no longer possible to use Mingw for C extensions?
I'm continually impressed by what's being built on top of scrapy. This looks like non-developer users could actually find a good deal of use for it! I look forward to trying it out this afternoon and seeing if I'd like to use it alongside my Scrapy spiders.
I personally always found it easier to install Mingw, create a Venv for all my python projects and set it up to use Mingw for binary packages. Unless this has changed for Python3, it's really the best of both worlds. http://stackoverflow.com/questions/3297254/how-to-use-mingws-gcc-compiler-when-installing-python-package-using-pip
Is this forwards compatible with Python 2.7? That would be killer.
&gt;These seem more like reasons to program more Pythonically than to make True != 1. I agree in the second case. But I did not wright the code. But I had to deal with the error anyway that could have been avoided if python did not implicitly treat ints like booleans. Normally one of the biggest advantages of python is its explicitness. This means that even if you don't know the language well you are still less likely to make mistakes. &gt;If you were doing isinstance to know if you had something of type int I was. &gt;that's your fault for using isinstance instead of type(foo) is int. You could say the same thing about half the problems with c++. Without prior knowledge there is no reason to think booleans would be a subclass of int. Your right if I had written better python code the mistake would have been avoided. But again python philosophy in everything else is to be explicit to avoid mistakes even if you don't know exactly how python works. 
Yes. It doesn't cover many things that are wildly different between 2 and 3 though. You can still learn to program in Python 2 from these books, just read Appendix A: http://inventwithpython.com/appendixa.html
Oh hey, I remember that book. I was reading through it when I was first learning Pygame (it's pretty much one of the only books on Pygame that's out there, and I'm glad it was so well-written.) Thanks for doing a review! Be sure to email me so I have you down in my records.
Oh hey, I remember that book. I was reading through it when I was first learning Pygame (it's pretty much one of the only books on Pygame that's out there, and I'm glad it was so well-written.) Thanks for doing a review! Be sure to email me so I have you down in my records.
I'll quote Django source, you can use that code as it is (or just the POSIX path): https://github.com/django/django/blob/master/django/utils/daemonize.py TL/DR: double fork, redirect standard streams.
It has lists! However you cannot say list(...), but you can create a list using [42, 'foo', 'bar']
Wow, this would have made a fantastic April fools.
nice. list comprehension gives a segmentation fault. this is so exciting, you guys!
Except I'm not making any claims in regards to language superiority. You are the one making a claim based on faulty logic, I'm not picking one side over another. All I am doing is trying to find legitimately good reasons to use 3 over 2 opposed to just accepting "newer is better" at face value. So you're wrong and clearly just a zealot who prefers 3 to 2 for no other reason than that it is shiny and new and it is what you use so it has to be the best. You're not a very good spokesman for getting people to migrate to 3 if this is how you are going to go about it.
Look. I'm not a spokesman. It's not my job to convince you to buy/use/do something. I've given you a link to the changelogs. Take a look at it. See how much has changed. Decide whether that stuff is cool. Can you do that? Can you *think for yourself*? It's not about which version of Python you use. Hell, sometimes I write stuff in [my own language](http://pyos.github.io/dg/) that compiles to CPython bytecode. It's about the consequences for the ecosystem. That stuff I mentioned, it's not something groundbreaking. [A simulator of nonrigid collisions](https://gist.github.com/pyos/8f5b5b9f8453d7f2a02f) between disks in 2d space. [A simple sandbox](https://gist.github.com/pyos/9558495) that uses seccomp and rlimits to ensure safety and [asyncio](https://docs.python.org/3.4/library/asyncio.html) to wait for the children. Nobody needs that. If anyone did, I'd write that in Python. Is your app ever going to become widely-used? Will it, at some point in time, cause someone to say "I can't switch to Python 6 even though I want to because I need @pycod's app, and it requires Python 2"? If yes, stop thinking that everything is about you, learn Python 3 (finally), and let *others* enjoy it. But if not, *think for yourself*.
I don't know why I didn't see that. I will try it out.
&gt;&gt; that's your fault for [doing it wrongly]. &gt; &gt; You could say the same thing about half the problems with c++. I don't know enough C++ to get the specifics, but I know the idea you're trying to get across. The thing is, throughout Python, duck-typing is explicitly the way to go, and there are extremely few reasons to think that it's otherwise. If you work outside of what it was intended for, Python's model will suddenly become surprising. Nothing is built around traditional forms of type safely. Further, your code was broken even without the bools: if you wanted `type(foo) is int`, your code would break as soon as it reached a `decimal.Decimal`, `fractions.Fraction` or any other `int` subclass. &gt; Without prior knowledge there is no reason to think booleans would be a subclass of int. I disagree that there is *no* reason. That's not to say it's expected; I just don't think that the absolute is valid.
I am aware of what I can do on an embedded system, I implemented the controller that I am getting the data off of. The data requirements are too much and things like cellular and add on peripherals are not going to be handled well with a true embedded systems. This project needs a Linux setup for where it is going. If I could do it with Python on top of that, it would potentially make development faster and life easier. How to go about doing that properly is my primary concern with this post.
We tried both Terraria and Minecraft and liked Terraria better. So, fwiw, you might want to try it out, and the guy who wrote it is active again and releasing new content. I'll write up a review and then email you about it! But no worries if you can't send me a real copy; I've got the epub and the website so I'm pretty good.
Oh interesting - I've never actually purchased anything off Amazon (yes, I might be the only person) other than hosting, so I can't leave a review.
People...really need to think about dates before announcing project releases.
Try scipy.optimize: http://docs.scipy.org/doc/scipy/reference/optimize.html
Because of you, I seriously think before clicking that link...
I like this author. He gives his books out for free.
OSX support?
This is how I feel about iOS 7... oh, gosh, if only there was an "undo OS upgrade" button on my poor iPad. I hate the new UI, and yet I am now stuck with it forever due to stupidly going with the newer version of what was already working beautifully (and Apple's unholy decision to prevent downgrading). 
&gt;So, what's the best way to learn pandas? Read the docs: http://pandas.pydata.org/pandas-docs/stable/api.html &gt;I think of myself as an ok Python and SQL developer, but I just can't grasp pandas. I have a simple task to build some gantt-type graphs from simple set of tasks with transfer speed and start/end dates, but I just can't wrap my mind around it. If, when you say "Gantt-type graphs" you mean "error bars", [#3796](https://github.com/pydata/pandas/issues/3796) adds error bar support: http://pandas-docs.github.io/pandas-docs-travis/whatsnew.html#plotting-with-errorbars Is there an example in http://matplotlib.org/gallery.html similar to what you have in mind?
I'm not yet into Django but plan to be, but so far I've held off on Python 3 (in fact, I mostly hang back with Python 2.5, though have a dual install with 2.7...it's mostly fine for my needs and makes some things easier for me). But that's not what you asked. In your case, what I would look into is what other libraries you might need that aren't yet ported to Py3. One resource for that is this: http://python3wos.appspot.com/ Just scanning it very casually, with an eye toward Django web app programming and if we assume it is up to date and correct, I see that Twisted, oauth2, gevent, Fabric, MySQL-python, django-compressor, ssh, python-openid, and Cheetah are not yet ported and it's possible that you might want to use some of these in your Django work...but this is just a wild guess., since I have only heard of these tools and haven't used them. At least South and celery are ported to 3, which is good news. I found doing the Django tutorial to be a little challenging at times because the steps one needs to do are very precise (obviously) and the tutorial, while excellent, doesn't hold your hand perfectly at every little point (it requires you think out a few steps as applied to your own case...or at least this is how it seemed to me). That said, that might only be a bit worse if you are following it with Python 3 as the version, since it will be even more out of synch with "the reality on *your* computer". If you see what I mean. 
* Why open a file in binary mode if you're going to decode the contents anyway? (Actually, why decode the data?) * What's the point of the list comprehension? * `i.endswith(i)` is always `True`, did you mean `i.endswith('.gz')`? * Lines can be arbitrarily long, [shutil.copyfileobj](https://docs.python.org/3.5/library/shutil.html#shutil.copyfileobj) uses fixed-size chunks. -- import os from gzip import open as gzopen from shutil import copyfileobj def gzcat(dir, out, append=False): with open(out, 'ab' if append else 'wb') as output: for f in os.listdir(dir): if f.endswith('.gz'): with gzopen(os.path.join(dir, f), 'rb') as input: copyfileobj(input, output) ^Disclaimer: ^I ^have ^no ^idea ^whether ^this ^code ^is ^actually ^more ^efficient.
thanks, the '.gz' was definitely a little bug, I meant '.gz' instead of `i` to only read gzip files from a given directory. 
about the decoding: I want to have it work on Windows machines (will be part of another tool that calls a third tool, which requires this oddly large file as input). So a normal `r` would also work on Windows then? I have no Windows machine at hand to test it yet, have to set up a virtual machine I guess...
I half expected a rickroll when I ran the code.
If it's the newline conversion you're worried about, `f.write(g.read())` (on Windows) would preserve `\r\n`, but probably fail on `\n` (because `f` is not in binary mode, and will therefore convert it to `\r\n`.) Better open *both* streams in binary mode and not use `decode`.
This is a pretty common scenario in statistics and machine learning. And there are a lot of different libraries (and ways) to do it. Without knowing your use case its hard to give you a good answer. [scipy](http://docs.scipy.org/doc/scipy/reference/optimize.html) has some good options, as will [scikit-learn](http://scikit-learn.org/stable/) and [PyLearn2](http://deeplearning.net/software/pylearn2/), but they're more advanced.
i will definetly try it. any reason for including venv in the repo?
good call, the `decode()` step was really not necessary I see ...
Out of curiosity, what is it you scrape?
Check out this top-class April Fools troll in the comments: &gt; Actually, I'm glad to see this. Python is too full of feature bloat. Really, Guido should have stopped here. I don't see the benefit of bloating the language with esoteric features like complex literals and C extensions. Lambdas are bad enough. &gt; Fortunately, Python isn't the only language out there. Other, simpler languages exist. Ocaml, Rust, even Javascript, which is forced to be simple so that it can run in the browser. Language designers need to just take a step back and think about the effects of every feature they add to the language. Simplicity should be their number one priority, not features that only 1% of people will use or adherence to some meaningless zen.
&gt;decimal.Decimal, fractions.Fraction or any other int subclass. These are not subclasses of int. They are subclasses of number. &gt;Nothing is built around traditional forms of type safely. Everything is built around type safety. Python is a extremely explicit and strongly typed language. Duck typing is a separate issue. 
On Ubuntu, it's much easier to *not* daemonize the script, but write an Upstart config file instead. In fact, if a program supports non-daemon foreground mode, it's recommended to use that for upstart. The double-forking in standard daemonization makes it harder to keep track of the correct PID for the process. Something like description "Fun stuff" start on runlevel [2345] stop on runlevel [!2345] chdir /foo/bar exec /usr/bin/python /foo/bar/script.py in /etc/init/scriptservice.conf would do. For a virtualenv, replace /usr/bin/python with /venvpath/bin/python. Also, upstart commands nice/setuid/setgid/respawn/nice and more complex start on and stop on rules might be useful. 
hi, I'm the creator of this. Thanks for sharing :)
You probably just want a least squares, in which case use scipy.
What a great deal! 
Examples: http://xray.readthedocs.org/en/latest/getting-started.html
Ah wow, it seems this board is full of Python 3 shills who don't know anything about what they are talking about and just think "newer is better" for no real reason. Pathetic. This board is awful.
Are they entirely trolling? Back in the day I remember being attracted to Python because of it's simplicity. I really do miss Python 1 to some extent... 
Thank you for the link to gallery with examples ;) No, not error bars. I actually got almost everything I wanted from hlines diagram. http://i.stack.imgur.com/7jFQn.png http://stackoverflow.com/questions/18066781/create-gantt-plot-with-python-matplotlib 
Yes, this pretty much is the standard solution if you want to do the legwork yourself. However be prepared to put quite a bit of effort into really getting this to work. If you can get away with using an external daemon manger (as suggested in other comments: supervisord, upstart, systemd, etc.) I would highly recommend going that route.
I submitted some patches to at least get it to start up on OSX. The original author is on Windows and codes that way - hardcoded paths with backslashes instead of os.pathsep etc. and when I went looking for how to fix up functionality a lot of the code looks like its auto-generated by some IDE (which would be pointless to manually fix). The infrastructure is there for working on better platforms, its just not important to the author. But hey, its on github and the author does accept patches. So feel free to contribute! 
right now it's brute force, and for the limited variables i was using it was fine, it took longer to run, but now that I need to add variables it's not going to work. So basically i have something like, measured data = 12.13214, i know the function required to calculate it, say it's a+b^c/d etc etc, and i'm changing a b c and d in a way where i get the best fit. right now it's just been some nested for loops, because i've only been working with two variables and I could have it running while I did something else, but I'd like to up it to several more variables and have a much shorter computational time, so nested for loops are not going to work.
Thanks all for the tips, I'll look into scipy. 
Cool, but we're still waiting for 3.4 :/
I have tried the python-daemon module with limited success, the best and easiest I have found is [daemonize](https://github.com/thesharp/daemonize). 
/me thinks Yeah, [that](http://lucumr.pocoo.org/2010/4/3/april-1st-post-mortem/) explains a lot, but the initial split-second reaction of "hm, this project might not be serious, I'll ignore it" is potentially a serious hit to any publicity you might get out of that first press release...IMO. Maybe my totally uninformed opinion about how humans work isn't right, maybe it is, but this seems like it wouldn't be a too-difficult thing to work around. :)
You really don't want to daemonize your own program. You want to use a process manager like supervisord.
&gt; On Ubuntu, it's much easier to not daemonize the script, but write an Upstart config file instead. In fact, if a program supports non-daemon foreground mode, it's recommended to use that for upstart. Which is also true with systemd if you use a unit file like /u/doug100500 posted. Also, all stdout and stderr output is logged by journald which is handy.
 def removedup(yourlist): newlist= [] for x in yourlist: if x not in newlist: newlist.append(x) return newlist What's wrong with this?
What is this even asking? Are you asking "is java's standard library bigger than python's still"? If so, why do you think java's ever had a bigger standard library than python? (It might be, but I doubt it) There aren't really objective (and meaningful) ways to compare the size of standard libraries between languages. You can do module count, line count, etc, but that doesn't really measure what the std lib does, that measures how much code it takes (or at least, how much was used) to do what the standard library does. When comparing standard libraries, you're really asking (or you should be, anyway) "how much does it do? (And how well does it do it?)", which is a subjective question really. (I guess you could count features, but the possibility for bias is pretty high)
Largely subscription content sites with an authentication wall, plus torrent sites. As an example : https://github.com/StellaCannefax/pico-nova
This would've fit better in learnpython in my opinion.
I didn't write this, but came across it and thought I'd share it.
Scrapy seems to be the same, which makes this make more sense since it uses scrapy. Scrapy being 2.7 probably reflects that it is built on top of Twisted, which as far as I know [isn't yet done moving to python 3](http://twistedmatrix.com/trac/wiki/Plan/Python3). 
I believe he meant subjectively. There is no way I can answer this question, as I am not a Java programmer by any means. All I can say is that I *feel* that number of Python libraries grew more than java's on the last year, which is not saying much either...
Due to the recency of django's python3 compatibility, I would expect many libraries to only be available in python2.7. There are many tools to help converting projects or maintaining compatibility in both versions, but you may have to get your hands dirty at some point. If you are interested in contributing to projects, this would be a good opportunity to expose yourself to a lot of codebases. If you know python2.7 and are building a project for work, do you have an existing (internal or external) library in python2.7 that you would want to use? If not, I would take a look at http://python3wos.appspot.com/ and see if anything in the red looks like it might be essential (mechanize and suds would be two common examples). At the same time, I would not reject python3 because a project is in the red. You will find that there are equivalent projects that are not listed but do support python3. Just because MySQL-python is in the red, doesn't mean that python3 doesn't have a mysql library.
Python 3 is a different language and not merely a newer version of Python 2.
I have already thought to rephrase my question actually. Not the standard library, but the support library/3rd party library/open source library designed to enhance Python to support multitude of problems. Or, in anther wording, "Is Python much more supported by the software developer community in general than it is with Java?"
This is the correct answer. Also works with virtualenv, just specify the whole path to the venv bin command. 
There is zero review of PyPI as far as I know. Anyone can upload anything, and the system is completely automated. I also wouldn't assume that a module has been audited in any meaningful way just because it has Debian or Ubuntu packages. Certainly there will probably be a few more eyeballs on the code in that case, but packagers are not necessarily security experts, and if the software passes its testsuite and there are no bugs filed about things not working, they're pretty much going to call it a day and spend their time putting out fires elsewhere. The only thing you can count on is that if someone tried to pull something shady it would eventually be discovered. The question is how long that would take -- it would be fast for popular code, but it could potentially be quite a long time for obscure modules. But I'm sure both PyPI and linux distros would drop everything and scramble to make it right should they be notified with credible evidence of malfeasance. 
Why not?
wow - i already love the widgets : https://github.com/ipython/ipython/tree/master/examples/Interactive%20Widgets
A process manager like supervisord/systemd/upstart will take care of all the annoying details for you by just writing a small config file: * Starting the process on system boot, * Starting and stopping the process based on its dependencies (after the network, a SQL server, etc are ready), * Stopping the process cleanly on system shutdown, and pausing the shutdown for a bit to give it time to exit if needed, * Keeping track of the PID to see running/stopped status of the process, * Running the process under a different user or group id, * Logging standard input and output to common log file locations, * Restarting the process if it crashes. These are all common to most system services, so there's no point in rewriting it in all of them. While most of these *could* be reimplemented in the program, getting the start/stop events right without using the system process manager would be very tedious.
No update in Anaconda yet, looking forward to test the new version.
Thanks for the clear answer.
[pymaging](http://pymaging.readthedocs.org), a pure python solution
&gt;&gt;decimal.Decimal, fractions.Fraction or any other int subclass. &gt; &gt;These are not subclasses of int. They are subclasses of number. Sorry, silly mistake. The point remains, though weaker. &gt;&gt;Nothing is built around traditional forms of type safely. &gt; &gt;Everything is built around type safety. Python is a extremely explicit and strongly typed language. Duck typing is a separate issue. I used the word "traditional" very purposefully. Python is *consistent* with its types, but the objects, not the names, store the types. Type safety typically refers to knowing the types of all objects at all times, and verifying them. In Python, doing that is difficult and counter-productive.
no it's not a different language, what the hell are you talking about? That's like saying every iteration of java is a different language. That's like saying if I am learning Python 3 I won't understand Python 2 and that was never the case, with anyone.
Yup. And [Vagrant](http://www.vagrantup.com/) allows you to depend even less on the host VM platform.
I thought virtualenvs that could be moved around were still not supported on Windows. And copying a virtualenv over to another machine still needs Python to be installed there, doesn't it?
Thanks for all info.
The new directory navigation is a godsend. Now I don't have to run 5 different notebook servers for 5 different notebooks in separate folders.
It works with WinPython (if you are Windows user). Just download package from PyPI, drag and drop file into WinPython Control Panel and click Install packages.
Thanks for the tip, but I am running OSX and Linux. I know Its already available with pip, but I prefer to update it within Anaconda to keep a clean system :)
it sounds like it will be very convenient for power users. Not a good sign that the indicators "green border" and "gray border" both look the same to me though!
I haven't tried the new version, but the fact that cmd+enter sometimes adds a new line, was a minor pain point for me. 
Am I just missing something on the whole "IPython is awesome" train? When I ask people why they use it, they get glassy-eyed and mumble something about "notebooks"; could *somebody* please explain what IPython would solve for me and my daily development work? Is it just a prettier version of IDLE? I really feel like I am missing something here.
May I ask... can you post a sample image (and possibly code)? I've never had a problem with Pillow, despite using it extensively. 
Yeah that could be handy to clean up some legacy code i have hanging around. Will give this a whirl!
If you're writing "applications" -- games, email clients, web crawlers, whatever -- then IPython Notebook is not of much use. IPython itself (non-notebook) is a better version of the Python shell. If you're doing data-driven documents, then notebooks are a good way of doing them.
As another developer, I felt the same way until I learned it's use case. It's not designed for developers in any way, it's real power is for people that need a powerful interactive tool to help them analyze data. This makes it really popular in the scientific and academic community. As the interactive shell, imagine being able to use something that powerful even in high school or college math or stat classes instead of a ti-83 (or ti-89, if you're a *rich* kid). [Now expand that capability with notebooks](http://ipython.org/notebook.html) for professionals to have a tool that they can write their scientific papers with, and provide working code examples along with it that can be modified as needed with it's output displayed directly on the page. It basically makes math/stat/scientific papers easier to create and modify as well as more credible and also reproducible. 
I have tab completion in my default python interpreter.
Absolutely 0mbre! That's the reason why I started that development :)
Is there a way to natively choose which version of python IPython runs with? I have both 3.3 and 2.7 and I can't get it to work for both.
Interactively?
"Notebooks are like interactive computing documents." What does this sentence mean? Is IPython simply meant for report generation? Is it meant for scientific use only? I promise I am not trying to be a jerk here, I just want to understand this technology.
Thank you for the information.
 $ brew search ipython No formula found for "ipython". Anyone? Bueller?
&gt; but the initial split-second reaction of "hm, this project might not be serious, I'll ignore it" is potentially a serious hit to any publicity you might get out of that first press release...IMO. Considering it's currently (day after) #2 treding project on github (https://github.com/trending) that doesn't appear to be the case :-) 
Ok. IPython itself is like IDLE on steroids. But the Notebooks feature lets you create documents. But rather than being a static document, like say you might create in Word, the documents can contain code and widgets as well as richly formatted text and graphics. So you can write a document to explore generating audio, visualise a sorting algorithm, and all sorts of things. Mix Python code, the results of that code, and HTML together in whatever way you can dream up. It could be used for report generation, I guess (though I haven't seen it used as such). Certainly scientific, engineering and statistics applications would be perfect applications, but by no means is it limited to these areas. Have a look at this gallery of interesting Notebooks to get an idea of just what sorts of cool things you can do: * https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks 
Oh? Last time I tried installing IPython (on OS X) it was a mess of dependencies and versions which took ages to sort out. Does this mean it's easier now?
Just because they nontypical (for this industry anyway) methods for finding authors doesn't mean that an author without proper experience would end up writing the book. It's just like a sales funnel, but for authors. Not a big deal for me, as I have read several Pacht books and found them to be educational and useful.
Not only does IPython have tab completion - you can also directly access documentation and source code. e.g. import itertools itertools.permutations? # gets documentation itertools.permutations?? # gets source code This and more quality-of-life improvements over the standard Python shell make it great to use. 
This looks just right, thanks. Reading up on it now.
Oh, sorry. It was early and when you said interpreter, for some reason I was thinking you were talking about an IDE. That's a nifty trick. The IPython shell is a lot cleaner than the default interpreter in my opinion. It has some nice copy/paste functions that preserve the formatting so you can copy in whole blocks easily. It comes with dynamic object information, persistent history, auto-indentation for loops and conditionals, automatic parens and quote completion, and you only have to type exit to quit, not exit() which usually saves me from having to try twice to quit. 
Yes "pip install python" is all you need to do
It's the preferred shell for REPL style development in python: http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop People in the scientific computing community have embraced these development methodologies more readily than the general computing community for a number of historical reasons. But IMO, it's safe to say that using a powerful shell is better than using an IDE.
main things I use with iPython: - history -l 50 #in more than 1 instance - better line editing (e.g. writing a function and tab garbles up) - color syntax + command # , its not much but I enjoy - directory navigation thats about it. 
Technically, getting docstrings and source are easy in vanilla python too. Ipython's syntax for it is just convenient an intuitive. Magic functions are where the real fun is. 
Math/CS professor here. iPython has been a godsend in using Python for educational purposes because I can have students complete Python assignments in self-contained documents that include formatted text and executable code, then just hand them in or upload them to SageMath Cloud. I don't teach classes on Python, but rather math classes (discrete structures) that use Python as a tool -- and while I want all my CS majors to know how to use Python from the command line and IDLE, being able just to pop open a notebook and work with the language is great. It's also great for teaching -- make up an iPython notebook for the day's lesson and teach from it in the classroom, then upload it for reference later. 
I would recommend using ipython combined with virtualenv - that way you can completely control everything about your environment. I basically recommend that almost everyone uses virtualenv - it's much cleaner to experiment with different package installs and whatnot. A bit of googling shows this simple example of usage: http://www.circuidipity.com/python2-and-python3.html
It's all the reflective, interactive stuff. It's the ability to have tab-completion and documentation right there, inline, as you edit.
Does it handle dependencies? I like Anaconda, but I'm a bit tired of having to wait for them to make updates available.
I don't get it. There's is no link, I literally can't GET it. 
Thanks! I'll have to set this up
WinPython include IPython 1.1 with all [dependencies](http://sourceforge.net/p/winpython/wiki/PackageIndex_33/), so this method simply update IPython to 2.0.
Ipython notebook offers a "new" way to program and debug at the same time. You can basically, as you program, run the code interactively, subdividing the code execution in chunks (cells), and doing the object introspection, using tab completion, inline plotting... I have never experienced that sort of hacking freedom with a standard IDE. Of course you can do debugging and execute interactive code with a traditional IDE, but this is always something done after/parallel to the coding. In Ipython notebook, the coding part and debugging part is done at the same time. It's much more natural and flexible, I think. You are basically much closer to your code execution and it's easier to catch potential bugs earlier than using a traditional IDE. In my view it's very practical for code prototyping. If you are involved in scientific programming, the notebook has also killer features that allows you to keep all your research material (theory, code, results) in a same place. It's really cool.
As a new user to IPython (and not an experienced python developer), I followed the instructions to use Anaconda only to find out that it doesn't install IPython 2.0 on Windows 7. A simple "easy_install ipython" did the trick. 
well, brew install python should be done first, don't fuck with the python that is installed with osx, that's where the pain hurts. 
yes! I got like 20+ notebooks in my current server now. I cant count how often I wanted to show my coworker a notebook only to scroll thru a bunch of notebooks. I ended up just doing ctr+f.
I've never found it quite as awesome as people make it out to be. Notebook, however, is a real selling point nowadays.
pymaging is not ready for use, I tried their quickstart example after installing and had to debug their source. """ Have to change code in image.py so file is not prematurely closed: def open_from_path(cls, filepath): #chg with open(filepath, 'rb') as fobj: fobj = open(filepath, 'rb') # chg return cls.open(fobj) Have to change Quickstart example http://pymaging.readthedocs.org/en/latest/usr/quickstart.html to cleanup after resize(). Also, save() does not work """ from pymaging import Image img = Image.open_from_path('test1-960x720.png') img = img.resize(300, 300) img.width, img.height = 300,300 img.save_to_path('test1-300x300.png') 
Well for one it doesn't sort the elements.
Suggest adding some actual before/after code examples instead of just linking to the patch file
Obviously, it depends on your programs requirements. I write software that doesn't go over the net and is written for engineers. I'm not concerned. &gt; considering most, if not all of the software there is opensource. I write open source engineering software. You're welcome to look through the source code, but my philosophy is accuracy and correctness to a fault and then speed. Why would I care about data mining you? You're being paranoid if you're worried about open source software not being honest. Now, if it's about some unsafe C code, you'd have to look through the code to find it, but most people don't worry about this sort of thing. I've found examples of unsafe C code in open source software written by NASA. I pointed it out, but again, it's a non-issue.
you can still install with pip
If you just need to do something simple, just write one yourself. They're not that hard. It has to be lots of RGB values right? It's the find the edges algorithms that get infinitely complex.
Ipython is great and I use it every day but I have never once used a notebook.
You can still use pip install or easy_install inside an Anaconda environment. Anaconda doesn't take anything away from you. You just will have to do that in each environment you create. You can also ask the IPython developers to create conda packages and host them on binstar.org and add the public channel. 
ctrl+f? Sounds rough, how do you manage?
May the hops be with you. cheers!
I mostly like to see at quick glance what the program does as part of the readme. Having to go to a file and try to interpret a diff may turn off many potential users.
We knew this would be controversial ;-). The problem is that between different browsers and OSs, almost every keyboard shortcut we could make would conflict with something else people want to do. So we had to hide every shortcut behind Ctrl-m, which makes it really awkward to navigate with the keyboard. Now you can just go into command mode and most shortcuts are a single key (except destructive things like delete, which is dd). Spend a while using it - it takes a while to teach your fingers how to do it, but we've found it much more convenient now that we're used to it.
\r does not insert a new line on my system (Linux). &gt;&gt;&gt; cfg = 'abc\rdef\rghi\rxyz' &gt;&gt;&gt; print cfg xyz The linked code thinks `cfg` contains 4 lines. Use ``os.linesep`` to avoid that issue.
&gt; You can basically, as you program, run the code interactively, subdividing the code execution in chunks (cells), and doing the object introspection, using tab completion, inline plotting... It legitimately really handy. I just want the feature where I can dump it to a Python file with a few keystrokes to clean out battle tested function (and keep my notebook small) and have my notebook auto-refresh. Versioning also seems overly complex. They're stored in a weird way. I just want to access it like I do in Matlab (never thought I'd say that).
Notebooks let you use python like Matlab, R, Mathematica, and so on. You get an interactive environment with inline plots and arbitrary HTML pretty-printing of your objects. If you need some slow setup before you can run the code you're working on, like importing a dataset and doing some preprocessing, it lets you keep that data around while playing with different ways of analyzing it. If you're writing multithreaded, eventloop, or gui code, it's probably not the right tool.
Only took a few seconds for me to realized I'd love it. Great addition!
Um, I believe this is the link that should have been above: http://around-technology.blogspot.com/2014/03/a-collection-of-python-must-reads.html
Thanks for suggestion but I want it to only depend Python.
&gt; I just want the feature where I can dump it to a Python file with a few keystrokes to clean out battle tested function That's an interesting request. I usually copy paste the cells, when they are ready for deployment, into the file they belong to. Do you have a more streamlined idea? Like somehow syncing the code of a file into a IPython cell? &gt; ersioning also seems overly complex. They're stored in a weird way Have you tried it? It's a JSON format, so the cell code is relatively simple to read in a diff mode. 
&gt; Do you have a more streamlined idea? I'm thinking of something like I've set a file to be a dump file (or when you do your first function dump, it pops up a request for a .py file or maybe it's a preference). It would just append the function to the end of the file and it's the user's responsibility to make sure the white spacing is correct. Then it would add an import to that file for the function (this would be an issue for classes though). Since the function is still technically stored in the local namespace, you'd be done at that point. A notebook cell can have multiple functions, I'd like the ability to just highlight a single function in a cell and dump that, but I don't see any reason why you couldn't dump two functions if you wanted to. &gt; Have you tried it? It's not the JSON I have an issue with. It's that I want to store one notebook in one folder and another notebook in another folder. Maybe this is just me not understanding how notebooks are referenced.
&gt;They all fail after trying to import _winreg which would make sense since there is no windows registry on appengine. 
If the other files work fine, it may very well be a bug in Pillow (or a bad file?). In any case, if such is the case, please report it [here](https://github.com/python-imaging/Pillow/issues) after the assignment (so that you can paste an example triggering the bug).
When I was doing my thesis, I tried a bunch of things on a bunch of datasets and used to keep a ton of README files here and there so that I can recollect why I did what I did. I also had to explain it to my advisor and sometimes colleagues in the lab. With ipython notebook, I can save my complete thought-process and also work with everything on the same screen! Reproducibility is a huge factor. For me, just the fact that I can try different things and then just save it all makes a lot of sense. It is also important to note that the IDLE really sucks. ipython is like the python interpreter on steroids. So much steroids that Lance Armstrong would be shy of it. 
You should read the sidebar.
It would make sense, I agree except I'm trying it with a module called gaemechanize which is supposedly made for gae
&gt; I'm thinking of something like I've set a file to be a dump file (or when you do your first function dump, it pops up a request for a .py file or maybe it's a preference). It would just append the function to the end of the file and it's the user's responsibility to make sure the white spacing is correct Interesting concept. As an alternative measure you could add to the target cell top %%writefile -a my_file.py That should do the trick. Just don't execute it twice... It's not really practical in the same sense you presented it, though. I would like a magic function that loads a class or function from another file and sync it afterwards automatically. A kind of %edit magic, but where the edition is done within the notebook instead of in an external editor. &gt; It's that I want to store one notebook in one folder and another notebook in another folder. Sorry I don't get what you mean. Are the two notebooks two different versions of the same document? 
The sidebar isn't showing any information for me. It could be due to the fact I'm on mobile. Sorry :/ I guess I'll just check it out later tonight.
I'm not seeing anything different with the new version. I did a "git pull" and then a setup.py install, but the old version looks like the new one. I even used the new "ipython2 notebook" command instead of the "ipython notebook". Do I have to do something special to see all of the new awesomeness?
Sure you can do it. There are a ton of things to think about and a ton to learn. I think the much better question is: should you do it. * Is this something customers have asked for? * What kind of security needs to be in place? * What kind of operating system are you running? * Where are you going to host it? * How many people are going to use it? * How are you going to get the data? * etc, etc. The python part of this is relatively minor once you solve all the other problems.
Or even just `str.splitlines()`.
Python will be fine. You'll need some sort of web framework (I like flask), database connectivity and probably some SQL abstraction (sqlalchemy is popular), a template engine for the front end (jinja2 integrates well with flask and is a joy to use), but most of all, you need some web development clue. Know your HTTP, HTML, web security, JavaScript, etc. All in all, this sounds like a decent enough project to learn this kind of thing. One caveat though: since you'll be serving somewhat sensitive data, I strongly recommend to have someone with in-depth security know-how audit your design and code - it's just too easy to walk into common mistakes, and one vulnerability could be enough to invite all the script kiddies in.
Perfect, thanks. I plan to use the project to learn, and then show it to my boss. If he likes it I'll recommend we show it to someone who knows about security.
if you want to be someone who writes anything that takes user data online, you should be someone who knows about security atleast a bit. speaking from terrible personal experience you should get into the habit of making secure applications sooner rather than later. 
Nevermind. Dumb mistake on my part. Thought I could install the bleeding-edge stuff in another directory, but the new "ipython2" executable just loads the old stuff. Had to install into the main distribution, and now everything works.
The interface doesn't look very different, but click 'Help', 'User interface tour' to see some of the new features. The other new thing is the interactive widgets - run some of the notebooks in `examples/Interactive Widgets` to see what's possible.
This seems really awesome, I always hated having to choose between the two. Starred and I'd love to help out sometime.
So, it's a web site? Did I miss something? Is this a hosted thing? You were able to access your notes/code in IPython because it was available in the "cloud"?
No matter how much I read about polymorphism in python I always learn something new. I guess it's just a lot to take in. But learned some new stuff and refreshed my memory as well thanks.
thank you! I suppose you are right.
When you're using notebooks, there's an ipython "server" that you connect to with your browser. This server could be running on your local machine or a remote one (I'm not sure if there are hosted notebook servers, but I'd be surprised if there weren't). You edit the notebook in the browser, and you can export it (to nice HTML for viewing/publishing, or to a pickled format for archiving/sharing). 
if it's not on pypi I would doubt any claims it makes about anything. you probably need to contact the author. 
If you want to run a notebook you just call the ipython binary with the "notebook" argument: $ ipython notebook that will start a local webserver which you access through your browser. Once there you can edit markdown, add &amp; run python code, plot data, etc.. Once you're done you can share it by passing the file, upload it to nbviewer.ipython.org or convert it to an html.
So are IPython Notebooks basically to Python what R Markdown documents are to R?
This guide helped me a lot a while back when I was trying to get the scientific stack all set up on a Mac: http://www.lowindata.com/2013/installing-scientific-python-on-mac-os-x/
[scipy](http://scipy-lectures.github.io/advanced/image_processing/) 
&gt;The way I'm thinking it should work is the client goes on our website, types his Contract Number to check his balance, and the apps pulls the contract information from a databased stored in the server. What would stop, say, me, from bruteforcing your database for valid contract information? How do you know that client A is really client A? How is the contract information stored on the database? If I walk out with the database server, what would I get? Just trying to get you thinking about secure architecture for this project. ;P
Definitely - you should include an example in your post so people can see the benefits of magic functions!
Brilliant.... That and I criticized the last pip alternative for not having this type of functionality.... Target audience is won. Finally, the science python stack and virtualenv can live peacefully with the owners and sys admins of machines everywhere.
Control-d
It should be on Anaconda now, I just installed it using `condo`. Just make sure you run `conda update conda` first.
Is IPython an operating system (website home page talks about a kernel they ship)? I loaded up their home page but it never says what it actually is, and there's no "about" menu item at the top, either. Sorry, I don't do enterprise or scientific work. I develop for fun on my laptop and am not familiar with it, although I've seen the name before.
Pretty much, yes. Except IPython Notebook includes an editor, server and widgets.
Not as bad as the have mucking about you get to do with MATLAB &gt;.&gt;
Thanks. I think that's the same one I used a few months ago to install SciPy at work. I guess I was hoping it would be simpler by now. There is so much awesomeness in there, it's a shame there's this barrier to entry in getting everything installed correctly.
I don't know what python is, but you guys seem totally excited about this. Have fun! 
If this is the wrong place to post, could someone direct me to the correct sub-reddit? 
Meh, I don't use anything special in IPython. But it took me 30 seconds to `pip install ipython`, and now I get tab autocompletion. Why not?
That's... A whole lot of "must reads"...
Neat, but I wish there was support for multiple versions of the documentations.
Just curious on why does it have to be in Python rather than other languages?
... or use a virtualenv.
Reports are non-interactive output. Notebooks are interactive environments where you can for example change the authors formula and see a new graph appear instantly. More like an Excel file than like a PDF report. 
It's not as if as soon as it's on pypi its claims are suddenly much more credible.
notebooks are much better for interactive work and annotations. For example, Im doing some analysis for a client, so i start a notebook and write all the interactions. After im done, i clean it and use markdown to highlights the sections i have been doing. If another client comes and asks for a similar product, this notebook is much easier to read than a .py file in vim.
What is your application? Python and Pyserial are fairly straightforward. http://pyserial.sourceforge.net/ PM me if you wish.
How?
I like IDLE for importing modules and playing with them to figure out what my code should look like. However, my IDLE session quickly fills up with stack traces from all the errors I've made, and scrolling up to select a line and then fixing the error gets old fast. If only I could separate my exploration into units, and then fix each error in those units until I had working code, then I would be able to cleanly figure out a solution and have a clean history to look back on. This is possible with the IPython notebook with its notion of 'cells' that can be run, edited, rerun, rearranged, added, deleted, and merged as I see fit. Notebooks autosave so I can look back on what I was doing earlier if I need to. Definitely a huge improvement over IDLE for my purposes.
I didn't get it until I decided to use it for a few homeworks. It's insanely good to solve one-off problems, not applications.
Forget pyExcelerator. Consider xlwt, or XlsxWriter, or openpyxl
I created a gist and put buggy part at it. Link at main post.
It's already available: $ conda update ipython 
Now it is: $ conda update ipython 
There's [this](https://developers.google.com/appengine/docs/python/memcache/). I use it in my application.
Why not just install the Anaconda distribution? It was designed to solve this problem, in a cross-platform way. http://continuum.io/anaconda 
&gt;python is consistent with its types I agree in almost all cases. However booleans being a subclass of int is not consistent. It would make almost as much sense to have strings be a subclass of ints as booleans. Why do 1 + {} or 'hi' + 0.1 or type + [] all thow errors but True + 3 does not? This is inconsistent. Booleans do not quak like ints. &gt;Type safety typically refers to knowing the types of all objects at all times I would argue that is not the typical meaning but it is really beside the point. &gt;The point remains No it does not my code would have worked for almost any reasonable subclass of int. Like say a someone had implemented a int library that allowed for any size ints. Would have worked fine.
Hey, want to team up? Are you alive? # pyDungeon # version 0.0.3.2: sword splitting / time module ''' Hey, to cut down on un-need repitition we could change 'adjective' : {'damage': 3, 'critical': 5} to 'adjective':[3,5] NOTE: I deleted the random import and graphics code because I don't Have that libary, not because it was wrong (to my knowledge) ''' player = {'weapon': '', 'shield': '', 'head': '', 'chest': '', 'legs': '', 'accessory1': '', 'accessory2': '', 'health': 0, 'damage': 0, 'critical': 0, 'defense': 0 } weapons = { 'dagger': { 'wooden': {'damage': 3, 'critical': 5}, 'stone': {'damage': 5, 'critical': 8}, 'iorn': {'damage': 8, 'critical': 12}, 'golden': {'damage': 12, 'critical': 17}, 'diamond': {'damage': 17, 'critical': 23}, 'emerald': {'damage': 23, 'critical': 30}, 'ruby': {'damage': 30, 'critical': 38}, 'sapphire': {'damage': 38, 'critical': 47}, 'obsidian': {'damage': 47, 'critical': 57}, 'emerald': {'damage': 23, 'critical': 30}, 'adamatite': {'damage': 57, 'critical': 69}, 'unobtanium': {'damage': 69, 'critical': 84}, 'demonite': {'damage': 84, 'critical': 102}, 'god': {'damage': 102, 'critical': 127} }, 'sword': { #these stats have not been doubled. 'wooden': {'damage': 3, 'critical': 5}, 'stone': {'damage': 5, 'critical': 8}, 'iorn': {'damage': 8, 'critical': 12}, 'golden': {'damage': 12, 'critical': 17}, 'diamond': {'damage': 17, 'critical': 23}, 'emerald': {'damage': 23, 'critical': 30}, 'ruby': {'damage': 30, 'critical': 38}, 'sapphire': {'damage': 38, 'critical': 47}, 'obsidian': {'damage': 47, 'critical': 57}, 'emerald': {'damage': 23, 'critical': 30}, 'adamatite': {'damage': 57, 'critical': 69}, 'unobtanium': {'damage': 69, 'critical': 84}, 'demonite': {'damage': 84, 'critical': 102}, 'god': {'damage': 102, 'critical': 127} } } classes = { 'warrior': { 'weapon': 'wooden dagger', 'shield': 'barrel lid', 'head': 'leather lid', 'chest': 'torn shirt', 'legs': 'muddy pants' }, 'wizard': { 'weapon': 'wooden staff', 'head': 'wizard hat', 'chest': 'torn robe', 'legs': 'muddy pants', 'accessory1': 'cracked iron amulet' }, 'archer': { 'weapon': 'cracked shortbow', 'shield': 'barrel lid', 'head': 'leather cowl', 'chest': 'musty vest', 'legs': 'muddy pants' } } player['class'] = 'warrior' # what the user picks. player.update(classes[player['class']]) temp = player['weapon'].split(' ') #This temp is here because of 'adjective weapon' player['damage'] = weapons[temp[1]][temp[0]]['damage'] player['critical'] = weapons[temp[1]][temp[0]]['critical'] print player 
Imo python is best suited to the task unless you have an existing framework that is simpler to plug in to that will handle security.
Aha - for some reason I thought it was commercial. Didn't realise there was a free edition. Cool, will definitely take it for a spin. Thanks!
I am a developer, and I kinda forgot that iPython have interactive notebook. I use it mainly to inspect object returned from a function call. As you know sometime we don't know what classes instance does an object belong, iPython is a perfect (only?) way to know this.
I'm not saying Python 2.4 and Python 2.7 are different languages. They are different iterations of same language. However, when you compare Python 2 and Python 3, they are too different to be considered the same language. Python 3 is to Python 2 as Java is to C++. You can't make modifications to code to make 2.x compatible with 3.x. You have to rewrite most of it... as you would when moving C++ code to Java.
https://github.com/boxed/cmi I have three issues open for things I think are important, but I believe that if anyone else starts to use this day to day they'll find a lot of things they find annoying they want to be different :P 
This is a fantastic idea! I might try using this at work tomorrow.
I explore, noodle around on ideas, algorithms, etc... in iPython, which is much easier using features like tab completion, interactive history, magic functions, interactive debugger, etc... When I know what code I'm going to use, it goes into the text editor, into the app I'm writing. 
There are templates that will build a basic distutils deployable project for you after answering some prompts. That might be a good place to start. Search python modern package template.
[Relvant XKCD: Standards](https://xkcd.com/927/)
[Image](http://imgs.xkcd.com/comics/standards.png) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=927#Explanation) **Stats:** This comic has been referenced 376 time(s), representing 2.5060% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcdcomic/)/[kerfuffle](http://www.reddit.com/r/self/comments/1xdwba/the_history_of_the_rxkcd_kerfuffle/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me)
That creates a `src` subdirectory. My understanding is that that is bad form in the general case.
Exactly, usually the main recommendation is to put the package directory in the root directory.
Having come to python after Java as well, I feel your pain. If you're looking for some example templates, give [cookiecutter](https://pypi.python.org/pypi/cookiecutter/) a look. 
This is the one I use and it's popular one from what I know. http://infinitemonkeycorps.net/docs/pph/ As for packaging, I know that `wheels` are something talked about, but I haven't used them yet.
of course not, but it's at least one positive indication of quality. 
There isn't one. Organize your project in a way that makes sense to you. It's your code after all.
I'm doing scientific programming for my PhD with Python and being able to do plots and multiple runs and easily share it with my professor is a blast. It's also great just to use as a log of what you're doing and how it's working. The interface is great. What's not to like? 
http://ipython.org/ipython-doc/dev/parallel/
&gt; My understanding is that that is bad form in the general case. for libs, maybe it is unnecessary, but bad? sounds like someone's narrow minded opinion to me. 
Hope you like it! One thing about programmers is that they tend to be really possessive of the tools they like. Everyone has different work flow and tools/methods/whatever that work for them. If you don't like iPython or notebook or whatever, I wouldn't take that as a sign that something is wrong with you. 
I'm glad you have such a good attitude for these types of things. Some of the commentary I have gotten has been of the "you should just stop coding python" variety. I don't believe that IPython is going to be able to fit into my daily development requirements, but it is good to know more about yet another tool. Have a good one.
That says it uses [Distribute](https://pythonhosted.org/distribute/) instead of setuptools, but apparently Distribute is a deprecated fork.
I just grow it organically. Start with all files in the same directory. As it grows beyond a handful of files, I migrate things out into subpackages as necessary. I may have a parallel directory for unit tests. And if I'm going to jump through the Python packaging hoops at any point, there may be a directory above it all with the setup.py and requirements.txt in there. But that's all. On the whole it's easy to migrate and refactor things around in Python, so it's not as important to get the hierarchy perfect from day 1.
Personally, I like the Django structure: http://stackoverflow.com/questions/11216829/django-directory-structure
Yeah. And there is no reason to call `list` on that string. And `idx` is never used, so that enumerate was superfluous too. And it's not an ASCII code when the character's not in ASCII. for linenr, line in enumerate(cfg.splitlines()): for c in line: if ord(c) &gt; 127: print "line # ", linenr, ", code point: ", ord(c), ", actual character: ", c That was enough nitpicking for me today.
This blog post gives a great example of project organization (plus other good tips): http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/
From a packaging perspective here's my project layout: Project/ Project/setup.py Project/setup.cfg Project/module/ Project/module/__init__.py Project/module/module.py Project/module/docs/ Project/module/i18n/ Project/module/templates/ Project/module/static/ Project/module/submodule/__init__.py Project/module/submodule/submodule.py Project/other_module Project/other_module/docs Project/other_module/__init__.py Project/other_module/other_module.py Project/other_module/i18n/ Project/scripts/ Project/ The setup.py/setup.cfg will be configured to install all included modules (that would be 'module' and 'submodule') in a single .egg container (that may or may not be zip-safe). This will allow for the project to be installed in virtualenv containers and copied between systems without much thought (it's all self-contained). The filesystem layout created by setup.py will end up looking something like this (just one file as an example to save a lot of typing): /usr/local/lib/python2.7/dist-packages/module-1.0.0-py2.7.egg/module/submodule/submodule.py This layout is *fairly* standard and it can solve/prevent a lot of issues if you stay consistent and use things like the [`pkg_resources` module](https://pythonhosted.org/setuptools/pkg_resources.html). Note that if you use pkg_resources consistently your module will be zip-safe (99% of the time) which means it will be *very* portable and (more) usable on things like embedded systems (think: OpenWRT). Another important thing to think about is your setup.py: Make sure you understand the `setup()` method (e.g. `from setuptools import setup`) and all its arguments. *Especially* the `entry_points` feature (notably, `console_scripts`). I had to go through a *lot* of effort re-organizing [Gate One](https://github.com/liftoff/GateOne) to resolve a number of platform/container portability issues and those two features basically made it all possible. **Other useful tidbits:** Learn how to use setup.cfg and stdeb.cfg so that `python setup.py bdist_rpm` and `python setup.py --command-packages=stdeb.command bdist_deb` will work to make .rpm and .deb packages for your module in an automagic fashion. If possible write all your code to run on Python 3 from the start. As a fallback make it work in Python 2.7 but don't concern yourself with 2.6 or older unless you absolutely have to. This will prevent a *lot* of headaches if and when your package becomes popular! No one will ever pester you to "make it work" in older Python versions if you explicitly state up front that it's a Python 3.2+ package. Trust me. Sometimes it's a good idea to make the use of an external dependency optional. When doing this make sure you issue something like `logging.warning("The foo module is not installed. This will mean reduced functionality")` when your module is imported or your script is run. I also like to give explicit instructions on how to install the dependency (e.g. `sudo pip install foo`). Don't assume that the system where your package is being installed has Internet access. A lot of corporate intranets have no means (from the server) to run things like `pip install`. So if you have a lot of external dependencies in your package make it as easy as possible for people installing it to find/download/install them. Think about how you want your package to log things: Do you want to have your own log files or should you use syslog? Most of the time I'd say, "use syslog" but sometimes you need to make logs in a proprietary way (e.g. certain things just need to go in a database or a special kind of file). Note that when you use syslog you get "centralized logging" support for "free" (which is why I recommend syslog). Also think about the different *kinds* of logs your module may generate. "The more separate logs, the better" I say. My projects usually have at least an auth.log that's separate from everything else. Just because you don't *think* you're going to need internationalization support doesn't mean you won't. It only takes a couple minutes to create that i18n directory and put something like this at the beginning of every .py file: temp_locale = locale.get(os.environ.get('LANG', 'en_US').split('.')[0]) _ = temp_locale.translate That makes it so you can wrap strings like this: _("Error: %s is invalid!") % somevar # Note the % is outside of the _() ...when you write the code initially and add translations later if needed. It also works for `.format()`: _("The {foo} operation completed successfully!").format(foo=foo) A tiny amount of extra work up front can save you a *ton* of work later! That's all I have time to post for now (have to start my day job) but I'll see if I can drop by again later to post how to handle/layout plugins in your Python package!
The author (Audrey Roy) is well-respected in the Django community, and this project seems to have quite a lot of momentum, so if you're looking for a tool to help get new projects off the ground, I second this recommendation.
http://learnpythonthehardway.org/book/ex46.html
This was posted to reddit four years ago, but it's so good I think you should maybe post it again.
He may be the owner, but if he wants to accomodate other people to work on it, it's prefered he uses a standard solution.
True, although it's showing its age a bit when it talks about SVN as the most popular VCS and fails to mention `virtualenv`. I'll post it anyway.
This seems pretty interesting. Does anyone have any idea whether this works for photographs as well?
I'm reminded of [Zeal](http://zealdocs.org/)
Just Sublime Text and stock Python
If you're going to go this route, there are some essential plugins for sublime text that you'll want to install (espc. sublime repl). http://dbader.org/blog/setting-up-sublime-text-for-python-development
Yuk .... sys.path.append('googlemaps') import googlemaps Stop doing this please. And this page was last updated in 2009 ...
Got any nicer alternatives for us noobs?
You could use the Pycharm Community Edition, great IDE imho, or just roll with any text editor of your choice. 
This is a pretty good resource if you're looking to open source a python project. Not a definitive guide, but definitely a good start to learning about the process. http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/
Good old emacs !
Yes it will, you can check out this nice blog post: http://hackerlabs.org/blog/2012/07/30/organizing-photos-with-duplicate-and-similarity-checking/
If you would do anything you wouldn't be be here asking what to do. So it means you at least have an idea of what you're interested in - what is it?
I sometimes use phpExcel but that has some major speed issues when the XLS file gets large. How does this rate?
Geany.
Your favorite editor, virtualenv and virtualenv-wrapper, git, zsh and a nice prompt.
After reading your comment, I started taking a look at docopt, and it certainly looks cool. The problem I'm having is seeing how the options get evaluated. All of the examples I was seeing was strictly about the CLI itself, not how the options are then interpreted to carry out the task. I dug further and other examples showed how to print out what your arguments are, but that's not very useful. Could you (or someone else) point me to a full example showing the usage of docopt, and the subsequent code that gets executed based on the CLI setup?
ironically, running setup.py install in googlemaps essentially does the same thing you want people to stop doing that too? 
I use vim with some changes to the .vimrc file as described on [Python Wiki](https://wiki.python.org/moin/Vim) 
Wow, docopt looks amazing. I hate using argparse and argparse-like tools all the time. Thanks for sharing this!
May I advertize for Picnic.py, a little script I wrote to make it easy to write a Python package. Basically you write picnic.py new MyPackageName and it sets up everything you need to get started. It may not be ideal for everyone, but for my quick projects (mostly scientific Python) I use it a lot. See: https://github.com/Zulko/picnic.py On this page I also provide recipes that are of interest if you want to use git, Github, the Github Pages, or Sphinx. If you are looking something more evolved, there is also CookieCutter which seems more powerful and customizable: https://github.com/audreyr/cookiecutter 
Thank you.
But they do exist. They may not be standards in the formal meaning of the word, but there are certain layouts that most people use. Some of them have been posted in this thread.
A script that generates all possible pixels in a 12*12 display.
The page is old, but some of the things taught here haven't changed. The only big lack I find to it is not mentioning `virtualenv`.
How does the link address the specific issue mentioned above? Their `setup.py` just imports the module, so the path is handled in some other way.
&gt; carry out the task. I dug further and other examples showed how to print out what your arguments are, but that's not very useful. I don't follow your question. You write your POSIX interface and then grab the various parameters and use them. You seem to have all the pieces. How you interpret them is up to you.
I like this guide from Kenneth Reitz (Request module author): http://docs.python-guide.org/en/latest/writing/structure/
Please use /r/learnpython when asking for help. This will depend entirely on the OS you've run the script as the ultimate encoding will change without making special allowances while writing to the file. You need to use string.encode() when writing web content to a file system because of all the bizarre encoding that may be used. Wrap your text in something like this: def writeToFile(filename): with open(filename, 'w') as out_file: try: out_file.write(build_article_string()) except: out_file.write(build_article_string().encode('utf-8'))) 
Also, check out django.. I picked it up about 2 months ago and for what you're describing I could now (not 2 months ago) have that written in a weekend.
&gt; try: &gt; out_file.write(build_article_string()) &gt; except: &gt; out_file.write(build_article_string().encode('utf-8'))) I will go to learnpython but this did not work... Thank you for looking 
Just some thoughts to consider as well.. I'm not sure if you've figured the login credentials or if you were just going to have a page that allowed the contact number to be inputted. But if it's the latter make sure you have something in place so it can't be bruteforced.
Webfactio might be the way you might want to go. I would also hit up DigitalOcean for a friendlier experience (compared to Linode).
Is using established big-data image search techniques (eg - k approximate nearest neighbor) impractical? Just curious as to the potential benefits of this approach.
They ARE pretty cool, but are there any tools for animation? I.e. a 'play' button for IntSliderWidget that auto-increments? That would be really nice...
I guess what I'm struggling to grasp is how the parameters are interpreted to do what you want them to. Like if I have a script that will print out a word, and parameter on my CLI say -n. Which -n expects a numerical value. How would that value then get used in my script so that it changes how many times that word gets printed out? Since they get tossed in a dictionary, is it ultimately grabbing values from there, and having a function or if loop do something based on the value?
Definitely Pycharm as your IDE. Use a virtualenv environment for each project as well as source control (git. Bitbucket provides unlimited public and private repos ---- yay!). ipython is absolutely indispensible.
Thanks, most appreciated.
Can you open source it please? I am in a phase where I am learning stuff, and itching to make something.
&gt; `python setup.py install `**--user** &gt; `pip install `**--user**` csv2xls` Thank you very much for not trying to mess with my system :)
Solved the issue with this: **Solved** def create_text(): with open(scrape_title()+".txt", "w", encoding='utf-8') as out_file: out_file.write(build_article_string()) 
Lets make it together! edit: https://github.com/pizzaisdavid/pixelgenerator
Be careful on this site. You can end up with a client that is paying you 50 bucks and calls you everyday and then makes you do additional stuff after its completed. It's really annoying. Also you will probably get outbid by someone in a foreign country. I've probably done 5 or 6 pyrhon freelance projects and I'd say half were with people that were pain in the ass and the other half we with great people. Just want to warn you what you will get into. Also the site is extremely cluttered and pretty hard to use.
Great! So i am noob, can you tell me where to start from? I think I am gonna start with PIL, am I going in the right direction?
What is PIL?
This is a great article of something that i didn't know was so easy to do. Thank you! 
I'm using Aptana Studio 3, connected via git to a mostly fresh deployed VM for testing. At the moment I'm using it in a Windows environment, but I'm looking to switch to Linux for my desktop soon. 
Also, I would guess that your book/professor/whatever used those variables. Every single time I've seen DH explained those are the variables names are used. It would seem weird to me if you had NOT used the variable names you did.
Well since you asked. How about mking high quality python bindings for the libraries behind [MuPDF](http://www.mupdf.com/). 
I was going to use [pygame](http://www.pygame.org/wiki/about) make your case for PIL.
That's another way of doing it, you can pass an encoding as a parameter to open() rather than as function of a string ( string.encoding('utf-8') )
I am sorry my english isn't very good. Are you saying we do this in two ways, you way(pygame) and my way(PIL)?
Anyone else see that new name and immediately think "Pissed On"?
Look into using dictionaries. You can even use tuples as the key so: conversions = { ("meter", "yard"): (m, b), } This is just an idea and not sure exactly what you are looking for. Another option could be converting all metric values to the same unit and then running 1 function to convert to imperial...just brainstorming.
This is awesome, or though I can't help thinking the effort might be better placed into creating a function-at-a-time JIT for PyPy or integrating LLVM with it (which because it is really an interpreter framework would benefit anything else using it). That might be an impossible task though. I look forward to giving it a try once it matures a bit. 
I'm missing something. 1. Create the POSIX blurb. 2. Pull data from the dictionary. 3. Use it. from docopt import docopt msg = "Usage:\n" msg += "my_script [-n COUNT]\n" msg += "my_script -h | --help\n" msg += "my_script -v | --version\n\n" msg += "Options:\n" msg += " -n COUNT, --count COUNT how many times to print JUNK (default=1)\n" msg += " -h, --help shows this help message and exits\n" msg += " -v, --version shows the version number and exits\n" data = docopt(msg, version="1.0") n = int(data["--count"]) for i in range(n): print("JUNK") I didn't test it, but that should work or be really close. How you use parameters is up to you. It's not going to write your code for you. Just because you document something, doesn't mean it's actually going to get used. You have to code that.
This technique is fast as the hashes can be pre-calculated and stored in a database. Even though approximate neighbour search is avoids calculating euclidean distance and sorting it still might be slower than a straight equality comparison in SQL. That's just a guess anyway. Perhaps the developer was more familiar with these sorts of techniques and less familiar with machine learning.
In order to find the nearest neighbors, you must first have some sort of basis for comparison. There's no well-defined 'similarity' operator for bitmapped images. You *could* compare bit-by-bit, but that's almost never what you want for machine learning algorithms. Although the search techniques are important, none of them will work well if you can't tell the comparison algorithm what part of the data is important to you and what part of it is just noise. In general, methods for turning data into a form suitable for running comparisons in a machine learning search are known as 'feature extraction'. A 'perceptual hash' like the one presented could form one feature, with the comparison function between two of them being the hamming distance between the two hashes. With just one feature, your 'k' devolves to 1 and you just have a simple nearest neighbor search. But with good-enough feature extraction, there may not be any need to go further for some problems.
Nah, Piston
Only 3 colors. Black, white, and 50% grey.
This looks really promising, especially because Guido van Rossum (creator and BDFL of python) works at dropbox.
Is this needed now that PyPy is gathering momentum?
Did you do the implementation?
&gt; pypy [...] being a limited subset of the language I think you confuse PyPy with RPython here. PyPy itself is written in RPython, a limited subset, but the resulting Python interpreter supports (AFAIK) everything Python does. The problem with "legacy modules" happen when those modules contain C code. Since PyPy is not written in C, it doesn't implement the CPython API for extension modules. 
5 downvotes! fierce. I wonder if it's because ppl thought the content was weak, or whether it smacked a bit too much of self-promotion? anyways, thanks to the 7 people that helped keep it in the black! :)
From the announcement: &gt; Pyston is still in its infancy and right now only supports a minimal subset of the Python language. Granted, yeah its probably wrong to say limited subset of the language (which implies python language - not the python C API) for pypy, instead of saying only currently supports the python C API at [alpha/beta levels](http://pypy.org/compat.html).
i donâ€™t think so. not at all. 1. clang-based like unladen swallow (which didnâ€™t achieve improvements as good as they hoped) 2. python 2 only, wtf. 3. all the effort of numpy doesnâ€™t affect it (numpypy, pypyâ€™s jit, STM, â€¦)
From the comments: &gt; Guido's advice has been extremely helpful, but so far we haven't been able to get any code from him :/ I do want to see his opinion of it, though!
even if it wouldnâ€™t support the C api at all it would still be able to completely implement python-the-language. i just wouldnâ€™t be a replacement for python-the-runtime.
Oh, wth do they use python 2.7? Will this branch never die? Else: Cool thing, that.
&gt; 2. python 2 only, wtf. They said *currently*, it's also x86_64 only
But he has claimed python is fast enough for him...
&gt;We often treat numbers as sequences of binary digits Yes we do in some languages. Just like in many languages "2" + 2 is valid. But this does not match well with the rest of python and its goal of being explicit. Now some hypothetical like rawbyte(False) + rawbyte(5) might make sense. Just like int("5") + 5 works in python. &gt;treating characters as strings, both of which Python does. Python does not treat characters as strings. &gt;1 + {} has no sensible result. I agree thats my point. My argument is that False + 5 also does not have a sensible result. &gt;There is no mapping that is consistent, symmetrical, lossless I disagree. There are many possibilities here. &gt;everything that a bool does is obvious. I disagree. True + True + True returning 3 is not obvious. &gt;They obviously do. Python booleans do because they are forced to but generally they do not. Conceptually ints have many more operation applicable to them than booleans. It would even make more sense to have int be a subclass of bool or both of them to be a subclass of number directly. That would still be bad but not quite as bad. &gt;What did your code do? Work with the results of a proprietary c extension to python with functions that return python objects rather arbitrarily. &gt;Unfortunately if you were using Python 2, your code would have rejected longs. I am using python 2. It would make sense for long to be a subclass of int or a baseint. Fortunately they realized how crazy this was and fixed in python 3. 
One of the key benefits of the metric system is the factors of ten. You only need base SI units to imperial, and something that matches prefixes. Strip prefixes and multiply by 10^n, or vice versa. Then you only ever need inches to metres. Well, and feet to metres. And yards to metres. And this is why the civilised world uses metric.
&gt;&gt; We often treat numbers as sequences of binary digits &gt; &gt; Yes we do in some languages. Eg. Python. &gt; Just like in many languages "2" + 2 is valid. Typically, in those languages `"2" + 2` is valid only because `+` coerces its arguments, which is completely different. &gt; But this does not match well with the rest of python and its goal of being explicit. Explicit about what? &gt; Now some hypothetical like rawbyte(False) + rawbyte(5) might make sense. Just like int("5") + 5 works in python. ??? &gt;&gt; treating characters as strings, both of which Python does. &gt; &gt; Python does not treat characters as strings. Considering that in Python characters *are* strings, I disagree. &gt;&gt; 1 + {} has no sensible result. &gt; &gt; I agree thats my point. My argument is that False + 5 also does not have a sensible result. I know. My counterargument is that treating `True` and `False` as synonyms for the LSB of an integer is completely reasonable, mathematically consistent, is perfectly analogous with binary operators (`|`, `^`, `&amp;`) and is therefore *reasonable*. &gt;&gt; There is no mapping that is consistent, symmetrical, lossless &gt; &gt; I disagree. There are many possibilities here. For example? &gt;&gt; everything that a bool does is obvious. &gt; &gt;I disagree. True + True + True returning 3 is not obvious. You cropped the quote. My response is the first half. &gt;&gt; They obviously do. &gt; &gt; Python booleans do because they are forced to but generally they do not. Conceptually ints have many more operation applicable to them than booleans. As long as you allow `bool`s to violate closure on the integer operations, there is not one operation that `int`s can do that `bool`s cannot. &gt; It would even make more sense to have int be a subclass of bool or both of them to be a subclass of number directly. That would still be bad but not quite as bad. Do you mean `Integral`? I don't see why you make a distinction between that and `int`. &gt;&gt; What did your code do? &gt; &gt; Work with the results of a proprietary c extension to python with functions that return python objects rather arbitrarily. I'm asking because I'm genuinely curious about how this broke your code. If you removed the **broken** `isinstance(foo, int)` code, **how** did `bool`s being a subclass of `int` break it? I can't work out how. &gt; It would make sense for long to be a subclass of int or a baseint. No, `int` would be a subclass of `long`, [at least according to typical hierarchies (which Python followsÂ¹)](http://en.wikipedia.org/wiki/Liskov_substitution_principle). Â¹ See `bool`:`int` ;)
"That is not dead which can eternal lie / And with strange aeons even death may die." Comparing Python 2 to the Great Old Ones. Nice.
That's a Game of Thrones quote I think, referencing the Drowned God who is worshipped in the Iron Islands. Interesting parallel. EDIT : This is what I was referring to : &gt;What is dead may never die. Or something &gt;-infinull I am aware that H.P. Lovecraft is the author of the quote in this post : &gt;"That is not dead which can eternal lie / And with strange aeons even death may die." &gt;Comparing Python 2 to the Great Old Ones. Nice. &gt;-hjwp The problem is the first one looks closer to George RR Martin than Lovecraft, so I was pointing that out to /u/hjwp.
From the comments, he wasn't actually directly involved in this but did give them a lot of advice.
Well yeah, it's not finished yet. I'm sure they aim to support all of Python (the language). It sounds like they plan to have better support for C extensions than pypy too.
Unladen Swallow had a lot of design-limitations (most notably, they wanted to remain API-compatible with Python extensions). LLVM wasn't per-se the limitation there (note there's still some interest in using LLVM for codegen in PyPy, because it *is* good).
Let `python2` your servant be born again from the sea, as you were. Bless him with salt, bless him with stone, bless him with steel.
I really need to remember this project. Every time I go looking for it I forget about it, then eventually find I've already starred it on github. Thanks for sharing it.
There's some more technical details here: https://github.com/dropbox/pyston#technical-features Right now they have no baseline compiler but will interpret (un-optimised?) LLVM IR at first, second tier is unoptimised LLVM compilation, then LLVM compilation with type recording hooks and finally a fully optimised compile. Given the history of the Unladed Swallow project and others using the LLVM JIT, they're likely to find they have a lot of work on their hands, particularly as PyPy is really rather good these days. There's some more info here in a post to the LLVM mailing list by one of the Pyston developers http://article.gmane.org/gmane.comp.compilers.llvm.devel/71870. They've added a simple escape analysis pass for GCed memory among other things. If you're interested in LLVM or compiler stuff you should subscribe to http://llvmweekly.org (disclaimer: I write it) and follow [@llvmweekly](https://twitter.com/llvmweekly)
&gt;Python does not treat numbers as sequences of binary digits it has bytes for a reason. (I realize you can do binary like operations on ints but ints don't really act like binary digits in python) The point is that these operations act on the binary digits of the number, with each acting logically as a boolean. I don't care how you want to word that. &gt;&gt;Considering that in Python characters are strings &gt;Exactly how can python treat characters as strings if there are no characters in python. There *are* characters in Python. That they aren't a separate class is a minor and mostly irrelevant distinction. &gt;&gt;My counterargument is that treating True and False as synonyms for the LSB of an integer is completely reasonable &gt;But this is not what python even does. Both 3 and 4 evaluate to True for example. ..!?? Under what context? If you mean `bool(3)`, then that's a different story. We allow `int("3")` without requiring `"3"` to be in any way integer, so we should be able to allow `bool(3)` to be `True` without conflating `3` with any boolean value. &gt;&gt;For example? &gt;How about any int operation with a dict just returns the dict. 1 + {} = {} That's hardly lossless. I'm not even asking for strict losslessness here, just something semi-reasonable. &gt;&gt;As long as you allow bools to violate closure on the integer &gt;It makes no sense why you would do this to me. ? &gt;&gt;I don't see why you make a distinction between that and int. &gt;https://en.wikipedia.org/wiki/Integral seems very different from integer. https://docs.python.org/3/library/numbers.html#numbers.Integral &gt;&gt;If you removed the broken isinstance(foo, int) code, how did bools being a subclass of int break it? &gt;The point is that isinstance(foo, int) should not have been broken. Obviously I changed the code to fix the bug but it should have never been a bug in the first place. Either your code accepts `int` subclasses, in which case `bool` shouldn't have caused a problem, or it does not, in which case the code is broken. What am I missing?
He wasn't a fan of PyPy at Pycon 2013, maybe his employment at Dropbox will give him a bit more...incentive to look at this implementation.
Yes I did.
It's not that it's somehow invalid, it's just that there is typically a LOT of detail in an image that is completely irrelevant to your classification task. You run a high risk of having that irrelevant detail mask or distort the features of the images that you're actually interested in. Unless you have some sort of very restricted input set that happens to have the feature you're looking for very blatantly apparent in the raw data and happens to not have any irrelevant differences between items, you'll do *much* better if you pre-process to normalize things and remove as much extraneous detail as possible. The content-aware hash is more of a "fingerprint" than a typical hash. The irrelevant factors are normalized and the general shape is emphasized over fine details via a low-pass filter. Parts of the fingerprint correspond regularly to parts of the source image, so comparing fingerprints *piecewise* is valid, where it would not be with most hash functions that try to avoid collisions when things are different but similar. You could also try doing an edge detection and vectorization pass and come up with some sort of comparison between that representation. There are all sorts of image processing things you can do depending on what you're looking for.
No it's not.
Consider doing it in the browser with three.js and websockets. It's much easier and more deployable than gui code.
You'd use a heredoc """ string not msg +=
That's how I do it. It works.
LLVM solves *none* of the hard problems involved in building an efficient dynamic language VM. Specific problems include: * Frame management (avoiding allocation) * Allocation removal * Bailouts * Type specialization * Container specialization And to be clear: there's some interest in using LLVM as a static compilation target for RPython, I'm not aware of any PyPy developers working on, or interested in, using it for the JIT.
From the project's website: To check out the code, report a bug, or contribute a new feature, please visit the github repository. You can also get in touch on twitter. https://github.com/mwaskom/seaborn https://twitter.com/michaelwaskom Here is the link to the website: http://www.stanford.edu/~mwaskom/software/seaborn/ You can tell that it is part of someone's personal HTML directory. If you remove the "software/seaborn/" part of the URL you get the creator's personal page which includes his email, github, and twitter. http://www.stanford.edu/~mwaskom/
For small projects, authors may not mind you making Github issues for discussion. It also has a [Stackoverflow tag](http://stackoverflow.com/questions/tagged/seaborn) where you can see the previous questions. All 9 of them!
As a games guy using Maya 2012, I'm not even up to Python 2.7 yet. We're still stuck with 2.6.5 for the forseeable future.
How about three randomly picked colors? 
&gt;He wasn't a fan of PyPy at Pycon 2013 Any particular reason why not?
I develop python for enterprise customers on RHEL. I think it was about two years ago I switched from 2.4 to 2.6. I look forward to moving to 2.7 and beyond. 
vim and also ipython notebooks (now using version 2.0). I use python 3.4's venv which comes with pip (unlike versions &lt;= 3.3) to create virtual environments.
This has some nice suggestions for python projects... I will definitely take some of the advice.
I'm not hopeful that it will move beyond that. Python 2.7 seems to be Good Enough(TM) for much of the industry titans that I don't think we'll ever see widespread Python 3.x adoption within the heavy-weights' infrastructure.
I could think of a couple of reasons: * Too unstable and risky * Breaks CPython which is a python canonical implementation (a reference if you wish). * Breaks compatibility with many C extensions * For some workloads exhibits pretty high memory usage And last but not least: * He was preoccupied with Python 3 release and I think deep down he saw people "ooh and ah" over PyPy a bit more than they "ooh-ed and ah-ed" over Python 3 &lt;- That is just my hunch, if you wish. 
Another similar post: http://www.hackerfactor.com/blog/?/archives/432-Looks-Like-It.html
It's likely that George RR Martin got some of his ideas from Lovecraft, however the OPs quote is closer to what's in the Game of Thrones books than it is the Lovecraft quote. This is the quote from the OP : &gt;What is dead may never die. Or something. This is what someone responded with : &gt;"That is not dead which can eternal lie / And with strange aeons even death may die." &gt;Comparing Python 2 to the Great Old Ones. Nice. I was saying that the OP was probably quoting George RR Martin, not HP Lovecraft.
First, you want a common unit. It's a lot less code to to go from inch to meter and meter to foot than inch to foot. Then you have a question of derived units like inches^2 and ft*lb/s^2 and temperatures (Rankine/Farenheit/Kelvin/Celsius). Also, did your prof say you can't use a preexisting library? Cause you can make a program to convert units, but has a simple interface.
The libraries `matplotlib` and `mayavi` both support 3d plots. `matplotlib` can be embedded in frameworks like Tkinter and Pyside fairly easily if you need fancier GUI options. Also, /r/learnpython is a good place to ask questions like this too.
Thanks, I did find those links just after I posted. It doesn't seem like the author has anticipated that people might want to ask "How do I...?" type questions, though. I guess I'll have to dust off my twitter account.
This will be a huge wake up call for those running Python that they can't continue to make decisions in a vacuum. There are other people who could actually influence or even come to dominate the future of Python. Soon the word canonical will probably take on a new and hysterical meaning. Plus the 2.7 direction is a serious gut punch to 3.x having any future at all. 
&gt; all the effort of numpy doesnâ€™t affect it (numpypy, pypyâ€™s jit, STM, â€¦) Can you elaborate on what you mean by this?
I guess SO is it. It took about 3 minutes to get a response from the author there.
I think you may be right. Guido is very conservative, unadventuring in his design aesthetic, and what you say is consistent with that - eg favoring CPython extension compat over architectural improvements.
That might weene people off Python 2 but it might make them move from Python totally. Some domains require long term stability and if your language has a history of breaking things it will be avoided. 
Pip and virtualenv are complementary. They solve different problems. You don't choose one over the other. You use them together.
Doesn't matter for one user. [From what I've learned recently](http://www.reddit.com/r/webdev/comments/21w4g2/what_exactly_is_web_site_deployment/), it's only necessary for large scale deployments. I'm running a flask server right now with up to 50 users at one time with no issues.
I think you're looking for this: http://python-packaging-user-guide.readthedocs.org/en/latest/tutorial.html
&gt;The point is that these operations act on the binary digits of the number Some operations on ints treat them much like raw binary but many do not. For example str(97) produces "97" not "a". &gt;that they aren't a separate class is a minor and mostly irrelevant distinction. Its not irrelevant if you still stand behind your argument that python's treatment of int and bool is similar to its treatment of stings and chars. Python handles them differently. Bools are a subclass of int. char is not a subclass of string. &gt;Under what context? bool(4) and just 4 would be false under the argument that "True and False as synonyms for the LSB of an integer". I would be fine with int(True) and int(False) working the way they do now that is totally reasonable and consistent. &gt;That's hardly lossless. I think we had a misunderstanding about what we mean by a mapping I assumed you meant mapping in terms of functions mapping inputs to outputs. But now I think you must be referring to mapping types. Like it would make no sense to have dicts be a subclass of int but boolean still makes sense. I agree that boolean make slightly more sense as a subclass but you could actually map dicts too in the same way. Just take the binary representation of dicts and turn that into their int. But this is quite separate from my original argument that has greater practical effects. The expectation that 1 + {} would cause an exception is analogous to the expectation that 5 + True would cause an exception. I asked 5 python programmers in my office this and they all expected an exception. &gt;&gt; It makes no sense why you would do this to me. &gt; ? I don't know why I wrote that I meant to say is that I think it is quite counter intuitive that operations involving two booleans would not return a boolean. If bools implemented mod 2 arithmetic that would make a little more sense. &gt;https://docs.python.org/3/library/numbers.html#numbers.Integral Oh ok. But I still don't understand what you don't understand about it making more sense for bool to be a subclass of number than int. Although I really thing bool should be a basal type. &gt;shouldn't have caused a problem It did not cause my code to crash. The problem was that I needed to return an error to an outside program if I did not get a non bool int. I needed to return a json blob if I did get an actual int. The json parser happily turned False to "false" so no error was thrown in my program. But the program it was passed to expected something like "43" or an http error. Any reasonable int subclass would have worked fine. Of course you could easily create a malicious int subclass that did something unexpected like bool does. But you can do crazy things in python like have a lib change what int() does to change things into a string. But you don't write code to defend against things like that. There are reasonable expectations. 
Completely stable interfaces are always easier to work with. Python 3 was/is the best thing that ever happened to python 2.x shops.
It's just an intro to programming class, we haven't gone Over libraries yet
Encouragingly, Pyston developers do seem to realize importance of allocation removal, and are working on escape analysis for LLVM. (Look under src/codegen/opt.) We will see how it works, but if it works, it will be LLVM solving at least one of hard problems building an efficient dynamic language VM.
"Method JIT" for PyPy does sound like an impossible task to me. Tracing is pretty fundamental to how PyPy's JIT works.
pypy has several big subprojects: 1. The just-in-time compiler aka JIT. itâ€™s bound to be much better than Pyston, since itâ€™s custom-tailored for scripting languages 2. NumPyPy, i.e. Numpy rewritten in pure Python to make it JITable and independent of the FORTRAN code powering Numpy 3. [STM](http://en.wikipedia.org/wiki/Software_transactional_memory) allows true multithreading.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Software transactional memory**](http://en.wikipedia.org/wiki/Software%20transactional%20memory): [](#sfw) --- &gt;In [computer science](http://en.wikipedia.org/wiki/Computer_science), __software transactional memory__ (__STM__) is a [concurrency control](http://en.wikipedia.org/wiki/Concurrency_control) mechanism analogous to [database transactions](http://en.wikipedia.org/wiki/Database_transaction) for controlling access to [shared memory](http://en.wikipedia.org/wiki/Shared_memory) in [concurrent computing](http://en.wikipedia.org/wiki/Concurrent_computing). It is an alternative to [lock-based synchronization](http://en.wikipedia.org/wiki/Lock_(computer_science\)). A transaction in this context occurs when a piece of code executes a series of reads and writes to shared memory. These reads and writes logically occur at a single instant in time; intermediate states are not visible to other (successful) transactions. The idea of providing hardware support for transactions originated in a 1986 paper by [Tom Knight](http://en.wikipedia.org/wiki/Tom_Knight_(scientist\)). The idea was popularized by [Maurice Herlihy](http://en.wikipedia.org/wiki/Maurice_Herlihy) and [J. Eliot B. Moss](http://en.wikipedia.org/wiki/J._Eliot_B._Moss). In 1995 [Nir Shavit](http://en.wikipedia.org/wiki/Nir_Shavit) and Dan Touitou extended this idea to software-only transactional memory (STM). Since 2005, STM has been the focus of intense research and support for practical implementations is growing. &gt; --- ^Interesting: [^SXM ^\(transactional ^memory)](http://en.wikipedia.org/wiki/SXM_\(transactional_memory\)) ^| [^Concurrent ^Haskell](http://en.wikipedia.org/wiki/Concurrent_Haskell) ^| [^Transactional ^memory](http://en.wikipedia.org/wiki/Transactional_memory) ^| [^Clojure](http://en.wikipedia.org/wiki/Clojure) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgjqvsd) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgjqvsd)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Nice post, but it's from 2009. Go 1.2 is significantly faster now.
What is your real point here?
It can also upload the static site to Github with one command: `mkdocs gh-pages`.
I'm only now noticing there's no "insert cell above" widget anymore.... is there any way to get it back? I frequently used that button
Not only that, Go 1.3 is faster still.
For good reasons! Just look at what (not) happened with python3 adoption when it broke python2 code. 
**Vim** with python-mode, vundle, and almost all tpope's plugins. Virtualenv (with virtualenvwrapper) + **ipython/bpython** are a must. And I second **zsh** with a nice (not overloaded) prompt. And maybe take a look at **tmux** if it suits your goals. I have also grown to love **xmonad**, but that's subjected to personal taste. Then again, almost everything is :)
At this point, are their any languages that have had a "worse" upgrade? I was doing a lot of Python work while Python3 was on the drawing board. I think their design goals were conservative and rational, but it's mind blowing to see what a fractured landscape that has resulted years later. Deployment and compatibility issues strike at the heart of the reasons I tended to use Python. 
I have no experience with phpExcel, but I regularly use csv2xls to create 50Mo+ Excel files in a few seconds. Beyond this point, Excel itself starts to get slow. The bottleneck is usually the xlwt write method, plus some overhead for the type inference. As an example, I just ran the conversion on one CSV with 65535 rows (maximum allowed) and 10 columns, with type inference. It took 14s on a small virtual machine.
`pip` is a package manager which you use to install packages. `virtualenv` acts like a sandbox and allows you to install different versions of the same package on the same system without having any conflicts.
Or just install it inside a virtualenv or pyvenv.
This does come across as a total self promotion :P
Perl's went absolutely disastrously.
Any chance of having revisions for each django version? Obviously It's 99.9% the same with a few little differences, but if you're reading this with no idea how to test properly and stuck on 1.5 like I am, then it would be a godsend.
I'm surprised this is the first time you encounter this. Have you ever seen this before: $ python &gt;&gt;&gt; import this The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. ...
The less random the better. The goal is to be able to create a complete collection of all images and run various scripts on them. How many combinations are possible in a 12*12 pixel matrix?
Very useful for me! Have been wondering whether there exist a best practice in using git, and the link to http://nvie.com/posts/a-successful-git-branching-model/ in the given link answer me just fine. Thanks
Perl5 to Perl6...?
C is having a pretty "bad upgrade". Microsoft has refused to support C99 for quite some time...
RHEL now officially supports Python 2.7 and 3.3 through Software Collections.
Yes. And just to be clear, "conservative" and "unadventuring" are usually desirable qualities in language design.
If you're on Windows, PyScripter is great for that. Unfortunately, it needs to be updated to work with Python 3.4. I've switched to using Vim in the meantime.
I usually like to have some instructions to quickly install a package. I know how to install Python packages, but not the Clojure ones, for example. If somebody distributes a Clojure library, I will be glad to have some instructions to help me install it. Another thing is that I can guarantee you that the installation with pip and setup.py will work because I tested them, but I did not test every possible way (like easy_install).
Thanks a lot, very useful post :)
Excellent. Thanks for the reply.
The purpose of wheels is to have a "binary" distribution that doesn't require the installer (pip) to be aware of the build system (setup.py) which is executed, if you use source distributions and is a problem for performance and security. Therefore you should definitely use wheels for pure Python packages. However if you have C code, you can't make universal wheels, which means your wheel is bound by Python version, interpreter, ABI and platform. Even if you just support Python 2.6, 2.7 and &gt;=3.3, CPython, PyPy and only the latest Windows, Linux and OS X in 64bit you get 4 * 2 * 3 = 24 wheels, each of which needs to be build individually. Most projects simply don't have the infrastructure to do that.
With 3 colors on 12x12 matrix there are 3^144 possible arrangements.
Take a look at this site: http://rspeer.github.io/blog/2014/03/31/python-3-4-from-scratch/ This set of instructions is also very good: http://blog.pinguinplanet.de/2014/03/python-34-and-django-on-ubuntu-1310.html Some other instructions on using virtual environments: http://robinwinslow.co.uk/2013/12/26/python-3-4-virtual-environment/ Whatever you do, DO NOT do make install... that will override your default python which ubuntu relies on with the python 3.4. Use make altinstall instead. That will show you how to compile python 3.4 from scratch. Then create virtualenv's using the directions. The virtualenv will include pip, and once you activate it you can use pip to install flask and django. 
Yah, I was playing around with adding some more stuff to it, like making a basic ORM with SQLAlchemy. The inspiration for this project was a conversation with a friend who had done some online coding classes but had no idea how to use what he learned to actually build a web app. There are probably better classes he could be taking to learn more, but I wanted to give him something to get started with that wouldn't force him to learn too much at once. I decided to stick to the absolute basics of just running some python code and rending templates. That said, I could probably keep building on what's already there and add some more advanced stuff lower down. Happy to take pull requests! :)
You still don't need to give *exact* commands. It's okay to just say for example: "Install with pip or setup.py, not tested with easy_install." --- I think, my overall motivation is to **always do things properly**. So for example: I'm a Python guy but in the past I had to do some Ruby and PHP stuff too (among some more other things). And when I find a tutorial or package that explains how to install something, I don't blindly follow that. I rather take the time to go to the official documentation to figure out how to properly install things. I guess I belong to the [*craftsmen* kind of programmers](http://programmerjoe.com/2008/06/29/five-kinds-of-programmers/) (not fully though because I can't give accurate estimations)
Did they even *have* computers back then?
Coursera's Python course!
Went? It's still going.
You may look at hdf5 http://www.h5py.org/
You should look around in /r/learnpython also might I suggest Pandas?
I wonder if someone else would recommend h5py for reading/writing HDF5 a binary data cache. I can't say I've tried it, but it's been something I'd like to try.
It depends on how regular the pages are. You might be able to get away with the urllib module to get the pages. Then use the re module to get what you want. If you want an example: https://github.com/alexjh/whatson/blob/master/whats_on_capture.py If the pages are more complicated, use http://www.crummy.com/software/BeautifulSoup/
Any particular reason? Is there better documentation and support for those? I don't mind having to rewrite some of the code but the less I have to change the better I think. 
Agreed - I already knew a bit of Python (in a sink-or-swim, just-trying-to-get-my-thesis-data-working sort of way) when I took a Coursera course in it, but it really cleaned up my act and made me realize how to do a bunch of stuff in a much better way now. I really wish I had started with the Coursera course.
I've been learning python on and off for a year now. I'm in the second week of the Coursera python course. So far so good if not a slower pace than I usually study at. I've even talked a few friends who have never programmed before into giving it a try.
thanks thatÂ´s cool. Looking forward to take the course.
Not necessarily. Python wasn't when it started -- it's named after a comedy troupe of all things. Does that make it an undesirable language?
coursera or edx?
That some new blood might be injected into the Python world. I am in the process of leaving C++ for Python because the C++ world has become very very very academic. Things like templates can make code much more readable yet the push seems to be to make C++ code as esoteric as is possible. Basically unreadable. So I come to the Python world only to find that there is this internal battle over Python 2.7 vs 3.x which has become religeous. Those who defend 3.x say they are on the righteous path; while those sticking with 2.7 say they are realists. This is not a good sign. So here are these somewhat outsiders who are coming in and might end the whole 2.7 3.x argument in one sweep. 
Cheers.
Just signed up, thank you for sharing! 
No, it doesn't solve the hard, high-level, problems. But its optimisation passes are better developed than any low-level ones of PyPy â€” there was discussion a few weeks ago on IRC about it still being a nice long-term goal (once LLVM has decent GC support) for the sake of things like auto-vectorization (obviously this is only workable in limited cases, depending on list strategies, all guards either outside the loop or amenable to LICM, etc.).
I'd like to point you in the direction of lowendbox.com; not a VPS reseller, but a review/offers site for VPS resellers. That's how I found my VPS hosts. Also, for a relatively small project, you might want to look at a low-end Amazon box or a google app-engine solution. 
I was to late :(
I've been doing the Codecademy and I give it a huge thumbs up. They have references to things like Monty Python in their examples and it keeps it fun. Also having the interactive window is great for those who learn by doing.
&gt; They have references to things like Monty Python in their examples That is actually a [Python-thing](https://www.python.org/doc/humor/), you might say... not really unique to Codeacademy (well, it shouldn't be, anyway). 
Spam.
I did [this](https://bitbucket.org/esbenab/image-hash/wiki/Home) as a proof of concept some years back. Take it if it's useful, have a good laugh if it's shit and feel free to PM me if you have questions. Ps It's meant as a way to generate a index of images in which to find (near)matches. The plan was to use it for the national Danish Internet archive, but then I got a new job. 
Or ... http://swaroopch.com/book/python/ **for free and quite good too*
see also: &gt;&gt;&gt;import antigravity
For those who are also taking the Coursera course: Have any of you signed up for signature track? Is it worth signing up for?
I haven't been able to make great use of it but there is also PyTables, which uses HDF5 as well. http://www.pytables.org/moin
PyPy may not be as stable as CPython but for at least for the past 3 years its been in very good shape. Most issues when found are fixed very quickly. PyPy is by far the most compatible alternative Python implementation. Any differences with CPython are noted [here](http://pypy.readthedocs.org/en/latest/cpython_differences.html). At first glace it may seam like a lot of differences but they are really minor ones and if other alternative Python implementations where just as open about their differences they would likely have more than 20x the number of differences. Yes it breaks compatibility with a large number of C extensions. That's mainly due to the CPython CAPI leaking out CPython internal details. If the API had a cleaner design it wouldn't be an issue. However, this issue can be resolved by using cffi extensions. In the past PyPy always had high memory usage but for a couple years now it only happens in some cases. In a number of cases PyPy actually uses significantly less memory than CPython which is amazing since it needs extra memory for the jit. In general a project that contains a small amount of code will use more memory but larger projects will consume less than CPython.
I've tried hdf5 and it sucks. It's surprisingly slow, messy and the format is quite limited. I can see it working reasonably well if your data is a large uniform array of integers. I'd use a database, but it's hard to say without knowing how your data looks. I'm quite fond of Postgres myself.
And now delattr, setattr, and getattr are registered. Thought I'd be able to grab them first. Darn!
...because a "step" is totally not an arbitrary unit of measurement, nope, not at all. I give you "learn Python in just 3 steps": 1. Install Python 2. Read a Python tutorial 3. Apply what you learned in step 2 to the Python interpreter installed in step 1. That's all there is to it! Oh joy!
:)
 &gt;This sounds similar to what google tried with Unladen Swallow and eventually abandoned. They also targeted LLVM but I believe they wanted to build on the existing CPython interpreter, whereas this seems to be a completely new implementation. I guess we now also know why dropbox hired Guido away from Google. New but implemented on Python 2.7 which boggles the mind. As for Unladen Swallow I'd like to know what actually doomed that project. It really seemed like they had made good progress. The only thing that bothers me about this whole program of Dropbox's is programmers that aren't willing to use the right tool for the problem at hand. Especially when they admitted to better performance with less effort using other languages. Kinda makes you wonder doesn't it. Seems like a very one dimensional attitude at Dropbox. Don't get me wrong I love Python and don't want to see it stagnate, but that never would stop me from using a different language that I know if it fit the problem better. I just find the reasoning here to be puzzling. 
Took the words right out of my finger tips. 
This is what PyPy produces for comparison: http://i.imgur.com/W2AIq0F.png (The function call gets inlined and removed, but the loop is still there..) def x(): def foo(i): pass for i in xrange(10000): foo(i) x()
Kate is a great editor.
It's hard to make a recommendation without knowing what the data looks like, what analysis tools you'll be using, what kind of analysis, what kind of performance &amp; space requirements you're facing, etc. However, in general: * SQLite is a great little database, but seldom gets selected for this volume * MySQL's optimizer is primitive, and so it doesn't work well for analysis queries on large volumes. * If you're looking at relational databases then the best non-parallel option is probably Postgresql. And you can try using Postgresql's "Foreign Data Wrappers" - which would allow you to query data files outside of postgresl. Maybe even gzipp'd ones - tho I haven't seen a FDW for that yet, seems like it wouldn't be too hard to write one.
The source code of `this.py` is an easter egg in itself.
https://github.com/mikemaccana/python-docx ?
ah good info thanks, I was thinking of going for Tornado but only because I see it quite a lot in similar situations. Does it get rid of having to link images as static? or is there somthing else I have to do for that?
For one thing I would say SQLite is out this isn't the use case for that. Next I think there are several questions worth asking your self. The first question is around persistence after you pull this data do you use it in different ways or do you plan on applying the same process to it? -this question gets to if you should use a database at all or just write to raw text and parse it. If there are a limited number of usecases for this data you will probably be far better off extracting the data to text and then writing parsers to handle them. (benefits include: lower overall machine cost, lower configuration cost not having to manage a SQLdb) Second how much of the data do you use at one time? -for example yes you make big pulls but in your calculations if you only need to access a small subset of that data then SQL may be a far superior solution to do what you want with the ability to add indexes and key stores. If you use most of your data in calculations then you can circle back to the text file use case.... as I think of more i will edit... 
I think we gave the site a Reddit hug of death, it's not loading for me.
I like SQLite a lot, because it doesn't require any server infrastructure (in contrast to MySQL) - however it really depends on the amount of data and how the data is going to be used. The size limit of SQLite databases is 140 Tb, maybe this is sufficient for your purpose? I have written 2 small SQLite tutorials for using it via Python's sqlite3 module if you want to take a look at it to decide whether you want to use it (alternatives might be pandas or hdf5). - [SQLite - Working with large data sets in Python effectively](http://sebastianraschka.com/Articles/sqlite3_database.html): This one is a brief overview with advantages and disadvantages, and a small speed comparison for generating and querying SQLite databases - [A thorough guide to SQLite database operations in Python](http://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html): This would be more like a syntax reference with examples that might be useful if you decide to use SQLite. 
Aren't there more free ways to learn python than to pay for it? The title is kind of sensational.
1. Download anaconda's Linux installer from http://continuum.io/downloads 2. $ bash &lt;downloaded.file&gt; 3. You are all set! Flask is already included. Install django with "pip install Django"
I don't know why you got downvoted...This is an excellent choice. I learned my starting python syntax this way, only to be able to move onto other parts of the language on my own.
It's likely that pygame is overwriting flux's permissions to change the color. You can test this by seeing if pygame's colors change when you have flux enabled vs. disabled. If they don't, it's probably a flux/pygame bug.
Try Real Python, second half of their first book useful skills training, second and just released third book will give you insight and medium range skills for Web developing with python. Html and css easy enough for you to work as a end freelance, it's frontend engineers job to make everything look pretty. 
I thought Udacity's CS101 course was a bit more comprehensive and focused on more fundamental concepts than the Coursera course, but the Coursera course was more fun since it focuses on making games. The Udacity course is also less stressful since you can complete it on your own time.
Sorry for the lag, but I think you have already noticed that I followed your suggestion :)
&gt;MySQL's optimizer is primitive, and so it doesn't work well for analysis queries on large volumes. so, I think that this statement has an implication that makes assumptions about the type of data that you are working with and could be very misleading. are you pulling this data into 40 tables each with their own distinct sets of indexes and depth that need to be join at multiple levels to make a single request for output? Because that is a bare-bones scenario that would make you need to worry about the optimizer. If you had 3 or 4 tables and you thoughtfully lay out indexes MySQL will preform just as good as PostgreSQL
only after rhel6 however 
In my experience you don't have to push MySQL nearly that hard to hit query planning problems. I'd say that 200 GB on a single huge server with a half-dozen tables in a simple star-schema and with typical BI queries can be a problem. And unlike simple transactional system - with analytics it's nice to have a lot of room for adaptability - whether that means the ability to scale up if you need to, or the ability to run complex queries that you didn't think you'd need initially. Complex queries in this case might just mean: * running common table expressions (CTEs) to break up a large complex query into more easily written, managed, and tested temp tables. Also great for calculating a median. * recursion for link analysis * star-joins * windowing (olap) functions And as far as performance goes, indexes aren't what you normally rely on for analytics. Normally you depend more on a smart optimizer, partitioning, parallelism, and materialized views (or standard summary tables). Neither MySQL or Postgres has much in the way of parallelism. But at least Postgres has the good optimizer &amp; materialized queries. The last place I was at kept trying to use MySQL for analytics. I don't think it ever got 1/10th the speed of DB2 against 1/40th the amount of data on the same hardware. And every query had to be painfully tuned.
When you say "the data accessed can contain over a TB of data." Does that mean you're querying a TB of data or you're pulling a TB of data? They're two very different beasts.
Look up the "wget" command. There's half your work done, right there.
I'm wondering this also.
Python is successful. Successful software is used in the enterprise. Enterprises move slowly (witness the number of machines still running XP). Ergo... Any new version of Python is going to have slow adoption rates. It's not a statement on the quality of Python 3.x.
&gt;So why shouldn't they give it a whack? Now I can't get this image out of my head.... http://tstotopix.files.wordpress.com/2014/04/whacking_loadingsplash.jpg 
That's no different than saying that XP is good enough that we'll never see any other version of Windows gain widespread adoption. 
Are you going to need all that data in memory at once? When we pull lots of rows from Cassandra, we basically build generators and iterate over sets, sum/aggregate and free. Works really well for us. 
&gt;That is not dead which can eternal lie Damn reference cycles! &gt; And with strange aeons even death may die." Or at least be garbage collected.
POOP?
What were you going to do with them?
Thanks for this comment, I haven't heard of Mayavi2 before (this also answers the question "why maplotlib") - looks really cool and I will give it a try!
&gt; finishing college... I would say I'm at advanced level... Stop. Right. There.
What do you mean? I'm no way and industry professional, but I know most of the stuff you would need to know to develop with Python.
Has Codecademy gotten better? Last time I used it I remember most of the tutorials being really poorly written but this was a while back and they only had Javascript tutorials.
Is there a question here? If this is an example of some cool code could you try reformatting so it shows up correctly and maybe include an explanation (preferably in english).
Seconding LPTHW. Sitting down and working your way through it is extremely productive.
Error establishing a database connection. Is this a trick?
There's not a single line of Fortran in numpy. Are you thinking of scipy, perhaps? But as far as I know, pypy won't be able to run the full scipy for a while. Scipy has Fortran, hand-written C, C++ dependencies, SWIG-generated wrappers and Cython code. It's an order of magnitude harder to support than numpy.
And the best part is that this does not conflict with your system python. Just change your PATH to not include the anaconda/bin/ directory, and you're back to using system python.
[dictionaries](https://docs.python.org/2/tutorial/datastructures.html#dictionaries)
That's for me to know, and you to find out. ;)
Definitely use the requests module before urlib2. It has a simpler interface and most notably follows redirects
http://www.phash.org/
Looks good, could see myself using it at work.
The main thing holding back python3 adoption is that many important libraries haven't been available for python3. Its not a matter of moving slowly. It's a matter of not being able to move at all. E.g. twisted is still not available for python3.
You might also want to give Invent Your Own Computer Games with Python a try. It's also a free book: http://inventwithpython.com
This is really cool, but I'm wondering if he meant to post to /r/civ
Web services. Distributing work among several clients.
No, not ruby.
There's a wide range of potential ways of handling that, in approximate order of ascending desperation: - Tell the user to file a bug report upstream and wait for upstream to act. - File a bug with upstream yourself and wait for upstream to act. - Implement the feature or fix yourself and (attempt to) contribute it upstream. - Implement the feature or fix yourself and maintain it as a local patch. - Modify your code to work around the library's bug, or implement the feature in such a way as to not require modifying the library. (These aren't necessarily always viable options, and even when they're viable they can result in some extremely ugly hacks.) - Replace the library with a different library that has all the functionality you require and is more receptive to feedback and/or has fewer bugs. - Write your own library with the desired functionality. 
Hi. I thought that in redis if you want to group values together you use a hash. Can you explain when you'd like to use a group of keys vs a hash and what the trade offs are ? Thanks!
Thanks a lot
No, it doesn't since its purpose is a bit different from Sphinx's. It just offers a really fast and convenient way to write up docs and that's it.
People will tell you to use what is newer because in a couple of years, it will get harder to find developers familiar with the Python 2 syntax. From a maintainability perspective, you should use Python 3 because when framework developers see coding for an old language as too much effort, it gets dropped. Most libraries that you've used with Python 2 now support Python 3 or have alternatives. Also, most documentation out there now has Python 3 code samples. Then again, I still have to perform maintenance for VB6 applications at work. I ported some of the VB6 applications, but there's still a lot more to be done and the firm doesn't want to pay to get it done so there will continue to be applications available on Python 2 that need changes and somebody has got to do it.
No matter what libraries you end up using, you need to treat them like you would any other tools: as useful devices that could potentially do some serious damage. You need to be wary of letting them get their hooks into your actual source code. A better idea is to write your own wrapper that encapsulates your external libraries and keeps them out of your source code. Your program never has to know what external libraries itâ€™s using; only what functionality your API provides.
&gt;Tell the user to file a bug report upstream and wait for upstream to act. &gt; File a bug with upstream yourself and wait for upstream to act. LOL Let's wait for Duke Nukem 5 while we are at it
I hear JavaScript is going to have Ruby-like syntax.
Knowing a language's syntax does not make an advanced developer. You can't on one hand say you are advanced skill-wise and on the other say you are at unpaid intern level.
That's what I did before I came to the USA. 
Is this all on the same lan or do you have a server on the internet?
&gt; * Implement the feature or fix yourself and (attempt to) contribute it upstream. &gt; * Implement the feature or fix yourself and maintain it as a local patch. I usually do #1 and until upstream releases a new version I do #2.
This is interesting. I just redesign my classes, such that all class instantiation and any code plumbing will reside in __init__.py (naturally). I will take this as a precautious
Either way really. It's a neat way to communicate between clients/servers. If you are going to put it on an internet facing server just make sure to treat all input as compromised until proven innocent. This is more of a general rule for anything on the internet though.
I ended up patching `walk_packages` in `pkgutil.py` to prevent scipy from breaking things because of whatever it was doing upon import. Not my favorite solution.
Sphinx uses reStructuredText, while MkDocs uses Markdown. I saw the presentation of its author at Write the Docs EU conference this week, and it was the main reason why he started this project. He prefers Markdown. For documenting a simple project, Markdown is enough. It doesn't extract docstrings from sources and it's out of the scope of the project. Think of MkDocs as "Sphinx with Markdown".
Only tangentially related to the article, but it mentions sys.exit() being called on an error condition. I think this is the absolute most annoying thing a library can do. Unless I'm calling a "clean up and shut down" function, libraries shouldn't be killing my interpreter. A few years ago I was working with the python Netflix bindings, and they had a condition where this happened. I filed a bug report, and eventually forked the library to make it act like a decent library. The original was provided by Netflix, so I was surprised that it didn't follow better development practices. 
I know, but I don't think that matters. `import` changes the state of your app, by design.
I'm sort of worried about that - the library gives warnings and doesn't really point the way to making it safe. Are there any resources for sanitizing rpc calls?
Inserting names into the namespace is fine, running code that can crash, throw errors, launch the nukes, or anything else is not. His point isn't about side effects in the haskell sense. 
I don't know actually. But consider what would happen if someone made requests several thousand times per minute or second. How would your application react? Could you do something to alleviate the situation? Perhaps with a queue of requests with a limit of how many simultaneous requests you allow. If there is more than x number in the queue, don't accept more requests. Perhaps something like that? Know about sql injection attacks and make sure not to be vulnerable. Don't send passwords and user data in plain text. 
Actually, it really was `raise SystemExit(...)` rather than `sys.exit()`. But I certainly believe that no library should do such a thing.
https://www.djangopackages.com/grids/g/ecommerce/
Oh come on, you must have something better. I don't have 2.3 installed to test, but this change was indicated in 2.4, 2.5 and 2.6. Python 2.4.6 (#1, Oct 11 2012, 23:28:12) [GCC 4.2.1 Compatible Apple Clang 4.1 ((tags/Apple/clang-421.11.66))] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; range(5.0) __main__:1: DeprecationWarning: integer argument expected, got float [0, 1, 2, 3, 4] 
I didn't know one should not do sys.exit on libraries... Good to know
It seems to me that any reasonable person would wrap any side-effecty code in an import in a try-except to allow for graceful failure. I routinely compile Cython code from the \__init__.py of a module but provide fallbacks if Cython isn't available or compilation fails for some other reason. Is this bad practice? Seems to me there's no real downsides as long as you are careful.
Well, I said I was being pedantic. I don't think importing a module should do those things (except perhaps display warnings - I think that's fine). But I think that if we're talking about best practices, importing modules in order to inspect them would not usually qualify.
The point is why. 
Useful exception: from __future__ import print_function
nice but civ 5 uses lua as scripting language contrary to civ4 (which uses python trough boost.python). they dropped it due to performance issues (see http://youtu.be/vSfIP_KO7MI?t=9m25s)
doesn't `sys.exit()` just raise `SystemExit()` anyway?
That doesn't have side-effects outside the module being imported, so it's fine. Under my classification, it does not have side-effects.
Isn't that kinda obvious? I mean, how is killing someone else's program the right thing to do?
In Python, `sys.exit` doesn't instantly kill your program, it just raises a `SystemExit` exception. You can handle that exception outside the library code in the normal way if you want to. It's important to allow for this if you have a top-level error handler that catches and logs all otherwise unhandled exceptions, or anything along those lines. Whether raising `SystemExit` is an appropriate behaviour for library code either is a different question, but it's certainly not the same situation as, say, a C library just quitting out without giving the calling code any say in the matter.
Can you isolate the VBA in an external script and call it from Python (`subprocess` module, perhaps)?
Awesome, hope it helps, even if just a little bit!
Also available at http://packaging.python.org now as well :)
Yes.
You think that's bad? The Gtk library will cause a SIG error terminating the program from the C side if it can't find the settings under the DBus path specified by your app when you create a GSettings object. It won't tell you there was an error fetching the settings, it just terminates the whole thing.
[PyQtGraph](http://www.pyqtgraph.org/) is based on Qt for the interface part, and is pretty fast for plotting. Depending on your plotting needs, there may be some limitations. Run the demos if you want to see what it can do.
You people have been programming in Python so long, you forgot what a segfault is. This isn't something intentional that they can avoid, like raising an exception, this is a legitimate bug in the code. It's going to always happen when you import C libraries that haven't been tested for millions of years. 
The problem with GTK (and related things) is that there are two official mutually incompatible versions of the bindings that can interfere with each other. I don't think it's too much to ask to detect if the other version has been already been imported and raise an ImportError.
No, that makes complete sense if it's a known issue. I'm just trying to make the point that a fatal error like a segfault is separate from the usual Python exception that you can handle, and they're guaranteed when developing in C. It's not necessarily something you can avoid in the same way that the article talks about side effects when importing modules.
&gt; its bad API design to use SystemExit certainly, but it's still rather trivial to catch.
yes, but why the F should you have to catch it when doing `import XYZ`?
Even so, it's bad library design. Do you agree?
&gt; but if you'll be working with a C library that has potential to segfault, wouldn't you want to know during the import rather than halfway through some important task? The answer to this question is actually not black and white. Sometimes a library that you include for purpose X imports a library for purpose Y that you actually do not need for your program. This help("modules") example is the most extreme case, but not the only case.
Thanks for responding! I wonder in what sense you're stuck on django 1.5? Is it that the main app you use at work is django 1.5 and unlikely to be upgraded? If so could you not just use django 1.7 for the purposes of following along with the book, and then switch to 1.5 when you work on your real project? as you correctly guess, it' is 99% the same...
Or worse, having to do: try: help('modules') except SystemExit: pass (And you can't catch a segfault, which I got when trying `help('modules')`.)
Catch 22 problem. The libraries didn't port because they said no one was using Python 3. Most important libraries are ported to Python3 by now: http://python3wos.appspot.com/ Twisted is going to end up making itself irrelevant. 
lol. you got me. at least it's free, right? 
i guess, some people do think tdd is a waste of time, so that's a valid reason to downvote. even if i think they're wrong.
I do agree. did you miss the certainly in my previous comment?
you shouldn't have to, however out here in the real world you sometimes need to.
One obvious comment is that you should be using [beautifulsoup](http://www.crummy.com/software/BeautifulSoup/) rather than regex. Parsing HTML via regex is a lesson in absolute horror. You never ever ever want to do this if you can at all avoid it.
Or, better, use the [imgur API](http://api.imgur.com/).
If you are already familiar with Python, and want to get it. I suggest to take "Design of Computer Programs" by Peter Norvig (!!!) on Udacity. The course is well design, it give good comprehension of how programs work and lots of tricks about Python.
Sometimes it's a choice between "do something at import time" or "deal with an endless flood of mailing list posts from stupid users who don't read the docs". So, yeah.
I was wondering why this link was purple, then remembered I was looking at doing this the other day. I ended up using the API to get a list of URLs, then used wget to get the list. I had a lot of struggle trying to get existing scripts to work. I wanted to get all of the wallpapers from [this huge dump](http://imgur.com/gallery/GV71l) in one shot. [Here's the script](https://gist.github.com/blha303/2d4edd8d4dde10a40642) and [here's the list of imgur album URLs from that gallery page](https://gist.github.com/blha303/5f1607332e473d934b46) It outputs to a file named wallpapers.txt, you can then feed this into wget with `wget -i wallpapers.txt`. 22.8GB, 50905 files.
In programming, a side-effect is anything other than a return value.
Thanks, awesome list of wallpapers. It seems someone made a torrent of it: http://www.reddit.com/r/pcmasterrace/comments/21xa6w/a_torrent_version_of_the_over_52000_wallpapers/ .
This thread has been linked to from elsewhere on reddit. - [/r/SubredditDrama] [from nerd.argument import slapfight: Minor drama in /r/python about what a side effect is.](http://np.reddit.com/r/SubredditDrama/comments/22axlm/from_nerdargument_import_slapfight_minor_drama_in/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
This would have come in handy with Unidan's April Fools post. :P
I think you're probably right. Always good to spread the word about the original coining of the phrase tho. in other news, how about [Cthulhutract](http://www.fredvanlente.com/cthulhutract/pages/)?
in functional programming maybe, elsewhere it's the desired effect vs. anything else that happens.
How do you pickle a dictionary of functions?
Why should your library decide its own importance within *my* application? So what if everything with say Netflix is totally broken, my application might also be playing Youtube videoes.
The PulseAudio library did a [silent system exit](http://ubuntuforums.org/showthread.php?t=612606) if it could not allocate memory. Useful! I mean, how are you going to play those mp3s without available memory?
Pyramid supports 3.
&gt; "OOP Concepts in Python 2.x - Part 1" - ...How comes that we can call door1.color... should be door1.colour
Did you use it for web services? How did you like it?
Question: What about classes that auto-register subclasses in some sort of repository or other data structure? Those class declarations have global side effects, but this is one of the commonest use cases for metaclasses. The easy way out is to always put all the subclasses in one module, but that's unrealistic in the general case.
And your comment helps how?
I wouldn't recommend it... In what situation do you find yourself needing this? I personally in the past have used a second dictionary lookup: op_codes = { 'op_add': lambda x, y: x + y, 'op_sub': lambda x, y: x - y, } table = { 'add': 'op_add', 'sub': 'op_sub', } This is an example and not what actually was used, but close enough to show what I mean. What I used it for was in a small library that could read various binary formats. I wanted to be able to specify the files format in another file that could be loaded on the fly. I could've of course made helper functions and had it load python files that could decode the files. But the plan was to later convert it to C/C++ and it all work there. The project was scrapped before it got to that point.
Rather than creating a wall of if-elif-else cases (~300) to set two functions, I predefine a dictionary as a class member and use the key to grab the functions I need to call. This is nice because it makes the dictionary 300 entries long and keeps the already complicated code manageable. I could delete the object at the end, but in the case where the code fails, it be nice to be able to pickle it and save it as it's a large amount of data. 
I came across this interesting example recently, where an import side-effect deadlocked the interpeter. If you use Gevent 1.0, and you import a module that causes, as a side-effect, the resolution of a domain name, you can deadlock: https://jira.mongodb.org/browse/PYTHON-607
something you may be interested, if you are thinking about using mysql you may as well consider mariadb as an option.
The problem in c is that you don't have exceptions and some people think its better to just print an error and give up in what they consider a likely unrecoverable situation(failing malloc).
Look up the "%" (modulo) operator
Are the functions generated at runtime? If not you can keep two look up tables. One that actually has the functions in it. Another that has the names of the functions and can be pickled/dumped to a file. I don't believe you can pickle functions because of the complexity involved. It would have to keep track of the namespaces, modules imported, classes... It'd be slower/harder than just rerunning the code.
What parts are you looking to use in python 3.4? What about http://autobahn.ws/. It is one of the few frameworks that make that make use of the new asyncio, which is what I see as the most exciting thing in Python 3.4. That been said there will probably be other frame works that start to use these new features. 
The modulo operator returns the remainder of a division. So in terms of words: for every number in the range 100 to 200, if the number divided by 7 has a remainder of zero than print the number.
If you can define what "is divisible by 7" means in plain language, you can write it into the for loop you wrote. That is: for each_number in range(100,200): if each_number "is divisible by 7": print each_number #or print(each_number) in Python 3.x Does that help? 
Yes, thanks, but I found what I was looking for. Thanks anyway!
Yes, thank you, this proved to be what I was missing, thanks
It isn't? Where would the right subreddit be? And thanks, I figured that out after some help, but thanks for reassuring it!
Apache + Postgres + Django 1.6 + Python 3.4
No problem, I'm glad you figured it out. /r/python generally isn't used for debugging or asking for help with code. /r/learnprogramming/ could be a good place to start. /r/homeworkhelp will get you good answers as well.
I have other platform reasons for using Apache, otherwise I would agree.
If I wasn't a pythonista, your submission title would seem really strange.
not using regex for html parsing is wise and useful information.
 $ python Python 2.7.5+ (default, Feb 27 2014, 19:37:08) [GCC 4.8.1] on linux2 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; n = 123 &gt;&gt;&gt; x = (n - n % 10) / 10 &gt;&gt;&gt; print x 12 &gt;&gt;&gt; Concerning the "correct" answer, it is 12: x = (n - n % 10) / 10 = (123 - 123 % 10) / 10 = (123 - 3) / 10 = 120 / 10 = 12. So it is not -12 like you mentioned, maybe you made a mistake when typing the equation. Concerning the syntax error, I am not able to reproduce it (as shown above). Please check that what gave you the error is what you entered here.
The extra parentheses have no effect at all: &gt;&gt;&gt; n = 123 &gt;&gt;&gt; (n - n % 10) / 10 12 &gt;&gt;&gt; ((n - n % 10) / 10) 12 The `%` operator has higher precedence than the `-` operator, so the only way it would make a difference is if you wrote: &gt;&gt;&gt; ((n - n) % 10) / 10 0 And I can't see how you arrive at -12 no matter how you place the parens, so there must be something else going on here than what you've explained. 
Alternative title to the post: "Another programmer discovers /r/gonewild"
From my experience this takes a very long time, and *some* images in the zip archive are sometimes outright missing or corrupted in some fashion.
This question is probably better suited for /r/learningpython but I'll give it a shot. Since you didn't post your syntax error I'm going to assume it looks something like this: &gt;&gt;&gt; print x File "&lt;stdin&gt;", line 1 print x ^ SyntaxError: invalid syntax If it does look like this then it's because you're using Python 3 where `print` is a function instead of a statement. As for why you're getting two different answers I can't say because there's no logical reason why you should and a simple test says the same thing. Is there something you're doing on your own host that's different from what you posted here? For reference, this is what I ran and in Python 2 and 3 which works as expected. &gt; python2 -c "print (120 - 120 % 10) / 10" 12 &gt; python2 -c "print ((120 - 120 % 10) / 10)" 12 &gt; python3 -c "print(((120 - 120 % 10) / 10))" 12.0 &gt; python3 -c "print((120 - 120 % 10) / 10)" 12.0
This works for me using Python 2.x. I get a syntax error if I try those lines with Python 3.x, that happens because print is a statement in Python 2.x, but is a function in Python 3, so you need parentheses. print(x)
Have my upvote, I can't agree more. As someone who went from regex, to lxml parsing to beautiful soup, mostly because I didn't know the library existed. I recently refactored an entire program because beautiful soup makes the code that much easier to read. 
 n = 123 a = ((n - n % 10) % 100) / 10 b = (n - n % 10) / 10 % 10 c = (n - n % 10) / 10 print a print b print c This is as close to the original program as I could get. I don't do version control with things this small. It's no longer throwing the error. The original error happened on line 7 and it pointed to the variable name. In [Codeskulptor](http://www.codeskulptor.org/) it gave me an invalid input on that same line. as for the answer being 12. . . I must have mad a mistake when doing it by hand. I took 123 away from 3 and ended up with -120. That's not how the equation is actually written so yeah. . . It's all working fine and dandy now though. &lt;sigh&gt; It's just like working with any other machine hiccup I guess. The minute you call a maintenance guy over, the damn thing works perfectly. 
The other option is to make a script that generates the lookup table and dumps it into a python file. That way you can load the python file with minimal performance loss, but you don't need to write out a ~300 entry dictionary that may be awkward or error prone to write out. For example: print("from functions_file import *\n") print("big_lookup_table = {") for a in 'ABCDEFG': for b in range(32): print(" ({a!r}, {b!r}): somefunction_{a}_{b2},".format( a=a, b=b, b2=b//4)) print(" }") which outputs something like: from functions_file import * big_lookup_table = { ('A', 0): somefunction_A_0, ('A', 1): somefunction_A_0, ('A', 2): somefunction_A_0, ('A', 3): somefunction_A_0, ... ('G', 28): somefunction_G_7, ('G', 29): somefunction_G_7, ('G', 30): somefunction_G_7, ('G', 31): somefunction_G_7, } you can then just run "`python make_big_lookup_table.py &gt; big_lookup_table.py`" to generate the required file.
Got a concrete example? I'm interested in it; perhaps something could be improved without import side-effects.
This past couple of weeks I've been writing code that actually does exactly that. Given that it is still all contained in the one area which I own, and that it doesn't cause any things to *break* (though it may be done in such a way that importing a thing twice does explode where it normally wouldn't) I don't consider that *terribly* bad, though it's more magic than I'd like. Extra tip: often (though not always) registration metaclasses can be replaced by looking at the subclasses of an objectâ€”`MyType.__subclasses__()` gives you all the direct subclasses (apply recursively to get all descendants).
Isn't nginx + gunicorn recommended setup?
Hey, I'm the guy that wrote this! Crazy to see it posted to reddit. To clear up a few things; this script was born of laziness, I needed a fast way of downloading an album before albums had the "Download" button. Originally it was all procedural and nasty, I recently refactored to be a class so it wasn't a total embarrassment to have as my most starred repo. If anyone is doing something "real" with Imgur, they should absolutely use the API. Setting up an API key et al was a hassle I couldn't be doing with just for a utility script, and the scraper way seemed the logical choice. The reason it uses regex is another laziness choice; I didn't want any dependencies, I just wanted a way of downloading the images. If this was anything other than a utility, then it wouldn't use regex to parse HTML. Callbacks; I couldn't think of a nicer way of doing it. Suggestions very welcome :-) And finally, if anyone from Imgur has a problem with the script, I'm happy to discuss it. I threw it up on GitHub mostly so I could share it between machines, but it seems other people found it useful too :) Thanks for the comments on this, I'm not usually a Python dev so advice is welcome :)
Nginx and memcached. You do need Nginx for load balancing between highly available servers, however, you probably don't need memcached until your scale is millions of hits a month, or hundreds per second, or your database is struggling, whichever is first. Though it can be used for distributed locking, there are better solutions. 
Hi, I wrote this script. Even worse than a JS dev, I'm a PHP coder by trade. I dabble in Python for fun/utility scripts. I'll get my coat. 
For just a style check: http://pep8online.com
Hi, this is my script/class thingie. When I wrote it, Imgur didn't have the ability to do this (and no download buttons on albums either) so this script was born from necessity. Annoyingly about two weeks after I wrote it, a download button appeared so it's utility lessened somewhat! But people keep starring it so I keep it up there. And sorry to hijack top comment, but I posted a response downwind answering some of the points raises in the comments :) http://www.reddit.com/r/Python/comments/22anly/python_scriptclass_to_download_an_entire_imgur/cglattv
Sigh. [Obligatory SO post about regexs and html and unspeakable evil](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454).
Requests is better than urllib2.
there is a helper libary on top of pyramid build by mozilla http://cornice.readthedocs.org/en/latest/ or simply look into docs http://docs.pylonsproject.org/en/latest/docs/pyramid.html there are examples and tutorials for using it ...
You can't pickle functions. See [the docs of the pickle module](https://docs.python.org/3.4/library/pickle.html#what-can-be-pickled-and-unpickled) for what types can be pickled. It does state that functions in certain cases *can* be pickled, but like classes, that will be done *by name reference* and never *by value*. This implies that &gt; the defining module must be importable in the unpickling environment, and the module must contain the named object, otherwise an exception will be raised. 
Check out [uWSGI](http://uwsgi-docs.readthedocs.org/en/latest/) too (in addition to Nginx and memcached/redis)
I have used Lighttpd in front of CherryPy for about a dozen web sites, including ones using SSL. Very easy to configure and reliable. 
For anyone confused about why you'd be running [the Fedora/RHEL python-based OS installation program](http://fedoraproject.org/wiki/Anaconda) multiple times, and what tarballs it might leave laying around, OP is apparently talking about [a module bundle and manager named Anaconda](https://store.continuum.io/cshop/anaconda/).
What goes in front of CherryPy? "She's my" (yes I have a warrant for that joke... badaboom!) 
Clearly you're spending too much time in the linux world and not enough time in the python/scientific computing world
Script author here; just to qualify the Python 2.6 version, I was simply using the Python on my system at the time, which was OS X Snow Leopard, therefore 2.6. No conscious decision to shun 3.x, if I did more Python work I'd happily update it to 3.x. Or you know, if anyone wants to submit a pull request... ;)
&gt;How do I choose between nginx, apache, etc? 1. Forget apache 2. Use nginx
gunicorn is very flexible in the implementation - it allows you to use many webserver implementation (eg: gunicorn-based) and it's pure python (works well with pypy) uwsgi is more conservative, being implemented in C - it only allows plain http and it own uwsgi protocol (a sort of fastcgi). But it's quite fast and it has a ridiculous amount of features and tuning options. Also, it has [support](http://uwsgi-docs.readthedocs.org/en/latest/PyPy.html) for pypy.
I'm gonna give it a try, I really love the concept :-) Will it have support for custom domains as a email server standalone? (Sorry for my probably bad English)
By whom? Django devs suggests apache, gunicorn or uwsgi. I prefer nginx+uwsgi, since both of them are quite flexible for my requirements.
why is this called orm, when its not doing any object relational mapping?
Let me rephrase my statement. &gt; Isn't nginx + **gunicorn** recommended setup? Most of the articles I read recommend nginx because you don't have extra overhead and configuring Apache is said to be cryptic as compared to more straightforward nginx's configuration. Then again, the perspective might be for someone learning his way vs. someone who knows his shit with server configuration. Edit: Bit more info.
I might rewrite although it still depends on how lazy I am :P
Why online?
This looks really interesting! 
&gt; You can handle that exception outside the library code in the normal way if you want to. Not always. For example `nose` will scan files and fail on those exceptions even if the file in question is totally unrelated to the tests. ~~I have a stand-alone client script that is supposed to run on a client and it uses pythondialog. Pythondialog throws a `ExecutableNotFound` if the `dialog` program isn't installed. Thing is I'm not testing the client script since testing dialogs is much more easy to do manually. Since the import throws an exception I cannot test the rest of the library without installing dialog, which is not supposed to be installed.~~ Edit: Just checked and pythondialog does not raise an Exception during import, it was my fault. A similar situation could however occur if an exception is raised during an import.
Do it in vim.sexy
As a beginner I like the convention that pythonistas use descriptive names when iterating something in like a for loop: for numlist in [[1,2,3],[4,5,6],[7,8,9]]: instead of for i in [[1,2,3],[4,5,6],[7,8,9]]: it would still work, but usually it is not done, but it seems to be done a lot in C and other languages.
yes, it will have support custom IMAP server, it will probably implement after the first version, so then you can use your own Postfix with Courier-Imap or other solutions 
Perfect :-) Right now I'm trying to install it, but my postgresql installation is wrong, and I have to reinstall again... So good work :-)
I suspect the syntax error came from the print x line, because he's using python 3 by accident.
I was thinking that you want your book to become the reference text for Django testing. As such, including the differences in a versioned style akin to the Django documentation would really assist people like me who are stuck in the past or are being thrown into the past maintaining older installations. I know the first response should be update for the security fixes etc. but before you can update you need to intergrate test cases to check for broken functionality. idk.. i don't seem to be getting my point across very well. The biggest example I have was the change from Django 1.3 to 1.4/5 where they introduced the Live Unit test server and enable you to use selenium. So you could produce your book so that it's versioned in the appropriate versions.
In 2.7 and 3.4 works perfectly. I think you are trying to execute it in python3 thinking that is 2.7, like @idlecore said. And in the math part: (n - n % 10) / 10 will ever be positive. Will execute first of all n%10 that will be between 0 and 9, then will be substracted from n (ever positive or 0 if n is lower than 10), and at the end, will be divided by 10. 
You're were probably wasting at least as much space with outdated packages which are no longer linked into an environment. Until recently, cleaning them was a bit of a mission, but now you can do: conda clean -p If your installation doesn't support the `-p` flag yet, it's time you: conda update conda
yes, I saw that, but it is outdated :) BTW. I chose this name for working version, maybe it will change 
I have a little (I hope) problem. I install all (autoprefixer and csso too), and run it perfectly. But if I try to access localhost:5000/ I get an error ('inbox' is not defined), and if I try to auth in localhost:5000/auth google throw me an error (Error: invalid client. Bad request)
Actually not, since Anaconda (the installer) is written in Python. 
Whichever webserver you know best.
Why did you choose Postgres over say, MySQL or Maria? 
&gt; Extra tip: often (though not always) registration metaclasses can be replaced by looking at the subclasses of an objectâ€”`MyType.__subclasses__()` gives you all the direct subclasses (apply recursively to get all descendants). That's a good idea in the general case, but if you want to allow a potentially unbounded number of subclasses (i.e. if the client of your API decides to subclass `MyType` a lot), that recursive operation is going to get expensive.
Normally I downvote all puns, but this... I'll allow. (It's just too perfect to sully). 
I just like PostgreSQL :) and its power I use hstore and array data types in Mailr, and will probably use full text search.
Ahhh! I didn't know that it was a project in Google Developer. Right now I have it working (synchronizing right now).
Maybe you should talk to the guys over at [mailpile](https://www.mailpile.is/) They are trying to build an open source gmail replacement as well and they already have the search down. Perhaps you could work together with them?
We run HAProxy, which load balances among many nginx servers that have uwsgi workers running. If you're using nginx, you'll likely connect it to CherryPy using uwsgi. If you have a per-CherryPy cache currently, you *must* figure out a way to share that state across multiple processes, as uwsgi will restart your CherryPy server every so often. If this data needs to stick around, consider redis; if it's volatile data, consider memcache.
You don't have to use another server at all. CherryPy is a fully formed web server. You just configure it to sit on port 80 and you're done! However, I wouldn't do it because it's young and I'd rather expose only a tried and true web server to the world. For this, I use Apache with mod_proxy and my CherryPy server running behind it to handle only certain requests (lots of stuff on my personal server was developed in PHP, but I'm gradually weaning myself off because Python is a way better language to develop with^1). For example, I developed a Python-based scraper for my Reddit account. It stores my posts in an SQlite database. If I go to mywebsite.com/health it loads up some health PHP stuff I developed. However, mywebsite.com/reddit_stats/foo will have Apache request the foo page from my reddit_stats-running CherryPy code that is sitting there running all the time on the server, accepting no requests except those on localhost:8080 ^1 I can't believe that this long on I still have to do this with PHP: $foo = function_that_returns_array(); $foo = $foo[$bar]; rather than this like I can do in Python: foo = function_that_returns_array()[bar] That alone is enough to make me hate PHP. I just used it for so long because it was so easy to use when working on websites.
What did the software do to the creator to have a name with the "let's take the last vowel to become cool" mantra? It's innocent!
I saw mailpile of course and I don't like their way, sorry :)
The help for this option states "remove unused cached packages. Warning: this does not check for soft-linked packages." What are soft-linked packages? Is there a risk in removing them?
But put Varnish on port 80 in front of it.
I'm having difficulty understanding what value uWSGI adds if nginx already handles the load balancing. Also, would you use a single uWSGI instance or multiple (maybe one per CherryPy instance)?
This is correct unless you're running some major enterprise shit **or** you're trying to learn Apache for employment prospects. I run nginx on my home server that only allows LAN connections and I run Apache on my publicly-facing server.
Thanks all for the helpful feedback! After some additional research, it looks like I'll be trying out nginx and memcached to start with.
The fact that you're saying 'for girls' is already going wrong. It should be exactly the same as advertising programming for boys. Its programming.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Audio programming language**](http://en.wikipedia.org/wiki/Audio%20programming%20language): [](#sfw) --- &gt; &gt;An __audio programming language__ is a [programming language](http://en.wikipedia.org/wiki/Programming_language) specifically optimized for [sound](http://en.wikipedia.org/wiki/Sound) and [music](http://en.wikipedia.org/wiki/Music) production or [sound synthesis](http://en.wikipedia.org/wiki/Sound_synthesis). Some of the languages below are optimized more for music composition, and some are optimized more for [synthesis](http://en.wikipedia.org/wiki/Sound_synthesis). For details, see the [comparison of audio synthesis environments](http://en.wikipedia.org/wiki/Comparison_of_audio_synthesis_environments). &gt; &gt;* [abc](http://en.wikipedia.org/wiki/Abc_notation), a language for notating music using the ASCII character set &gt;* Advanced Music Production Language and Environment (AMPLE), a Forth-like music programming language with concurrency &gt;* [ChucK](http://en.wikipedia.org/wiki/ChucK), strongly timed, concurrent, and on-the-fly audio programming language &gt;* Cmix, [Real-time Cmix](http://en.wikipedia.org/wiki/Real-time_Cmix), a [MUSIC-N](http://en.wikipedia.org/wiki/MUSIC-N) synthesis language somewhat similar to Csound &gt;* [CMusic](http://en.wikipedia.org/wiki/CMusic) &gt;* [Common Lisp Music](http://en.wikipedia.org/wiki/Common_Lisp_Music) (CLM), a music synthesis and signal processing package in the Music V family &gt;* [Csound](http://en.wikipedia.org/wiki/Csound), a [MUSIC-N](http://en.wikipedia.org/wiki/MUSIC-N) synthesis language released under the [LGPL](http://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License) with many available [unit generators](http://en.wikipedia.org/wiki/Unit_generator) &gt;* [FAUST](http://en.wikipedia.org/wiki/FAUST_(programming_language\)) (Functional Audio Stream ), a functional compiled language for efficient real-time audio signal processing &gt;* Haskore &gt;* [Hierarchical Music Specification Language](http://en.wikipedia.org/wiki/Hierarchical_Music_Specification_Language) (HMSL), optimized more for music than synthesis, developed in the 1980s in [Forth](http://en.wikipedia.org/wiki/Forth_(programming_language\)) &gt;* [Impromptu](http://en.wikipedia.org/wiki/Impromptu_(programming_environment\)), a [Scheme](http://en.wikipedia.org/wiki/Scheme_(programming_language\)) language environment for [Mac OS X](http://en.wikipedia.org/wiki/Mac_OS_X) capable of sound and video synthesis, algorithmic composition, and 2D and 3D graphics programming &gt;* jMax, [Java](http://en.wikipedia.org/wiki/Java_(programming_language\))-based MAX clone &gt;* [jMusic](http://en.wikipedia.org/wiki/JMusic) &gt;* [JSyn](http://en.wikipedia.org/wiki/JSyn) &gt;* [Liquidsoap](http://en.wikipedia.org/wiki/Liquidsoap) [(http://savonet.sourceforge.net/) &gt;* Loco - designed to be for sound what [Logo](http://en.wikipedia.org/wiki/Logo_(programming_language\)) is for graphics [(http://www.nici.kun.nl/mmm/papers/dh-88-b.html) &gt;* [Max/MSP](http://en.wikipedia.org/wiki/Max/MSP) The "lingua franca" for developing interactive music performance software &gt;* [Music Macro Language](http://en.wikipedia.org/wiki/Music_Macro_Language) (MML), often used to produce [chiptune](http://en.wikipedia.org/wiki/Chiptune) music in Japan &gt;* [MUSIC-N](http://en.wikipedia.org/wiki/MUSIC-N), includes versions I, II, III, IV, IV-B, IV-BF, V, 11, and 360 &gt;* Nsound [(http://nsound.sourceforge.net), [C++](http://en.wikipedia.org/wiki/C%2B%2B) API for sound synthesis &gt;* [Nyquist](http://en.wikipedia.org/wiki/Nyquist_(programming_language\)) &gt;* [OpenMusic](http://en.wikipedia.org/wiki/OpenMusic) &gt;* PatchWork &gt;* [Pure Data](http://en.wikipedia.org/wiki/Pure_Data) &gt;* PWGL &gt;* Q-Audio [(http://q-lang.sourceforge.net/) &gt;* Strasheela [(http://strasheela.sourceforge.net/) &gt;* [Structured Audio Orchestra Language](http://en.wikipedia.org/wiki/Structured_Audio_Orchestra_Language) (SAOL), part of the [MPEG-4 Structured Audio](http://en.wikipedia.org/wiki/MPEG-4_Structured_Audio) standard &gt;* [SuperCollider](http://en.wikipedia.org/wiki/SuperCollider) &gt;* [SynthEdit](http://en.wikipedia.org/wiki/SynthEdit) [(http://www.synthedit.com/) &gt;* [Usine](http://en.wikipedia.org/wiki/Usine) [(http://www.sensomusic.com/) &gt;* [Vvvv](http://en.wikipedia.org/wiki/Vvvv) [(http://vvvv.org/) &gt; &gt; --- ^Interesting: [^Comparison ^of ^audio ^synthesis ^environments](http://en.wikipedia.org/wiki/Comparison_of_audio_synthesis_environments) ^| [^SuperCollider](http://en.wikipedia.org/wiki/SuperCollider) ^| [^Chiptune](http://en.wikipedia.org/wiki/Chiptune) ^| [^ChucK](http://en.wikipedia.org/wiki/ChucK) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cglm3v8) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cglm3v8)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I want conversations which are really like gmail, gmail has the best implementation of them as for me. And I tried to install and tried to use mailpile a couple months ago and I didn't like the stuff around separated fetching emails, so I started my implementation from IMAP protocol (reading it as "for easy install"). And Mailpile isn't still ready for using. They try to implement detecting and folding quotes on frontend %). And I want to get a usable version as soon as possible I really want to write less code for this stuff: Mailr $ cloc mailr ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- Python 10 296 43 1397 LESS 2 16 20 338 Javascript 1 23 2 220 CSS 2 1 5 43 ------------------------------------------------------------------------------- SUM: 15 336 70 1998 ------------------------------------------------------------------------------- Mailpile $ cloc mailpile static ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- Python 55 2768 1991 13116 LESS 26 1017 240 5216 Javascript 22 782 357 2897 HTML 40 259 126 2069 CSS 3 28 18 51 ------------------------------------------------------------------------------- SUM: 146 4854 2732 23349 -------------------------------------------------------------------------------
In mean time I found this: http://openhardwaremonitor.org Open sourced, and it works quite well. Does anyone can look into the source code and see how it's done?
I would suggest scratch, or smallbasic for windows. Yes I know it's not python but the programs are easy to make in both "languages" and very visual.
No comments yet, so I'll offer one with hesitation. I'm guessing your best bet is going to be using windll, which is available through ctypes.wintypes https://docs.python.org/2/library/ctypes.html Then make use of Windows DLLs to get the info you want.
Fine. But this day only high school girls will attend our department.
Personally I like the default Reddit theme. One thing that would help is subtle code highlighting, though.
The problem is that girls and boys *are* different, and a male-dominated group underlying the process will bias it towards male-oriented ideas.
Basic programming is based around maths and media players and little basic games. They're pretty genderless.
There's obviously something gendered going on if the male-female ratio is so broken. I'm not saying it's due to any one thing, but considering the demographics isn't the *wrong* thing to do.
Explain to them what they would not have without programmers. If they realized how prevailent the field has become, they might find it more important. I'm reminded of a [Hey Dude](http://en.wikipedia.org/wiki/Hey_Dude) episode I watched when I was a child where one of the characters was not allowed to interact with anything Native Americans had a hand in for a week. The episode stuck with me all of these years because you can do it with other groupings and inventions as thought experiments and really gain perspective on things. Anyway, walk through a hypothetical day and explain each time they probably interacted with some code. You only have 20 minutes? This is simply wow factor and full of failure if you code something. You have to make them know that programming isn't going away. "You wake up, and Oh? How did you wake up? Did you use an alarm? Well, someone programmed that device to allow you to wake up. Not a deep sleeper huh? How did you get to school? Your car contains multiple computers and sensors these days and people had to program that software. Are you texting your friends during my presentation? Well, programmers made that possible. Etc etc...." I would even go so far as to make them drop their cell phones in a bag at the front of the class for the duration. But that's probably against the rules or creates some liabilities or whatever. Anyway, please don't show them code. It's not smart.
Good luck - I really like conversation view, and I'd love to see an open source implementation of it. If you haven't already seen it, you should also take a look at Geary. It's desktop based rather than web based, but they're also doing a conversation based UI that might have some good ideas in.
This is very nice. Can you also add support for using templates? Also, generating the accompanying .travis.yaml would be very useful.
At PyconUK last year there was an educational track - on the Sunday a bunch of volunteer kids (split about 50:50 boys and girls I think) spent the day programming Minecraft on Raspberry PIs through the [python API](http://www.piprogramming.org/main/?page_id=261). And playing with a programmable quadricopter. There are several videos on youtube (search for pythonuk 2013 minecraft). Everyone had a lot of fun, regardless of gender or age. The creator of minecraft is a big fan of what the Pi is trying to achieve, and has made it [freely available for the Raspberry Pi](http://pi.minecraft.net/).
How can you be a programmer without code? They are going to have to see it at some point. The entire point of programming *anything* is writing out code. The trick is to start with simple code that explains one concept per sample. 
It is a 20 minute presentation....
Stick with your lesson plan as you described it. Sounds simple, relevant, and covers the basics. Start with a short description (one paragraph?) of what programming is, how it is useful, and how sweet of a job it can be. You could show your command line scripts at the end, as an example of something you created. Don't suggest Justin Bieber for the background wallpapers though. :)
Good question; I've also wondered what they mean. I'm assuming that by "soft-linked" they mean "not hard linked", i.e. symlinked. (Though that would be a non-standard use of terminology.) When and why would conda create symlinked packages? I'm guessing when you create an environment on a different filesystem from the one that contains your packages. Note: These are all assumptions and guesswork on my part. One could probably find the truth of the matter by spending a few minutes reading the source.
 So what? It doesn't have to be complicated code. If 3rd graders can learn Logo graphics, high school girls can learn it in 20 minutes. One of the biggest mistakes you can make in teaching is assuming your student is a total idiot. Give people credit for exercising their minds, and present an interesting challenge. 
I really hope it doesn't have to come to setting Bieber wallpapers. That feels like avoiding the real challenge by luring them in with cheap trinkets. And in any case, there are bound to be a hundred apps that will do the same thing without any effort, so it's not going to make them care about programming. But I don't know what will work. I think to become keen on programming, you have to want to build things. Not just because you want to use those things - that helps, but for the first year or so, there's not much you can build that's not already available in a much nicer form. You have to enjoy the process of building things and making them work in itself. How you instil that, I have no idea.
http://freecode.com/projects/libsmbios
Amazon Web Services will let you run a free micro Linux instance for 1 year. Having knowledge of AWS is a good real-world skill to have also.
Are the most recent numbers at the bottom, the top, interspersed? What's the file size? How important is runtime? Is there a time stamp associated with the numbers that need to be parsed in order to figure out how recent the data is? It sounds like this question is better left for /r/learnpython because it sounds pretty simple unless you throw 100 constraints on it.
Videogames, which is where a lot of people become interested in computers nowadays, are incredibly misogynist. I don't think patronising or belittling the girls any more by giving them a bright pink presentation on how to program is going to help. Whatever you class as 'girly' has to go out of the window when you're going for equal representation in something that isn't tied to gender like this. The best thing to do is have other, strong female role models presenting. The presentation itself is almost irrelevant. They just need to see others that have been successful doing it.
look at https://code.google.com/p/psutil/ EDIT: realizing now that glanges uses psutil and was mentioned in a previous answer.
I have anaconda installed but do not really use it so I found title funny until I looked in and notice it was an update. Thank You!
Could be a local.
Are you writing in binary? If so you can just seek to the correct number of bytes. So let's say each number is a 32-bit integer (4 bytes). You want the last 7 entries so 7 * 4 = 28 bytes. So you "seek" to ``file_size - 28`` bytes and 28 bytes. https://docs.python.org/2/library/stdtypes.html#file.seek
The assertion that a talk aimed at high school girls is patronising or belittling and "bright pink" is incredibly misguided. Further, saying "you need strong female role-models" is incredibly unhelpful if the presenters are already set (and a presentation on successful females *would* be patronising). A discussion on what topics women would be more interested in is not patronising or belittling. It is just a simple understanding that men and women, on average, have different tastes.
there are plans to do this better in tox itself
Good on you for taking this on. Did you see the article the other day announcing that MySQL increased its performance by a factor (IIRC). They optimised the latest release for use with multicore processors and with came a huge boost to performance. What I'm saying is that it would be advantageous to keep the possibility for MySQL open as I think it's going to dominate the web for a while longer. Edit: I would get the article for you but I'm on my phone. 
 itertools.product(a(), b(5, 10), b(start=10, end=15))
You should take a look at [edit distances](http://en.m.wikipedia.org/wiki/Levenstein_distance). I think those will do what you want.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Levenstein distance**](http://en.wikipedia.org/wiki/Levenstein%20distance): [](#sfw) --- &gt;In [computer science](http://en.wikipedia.org/wiki/Computer_science), __edit distance__ is a way of quantifying how dissimilar two [strings](http://en.wikipedia.org/wiki/String_(computing\)) (e.g., words) are to one another by counting the minimum number of operations required to transform one string into the other. Edit distances find applications in [natural language processing](http://en.wikipedia.org/wiki/Natural_language_processing), where automatic [spelling correction](http://en.wikipedia.org/wiki/Spell_checker) can determine candidate corrections for a misspelled word by selecting words from a dictionary that have a low distance to the word in question. In [bioinformatics](http://en.wikipedia.org/wiki/Bioinformatics), it can be used to quantify the similarity of [macromolecules](http://en.wikipedia.org/wiki/Macromolecule) such as [DNA](http://en.wikipedia.org/wiki/DNA), which can be viewed as strings of the letters A, C, G and T. &gt; --- ^Interesting: [^Edit ^distance](http://en.wikipedia.org/wiki/Edit_distance) ^| [^Levenstein](http://en.wikipedia.org/wiki/Levenstein) ^| [^Quantitative ^comparative ^linguistics](http://en.wikipedia.org/wiki/Quantitative_comparative_linguistics) ^| [^Vladimir ^Levenshtein](http://en.wikipedia.org/wiki/Vladimir_Levenshtein) ^| [^American ^Pie ^\(film)](http://en.wikipedia.org/wiki/American_Pie_\(film\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cglrwza) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cglrwza)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Edit distances were mentioned, but I think you may also benefit from looking up the "longest common subsequence" problem. [Here's](http://rosettacode.org/wiki/Longest_common_subsequence#Python) the page on Rosetta Code for it.
Try the open source of agrep: TRE-agrep. Here's their python example to the library: https://github.com/laurikari/tre/blob/master/python/example.py
Sounds like quite a large setup you have. Thanks for the advice!
Thanks for your responses guys! I've got it to work on the AWS micro linux instance.
Ha, screw that. All my modules will now make syscalls and change the state of the system kernel in random and unpredictable ways. Ah hail inappropriate use of ctypes.
Have you looked at a free OpenShift account? https://www.openshift.com
You probably want a wildcard subdomain configured on nginx to redirect to a path inside your app, then just use that path value
I'm not sure how it's misguided, since you give no context for your explanation. Its quite common for institutions to make something 'girly' in the hopes it will appeal. Look at that whole bic pen debacle a few months ago. I didn't realise the presenters were set; I thought OP had just been asked to organise something. The suggestion was therefore to bring in some of the few female students/ teachers, or external female speakers, to promote it.
&gt; I'm not sure how it's misguided, since you give no context for your explanation. Its quite common for institutions to make something 'girly' in the hopes it will appeal. That's a claim that it's possible to do badly. There are many examples of women-oriented events that are not deemed patronising. Fair enough about the second part, though.
I think the library fuzzywuzzy has everything you're looking for: https://github.com/seatgeek/fuzzywuzzy
In other word, this is not a specific Python case, right? Would love to have a python package/module for this!
unless things have changed nginx talks to uswsgi which will talk to your wsgi app. nginx can not talk to your wsgi app directly. I'm sure someone will correct this, but as of november last year this was the case. 
Do you specifically want to use Python for this, or are you okay with alternative methods? If you're just looking to automate installs I think you'd be better off with something simpler. If your OS is UNIX-based, you can write a shell script (this shouldn't be hard at all since it'll basically be a string of commands for your package manager). If you're using Windows, you can use Chocolatey. There's also a very cool tool called Boxstarter that works with Chocolatey to speed things up. [Here's a short script that I wrote](https://gist.github.com/MarkTee/9824453). All I need to do is copy that first command into a command prompt and everything is done automatically; I don't even need to download anything!
My understanding of this is that most (all?) python web frameworks are just WSGI applications so they accept any traffic that gets directed to them. I found this stackoverflow question/answer talking about subdomains with the Pyramid web framework: http://stackoverflow.com/questions/7607807/multiple-domains-and-subdomains-on-a-single-pyramid-instance
Almost always; it depends on whether the package maintainers keep things up to date. As long as you're not using really obscure software you shouldn't have any problems, and even then most Windows programs that I know of have autoupdate built-in. Edit: If you want to update software that's already been installed, you won't even need the script; I think you should be able to open a command prompt and run *cup all* to update everything.
Super cool
This is going to put off most of them. Big "who cares" factor. Instead, show the awesomeness of some of the "girls" of the history of computing: Ada Lovelace, Grace Hopper, Marissa Mayer. That order. Then try to connect *something* relevant to them to some small bit of Python code or something like that, and show how this is a wide field that is really cool and there is so much creative potential for things one can do. I'd suggest whipping up a little blog with Flask or something, sort of "right before their eyes", to show that one is only a few steps from start to social networking possibilities. I'm spitballing here, but somehow this feels better than turtle graphics, to be frank.
Those outdated packages were cleaned where I run "conda clean -t", as far as I understand.
How can I contribute to your project?
glances gets its data from a library called psutil
An excellent resource I did not even know about. Thank you kind sir. 
Thank you. I am reading now. 
Thank you. That looks very promising.
Thank you, I am getting it now. 
yes you are, and its a good point. the only thing I can think of is to set a boundary. Matching a single letter is probably so common that the result is not interesting. This was the background for thinking about having a metric returned that I could use to judge the value of a result. 
Round your X-axis labels so that there are fewer of them farther apart. Then they won't run into each other and will look reasonable. You can also use the pipe character for hatch-marks.
 â†‘ â†‘ â†‘ â†‘ â†‘ o t t f f n w h o i e o r u v e r e e
Good call on the pipe. That would make it much prettier and clearer where the label would be referencing.
[Pyganim](http://inventwithpython.com/pyganim/) might be helpful. If nothing else, it may give you hints for writing your own.
yeah that occured to me too, but â†‘ â†‘ â†‘ 9 1 1 . . . 8 2 5 e e e 1 2 2 just doesn't read prettily ninja edit: because clearly I'm going for pretty, lol
The name made me LOL.
It's not really about need. If i were to do it the right way, I'd be figuring out how I broke my matplotlib. This is more for fun, and it turned out pretty enough I thought I'd share :) That aside, do you know if plotly plays nicely with pycharm? That the one thing that I really hate about pycharm: it doesn't play nicely with matplotlib. And plotly DOES look nice.
I forget where I read this, but it sums up my experience with interacting with MS Office via COM... "working with COM is like trying to rebuild a car engine through the exhaust pipe" 
What do you mean when you keep saying 'play nice with' matplotlib? What has to play nice? Pycharm is just the authoring tool. If you want to write the code and see the plots all in one place use a notebook that's what they are for.
Cool. I wouldn't use this since discovering the yhat ggplot port though. I mean when would I need to graph something and not have a gui?
I just found [iGraph](http://igraph.sourceforge.net/screenshots.html) and that seems like it has great potential. Or perhaps [Bokeh](http://bokeh.pydata.org/), which seems a bit prettier. Sorry if the originally post turns out to be a premature in my efforts â€” I thought it would be good to get some insight from people who know the field. 
Pycharm isn't just the authoring tool. It's a combination between that and all the nice interactive stuff that comes with a modern IDE. However, using the command line/debugger withing pycharm, matplotlib just makes it all hang: http://youtrack.jetbrains.com/issue/PY-7029 http://youtrack.jetbrains.com/issue/PY-12096 And it doesn't look like jetbrains has any plans for fixing it. That's what I meant by 'play nicely.' Definitely not an insurmountable issue, it just means that, as far as plotting is concerned, I only use the IDE as an authoring tool and plot in a notebook, like you said.
No, they're not. * `clean -t` removes any unextracted tarballs * `clean -p` removes any extracted packages that are not currently linked into an environment
It's for when you break your favorite GUI library and feel like doing something weird instead of fixing it! Or, as the name implies, when you feel too cool for a gui. This is like vinyl, man.
&gt; itertools.product(a(), b(5, 10), b(start=10, end=15)) i definitely missed that :) thanks
I'm interested in meeting up. I'm hacking PyCon so can't really identify myself. ;)
Thank you! I just fixed it.
Notâ€¦ really. I mean, whenever conda downloads a package it also extracts it into `$CONDA_BASE/pkgs`, so even if you remove the tarballs those extracted packages remain in place (unless you clear them out explicitly with `clean -p`). On the one hand, I think it's good that conda doesn't auto-clean something I may have spent a fair bit of bandwidth downloading. On the other hand, /u/rhiever has a point in that it seems keeping the tarballs is quite redundant.
That alone does not solve much since most of the things escape via frames. You need something for frames (a.la pypy's virtualizables), which is quite hard.
Diving into [PEP 333](http://legacy.python.org/dev/peps/pep-0333/#url-reconstruction) (WSGI) in the Url reconstruction section, looks like `environ['HTTP_HOST']` will get you the whole domain including the subdomain, domain, TLD, and port (e.g. `subdomain.example.com:80`). If `HTTP_HOST` isn't set then you can fall back to `SERVER_NAME`.
I always appreciate a good command line tool. Nice work!
It depends on what you can do :)
you can use your own template with --template option and generate a default template using `tox-matrix default`
You know about LastGraph, right? http://lastgraph.aeracode.org/
I kinda stuck here.. How do you instantiate a COM object with comtypes? I got the feeling that I can't easily do obj = INetCfg(), e.g. I must call comtypes.client.CreateObject('...'), right? But how do I know what string to supply there?
Does it do 3d plots ?
Can ploy.ly print out through tmux?
And I run nginx on my publicly facing AWS cluster which sees ~52TB a month of traffic. 
One possible reason: MariaDB and MySQL have nothing on Postgres. 
difflib is in the standard libr ry and has a SequenceMatcher you can use like this &gt;&gt;&gt; import difflib &gt;&gt;&gt; difflib.SequenceMatcher(None, 'ThisIsAPrettyLongSingleWord', ' GirlWasPrettySkinny').ratio() 0.46808510638297873 &gt;&gt;&gt; difflib.SequenceMatcher(None, 'ThisIsAPrettySkinnyGirl', ' GirlWasPrettySkinny').ratio() 0.6511627906976745
In my eyes that doesn't improve readability. Am I wrong?
I think I get it. Maybe if I'd started thinking about that right from the beginning, then I could have tagged old commits each time I upgraded versions, and provide parallel drafts for each django version... it would be an awful lot of work to go through and maintain the old ones, each time i made a change to the new one though. Ultimately, the book's not meant to be documentation, it's not really a reference book. Its main objective is to be a guide to learning a methodology, that happens to use a particular tool and a particular version of that tool. What I hope people will get from it is "this is how I do TDD for web development", not so much "this is how I do testing with django version X"... 
Did you check if the name was taken? http://mailr.org/
Yep, just found it. CreateObject('{5B035261-40F9-11D1-AAEC-00805FC1270E}') I looked at the code in [this codeproject article](http://www.codeproject.com/Articles/29700/AdapterList). Still have to instantiate all of other object there. COM got me headache today...
I don't exactly know what quite entails a programming competency test, having never taken one, but since it's a pen-and-paper test, I'm assuming you are given a sequence of commands and asked various questions about it like, what will it return, what is the current state of the variable(s), etc. For example, after I type these commands: def f(n): print(2*n) a=f(8) in the interactive interpreter, what is the output and what is the value of variable `a` now.
For algorithmic problems there is always [Project Euler](https://projecteuler.net/). It's not designed for any specific language but there are tons of [sample solutions](https://wiki.python.org/moin/ProblemSets/Project%20Euler%20Solutions) (at least for the first ~50 problems) on the net for almost any language.
Sorry be this direct, but the way you state your question suggests a very elemental lack in understanding of the required concepts. To achieve what you ask you need at least a rough understanding of DNS, web servers and Python (web-)frameworks.
No problem @Ulope I will try have a better understanding on this matter. 
That's fair enough, and you do seem to understand what I was trying to say. I was of the opinion that this was to become a testing reference, akin to K&amp;R's C bible
You could try reading [Structure and Interpretation of Computer Programs](https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs). I went through writing my solutions with a pen and paper myself. It's in Lisp so I'd recommend writing your solutions in Lisp and Python side by side (it'll teach you).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Structure and Interpretation of Computer Programs**](http://en.wikipedia.org/wiki/Structure%20and%20Interpretation%20of%20Computer%20Programs): [](#sfw) --- &gt;___Structure and Interpretation of Computer Programs___ (___SICP___) is a textbook aiming to teach the principles of computer programming, such as [abstraction](http://en.wikipedia.org/wiki/Abstraction_(computer_science\)) in programming, [metalinguistic abstraction](http://en.wikipedia.org/wiki/Metalinguistic_abstraction), [recursion](http://en.wikipedia.org/wiki/Recursion), [interpreters](http://en.wikipedia.org/wiki/Interpreter_(computing\)), and [modular programming](http://en.wikipedia.org/wiki/Modular_programming). It is widely considered a classic text in [computer science](http://en.wikipedia.org/wiki/Computer_science), and is colloquially known as the __wizard book__, due to the wizard on the jacket. It was first published in 1984 by [MIT Press](http://en.wikipedia.org/wiki/MIT_Press) and written by [Massachusetts Institute of Technology](http://en.wikipedia.org/wiki/Massachusetts_Institute_of_Technology) (MIT) professors [Harold Abelson](http://en.wikipedia.org/wiki/Harold_Abelson) and [Gerald Jay Sussman](http://en.wikipedia.org/wiki/Gerald_Jay_Sussman), with Julie Sussman. It was formerly used as the textbook of MIT introductory programming class and at other schools. Before SICP, the introductory courses were almost always filled with learning the details of some programming language, while SICP focuses on finding general patterns from specific problems and building software tools that embody each pattern. &gt;==== &gt;[**Image**](http://i.imgur.com/egBEFCx.jpg) [^(i)](http://en.wikipedia.org/wiki/File:SICP_cover.jpg) --- ^Interesting: [^Scheme ^\(programming ^language)](http://en.wikipedia.org/wiki/Scheme_\(programming_language\)) ^| [^Gerald ^Jay ^Sussman](http://en.wikipedia.org/wiki/Gerald_Jay_Sussman) ^| [^Computer ^science](http://en.wikipedia.org/wiki/Computer_science) ^| [^How ^to ^Design ^Programs](http://en.wikipedia.org/wiki/How_to_Design_Programs) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgm64fw) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgm64fw)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Great work! Now I have to find a way to fit this into a Raspberry Pi project. I'm sure my image processing stuff could do with some plotting...
I haven't heard of it, but it looks great! So it seems like an old project that doesn't work anymore. But, much more than that as it's all open source. So this will be a great learning point. Thanks!
Alright, any offline option? Online was prefered since I use 3.4 and not sure about compatibility. Also don't want to download something that i'll use once or twice
If you want the command-line debugger, and the Pycharm one is acting a fool, I suggest using IPython with the %pdb magic.
yeah that is the consensus. and I avoid regex's like the plague when I can. However, I would be interested in an explanation that considers the context of this script that this person wrote that doesnt sound like bike shedding. regex requires no extra dependencies. Consider where I'm coming from.... OP is presumably pleased that they were able to accomplish something that mattered to them with the tool of their choice. They likely feel they have a new found super power and want to share it with the "welcoming" community of python/reddit. Only to have one of the first comments be "whah.... you should have used &lt;lib that i'm familiar with&gt;...." To that I say "Fuck that" the person got something working, why would you want to kill that momentum by poo pooing on it? Or introducing unnecessary complexity for this script by introducing setuptools boilerplate and additional dependencies. This community would rather circle jerk about tools rather than celebrate accomplishments which IMO, is stupid, and the exact opposite of a welcoming community as is claimed so much. 
From having taking programming courses in university that do their test as pen and paper, it could also mean that he might have to write a program to do a simple task. I would say the best way to prepare is just to code more. Become as comfortable as you can with the language. They most likely won't ask you anything about external libraries, since those wouldn't be the same across all languages, so know all the built-ins with python, and know them back and forth. tl;dr: write code, and get comfortable with basic python 
I did rewrite it, will send you pull request when I get home :) Also made it PEP8 compliant 
Thanks for that! Nice post title too
Hah legend! Look forward to receiving the pull request later :)
I see. -t removes tarballs, -p removes actual old packages. So I guess you'd want to run both of them :)
Grab a raspberry pi and run the bot off of that.
Yep! conda clean -pt *Edit:* Justâ€¦ realise what you're doing. -p removes *all* packages not currently linked into an environment, not just outdated ones. This may or may not be what you want.
For getting a Python *development* (not end user) environment up and running, I would currently recommend [pyenv](https://github.com/yyuu/pyenv). Your step-by-step guide. * `curl https://raw.github.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash` (Note that this installs in `~/.pyenv` by default) * Add this line to your bash or zsh startup: `eval "$(pyenv init -)"` * Restart your shell (`exec` it, or log out and back in) * `pyenv install 3.4.0` (Wait while it builds and installs) * `pyenv virtualenv 3.4.0 devel` (Create a new virtualenv called `devel`, based on 3.4.0) * `pyenv shell devel` (Switch to the `devel` virtualenv) * `pip install flask django` pyenv can do a lot more; I suggest reading the documentation. I also really like Anaconda, as mentioned by /r/rainnz, but I find it more appropriate for end users (especially in scientific computing) rather than developers. That said, I also use it to maintain my own "end user" Python installation, while using pyenv for when I need to develop using the language. If you want a conda-based Python environment and you don't want the *entire* Anaconda distribution, install using [Miniconda](http://conda.pydata.org/miniconda.html).
&gt; I mean when would I need to graph something and not have a gui? * When you're working on a command-line? * When you're writing a CLI tool and don't feel like requiring the user to import the titanic just to get a simple graph? * When you want the fastest &amp; smallest way to express something, that also lends itself to simple automation? * When you are working on a remote machine?
Example of the axis names integrated for you. I also streamlined some of the main code to let bisect do the hard work. This still uses charlookup() separately, though it's not pasted here. from bisect import bisect_left def plot(x_vals, y_vals, x_size=69, y_size=15, x_labels=None, x_label_slant=False, y_format='{:10.2f}', yintercept=True, xintercept=True): ''' ASCII-art graph plotting x_size / y_size ... width / height of the graph ... defaults 70 / 15 x_labels ... dict {1:'1', 10:'kipper'} of values to display on the x axis x_label_slant ... display x labels on 45 degree angle y_format ... string format for the y axis values ... default '{:10.2f}' y_intercept / x_intercept ... ensure axes stretch to a particular intercept ''' if len(x_vals) != len(y_vals): raise Exception('x_vals and y_vals must be of equal length') x_min, y_min = min(x_vals), min(y_vals) x_max, y_max = max(x_vals), max(y_vals) if xintercept: x_min, x_max = min(0, x_min), max(0, x_max) if yintercept: y_min, y_max = min(0, y_min), max(0, y_max) x_bin_width = (x_max-x_min) / x_size y_bin_width = (y_max-y_min) / y_size x_bins = [x_min + i*x_bin_width for i in range(1, x_size+2)] y_bins = [y_min + i*y_bin_width for i in range(1, y_size+2)] cols = [[] for i in range(len(x_bins))] for x, y in zip(x_vals, y_vals): cols[bisect_left(x_bins, x)].append(y) cols = cols[:-1] for i, col in enumerate(cols): counts = [0 for _ in y_bins] for y in col: counts[bisect_left(y_bins, y)] += 1 cols[i] = [charlookup(j) for j in counts[:-1]][::-1] for i, y_bin in enumerate(y_bins[-2::-1]): y_bin -= y_bin_width / 2 print(y_format.format(y_bin), ''.join(col[i] for col in cols)) if x_labels: spacer = ''.join(' ' for i in range(len(y_format.format(0)))) label_len = max(len(label) for label in x_labels.values()) for k, v in x_labels.items(): x_labels[k] = v.ljust(label_len, ' ') rows = [[' ']*len(x_bins) for i in range(label_len)] for k in sorted(x_labels): pos = bisect_left(x_bins, k) for i, c in enumerate(x_labels[k]): rows[i][pos] = c if x_label_slant: for i, row in enumerate(rows): rows[i] = [' ']*i + row for row in rows: print(spacer, ''.join(row))
I'll be there! I'm not sure how necessary a reddit meetup is. Usually I love them because they introduce you to a lot of cool geeky people, but that already describes most pycon attendees. I will definitely attend some of the board game open spaces and am hoping to arrange a Vim-bof so hope to see you at one of those :-). 
Thank you. That looks pretty perfect. 
I'll be there, giving away copies of my book. Email me or hit me up on Twitter if you want to meet up.
I really like this one
What is the advantage of animated gifs over spritesheet? Wouldn't running at lower(or just different) fps make the gifs appear much faster than rest of the game compared to updating sprite?
How did you break matplotlib?
I disagree with the author that pickle should usually not be used. I find it to be a convenient way of serializing json-like object structures, with slightly better support for more kinds of objects, and with hash consing. If you don't need json interoperability with other applications, it's faster and usually more convenient.
open('file.txt').readlines()[-7:] If you have a reasonable number of lines / numbers, this'll be fine, but if you go over say a million lines, it'll use a lot of memory. If you want the data as integers, you could do: map(int, open('file.txt').readlines()[-7:])
Vim+syntastic+flake8. Fully Python 3.x compatible and super unintrusive. I use it every day.
You could also write it like this: from itertools import izip_longest def x_labels(labels, spacing=0, shift=0): whitespace = " " * spacing left_padding = " "*shift base = izip_longest(*labels, fillvalue=" ") rows = (left_padding*i + whitespace.join(line) for i, line in enumerate(base)) return "\n".join(rows) Or, with a bit of extra code, add the label separators from the [comment above](http://www.reddit.com/r/Python/comments/22e0k9/i_wrote_a_very_portable_plotter_this_morning/cgm5cia): def x_labels2(labels, spacing=0, shift=0, separator=None): whitespace = " " * spacing if separator: whitespace = whitespace[:len(whitespace)//2] + separator + whitespace[len(whitespace)//2+1:] left_padding = " "*shift base = izip_longest(*labels, fillvalue=" ") rows = (left_padding*i + whitespace.join(line) for i, line in enumerate(base)) return "\n".join(rows) This gives you: &gt;&gt;&gt; print x_labels(["hello", "how", "are", "you?"], 5, 1) h h a y e o r o l w e u l ? o &gt;&gt;&gt; print x_labels2(["hello", "how", "are", "you?"], 5, 1, '\\') h \ h \ a \ y e \ o \ r \ o l \ w \ e \ u l \ \ \ ? o \ \ \ &gt;&gt;&gt; print x_labels2(["hello", "how", "are", "you?"], 5, 1, ',') h , h , a , y e , o , r , o l , w , e , u l , , , ? o , , , 
You should sell book there... i would buy books from authors if they signed them for me.
You could do something like this which should be simple to implement: |one|two|three |five |seven |four |six The pipes are evenly spaced but get pushed down to the first available line that can fit them. I really like picasshole's suggestion though.
Client/Server set up where the client would ask the server for various pieces of information. The Server would query the resources and respond back with the details. It's a bit vague, but basically it queried license availability of various pieces of software, and reported back status of that to the client.
huh.. look at that..
You should probably ask your professors and students who've gone through it - they'll have much more knowledge than we do.
you can check with the Anaconda distribution folks, they seem to be doing a mighty fine job of packaging stuff. Continuum.io folks.
I like to go to [checkio](http://www.checkio.org/) for problems. Also, I really recommend spending some time learning the [built-in functions](https://docs.python.org/2/library/functions.html). It can really improve the quality of your code. You'd be suprised how much can be done with those functions. I'm making flash cards for them. Depends on how much time you have, really, but I'm learning tons of stuff going through them. . 
&gt;But some do. My point is that some do. &gt;&gt;We often treat numbers as sequences of binary digits, and their digits as boolean values. This is true for the bitwise operations (^, &amp;, |). &gt;&gt;Treating booleans as integers is no less sensible than treating characters as strings, Ok I guess we agree. Making booleans a subclass of ints is not consistent with the way python handles string vs char because char and string are the exact same type treated the same in all cases but int and bool are not and further are not even treated as if both were bitstrings. &gt;ASCII code points to characters on Python 2, does not involve the internal representation of these numbers. I agree but that in no way invalidates my point that if ints were treated like raw bits str(97) would make more sense as 'a' than '97'. &gt;Why? Because of 4's LSB. &gt;how bool(4) == True but 4 != True offends you... Not sure how this is relivant to your argument about LSB that I was refuting. But generally unexpected behavior causes bugs. &gt;Python does not define an internal representation for dictionaries. You therefore can't do this. No but choose any specific release of C python and it does. &gt;Interesting. How experienced are they? Average of 10 years programming experience 2 years python. &gt;Closure is not a property held by Python objects. So first note my problem is not that any type violates closure. It makes sense for many types to. It does not make sense for boolean to violate closure on other operations involving booleans. I do thing closure should not be violated without making it as explicit as possible. &gt;int violates closure in Python 2 (10**19) That was quite an annoying part of python 2 to me. I am glad it was fixed. &gt;Python 3 (1/2) I still really don't like this. "//" and "/" should be swapped. But it still increased the explicitness compared to python 2. &gt;fractions.Fractions (Â½**Â½) It does not if you are using the default types. It only breaks if you are explicitly importing fractions. This explicitness is my point. I would be quite happy if in addition to a bool base type there was an LSB like boolean package. &gt;bool could only implement mod 2 arithmetic if they weren't a subclass of int, but personally then I'd prefer + to raise an error (as opposed to `True + True == False!). Either of these would be an improvement from my point of view. &gt;So the problem was that the library had an error code you didn't test for? It was not an error code for the lib. But I did need to return an error on my end. I needed to return an error not just for booleans but for other potential and unpredictable types the library might return. If I knew in advance what types were returned I would not need isinstance in this case. 
IMO it does, but to each his own.
You should get this included with the official python packages. I would love to be able to do import cliplot or something and just use it in the command line. I should mention my primary use for python is as a calculator. Ironically I have a mathematica license, but it takes too long to start up, and I can generally do the same things in python anyway.
nothing is better than codeacademy.com for this~!
I did the same thing in php with curl and it was only 6 lines.
Could we not?
The python dictionary object is a pretty well optimized C API already. I'd be concerned about how much speed I'd be giving up by moving to a pure-python dict implementation for the convenience here.
https://www.djangoproject.com/snakesandrubies/
&gt;izip_longest(*labels, fillvalue=" ") That is some tight science. Nice work!
[more stuff](http://www.reddit.com/r/ArtefactPorn/)
Actually, I do embedded stuff at work, so I'm going to write up a simple C version ASAP.
Well, what do *you* want to program? Python is a general-purpose language, so it can be used for pretty much anything.
Nice use of decorators!
Probably not, but when you make a plot you get a url with an image you could display in tmux.
I use python &amp; sql server together every day. SQLAlchemy is a great ORM, but I have not found it overly useful with what I use on a day to day basis. The more indepth you knowledge of SQL, then the more frustrated you'll be with ORMs. If you go with a web framework as a front end, which isn't a bad idea, SQLAlchemy will be more applicable. As much as I dislike Access, it offers a couple things that you'll need to replace. 1) Reporting: SSRS is a great reporting system &amp; it will make it easy to move away from Access reports. 2) Forms: This is the biggie. To replace access you'll find it difficult to find a drop in replacement for the front end. You will likely need to learn a web framework, or something like tkinter/QT/WxPython. This is an area that doesn't often get addressed in python. It's not as fun or sexy, but it's an area that needs some advancements. 
You could write a reddit bot that spams /r/python with random nonsense questions. But you have to work on your google skills first. 
a few ppl from the PTVS (pytools.codeplex.com) team will be there. would love chat w you...
Just look at the thing. Whoever made this was surely tripping balls.
I use peewee as an ORM. It's pretty good and extremely light weight. And Python is not mostly for web frameworks. It was actually kind of a pain in the dick to get it working as a web framework because it requires third party software. Coming from a PHP background regarding web development, it was a challenge. Python doesn't handle HTTP headers and stuff auto Of course, I had been coding in Python for years before that. So if there's any lesson to take away from that, it's that someone used Python for years without ever deciding it was worth using as a web framework.
This thread is a great example of how mostly anything you might need is about one import and one line away in Python.
And then there's [Google App Engine](https://developers.google.com/appengine/docs/python/)
PySide/PyQt, SQLAlchemy or Pony, and Python will totally let you do this, and it's entirely free (and open source). For more information on how awesome Pony is, check out the description from this Stack Overflow answer: http://stackoverflow.com/a/16118756/1999151 I would highly suggest Pony if you are going to be doing things that need to be highly optimized.
Not to be that guy, but: &gt; Butler is the missing library that adds additional and necessary features to Python dict as well as list. Either I'm not using my dicts and lists correctly or this seems, at least to me, a bit of a solution without a problem. Sure, some of these are probably helpful but are they necessary? 
But they could be used to stun with a blow from the blunt wooden side, aside from sawing through flesh with the volcanic glass blades on the other axis. I once saw one from the pacific islands, in a museum, that had shark teeth for the blades. 
So could a metal sword. Hell, one of the best tricks with a longsword is to hold it by the blade and hammer the other bastard with the handle. &gt;aside from sawing through flesh ...no, they didn't saw through flesh. They could decapitate a horse with a blow, in combat.
Proof positive that py3k is wrong and py2.7(k years ago) is the One True Python. 
Also for those of you going to Pycon, we will have a small booth there where we'll be happy to answer any questions you have about Komodo. There'll be t-shirts, stickets, buttons, prices, coupons .. 
Maybe try sth like this: echo 'select variable4 FROM my_table WHERE variable1=1 AND variable2&lt;=5 AND variable3="Zinc_Plus"' | sqlite3 zinc12_drugnow_nrb(copy).sqlite &gt; sqlite_out.txt alternatively look into [fetchmany](https://docs.python.org/2/library/sqlite3.html#sqlite3.Cursor.fetchmany) method avoid fetching and writing (and creating / deleting many objects) one by one. Tweak the number of items to find sweet spot for nr. of rows to fetch.
Anybody know what is the difference between the paid for version compared to the version on github? I tried komodo a while back in 2007 but my boss got me a license for wingide pro and never looked back. 
There is a comparison chart on the Komodo Edit page - http://komodoide.com/komodo-edit/
* ipython * virtualenv/buildout * supervisor * git and all the javascript/node shit that falls in and out of fashion by the hour. 
Have you tried pandas? You might be able to speed up the process &amp; offer options for output format (csv, excel, etc.) Let me know if you have any questions.
I'm a fan. 
Agreed. If you need/want and ORM, then SqlAlchemy is the best of the bunch.
Uh oh... we're starting to look like C now...
Also, it might benefit you to add indexes for the columns in your query. 3 days seems like a an extremely long time. How many giga/tera are we talking here? 
You're not actually skipping directories, you're simply ignoring them. To completely prevent `walk` from descending into a directory, you can remove it from `dirs`. For example, if `root` is `\root`, you'd want to remove everything until `dir_b`: `del dirs[:dirs.index('dir_b')]`, then if `root` is `\root\dir_b`, remove everything until `dir100` in the same way, etc. I've tried to implement a generalized version, here it is: [https://gist.github.com/pyos/f7746ab822055cbc29a1](https://gist.github.com/pyos/f7746ab822055cbc29a1) &gt;&gt;&gt; xs = walk_from('C:\\', 'C:\\Windows\\Media') &gt;&gt;&gt; next(xs) ('C:\\Windows\\Media', ['Afternoon', 'Calligraphy', ...], ['Alarm01.wav', 'Alarm02.wav', ...']) &gt;&gt;&gt; next(xs) ('C:\\Windows\\Media\\Afternoon', [], [])
Yeah it's definitely a bit easier than SQL Alchemy I've found. 
Thanks, so how would I go about the `fetchmany()` command, I find the documentation a little bit brief. So something like c.excecute ('SELECT * ...') results = c.fetchmany(10000) while results: for row in results: # do sth results = c.fetchmany(10000)
Nice work! I will definitely try this out in a future project. However, one small nitpick (below Decorating your User Model): self.admin = kwargs.get('name', False) should be self.admin = kwargs.get('admin', False)
my favourite `export PS1='\[\033[32m\]\u@\h\[\033[00m\]:\[\033[34m\]\w\[\033[31m\]$(__git_ps1)\[\033[00m\]\$ '`
I've only would have had use for that `get()` function, on a grand total of two occasions. It was pretty trivial to implement myself.
&gt; Blender is made with Python. That's a stretch. Blender is written in C but it's script language is python.
I heard about pandas, but I haven't used it, yet. Thanks for the suggestion. The main reason why I am working with SQLite is that the files should be "universal", so other non-Python people can work with them. Do I understand correctly that pandas uses a unique database structure?
A side note to the discussion, here's a possible solution, in Python, to the problem you couldn't solve def two_next_to_a_two(array): a=0 for i in array: if i == 2 and array[a+1] &lt; len(array) and array[a+1]== 2: return True else: a+=1 return False
Turns out my estimation was wrong, took about ~ 6 hrs to write ~10 Gb from a ~40 Gb database. I think the indexes really might be the biggest problem. I think I misunderstood the concept about indexes: I cannot create unique indexes here, but I should be able to create the "plain" indexes on the columns. Thanks!
A while back (python 2.2?), I was really interested in a library that could access data through something like an XPath over a python dictionary. e.g. bundled_data.get('/fully/supported/xpath/to/data') or bundled_data['/fully/supported/xpath/to/data'] where data could live in memory, database or file. Butler isn't remotely close to what I was looking for then, but certainly it feels like it's one step closer to the vision above.
wouldn't an api like this make more sense: data["fully"]["supported"]["xpath"]["to"]["data"] ?
I greatly prefer the conciseness of the XPATH: http://www.w3.org/TR/xpath20/ over your example. Examples: http://www.w3schools.com/xpath/xpath_examples.asp &lt;?xml version="1.0" encoding="UTF-8""?&gt; &lt;bookstore&gt; &lt;book category="COOKING"&gt; &lt;title lang="en"&gt;Everyday Italian&lt;/title&gt; &lt;author&gt;Giada De Laurentiis&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;30.00&lt;/price&gt; &lt;/book&gt; &lt;book category="CHILDREN"&gt; &lt;title lang="en"&gt;Harry Potter&lt;/title&gt; &lt;author&gt;J K. Rowling&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;29.99&lt;/price&gt; &lt;/book&gt; &lt;book category="WEB"&gt; &lt;title lang="en"&gt;XQuery Kick Start&lt;/title&gt; &lt;author&gt;James McGovern&lt;/author&gt; &lt;author&gt;Per Bothner&lt;/author&gt; &lt;author&gt;Kurt Cagle&lt;/author&gt; &lt;author&gt;James Linn&lt;/author&gt; &lt;author&gt;Vaidyanathan Nagarajan&lt;/author&gt; &lt;year&gt;2003&lt;/year&gt; &lt;price&gt;49.99&lt;/price&gt; &lt;/book&gt; &lt;book category="WEB"&gt; &lt;title lang="en"&gt;Learning XML&lt;/title&gt; &lt;author&gt;Erik T. Ray&lt;/author&gt; &lt;year&gt;2003&lt;/year&gt; &lt;price&gt;39.95&lt;/price&gt; &lt;/book&gt; &lt;/bookstore&gt; 1. select all the titles: /bookstore/book/title 2. select all the prices: /bookstore/book/price[text()] 3. select prices &gt; 35: /bookstore/book[price&gt;35]/price 4. select titles where prices &gt; 35: /bookstore/book[price&gt;35]/title 
should be simple enough to implement though.
doesn't look comfortable to hold at all.
I have done lots of gui frontend myself, but mostly with .NET WinForms. But currently I am assessing PyQt for another desktop application. But redditors here are correct, "You won't find a great support in doing so with Python". Not as easy as it's in .NET by the way. As far as I can found, a friend had told me about this IDE that can helps you when doing PyQt development : http://monkeystudio.org See my [article regarding Qt/PyQt](http://pythonthusiast.pythonblogs.com/230_pythonthusiast/archive/1358_developing_cross_platform_application_using_qt_pyqt_and_pyside__gui_application_development-part_5_of_5.html) that will make you understand how unwelcoming it is Python in desktop area. * Compare to VS.NET guys.. :)
I glanced at your article, but can't quickly ascertain what is your main beef with desktop GUI development in Python (or at least with pyQT). Could you give us the one line summary?
I just wrote a python script that monitors coachella ticket craigslist postings and sends an email to a friend anytime there is a new post with key words. I write websites in python. I create databases for work in python. I analyze excel data in python. You can pretty much do anything in python. 
Thanks -- love doc PRs -- I made the change.
Thanks!
Which one? might make a stop! :D
 import tardis
Just cookiecutter and virtualenv+virtualenvwrapper, and that's it as far as command line tools goes...
Pardon that if the article is way too long. I pasted, &gt;You will have to go back and forth between your Python IDE and QtDesigner to design application GUI interfaces, manually issue all counterpart command line utility of uic (import QtDesigner *.ui file into Python *.py code) and rcc (import Qt resource file *.qrc into Python *.py file) in its PyQt/PySide version and connect manually all your signal widgets to slot function With this concern, [monkeystudio](http://monkeystudio.org) already cut off the route needed to manually sync *.ui to *.py. But still, it's not yet offer a way to easily connect slot to signal. We still have to connect it manually. Compare that to the easiness in implementing default handler for GUI object in VS.NET, where you can double click an object to implement its default handler. I do hope if we could have the same features in Python IDE. Any suggestions? Kinda hope that PyCharm offer this feature actually.
Run it with sudo
When you say connect it manually, do you have to actually write the line that binds the object to its event handler? And then write the event handler "stub" (minus custom code) itself? Or, if not, what do you mean?
When you say "ironically," do you mean it as hipster ironic, "I only have Mathematica to be ironic?" Because that would be perfect.
Is there a point to this?
I thought the same thing. Maybe it was used with gloves or just decorational.
Sure, whatever you want. ;) (but not really) I got the mathematica license from this event thing, and I use it occasionally, especially when I need to do anything excel and python can't handle together.
&gt; actually write the line that binds the object to its event handler? Yep that's it. Imo, having that plumbing code automatically done by an IDE, will largely ease us in developing PyQt application. 
Correct, I'm one of the developers. I am not aware of there being a comparison of Komodo with other IDE's. Whilst I see the value in this I think this is something that should be provided by the community as otherwise the list would be biased and I personally don't care much for that type of marketing (reminds me of the way US political candidates try to make each other look bad). 
Isn't it sad that when I saw this comment I immediately went and tried that? :P
 @sword
will definitlely consider implementing an API similar to xpath
Yeah, but it's out of frame.
......dammit. Fine, I'll stop being grumpy
I'll see you there!
Using `fetchmany()` probably won't help. If you look at [the source code of the sqlite3 module](https://github.com/python-git/python/blob/master/Modules/_sqlite/cursor.c), you can see that `fetchmany()` is actually implemented on top of the cursor's iterator interface, which the OP is using directly. The sqlite command-line thing is worth a try, though; if Python is a bottleneck here, that would fix it.
With the Easter eggs in there (`this`, `antigravity`, etc.), it's not unreasonable.
I don't get it, can someone explain? :(
exactly. And what Butler is trying to do is to organize it properly, so that programmer don't have to. Without raising an exception on the program scope. I find this very useful while working with vaguely structured and complicated **json** documents.
Handy, thanks! For the curious it adds the active branch of the current git repo to your prompt.
The designs on the sword look sorta like the python logo. :3
Oh man, I don't know how I didn't spot it. Thanks!
It's alright, I laughed at first because I thought the pic was posted to the wrong sub, then laughed again when I actually got it. xD 
from pastAndFuture import tardis
can psql connect to 127.0.0.1 on port 5432?
I use Django mainly because of its admin... Very fast to build a site with basic management functions.
Sounds like a awesome topic :D I picked up Python close to a year and a half ago. Still, and always, learning :)
That's interesting! wxPython does one framework that I evaluate. But, I think we are going to stick with PyQt. And yeah, I believe Python dev don't have the same level of comfort as it's in C++ QtCreator.
i like http://ohmyz.sh if that counts. 
I'm not quite sure what you mean. How do I run mod_wsgi as sudo? It errors if I set it to root in the httpd.conf file.
You really need to explain what a "path" is in the docs. It seems `Butler([[1, 2]]).get([0, 1])` is equivalent to `b[0][1]`? And similar for dicts, but with keys instead of indices? Why swallow exceptions when you can follow the far more expressive alternative that `dict` already uses, a configurable default value (`dict.get('f', None)`)? TBH, it's a good idea in general but you should rebrand -- instead of presenting Butler as a wrapper for lists/dicts, you should make it clear that it's used for *traversing nested lists/dicts*. As it is, it sounds like you're saying Butler is meant to be dict2.0 when it's more of a useful solution to solve a very specific use case.
Just pushed a number of changes for the suggestions you had made. Please go ahead to https://github.com/atmb4u/butler/issues to report any further issues. **@robin-gvx**: *You are wonderful.* :)
It's a limited time offer and the version is not upgradable in the future .. so I'm out. I was a great fan of Activestate when I was using perl as my main scripting language. I owned Kommodo 3, 4 and 5 and several versions of the perl dev kit. But only for personal stuff because I do something different for living and for that it got to expensive. Now I'm using personal edition of intellij ...
Maybe expose two interfaces, like dicts have indexing which raises an error and `get()` which returns a default value. I personally dislike warnings, because they are so easily ignored and result in clutter on stderr, but it might be a good fit for Butler.
Guido's time machine at work again...
What do you mean by "not blocking the code flow"? I find that what really blocks my code flow is failing on some problem thousands of lines AFTER the actual problem because an error wasn't caught when it happened.
python dicts have a way to now throw if the key isn't found: foo['x'] # &lt;- throws! foo.get('x') # &lt;- returns None You could have the same thing: foo.at('a', 'b', 'c') # &lt;- throws! foo.get('a', 'b', 'c') # returns None
The blue bits on the handle look like the Python logo.
So, you recommend this recommendation?
Ancient Python Tetris
That moment in the Q&amp;A in which DHH states that i18n should be done in a module blabla and then Adrian's response was just three words "We got welsh" ... the crowd went nuts. Good times back then.
what secret information do you have that could be lost? typically only a server has keys. i don't see a likely scenario that puts you at risk.
Imho, you could solve this problem in a more 'pythonic' way. Checking iterator against length of your list in Python is usually a give-away that you're not using some built-in that could fit def shorter_way(my_list): return any(x == (2,2) for x in zip(my_list[1:],my_list[:-1]))
im.thumbnail() is way faster than resize() if you are shrinking images. Edit: jpegs, and if they are really big resize to target size*2 without antialiasing and then with.
You should use Image.ANTIALIAS only for down-scaling in other cases -&gt; Image.BICUBIC
Pandas will work with your sqlite database. - Read sql from database - pandas_dataframe = sql.read_frame(query, sqlite_cnx) - write to excel file - RPT_writer = ExcelWriter(xl_filename) pandas_dataframe.to_excel(RPT_writer, 'Sheet_name') RPT_writer.save() - write to csv file - pandas_dataframe = sql.read_frame(query, sqlite_cnx) pandas_dataframe.to_csv(filename) I don't do much with the analysis part of Pandas, but I love Pandas for quick sql to file code.
The Heartbleed bug is a vulnerability in OpenSSL, not SSL itself. Any library or package that uses a vulnerable version of the OpenSSL library is also vulnerable. The `ssl` library in Python uses OpenSSL installed on the operating system. Your system is vulnerable unless you update OpenSSL to a non-vulnerable version or you re-compile OpenSSL without the handshake.
If you're doing bulk resizing of JPEG images, have a look at this library, it is significantly faster than PIL: https://github.com/jbaiter/jpegtran-cffi [Benchmark](https://raw.githubusercontent.com/jbaiter/jpegtran-cffi/master/doc/img/benchmark.png)
I agree to an extent...I feel like it wouldn't be hard to implement this type if ASCII plotting in matplotlib to mimic gnu, as it starts to feel clumsy to me going back and forth between Python and gnuplot. Rare is the case, but occasionally this type of plot is very convenient.
But do the libraries linking to OpenSSL need to be recompiled?
A client may have keys or passwords to store the data somewhere. If you store something on Amazon, you authenticate with keys.
There is at least one aspect that may make clients less susceptible - since you get a random(?) 64kb package from memory each time, you can connect many times to a server to puzzle together the complete memory. But can you make a client reconnect multiple times to get more than just a random 64 kb block?
Thank u , I have updated the Notes for this.
I'd try shelling out to mogrify and see how it performs.
It's called seconding.
ok, in that case you should be concerned.
Only OpenSSL should be recompiled or updated. You don't have to recompile Python itself.
import multiprocessing
&gt; But can you make a client reconnect multiple times to get more than just a random 64 kb block? I suppose in theory yes, but it's more likely that you connect in one TLS session and keep requesting 64 KBs of data.
I can't recommend buildout enough -- I just can't see why the community has got behind virtualenv so much when buildout is venv *in the project directory* and can do extra stuff during setup, like create directories, compile C libraries, etc.
Hmm. To be honest I expected to see a slick solution to the problem of deploying/sharing spreadsheets that use this. It appears that there really isn't a slick solution; you have to zip up the spreadsheet along with with xlwings module, any modules you've written, and also depend on them installing Python. Freezing slightly simplifies this, but it's still a bit much. I wonder if there's value in creating an Excel add-in that streamlines the whole process and allows bare spreadsheets to be sent around?
&gt; I wonder if there's value in creating an Excel add-in that streamlines the whole process and allows bare spreadsheets to be sent around? https://datanitro.com/ The pricing makes it cost-prohibitive for me to use, but I used the free trial and played around with it. It's pretty slick. I spoke with someone on the DataNitro team here on Reddit, and they seem to be uninterested in creating a open/community version that's free or even a trial that's longer than 30 days. I'm quite disappointed.
can I make .apps? 
Hah! You can say the same about CPython!
I'm not sure about this; Varnish is only useful for caching static pages/files. It can be really tricky to get the right caching scheme set up for dynamic pages, and nginx is designed from the ground up to serve static files fast. So: use nginx, then if things start to slow later down the line apply Varnish.
Hmm. I've built several add-ins for Word; building one for Excel would be much the same in terms of general construction. I'm also quite fond of Python, so it might be worth trying to build something like this (open source).
My main goal in designing xlwings was to enable a no-installation experience: I personally find unzipping a file easier than having somebody install an add-in (File &gt; Options &gt; Add-Ins &gt; Go ... &gt; Browse &gt; OK) which on top obviously still requires a local Python installation(!). If you are distributing the app within a company network, you could place your build folder with the frozen executable on a shared drive, adjust the path accordingly in the VBA module, and you are really able to send around the plain Excel file.
Dynamically changing runtime props. So hold conditionals read from config in a dict. Use xmlrpc to change this dict at runtime whilst the process is running. E.g. Turn on and off debug. Change intervals of things and so on.
&gt; I personally find unzipping a file easier than having somebody install an add-in You forgot about having them install Python. I was imagining a Windows installer that installs Python (if needed), installs the xlwings module in a known location, and optionally installs an Excel application-level addin that makes everything just work. So there would be a one-time run of an installer (super easy), and thereafter you can just send around the bare spreadsheets. I really don't mean to be negative; it's a cool tool and your approach isn't bad. I'm just familiar with the problem domain and I found that building an addin (mine was for Word) and shipping an installer was a good approach because the Office documents didn't require any additional baggage. 
It's a limited time offer while we evaluate how well it's received, hopefully it will become permanent. Whether it becomes version upgradeable again also depends on how well it is received.
I have no need to port working code.....
No worries - nothing taken negatively at all :)! However, in case you go for the frozen Python version (standalone examples), the users DON'T have to install Python. This makes sense if I have this single tool that I want to send to a specific user for playing around a few times. The installer sounds like a good idea but makes more sense if you have a lot of different Python/Excel tools.
Recompiling or updating OpenSSL is only sufficient, if these extensions link against OpenSSL dynamically. If they link against it statically, they will have to be rebuild as well.
Looks pretty neat. A nice bridge between the normal micro frameworks and the behemoths.
Makefile: all: $(patsubst %.png,%.jpg,$(wildcard *.png)) %.jpg: %.png. convert $@ options $&lt; Now run make -j all.
pypy
Can I use Python 3 with this?
What are some advantages of using this over flask?
* Not all modules are supported, and I don't feel like experimenting with WIP py3k ports. * Python 2 works and is still supported. * No benefits from porting old code that works in python 2, or the benefits are small and don't justify porting.
Yes, it's compatible with Python 2 and 3. If you hit any problems, raise an issue on GitHub.
* Morepath can generate links for you based on model instances (instead of having to name routes), helping reuse and just being plain easier in most cases. * Morepath's routing and link generation knows about URL parameters. * Morepath application extension/overriding is more powerful (and probably easier) than Flask blueprints for application reuse. * Compose applications out of other applications. See also: http://morepath.readthedocs.org/en/latest/superpowers.html http://morepath.readthedocs.org/en/latest/compared.html 
more -&gt; https://github.com/magicmonty/bash-git-prompt
Thanks! It turns out that the flexibility and much of the feature set of the larger frameworks can be reached or surpassed in a micro framework. But Morepath is more focused in what features it supports: templating is (still) off the radar, and things like form generation and database integration and admin UIs and so on will always have to remain external projects. (but I believe the facilities in Morepath to build these are at least as good as anything else, and in some cases better) 
vim-bof would be awesome.
Interesting project. I have a hard time getting past the fact that the name is a misspelling of etcetera, though.
Nice job! You might want to check out this cool library called [Urwid](http://urwid.org/). It has similar purpose, plus you can contribute to it's code at github. 
Thanks, don't hesitate to provide feedback if you come to use it. For the record: actualy both spellings are valid :-)
Because for me there is nothing with python 3 worthwhile the effort
I totally understand your point, and there is a fine line not to cross when "compacting to one-liners" in order to avoid bloat For this example though, I think both the problem and the solution are simple enough that such an answer remains totally readable
Thanks, I've used (n)curses before - and it helped. Urwid seems cool - but with curses I'm staying compatible with earlier version of Python (2.3x) and I think it has a broader audience.
that sounds like things that CherryPy does.