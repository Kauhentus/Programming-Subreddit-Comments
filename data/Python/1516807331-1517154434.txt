This is probably a stupid question, but would that require that I have access to the various platforms so I could pre-compile the binaries? Essentially, I would need to pick what platforms I supported and leave the rest to try and install the package on their own... 
&gt; dumb licensing Which means either: - a multi-gigabyte download and half-hour installation time that puts a whole lot of crap on your Windows system and turns your Windows registry into a mess; or - not being allowed to distribute your application because you switched to Linux in frustration and simply installed python3-qt from the repository Upvoted.
I've scrolled through this thread and no one seems to have mentioned Flask. Is dependence on a browser a big obstacle?
I've been reading into got. Seems pretty straight forward and everyone has been telling me to use it. I'm working on a program that uses databases right now. It's like a journal entry program.
Look into the library named [cryptography](https://cryptography.io/en/latest/).
What is the project? 
I mean that upstream Git doesn't target Windows, only POSIX, so Git For Windows is maintained as a fork of Git, building using a POSIX compatibility layer. I'm assuming the Bash shell is some kind of consequence of that.
Look into [Pipenv](https://docs.pipenv.org/) - it makes working with virtualenvs much easier, and answers most of your questions.
As a matter of fact there is. Here you go, pick your poison. https://realpython.com/contact/
I will get some notes together and get back to you. 
Thanks
It's super super immature right now Jupyter is great, jupyterlab is a pile of hot garbage until it gets some more work - it's more like proof of concept stage
Sounds interesting. Have fun! 
Pygrib is the most common package for reading GRIB files, but it is not built for Windows-- only Linux and MacOS X.
Classes started and the first math/cs hw is just begging to be solved in Python 
JupyterLab runs within the browser just like Jupyter Notebook. I use JupyterLab daily and have not experienced any major problems. It is in Beta though and not as mature as Jupyter Notebook. Spyder and Rodeo will probably be closer to what RStudio is. I love the Notebook workflow concept and this prefer Jupyter.
It depends on what you use. If you use virtualenv or virtualenvwrapper you activate the environment and then go skipping gayly around your hard drive. If you use pipenv, and you really should, then you keep everything in one directory for portability, bit if needed you can still activate the virtualenv shell and continue your skipping. My only gripe with pipenv in running things e.g. "pipenv run python foo.py" but it's nothing a wee shell alias can't solve. 
Oops, sorry i just searched for a python sub, didnt realise there was a sub specifically for leaning python.
Can you give us the name of that book if you remember? Really interested in reading it
The CfP closes at the end of February so I'd guess the schedule will be online mid-March or so. DO NOTE that tickets have always sold out for the conference, so if you wait for the schedule you'll be late in line. We always sell a bunch of tickets on the day the ticketing opens which is well before the schedule goes live. Take a look at the schedules for 2017 and 2016 to get an idea of the types of talks we have: https://pydata.org/london2017/schedule/ https://pydata.org/london2016/schedule/ My write-up for the 2017 conference is here, check out the breadth of things we managed to cram in: http://ianozsvald.com/2017/06/01/pydatalondon-2017-conference-write-up/ I stepped down as an active Chairperson for 2017, having co-chaired and run the review committee the previous three years. Now I try to spread the word to new communities (e.g. I'm speaking at London Python tomorrow to push the word out to a more engineer-focused crowd). Please do forward the CfP on to anyone you think might be interested!
I would start by asking the boss to pay for training. Just b/c you've started using python &amp; can do some basics doesn't necessarily qualify as the experience necessary to build a full-blown app. Tell him to pay up.
Great, thanks!
You can use a password to derive a key using [cryptography's Fernet](https://cryptography.io/en/latest/fernet/) symmetric encryption. Note that you're going to be encrypting bytes and not strings (but since you know the encoding you can flip them back to strings once decrypted.
A web app for ensuring users get the first hold on popular library items like books, ebooks, DVDs, and music. I've finished the MySQL database and have jjst about finished the Python code to run queries and make reservations. The website is a work in progress - I need to learn how to construct websites that allow for the creation of user accounts with password logins, and that interact with MySQL. I would appreciate any tutorial links anyone could provide. 
Could be a fun programming exercise, but you'd be recreating the wheel. Tools like splunk or elasticsearch might be more appropriate.
I've used Spyder and loved it. Highly recommend it for the RStudio feel.
Jupyterlab I find is great unless you need JavaScript support (bokeh/maps/matplotlib notebook etc). More convenient to have everything together.
You could always set up with some of the CI providers that allow free usage for open source to build your binary wheels: * [Travis CI](https://travis-ci.com/) for Linux * [AppVeyor](https://www.appveyor.com/) for Windows * [CircleCI](https://circleci.com/pricing/#faq-section-os-x) for Linux, and appears to offer OSX build support if requested.
I've found that it's easier with updating (either button clicks or interval) to update a fig by returning a dcc.Graph object or list of them than updating a graph. So in your app layout where you have your graph. Replace it with a div and return the graph object from the update function (you can also take further inputs for buttons or drop down menus etc if you want to change what you're plotting) 
Flask is probably the best bet. I have never used web2py but I have heard some positive things about it. You may also want to consider Pyramid which is marketed as allowing you to start small and grow as big as you want. All this being said Flask has the greatest amount of resources for any micro Web framework in Python. Yes, you can take a Flask app and migrate to another framework relatively easily. I have moved apps from flask to Django, just translating the logic contained in the flask app into the Django paradigm. This will require some work though and requires you understand the other framework. 
1. Try all the links to the right hand side of this page. 2. Search this forum for the previous answers to this question. 3. NO PROBLEM BUT PLEASE DON'T SHOUT :-)
Have you looked into pygame? Cross platform compatible and iirc it has support for video
Interesting idea to try and combine multiple static analysis tools into one. There are too many false positives for me to find this particularily useful, but I wish the project good luck.
I think also it's a good idea, but you're right about false positive.
Actually I just looked it up to make sure, [headless browser](https://www.google.ca/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjqj_L_pvHYAhWCyIMKHYB3DKkQFggxMAI&amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FHeadless_browser&amp;usg=AOvVaw2cYsHR5osh91g4JZ37j5_o) actually means no GUI.
Are you wanting to just have the look of a table, or actually store the inputs in Excel? If you just want the look, but in a .txt file, you could simply use tabs ('\t') and newlines ('\n') to separate the data. If you want to actually write to Excel, I use the openpyxl module a lot. It could be useful to you. Welcome to Python!
hey, i havent done a ton of JS lately (but i have been doing some regex-based web-scraping in python) but i m like 98% certain that the dom is not updated in the way you hope when it is all javascript (ajax/jquery/react/angular, etc) so you need to open the developer tools/console to the network tab and see if you can determine the data you are looking for (and even looking at on-screen) is coming from there. AFTERThe page loads, and thus the dom is set. if so, maybe try to capture it from that source instead. just a guess to maybe point you in a direction for exploring. good luck mario 
[This Github-sponsored site](https://try.github.io/levels/1/challenges/1) teaches you how to use Git and Github.
Unfortunately you won't be able to get desired result unless you are able to render wab page fully with JS. Just a quick test if what I mean: disable JavaScript in your web browser and try to achieve what you are trying to do. If you are able to do it then to should be able to replicate this with the selection of tools you chose. If not then you should be looking at selenium/webdriver and render webpage in proper browser instance.
The only way to really Answer your Questions is to Pin down whY you are not a fan of Frameworks.
Im actually not a python programmer - I know knowledge in object oriented programming, but how would I capture the source using python, is there a way to request the source of the page using python? I could probably get away with writing this web scraper in JS and using a headless browsers to get the data, thoughts?
Oh boy oh boy oh boy oh boy oh boy!!!! I just finished Ch 5 of the first edition. I'm assuming I can hop to the newest version for Ch 6? Thanks again. I work with Python fairly regularly but always learn something new reading your books.
Write the backend in Python and front end with JS. Use react/native if you want mobile, electron for desktop... Ease of use and transferable skills. 
Once thing with async JS is that you would need to wait for dom to update and/or your desired element rendered to desired state. Other option that I forgot to mention is to check perhaps there is some backend web API you could call directly, which is probably the case if win app is react. Then it would probably be a master of figuring out which API endpoints to poke. Also login probably sets some auth/session token.
 import requests from lxml import html import time USERNAME = "MyUser" PASSWORD = "MyPWD" LOGIN_URL = "https://www.olark.com/login" URL = "TRANSCRIPTURL" def main(): session_requests = requests.session() # Get login csrf token result = session_requests.get(LOGIN_URL) tree = html.fromstring(result.text) authenticity_token = list(set(tree.xpath("//input[@name='authenticity_token']/@value")))[0] # Create payload payload = { "username": USERNAME, "password": PASSWORD, "authenticity_token": authenticity_token } # Perform login result = session_requests.post(LOGIN_URL, data = payload, headers = dict(referer = LOGIN_URL)) # Scrape url result = session_requests.get(URL, headers = dict(referer = URL)) tree = html.fromstring(result.content) time.sleep(20) conversation = tree.xpath("//body/div[@class='main-container']/div[@class='o2-main-container']") print(conversation) if __name__ == '__main__': main() 
This sounds like depression to me. You probably feel like shit right now, and you don't have the mechanisms to deal with it, and that's fine. I've been there a few years ago. It sucked. A lot. It still does, sometimes. But it gets better. Just trust me on this. It does. Find a therapist. Talk to them. Explain how you feel. Those people are trained professionals whose job is to help people like you recover. They can help. Also, if you need someone to talk to, feel free to PM me - I'm happy to discuss everything, even things that aren't related to programming. I'm also a native speaker of Russian, so you can get some practice in if you want :)
Congratulations. I've been looking forward to your book shipping for a while now.
&gt; electron How have I only just heard of it. Looks awesome! +1
I think you've fallen into a, myth, that capitalism (especially the American bootstrap kind) likes to propagate. The idea that you have to be a hugely multi-talented success to justify your existence. All I really want to say: It is okay to just exist, It is okay to have no goals beyond enjoying yourself, it is okay to not know everything, it is okay to take a break too. &gt; There was a time few years back everyone said I'm a fool I don't know anything. But I didn't wanted to except that. Quite frankly, fuck other people. 
I dual boot my O.S which one is windows and one is linux will try to program python in linux.
You need to use Selenium with the chrome/firefox webdriver... or use NodeJS with Puppeteer. 
I actually just rewrote the README.md, making it much better and adding to-do and wish lists. Scroll up to the book soimeone else asked about, "Git Magic" by Ben Lynn. It's really old (August 2007) but costs nothing and has no licence or copyright assertion text in it. Plus it's a pdf file, so copies of it should be easy to find online. If you're running Linux check if your repositories have the package gitmagic or something similarly named.
great, now when people ask “why does slack need 2GB of ram?” you know the answer. 
/r/learnpython and pay attention in class.
I agree with K900_. You are not useless, dumb or an idiot. You are a geek (I'm not saying this in a negative sense as I am a geek also and proud of it). You already have more STEM knowledge than most people twice your age (myself, I'm 64). I'm not real good with the higher level maths either, but when solving a problem, I find that searching on the net usually results in an answer. Perseverance usually produces an answer. Keep learning. I suggest looking into maybe embedded systems - Go pick up an [Arduino](https://www.arduino.cc) or a [Raspberry Pi](https://www.raspberrypi.org), and see what you can make with them. Try making a stack of Raspberry Pi's and set up a [Docker Swarm](https://docs.docker.com/engine/swarm/#feature-highlights) with them. Try getting into [AI](https://en.wikipedia.org/wiki/Artificial_intelligence) and make yourself a music generator. Since you've learned Morse, why not pick up a [Ham license](https://en.wikipedia.org/wiki/Amateur_radio_operator). That's a whole 'nother world. Why not join one of the [Python projects](https://github.com/trending/python)? Or any one of the [Open Source Projects](https://opensource.google.com/projects/explore/featured)? You may have challenges, but there are answers. First thing to do - smile. Second thing to do - smile. Third - Tuck chin and enjoy yourself. 
It seems like a bad sign that it's had open PRs for months.
1. Flask is good and has good tutorials and documentation. The official tutorial should be enough to get you started and port your site over. I haven't really used any of the other microframeworks. 2. I suppose you could but not sure why you would want to? What do you have against frameworks? Are you just trying to reinvent the wheel for fun?
Bet it didn't take that long to make though ;) 
It does run in the browser, but you can make it a "standalone" app by creating a shortcut that opens into a fullscreen window (and has its own place in your app dock). In reality, RStudio is also just an HTML5 app packaged very nicely to run in its own window. It's not really the same as RStudio, because it's based around the notebook concept. If you like notebooks, you'll probably like JupyterLab. I consider the main features of RStudio to be file editor, console, variable viewer/browser, plot viewing, file management. If you want all of those things, go with something like Spyder.
If you're patient enough to read through a series of guides, this website is by far the best and most concise (also most encompassing) explanation for using git and working with GitHub (yes, there is a distinction!) https://guides.github.com/
BS4 is so nice. I recently used it to scrape a page for a random sample of audio files organized by html header (like, h4 I believe?) then download said files to be used for training a NN. Was only like 30 lines of code.
Thanks to the awesome pyca, we also have [PyNaCl](https://pynacl.readthedocs.io/en/stable/)
definitely interesting to me
The dry sarcasm is strong with this one.
Perfect. With coding patience is a requirement lol. Thank you very much !!!
Yea git is such a fundamental thing to know now days. In fact, if you're going to be doing any work as a developer (professional or leisure), you can't really get around using source management of some kind. It used to be the case where you had a couple different source management tools, like Mercurial, Fossil, GNU Arch, the one in Visual Studio (VSTS I believe?) but now pretty much everyone afaik has moved to git.
Why not libmagic, like https://github.com/ahupp/python-magic ?
I'll get stuck into it then. Thanks for the advice and help !!!
Awesome thanks so much !!!
Plenty of solutions, but this should get you started. Just replace urllib by requests. http://chriskiehl.com/article/parallelism-in-one-line/
Wow had no idea rstudio wasn't standalone, they've done an awesome job 
I've used selenium, would recommend
If my libraries reading list weren't 50 items long I'd get on reading about BeautifulSoup right away.
I checked some of the other references in this thread, and PyNIO doesn't have a windows build. GDAL can read GRIB files. All of these are easy to import with conda. PIP may also be okay, but I haven't used that for these packages.
You might find the tools you need here: https://blog.dominodatalab.com/interactive-dashboards-in-jupyter/ https://github.com/jupyter-widgets/ipywidgets 
I basically cannot use anything that's not ptpython anymore (it has a phenomenal vim mode!), so I would love to use this if it actually worked in all the normal ways that normal pdb works. I get the following when running attempting to use it through pytest &gt; assert stdout.isatty() E AssertionError and recall having had visual errors when running it under other contexts I which can't recall.
Take a look at Kivy.
PyQt is what OpenCV supports.
I added a screenshot to the readme just now
I'll think about that if the AREPL gets any popular, but right now I really need users. No point in developing something that's not going to get used, and I've already put a lot of work into AREPL.
1: read the sidebar 2: /r/learnpython 3: read the sidebar there, too
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world I thought this tutorial was fantastic for someone wanting to learn web app dev in Python. I absolutely learned quite a bit from it. It doesn’t use MySQL, but SqlAlchemy for logins and such, however I still think it’d be right up your alley. There’s an older version of the tutorial around if don’t want to wait for it all be posted(or you can pay for it). 
I really like it! My only complaint is that because it's newer there are fewer tutorials / examples of making JS extensions. It already feels as good as the vanilla notebook and has a lot of promise to increase in usefulness.
I’ve been looking for just this. Thank you!
No need to chose. Write performance-senitive parts in C++, and glueing code in Python.
Can you point to a more successful Python GUI app?
Thanks! I will check this out.
Can you point to a successful pygame app?
The problem i'm having is the turtle.goto((x1 + x2/2) , y2) line it's not forming a correct triangle but like a slanted one. 
I've read about that in the article. I'll have to practice a good bit and get used to git.
Yeah this may be how I have to do it. I was really hoping there was a package available that could do this because I need to perform this affect on a half minute video clip. I'll keep this in mind though, thanks!
out of curiousness i want to ask why use python instead of video editing software?
Yeah, it's something that you have to force yourself to do at first then you get used to it. TDD is the exact same way.
I would be open to it, but I don't know of anything that will allow me to programmatically input x,y, and radius coordinates to be manipulated frame by frame. Do you know of anything? Ideally free software
Writing an avisynth script to overlay an image on the video, then re encoding the video might work? I have done similar things with overlaying an image PNG as a watermark, not sure if this is the use case you are looking for.
i dont know if you could programmatically input the value. But as u can use blender which is a open source suite mentioned that the video clip is half a minute. Check if this video will be of any help https://www.youtube.com/watch?v=_06cWLUZ_Bg 
"Hello World!"
I really think that using Git via command line would be a lot easier. Because I am on Windows, I am pretty much forced to use the Desktop client. The command line toolkit for Windows wanted to modify some dependencies and replace some functionality and I figured I'd rather not. It's kinda frustrating for me because most of the support out on the web is for the command line and not the desktop client. I think I'd like it from the CL perspective, though.
A script that takes in a program file (text), appends four spaces to each line and adds it to the clipboard so I can paste it into stack overflow without having to do the shitty four space per line of code by hand. Plus it adds the right language tag for the syntax highlighting. I need to add it to pypi
You try the free course on Coursera and Udacity. If you want some certifications and improve job prospects look for Upwork or Freelancer. If you want to learn python seriously then I suggest taking the paid courses on Quantra or Udemy.
You may want to look into [IronPython](http://ironpython.net/), which is a Python interpreter implemented in C# and integrated into the .NET runtime, as well as [PythonNet](http://pythonnet.github.io/) which allows you to script calls to the runtime (ultimately though you're calling things implemented in C#). I know of no other library or framework that wraps .NET or any that allow WinForms development directly.
I guess at that point, there's no use in not using PowerShell. Most of the tools I write (I'm an analyst) are for Windows and I default to ol' reliable. Just looking to branch out my skills with Python in practice. Thanks for the advice and insight.
I've got a script that is attached to a shortcut. I click on it and paste a youtube url into the cmd box. The video clip automagically downloads onto my plex server for later viewing.
There are *lots* of reasons not to use PowerShell, but I'll not digress. What a lot of people find is that Python is significantly more powerful at math, data cleanup and analysis, statistics, etc, then you'll ever come near with PS ... it's a language that leverages a huge number of libraries and projects in specialized fields, and it's really that ability to find out that you need, say, computer vision and TensorFlow and regular expressions and, for whatever reason, a bunch of crypto primitives and a basic socket server just to complete a job, and still be *able to do so*, that makes Python shine. Compared to all of that pulling values out of a form is kind of a pointlessly unimportant task ... use **tkinter** or **pyqt** to ask the user the question in a nice GUI, or if those aren't nicely native enough shell out to one written in native form (like a PS script) and just parse the results, but the point is it's (often) best to flex the power of Python on manipulating the values that form holds when the user hits the submit/Ok button, rather than on building the forms themselves.
Of course if you aren't coding in something you are going to hate on it.
I couldn't agree with you more. I know a few people, myself included, that are into "Big Data" analytics. Python and R are leveraged heavily in that aspect. I am more in the security side and Python seems to shine there, as well as my hobby, embedded systems. So, there have been many, many reasons to start learning and becoming proficient in Python. I just learn far better by use and development rather than the myriad of courses and freeware online. If you humor me, I'd like to know why you would think PowerShell shouldn't be used? I know it very, very well and is like to hear outside perspectives; maybe you might provide something I hadn't considered. Is it that PS lacks the analytical capability that Python possesses or do you just think there is some intrinsic or inherent issue with the language? I agree if it's the former but I'd like to hear your thoughts if it's the latter. With a username like that, you must be either a pilot or bosun/quartermaster, right?
Yes - the same features that make Python a delightful experience for small projects can make it a nightmare for large teams and projects that last a long time. When you look at some of the 'ugly' features and verbosity of languages like Java and C#, it's worth noting that they were designed by experienced language designers with a specific audience in mind: Bit enterprise IT teams. Interfaces don't exist in Python but they are a foundational concept in Java. They are a great way for teams to programmatically specify how modules interact with each other. Sure they don't solve every problem but unless you have a feature like an interface you will probably have to reinvent it next time you want to agree the way India team's module communicates with Brazil team's component.
Make a class with abstract methods in Python then. The only difference is that it's not called an 'interface'...
Yes - it goes some of the way to solving that problem. Unfortunately it's only validated at runtime so you might not know that something can go wrong until it does go wrong. Python has a whole of coping strategies like this that sometimes kinda work but at other times leave a big gap compared to the safety features of other modern languages. I'm not a python hater - I use it every day but you have to recognise that the language has a sweet spot for smaller, time-limited projects and can become painful for bigger long-duration projects. You can also see that other languages have features which seem painful for small projects but really pay back as the project scales up.
A script that incorporated pylatex and scraped data files from a research device in my lab and then generated full reports on the entire data file; as in filtering the data, breaking it into individual experiments, running a model-parameter fitting algorithm (the one in scipy) then dumping the whole lot into a nice template I'd created and emailed the report as a PDF toy research team. This script saved me literally hours upon hours of work I'd have had to do for a series of 10 experiments (each which generated 2 or sometimes 3 data files)!!
A course on Udacity
Yeah - type annotations are a big help but only one safety feature. And unlike Scala you can still run Python code with completely broken annotations. It's also not a well supported language feature - most IDEs don't validate python type annotations all that well. My point is that python has work around and optional features that help projects scale but it's still a pain compared to static languages. I think if you know your thing is going to end up big you might be better off starting in a more scalable language
(x1 + x2) / 2
It's about the interface, not about the execution of code. I think it's poor JavaScript optimization, the execution of the code does not make any obvious differences, although my functions are slightly too long and too dependent on external input to test them with %timeit
Here is my repo https://github.com/cprogrammer1994/custom-python-launcher Unfortunately I did not find time to add a README yet. I will add one around the weekend, and explain the code in more details. I hope you will find it useful.
Awesome work and thanks for making it available online!
I've worked on parts of the OpenStack project which is all opensource, all Python and pretty big. https://github.com/openstack. I believe Python is fine for either small or big projects. ---- I don't think the dynamic typing of Python is any different in a small or big project. What difference is it if you read code in a codebase of 1000 files vs 10 files, and you find a method with 2 parameters which you don't know? In both cases you either a. Debug and check the variables b. Check out (read code) who calls the method. If you have issues for a or b because the project is big, then I think the tools you use are the problem and not the language. - I'm not saying that code you read for the very first time in Python is as easy to understand as in typed languages like Java or C#. But I say that there is no difference for the size of the project. The initial 'getting used to' the codebase, working your way into it etc is a bit of a steeper learning curve than typed languages. But once you worked with the code for a couple weeks, the lack of typing has nearly no impact anymore. ----- The readability of the language is a good reason to use it, see (obviously biased, but still he explains it well): https://www.youtube.com/watch?v=OLunZGQQ5vg ---- The language also has an impact to how many people (developers) you can reach - I'm thinking open source contributors here. ---- Technical reasons exist to either do or do not use it but, again, that doesn't matter for the size of the project. 
Trying to classify music genre just by looking at the audio. I'm at ~90% accuracy, hoping to get better.
I built a medium (~10k lines) project in Python that runs on production servers. Worked with two other people on it. I'm happy I chose Python. The result is stable and elegant, and with PyPy it's reasonably fast. The extra time we would need to rewrite it in C++ or Java would be much more expensive than getting a better server. But if I had to work with 30 other people on it, I might have been singing a different tune. Especially if the management isn't very capable.
Oddly enough no, my work has revolved around moving cameras, first in film production and more recently in visual effects, and the camera works like a airplane, you always need to know its yaw, pitch, and roll... also my father was a flight engineer, and instilled in me a lifelong love of aviation and fear of flying. As for PS, my main critiques are entirely about its limitations. It's a shell and scripting language, and while I sincerely question the virtue of trying to make a better shell by tossing out pretty much everything and starting over -- particularly funny from a company that's intentionally hobbled itself by trying to remain backwards compatible *forever* -- it's a seemingly pretty valid and expressive shell language. As a REPL for numerical work it leaves *a lot* to be desired, especially when compared to iPython/Jupyter, but as a shell it's fine, even *good*. In the end though it suffers the same fundamental flaws as any shell scripting language; it doesn't have numpy, it doesn't have pandas, it doesn't (for that matter) have requests or flask... arguably one could write versions of all those things specifically for it, or wrap them with it, but -- well -- *why*? Especially when Python's already considerably more powerful, never mind easier to read. As a shell, it's fine ... I can see ways it improves on the various Unix shells, although I do get the feeling it was written by people who tripped over and wanted to fix the 30% that POSIX gets wrong before fully understanding the 60% it gets right, while also, for some blasted reason, thinking that what the world *really* needs beyond Yet Another Shell (YAS) is *more* verbosity and *especially* MoreCarpalTunnelSinceCamelCaseIsThePerfectRecipeForRSI.
Of course. For example http://yeco.io . You can find more examples in the Kivy WebPage.
Have you heard of ALT+drag in notepad++ or any IDE?
I don't buy the argument that compiling substitute tests.
Where does s come into play 
So linting
Sounds like you might want to look into [Software Design Patterns](https://en.wikipedia.org/wiki/Software_design_pattern).
I'd say 10kloc is still well within the small range
hey jadenpls :) Direct from the docs: codecs.decode(obj, encoding='utf-8', errors='strict') Decodes obj using the codec registered for encoding. In this case the object is s.
I worked on a web-based project that has (if you combine all the repos together) well over a million LoC. It had it's issues but Python was not one of them. If you would do some searching you can find that the majority of the biggest companies extensively use Python. My guess is that all those who think it's only for a few lines of prototyping never actually worked on a big Python project.
Now that's just being an asshole.
Do you recommens python as a first language to learn?
I've wrote a lot of things, mainly to learn python as a language or simply save some time by automating something that will be done only once and forgotten, but from things that I've actually kept it must be a simple algorithm that procedurally generates "Invader-like" icons which you can actually see on some websites, as they are used for the default avatar in comment section. It's simplicity (which goes well with python) and what it can produce still amazes me. [Here's what I'm talking about](https://imgur.com/a/ULo5H). [Source code of current version](https://hastebin.com/sewirimuni.py). If you don't really want to read the code and just want to understand it, read below. It uses, in my opinion, simplest and very common `white noise` ([for those who don't really know](https://s3.amazonaws.com/spoonflower/public/design_thumbnails/0085/3016/r1758584_rrwhite_noise2_shop_preview.png)). For every pixel in image, it has 50% chance to be white, and 50% chance to be black, I hope that's self explanatory. This noise is taken at a very low scale (I chose 5x5 pixels because I just think it looks good enough, you can pick 8x8 and use it in a game for example, size doesn't really matter), because that's where I found that most interesting stuff is, the bigger the image, the more white noise you will see and the less the icon will resemble something you could think of an already existing object such as jellyfish, skull, flower or a tree. But just noise is not enough, if you look carefully, you might notice that it's actually mirrored, as for some reason we more easily find a meaning in something that has symmetry, just like this white noise. Algorithm is as follows: define symmetry line loop through the grid if x is less than symmetry line: colour a pixel with selected colour (50% chance) else: colour a pixel with a colour that [width - x - 1, y] pixel has Now you have one of icons (possibly) shown in my example. I am thinking of expanding on this and writing my own library for generating sprites which is my next goal and I chose python since it's a simple language, though I'm already happy with what I've got and I hope it will just become better from now on.
That's still small
Use Pillow (I think that's most commonly used imaging library in python). Load up a font you like and render it on the image, save the modified image and then switch your wallpaper to said image.
Tkinter. It's simple, probably most simplest to install (if you have python it's already installed) and I think that's the best choice. Also it's part of standard library so it will run on any computer that has correct version of python installed with no additional packages required.
Next step is to but it on a webserver so you can access it from your phone, for example :)
&gt; wish list &gt; * port to a Windows executable not requiring the installation of Python Install pyinstaller. `pyinstaller --onefile main.py` (main.py is the file you run when you want to run your program) You're welcome.
I wonder how many loc would big project have then. 1M?
That's what she said.
Agree with all this strongly. Also, you end up having to read a lot of the implementation in python because of duck typing and lack of any type checking. I hate this personally but I think I’m in the minority. A team can also easily create divergent coding styles as well for erroring. This is often overlooked but in a large code base it’s super important for scalability. You can’t have one person deciding to return none, another throwing exceptions, etc. Pythons large package base is a blessing...and a curse. You can quickly start depending on a project that was written with high technical debt. This is due in part imo to how easy it is to publish a new package. Again: blessing and curse. I’d also mention that if high reliability is a goal strongly typed languages are the best. You bear pain implementing because the type checker finds all sorts of things that are wrong and prevent it from “working quickly”. See Jane street (a high frequency trading firm) on why they use ocaml for example. Or 0install for a comparison of moving from a python base to a “hard to learn” language like ocaml. (I can read a type signature with zero comments in ocaml and still know very likely how to use an ocaml api, for example. But there is a learning curve...) Pythons wheelhouse is small projects and where you need to have code trivial to read by even untrained people. These features should not be underestimated. Final note: great programmers can do magic in any language. Consider whether you are dealing with great programmers or unknown programmers is important. 
Ironically, Quota runs on python. Is that considered big? Some other things that run on Python: YouTube, Google.
Since I know it's coming, how about a video of YouTube's presentation at pycon about scalability: https://youtu.be/G-lGCC4KKok
Come on u/erez27, did you really think you'd get away with claiming something of yours is bigger than small in a forum full of dweebs?
I measure my code by number of op codes after compiling
You use php don't you?
I wouldn't claim Python is "good only for prototyping". But does the lack of type safety hurt on big projects? Yes. Definitely. You have to spend a ton of time on writing tests for things that the compiler can guarantee for you in other languages. You hit bugs that simply can't happen in statically-typed languages, such as times when you get the wrong type of string and you don't get any errors until someone puts the wrong character in, or when a function expects a list of strings but actually just gets a string and it still works, just not doing what you expected. It doesn't help that Python facilitates developers to be even looser with types than the language requires, such as encouraging the passing of data around as dict/list JSON-like lumps. Python programmers often seem to revel in this act of dealing with opaque lumps of data where the schema is implicit in the parsing code, despite it being utterly unmaintainable.
Uhhhh, tasty! Good work, thanks!
Lol no. Just have a brother who does Java and he thinks python is for kids, not adults.
It depends on your carreer path, but I recommend you to start with a more strongly typed language. Python is very easy to learn, but types background is essential since it helps you to understand better possible errors in your code and also opens you gates for learning more programming languages in the future. After that, you will find Python even easier and understand better its pros and cons. 
I mean, I get it, I don't like kids either, but that seems unnecessarily cruel. 
Haha no problem. I link it as that has the details 
Got it mate
I work on a ~200kloc project that is ~15 years old. It's fine. 
😎
I've worked in several organizations with millions of lines of code in python. Works out just fine. No effective difference I could see between that and java shops I've worked on in the past.
For the one trillionth time PYTHON **IS** STRONGLY TYPED,C IS WEAKLY TYPED. GOT THE MESSAGE NOW???
&gt; lack of any type checking When was the last time you read anything detailed about the development of core Python?
&gt; No effective difference I could see between that and java shops I've worked on in the past. Are you saying that your productivity in Python is the same as that in Java? :-)
https://pythonconquerstheuniverse.wordpress.com/2009/10/03/static-vs-dynamic-typing-of-programming-languages/
Python is "strongly typed" only in the sense that typing errors are prevented at runtime and because it does implicit conversion, but it does not enforce type constraint rules. A more strongly typed one good for learning is Java. 
I raise you the [IOCCC](https://www.ioccc.org/), clearly you can not use C for anything because you can do [that](https://www.ioccc.org/2000/bellard.c).
It drastically cuts down the number of tests you need to write. There's a nifty idea of ["making illegal states unrepresentable"](https://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/) - you don't have to test if some object is invalid if it's *impossible* to construct an invalid object. If you have a strong type system, you can enforce a lot of constraints (not all of them) at compile time. There's also a secondary benefit that it's easier for the coder to understand how your program works. The coder doesn't have to look at a field called `phone_number` and trace through the entire codebase to figure out if it's represented as a string or an int.
Thanks, I will check it out - looks promising!
Python is a really great language, irrespective of the project size. But on large project, and this rule works for every languages, you have to be really careful on your developpement process. Writing tests, having a Continuous Integration process and documentation are mandatory if you don't want to fall into a LOT of legacy and unmaintanable code.* * Learnt from a living 100K project in production.
Thanks for the info! I do want queue functionality in a couple special cases (like storing sequenced outbound messages in the event of network failure). I will check out MQTT too!
It's old, the author was Tim Peters, famous for the Timsort algorithm and the Zen of Python, and I have a very strong sense of deja vu.
I love how much this violates its own message.
No, Python is strongly and dynamically typed, end of story. It's also moving towards type constraints but many anti-Python types (groan) don't like to discuss that as even they must realise that it means Python will be strengthening it's grip within the world of computing, in stark contrast to their own weakly by statically typed languages. Next thing you'll be telling me that C is strongly typed because it's compiled, hence once it's compiled and linked you go down the pub because you don't have to test C code, whereas for Python and other strongly, dynamically typed languages you have to stay at work to do the testing. Don't start me on C's famous off-by-one errors, I'm still waiting for an explanation as to how the compiler allows this to happen, and how going down the pub helps find these errors which occur far less frequently in Python.
Python is for the children! RIP ODB
why not use pipenv
&gt; The initial 'getting used to' the codebase, working your way into it etc is a bit of a steeper learning curve than typed languages. I just wanted to mention that you can make excellent type annotations in Python3 using the newish `typing` module. I've been using it for about a year and it didn't take long until I started writing the annotation intuitively. I think the annotations really worth it. Whenever I open a project, that I haven't seen for a while, I'm really happy to have them. A good IDE will show you function parameter types when you call a function. It also warns you about type errors right away. Etc. 
Has anyone mentioned that Quora is on python. As well as reddit, Instagram or pinterest?
I'll be honest I dont read documentation back to front much anymore. Usually I'll just google the use case or find the method I need. 
I'll be honest I dont read documentation back to front much anymore. Usually I'll just google the use case or find the method I need. 
In the list comprehension on the last line.
Java is for sociopaths
Google is very much a Java shop though....
You can compile your libraries with Nuitka, and package the lot with cx-freeze. Then you don't have to worry as to whether the user has Python installed or not.
Usually it end ups violating priciple of Robustness "Be conservative in what you send, be liberal in what you accept" - unexpected input crashes app. And developers tend to be wayyyyy to optimistic when defining every possible input... ;) I've seen this strategy fail just too many times :)
/r/learnpython 
10k is your average hobby project 50k is a hobby project that has been around for some years 500k is some regular commercial project or one of the bigger Open Source ones (e.g. Gimp, Inkscape) 1M+ and you are entering enterprise territory For Python specifically you can probably cut the numbers in half.
this clears my thoughts.
Python can't handle unexpected inputs either. Worse, it's hard to tell *what* the expected input is!
I currently work for a client that has a huge project with many modules, each one nicely split into packages and as a guy that has worked with many technologies, I've never seen more beautiful architecture project than the Python one. So my experience tells me - it's all up to the developers behind the design.
probably not the best place to ask this. Python was my first language though and I still use it to this day (though I do use C# and C++ too)
My beloved C is for bigger projects...while Python for middle and smaller projects. Just deal with it!
updated post, my mistake :)
Python limitations are what makes it hard to maintain and tune big projects. It is not about people or knowledge... Just deal with it. C + Python + ShellScript = Nirvana!
Yes, if your python code is accepting bad json, you certainly do have a problem :)
Head down to the Winchester and wait for this to all compile over?
At the time my gf's father asked me to help him with some work at a factory he was working on. Basically, he was going to do a full pen test on their internal server to see if they were fit for put it online. He wanted me to help him to interview dozens of employees and add the info of each one in a single excel. I was reading How to Automate Boring Stuff with Python and suggested to make a script to automate the work, so he did a form on word and I started to create a script to read all the documents on the folder and scrape the data on the fields to write as a .CSV Took me a couple hours to make it and install on his Mac, but it worked as a charm 
I did larger Python projects and learned that unittesting + code coverage reports are very important to detect errors, which in a compiled language the compiler would detect.
I wouldn't use Python. There's already a tool for this called bginfo that's part of the sysinternals suite you can download from Microsoft
I repeat - "Be conservative in what you send, be liberal in what you accept". It sounds trivial, but violating it produces a lot of problems. :) And here's one anecdotal example of static-typing approach: Third party API was giving parameters snake_cased, while JSON serialization framework was expecting all variables to be camelCase. How big problem it would be for python? I guess just a matter of few string renames. How big of a problem it actually was? Two senior devs spent nearly two weeks, changes included rewriting part of web framework. In the end it still produced way to much unexpected errors. Result was - python proxy which translates variables, done in about an hour. How stupid is that?
It depends where you look, Python, Go, Java, C++, JS and others are used quite extensively
Check out wxPython.... it has a great demo program which showcases what all wxPython can do, and it also gives you working sample code for each demo example. I am not sure about winforms ( no idea what that is), but it has all the kinds of UI elements you need in there.
And it's triggering that it needs to be done because they could just move their lazy asses and make tab a button for it, not like anyone uses it for anything else at least on SO, let's be real...
divide and conquer - split the project into smaller and easier tasks that you can give to your less experienced colleagues. Meanwhile you can connect the pieces they've built and tackle the hardest problems in the project. This is my approach when I code with less experienced people. 
I find this funny, because the engine that Quora uses is built in python.
Thanks, that does seem like a very good approach.
Sounds like somebody stills writes monolithic codebases and not microservices.
https://en.wikipedia.org/wiki/Unix_philosophy &gt; Rule of Modularity &gt; &gt; Developers should build a program out of simple parts connected by well defined interfaces, so problems are local, and parts of the program can be replaced in future versions to support new features. This rule aims to save time on debugging code that is complex, long, and unreadable. Most complaints I've seen about Python (or any language) are when it's a huge spaghetti mess. Everything is put into a single .py file that gets run. Or 10 lines of "from ___ import *" at the top. If you structure your code correctly it should have no problem scaling. It also makes it easy to replace with faster languages if you need it.
There are two types of programming languages: the ones everybody complains about and the ones nobody uses.
I've also worked on something similar - ~50k lines in a team that had ~5 people at a time usually, about 5 years old codebase. Python served us well, although bugs that could be solved by type system happened very often :( Aside from that, experience was superb.
You think the assignment is about code but it is really about collaboration.
You can use the 'import' statement to pull functions and variables from different files. # wrapper.py # Assuming that the files randomnumber.py and passcode.py # are in the same directory. import randomnumber import passcode guess = randomnumber.generate() # Assuming there is a function called generate in randomnumber.py passcode.enterPasscode(guess) You really should us r/learnpython for beginner questions like these in the future. 
Great article - thank you for sharing it! If you're looking for the specific code, it should look something like this: ` import urllib2 #Or whatever library used for network requests from multiprocessing.dummy import Pool as ThreadPool #Responsible for creating the Threads for concurrency urls = [url1, url2] pool = ThreadPool(4) results = pool.map(urllib2.urlopen, urls) #Opens the URLs in their own thread, returns results pool.close() pool.join() #Wait for everything to finish `
 No, I do know that this is about collaboration. I'm trying to find out about how to divide the project up so that my team members with varying experience can satisfy the success criterion of contributing to the project. It doesn't matter how familiar I think I am with OOP if I'm the only contributor.
&gt; although bugs that could be solved by type system happened very often Do you have any stories or examples? I'm curious because besides the fact that I always hear these claims I haven't actually run into any such problems in my experience with transitioning from C++ to python. 
I'd agree that microservices can probably reduce LoC into the 10k's but microservices are only relevant for web apps. If you're doing something else (like a desktop application) then it wouldn't be a fix. Not that I think this is a particularly large issue though. Reading the quora answer he says python is only acceptable for projects below a 1,000 LoC which is just laughably and demonstrably incorrect. Most production Django sites probably blow past that easily.
For a lightweight RPC library that can mostly abstract away the whole RPC mechanism, consider using [Pyro](http://pyro4.readthedocs.io/) With it you can write remote calls just as if they were normal Python method calls. In the upcoming release, it can also directly use the communication channel set up by ``socket.socketpair()`` which is especially useful in this scenario.
Python can quickly become hard to maintain if you are not careful to implement some restrictions as to how the developers are managing it. Examples: 1. Static typing - lack of it is very useful while prototyping, but it is a real problem to maintain legacy code when it does not point to any types. For me, personally, if you are not using Python 3 support for type notation and mypy for static analysis - you are in for a big surprise when trying to cope with a large codebase. 2. Package management - again, what is useful in Python when prototyping and scripting, is rather a large issue when working with a large codebase. Unfortunately - I don't know any viable solutions to this one. Summing up - the freedom, that the Python gives you might be your project's doom. The lack of built-in restrictions should be replaced with strict project guidelines. 
Seriously! Stack overflow of all places.
Vim + Tmux yo
I think if you're writing a desktop application then you're *already* not using Python since you probably want to end up with a native executable. But what do I know?
Python has its place. It’s capable at all the right things our massively scaled cloud deployment requires— simplicity of packaging and deployment, rapid prototyping that can be made production-ready with a few updates, a ridiculously useful interpreter that can be run on a live server for debugging. I love working in Python. Python is not suitable for real time applications, but most people don’t work on real time applications. 
That's not a knock against static typing, that's a knock against using a json serialisation framework that doesn't accept valid json
Ironicaly discord, which is for "gaming" has \`\`\` code block in which pressing TAB automatically puts 4 spaces...
But why couple that straight to the core of your code? Instead, they should be dumb data structures that you can change how input goes into them. It's like the adapter pattern, just applied at the json boundary. 
Let them write the code, and you work to help them, answering questions, giving advice when they go wrong. That way you are all working on things you struggle with - them on the code, you on the working with other people. Loads of people can code, but not many people can work effectively in a team. 
You still think it's about the project. It's not about the project. The project doesn't matter. 
There are lots of python desktop applications. Like the Red Hat installation program (which is ~80kloc) or ansible or salt and so on. Deployment and release is a separate issue from development. You can easily roll an installer that installs a custom python interpreter and runs your application from that or that comes bundled with a standard python interpreter. Not entirely sure having a native executable is helpful. At any rate, that would also be true of Java and there's definitely no shortage of java desktop apps.
Thanks for the input. That makes sense and I have that *mostly*. I guess where I'm getting trouble is between the "build your main that will call input functions", and where the actual "processing" would go and where in the "main" of calling those said portions would go. For example, I have the log files, excel documents, and database in this case. So I build a class for the reading (input) of the log files. This class would take a parameter of a path to the file/directory. This class would be my Python object representing my log file. Build a "parser" class for the log file. This class takes in log file python object, does all of the parsing and translation work of the file and represents the parsed log file. Repeat process with excel documents. Have an input/reading class, and then have a parser class to "parse" the excel documents. Now we need database I/O. Have SQLAlchemy model and make I/O class for that returns data from that table. However, now I need stuff to call all of these and in addition have it based on what is in the "parsed" objects from the excel and log files. This simply results in a main file, doing stuff like... logf = LogFileInput('logfile.log') parsed_log = LogFileParser(logf) excelf = ExcelFileInput('excelfile.log') parsed_excel = ExcelFileParser(exelf) melded_data = MeldedData(parsed_excel, parsed_log, dbsession) StoreMeldedData(melded_data) class MeldedData(object): #looping over data from excel files #grabbing data from log files #querying database based on earlier pieces of information found in log files #continue on repeat to build entire set of melded data... The "MeldedData" class has to interact with the database, excel, and log files dynamically, I don't know everything up front from the database (e.g. complete dataset being 200M records when I only need to query for 2 items). The alternative is to have a MeldedClass that directly calls the I/O classes but then that isn't ideal to me either as all of the actual "work" is being done in the MeldedClass. I guess my biggest issue is the definition between "representation" and actual "function". What I mean by that is I have a set of objects that "represent" my log file. Each row for me in my example is a parsed set of values. This python object "represents" my log file. However, I have to have something that actually functions on that data. The same goes for the Excel and database information. Its easy to "represent" the data in a python object but when it comes to actually "functioning" on the data together is where I start to have a breakdown, second guessing the way I should do something. Like where is it *actually* appropriate to doing the "ok, get the log file, parse the log file, capture excel file, parse excel file, perform some logic based on log file, excel file to pull data from database, perform parsing and creation of that object, then perform work to send to database". What you seem to be describing is representing the data but my issue is the "functional work" (not sure how else to describe it) on the data. 
thanks for the info and i will note to ask these questions in the other sub reddit.Thanks so much
Python can be compiled down to the same intermediary bytecodes (the things that are then compiled to assembler by compiler backends) as all popular system languages, meaning C, C++, Ada/Spark, Fortran, Go, Rust and the likes. Python libraries can contain, or be fully written in, other compiled languages, like the ones listed above. Python libraries can also be written or contain parts written in languages that require a VM or RE, such as Javascript, Froth, Erlang, Java, Scala and Ruby. Though, outside of exceptional circumstances or queer python runtimes (such as jython, which runs on the JVM), this will be an uncommon sight. As such, python can achieve the functionality and speed that any other language can. The same can be said about most modern languages. That being said, there are specific usecases where other languages would be favorable. For example, one would often write a game engine in C, C++ (or more recently Rust), since the APIs you'd have to interface with (most commonly openGL, DirectX and Vulkan), integrate more seamlessly with code written in those types of languages. The code and compiler optimizations you have to take into account are more easily achieved and, the programming paradigms that are being applied (e.g. data driven design),are easuer to muster when using those languages.Those being some, but not all of the reasons. As to what language favors which usecase. That is a very very long debate and seldom are there clear winners. A lot of people use python for a lot of things, so it's probably good at doing a lot of things, otherwise "natural" selection would have taken care of that much like it did with things like Cobol or Coffeescript or Pascal or Basic or Ruby.
I manage dozen of python developers. All the company business runs thanks to python. I believe there is nothing python can’t do. But yes, you definitely need to enforce standards around the use of python and a proper architecture to avoid ending up with a big mess - guess it’s the same as with other languages.
It's also funny because Reddit, Instagram, openstack, and plenty of other big sites use Python. And they aren't making kid money either.
[Here](https://gitential.com/accounts/2/projects/29/share?from=2017-06-01&amp;to=2017-08-24&amp;uuid=27c026af-b978-4853-b6b6-8ba19ba2819c&amp;demo=1) is hosted solution for visualizing various metrics.
Longer explanation (disclaimer, I suck at all this, so anyone feel free to correct me) We talk about asynchronous code for IO. During IO access (for example, waiting on a hard drive, or waiting on a web request), your python process is just stuck here waiting. If you do 10 web requests in a row, almost all the time your python process took was spent waiting for the request results to come. So what you want is to execute a request, then execute another request without waiting for the previous one's result. That means you want to do asynchronous calls. To accomplish this goal, you can use python processes or threads. In python, the difference between thread and process is that a process will run in a subprocess, and you can have multiple subprocesses that run at the same time (your computer executes multiple pieces of code that run at the same time). With threads, you have a single piece of python code that runs at a given time. But it is still useful, because you can have thread1 that requests an url, and while waiting for the answer, you can have thread2 that runs and requests another url. Which means your two calls will effectively take 1.5s instead of the 3 seconds it takes now. Note that asynchronicity is a different notion than concurrency (multiple entities that access a single resource at the same time, for example several people that access the same database at the same time), or parallel (you split your work on several workers, but not necessarily IO-bound work. For example, if you want to encode pictures, or movies, you will be CPU-bound, not IO-bound. So using python threads will be completely useless, but if you can split your work on several CPU cores, or even several computers, then you will do the same work faster). In case it's not confusing enough, these notions are not mutually exclusives... But as long as you understand what's going on in your program, and what solution you have to use to solve your issue, don't get too hung up on semantics, leave that to pedantic people. You talk about using asyncio for that. I can't really tell, because I've never used it, but from what I gathered, the goal of asyncio is to have a module that can handle any type of asynchronous IO. It's building blocks for you to create your own set of functions to deal with async, depending on your needs (if someone has more insights ?) One simple abstraction you can use is the concurrent.futures module. Complete code : from concurrent import futures import requests urls = ["https://www.google.com", "https://www.stackoverflow.com"] with futures.ThreadPoolExecutor(max_workers=8) as executor: # use whatever number of workers that suits your case, at least 2 result = executor.map(requests.get, urls) # no error check or anything and we wait until we have the answers from all requests. You might want to use futures.as_completed # now do your stuff. Careful, result is a generator, you can iterate over it but not use random access for elem in result: if elem.status_code == 200: print(elem.content)
I'm not justifying, or trying to justify, anything. Like I said in the part you quoted (but didn't apparently understand), my query was what the point the poster was making. *My point* was that I don't understand how you can fault the language for being flexible enough to write bad code, or in the analogy, to speak it badly. Especially in the context of the OP, which was is the language suitable for large projects. 
My code examples are formatted but do not show up correctly above...any suggestions?
if you combine type hinting with a great IDE (pycharm, i'm looking at you), you can basically get the safety you want and avoid almost all runtime type related errors
No method on object Int as or string as int Name collisions on exceptions Those can all be caught by a compiler and in python show up as issues at runtime
Actually for my own work I use Scala which does have multiple inheritance. Scala has Traits which are sort of like Java Interfaces. They really are a useful feature because they allow you to specify an interface without worrying about the implementation. The compiler will stop you from failing to implement the required messages.
Yes. Click the link right under the text box, the one that says "formatting help". It explains how things work. It's basically markdown, but with a few quirks. Source code can be written by indenting 4 spaces to the left.
Or just use YouTube?! 
&gt; If you have issues for a or b because the project is big, then I think the tools you use are the problem and not the language. What are some tools? My python experience in medium sized projects has been miserable.
There is some pretty significant sampling bias when asking if Python is good on the Python subreddit.
&gt;1M+ and you are entering enterprise territory or the really big Open Source ones (e.g. Linux, Firefox) Linux is 20x above that
[You right, homie](https://madnight.github.io/githut/#/pull_requests/2017/4).
Yeah, it really depends since each crowd is different. I find them great for sanity checks, and instant help. Whenever I'm bored I try to go on and help others if I'm familiar with the problem.
Goodbye ReCaptcha
Old dirty basterd?
It's definitely an improvement but the type hinting feature really isn't a replacement for a real type system like you'd find in Scala. Type Hinting is great, it saves me a lot of time but if I was expecting my project to grow a lot bigger I'd want a compiler with very rigorous type safety.
I am getting started with Python 2! I bet it is a long journey that's waiting me ! give me some sunshine ^^
What's wrong with importing python programs you wrote.
I know of and have been lucky enough to develop on/with/for MANY very large projects built in python. 100K lines +. Anyone who tells you that it's not suited for large projects hasn't enough experience with python to make such a statement. 
[LOC in the Linux kernel graph](https://qph.ec.quoracdn.net/main-qimg-6aba9a43b379caa3c5a088dd6230481b.webp). Wonder what happened around the 3.0.0 release, that's a rather dramatic increase in lines of code.
 from ___ import * It dirties the name space. You can import something specific. But for anything that goes near 'production' I leave the full name space for clarity or use an accepted shorthand: import numpy as np not from numpy import *
Excellent idea as Shaun is bound to be in :-)
If those make it to run time then you need to revisit your build tool chain. 
Absolutely nothing. I think what OP was trying to say is that "from ___ import *" loads every name in that python module into the current namespace. This can cause names of functions or classes to conflict with other imports or code in the file you are currently working on.
WTF is Reddit, never heard of it?
Given million+ lines codebases. The pace of development is usually limited by figuring out how to fit the new bits into the code base and collaborating (i.e.: meetings) with other teams. Sure you might get a bit more productivity in the 10-20% of the work that's straight up writing code. But overall the benefits flatten out. At least that's my experience.
How is this a helpful comment? I'm open to suggestions... 
A big part of working with people is being able to empathize and understand that their current skill level is not a reflection of their overall ability to learn, but where they *currently* stand in skill. If you can teach yourself empathy (This can be difficult!) and connect with them on their level, it'll make your life a whole lot easier. You may not have time to read this right now, but I recently started reading this book on collaboration within teams (https://www.amazon.com/gp/product/B016NDL1QE/ref=oh_aui_d_detailpage_o04_?ie=UTF8&amp;psc=1) -- and it's helped me a whole lot within my own team. Cheers!
Sounds like something a decent test suite should have caught... 
Yes, all you have to do is write all the tests to catch all the off-by-one errors or similar that occur far less frequently in Python than C(++). Thankfully more modern languages do that checking for you but it's at run time and comes at a cost. Conclusion, there's no such thing as the perfect language so it's horses for course.
Definitely, you don't need to compile several lines just to do `hello world`.
Fair point. I haven't really worked on large collaborative projects, so I was genuinely interested in that point of view. Personally, the fact that I don't have to precompile my code is a huge plus, and as its usually just me and maybe one other writing it, type errors usually aren't a massive problem. I can see how that might be an issue in collaborative efforts where different coders implement in different ways. I'm still not sure I would consider it a design defect though, more like an 'I better understand what I'm asking for'. But isn't that the case for every code? 
You have to rely on a human to write those tests, and write them correctly. Inevitably a person will mess it up. 
I think the speed is good, but it really depends on how heavy of an operation we are talking about here - untill someone uses my app I don't have a good sense of how fast it needs to be. I did add a #$save feature, that lets you save a section of code so it doesn't get evaluated. Should be helpful in avoiding long wait-times each execution. Reading your files is fine - but writing them is not reccomended. Too easy to make a mistake with your code being evaluated live. &gt; os.rmdir("C:\important folder") &gt; \# oops, evaluted before they could add on \folderToDelete In the electron version of AREPL I disabled bracket matching so there would be a syntax error untill you type ) and are done with your expression. But in VSCode there is no way to disable bracket matching on a per-file basis. 😕 Maybe there is some hacky workaround I could do, like deleting the ) when they are automatically added.
I'm just saying that a language like Go has nice first-class support for producing a single executable build artifact. With Python, you have to roll your own. You *also* have to roll your own with Java, but the Java ecosystem has been trying to solve that problem a lot longer so there's more infrastructure for that kind of thing out there.
I hate these threads. It just turns into a huge "Python can do anything" circle jerk. Yes you can do big projects in python. You can do big projects in any language. In my opinion, Python gives a lot of freedom to the developer and allows you to write really bad code. Often times on big projects you will come to a point where you don't know the best solution, and you will implement spaghetti. I think this is especially the case for team projects. Nothing about Python makes it inherently bad for big projects, but there are definitely some things to consider if you have a big project planned. Languages like Go pretty much force you to do everything the Go way, all the way down to formatting, which cuts down on spaghetti and developer time.
I'll ask yet again, how does statically typed C help you detect the off-by-one errors? Answer, it doesn't. Really it's about time that this myth about static type safety was put to bed, the language first and foremost must be **STRONGLY TYPED**, just like Python.
[Python traits](https://pypi.python.org/pypi/traits).
&gt; You can’t have one person deciding to return none Fire them as they are not professional programmers. &gt; Pythons wheelhouse is small projects Complete nonsense and highly insulting to the many people who have commented here knowing that it is perfectly possible to build large, extremely successful code bases in Python.
Even if those numbers were recent, I think his point would still stand: Python # 3 behind only JS and Java would qualify as "easier than most other languages". Man, I remember when Python would be at the bottom of this sort of chart, dwarfed by Java, C#, C/C++. We've come a long way.
You can say the same thing about all code. If you trust the human to write the “real code” correctly then you should be able to trust the human to write test code correctly. Plus anything that a type system would catch is super easy to test. 
Yeah the issue is with `*`, not with importing per se.
I hear you but with deployment it's generally not going to be just a matter of running an executable and you're done. You'll usually need to roll some sort of installer (like a `.exe` on Windows, `.dmg` for Mac, or `.rpm` or `.deb` on Linux). Bundling an interpreter just changes the steps to build the installer. It won't be exposed to the user at all since you'll generally launch through a shortcut on windows or a `.desktop` on Linux.
For anyone happening across this, I was able to write a simple script that passes two command line commands to accomplish this. import subprocess python_bin = "/Users/eric/PyReports/vetest/test1/bin/python3" script_file = "/Users/eric/PyReports/BU/FC/script.py" subprocess.Popen([python_bin, script_file]) This works great.
You should have CI tools that are verifying these things far in advance of releasing the code. You should even consider git hooks to prevent developers from even committing the code until it passes static checks.
“Have the same capabilities “ is way too broad a question...any Turing-complete language would satisfy that, and there are some really nasty Turing-complete languages. Python will often allow you to solve a problem the same way you would in C++ but usually takes far less code because of its great built-in libraries and lack of strict typing. It comes at the cost of some execution speed which in general matters not at all, and where it matters you can solve it by calling optimized C/C++ code. 
&gt; It says init methods are not inherited. Yep, they're wrong, I don't know why they would say that. ['Inheritance'](https://docs.python.org/3/tutorial/classes.html#inheritance) from the Python docs: "if a requested attribute is not found in the class, the search proceeds to look in the base class". No mention of exceptions to this rule.
Proprietary and serving very specific purpose so I don't think it would be any good as open source
I've never actually used C for big projects. My feeling is that C probably brings in a whole range of new defect categories that makes it much worse for big projects than Python. I'm also happy to concede that no language fixes all problems. Solutions to certain problems make other things worse. Choosing between languages is therefore a compromise. In my experience, languages like Scala add a little bit of overhead that seems like a pain for small and solo projects but really pay back a lot of productivity for bigger projects. Python makes it really easy to get started but the difficulty ramps up faster as the LoCs and the team size increases. You can always compensate for these difficulties with better tooling and a more experienced team, but one unfortunate fact about enterprise sized projects is that you are forced to deal with mixed ability in developers and in management. You often inherit crappy and inflexible tooling. In other words - life gets harder . 
&gt; I get that the child can use/access parent attributes and methods and it is a pillar of oop. But how about the reverse? In this particular example, I think the correct way to do this is using an [abstract base class](https://docs.python.org/3/library/abc.html). I'm using a method `name` as an example here. import abc class A(abc.ABC): def __init__(self): print('Parent Class A. Child name', self.name()) def name(self): pass class aA(A): def name(self): return 'aA' You can then do `aA()` and it prints 'aA'. To do the same but allow `self.name` instead of `self.name()`, you can use [the `property` decorator](https://docs.python.org/2/library/functions.html#property), but that's only circumstantially related to your question. import abc class A(abc.ABC): def __init__(self): print(self.name) @property @abc.abstractmethod def name(self): pass class aA(A): @property def name(self): return 'aA' 
Weird...
Your input is int and for classyn and then you are comparing it with a string. Maybe thats why? Let me try it out. Btw, what error is it?
 File "./rchs.py", line 33 if classyn == "Y": ^ SyntaxError: invalid syntax
import multiprocessing 
classyn = ~~int(~~input("Y/N \n") 
``` classchoice = input("Which Class would you like to go to? " ) if classchoice == "Blumenthal": print("There will be a 1 Minute Travel Time. Are you sure?") classyn = input("Y/N \n") if classyn == "Y": print ("Traveling Now") time.sleep(2) ```
 classchoice = input("Which Class would you like to go to? " ) if classchoice == "Blumenthal": print("There will be a 1 Minute Travel Time. Are you sure?") classyn = input("Y/N \n") if classyn == "Y": print ("Traveling Now") time.sleep(2)
Don't forget to leave a linebreak before and after each code block.
no...not the same thing. See Gilectomy
After a few weeks of Java coding a junior developer had built an elaborate architecture. There were a few dozen classes, a neat class higher and abstractions, interfaces and a Spring framework. There were messengers and communicators and queues and work orders. It was supposed to be a test harness for the main app. It didn't actually do anything other than generate a startup log file.
This argument is very strange. In Python, typing is a thing that can go wrong because of the dymanic typing. In other languages other things go wrong. Do you mean you can use some other language where you can mess up the code **and** the tests and still get no problems? That sounds very unlikely and it does not sound reality based. What language would work that way?
If your only concern with going into a project is size then it doesn't really matter what language you pick. It really comes down to stylistic choices at that point. The better question to ask is if speed is super critical to the application. That is where python usually falls short of other languages.
Primary tool: unit tests Secondary tools: linting, especially with mypy &amp; typing Other considerations: design
I haven't found that runtime type-checking eliminated as many tests that I expected: most of the testing for types was a side-effect of testing that had to be done anyway.
&gt; because one can write poor code you are faulting the language it's written in It's not about whether you "can" or "can't" write poor code, it's about how easy the language makes it to write good code, and how hard it makes it to write bad code. There are clear categories of error, such as type mismatches, that Python does virtually nothing to protect you from, but which many other languages will handle in the toolchain long before the program even executes. In C++ it's very hard to pass the wrong object to a function. In Python it's easy and common and you won't necessarily even see the error at runtime. &gt; Isn't that analogous to saying that because someone cannot string a proper sentence together in English, it's the fault of the English language? "Fault" is an irrelevant term since a language is an inanimate object that makes no decisions. But it does make sense to talk about the properties of a language, such expressiveness or ambiguity. For example, if talking strictly about English's use as a communicative tool, it makes perfect sense to point out that the pronunciation of "ough" is different in "plough", "rough", "cough", "though", and "through", and that other languages might not make learning these sounds so awkward. Of course, if thinking about English as a tool for creating poetry, your criteria may differ...
If you want to be loose with "desktop app", yum is written in python.
&gt; the difficulty ramps up faster as the LoCs and the team size increases. That is a given for any project using any language. Productivity for any project employing 100s of programmers rapidly approaches zero. Why do you think so many major projects fail?
Piggybacking this great advice- take it a step further and involve them in chaining it all together. If you write the glue code together they will learn more and you will get the benefits of duck programming.
and maybe an indentation after the if
I just counted and our primary codebase is around 108k lines of Python. There's been only 2 of us working on it for the last 2 years or so. The only struggles I run into are related to inconsistent design patterns and a lack of adherence to Pythonic convention.
I see your point and thanks for explaining. That was not how I took your original reply but that made sense to me. 
Type hinting is a huge benefit in Python3. It makes it so much easier to just utilize a library call without having to step through the code, check the documentation/comments, or trial and error you way through it. Years ago when I was learning C++ it seemed everyone was fawning over object oriented design and encapsulation, and selling it with the claim that "you shouldn't need to worry about the implementation, just use the object!" Of course this turned out to be bullshit, but I still appreciate anything which allows me to spend more time solving business problems and less time trying to solve coding riddles.
i doubt a single individual is ever responsible for code bases that get large, however in the business-facing world, they are quite common and for what it's worth, microservices are only really relevant to web or software that requires networking
Having been in your situation and the situation of your teammates, I think your best option is to be up front with your team that you have experience working with python and (what sounds like web) project design and you would be happy to take on a more managerial role. Honestly just having someone around who's confident, clear, and helpful (without being condescending) is going to be a huge boost for your team regardless of how new they are to programming. If you put yourself in this position, you can split the project into pieces and dole out smaller assignments to your teammates, and maybe take something higher level for yourself. I also agree with the other guy though, 80% of any team programming assignment in school is about cooperation, especially in high school, and **especially** for a 50 minute in class assignment. 
Yes that's true, but in other languages only the logic will be wrong, types aren't a concern. Less room for error. But to be honest I'm in a python subreddit, I'm not interested in debating dynamic vs static typing in large projects. 
I wrote a lot of stuff but most of it is kinda buggy or is not big deal. However, I'm working on a bus-stop Telegram bot for my city, which is currently working but I'm currently rewriting it from scratch.
more or less, yes, that's around the magnitude i'd begin to call a project large
No, no, no!!! The original uses `raw_input` which indicates Python 2, so never use `input` instead, e.g. please see [Vulnerability in input() function – Python 2.x](https://www.geeksforgeeks.org/vulnerability-input-function-python-2-x/).
I've found even a simple linter is very helpful. Pylint/Prospector are good.
Yeah but the OP also uses input at classyn below. And since i was trying to help using python 3 on my machine i had to change that.
Please, please, please tell me that you're using Python 3 and that your original `raw_input` was a mistake.
True - but the goal of project architecture is to minimise the chance of failure. You need to plan your project based on how big it is likely to get. Language is one of those choices. The point I am trying to make is that certain languages have properties that make them good for small and solo projects. Other languages are painful at the small scale but really pay back when the project grows. Python is beautiful but not the best language for enterprise scalability. It's also not the worst either - that would probably be VB.
Qt is the way to go for this stuff. For python I use https://github.com/mottosso/Qt.py as the pyside/pyqt wrapper. 
but doing double duty isn't DRY, which is the point of a typed language in these arguments.
The challenge with Python is you don't have the type system acting as a safety net. A typed checked language will give you a 100% type checking coverage, with Python that is a fair amount of work to obtain and if you do achieve it, it comes with a significant maintenance burden. 
&gt; but Python is being used a lot more. That's a pretty broad statement. It really depends on what you want to do. We have [a pretty long list of learning resources in the wiki](https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_programming.3F). Try a few and see what resonates. For a brand new programmer I'd recommend codecademy. Also, if you don't have one already make sure you look for a project that interests you and start on it as soon as you can. Programming is a lot more fun if you have a goal. If you get stuck come visit us in /r/learnpython. 
It's still odd there would be so much of a difference. I'd imagine most of the rendering would just use the Jupyter Notebook code.
I don't run Windows. Any suggestions (other than "install Windows")?
&gt; lack of strict typing Jesus H Christ how many more times today??? For the one trillionth and one time **PYTHON IS STRONGLY AND DYNAMICALLY TYPED**!!!
I dealt with that problem by switching to Linux. It doesn't permit the creation of Windows binaries, but that's a minor drawback. Also, in Windows, pip now requires VS2014 to be installed or it won't compile new libraries, so the library install fails. Using precompiled libraries also seems to require VS.
I answered your other post. This subreddit is not for help, please use /r/tkinter or /r/learnpython for help with your code. 
I don't dispute that's it's used. I personally have worked on a python project for a very large company with over 10m LoCs and about 2000 developers. It gets pretty nuts. The project mostly does what it is supposed to do but progress is really hard . The dynamic nature of python makes it really challenging to make guarantees about how units of code will behave. True, at this scale just about everything is hard but my main point is that the features of Python that make it beautiful for small projects don't quite add so much value at this massive scale. There are work-arounds and optional features that make python scale better but most big projects don't start out using them, so you end up having to do massive redactors. And speaking of massive redactors - ever tried it without a really good refactor tool like in IntelliJ? Pycharm tries but can never be as good because a dynamic language cannot be completely static analysed. 
Type enforcing code style definitely has its place, but in general when writing python it’s best to follow the idea that’s it’s easier to ask for forgiveness than permission. Meaning assume that the person calling your function is a competent adult and pass the appropriate types. Try what you’re going to do with the object, and if there’s an exception handle it appropriately. I’ve always liked Raymond’s saying that “python is a language for consenting adults.”
You have never worked with a typed functional language line haskell, did you?
Just split up the tasks, and assign them. Just take the lead.
I have nothing further to say as it is clearly wasted time, just stick with your list of off-by-one errors, assuming that you can find the bug and show that it is such an error.
No, I don't know what you mean. Languages can be a combination of statically or dynamically typed and weakly or strongly typed. `Strict typing` has **NO** meaning that I'm aware of.
No, I don't know what you mean. Languages can be a combination of statically or dynamically typed and weakly or strongly typed. `Strict typing` has **NO** meaning that I'm aware of.
&gt;Tell user to install python or &gt;Find something else that can cross-compile
Cloned it and am having a peek. I'll get back to you.
There is nothing insulting about people with different opinions than you. Insults come when someone attacks your legitimacy to have an opinion. Embrace discussion! It's a beautiful thing that we can all engage in for the betterment of ourselves and others!
&gt; But for anything that goes near 'production' I leave the full name space for clarity I don't go quite this far, but I do tend to stop at importing the smallest submodule (with some exceptions). For example, I might say: from sqlalchemy.dialects import mssql when I have to do something MSSQL-specific with sqlalchemy. I do have some exceptions when I will import a class or function directly, but they are (mostly) limited to: 1. imports from `typing` 2. imports where the module name and the function/class name are the same. e.g. instead of `import dateutil; dateutil.relativedelta.relativedelta()` I would say `from dateutil.relativedelta import relativedelta; relativedelta()` but this latter is only if I'm going to use the function/class a lot in this file. (I don't actually use inline imports - it was just easy for demo purposes)
Yep. I used to use docstrings (specifically, Numpydoc), but it was cumbersome. A one line description, 3 parameters and a return value were 17 lines including the quote marks, with duplicated names etc. And my functions are usually less than 5 lines long. I still use docstrings for more complicated projects with domain knowledge etc, but for simple data mining, typehints are awesome.
Out of curiosity, are you still on Python 2 or have you upgraded to Python 3? If you have, what was the process like for such a large/old project?
We're actually running python3 for most back end processes and for web in test environments. Still a few details to work out for the last few things. The process has been loooooong and grueling. I plan on writing some kind of post mortem at some point.... We had some dependencies that really screwed us up, that was the majority of the problem really. The rest was just a lot of work :P
I am almost on the same train, doing an Android app native using only java.
I would be with you, if I hadn't had lots of trouble because I am working in a field where data can be messed up and I like my tools to convert and enforce types before putting the data into a database. 
&gt; If you trust the human to write the “real code” correctly then you should be able to trust the human to write test code correctly. If you a human could reliably write the real code correctly, you wouldn't need a test suite. &gt; Plus anything that a type system would catch is super easy to test. Not even close, unless you're talking about a very basic type system. But even if it could, why not let the compiler reliably verify those assumptions for you everywhere and in all cases, and spend your valuable developer time writing tests for things that can't be done faster and more reliably by other tools?
Yup, that's what allows them to make RStudio Server (the web version) such a good mirror of the desktop app. 
&gt; all the off-by-one errors or similar that occur far less frequently in Python than C(++). Where did *that* come from?
However, this also applies to Java if you are not careful to implement some restrictions as to how the developers are managing it: 1. Typing - It's easy to create an overabundance of classes with confusing inheritance hierarchies with incomplete documentation. 2. Package management - Java is notorious for it's long list of "import com.foo.bar.bizz.fuzz.ExtraLongClassNameFactoryFactory" lines, with code scattered across multiple packages. Summing up - static typing is no guarantee against writing poor code, and the syntax of the Java language encourages boiler plate code and forcing code into an object-oriented paradigm when it doesn't necessarily make sense. (Snark aside, yes, it is possible to write bad Python code. But Java has a reputation *for* large, convoluted code bases as bad (or worse) than any other language, and certainly not better.)
First thanks everyone for your replies, who have PM me and replied in this post here. I'm so happy to receive these, which I usually don't get, hehe.. Anyway, I'm going to reply everyone in this single post might be a bit long but I'm sorry. u/K900_, Спасибо for your reply. I totally understand what are you trying to highlight. I have total believe that someday everything will be alright. But, the current situation is not controllable. And yeah if you don't mind I'll PM you to improve my Russian I'm just a absolute beginner :). I guess I'll learn some python from you in Russian, hehe, my stupid weird mind. Anyway, you said I'm in depression but I'll try to say that I was on depression few years back but when I took initiative to move on I came out of depression so hard. That I feel in this trap of master everything. I feel weird when I'm sitting doing nothing new. u/AlexAndThunder thanks for your reply. Yeah I think you are right, I fell into a myth, a myth to be multi talented to prove my existence.. I'll will put my prospective equation and try again, lol. True I'm in a myth, but I except myself as I am whatever I am, whoever I am. But this unbending urge to keep doing something new is crushing everything down in my brain. You may say learning new staffs is good and I accept but me I'll running over a field full of flower with my hand down touching the flowers, I run and run some flowers comes to my hand which is a achievement but majority of the flowers are still left in the field, I failed, it irritates me. But, if I take it slow I can get every flower. I can't do that either. u/nickfromnt77 thanks for your reply. I'm so happy that a 64 years old person replied. Well, let me tell you, 70% of my contacts are over 50 from all around the world. I don't know I feel a bond talking to older and matured people then chattering with a teenager of my age. Its irritating to talk to a teenager, but talking to a older person makes sense so much.. I don't know maybe I'm mad, or my brain is out of order that I m a teenager who hates teenagers and like to talk to older people, lol.. Anyway, searching the net can give me answer for 1+1=2 to all the way to String Theory. But, my stupid brain doesn't understands that and tries to fit everything in it's own arms. Which makes things complicated. actually I was planing to pick a raspberry pi few weeks ago. But as my Hardware base is not very strong soon I thing in March I'll join a program to learn all about hardware and networking then come back to RP. My software knowledge is around B+, I guess its fine lol.. Yeah, AI I'll start that soon too, but before that I gotta know about Neural Networks which requires higher maths I think. So I'm holding on to that as well. I don't want a HAM license and I'm not sure if I can find that here in India but anyway I don't wanna go towards that side. I learned Morse Code for fun. So if I was wrong anywhere please please please correct me I'll love to hear back and if you guys have or know any intermediate programming group which I can join and interact please suggest. Thanks you everyone so much. :)
There are a lot of coding exercises and challenges listed in the sidebar... That will help you, as /u/chillysurfer said: "Write code. Write lots of code."
Why care about types if you've 100% functionally tested the code?
I started &amp; manage a ~210k lined open source python project. I love Python because it's readable. A 50k C++ program is a nightmare for me. Considering that A 1k lined C++ program is roughly equivalent in capability to a 200 lined Python program, good luck managing a C++ program of 1,000,000 lines. At the most fundamental level, if you can't read your massive code and understand the flow of it after not touching a part of it for 4 years, your language sucks (hello Perl). I get scared when I do that with Python, but I'm always surprised I can follow it. &gt; Per the quora link: Also: it’s slow as f*** Depends on what you're doing. If you're parsing binary data, you're reading at the speed of the hard drive/SSD if you're doing it right. If you're or doing a GUI (regardless of it's the simple PyQt-style GUI or far more complex 3D visualization), the user is the slow part, not the code. If you're doing math, you have numpy, so your code is roughly C speeds anyways (and since it's a library, it's robust and a wealth of efficient algorithms). Python's not so fast with ASCII/unicode string processing, but it is easy, so take your pick. Other than that, remind me what's bad? If my code is really slow, I'll throw some C++ at it, but 100 lines, not 200,000 lines. I get all the stuff any C++ program gets with a whole lot fewer lines. I can play with my algorithm in Python and write it in C++ if I really need to. If it's easier in Fortran, I'll use that.
I done some projects, but only in Java. Will try that subreddit tho
If he's not kidding, he's being a kid about it. Let's try this. _Conversely I think Java is for kids because it can't even understand the value of having literals and comprehensive at language level. Bunch of programmers who could only until recently write expressive rather than statement-heavy, side effect-laden code._ Ignore him until he actually backs it up with arguments based on real valid experience, not just random musings on the Internet, nor _invalid_ experience (like the plenty of people who use the tools incorrectly).
If you have a test suite with good coverage that passes, why bother checking type at all? If something nominally accepts a dict, it should accept my `MutableMapping` object.
Commercials
### If you can't structure your code properly, that's your fault. ### If you can't write good type hierarchies, componentries, whatever, your fault. Don't blame the language. You can only blame the language for making it harder, or impossible (e.g., no lexical scoping, or no namespacing or name hiding, like in portable POSIX sh, AWK, etc.). The manageability of my larger Python repos at work has zero to do with Python, and entirely my own vision or lack thereof. At least I'm not using Rails and enforced nonsense, lack of consensus on how to scale up to fancier logic, or an ORM designed entirely for the simplistic REST/CRUD case, or a framework that thinks it comes before everything else. Also, decouple the implementation details from the language. PyObject… well, doesn't always help. As for 3rd-party packages, it depends entirely on your application. So don't _s-word_ on the language. Reject a lot of the Quora comments if they can only handwave, or don't even explain in a way that is valid or matches the facts.
oh okay, that happened to me much once. But I was being careless and named one of my test files as serial.
oh okay cool...
Hah good point. My issues are knowing what functions do as in what they return and what exceptions will be raised. Discoverabilty/navigation is something I also find hard. When I'm in the editor, what methods are available, what arguments do they take. Things along those lines 
You might want to update your stats. 4.14 crossed the 20M border.
I've heard good things about Visual Studio Code as a lightweight alternative to VS. I just don't like how bloated and fat VS is as an IDE. For PS, I stick with the native ISE and for Python, I actually just use Notepad++. I've got a Raspberry Pi Zero W that I was planning on hosting my project that I have on GH. I think I'll just use the command line on there as it seems much easier.
&gt; `__init__` from a parent class is NOT automatically called from a child From a child `__init__` method, indeed! If the child class doesn't define `__init__`, then the parent method is called. The same is true for all methods.
Pretty much what the other people have said...Divide and conquer, assign the tasks. At the end of the day your classmates will probably be relieved that you have more experience, but you don't need to necessarily be like "Hey I know more than you, let me do this". I actually work in the field. Guess what, if you're way above the level of the class it's gonna be boring. Just focus on making a good project with solid collaboration. Whatever tasks you guys decide on, make sure your teammates know they can ask you for help if they need it.
 class A(): def __init__(self): print ('Parent Class A') class aA(A): pass a1 = aA() #prints 'Parent Class A'
Thanks for taking the time to write that out. I actually ended up going with concurrent.futures. Here's what I'm doing: def concurrent_get_flights(self, origin1, origin2, date): responses = [] with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor: futures = executor.map(self.get_flights, [origin1, origin2], [date, date]) for response in futures: responses.append(response) #print(response) return responses My get_flights method simply queries an API. Just as you said, this code has cut down the time for 2 requests to be equal to the time for one. I think this is the best method for small scale concurrency such as this. This is how I'm wrapping my brain around the concepts: Concurrency (threads) - allow for work to be started on other tasks before the first is finished (but not necessarily simultaneously), good for IObound tasks Parallel (processes) - allow for tasks to be split among cores and independent processes to be done simultaneously, good for CPU bound tasks Asynchronous (depends on implementation) - label tasks in a way so that they can be worked on concurrently without blocking each other Does that sound about right? 
As someone who has a lot of junior developers on their team yes this can count against a language. If they arn't experienced they have the potential to write some very unstable code. Lots of languages these days implement lots of rules to ensure the idiom stays the same no matter who works on it. Languages like Rust and Elm come to mind.
Re 2 a lot of very large projects are doing quite well with virtualenv/venv and buildout and I fall to see why people stubbornly cling to requirements.txt. Even PyPA is recommending buildout despite them having pipenv under their wing (or at least until they have all buildout-like dependency management features in pipenv or a complementing tool). 
That’s a separate issue. Enforcing types before writing to a DB is never a bad idea. That’s actually a great use case for that decorator you talked about before. I’m all for enforcing types at the entry and exit points of an API. 
You can in fact install it today for 3.6. Reference implementation is available on pypi. Not wonderful but neat and useful. I don't use it as a decorator, but as a factory function. 
4 spaces before every line did it. Thx.
Absolutely. [Here](https://code.visualstudio.com/) you go. 
Re 1 typing isn't necessarily synonymous to enterprisey inheritance OOP hell. But even then type safety is not a silver bullet and when executed poorly can still needlessly slow you down in "mature" phase of your development. 
You can use multiple cores without needing to remove the GIL. You just run multiple processes. Hence `import multiprocessing`.
I miss pre v4 digg :(
You mean like Youtube, Instagram, Dropbox, Reddit, BitBucket, Quora or Spotify . Cause it hold the fort for them for years before they even starting to think about the limitations. Hell, some of them are still mostly in Python.
I have experience with ~50K line web project in Python. Python and Java microservices (up to 5K lines). My opinion is the language is important, but more important stuff is team culture, experienced colleagues and competent management and business analytics. Java makes easier code navigation, refactoring, and privacy/interface model better suits libraries development. On the other hand it is impossible to write Java without proper IDE and Java code is always bit longer. Still I think that writing in Java takes longer and lot of times it is necessary to write lot of boilerplate to satisfy the type system. I'm quite glad that python3 adopted type annotations and I recommend using them mainly for code navigation (type checkers usually cannot check so much like in Java). That means annotating public functions.
There are very few cases where something like that would be useful and in most cases overriding a parent method instead is the better choice. More explicit, easier to understand and more flexible than class/instance variables.
Hypothesis seems pretty cool, particularly the example database (I was having concerns about that issue until reading that Hypothesis addresses it). I'm not sure I can think of many use cases where Pexpect would be super useful to me, although it seems to solve this niche problem. &gt; students are very good at coming up with bugs that I wouldn’t think to test for This is gold. 
Thanks for the pro tips! Regards to gender, sorry I meant I don’t personally know many female programmers and I have mostly female friends. 
True story. I just took over a project that was using php and my first executive decision: We're starting from scratch everybody! Here's the kicker, no one complained!
I LOVE Python, but today all my tests passed in 2.7 so I said, let's try 3! That decision made me a sociopath
Yeah, I think he's thinking about pythons flaw with threading. I'm glad you brought this up because I think I made a huge mistake with a decision I made this week.
Yeah, ODB notoriously interrupted some awards show, grabbed the mic and went on a shorty tirade that ended with "Wu Tang is for the children!"
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [python/cpython/.../**floatobject.c** (master → 1aa094f)](https://github.com/python/cpython/blob/1aa094f74039cd20fdc7df56c68f6848c18ce4dd/Objects/floatobject.c) ---- 
What sort of format is it in? Is it an array? A CSV file? A database file? All sorts of options, with different implementations. 
&gt;go for it I see what you did there...
I find that you can write pretty nice *functional/procedural* code in Python. You can [create named tuples like this](https://stackoverflow.com/a/45426493/1612318) now, which was a game changer for me. We finally got a nice immutable struct like data structure. In my opinion the only time you should use `class` is when you need to create a custom data structure (which should happen *very* *very* rarely) and *inheritance* should always be avoided.
1.5 million lines of python code here on a project i've been working on for a few years, python is wonderful. don't listen to the haters.
Please don't `dude` me and I don't hate Eclipse, it's perfectly usable although not my favourite. You get compilation errors in real time so you fix them, link your code, job done, isn't that nice, none of this silly testing that people using dynamic languages have to do. Strange that Go can throw runtime errors but that's different because they cleverly call them "panics" so nobody notices.
Check out the `loadtxt` and `lexsort` functions in the `numpy` package.
Because people keep claiming that static typing solves all problems, and off-by-one errors are a common problem that often escape the compiler. Still at least I'm happy that all the static typing fans save so much time by not having to test anything, it must be a wonderful life. Except that I used to live such a life and still tested my code. Do I qualify as a professional programmer because of this and not a cowboy?
Opinions that have no basis in reality are plain shit IMHO, so why don't the people making all these false claims bugger off to any other part of reddit other than python, or better yet leave reddit all together.
Try pandas, dataframe.
You're missing a closing parenthesis on the line `classyn = int(input("Y/N \n")`. But you also have some indentation issues, which might cause further exceptions if they're not just a product of copying your code to reddit. In particular, the `if classyn == "Y"` line should probably be unindented, so that it is lined up with the `classyn = ...` line just above it. Indentation is significant in Python, not just cosmetic! It also looks like you may be confused if you're using Python 2 or Python 3, as you're using `raw_input` (which is in Python 2 only), but you're treating `print` as a function (which it is in Python 3, and Python 2 only if you put `from __future__ import print_function` at the top of the file). If you have a choice, I'd strongly recommend you use Python 3, as the last version of Python 2 isn't getting many updates any more (only security fixes), and will become unsupported in 2020.
It's just that things caught with types are also caught early anyway. As early as code executes. Our long standing bugs were mostly related to dates - we couldn't easily mock the date back then, so things turned out broken after a few months.
&gt; In my opinion the only time you should use class is when you need to create a custom data structure (which should happen very very rarely) and inheritance should always be avoided. Just to clarify before we go off topic, I wasn't endorsing classes or OO design patterns, just relating an anecdote about how type hints are a benefit to customers of your library. Named tuples are great I agree. Classes still have their place, especially when it comes to defining specific behavior or managing some resource like a database connection. Perhaps my way of approaching problems is out of date, but I still occasionally use inheritance rather than composition in some places. One of these would be some automated Selenium tests. Since the app being tested will have common elements across all pages (logout, header, footer, etc) it makes sense to me to define a base page object that all other pages inherit from before defining their own specific functionality. I'm certainly interested in better solutions if you have any.
How is basic different from superficial in this context?
You can try typing which pip3 which should show you the path that its installed at, it might help narrow down whats going on. I can't think of a reason why 2 different versions of pip3 would run though, it seems like it would always pick up the first one it found in your $PATH. Are you typing pip install (not pip3 install?).
No, and with the aid of [mypy](http://mypy-lang.org/) it will soon be taking over the world without the assistance of Pinky and The Brain.
Oh hell yeah dataclasses support. Downloading now. Working on my programming language should be a lot easier :)
For the record, don't listen to anything anyone says on Quora. Quora and Yahoo Answers for that matter
If nothing else Python best practice is to use `import tkinter as tk` and not `from tkinter import *` and `import tkinter.ttk as ttk` rather than `from tkinter import ttk` despite the many tutorials still showing the latter.
Looks like someone (you?) edited the Mozilla page to fix it!
Hi. I want to extract a few items. If I m now wrong, maybe 8. Source is a basic html, but lot of tables with child tables. I tried with lot of tools (like octoparse) without expected result. I m pretty sure that problem is not the tool, it's me. I m traveling to home right now, but what do you need from me, so you can sendme a budget? 
What about a try except statement with the program in try and the except statement just asking for you to press enter? I'm new at this, so forgive me if this violates any conventions or anything. 
Indent code blocks by 4 spaces. Also peep /r/learnpython
Codewars.com
&gt; If you have a test suite with good coverage that passes, why bother checking type at all? Because a unit test tells you that one bug isn't there, but a type check tells you an entire class of bugs isn't there. &gt; If something nominally accepts a dict, it should accept my `MutableMapping` object. As long as your `MutableMapping` supports the same interface, plenty of languages with a strong, static type system will have no problem with that. And if it doesn't support the same interface, passing one instead of the other is probably a bug.
Sorry, if there was a reference there, I missed it. Do you have any basis for your comparison before? It seems a very odd claim to make.
What am I missing the the second one? Does "as" use hyper-threading or something?
Lol.
I returned to a workplace that was using PHP and looking to start a new project. Before I got back they were looking at a PHP framework. I convinced them to go to Python. Everyone has liked it a lot more.
I hate making websites but Django, baby. Never used Flask though.
&gt; I'm not sure I can think of many use cases where Pexpect would be super useful to me I use it all. the. time. 
reset your machine.
Do you mean reset as in fully reinstall Windows or just restart. I force closed out of the installer and the IDLE seems to be working properly...
a map?
Yes
Okay, I should have been more clear; what exactly do you mean? Like, you want to see google maps inside your program or are you talking about some other kind of map?
Yes I want something like google maps. More importantly, I want to see the map of the city I'm in. 
Check out /r/learnpython
/r/learnpython
That's awesome! Can you give some examples? I'm not sure what I'll use it for once our students have learned to write functions, and I'm extremely willing to believe that it has a ton of other uses that I just haven't thought of.
Try the construct library
You think they could not turn in code and get an A?
Even virtualenv has its difficulties when dealing with system binaries. Docker containers have been my bread and butter for the past year. The learning curve is steep and benefits are pretty useful.
That's a great question, I skipped a step and forgot to include `import string`. Here's a REPL snippet that shows what's actually going on there: &gt;&gt;&gt; import string &gt;&gt;&gt; string.ascii_letters 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' `ascii_letters` is just a useful constant that the [`string` module](https://docs.python.org/3/library/string.html) makes available; it's a little easier than typing the alphabet out by hand a couple times. Plus, if you make a typo in `string.ascii_lowercase`, python'll yell at you loudly - which is good!
This, but realize that this is your opportunity to get familiar with the management side. CISSP, etc. Your current perspective doesn't help anyone. Congrats on getting to see this at 10th grade. Normally people see this situation at &gt;10 years in the IT field. This could make you one of the youngest CIOs in history, if you strap down. 
Cool, I wish my highschool programming teacher had been as knowledgeable as you seem to be. 
This thing: &lt;http://construct.readthedocs.io/en/latest/&gt;?
python 6 is a long way to go my friend 
&gt; my goal is to use it for data analysis. Have you watched some of the videos from the PyData and PyCon conferences on pandas? In particular Brandon Rhodes has made some inspired video tutorials. see http://pyvideo.org/speakers.html 
A great goal, but very uncommon. Especially on hobby projects which can still be quite useful to others.
I request. I request. 
Starting to learn Python. Don't know anything about it lol
&gt; This is gold. The thing about software is that it'll get better on both sides. After a few years he could start offering bug bounties. I wish I had time to teach high school programming on the side. After a few initial classes it'd half run itself. CI to test homework and tests. Make the 'book' a Wiki and the class's final assignment is to update a section of the wiki.
At the place I work, a lot of existing tools are command line programs. If I want to do something those programs do in my own programs, my choices are: 1. Reimplement from scratch 2. Find and extract source code (in a very-likely-incompatible language, which essentially means GOTO 1) 3. Use expect/pexpect That sounds like I'm forced into it, but really I love it. It's sooo easy to test that those functions are working--just print out an interaction and check it. Plus they always get the same answer from my program that they would have gotten from their command line thing. It **is** the answer from their command line thing. In fact, we had a situation recently where I needed to get stuff out of an Oracle DB but I wasn't allowed to ship them an Oracle client library (don't even ask). No problem, I'll use `sqlplus`, the Oracle command line query tool, through pexpect! It's slower, but it works.
Use Scrum! Seriously. Make small, easy to accomplish tasks and put them on stickies on a wall. Each person chooses their own tasks they know they can handle. You probably don't realize they're good at something and they may even struggle to find it themselves. Doing this will help you both figure it out. Feel free to ask for more if you're curious. I'm a certified scrum master and I've been programming for 20+ years. There, r/imverysmart -ed a little too ;-)
You know what makes someone r/iamverysmart? Someone who knows they're being pretentious but still goes through with it. I can 100% guarantee you one of your colleagues has done something even minor in python that you haven't. This is actually a terrific exercise for you. Cause if you start looking for jobs after college with that mindset, you'll get corrected reeeeeaaal quick.
Double on /r/learnpython, but I have some notes: * Why sometimes `if input() == 'whatever':` and sometimes `if input() in ('whatever'):`? In this case, these two things are equivalent * Do you even know about variables? You need one for input, as stated by /u/rcfox, but you could also put that giant piece of ASCII art (which is actually so giant it wouldn't fit in most terminals and will be messed up) in a variable and make the code more readable. * The `time.sleep(2)` will annoy the player. Something like `time.sleep(1)` or even less should suffice.
Why do you think you’re a “little late to the game”? Python is exploding in usage and usage cases. Particularly with machine learning, AI, etc. I think you’re still very much at the beginning of what Python (and not only Python) is going to do for the world and good programmers will be in demand for basically - forever! Good luck. -dk Ps. That you are a woman should only benefit you as you develop your skills. More and more companies - small and large - are adopting workplace equality rules and so forth. More good programmers of different genders, basically of diversity- will become in higher demand. 
I’ve worked on large projects, and python is very suited small, medium and large projects. Python is a very versatile language, and very efficient at that. Yes, it is duck typing language, that is both a benefit and disadvantage. Strongly typed, compiled languages also have their advantages and disadvantages. Unit testing at minimum is a must, but that applies to any language. Functional and integration testing is also highly recommended.
I'm sorry as I'm too tired to explain myself so please refer to this [module guide](http://docs.python-guide.org/en/latest/writing/structure/#modules), search on the page for "very bad" if you don't want to read the first few paragraphs.
It looks to be an array seperated by some spaces. Kinda like a table 
Yeah that shows why not to use * and I can kind of see why you would use the "as" but this write up doesn't get into it. from tkinter import ttk import tkinter.ttk as ttk Man, I want to get it but I'm missing something. Aren't they both loading the ttk file? (more to it than that but you know what I mean)
If you need to scrape JavaScript check out the Splash library. It doesn't render the page like selenium does so it's faster.
At the very least, you can move some of the code from `__init__` to make it more readable. In your source code example: ``` def __init__(self, file): # Parse headers and whatever other setup you need # for line in self.binary_string.split(b'0x0'): self.code_lines.append(self._process_line(line)) # The rest of init @staticmethod def _process_line(line): # Process a single line ``` And so every time you need something like `for layer in image_file` or `for line in code_file` or whatever. Taken to the extreme, your init will be like this: ``` def __init__(self, bytes): self.lines = [] header_len = bytes[0] self.metadata = self._parse_header(bytes[1:header_len+1]) for line in bytes[header_len+2:].split('0x0'): self.lines.append(self._parse_line(line)) ``` Then put all token codes in the dictionaries and store them as the class variables. `command = self.command_codes[token]` is nice and readable, unlike `if token in (b'0xAA', b'0xAC'):` Ditto for field lengths, ditto for offsets. You probably did at least some of that already, so sorry if I'm stating the obvious. For deeply nested complex pointer-overloaded formats, you may need some lex/yacc parsing. [It can be used for binary](https://stackoverflow.com/questions/39556721/could-lex-flex-be-used-to-parse-binary-format-source-files) and AFAIK Python has some bindings. You need to learn the thing first, but above a certain level of complexity in a file format it beats a byzantine self-written mess of pointers, dicts, ifs, recursive parsers and all such.
I was about to reply with OpenStack as my example as well :) I worked on Magnum about a year and a half ago when I was with Intel, up until they pulled the plug on OSIC
Check out /r/learnpython
Naw, /u/Marein is totally right
Hypothesis is great. Once I learned about it, I started using it in my libraries at work. I like how it forces you to make good APIs that can withstand bad inputs. That, pytest, and tox are now my testing trifecta.
Empirically speaking her gender is a disadvantage, presumably because of bias among the programming community. https://arstechnica.com/information-technology/2016/02/data-analysis-of-github-contributions-reveals-unexpected-gender-bias/ This sucks, and fighting back against it one of the reasons the diversity hiring programs referenced below are so important, imo. 
If you're interested in general CS knowledge (which is good to have no matter what language you're using), I'd recommend [cs50](https://www.edx.org/course/cs50s-introduction-computer-science-harvardx-cs50x) (Python is one of the languages they teach) and also the very approachable and entertaining [Crash Course Computer Science](https://youtu.be/O5nskjZ_GoI). Beyond that, I agree that coding a lot is a great way to learn. As /u/chillysurfer said, contributing to an open source project is great. There are also several websites full of programming problems to solve. I like checkio: https://checkio.org/ Welcome, good luck, and have fun! 
Technically it's not our architecture, but how main JSON serializer worked at that time - as far as I remember it was spray-json for Scala. You write class for request, response show how transformations happen in between, and Web framework automatically builds whole pipeline. If you want to change case of variable names, you're basically forced to provide manual transformation rules for each freaking class - beats whole magical process, doesn't it? :-) Whole problem was to keep magic part while making API compatible. 
I’ll be tour friend, but I’m new to python so can’t help much there :(
Nope. Except for my trading algo rules there's nothing new that can't be found on github :) 
Use Kaitai Struct then compile it into Python? http://kaitai.io
I wouldn't have gone to Subprocess or Pexpect so quickly. You can easily re-run top-level modules by reloading them. I've had to write similar code for my course. Let's say we have the following student code (`student.py`): print("Welcome!") name = input("Give me your name:") print("Hiya,", name) Well, then the following pure python code can run it under any conditions you may desire: [`instructor.py`](https://gist.github.com/acbart/a2fca7dbc5ee4dd627abf6be5128fd08) Perhaps this is more complicated, but I get uncomfortable when I start running scripts as external processes. A separate, interesting conversation is about using Hypothesis with students. I remember a paper about enhancing compiler messages brought up the idea that you should only provide one error message to students at a time, in order to minimize their cognitive load. I would worry that this system would be prone to overwhelming them, as presented. Easily worked around, just my first thought in reaction to the animated gif.
&gt; Dropbox (99% python) Dropbox is written in Go. Your article is 7 years out of date. &gt; While much of Dropbox’s back-end infrastructure is historically written in Go, for some key components the memory footprint and lack of control stood in the way of achieving the server utilization they were striving for. They rewrote those components in Rust. In the words of Jamie Turner, a lead engineer for the project, “the advantages of Rust are many: really powerful abstractions, no null, no segfaults, no leaks, yet C-like performance and control over memory.” https://blog.rust-lang.org/2016/05/16/rust-at-one-year.html Shoot, even my article is almost 2 years old.
about 200mloc of C++
Dropbox isn't in Python anymore.
If you want to deploy your gui and run them on a web server, Remi can do that for you. You design your gui in Remi and when you run it, it starts a flask server where you can co next to through your browser to see your app. No need to package for a particular os. They've also got a gui editor that is like qt designer.
The links for the contents don't work so I'm not wasting any more time there.
oh, sorry for that. Fixed it now :+1 And thanks for pointing it out.
Looking at solutions that others have supplied for this issue, it seems annoying but not "write a server that preprocesses the input for us" bad. I'm not super familiar with scala and less with spray json, but why not have the constructor take in snake case and re-expose those as camel case? Looked like you can supply custom naming conversations as well, so you could potentially use the same class for input and output. Also, it's 100% your architecture. You can blame the framework all you want, but at the end of the day, an architectural decision was made that forced your team into that position. 
I don't know the specifics yet. Do you think you could point me in the right direction, though?
I just started learning yesterday. (Barely any programming experience.) So far I've made a function that shuffles a sentence. One that searches a text file for phone numbers and adds them to a list (from the ebook automating boring things). One that generates a random key based on a crappy algorithm and makes you win a short text based game to get the key, then authenticates it based on the algorithm. I want to make something for my mum who gardens a lot that will alert her when to begin harvesting her crops based on the plant date and the suggest harvest times on the back of the seed packs. All in all I'm having a blast so far. 
I assume they mean reboot. Also, PyInstaller is available for up to Python 3.5. I use it to compile apps on a regular bassis, never had any issues
I took this example to illustrate how unflexible static typing can become when taken to purism extremes. As I said before, people tend to be way too optimistic when thinking about adding structure to input. This purism looks like a genius idea, because how hard can it be to specify exact input from JSON? And when it's too late, you run into such problems 
Another vote for Pandas! read_table FTW
Thanks for ur reply. I'll try that!
An alternative to hypothesis could be mutmut (I’m the author). You could generate the tests from your own reference implementation with mutation testing. 
I should add that if u have any questions regarding coding for connection to exchange/order entry etc I will be happy to assist u. 
&gt; I took this example to illustrate how unflexible static typing can become when taken to purism extremes. This doesn't make any sense to me. If a language is statically typed and doesn't offer the ability to change the shape of an object at runtime, then how can someone be anything but a "purist" in your words. &gt; This purism looks like a genius idea, because how hard can it be to specify exact input from JSON? Not hard considering there are lots of JSON API clients in lots of statically typed languages. The trick in that case is staying up to date on what the API looks like. If you're the server, than it's even easier because you get to decide what is and isn't valid. Someone used snake case but you only take camel casing? Get it outta here. I'm still not convinced this was caused because statically typed languages are "inflexible" as a whole. 
If you don't mind my asking, how is dynamic languages any more confusing than static?
Thanks for your advice. I just now got it up and running flawlessly (even if you still have to host it locally) :) https://github.com/pmaji/eth_python_tracker 
If you have a dozen parameters in bunch of your classes, it's hard to remember what type is expected. Do I use `album = Album(Song('song name'))` or `album = Album('song name')`. It's hard to remember. Depending on the context that this is used, a string could be suffice or maybe you need to store more info on the song like artist or year released. Then you could use the `Song` class or even `album = Album({'song': 'song name', 'artist': 'some guy'})` ok bad e.g. b/c each album has one artist. Just think of the Gorillaz albums though.
**PERSONAL_EXPERIENCE_WITH_BIG_PROJECTS==True** I recently switched jobs, and on my previous job I worked on a legacy, but active mantained, 10 year old large Python application. We developed changes on it all the time, on a steady three week release schedule. It was a big application. I don't remember the exact size, but it was complex, built over a lot of time, using many different technologies. We were around 8 developers working actively on it. As any 10 year old large application, it had lots of stuff built on different technologies, by different people, and had a lot of ugly code, and a lot of really nice looking code too. And I NEVER felt that the language itself made my work more cumbersome. I mean, we all used PyCharm, which is quite magical in it's Python code intellisense, and we had a lot of test cases, so the dynamic aspects of the language weren't really an issue. And Python code is both quite compact and easy to read. I have a lot of Java experience, and the same project, built in Java, would have been at least 2 times bigger, if not more. 
Loved it! Great examples! 
Don't use standard in. Alternatively, flush the buffer. Python buffers the output to dramatically speed up runtime. import sys sys.stdout.flush() sys.stdin.flush() sys.stderr.flush() 
We do continuous deployment now :P It has been pretty awesome. 
Thanks for your comment! I'm happy that I can discuss this with you. Personally, I will not defend Java, because I'm not a big fan of it, either. I don't like it for the same reasons that you have pointed out and a few more. I don't know, however, if pointing out the disadvantages that other languages bring, is what makes the dangers of Python any less valid. I think that you wanted to point out, that the static typing can be a problem too, and I totally agree with that - my point was that static typing and analysis are great tools for maintaining control over a large code base and not taking advantage of the fact, that Python provides you with tools to apply it anywhere you want,without taking away any of the freedom that the language itself gives. I use it even for my small projects and it makes the code more manageable. Again, I will not defend Java in that matter. I have maybe not stated myself clearly enough - by problems with package management I didn't mean Python's import mechanism. I just think that a tool like maven, or gradle would give Python a massive upgrade. I've been working on some issues regarding problems with python's package management, and having to look for requirements.txt for each module was a pain in the ass. I don't think that any silver bullets exist - as a rule. I will, however defend my position that some restrictions are a must for a large project to move forward and prosper. 
Cool. Yes, we were in the initial stages of that around the time I left. Also, nice to to hear that the Python 2=&gt;3 switch is ongoing/working for all tests and backend stuff. A major feat, considering the size of the project. 
Could you give examples, in what way could it slow you down, exactly? Do you mean that it put constrains on what you can do with an existing code without touching a large amount of dependent code?
Could you point me to a tutorial or an example? Since I'm now both using C++ and Python I guess combining them will make my small apps better.
What's going to STDERR? It's fairly unusual for a CLI process to actually stow or modify the standard streams, though it's certainly not unheard of, but it's not unusual for the prompt to be written to STDERR and not STDOUT.
It's okay for your favorite language to not be the best at everything. Other languages are really good at things too.
Yes. Not sure but it may be the answer to your first and second question. 
Read my comment again.
Well, I was just reading [this](http://www.reddit.com/r/Python/comments/7syq1y/using_hypothesis_and_pexpect_to_test_high_school/) and I think maybe you could try pexprct.
I think you are looking for this: import os from selenium import webdriver chromedriver = "/Users/adam/Downloads/chromedriver" os.environ["webdriver.chrome.driver"] = chromedriver driver = webdriver.Chrome(chromedriver) driver.get("http://stackoverflow.com") driver.quit() Source:https://stackoverflow.com/questions/8255929/running-selenium-webdriver-python-bindings-in-chrome
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [cztomczak/cefpython/.../**hello_world.py** (master → 9f17fa6)](https://github.com/cztomczak/cefpython/blob/9f17fa61e6175697a2ec419c90ebd0a7cb743f56/examples/hello_world.py) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dt9ik0n.)
Honestly, [this stuff](https://i.imgur.com/JWGOMYY.png) don't look too well to the eye.
I am starting my first python course. Learning the basics :) I have a question about something that's probably very simple. If anyone has a moment to help a noob please say so and I'll either post or PM the code that's troubling me.
That’s what plex does though...
I'm referencing his script, not plex itself.
I am a long term hardcore fantasy sports player and casual sports bettor. I am actually learning python and R specifically with the goal to learn to build prediction models. I want to weigh NBA teams based on their ability to score and defend vs certain positions, in the most simple terms I can think of. Also want to weigh them on how well they perform in back to backs and all kinds of things. I expect it to take a while to learn to build what I envision but I feel like it's an idea worth pursuing. I am currently 2 weeks into my 1st python course but have experience with other programming languages.
No, I'm ex php dev learning python in my free time so it's all new to me
why didnt you let them configure their own oracle client library?
That's better :-)
You can search for `python for java programmers`, there are many good resources dedicated for java programmers, f.i.: * http://python4java.necaiseweb.org/Main/TableOfContents - online tutorial * http://antrix.net/pages/python-for-java/ - http://antrix.net/pages/python-for-java/ * https://stackoverflow.com/a/1052471/418359 - more resources on this subject
&gt; attempting to install Python 2.7.14 Why are you trying to install ancient software?
/r/pythonhomework /r/homework /r/learnpython 
&gt; Just to clarify before we go off topic, I wasn't endorsing classes or OO design patterns I know, I just wanted to add to your statement ;) &gt; I'm certainly interested in better solutions if you have any. If you write *pure* functions exclusively, there is no need for inheritance, you just cherry pick what you need. This way your code stays loosely coupled, flexible and reusable. And from my experience it's a lot easier to reason about dataflow that goes linear from function interface to function interface to function interface. Perhaps this is just my humble preference. &gt; Classes still have their place, especially when it comes to defining specific behavior or managing some resource like a database connection. They are indeed useful, but I wish I saw them 50 times less.
I am currently studying from [Complete Python Bootcamp](Complete Python Bootcamp: Go from zero to hero in Python). Very understanding course, the instructor speaks clear and explain well so it's easy to follo2. 
I used to be, [this is me](https://theconversation.com/profiles/michael-bane-17384/articles) I did alot of different things. I actually used R mostly, i set up some shiny dashboards, did some web scraping, also alot of stats (hypothesis testing) and did some light ML to gather insights into opposition. 
The company I work for is stuck at 2.7 :( due to dependencies, so no type-hinting There's 6 of us working on a big project, I won't even try to approximate how big it is (above 50kLOC, possibly close to 100k). The codebase dates back 10 years and finding the proper place you're supposed to work with is a pain. Plus the obligatory problems coming from no typing (fortunately rare, but when they happen they're a PITA to debug).
Creating a Chatbot with Deep Learning, Python, and TensorFlo: https://www.youtube.com/playlist?list=PLQVvvaa0QuDdc2k5dwtDTyT9aCja0on8j 
Do you have a stats background or are you learning programming and modeling as you go?
i do have a stats background but primarily analytics. this is the first time i've set out to build my own set of tools
How do the two differ? Stats vs analytics?
Pandas library will do all you want for you. 
It's not really about the language, but about the person's programming skill that matters.
Cool, now please multi-thread that print, please.
Quart was moved to beta yesterday. https://gitlab.com/pgjones/quart I just bought Miguel Grinberg's book on Flask. Going to start with it very soon. I run a Wordpress website with lots of plugins and now I want to do improvements that require me to read and modify PHP. It seems plausible with the little Python that I know. Why did you decide to move over to Python?
Thanks, now I don't feel bad about any code I've ever written.
Sooo cool
&gt; A separate, interesting conversation is about using Hypothesis with students. ... I would worry that this system would be prone to overwhelming them, as presented. Easily worked around, just my first thought in reaction to the animated gif. That's not typical output - usually you just get the usual pytest (or whatever) reporting, but OP used the `HYPOTHESIS_VERBOSITY_LEVEL=verbose` environment variable to emit verbose logging and `pytest -s` to pass stdout back into the shell instead of capturing it for passing tests.
This style of reactive programming comes from the functional world. It looks a lot nicer in a language that doesn't have crippled lambda syntax.
Some modern languages have neat strategies for dealing with null refs. In Scala there's the idea of an option, a type which can be nothing or something. It's a near solution to Java's billion dollar problem.
Yep - this is the issue. All that static typing and boilerplate seems like a pain until you need to do a big refactor or you have to revisit some code you've not seen in months. Not a python hater - I just have to be realistic about the fact that there are some use cases it's just bad for. 
A better option than that might be using `exec`, which should allow you to still insert globals and things, but gives you slightly more options when it comes to where you import the file from. Although both of these would break if the student didn't use `print` and `input`.
Any tips to get started, if you just want to write a Kodi addon that overlays the video with some graphics while not interfering with the playback control? I wanted at some point a plugin what allows me to cover annoying scrollbars and logo animations from kodi, but did not know how to approach that...
Isn't Pandas to Unity a weird jump? Why would anyone need both of those things?
Possibilities, got raspberry pi, lots of projects uses python. I can write something for web, for cli, for desktop. Language looks much more clean than php 
Udemy ad spam... it even goes through a tracker
PyCrypto? Really? I recommend for a solid introduction on cryptography in Python: https://www.podcastinit.com/episode-93-cryptography-with-paul-kehrer/ tl;dl: use cryptography instead. https://github.com/PyCA/ 
I agree The reason for this is because PyCrypto hasn't been updated since 2014
Same with Dropbox!
The post is about cryptography basics and only examples using pycryto. I mentioned that there are other packages
Yes, but you didn't mention that PyCrypto is not maintained anymore and you also didn't mention the dangers of using cryptographic libraries that are not maintained and audited by actual cryptographers to ensure that they are safe to use.
&gt; With your argument you might as well write everything in assembly Objectively **no**. Assembly objectively does not have the features that I explicitly mentioned, and that those Quora responders *didn't*: - namespacing * putting them in one place such that they don't clash with others * referring to things from other namespace in a controlled fashion * _aliasing_ things from other namespaces if you must - OO * It's not _exactly_ the OO you want, or like, but it's good enough to get a lot more done than you give it credit for. * If you want to complain *meaningfully*, complain about the lack of private members (conscious design choice). Everything is shared with subclasses, which can lead to interesting bugs when not carefully using some widget toolkits. - packaging * C++, Java, whatever. Talk about Python on its own merits, provide context. * C++ shut the _h-word_ up. `distutils`, `pip`, `setuptools`, etc. are ugly, but we have something working, widely used, just barely usable enough for the common case, and _de facto_ (not _de jure_ standard). Compiled languages are just compiled languages. It is purely an execution detail. Even if compiled languages correlate with other things that are relevant to this argument, _compilation is wholly irrelevant_. And you're even presuming that people can agree on build systems and file structure in more primitive compiled languages like C. Python actually ascribes meaning to your file and folder hierarchy, just like Java. Type systems don't enforce sensible type hierarchies. The enforce consistent types, and that's all. &gt; You can write large programs in any language, that doesn't mean that doing it in C is smarter than c++ just because good devs should be able to do it right. I make no such inference. That would be _ridiculous_. The **"smarter"** sinks your argument. And besides, I think C's namespacing is _lacking_, to put it lightly, but discussions about build system standardization, packaging, etc. irrelevant because it's not what it _should_ be used for, even if people still try to use it for general purpose programming.
I like Java too, I was just explaining what the other comment was talking about
Usually, blame your tools for either not discovering things, or not presenting them easily. Even `ctags`, `neovim`, and `:Tagbar` can easily do this, and `jedi` is just icing on the cake. Yes, Python can do very creative metaprogramming you might be able to in Java or C# with **a lot more** effort. And yes, it can be a bit harder thence to get a list of names and their types, _all the time_. But if you use type annotations, the standard package layout instead of playing creative, don't metaprogram, and don't shadow names with another value of a different type
You wouldn't. That's in reference to buildout which is commonly used in a venv (it used to have its own Python virtualisation but it doesn't now) 
I tried it and it works! Thank you!
Pretty sure `flake8` just does exactly the same kind of AST walk that a compiler does…, and screams about almost all the non-type problems you could encounter. **Yes**, it's not Haskell by a long shot, but give a meaningful use case. If you develop a codebase non-incrementally to the point that you suddenly have more than a handful of compilation units that break, you are doing something more broadly wrong, unless the language syntax changed in a backwards incompatible way, in which case Python will scream all the same unless you thoroughly lazily import.
Well you can use global pip in a container I suppose, but I would still use buildout instead of requirements.txt for larger project. I suppose that by system level issues he means issues that binary modules can have with system libs but since the "invention of the wheel" I don't think it is often an issue. 
Can't see the link. Everything about the way you've structured this is wack, you're a tertiary student who should consider yourself a professional and you're asking strangers on the internet to do your dirty work, which could constitute plagarism. Furthermore, you've given us nothing to go off, no specifics of confusion, no description of work done, just dumped a link and said "fix"
Well, I totally agree with you on the matter that static typing can be a flaw, but we are speaking Python here. When using type hints you are not really putting any constrains on yourself, neither on the design. If you need flexibility you just delete them or use Any. You can use it where it is needed and abandon it where you need more freedom. I think that this is really an ideal solution to the problem of typing in OOP. 
email me barak -at- appcard.com. I'll let some of team play around with it.I assume the goal is to use inside debugging sessions?
PyCA, as mentioned above.
&gt; Pretty sure flake8 just does exactly the same kind of AST walk that a compiler does…, and screams about almost all the non-type problems you could encounter. Well, to bad that most problems are type related. flake8 can catch a tiny few trivial errors, but there is such a ton of stuff that slips through it is not even funny. Without proper type annotation and type inference those tools only provide a little bit of help. Getting type information for all the libraries you might use is another headache.
Yes, get started by reading this: https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/
I'm sure people would like to help you in the general direction, if we could see the question. 
Replying to you because he deleted his comment: One of the big dangers about writing *anything* about crypto is that it's very easy to make mistakes that render the entire thing vulnerable (and I'm not even referring to the implementation of the underlying crypto ops!). Your example for AES uses a static IV -- which is bad practice. You should be using a randomly generated IV. You mention that there are other algorithms that can be used, including DES, which is insecure and basically useless now. There's nothing about when you should be using X algorithm and why, or when you *shouldn't* be using an algorithm (probably more important). 
I know Pandas read table, what would data frame do?
As a huge python fan. Oh it definitely is. The same convenience you have of not putting in return types and data types. Will be your enemy as well. runtime errors that should've been caught at compile time. As much as I love python. Kotlin IMO is as close as a static language can get to python
Official docs should give you a pretty good start. https://docs.python.org/3/extending/building.html https://docs.python.org/3/extending/extending.html 
P2 and P2 are black boxes, eg., I don't have access to their source code.
Interesting! I'll check and get back to you.
Sorry! What I meant that typically (not you specifically) Java/Eclipse are massively dissed, but they at least nail the making compilation nearly transparent- compilation times are not an inherent reason to discard compiled languages. Of course not all compiled languages are designed with great incremental compilation in mind- and you'd be right to say "C++ compile times drive me up the wall", but not "all compiled languages compile times drive me up the wall". Of course, statically-typed languages still have runtime errors, it's a strawman to say "both compiled and dynamic languages have runtime errors, so it doesn't make sense to use compiled languages". Statically typed languages *DO* avoid real errors, and maybe you can write better tests because you can save some time thanks to that- or save time because with incremental compilation, you get faster feedback than with a test suite (big fan of pytest-xdist's -f here, though). Also, you are conflating static with compiled, and while there's certainly lots of correlation, it's not entirely accurate ( https://stackoverflow.com/a/2331460/26787 )
Thru telegram bot msgs
requirements.txt is totally fine for package management. It's not the cleanest tool in the world, but package management isn't really an issue once you have the workflow down
If there is something to blame, cosmic rays or hardware then is not random.
I've been part of efforts to manage dozens to hundreds of autonomous mobile robots in factories. A LOT of Python in use and has scaled very well. I also do not believe that the size a project is a relevant variable. Python is or is not appropriate depending on a lot of technical decisions. Languages are tools. Pick the right tool for the job, no matter how big or small.
You are calling a function with 3 parameters who are (1, 2, 3). But you are not using those numbers. You need to call this function then print the result. As you are returning an object, that function is equal to = "That was a waste of my time". So you should do something like this def useless(): x = "That was a waste of my time" return x print(useless())
I've nothing to add but want to drop this link to a [talk from PyData NYC 2017 talking about NBA statistics](https://www.youtube.com/watch?v=S-GGnyMkJcw&amp;index=39&amp;list=PLGVZCDnMOq0oqs6RTJk4zZde86DZrgnzm)
I always recommend “Automate the Boring Stuff with Python” The author has made it available for free online, and it goes through some great projects to do with python. If you already know the language, go ahead and start with the chapter on regular expressions :) Sorry for not linking to the site. I’m on mobile. Best of luck!
Dataframe is an object in pandas library. It allows for storing data / table, and manipulating data inside.
There are no bad languages, only bad programmers. Oh wait Javascript still exists
Don't open the SQLAlchemy can of worms.
I was pleased with myself for knowing most of these, but I have to admit the return in finally was new. I have a lesson for my students that you can only return from a function once in Python. I guess that's not quite true!
You could do most of this with generator expressions. Any non-trivial lambda should be a function or method anyway. 
I went with these options as it seemed the most direct way to create python virtual environments with minimal dependencies on anything other than just python 2.7 or 3. My assumption was that this would be the easiest thing to present which the majority of people wouldn't have issues with on all the various platforms and python versions.
I'd recommend posting this to the cython-users list if you haven't already done so.
Reddit is rewriting the entire codebase to get rid of Python because of how slow it is, so it's a bad choice of example
got a link?
Version 2 doesn't work anymore. Have you tried 3?
I think it is the website that displays "All our servers are busy right now" every other day.
There is also pycrytodome. It is a fork of the last version of pycrypto. It is updated on pypi: https://pypi.python.org/pypi/pycryptodome
I was about to post this, maybe someone can dig into it here: "Using random.choice instead of random.SystemRandom().choice in an application that requires a secure PRNG could be potentially devastating" Quote from SE, can someone explain why?
I like [Machine Learning A-Z™: Hands-On Python &amp; R In Data Science](http://www.udemy.vip/machinelearning). I enjoyed while I was learning this course.I started without any knowledge on this topic, tutors are explaining in a simple and interesting manner to draw our attention.Its recommended for those who want to start career in Machine Learning.
Might be a good time to use *args. That way the user can waste however much time they want. For example def useless(*args): x = "That was a waste of my time" return x useless("all", "around", "me", "are","familiar", "faces", "worn", "out","place") returns "That was a waste of my time. 
Sorry but without seeing the actual data it's hard to help you with implementation...
Hate to throw in another random different direction, but I'm surprised neither of those mentions [click](http://click.pocoo.org/) or [prompt-toolkit](http://python-prompt-toolkit.readthedocs.io/en/stable/) in their "similar projects" or "prior art".
It would be a mistake to say that means *Dropbox is written in Go*. The clients are totally Python. It quotes an engineer from that particular project at DropBox. But elsewhere in the thread [he clarifies](https://news.ycombinator.com/item?id=11284620) that Python is the primary development language at DropBox for most of their components. Their *infrastructure* language of choice is Go. &gt; I probably wasn't sufficiently clear in my other message re Golang: &gt; - Python is our primary development language for most stuff at Dropbox. &gt; ...... &gt; - Go is the primary language for Infrastructure, meaning fairly deep-backend stuff: databases, storage systems, message pipelines, search indices etc. [This blog from dropbox](https://blogs.dropbox.com/tech/2014/04/introducing-pyston-an-upcoming-jit-based-python-implementation/) (still almost 4 years old) also mentions &gt; Here at Dropbox, we love Python and try to use it for as much as we can. The blog was announcing an Open Source JIT-compiled version of Python. [That repo](https://github.com/dropbox/pyston) has activity as recent as 6 months ago (in the py3 branch). I wouldn't think they would have hired Guido away from Google if DropBox was not deeply invested in Python.
https://stackoverflow.com/questions/1366047/random-choice-not-random https://en.wikipedia.org/wiki/Mersenne_Twister The PRNG in random.choice isn't cryptographically secure.
**Mersenne Twister** The Mersenne Twister is a pseudorandom number generator (PRNG). It is by far the most widely used general-purpose PRNG. Its name derives from the fact that its period length is chosen to be a Mersenne prime. The Mersenne Twister was developed in 1997 by Makoto Matsumoto (松本 眞) and Takuji Nishimura (西村 拓士). It was designed specifically to rectify most of the flaws found in older PRNGs. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
Makes sense. I guess I've just been lucky with working on projects with a sane naming scheme.
Yeah. great choice
Yes, randomness is really hard.
Python's signal handler sets a flag and then returns from the signal handler callback. This flag is then later read by the interpreter loop, and if its set, it effectively jumps the python callstack to the signal handler you installed. As a result, you cannot execute your signal handler until the interpreter loop is free. Cython, being C code executed on the C stack, doesn't yield to the interpreter until the C function is completed.
If it wasn't good for big projects then successful companies wouldn't use or at least continue to use for them. Further the source for Reddit is available to the public, so yes, you can go ahead and take a peek. The language has no effect on the difficulty of growth. It is the people who write it who are responsible for the organization and implementations. Lookup top python packages/modules and peruse some source on GitHub.
Here is an article slightly related: https://www.datamation.com/entdev/article.php/616221/How-We-Learned-to-Cheat-at-Online-Poker-A-Study-in-Software-Security.htm I find it super interesting regarding some of the pitfalls you can run in to when implementing something like this.
Glad to hear it :)
Great Post!
Thx
I'm learning both because I actually enjoy learning programming languages tbh. Nobody is making me do it so it's all good to me.
Ok, all good. Enjoy! :)
Working on my first android app, a logic game with python and kivy. I consider myself still a beginner, if you want to take a look do as you please [Oni Puzzle](https://play.google.com/store/apps/details?id=org.pecoroscompany.dvp.onipuzzle&amp;hl=it)
I meant both python and the languages mentioned above can be compiled to LLVM and the to the gcc IR. There's Cython which compiled python to C, hence my statement. I never claimed Cpython compiles to the same IR as C/C++. But obviously my comment wasn't well understood, so, nvm
Here's one solution if I understood you correctly: result = {key:value for (key,value) in b.items() if key in a.keys()} Basically the [dict].keys() function returns you the keys in a dictionary as a list. The "if key in a.keys()" checks whether each key in b exists in a, and if it does then and only then does the key-value pair get included in the new dictionary assigned to the variable "result".
Yet more drivel, I'll be waiting until the cows come home for the proof that supports this latest complete and utter load of cobblers. Off-by-one errors, null references... What is the point when clueless morons are allowed free reign when put up against Chartered Engineers?
Yes, try your favourite search engine.
let me know if you still have any questions though, glad to help
sounds like job for a Data Scientist. A library that helps in these cases is definitely [pandas](https://pandas.pydata.org/). 
i agree with my fellow contributor You are calling a function with 3 parameters who are (1, 2, 3). But you are not using those numbers. You need to call this function then print the result. As you are returning an object, that function is equal to = "That was a waste of my time". So you should do something like this def useless(): you can get help from https://tutionpool.com x = "That was a waste of my time" return x print(useless())
I'm not allowed to use the print function.
Started a serious attempt at learning Python this week. Couple months ago, I started writing bash script that can convert cbr and cbz files into pdf. As of now, I managed to parallelise that bash script, albeit in a hard coded way, and generally worked very well, utilising 7zip and ImageMagick. So then I thought why not try and recreate it in Python. At first, I struggled with argparse as I wanted to add switches for the script but had to put it off because of Christmas and stuff. Fast forward to now, waiting for my first year in uni to start, I decided to have a second go at python. Instead of focusing on getting arguments to work or any other additional functionality, I focused on getting the core logic working. After hours of reading docs on os module and manipulating file paths, I got it working and boy it was worth it. [pics](https://imgur.com/a/ZBKCx) A 16.5x improvement! All from avoiding using ImageMagick and instead use [img2pdf](https://gitlab.mister-muffin.de/josch/img2pdf). After getting the core working, I eventually got to understand argparse enough (still a beginner) to make it work in my script and manage to get parallelisation support from the multiprocessing module. Then I attempted to get cross platform to work with pathlib which worked great as it now runs on Windows. Still, you can't learn all of Python's intricacies in 3 days (don't really know how to use classes or decorators yet), but at least this serves as a neat introduction to a pretty good programming language, and hope to improve over time. Don't currently have a GitHub repository for the Python script yet, but if you're interested I have the bash equivalent repository you can check out if you want. (Still trying to get the hang of git) [cbr2pdf.sh](https://github.com/Julian-Heng/cbr2pdf)
I understand, think is I am hesitant to loop over b, as contains more than 100 million entries.
I find [awesome python](https://awesome-python.com/) good for that.
Get them to write the documentation.
But what is the error? Python 'Print' Function is usable in all cases. I think you should be using python 2x , i did on python 3x. In case that you are using python 2x. Use this: def useless(): x = 'That was a waste of my time' return x print useless() :)
I would look into the [documentation on view objects](https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects). Most of the common dictionary methods return iterable objects in python 3, so rather than requiring 100 million entries be in memory at once, they are only loaded when requested during iteration. Similar methods exist in python 2 under different names, like `iteritems`.
If you use both, what are some quick pros/cons? I'll have to make a decision in a month or two
You can have IDLES that helps you out while you are coding. They give you hints &amp; tips to make your code run more faster or without any error. As PyCharm: https://www.jetbrains.com/pycharm/ Now i will explain you something about coding. There are many ways to code anything, **you can code the same software** in 1000+ ways. Depends of you if you ca optimize your code. Now i inspect the function called: def slow_function(a): This its more slower because you are loading the **mask list** everytime the function is called. So you are writing the mask list everytime. (In this proccess is where the time comsumtion on your script have) Now on def Fast_function(a): You are leaving the mask list in Global Declaration so any function already can read that list and saved on software cache. **All things not inside any function or _main_ start? Its a Global Declaration. And its more accesible for all other elements. Also, in the fast function you can see that you are only returning the (a &amp; mask[5]) variable. And the mask[5] variable its already loaded. So it just return the number &amp; the mask[5]. Thanks. You can contact me, by PM. Please check my store on profile link, there you can encounter good softwares coded by me. :)
Very good and excellent implementation Sir, I am studying computer vision course and have decided to do the same project but add recognition, also if I get bandwidth then put this on a raspberry pi, what else can I change or improvise on your code? I am thinking to write this entire implementation by scratch but will give you credits in case I end up using some part of your code 
 Try making a function which finds the [factorial] of a given number(https://en.wikipedia.org/wiki/Factorial)
Thank you very much for the help, its just that i'm not allowed to use the print function for this project :(
That's actually way easier than coding my way through this, thank you!
You are confusing "random" with "causeless". For instance, the molecules in a cup of tea vibrate in a random fashion, but the heat of the tea is the cause.
I don't use Django so can't talk to actually using it. Design wise I prefer that my application live outside the framework rather than live inside the framework. In the project I'm doing in Flask, Flask is only used when handling web requests and not when doing command line scripts, cron jobs, etc. I don't think either is the "right" answer, it just depends on what you like. 
Love this answer. Same thing that might be easier to understand. result = {} for key,value in b.items(): if key in a.keys(): result[key]=value This and the above are the same solution. 
Try taking board or card games off wikipedia like Connect 4, checkers, battlship or blackjack etc. These will give you strict project requirements by their very nature of having rules to follow. They also have alot of logic, classes and data structures
Interesting read, thanks
https://gitlab.com/Tabares/photosort ?
This is a small tool I've written and I thought it could be useful for someone. Feel free to use it (or criticise) as much as you want.
Nice podcast, thank you.
You're right, sorry. As you mentioned, the link is https://gitlab.com/Tabares/photosort .
You need to work on your readme formatting. I wrote something similar with different tools and priorities. It uses piexif to read the exif data and also calls jpegtran to apply lossless rotations (and zero out the exif ones). It also has the ability to look for matching files that can come from iPhone Live Photos. Mine also does some of the work in parallel via multiprocessing. You do need to be careful about same dates. Again, if you use an iPhone and have HDR on, you get multiple with the same time stamp Also, why not make this useful from within Python? You will want a if __name__=='__main__': statement and a few tweaks. Also, `optparse` is deprecated. Use `argparse`
You r possible right but is not random that molecules move. They only move if you heat. If they move randomly that's another matter. There is a cause why computer crash but only appear random if you don't know the cause. The cause will give you a pattern and nothing is random if there is a pattern.
Was wanting to use PyQT the other day, but alot of the repo's are offline. Installed QT but the PyQT config.py cant read the path. Have any advice on adding QT to the Path?
/r/learnpython Also, please use code formatting. Four spaces like this or \`like this\` --&gt; `like this`
Thanks for the feedback. The README is a last minute hack, I forgot to add anything to it and I've never actually used markdown.
Sorry that project was a few years ago. I haven't done any GUI work since then, PyQT or otherwise. You might want to post in /r/pyqt/ to see if anyone has some pointers.
Antivirus works the same way chemotherapy does.
Don't try and actually do any number crunching in Python, use libraries like `numpy` instead, which is SIMD-vectorized C-loops over your arrays. Python `list` isn't even memory contiguous so typically `numpy.ndarray` is 50x faster. If NumPy isn't fast enough, you can mutli-thread with a virtual machine like NumExpr or Numba. Alternatively you can dive down into C-light with Cython, or real C with a C-api extension. For small arrays (&lt; 4k-64k elements) single-threaded Cython will generally beat the virtual machines. C-extensions are usually 2x faster than Cython, but involve a lot more boilerplate. 
Most AV is pretty awful alright but I always actually found windows defender to be pretty efficient (the Win10 ver anyway). 
The last example/explanation was really nice "Digital Signature" -- I sort of think all communications (the ones that should be secret at least) should be this....I like how laymen it was presented.
Part of the project unfortunately lol also import isn't allowed ;/ 
Interesting. I have not come across any features in Pycharm that would assist in detecting and pointing out ways to optimize python code. The closest I have seen and used to good effect is the ability to setup a configuration for profiling the code, but all the actual work to optimize the code is left to the engineer. And, of course, I should also mention the excellent https://github.com/rkern/line_profiler which is quite effective in discovering cases like the one I wrote about. What feature(s) did you have in mind when it comes to pycharm? 
&gt; wouldn't rely on a website to build executables for me Yeah. I'm considering figuring this out for myself and building my own handy GUI to do it locally.
I will have to check that book out. Thank you.
Working on a python chat app to learn Qt and better understand networking. So far it's going well, although networking seems a bit hard to grasp at first
Right, but you can name variables that hint at expected type. - `is_active` is obviously a boolean
I work monitoring news (sending clients email alerts of news), so i did a web scrapping script to stylize automatically the text inside the news given the URL, and then export it in a notepad GUI to easy copy-paste and send the alert to clients. I'm working in the integration with Active Campaign API, but AC sucks. I would prefer using icontact or MailChimp but the boss is stubborn 
I think your looking for something like For k, v in d.items: If v == 9: Mylist.append(k) Sorry if this looks off on mobile
I believe this question would be better suited to /r/learnpython. However, I'll try to explain. What you have there is not an array, but a dictionary (other languages call these maps or hashmaps). Dictionaries are just simple mappings of a key to a value, and they don't have any special facilities for selecting values like you're trying to do. As /u/Grorco says, you'll have to loop over your dictionary. Python contains a special syntax called a list comprehension, which fits well here: selected_values = [v for k, v in d.items() if v == 9] There are also third party libraries (e.g., [pandas](https://pandas.pydata.org/)) that enable the kind of selection you're trying, if you want to go that route. 
If you’re going for speed you need to invoke C libraries to do anything that is time sensitive. Otherwise don’t worry about optimization until it becomes a problem. I can’t tell you the amount of hours I spent trying to optimize the stupidest things when I was first getting into programming. 
In your example you're using a dictionary but referenced an array. In python [] == list == array(other languages). So you could have stockValues = [['a', 1],['b',1]] listforprint = [] For x in range(len(stock values)): \t if stockValues[x][1] == 1: \t\t listforprint.append(stockValues[x]) print(listforprint)
Thanks, the actual variable is called stockValues. Do I change v to stockValues?
Ah, I missed that. No, you'd want to change d to stockValues: selected_values = [v for k, v in stockValues.items() if v == 9] `k` and `v` are variables defined in the loop, they're going to take on the value of each key and value in turn. 
Python =/= Javascript How ever if you have to then use something like [Transcrypt](http://www.transcrypt.org), additionally there is /r/learnpython where your questions would fit more appropriately, if you're going to focus on browser extensions then I would highly recommend learning Javascript /r/learnjavascript 
/r/learnpython def get_combination(k=0, n=list()): result = list() if k &lt; 1: return [[]] for i, x in enumerate(n): for suffix in get_combination(k - 1, n[i + 1:]): result.append([x] + suffix) return result
I've spent a few minutes trying to figure this out. I'm by no means an expert, but I think it's a great example of when list comprehension gets silly. If you're looking for combinatorial approaches, I would suggest looking at the itertools module (it has functions for most combinatorial requirements, e.g. combinations_with_replacements).
Don't type \t, just 4 spaces.
I primarily deal with Kivy which supports pyinstaller officially. I`m surprised there isn`t more GUIs for packaging.
Hi, I'm curious ... what benefit does this give over simply doing something like class GeneralException(Exception): pass 
Py2exe and pyinstaller both bundle a precompiled bootloader program, which I believe is responsible for actually launching the interpreter. Because this same bootloader is included in actual malware packaged with py2exe you get a signature match and a false positive. I got around this by compiling my own pyinstaller bootloader in visual studio - see https://pythonhosted.org/PyInstaller/bootloader-building.html beyond that, I submit a false positive report to the companies who still flag the file (it takes about 3 minutes)
I agree but who honestly wants to deal with Windows and DLLs and stuff. 🙄 I try to limit my py2exe use to just mild tasks like backup or data processing or exporting. Then I can do heavy lifting on a *nix server.
&gt; Explanation: &gt; a += b doesn't always behave the same way as a = a + b. Classes may implement the op= operators differently, and lists do this. &gt; &gt; The expression a = a + [5,6,7,8] generates a new list and sets a's reference to that new list, leaving b unchanged. &gt; &gt; The expression a + =[5,6,7,8] is actually mapped to an "extend" function that operates on the list such that a and b still point to the same list that has been modified in-place. Why is not analogous to + and += for numbers?
It is easy and effortless, and you can put in a custom message and debug variables without much knowledge.
Numbers are immutable
That url 404’s
What bro explain me little bit clear please
still don't know what to do
If you insist on avoiding dealing with any altered form of `b` and don't have to use comprehensions, you could also simply do this: for key in a.keys(): try: result[key] = b[key] except: pass If a key in `a` doesn't exist in `b`, the `b[key]` part would normally raise a KeyError, but with try/except you can "reroute" the error handling to a pass. That way, you only loop over items in `a`, whereas `b` is only ever accessed as a dictionary.
My suggestion is to find a small library on github (1000-5000 loc) written in pure python (no extensions) with a good handful of issues. If there are tons of issues, the project is probably too big. Look around until one sounds interesting to you. You may find something here: https://www.codetriage.com/?language=Python&amp;page=3 Ideally it will be something on PyPI Start by reading through some of the open issues. Run some sample code from the README. Then start checking all the unit tests to see if they make sense. Fork the code and write the first unittests if there aren't any. Add in continuous integration (like TRAVIS CI) if it doesn't exist. From there start tracing some bugs, fix them, and write all the docstrings for the functions you just figured out if none exists. Read through the Google Python Style Guide for ideas on good docstrings. If you're mathematically inclined, another good avenue is to write a Python solution to all the Project Euler challenges (until they get too hard or you get bored). Read through the comments on the puzzle to get examples of good and bad code/solutions.
Why Python 2? It is considered "legacy" python at this point and will cease support at the end of 2019.
In this case it sounds like he wants [k for k, v in stockValues.items() if v == 9] Otherwise he'll just get a list of [9, 9, 9,...]
The smallest I'm going on my point count is about 1 in. sq., so on a 50 in. cylinder object, with points every 30 degrees, I would be looking at (50 + 1) * (360/30) = 612 points. Do you know of a better entry point to vtk than their 500 pg user guide? or is that really the best place to start. 
Unless I'm misunderstanding, import collections print collections.Counter(words) works, assuming words is the input.
Well, at that point, and without knowing anything about the executables, I've no idea that won't involve resorting to whatever the Windows versions of lsof and strace are to find out what the heck they're doing. If they're stowing or closing standard streams, then there's no end to the mischief they could be doing.
Whoops, you're right. Thanks.
If the the output routine works the way I think it does: #! /usr/bin/env python from collections import Counter from operator import itemgetter from sys import stdin def main(): c = Counter(stdin.read().lower().split()) r = sorted(c.items()) r.sort(key=itemgetter(1), reverse=True) for word, count in r: print(word, count) if __name__ == "__main__": main() If you didn't care about maintaining lexical sort order on words with equal count that could be shorter.
Will look into it. Sweet! 
Stems from having a non technical background. I’ve been reading computer science books to catch up. I studied finance. 
Awesome thanks! Will dig into it. I was using Zed learn python the hard way and I dumped it after 2 weeks, didn’t like how he grazed through topics. 
:D have fun 
That's not really true any more. A lot of websites use PHP because they use Wordpress or some other engine written in PHP, but a lot of new stuff is being built in Python, Node or Go.
As u/k900_ said lots of new sites are written in python, go, etc. But to answer your question, legacy systems. It’s much cheaper and there is less risk just maintaining a current system until you need a new one rather than jumping on the next current tech bandwagon. For example I write in C, fortran and pascal at my job due to real time constraints...god damn legacy systems. 
Write a command line chat program. You will learn about sockets, threading and the client server paradigm. 
Scraping?
The **hash** builtin doesn't return an object with a **digest** method, it returns an **int**... you may be thinking of one of the hashing algorithms in **hashlib**.
`test_self_check` apparently expects a cryptographic hash function of some sort (the kind found in hashlib) as third parameter, you're giving it the `hash` builtin which is not one and simply returns an integer. Maybe you missed some explanatory bits in the text?
Which problem is this trying to solve? It looks like you've made a function which raises exceptions. Why is that easier than just raising an exception?
Personally I'd look at using **pyenv** (or **pipenv ** wrapping **pyenv**).
Well yes I agree with you too. When not applied dogmatically and used on need basis it can help massively with large code bases. Ditto Typescript and other similar solutions for dynamic type languages. 
Sure, WordPress messed the indentation, I shall try to add an image of the code with proper spaces.
Ohhh thank u bro
Please don't. Use a plugin for displaying code, a theme that supports styles for code, or upload to gist/GitHub. An image of code, even a snippet, is just shy of absolutely useless. 
In fact, it's also a nice project for learning p2p encryption
Yes but I guess it will require me to go for a paid plan from my current free plan in order to be able to install a plug-in, i shall try uploading to GitHub.
I'm a final year masters student in Materials Science (a bit like engineering!), and I do a lot of hobby coding on the side. If you want to do something that fits in well with your studies, I'd really recommend getting to grips with: * **Juyter notebooks**: The ultimate interactive IDE (the program that you write your programs in) displays your plots and tables seamlessly. * **Pandas**: The beez knees for the actual data manipulation; slice data, take rolling averages, standard deviations, everything. + it understands a ton of formats to import and export to and from. * **Matplotlib**: The best way to make publishable standard plots, in which you can do everything Excel can do x1000. (it is a little hard to get started with) * **Bokeh**: Fantastic for exploring/ visualising your data. Makes plots where you can pan, and zoom in on different sections with no effort. (and works great with Jupyter!) Maybe try using the above to interpret data you've collected in your studies? Alternatively, I made a program that plots the chance that it won't rain in the next `x` hours, to help me know when to put out my washing! For that I used Jupyter notebooks, Pandas, Bokeh, and **requests** to get the data from an API. 
I wouldn't cal that all that dramatic. It's ~6 seconds. You should only be profiling real problems. The problem is faster because you're not recreating your mask list each time. You're just loading it from the global space, which isn't great, but better than creating it from scratch. Masking can be incredibly efficient, but trying to micro-optimize python when you could use numpy and get 1000x isn't too efficient. You could make your code even faster by saving `masks[5]`. A few years ago, I was sent a code that heavily used masking to speed it up. This code was 1/100th as capable as what mine did, but on the same problem, it did it ~700x faster. Turns out masking helped a little, but it made the code more complicated. The real issue was mass casting 200+ MB of integers or floats with a single `numpy.frombuffer` call. Turns out it's also faster to cast twice than recast. I also stored a whole lot of struct objects. I ended up getting my code a litter faster than the original, so 45 minutes down to 4 seconds. I use snakeviz these days https://jiffyclub.github.io/snakeviz/ I also make liberal use of numpy, so numpy.where, searchsorted, amax/amin, norm, and frombuffer. Use the axis parameter and don't use if statements. It's called vectorizing your code.
Check `sys.stdout.encoding` on Python 3. Likely, that isn't UTF-8, for what reason.
I know some of these words what could be a workaround to that? Could I run a dummy python script right after I send the sigterm?
Just add # -*- coding: utf-8 -*- after #!/usr/bin/env python 
Hey, have you solved it? I have the same issue.
Oanda is a forex broker that has a public REST API. They even provide a Python wrapper for it. Write a program that trades currencies and makes money for you.
Expert in web scraping of complex, javascript heavy sites like Telegram and Discord. Use selenium and other tools to create data extraction bots, trading bot, PM bots, etc. Demos of past projects available upon request. More than 8 years of experience in building Desktop, Web apps and server backends. Favourite tools include Python, NodeJS, PostgreSQL. Can design and develop embedded systems including hardware and software. Looking for challenging work in Web app dev, Bot development, Automation, Data extraction, data analysis, data integration, data processing, etc. Open for freelancing only, as I already have a day job as a professional electrical and electronics engineer. Programmimg is a passion and have been programming for more than 8 years, not including amateur programming in high school. 
This app technique was truly groundbreaking in 2004. Today even more amazing colorization is achieved with machine learning techniques. Perhaps not as elegant and a very inefficient use of resources, but the results are hard to argue with. 
Thank you everyone, these are all great suggestions!
Because you would have to manually copy it? This seems a bit harsh. 
While good for normal devs this isn't super useful for a mechanical engineers
Some bug on latest idea. Going back to previous release version fixed it. I have a youtrack issue raised with someone finding a workaround but no official reply from jetbrains. 
The results are especially hard to argue with if you don't link them so we can see what you are talking about.
You can manually add [code='python'] blocks even in the free WordPress version FYI
From what I know about wear leveling, it arranges data so that erasures and re-writes are distributed evenly across the physical medium. In a flash memory, a single block on the chip is designed for longer life than the others for the memory controller. Can you kindly explain how that would conflict with secure wiping?
I might swap to shred or srm in a future version for secure file deletion, but I have been using my algorithm for detecting and deleting duplicated files for over a year and it has been working fine so far.
This is one of the areas where competing with machine learning is becoming impossible. Have a look at this: https://github.com/lllyasviel/style2paints The method in the link above also does not need any hints, which makes it feasible to use at scale. 
Thank you!!!
Get [Homebrew](https://brew.sh). Then: $ brew install pyenv pyenv-virtualenv And put something along these line in your, erm, ~/.zshrc (I think the exact same should work for bash?): if which pyenv &gt; /dev/null; then eval "$(pyenv init -)"; export PYENV_VIRTUALENV_DISABLE_PROMPT=1 eval "$(pyenv virtualenv-init -)" fi # Stop pyenv from interfering with Homebrew alias brew="env PATH=${PATH//$(pyenv root)\/shims:/} brew" And then just use pyenv for your things. 
You're going to want to describe your Cython module a little more and what it's doing. Is your Cython running a tight computation loop? You could just occasionally call a do-nothing function in a regular `.py` file, like on every 10k iterations or so. That would let the Python interpreter run for a moment, you can catch the signal and then set your flag. There's another option if you're using asyncio, but if you were I don't think you'd have this problem at all. A third option is to just do signalling manually from within Cython by just including calls to [signal](http://man7.org/linux/man-pages/man2/signal.2.html).
Write a web server, from scratch. Not exactly useful, but it is fun and you can learn a ton of valuable things. 
Since those are good packages for a data analysis workflow, I would also recommend scikitlearn and numpy. Especially the latter since it underlies many of the ones you mention.
What? No mention of the Anaconda package?! The [Anaconda](http://damnwidget.github.io/anaconda/) package is the most valuable for me.
Python 2 comes preinstalled. That's a little weird no?
Did building your own bootloader solve 100% problem for you? Have you tested with Virustotal? Did you make any changes to sources or to the compiler configuration to make sure the result executable was different? I'm not convinced this is reliable, I think AV will still think your bootloader is very similar to pyinstaller's original and thus mark it as bad as well.
Get your hands on a raspberry pi and make [this](https://www.youtube.com/watch?v=XWhGjxdug0o). Once you've mastered easy mode, move on to [hard mode](https://www.youtube.com/watch?v=Ep2lNMic_fk)
Not built in but research pyro's oneway or even async features. Combine with Pythons builtin queue.Queue as desired. 
Building he bootloader dropped the false positives from like 60 to 12 on virustotal, the rest were all variations of Bitdefender's engine, which I submitted a ticket to and they updated their engine. I compiled mine in vs2015, no other changes - I think they just flagged the actual bootloader file rather than any signatures (since it is just an innocuous file)
First package I would install is visual studio code 
You can use python to build apps but it's probably not the best for the job.
It's viable, but not great. Using each platform's native language/toolkit makes the experience much better, both for you as the developer and for the user.
[r/learnpython](https://www.reddit.com/r/learnpython/)
[r/learnpython](https://www.reddit.com/r/learnpython/)
You could also use a &lt;pre&gt; block
Thanks! that works great, it really helped me understand it better
Could you Please set yourself on fire ?
Writing on a wear leveling disk is usually done such that it writes the updated block to a block that is currently marked empty, then marks the old block as empty. This program tries to write over the file at a high level before deleting. All it effectively does is move the file pointer location a couple times leaving all the sensitive data in place (though in a now "empty" block) I'm also not sure what utility there is in writing to the file twice in quick succession, this is probably just optimized away in the disk buffers. In fact, by promptly following it with a delete, I'm not sure that any of the random data is guaranteed to be written at all.
Advantages or disadvantages are irrelevant. It all boils down to _your_ needs and use case.
It's possible, but it won't be easy, especially when you're dealing with HIPAA.
Here we go again. Who is going to be the first numpty to claim that Python is call by value or call by reference, as that is all they know about, and not call by object as described [here](https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/) and [here](http://effbot.org/zone/call-by-object.htm)?
If he is trying to build a game I recommend learning Unity. It uses C# (or JavaScript) and is in jeneral a verry powerfully software for building apps and games in general.
As someone who works extensively with hospitals and clinics I second this. I hate to be "that guy" but your best bet is to contact the hospital/admin and ask them if they would be interested in contracting or using their own contractors to provide simple, secure, and effective software for your purpose. They usually tend to be very touchy when it comes to people's personal info for good reason. As for being able to do it. I really don't think it's hard at all depending on how you get your data.
vim 4 life! ;)
That is unspeakable! I dare not speak of it?
You seem an experienced programmer. And about the numpty part - this could come in handy for those who are pretty much new to it or are coming from another language and for some reason land to the above page instead of effbot and jeffknup's article. Anyways, thanks for linking their pages. Cheers!
I don't believe that you can do it directly because of:- &gt;&gt;&gt; "{:0&lt;15.8X}".format(128) # doesn't work Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; ValueError: Precision not allowed in integer format specifier So how about:- &gt;&gt;&gt; "{:08X}".format(128).ljust(15) '00000080 ' 
It’s all hypothetical. Right now they do this all manually, so I was just curious if it could be sped up for them. Little less leg work and a little more automation. 
Python is useful in and of itself (see, for instance, https://automatetheboringstuff.com), and it's great to learn how programming works in the first place. You *could* use it for mobile apps, especially the simpler ones, but I don't recommend it. [Here](https://pybee.org/project/using/cross-platform-mobile/) is an article by beeware with the rest of the tools. I think it's best to start with Python and then move on to native languages once he's comfortable with the concepts.
Only 44 years experience in electrical engineering, electronic engineering and computer programming, a mere 17 years of Python. I would say that until ill health stopped me working I was a full member of the British Computer Society and a Chartered Engineer, but people on reddit have accused me of being a liar, so I won't bother. D'oh :-)
&gt;is Python a good language for that? No.
This is not a minor concern. I work for a company that has to be HIPAA and FDA compliant, and there are rigorous checking processes all the time.
Hmm. That's close! The problem with that solution is I am printing multiple things at once, not just that one number. So ljust() wouldn't work for the first item. I might just have to break it up into two operations.
The answer is going to depend on how well you can demonstrate tour ability to code. I'd recommend putting a couple of projects up in github and spending some time reading code in other devs repositories to pick up the nuance that's tough to pick up from classes and books.
Pyls &gt;&gt; everything in there
I highly recommend https://automatetheboringstuff.com/ It's a lovely book full of projects that could actually be useful in one's day to day life. 
I mostly agree with this...but damnit why does everyone use 4 spaces! It's such a waste of space. Just use 2, PEP8 linting is usually fine with it. You have more room, it looks cleaner, and it's more efficient.
For me at least it's just vision. I can read 4 spaces more easily than 2. 
You're also wrong :-(
Hmm, with a mono spaced font I usually have no problem, there's plenty of room. With regular sand serif I could definitely see it being an issue. Ubuntu mono or roboto mono are think are super clean easy monospaced fonts for programming.
I am **NOT** going to pass people to /r/learnpython as I've seen answers there that are poor or plain downright wrong, and when I said so I got banned, apparently the prima donnas over there didn't like standing corrected.
Well when the code block was more than 50 lines like OPs was last night, copying it is a bit unlikely for a reader. A bit rude though, you're right. 
Also I would say it's worth taking the hit in pay starting as a junior. As there is so much you can't learn from books and courses. And anyway if you think your that good after a few months most Dev leads will notice and try and fly you up the ranks anyway. Also in the UK unless your a experienced mid to senior Dev in London £60k-70k a year just ain't going to happen. I'm a well experienced mid level Dev for .net and python and I can get over £45k, even though it feels like half the business in my county are trying to head hunt me.
I have shitty eyes even with glasses :P If things are too clumped/cluttered it can get tiring and spacing things out sometimes helps with that. 
Haha fair.
Me (and some authors [1]) would disagree. Saying Python is call-by-value without elaborating would be insufficient, but saying it is *not* call-by-value would just be wrong. Call-by-object-reference is a variant of call-by-value. The crucial difference to call-by-reference is whether function arguments relay access only to the values of bindings at the call point (by-value), or to the bindings themselves (by-reference). The former is certainly what happens in Python, and hence a perfectly valid description of the semantics (even if incomplete). [1]: From `Programming Languages: Principles and Paradigms`: &gt; Call by value is a mode that corresponds to an input parameter. The local environment of the procedure is extended with an association between the formal parameter and a new variable. The actual parameter can be an expression. When called, the actual parameter is evaluated and its r-value obtained and associated with the formal parameter. On termination of the procedure, the formal parameter is destroyed, as is the local environment of the procedure itself. During the execution of the body, there is no link between the formal and the actual parameter. There is no way of make use of a value parameter to transfer information from the callee to the caller. (PS: I kept the last sentence, but it seems like an obvious oversight, since you can transfer information by mutating an object, but the author later describes Java's semantics as call-by-value, and it has the exact same caveat).
&gt; Cython running a tight computation loop? Yes &gt; You could just occasionally call a do-nothing function in a regular .py file you mean from the cython compiled script? There is a java function that sends the sigterm to the python (cython compiled), could this java application do that? &gt; A third option is to just do signalling manually from within Cython by just including calls to signal. that would include modyting the script.c, right? 
We'd like to gather some preliminary information comparing Transcrypt to CPython. Gathered info will be made public, but anonimized.
We'd like to gather some preliminary information comparing Transcrypt to CPython. Gathered info will be made public, but anonimized.
Instead of taking it out on the subscribers here, do something about the fact that: - Many people new to Python don't want to become programmers. They want to write specific code to automate something they need to do at work or in their daily life. - Those people google "Python" and end up using resources written for Python 2, or other resources that rank high in search engine results but are crap. Good resources need to be available to people who just want to write a short script to do something specific, but right now the only resources that are findable through Google are bad. 
There are other good resources such as tutor@python.org which is a very helpful and welcoming community or help@python.org where several people including myself try to answer language questions.
This is a tricky one. Generally speaking, becoming a great programmer takes about 10 years; even those 18-year-old rockstars you see sometimes have been at it for about that long, but they started early. For perspective, I started programming at age 12, and now at age 38 I'm still learning new stuff and improving as a programmer on a daily basis. So in this regard, 6 months is an awfully short time, and you won't be able to make up for it entirely with effort, motivation, or wisdom. The good news however is that developers are in crazy high demand, so even someone with a fairly modest skill set will have little trouble scoring an entry-level job, and in this industry, these can still pay a fairly decent salary, especially if you have good people skills and a know how to sell yourself well. When it comes to more senior positions, however, there is absolutely nothing that can replace actual experience, because the additional skills needed here cannot be learned in any other way. This is because senior position generally also involve tasks such as leading a team, mentoring junior colleagues, making technical decisions at the systems and architecture level, balancing technical concerns that may have far-reaching consequences, picking technologies for new projects, writing technical documentation, drafting design documents, auditing / reviewing the work of your colleagues, etc. You simply cannot learn any of these without having lived through the relevant situations a few times. If you've never seen what a small architectural choice at the beginning of a project can lead to after a few months or years of ongoing maintenance in production, then you simply don't have the experience to make such decisions. Now, $80,000 is a fairly large amount of money, and while there are certainly places (like Silicon Valley or NYC) where companies pay this much for a junior dev without batting an eye, most areas aren't like that, and in order to make upwards of $80,000 we're looking at a senior position, something like 5-10 years into your career at least. And one more thing: if you're only in it for the money, please don't. Being a programmer can suck pretty hard even when you're doing what you love; if you hate it, then it's pure hell. And what's worse, employers tend to spot the haters, and your chances of getting hired or being promoted into a more senior position won't be astral. I've seen such people in the wild - their colleagues hated them because they wrote shitty code and ruined it for everyone else, their bosses hated them because they didn't deliver, and they hated themselves for getting themselves stuck in this rotten situation. Now, assuming that programming is actually something you love, and you want to proceed with this, I would say your best shot at a nice programming / dev job that pays well would be at a relatively small company, startup or similar, where actual skills are worth more than paperwork; and ideally it should be a company where your previous professions would somehow be relevant. I don't know enough about the real estate business, nor about astrophysics, to tell you what that would be, but I'm sure you'll get some ideas. Additionally, rather than relying on (online) courses and prepared studying material, I suggest getting your hands dirty ASAP. Write some code. Do some projects. Immerse yourself in the communities. Read other people's code. Maybe even contribute some back, even if it's just bug reports or documentation fixes. Collaborate. Run a silly little website that does a tiny little useful thing. In short, gain some experience. Don't focus too much on a portfolio right now; just get cracking, and in a few months you should have a few things that might be worth putting on a portfolio (and a hundred or so things that definitely aren't). And don't get too fixated on any particular technology there - a good programmer can program in anything, and the better employers out there know this. You don't want to be a "Django Developer", you want to be a "Developer (who happens to have experience with a bunch of things including Django)". Simply because teaching a great programmer Django is easy, but teaching a lousy Django programmer how to be a better programmer is usually a lost cause.
From the sidebar: &gt; If you are about to ask a question, please consider r/learnpython or the learn python discord. 
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [My new book, "Cracking Codes with Python" is now available and free to read online!](https://np.reddit.com/r/learnpython/comments/7sigre/my_new_book_cracking_codes_with_python_is_now/) \#2: [I'm releasing a free code for the "Automate the Boring Stuff with Python" Udemy course](https://np.reddit.com/r/learnpython/comments/7fxork/im_releasing_a_free_code_for_the_automate_the/) \#3: [90% Python in 90 minutes](https://np.reddit.com/r/learnpython/comments/661o5a/90_python_in_90_minutes/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Ok... that didn’t help
\#TIL about yapf...
I meant in the text around or previous snippets, bits where the book would explain the code's context, how it's used, and which imports you're supposed to make to use it. Either that or it's a bit of a shit book.
Thanks, it worked, also found here: https://stackoverflow.com/questions/81338/how-to-blog-code-at-wordpress-com
I made a tool using flask and Salesforce's REST API that allows you to upload a CSV containing Ids from my company's Salesforce database and it spits out a CSV with whatever fields from the database you want appended. I could not find something like this out there already which kind of blew my mind.
Yes good point, my main point was pick the tools that fit the task. I am a bit out of the loop obviously with iOS :)
Good point. My main concern was use the tool that best fits, which wouldn't be python.
I always wonder why people need anaconda? Especially on Linux and osx? Anything you can do with anaconda can be done natively with apt/pip/brew. changemyview
This is probably better suited for the webdev subreddit. Plus, it really depends on what features the site has. If it's just HTML files, you can serve them directly through nginx and that's as fast as you could ask for. I think Django or Flask work very well with a large range of sites, but again it will depend on what you need. I don't feel like there is anything in node I couldn't accomplish in Django except some asyncio stuff.
Look up [Kivy](https://kivy.org/), Python is totally viable for mobile apps and it's a great first language to learn programming with. Contrary to what most people here are saying, python works great for mobile development and you don't have to recode your app for different platforms since Kivy supports Android+iOS along with Desktop OSs to boot. It's why I'm currently using it, I can build mobil apps and desktop apps with a shared codebase. Python programming is also one of the highest paid programming paths out there. [link](https://medium.com/@ChallengeRocket/top-10-of-programming-languages-with-the-highest-salaries-in-2017-4390f468256e) Here's a great video tutorial series on Kivy to get started https://youtu.be/F7UKmK9eQLY
I think you're confused. There is a Anaconda package specific to Sublime that is not affiliated with Anaconda (a 3rd party Python distribution) from Anaconda, Inc (formally ContinuumIO).
I agree that Anaconda/miniconda is not as needed as once before especially that cross platform .whl binary format is more widely available. Before, it would take several minutes to install packages from source. Also, have you looked into pipenv? It is the new officially recommended way to install packages and make virtual environments. Although it seems a bit buggy on Windows and can take a while for it to "lock" dependencies.
Use pycharm save yourself some time.
Didn't realize that. The only anaconda I knew was from continuum 
Yep i used to work on EPD and Canopy by enthought Inc. Conda and EPD made sense before wheels. On Linux i sell feel virtualenv is the way to go, at least for python 2 projects. 
Wow, that is really cool!
State which city first. The cost of living in some cities here in Canada is much lower.
Wrapping my head around Coroutines and eventually diving into async programming by the end of it.
This is the kind of thing I'm talking about. Such "resources" are everywhere because greedy people want to make bucks without deserving them.
Much appreciated! Cixl is currently around 4 times as slow as Python for this task. Do you have any idea if Counter is written in C or Python? One thing I did notice was that it doesn't really split words, looks more like it simply splits on space; which means that you get all sorts of punctuation noise in the output. Would you mind having another look so that we can get a fair comparison?
I just meant authors of language design books, I am not knowledgeable enough to be one :)
/r/learnpython and read the sideabar.
https://www.python.org/doc/
Yes you can. &gt; I was trying to use wikipedia api but I cant get it to work As the above is about as much use as a wet fart in a thunderstorm would you please read [How To Ask Questions The Smart Way](http://www.catb.org/esr/faqs/smart-questions.html) and [The SSCCE]http://sscce.org/) and then have another go, thanks.
7zip uses LZMA. If you just like the good compression ratio and don't care about actual 7z files, you can just use [the LZMA module](https://docs.python.org/3/library/lzma.html). If you want to create 7z files, take a look at [PyEasyArchive](https://github.com/dsoprea/PyEasyArchive)
Here is the snippet from the book: But both these solutions will break next time you fetch an updated dataset. A com‐ mon solution is to use each instance’s identifier to decide whether or not it should go in the test set (assuming instances have a unique and immutable identifier). For example, you could compute a hash of each instance’s identifier, keep only the last byte of the hash, and put the instance in the test set if this value is lower or equal to 51 (~20% of 256). This ensures that the test set will remain consistent across multiple runs, even if you refresh the dataset. The new test set will contain 20% of the new instances, but it will not contain any instance that was previously in the training set. Here is a possible implementation: import hashlib def test_set_check(identifier, test_ratio, hash): return hash(np.int64(identifier)).digest()[-1] &lt; 256 * test_ratio def split_train_test_by_id(data, test_ratio, id_column, hash=hashlib.md5): ids = data[id_column] in_test_set = ids.apply(lambda id_: test_set_check(id_, test_ratio, hash)) return data.loc[~in_test_set], data.loc[in_test_set] Unfortunately, the housing dataset does not have an identifier column. The simplest solution is to use the row index as the ID: housing_with_id = housing.reset_index() # adds an `index` column train_set, test_set = split_train_test_by_id(housing_with_id, 0.2, "index")
So… you've removed the original snippet, but the book *did* have the hashlib import and it *did* default the `hash` parameter to a proper hash function.
I must have not added some parts of the initial code. Please see my edit to the original post.
Not like its all great content here either. Constant medium.com posts that are just advertising for bullshit 'learn python in 10 hours' online classes, or someone ranking "the top 10 modules of python for 2018!!!!!".
What performances do you want to get, for what kind of workload and what kind of tasks ?
&gt; is there a backend framework faster than node.js? &gt; For small website generally. Depends on several things. First, do you know javascript? If you are an expert in javascript and don't know any other languages then node will be the fastest in the metric that matters: "How long it takes to get your backend into production" For a small website, nothing else matters. There are several web development frameworks [written in BASH](https://github.com/jneen/balls) that can handle the response SLAs of a small website. The thing that matters most is what you know how to do, and how quickly you can use that to get into production. Don't chase benchmarks or fads. A small website does not need that level of concern. Use tools you know how to use to create something that is quality. If you want to ignore all of the above and chase benchmarks; [it's Iron.](https://github.com/tbrand/which_is_the_fastest) Have fun learning Rust! (Although I see that router_cr in crystal ranks in at #2, crystal is ruby-like so doable.)
Well, I'm using a book to learn Python (not my idea), and the book uses Python 2. I would much rather use Python 3 instead, but my teacher INSISTS I use 2.
If you want a dedicated IDE, sure. ST is more than just a python editor; it's my go-to editor for YAML, haml (ooh! Alliteration!), php, html etc etcetera ad nauseum
Chiming in with "Anonymous Pro", Input, Monofur and "Envy Code R" as clean monospaced fonts.
Down-voted to the 2nd circle of Hell. Ouch.
It's really that low? In the US you would be getting around $100k. Is London livable on that salary?
Use the built in CSV module or pandas.
You're not downvoted because people think you're wrong. You're downvoted because your answer isn't constructive. While [technically](https://xkcd.com/1475/), yes, the question can be answered with a single word, it's much more helpful to add reasons and alternatives.
The Counter is a subclass of **dict** with additional behavior, at least that portion encountered in the above, [implemented in Python](https://github.com/python/cpython/blob/3.6/Lib/collections/__init__.py). Of course **dict** itself is implemented in C, in CPython, so you're not particularly far from C performance. As for splitting, it's not all clear from docs or context what cixl considers a word boundary. Are strings Unicode or simply bytes? What characters delimit a word boundary?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [python/cpython/.../**__init__.py** (3.6 → d7274c6)](https://github.com/python/cpython/blob/d7274c6638fc88d72b73f8cdc6b888270a5e7a50/Lib/collections/__init__.py) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dtbycjl.)
Yeah, I have some experience with the internals of dict; so I know that part is fast. Cixl uses flat memory vectors which rival Pythons more elaborate solution in terms of speed from my experience. So I'm trying to figure out where the speed difference comes from here, and doing the entire count loop in C would explain some of it. Anything non-alphabetical will do as word-boundary, I'm sure Python has some kind of built-in alpha test for chars.
No mention of MagicPython? I personally like it better than the default syntax hilighting: https://packagecontrol.io/packages/MagicPython
This sub is more for advance python usages, new packages and core news. HOW TO questions should go to the above directions. Anyway, as I'm not familiar with asciitable, and I won't GITFY, I would suggest to do list comprehension to get rid of the unwanted items 
Python might be useful for server side programming of mobile apps. For front end dev, Java | Kotlin | JavaScript | c# xamarin can be useful. Also, on the long term, python will be a native language for the next Android OS
subprocess.run(['7zip', args])
&gt; web development frameworks written in BASH OMG
Awesome. Is this an open stack kind of thing.
That's bs. Python is fine. YouTube and a ton of other large services use it.
You'd need to supply more information on what exactly you're doing. Considering Instagram runs on Python I am not sure why you're encountering speed issues when you're much smaller than they are. 
Your brother is the dumb one, i take it.
Anaconda is a must!
http://scikit-learn.org/stable/modules/neural_networks_supervised.html
Naw, energy management systems 
Python Just Works™ for me, I just get on my high horse when people come from other languages and insist that they know how Python works.
First, I would advice you to use [context managers.](https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/). Regarding skipping the first line, you could use &gt; (csv.reader)[https://docs.python.org/3/library/csv.html#csv.reader] to return an iterator over which you can skip any line by calling &gt; next(iterator) with open('path/to/file.csv') as csvfile: reader = csv.reader(csvfile) next(reader) #skips over first line (headers) for row in reader: print(row)
Check out sentdex on YouTube. He does so many dope python projects that are very original and explained very well.
&gt; With regular sand serif oOo, one of those gritty programming types
Each has a place on my system, but Sublime kicks VSCode’s ass when it comes to responsiveness.
Also, if he wants to cast x1 and y1 to floats, he could do this (although I'm sure there's a better way): whatever.append(map(lambda x, y, z: x, float(y), float(z), row)) I swear there's a more pythonic way of doing this, but I can't remember right now.
Yeah, It seems like It is a must have package So added in the Blog Post.
Ah cool. The only time I've seen apps running those languages was when I was finance IT
I've found anaconda to be an extremely noticeable resource hog.
Beware of yapf's opinions. Flake8 settings and developer discipline will always do better than yapf.
Because PEP8 says it must be so https://www.python.org/dev/peps/pep-0008/#indentation
Check out lstm in Keras. Sci kit learn doesn't really do much NN stuff. Keras has a similar API, and you can use both together.
If you want something super fast consider not using Python or JavaScript. A lot of people seem to like Play Framework. I've used Django - some people dislike it but Python 3 is a much easier to work with language than JavaScript. It's good but will require some hard engineering if you want to make scale up.
It works pretty well, at least for financial data, can’t speak for other things. 
Just because something is old doesn't mean everyone knows about it.
I couldn't agree more. 
And I still write 'em. But I type hint now, too.
&gt;Loses FTFY
&gt; argument unpacking Awesome, thank you (looks and feels like dereferencing a pointer?) &gt; use numpy.random.random will do, problem resolved! 
DISCLAIMER: I haven't completed anything except one simple project with no significant practical use. But I keep trying to think of programs that have some kind of practical use. So far, the ones I have thought of are too complex for me to write right now, but I'm always hopeful of thinking up something that's simple enough. I get my inspirations by keeping an eye open on what happens in the wider world and what I want to do that a computer program could help me do. Like you, I hate writing academic programs that exist only for school practice or so your teacher can evaluate how much you've learned, but have no real use. Hope that helps.
I'm pretty sure 7Zip can open .zip files. If it can't, it's trash. If you send me a 7Zip file and not a simple .zip or .tar file which even my toaster can decompress out of the box, fuck you.
Find things you like and see if the speed/flexibility of python can help you optimize it :) For example, I am into cryptocurrency, let’s just say I can’t stop coding crypto related python projects. And I haven’t coded in years. Who knew python + crypto would rekindle a coding fire inside of me ^_~
As gosh_djang_it said, the sidebar is full of great resources. For fast learning, I would recommend the "Automate the Boring Stuff with Python" link. It's a free online e-book which walks you through different things you can automate, great way to learn. There are also tons of videos on YouTube you can watch. Since you've never programmed before, you're going to want to start with the basics such as: * learning the different variable data types. E.g. strings, ints, floats, etc * learning how to manipulate variables. E.g. addition, subtraction, multiplication, division, converting between types such as turning a string into an int, etc. * Learning how to receive input. E.g. input via command line, from files, JSON, etc. JSON will be very important for APIs * How to output * Get comfortable writing functions and classes It's not something you can master over night. Don't try to do too much at one time. Take baby steps. Python is a relatively easy language to learn. The syntax (way you write the code) isn't as detailed as other languages. Good luck! 
You did mention codeacademy in your post. I would like to suggest codingames as a way better alternative. In a nutshell you are given a puzzle to solve and no real guidelines except the rules of the puzzle. Then pick your language and code away. One fun little flavored is that it will check your solution and pass it for some checks but may fail it if the code is inefficient. E. g. a tripple nested loop while most certainly fail. The site also encourages you to work with mathematical algorithms and not just plain scripting. Check it out and give it a shoot! 
Sublime newbie here so forgive the question, you can't actually run any code in Sublime, correct?
Actually chemotherapy works way better than antivirus. Antivirus is more like, cockroaches, complete waste of time and money. You never need one unless it's on a network with a lot of computers, especially public ones where any moron could just simply bring in some bullshit into it. And even then it isn't that likely to stop anything other than jokes written by skids.
The web is just so fun! I started coding because I wanted to create my own webpage. Writing a couple of lines and seeing immediate change on the format was very rewarding as a beginner. I love using Python for the backend of a website idea (use Flask, Bottle or whatever) and convert a modern HTML5/CSS3 template there (like those in html5up.net) to Jinja so you can fill the data dynamically. If you fancy Javascript, use that for the client! Or even Transcrypt if you are adventurous. Find an idea of a website that you would like to use and then build it. It is so much fun!
Find a public API of something you're interested in and write a script to interact with it. You can find a list of open public APIs here: https://github.com/toddmotto/public-apis I created a currency conversion application you can take a look at if you would like to see how you can access an API and use the data. https://github.com/jtwhite/currencyconverter The API logic is in the currencyconverter.py file It's only 23 lines long, so there is not a steep learning curve for this. 
And this matters why? I know that if I have a variable, it's actually just a reference to an object which is some function, and so I call it by that reference, which means that if I pass it into another function, instead of getting copied, it will pass in the address directly...
I think it's because most web hosting companies use cPanel/WHM as a control panel / platform. cPanel only supports PHP and Perl/Ruby on Rails out of the box. I think it's just easier to publish a PHP website than a Python based one. 
Programming is a habit you develop over many years. Just start. There's many topics to learn, you just gotta wade thru it until it makes sense. An API is like "half an app". It just sends out info. It does nothing about how that info gets displayed. It's up to you to call the API endpoint to get your data (JSON or xml or maybe just plain text...) and do something with it- filter, sort, graph, etc...
I just started learning this weekend. I want to use a stock market api to populate an excel spreadsheet with data. 
and hey man good for you. I've been programming for years and I wish i gave a fuck about cryptoCoins. 
Sorry just tried to come up with more stupid idea than yours, somehow I managed to do it.
What exactly does your Python script do? Is there any reason you can't just rewrite it in JavaScript? 
There are mobile websites and there are mobile apps. Android is java. iOS is swift. Internet is HTML/CSS + one or more programming languages (javascript, php, python, etc. )
Depending on the amount of RAM in your machine you might or might not be saving some time.
'Thankyou' + '!' * 3 
Yeah, the actual count loop is done in C if available, and that's the core or the **Counter.update** call. Python doesn't have a direct split on punctuation function; too many edge cases to be useful in English (the singular possessive apostrophe, the plural possessive trailing apostrophe, abbreviation stops, etc.), and depends heavily on locale. The below should convert all punctuation to whitespace, then split on that, and should be reasonably fast. #! /usr/bin/env python from collections import Counter from operator import itemgetter from string import punctuation from sys import stdin TRANS = str.maketrans(punctuation, " " * len(punctuation)) def main(): c = Counter(stdin.read().lower().translate(TRANS).split()) r = sorted(c.items()) r.sort(key=itemgetter(1), reverse=True) for word, count in r: print(word, count) if __name__ == "__main__": main()
Japronto is the fastest I found so far.
spam = 'Thank' spam + 'you'
Ya...I know it does. I know it's not 100% to spec, most PEP8 linters are ok with 2 spaces though. Python doesn't mind.
You can, you have to use the Build options available under the Tools menu.
Call by value with only boxed values (which is the case in Python) boils down to call by pointer (or reference) but it's still call by value.
Back in the CGI days, we'd write them in C, too.
If you want the fastest CPython on mac you should install Miniconda.
I'm intrigued by this problem -- I once needed to build a particular chrome plugin but I just resorted to some wonky JavaScript in the past...Check this out though: https://stackoverflow.com/questions/12575965/is-it-possible-to-develop-google-chrome-extensions-using-node-js Looks like you could shove a Node.js app into a chrome plugin container (look the first answer) From that point, you might want to look at this: - https://github.com/extrabacon/python-shell - https://ourcodeworld.com/articles/read/286/how-to-execute-a-python-script-and-retrieve-output-data-and-errors-in-node-js - or google "python within node.js" seems like there's a couple ways that this might work.... Maybe start simple to see if a really "easy" python app would work here and then if it does, see if porting your script could be successful. I'm curious if it'll work in the end (I haven't tried this or anything, hope I'm leading you down the right path)
Thanks a lot! I'll keep you guys posted :) 
maybe attach a thing of the specific error it throws? I'm curious to see it, it might be something u can fix with putting some directories where a utility is expecting them
&gt; best place to start to learn https://pypi.python.org/pypi/lbcapi/1.0.1 https://pypi.python.org/pypi/denarius/2017.11.29.1856 
Stock Python is what you use when you don't care about speed. Micro-optimizations of stock Python has it's place (e.g., `isinstance(obj, MyClass)` vs. `obj.Type=='MyClass'`, saving struct objects or storing mask arrays, etc.), but you're looking at 5% here and 2x there, when what you really need is 1000x. I highly recommend avoiding optimizing stock Python unless you are down to the last 2x. I also include multiprocessing in this; who cares about an 8x speedup when you need 1000x? It makes your code more complicated and doesn't ultimately solve the problem. Make multiprocessing one of the final steps after you solve the 1000x problem. For the 1000x, use a profiler and numpy or numba. Numba has like 2 steps, but I have a lot of trouble making it reliably work. You might do better. Numpy takes a lot more practice to learn how to use before you can get speeds 1-2x slower of native C code with the same algorithm (and possibly a much faster code because you don't need to code your own matrix solver or least squares regression). I don't know what your code is or what your trying to do, but there's usually a different way to write it that will be fast. If you use numpy, it takes some practice to get rid of all the for loops, get rid of all the if statements in your code, avoid copying arrays, making sure your arrays are processed as to best take advantage of the cache, but that's how you make it fast. Can you say anything about your algorithm/what you're trying to accomplish?
Just started my very first python course. My professor recommended Jupyter as my IDE and...... it was interesting..... hahaha. As a beginner, there was so much reading/understanding I had to do before installing the whole thing. I am super excited for this class though!
That's very useful, thankyou. I might try and deconstruct those and learn backwards so it speak.
and let's not forget /r/learnpython
Trying (and failing) to connect Python to a Google BigQuery database: https://redd.it/7tgxkp
I was afraid to say this here tbh
Not doing away with flake8 just yet! Curious if you've got an example of yapf fail vs flake8 ?
I prefer 4 spaces, with a 100 char line length.
Must have package: pycharms
Parsing a file. The C code consists of a couple thousand lines of code. Numpy won’t help me much here. The algorithm really is as about efficient as it can be. What I am looking for are those things unique to Python, like what I mentioned above, to make the python implementation as fast as possible. Well, parallelizing the processing of individual blocks (not something unique to python), which didn’t matter for the C implementation, could end up making a big difference in the python one. There are some things you mentioned which I will be looking at a bit closer as well. 
As noted in the docs, yapf handles comprehensions poorly. yapf doesn't specifically honor existing flake8, so if you've modified the default flake8 settings, you'll need to mirror those (if possible) in yapf. That turns out really ruin DRY for me... The line breaks on simple lines as they get close to the line limit are irritating... # if uses a function which has no params below... if &lt;long line&gt;... ( ): # Now we have extra extra indentation here pass 
What packages have you tried that aren't compatible with termux?
Coming from a game dev who works on mobile games. Unity (best for mobile games hands down) learn C#. A guy named brackys (youtube) makes great tutorials. If you want an easy entrance to programming to learn Unreal Engine 4 which has a blueprints system - great for beginners. If you get deeper into unreal you will end up learning c/c++ one of the most difficult languages to master.
want to point us to your code? otherwise id say they want a list so slap some brackets around that guy
I'm pretty certain they even have a tool for writing your own programming language, if I understand correctly.
At least they have a very reasonable license
Nice, thanks. Worth noting that this version runs almost twice as fast as the previous one, for reasons I can't put my finger on.
The `*`unpacks an array into separate arguments when calling a function. It's used in exactly your situation, where you want to call with an unknown number of arguments that are stored in an array. 
IIRC I jumped through a lot of hoops to get pandas and scipy installed, and I can't install sklearn, seaborn or tensorflow. Have you had success with the packages that you've tried? And do you just use VIM in there then?
So for a Jupyter notebook, would the best way be to just leave my laptop on at home running Ubuntu and hosting the notebook then access it from my tablet and SSH into my Ubuntu with Termux to use pip and perform lower level operations? Also how do I fit Sandstorm.io into this? Is it like an agile tool with more features?
Having a python with numpy and intel_mkl blas baked in is pretty nice...
You can get all of that just fine without Anaconda. Sure, it's nice to have it all just work in some cases, but there are cases where people don't want several GBs of other packages installed alongside it.
So these two values (V1 and V2) are two points on the same curve. I guess a more mathmatically formal way to phrase what I'm trying to do is that I am trying to solve for the limits of integration (V1 and V2) such that they minimize the integral of P(v). Do you have any idea regarding how I would go about doing this with python? 
Yeah I follow, I meant it's conceptually similar, not that it is the same thing. 
vim
how are the two constrained; like V1+V2 = const or just V1 &lt; V2? first problem is 1d, second problem requires a 2d parameter scan
You should use [2captcha](https://github.com/Mirio/captcha2upload) or another similar service. However, if you don't want to do it the cool way, you can use raw_input("Press Enter to continue...") for Python 2 or input("Press Enter to continue...") for Python 3.
You’d think in the finance industry they’d want to have the best given the nature of the matter. I’m still very new to the industry, but I was petty shocked at first to learn the system that runs the power grid is so old, until I got to see how business operate haha
Yes, that is absolutely correct and my recommendation. I only suggested sandstorm as a way to try out notebooks to see if it was a workable solution if you didn't know how to host your own.
Maybe there should be a pinned weekly "ask anything" thread? It seems to work in other subreddits to collect and contain this category of stuff
Maybe he updated the article since you read it, but it's there now.
Maxwell construction https://imgur.com/a/NinZJ here's a pic that should clear things up...Thanks for the help btw!
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/u6q9uPi.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dtcmxwd) 
Have you tried Pydroid 3
There's a website called [quantopian](https://www.quantopian.com/) that's all about trading stocks. They have a testing system, and good data. Although you can't really run it on your own machine.
You can't parse a binary file? That will be the same speed if you're doing it right (again with numpy instead of struct). Parsing a text file is one area where Python suffers speed-wise. It's easier to follow and easier to avoid bugs, but it's a lot slower. I'd give numba a shot. Multiprocessing would help as well, but 4 cores...maybe it's worth it. The other option is PyPy; I'm not sure, but you might have the C distribution problem again. Remind me what's wrong with building a distribution for Windows 10, Ubuntu, and Red Hat? There's not that many options and if a customer really wants anther, it's just a virtual machine away.
I'm down for 100 max length, the 80 char limit nowadays is stupid, 100 is way more reasonable, I can still fit 2, maybe 3 windows of 100. Still prefer 2 spaces though 😉
I haven't done this in a while but iirc it's the value attribute. 🤔
Haha I didn't realize I am getting downvoted so hard for this, man it is interesting seeing how strongly opinionated people are about this stuff. It's awesome, I love programming.
link? 
yeah I don't dev on poor systems. So I guess if you're working on a budget that would make sense but I'm happy to give my dev VM with pycharm 64GB of DDR4 ram and a i7-7700k for use, also don't forget those samsung 960 pro's that also helps. For me I code by stepping through code and exploring other code bases very quickly and it simply makes it better to browse a large proper code base. Otherwise it can be harder to manage and remember 1 million things about every little lib etc. As ProfessorPhi said the code inspection is great. The code deduplication search is really amazing. It understands so many diff things from any DB queries to docker files. Also I mean the debugger &lt;3 it's like saying you wouldn't use ida pro for reversing. It's fine to complain about cost and poor systems if you're just starting out but for a high level dev it's nothing but a ton of help. I also think for learning code it's great to give people a very spellcheck method to learn. It's helped me understand python so much better by giving me reasons to why something was wrong and more to look up and research before it causes issues down the road. I know it's not a popular opinion but it should be. For me it's like saying I wouldn't use a AWM in PUBG. "Nah guys I don't want that only gun in the game that will one shot anyone if you headshot. I don't care what armor level their helmet is." If you don't understand that here is a simple TLDR: the best players use the best equipment pycharm = currently pythons best tool
[This](https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing) seems to be an apt explanation for the Call By Sharing and how it's actually nothing other than Call by value
Speed is a bad reason to choose a web framework (database time and memory use are what kills you, not server speed), but if you want a Python framework like Node, there is Sanic. 
I'd give [Home Assistant](https://github.com/home-assistant/home-assistant?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more) a go.
No, you can [call C functions from Cython](http://cython.readthedocs.io/en/latest/src/tutorial/external.html).
My goal here is nothing but experimentation. I just thought of using python to write some basic music files. So I'm just exploring here. 
The Michael Kennedy resources are top notch. Good list and good advice. 
[FizzBuzz](http://wiki.c2.com/?FizzBuzzTest)
If using selenium its element.text
What is meant by transcript?
I don’t build programs, per se, but I use Python for data analysis. It’s all the fun of creating clever data structures and algorithms without dealing with the architecture, maintenance or deployment of the software. I basically fell into it when I was staring at several gigantic spreadsheets for work. You mentioned Excel so I figured I’d share my story. I’ve always thought programming was neat and had learned the basics of Python, but I wasn’t sure how to apply it without feeling like I was just making stuff up to do, which made it not seem as fun. So I was looking at these spreadsheets, one was a list of customers, another was a list of orders placed, and yet another was a list of each item per order, and thought “can I write a Python script to combine these and just throw the info at me?” It turns out you can just save them as .csv files and load them into Python with the csv module, then start picking out the data you want. The first official script I wrote attached a list of the items ordered to each order, then matched its info up with the customer. With all of that info loaded up, I could start asking pretty ridiculous questions about it, like how many of this particular item is ordered per state, and how often? Do those numbers on average match the total number of customers we have in that state? What items are normally purchased together? If some items are normally bought with other items, but if an order doesn’t include the other, has the customer ever ordered the other? Based on other orders, what are the chances they will, and in what timeframe? I just kept coming up with questions to pull from the data, googling a TON and having a blast learning more about what you can do with Python. 
I think Christoph provides numpy + mkl wheel. Check it out 
you have been very useful man! thanks!
Hmm, not sure. This program is pretty naive; we're just reading the full thing into memory as a single string, making a copy of that string with no punctuation, then splitting it into words. That should actually place more memory pressure on the program than the last, given the copy and the size of your input text, but I wasn't trying to save RAM ... the translated copy is much more compressible though, so maybe there's some sort of OS or hardware optimization kicking in? We could be more efficient, potentially, by making an mmap of the file and doing the lower casing and translation there ... also if we assumed only ASCII text, we could do the lowercasing in the translation step. Additionally not sure how your language is handling Unicode ... if it's not -- implied by the description of strings as null-terminated sequences of bytes -- then the above could be made much faster by switching to bytes, as right now it's doing quite a bit of work on the assumption that stdin is UTF-8.
Do you mean that you want to make a website using python? In that case I would suggest [django](https://www.djangoproject.com/).
As Python code is just text, the answer is, obviously, yes. But it's unclear exactly what you want. There are [services](http://www.hilite.me/) that will convert a blob of code to highlighted HTML, there's also things like [gist](http://gist.github.com/) that are designed for sharing code snippets, including as embedded HTML. Also, of course, lots of blogging services etc use Markdown with code formatting. 
[r/learnpython](https://www.reddit.com/r/learnpython)
[r/learnpython](https://www.reddit.com/r/learnpython)
[r/learnpython](https://www.reddit.com/r/learnpython)
While this may be a good idea for testing/learning web scraping, if this is for a long term project I would suggest looking for an API to get the price.
Here's a sneak peek of /r/musictheory using the [top posts](https://np.reddit.com/r/musictheory/top/?sort=top&amp;t=year) of the year! \#1: [Best way to play B flat major scales? (fingering)](https://np.reddit.com/r/musictheory/comments/7aus4m/best_way_to_play_b_flat_major_scales_fingering/) \#2: [Listen up kids : As a guitarist who has been playing for 15 years, I only recently started playing piano and it has changed my thinking drastically. What I'm trying to say is... Learn to play the piano sooner rather than later. It really helps understanding music. IMO.](https://np.reddit.com/r/musictheory/comments/6u4gcw/listen_up_kids_as_a_guitarist_who_has_been/) \#3: [The score to Pokemon Red and Blue fully transcribed with analyses of all 52 pieces](https://np.reddit.com/r/musictheory/comments/6n6ikd/the_score_to_pokemon_red_and_blue_fully/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Fantastic resource: [Automate the Boring Stuff, Al Sweigart](https://automatetheboringstuff.com/chapter11/)
ta-lib I don't think there is a framework for that, this is a basically a technical analysis libraRy 
Agreed. One license, good on all OS platforms. That was one of the primary reasons I purchased a license.
Which stock market API are you using?
Simplest way I know: import requests, json url ="https://apiv2.bitcoinaverage.com/indices/global/ticker/BTCUSD" data = json.loads(requests.get(url).content.decode()) btc_last = data["last"] print(btc_last) 
Right now I am on mobile but here's what I think should work for you assuming you are using requests and beautiful soup: `import requests` `import bs4 import BeautifulSoup` `source = requests.get("Your URL")` `soup = BeautifulSoup(source.text,"lxml")` `usd = soup.find("input",{"id":"exchange_rate", "type":"hidden"}).get("value")` `print(usd)` 
If you want to trade stocks, Quantopian is the easiest platform to get started with. For FX and CFDs I use Oanda (oandapyV20). Then there's Interactive Brokers (IBPy) which you can trade anything with. IB also has Java API if you want to create something in both languages.
The value passed (the box handle) remains immutable so it's not different to call by value. You can give it additional names (this name was not on use while I was studying CS) but it very much remains a specific implementation of call by value.
Hi, I recommend using Selenium + browser driver like Chrome driver. Code is here: https://pastebin.com/cNhhUhLy. You have to install selenium and download Chrome driver and paste the file path to it in the script.
Thanks for sharing. I only use Anaconda as of now.
``` for x in range(1,101): if (x%3 == 0 and x%5 == 0): print "FizzBuzz" continue elif (x%3 == 0): print "Fizz" elif (x%5 == 0): print "Buzz" else: print x x+=1 ```
/r/learnpython is more suitable
`vim` has a `:TOhtml` function. This will turn the code into a html page. Opening it in a browser will show you the highlighting and syntax etc.
Simple board game. Tic-tac-toe, for example. Conway's Game of Life, but you would need to learn the rules.
This should work but you should consider using an API. import requests from bs4 import BeautifulSoup headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'} source = requests.get("https://www.google.com/search?q=btc+to+usd",headers=headers) soup = BeautifulSoup(source.text,"lxml") usd = soup.find("input",{"id":"pair_targ_input","type":"number","style":"width:90%","class":"vk_gy vk_sh ccw_data"}).get("value") print(usd)
Two points: (1) If you examine the Javascript that is being called in the text box, you'll find this: http://xe.com/currencyconverter/convert/?Amount=1&amp;amp;From=XBT&amp;amp;To=USD This means that Google is actually calling the API from xe.com, so monkh's answer was correct. (2) Why do you need the number in the box, when the same number is replicated above? You can easily grab this with some sort of selector. Scrapy has these with batteries included.
These are lines 54-56 of cli.py: parser.add_argument('directory', action='store', help='absolute path to the target directory',) Why is there a comma after the definition of the help parameter on line 56?
Why can't you just go with javascript? It's a native language for Chrome Extensions AFAIK. Of course, you could compile Python to JS (see Rapydscript), but why bother? You can just write everything in JS
It is a compiler that enables you to run Python in the browser. It compile Python to JavaScript.
It looks like it, at least on Chrome and Firefox. But lets be careful, nothing wrong with CPython. The point is that very big money is invested in JS virtual machines, and Transcrypt benefits from that since it generates JS. Improvements in the same order of magnitude are possible with CPython, as PyPY shows. So it's all a mattter of investment. Too bad a company like Google puts its cards on JS rather than Python. I consider CPython superior to JS and with equal investments it would become faster than JS, as can be seen from the performance of PyPy.
changes are there is already a chrome plugin. also i recommend pocket or some alternative platform for reading later
Maybe you want something like a [Jupyter notebook?](http://jupyter.org)
Okay, that was really helpful! (Not being sarcastic. It really was) So the way I've done the mapping now is that instead of multiplying by 100 and rounding, I've multiplied by 12 so it ranges from -12 to 12. Then I just assigned each number to a note. So, 1 is a C, 2 is a C#, and so on. And yeah, I think I should learn more music theory for this. I think I'll go do that now
Do you know any up to date resources for Interactive Brokers API? I tried to get into it but was overwhelmed by the amount of stuff to learn with little documentation.
&gt; I don't have too much time to brainstorm what I can make This is artificial, write something to automate one of your workflows. Or a tool for a specific task. Nobody knows better than you what you need. For example, clone [tmsu](https://tmsu.org/) in Python. 
Bro explain me clearly please
Compiler name bro?
vim is a text editor that has the feature to export a given text as html, including the highlighting. 
The name of the compiler is Transcrypt and you'll find it at http://www.transcrypt.org
Bro actually I have a .py code like output is { Price of book:60 Pric of wifi:30 Price of mobile:90 } This output is changing every 2 minutes based on API but I want this output to display in browser
I really appreciate your learning passion but just use APIs. There will always be a useful API for any purpose in your future life.
You can try using flask, simplehttpserver or any webserver. Judging by how you framed the question, it will not be a simple task for you. 
`Pipfile` should become the replacement for `setup.py` in the long term, once the specification for including metadata in it gets better defined.
I guess your data comes from a webserver. So the prices change frequently. If you want only want to output the prices to the browser probably the simplest way is as follows: Use a JavaScript timer in your browser to request the most recent prices from the server via Ajax. I don't think you need Transcrypt for that, unless the web page is very complicated. But I don't know enough of the situation to have a good judgement. Anyhow I'd start out in JavaScript, unless your sure already you don't like it. Transcrypt requires compiling your webpage in advance, which makes development more complicated. 
Wi-Fi scanner for counting attendance 
That'll be the [15th standard](https://xkcd.com/927/).
Check their website. These days they have a well maintained API site. Link: http://interactivebrokers.github.io/tws-api/
You will just have to trust that I actually do know what I am talking about. This parsing is quite complex and while it does involve a great deal of calculation, they are not of the sort that numpy will help with. While I am always open to being wrong, given my experience in such matters, I doubt I am in this case. 
Thanks for the link.
Including db connection and memory usage as well obviously. 
Maybe Kivy
The question being: Is Transcrypt doing the same as CPython? Let me quote from the main page of the repository: *"No eval and exec of Python code. This is again part of the concept. Transcrypt code is compiled, optimized and minified in advance ..."* This by itself means: No it's not doing the same as CPython. And probably not only in the `eval` and `exec` parts as mentioned above. Which at the end of day means: the speed test it's comparing apples to oranges.
Thank you for wise and meaningful analysis, we will take it into account in the next Python release. 
This week I'm mostly working on [Photon-Pump](https://github.com/madedotcom/photon-pump/): a TCP client for [eventstore](https://eventstore.org/). It's been a pain to debug, but it should be going into production as part of a new microservice next week. I also released [ServiceCatalog](https://github.com/madedotcom/servicecatalog/blob/master/README.md) which is a dumb-as-a-brick way to use Consul for service discovery.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [madedotcom/servicecatalog/.../**README.md** (master → feab583)](https://github.com/madedotcom/servicecatalog/blob/feab583d4f6297b8757648c46ad7c187735dc7a5/README.md) ---- 
There's a list of android apps on the kivy wiki https://github.com/kivy/kivy/wiki/List-of-Kivy-Projects
So are you saying Python wouldn't necessarily be used alone for auto replies? I'd use Python to extract the data then if a parameter is met it would instruct another program to auto reply?
Ok bro thank u
Okk bro thank u
Hi! Well, as far as I know pycharm is just a IDE, so one can use it as a tool in different situations. I did not understand what exactly do you need to do. What do you mean by closed environment? If you need to copy a textfile, you need to give the paths of the to-read and to-write files like: #data is a folder, / may be \ depending on if you use Linux or Windows textpath = "data/textfile.txt" with open(textpath, 'r') as f: text = f.read()
Use the API. You will be blacklisted if you try to scrape google search results. You get only 100 searches/day, but better than nothing.
Thanks for that information.
``` from pip.req import parse_requirements # parse_requirements() returns generator of pip.req.InstallRequirement objects install_reqs = parse_requirements(&lt;requirements_path&gt;) # reqs is a list of requirement # e.g. ['django==1.5.1', 'mezzanine==1.4.6'] reqs = [str(ir.req) for ir in install_reqs] setup( ... install_requires=reqs ) ``` Although it is not recommended, it is possible to do this and maintains a single set of requirements. Also, the more important thing, the requirements in setup.py are abstract, as they just point out what dependencies your project needs, while in requirements files you can do a lot more other things such as specifying indexes to use and including other requirements files. The requirements in setup.py are usually the requirements needed for end users to use the application/library while the requirements files are usually used by developers for managing development dependencies (tests, documentation generation, provisioning during continuous integration, etc.) So please, next time document before and try to understand the bigger picture and why it has come to this before bashing. Also a change in tone will make a big difference as people are more willing to help you when you are more polite.
Dude, this is a fantastic reply. I'm with you, I think learning the basic concepts of programming first should be the goal. Kivy seems like an easier entry point and should take him pretty far. Once it's no longer enough for his needs he will be ready to tackle something more complex. 
[HTML.py - a Python module to easily generate HTML tables and lists](https://www.decalage.info/en/python/html).
seriously? google "python string comparison" for the answer. 
 s1 = "New York" s2 = "Boston" if s1 &gt; s2: print(s1 + " is after " + s2) else: print(s2 + " is after " + s1) `&gt; New York is after Boston`
def sumOfSquares(n): for i in range(n): res += i ** 2 return res print sumOfSquares(5)
a random number generator where you raw_input and guess a number and the program tells you if you are too high or too low or right. The actual algorithm for the psuedorandom number can be found online, what is important is the basic if elif else logic you have to write
You need to initialize "res = 0" at the beginning of your function
Bing migh t be shit but they have a very good, inexpensive API with a free trial.
Patches are always welcome.
Sorry but that's a very bold statement. I have developed a full blown Python client-side framework (see http://www.anpylar.com) and `eval`/`exec` are key to achieving some of the functionalities. In any case the comment was not meant to derail the lack of `eval`/`exec`, but to pinpoint that the comparison is obviously a biased one. The mention of those specific features is made by the developers themselves and I am pretty sure that many other use cases are not supported. `Transcrypt` has for sure many (and good) usages on the client side, but if it's not doing the same thing as CPython (or at least trying to), it should not compare the speed at which is doing things. For example: - Are the methods of a class being sought through an internal `__getattribute__` mechanism before being called or is the execution is restricted to what was compiled? For many use cases it doesn't matter, the method will never change. But some techniques rely exactly on that. And if `Transcrypt` doesn't fetch the method each and every time using `__getattribute__`, then it has an unfair advantage over `CPython`
I checked and wasn't clear on the pricing. On the cheapest tier is it about 30 cents per search transaction or a lump sum of about $3,000 that lets you make 1,000 transactions?
https://www.alphavantage.co/
I would recommend PyGame if you are going into game development in python.
Looks like you are trying to read from stdin when there is nothing more to read. 
There are explanations all over the place. * https://caremad.io/posts/2013/07/setup-vs-requirement/ * https://snarky.ca/clarifying-pep-518/ * etc From the 2nd link, for example &gt; ... First, requirements.txt and setup.py are for two separate use-cases and probably shouldn't be used together in most cases. ... but basically setup.py is for specifying a library's dependencies while requirements.txt is for specifying your app's dependencies. In other words the former is for stuff you put on PyPI and the latter is for what you install on e.g. your server when you deploy your code. ...
Think it's $3 per 1000 and each can return multiple results? https://azure.microsoft.com/en-us/pricing/details/cognitive-services/search-api/web/
If you use pytest then ['PyTest'](https://github.com/kaste/PyTest) (obviously) is great. Can run single tests with some nice visual feedback without leaving sublime and show the stack trace inline.
The two main ones that I listen to are "Talk Python To Me" and "Podcast.__init('Python')".
bro
&gt; where you raw_input it is 2018, stop using python2
Here is my version: #!/usr/bin/env python from setuptools import setup def read_requirements(filename): req = [] with open(filename, 'r') as f: for line in f: pos = line.find('#') if pos != -1: line = line[:pos] line = line.strip() if line: req.append(line) return req def read(filename): with open(filename, 'r') as f: return f.read() REQUIREMENTS = read_requirements('requirements.txt') setup( ... license=read('LICENSE'), long_description=read('README.md'), packages=['todo'], requires=REQUIREMENTS, install_requires=REQUIREMENTS) 
What do you do know?
 class Student(Person): def __init__(self, grades): self.grades=grades ... Just crossed my mind while making breakfast. Something to maintain your grades. You can keep building up to class Class. 
/r/learnpython
This is not a helpful answer. Technical analysis is financial alchemy
Let me quote mysef from `r/algotrading` (which is the fancy name for systematic trading) with some additions See this recent post: https://www.reddit.com/r/algotrading/comments/7surwp/building_automated_trading_system_from_scratch/ for the original thread. I would recommend to leverage existing platforms. See below for a complete list, but it may be that you really want to create your own, with specific features and implementing ideas not seen anywhere else. Be it so, give it a go. You need: - Data feeds. - For backtesting you can do with files, pulling data from databases and if you wish you can fetch from HTTP resources. - For actual trading you have to take into account that the streaming data will have to be handled in background threads and passed over to other components in a system standard form. Don't forget backfilling if you need to warm up data calculations. - In both cases and planning ahead for connecting to several systems, you need your own internal representation and convert from the external sources to your own, to make sure that the internals are not source dependent. - Broker: you will need a broker that simulates matching orders (and the types you want to support) - For actual trading you need threads again as explained above - And as with data feeds, you need your own internal data decoupled from the actual API of any broker, to be able to support more than one (and switch amongst them) - A block managing your strategy. I.e: passing the data and notifications from the broker to your logic, so that the logic can actually act and do things (buy, sell, reverse ...) You may also consider things like: - Adding Indicators / Analyzers (you may not need them if you for example work on pure bid/ask prices) - Charting (wether real-time or only for the backtesting results) - Collection of real-time data (although it's a lot better to rely on a reliable data source) Start slow by being able to backtest something: - 1. Read a csv file - 2. Loop over the data - 3. Pass each bar to a Simple Moving Average that calculates the last value - 4. Pass each bar to the trading logic (which will rely on a Simple Moving Average to make decisions) - 5. Issue an order if needed be (start with a `Market` order) - 5.1 Work first with a wrong approach: use the current close for the matching You can then: - 2.1 Add a broker which sees if any order is pending and try to match it - 5.1 Instead of matching the order, pass it with a call (queue, socket or what you want) to the broker, for the next iteration As inspiration (or simply to use any of them) you can have a look at this list of Open Source Python frameworks: - backtrader &lt;https://www.backtrader.com&gt; (**Disclaimer**: author here) - PyAlgoTrade &lt;https://github.com/gbeced/pyalgotrade&gt; - Zipline &lt;https://github.com/quantopian/zipline&gt; - Ultra-Finance &lt;https://code.google.com/p/ultra-finance/&gt; - ProfitPy &lt;https://code.google.com/p/profitpy/&gt; - pybacktest &lt;https://github.com/ematvey/pybacktest&gt; - prophet &lt;https://github.com/Emsu/prophet&gt; - quant &lt;https://github.com/maihde/quant&gt; - AlephNull &lt;https://github.com/CarterBain/AlephNull&gt; - Trading with Python &lt;http://www.tradingwithpython.com/&gt; - visualize-wealth &lt;https://github.com/benjaminmgross/visualize-wealth&gt; - tia Toolkit for integration and analysis &lt;https://github.com/bpsmith/tia&gt; - QuantSoftware Toolkit &lt;http://wiki.quantsoftware.org/index.php?title=QuantSoftware_ToolKit&gt; - Pinkfish &lt;http://fja05680.github.io/pinkfish/&gt; - bt &lt;http://pmorissette.github.io/bt/index.html&gt; - PyThalesians &lt;https://github.com/thalesians/pythalesians&gt; - QSTrader &lt;https://github.com/mhallsmoore/qstrader/&gt; - QSForex &lt;https://github.com/mhallsmoore/qsforex&gt; - pysystemtrade &lt;https://github.com/robcarver17/pysystemtrade&gt; - QTPyLib &lt;https://github.com/ranaroussi/qtpylib&gt; - RQalpha &lt;https://github.com/ricequant/rqalpha&gt; If you want it hosted: - QuantConnect - CloudQuant
I use Python 3.6 and I enjoy in all those new goodies, eagerly waiting for 3.7
http://rhodesmill.org/pyephem/quick.html
Remember that a heavy workload is usually described as IO-bound (waiting on remote resources over a network) or CPU-bound (need to perform a lot of calculations). Then, make sure you understand the GIL and all the implications it has on multithreading. The main implications of the GIL in practice are: * python threads are kinda okay for IO-bound tasks with &lt; 1000 parallel tasks, bad for CPU-bound tasks. * python processes are much better at parallelizable CPU-bound and IO-bound tasks that don't require a lot of coordination / IPC / shared memory. * event-based async programming best at IO-bound &gt; 1000 parallel tasks. If you were to get heavily invested in exactly one of these categories, I would recommend it be the last one, event-based async programming, considering your networking focus. There have been a few over the history of Python (Twisted, asynchat, Tornado) but the new standard one is asyncio. It comes with Python 3.5+, which also supports the async/await syntax which I expect you would use often. (As an aside: I feel that [asyncio has some design problems](https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/), but these are usually not found in practice).
Check out socket programming. Stuff like this [https://www.geeksforgeeks.org/socket-programming-python/](https://www.geeksforgeeks.org/socket-programming-python/). Connect to the web in different ways and then build your own socket server that expects commands from your client. Check out Miguel Grinberg’s work on building RESTful APIs in flask [https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask](https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask) Most importantly, pick projects that keep you interested or serve a purpose in your life and have fun with it 🙂 Best of luck!
What book is this?