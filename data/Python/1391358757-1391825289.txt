I'll add mine. Wrote a script to update the printer's display with the current weather. At least it's more useful than the word 'ready'.
Here's a script that should do the trick. when run, this script will output to stdout the contents of a new json file with the IMO and MMSI fields if they were available. http://pastebin.com/GSNCsj0B eg usage: $ updatemarinetraffic.py ships.json &gt; newships.json it waits 5 seconds between each request, feel free to adjust this value but keep in mind you may have your traffic blocked/throttled if you hit the server too hard... it will take a LONG time to finish. I trimmed your input file for a quick test, here are the original, and output files: http://pastebin.com/e6Yukp3f It only missed a handful of ships which weren't listed on the site.
I don't know if speed was an issue, but you could probably speed that up by using Splinter and PhantomJS to make it headless.
Dunno about _most clever_, but I recently used one for the rehearsal schedule for a play I'm directing, to make sure no-one was double booked and everyone was accounted for, that sort of thing. It prevented a lot of head aches, and there was not much more to it than some set operations: intersection, union and difference.
To be fair, if you don't know how to program, it'll probably take you much more time to learn enough to solve the task at hand with a script than it would to do it by hand. Now if you had to do &lt;monstrous task x&gt; every year or every month or something, learning to program is probably worth it as an investment.
My most used Python script just looks up employee information from Active Directory and Great Plains and displays a summary of key fields: account status, home directory, group membership, department, supervisor, etc. It allows looking up by name, login id, emp id, and other variations. On the slightly more clever side, I wrote a library to extract the Fonts registry key into an SQLite memory table and made a command line look up tool to show all fonts that match the input: "fl cons" shows all variations of Consolas, Lucida Console, and Constantia on my machine. I also wrote a library that uses struct to extract the display name from a TrueType font file, to get those names from TTF files that are not installed in Windows. One other script that is less frequently used but saves lots of time is a combination of VBA and Python. I receive a Word document as an email attachment from one of our departments that is the phone list of all their contacts. They want this reformatted to show just managers, be password protected, and have it posted to our website. The VBA portion does the reformatting and passwording, then kicks off a Python script that uploads the file with Paramiko and shows me the results. The updated file will be in place within a minute of receiving the initial file.
So like sickbeard for tbp? Tell me more!
Most torrent clients that I know of can automatically fire up downloads of any new files in a folder, so if you had one all you have to do is download/copy/move the file to that directory(and of course enable the option) 
https://en.wikipedia.org/wiki/JSON-LD http://www.w3.org/TR/json-ld/#basic-concepts http://json-ld.org/playground/index.html
Well, that's what I usually do (my mom is also friends with the librarian, so I can just show up whenever I want). Sometimes the library will close because it's at max capacity though, and it's useful to prove that I already have a slot reserved
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**JSON-LD**](http://en.wikipedia.org/wiki/JSON-LD): --- &gt; &gt;**JSON-LD**, or **J**ava**S**cript **O**bject **N**otation for **L**inked **D**ata, is a method of transporting [Linked Data](http://en.wikipedia.org/wiki/Linked_Data) using [JSON](http://en.wikipedia.org/wiki/JSON). It was a goal to require as little effort as possible from developers to transform their existing JSON to JSON-LD. This allows data to be serialized in a way that is similar to traditional JSON. It is a [World Wide Web Consortium](http://en.wikipedia.org/wiki/W3C) Recommendation, from the RDF Working Group. &gt;JSON-LD is designed around the concept of a "context" to provide additional mappings from JSON to an [RDF](http://en.wikipedia.org/wiki/Resource_Description_Framework)-like model. The context links object properties in a JSON document to concepts in an [ontology](http://en.wikipedia.org/wiki/Ontology_(information_science\)). In order to provide some basic interoperability with RDF, JSON-LD allows values to be coerced to a specified type or to be tagged with a language. A context can be embedded directly in a JSON-LD document or put into a separate file and referenced from different documents (from traditional JSON documents via an HTTP Link header). &gt; --- ^Interesting: [^Resource ^Description ^Framework](http://en.wikipedia.org/wiki/Resource_Description_Framework) ^| [^Schema.org](http://en.wikipedia.org/wiki/Schema.org) ^| [^Alphabetical ^list ^of ^file ^formats ^\(Fâ€“L)](http://en.wikipedia.org/wiki/Alphabetical_list_of_file_formats_\(F%E2%80%93L\)) *^\/u/westurner ^can ^reply ^with ^'delete'. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less.* ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/wiki/modfaqs) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 40678:%0Ahttp://www.reddit.com/r/Python/comments/1wtdyj/rdflibjsonld_jsonld_linked_data_parser_and/cf56g69)
Source code?
Where do we find these? Is it also like this in the UK?
I put my family into a multi dimensional list sorted by spouse's then randomly picked secret Santa and emailed everyone their person to buy for. This eliminated the issues of getting together to pick names and make sure people didn't get themselves or their spouse and no one knew who everyone else has 
No idea how that got there. I'm going to go ahead and blame
Wow, thanks alot!!! This is great! I got one more very nooby question: How do I make it run on Mac? Here is what I tried: python ScrapeShipData.py Vessels.json &gt; newships.json Traceback (most recent call last): File "ScrapeShipData.py", line 6, in &lt;module&gt; from BeautifulSoup import BeautifulSoup ImportError: No module named BeautifulSoup I ran it from Terminal. Again, sorry for not knowing Python. Is there something I need to download or something? 
I did something similar recently using bash though: cat list.txt | sort -R | head -n 1
grab a json dump of bitcoin miner from a pool to see the rate of hashes
Yes, this requires BeautifulSoup sorry, should have mentioned that. pip install BeautifulSoup or easy_install BeautifulSoup should take care of it on most OS's. or you can Download it directly here: https://pypi.python.org/pypi/BeautifulSoup
You should have made the script only complete X percent based on the day of week or something so it looks like you are working daily 
Made a [hot tub controller]( http://www.partofthething.com/thoughts/?p=14). It was awesome. Graphed temperatures, sent alerts if something was wrong. Best part: you could adjust the temperature via text message. 
Look up the mr-orange fork of it. It's a much improved version that specifically focuses on making torrenting work better. Newsgroups are generally pretty worth it anyway. Since you're downloading off dedicated servers, you get maximum speed right away for new releases, so on the west coast, I'm often able yo finish watching a so we before it even starts to air here. (3 hour time difference, show airs for an hour, shows up 30 mins later, newsgroup download takes 10 mins and is bounded by my own speed)
oh my god, my school has this too, any chance I can get the source code?
BLAME WHO?
This is the reason I love programming in general. 
Is this wrong?
So I visit this porn site which shares lots of photos. It is a wordpress site and each posts contain like 10-15 images. It was really pain to download them all. So I wrote a script. This was my first useful script =) and have also written few scripts to download pics shared on reddits like /r/realgirls ;-)
Everywhere has some method of free computer to cell phone SMS service, though not always email. Something like this in the UK for example: http://www.cbfsms.com/ or http://www.freesms.cat/ edit: Here is a list of Email to SMS addresses, including things like T-Mobile UK: http://www.emailtextmessages.com/
just google "&lt;your cell phone company&gt; sms email address" for example, for tmobile the address is just &lt;your phone number&gt;@tmomail.net 
yea, that's a good point. part of it is I haven't used Debian-based Linux distro other than Ubuntu, so I'm not as up on the details. I'll do some research and make improvements on this sections as I agree it's lacking in some key concepts and resources
I use nine virtual desktops and was getting tired of opening and arranging programs after a restart, so I wrote a Python script that opens programs and calls [wmctrl](http://tomas.styblo.name/wmctrl/) to move windows.
yea, these are huge holes that need to be addressed... I don't think I mentioned celery and task queues at all so far. great catches, i'll work on adding those sections
I have a script which sets my Skype status to away/offline to disable notifications during focus times. 
I've been thinking of writing that program myself. 
Sorry about that, I've added information on encryption to the README. It is intended to allow sharing of files with friends. I wanted a setup that combined client side as well as asymmetric encryption.
You shouldn't refer to anything that you're doing there as "a panda" / "the panda". Panda not involved. (unfortunately!) I think what you are calling a "panda" is referred to as a "DataFrame" after the functionally similar object in the R language. At no point in the book you mention or the Pandas documentation is the term panda used for anything. I haven't heard the explanation for the name, but I think it might be an acronym (Python something Data Analysis Something?). I want to say it might be an arbitrary/cute reference to the animal, but even if so there isn't any object in the library which is referred to as a panda.
Also, 25 students in a class. Mine has 35...
I would actually crap my pants if I actually received data in something as structured as excel/csv. I work in the conference industry, and for whatever reason, these people -- who, by the way manage multi-*million* dollar conferences -- send everything, and I mean *everything* as a word document. If that's not bad enough, the bulk of them don't even have the presence of mind to use a bloody table within Word. It's just a fookin *mess* of spaces, tabs, and return keys to get the formatting the way they want. It makes it all but impossible to programmatically extract the data. Or, more specifically, it'd take more time to figure out how to parse the stuff than it would to just copy and paste it by hand. I've joked with my boss about becoming a consulting ax man on the side for some of these meeting management companies. The collective man-hours that are lost each year from moving data around in an unstructured format is certainly non-trivial. My heuristic would be simple question. "If you have a set of related data, let's say, a presentation title, a first name, a last name, and a time, which Office Program would you use to store that info?" Any one who dared mentioned Microsoft Word would then receive a simple and callous "Pack your things." 
Good lord, how did you find this post? This thread is five months old! That aside, when designing a convention (the underscores for magic methods is a convention, not a syntax), you have to make tradeoffs. In this case, we're adding line noise (the underscores) (Although you could argue that the underscores are meant to add emphasis) to differentiate magic methods from normal, non-magic, methods. Also, this prevents clashes between magic and non-magic methods. (E.g. `spam.add(other_spam)`) In this case, I think that the added line noise compared to the increased distinction between magic and non-magic methods is a good tradeoff. In the example originally being considered, "@", I suspect the originally intended tradeoff was brevity vs. clarity. In general, I don't like those kinds of tradeoffs. (There are some exceptions, but not many) Given that the increased brevity isn't even that much (you could have done "`_.name`", for example), I don't see how it was a good tradeoff even if you wanted to make that tradeoff.
Ha! That's awesome. I've been wanting to check out Arduino. I recently moved my receiver into a spot which doesn't give it much clearance for ventilation. So, I'm pretty paranoid. Being able to set up a little temperature reader which I can monitor from my laptop would be awesome. 
&gt;My heuristic would be simple question. "If you have a set of related data, let's say, a presentation title, a first name, a last name, and a time, which Office Program would you use to store that info?" Any one who dared mentioned Microsoft Word would then receive a simple and callous "Pack your things." What about people who bring up Access?
My propane and water companies don't have an automatic draft payment, but they have online payments. So, I wrote a script to pay my bills automatically. 
Eh, they can stay ;) 
Thanks. It's not the printing/CS aspect I'm interested in but the language game :)
Thanks for the correction. Yes I put everything in a DataFrame. 
I use Homebrew and set up my PATH to use /usr/local/bin before /usr/bin. Yes the original version will still be on your Mac, but I haven't found that to be an issue. Definitely use Homebrew if you develop on a Mac though. It's awesome and makes life much easier.
There were two people employed to look up countries for IPs?!
 PC Load Sunshine The fuck does that mean?
Send a text to your email. You will see you text message email in the "from" area
Relevant xkcd (this gone wrong): http://xkcd.com/1319/
I use it operationally. I find functions like `groupby`, `frequencies`, and `curry` to be invaluable in my particular applications but YMMV. They're all pretty simple though, nothing you couldn't make on your own in each project. Actually, the original impetus for the project was that I *was* implementing these functions in each project and saw others were doing the same, often slightly inefficiently.
I try pretty hard not to say that either way is better than the other, just different. Statements about *better* inevitably lead to the Functional v. Imperative flamewar.
I recently used Python to create this http://i.imgur.com/UthCfbv.png ! It is a visualization of car trajectory and speed around a track in the game Grid 2. A couple more: http://i.imgur.com/gev8DDn.png http://i.imgur.com/hcRTUSE.png
Docs page at [http://toolz.readthedocs.org](http://toolz.readthedocs.org) There are a lot of similar projects. Some notable examples include the following: * [Underscore.js](http://underscorejs.org) * [fn.py](https://github.com/kachayev/fn.py) * [funcy](https://github.com/suor/funcy/) * The Python standard library, notably `itertools`, `functools`, and `collections`
Why did you move it off of CherryPy?
Thank you so much, I will certainly look into it to be better prepared next time. Selenium is quite the pain to use.
&gt; Perhaps it would be best to see the whole story before you go flippantly judge someone based on a couple choice comments. Perhaps I did jump to conclusions but all I had to go on was your post here and your comments, nothing more. You cannot expect someone to play nice if the only history you offer is stuff like that. Never assume someone won't consider your past history to try to contextualize your current post, motives, and attitude. This goes not just for something you post on the web but also IMs, texts, and your run of the mill office email. &gt; If I had a whole month to dedicate to nothing but learning scripting we wouldn't be having this conversation I think you're under valuing the value of doing it yourself and overvaluing the time it would take to do so. You're familiar with processing so you at least have some basics down so learning to do this specific think should take a week or less. Don't try to learn everything for this case, that will take more time than you have, learn what you can to accomplish your goal. You have not broken down the problem well enough yet for anyone to offer help so all I can say is this: * you need to access [Reddit's API](http://www.reddit.com/dev/api/) * you'll need a library to make [requests](http://docs.python-requests.org/en/latest/) to that api or even wrap it [for easier use](https://praw.readthedocs.org/en/latest/) * there's lots of libraries for analysis in Python but what you're wanting to do can be done simply with min/max/etc functions and some basic data structures such as lists, sets, and dictionaries. This also means you'll need to learn some really basic syntax and there's a good amount of information about this [here](http://docs.python.org/2/tutorial/). Google "python &lt;mything&gt; example" if you need more detailed info * depending on your environment you'll probably need [virtualenv](http://www.mahdiyusuf.com/post/5282169518/beginners-guide-easy-install-pip-and-virtualenv-1) (there may be better intros out there) * If you have specific problems with the above *ask specific questions after you've tried it* This is not computer science, this is a tool like any other where you just have to learn some basic things to use it (or at least attempt it). It can be so useful in fact that almost no matter your major it can make you much more effective at repetitive work both in college and after graduation which in turn makes you an efficient employee.
Neither one is imperative. The difference is between declaring a function and using higher order functions to build it. The compose/partial approach is of dubious value when you want to do something specific. If you don't know which functions you intend to compose until runtime then it's useful to have those constructs, but that comes up rarely enough that lambdas and reduce are fine.
It's still pretty clever, though. I made a script to 'fix' RSS feeds from The Escapist and output a slightly different RSS feed for each, containing the actual content of the article or video (embedded). Currently the Escapist's feeds are only links to the content on their site, which is probably for advertising, but I wanted a good old-fashioned news feed :) A slightly modified script creates RSS feeds for metacafe channels, with the video embedded too. Metacafe doesn't have RSS feeds at all.
Sickbeard's torrent handling feels like a last-minute thing, it doesn't work well enough.
To some extent I agree. But in this department, everyone was an engineer of some degree, most with masters degrees in their fields. Aged 25-45'ish. I guess it might have occurred to them, that a program would be able to do it, but they just didn't have the time or desire to go out and find someone to write one. Probably thought it would have been very expensive to.
I also often get something to the effect of : "But what if it doesn't do it correctly?" And that is off course a valid concern, but I would say there are bigger rooms for error, when sitting copy/pasting all day :)
I'm not sure whether to be impressed or frightened by this display of ingenuity
Twilio provides SMS/automatic phone calls for fees, **some** cell phone carriers have email addresses for SMSs (my old carrier didn't), or Twitter sends free SMSs when you get notifications. I'd probably just use Twitter.
Interesting. Verizon appears to have them http://www.verizonwireless.com/news/article/2013/06/computer-to-phone-text-messaging.html 
Try Yahoo Pipes for that sort of thing - I do it for several webcomics.
Want!
a python script to alert me when my package shipment status updated.. this was a few years ago before text message alerts were more common. i also had one to give me a bunch of beer ratings based on what was on tap at a bar, so i knew what to order ahead of time (:
Yeah, Access can at least be accessed over ODBC.
Wait, so version 4 of BS is not as good as version 3? That's odd.
Twilio Api for SMS
Yep, Twilio.
Upvote for spatial databases!
Well, I've had problems with it in the past, and it doesn't work for this particular script, so while it may be unfair to say 'not as good', it's at least different enough that it's not fully backwards compatible. 
So, I guess this is on Windows? I recently got a new job as a systems administrator in a primarily Windows-environment. I used to work with Unix and a bit Windows for 3 years, and as such I've learned a bit scripting in Bash, perl and python. Are python something I can deploy in my Windows-environment, or should I learn Powershell? There must be *some* uses for scripting among our machines... 
Python is so useful for my spatial endeavors! I'm still a rookie though.
I never tried it, but I'm sure there is some way to also do it via IFTTT
Sure! BTW, where do you go to school? import mechanize as mech LOGIN_URL = "" USERNAME = "" PASSWORD = "" print "Connecting to UTORwin" br = mech.Browser() br.set_handle_robots(False) print "No Robots" #br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')] br.open(LOGIN_URL) br.select_form(nr=0) # this may need to be changed for your school's login page br.form['username'] = [USERNAME] print "Login: ************" br.form['password'] = PASSWORD print "Password: *****************" print "Transmitting..." br.submit() print "You are logged in, Cheers!"
I mostly work on windows. And have no issues using python there. One issue that I do run into now and then, is that at work, I don't have administrative privileges on my machine. Big company that don't trust their employees.. So I have to do with standard python 2.6. But usually I manage to do whatever i want. But I have to use Tkinter for instance, when there are better GUI packages out there.
It's generally not like that in the UK - in the US, people typically pay for incoming messages as well as outgoing (though most monthly plans include unlimited texts), so it makes sense for providers to offer a free way to send an SMS. In the UK, you only pay to send, so they don't hook it up to email.
Glad to hear it! Only thing I like about ArcGIS is arcpy hehe. And there are so many other cool things one can do with python!
I installed xcode, Homebrew, and set .bash_profile to: # Set architecture flags export ARCHFLAGS="-arch x86_64" # Ensure user-installed binaries take precedence export PATH=/usr/local/bin:$PATH # Load .bashrc if it exists test -f ~/.bashrc &amp;&amp; source ~/.bashrc Seemed to be the way to go from my searches on the internet. Thanks for confirming this!
It's not python really, but rather a bash command that calls the function curl on a URL and then pipes (sends) the return from the curl function into a python script.
Unfortunately, it's very specific to my own personal sorting habits, and it only works on unix-like systems. It was one of my older scripts and I literally just made it for myself, so I never bothered to make it cross-platform or more in-depth. I intend to re-make it eventually and release the remade version's source. (Don't wait around, though, I've got more important Qt projects I'm working on right now, so it's going to be some time before I get around to it.)
That's pretty cool. Seems fairly similar to what I might end up making in Qt eventually to replace my script and allow for release to the public. (Not on a Mac, though.)
Link to script? 
Work for a telecom. Wrote a script that finds hardware that's on the network that's malfunctioning. Does some basic trouble shooting (attempts to ping it, remote reboot, etc). Then grabs information about it from a local excel spreadsheet (IP, DG, location, name of equipment, etc) then sends an email with all of that information to myself and other team members. It also checks to make sure that the spreadsheet used is up to date, if its not the newer version is downloaded. 
Maybe not terribly clever, but I have a pretty useful script that I run every time I buy a few ebooks. It scans through my Calibre library directory, and copies new epubs into another directory on my hard drive which syncs with Google Drive. It also copies the corresponding KF8 (Amazon Kindle ebook format) into a different directory, so that I can load it onto my Kindle. Both of the target directories are built with the following directory structure (metadata comes straight from the ebooks): {genre}/{author}/{series - if applicable}/{book goes here}. It helps me maintain my ebook library for easy reading on both my phone (epub, via Google Drive), and Kindle (manual loading into a collection/directory structure that I like).
Wow, smtplib really makes that ugly. Did you know that this could be a one-line shell script?
I do have domain administrator, but not on my daily user... Some of the routine tasks I do is looking over event logs and system status of many servers, disk usage, reporting those kind of things... 
I'm sure there is a plugin for it, but I made a python script that opened up certain webpages every time I open a browser for the first time of the day. I use dropbox to sync that across all my browsers, though it only works flawlessly in Chrome (Firefox tries to open multiple processes regardless of what I set in webbrowser.open)
I wrote a script about a year ago that would scrape recursively soundcloud for the mp3 stream of any soundcloud page I gave it. The audio was in 128kb, but pretty nifty way to collect new music. The script has since been broken when soundcloud changed the site and I installed a new OS with python 3.0 installed by default. 
In my experience, if you have an office job you **will** have a monstrous task x that can be simplified by knowing a bit of programming. You may not have one now, but you'll have it eventually.
Frightenend. Because it's going to be used a hell of a lot more for spam/scam related business than for any legit use.
It was a good year at PyCon Http://imgur.com/MgruQ3E
Here you go, I commented and [pushed to GitHub](https://github.com/tokenblakk/ImageCrop2_6)
Anything can be a one line shell script. I use this as a skeleton for many different tasks. 
Wrote a script that checks each of my company's IP addresses against the most common Blacklists every 15 minutes, and sends an email out to a couple of people if we hit a blacklist. Thanks to SO, I was also able to get it to only send 1 email per 24 hours per IP when we did hit a Blacklist.
I have something similar except my script does it a bit differently: 1. Get list of TV shows I'm watching from trakt. 2. Check air dates 3. If a new episode is out of any show continue, else stop. 4. Download torrent from kat.ph to a certain folder 5. Torrent client automatically picks that up and starts downloading. 6. Once that is done use tvnamer script (guessit/tvdb) to properly name the episodes. Put them into [Show]/[Season] folder and remove useless files .nfo, torrent_downloaded_from.txt etc. 7. Download subtitles automatically from opensubtitles and put them in appropriate folder. 8. Mark the episode as watched on trakt.tv. Repeat. When I open XBMC I see new episodes which are downloaded but not yet watched. Using cliffhanger app on my phone I can easily add series to my trakt.tv library and it will be downloaded automatically. It just needs a little modification to work with movies too. And I've also got modules for few warez-like sites in case torrent doesn't have enough seeders. I was thinking about wrapping it all in a QT GUI and publishing it but never really got around doing that...
Or who knows even basic combinatorics.
Neat. Care to share the source?
Actually we didn't have programmers. Most people there were good a filling in forms and creating reports. I just wanted to see if there was something I could do to make things better. It was my first stab at doing automation! Now I do it for a living, well that and testing.
&gt; **fast** full-text indexing and searching thanks the Whoosh library; except when compared to elasticsearch or solr. https://groups.google.com/forum/#!topic/django-haystack/Ll43rqAV2vU http://stackoverflow.com/questions/11875171/slow-whoosh-searches 
If you're using google voice, you're already connected to the internet. You may be better off using either a private twitter feed, an IM service or just regular email. Especially with email, you can get a lot more of different sorts of information sent to the same location, then you can have it tagged and have unique notifications.
I believe **all** cell phones have an email address. In fact, you can send a text to any cell phone from your client email, providing you know what domain (carrier) the cell phones uses.
I use http://ezrss.it/
I assume if your reading python subreddit you can or are interested in programming, this would be really easy to write. I have one I did in node.js and it was probably around 30 lines
Have a script to automatically rotate images from my Canon digital camera, store them on a specific hardrive, then resize a copy to 2048 pixels and then upload the resized copy to Picasa.
Hm, yes, looks like it should work. Weird. Just grabbed it from https://code.google.com/p/python-progressbar/downloads/detail?name=progressbar-2.3.tar.gz And get the following error, but it should be easy to fix though: sebastian ~/Desktop/progressbar-2.3&gt; python3 setup.py install Traceback (most recent call last): File "setup.py", line 5, in &lt;module&gt; import progressbar File "/Users/sebastian/Desktop/progressbar-2.3/progressbar/__init__.py", line 59, in &lt;module&gt; from progressbar.widgets import * File "/Users/sebastian/Desktop/progressbar-2.3/progressbar/widgets.py", line 121, in &lt;module&gt; class FileTransferSpeed(Widget): File "/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/abc.py", line 130, in __new__ cls = super().__new__(mcls, name, bases, namespace) ValueError: 'format' in __slots__ conflicts with class variable 
The older I got in my public school, the more kids in the class. I don't know where all those students kept coming from.
I misunderstood. I had the impression that Google Voice *was* their regular phone number.
It is. OK, so here's how it works. I register for a Google Voice number, or port my existing number to Google Voice. That number is my phone number. It's not my work number, my home number, or my mobile number. It is the one number I give out to everyone for everything. Google will forward calls and (optionally) SMS received at that number to any or all of my so-called "forwarding numbers," which (generally) correspond to actual phones, like my mobile phone. It's also possible to forward calls to Gmail's VoIP system (which can be used in the opposite direction as well), and you can configure email notifications for SMS. It also has some other features, but those are the basics.
Heh is that my photo? 
thats super useful. But if you use the UofT network it logs in automatically..
Yeah I thought that's what you might have meant after I replied and re-read your post.
So your printer's main purpose is all about the cloud. A pioneer in regards to the internet of things... That lost their purpose.
tqdm comes top for me, I'm afraid. Wraps an iterator, doesn't need instanciating: from tqdm import tqdm n = range(10000) for i in tqdm(n): do_stuff() 
Link: https://github.com/noamraph/tqdm
"What's the forecast say?" "Paper jam." "Better bring a shredder and some bread."
This post reminded me of this: * [My friends call me a scumbag because I automate my work when I was hired to do it manually. Am I?](http://www.reddit.com/r/AskReddit/comments/tenoq/reddit_my_friends_call_me_a_scumbag_because_i/), and the update, * [[UPDATE] My friends call me a scumbag because I automate my work when I was hired to do it manually. Am I?](http://www.reddit.com/r/AskReddit/comments/vomtn/update_my_friends_call_me_a_scumbag_because_i) **TL;DR**: Guy works a menial data-entry job. Creates a script to automate the work, so he starts getting around 90% of the bonus pool. He then makes a post on reddit about the moral dilemma. The update reveals that his boss fired him, so he goes over his head, meets with his boss's boss. His company end up implementing his script, and he gets promoted to lead software engineer over his department.
Yeah, that's the face of, "Crap, I'm now obsolete. I'm going to get laid off!"
I made a script to do my physics relativity homework for me. I got an A for that one and a compliment on my nice graph
My most useful python script that I've written plays a random episode from a list of favorite TV shows in my Plex library. I have it mapped to a keyboard shortcut and now when I want to watch something but don't want to have to decide what, it's just a simple keyboard shortcut.
No problem! was posted here a few weeks ago. I now use it in everything I write; seems to be pretty robust. If you wrap it round a generator, it won't have the time left shown, but otherwise, can't fault it!
It works fine for scripting too, I was pleased with its filesystem libraries. I used it for that mostly because I was interested in node and it was good exercise. Don't worry though I like python more
Not really, it's just predominantly used for such things. Node.js is a **runtime** for javascript that shines with asynchronous logic. &gt;Why would you use node.js I thought that was a backend. Like Ruby is different from Rails and Python isn't just Django, node.js isn't just, well .... "server-side"
&gt; (except I don't have a wife) Let us see if we can find out why... &gt; tickets for a concert OP has script to tell him about tickets for a concert for girl he's interested in. &gt; tickets to convention You use it to find tickets to geek-fests. I'm not sure, but I think I figured out your main problem, man. ^^^This ^^^is ^^^all ^^^in ^^^jest, ^^^of ^^^course.
Maybe it does now. It didn't back when I was there (graduated in 2011). I do know that they made a few changes since I've left though (auth types, etc), so it's very likely that you don't need to login to a bypass a firewall anymore. Also, if you're ever at Bahen and login to the secure network, you'll need to ssh into a server to bypass the firewall (don't know if that's still the case, but it was in 2011). This requires a terminal to stay open for the duration of the connection. This can also be automated by [backgrounding the ssh process](http://stackoverflow.com/a/5199505/198633).
I'm a bit late to the party but ho hum. I have a scheduled script that searches all my TV folders looking for shows downloaded (via sickbeard) in the last week. These are then copied to a 'latest' folder. Anything older than a week is then deleted from the latest folder. I sync this folder via ftp to my tablet so I've got the newest TV for my commute every morning! Has been working without a hassle for 3 years now.
Dunno, I remember him wearing the robot during the closing session, and Google image searched "Jesse Noller robot baby" it was the first hit, of which there were a lot.... 
Is it a cron job, or is there some smarter way to respond to new files being added?
I wrote a python script to strip ESPN's fantasy football projections and format them into a javascript dictionary which I then input into an old sloppily made rate your fantasy football team website that I have hosted on blogger. That script has made me a few hundred dollars in its first two years of operation. 
a proxy to capture http requests and responses along with other metrics like ttfb etc..., save them to mongodb so reports could be run post-mortem to determine whether the monstrous java based website we were about to release was slower of faster backed by actual numbers, with graphs and shit. and I didnt even have to use django. 
I'm on a mobile device so providing a link would be kinda difficult. What you might want to look into is pyenv and pyenv-virtualenv. Think of it as rvm for ruby but for python. I have it on my Linux machine and since my system is heavily dependent upon 2.x and I want to use 3.3 instead of 3.2 pyenv works out great. There's a github repo for it. Check it out. You can easily switch whatever python version you want and even go back to system default.
I'll look it up, thanks!
HOLY. FUCKING. SHIT. Thank you, this looks like a really nice improvement over having to get involved with shit like for i in range(10000): do_stuff() if i % 50 == 0: print i To track where you are in a loop.
Awesome, I'll take a poke at it a bit tonight then. I was not expecting this to do video at all, but if I do find a good Python library that does video I'll probably use it. I expect I won't find one that supports a large enough range of different codecs though. As for VLC, I'm using the Python ctypes wrapper for the VLC lib, it's kind of annoying though, it doesn't have everything implemented well (had some issues with DVDs mainly) and there's only 2-3 people who actually know how they work, so getting support in IRC and/or the mailing list is near impossible. I looked at GStreamer before using VLC, I got confused and VLC looked simpler, I should probably take another look at it and see if it solves any of the issues I've had with VLC.
yeah, but consider you loop over a bunch of files where you determine the line count of the file on the fly line_cnt = subprocess.check_output(['wc', '-l', input_file]) line_cnt = int(line_cnt.split()[0]) then you could do simply a for line in open_file: #do stuff #update progressbar 
A question that I was just asking myself when I replied to another comment: How would you loop over lines of a file with `tqdm`? line_cnt = subprocess.check_output(['wc', '-l', input_file]) line_cnt = int(line_cnt.split()[0]) my_file open(some_file, 'r') for i in tqdm(line_cnt): try: get_line = my_file.readline() except: break some_file.close() Or is there something more convenient? Alternatively, I would use pyprind like my_bar = pyprind.ProgBar(line_cnt) with open(some_file, 'r') as open_file: for line in open_file: get_line = line my_bar.update()
I once wrote a program while in my bio lab to do Hardy-Weinberg calculations for me. Saved me A LOT of time, and the process actually helped me really wrap my head around the concept. 
you can say so :)
My only question is why you didn't implement this as a REPL with basic readline support (which really is just `import readline` and then your input|raw_input calls use it.)
Private trackers are worth using with Sickbeard too, almost always you're downloading from dedicated servers as well (seedboxes, some beefy ones depending on the tracker you're at). I've seen people discuss 10Gbps boxes just to seed shit for a higher ratio.
Yeah, I had a 1gbps seedbox for a while, built up a 10 seed ratio on my favorite tracker, so I'm just having good fun with that one now. But I still prefer usenet for the "live" stuff that I'd like to see come in right as it airs.
tqdm just takes an iterator. with open(some_file, 'r') as fp: for l in tqdm(fp): #do stuff with l
ah, sure -.-. Sorry, was a stupid question :P
there is no alternative? anything faster than Whoosh?
But it's not a transposition.
I used to do something similar with xdotool. Now I just use a tiling window manager. A lot of window managers have a rules system that can do this stuff for you, if you weren't aware.
Another option: [iMacros](https://chrome.google.com/webstore/detail/imacros-for-chrome/cplklnmnlbnpmjogncfgfijoopmnlemp?hl=en)
Grinberg's Flask "Mega-Tutorial" (http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world) was my main source of inspiration for my Flask-based website, and I'm very pleased with the result. His guide is thorough, he always shows his work, and it's well written. Looking forward to getting the book!
Negative points for not using Beautiful Soup in Python. Basically the only way I'd parse webpages now. http://www.crummy.com/software/BeautifulSoup/
&gt; "Kokoropy doesn't have any other dependencies beside python-standard-library" But it includes bottle, sqlalchemy, and beaker in its source tree. Also Armin wrote ["Python is not PHP"](http://lucumr.pocoo.org/2011/2/1/exec-in-python/) Consider to put this on PyPI for easy installation
Because I make them part of kokoropy. Maybe I should provide better words, such as &gt; "you don't need to download anything else" And thanks for the link, I'll read it later
I've never developed it to work with Python 3 - the bulk of my work has always used 2.7. I have planned future support though. Perhaps the community could help out some as my Py3 skills have been sort of rusty recently... It is open source after all!
1) Don't use the system Python for anything other than any Python applications supplied by Apple with the OS. Same goes for any system - never use the system Python for development, or you're indefinitely tied to their release schedule potentially leaving you with open security holes, library incompatibilities, etc. 2) Right now, homebrew is broken for Python. Do not install Python from homebrew. Do not trust the moronic Ruby developers who make homebrew to give you a working Python environment. They've currently totally broken it and refuse to do anything about it. I logged a bug, they closed it immediately with, essentially, "won't fix". Your best bet at the moment is to use a better Python distribution such as Canopy or Anaconda; and if you don't need the entirety of Anaconda, use Miniconda instead to bootstrap a bare-bones Python setup. As per any Unix-based environment, whatever is on the $PATH first wins, so drop e.g. ~/anaconda/bin into your $PATH (add something like PATH=~/anaconda/bin:$PATH into your ~/.bashrc, ~/.zshrc etc. If you have anaconda, its package installer 'conda' can pull up a virtual environment with the packages you need very easily; conda create -n py33 python=3.3 anaconda pip While you could use this to differentiate between 2.7.5 and 2.7.6, that's almost never necessary as the third version number is a hotfix, so ideally its bugfix-only (you can always upgrade this without worry). Its the second and especially first numbers where things can change and break your code. 
Awesome. I would consider adding a section to the README or Issues for planned features so people know how they can help out. Thanks for releasing it!
Certainly! I guess I never thought about adding that section... Thanks for the idea!
https://wiki.python.org/moin/TimeComplexity for card in cards: is iteration. Even for hashed data structures iteration is always O(n). In CPython, list is O(1) on itemgetter(), so you're possibly getting screwed by using mmap() and seek() within this loop instead of just using a lookup table the way Knuth intended. 
None that have been released yet. They will be done pretty soon.
So, Ableton Live doesn't have an API to do this directly, but you can accomplish this by modifying a Live set file. The .als files are basically just zipped up .xml files that have all the set's information in them. I'd imagine you could figure out the xml structure for adding files to the timeline, which will take a little trial and error I'm sure. The less automate-able part is exporting from Live, which I think you'd have to open Live to do. I'd imagine the metadata stuff shouldn't be too difficult as I'm sure there's a library for editing this information. Hopefully this helps a little with the Live portion of this project. 
lxml's html parser is also effective at parsing web pages (and very, very fast): http://lxml.de/parsing.html it also integrates with BeautifulSoup where necessary (often not needed but can be used as a fallback): http://lxml.de/elementsoup.html 
Just buy a VPS, they're pretty cheap. I personally use digitalocean - their VPS offers start from $5/mo and with coupons you can basically get few months for free.
Heroku [supports python 3](https://devcenter.heroku.com/articles/python-runtimes) and their dev account is pretty much free.
Tell me about the unreleased ones :-D
PythonAnywhere http://pythonanywhere.com http://pythonanywhere.com/try-web2py/ You can run Python wsgi, Flask, Django and web2py
[flexget.com](http://flexget.com) for the lazy, coincidentally this is what I did :)
[Gondor] (https://gondor.io/) or [Gandi] (https://www.gandi.net/hosting/simple?language=python&amp;db=pgsql) can work.
I'm not sure I understand what you are trying to say. Accessing one item takes O(1), accessing n items takes O(n), therefore iteration takes O(n), but that's not different from unrolling the loop and just accessing each one independently. The only overhead is maintaining the loop itself.
It's $30 for the final release of the book. Let's say you get paid that much for a shift at Walmart. Since you seem to think that working for free is fine then buy the book and pretend you worked for free for Walmart that day. Read his [Flask Mega Tutorial](http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world) if you just want to take a look. If you like the tutorial then consider whether it is worth supporting the author or not.
It's not particularly clever, but the podcast downloader I wrote in python *is* something that I've been using daily since 2009. Even managed to get it working on my phone, which is *very* handy.
Openshift https://www.openshift.com/ They've got python 3 support and a friend of mine says that it suits his needs for a small node.js site so it should probably be fine for python too.
Building anything that comes with a binary extension is a pain in the butt. [This](http://www.lfd.uci.edu/~gohlke/pythonlibs/) has some precompiled binaries, but that's not really the same as having a good build environment ready.
technogy!
any chance for the source code? I'd like to try this myself 
Time for a PEP merging the best ideas from these various projects ? (Except for underscore.js, of course!)
Building modules that rely on native code and handling dependencies might be a relative pain the the butt, but probably not an insurmountable problem. I'd recommend against it, unless you really need to though.
You should be OK for most libraries, especially if you install MSVC++ 20008 EE (which is free) - this will allow you to compile most C extensions, as long as they don't need any third party C libraries. You can also try [anaconda](http://continuum.io/downloads), which should help for at least some cases.
This is what I use. I really reccomend this for anyone learning web development. Knowing how to set up a server (and quickly) seems like an essential skill. 
700ms is fast in my book. Not fastER indeed. &gt; note that I am providing actual numbers here not adjectives. Going that way, your numbers are rather worthless without knowing your indexes. In any case, I agree with you, I wouldn't choose Whoosh because it is fast but because it is a pure Python library that doesn't require me having a freaking java server up and running.
[WebFaction](https://www.webfaction.com/) :)
I have been using python on windows for 2 years now and haven't had any major problems.
Under section 3, someone implemented a BeautifulSoup version. They're both easy to do. I wanted to demo that Python could parse a web page with really basic tools, and doesn't require advanced libraries like R.
I currently use a free AWS EC2 instance. That way I can do anything I want, however it is free for one year (of computing power) only.
I do it extensively and like the setup. I don't do it under Linux, so I can't comment on one vs the other, but if you have specific questions or concerns I would be happy to help.
What are the advantages of this over Apache + mod_wsgi? I just set up flask for that kind of server over the weekend.
Did you publish any of the apps? If so - did you have any problems with Postgres? Did you encounter any difficulties at all?
I use it extensively with postgres. What do you mean publish? They're not open source if that's what you mean. As for difficulties, I definitely encountered difficulties. It would be impossible to assume there weren't any. Whether they were more or less than on linux I can't speak of though. What I will say is I know Windows very well, and none of the difficulties I encountered were even close to deal breakers. I would say it should probably take you a day to go from a vanilla windows box to a full dev environment with a web development environment on it and running. This could be as simple as installing Python from an executable and installing a web backend. We use cherrypy. It is very easy to install, setup, and use. Postgres is also a breeze to set up on windows. We use psycopg2 to talk with postgres. For Windows, I really like installing packages. Even the most complex ones tend to be easy to install, because they usually have windows installer packages which makes it stupid simple to install. When we deploy, we create self-executing packages using py2exe. This is a wonderful strategy as it separates the dev environment from the production environment. The production environment has to have windows on it. That's all. It doesn't have to have any python package on it, nor does it have to have python on it at all. And deploying is a simple as a copy command. (little bit more tricky when you consider uptime and service availability, but, at the end of the day, a copy command) If you would give an example of a problem you think you may face I can answer more definitively if you'd like. edit: just for funsies, here's some installers to get you up and running fast. [Install Postgres for Windows](http://get.enterprisedb.com/postgresql/postgresql-8.4.19-1-windows.exe) [Install Python for Windows](http://www.python.org/download/releases/2.7.6/) [Install PyWin32 tools for interfacing with win API using python](http://sourceforge.net/projects/pywin32/) [Install CherryPy Web framework](https://pypi.python.org/pypi/CherryPy/3.2.4). Download, unzip, run setup.py install. [Install Psycopg installer for Windows](http://www.stickpeople.com/projects/python/win-psycopg/) Write your first script, and you're off! 
Good point! Guess my eyes glossed over that one a little too quickly!
In case the page has some actual query fields you have to fill out and crazy hidden form fields, that track your session state like cookies were never invented, I've found **mechanize** quite useful. Parsing with html5lib alone is already quite powerful. BeautifulSoup does seem to add an extra layer of comfort on top of that.
I bought an years' worth of VPS for $25. It is good for playing, testing, and a lot of learning. Plenty fast network connectivity - 100mbps. 30GB SSDCache, 2GB RAM. I think the above option is better than free cos you have full control!
Oh, that sounds like an awesome project.
you can do some freelancing on Python at oDesk or Fivvr. For some 5 hours you can get this book for free.
I have yet to see someone mention whoosh without it mentioning it being "fast" on either reddit or hacker news. maybe linkedin or g+ is where the honesty is. :P
I would suggest a cheap VPS or Heroku. And [this](http://www.reddit.com/r/learnpython/comments/1t0dcx/serving_static_files_on_heroku_using_tornado/) may help you.
Well, negative points to me for not reading enough. However, the library `html2text` you used is not built in anyways. I'm all for understanding how to do things the hard way, but when you're trying to compare abilities, you've got to use the appropriate tools. 
http://www.wikivs.com/wiki/apache_vs_nginx tl;dr: it depends on your use-case, but nginx generally has less memory usage, less bloat, and more performance than apache. It's especially good on a VPS where memory is more limited.
Don't you mean wsgi instead of CGI?
That makes a lot of sense actually. I'm running an apache server off digital ocean's 5$ cloud server and its pretty limited. I'll probably switch it up over the weekend. At least i know how to install apache if i ever have to again!
What host do you use?
I made something similar, very basic but worked for me. It worked fine before Python 3.x, then I ported it somehow, but it doesn't handle non-latyn filenames very well. Also i wanted use glob.glob() and make function for sorting by date, but i'm lazy. To say honest, sorting can be more easily made with .bat-files... Anyway. Here's sources if you interested (WARNING! NOOBCODE!): - [moverrr.py](http://pastebin.com/YQUnpbP3) - [also with tkinter GUI](http://pastebin.com/JPthxLES)
brrr, calling a subprocess for this. so unportable and unpythonic! the following is actually the fastest on python 3 if you have no wc cache: sum(1 for _ in open(filename))
It seems as though not much... I took the structure from the Google App Engine. WebPy seems to have more features built in. And it's still in a pre 1.0 release (though I guess that doesn't mean much.)
Why would you show other people the script? There is no incentive for you to do this. 
Came here to post this. I think part of this must reflect that python is good for quickly developing things, and that it's what programmers like to use given a lack of constraints. Part of that is familiarity, but part of that is what a code eval challenge is guides the user to Python.
Yes. Given that, I'd say Java and C++ rank higher than I would expect.
&gt; I am currently using Python in academic applications (more specifically language processing and machine learning) Same here. I find the best approach to be tweaking models on small datasets in the notebook, then writing a script with command line arguments to train or extract on a lot of data. Ipython has built-in cluster support but I generally just use a standalone script.
Am I right in understanding that 3.3 is not currently supported on OS X?
Lack of Unix Shell sometimes can be very inconvenience. 
I've been trying to install pycurl on win7 for weeks since now. It's a pain.
This is a really interesting idea, but it seems problematic for pages that are updated frequently. Let's say I want to access the frontpage of washingtonpost.com, but the node that delivers it to me ends up giving me a copy that's a week old because they don't read the news very often. Or maybe I want to read a stackoverflow question, and I'm missing answers that were posted an hour ago because no one using this browser has results more recent than that. It's a cool idea, but the limitation to static content removes a good deal of... well, the internet.
Many Mac apps include an AppleScript dictionary which is a scripting interface that complements the GUI interface. AppleScript is from way back before Mac OS came with a UNIX base and was Apple's unique take on scripting in an operating system that didn't have a command line. Some apps have very extensive AppleScript dictionaries (like Photoshop or office or Apple's own apps), others don't have any or have small ones but can still be scripted. The cool thing about AppleScript is that it's very easy to script application workflows together (like, take stuff from excel and use it to add stuff to the calendar or something) and quite readable because it's very close to normal English. Here's a script I made that sets up a sleep timer for Spotify: display dialog "Set minutes before turning off:" default answer "60" set the time_before_sleep to the text returned of the result delay time_before_sleep * minutes tell the application "Spotify" delay (duration of the current track) - the player position pause end tell tell the application "Finder" to sleep 
[Unofficial Windows Binaries](http://www.lfd.uci.edu/~gohlke/pythonlibs/) Check these out. I have had success with them. Also, creating a PYTHONPATH system env variable helps.
I really don't like wikivs, everything seems to be heavily edited in one way or another. Basically as wsgi is what's handling everything.... setup what you're most comfortable with.
thank you
Hey, let me ask you something off-topic. I've been thinking about putting in a hot-tub in a semi-permanant way in the back yard, but have noticed that people give away hot-tubs *every single day* on craigslist. It's like they are such a pain in the ass that people are dying to get rid of them. Is the maintenance or energy cost really that egregious? 
Depending on the target environment, I'd use either [QtMultimedia](http://qt-project.org/doc/qt-5/multimediaoverview.html) via PyQt5 or [gstreamer](http://gstreamer.freedesktop.org/documentation/) via GObject Introspection. They both seem to lack any documentation for Python, though. Using QtMultimedia should be easier as PyQt5 maps C++ classes 1:1 into Python.
I do find that when it comes to 3rd party libraries windows support is the first thing that gets ignored (after documentation of course). A few of my applications take about 20 extra minutes of tracking down dependencies (often unofficial ports) when deploying to Windows vs Linux (where they are available in the package manager). 
Yeah, I am a fan of webfaction. Not the cheapest out there, but they have a ton of options and for a lower end VPS I have found them to be reliable.
Here is the python music player I am using: http://www.fomori.org/cherrymusic/ The server is pure python, the player is html5, and you can play your music anywhere. The code is public.
[Pythonxy](https://code.google.com/p/pythonxy/) comes with MinGW and sets it up properly. Also saves time on installing essential stuff like SciPy, NumPy, etc...
How is cloud ocean? Yeah or nay? 
Link for the VPS please?
I've recently found that the server on which my site is hosted is rebooted once a month, and there's no notification about it. It's not the greatest, and I'm thinking about leaving.
I've also had good luck installing Python eggs from gohlke's repository into Pythonxy environments.
https://www.digitalocean.com/community/articles/how-to-install-and-configure-django-with-postgres-nginx-and-gunicorn
Portability is not important to you, eh?
Portability is for suckers. /s Seriously, though -- is Beautiful Soup not known for portability? 
With the very little I've done with it, it works just fine. You can select from a wide range of OSs if you really need to (i just picked ubuntu 12.whatever). At one point i had to get a new OS image because i thought I screwed it up, and it only took about two minutes to get a new one running. I suspect a lot of these services are the same, but the cloud VPS thing has been excellent for learning. 
Huh. Yeah, that would be a thing. I don't have that happening, but will keep an eye out for it. Thanks.
I wrote a script that would text a friend who worked at a local Jimmy Johns to make me a #9 and deliver it to my house. I used the Windows speech recognition SDK, and a gmail client. I ran it on an old windows laptop in my living room and had a cheap recording device hanging in the corner of the room. It would loop until it got the command to listen for specific requests. It was great until my roommates and friends got drunk and totally abused it.
Could you succinctly explain how this differs from FreeNet?
I loved having a hot tub. I got mine off of craigslist on the cheap and fixed it up. Eventually I moved away and had to get rid of it so I just gave it back to craigslist. (I was actually renting the property and the landlord said that I could install it as long as I get rid of it when I leave). The energy costs are not that bad, and mine was running through the midwest winters. Maintenance wasn't TOO bad, but there was definitely time to be put in. You have to adjust the chemicals nearly daily, and you occasionally have to drain it and fill it back up. I had a crappy old hot tub so I had to replace a valve or two, which took a few hours. But having it was totally worth it for me, and I'll get one again once I live somewhere that can handle one. Hope that helps. 
Experience. You learn from mistakes.
So how exactly could a program without a library be scripted? Is that essentially what Project Sikuli is doing?
Freenet is open source. Freenet is only internal content (no proxies/ access to normal websites), this acts more like tor in that regard.
&gt; sum(1 for _ in open(filename)) Nice, haven't thought about that before! However, `wc -l` is a little bit faster. But you are 100 % right, `sum(1 for _ in open(filename))` is definitely more pythonic :)
Why don't any of the Digital Ocean tutorials on nginx use the /etc/nginx/sites-available and /etc/nginx/sites-enabled folders? Putting all the server directives in the main nginx.conf file makes it really hard to quickly enable and disable sites on the server. Btw I use Digital Ocean and like my VPS.
I've quite enjoyed using this as well. 
That's odd. You should ask them, they're very eager to help and friendly.
Seems to work on Mavericks for me.
Id recommend joining a project. Quod Libet is my player/manager of choice and its written in python. Find an open issue and solve it. Everybodys happy. Or write a plugin if your ideas differ too much from the project goals.
&gt; A node won't transmit data if it is old. So the person who doesn't read news very often will get up to date as soon as they open the browser, and once they are up to date they will be transmitting the freshest content. How does the node know that the data is old? Are you using expiry headers or what?
cool - thanks!
AFAICT, one of the only truly *free* ones listed in these answers. He did ask for free.
Use cygwin?
That's very odd. I've never had such kind of behaviours towards my requests in 7 years. Quite the opposite. I know they've had a couple of poor support guys but they were let go AFAIK. Might be that.
Hmm. Actually, I don't like showRSS. Firstly, if you subscribe to the schedule feed, it tells you what episodes are airing in like 3 weeks time, which is of fuck all use to anyone. Furthermore, it doesn't tell you *when* it informs your torrent client to download something, so as far as I know it could be downloading the first matching torrent uploaded- which is really insecure. There should be a specified (or user-set) delay, or maybe a threshold number of seeds. Finally, you can tell it to get 720p, or SD, or both- not 'best available'. Great idea done poorly.
&gt; Quod Libet [link for the lazy](https://code.google.com/p/quodlibet/) edit: [perhaps a better link](https://quodlibet.readthedocs.org/en/latest/index.html)
BitTorrent Sync handles all the content syncing and update notifications. I literally just wrote a wrapper around their API. You can see all the code on github here: https://github.com/jminardi/syncnet
I'm assuming it works for mouse events too? Say if I had another computer dedicated to pumping out these albums, I could say something like: move mouse to (xy coordinate) click "file" move mouse to (xy coordinate) click "export" etc. Perhaps that might work with exporting audio manually if all else fails.
I'm happy to hear this but I'd love to read more about methodology. Their claim "We've investigated thousands of tests by employers" somehow does not appeal to me, what employers, what tests, how was the data gathered, how is their sample of employers representative for all companies around the world etc etc.
Well, how far do you take the joke? Am I allowed to write a library that only supports Python 3? Am I not allowed to write code using any of the builtin features added after 2.3? I understand what you're getting at, but at some point, you have to take the leap and say, "This is what I support, and this is what I don't," and try to maximize the number of users you can support.
They seemed to be leaning heavily on their policy. 
When you change files on your disk btsync announces to the DHT that updates are available. You can find more information on the protocol here: http://www.bittorrent.com/sync/technology
OK, so if one node on the network knows that the page is updated, every node will know. I guess that works for pages which aren't updating constantly (e.g. twitter).
Yes this isn't ideal for anything with rapid updates from multiple 3d parties like twitter.
That won't give you the other peripheral unixish tools (AFAIK). I'd miss those tools, but maybe others wouldn't. In addition, I've had no problems installing anything from pypi.
Seems to focus on load rather than durability. With respect to load, it's really only useful for all those super-high-bandwidth static sites!
Cool thanx! Does anybody know how to setup https with Flask and Nginx?
You don't have anything to do on the Flask side, just have to modify the nginx config. http://wiki.nginx.org/HttpSslModule http://nginx.org/en/docs/http/ngx_http_ssl_module.html
It's amazing how far Python has come. Back when I picked it up in the early 00's I thought it would always be my fun-but-commercially-irrelevant pet language, and I'd always be stuck working on PHP or Java or C#. How glad I am to have been wrong.
You want to use a virtualenv so you can use pip to install the latest version. https://django-cms.readthedocs.org/en/develop/getting_started/installation.html
Or apt-get on Ubuntu for that matter?
Or Ruby Gems?
&gt; based on coding tests used for hiring must be a california thing. I have never had a coding test as part of an interview. 
The same issue will follow you to Ubuntu - with exactly the same solution. Look, OS distributions (various Linux, BSD, Apple, etc) supply whatever they feel is best for them. They can never be totally current all the time because QA takes time. If you want to stay up-to-date you need to manage it yourself, and hopefully have some kind of package management like conda (focussed on python packaging, not general system packages). i.e. you could roll your own .deb files in Ubuntu but it's probably more hassle than its worth over the normal Python process of virtual environments and conda+pip Note that Python distributions like Anaconda also lag momentarily (not as much as an entire OS of course) for the same reasons; but at least you get the capability via conda to fix it yourself &amp; even contribute back via binstar.org TL;DR: your Mac is fine, the OS isn't the problem.
An easier way seems to be to just create an API using flask or something similar. So you could just POST to an api whenever you get the detection. Something like: http://rpi-rfid.heroku.com/post?time=2:42_2/3/2014&amp;tag_id=1 and the API would add the mention to a database that it could pull from to display or send to some hardware or whatever you want.
Im not sure if you know this, but various *nix distributions come with python and its integral to the OS. Any other python distributions have be installed "along side" with OS python and you have to source the python you want. This involves IT and we all know IT folks are quite dim-witted, then ask them to install various libraries. Heads will assplode. I write everything against 2.7 with platform independence. Many *nix distributions come packaged with 2.3, which is why i brought that up. If you really want to make sure your code will run, 2.3 should be your target.
Those binary packages are a REAL time saver. I've been using them for several years now, no problems, ever. Thanks a lot [Christoph](http://www.lfd.uci.edu/~gohlke/)!.
http://www.lfd.uci.edu/%7Egohlke/pythonlibs/#pycurl
&gt; involving a lot of building dependencies from source That's not how you do it in Win, unless you REALLY like pain. People like me, that has to work on Python on WinXP, just get used to use .exe installers, preferably from awesome places like: www.lfd.uci.edu/~gohlke/pythonlibs/.
If your socketio client is a browser, can you use websockets? http://www.tornadoweb.org/en/branch2.1/websocket.html Do you have multiple clients that need to be notified, or just one? This SO answer shows how to broadcast to all connected clients. http://stackoverflow.com/a/15488430/2089387 Also, don't be so hard on yourself. Sounds like a fun project.
What open ports would be needed to run BTSync on my desktop ? P.S. I run a firewall.
*Here is the text of the [answer](http://www.stackoverflow.com/a/15488430/2089387) linked above, by user [Barmaley](http://stackoverflow.com/users/2137711):* --- &gt;I stumbled upon similar problem. Here is my solution. Hope this will be &gt; helpful to someone out there &gt; &gt; &gt; wss =[] &gt; class wsHandler(tornado.websocket.WebSocketHandler): &gt; def open(self): &gt; print 'Online' &gt; if self not in wss: &gt; wss.append(self) &gt; &gt; def on_close(self): &gt; print 'Offline' &gt; if self in wss: &gt; wss.remove(self) &gt; &gt; def wsSend(message): &gt; for ws in wss: &gt; ws.write_message(message) &gt; &gt; &gt; To send message to your websockets simply use this: &gt; &gt; &gt; wsSend(message) &gt; &gt; &gt; **wsSend update** &gt; &gt; I've been getting exceptions with wsSend once in a while. In order to fix it &gt; I've modified code a bit to following: &gt; &gt; &gt; def wsSend(message): &gt; &gt; &gt; for ws in wss: &gt; &gt; &gt; if not ws.ws_connection.stream.socket: &gt; &gt; &gt; print "Web socket does not exist anymore!!!" &gt; &gt; &gt; wss.remove(ws) &gt; &gt; &gt; else: &gt; &gt; &gt; ws.write_message(message) &gt; &gt; &gt; &gt; &gt; --- ^[about.StackBot](http://www.github.com/gabrieldain/StackBot) ^| ^(downvote to remove)
This is great, i've used numpy for years and there are lots of functions here I've never used. One suggestion so far: *Journeyman #6 - Considering a four dimensions array, how to get sum over the last two axis at once?* A = np.random.randint(0,10,(3,4,3,4)) sum = A.reshape(A.shape[:-2] + (-1,)).sum(axis=-1) There's an easier way: A.sum(axis=(-1, -2)) And for Artisan #1: E = np.logical_and.reduce(Z == Z[:,0:1], axis=1) or E = Z.min(axis=1) == Z.max(axis=1) 
There is no Python 3.3 by default on OSX. The current portable package is using Python installed on the OSX System. If you have installed Python 3.3 yourself, then after installing pygame/cython too, you can use kivy as well.
bundled install packages are sweet when they're available. what do you do if you find a package that doesn't have an installer already made for you? nothing left to do but go for the make file, right?
Retrieving file:///Users/johndoe/.Firefox/saved-passwords for instance
Most high-bandwidth sites are applications, not streams.
Drop me a line if you get the "cannot find vcvarsall" error :)
I really like the idea, I can envision this concept being used not so long away. Any non-realtime web app could really benefit from this if they currently have large server farms serving their content. I'd be interested in knowing more about limitations you can foresee? And/Or reasons why people wouldn't adopt it?
I spend my work time bouncing between different tasks, almost all from Bash. A second REPL would have been confusing. I can do the same sort of thing pretty easily with NumPy and iPython. But I really wanted something I could plumb into the full Bash-y command line. Bash is my REPL. :-)
Is it possible to POST data to such sites? 
You should have a running wsgi server that accepts socket.io connections and adds them to a list. If you have some other bit of code (outside the server) that knows about the card, that code can connect to the server using socket.io too. Then you can relay messages from that connection over to the open client connections. Look for chat server examples that do this with text sent from browsers. Also consider using sockjs instead of socket.io.
I don't really understand something, why would a company have a coding test for python if they were hiring for a different language like java, and if companies are hiring for a python programmer why wouldn't the people at CodeEval base their results on the number of job openings for a specific language instead of what coding tests employers are using?
Fair enough. (I guess I take every opportunity I can to get away from shell script, because it's filled with corner cases.)
Very interesting. Could it be used to access blocked websites?
This is cool, I just finished doing something like this with Django instead of Flask
OOOOOOOOOO a "software engineer" just installed 2 pieces of software. I'm so impressed!
I heard the author is giving a tutorial at PyCon. I'm trying to convince the Boss to pay my way there. I think this book is going to be the 2 scoops for flash.
I've change some `exec` into `__import__`
The potential to extend the app to have a few nodes do near continuous site update checks and relay those through a network of nodes ... think of one or two pcs checking a Twitter feed for the benefit of hundredsof connected nodes at a tiny fraction of the bandwidth. Or an html5/websockets page that auto updates what would normally be a very manual refresh process. The potential to make the web do things it isn't supposed to is there; it's not necessarily a bad thing, and could even give someone a competitive advantage under certain circumstances.
Yes, I am considering sandboxing each site in a docker instance (or something similar) so they have no access to the rest of your computer. This also opens the option of allowing sites to execute other scripts like python, etc.
&gt; What was your interview for? I am a programmer so I tend to interview for programming jobs. &gt;What was it like. They ask questions, you ask questions, if things are going well it's more like a conversation amongst colleagues, if it is not going well it feels like an interrogation. &gt; Do you have any proven tips? not really. I guess just be confident that you know your shit. 
Awesome. This looks to be an excellent compilation. Much better than my unorganized, uneducated ricocheting around the Python-verse creating bookmarks everywhere. :)
The master and archmaster exercises are so awesome that normal people can't read the white on white writing just to keep their psyches safe. AKA I count 14. 
The best response I can come up with to your question is to first watch: Stop Writing Classes: http://www.youtube.com/watch?v=o9pEzgHorH0 Which is an excellent talk about why you don't need so many classes in Python. Then follow that up by reading: Start Writing More Classes: http://lucumr.pocoo.org/2013/2/13/moar-classes/ Which, while sounding like it's a contradictory response to the first talk I mention, it's actually an excellent source for filling in blanks and answering questions that the first talk might have left you with.
I am presently developing a large project with the core parts in C++. But sizable chunks of this don't need the insane speeds required by the core and I am very tempted to do these in Python. Even though my Python-fu is nowhere near my C++-fu the little that I have done in python indicate that my productivity in Python would quickly exceed my C++ productivity. Probably go through some of the projecteuler to get up to speed. Needless to say Java is off the list. The key question is when this project expands and requires a small group of fairly mathematically minded people how hard will it be to get C++/Python programmers? 
What's wrong with six and future? I think your _compat layer is at best a light-weight wrapper that doesn't really provide any of the sophistication from future (http://python-future.org) Also, look into using grunt instead of make. I know it's node, not python, but grunt (or gulp) are significantly more sophisticated and have some very nice features (for example, watching tests and re-running them as they change, like nose-watcher does, running various asset management functions that many apps need, like generating icons files from svg, etc.). That said, looks pretty good all in all. 
I don't think most jobs are language-specific. Or if they are, their interviews likely are not. If I know 4 programming languages and have to do an interview and can pick which language to do it in, I'd choose Python just since I'm less likely to make a stupid syntax error. 
ctypes is about as close as you'll get
thank you very much, checking out the Anaconda stuff now
I'm a huge fan of anaconda
is this basically Freenet?
I was aware that most *nix come with Python out of the box. I suppose our sticking point here is that I'm not a full-fledged developer-- I'm a mechanical engineer who uses python for data visualization and simple ad-hoc web servers for... data visualization. I'm not writing code to distribute, and, if I do, it's to the guy to the desk to the right of me. I can see where you're coming from, but I'm just not in those leagues yet. Entertainingly, our software developers at work write Java... 1.4SE.
Thank you for taking a look man, I appreciate your advice. I'm going to look closer into python-future (esp. its' backporting standard libraries from 3.x) and consider Gruntfile when making a web app boilerplate. 1. Regarding six/[python-future](http://python-future.org/) and ``_compat``: The compatibility module is derived from flask/werkzeug. Armin Ronacher, creator of werkzeug and flask wrote about six and compatibility modules at http://lucumr.pocoo.org/2013/5/21/porting-to-python-3-redux/. However, as for python-future: [Future's feature list](https://github.com/PythonCharmers/python-future#features) mentions: &gt; a curated set of utility functions and decorators in future.utils and past.utils selected from Py2/3 compatibility interfaces from projects like six, IPython, Jinja2, Django, and Pandas. I my experience ``_compat`` from werkzeug/flask, alongside the ``__future__`` statement as seen in the code examples can go a long way. The benefit of just using ``_compat`` (flask/werkzeug/jinja2-style) is compatibility is vendorized, there is no external dependency. However, what catches my eye about python-futures is this: &gt; future.standard_library package provides backports and remappings from the Py3 standard library Off the top of my head, I can already think of a few places where I'm aching to use Python 3.x standard libs. I am interested in seeing if python-future can help backport ``argparse``, ``tempfile`` and other minor changes that 2.7 won't let in. 2. Grunt / build tools I am going to follow up with a web app boilerplate too. As of right now, grunt may be the only one-stop shop. Node is awesome. Grunt is awesome. Also, [gulp](https://github.com/gulpjs/gulp) looks like it has a lot of potential too. Also, regarding watching tests and re-running as things change: I help with a module at https://github.com/tony/watching-testrunner that provides this. ``$ watching_testrunner --basepath ./ --pattern="*.py" 'python run-tests.py'``. When building and testing my (non-web) python projects, I [keep it running in a tmux pane](https://github.com/tony/vcspull/blob/master/.tmuxp.yaml). I use it along with [tmuxp](https://github.com/tony/tmuxp).
There's Cython, not inlining but pretty powerful: http://cython.org/
Is there a particular reason they don't just add a function to inline C itself into Python? It seems like it wouldn't be too complicated, and from what I understand, there are some tasks that would benefit greatly from allowing the programmer more control over direct memory allocation and other lower level functions C offers that Python doesn't
Well, I would take a look at some large projects in Python to begin with. How about Flask? Or Django, or SQLAlchemy, or anything else. It's similar to Java, but a lot simpler. I would have to agree with /u/apiguy, as since you are coming from Java, you may be used to creating classes all the time.
I had one (that I used Python on) in Wisconsin. 
That is the OPs entire point &gt; running it out of the local filesystem - this completely circumvents the same origin policy "Same origin policy", aka if you loaded the webpage from file://, then it can access file://
Thanks, the echo are generally ok but I couldn't find much about their general availability. Anyhow they aren't expensive so I guess I'll just try eventually.
You could, but it wouldn't be much of an interpreter, nor would it be so friendly in the cpython VM. You have to also consider the desire of the folks that develop python and its specifications. Inline C would not make for a very cross-platform environment. Instead of compiling to parrot byte code or directly interpreting python, you also have to consider pointer arithmetic and indirect memory accessing. It's impossible to run an execution environment made of garbage collected objects that will eventually all be cleaned up by the time a script ends, and have arbitrary memory manipulation at the same time (albeit sort of possible but not practical or cross-platform friendly). Anything could go wrong in an environment of mixed freedoms. Also, executing this inline code would require it to be compiled in some kind of bitstream for crossplatform compatibility, then at some point being jit-compiled into machine code and placed into memory. This kind of execution environment assumes a lot of the host system's application capabilities in order to run freely compiled code. Since you can dynamically generate python and execute it, you would have to do the same for inline C with the same assumptions about whether the host system has a environment lax enough to permit self-modifying code, which is not something you'd want to limit platforms to. Python can be on embedded systems that has very secure code execution policies or none at all, so it's best python stays on the common denominator. So other than practicality, violation of python ethics, and the maintainability, it's the same reasons why you don't see inline C anywhere very often. If you think about why C even has inline assembly, you have to know that C is almost **always** compiled to a target machine in native machine code. Inline assembly is a way for the programmer to have explicit control to which parts of his/her program stays the same upon final compilation. The language C itself promotes this liberty in its namesake, but python is a very different ideology that believes in being able to execute scripts anywhere that's compatible, and without compilation, but not with those explicit restrictions (Projects like Pypy where you can execute scripts through jitting). As for your reasons to have inline C to easily preform native tasks, CFFI (C foreign function interface) is a way to do just that. It's also a discipline that separates the native/managed design patterns in essence of more modular and cross platform code. I believe Cython is the closest to what you need since it sounds like you'll be wanting to use python's syntax and will be constantly exposed to low level logic for performance. For memory allocations, if performance is not an issue, then python provides libraries to explicitly allocate memory and manipulate it according like other well develop managed languages. ctypes does this and allows you to allocate an amount of memory and direct read and write, and or marshal into and out-of various built-in python objects. So in short, stick with CFFI and be cross platform, have performance, and full native capabilities under your belt. Use ctypes to still be cross platform but lose native performance for most circumstances. And finally Cython to have native performance and some platform mobility, but at the cost of a slight learning curve, less platform mobility, and paled compatibility in comparison to the ubiquitous cpython.
How much does it cost to serve static files from s3? It has been a while since I heard of anyone going broke on charges for serving small static HTML files.
Ehmm... yes PLEASE Spoiler tag the answers. No point doing exercises if I just saw the best answer. 
You don't have enough badges.
I wish my c++ fu was anywhere near my fu in other languages. I cannot grasp c++, it's ridiculously difficult for me
Okay, at 'craftsman' I no longer even fully understood the question. from pybrain import smarterme 
you have to send a callable this is not super good practice or anything, but you can send `lambda: self.print_message(44)` that should do it
What's a binary exception?
NuMPY LIKE A BOSS!
&gt; Create a null vector of size 10 &gt; Z = np.zeros(10) This is not a null vector, it's a vector of zeros. A null vector would be: Z = np.empty(10) __________ &gt; Create a vector with values ranging from 10 to 99 &gt; Z = 10 + np.arange(90) I mean, this definitely works, but it's not idiomatic. I'd suggest instead doing: Z = np.arange(10,100) My comments for the neophyte section, anyway. It's 2am, and I suspect I'd have a lot to say... I think this is a great idea, but I think you could benefit from open sourcing this project. That way anyone could suggest better (i.e. more idiomatic) alternatives to your suggestions, or even additional exercises. In any event, thanks for putting this together.
I had forgotten about quod libet. It's a great little piece of software.
I made a little javascript bookmarklet for you/other people who want it also spoiler free :D Highlight the code and drag it onto your bookmarks, go to that page and click. javascript: (function(){ boxes = document.getElementsByClassName('python code'); for (var i = 0; i &lt; boxes.length; i++){boxes[i].style.backgroundColor="#333"; boxes[i].onmouseover=function(){this.style.backgroundColor="#eee"};boxes[i].onmouseout=function(){this.style.backgroundColor="#333"}}})() All it does is cover the box with the same colour as the font, and then when you mouseover it , it will reveal the answer. Tested in latest Chrome/Firefox only.
I think this past discussion is quite relevant: http://www.reddit.com/r/Python/comments/1qvoop/ive_been_using_python_for_3_years_and_ive_never/
I use _compat style layer for my own projects and it's been really great so far. Provided you only support 2.7 and 3.3+. Below those two, you enter various issues that are more difficult to handle with a simple _compat module. But since I don't believe there is any gain in supporting 3.2 and below, it doesn't concern me.
Don't design a system to be object oriented. Just design it in a logical way that is as decoupled as possible. You're going to want to test your code and the more coupled it is, the harder that will be to do. You just start writing it and you refactor a lot. You start out afraid of things like list comprehension and after a while want to learn map, filter, and reduce. On my open source project (it's an IO to a beast of an engineering program), I've totally scrapped the the input reader 4 times while leaving the data basically the same. I've rewritten the output reader two times (working on a 3rd). You do this because some new feature is impossible to get working in a stable way because of all your code hacks, so you rewrite it with hopefully a few lessons learned. I wish I had more tests...125k lines is too many.
Maybe you're looking for http://pyinline.sourceforge.net/ or http://ezpyinline.sourceforge.net/
You can use cffi verify and put an arbitrarily long piece of code in it (although this practice is frowned upon). See https://bitbucket.org/cffi/cffi/src/10240375e6e478b8391984fd09c23aeda678d0b6/demo/fastcsv.py?at=default for example.
"Here, write a quick algorithm on this whiteboard... in java" 
I think he is referring to [http://cloudatcost.com/](http://cloudatcost.com/) if memory serves it was initially $25 for the cheapest option. **Disclaimer** I am not endorsing their service. I am not a customer of theirs, I read about them on hacker news. 
Without the anonymity. 
"No thanks. I can think of a lot more fun ways to get RSI."
Thank you, but I can't understand, what is Image? (line 9)
This is probably closest to what the OP is asking for.
Perhaps not very directly related to your specific question, but on the topic of designing programs, here's my number one tip (rather obvious but many people overlook this in practice): Limit what you expose to the 'user' to the minimum set of 'terminology' that the particular domain of software demands. Ok that sounds fancy, here's an example: Say you want to design a HTTP library (in any language). The main set of 'terminology' and concepts in the context of HTTP are these, * Making a request [GET, POST, PUT, HEAD, DELETE, etc...] * Request has headers and cookies and stuff * Request has response, response has headers and cookies and stuff * Request has some 'history' (e.g. make GET request, receive 302 redirect response, go to the new place) * Request has some underlying things like TCP timeout and being able to specify retry attempts would be handy But that's as far as it goes, so in this case, you try as hard as you can to isolate the side-effects of your particular implementation under the hood and only expose the naturally-HTTP stuff to the user. So you don't go invent some cookies = CookieJarHandler() url_opener = UrlOpener() r = RequestMaker() stuff. Instead you do response = http.request(method, url, headers, timeout=30, retry_attempts=5) Theoretically, if someone needs to solve a problem using HTTP, that's all they need to solve their problem. Your application is just the enabler layer, and as such, it should not need to define or invent any new concepts that don't originally exist in HTTP itself. Anything else that you invent or impose on top, is the side-effect of the language you have picked or the way you have decided to implement things, which puts a burden on the user. In the Python world this is best demonstrated by the difference between the Urllib2 library vs the requests library by kennethreitz (his other libraries also have very similar and sane APIs). 
My understanding is that arcpy doesn't work using virtualenv - not windows (sorry, i didn't make that clearer)
Man believe me I was just daydreaming about something like this a couple of days ago. Kudos to you for actually doing it. A bit unrelated, but the other thing that I was thinking on top was to somehow tie some payment or 'cost' features to a protocol. For example a way for a node to list its price to give you a particular resource, say, advertise a particular checksum for a particular price in bitcoin, or applications broadcasting their intention to fetch a resource for a particular price, 'I want resource X and I'll pay Y to the best node that can give it to me', and baking that stuff into a P2P protocol that can transparently negotiate between themselves and get what they need in an efficient manner. Bringing that general idea into something like syncnet, imagine lots of nodes have already downloaded and have your resources available (as a site), maybe you could somehow offer and adjust your price to the network to serve your content. So thousands of sites are using this network, but you now have a sudden increase in data load and could use some help, so you as the 'owner' broadcast your new adjusted and higher offer to other nodes to help serve your content, now some nodes that were serving other resources will become attracted to your offer and start helping out until someone else offers an ever higher price, or you reduce what you are offering, ... kinda making this transparent marketplace based on micro-transactions to make it self-adjusting and efficient ... just thinking out aloud ... maybe that sparks something in your head and you do something with it, otherwise it would just remain in my head
www.textlocal.com is brilliant for the sending SMS in the UK. So far I haven't paid for a single message because they gave me 1000 free credits for reporting an error in their Python API code example. hehe. I think they are pretty damn cheap regularly anyway like 2-3p per message.
How did reddit change your life?
And I would hijack /u/apiguy's top comment to suggest watching [Raymond Hettinger's talk about the "class development toolkit"](https://www.youtube.com/watch?v=HTLu2DFOdTg) after that =)
Looks like an awesome tutorial, exactly what I was looking for. Any chance of a direct download link for all the Django tutorials for those of us on crappy connections in China?
Any way we can get a table of contents?
For webapps, http://yeoman.io is great (yo, grunt, bower). I haven't had the chance to work with `future`. `nine` seems to work. https://github.com/nandoflorestan/nine/blob/master/nine/__init__.py
A commented reference to https://pypi.python.org/pypi/backports.ssl_match_hostname may also be helpful.
http://docs.python.org/2/library/functools.html#functools.partial
Yeah I would insist HR give a designer a coding test too before wasting my teams time interviewing them. 
Except I was interviewed by a senior product designer and I've never once been interviewed by HR in my life... "Must be a California thing."
Its not about going broke, its about saving money.
all those software engineering principles still apply, regardless of it being python. Off the top of my head the differences would be that instead of using strongly typed collections like you typically would in Java/C# you would just use lists, dictionaries, sets etc.... You will likely not need to write a bunch of abstract interfaces like you would in those langs. Your interfaces would be more implied such as getattr/setattr without declaring anything up front. My opinion is that because interfaces are not formally declared in python typically(unless you are using zope/plone/zca), unit tests and integration tests are **more** important not only in proving correctness but as documentation of how the system currently works. Other things still apply such as keeping classes and functions concise and serving a single purpose. Favor composition over inheritance, etc.... Other things: I typically use modules as a namespace mechanism, and modules become packages when they grow( my personal tolerance is around 300 lines), so, no need to do one class per file like you would in Java, and there is rarely a need to go any more than a few levels deep on namespaces. so none of this.... org.company.product.db.models.User = defined in = &gt; ./org/company/product/db/models/user.py Instead, you only need to do... product.db.models.User = defined in =&gt; ./product/db/models.py And again, if you are like me, if models.py gets over around 300 lines, it gets refactored to product.db.models.User = defined in =&gt; ./product/db/models/user.py (initially referenced in ./product/db/models/__init__.py) Don't abuse *args and **kwargs, nothing drives me nuts more then doing help(do_stuff) and seeing no doc string and a function sig like... def do_stuff(*args, **kw): ... 
so you copied everything from [here](https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#python) and turned as a blog post. Why not share the Github link directly?
But you can't, at least in my experience with Firefox (no idea what other browsers do). Same-origin policy makes an exception for file://. [For example.](http://i.imgur.com/WWlFRfo.png)
Ah I gotcha. Sorry for the sass!
I've taken /u/jmitchel3's class on Udemy and it was fantastic. I'd highly recommend it. Helped me grasp a lot of concepts and he explained everything very well. :)
lol it's cool, this is reddit, I say bring the sass. :)
we test django CMS for python 2.6, 2.7 and 3.3
Are you Japanese - I see many people from the west going to teach English in Asian countries like Vietnam/Korea, but never usually developed countries like Japan. The only reason I ask is because they usually aren't trained in English (so knowing python may be less surprising in that case).
I'll do a code review but I'm sure it's not quite the shining example of how to code in Python.
Give a man a fish and he will eat for a day... Teach a man to fish and he will code an endless amount of time saving programs.
Nah I'm Italian. There's actually a number of foreigners in Japan teaching English -- it's part of the public school curriculum starting 5th grade, and the local Bureau of Education tries to get foreigners to act as assistants. That's what I technically am, but in the elementary schools the foreign assistants tend to do most of the teaching. The government's actually poised to bring a lot more foreign teachers in, what with the Tokyo being awarded the hosting of the 2020 Olympic Games.
Firefox and DownloadHelper!
&gt;I wish I had more tests...125k lines is too many. Lol. Ah, that critical mass point when the thought of going back and testing all your code is too daunting to even bother with. I've started doing (what I call) Test "accompanied" development (since my brain doesn't work with TDD) as a way to combat the creep of coding without tests. The thing is, I've always written small "sanity check" tests as I develop, as I'm sure we all do while prototyping something, but they I'd simply throw them away like an asshole. I'm sure my broken logic was akin to, "Welp, got this working. It'll probably never break. Let's get rid of this cluttered test code" So, now, rather than writing my quick tests at the bottom of my module, I just collect them in a separate unittest module. They're not "proper" unittests, but it's better than nothing! And keeps the task from being too daunting when you want to refactor to get proper code coverage. 
Yay! And I have a whole snow day off to work through this!
And you can't possibly know.
Keyboard interrupt? Swallowed. system.exit? Nope. Noticing you have an error in the first place? Yeah, not so much.
django-all-auth is supported and I think much better than django-registration, try it :)
[PokÃ©mon exception handling](http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html)
Agreed, go with allauth. django registration is way past end of life. Allauth and python social authentication are the two first tier packages. Userna is also ok, but I wouldn't recommend it.
No. If it's an expected error and the program can handle it, it's fine. Personally, I usually log those exceptions, and then ignore them.
I would suggest web2py easy to learn..
can you repeat/rephrase your question please? It will also help if you describe what you are trying to do. 
Brilliant, Would have loved to have this year ago. Seriously guys if you are just getting into django these videos will help you get a really good understanding of the framework. Also read 2 scoops of django !!
I want to collaborate with people on one script but make it so they can edit it on different computers (like google docs)
If this concept was in wide circulation as I understand it then yes, take the example of e-commerce you could reduce the number of frontend web servers and essentially have a distributed P2P cache pick up the slack. All of your dynamic content could then be pulled in async (which is what most optimised e-commerce sites do) via javascript. You can pretty much replace caching / CDN servers and any static document type sites like publications or simple company websites, and as pointed out as load increased for a particular document so would availability of it, much better way of dealing with load. You could lower the barrier to entry for people wanting websites but not knowing how to manage servers (no server costs), and they would get scaling for free. Hell you could envision YouTube reducing their server farm 10 fold by allowing replication of videos to peers. Any sites that have large assets is an obvious one, reducing load on CDN's.
What your saying is you need some sort of revision control... Imagine if there was a widespread revision control system that was standard within the industry... oh wait there is. [Git](http://try.github.io/levels/1/challenges/1) ^^^Sorry ^^^for ^^^the ^^^sarcasm... ^^^I ^^^couldn't ^^^resist.
Tutorial suggestion: 12-hour interpretive dance about APL
Although "`except: pass`" is nearly always a bad idea, in some specific situations it's usually perfectly fine to intercept a whole subclass of errors. Here's an [overview of the Python exception inheritance tree](http://stackoverflow.com/questions/18296653/print-the-python-exception-error-hierarchy), so you know at which level you should catch. Generally, I tend to start out as explicit and low-level as possible and work my way up. "This dict lookup might fail with a KeyError" to "This plugin subsystem that is going to run user-defined code should only crash the whole program is something is seriously wrong. Better catch `(StandardError, Warning)`"
And cli programs like [youtube-dl](http://rg3.github.io/youtube-dl/).
I guess u this is it http://en.wikipedia.org/wiki/Collaborative_real-time_editor try them out, and also some DVCS like mercurial
Any recommendations for a good django book? Or is my best bet just googling everything?
&gt; Ah, that critical mass point when the thought of going back and testing all your code is too daunting to even bother with. I actually have been adding tests lately since it's the only way to fix a few lingering bugs since there are so many edge cases. It's not that coupled, so it's not as daunting as it sounds. The reader/writer are highly coupled, but the data structure is not. For the most part, I take the throw darts at the wall approach. I have ~3500 input and output files (each) I run and I just try to get the number of failures down to the lowest number possible. Some of the failures are things like the 3rd party software crashed and I need to identify that or some really obscure result is failing that I don't care about.
Usually you want to use a versioning system like [Git](http://http://git-scm.com/) or [Mercurial](http://mercurial.selenic.com/) to allow multiple developers to work with eachother on a single codebase. This also means they won't tread on eachother's toes instantly when editing the same code.
Some friends of mine made an open source eclipse plugin for just this for their undergraduate project. If I can just remember what they called it...
I don't know how git would help, when OP appears to be after an IDE implementing pair-programming style collaboration.
Actually, both Python2 and Python3 are available and AFAIK both are installed by default. Which version of Debian are you running? I'm running Jessie (currently testing) and I have installed: * Python 2.7.6 over GCC 4.8.2 * Python 3.3.4rc1 over GCC 4.8.2 If you want to execute python2, just type 'python' on shell. If you want to execute python3, just type 'python3' on shell. &gt; It seems like virtualenv is only beneficial if you want to install different versions of packages for the same Python version. And you're right about that. Probably people just misunderstood what you were asking. &gt; Debian uses 2.7 as its system Python. If you want to run 'python3' as 'python' on Debian, I'm pretty sure you're going to have a lot of trouble with that, since both versions are incompatible. Python3 packages: http://packages.debian.org/search?keywords=python3&amp;searchon=names&amp;suite=all&amp;section=all&amp;sourceid=mozilla-search Python2 packages: http://packages.debian.org/search?keywords=python&amp;searchon=names&amp;suite=all&amp;section=all&amp;sourceid=mozilla-search
I'm running stable, Python3.2 wasn't installed by default, I'm pretty sure. I knew how to use them, and I definately do not want to change my system Python. I just wanted to make sure using pip-3.2 wouldn't mess with my system Python and its packages.
Straight from the source: https://docs.djangoproject.com/en/1.6/ 1.6 books coming out: http://shop.oreilly.com/product/0636920029533.do http://twoscoopspress.org/pages/two-scoops-of-django-1-6-faq
&gt; I just wanted to make sure using pip-3.2 wouldn't mess with my system Python and its packages. Oh. I'm not 100% sure, but they're installed on different directories. So I guess you won't have a problem there.
So there are a couple options: 1. You can use tmux with the terminal editor of your choice (vim, emacs, joe, etc...) 2. You can use an online IDE like Koding.com or Cloud9
Seconding koding.com
Yesterday's [numpy exercises](http://www.reddit.com/r/Python/comments/1wwwss/100_numpy_exercises/) got me looking for a simple introduction to numpy. While it would be great to actually provide some real world use examples, it seems pretty good so far.
&gt; Straight from *Source*, *1.6* books coming out Maybe I've played too much counterstrike in my day but was that just a coincidence?
www.keepvid.com P.S. Thanks for making these tutorials. I've just watched the first 3 but I'm at work :/ I'll be watching the rest at the weekend. Paying it forward FTW!
The new Search Everywhere option is going to be very useful. I think I am going to need a new shift key soon. 
Maybe typing and mic can be a little further away?
And browser plug-ins like Video Downloader Pro.
&gt;your most common use case there is a decorator More common is the ability to pass functions as arguments to other functions. 
As much as I'd love that to be the case, that's definitely not true. A couple cliche things to summarize my thoughts: One does not simply beat Java. Statistics don't lie, liars use statistics :)
People use distributed source control systems (DSCMs) for this, git and mercurial being the most popular choices. Actual collaborative editing (a la Google Docs), from what I've seen, heard, and experienced, doesn't really work all too well for code, at least not beyond tiny job interview-style proof-of-concept programs. I've actually written code in Google Docs for a job interview, and that works fine, but working like that on a production system sounds like a horrible prospect to me. Besides; most developers are rather fond of their preferred development tools; being forced to work with what will inevitably be perceived as a sub-optimal editor does not generally fare too well.
You should use PythonAnywhere.com I highly suggest them and their services, and I am not paid to say so. You can share clients with others. If you share login, then you can do this totally free. If you don't share login info, then you would need to pay $5 a month... but it's definitely worth it. They have a ton of pre-installed packages too, just a fantastic place to be if you're into Python.
Flask runs fine under IIS aswell, using fastcgi. Not at the pc atm, but you can google how to donthis.
A little bit of templates can make my day. But some people abuse templates to the point where I can look at a function declaration and just have zero idea what it does. Also people often use templates to "future proof" their code. Then they go ahead and only ever use that class with a single data type negating the need for the template. Thus they have added about 5 layers of confusion to literally zero benefit; especially to the next person to come along who might not have chosen templates as a design choice. Then when you put it into action it makes even less sense. I have been doing C++ for maybe 10 years so I can't imagine what that would be like for someone just starting. I think that templates sweet spot is somewhere around map and vector. 
It might have given a push towards programming (over Econ and CivEng) like it did for me. 
It's hard to tell if the collaboration is happening at the same time, or just on the same file, given the information.
~~Google~~ Apache Wave
Generally apache modules produce the best performance, because they're embedded in the web server. But I think that's a terrible idea, so I avoid doing so when I can. The performance and stability are all probably going to be good enough the differences don't matter. Choose one, and if it becomes a problem, measure it against alternatives.
Why do you think it's a terrible idea?
You should use contextmanager for this case
You can use VIM or Emacs inside a Tmux or Screen session. I always do it with Tmux and others attach to the same session
How does this compare to Sublime?
You still can't have multiple people editing at the same time though. tmux and screen would allow others to see the script, but they'd stomp over each other if they all tried to edit together.
seriously?
They say that in the [help section](http://showrss.info/?cs=help) of their website. They use EZTV when available and other sources when the show doesn't have an EZTV release The website is not open-source. I don't know about the internals. But if I have to guess, I would say they used the official [EZTV RSS feed](http://www.ezrss.it/) as source and built a more user-friendly service around it.
From personal experience of people switching. Obviously, one is an editor and one is and IDE. Don't be a jackass.
I've started this with the goal of making it easier to get involved with the Openstack project. Pull requests, issues, comments, and thoughts welcome. It's still a *super* early work. It's not too far from the brain-dump stage. Thanks!
Yeh for whatever reason, i get annoyed by something like that REAL quick.
The only time you should do this is if you're confident the inner code logs its errors adequately. If I have a `process_one_document` function that either imports the document to the DB or logs an error and re-raises it for debugging, it's ok to have `process_all_documents` not care about the exact errors. It would still be safer to wrap handled exceptions into a single class.
Obviously it's pretty much just for python, but aside from that you'll probably be just as productive at first, then more productive as you pick up on things. Sublime -&gt; PyCharm felt pretty seamless for me, and I used to hate IDEs.
That's unusual. If I was interviewing for a programming position and there was no coding test, it'd be a red flag.
http://github.com/ will let you edit files directly via their web interface and provides at least basic code highlighting. More importantly it will quickly move you towards using git as a collaborative DVCS, which is how I use it at work. I'm guessing you're a student, so I'll tell you that good working git skills are the kind of thing that I look for when I'm hiring interns. If you absolutely must have realtime collaboration, SubEthaEdit is pretty neat and I think they have an older version that's free. Mac only though, last I checked.
I wonder if using any old ide and dropbox or its equivalent would work?
Hm, good question, I wouldn't know how you can add information without reading the old information, modifying it and eventually rewrite the whole xls file... However, I would suggest to check out SQLite databases. They can be conveniently handled via the `sqlite3` module in Python (http://docs.python.org/2/library/sqlite3.html). Then there is this beautiful FireFox Add-on called SQLite Manager (https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/) which also lets you open a .sqlite file and view it like a spreadsheet. To get a brief idea how SQLite database ops via Python look like: http://sebastianraschka.com/Articles/sqlite3_database.html EDIT: There are scripts (just search in Google for SQLite to csv) that allow you to export your SQLite database in .csv format, which you can open in your favorite spreadsheet program then.
If you want to read and write the files rather than interacting with the Excel application, then xlrd and xlwt would be the way to go.
I recently converted from Sublime to PyCharm. I'm working on a reasonable large Pyramid project (~20k lines, no only the web part but also including various services also written in Python) and the IDE features of PyCharm are simply to good to not them. Don't get me wrong, Sublime ist the **best fucking editor** you can buy. But comparing and editor to an IDE is simply not fair. The ways of navigation and support that a tool can provide that does understand what the text it displays *means* can simply not be matched by a simple editor. Even if you can pimp it with thousands of plugins. I don't know how many minutes a day I save just because I can hold Ctrl and click an a method to jump to the definition or by simply finding all usages of a function. PyCharm does a really good job of inferring what type a variable is and provides very usable autocompletion (much better then I expected in a dynamic language like Python). That said, the most missed features was the *goto anything* that Sublime offered. Now that they added that I'm even more happy to ask my boss to buy me a PyCharm license. I know that you can do a lot with a text editor and a shell but if you are a Python developer and work with a resonalbe amoun of code, you should give PyCharm a try...
If you go with mod_wsgi, be sure to use daemon mode. I've no high-traffic sites. I like mod_wsgi because it simplifies my deployments (no need for init scripts/supervisord/etc. for process management).
Whoa. Thanks for all the comments. I'll try to answer each comment individually. 
must be a vb.net thing then. :)
Well, the short of it is this. I had an idea to teach entrepreneurs how to code. I made a class for it, and then I shared it with the Reddit community. There was so much support of the class that it quickly became a bestselling course on Udemy, shortly after I launched a Kickstarter (which was successfully funded), and now I have over 50,000 students in all of my courses. It's been incredible and it all started with Reddit and the awesome Reddit community. The ability to even have the course is a huge thanks to the Django Community and Bootstrap. Those communities are thriving very well and I'm happy I can help others learn it.
Just as others have said, there are plenty of ways to download a YouTube video. Hope that helps.
Wow. That's a huge challenge. I don't even know where to begin. ha 
Thanks for the suggestion. I'll check that out. Sounds like it's a winner.
perfect. Thanks for sharing. 
Better late than never right? Glad you like it. 2 scoops is an great resource/reference for more advanced Django users.
Thank you very much! Glad you enjoyed it. 
Googling everything is very effective once you have a framework on how to do things (thus the Try Django tutorial). However the resources others have posted are great too. It all depends on how you learn. If you want in-depth tutorials/screencasts, I make a lot of them that cover a lot of Django implementation. Check out CodingForEntrepreneurs.com for more. Otherwise, google is your friend (and so is YouTube).
Did you miss the multiple cursor feature of Sublime?
I also have courses on Udemy and, yes, I posted it a while back. Those courses go into much more depth than this video series. Try Django is the an updated version of the project within the free Coding For Entrepreneurs Udemy course.
Apache/mod_wsgi is still actively maintained, but because it is so stable and issue free there hasn't been any need to be continually releasing new versions. This is in contrast to some of the alternatives which are constantly releasing new versions along with associated bug fixes. Because of the importance of stability in a web server, a constant churn of new releases isn't necessarily a good thing. That said there should be some new releases of mod_wsgi in the short term to add some new capabilities.
A job offer? Great. Glad that I could help you do that! Thanks for taking my courses and I look forward to working with you more in the future. Would you message me about the job offer? I'd love to hear more.
I'm sure you don't want to pay for it but.... https://floobits.com/ support all the cool editors. 
Yes I think so. It allows anyone to stop after any given video and continue on if needed. It's an introduction, it's meant to get you started so then, hopefully, you do more research and learn more on your own so you can add to this tutorial.
Oh cool. Its you. I was worried someone just copied the content to YouTube. Great course. I greatly appreciated it 
I never missed that feature, I mostly used it for renaming multiple variables but the refactoring in pycharm works quite well for me so I can't say I miss it.
Yeah I did it. Thanks for checking!
Wondering how long it takes for these features to make their way into the combined IDE - IDEA.
I like gunicorn behind apache.
Thanks for not taking it personally.
First time (over CivEng) was summer before my Freshman year of college. I saw all these people that love programming on Reddit, so I was like maybe this is for me, I liked it in high school. Second time was first semester Sophomore year of college after I dropped out because I fucked up my classes and was about to fail all 5. Took the semester off, going to switch to Economics, but then I couldn't stand to be away from CS, so I ended up switching back (and was going to double major in CS and Econ, but Econ is boring as fuck, so I dropped it).
Wow you just hacked the internet so hard. Never even knew you could do stuff like that.
I fully agree to your point of IDE and editor being different in nature, but you make an interesting remark about the usefulness of semantic analysis of a dynamically typed language. I'm also pleased to see that all the benefits you mention about Pycharm, I feel I already have with Vim ..which is completely open and free. So I also agree to Sublime being the best editor you can buy. In the end, I'm just glad we all have the choice to pick what suits us best.
Being a video actually has a few advantages in terms of learning. You will actually hear all of the information even if you don't process all of it. I find myself skimming tutorials because I think I understand the next step only to find out I messed up two steps later. You are after all allowed to rewatch portions of the videos if you don't understand. Some people also learn better from hearing things over reading them. It also means that you will have to follow along and type everything out on your own. Good if you like the LPTHW Zed Shaw way of doing things.
Indeed. django-registration is past end-of-life. It has problems with custom user models and possibly Python 3 compatibility.
I took your course on Udemy and you do a remarkable job showing how to get things done! Thanks!
I'm in a similar position right now. I love sublime, but I really want an IDE. But PyCharm is so heavy and slow, and the multiple cursors is something I absolutely love.
Chicagovps and 123Systems. I have yearly plans at both places.
absolutely! back then i didn't grok the difference, hopefully I do now :) I was coming from VC6 and the ability to introspect and play around with internals so easily without segfaults a plenty sent me on a trip to cloud 9
Try [savefrom.net](http://en.savefrom.net). If you use submitted link it also suggests you download videos from whole playlist. EDIT: And you can just add "ss" before "youtube" in link (i.e. "ssyoutube") and it redirects you to download page.
Sublime extensions that have kept the IDE longing at bay for me: [Sublime-Jedi](https://github.com/srusskih/SublimeJEDI) - killer features goto definition ctrl+shift+g, and find uses ctrl+alt+f [pylinter](https://github.com/biermeester/Pylinter) - pylint integrated into sublimetext [GitGutter](https://github.com/jisaacks/GitGutter/issues) - displays an icon in the gutter area indicating whether a line has been changed [SqlExec](https://github.com/jum4/sublime-sqlexec) - run SQL commands in sublimetext. And for those occasions when I need a debugger [pudb](https://pypi.python.org/pypi/pudb) fits the bill 
Have they fixed that years-old bug causes the SourceCode Pro font to be garbled? No? Still not fixed?
I am currently working on a Flask project and considering PyCharm. Wondering this too...
Somebody had to make it about Vim/Emacs, didn't they? Beatingadeadhorse.jpg
I use it just fine...?
Yes, this does work. Thanks!
Yes...I also got the code to work by defining an object: click_test1 = partial(self.print_message,1) But honestly, I'm curious why this is necessary. When do I know I need to do this? I'm a novice in OOP...why can't I pass the argument directly?
Check out a wsgi platform like Flask and then run nginx to run your app. mod_python is old school and is coming back but can be a tad hairy to just start playing compared to Flask.
&gt; What's the best way to deploy django app? What is "the best" for your use case? Some people like or get used to apache. They know how to tweak the settings. They choose mod_wsgi. Some people have no experience with apache. They usually use a web server (nginx etc) in front of their wsgi containers. Some like uWSGI for its features, some like gunicorn for simplicity. Really it is just a matter of taste and needs.
You can do everything in [python](http://xkcd.com/353/). Edit: In all seriousness, the general language features of both python and ruby are going to be generally sufficient. I'm not familiar with ruby, so I can't tell you what you'd be missing, but I can tell you that some esoteric language feature that ruby has and python lacks, is probably not the critical factor in enabling you to do whatever it is you're trying to accomplish. It might be more useful to look at the libraries that support your idea/problem. For example, python has a very strong scientific computing community. I don't think ruby can tout the same. 
I feel like the OP was looking for concurrent editing.
when I started I thought of it like this whatever you send, the program will tack an `()` at the end and execute. so if you send `myfun`, it will go `myfun()`, and stuff will happen if you send `myfun()`, then you will get `myfun()()`... which is most likely not what you want
Thx 
Anything new for the community version?
Recently I've seen a talk from the creators of http://pythonhosted.org/openpyxl/ and it looked quite promising. 
It's quite different in nature. By which I mean, scikit-image has all this neat scientific analysis stuff like feature labeling, and PIL has all this neat conventional-image-manipulation stuff. They're really targeting quite different users. For example scikit-image doesn't really care about paletted images, it converts them to grayscale or RGB. For my own purposes, that heavily limits scikit-image's usefulness. I tried to watch the video in case new stuff had been implemented since I tried it last, but it's super laggy atm.
Why the allergic reaction to an earnest comment? A beginner reading this, might want to know their options? I conclude with pointing out the choice, not saying that one is better than the other..
You can get a palette by using k-means and searching for peaks after separating it in LAB color space. He shows it at 26:00. Not sure if there is a shorter way to do it though. I have not used it enough to know everything it does. But a good point is that it is under a BSD license so you can do whatever you want with it. But sadly PIL is not
I would use pandas and write to an csv or excel. Here is how to write to an excel: from pandas import ExcelWriter data=pd.read_excel('EXCEL FILE', YOUR CONDITIONS FOR INDEXING) USE A LOOP OR FILTER TO FIND WHAT IS THE FIRST THING NOT FILLED. ENTER YOUR TIME/NUMBER INFO with ExcelWriter('YOUR SAVE FILE') as writer: data.to_excel(writer, sheet_name='EXCEL SHEET NUMBER') You can also write to a csv.
In recent news, Vim remains basically exactly the same at it was 10 years ago. Sometimes this makes me sad. 
But can you create a flask project with python 3.2 and then change the interpreter?
Still no 64bit support without having to manually create a 64bit shortcut and config.. Sigh :(
Yes, I remember it does k-means (and LAB, though last I checked it did LAB incorrectly -- I had to port CPercep from GIMP's code to get it to roundtrip RGB reliably.). I don't want to derive a palette though.. I already have a palette, and want it to not be destroyed/disordered. Converting to RGB/grayscale at minimum destroys palette ordering, and may destroy pixel information if there are duplicate palette entries. Good point on the licensing, and I freely admit that scikit-image has plenty of good points -- they just don't seem to intersect with my particular use cases, which are not 'heavily analytical' in the sense of labelling, convolving, statistics and the rest of the fantastic array of functions included in scikit-image. 
I was looking for the same thing as you but ended up with scikit-image. My engineering and math background helps understanding it a lot easier. But I can see how it can be very difficult to get what you want out of it for simple thing. 
oh man ... where do I start ... just go read their feature list or download the a trial or the community edition, sublime doesn't care much about what kind of text you are editing, PyCharm is a full blown IDE that understands a lot about what you are doing
I started on Java for a class, then used Matlab for lab class, then changed to perl for another class, and then change to R, and last ended up at python. Python can do almost everything Matlab can and can perform most R functions but faster. You also have pandas which can do everything excel can computationally with additional programing. I get very frustrated with Java and Perl due to the compiler. What usually happens is this I finish writing code, compile it and wait, found something wrong, attempt to find it and fix it, compile again waiting again, find something wrong again, and it continues in a cycle. With python I have done no compiling, you can easily test stuff with ipython and see almost instant results. Python is also easy to understand. Perl becomes difficult to read especially with all the dollar signs. The only thing that I find frustrating is python is still developing and missing some algorithms and is not really used for chips (except raspberry pi) or have lots of scientific library support for Android. 
I love autohotkey and I've been trying to get into Python for a while. This would definitely help me transition. Is there any way to use this on Windows ?
I like the [Anaconda](https://github.com/DamnWidget/anaconda) Plugin
I don't think this works on Windows, it communiciates with X through sockets.
IANAL, but [PIL's license](http://www.pythonware.com/products/pil/license.htm) sounds equally permissive to BSD to me. 
I have to use this at my company. Is a month and half now and I find it is quiet useful and on fast machine I don't have any performance problem. But still I am more comfortable and productive using VIM, Tmux and CtrlP with silver searcher backend (fast fast fast).
Years old? Source code pro is less than 2 years old... http://blogs.adobe.com/typblography/2012/09/source-code-pro.html says September 2012
Well, it's just that the example OP posted involved reaching for the mouse again, but with ctags I just `&lt;Ctrl-]&gt;` to hop to a definition, and `&lt;C-o&gt;` back to where I was. I had someone working with me on a problem, and I said "Let me just check, yeah, okay." They asked "What the heck was that?" "What?" "Something just flashed on the screen for a split second. Did you do that?" I had just wanted to check something about the signature, so I hit a key, instantly saw it, hit another key and was instantly back. I wasn't in the file with the definition for even a full second. This happens all over and really adds up in Vim. It's amazing how much slower I moved and even thought using the mouse. It's not something you can explain to someone who hasn't experienced that feeling of mind-melding with an editor - you're barely moving, but things are happening quickly all around you. It's not something many people even believe is real. So yeah, I like to bring up Vim so newbs know what kind of power it has.
&gt; Sublime ist the best fucking editor you can buy but not the best there is. it has its strengths and weaknesses. its strenghts are many, but not all-encompassing. 1. it has no terminal panel. the build system isnâ€™t good for all uses of a terminal, so i like being able to pop one thatâ€™s synchronized with the current document (and not overlapping the editor window) using a keypress 2. on linux, it lacks dranâ€™nâ€™drop of text segments. this bug has been there for a looong time. 3. on linux, thereâ€™s no way to convince it to use the compose key (i.e. its input method handling is broken!) 4. sublime sftp is a joke, both functionality- and price-wise. 5. syntax definition files are awkward to author. sure, itâ€™s better than Kate, my text editor of choice, in some areas. but that one handles all of the above flawlessly and e.g. has seamless sftp browsing and -editing enabled by default. the editor itself and all plugins are open source and free of charge. --- fully agree about your main point. both sublime text and kate canâ€™t achieve the levels of automated refactoring and integration of demantic features an IDE has.
You are completely right. I did after I could convince the senior that adding __enter__ and __exit__ didn't conflict with their old code.
I just think about how I've been using it enthusiastically for 7 years, every day, and I still can't see the bottom. It's one heck of a big program.
You could try [pyo](https://code.google.com/p/pyo/) which is like SuperCollider in Python. In combination with an interactive python shell you could create objects and set parameters (like freq and so on) "on-the-fly". Think you then would need to create some shortcuts to your taste to really use it effectively.
No that's not what he's saying
As far as I know there are not that many. There was a Eclipse plugin that I once had to use which worked well when it worked ... but boy it was hell when it didn't.
Most updates apply to the Community Edition as well. See the [What's New](http://www.jetbrains.com/pycharm/whatsnew/index.html) page.
Just run PyCharm under a 64-bit Java VM (Oracle JRE or OpenJDK).
I do, I meant that PyCharm doesn't do that automatically and pick the 64bit java install you have without you explicitly making it do so
/u/pixl_dave sorry for the delay I completely missed your reply! Here's the info for the files that I bought: Writing Idiomatic Python 2 is 96 pages and 215KB in size Writing Idiomatic Python 3 is 94 pages and 214KB in size
I use this font and it works fine. 
I wrap up a series of pytest fixture posts by presenting my version of a pytest fixture reference.
[Nirsoft VideoCacheView](http://nirsoft.net/utils/video_cache_view.html) Any video that is streamed as an .flv gets cached in your browser. You can simply copy that cached file instead of downloading it all over again. Save your bandwidth and time. :) PS: Only for Windows.
I'm writing a book about django, or at least, loosely about django. it's a guide to web development via TDD, but it covers lots of django, and all kinds of other Important Things (TM), like Git, static files/bootstrap, practical deployment steps and how to automate them with Fabric, lots and lots on django forms, 3rd party auth integration, javascript unit testing, mocking, jenkins... basically trying to distil what i've learned from my supergenius colleagues over the last 4 years. you can read it for free here. http://www.obeythetestinggoat.com 
I'm always curious to know what the computer specs are for people who report this problem. It definitely is slower to load up than anything else I have, but once loaded isn't really slow. I primarily using it on a two year old win7 laptop that I got for around $600 with 8 GB of RAM and two core i5 processor. Also bought a SSD drive as an upgrade so that obviously helps.
aren't you forgetting some details in there? to the OP, python is not php, the execution model is more similar to java or .net in that u have an application serverish thing and a bridge to your webserver of choice. mod_wsgi for apache and uwsgi for nginx for example. read up on bottle or flask or pyramid or django or web2py or zope or plone or ....... 
RTFM - https://github.com/joke2k/faker/blob/master/README.md
&gt; python is still developing most all programming languages in current use are. &gt; missing some algorithms what? where?
i.e. do you think this approach would work?
It is also on [PyPI](https://pypi.python.org/pypi/autokey-py3).
The actual repositories are here: http://www.darpa.mil/OpenCatalog/index.html Some really cool stuff in there; lots and lots of python code to play with.
I'm still transitioning to it, but the basic workflow is: "I wonder if there's a way to to X..." and a quick Google later it appears that, yes, not only is there a way but there's a **more clever** way than I could have imagined to do something. It hasn't changed much but that's because a headstart that can be measured in decades.
I've got 2.7.4 and 3.3.1 installed systemwide, plus a handful of virtualenvs for python2 and python3. My view is to use the distro versions for general tinkering and distro programs that need them, and virtualenv versions when you need to either ensure a "clean" setup, you're messing with dist/site-package defaults, or you're working on something that will be transferred to another system, and you need to emulate what's available on that system. A typical example is writing web apps that will be hosted elsewhere. That web host might have a different distribution, and by extension, a different Python version and add-ons. Instead of hoping your software will work, or building a second machine, you can simply start your virtualenv, and use pip to install exactly what your web host uses. Virtualenv also comes in handy when you're trying a new library, and don't want it to trash your current installation until you're sure it's put together well, and something you'll use regularly.
Oh look, it's this thread again...
It regularly comes up every month :) Such an evergreen topic.
I'm actually a bit surprised that there's not a sidebar topic about this. Seems like it would be worthwhile.
Do you accept feedback on the website's design? These social media buttons [obscure the text at certain window sizes](http://i.imgur.com/AoNxhRi.png). That's really annoying.
Since I missed previous threads, I'll summarize real-life advice: 1. Use an unspecialized text editor (Notepad, TextEdit, etc.) until you need it to do something else. That will come pretty quickly, but you'll have a better idea of what features you actually want. 1. If everyone around you is using a particular IDE, use that one. You can teach each other fun new tricks and share configurations. 1. If you're alone or in a highly mixed environment, pick one at random and download the trial. Write down what you like and don't like. Try another one; repeat. Compare notes. 1. Then get Sublime, the One True Editor. ;-) 
Oh man! I passed right by this thinking it was an older project but thank you for recommending it so I would look again. 
I would choose a different One True Editor, but beyond that: spot on.
Here's a cool idea: instead of auto-thanking people for wishing you a happy birthday, show them this script. You probably won't need it by the next year.
The [Python plugin](http://plugins.jetbrains.com/plugin/631) for IntelliJ IDEA is never far behind PyCharm and seems to have the same version number as the corresponding PyCharm release. You can see which version has been released on the page I have linked to (the last one at the moment is 3.1 Beta 2).
Just curious what your choice is?
Will cross post! Thanks!
FIrst of all, it was one too few when I ran your code as it appears above. Secondly, you are having a hard time because the flow control is confusing and more complicated than it needs to be. Consider how I have rewritten it here and compare it to how you have your flow control, especially how I only have one input call: http://pastie.org/private/rcuh2ubwzcsjld2rv6qcq Feel free to ask questions!
Why are you gearing this toward 2.7.6 instead of 3.x?
Such comments always come from people using Vim / Emacs.
I know you didn't ask me, but we use vim with python-mode at work.
Hiya, and welcome! First tip - for code formatting, make sure you indent each line 4 spaces (so the first level of code indentation, there should be 8 spaces there). Like so print("Welcome to the Guessing Game. You goal is to guess a number between 1 and 100.") import random x = int(random.randint(1,100)) y = int(input("Enter Number(1-100):")) if (y == x): print("Congratulations! You guessed correct with 1 try!") counter = 1 while (y != x): counter = counter + 1 if (y &gt; x): y = int(input("You have guessed too high! Try again!")) if (x &gt; y): y = int(input("You have guessed too low! Try again!")) if (x == y): print("You have guessed correctly! Congratulations! It took", counter, "guesses!") So lets walk through this in order. This is the long version of the answer, but since you said beginner and for a class in your post, I wanted to give you a peek at the logic that goes into debugging something like this. 1. The game starts, and the random number the computer produces is, say, **30**. - `x = 30` 2. I guess *100 / 2* = **50** - `y = 50` - `50 == 30` is `False`, so we skip the first conditional - `counter = 1` 3. `50 != 30` is `True`, so we enter the `while` loop - `counter = 2` - `50 &gt; 30` is `True`, so we trigger the first conditional. Printed message tells me I guessed too high, and asks for additional input. I pick *50 / 2* = **25**. - `y = 25` - `30 &gt; 25` is `True`, so we hit the second conditional. Printed message tells me I guessed too low, so I guess *25 + (50 - 25) / 2* = **38** next - `y = 38` - `30 == 38` is `False`, so we skip the third conditional 4. `38 != 30` is `True`, so we go back into the `while` loop - `counter = 3` - `38 &gt; 30` is `True`, so we enter the first conditional. Printed message tells me I guessed too high, and asks for additional input. I pick *38 - (38 - 25) / 2* = **32** - `y = 32` - `30 &gt; 32` is `False`, so we skip that conditional - `30 == 32` is `False`, so we skip that conditional 5. `32 != 30` is `True`, so we go back into the `while` loop - `counter = 4` - `32 &gt; 30` is `True`, so we enter the first conditional. Printed message tells me I'm too high, and asks for another guess. I go with *32 - (32 - 25) / 2* = **29**. - `y = 29` - `30 &gt; 29` is `True`, so we enter the second conditional. Printed message tells me I'm too high, and asks for another guess. I know it's in `[30, 31]` at this point, so it's 50/50, and I guess **30**. - `y = 30` - `y == 30` is `True`, so we enter the final conditional. - Actual Guesses: 6 - `counter`: 4 6. `30 != 30` is `False`, so we exit out of the `while` loop normally. Does that breakdown help clarify the logical issue?
Yeah. All feedback is welcome. I'll get the social buttons sorted. (didn't test this as much as I should have)
In general, I disagree with using a `while True` loop here, since we do actually know what would cause the end of the loop. I'd say something like this would be my preference (simplified, but you get the gist): x, y, c = random.randint(1,100), -1, 0 while x != y: c += 1 y = int(input('Your number here:')) else: print('You got it, and it only took you ' + c + ' tries') You could add your `try`/`except KeyboardInterrupt` block inside the `while` loop, if desired, but this way, the only logic that needs to be added inside the loop is greater than/less than - the loop itself is doing the equivalency testing.
Classyfier is a better version/fork of classifier. There's also bayes_motel but it's better at twitter type data with metadata fields in the hash. Classyfier works really well on text or more general problems.
Thanks for the help! What I did was put *counter = counter + 1* under the first 2 of the *if* statements in the loop, instead of having it above the 2 *ifs* in the first line of the loop. From what I have tested so far it looks like it's giving me the correct number of guesses!
I know, right? I almost did it both ways just to be pedantic then kinda shrugged to myself and stopped worrying about this guy's homework. You could also do it using generators. Or enumerate(). Or map/reduce. Or recursion. OP just needs to keep going forward in the class to learn better flow control so I tried to illustrate a bunch of fundamentals at once.
Could be true if the DSL is crap. Rubyists point to Rspec and Sinatra as very intuitive and amazingly sugary sweet DSLs. # sinatra get('/') { 'Hello World!' } On one hand, it's very intuitive. It's obvious that this mini-language for future devs isn't that hard to learn. On the other hand, this isn't where the journey ends. In Sinatra, you have to add in all the stuff yourself like how to serve images etc. Then you end up rebuilding all of rails yourself. I think the rails-api gem is a nice compromise. Newbie ruby developers like Sinatra because it seems easy, but it's not always a great tradeoff. The biggest problems in the Ruby community right now is: - Some other languages like Scala, Go and Elixir are productive and have libraries like Sinatra that make it easy to build a JSON web service. - The rise of Angular etc have invalidated many of the Rails easy wins, although, demo'ing how I build an authenticated webapp using devise has wow'd my coworkers many times ("what. that was amazing.") So if I can just write a bunch of tiny JSON webservices in scalatra (scala) or with martini (golang) then why do I need the Ruby stack at all? At the same time, the testing workflow with Ruby is unbelievably polished. The tools you guys. The testing tools. I'd kickstart pry or guard for scala or golang. Those things could be ported. Ipython has some tricks that pry doesn't have. Pry has some tricks that ipython doesn't have. Some of pry's tricks are more cute than useful. Other times, I find pry to be not just a debugger but a very fast learning tool.
Im well versed in python, but have no experience with ruby. However, someone brought up the point of using the right tool for the right job and I was curious if I even need to go down that path or will python cover everything ruby might. What shell integrations are you referring too? Also, I think django, flask, tornado, bottle would pretty much cover rails. I havent used rails, but I cant imagine it being a **whole lot** easier than these packages.
Yep, viewing the site on a phone is hell.
Editing is not the same as typing. I think we've both interpreted the OP's question in a different way. Fortunately for OP answers to both interpretations have been supplied here so hopefully they've been sated for the time being :)
eek. i'll get it sorted. thanks (no point in having a responsive design if the social buttons take over it) 
Re web programming: yes, Python does this really well too. Any difference is likely a matter of taste. In my experience, the documentation and tutorials for Ruby tools in this area tend to be better written, glossier, and more accessible. Ruby has really nice syntax for invoking shell commands. It also has top-level constants for ARVG and ARGC, stdin and stdout, etc. Basically all the things you have to go digging around in the sys/os modules for are "just there" in Ruby. There are also lots of fun tricks you can play with blocks and shell integration that would be really awkward in Python. Again, Python is great for system-level tools. It's just different and you might like Ruby better.
That is one way of doing it. Another way that would lead to less repetition of lines of code, would be to look into the uses of `else`/`elif` to go along with your `if` ([Python Docs](http://docs.python.org/3.3/tutorial/controlflow.html)) Typically, when using a `while` loop with a counter, most find it easiest to code the loop so that each iteration is a complete action - in your case, a single guess. To do that, you'd do something like this: while x != y: counter += 1 y = int(input('Guess a number between 1 and 100')) if y &gt; x: print('Your guess was too high. Try again.') elif x &gt; y: print('Your guess was too low. Try again.') else: print('You guessed correctly in', counter, 'guesses') Note that the `else` isn't in line with the `if`, but rather the `while`. A lot of folks don't know that `for` and `while` loops can have `else` clauses (I was only just exposed to it a few months ago myself), but it turns out to be a pretty handy trick. When you use an `else` with a loop instead of an `if`, it executes after the loop has completed, but **only** if the loop exited naturally (no `break`). In this case, what this means is that you only have three conditional statements to evaluate: (in)equality (by the `while` loop), greater than, and less than (by `if`s). In your original example, you have four, since you were doing an equality test inside the `while` loop, in addition to it being the condition of the loop itself. *Having the extra test is not a problem*, I just find this to be the simpler way of expressing the same concept
That makes sense. I am familiar with if, else and elif as that's what my lab last week focused on. That's one thing I like about programming. Their is 100 different ways to the same thing and their is always room to simplify things.
I'd suggest having a top level TOC so people can see what you are trying to teach them. And what's done/not done.
Sometimes. I don't get python generators because I'm a ruby dude. Python guys have a moment of silence when you explain blocks because they can't see the power curve because they haven't put the time in. I agree with a lot of criticisms of ruby in this discussion: * DSLs means more syntax to learn (except the author of the DSL was trying to give you syntax sugar to make your life happy) * Ruby has more than one way to do it which some people don't like. * I don't see anything in Ruby I need. I agree! If you know python, the win is small imho. * Ruby is slow. Pypy is pretty fast. Python is pretty fast. There are many things much faster than ruby and python of any type. Benchmarks are the only science, everything else is taste. On the positive side, stuff like creating an XML document with a DSL still brings a smile to my face. require 'builder' xml = Builder::XmlMarkup.new xml.shopping do xml.item(name: "bread", quantity: 3, price: "2.50") xml.item(name: "milk", quantity: 2, price: "3.50") end &lt;shopping&gt; &lt;item name="bread" quantity="3" price="2.50" /&gt; &lt;item name="milk" quantity="2" price="3.50" /&gt; &lt;/shopping&gt; Look at how the code looks like the resulting XML document! Isn't that elegant? Now some python coders might want to create a string themselves. Or maybe call a transformation on a hand rolled data structure. Some java developers would prefer a more programming-looking solution, something with a for loop. Ruby peeps optimize for happiness. The downside is performance and sometimes extra DSLs to learn. Builder is just one DSL of many but it's the shortest I could think of. I made a slide deck to introduce Ruby/Rails to some Python guys I work with: https://speakerdeck.com/squarism/what-is-ror They didn't switch and if you're mind is made up then you won't either. There's no right answer. It's not science.
Well, the *list* of repos is there; almost all of them are actually on Github (yes!).
I think you're being downvoted since this is not technically an IDE.
It's a text editor, but I don't believe it has some of the features most people would expect from an IDE (I'm thinking of a built-in interpreter, for instance, other than the build function). If I'm wrong, then please let me know. I'm an avid ST3 user...
Yeah, collecting answers to the FAQs would be a good idea. Maybe on a wiki? And it would be linked on the right side.
just an heads up, that some of the conversation has spilled over into a new boto issue created today: https://github.com/boto/boto/issues/2078
This is cool. It looks like it fits quite well with a new backend that I'm working on. I added column name mappings in [this fork](https://github.com/mtsgrd/PynamoDB/pull/1/files).
Now my Killbot can have a brain! YES!
Thank you!
I should have mentioned that I already did the source tutorial, and own Two Scoops. But thank you for the other suggestion!
Will do, thanks for the reply!
I'm a long-time user of Jetbrains IDEs, though in my own case I use the full IDEA suite. I've tried PyCharm out, and I'd recommend it to those who are using Python in the bulk of their work.
For a while, it 2.x lingered in domination because all of the packages were written to 2.x. Now that a lot of the most important ones (such as the scipy stack) have been ported to 3.x it's getting better, but because of how long it took those to get onto 3.x it gave that much more time for people to amass 2.x codebases which they now don't want to abandon/port to 3.x.
Were all of these funded by DARPA? I see packages on there like Julia, Blaze and Bokeh that I've seen lots of other places and didn't know they had anything to do with DARPA. Maybe this is just the list of software that DARPA uses, rather than develops?
This is a very nice project, hope more themes will be added soon !
[Tangelo](http://kitware.github.io/tangelo/) looks pretty neat; seems like it'd be great for quick prototyping or simple dataviz pages.
I think I did not save it. You can find an older one here: https://github.com/mdipierro/web2py-appliances/tree/master/RedditClone
IT BOILS DOWN TO FOLLOWING THE VIDEO WITH MORE EASE I know the older one. But this one is alive, so to speak, and we can follow the flow of it. That was the point. But no problem. Sometimes I lose hours by a typo or whatever. In that case a package would be welcome... Thank you for creating this wonderful Framework. 
Apart from the other great answers, you can write and compile a C program and use the [subprocess](http://docs.python.org/2/library/subprocess.html) library to interact with it.
Ninja IDE is pretty good and relatively easily extendable.
&gt; So I've found that the cursor line that blinks (indicating where I'm typing) is a solid bar and, about 90% of the time, clicking at another point in a program file makes the cursor disappear and not show up until I start typing again. This makes it impossible to know which 2 character it's between. This sounds like a complaint about your editor, not python.
&gt; Welcome to the DARPA Open Catalog, which contains a **curated list of DARPA-sponsored software** and peer-reviewed publications. DARPA funds fundamental and applied research in a variety of areas including data science, cyber, anomaly detection, etc., which may lead to experimental results and reusable technology designed to benefit multiple government domains. 
Sublime Text in distraction free mode.
Thank you very much. I appreciate the comment :)
Check out Anaconda: https://store.continuum.io/cshop/anaconda/ It supports integrated installation of several of these packages.
Good to know. Thanks Danny. How's the book launch going?
I'm always working to improve :).
I work on an open source project funded by DARPA and it's not on here. Wonder why.
if you need multiple cursors you are doing something wrong
i believe i read in the press release this morning they are starting with one program and moving out from there. review on their part takes time, so give it a while. in short, it's not exhaustive, it was for one or a small subset of programs.
Most importantly, is it fixed to actually work? Because the old autokey didn't, mostly. I didn't spot anything alluding to such a change, in the changelog.
As someone that picked up Python by working from examples, having the nuts'n'bolts of those examples explained is really useful. Simple things like the use of __name__ and __main__ are so often missed if you are just grabbing code snippets and gelling them together. So it's an upvote from me.
Good Canadian Guys! Just saw them last year again!
Idle is an IDE that's included with python but no one uses it. Use ipython + a code editor (sublime text, vim, notepad++) or an IDE like pycharm. Or look for old threads on recommendations for IDEs.
Nope, we're all benefitting from DARPA's investment into open source and big data. http://slashdot.org/topic/bi/continuum-analytics-using-darpa-funds-to-explore-python/ Other notable projects include things like RHIPE, Trelliscope, and DataDR.org for R, the Berkeley big data stack (Spark, Shark, Mesos), Vega from Jeff Heer and others at Stanford/UW/Kitware, CVX from Stephen Boyd at Stanford, the BayesDB folks at MIT, NMF from Georgia Tech.... the list is long and impressive.
Your feedback is noted and appreciated. As the creators of Anaconda, we definitely want to help our collaborators on the XDATA project (which is the bulk of the catalog posted here) get their code into production and easy-to-install for folks. So, we're actively in discussions about packaging and distribution of this stuff - OSS analytical software is really quite notorious for how difficult it can be to get started, whatever language or "stack" it's on.
Well thank you again for this information. I'll check those out and get back to coding in peace now!
I've been here at the PI day for the XDATA project. The Program Manager, Chris White, told us that this is the first roll-out. It's the first time they have made such a list and are looking to extend this idea to other I2O programs: http://www.darpa.mil/Our_Work/I2O/
Earnest? &gt;So I also agree to Sublime being the best editor you can buy. This is the level of condescension I expect from Vim/Emacs evangelists. Earnestness is the actual problem with people who love Vim/Emacs. You think it's the only good thing out there and anyone who thinks anything is better is wrong. You're incorrect, though. I'm sure Vim works great for you. I've used it before and I agree it has it's strengths. That doesn't mean it's the best thing for everyone.
Ah, very good to know! First year, I bought all of them, not realizing IDEA had plugins to bring the other functionality in. Since then, I've been wondering how long the delay is, but hadn't found anything very specific on forums and such. Thanks!
pip? you can point pip to a git repo
You need to write a music program in python? In two days? Hmmm music is pretty broad... Any area u are particularly interested in?
I'd suggest to add links to the python documentation. I like how you introduce things simply but for example you could introduce lists very simply and add a link to see the things you can do with them out of the box. Just a suggestion... I like the simple approach. Keep it up. P.s. maybe installation instructions for Mac... I assume Linux users can figure it out?... 
Works fine for me, also no one is going to try and decipher that error message when you format it like that.
&gt;Starting with installation Good &gt;Set path environment variable Good &gt;Shift+right click =&gt; open command window here my nigga!!
Think of Python 2.7 as Windows XP. It was good and people don't want to let go of the familiar. Eventually they'll need to switch one way or the other. I come from the Delphi community, where the deep, deep entrenchment was at least as deep but towards ideas rather than versions. There they hate/fear/are secretly jealous of things such as automatic memory management, the web, DVCS, Linux, the Internet, multiprocessing vs. multithreading, type inference (one user even insisted it was "impossible"), the post-PC era, Linux, web-based forums (most still insist on using USENET), and not having to type all of your class's method headers twice. :-) Oh, and real non-Delphi-specific databases. Some users still even swear by Paradox. I thought I was going to leave all that behind and then I discovered the 2.7 vs. 3.x divide like you did. :-( I'm just going with 3.x and trusting Guido and Raymond Hettinger. I feel like I just left Amish country and now I just want to choose cutting-edge everything. :-) 
I think that's its long-winded way of saying "there's a bug". :-) 
FOUND IT!!!! C:\ :)
I think that's highly dependent on being able to install it at all.
You can follow the tutorial here: http://goo.gl/MBdX7E If you do not have pip installed, you can install it with "easy_install pip". 
Did you install the dependencies? Start the launcher on command line (autokey-gtk or autokey-qt) with the -l option for logging information.
Does anybody know why pylint complains about a single letter variable (e.g. n, i, or f)? Also, how do you get indicate a variable is unused. They claim _var is marked as unused, but it still creates messages.
Looks okay, the only thing it complains about is appindicator not being installed, but that's an optional dep. Anyway may have been a problem with my old system config, because this install seems to be working okay.
Unfortunately pip is seldom setup correctly on pypi to install binary dependencies (if ever).
not write a music program. i need to do a presentation on python and music. explain algorithms, not write them :)
Also, pip is not going to help you install R, VTK, Julia, Spark, and other stuff that's in the DARPA bag o' goodies. (Not that I fault them for it - it's well outside the scope of pip.)
It says in the post that only static sites work, not dynamic. POST only works for dynamic sites.
[Yes!](http://i.imgur.com/YXvqrga.gif)
&gt;what? where? GARCH is not available in any libraries. BIRCH, CHAID, and many others is not available in scikit-learn. No efficient implementation of Associative Learning Algorithms with cython backing for speed.
You don't seem to understand how globals work in python, and by extension you probably don't understand how variable scope works. You don't declare a variable as a global before you instantiate it in the main namespace, you call "global" inside your function to tell your function that you are referencing the variable in the main namespace and not the function scope. Here's what you are doing: global variable variable = 'variable contents' Here's how globals actually work: variable = 'contents in main namespace' def test1(): variable = 'local scope' return variable def test2(): global variable variable = 'modified global variable' return variable print variable &gt; 'contents in main namespace' print test1() &gt; 'local scope' print variable &gt; 'contents in main namespace' print test2() &gt; 'modified global variable' print variable &gt; 'modified global variable' Does that make sense? "global" just tells my function to use the version of the variable that's already been defined in the main namespace. This actually works both ways: you can define a global variable inside of a function, and then it will be accessible outside the function. def test3(): global newvar newvar = "new variable!" return None # just to be explicit newvar &gt; error test3() newvar &gt;"new variable!" You aren't declaring the "undesirable" variable as a global inside grabPage, but since you didn't define a local variable with that name in the function, the interpreter moves up a level in scope to find it and sees it in the main namespace. Try commenting out the 9th line of your code where you assert `global undesirables` and you'll see your code still functions just fine. Generally, if you can avoid using globals in python (you probably can), then you probably should. Check out [this stackoverflow discussion](http://stackoverflow.com/questions/4693120/use-of-global-keyword-in-python) for more on how globals work in python. Also, your isValidLink function is silliness. You should learn regular expressions. But still, you could even get away with using an `any()` statement and a list comprehension, something like: exclusionTerms = ['wikiquote',wiktionary','wikiveristy'] if any([term in url for term in exclusionTerms]): print 'bad url' There're other issues in your code worth commenting on, but it's 4am. Congratulations on your project, but you clearly still have a lot of the basics of the language to learn. I'd wait a bit before authoring tutorial-style blog posts for how to do things in python, because frankly you're doing it wrong.
Thanks, I'll hopefully do a getting started guide for the Mac and Ubuntu at some point. 
Have you tried running your project under Python 3.3, not 3.4? If it works for both 3.3 and 3.4, then it's more likely a PyCharm issue, please report it to [PyCharm issue tracker](http://youtrack.jetbrains.com/issues/PY).
How did you install Sikuli? I installed Sikuli with Debian's apt and can't get it to start. It freezes at the splash screen.
Was not that detailed two weeks ago when I originally posted, but thanks. 
Oh look, its this idea... again. I started one on GitHub, moderators promised to add it to the sidebar, and didn't. So I gave up. There was a distinct lack of interest in contributing (it got 1 pull request) so clearly its not an important issue to anyone except me and the other person. Another way to look at it is, redditors don't want yet another site to go to, its easier to macro cut/paste "Emacs!" "Vim!" "Sumbitch Text 2/3" "Hey, am I the only guy using Eric?" to every dupe self-post that comes in 2-3 times a day than to resolve the issue once and for all. I tried other ways at looking at the information to make it appeal, but it wasn't even getting hits. 
Very much so, they're entirely keen for you to download all of wikipedia as long as it's in the form of the regularly updated, compressed, single files. It also means that you get to feed all your data in from your hard drive and it'll be unbelievably quick (I hesitate to even imagine how long scraping wiki takes).
&gt; Why do emacs and vim always have to come into the conversation? Because Python doesn't need an IDE. IDE's are great for compiled languages, because those languages need infrastructure around successfully compiling the application, linking in third-party libraries, etc. Especially Java, where 99% of the code is boilerplate nonsense you're forced to type in by hand - so an IDE can take that pain away. They also add functionality like introspection which is not intrinsically part of the targetted language. Python doesn't have these problems, therefore doesn't need 8-way 64Gb systems to run humungous applications to supply that functionality. Also, on modern Unix systems, you get both Vim and Emacs out of the box. Both are extensible with turing-complete languages of their own (lisp, vimscript, perl, python, lua, ruby, tcl) to provide functionality beyond superior text editing ability, to the point they can both replace any IDE features you think you might need. Finally: lets show some kids with raspberry pi's how to implement the sieve of eratosthenes - my student can use Vim, you can [attempt to] show yours PyCharm. Don't get me wrong, IDE's do have a place - for example if I were working in part of a larger development project and everyone else was using some IDE and all the team meetings, processes, etc. were based around that - it may be necessary for team cohesion to fit in (Python can be embedded, so the other coders aren't necessarily doing Python). Also, if you have come from a background where the OS supplied editor is not the remarkably powerful vi but instead one with a limit of 32k lines, single file, and not even line ending support, where keybinds are limited to what is physically existent on a keyboard (i.e. home/end/pgup/pgdn/arrows) and are hardcoded/unchangable - well you might have become used to searching for a better alternative like an IDE and its now muscle memory "programming == need IDE". Welcome to a wider world! 
Also the ecosystem is different, in the Ruby camp they move fast and change often (frameworks, libraries), on the other side at Python world things are more stable and decisions are given a little more thought. Just a matter of choice no pros o cons to either side.
That's all well and good (I use a text editor, myself), but it seems like the topic of this discussion is IDEs, specifically.
What have you tried? Do you want me to search Google for you?
Perhaps I just like to use the term meta. :) You're right though. I'll make the change.
I'll bite. Why are multiple cursors a symptom of something being "wrong"? 
Not when my VPN's playing up and I can't get to YouTube, it doesn't! Thanks anyway, will persevere.
Well, don't throw brick at me, but I currently enjoyed myself working with Python Tools for Visual Studio http://pytools.codeplex.com/
It's not going to run any embedded code, if that's what you're asking. You will be able to see it though. http://shaunzinck.tumblr.com/post/3408456578/using-pdfminer-to-dissect-malicious-pdfs The Javascript put in PDFs normally target Adobe Reader, because that's what most people use. If you use something like Foxit you're much less likely to become infected. If you use Sumatra, it's impossible because Sumatra does not support Javascript embedded in PDFs and therefore it can't execute. PDF viruses are trivial to circumvent: don't use a PDF reader that supports Javascript. If it does, turn it off. You can turn it off in Reader/Acrobat but if you're going to do that you may as well install a different PDF viewer because Reader is a slow, bloated piece of shit.
Not really. His script does an anlysis on a *single page*.. For this purpose, scraping a single a page is perfectly fine and makes much more sense than downloading the entire data dump. It's much, much less interesting than performing a an analysis over the entire corpus of articles, but OP is absolutely not putting *unnecessary strain* on wikipedia with his tool.
Have you checked to see if a version of Python is already bundled with ELinOS on the device you're using? There's a good chance it is. If not SysGo probably has a precompiled target binary they can provide you.
Or the API, which is really simple to use. Or one of the existing python mediawiki libraries of course...
Try it and see. Write some code that'll make a new file on your desktop into a pdf, then open it and see what happens.
They haven't updated the wiki article file since October.
https://m.mediawiki.org/wiki/API
when you need multiple cursors when editing python code that usually means you have repeated code... I agree having multiple cursors in a text editor is handy sometimes when editing text or data files .. but for that I use a text editor (sublime).. I use pycharm only for python code and web templates
Did you try Foxit for Linux?
If you can, get another source for your PDFs. Archive.org just scans the book and makes a pdf of the images. This is inherently retarded and expensive in both space and RAM. Like, 100+MB pdfs are common. Use an EPUB or DJVU version if you can, but don't blame the program because you cherry picked a terrible file example.
&gt;when you need multiple cursors when editing python code that usually means you have repeated code I'm going to have to add an "in your experience" to that generalization :) They have tons of other uses outside of editing "duplicated code." I use them all the time for general code formatting. They're great for changing stuff in a dict/list literals -- all kinds of stuff. It's just another tool in the toolbox. I don't always need it, but when I do, I'm glad that its there (and miss it when I don't have it). 
The [latest](http://dumps.wikimedia.org/enwiki/latest/) dump was ~~Sunday~~ yesterday
&gt;pages-articles.xml.bz2 â€“ Current revisions only, no talk or user pages. (This is probably the one you want. The size of the 2 October 2013 dump is approximately 9.5 GB compressed, 44 GB uncompressed). 
And the [one from *yesterday*](http://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2) was 9.8GB (watch out, direct link to 9.8GB file!). The fact they're telling you the size of an older dump doesn't mean they haven't been doing it ever since.
Interesting to see that there is more than one Python DB driver for Firebird. I had come across fbd, another Python Firebird driver, tried it and blogged about it here: http://jugad2.blogspot.in/2014/01/by-vasudev-ram-pdf-firebird-is-cross.html fbd is here: https://pypi.python.org/pypi/fdb 
I have created this library out of frustration with all the available tag reading libraries. None of them support python 2 and python 3 in a single module. I've tried to keep it all very short and simple so you can easily include tinytag into your project. Admittedly, not many applications are required to run in both python 2 and 3, but maybe this is what you are looking for, so tell me what you think!
well, not talking about them is about like making a blog post about python web frameworks that doesn't even mention django or flask
It's the same issue with Word vs LibreOffice. If something doesn't work with Acrobat it doesn't get released, so everything appears to work with Acrobat. There are definitely still PDFs that most of the alternatives can't handle. Forms are usually a trainwreck for example.
Heroku is quite awesome. My site is based on flask and deployed onto heroku: https://github.com/Siddhartha90/Webpage/
+1 for thinking like an engineer. "Does it do this?" Who knows! Let's test! 
&gt;If you use Sumatra, it's impossible because Sumatra does not support Javascript embedded in PDFs and therefore it can't execute. It's not *impossible* for there to be an exploit just because Javascript is disabled. It's much less likely, but still possible. For example, the reader could have a buffer overflow that's triggered when certain characters or images are embedded. Javascript in PDFs isn't inherently insecure; it's just that PDF readers with scripting engines greatly increase the potential surface area for exploitation.
Videos are available for download as a member on CodingForEntrepreneurs.com... It's $25/mo to support infrastructure and content development. The YouTube videos are available on there as well. 
I've never used it, but you might find [pyo](https://code.google.com/p/pyo/) useful. 
So I've done some programming in the past, I'm a syadmin at heart but I've been meaning to *actually* learn Python (vs. dicking around with it and making horrid hacky bash-like scripts), and coincidentally, I've dedicated the next 3 days of my non-redditing time to stuff myself with as much Python goodness as I possibly can. I'll run through it and let you know how it works from my point of view. The Getting Started was a little basic for me but I'm sure I'll appreciate this approach once I start hitting the parts I don't yet understand. EDIT: I worked through the chapters, I like the style. I'd work through more chapters.
Evince is very bloated and very slow. Okular has by far the best performance. 
What other readers did you try????
I can't select 720p for video 3 and futher. Is this something on my end? Coding videos at 320p are not watchable to me.
evince, xpdf, kpdf
It's called Virtualenv.
Because the module that he is asking for is a python module.
You can't interface without using a microcontroller due to the fact that the hue has no USB or serial communication. You need to use I2c to communicate which you can only do with a microcontroller. You can write a python script to communicate if you have a raspberry pi though. Just write one out to use the gpio pins for I2c.
acrobat supports an insane amount of things inside PDFs,including code, 3d stuff, actually treating the pdf as like a 'folder' for other things to be stored in, etc Most pdfs readers except for acrobat just render the PDF and ignore the more exotic features, i dont think i've ever seen a pdf with javascript in it, or maybe i have not noticed
I know I have, from the MS website. Was an interactive PDF on licensing.
Oh, OK. Sorry
Running scripts in more or less anything increases the surface area for attack. See also: web browsers
Kind of an interesting module that I feel can be useful; however, it feels like there is too much set up required for common use in a company. For personal use, it seems nice to be able to create your own Excel functions.
That's nice. I usually use eyeD3 on my scripts, but it's only for MP3 files and doesn't work with Python 3. Next time I will try to use tinytag.
Looks like Windows might not be supported. From the [installation page](https://github.com/knipknap/exscript/wiki/Installation-Guide): "Any Linux/Unix should work. Exscript is tested on Ubuntu, AIX, and Solaris."
There's also DataNitro, https://datanitro.com/
But it only works in Windows ....
No. I pretty much stick with what's available in my distro's repos.
Sublime has all of those as well (via packages), so I'd say its as much an IDE as Eclipse.
Well, better than installing Windows.
Works a lot better in programming, because you can (usually) experiment without permanently breaking anything. Doesn't work quite so well with, say, civil engineering.
On a 4(?) year old i7 920 desktop machine w 6GB of RAM, it was taking literally 10 minutes to load a medium-sized Django project at startup. Yeah it was not horrendous to use once it loaded, but compared to clicking the Sublime icon and being able to work within a few milliseconds it was rubbish. I haven't kept up with recent versions as my upgrade-window has expired and I've since switched away.
interesting. thanks OP
&gt; when you need multiple cursors when editing python code that usually means you have repeated code Yes, like variable names, for example, or maybe """ docstrings, or somewhere where you've imported f from x.y and you want to switch all those functions explicitly call x.y.f, or maybe you'd like to add a decorator before a bunch of functions. In the last case, you can cmd-D to find the next one, and cmd-K to skip the latest selection - so lets say you need to add a decorator to most but not all functions in a file, you can select any random "def " statement, cmd-D, cmd-K to select the ones you want very quickly and then edit them all at once. Or maybe you have a list separated by commas, and you'd like to put each item on its own line. Do commas count as repeating code? Or maybe you want to find all the times you declare a function that takes a request param, and change them all at once. Find em with a regex, then press cmd-left (or home), type @my_decorator, hit enter, hit escape. Much easier than writing a \1 based regex replacement
&gt; (Afterword rant: I'm not going to listen to anyone who tries to tell me to use something else - I've tried other Python IDEs and they're no better on the mysterious-goop-between-me-and-my-code front, and I have extraneous reasons for wanting to use PyDev in particular rather than just a text editor and a terminal window. In particular, do not mention Vim or Emacs; I detest both of these and am tired of seeing them mentioned purely because a particular breed of programmer is enamoured of tools rooted in the technological limitations of the 1980s.) This was literally **more** than half your post so I'll just peace out now *byee*
Is "hydrate" a Beautiful Soup jargon term for going from the scraped data as objects to human parseable content? Or did you make that up? (Is the metaphor that this is instant soup you have to add water to?) I'm curious: What's your purpose in getting the hours in one list like this?
&gt;I detest both of these and am tired of seeing them mentioned purely because a particular breed of programmer is enamoured of tools rooted in the technological limitations of the 1980s. Protip: When asking advice of people, don't intentionally insult them in the same breath.
It's a violation of the Unix philosophy of "do one thing and do it well". As a concrete example, we ran into issues at work a few years ago where Apache kept segfaulting because of a misconfiguration for APC in `php.ini`. A misconfiguration of your app should *never* bring down the entire webserver that's serving a variety of apps.
If want to disassemble your keyboard and send me pics of the PCB and the way it's wired, I can try and point you in the right direction. I only have the Apex Raw and I don't have RGB LEDs. 
I have to scrape extremely dirty HTML. Can BeautifulSoup handle multiple stacked body elements in one document? 
Doctrine is about the only thing I miss from PHP
[gnuradio](http://gnuradio.org/redmine/projects/gnuradio/wiki) 
Use PyCharm. It's free, at least try it.
I downloaded the community (free) edition on Ubuntu. The UI was horrible. The fonts looked all wrong. The screenshots are on a mac, where it looks good but I couldnt stand it on ubuntu.
BeautifulSoup with the default Python StdLib parser probably can't (I highly doubt it would at least, probably would but with horrendous results), but using it with (https://github.com/html5lib/html5lib-python)[html5lib] or (http://lxml.de/)[lxml] probably would work just fine, I'd guess.
it's super crazy easy to use it. Lots of conventions are based on common use cases moreso than perfect consistency and there tend to be multiple ways of doing everything. for example in the following text you, can parse several ways: &lt;html&gt; &lt;div class="container"&gt; &lt;div class="productbox"&gt; &lt;div class="pricebox"&gt; &lt;span&gt;&lt;p id="price" class="money"&gt;12.31&lt;/p&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/html&gt; Lets get a soup object from bs4 import BeautifulSoup s = BeautifulSoup( htmlText ) Now we can just travel down the tree manually. When you grab an element as a calss attribute, it is just searching for only the first result. The final ".text" attribute grabs the contents of the text element. print( s.div.div.div.span.p.text ) &gt;&gt; 12.31 Alternatively we can search for the correct class or id priceP= s.find(class_="money") priceP2= s.find(id="price") spanElement = s.find("span") priceBox = s.find(class_="pricebox") print( priceP.text ) print( priceP2.text ) print( spanElement.p.text ) print( priceBox.span.p.text ) All of these print statements should print the price. So yes, there's a million ways to do everyting and this is a good thing. I didn't use the `find_all` method which returns a list of soup objects and is quite useful (you can see it in my original script). Also, notice that most attributes are available as python variables (ie, `find(id="price)` ) but class is a reserved word so beautiful soup uses `class_` .
Try [pyquery](https://pypi.python.org/pypi/pyquery), it's even nicer.
Forms embedded in PDFs are slightly more common, but afaik they dont use javascript (sometimes they do to enhance the form itself but standalone it doesn't require it)
I wrote an article about that: https://github.com/albertz/music-player/blob/master/WhatIsAMusicPlayer.md That (my music player) was written in Python: http://albertz.github.io/music-player/ :) Maybe the core Python module (just the player engine) is useful for you: https://github.com/albertz/music-player-core 
My problem is that body elements seem to be handled differently. For example, bs.body.body doesn't return the inner body, like I would expect. This is with the default parser and html5lib. bs.body returns the outer body correctly, but I only care for the inner body. Edit: len(bs.find_all("body")) is 1 where there is &lt;body&gt;...&lt;body&gt;...&lt;/body&gt;&lt;/body&gt; in the document.
It had highlighting on cells (mouse over) and drop-down menus, I'll try and find it again and open it with pdfminer, how would that be done without Javascript?
Fair enough, it's worth a shot though it works well under Linux. I've not used Reader on Linux before, only Windows. On Windows at least it's about the slowest PDF reader out there. 
little bit of both. I wanted to use beautiful soup. Also, I'll probably set up a cron task to keep my website up to date since, the hours are posted every quarter. Also, I think [xkcd 974](http://xkcd.com/974/) describes exactly what I'm doing here.
[Image](http://imgs.xkcd.com/comics/the_general_problem.png) **Title:** The General Problem **Title-text:** I find that when someone's taking time to do something right in the present, they're a perfectionist with no ability to prioritize, whereas when someone took time to do something right in the past, they're a master artisan of great foresight. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=974#Explanation) **Stats:** This comic has been referenced 8 time(s), representing 0.07% of referenced xkcds. --- ^[Questions/Problems](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Website](http://xkcdref.info/statistics/) ^| ^[StopReplying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me)
+1 for lxml. BeautifulSoup really gets more love than it deserves when lxml is far more capable, in my opinion.
I don't doubt that something is wrong with the HTML. My problem is that there is not a single thing wrong, but many, many different things. I saw stuff like this: &lt;div&gt; &lt;br&gt; &lt;script&gt;...&lt;/script&gt; &lt;br&gt; &lt;/div&gt; &lt;html&gt; ... &lt;body&gt; ... &lt;body&gt; ... &lt;/body&gt; &lt;body&gt; &lt;/body&gt; &lt;/body&gt; These documents have the ugliest HTML I have ever seen. I just had an idea to preprocess this using regular expressions. First get the outer body element, rename it and then use BeautifulSoup to get to the inner body elements. I'd still like to use the text extraction facilities of BS, because they will handle more than I can find on my own.
Thanks. Will be putting up more chapters soon. There's a subscribe form in the sidebar if you want an email notification when new chapters go live. :)
Dropdown menus can be done in forms. Though what you're talking about probably is indeed javascript. I thought you meant more basic, fillable fields.
I've gotten great results from scrapy. 
Didn't know about `html2text`, that's a pretty cool vim trick. You could probably do the rest with `awk`.
Thank you, this looks interesting.
Agreed. In the few times I have tried Beautiful Soup, it has failed tremendously. I have yet to come come across a case when it was not quicker to roll my own parser in pure python. I seem to be an edge case rather than the norm, but I just can't see why BS gets all the love it doesn't seem to deserve.
So - I think it would be fairly trivial to get python to compile for PPC, the challenge I think will be the dependencies and 3rd party packages such as those found on PyPI. What happens when you try to compile Python now? What warnings do you see?
Same here. I'm a huge fan of their xpaths submodule.
I prefer BeautifulSoup because I prefer pure-Python libraries. But if compiling isn't too difficult for your usage than lxml is definitely very useful.
Emacs. 
This is a very good news! Thank you RedHat. :)
I think the reason for that is that it was created before lxml and didn't require installing binaries (back when packaging was even worse). Then at some point about two or three years ago the author tried to support Python3, failed miserably due to unicode issues, decided to rebuild it on top of lxml to fix this, but then basically told everyone to just use lxml directly right on the official website. I'm not sure how and why BeautifulSoup was resurrected and what's the point of it now.
Only if you want broken pinkies.
This is completely OT -.-"
There was a ton of conversation on this topic [a while ago](http://www.reddit.com/r/Python/comments/1kr64w/vim_as_python_code_editor/). Check out [Unite.vim](http://bling.github.io//blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need/) for general lists of things like files, buffers, code/function outlines, yank history, etc. I used to use [YouCompleteMe](https://github.com/Valloric/YouCompleteMe) but I switched to [Neocomplete](https://github.com/Shougo/neocomplete.vim) after having some wierd issues in Mac. [Syntastic](https://github.com/scrooloose/syntastic) is a must have IMO. Very handy for quickly spotting errors. [Jedi-vim](https://github.com/davidhalter/jedi-vim) is pretty good. On top of this, i have some custom mappings set up specifically for my workflow. You'll start doing these as you go along. 
Jedi Vim was suggested me some time ago and I want to check it for sure. I think I will give it a try. 
&gt; https://github.com/nvie/vim-flake8 This seems to be a real life jacket. Thanks man! :)
[This is where I found mine.](https://github.com/spf13/spf13-vim) I love it, and don't think I could be nearly as efficient without it. Plus, the colours are beautiful.
Never heard before about spf13-vim. Very good tip!
To be fair, you can use evil-mode to avoid that.
I've been using vim for a long time now. I think I started in ~1995 when the kernel hackers I was working with made fun of me for wanting to install Emacs on some of our test machines. From time to time, I lose faith with the master religion, and I go investigate some heretic offshoot -- I've spent some time using Sublime in Vintage mode, and I had a wild and heady summer using PyCharm with the IDEAVim plugin. I keep finding my way back into the fold, though, like some lapsed Catholic returned to the confessional, full of guilt and misgivings. Most recently [Jeff Knupp wrote a blog](http://www.jeffknupp.com/blog/2013/12/04/my-development-environment-for-python/) that rescued me from Sublime Text's heresy. It's not the first time I've fooled around with Sublime and it might not be the last, but I am back on vim after that blog. I really liked what PyCharm had to offer in terms of code folding and object detection. Vim's code folding is not as easy to use, and I've tried to make ctags + one of the tag browser plugins work for object detection/outlining, but had little success.
I did. I didn't really like it all that much, and I'm hoping to land a job where I'll be using Eclipse so there's advantages to using PyDev specifically rather than something else providing the same functionality.
I discuss this problem at [my blog](http://programmingpraxis.com/2011/08/12/word-breaks/).
Indeed this is what I am doing against a word list. It takes a few minutes but anyhow, this is just a one time thing when I create a .py file that defines the classes. 
Is there an equivalent way to deal with conplex json objects? I'm working with the graph api and starting to lose my damn mind
Well you need a list of valid words and scores for each tile. Then you just check which words are valid for the input tiles and compute the score. Can't really make it simpler than that other than writing the code for you.
&gt; I'm not doing that. The question is, do you have your root added to the PYTHONPATH? If you do, then you can just run your test modules with F9. I mean, Habnabit's reasons against that don't apply then, as long as you do absolute imports. Also, Pydev needs to be told to use pytest. If you did that, you can add debug printing to pytest itself and see what's going wrong.
Sure, and you can use `vile` if you want to do things the other way 'round. But why bother?
OK, care to explain why you can't change it if you are writing the API?
Thanks!
List or tuple, dictionary doesn't really make sense here. Also you will probably have a shit ton of words so you want to read them in from a file.
In terms of generators, do you mean a program that generates words, or an AI like program that finds the best point value word to play on the board?
Here's a really simple, hacky way to do it: #!/usr/bin/env python3 import sys words = set(open('/usr/share/dict/words').read().split('\n')) allowed_single_character_words = {'a'} def un_join(s): if not len(s): return [[]] found = [] for i in range(1, len(s) + 1): if (i &gt; 1 or s[0] in allowed_single_character_words) and s[:i] in words: for suffix_words in un_join(s[i:]): found.append([ s[:i] ] + suffix_words) return found broken = un_join(sys.argv[1]) print(broken) print(''.join(map(lambda w: w[0].upper() + w[1:], min(broken, key=len)))) $ python3 splitjoinedwords.py uploadfile [['up', 'lo', 'ad', 'file'], ['up', 'load', 'file'], ['upload', 'file']] UploadFile $ python3 splitjoinedwords.py operatingsystem [['opera', 'ting', 'system'], ['operating', 'system']] OperatingSystem It picks the possibility with the least words.
Thanks. Alas, it's not that easy. When going through bs.body.children and looking at child.name I don't see a body anywhere. I might have to do some pre-processing with regular expressions to get to all separate body elements and then try to scrape those with BS. 
What would be good for scraping letters from a flash-based word puzzle game?
Test against number of results for each split in google, highest wins. ("Superb Owl" = 557000, "Super Bowl" = 149000000) (probably not the most elegant/trustworthy solution)
But just that a result is less common doesn't mean it's certainly one you don't want. I think there's no way to solve this problem correctly every time. 
Oh yea true dict is best for tiles but makes no sense for the word list.
Yes, had come across all these three earlier - DataNitro, pyxll and pyvot: http://jugad2.blogspot.in/2012/08/3-ways-to-use-python-in-excel.html But IIRC pyxll was not from Enthought at that time, and it seems to be now. 
Right, it did seem like a lot of setup. 
I've always been frustrated how difficult it is in python to perform a simple key pressed command. Like pressing the space bar to pause output. You actually need a special library to do this. And a different library if you are using Windows/Linux.
&gt; I have to scrape extremely dirty HTML BeautifulSoup works up to a point, but falls down with *really* dirty HTML. We switched to using [lxml](http://lxml.de/) instead, which handles dirty HTML much better.
urls are case insensitive, so you'll have to insert a special separator character to delimit word boundaries. the underscore character _ is conventionally used for this. if you are not in control of the urls of the REST api then I would recommend a different approach. parsing for word boundaries using some sort of natural language processing is doable but way too much work for what you need. you might want to use somewhat more generic classes and just include the url_name as a field on those classes. 
I would love for functions to be typed like this. What the hell does this function return? Is it a number? A string? An address? A object of some sort? Nothing?
well, pycharm has refactor tools for most things you mention... 
Yeah, you're fucked if they actually meant Superb Owl. 
nice and good, just a little nitpick, `open` and `close` are python key words, you may want rename the variables 
the interpreter can already use any indent level you like, as long as its consistent. the community has settled on 4 spaces as a convention because the majority of us prefer it. feel free to do what you want though. better anonymous functions might be handy in some circumstances but in my experience basically everything you might do with an anonymous function is either better handled with a context manager (i.e. the "with" statement) or a decorator or annotation. 
Guido has actually advocated removing lambdas entirely. he would have already if the community agreed to it.
Compilation support, optional static typing, curly braces instead of whitespaces
Get rid of the GIL
- better lambdas - pep8 would specify 2 spaces rather than 4 - complete scrub of the standard library, tidy up module/function names - minor syntax changes, remove the need for a colon at the end of lines - take a good stab at an easy, in-built concurrency model. Something like clojures core.async or goroutines. I've no idea how this would play out in practice.
Make building a stand alone executable part of the spec. The two main projects that do it are hacks
&gt; 2 spaces isn't pep8 compliant. No, but if you're already using 2 spaces, why bother changing it? For new projects, are there really any reasons to use 2 spaces instead of 4? If using 2 instead of 4 stops you from reaching the 80 char limit in pep8, you're indenting too much.
braces? you're not serious are you? go into your Python interpreter and type in this: &gt;&gt;&gt; from __future__ import braces
Backward compatibility for Python 3.x.
I had a pleasant experience with BeautifulSoup recently as well! Was scraping my school's course database and there were inconsistencies throughout the webpage, but BeautifulSoup's find feature made things soooo much easier. 
URLs are often case sensitive on linux boxes.
This is actually a really great point. Superb owl may be rarely used but it is not inconceivable particularly as just an example of ambiguous splits. You could use google hits to make probabilistic guesses, but really the best way is to use sentence and paragraph context cues. For instance if "football" appears in the same paragraph then "superbowl" it is. If "cereal" appears then "super bowl" may be more likely. If "goofy redditor" appears then it is clearly "superb owl".
There is only one thing I want. A *do...while* clause.
- Compile to native code - Combine 2 and 3 into one version moving forward 
Brackets or some way to end blocks ( {} or begin/end ) and proper monkey patching (like let me add functions to built in stuff, like how about adding .join to the list instead of doing ",".join(list) )
JIT like Julia. More functional. Tail recursion optimization. Static analysis for speed gains.
And the ability to optionally force types for functions you write. I miss that part of error checking. 
datetime should die in a fire. That module hates everyone and everything.
make doing things in parallel easier.
Fair enough. I'm just saying that the majority of people are using 4 spaces. There's nothing forcing you to comply to pep8.
mostly because they totally suck in python. 
By changing/ cleaning up modules would a wrapper for backwards compatibility be needed?
Your "answer" didn't really address the question (saying 'don't do that' isn't an answer). There is no obligation to justify approach just because you don't like the way they do it.. 
I hate... from time import time so I use... import time t0 = time.time()
[PyPy is working on this](http://pypy.org/tmdonate.html).
Removal of the GIL, so that we can have a non-retarded threading model.
&gt; pep8 would specify 2 spaces rather than 4 Nope. I've seen one and two spaced Python code. I don't like it. &gt; complete scrub of the standard library, tidy up module/function names Nope. It works. Upgrading from Python 2.3 to 2.7 is easy and I've done it more than once. &gt; minor syntax changes, remove the need for a colon at the end of lines Nope. It's going to get deprecated at some point. Again, why break code for no gain?
I'd love to see both of these features. I think the team working on PyPy is doing great work for better performance Python, but its still never going to reach the level of native code. I've always wondered what kind of performance you could get from a Python interpreter that targeted LLVM instead of the standard Python bytecodes. you could then native compile your .pyc files with an llvm compiler. 
The curses module is not cross-platform, therefore it doesn't count.
A good, consistent, Pythonic, cross-platform, batteries-included graphic library. Tkinter is the closest, but the execution loop makes it challenging to do advanced stuff, and the adherence to Tk makes it challenging for a beginner to do basic stuff. I appreciate it's not easy to design and write such a thing, but I can still wish. Edit to add why: I have slapped together a couple of useful scripts and shared them with coworkers and they just work. Python is great like that. However, they've got to either run in a terminal window or I have to refactor and rework everything to work with Tkinter. Something as simple as a graphical input box and windowed text output is suddenly much more work. Asking someone to download, (sometimes compile) and install a large graphics library is a non-starter. 
What do you mean? Can't you just... ./script.py ...?
The NLTK has some tools for this, but It's not a trivial problem in terms of cpu cycles, and I'd argue you're going WAY overboard using an automating solution here. [edit] just read you're not doing this in real time. Ok, here's the solution more or less. You use bigram probabilities calculated against some corpus to locate split points. So if you have "superbowl", your program cycles through "s uperbowl" and gives you the likelyhood that the word "s" appears before the word "uperbowl". Likewise it goes through the list "su, perbowl" "sup, erbowl". If you have words that split more than two places that's fine, just recursively perform the function on the section produced on the right hand side of the past result. Basically you will get a whole bunch of p("superb owl") = 0.012, p("super bowl") = 0.167... etc. You pick the one that has the highest probability. This method has been found to work VERY well. Like I say, it will take up to a few seconds per string, so you would not want to have this done in your traffic router for example, but if you're just writing a script to name your .py files or whatever as a fun exercise this would be the current standard way of doing it. Source: Natural Language processing class
six isn't a third language. its Python. you can use it to make python 2.x source code compatible with Python 3 interpreter. 
They can have more than one *argument*, but they're limited to computing one *expression*.
I have yet to run into a situation where I needed a do while loop.
Oh. Sure enough, from http://docs.python.org/2/library/curses.html : &gt;*Platforms:* Unix
You can't assume that `/usr/share/dict/words` exists or is even a well-formed path, since Python runs on Windows. Unfortunately, if you are on Windows, you basically have to install aspell or something equivalent.
the post /u/subleq replied to was edited. it originally said "lambdas that take more than one argument". that was changed later to say "more than one expression". 
Ach, OK, that makes sense. Thanks!
The NLTK isn't THAT scary. I'd say it's more along the lines of taking the hummer to work instead of the civic. You're wasting a lot of gas and you won't find parking, but you can brag to the coworkers and it's kind of fun :)
* Remove the distinction between expressions and statements. * Eliminate the `global/nonlocal` keywords. Instead, add an assignment operator: `x := y` would assign a new value to an *existing* variable `x`. * `def f(x)(y): ...` would save me effort defining some decorators. * Optional typing. This can be done with annotations in Python3, but if I am not mistaken you need decorators to enforce them. That's annoying and promotes fragmentation. * Add back argument deconstruction to function definitions to Python3. I don't understand why they removed it in the first place. 
you can do that and it will work if every dependency in script.py is already installed and on the Python Path. a standalone executable would have to bundle these dependencies first such that they would be installed (if needed) and placed on the Path before executing the script. its easy if your user is a programmer and has no problem using pip and virtualenv and all the tools we take for granted. its hard if your user is non-technical and needs an executable they can just double click on from their desktop GUI.
That sounds horrible. That's a workaround, not backwards compatibility.
First obvious candidate: introduce an explicit end-of-block delimiter and get rid of the godawful `pass`. Once that's settled, indentation can be 1) optional (which is a good or a bad thing depending on how you look at it), and 2) automated (like in every other goddamn programming language). Honorable mentions go to: * Mutable vs. immutable types. Bad design decision, especially in combination with dynamic typing discipline. Now whether a statement has side effects or not can depend on the type of the runtime operands, and because it's all implicit, reasoning about code can be tricky. Easily the #1 source of nasty gotchas and obscure bugs, and against about half the rules in Zen of Python even. * Tuple syntax. Come to think of it, tuples in general. In a typed language, a 2-tuple and a 3-tuple are distinct types, so unlike lists (which are of variable length, to be determined at runtime), a tuple has a fixed number of elements. But Python has dynamic typing, so this distinction doesn't make a lot of sense: there are no compile-time vs. runtime types, so lists and tuples boil down to the same thing. Python, however, has mutable and immutable lists, and calls the mutable ones "lists" and the immutable ones "tuples". * Lambdas. The notion that 'if it doesn't fit on one line, it shouldn't be anonymous anyway' is stupid and belittling and robs the language of expressive power. Anyone who has ever designed an EDSL in, say, Haskell, Lisp, ML, or even C# or Perl, will know what I'm talking about. Even JavaScript, the silly little language one programmer cooked up in two weeks during the dark ages, beats Python in terms of expressiveness here. * Proper scope. Python doesn't do scope right. I don't know why, but the result is a highly confusing mess full of edge cases. Another surprising issue where Python gets kicked across the room by silly little JavaScript, where we can at least get closures without worries. * Strings. A string is a sequence of characters, and characters and bytes are not the same thing. How the string is represented in memory is irrelevant, as long as it transparently behaves like a sequence of characters. Python's bytestrings are not strings in any meaningful way, they are sequences of bytes - binary blobs, that is. Syntax that suggests otherwise is wrong and a bad influence on new programmers. "C/C++/PHP/Perl/{insert language} does the same" is not a valid excuse. Not for a language that sets out to do things right. * Those members of the Python community who take everything GvR says without the required grain of salt. Seriously, the man is reasonable and has some great ideas, plus a decent enough sense of humor, but too many people take whatever he says as gospel.
+/u/CompileBot python --include-errors from __future__ import braces
Personally, I feel that Ruby has surpassed Python in a thousand very minor ways. Rather than list these individually, I'll just say I believe &gt;&gt;&gt; import ruby &gt;&gt;&gt; print(ruby) python++ As this is the Python subreddit, what I will say is feel free to disagree. Instead, I'd prefer to celebrate Python's many, excellent features in the early years, that no single competitor offered at the time: * Dynamic and concise like Perl * But strongly typed like Java * And more readable than either * List slices! * Ranges! * Tuples! * Dictionaries! * Lambdas! * Rest arguments! * Foreach loops * List comprehensions! * Strings -&gt; chars very much like Lists -&gt; elements. Languages that don't do this tend to be a pain. * Shebangs! * Modulinos! Write a library and command line script all in one tiny code file! Not best practice for large projects, but invaluable for prototyping nonetheless. * Interpreter REPL! That supports the same syntax as the core language! (erl/escript can suck it) * Just enough OOP, without silliness like private members * Semicolons as optional statement separators * Not requiring silly parentheses around conditional expressions * Excellent support for cross-platform programming * Built-in, cross-platform Tkinter GUI library * One-click installers for many OS's * Printing hashmaps is intuitive (Node.js is still terrible at this). * `%` sprintf string operator * Built-in libs for downloading files from the Web * De-facto implementation. Common Lisp and Scheme are a bad joke. * Jython (lol, Groovy) * IronPython * pickle * Solid C FFI * "One way to do things" * Relaxed function declaration order * Awesome IDLE syntax highlighting colors * Reading/writing text files a breeze * Reasonably concise and expressive * Nested data structures without dereferencing * Allows for scripting/imperative/object-oriented/functional programming
well, it can be a pain. there's a reason why Python 3 isn't widely adopted. even with access to a tool like six its still not painless. 
OK then you should have used your clearly excellent reading skills to notice that I asked the OP about their ability to simplify the task rather than to solve a harder problem. Get off my dick and calm down.
Contrived simple example: get user input and check for validity and if invalidate make them re-enter. Don't run into the need for do while loops that often but they do creep up once in awhile.
I don't think that's a language problem. This happens in all languages. That's why we have stuff like package dependencies and windows installers.
Then there is no fool proof way including searching a dictionary for "real words" as it will be finite and unless you know all your endpoints its technically infinite. Is it possible to get a list of all the endpoints ahead of time?
This is close to how I might try to solve this problem. But as you pointed out dynamic class name generation is problem that is best left to the likes of metaprogramming.
the while loop does it just as well, except the check is literally above your readline code
 outfile = file('filename', 'w') 
How exactly would `def f(x)(y):` differ from the normal case?
Unfortunately for OP, he has no context to work with. Even if he did, that sounds like an extremely difficult idea to implement.
Or we make modules callable: import datetime datetime()
Wing IDE is my favorite. It's really well-built and mature.
Its the field of natural language processing, and it is exceptionally complex. Without context OP's solution will be error-prone.
I specially like the backtracking thing
You can fork [this script](https://github.com/tylercrompton/getch) that I made. It's been a while since I've visited it though. It supports Unix and Windows, the vast majority of your use cases. I'm sure you could get it working with a little tinkering.
I've tried pytz a few times. :)
He's using xpath, a far more advanced and concise way of querying data. I used to do web scraping and ETL for a living and for more complex DOMs it is *far* more maintainable to edit an xpath query when the website changes than it is to rewrite a large chunk of python code.
&gt; better lambdas If by that you mean anonymous functions (take function syntax and make it usable as an expression) I'm all for it. Though my understanding is that's either completely incompatible with the current parsing grammar, or would require a butt-ton of work. &gt; pep8 would specify 2 spaces rather than 4 I wish pep8 would specify tabs, someone convinced me relatively well that tabs for indentation and spaces for alignment is the way to go. &gt; complete scrub of the standard library, tidy up module/function names That would be nice, especially pep-8 ing the standard library. &gt; minor syntax changes, remove the need for a colon at the end of lines I'm not sure what I think about that one, I guess it might be extraneous syntax, but it might also be a nice cue to some people. *shrug* &gt; take a good stab at an easy, in-built concurrency model. Something like clojures core.async or goroutines. I've no idea how this would play out in practice. http://docs.python.org/3.4/library/asyncio.html
Thanks for the link. Unfortunately, this script will wait for a key to be pressed. I would like a function that told you what key at that moment was being pressed or nil if no key was pressed. So that you could pause a script by pressing a key.
: after if or in loops. Somehow it isn't natural (to me). 
Ah. I misunderstood what you were asking. I kinda followed suit with /u/Mikuro.
Don't know why everyone is downvoting you; Shift + F11 for life.
Except for the most trivial of while loops, I find it infinitely preferable to simply have a "while True" and put the breaking statements within the loop. 
&gt; class is a reserved word so beautiful soup uses price_ Did you mean class_ instead of price_? There's a couple of other cute ways to bypass this but this is easily the best with bs4 :) 
It's a duck. Quak.
Yes, as a matter of fact ! edited
Ah OK.
I understand why it isn't there, but sometimes you really wish you had a switch statement.
Wicked sick man, I'll try it when I get to a PC.
Optional indentation is not an improvement, at all. What's wrong with pass?
Output: Compiler Info: Traceback (most recent call last): File "&lt;string&gt;", line 1, in &lt;module&gt; File "/usr/lib/python2.7/py_compile.py", line 117, in compile raise py_exc py_compile.PyCompileError: SyntaxError: ('not a chance',) [^source](http://ideone.com/Bc8b6G) ^| [^info](http://www.reddit.com/r/CompileBot/wiki) ^| [^git](https://github.com/renfredxh/compilebot) ^| [^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20http%3A//www.reddit.com/r/Python/comments/1xaen1/if_you_could_change_something_in_python_what/cf9m01x%20Include%20your%20reason%20for%20reporting%20here.)
&gt;It was a hack. See, what you don't realize is that what you did is pretty normal for the OS you're targeting. On Linux, you make binary packages for every module separately, then install them using a system-provided binary package manager. On Mac, you do the same thing, only the "binary packages" are CPIO archives bundled in a single `.mpkg`. On Windows, you either use third-party installer generators, such as PyInstaller or InstallShield, or make an MSI. Why should that "be a native part of Python"?
o_O I came across your blog a while back and had it bookmarked and everything. Then I forgot about it. &lt;_&lt; Anyway, awesome stuff. :)
Improve binary packaging, it's a nightmare. About half my open source downloads are binaries, not source, so it's not an arcane area. I cobbled together a working build on XP, but could never get it working on Win 8.1, so I finally reverted to firing up my old machine for it. Here are my packaging notes. For Python 2.6 + pyinstaller 1.5, I had to edit C:\devtools\pyinstaller1.5\support\_pyi_egg_install.py see http://www.pyinstaller.org/ticket/185 08/16/12 Here's the story on building pydatascope. Pyinstaller didn't work; it just kept spawning copies of pydatascope. Using setup with sdist and py2exe options, the results vary by version: | python 2.6 | python 2.7 | ----------------------------+--------------+--------------+ setup py2exe builds OK | OK | OK but(1) | '' contains data\ | no | no | (2) '' runs | OK | no | setup sdist builds OK | OK | OK | '' contains data\ | no | OK | ----------------------------+--------------+--------------+ (1) contains fewer files than 2.6, reports chart etc. missing (2) this folder + files is easily added by Innosetup As a result of this mess, here's what we have to do: o run freeze under 2.6 o run "setup py2exe" under 2.6 o run "setup sdist" under 2.7 1/19/13 The current problem is that the generated file C:\dev\pydatascope\build\bdist.win32\winexe\collect-2.6\config.pyc does NOT contain ScaleInfo, so the App.__init__ assignment to self.scaling fails. ????!!!! Even if I hacked round this, who knows what other .pyc files are incomplete? Solution: use cx_Freeze. Unfortunately, I am unable to get cx_Freeze to create a working .exe using packages=['pydatascope'] so I have had to resort to using a separate setup file: pydatascope\setup_exe.py for the binary. The original setup.py in this directory is still used for the source distribution. 1/24/14 Could not get build to work on HUMAN Windows 8.1. Maybe 64-bit Pythons? So this must now be run on VirtualBox XP-32-bit. Switch to F: F:\&gt;C:\Python27\python.exe freeze.py 
Sure, why not support a `__call__()` function at the module level?
Not the same
[This](http://www.network-theory.co.uk/docs/pytut/PythonScopesandNameSpaces.html) certainly doesn't match up with "scope follows indentation", and neither does [this](https://en.wikipedia.org/wiki/Scope_%28computer_science%29#Python). The most striking quirk is how assignment (which is really binding) uses *different* rules than mere access. Both Python and JavaScript have function scope and global scope; Python adds module scope (which JavaScript doesn't have because it lacks modules), but that's not the problem. In JavaScript, the difference between global and local variables is explicit (although I gladly admit that defaulting to global was a design fuckup of epic proportions), and since local variables are explicitly created, it is always clear which scope they originate in, and apart from the counter-intuitive but otherwise consistent `this` scoping rules, JS's scoping is perfectly fine, albeit a bit too crude to be taken seriously. Python, by contrast, chose to not have explicit variable declarations, instead mashing together the concepts of *binding* and *assignment* to make things "simpler", never mind "explicit is better than implicit". The `nonlocal` keyword and other shenanigans are a direct consequence of this. Anyway: Scoping is one of those problems that seem easy until you try and solve them. Getting scope right is one of the most difficult tasks in programming language design, and Python doesn't do a very good job at it. Oh, and for the record: I'm definitely not a JS fanboy, and I'm not a Python hater. I just happen to think that all programming languages suck, only in different ways, and the art is to find the one for each project that sucks in tolerable ways.
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 23. [**Python**](http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Python) of article [**Scope %28computer science%29**](http://en.wikipedia.org/wiki/Scope%20%28computer%20science%29): --- &gt;For variables, Python has function scope, module scope, and global scope. Names enter scope at the start of a context (function, module, or globally), and exit scope when a non-nested function is called or the context ends. If a name is used prior to variable initialization, this raises a syntax error. If a variable is simply accessed (not assigned to) in a context, name resolution follows the LEGB rule (Local, Enclosing, Global, Built-in). However, if a variable is assigned to, it defaults to creating a local variable, which is in scope for the entire context. Both these rules can be overridden with a global or nonlocal (in Python 3) declaration prior to use, which allows accessing global variables even if there is an intervening nonlocal variable, and assigning to global or nonlocal variables. &gt; --- ^Interesting: [^Personal ^computer](http://en.wikipedia.org/wiki/Personal_computer) ^| [^Bachelor's ^degree](http://en.wikipedia.org/wiki/Bachelor%27s_degree) ^| [^Computer ^music](http://en.wikipedia.org/wiki/Computer_music) ^| [^Open ^source](http://en.wikipedia.org/wiki/Open_source) ^| [^Organized ^crime](http://en.wikipedia.org/wiki/Organized_crime) *^\/u/tdammers ^can ^reply ^with ^'delete'. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less.* ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 48304:%0Ahttp://www.reddit.com/r/Python/comments/1xaen1/if_you_could_change_something_in_python_what/cf9o8vk)
That kind of thing requires an event loop, always. On UNIX, you can do `select.select([sys.stdin], [], [], 0)[0]` to check if the user has entered anything. (Note that all terminals are line-buffered by default; you'll need to copy a `termios` hack from the above script to switch the terminal to raw mode first.) Not sure how to do the same on Windows.
"slef" should be a universal alias for self
I think this needs to be a lot more flexible than static type-checking. I want annotations to be *called* for each parameter: essentially *decorators for parameter values.* Then I can write stuff like this: def exactly(t): def check(value): if type(v) is t: return v raise TypeError("%r not %r" % (v, t)) return check def instance(t): def check(v): if isinstance(v, t): return v raise TypeError("%r not %r or subclass" % (v, t)) def pred(f): def check(v): if f(v): return v raise ValueError("%r failed predicate" % v) So I can do things like this: def myfunc(a: int, # convert to integer or throw error b: exactly(float) # accept exactly float only c: instance(list) # accept list or subclass d: pred(lambda x: x&gt;0)) # accept only positive numbers
PyGame has this but it's kind of heavyweight if that's all you need. 
Multiline anonymous functions. Have they fixed lambdas yet? String.reverse. "This sucks"[::-1] Rename forâ€¦else to forâ€¦onbreak and use 'else' for an empty loop You asked, you got it.
How's that different from putting some `assert`s in the function body? I thought the whole point of static typing is that it's, well, static - that is, performed ahead-of-time.
Thanks. This is exactly what I do. Just seems like overkill.
Optional brackets instead of indentation. I like the indenting approach but it's a stumbling block when trying to get python accepted by others. 
Its gotten a bit better with the new PEP to have a windows executable associate with the .py extension on windows, and it looks at the shebang line to see what version of py to install It won't really get any better unless a full standalone exe project comes forward, or python gets installed by default on windows. although, i'm not an expert on executable formats by any means, but since the current projects such as py2exe basically just include the library as a zip and other compiled modules as pyd files, can those not be embedded in the executable somewhere, and then have code to 'do the right thing' when its time to load something? (like looking inside the executable / memory rather then on disk) 
The former is technically impossible, as it implies some static typing. I saw a paper on that once, can't remember where, though. [RPython](http://doc.pypy.org/en/latest/getting-started-dev.html) compiles to native code, but it's heavily restricted. Or, if you don't care about performance but need a binary for some reason, you can use [freeze](http://hg.python.org/cpython/file/tip/Tools/freeze) (bundled with CPython) to make a binary file that is linked with libpython. It simply puts the contents of a `pyc` file in a C array, and `eval`s it when ran.
I think this is a feature because it makes me think a little bit more about using regular expressions when I really just need `startswith()` or `in`, which should be easier to understand and faster.
It's mainly for readability. The function body contains code for what the function does, not boilerplate stuff like testing/converting parameter types.
you cannot get backwards compatibility for everything. So much code is written to assume that the 'only' encoding for strings is 8 bit ascii, which was a bad assumption from the start. 
you don't need to do compile() if you are only doing a few regexes, since it caches the last few regexes anyway. so its just ```matchObj = re.match("[a-z]+", someStrHere)``` longer, but still one line. The =~ operator could be added i guess since nothing else uses it
does 'wheel' not help?
datelib? What makes a lib a lib, anyway?
I forgot to mention that PyCharm has a free version and a professional version with a few more features. I also have one license to use the professional version from school and another from an open source project I worked on. 
We don't use a "lib" suffix on any other modules I'm aware of. Of course, it might be better to just throw the whole monstrosity out and start over.
&gt; Optional indentation is not an improvement, at all. Some arguments: * Wordpress, e-mail, IRC, etc. Almost all generic text handling tools assume that collapsing and trimming whitespace is mostly safe, and that whitespace follows rules similar to those of natural languages. * Indentation is an expressive device. Sometimes, not often, but occasionally, I want to use indentation to show a structure that is *not* the same as the syntactical structure of the code. This is especially interesting for EDSLs and such, where indentation might follow the domain structure, not the formal code structure (e.g. with a DSL that generates HTML, I might want to indent according to the tree structure of the resulting HTML rather than the flat list of functions I'm calling. * Self-automation. My editor can reliably auto-indent most languages. That's great, because it means I don't have to do it manually. Except Python, because auto-indenting Python is a fundamentally unsolvable problem. * Refactoring. Do not tell me you never move code into different context. Because if you don't, you're not refactoring, and if you never refactor, you're either a genius (consistently delivering perfection on the first attempt) or a complete fucktard. Syntax-relevant indentation means I have to correct indentation manually when I paste code, instead of letting my editor take care of it. In other words, I need to perform unnecessary manual editing, which is both a waste of my expensive time and a potential source of utterly avoidable errors. * Coding style is important, and having consistent style and correct indentation makes for better readability and better code in general. Enforcing good taste, however, is a social problem, not a technical one. Being forced to indent correctly will not make the ignorant dick-head on your team write good maintainable code; it will drive him to game the rules. It won't make the good programmers write better code either though: the good ones value proper indentation enough to apply it religiously, and they'll be (rightfully) furious if anyone grossly violates the established coding conventions. But baking such rules into the language is belittling, no matter how benevolent the motives. * Splitting long statements over multiple lines is cumbersome and ugly. Making the statements shorter is the recommended solution, but often this means I have to introduce intermediate variables with little or no meaning, which is a violation of good taste. Or I'd have to factor parts of it out into a separate function, which violates the same principles, and also introduces boilerplate. Boilerplate, you hear me? The very thing Python set out to eliminate. I'm introducing nested functions just to make shorter statements. Or global functions maybe even, and then others start using them, and suddenly I have to deal with yet another dependency I wasn't waiting for. &gt; What's wrong with pass? The same thing that's wrong with the term "Atheism". It's not a thing. It's the *absence* of a thing. Python invents a word to mark the absence of statements, instead of doing the obvious thing, namely letting the absence of statements be the syntax for "absence of statements". And the reason it does that is because it insists on using indentation to mark blocks, instead of explicit end-of-block syntax, and you can't indent the absence of code. `pass` is necessary if you want to use indentation alone to indicate structure, but that doesn't make it anything but an unfortunate wart.
You can kind of hack a switch statement out of a dictionary. Something like: my_switch = {'first_case_value': first_case_function, 'another_case_value': another_case_function} my_switch[switch_variable]()
PyQt doesn't work for you?
Interesting. I've never liked the 2 syntax. Why have one single function with a syntax different than every other function in the language?
Because that's not how the object system works? Think of a module as a `dict`.
From [CPython 3.4](http://hg.python.org/cpython/file/default/Lib): importlib, contextlib, difflib, ftplib, hashlib, imaplib, nntplib, pathlib (that's a new one), plistlib, poplib, reprlib, smtplib, telnetlib, xdrlib. The standard library is inconsistent like that.
And would allow autoformatting.
Case in point: datetime.utcnow().timestamp() surprisingly produces a wrong result *every single time* (unless you happen to be in 0-offset-to-UTC timezone). I mean, reading from left to right, you'd think the utcnow() method would return an object whose timestamp() method would produce the seconds since the epoch... but noooo... utcnow() is a "naive" datetime objects that doesn't have a timezone attached to it, so the timestamp() method assumes local time. Why utcnow() returns a naive datetime object is beyond me. 
Not 'batteries included' in the sense that it doesn't come with Python. And it's not even installable via PIP.
It isn't exactly what you're looking for, but there is [Cython](http://cython.org/).
'Eliminate the global/nonlocal keywords. Instead, add an assignment operator: x := y would assign a new value to an existing variable x.' What do you do when you want to define a variable in non-local scope?
I don't develop with Windows in mind because I consider it a crippled development platform (for reasons like not having /usr/share/dict/words). It's simple to replace the filename however.
reversed("This sucks")
I've used py2exe and PyInstaller quite a bit. And as good as they are it still very much has a duct-tape-programming feel. I have difficulty with the "impossible" label, but I'd be glad to accept some static typing in trade for compilation.
Yeah, there's no reason to muddy up Python's beautiful, minimalist syntax with regular expression vomit.
You could still do `globals()[key] = value` to define global variables programmatically. Honestly, though, I don't think you should be allowed to define variables outside of the scope you are in. 
In Python, you can write a program that uses tons of external library functions, pack these libraries alongside with your program into a zip archive, unpack it on a target machine, then run the program as usual. That's no different from what you do when coding in C, only modules are directories with `.py` files in them instead of `.dll`s, `.so`s, and `.dylib`s. You can even pack a Python interpreter into the same archive, as long as you're completely sure what the target OS is. Or you can use [freeze](http://hg.python.org/cpython/file/tip/Tools/freeze), py2exe, or something similar to make an executable that contains all these dependencies in frozen form.
None of these are good enough reasons to make indentation optional. **Readability counts.** **Special cases aren't special enough to break the rules.**
If I want to write my programs in C, then I'll just use C (or Go).
Fair enough. However: `importlib`, `hashlib` and `reprlib` need to be named that way to avoid clashing with builtins or keywords; `pathlib` would otherwise clash with `from os import path`. `contextlib` is IMHO clearer than `context` since someone might plausibly use the latter as a variable name (e.g. in `with foo() as context:`). All the other ones (unless I missed one) are named after standard protocols, formats and/or binaries, and using the noun directly could be confusing (e.g. the user does something like `diff = '/usr/bin/diff'` in conjunction with `subprocess`). I agree that `date` would be a stupid name for a module (since it's a ridiculously obvious variable name), so maybe it would make sense to call it `datelib`; still, I'd rather find something less silly looking.
Wow, that's almost php quality there... 
Ok, you seem to have 'grok'd Python, now tell us how Ruby is better...
&gt; It's simple to replace the filename however. No, it's not, because Windows does not provide an equivalent file AFAIK. You need aspell or something.
he wants to change the current open() into file()? i have no idea why tbh
Belittling. Yes, readability counts. I should know, I've been programming for over 20 years. But please don't assume that it's OK to make these decisions for me. And for the record, I consider Python the least readable language in my arsenal, but that's an entirely different discussion.
So you're cool with mutating variables outside of the scope you are in but you're not okay with defining them?
I wish PyPy was the default implementation and more resources was spent making Python/JIT faster rather than using C modules. Also if everything was written in pure Python it makes it easier for alternative implementations like Jython (no GIL) or IronPython. I wish everything got magically ported to 3.4 instead of this huge chasm. I really do think PyPy is the long term future of Python. Edit: Jython is not dead.
This sounds like a better way to get a virus than to find one. You're sending a list of versions of every process on your machine to a third party with unknown security practices. Anyone with access to that data can check those versions for known vulnerabilities, or craft a phishing email (Please click here to update XYZ obscure app.) And "better" malware will report false checksums or hide from the process list, which is why antivirus software doesn't run in usermode.
Combine this with `from some_module import *`, and you have a recipe for disaster. Consider this: you're trying to do a *little* bit of tidying up of the imports in old python code, and you have stuff that looks like this: from datetime import datetime from r2.pages import * from r2.models import * You think to yourself, "well, that's ugly, but I need to add an import at the top, and I'll clean things up and alphabetize the stars and make a note to come back later." Suddenly half your code breaks, because `r2.models` uses `import datetime` and `r2.pages` uses `from datetime import datetime`. The `import *` lines override your manual import of datetime, and you've just silently swapped which `datetime` you're referencing.
You can download Unix dictionary files on the internet. I thought that was implied.
I'm just not sure what the purpose could possibly be. If you're using a variable in some scope, why would you be declaring it elsewhere? In what situation would you be unable to declare a variable in the scope where it is used?
Cython is a system for making C extensions for Python easier. The usual use case for it is an application that is mostly written in Python for glue code and business logic that is not in a performance sensitive spot, but that has a critical area that would benefit from being written in C for performance. 
And I bet that dark magic involves either changing `sys.modules[__name__]` or using import hooks.
else/esle print/prnit while/whlie the list is endless. I should probably just learn how to type like a non-mongloid...
Obviously, it'd be a variable.
Something that has not been said yet is executable packages. It's pretty simple, single file representations of python projects that can be executed without extracting.
Aw, no fun, you spoiled the ending!
How about hacking KeyboardInterrupt? That way you will have to use Ctrl+C instead of space, but at least the functionality is there.
&gt; But please don't assume that it's OK to make these decisions for me. Well, one of many disadvantages of using a programming language written by somebody else with different concepts in mind.
I didn't know about it, but no. It's essentially distributing source code, which needs a Python installation. A binary build includes pythonXX.dll, tk85.dll and whatever else is needed, typically about 3 dozen files. All that can in turn be packaged into a single .exe by Innosetup. This is useful for two groups of people: * Casual OS users who don't have python installed * Developers who want to ship a commercial program written in Python (includes me)
Look into setting up a vimundo file. You'll now have persistent undo's across sessions. You will always be able to undo to the start of a file's history across sessions, reboots etc
pass is bad but {} is ok?
Muwahahaha! I know another way.
there's a lot more than one. everything that uses in-fix notation is also possible to write with function(args) notation too, right? * 2 +2 --&gt; add(2, 2) * a == b --&gt; equal(a, b) * for item in iterator --&gt; for(item, iterator)
Amen. Wasted hours trying different methods. Thank you pygame for event's queue. Now I can actually read *a single input* from the keyboard without over~~loading~~flowing it with a string or forcing the user to push 'Enter.'
It's like the [currying in Haskel](http://www.haskell.org/haskellwiki/Currying). We sort of have it in Python with functools.partial.
&gt;Not sure how to do the same on Windows. Exactly. "Oh this script will do it." stdin not found. If you're using Unix it's a non-issue. If you're developing on Windows, well hell, I guess I should expect this much grief.
Damn. We all arrived at the same event queue. It just works exactly like I expect it to. Pull event from pygame and put it in the core libs!
I represent the committee of perfect typists. We wholly disagree with your assertion and disregard the idea of typos. I mean, realy who would make such a mistake?
Not sure if sarcastic
I generally don't have much trouble, but the dreaded *slef* always slips by my keen eye. But yes, why do people make those stupid typos?
And therefore, *easier to read.*
I hear that as well. Then I load my binary up in Olly or IDA and wonder if the people who told me those things even write programs.
You can use the `partial(partial, partial)` trick: @partial(partial, partial) def register(path, f): something.register(path, f) return f 
Lol why didn't you say that? If you can do that, then you can either use a database or a simple dictionary/hash table to look up the conversions. However you still will have to populate the dictionary/database before hand for the lookups to work. Which means if they change in the future you will have to update or append your dictionary/database.
&gt;&gt; http://docs.python.org/3.4/library/asyncio.html Thanks for pointing this out, it looks interesting, however I think there needs to be more/better ways of doing general parallelism easily. Waiting on IO operations to complete is only one form of concurrency, and while node.js has made it fashionable, it's not enough to cover situations where you want to get two things done at once, rather than having two units of 'waiting' occuring at once.
&gt; I think the team working on PyPy is doing great work for better performance Python, but its still never going to reach the level of native code. False. JITs can and in many cases do absolutely trounce the performance of handed-coded lower level code. The key thing to understand about performance optimization is that *the compiler is better at optimizing than you are*. When you hand-code at a lower level, you are making the bet that you have a better understanding of the next lower-down level of abstraction *and* a better understanding of the performance characteristics of your algorithm. This is an increasingly bad bet in the modern era of computing. For typical C programmers, they understand the computer as a UMA, single- or multi-threaded 80386. This abstraction is so utterly broken for real performance code, that if you write low-level C like this I can absolutely write Python and use perf tools from the Python ecosystem to beat you. With Blaze and blosc, we can do actual computation at speeds exceeding a simple memcpy(). That is: in the time your hand-tuned C has memcpy()ed a chunk of floats, we'll have already computed stats and finished a reduction on it. &gt; I've always wondered what kind of performance you could get from a Python interpreter that targeted LLVM instead of the standard Python bytecodes. you could then native compile your .pyc files with an llvm compiler. LLVM is powerful and is an exciting library/ecosystem but it is not magic performance pixie dust. LLVM is a compiler kit/infrastructure, not an actual virtual machine like the JVM, the .NET DLR, Shotgun, Parrot, etc. At my company we have produced an LLVM-based Python compiler called [Numba](http://numba.pydata.org) which handles a subset of python, for numerical computations, and using type information from Numpy arrays. (This is not a hotspotting JIT, but rather a on-the-fly compiler.) It works well, but of course it is only meant to be used for numerical sorts of things, where there is a well-defined set of hot loops. 
Better lambdas: double = (x: x*2) Multi line lambdas: lst = [1, 2, 3] map((x: if x &gt; 1: return x*2 else: return 10 ), lst)
Use `from __future__ import print_function` instead. `print('foo', 'bar')` does not do the same thing in Python 2 and 3, without it.
To each there own I suppose. Personally i like two spaces because it's the minimum indentation that's easily visible to the eye. Four spaces has always felt wasteful to me for some reason.
You could also look at anaconda server: http://continuum.io/anaconda-server, which was created specifically for the purpose of managing python installations in companies.
Multiline lambdas would be amazing. The idea about the for...else is amazing!!
Hmm, I'm starting to really dislike this whole "Readability" thing. It feels like the word is now just a shield that can be used to deflect criticism of pythons syntax/semantics. Instead of having a reasoned discussion about the pros and cons of various approaches, the conversation usually just falls apart as the "readability" thing is trotted out as a justification for rigid-thinking.
Automatic formatting similar to "go fmt" instead of requiring the programmer to worry about white space.
That's the problem right there. If I want to share a python program, I have to package the whole universe to go with it. The language should have been built with a clear distribution strategy. Unfortunetly, we're left to devise our own clever ways to make sure the client has an interpreter and a properly configured system path so imports don't fail.... not to mention obfuscating the code.
Well; I consider myself fairly open-minded, but this is not a different concept we're talking about here, it is the idea that it's a good thing to make a choice as a language designer that you could have left to the user. Regardless of what choice that is, I generally prefer languages that leave choices to me instead of making them for me, all else being equal. Of course some pre-made choices make my life as a programmer easier, but this isn't one of them - it is limiting, and its consequences are outright ugly.
You can also download a better operating system and use that.
I have. I like Ruby. Not as much as Haskell, but more than Python. Too bad I won't get around to using it for anything serious anytime soon. Anyway, Ruby does block syntax better than Python - you need to type an extra `end` here and there, but that's a small price to pay considering the benefits.
They really want to, but don't have an alternative (yet). 
Xpath is a w3c standard and you can find libraries in most languages. You're better off learning it than using a nerfed version.
Well, I'll agree with you there. It's hard to beat C# for readability when you can just see exactly what types are involved in each operation. Dynamic typing CAN be just as readable, but it's dependent upon descriptive naming, clear code structure and good commenting... all of which are not enforced and therefore quite rare.
You must have hated when tabs being 8 spaces was the norm.
Python is essentially a machine for smashing PyObjects into other PyObjects.
There are cons to forced indentation. None of this is news to anybody. But I've yet to hear a 'con' that doesn't boil down to basically a minor annoyance or a desire to avoid a little bit of effort in a special case scenario. I'm personally very, very glad that Guido decided to force indentation because the benefit of generally much more readable code far outweighs any of these minor annoyances. If you want a language that doesn't force any conventions whatsoever then feel free to hop over to C++ where you live in a hellish world of absolute 'freedom'.
Voom is an outliner for lots of modes including python. It gives a nice code outline in a split window. autocmd FileType python map &lt;buffer&gt; &lt;leader&gt;o :Voom python&lt;CR&gt; 
Yes, and I think that's a pretty horrible idea for most situations I'm interested in. For me it's just a better idea to instead use julia or scala or java. 
All of the `utcfoo` functions do that. There is *no inverse* to `dt = datetime.datetime.utcfromtimestamp()`, for instance. You have to do `dt.replace(tzinfo=datetime.timezone.utc).timestamp()`, which looks ridiculous and might be totally wrong if another layer decided to use local time.
Yes, pretty much. `{}` represents block boundaries; those are actual things. Statement syntax represents statements; those are actual things, too. We can combine these syntax elements that represent actual things exactly like we can conceptually combine the things they represent: a block can contain zero or more statements, the ordering of statements matters, etc. etc. With Python syntax, the isomorphism doesn't work though: at the conceptual level, we have statements and blocks, but at the syntax level, we have indented statements. There is no syntax element that isomorphically corresponds with blocks, and there is no conceptual object that is directly isomorphic with indents. And this causes a bunch of anomalies, and one of them, the fact that indentation cannot be applied to zero statements, leads to the invention of `pass`. `pass` is a lie - it is syntactically a statement, but it doesn't represent a statement, it represents the absence of any statement. `pass` is needed because even though a block without statements in it is conceptually valid, the syntax requires statements in order to establish a block.
Every time I plan on learning BeautifulSoup I hear of something better. I take it the current consensus is that pyquery is the way to go?
Or use `my_switch.get(switch_variable, default=default_func)`, or `collections.defaultdict`.
This comes up in natural language processing and bioinformatics. The right way to solve it is with a hidden markov model whose states function like a prefix tree (trie) encoding the set of possible words you could complete given your current position. NLTK has an HMM package, or you could use a state machine compiler like ragel. You might also find a pre-baked package since this is necessary to tokenize languages like German, Korean, and Japanese.
from _____future_____ import braces
&gt; If you want a language that doesn't force any conventions whatsoever &gt; then feel free to hop over to C++ where you live in a hellish world of &gt; absolute 'freedom'. False dichotomy. There are plenty of of languages without forced indentation that read just fine. Plenty of engineers write perfectly lucid C++/Erlang/Whatever every day of the week without problem.
&gt; take a list of letters and create valid words Very quick and dirty: from itertools import permutations words = set(line.strip() for line in open('/usr/share/dict/words')) def findwords(letters): return words &amp; set(map(''.join, permutations(letters))) The above finds all words that use all the given letters. If you also want to find all words that use a subset of the letters: def findwords(letters, minlength=2): candidates = set(''.join(candidate) for n in range(minlength, len(letters) + 1) for candidate in permutations(letters, n)) return words &amp; candidates 
Yes C++ *can* look nice. But the difference is that there are few if any conventions within the language that *force* this to be the case. If you only work in your own code, great, congratulations, none of this matters to you. But for the vast majority of us who code in the real world, having common conventions enforced at the *language* level, rather than at the level of the individual or the institution, results in a major boon to readability, comprehensibility and ultimately productivity and sanity. C++ doesn't even have anything like PEP-8. Instead each company or institution has it's own 'style guide' which we all know is never enforced, rarely comprehensive and never consistent with other standards.
Yeah, that's pretty sweet. As to (2) and (3), Python actually has a way around that now (`inspect.signature` follows `__wrapped__` and `__signature__` attributes, so that wrappers applied by decorators can appear to have the same signature as the function they wrap, and `functools.wraps` correctly applies the `__wrapped__` attribute I believe). It's just that `help()` doesn't use `inspect.signature` yet.
That doesn't seem like a particularly good example to me. You can already do: if my_var == 1: my_var = None my_var = None if my_var == 1 else my_var 
I'd make a trailing comma after **kwargs legal
Lack of 2.x backwards compatibility in python 3
I'd say dynamic vs static typing really has no play into readability, I use type inference everywhere in my C# where the compiler doesn't get it wrong. You can't tell me var someFoo = baz.Foo; is any more readable than someFoo = baz.Foo The difference in typing is safety guarantees, I know that if I hit compile on the former example the compiler will scream murder if types aren't compatible, the latter can introduce subtle run-time errors. Don't bring readability into the static vs dynamic typing debate, that's not even a point either side brings up outside of verbosity (and in that case C# has a solution with 'var' and type inference).
make yield work from within recursion
&gt; Jython (dead project but no GIL) how is jython dead? a 2.7 compatible beta was just released according to wiki http://en.wikipedia.org/wiki/Jython#Status_and_roadmap and sho nuff it's right there. http://www.jython.org/downloads.html 
As I understand it, there is an actual reason they don't want multiline anonymous functions. The idea is that if you have a function that accepts another function as a parameter, then you should use a lambda there. But for a situation where you would want to use a multiline anonymous function, you are supposed to define a new function. Correct me if I'm wrong though. And maybe you already knew this, and just thought their reasoning is stupid. I don't really know enough to have a strong opinion.
Damn, that's clever! 
You're right that it isn't a language problem, but the tooling support around Go largely solves this. All binaries are statically compiled and it very easily supports cross compiling to most of the major operating systems---regardless of which OS you're using on your dev machine. But of course this isn't an apples-to-apples comparison for a variety of reasons.
Too true. I suppose I could have better phrased it as "forward compatibility for Python 2.x".
datetime.utcnow returns a timezone ignorant datetime. I'll never get over this.
Stolen from a co-worker: Pip should default to a virtual environment on installation and need some specific switch to install to python core.
executable zip file? http://blogs.gnome.org/jamesh/2012/05/21/python-zip-files/ edit: that blog post doesn't seem to mention it, but i've seen some people prepend a shebang onto the zip file so that unixes you can just set +x on it and execute it.
Php is pretty bad but it does time and dates ok. What shits me the most day to day about php is sometimes there is snake case for function names, sometimes there is not. Also sometimes it is needle,haystack and other times it is haystack,needle. Also the === operator sucks too. What happens if you end up having to check the manual for simple things too often. (or use a editor that has it inbuilt, but it's still inconvenient)
Why isn't it there?
why are you even using python then?
goddamned default signed datatypes and the fact they take up so much space regardless of what they are.
For compiled programming languages, you have a choice, as a fundamental feature of how they work. You can choose to use shared libraries, and then you will need an installer or all those other third-party tools to manage the dependencies just like you described. Or, you can compile statically, and have a 100% fully functional executable contained in a single file, which as long as you have the same OS should have no problem running anywhere you happen to put it. On Python, you cannot perform the equivalent of "compile statically" without more third party tools. That is why it should be a native part of Python, so you can have feature parity with compiled languages. For small, simple programs it is very empowering to not have to "install" all sorts of runtimes and libraries.
Huh... I assume, as a drop-in replacement, this will work with Django? Clever name, too.
ba dum bum
Smells Haskelly. I like it.
One guy on my team uses 2 spaces. Another uses 8. Arrrgh.
I'd wager the same reason there's no increment operator: it's seen as a boon to readability.
For some reason this breaks on my system; it looks like both the `if` and `else` always execute: if True: #{ print 'Ta-da!' #} else { print '&lt;crickets&gt;' #} What version of python are you using? /s