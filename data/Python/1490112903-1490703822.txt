&gt; Can PyCharm color variables? I had to open it up to check - not that I can see. That does sound like a feature worth checking it out for. Working in C++ and Python at the same time is a workflow I didn't initially consider, and it makes perfect sense. Thanks for the insights!
Missed out having to deal with virtualenv, pip, pyvenv-3.5, eggs, wheels, bdists etc.
Ok, I'll drop the promotion hat for a moment and describe it like it is: back when I started working on Python support in KDevelop, PyCharm didn't exist. I worked on it because I wanted a good Python IDE. That's why it's there. In terms of comparing features the tools have now, I find that hard to answer; partly because I never used PyCharm much, and partly because I think feature lists on paper are not very descriptive of how well a tool works for you. I've seen it quite often that I describe features I think are great, and people are excited about something totally different which I considered trivial, but which the alternative doesn't offer for some reason. I personally like using kdevelop for Python because it is very quick and responsive, while still quite powerful. You can use it like a text editor with extra features -- it's not as clunky as many other tools. I and others put a lot of thought into for example code completion (when it triggers automatically, what items it displays in what context etc), which is not something I feel is present in most other tools. But again -- I'm not great in comparing, as I don't know the alternatives very well. Try for yourself and see if it works for you.
It's particularly useful if you're using PyQt - that does tend to involve mixed Python/C++, and we have [rather good docs integration](http://www.flherne.uk/files/KDev-14.png) for Qt projects. Also, Python server + JS client is something I've worked on briefly; Python client and PHP server seems plausible.
&gt; Technically speaking, I'm sure that PyCharm is a better product. Well, let's say it is certainly a more ... complete solution. KDevelop for Python has quite a focus on writing and navigating code -- completion, highlighting, and jumping around is where it excels. If that is what you need, I think it can be a great tool. If you are mostly looking for an interactive shell, deployment tools, a profiler with fancy graphs and virtualenv management, it is probably not for you.
Does PyCharm let you [read PDFs in your IDE](http://www.flherne.uk/files/KDev-15.png)? Or [epub books]( http://www.flherne.uk/files/KDev-16.png)? ...that was the first one I spotted to open, not advised as programming guidance. ;-)
If this is still an issue, send us an email at support{@notspam@}educative.io
I thought these were the same thing, I thought `mypy` was just the tool you ran to do the type checking since the python interpreter just ignores it. 
I believe you can pass a directory. I've used it a while ago but don't remember having to use it once per file. Either way, should be an easy shell command if it only does one file at a time.
I'm writing a script to scrape a home builder's website for new plots/prices and to email them to myself. The idea being that I can find out reasonably quickly when new plots have been released.
Ok bay actually has an API just for this. https://pixabay.com/api/docs/
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/jpgibbs] [Google Cloud Machine Learning APIs Tutorials](https://np.reddit.com/r/JPGibbs/comments/60p2yq/google_cloud_machine_learning_apis_tutorials/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Well 3.6 is barely 3 months old. The day that 2.7 does not beat in users a 3-month-old release is the day when you definitely MUST migrate. In my case, I had a quite complex library based on 2.7 (started 4 years ago), but I peppered __future__ imports everywhere as I created it. Migrating took me 3 work days and most of that time was spend (wasted?) in keeping 2-3 compatibility. (The library deals with over-the-wire data that needs to be encoded/decoded and interpreted with ctypes structs, otherwise migration would have taken minutes). Biggest pains: "buffer" and "bytearray". Most WTF: str(byterarray(...)) in py3 gives you "bytearray(...)" instead of complaining. I really don't know what were they thinking on that one...
Why should py3 complain about `str(bytearray(...))`? In that case, you wouldn't be able to print out bytearray objects.
Attempting to implement A* algorithm for a robot. 
I see where you're coming from. For me, the business value add is everytime we run into a unicode issue because someone had a "weird accent" in their name and my stuff blows up, that's egg on my face and potentially costing the company money. I stamp out these as they come up but I always seem to miss one or two. And now I need to on board twenty devs to the application who are used to C# and Javascript and teach them that str in Python 2 isn't actually a string. I'll freely admit that part of my motivation is that there's stuff in 3.5+ I'd like to use (fstrings, raise from None, etc), but my primary motivator is unicode by default so I can handle all the nasty encoding stuff in an integration layer (like what should be done anyways). 
Can you please share the course link MIT's 6.00.1x?
Write a clock that counts down your remaining time.
Then you make a business case for the migration. If your ongoing maintenance costs due to 2.7 unicode dramas exceed the development costs of migrating, you do it. Otherwise, you do not. I've seen too many teams opt for a rewrite that cost a fortune to remedy issues that only cost peanuts in the first place. 
I'd not heard of this kind of thing before. This is really interesting to read!
he means it's not multi-threaded or concurrent
By the way, PyPy2 will be supported even after EOL of Python 2, because RPython is based on Python 2
For starters, you're using different versions of matplotlib; your parter's plot looks like it's using the new v2.0.0 release, given their TeX fonts. They also may be passing a **dpi** keyword argument to `savefig()`; if you *have* to output rasterized plots in PNG or other format, then set it to at least 300. Else, you should ideally be saving your plots in a vector format.
Commenting to read at home
[For Hire] **3 X Python Software Developers + (Visa Sponsorship) at Scurri** Scurri is a rapidly growing software company that wants to enable every online retailer to offer an Amazon-like experience to their customers, when it comes to shipping. We do this by providing a delivery management solution to our customers. We have ambitious goals and an exceptional team. https://djangojobs.net/jobs/679/3-x-python-software-developers-visa-sponsorship-scurri/ #python #django #jobs #ireland #wexford #relocation 
I haven't used KDevelop in over 5 years and PyCharm in a year or so... but even with that difference between versions (and my hardware!) one is slooow. So there's that. Might be an issue of the past, though I doubt it.
Bummer this is a pain because I do lots of daily deployments
Look into the Flask framework. 
New version aiohttp==2.0.0 **does include** C parser, same one as in httptools: * https://github.com/aio-libs/aiohttp/pull/1626 * https://github.com/aio-libs/aiohttp/blob/master/aiohttp/_http_parser.pyx * https://github.com/aio-libs/aiohttp/tree/master/vendor/http-parser
Try http://pythonanywhere.com with Flask. I did something similar and it works flawlessly! Edit: spelling
Everything you said is correct, but the comparison is fair, on the basis of using one language or the other for server side development. JavaScript's technical debt does not give it a free pass versus better designed languages.
I'm pretty sure NOBODY is holding off due to *just* parenthesis in print. If that's anyone's reason they need to hang up their code editor and find another job. The usual reasons are: - Library support - Unicode issues - death by 1000 papercuts -- all the tons and tons of minor but potentially hard to locate / tedious to fix changes.
What gui library is this?
I think that really depends on what you want to do. I went straight into ML since the data I am working with doesn't need to be harvested from the web and I am not aiming to become a data scientists.
The point is that the coroutine has never finished if it never gets deleted. And while context managers are not there for object finalization, they are the equivalent of the C++ constructor-destructor pattern used for the same bracketing pattern.
&gt; The point is that the coroutine has never finished if it never gets deleted. That's exactly what I'm saying. The difference is that in python the coroutine gets deleted as soon as it's finished running, because termination is deterministic. Pypy breaks that by relying on a non-deterministic GC for every object termination, including stack frames. &gt; They are the equivalent of the C++ constructor-destructor pattern used for the same bracketing pattern. They're not equivalent, because they're separate from the object's lifetime. The whole point of RAII is that RAII.
tkinter
You're running it in IDLE, and you should be running it in command prompt/Terminal. The dollar signs indicate a command that should be run in the OS command prompt.
Just show me an example in Python where the `__del__` method would not be called (and I mean Python, the language definition, to which pypy is NOT compliant.)
&gt; I tried running it in command prompt and it says &gt; &gt; 'pip' is not recognized as an internal or external command, operable program or batch file. 
It doesn't matter what CPython does. It matters about what the language specification promises. Just because your program works in CPython doesn't mean that your program is guaranteed to work in other implementations. The documentation [clearly states](https://docs.python.org/3/reference/datamodel.html#object.__del__): &gt; It is not guaranteed that `__del__()` methods are called for objects that still exist when the interpreter exits.
Reinstall python, making sure to check the add to path box on the first screen.
Oh yea
Try `python -m pip install opendaq`.
Not sure I follow last sentence, old httptools variant is faster then 2.0.0 implementation?
It's all working now! Thanks!
To be fair, python 3.5 is more popular than 3.6 at the moment.
Just another opinion piece that says equality is achieved through inequality.
vmprof is your friend. Typically it's a small thing that consumes a lot of time for unrelated reasons. For what is worth, pypy 5.0 is ANCIENT
I love when people do this, since I don't use reddit much anymore. But when I did it was a crack too.
New to programming but currently working with python on one hand and npm with the other, could you explain what that means?
The need for virtualenv is the first problem. I understand isolation is important, but with node/npm, you just cd into the directory and npm install. I deploy both node and python apps via containers, and from my experience python packaging is far worse than nodes. I'm not saying JS is better than python, just that python packaging is almost as bad as ruby gems. Again, from a deployment/containerisation perspective.
I just want to add if you're a student you can get the whole JetBrains suite for free.
I don't see much of a functional difference between the "sandbox" being stored in ./node_modules or ~/virtualenvs/myappenv or wherever. `npm install` is simple and pleasant, I agree. But it's not like the alternative is messy. A setup.sh with literally 3 lines: `python3 -m venv ~/path`, `source ~/path/bin/activate`, then `pip install -r requirements.txt`, isn't worth mentioning considering you write it once per app. That said, I don't use containers like you do, you likely have different needs and what seems unimportant to me could be really annoying to you.
Piece of cake, especially if you never take any kind of break, don't do any testing, work 12 hour days, never have to attend any training courses or meetings, take any leave...
&gt; I swear people just don't port to 3 because of the parentheses on print. Why else not. If people aren't aware of from __future__ import print_function then they should quit programming. 
For the times, they are a changin' [PyPy2.7 and PyPy3.5 v5.7 - two in one release ](https://morepypy.blogspot.co.uk/2017/03/pypy27-and-pypy35-v57-two-in-one-release.html).
Of course it isn't. Who would think it is?
Try the save button next time
Embarrassingly, I admit I wasn't aware. But I'm also a hardware dumbass. I code out of necessity.
&gt;I strongly expect the EOL date to be pushed back again Not going to happen. They were very clear about that. 
Very strange, I thought that v2.0.0 should take less time, may be it is good idea to post your results and benchmark at https://github.com/aio-libs/aiohttp/issues ? 
I'm actually testing randomness+webscraping. Testing it for a couple websites. It's not a big deal but I'm experimenting and thinking out of the box(I hope)
They're clear about it now, but if it makes sense to push the date back in the future, at least for security updates, I believe they will. IE6 only reached EOL last year after market share dropped to low single percentages, despite Microsoft doing everything it could for years before to get people to stop using it. I expect the PSF to do the same.
How would you put text on a side panel ...
Redditor since 2011, has yet to find the save link
You're right about that. Given a choice I'd pick Python over JS nine times out of ten (the tenth time is when I want to chain String and Array methods).
I'm frustrated with it because in my limited with, there is no difference except mechanize (I think) doesn't run in 3. I'm not proficient enough to know what all changed, but usually the only things I notice are the parentheses on print and the Unicode stuff.
Why not just simple Linux commands like % cat * | sort | uniq -c | sort -n -r 
The plus means one *or more* matches of the characters in the set. So the regex you had would match 'A Name' or 'B Name' but not 'Another Name'. Without the plus it would only match exactly one character in the first name. 
No problem!
CentOS / RHEL 7 have python 2.7 and are supported until at least 2024.
Python package management feels like you're trying to dig an enormous hole with a basic shovel. There are better tools in other universes, but at the end of the day, it still gets the job done. JS package management feels like you're trying to dig a hole with a rotten pineapple that smells like dead tuna and is filled with fire ants.
I've been procrastinating setting up virtualenv bc I haven't found a simple, interesting tutorial or video. Basically just 2.7 for life in the meantime. 
Bazinga. Came to suggest similar. 
I prefer print "" over print("") when I'm using python. Is there much benefit to the newer ?
Well written. I wish I knew earlier the concept of everything being an object in Python - makes things easier to understand when learning the language. 
HOTFIXES submitted by contributors in the last hours then upgraded to `0.4.5`
I rewrote a python script from a YouTube tutorial that works with Amazon Alexa and repeats what places are open for dining on campus. Problem is, I have to get it published so I can actually use it without hosting a local server and then directing traffic to some server on my Amazon developer account. 
Why would that be necessary knowledge? It's like a nice to know thing at best.
or subcontract to Indians
Well, to say you've picked an easy goal would be a bit misleading. None the less, if you're using a modern version of the language &amp; tkinter you have a few options to get this accomplished... First, since it's a class, forgive my vagueness. [Here is a full reference](http://www.tkdocs.com/tutorial/onepage.html) First, what you're asking will require a redraw every time you move that box. Now, I'm unsure if you simply mean like a box with drag-drop functionality, or what.. But, making a box, and having it appear in different part of your grid will require you update the window/frame widget as necessary. Honestly, I'd worry more about getting labels to be added to a box &amp; having that show up before you start worrying about giving the box listeners for the mouse and tracking the mouse seeing where the depress is let go &amp; moving the box to a different column/row in your window/frame. Simply adding an item to a box though, may be as easy as applying a label widget in your box widget.
You're joking. There's a long list of breaking changes. 
I still don't understand why the heck you would do this or when it would be useful. I need a more detailed but still simple example. The adder idea is like the car class idea. It doesn't demonstrate a practical example for me. Thanks !
So, suppose you work at a company that receives data from lots of sources, in different formats. And so you write parsers for all those formats. But it's really annoying to have to duplicate lots of logic (like error handling) in every parser. Why not do something like: def parse_csv(input_file): ... def parse_xml(input_file): ... def parse_excel(input_file): ... # You get the idea. PARSERS = { 'text/csv': parse_csv, 'text/xml': parse_xml, 'application/vnd.ms-excel': parse_excel, # etc. } def parse_file(input_file): file_type = identify_file_type(input_file) parser = PARSERS[file_type] try: parsed_contents = parser(input_file) except ParseError: # Do the error handling here... In many languages you'd have to do a *lot* more work to get something like this. In a language with first-class functions, it's easy and natural.
In regards to the Unix commands, I got sidetracked by some Python help on stackoverflow after getting a bit confused on how to set my LC_ALL = 'C' Here is the new Python code for prosperity: import os, sys #needed for looking to a directory from sys import argv #allows passing of arguments from command line, where I call the script from collections import Counter #allows the lists to be sorted by number of occurrences #Pass argument containing Directory of files to be combined dir_string = str((argv[1])) filenames = [] #Get name of files in directory, add them to a list for file in os.listdir(dir_string): if file.endswith(".txt"): filenames.append(os.path.join(dir_string, file)) #add names of files to a list #Declare name of file to be written out_file_name = dir_string+".txt" #Create output file outfile = open(out_file_name, "w") #Declare COUNTER to be filled with lines seen lines_seen = Counter() print("\n Reading Files in " + dir_string + " ... \n") #Parse All Lines in all files for fname in filenames: #for all files in list with open(fname) as infile: #open a given file lines_seen.update(infile.read().split('\n')) #Organizes the list by number of occurences, but produced a list that contains [(item a, # of a occurrences ), (item b, # of b occurrences)...] print("\n Writing to File " + out_file_name + " ...\n") for item in lines_seen.most_common(): outfile.write(str(item[0])+"\n") outfile.close() 
Assuming there's lots of duplication, this might solve ops problem
Yes, why not?
Honestly if you need a place to break down and test a regex check out regex101.com. I use it all the time.
This is a much more useful example. I guess the only other thing that confuses me is why do this over creating a class ? 
You don't really need any state though. 
Oh ok. I think I get it. Thanks. 
Let's say you're working with lists/"matrices" and want to use component wise operations on them. This is essentially just using map for lists, but for matrices depending on how you store them it can get a little weirder. Using this you can just write out the logic once, and then you're good. 
I come from javascript, so it's a little different, but I learned to never trust state, especially object state. I prefer to work with JSON data structures with functions on their own. 
Good article. I'm assuming the "Holberton" that was found was from the bytecode of the program?
Another option is to use a MapReduce library like MrJobs. This is the sort of thing MapReduce excels at! In psudocode, you get class MyJob def mapper(line): yield line, 1 def combiner(key, values): yield key, sum(values) def reducer(key, values): yield key, sum(values) This should return each unique line with its number of occupancies. Additionally, this approach scales linearly with hardware and files.
I like KDevelop, but I find myself just using Kate most of the time. Perhaps someone can give me a 'killer feature' rundown?
Is this similar to virtualenvwrapper? What else can this do? 
In C you'd do it with pointers to functions. In C# it's OK, because the language picked up delegates and anonymous functions early enough in its history to be useful today. In Java... meh. Plus, an awful lot of Java codebases predate even the limited functional-style support Java has now, meaning that people mostly can't use them due to already being locked in to older patterns (and being unable to stop and rewrite the entire world around new features).
No correlation? Except the fact that 100% of implementations that do this have ordered the dict? :P
Can you elaborate on why you should never trust state and what that means?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/functionalprogramming] [Python's functions are first-class objects (a short &amp;amp; sweet tutorial on closures and other functional programing topics) • r\/Python](https://np.reddit.com/r/functionalprogramming/comments/60sx1w/pythons_functions_are_firstclass_objects_a_short/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
again hard to explain... gimme a bit and i will see if i can write something to explain alot xD
I like where the idea is at, but, isn't *this* where debuggers are helpful?
I'm glad. And I thought it was a good discussion too, which is why I didn't downvote him.
Do not store lines in your lines_seen, store hash values instead pydoc hash pydoc hashlib
State can become invalidated, outdated, or corrupted, so you always have to make sure that the state is what it says it is and that it's up to date. It's obviously not impossible to do, but it adds a lot of code to keep track of. So reducing the amount of state that you have to do that for is of course welcome :)
But it isn't over. You also have to remember to deactivate it when you're done AND remember to active it again if you want to run this project again 
I was sceptical, but it really looks great!
Challenge it, the lack of women into coding is weird in my mind. There seems to be nothing intrinsically "masculine" about programming but very women are in the field. Oh also the getting paid more part was a bad joke sorry
PEP 484 defines the optional type hints that are now included in Python, but Python doesn't have native support to actually do anything with those hints. MyPy is one project that uses them to do offline static type checking.
Thanks everyone!
Years ago I wrote a [tutorial](https://github.com/Lysander/snippets/blob/master/Python/python-misc/simplemenus/TUTORIAL.md) for beginners how to design simple text menus. It demonstrates the capabilities of functions being objects - it is written in German though.
Yes - but as far as I know that isn't available as a community edition thing you can do. That's why I mentioned I'd buy it if I were making money off their software. I really like JetBrains stuff. I use PyCharm and AndroidStudio myself (hobby projects) and really enjoy them both. But in the FOSS space I haven't found an all-in-one IDE that I'm really crazy about yet. Eclipse can do it, but it never really clicked for me.
Still a fan of fuckit Edit: Be sure to read the documentation, one of the best out there. https://pypi.python.org/pypi/fuckit
I would 100% use this if it worked in Python 3.
Great job. :)
Not every problem is reproducible. Not everyone running python scripts and technically able to fix them is willing or available to do so. If it looks like a five minute job, I might take a stab at it, if it looks like it takes me five minutes to figure out the stack trace and tools I never used before, I'll probably not. --- Also, on a more general note, the universal law of user attention applies: My plan for today was to try this sweet idea for upfuzzling the sip module, but we got this "urgent" customer job to be run first, and Jeff said it would be really nice if I used the new build for that... only I'd have to build it myself because reasons that I should find out why Joe still hasn't fracking solved yet and now the build script is throwing that weird error again. At this point, the stack trace has about six percent of my total attention capacity. Anything that makes parsing it faster and involves less brain cycles makes it more likely I actually get *something* done today. 
And it only took them 7 years. I also wonder what these "other IDEs" are.
I'm always very glad of your blog posts. Thanks again. Out of curiosity, do you know when your book will be ready?
This is fucking great, very nice, you should even try to port it to e.g. Ruby! However, really, you have to add support for Python3 to be viable
Why are you saving the file names to the filenames list? Couldn't you reduce memory use by simply processing the file at that time instead of iterating over the list at a later step? To remove the trailing "\n" you can use .rstrip(). 
check: https://www.reddit.com/user/Kerbobotat/saved#links 
This is a very neat feature!
Try to install numpy and scipy in the same requirements.txt file...
interesting fresh content, new thing to learn &amp; explore 
Recently I was working on gRPC services where I had lots of duplicataed code where I was doing the input validation. Let me explain with bit of code: class UserStoreServicer(): def AddUser(self, request, context): try: validate_add_user_request(request) except ValidationError as e: context.set_details(str(e)) context.set_code(grpc.StatusCode.INVALID_ARGUMENT) return user_store_pb2.User() # when things fail I need to send an empty class ## do other things def UpdateUser(self, request, context): try: validate_update_user_request(request) except ValidationError as e: context.set_details(str(e)) context.set_code(grpc.StatusCode.INVALID_ARGUMENT) return user_store_pb2.User() ## do other things def RemoveUser(self, request, context): ## same pattern like above pass def AddFriend(self, request, context): ## same like earlier, but here default reply type is different try: validate_add_friend_request(request) except ValidationError as e: context.set_details(str(e)) context.set_code(grpc.StatusCode.INVALID_ARGUMENT) return user_store_pb2.UserFriend() ## do other things So much code duplication! Now with decorators magic, I can write a decorator which does all this. Here is my decorator: def validator(validate_func, default_reply_class): def decorator(func): @wraps(func) def wrapper(*args, **kwargs): # args = [UserStoreServicer, request, context] request = args[1] context = args[2] try: validate_func(request) except ValidationError as e: context.set_details(str(e)) context.set_code(grpc.StatusCode.INVALID_ARGUMENT) return default_reply_class() return func(*args, **kwargs) return wrapper return decorator What does the decorator do? It receives which validator function to run and which class object to return when validation fails. Now that I have this decorator, my earlier code becomes like this: class UserStoreServicer(): @validator(validate_add_user_request, user_store_pb2.User) def AddUser(self, request, context): ## do other things @validator(validate_update_user_request, user_store_pb2.User) def UpdateUser(self, request, context): ## do other things @validator(validate_remove_user_request, user_store_pb2.User) def RemoveUser(self, request, context): ## same pattern like above @validator(validate_add_friend_request, user_store_pb2.UserFriend) def AddFriend(self, request, context): ## do other things Wow, thats so small and nice now. If you want to read more: [1](https://docs.python.org/3.6/library/functools.html), [2](https://wiki.python.org/moin/PythonDecorators), [3](http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/), [4](http://python-3-patterns-idioms-test.readthedocs.io/en/latest/PythonDecorators.html) Let me know if you have any questions :)
See the "No HTML message" label: https://lists.debian.org/debian-kde/2016/07/pngOFJiqbeeSY.png So many possibilities!!11
That's cool, it does parse the cookies correctly. Unfortunately this is not what I want to validate :)
Thank you, kind words. Man, not really sure. Sooner the better. :)
Yes, but the cookie name is not the same. Anyway, I know the standard says: It MUST be possible to combine the multiple header fields into one "field-name: field-value" pair, without changing the semantics of the message, by appending each subsequent field-value to the first, each separated by a comma https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2 But in my case I want to check if HTTP server actually did that or not.
You can already do this in python : If condition: raise Exception("foo") One line works But there is a reason we don't do it. It makes the whole thing hard yo read. 
But you can't install a package from another directory, if there's a venv attached to it.
What terminal colour scheme is that? Gorgeous 
Neat. I’m going to try out using a BKTree for LSH-based text deduplication. My current approach is O(n^(2)).
I did not say opposite. It's all about implementation, not actual change in syntax as f-strings is. If dict is ordered, it's ok, my program, which relly it is unordered will not break, but code, that written for pypy3.5 with f-strings may not work on cpython3.6.
Looks great but I would not use this on a production environment handling sensitive (customer) data. This is gonna leak sensitive information into the logfiles which is a nogo depending on the kind of data you process.
And if you're running Windows Server on AWS look out for the pre-installed x64 Python 2.7, which is on the System account path. If you try and run some 32 bit Python as a Windows Service the 32 bit python.exe will load the 64 bit python27.dll. Game over...
Why the module hack? 
This was not a homework problem, I'm not in any programming course. It's merely a problem I came across that I was interested in understanding further. You are not obligated to answer.
Ah, so me fixing the problem is "bragging" and you complaining is "contributing"? Sure.
It can't be vim, he's just entered the python command and he's running the script. It's a Terminal with some sort of Powerline theme. 
I was about to but it's already been done by /u/paradoxxx_zero [here](https://github.com/Qix-/better-exceptions/pull/1)
Correlation between implementations, not with ideas.
Thanks for this!!
Spit out the koolaid. The only things slower than jetbrains editors are things based on electron and some versions of Eclipse.
This x 1000
For a basic solution, try using Requests to get the page source, then use something to pick out the elements in the source (LMXL, BeautifulSoup). As javelinRL said, sometimes it's even easier if the page is making some request to an API for the raw data (you can see with the developer tools in your browser, network traffic), you could try cheekily hitting the same end-point with a request.
Changelog for the lazy: https://docs.python.org/3.6/whatsnew/changelog.html#python-3-6-1
I agree! In a few rare cases, I had to use gdb + python-debuginfo to debug C extensions. In this sense, PyCharm isn't as powerful as say Visual Studio, which allows you to debug C#, C++ and C++/CLI code almost transparently. But for pure Python code, PyCharm and its debugger do a wonderful job.
Why don't you just post some sample content first?
I think the issue was more his attitude.
What about hash collisions? Two objects can have the same hash even if they are not same. Arguably, it is unlikely but possible. Are you sure your suggestion is a good idea? hash(obj, /) Return the hash value for the given object. Two objects that compare equal must also have the same hash value, but the reverse is not necessarily true.
Also not cool: whining :P
Okay, so far so good! 1. I'd make one of these "~/myvenv" for any given project that has different requirements? 2. I didn't get a deactivate in my bin, but I suppose i can just close the shell. 3. Thanks so much bro! I got a few other comments and some downvotes but this was seriously a better guide that most of the stuff out there that I've read. 
Do you have a suggestion to have `import raise_if` in another way?
Just an FYI: That set of commands will use almost double the amount of memory as the sum of the size of the files. sort keeps the whole corpus in memory. It's not going to be double the size due to uniq, but uniq also keeps a bit in memory. A very slight, possible improvement would be `sort * | uniq -c | sort -n -r` which would remove the overhead of `cat` 
Your other option is to use Kyoto Cabinet and store your strings/counters on disk, eliminating your memory constrain: http://fallabs.com/kyotocabinet/pythondoc/
The normal way. 
Don't wrestle with pigs 😉
Looks interesting but I am done with projects that don't support python 3. 
Yeah, I'll probably pull it out once I'm finished, but for a lot of the stuff that has me scratching my head, this might help.
Yea we are a data science shop. So we typically code in Python, so for us it was perfect.
TODO: remove before going to production. We all know how this goes... ;-)
Pew is similar to virtualenvwrapper, and not very simple to set up and start using. 
In theory, that's a sound argument. [Not so much in practice.](http://www.catb.org/jargon/html/P/phase-of-the-moon.html) I'm not even sure what's your point. Technically, yes, if I have a full snapshot of the system before execution, and I rerun it (with the exact delay (clock? Walltime??)) between the snapshot and the execution environment, it should, by all means, be reproducible. That's not the execution environment for most of my scripts, however. 
what is the normal way? 
Yeah...they unbroke `u'some unicode string'`
&gt; y if you need a place t Sometimes regex101 is not enough, then I usually go to debuggex.com
What's a hook? How does that work?
Cool! How does it compare to something like DEAP?
`from raise_if import raise_if`
thank you
How could one repository support both? I'd rather fork if it supports a different version. 
Are you serious? Surely you can find a tutorial to support both python 2 and 3 from same codebase? People have been doing it for over a decade, there are tons and tons of docs and tools and tricks. Many popular frameworks do this, even behemoths like Django support 2 and 3 from same codebase, so this should be no problem for a simple package like this. Besides, it is not only about you, it is about everyone else as well. You can fork as much as you want but the rest of us has to deal with the debris if you decide to publish (and neglect and duplicate effort and all that bad stuff).
Like every major python libraries: make compatible code, use compat libraries.
How do you walk around with that stick up your ass?
His attitude is what's actually creating real python3 library support, though. Not a bunch of people whining about lack of support who won't even spend the slightest bit of time investigating.
You need to differentiate between [interior and exterior angles](https://books.google.com/books?id=3geYp44hJVcC&amp;pg=PA7&amp;lpg=PA7&amp;dq=turtle+graphics++exterior+angle&amp;source=bl&amp;ots=VZ8scXpphv&amp;sig=XJ_5ruCZNWBGANZZ7p1-1zxIiLs&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwii1sfZwOrSAhWJkJQKHcZuBqIQ6AEISTAJ), and pay careful attention to capital vs. lower case variables (i.e. you only use "A", not "a" in your examples).
Thanks u/paradoxxx_zero, Python 3 support merged and released.
Works in 3 now :)
Done :)
Still not entirely sure what it does, but its documentation is hilarious. &gt; Still getting errors? Chain fuckit calls. This module is like violence: if it doesn’t work, you just need more of it.
Because where I work we don't use Python 3 and I haven't worked in it enough to know the differences quite yet, etc. I wrote the original version in about 5 hours straight and it ended up being 4am before I went to bed, so I didn't bother trying to get it to work in Python 3 since I didn't immediately need it to. Another user added Python 3 support and it's since been released :)
Nope, that's the actual output. Just Zsh + iterm2 with a ligature font and powerline.
If your worried x could be 0 Usual: Try: A=1/x Except: Pass Using fuckit With fuckit: A=1/x
I'd love to see examples :) I'm writing a bootstrap compiler for a little programming language I'm designing and had about 30 frame deep call stacks with lots of context that was being lost in the output. I got tired of stepping through each call, which took ages, just to see the locals. Hence why I made this. So at least on a moderately complex program, it still helps, though in linear fashion it gets less and less "pretty" whilst remaining just as useful.
Ah I see, hahaha. Could have been handy a few times in debugging.
Nice! going to try that suggestion.
Could this hook be integrated in the library itself?
This seems cool but I can't quite figure out what to do with it yet. I'm a grad student in the sciences who does a lot of data analysis. Can I use this for fitting complicated functions to my data? Or is this something where I develop a function that I want to minimize, and then use `GenOpt` to minimize that function? (ie is this a pure optimization framework?)
Thanks, but that's not it. It's supposed to be: print(line.replace(textToSearch, c), end="") Even with that I get the same error.
I don't want to give too much away but I will definitely take precautions with going about building it out in terms of using professionals and covering myself.
how is js most popular language for data scientists?
It sounds like you've done a lot more than most students do, and as such you should be a strong candidate for positions that are open to recent graduates, so apply to them and go from there. You're working under the misguided assumption that you're going to be competing for jobs against MIT PhDs. You're not. You're competing for jobs with people who spent their summers working the drive thru at McDonalds. From what you've written here, I think I'd be likely to bring you in for interview, solely based on the fact that you've done some development work outside of your degree program.
I don't know who thought this Isomorph-JSON-Schema syntax was a good thing but I profoundly disagree with that person. Good luck with your project, though, OP.
Python 3 support has come.
Windows users: the default codepage for the console is cp437, which is unable to display the Unicode L-bracket character \u2515, but CAN display \u2514. If you get errors or odd characters, you can change line 158.
[Hooking](https://en.wikipedia.org/wiki/Hooking).
Nice, I've looked at some of these recently. The speed is nice, but I'm definitely partial to the approach schematics or marshmallow takes from an API perspective. Relying on the end user to utilize some foreign schema language isn't completely ideal. You could always serialize a modeled schema into that schema language though and have the fast validation that way.
&gt; sort keeps the whole corpus in memory Unless it's a proper implementation which uses [external sorting when necessary](http://vkundeti.blogspot.com/2008/03/tech-algorithmic-details-of-unix-sort.html) and just uses some temporary files when the data do not fit memory.
Pip on windows was partially broken. I'll take a maintenance release when something so basic does not work.
His attitude should be condescending. Instead of spending a bunch of time bitching about the problem, he just fucking solved it.
I'm guessing a big one is that this isn't a Java app.
You're fantastic -- I didn't even have time to post a pull request with the proposed fix. :)
It seems there are flags that have been added for Android compilation, I'll have to take a look at this, verrry interesting.
If one core developer is causing a problem (as he implies), what checks are there to maintain core developer status?
This won't work for a bunch of reasons. Next time you post code like this on reddit try using github gists, or just place four spaces before each line to get correct formatting. 
Yak milking. One minute, you're updating a library, next minute before you know it, you're milking a yak.
&gt; entirely new syntax ^[citation ^needed]
Great😀
Not at all! I agree it should have Python 3 support.
I couldn't care less about speed, I want programmer productivity and accuracy to start with. How do all of these validation libraries compare for these (to me) essential features?
The bulk are dealt with by 2to3. The killer for most people for whom I have great sympathy is bytes vs str vs unicode, but then there's been plenty of time for libraries to be migrated and the majority have been. For those that haven't, unless folk offer to help out, they will eventually die. Pay your money, take your choice.
Good thinking - I'm pretty beginner so I haven't given too much thought to reducing memory until now
You can hear anything you like but it can't be called Python 2.8, as the PSF owns the trademark. All ready discussed a trillion times so I guess one more doesn't make much difference.
You should post these sort of questions to /r/learnpython, folks around these parts can be pretty dickish to newbies.
Pip is not part of the stdlib so are you saying a new pip release, a new python release or both will be needed? What does "partially broken" mean anyway?
Also, you are at the boytom of the hole and have to decide if you dig deeper or to get out of the hole😀
Can you explain why it won't work? I'm curious to know.
I commonly use it when I patch package B to fulfil the needs of project A.
https://github.com/pypa/pip/issues/3964 Some discussion here. I ran it the issue momentarily when I started a 3.6 environment using the pip installed from the Windows installer. I haven't been able to confirm if the pip included with the Windows installer is working now.
True, usually, these would be useful when the language provides a large set of higher order functions. Python, though, steers away from this.
You can compile it on a Mac; [here's a screenshot](https://www.kdevelop.org/screenshots/kdevelop-5-beta-1-mac-os-x). There aren't official builds currently because: * None of the core developers use macOS. * Compiling for macOS requires an expensive shiny computer, whereas Windows will run in a VM. * The potential user base is relatively small. That might change in the future, /u/kfunk87 was considering it not long ago. EDIT: &gt; &lt;tosky&gt; FLHerne: and you can answer "LOOK A VOLUNTEER!" &gt; &lt;tosky&gt; too direct?
Ack, please rename it! Yeah, I realize that will probably not happen, but the Python naming culture is beginner-unfriendly: similar names which give no clue as to their functions. pypy, pypi, mypy, there are probably more I don't know about it. IMO, it's not cute; just confusing for no benefit. Also: venv, virtualenv, pyvenv, pyenv, virtualenvwrapper ...
*wanted* might also be interpreted as "I wish I could use this at my job"
Wouldn't you use Ruby in that case?
smalltalk also uses function objects c# might (im not sure if its just a wrapper) ruby also does(procs) &gt; In computer science, a programming language is said to have first-class functions if it treats functions as first-class citizens. Specifically, this means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures.[1] Some programming language theorists require support for anonymous functions (function literals) as well. From the wiki Function objects fullfil this.
I would not use Ruby for anything ever. Not even for torture. There are limits.
Is this new or is it simply a repeat of the news that came out a day or two ago about a **BETA** release of pypy3.5?
Most of my friends in the Python community are pretty helpful people. Most of them also love discussing crazy new ideas. However they are also by and large very employable... leaning towards already employed This kind of post is functionally equivalent to an R4R post titled: "M4F dm me for more details" The smallest amount of additional information about why someone should care will exponentially improve the quality of your responses. 
I have the feeling that the future is polyglot :-) and friction when coming back to projects in various languages isn't good.
/r/learnpython is a great community to ask Python questions!
I might use that, though I didn't want to rely on any dependencies. Until Windows 10 (a specific build) colors weren't supported in Windows without Winapi integrations, making things increasingly difficult. There is a ticket for iPython support - I'll take a look shortly :) EDIT: `colorama` doesn't check for color support. It won't do anything the current code doesn't already do, other than better (?) windows support. EDIT2: I added better color support, including support in Windows as well as wider support in unix-based systems.
Thanks
Is code eval working anymore? I can't get any verification emails from them. 
Same, I tried a few different emails and none of them are receiving activation emails. 
I mean you're not entirely wrong, but even saying something like "well these errors don't fix themselves, I just quickly fixed a few myself, I'm sure you could do the same" would get the exact same point across without being so toxic. No one wants to work with someone who will snap at you for every annoyance. You'll be much more successful in pretty much all areas of life if you are able to communicate a frustration clearly without insulting the person causing the frustration. 
Does it support mypy? 
I'm not actively seeking one. I'm currently a software development student and figured if it has the potential to get you in contact with potential jobs, then it may be worth it to practice and solve the problems they're posting. If and opportunity comes by I would definitely entertain it.
Is SQL a programming language?!
Yes, it can be used to fit as complicated a function as you'd like. Genetic algorithms can handle derivativeless functions--you just need to supply a function that can take the variables as input and output a value. It could be used for fitting the coefficients in a neural network, for instance.
Yeah but is there a need to use these memes so unnecessarily in something really interesting. 
It's worth it for the coding / problem solving experience. Unless all the problems on there are too easy for you, in which case don't bother.
The OP obviously has some interest in computing, and we would look at a candidates wider knowledge and experience. We would likely start someone such as OP off in jr testing and sysadmin role.
Shoot me your email address, and I will contact you.
I've posted questions in this sub about some items I was a learning and everyone was very helpful. 
We have met and hired a couple of our developers through local user groups.
Off the top of my head you can do this with pure Python, no imports required; 1) Open the file 2) Read each line as a row 3) Split the row into columns using whitespace characters myarray = [] with open('foo.txt') as myfile: for row in myfile: row_items = row.split() row_items = map(int, columns) # convert strings to numbers myarray.append(columns) If your numbers are in a different base you'll need to pass a ``lambda`` to the first argument of ``map``. You can also substitute the map for what's known as a list comprehension. Note that ``myarray`` is only guaranteed to be regular (read: each row is the same length) if your text file is regular. Otherwise you'll need to pad each row, or truncate each row as desired. Edit: I missed the urinal. After you have ``myarray`` you can do something like this; columns = zip(*myarray) This is an idiom that basically does the same thing as this; columns = [[row[column] for row in myarray] for column in range(min(len(row) for row in myarray))] Transposition in numpy is a better idea.
I don't even understand this one: &gt;&gt;&gt; values = (0.1, 0.5, 1) &gt;&gt;&gt; makeAmount(4, values) 5 How are you supposed to get 5? Either you can use a number more than once and there's far more than 5 ways, or you can't and you can't make a 4 at all, or you can use numbers multiple times but only count solutions that use a unique combination of numbers, in which case there's 7. The hell am I missing?
I am not very familiar with DEAP but from briefly looking at the documentation, I don't think it has functionality for real-valued functions. It seems to be focused more on combinatoric problems, which is historically where GAs are more often used. My implementation is exclusively for real-valued functions.
what the hell is that thumbnail 
Visualization perhaps?
&gt; The python parser can take a while on first-load, because we have to parse all the relevant builtins/stdlib first. There's a small progress-bar bottom right, with a togglable list of the files currently being parsed. &gt; I did not see this and I looked. &gt; You should be able to edit stuff just fine while the parser is running, just without the shiny features. If the UI hangs on the parser at any point, that's a bug. Can you confirm whether that's the case? &gt; I was not able to move the cursor nor select from the menus. Eventually Windows marked the window as "Not Responding" &gt;&gt; Will KDevelop ever support moving the cursor around in virtual space? By that I mean moving beyond the end of the line or the end of the file &gt; End of line: Block input mode, Ctrl-Shift-B (also affects selection behaviour). Does this work for anything other than selecting blocks? Thanks. 
Not yet!
Noob question, but how do you actually update Python on windows? Can I just download the new version from python.org and run it over the top of the old install (version 3.6.0)? Or if not what is the command to update python via console? 
You know I identified you as an ESRI user? Not from your username. Not from your post history. Nope, it was because you are mentioning that you want better exception handling and you use python 2 because of a third party application. 
You may not want to know
You're saying a month and a half like it was their only possible priority. Sounds like they addressed a whole slew of people's problems, just not yours
When I did an in-place "update" for Python, I just downloaded the newest installer from Python's site, and installed it in the same directory as the previous version. If you're not sure if all of your packages are compatible, then you can install the new version in a different path, and change your PATH environment variable to the new Python location, to test it. If something breaks you can just switch your PATH value back. 
You use anaconda and wait for them to add the new version. It usually takes a few weeks. Just close your IDE down before you run `conda update conda`.
I'm a pretty good Python programmer with a modest understanding of functional programming, but I'm struggling with several of your lessons that ask me to use functional methods (which have not been taught yet in the course and that I don't know) but where I see an obvious non-functional solution. For instance, the Fibonacci sequence one would be trivially easy with a `while True` loop, but I don't see any good way of doing it using a generator expression as the question suggests. Perhaps a pair of `yield 1` calls followed by some kind of recursive `yield from` statement? It seems a *lot* harder than a non-recursive solution with a loop. The testing system is rejecting my solution for `uniquify`, but not saying why (am I not allowed to use loops in that one either?): def uniquify(iterable): prev = object() for obj in iterable: if obj != prev: yield obj prev = obj (A better approach still would be to outsource this one to `itertools.groupby`.)
I'd guess the issue is due to floating point error. Repeatedly subtracting `0.1` from `4` piles up a lot of floating point rounding errors, which may make some code not produce solutions that *should* be valid (if the floats rounded perfectly). For example: 4-0.1-0.1-0.1-0.1-0.1 Out[164]: 3.4999999999999996 I'd suggest modifying that example to use integers so that these kinds of floating point math issues won't be a distraction.
What format?
It's a two number 1X2 array. [__ , __]
Literally less than a second on Google: http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html#the-print-function For example: print 'Python', python_version() print 'Hello, World!' print('Hello, World!') print "text", ; print 'print more text on the same line' vs. print('Python', python_version()) print('Hello, World!') print("some text,", end="") print(' print more text on the same line')
What do you mean it won't compile? Like a program wouldn't run in a AMD Bulldozer or Piledriver?
Yes, that would be really appreciated. Thank you.
And I'm still sitting here with 2.7.... should I join the party?
The `sigma` lesson has a number of issues. To start with, the first sentence of the second paragraph (where it actually starts describing the `sigma` function) is really garbled. I think the issue is that you're mixing a description of what arguments `termFunc` takes with the description of what `sigma` takes. Don't try to describe both in a single sentence, it's far too confusing. Another issue is it's not clear what the last term of the sum is supposed to be. It says that the last term is where the value passed to `termFunc` *exceeds* b, but I think it actually wants to stop *at or before* b (so the last value is the last one that is &lt;= b, and applying `stepFunc` again would give a value &gt; b). Finally, I'm simply not able to pass the test, and there's no hint at why. The question is so complicated, with so many moving parts that I have no idea where my bug is (if I even have one). It would be very helpful if the error message did something to direct me to what it thinks is wrong, rather than just `Failed. Wrong answer`. For instance, tell me *which* answer is wrong, since I'm computing three of them! They're all about what I'd expect when I test on my own system (`55`, `35` and `0.7858971648964468`). Could there be another floating point rounding issue with the calculation of Pi?
That'd actually only update the package manager itself, you'd want something more along the lines of ```conda update python``` - and coincidentally it looks like 3.6.1 is available right now: Fetching package metadata ........... Solving package specifications: . Package plan for installation in environment C:\Anaconda3: The following packages will be UPDATED: anaconda: 4.3.1-np111py36_0 --&gt; custom-py36_0 python: 3.6.0-0 --&gt; 3.6.1-0 Proceed ([y]/n)? They tend to be pretty quick with minor updates, but bigger ones can definitely take a while longer. They also waited on 3.6 for a new release of Anaconda they were working on. If you like to live on the edge you can also do ```conda update --all```, or if you'd like to just stick with the Anaconda releases you can do ```conda update anaconda``` and wait until it's included there. Personally, I create new environments with something like ```conda create --name py361 python=3.6.1 anaconda``` and test in those first for any major updates.
I still would have thought SQL would be higher
I will be messaging you on [**2017-06-23 03:27:45 UTC**](http://www.wolframalpha.com/input/?i=2017-06-23 03:27:45 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/60mxg7/kdevelop_51_released_python_36_support_improved/dfak15z) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/60mxg7/kdevelop_51_released_python_36_support_improved/dfak15z]%0A%0ARemindMe! 3 months) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dfak22s) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Not in python, no. You could get a hacky solution by referencing `**locals()` but it was ugly and confusing. String interpolation like this is common in other languages, though, and helps with readability. That came out in 3.6 a month or two ago, this is 3.6.1's release.
I wrote a Python script to download all the images off porn threads on 4chan using bs4 My magnum opus
I write a lot of AWS integration, and lambda still uses 2.7. I'd love to upgrade, but...
not supported yet.
What kind of things usually break pypy compatibility?
As with any open-source project, it's usually the community that ostracizes them since they're not being productive. A good talk on this is ["Open Source Projects and Poisonous People"](https://www.youtube.com/watch?v=-F-3E8pyjFo), which is from the developers of Subversion (IIRC) on this very subject. It's long but it's an interesting insight into dealing with the economics of people in a decentralized way. 
It's the Australian version of the shot putt down with a shark, obviously.
The "blake2" library needed for a type of encryption fails to compile. Then whenever you start Python it complains about that the module is missing. It only happens if you use -march=bdver2 (or other bulldozer/piledriver architecture). You can use mtune though. 
Simply not compiling for a major architecture sounds like a reasonably important problem. It's now going to be a minimum of six months into the 1.5 year life of 3.6 before people can compile python for AMD. That's certainly disappointing. Worse, the link to the gentoo patch suggests it's just a bunch of nested comments and it compiles if removed. The python link suggests there's more that needs to be fixed up in that module, so I don't know. But if it was just deleting comments....
How do we access this data so we can manipulate it 
All of these validation libraries are compare by validating this data: DATA = { 'user': {'userid': 5}, 'tags': [1, 2, 5, 9999, 1234567890], 'style': { 'width': 400, 'height': 400, 'border_width': 5, 'border_style': 'solid', 'border_color': 'red', 'color': 'black' }, # "optional": "string" } And you can found all cases in https://github.com/guyskk/validr/tree/master/benchmark. Remarks and suggestions are welcome!
&gt;Can I just download the new version from python.org and run it over the top of the old install yes, its that easy
Nice one! Thanks 
Thank you for your advice!
At some point, you're going to call a function that actually *does something*. `cv2.someFunctionThatFindsPixelsOfACertainColor()` or whatever. You'd do `whatever = cv2.someFunctionThatFindsPixelsOfACertainColor()`. Then `whatever` will be whatever data cv2 returns. You'll need to read the cv2 documentation to discern what value is returned and how to work with it. p.s. /r/learnpython is the place to ask homework questions
How do you think about JSON-Schema syntax?
Why fo you need to compile it yourself anyway?
&gt; if you have a function of 3 variables, it will return 3 floats. Maybe I'm misunderstanding. How can you optimize on 3 output variables? Everything objective function I've seen has 1 value. You can have constraints, but there is still 1 objective. &gt; DEAP doesn't allow for the variables to be floats It does.
Dunno who downvoted you but honestly I don't blame them. 3.6 has some great changes to async/await to enable comprehensions, and there are indeed many other useful things. I'm a data scientist, not a web dev, and even I have used the async/await list comprehensions in 3.6 and they're fantastic. You can google for the important changes between 3.4 and 3.6, but I assure you there are notable and very useful updates. If you're having compiling issues, you can likely find help by googling or use something like anaconda to get easily-installable versions of python 3.6.
You're confusing terminology. Variables are inputs. So like f(x,y,z). I'm saying that x,y,z would be floats. In most GAs, that is not the case. x,y,z would be forced to be integers. DEAP does not appear to take as input an x,y,z that are floats, based on the types of crossover operations it has. It might produce a float as an output though.
Moral reasons? :)
I only recently tried it. In my case, it was because OpenSUSE Linux was still only offering 3.4. However, I benchmarked a generic x64 build and an AMD piledriver-specific one and the benchmarks were generally 15%-22% faster on the version tuned to my CPU's architecture. There were even a few benchmarks that were significantly faster than that. The Python compilation process even has an option that tunes your compilation! I was thinking about making a post about this because I've never seen anyone mention it before. It's called profile-guided optimization. From the README: &gt;PGO takes advantage of recent versions of the GCC or Clang compilers. &gt;If ran, make profile-opt will do several steps. &gt; &gt;First, the entire Python directory is cleaned of temporary files that may &gt;have resulted in a previous compilation. &gt; &gt;Then, an instrumented version of the interpreter is built, using suitable &gt;compiler flags for each flavour. Note that this is just an intermediary step &gt;and the binary resulted after this step is not good for real life workloads, &gt;as it has profiling instructions embedded inside. &gt; &gt;After this instrumented version of the interpreter is built, the Makefile will &gt;automatically run a training workload. This is necessary in order to &gt;profile the interpreter execution. Note also that any output, both stdout &gt;and stderr, that may appear at this step is suppressed. &gt; &gt;Finally, the last step is to rebuild the interpreter, using the information &gt;collected in the previous one. The end result will be a Python binary that &gt;is optimized and suitable for distribution or production installation. 
Can you import sqlite3?
A tool to continuously scrape Facebook and Jupyter Notebooks to analyze the content with Spark. [See project here](https://github.com/isaacmg/fb_scraper)
If you're looking for speedup and execution time optimization, I urge you to have a look at High Performance Python (http://shop.oreilly.com/product/mobile/0636920028963.do). It covers a broad range of subjects, from built-in data structures to external libraries, profilers and such. 
You say load in grayscale, yet I'm pretty sure that's BGR, hence the blue.
I wrote a Twitter bot that scans for people asking, "Why do homeless people have dogs?" A lot of people can't imagine why a person who has trouble taking care of themselves would take on the responsibility of taking care of a pet, others would say they use the dog to get more money out of people. The bot replies with, "Homeless people have dogs because a dog will love you even if you're homeless." It's the piece of software I'm most proud of.
Yes and no. For example T-SQL (Microsoft SQLServer) is a full programming language with if/then/else, exceptions, variables and looping constructs. It's not a good general language but as a database stored procedure language it is awesome.
/r/learnpython Also, good advice for this and every other sub: read the sidebar. There's a section literally called "Asking Questions" that points to /r/learnpython. If you're on mobile, click on the "About this community" link at the top to see the sidebar.
Looking at the upstream commit that fixed the issue, they are [uncommenting the function with nested comments](https://github.com/BLAKE2/BLAKE2/commit/259e61dedee5383eac1a90db6ef88f9ccdcf6002#diff-ac1a341ec0ed38dc5d219572f4282287), whereas the Gentoo patch is just [removing it altogether](https://bugs.gentoo.org/attachment.cgi?id=465354&amp;action=diff). There are also many other changes in the upstream commit, and I would think python wants to pull them all in rather than cherry-picking individual patches, so it takes a while to figure out what plumbing, if any, needs to change on their side. Not trying to be rude, but if you have a patch that lets you build on bdver2 arch, it's not really a dire problem is it?
unexpected r/aww 
In 3.6 or something? Seems like I still had to install pip and virtualenv on ubuntu 16.04 and I think that's on 3.4. Well, that makes more sense in any case.
Excuse my newbieness, but what terminals does this work on? Cmd in windows, and the terminal in PyCharm?
I love it!!!!
God damn it dude
i made a lottery ticket simulator that can calculate how many tickets you'd need to win a specific amount, to show people that it's a huge waste of money. not that advanced, but i'm still just a newb.
FYI if you're doing a minor version update, for example from 3.5.x to 3.6.1, you'll need to do `conda install python=3.6`.
Cool story bro.
Write your whole program however it comes out of you. Make it work. Not pretty, just working. Now you know what your program does and how it does it. Now throw it all out, start over and make it nice. You only need to refactor once.
Or, and here's a thought, all projects don't test on all possible variants of all architectures. What you're asking for is simply entirely unreasonable. You're asking for a CI buildfleet that would mean that the test matrix for "testing on Linux" would need to include: - All supported kernels - on all supported distributions - on all supported architecture variations Are the devs expected to test on all Intel architectures since Core? Are they expected to buy and own machines running Core, Nehalem, Bonnell, Sandy Bridge, Silvermont, Haswell, Skylake, Goldmont, and Kaby Lake, as well as an approximately equivalent number of AMD microarchitectures? What about ARM microarchitectures? At a certain point the cost/benefit of spotting bugs at this level does not work for open source. If you care about this case, donate an AMD builder. Otherwise, stop moaning about how they broke your free product.
Or, list some features, then decide whether the refactoring will make them more or less difficult to implement. I don't think every function needs to be in a class for example.
All those requirements are true of C as well, but I don't think most people consider C to have any really functional focus. If you want to define things that way, go ahead, but I don't agree with the definition. 
But, make the original implementation work (at least to a milestone of functionality), then fork and keep and copy around. It's good to have the old implementation to use as a benchmark to see what your refactoring accomplishes.
Sounds like you've learned a lot on your way. This is a good thing. &gt; This meant I had to change some of my "data classes" so that it made sense that they owned some of these new methods. &gt; Long story short now I'm looking at my code, and remember this is all just for fun, and I'm seeing a lot of overhead. This shows that you know you went too far. Back up and start again. The good thing about refactoring a lot early on is that you learn to see patterns before you write any code. You'll find that you know that a new feature you implement is a data structure with some methods that act on the data, so you'll write a class first instead of refactoring to a class from a function. 
Back in the day, I wrote a program that tapped into the auction house protocol for Final Fantasy XI and told me where I could make money by, for example, buying low at Bastok and selling high at Jeuno. In the process, I discovered that `1 = Bastok`, `2 = Windurst`, `3 = San d'Oria`, `4 = Jeuno`, and also `0 = Crash the auction server`. Nowadays I do more constructive things, like [write cheating programs for a cube-stacking simulator](http://www.mcedit.net/).
I started programming as a hobby back in 1977 ... and what you just described is exactly why I love programming ... it's an art form and you're becoming a better programmer doing exactly what you just described.
So what's better?
I don't really develop with python anymore but I still use pip to install things like Ansible. It's truly awful. It never works as expected and sometimes just does crazy things. For example I've had instances before where I've installed something with pip and the thing that got installed upgraded a dependency which pip was using and it just broke pip. Usually it's just something stupid like I need to update pip or something but it's a nightmare. Most of the problems come back to the global scoping of dependencies and I get that there are solutions to this (e.g. virtual env) but I really cannot be bothered to dick about with venvs if I'm just trying to install something on a server (especially if I'm not using pip directly but via an orchestration tool). Not to mention the extra confusion of python 2 vs python 3 introduces. It honestly feels like pip fundamentally undermines python's ability to be used as a language for general purpose tools (i.e. ansible). If you want your code to work reliably on someone else's computer just use Go and distribute a binary.
First of all, it doesn't sound at all like you're wasting your time. Rather, you're trying out different architectures and paradigms, which is probably a great way to learn. But it sounds like your problem is that you have no measurement for what constitutes a "good design" for your code. So there's basically no way to ever come up with a good design, because you can design applications in a million different ways; all of which can be good. I'd suggest coming up with a list of potential future features that actually make sense in your program. If you have a design that can accommodate those future features, it's a good design, and there's no reason to refactor. The only time I refactor are when I have too much time on my hands (which is never) or when I need to implement features that my current design does not accommodate. 
&gt; Or, and here's a thought, all projects don't test on all possible variants of all architectures. It's fine. What's not fine is taking months to fix a show-stopper bug once it's been reported. &gt; stop moaning about how they broke your free product Just because it's free software doesn't give it the right to be shitty, and I say that as an avid open source / free software contributor.
There is no "better". It depends on the situation and what you want a given piece of code to do. For example, in your case, it sounds like there is some data that logically should be grouped together, so you'd probably want a class that's just a "model object" which represents the data model. This class probably is just a class with an init method (and maybe some get/set properties if you feel like diving into some of pythons more advanced functionality). Now, say you also have some code that acts on that data while also working with some other data set (e.g. Person and Car classes classes needs code that says Person A bought Car B). This could, depending on your apps needs, be a second class all on its own (maybe a car salesman who is a subtype of person, for example), or if the domain of your work is scoped purely on getting that car associated with that person and doesn't care about how, maybe you just have a function outside of both classes that is "SellCarToPerson" to handle charging the purchase price, writing the sale to a db, etc. Now of course that example is purely contrived (and also not a great one, you wouldn't want to write your sales code like that ever), but it shows my point: as with so so so much of computer programming, the answer is "it depends". Figuring out what THAT means and doing a good job of it is what takes years and years to learn
I guess the problem for me is all of these things I can do with functions so anything else seems like overhead. 
Here's a question, that hopefully helps clarify things: How much planning did you do before you started coding? Thinking in advance what you want from the project and where you want to go may in itself limit how much you put into it. Since at some point it works, which is often the most important part. Then as your design changes and you want to do more with it, look at how to adapt your original code.
&gt; my first "release" of my project was 100% functional, no classes at all We call that "structured programming". Functional programming is something else.
Wanna share your Github repo? :) 
So? It's not like I make it any big secret. They've migrated it to 3 for their ArcGIS Pro product, but my employer hasn't upgraded because it would break other things and.... gods, I hate all of IT sometimes.
Best thing when refactoring solo-projects: You bother no one! You can refactor like crazies and no one will complain! ...well, as long as you got some testing in place, so you don't break it for the end-users. Try that with an established project and they'll come with pitchforks and torches...
Says right in the OP that the project is on GitHub.
ummm...i don't read gud, i tend to skim opening paragraphs for some reason probably a bad practice
What is the "stop writing classes" video? 
I read this and every paragraph I'm like "yup, done that". Refactoring a small project is fun. You can apply any concept in a relatively small amount of time. That way you try out new things, learn, practice etc. You just need to accept that programming is your hobby. It may also be your profession, which would be great. The same rule apply as for any hobby: Have fun but don't let it get in the way of more important things.
Will be helpfull some desc, on the github page. And is interesting to the flow from a RSS feed and what do the ML in your app
When I moved from Matlab to Python for a project, I made my Python code world's better than the matlab code ever was. I was telling someone about this and the conclusion then drew was Python was better. Well, the *did* draw the right conclusion but for the wrong reasons. I was refactoring as I converted. I already knew what was supposed to happen since the research was done already! Of course it was better!
&gt; It's fine. What's not fine is taking months to fix a show-stopper bug once it's been reported. That very much depends. The golden rule of OSS is that you are owed nothing. The PSF license that covers Python makes it very clear that the PSF promise you exactly nothing about the good functioning of Python on your system. I absolutely agree that it's unfortunate that it still doesn't work on your system, and that that should be improved. &gt; Just because it's free software doesn't give it the right to be shitty, and I say that as an avid open source / free software contributor. Yes, it does. In *every legal jurisdiction in the world* OSS licenses allow OSS to be shitty. It's there in massive capital letters in every license you've ever seen. More generally, if your understanding of OSS is that you should get top-tier software with zero effort on your own part then I'm sorry, but you've been sold a lie. What you're doing right now is like seeing a hole in the side of a house, seeing it doesn't get fixed, and then lobbing rocks at the people working on the house. *You aren't helping*. *You are chasing away people who might want to fix your problem*, because if they don't fix it to your satisfaction then you'll probably carry on being an asshole, and frankly talented people have better things to do with their time than be complained about on the internet. OSS is a commons. If you see a problem, report it. If it doesn't get fixed, then you only get to have your complaints taken seriously if you have tried to fix it yourself. Have you written a patch and submitted it? Contacted a reviewer and offered to review their patches in exchange for them reviewing yours? Otherwise you're just whining for the sake of whining, which is 10/10 asshole behaviour.
don't seem to have a problem with that
What's your goal with the project? If it's primarily to learn you seem to be doing a pretty good job of learning. If it's to have some code that does x, y and z, you can stop refactoring when it does x, y and z. It might help to map out your requirements and use cases ahead of time and try not to "future proof" for things that are not in your requirements. If it was important enough to future proof for, it should have been in your requirements. 
Wouldn't this be procedural programming? Python doesn't have labels or gotos (without bytecode hacks anyways), so all python programming is structured.
Thanks, haven't had time to go through your solution yet, but will when i have the time. I would really like to do everything in pure python, but for the sake of the work I'm doing, it might be better to use some of the data science libraries. 
Right. The next time OP approaches a problem all of this experience will come into play, and the design will be that much better for it. These kind of self driven projects are the only time you can play and learn like this. Every paid job will under too strict a deadline to allow experimentation like this. You just have to live with your first attempt. I have so many half finished things on my drive where I've tried this idea or that language. That how I've learnt. I bring it all together when someone pays me. 
[this one](https://youtu.be/o9pEzgHorH0)
Like most people, I'd say it's not a waste of time. However if you really want to do *something* about it, I recommend using some lightweight project management tool. I used taiga.io for school projects, but I'm sure you could find others. Basically, you create items that represent tasks, features, bugs, etc. Plan out a feature in advance, come up with all the individual parts you need to do in order to "finish" the feature, and don't start refactoring until the feature is at least finished to some degree. You could even create new items representing refactor work that you'll do *after* the feature is finished. That way you know you'll improve it later because you've planned for it, but you have something tangible that you can get to a finished state before you start improving it.
OpenCV uses CNNs in some modules, see for example http://docs.opencv.org/master/d6/d0f/group__dnn.html
Just put the binary in a deb/rpm. No go-getting involved for distribution. In dev you could have similar issues but vendoring is now pretty sensible in Go (and getting better with an "official" solution on the horizon).
For a lot of those cases, you can just think of the Java class as a Python module. 
Please do your own coursework. Academic dishonesty is bad. Also, this is a duplicate of https://www.reddit.com/r/learnpython/comments/61227n/
No, in large teams you do your work in branches and you merge your code when it is ready. This lets you commit constantly, taking advantage of your CI tools and revision histories without impacting other developers.
If it feels that way, it probably is. Once you need higher levels of abstraction, go change the code. Unless you know your project will become large, you will gain little from over-abstracting it.
&gt; I liked the idea of a common shared interface though so I refactored and gave the class more functionality. Yeah, so the thing about interfaces - IMO - is that they're great for C++, C#, and Java but any *duck typed* language doesn't **need** that. For example, given this code in Python: my_objects = [Foo(), Bar(), Baz()] for obj in my_objects: obj.Describe() works whether you have classes like this: class Foo: def __init__(self): ... def Describe(self): ... or classes like this: import abc class Describable(abc.ABC): def __init__(self): ... @abc.abstractmethod def Describe(self): pass class Foo(Describable): def __init__(self): super().__init__() ... def Describe(self): ... Ultimately, with Python what you end up with when you have arbitrary code like `obj.Describe()` is that it's going to go look and see if there's a `Describe` attribute attached to the `obj` object and if there is then it will attempt to call it with no arguments. If all of that works, it's successful otherwise you'll get either an `AttributeError` (if `Describe` doesn't exist) or a `TypeError` (if it exists but isn't callable or not callable with zero arguments). The interface is, essentially, a work-around for C++ and similar languages that joins unrelated types by taking the common parts and creating an interface to represent that. That said, it's not like an interface is always a bad idea or pointless in Python. It still serves the purpose of clearly expressing what derived classes need to handle. If the interface class has *any* implemented methods itself, then it also starts to reduce the size of other classes by factoring out the common parts. Basically, I'm a fan of having rigid ways to prevent programmers from forgetting to do things. An interface can be one way of doing that in certain contexts - in the above it's going to tell you that you need to implement `Describe`. If instead I had to implement 4 functions we can imagine it becomes easier to forget one. In the case that we went with a duck-typing only strategy then I'm only told that I forgot the 4th method when the code tries to invoke it at runtime. With an interface, I'm told I forgot it as soon as I try to instantiate an object of that class ("TypeError: Can't instantiate abstract class XXX with abstract methods YYY"). When you might have a very big job to do and that object doesn't even get invoked until 3 hours after execution begins, having the code exit due to a missing method would be awful. Typically you could have written it such that the object is created early, and with abstract methods that would've caused it to fail right then. That would save you 3 hours in this example. ----------- &gt; oh ok, yeah these 7 classes all only do `__init__` and `evaluate` Technically what you created is known as a functor... well, almost. Functors typically would have `__call__` rather than `evaluate` but they serve the same purpose; by using `__call__` you transform `foo.evaluate(x)` to `foo(x)`. These *can* be useful if you want them to store some state, but if they're stateless then you probably wanted a function. For example, here's a functor: class Foo: def __init__(self, name): self.name = name def __call__(self, x, y, z): hypot = math.sqrt(x**2 + y**2 + z**2) print(f'{self.name}, your hypotenuse is {hypot}') which you use like this: foo = Foo('sixdirections') foo(3, 4, 0) which should print out sixdirections, your hypotenuse is 5.0 You can see that this is essentially the same as def Foo(name): def wrapper(x, y, z): hypot = math.sqrt(x**2 + y**2 + z**2) print(f'{name}, your hypotenuse is {hypot}') return wrapper (In fact, you can drop that in and the test code works just the same.) I mean, we can go even further and have def Foo(name, x, y, z): hypot = math.sqrt(x**2 + y**2 + z**2) print(f'{name}, your hypotenuse is {hypot}') foo = functools.partial(Foo, 'sixdirections') and it works just the same -- ie, `foo(3,4,0)` produces the same output. Ultimately, when to use what is always going to be up to you and it doesn't particularly matter which way one writes, for example, the above section because it always works in a similar way. The only real reason you would use the `functools.partial` version is because the `Foo` method is something you *didn't* write or because it is used in the full form in other places so you can't change its signature. Also for fun, with the first or second version we can also see that `foo(3,4,0)` is the same as `Foo('sixdirections')(3,4,0)`. 
Refactoring is the most fun and satisfying part of programming to me. I'd argue that it might be one of the most useful parts too. Not that I'm a great programmer, but I'm a polished turd instead of an unpolished one. 
Any examples of 'clean code'? Perhaps link a small project hosted on github as an example? 
i prototyped a small but useful system over a weekend, without having to look up much more than obscure proprietary formats. Everything else just sort of clicked because I'd done what OPs doing which is write-rewrite and retread, so that when it's 'srs bizness' it just goes.
I mean Clean Code the book. 😐
To clarify for others: 'Clean Code: A Handbook of Agile Software Craftsmanship' by Robert C. Martin. Great Book.
Premature optimization is the root of all problems. Us programmers, we don't enjoy finishing code. We like to tinker and think of way to imporve it: http://www.dedoimedo.com/computers/software-development-cancer.html Only refactor or change code when it is necessary. When it actually impairs performance/usability/security. Its good if new code you write takes your experience into account, but don't change what is alrady working and doing its job just because you learned new ways.
They do that because the realistic requirements to run pip in the real world are a lot more than just that one Python library. In Ubuntu at least, when you install pip via apt-get it will come with (recommended) build-essential and python-dev so you can actually build any binary packages, which are otherwise not generally included in a base OS install.
I was recently writing a small Python package that contained a CPython extension. I was surprised how much work it was to get wheels built for Mac, Windows and Linux. I made this package to encapsulate all the strange setup required to build platform wheels. It runs on TravisCI and Appveyor, which are free for open source. It's still early days, but hopefully this can help other package maintainers to spend less time on packaging and more time making great stuff!
I would be super curious about this. Considering a lot of JSON these days can be large, penalties for depth or size over ease-of-use are something many people will look at. Having a quantifiable comparison could help a lot of people consider adopting it! I hope you keep us/me posted.
I wanted to create a homepage for my web browser, so that I could everything I want on this said page. I wanted to have weather and news. Weather wasn't hard since I had already used the openweathermap API. Altought I wanted the news to be taken from the "20minutes.fr" website which is a famous news website and paper in France. They don't have an API so I made one myself. You can find the code here : https://github.com/LegitBaboulinet/20minutes_recup It works by browsing the HTML code and taking only what it needs l titles, headlines, content and date. I can save it in plain text, XML, JSON or just print it on the console. I then use a QT program to store the articles in a MySQL database.
Clickbait. The author completely lies about pip.
Nice! I like that it handles back/forth with JSON. Would it be possible to configure at install or run time whether an empty set vs an exception gets raised for a missing element/key? 
Oh yeah, wasn't disagreeing, just being more specific :p
Do you work in big finance? Or a software company that makes finance software? Is the porn vid scraping part of the software package? :)
Unfortunately no easy hook or anything for that right now (other than using `.get()` or switching to `addict`). If there is interest, no reason I (or any other willing contributor) can't make a `DefaultBox`. 
It's because we're taught that opening paragraphs are for slow introductions, so we also learn to ignore them. Tricky business, that reading.
I wish my actual team made time for refactoring.
&gt; The golden rule of OSS is that you are owed nothing. No. The golden rule of OSS is that you don't weasel out of being criticised by pointing out that it's free. &gt; More generally, if your understanding of OSS is that you should get top-tier software with zero effort on your own part then I'm sorry, but you've been sold a lie. My understanding of OSS is that we're all collaborating to produce high quality software, not that we're going to keep lowering the quality while lying about it to encourage the fan base. &gt; You aren't helping. You are chasing away people who might want to fix your problem Delicate flowers are of no use when it comes to the dog-eat-dog world of competing software. My problem has already been fixed. This whole discussion is about Python's core dev problem. Who's going to solve that, if people like you keep swiping it under the rug and covering it with silly propaganda? &gt; 10/10 asshole behaviour I'd rather deal with assholes than with incompetents.
Unfortunately, you won't get good answers here. You have read a lot of functional propaganda and now you are looking for answers from those who apparently misinterprets functional for procedural. The mess you ended up is exactly why FP apostles warned you. Just go wild and dig deep inside to any famous Python project you were referred it was great. With your current mindset, you might realize that it is not just your project what needs refactoring. The world is not ideal as well as your code. Just bear with it. Using classes won't make your code more maintainable. Python doesn't need classes so much since it has modules and packages. For instance, the worst books on Python, I have read, were dedicated to design patterns. Would you mind to share your GitHub repository? PS: If you need to discuss your issues with competent person sign up on checkio.org and ask Veky.
And I'm much happier advising to hire and later working with a programmer that has done this. They care to increase their skill and to be elegant with coding. Unfortunately, this is not often common in some companies.
Standard float type will do that. Just type the literals in with 'e' in place of '10\^' and a period (not a comma) as the decimal. &gt;&gt;&gt; 1.1239912e24 * 1.2378e22 1.39127630736e+46 If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
You will never be fully happy with it, because perfection is unattainable. If you accept this truth, you will no longer be trapped in a never-ending cycle of your own making. You're the only one that can break yourself out of it. All we can do is help you realise the cause.
Thanks for sharing.
And/or hide it behind feature switches.
You start with "check" at 0 and then loop while check is greater than 25. In other words you don't loop. I assume you wanted to loop while "check" is *less* than 25, and *add* to it with every loop: check = 0 while check &lt;= 25: check = x + 1 If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Let me put in an another I could not submit a package under virtualenv. I don't recall the full context of this problem though 
I really feel that instead of recursively converting all of a collection's contents to their box equivalents up front you should just wrap the original collection and customize __getitem__ to box any sub-collections when they are returned. This would get rid of most of the overhead and also allow you to continue using the original dict if needed. 
Ooooooh I see. Oh wells!
&gt; Say you have two objects that are very similar, but have a method which does almost the same thing, but are just different enough that you can't write single function for it without an if statement branching based on the object. If your options are two different classes that maybe inherit from a base class for most of its functionality save this one method, or a giant function with an if statement that totally changes its behavior based on an argument, the class-based approach is likely going to be easier to maintain going forward. Or you just approach it functionally and write a general function that applies a lambda. Writing a generic sorting algorithm? No worries, just take a lambda that compares elements as a parameter and then it is trivial to apply the sorting algorithm to any compareable type of data. 
I regularly find myself in the same situation. I settled down on stoping trying to get the "perfect design" and stopping refactoring things that worked well and weren't actually a problem. The only time I refactor now is when I add a feature and realize I need to "stretch" the existing architectire, basically hacking it. Then I know it needs some refactoring but since the problem came naturally I know what needs to be done exactly. Every now and then I read some article about stuff should be done right and I feel the urge to integrate this new "hindsight" (sometimes it's just authoritative opinions) into my code. But I resist because my code is stable the way it is. Another very important thing is to always think about multiple ways to do one thing and to study to advantages and drawbacks of each and make a choice based on that. The truth is that there is no perfect design, only trade-offs. Sometimes you study the options with only one of the existing constraints in mind and the choice is easy. Then you switch the constraint with another one and think another solution is actually better. Unless you take all constraints into account, you're locked in a refactoring loop.
No no no no, please don't make the mistake of seeing OOP (or just using objects) as overhead. It's very easy to make that mistake from 30,000 feet. It's when you get closer to the ground (your app gets bigger) that it will pay off. 
The problems with Python packaging today are *mostly* not technical. Pointing to pip on Github and saying "let's fix this" probably isn't going to improve things much. The modern tools actually work pretty well. What makes it 'broken' is that Python packaging has to drag its history around with it. You don't get a clean slate to work with. There are thousands of packages out there that people still need to be able to install. There are people who absolutely rely on the tools doing something that other people just don't care about. There are slightly different versions of tools doing slightly different things (venv vs virtualenv). There's a confusing array of libraries (distutils, setuptools, distribute, distlib...). There are people who insist that you do everything in an env. There are the people who got fed up with Python packaging back when it really sucked and made a parallel toolchain (conda) - if pip and conda both think they're managing the same package, much confusion can result. And so forth. There's no shortcut out of this. It takes work to build new standards (like the wheel format), and then every new standard is another piece for people to think about, so the picture looks more complex, until eventually the new standard pushes older things (like eggs) out enough that you can stop thinking about them.
Not sure if this is the right subreddit, but why not SQLite for your research? As for the other project, can't help with you there.
The rule I follow is make it work then make it pretty -- I'm 99% I stole this from Uncle Bob. The only exception to that is something I know I'm going to want and going to use (i.e. I almost always implement Flask style tuple response unpacking in web frameworks that don't have it). If you do TDD, you have a cycle you fall into: * red: the stuff you wrote doesn't pass its tests * green: now it passes its tests * refactor: clean up - including tests! I try to follow this, often I don't, as having passing tests lets you know when you broke something in a refactoring. This flow also helps with making design choices in the code.
I remember building a library for pypi. It was traumatizing, but in the end somehow magically worked.
I'm working on a cellular automata model for coral reefs with four states: stony coral, crustose coralline algae, turf algae, and macroalgae. It's my final project for my computational physics and complexity class and it's really cool, but damn there's a lot that goes into it.
And I mean really - even if it took 10 minutes to make a perfect migration, so what? You're running it *once*. Obviously it's not going to be perfect, but, still.
I have a recollection - it may have been on the Python distutils-sig - that the number of *new* packages being uploaded to PyPI either support Python3 or are Python3 **only**. There are very *very* few packages left on the [python3 wall of ~~shame~~ superpowers](https://python3wos.appspot.com/) in the red.
&gt; What do you mean **I can't rename my virtualenv folder?** What's wrong with renaming your virtualenv folder?
What do you mean by installing static files to an arbitrary location?
Made this in a plain text editor, sorry if there's syntax errors or some such. Basically you're storing the metadata in a sqlite db, and the actual data in files. # creating db connection=sqlite3.connect('transcripts.db') cursor=connection.cursor() cursor.execute('''create table transcripts (id integer autoincrement, name text, author text, date text, path text)''') # inserting new script name = "Foo thingamabob" author "John Bar" date = "2017/01/21" script_text = '''John: Hi. Barry: Hi. ''' # inserting the metadata, note we're not inserting the path yet since we're gonna use the row id as part of the path cursor.execute("INSERT INTO transcripts (name, author, date) VALUES (?, ?, ?)", (name, author, date)) # final_path will look something like 'scripts/2017_01_21/1 - Foo thingamabob.txt' # signature is scripts/&lt;DATE&gt;/&lt;ROW ID&gt; - &lt;NAME&gt; # make sure name doesn't have any invalid characters for paths like ':', '/', '\', etc. # putting the row id in the file name ensures that there's no overwrite when inserting several # scripts with the same name date_path = date.replace('/', '_') # forward slashes are not allowed in filenames path = "scripts/{}/".format(date_path) final_path = path += "{} - {}.txt".format(cursor.lastrowid, name) os.makedirs(final_path) with open(final_path, 'w') as f: f.write(script_text) cursor.execute("update transcripts set path='?') If you need extra metadata and you don't want to create new columns for every different little thing, you can add a table like this: create table transcripts_extra (transcript_id integer, field text, value text) So let's say you want to add a location to a transcript. insert into transcripts_extra (1, 'location', 'Moms basement') This might complicate searches for you if you're not familiar with SQL, but avoids having weird schemas. The reason I recommend this solution is because it's easy to browse without extra software, you can find/copy/correct transcripts using your operating system tools.
Why are people obsessed with this idea of accessing dictionaries with dot notation?
MicroPython is a very good implementation of Python on microcontrollers. Zerynth is Python even more tuned to micros than MicroPython is. A Micro MicroPython :) Take a look here https://www.zerynth.com/faq/ and here: [Micropython vs Zerynth](https://community.zerynth.com/index.php?p=discussion/382/zerynth-vs-micropython#latest) for more technical details. 
&gt; My understanding of OSS is that we're all collaborating to produce high quality software, not that we're going to keep lowering the quality while lying about it to encourage the fan base. Where is your collaboration? You're doing nothing but moan. You have volunteered none of your time and none of your resources. And no-one is lying. Everyone acknowledges the problem is there. There is an open bug report. The only thing missing is the time and effort required to fix the problem and prevent it happening again, and you are not offering to solve that. &gt; My problem has already been fixed. This whole discussion is about Python's core dev problem. Who's going to solve that, if people like you keep swiping it under the rug and covering it with silly propaganda? I'm doing no such thing. There is a problem with developer resource in the Python dev community. What I'm doing is telling you that you're being an asshole, and that your assholery contributes to the problem you're whining about. You're not helping, you're making it worse. If you, and everyone else on the internet who likes to moan about problems instead of trying to fix them, demonstrated one ounce of willingness to understand how we got to this place, or offered to help to fix it, we'd be in a much better state right now. But you don't, either because you can't or because you don't care. It doesn't much matter why, the end result is that it makes your opinion worthless. OSS dev at the scale of Python is collaborative work. You are not demonstrating any interest in doing any of that work, and you're being an asshole while you do it. Don't be surprised when that leads to no-one caring about your problems but you. &gt; I'd rather deal with assholes than with incompetents. I choose to deal with neither. 
'status' and 'message' are siblings, not nested. Also, you need to remember that json (and nearly everything in programming) is case sensitive. "url" is completely different from "URL". Also, you need to take into account if the key is not there. In my test, "ISSN" was not always there. You can supply a default with the `get` method rather than indexing with `[]`. import urllib.request import simplejson response = urllib.request.urlopen("http://api.crossref.org/members/78/works?filter=has-license:true,has-full-text:true&amp;query=blood&amp;rows=50") data = simplejson.load(response) for row in data['message']['items']: print(row['title'],row['URL'],row.get('ISSN')) You may also want to look into the `requests` module, which will simplify your http request: import requests url = 'http://api.crossref.org/members/78/works?filter=has-license:true,has-full-text:true&amp;query=blood&amp;rows=50' response = requests.get(url) data = response.json() for row in data['message']['items']: print(row['title'],row['URL'],row.get('ISSN')) --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to include which version of python and what OS you are using. 
Agreed and thanks!
I'm guessing that it's because scripts installed in the virtualenv get the path written into their shebang line (the line at the top that starts with `#!`). If you rename it, those scripts are going to break. I don't think there's any way round this. You'd have to come up with a different virtualenv like mechanism. And then that's *another* tool, which will be better for some use cases and worse for others, and you've made things that bit more confusing.
The programming only starts with syntax. The syntax is only one thin layer on surface. What you should learn is design. As some already pointed, R. C. Martin's "Clean Code" is a good place to start. You can read it in a week. It shall give a solid background on a general coding style. Afterwards, try to learn some advanced techniques for Python, reading books such as "How to make mistakes in Python" (available as a free ebook on O'Riley), "Effective Python", or watching speeches like those of R. Hettinger. When you finally feel yourself quite PEP-8ified, get yourself a copy of "Design Patterns" from E. Gamma et al. And that will teach you design. By the way, the Youtube Channel of Derek Banas has a nice set of tutorials on almost each of the design patters described in the book. Hopefully, you will finally reach Zen of Refactoring, and be satisfied with your lines.
It's a fine line because inheritance creates huge mental overhead. 
Hey ! I earned money with crossvar thiq month. I should buy you a beer. Are you in berlin this week ? 
First off, I think the whole "stop writing classes" thing is kind of bs. Yes, not everything needs to be a class, but you shouldn't be worried about that when you go to implement a new feature. If you write something as a class and it doesn't need to be a class, it's usually pretty simple to fix when refactoring. The best way to figure out the easiest API for what you are building is to use it! Try writing code using whatever library/module you have written, and if it's super simple to accomplish more complex tasks using the API you built, then stick with it. If it's tedious to use, or could use some improvements, it should be pretty clear. You just have to keep refactoring until you design something that works well. One trick I use is I think about how I want to use the library/module. Once I determine how I want to be able to write code using the library/module I start creating the objects that would support that. This can take experience, because the only way to know what is possible is to do some research.
One technical problem that I don't think will ever be solved is the ability to have multiple versions of the same library installed. 
I used to do this, it lead to not finishing any products. I decided to teach myself how to roll code into production by just making an MVP as quickly as possible, every time I thought of an improvement I threw it in a backlog to get to it after v1 had launched.
But do you really get tab completion out of something that's dynamically generated like dictionaries with dot notation? It seems like people are trying to hide the fact that they're using a dictionary and not a "clean" object.
You should be refactor bad code when it is noticed it as said above is good practice, and a good habit. Too often projects have worthless or obsolete code lying around that no one wants to refactor or delete. 
 results = [] with open("file.txt") as inputfile: for line in inputfile: results.append(list(map(float, line.split()))) This will convert all the text into floats. It looks like you data is mixed floats / ints, so if that's a problem for you you will need to write a function that can convert a single line into a correctly formatted list, and replace my `map` with your function. If you have more questions like this it's better to post them on /r/learnpython. Be sure to include which version of python and what OS you are using. 
JS also uses square brackets, so that's hardly a reason.
Quote from u/ivancto on his altright subreddits. White people don't gain anything from helping blacks, they can only lose. Whites are superior to blacks and shouldn't​ think in terms of being "the good guy". We aren't equal, and the fact that they are treated as equal makes me sick.
I'd build an AI to rule the world. 
That wasn't meant to be derogatory. I have the same issues as well as a lot of other GIS professionals. Just thought it was funny that I could identify an ESRI user just by reading a short comment in a non-GIS specific subreddit. 
What are you asking bro? Is there a specific part you need help with ? Because I'll help you with that. But I'm not going to do ur assignment for free 
Awesome. Thanks for putting in the extra effort
Taking my first plunge into Python. Working on a script that builds web pages based off a js file. Basically trying to make my web admin job easier. I'm not there yet but if anyone has input on how to run a .py script when I update the js file, it would be appreciated.
I am mainly a design front end guy but I feel like if at the "end" of a project, I can't find something that I hate or want to change, then I have not learned anything from the project.
So kind of like [dotmap](https://github.com/drgrib/dotmap)?
&gt; Where is your collaboration? You're doing nothing but moan. You have volunteered none of your time and none of your resources. https://github.com/stefantalpalaru https://github.com/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Astefantalpalaru+ 
Look into using `__missing__` which is (or was) a hook either dict or collections.abc.Mapping used to handle missing keys. 
Currently still writing it but i am using watchdog module to wait for a csv file and when you copy the file it will parse it out and export it to an excel spreedsheet. Then depending on the file will write to sheet a or b once done the file will move to a backup location waiting for the next file
my eyes!!
&gt; what I really need is a script to call functions. This is the right line of thinking IMO. You need to keep focused on '*what am I trying to do here*'. It's good to have refactoring experience, but most techniques are best practiced in pursuit of a larger goal. Whether you use classes or functions or some combination of the above is ultimately a technical detail. “To know what you want to do and then to do it is the secret of good style and technique.” Ultimately the success of your personal struggle to keep focused rests upon your appreciation of that sentiment: that satisfactory outcomes and effective learning happen reliably when you pick a goal and follow it all the way to completion. So, you know -- keep refactoring! But only once you've really completed it in one paradigm, taken that paradigm as far as you can take it. If you feel the approach is failing, FAIL ALL THE WAY TO THE FINISH LINE instead of letting your doubts bluff you into changing course midway.
Look, just know you're not alone. I needed some tools to help evaluate some personal financial decisions, calculate child support, and stuff like that. I needed to calculate interest payments and annuitize different sources of income and I wound up "needing" to use metaclasses. Fucking metaclasses dude. Never start a new project within 3 days of watching a David Beazley video :). (It was for what amounts to a shittier version of `attrs`, by the way)
To learn more about OOP research static and class methods. Also look into unit testing, this saves you from breaking code without knowing it.
What is wrong with the formatting? It is code.
Lol!
I'm pretty new to Python about 3 months experience, but I wrote a web scrapping script that scraps soccer tables such as top scorers, assists and standings. It also allows me to save them as a csv file and Insert them into a mysql table.
Hey, I like the idea of adding them actually. As you showed, it was created with idea of not mutating things that weren't inherently mutable, but to be able to freeze the entire thing would be handy. [Issue for tracking](https://github.com/cdgriffith/Box/issues/7) 
It's kinda interesting concept, running multiple VM on a micro. I tried it out but it isn't for me at this time, but I'll keep watching to see where it goes.
You make no sense. Enjoy your life pal. It doesn't seem to be going to well. lmao I will just leave this here to help spiral your life further down into a black hole of despair.
This is like picking up a guitar and learning to strum a few chords. Then learning to pick and asking yourself 'why would I ever strum?'. But having learned both, you are a superior guitar player. 
You just don't have panels like that. Seriously, do I want to be spinning my head 270' whilst I'm working? Just put the text normally. Those that have wide-screen will keep them on and everyone else will hide them. Phillip.
 file =open("ur_file_path") try: items = file.readlines() process_items(items) # migth raise an exception except some_exception: print("whoops") finally: file.close() `try-except-finally` is needed when you need to clean something up or do something regardless of whether the process was successful or not theres even a `try-except-else-finally`. 
We all do this. The past couple of days I've been prototyping an ETL pipeline with [Luigi](https://github.com/spotify/luigi). My first step was to just get something working since I've never used the library before. My next step was to try and refactor to reduce repeated code. The next step was to try and write some more general classes to make writing new code simpler. There are still plenty of things to refactor, but at one point you have to ask whether the ends justify the means. For personal projects, thinking about how you can make your code cleaner and easier to understand is always a good thing and probably worth the refactor so keep doing what you're doing.
What if you didn't use the finally clause and put the f.close() by itself?
If that's how you feel then maybe the problems you're working on can be solved by writing pure functional code. Have you tried learning/reading about Haskell or Scala?
The finally ensures that the code inside it will always run, regardless of what exceptions are involved. While your first instinct may be to put the code after the try/except block, consider these examples: conn = connect_to_database() try: 1/0 except Exception: logger.error('failed') conn.close() And conn = connect_to_database() try: 1/0 except AttributeError: logger.error('failed') conn.close() Unlike in the first example, the connection isn't closed in the second example. Had it been inside a finally, it would have been. conn = connect_to_database() try: 1/0 except AttributeError: logger.error('failed') finally: conn.close() Another reason why you'd want to use the finally block is if the function can be exited through any branch of the try/except. conn = connect_to_database() try: return True except Exception: return False finally: conn.close() Without the finally, the function would exit immediately upon reaching a return. By including it, though, any code inside the block will execute before control is returned to the caller. 
I included an example of this in my comment. There are things that could happen (e.g., an uncaught exception) that would cause that code to not be reached. 
I wrote a script for work that watches the network for malware or signatures and then can scan them with Malwarebytes automatically. I watch for credit card numbers and social security numbers as well. And even use it with a script I call the "Quantum Reactor" that will do man in the middle attacks and stop all network traffic from completing and redirects them to a custom homepage. 
I've found that when I can bring myself to adhere to it (which is rare because I'm impatient) test-driven development really helps me wrap my head around how to break down the problem I'm trying to solve. If it's hard to figure out how to test some component in isolation, it's probably too coupled to other components. The other thing I've learned is that programing is essentially the art of managing complexity. There's so much inherent complexity that new-ish programmers (like myself) are attracted to all the different methodologies that say "always do X, Y, and Z and *never* do A, B or C and programming is a breeze!". What I've found is that they all contain a bit of truth and rationality but they also all gloss over some tricky problems. You'll find truths but don't look for The Truth. Just keep practicing and you'll pick up good tools and learn when to use each one.
Using 'with' and custom context managers can be great for abstracting tedious security measures, connection closing (prevents overloading a server with file descriptors and crashing your services) as well as loading and unloading configurations. __enter__ and __exit__ (a long with the other meta builtins and patterns) are super powerful! 
As shown, the "with" code is one line shorter. Single lines add up in a large body of code. However the open/read/close example is not equivalent to the "with" example. To do what the "with" example does it should really be: f = open(file) try: txt = f.read() finally: f.close() now the "with" code is 3 lines shorter. The "with" is a 'context manager'. Put simply, a context manager allows you to perform some 'setup' code before performing a block of code, and then performing some 'cleanup' code when the block is finished. See [this](https://docs.python.org/3/reference/compound_stmts.html#the-with-statement) and [this]( https://docs.python.org/3/reference/datamodel.html#context-managers). Edit: [more accessible explanation](http://effbot.org/zone/python-with-statement.htm).
I'm having the same problem! I made a 100-line script the other day with tkinter, with a lot of it just being arrays and dicts, and I want to make it OOP, 600 lines later, and a private git repo because I'm so embarrassed of it, and only want some ppl to see it, and I want to release and update, and it's too slow. So now I have to revert back to my original design, and refactor all these features into explicit statements. 
So, if I understand correctly, everyone is crap except you? Veky, you're full of shit and you know it.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Duckduckgo.com
It sounds like you want to do [Numerical Differentiation](https://en.wikipedia.org/wiki/Numerical_differentiation). The formulas are relatively straightforward, and you can use NumPy arrays to do the element-wise math efficiently. A more sophisticated method would be to first fit a spline to your data using ``scipy.interpolate``; the univariate spline implementation there has the ability to [compute derivatives](https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.interpolate.UnivariateSpline.derivative.html) from the interpolated curve.
Thanks! But, how to plot it afterwards? I get ValueError: x and y must have same first dimension with spl = UnivariateSpline(V[i][0],I[i][0], k=4, s=0) plt.plot(V[i][0],spl.derivative()) (V[i][0] is my tension array, for X axis values) EDIT : Nvm, think I found out. Will verify with supervisor tomorrow.
I wrote a Python program that programmatically generates a Python API for the ``Vega-Lite`` visualization grammar. You can see the result at [http://altair-viz.github.io/](http://altair-viz.github.io/). My favorite part is that the parity between the JSON grammar and the Python object structure made it possible to implement a two-way translator, so I was able to write a [dozen-line function](https://github.com/altair-viz/altair/blob/master/altair/examples/tests/test_examples.py#L14-L28) that performs a comprehensive integration test, touching essentially every documented feature of the package, simply by round-tripping from JSON to Python to JSON, and then comparing the input and output.
In some cases you're expected to keep things functional when you check in changes. Your new feature may not work yet, but it shouldn't break the rest of the codebase. How you do this (branch/merge, one big change, etc) may vary.
That's pretty neat. The docs don't mention authentication though, which I'm interested about
First of all, I am not Veky. He has deep insight so I was bold enough to recommend him. About the crappiness. Yes, python reddit is really waste of time. The quality varies. For instance, your assumptions lack logic. Too bad for coder, dont you think?
PyCharm does manage dict completion for some situations (like it you initialize a dict, then in lower lines you can autocomplete those keys I think), but tab completion is certainly nice. Pandas does this as well as long as your column name is a valid variable name and doesn't clash with existing attributes. I really need to pick one of these trendy choices and stop using my custom setup that uses Layered-Yaml-AttrDict-Config (just having to type that into pip ever is not worth it). I've got a YAML configuration setup, but I wanted​ to preserve order without Python Ordered Dict junk in my YAML (required a custom YAML dump representer or something), and I also wanted to be able to get and set parameters with both settings.get('window.position.height') or settings.window.position.height, so that interaction with settings dialog was simpler (link a GUI control to a setting with a single string). Sorry for rambling. YAML looks so nice, I wish it were as popular as JSON.
The problem is that manipulating recursive data structures (linked lists, trees, etc) is usually simpler if done recursively. Note that I didn't say necessarily efficiently. When faced with a possible recursive solution it's probably best to just go ahead with the simpler recursive solution and benchmark later to check performance. Premature optimization and all that. That way you can also develop your test suite to help you if you later change a recursive solution to an iterative one. &gt; "if you're writing a recursive algorithm in python and can't give an explicit upper bound, you probably just haven't tested on big enough data yet." This is true for *any* language, not just python.
Yes. Often. Get on http://xbtfreelancer.com http://freelancer.com to pick up small quick jobs. 
Thank you very much, your reply is particularly valuable for me!
The best way, in my experience, to stop needless refactoring is to *plan your project from the beginning*. But you need some experience with refactoring to be able to appreciate, and anticipate, the pitfalls. 
Python does not (and will not AFAIK) have tail recursion. We also have iterators, and in my (non-professional) coding experience, if you can recurse it you can iterate it. I dont see why recursion would be necesary in python.
I am interested in learning everything as long as i have the time (and money… and programming is basically free to learn and I have a lot of time…)
I wanted to learn Python though. 
I haven't had time to fully process the second part of your post (just woke up ...) but to the first part I think what I meant is what you are saying. Like what I did was make a master class like so class Foo(object): def describe(self): log.error('Classes derived from {} needs their :meth:`describe` method implemented'.format(self.__class__)) raise NotImplementedError Then subclasses all have that method implemented or else the code doesn't work. That's what I meant by common interface. Did I misspeak and mean to say something else? edit: yes I do use logging and sphinx :)
Thanks Jackbrux, appreciate the help. I had read up on Twilio and similar services as was thinking of using them...
But I want perfection :(
When I write a python project, I expect that I'm going to have to spin up an independent VM to be able to control all the dependencies I need. All of my clients also share this expectation - it's ridiculous. When half of the basic packages (numpy, scipy) don't install on vanilla ubuntu without some esoteric dependencies you have to find on stack overflow every single time you are doing something wrong. Python package management is so broken I have to use VM images as my default deployment setup.
What is the point of homework assignments if the student just gets the answer with no effort?
phew.... where should I start? the scripts are really looking like scripts than a program. you should try to encapsulate your *main* code into a main function and call that one once. I'm always avoiding *while true*, when I know it's some kind of a list I'm iterating. try to encapsulate your data collection into a generator and yield your data into a another method where you analyze the output. and... more docstrings please ;) 
Well, it seems to me that you are pretty much done. All that is left is to open a new file and write the text to it. Look up "string formatting" if you need help with making the new file names. 
/r/learnpython
To agree with you, but shorter: * On small scales of data, use whichever approach reads clearest. * On large or unbounded scales of data, prefer iteration to recursion, because stack limits hurt when you run into them.
The simplest way is to have a loop and push the parameters onto a stack instead of making your recursive call, then popping from the top of the stack for each loop iteration.
False. This is known as a content in Python and the connection is only available within the "with" block in this specific example. That block handles connecting and disconnecting cleanly, and reduces both the amount of code as well as the amount of cognitive load for a peer review. So in general, it's simply a superior way of writing the code provided you don't need to pass the connection around to other blocks of code.
Dont know anything about R, but what you are talking about shows something not running, or throwing an error message and exiting. Run the script from the command line-- that will show you what the error message is. If you are still stuck, paste it here.
I sometimes use try/finally in unit tests to wrap a quick monkeypatch that isn't worth the overhead of importing, defining and using mocks (and mocks are basically try/finally anyway). Also, many context managers are doing try/finally or try/except/finally under the hood to ensure they release the resource they're wrapping. So if you write your own context manager, you'll often end up writing out a try/finally or try/except/finally.
That seems nice! How much data would be needed to train this to be "useful"? 
Although surely if c can automatically tail optimise then python should be able to
Why? 'c' doesn't 'automatically tail optimize', the compiler does.
Ok pedantro. Why doesn't the Python *interpreter* tail call optimise when a number of c *compilers* can tail call optimise 
It's a nice and simple layer of abstraction over the underlying data structure.
Very good article, thanks a lot!
A different implementation of Python may. However, Guido has said that the benefits of TCO are not worth the loss in debugging ability, so CPython won't do that. Edit: /u/delijati has linked Guido's post on the matter in the sibling thread. Go check it out. 
My company makes a production tracking system that can be quite complex and time consuming to QA and Demo manually. The process used to involve a lot of tightly timed file drops and data generation, or just massive amounts of time to babysit as you 'run' data through the system. I decided to try and make a program that would automate the system end to end and simulate a real environment to save me immeasurable amounts of time. In order for this to work I had to be able to create job definition control filed and the full producton data we would expect from live 'random' machines. After generation I use normal hooks the tracking software provides to trigger actions for the automation system to 'move' work to the next producton stage, or introduce real world errors, etc. When a job is complete, it generates a new control set and start over. I cannot express how many man hours this has saved us from having to do from a testing standpoint, and even demos. Now our sales team has this loaded up and can provide an impromptu demo at any time by just clicking on a play button. I don't have any formal training, so there are likely things that could be done better, but I am ridiculously proud of it. I probably went overboard in its design and construction, for example it has a built in tornado server for the control interface, which uses websockets to keep system status, jobs produced, etc updated to the user. The websockets are clearly not required, but I had fun learning how to get that working, and gained some JS knowledge. At any rate, that is my flagship for sure.
And guido holds a few notoriously weird opinions. Having a dumb keyword explaining to the interpreter that you want to do TCO on a function would be a no-brainer with no loss of debugging ability, but of course CPython won't do that. (and if I may add, tons of functional languages have similar or better debugging abilities than python while having TCO)
Most sane recursive problems can be written as while loops. There are some insane mathematical problems that cannot though. I used to regularly hit the stack limit while reading a fortran binary file with blocks of 32 KB. You go read a 2+ GB file and very quickly you have a problem. But for tiny problems, so the ones I developed it for initally it work. What really sucked though was debugging. Why do I care about my stack level at level 5000? A while loop made it clearer, even though it can be tough to write. It's also faster and uses less RAM.
You will stop when you will have self-confidence. I think you are influenced by blog post that says "Stop doing X, Y is better" Code is never perfect. You should stop when you think your code is correct, not because an article says how you should code. When you are maintaining a project, the more important thinks is the maintainability. That's means you need to have have a great readability in the code. Your code must also be relyable, meaning well tested. The performance come just after. For a personnal project, you have no feedback and lots of temtation to refactor to improve your code. And I think you don't know where to go. You may share the url of your project to get a review from someone else. 
So I got a new job few months ago and what I saw in the code base when I got there is a lot of metaclasses and what feels like unnecessary abstractions. I think they got carried away because of their C#/Java backgrounds. I feel like "if you aren't 100% sure you need them, you don't need them" is the best advice when it comes to metaclasses in Python. Could be that I'm missing something, any thoughts, similar experiences?
Duck duck go is a decent effort but I don't entirely trust them and their results aren't as good as Google
Doesn't seem to work for me, what could be wrong? $ python Python 3.6.0 (default, Jan 16 2017, 12:12:55) [GCC 6.3.1 20170109] on linux &gt;&gt;&gt; import better_exceptions &gt;&gt;&gt; assert 10 &gt; 20 Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; AssertionError I also tried the code from `test.py`.
You have so much more horizontal screen real estate than vertical when writing code. More than 10% of the sides of my screen are not used all the time as I have a wide screen monitor. This is why the "Tree style tabs" Firefox extension has over 100,000 users. But that's a different use-case to the fixed menu you have here. Anyway it's not a big deal. If you want to spill the top bar down the sides of the screens that's an ok quirk. They are fixed so muscle memory will take over and after a short while you won't even look. Personally I would just turn those sidebars off. It looks a great app. The rainbow variable highlighting looks an excellent feature. I wish the project all the best. Phillip.
Formated and adapted for newlines: import re f=open('Sourcefile.txt', 'r').read() p=re.compile(r'^ABC No\.(\d{2,2}).*?', re.MULTILINE) separated=p.split(f) for i,j in zip(separated[1::2], separated[2::2]): w=open('text'+i, 'w') w.write (j[1:-1]) w.close() This will also avoid cases like: ABC No.13 ABC No. He screamed
Depends upon what you are producing. Micro Python is especially interesting for products where the end user may need access. 
Typically 15-30 hours of speech. Obviously the more the better. There should be enough open data sets to get you most of the way there.
You're half correct, and half not. Iteration *alone* is insufficient to do everything recursion can do. However, if you're willing to manage your own stack, you can achieve the same power.
 @contextlib.contextmanager def session_scope(): session = sqlalchemy.orm.scoped_session(session_factory) try: yield session if autocommit: session.commit() except Exception as e: session.rollback() raise e finally: session.remove() Now I can `with session_scope() as session: ....`, but I had to try/except/finally first. Code structure stolen from [here](http://docs.sqlalchemy.org/en/latest/orm/session_basics.html#when-do-i-construct-a-session-when-do-i-commit-it-and-when-do-i-close-it).
Did I post this in the wrong place? My bad. /r/learnpython seemed like a community that wouldn't have an experienced user base that could give me the feedback I'm looking for.
'with' is implemented this way in the backend. :)
Eh AVR &gt; PIC
If you want something you can never have, you are never going to be happy.
I gather from some Python fora that there's some other sectors where 2.x is the norm because of third-party packages that haven't been migrated yet. But I'd bet we mappers are some of the loudest on that issue.
It's not pedantic, they are completely different things. Not sure why I'm being downvoted, but c compilers have a wealth of static information about the program and it's types with which to optimize this kind of stuff. A simple interpreter like CPython does not, and Python itself is way way way more dynamic than C. What would happen if halfway through the TCO optimized iteration one branch of the function monkeypatched itself? Also, stacktraces.
Armin has a good article on that. http://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere/ I didn't know you could only use one version in the same process. That doesn't seem very useful. I thought you could, I thought the .pth files basically changed the order of sys.path and it would find the version you want first. But in other modules the order of sys.path would be different and you could get a different version. 
it would because thats whats it's basically doing under the hood. but I gave that as an example to show the OP the use cases of a `try-except-finally` because when you make your own `context managers` the `try-except-finally` is what you'll be using anyway
OP surely you're supposed to read the relevant chapter of your algorithms book and then *think* about how to answer this question. The exercise is in thinking about why the complexities are different. Sorted vs unsorted time complexity and its impact on performance is actually something that an average developer would run into many times during their career.
Check out neo4j. I'd give you a link but I'm on mobile.
I've been working on a cryptocurrency exchange written in Python called Tipsy
Quote from u/ivancto on his altright subreddits. White people don't gain anything from helping blacks, they can only lose. Whites are superior to blacks and shouldn't​ think in terms of being "the good guy". We aren't equal, and the fact that they are treated as equal makes me sick. You really don't know what cryptic means you fucking bottom feeder? 
No, [not quite that cool](https://github.com/baruchel/tco/blob/master/tco/__init__.py), but it's really short at least
Interesting, I will have to test this on a few other systems. (just to see) It may also be worth noting laptop has win 10, server has RHEL Server release 7.2 (Maipo)
[Apparently.](https://www.quora.com/Why-cant-Ackermann-function-be-calculated-iteratively)
I've seen something similar except it was people from a Ruby background. In Ruby metaclasses are a very common abstraction pattern and so I've seen people try to apply the same paradigm to Python, but as you say it is completely unwarranted. Metaclassing can be very useful when you're developing a framework, but in my experience are not necessary for most use cases. 
The majority of the time you don't need metaclasses. I've found them useful pretty much only on the occasions that I need to do some sort of class introspection. Even then, most of the time it can be done with simple subclassing and `import inspect`, along with a method that has a `for name, method in inspect.getmembers(self, inspect.ismethod)` loop somewhere in it. I have had one good use case for metaclasses, it was in a finite state machine library I wrote quite a while back. You set up the states at the class level and have methods that are run that result in state changes. All of the properties had to be specified up front, then the metaclass verified that the state machine was sound (always had a start and every path could end, no orphaned sub-graphs, etc). It made for a really nice API in my opinion, but was very much a corner case. (For the curious, the FSM library was written to assist with automation hardware that had distinct states. This let us model it in hardware and have a more abstract and ergonomic representation in high level code.)
Thanks for sharing. What kind of accuracy have you seen with this? I've been playing around with pocketsphinx but have been disappointed with the results.
Very succinctly said. *golf clap*
Real functions I see very often have this sort of structure def myfunc(args): if some_sanity_check(args): return if some_other_sanity_check(args): return do stuff here do more stuff here 
With ~100 hours of speech you can get 20% character error rate with the example BiRNN (i.e. functionally a human can read+understand the prediction). We've used Pocketsphinx as well as a comparison, and get 40% reduced error rate when using the BiRNN https://svds.com/tensorflow-rnn-tutorial/
Sure, but in the relevant context of Python's stack limit, making your own stack means you set your own limit (if any).
what does k^th mean?
Yeah, I kind of use it like a poor man's 'with'. For example, with temporary files that I want to make sure are deleted - there's a context manager for that, but only in Python 3. So if I'm writing 2/3 compatible code, I put the file cleanup code in the finally block. 
I don't want to call it a code smell, though, only because novices will either 1) under-value the input given, in which case it doesn't matter what i say OR 2) over-apply the input and possibly take it to mean that recursion shouldn't ever be considered. When using Python, iteration will almost always give you an easier to read and maintain and more efficient solution, but it's not intrinsically *correct*.
That's bad practice. Those return statements should raise ValueError or something like that. return should only be used when you are actually returning a result, not to bail out.
Because recursion is a code-puzzle for CS students, and nothing else. In the real world, recursion is a complete waste of time and money.
1. Very awesome! I like the idea and result, and looks great. 2. To anyone doing similar projects I suggest using the [google API](https://developers.google.com/maps/documentation/static-maps/intro) directly so you wouldn't have to do screen grabs and bother with selenium. 
Hah. Good point :)
I've found this interesting, having worked professionally both in ruby and python. A very common pattern in ruby (use metaprogramming to make a small dsl) seems just wrong in python. I think it makes python an easier language to debug/follow wtf is going on, but makes ruby nicer (for writing libraries) because it enables things like rspec.
Yep that's being fixed in https://github.com/Qix-/better-exceptions/issues/17. This is a hard one to solve; pull down `master` and try `python -m better_exceptions`. That will drop you into a shell where your assertion will work. In the future, importing `better_exceptions` in the basic shell will warn you about this :) Unfortunately, given the way Python is built, this is the best that can be done. Good catch!
Recursion is, in a way, a hack to use the call-stack as a stack for your algorithm. It looks elegant, of course, but it's still coupling two stacks with different purposes together. Decoupling them might make the algorithm clearer sometimes. Take DFS and BFS, for example. You can easily implement both of them recursively. But they'll be much more elegant in the iterative version, where it becomes clear that they're both the same algorithm with a different data structure (DFS is LIFO while BFS is FIFO).
Thanks! This link has tons of useful info.
&gt; Ok pedantro. It's actually a rather important distinction, that it's not specified by the C standard means you can't operationally rely on it as any change to your compiler or its configuration may disable TCO. &gt; Why doesn't the Python interpreter tail call optimise Because it's not really necessary (Python has perfectly fine iterative features and its function calls are rather expensive) and because tco has costs (in terms of debugability, or complexity to reclaim debugability) the *c*python maintainers don't care to pay. Alternative implementations are free to TCO, though I don't know that any does.
Thanks! Good call on the API -- definitely a more legitimate way to get this data and allows for all the different views (maps, earth, hybrid) / zoom levels. Based on the [usage limits](https://developers.google.com/maps/documentation/static-maps/usage-limits) you can get 25,000 free map loads a day @ 640px square. Some back of the napkin calculations puts that at ~15 maps per day at the scale I created, which seems more than fair. I'll look into that more when I try my hand at a huge Google Earth map.
A charming news!
When will Rider be ready?
thats sad
I dont like it, I want something simple like IDLE
Here's a straightforward example, if you open an SMTP socket to send an email you need to make sure and close it even if it fails while sending the email. try: smtp = smtplib.SMTP(..) smtp.starttls() smtp.login(username,password) .... send email .... except: raise finally: try: smtp.quit() except: pass
I don't know much about any of that, but the stuff from Sentdex is pretty damn good. I've only looked at his tutorials, but I know he has a bunch of stuff that would be specifically helpful to you. He patrols r/Python sometime too.
How about Sublime Text if you want a simple text editor? It's fast, lightweight and has great Python support.
Thank you very much. I am definitely going to check him out! 
It is likely https://youtrack.jetbrains.com/issue/JRE-205. The next minor update will include the fix. *Edit:* Workaround for JRE-205: https://gist.github.com/CrazyCoder/0d9e54f450000d3fb6edcbda6d9788be
I do :c
The variable 'k' is supposed to represent the order of the smallest value you want to select. If you selected the smallest value then 'k' would be one. The second smallest means 'k' would be two, and so on. Try to solve the problem for just selecting the smallest value, and then generalize for all values of 'k'. That may make it easier to tackle.
Are you meaning something like a binary tree, where you might go down one branch and then need to go back up?
First thing first what OS are you using? can you use a 'pip' install command to download the BS4 and Scrapy...If you're on Linux you could use "pip freeze" to see what packages you have installed - Linux/python is my forte :/ - Oh, Stackexchange may be quicker help too
Whoops..I am on Windows 10. Odd part is that package shows installed on Sublime but when I go to import it and build thats when it gives me the error.
You sound like an absolute pleasure to work with... /s
(NB my answer is PostgreSQL-centric) My favorite approach is to use https://postgrest.com/ My Python business logic gets triggered by updates/inserts/deletes via LISTEN/NOTIFY: https://gist.github.com/dtheodor/3862093af36a1aeb8104 This minimizes the amount of boilerplate while still allowing me to do the heavy lifting with Python.
care to post your code? 
Assuming that means chi inverse, probably scipy. 
&gt; if you're going to be recursing a hundred thousand levels deep you're probably gonna blow out your memory You generally don't know ahead of time how deep the stack will be when your recursive function is called. What if someone wrote a recursive function that calls your recursive function? For that reason, I tend to avoid recursion in Python. It makes it so you have to know *how* other peoples' code works instead of just *what* it does.
They may achieve the same goal but my point it it's not doing the same thing so it doesn't matter if it's faster. No one is going to go and convert their thousands and thousands of JSON schemas from the widely-supported existing JSON schema to the schema you've chosen. If you could parse standard JSON schema _AND_ validate it faster than the existing libraries it would be a game-changer. But it doesn't so it's nothing more than a rival standard. This is not to say that your library isn't very cool. I think it is. I just think you are not providing a good comparison for practical purposes.
Sublime Text 3, yo.
The only thing I like about ifke is the fancy brut colored fef as uld highlighting, instead of the more aesteistic yet contrastless colors of eclipse or vs.
I haven't been able to find a good answer to this, but I really only want to store JSON, so why should I use postgres and a rest interface for that over something like couchdb?
in addition to what /u/ubernostrum said, the vast majority of django packages are prefixed with "django" in order to differentiate them from standard python packages found on pypi
Did you check out the link in my comment? It has a bunch of info, a link in the corner to the documentation (which includes a nice tutorial), and a small code sample on the front page. The [Github wiki](https://github.com/falconry/falcon/wiki) also has some sample projects you might find helpful.
After patching clang scan-build project to work with nmake/cl/clang-cl response files last week, been writing integration layer that runs various static analysis tools against generated compile_commands.json and where necessary, translating the output to xml that can be then exposed via Jenkins. 
Awesome, thanks!
os.walk uses recursion, and it's probably the single most versatile standard filesystem tool in the whole language. Recursion should be used judiciously in Python, but it's a fine concept when used in competent hands. 
So a beginner who doesn't know what he's doing, undercuts a qualified Python developer, does a shit job, and damages the reputation of the rest of us as a result. He shouldn't try. Freelance work is for experienced developers who know how to deal with customers, estimate work and produce working production quality software. 
If you're starting from square one with couchdb, it's not "just easily store json objects". Depending on how you plan to get that data back out you will be dealing with nosql-land. If you have normal sql/postgres experience, storing json blobs via sqlalchemy ORM and psql's json field translates closer to people's traditional sql/model/schema/config experience.
Very nice tutorial! Check `pp` command it is same as `p` but uses `pprint` module, very useful to view large dicts, also`bt` prints a stack trace 
/r/learnpython is the best place for this. /r/python is only for talking about the language.
Thank you, it works very well!
I'll post there. Thanks :)
Just posted it (https://www.reddit.com/r/learnpython/comments/61c2np/a_simple_tutorial_on_how_to_effectively_use_the/). Thanks for the suggestion!
np. Thank you for this tutorial, I plan to go through it later to brush up on pdb!
It's your fault for assuming a software update is an upgrade. Come on, you should know better. To me updates means embracing the risk that stuff that used to work fine will break. I do it manually, after the first 1 or 2 minor updates have been available for a couple of weeks.
Why would I need to? I'm not OP.
I find most ML posts bad as they usually just redo (badly) what 30 others have already done, but this actually is pretty cool. Soo much simpler than a classic HMM-GMM/DNN setup too. :D
I'm also having issues with the debugger on Ubuntu 16.10, using the console on a breakpoint does not work. 
You don't know about the in-line import funcion `__import__`? print(''.join(list(map(lambda res, mit:'\n'.join([''.join(['#' if max(filter(lambda x: abs(x[1]) &lt; 4.0, [(i, __import__('functools').reduce(lambda x, _: x*x + complex(a,b) if abs(x) &lt; 4.0 else 4.0, range(i), complex(a,b))) for i in range(mit)]), key=lambda x:x[0])[0] == mit-1 else ' ' for a in map(lambda x:(4*x/res - 2), range(res))]) for b in map(lambda x:(4*x/res - 2), range(res))]), [100], [100])))) Or, of course, you could use python2 where reduce is a builtin. 
Unless you're just retrieving an entry in the binary tree, traversing it recursivelly usually involves deciding which branch to descend to, and then do something with the recursive call result. Usually the decision of the correct branch is dependant on searching every branch as well. Those cases are not tail-recursive. Even in languages that have TCO you'd need to do an iterative algorithm instead, which isn't as neat as the recursive one, but won't overflow the stack. The only languages that really need TCO are functional languages, because in FP it's the idiomatic way to traverse any structure. Even in functional languages, you usually need to force some naturally recursive algorithms into a tail-recursive version, like the classic factorial example: fac n = fac' n 1 where fac' 0 k = k fac' n k = fac' (n - 1) (n * k)
It can't be that bad, seriously... _performs update_ My eyes are bleeding.
I'm looking forward to getting back to Python for some ETL both for work and downloaded bank statement processing, etc. 
What book?
Do your homework on your own. If you take shortcuts, or seek assistance, too early in your personal development you are not building a solid foundation for your future. Trust me: you will learn a lot from debugging this on your own.
For the past few weeks I've been working on a GUI app to let our receptionist quickly look up ID badge pictures for staff who come to the front desk. This week it really became usable. It's a Tkinter/ttk app that runs in WinPython 3.5. It is run from a network share, via a shortcut from her desktop, no local Python installation necessary. Big thanks to /u/AttachedToMyRealName for mentioning WinPython, which has helped me to finally convert my libraries to Python 3. Back to the app, I first figured out the storage format for our ID badge printing software. It's an SQLite database and a series of image files in a homespun graphics format, all zipped together into one large file. The graphics format is mixed text and binary, with the text part describing the size, and various image adjustments, and the binary part being either a JPEG file from an external camera, or their own raw data format which comes from a USB image capture. I wrote a Python library to unzip the big file, extract the binary parts of each image, apply the cropping from the image adjustments, and save full-sized and thumbnail images, with much help from Pillow. The lookup app itself uses the SQLite database and image collection to do keypress based searching: press 'a' and thumbnails and basic info for all of the people with last names starting with 'a' are shown. Press more keys to filter further. Click on a small image to expand it and show more info. Next step is to include data from our HR employee database. For this app I also developed a multi-tiered class hierarchy for the Tkinter app, separated into basic window, user interface, and application layers, with special operations being handled by separate modules. It's a departure from the monolithic app style I have ended up with in the past, and so much easier to manage with things in their separate layers. It's all been extremely exciting and rewarding to work on. Now I just hope the "customer" likes it! =)
Still waiting for pytest fixture introspection support :-/
'pp' works fine for me with 2.7.12. Personally I prefer ipdb to pdb, but pdb is always there so worth knowing.
Create a many to many relationship with your model and the schedule model. Make a custom through table that stores the last run date. This will make it so you can have multiple objects with the same task schedule, but individual last run dates. You should move any relationship specific fields to your through table and task specific fields in the task table. Hope that helps. 
This.
Recursion is a code smell in typical codebases, especially when you can't prove maximal depth (specification can be used as axiom for such proofs). Choosing right data structure or splitting problem to smaller chunks can mitigate such problems. Though we don't live in ideal world, so not all problems can be solved that way and sometimes we have to resort to less elegant or less performant solutions. 
Seems legit. Ask your teacher
Okay, thanks for letting me know!
I just invoke IPython at the point where I want a REPL (usually where the program crashes), try out variables and run commands, modify the source and repeat.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I have a project, [Neuron](https://github.com/Andrew-Shay/Neuron) that allows desktop apps to be created with HTML and Java script. It's like GitHub's Electron, except the backend is Python! I'm upgrading it to CEFPython 56 and Python 3.5 and add Linux and hopefully macOS support.
Indent all code blocks by four spaces, even blank lines; # This is the first line of a code block # This is the last line of a code block
+1 for atom. My only complaint is there doesnt seem to be a way to setup up an environment and run your program through the IDE, the way eclipse does. But thats trivial.
There's a better algorithm for this, if you'd like. See [here](https://github.com/gappleto97/python-utils/blob/master/pi.py) As for yours, I would throw that into a method def getpi(iters=100000): while iters &gt; 0: # your code iters -= 1 return math.sqrt(6 / (coprime / rolls))
FWIW a really useful tool here is IPython. You can use IPython.embed to mimic the functionality (more or less) of set_trace but with an IPython interface (eg smarter multi-line copy paste) 
Could you share a small reproducible example? Feel free to report the problem to https://youtrack.jetbrains.com/issues/PY
jesus christ that's ugly. 400+ characters crammed on a single line is not impressive edit:wording
Thank you! My best guess is that the BlckKnght's assumption is right. I've tested the results with and without using floating point numbers. For example, makeAmount(4, (0.1, 0.5, 1)) returns 5 while makeAmount(40, (1, 5, 10)) returns 25. I've also been getting different results from dynamic and recursive alghorithms with floats. But no discrepancies arise if I use only integers. So now there are no floating point numbers in testcases. And I hope that the sample case makes things more clear now: makeAmount(4, (1, 2, 3, 4) is 5. Since you can use: 1 four, 1 three and 1 one, 2 twos, 1 two and two ones, 4 ones.
Reddit API is fun to play with, along with the Uber API.
What's A* ? And what kind of robot ? Sorry rookie here :p
My pycharm does bash scripts just fine. I believe I have installed a plug in to allow it to do so though. 
I see! I don't think this will make it work in a Jupyter notebook though, will it? That's where I was originally trying to use it.
Oh, and the website got a redesign. Nice :) Curious to see what are the opinions here – what time manipulation library do you favour: pendulum, arrow, delorean, maya, datetime+pytz?
Use the js version of netwotkx and load the data progessively as users zoom in like in google map
My priority is to be able to plot a graph that I can re arrange as I wish after it was plotted 
Working on a very simple ping tool. Ping a target on your multiples subnetworks, display agency code/city where is the IP in Address Range, ping gateway and spooler. Useful for N1/N2 support. 
100x this! Currently it's a joke!
I say this with an All Products Pack license. I hate this artificial limitation. I understand not including an inspector for languages you don't have a license to, but to not even highlight other languages? HUGE step backwards for IDEs. I really hope JetBrains reconsiders this, because in the real world, sometimes you need to read PHP/Ruby files in PyCharm.
I see, I missed the graphics part. I found example code for using QGraphicsScene on this site: [Python PyQt4.QtGui.QGraphicsScene Examples](http://www.programcreek.com/python/example/52415/PyQt4.QtGui.QGraphicsScene) It's not a tutorial and it doesn't show the complete code, but this site finds references to search keywords in working projects from GitHub. Look at examples 9 and 10, which are part of an analog clock app. The project is called "uberqt" so you could look at the full source of the project on GitHub. It's not linked, I just searched on the project name and found it. Somewhere in that code will be a timer routine that moves the second minute and hour hands, which will show the basic mechanics of a graph where the objects can be moved around. Go find it! 
We are in the same boat then ;) I have never stuck with a single resource. Went with whatever Google search gave me
This one is based on the Event Dispatcher in Kivy. There's likely some insight in there to help you with your final project. Good luck! https://github.com/lobocv/eventdispatcher
How about sandman2? http://sandman2.readthedocs.io/en/latest/quickstart.html
[I used this weather api for a little data to play with when I was learning C# at school](https://openweathermap.org/current) I think it's free. 
definitely landed on Pendulum and plan on staying there. I had to write a bunch of datetime related business logic junk and it was made supremely easy compared to datetime. And the [FAQ](https://pendulum.eustace.io/faq/) totally worked on me towards attempting to use it first, over arrow/delorean/etc
Checkout our IPython. It's awesome
This will be a lot of help, thanks!
Oh, thanks so much for this! I've been looking for something just like it!
One of the design goals of Transcrypt is to generate readable JS. But I think the PyPyJs project has a VM currently compiled from C to asm.js. That could be webassembly in the future, if I remenber well there were plans for that. Only the downloads become quite big that way. 
I wish I could understand C++ https://github.com/nbergont/qgv
You're welcome :D
Look at pyqtgraph. Specifically the module's builtin examples. 
It's such a gorgeous, responsive and well-performing editor too. Can't stop using it!
It really is! The plugins available for it alone make it worthwhile to me. I'm a Mac user these days, and was using BBEdit -- but it's got ALL THE THINGS, thus feels kinda bloated (sftp to server is nice, but ST3 having it as a separate package is *nicer*). Also [so many nice themes](http://colorsublime.com/) for ST.
Nice! Has anyone taken this class already by any chance? It [dates back to mid-2015](http://www.earlevel.com/main/2015/09/16/audio-signal-processing-for-music-applications/). That's a good thing btw, gives the instructors time to sort out any problems in the course materials.
Looks like you're on the right track, good job!
This is the relevant issue if people want to vote for it: https://youtrack.jetbrains.com/issue/PY-18952
I took this last time around and dropped out in the 4th week. The course is geared towards the math/engineer type and I found it really challenging to come to it as a musician. The assignments felt arcane and disjointed from any material with which I'd previously been familiar, so I was basically shooting in the dark whether or not my solutions worked, as I was expected to translate an arcane array of numbers to another arcane array of numbers. I bring this up only to hone your expectation. If the Fourier Transform is sensible to you, you may do well in the course; if the Fourier Transform is a bit beyond your experience level, you'll have to commit a *lot* of time and energy to keep up (which I just couldn't). TL;DR - the course is great for math/engineering types, and really difficult for those of us without that background. EDIT: corrected spelling
I took and it couldn't complete it, which I've written up [here](https://www.reddit.com/r/Python/comments/61eppg/audio_signal_processing_for_music_applications_a/dfeer5j/). In short, I found the class requires an advanced level of mathematics I didn't have. P.S. - I found there were a number of errors in the course materials, unless those errors were due entirely to my difficulty with the math. I distinctly recall on one occasion finding that the solution to a problem necessitated a negative sign where the lecture indicated otherwise. But, again, I'm not that advanced in the math.
Awesome – hope you liked it :)
...and if you're like me and Atom doesn't feel right, give [VS Code](https://code.visualstudio.com/) a try.
That's cool. I've studied signal processing and all was done in Matlab, which has it's quirks. Will be interesting to learn using new tools, especially non proprietary ones.
So as a signal processing geophysicist, I should be golden! Thanks for the review. This looks like an interesting course.
Odoo has nice features. It's a full ERP with dozens of modules written in Python
Thanks for sharing!
It is, but it's third party and some people seem to have a great deal of difficulty with getting up a prompt and typing "pip install ipython".
&gt; 4K really does need to be fixed though. Patches are always welcome. I assume that you know where the bug tracker is?
Dask continues to be a fantastic, high-quality project. I'd really strongly encourage researchers doing any sort of analysis on large datasets (be it on your local machine or on a distributed system) to look into testing Dask. 
For those not aware, from the linked blog post: &gt; The most interesting part is on the Python side – the pydevd module, which we share with PyDev (the Python plugin for Eclipse).
I prefer VS Code, but for some reason Atom works better with my virtual environments. 
I'm not sure, I haven't used Jupyter before. If it uses Python's normal runtime, then it should work. If it's using iPython then support won't be there for a little bit. If it's its own runtime, then I might have to research a bit more!
That's nasty
How on earth did this get upvoted? The originator of one of the most succesful languages ever "holds a few notoriously weird opinions", WTF? Adding "a dumb keyword" is easy enough for some some complete bozo to write, but somebody, somewhere has to do the implementation, testing, docs, etc. Are you volunteering, or do you want everything handed to you on a plate?
Why not drop IDLE from the standard distribution?
It is.
I take it that you are a member of the Monty Python Gumby family?
Sorry but what's a data structure, let alone a tree structure? :-)
I'm sure that will pay off for you in the long run
FYI LPTHW is no longer recommended, check the sidebar for other good books.
Sorry, I don't think I understand. What do you mean by auto-opens to a new one? Also, any programming help would be better posted to r/learnpython.
I suppose by "open a new one" I mean that the program automatically makes a new script or something every time you open it and can choose to save or delete it upon closing so you don't save useless scripts. Yeah, I probably should post it there, huh. I'll delete this after I see you've seen this message ;3
Ooo, I think I get it. I'm not 100% familiar with pycharm but I don't think that is a thing but again you can check r/learnpython or r/pycharm for clarification. However, I'd make my own personal python script if there isn't, that would check to see if pycharm is open and if it is get the file that's open and then have the console window prompt asking if you wanted to keep that file when it's closed.
 What do you use for Python, may I ask :3 Also, how would I make a Python script that does what you mentioned? 
nah, recursion is like any other powerful tool, it must be used responsibly whether or not this responsibility is met is in the hands of the developer, not the language
I took this class at university in 2010 (was all Matlab back then). It's really useful if you want to learn frequency domain signal processing and have some maths background. If you want to use programming for music-making applications a course on puredata/maxmsp or supercollider might be more useful.
No, no, I don't want a python vm. That's why transcrypt is cool. Footprint is low and doesn't have a lot of runtime. I'd like to have webasm output because that's part of why webasm exists in the first place. I want something like cython, rather than cpython. :) Nevertheless, I digress :) 
&gt;... &gt;It can use explicit type annotations for variables, using the new Python 3.6 syntax: &gt; &gt;`test_var: int = 3.5` &gt; I don't get it... is int = 3.5 an int now? Is this voodoo? Is test_var = 3? Is this some Java magic? 
As of Python 3.5, anyway. See https://www.python.org/dev/peps/pep-0465/
There's a reason why it's **C**ython. Just like real life, there are people jump from top of a building to another. Some people call it suicidal, some people call it parkour. It could be done, doesn't mean it should be used.
What am I looking at here? 
That PEP actually explains why there isn't currently a matrix exponentiation operator: https://www.python.org/dev/peps/pep-0465/#non-definition-of-matrix-power
I apparently misunderstood which version of matrix exponentiation you wanted.
agreed! the documentation and code base are very easy to understand as well. 
In response to your edit: `**` is exponentiation as in *"multiplication, exponentiation, tetration, ..."*, not the exponential function. Likewise for the hypothetical `@@`
I saw that, but PEP 465 was written back in 2014. I was wondering if anyone involved with the development of Python (or who knows someone who is) was aware of any more recent going-ons regarding that. Presumably, two years is enough to get at least a preliminary idea of whether implementing an infix `@@` is something that they might move forward with or nix altogether
yes I know but from what I've read this IDE's design principal ASSumes the user works certain ways and I don't like that. TBH I don't trust it would totally let me control the saving like humble little notepad does. oh also, please let me know if I can disable the feature that "Save" saves all the bloody (tabbed) files instead of the active tab.
The IDEA IDE's never did that. The Autosave feature is annoying and really shouldn't be on by default. But AFAIK it only ever saves the file you actually save.
I mean [PEPs do change](https://github.com/python/peps/commits/master/pep-0465.txt). I doubt there is any more recent discussions about it, but I don't follow these things very carefully. I'm curious, is matrix exponentiation something you actually do? I'm not even really sure why or how you would use it. Introducing an operator for such seemingly rarely-used operations sounds like it just makes the language more complicated and confusing with little gain -- if someone ever used it, I would probably need to figure out what it means. I understand it makes some sense to have consistency with `*` multiplication, but it just seems a little silly to me.
That was my guess. Thank you. 
&gt; if they get out of sync wouldn't that break your project? uh it's the auto-save that I worry would cause the break
auto saving and saving individual files vs saving the entire project are different issues. how would auto-saving cause something to break? I can only imagine problems if you're remotely editing production code or have file watchers improperly configured
&gt; how would auto-saving cause something to break? It likely would - for me, for my style of work and skill level/intelligence, the control freak who simply wants to decide the right point to "commit" the change...or say "the hell with this mess!" and close it w/o saving or do the "revert" 
Interesting idea...Thankyou.
your wording makes me wonder if you understand what i mean by "commit"
You seem to have experience with other tools, so here's what I suggest: pick any one of those frameworks and try to build something in it. Then take the next one and try to build the same thing in it. Then the next one. Doesn't even have to be big stuff, just a simple TODO list app or whatever the cool kids do these days. The differences between the frameworks are mostly in how they're designed, not in what they can do, and the best way to see what tool suits your personal style best is to try all of them.
Cython generally feels very similar to climbing on the roof (to fix the lightning rod or a loose sheet of metal).
Arthur Dent: A sign lit up saying "Please do not press this button again."
No, sorry, I've been very unclear!! I've added the output, which is the core of the matter... What mypy does, is signaling that a float is being assigned to something that should be an int. Mypy can do this type of check also for parameters, return values, compound types etc. Some examples of this can e.g. be found at: http://mypy-lang.org/ The idea is that optional type checking is added: - either only at crucial points in your code, e.g. at module boundaries - or everywhere Personally I like a mix of dynamic typing inside modules and static typing at the boundaries, to have thin, stable module interfaces, as explained in: https://www.infoq.com/articles/transcrypt-python-javascript-compiler Static typing facilitates "safe" cooperation in a team, but dynamic typing allows getting done a lot with very little code and sometimes in an elegant way. So mypy does not make Python a mandatory statically typed language like C++. But it offers a choice, which I think is good. 
Unless you have some specific use case, use django. The django ecosystem garanty you'll find anything you need. Pyramid is for whe you want to learn something new, twisted if you have networking and flask if your team have a lot of beginers and the project is small. 
Nagare for Python front to back.
You can still save manually if/when you want (it's always available AFAIK). You can even disable autosave.
As a long pydev user, I still don't get what's better in Pycharm...
Zed is wrong - he himself caved in and [rewrote LPTHW to Python 3](https://learnpythonthehardway.org/python3/). Python 3 is the now. Python 2 is legacy. Don't use Python 2. Edit: also, [here's a great post refuting Zed's criticism of Python 3](https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/).
- "Ignore Python 3" is outdated advice; if you have to pick today, go with 3. Use Python 2 only if you absolutely have to; usually, the reason is one of a) you need to work on a legacy codebase that cannot be migrated right now, or b) a crucial library you need is not available for Python 3 - There are a few differences to the core language, the most striking ones being how bytestrings vs. unicode strings work (`str` is a bytestring in 2, but a unicode string in 3), and `print` no longer being a language construct but just a regular library function. Most of the practical differences are with the standard libraries; some of them have been replaced entirely, others have a different, incompatible API. The `six` library provides wrappers that take care of this, and the 2to3 utility can (usually) convert Python 2 code to Python 3 code automatically. - Python is free software, it's not going to go anywhere, so technically you can stick with 2.7 forever, however all current development is on the 3.x branch, and there will not be a 2.8. If you want to keep using new stuff, then you will need to start using Python 3. - The differences are small enough to not worry about in practice, as a programmer. Learning Python 3 when you already know 2 is trivial, and vv. Neither should take more than a few days, really, plus some getting used to the different libraries (which is pretty much just a matter of reading a bit more documentation for a while). TL;DR: Use Python 3.
no need to duplicate models and business logic client and server side. Check it out www.nagare.org
Hello! First off this is an amazing project! I was just wondering what drone are you using to make this project a reality? I'm currently looking at different drone platforms that work well with Python and would be very keen to find out! Many Thanks.
&gt;There are some insane mathematical problems that cannot though. Actually, two lists with `.pop` and `.append`, ability to assign ints to variables and perform arithmetics on them, and simple `while` loops as the only control structure (without fancy keywords like `break` or `continue`) would be enough for Python to be Turing complete.
Eh, I don't see the value of committing interim work. Seems very redundant. 
Literally a fucking check box mate.
currently we only do "near realtime processing". the drone is only going pretty slow when flying autonomously. processing the signal on a notebook is possible without CUDA (we can stream the video signal with low latency). processing the signal on the mounted raspberry pi requires to downscale the video resolution and also to reduce the frame rate.
Check if you're installing the packages in the right python version. If more than one version is installed in your system, the default might not be the 2.7.13 and u might be installing the modules in other version. In any case, go to cmd -&gt; type python and see if the default is the one you're looking for to use.
Oh, yeah, I know what setjmp.h is for in C; I thought you were claiming it could actually be useful in Cython somehow.
Is that an nerf gun magazine 
That's what I was talking about. I saw it in Cython code, I just don't know whether it is idiomatic.
stackoverflow as well
What the fuck.
If you feel the need to tinker, Flask is what I'd recommend. It's my personal poison of choice as it's relatively austere and doesn't make many judgement calls on your behalf. That said, you'll definitely run into some issues in the beginning when figuring out application structure (Blueprints are your friend). Pyramid is another one you might want to look at, but I don't have practical experience with it. If you want something that works out of the box, Django is probably best for that. I'm not it's biggest fan as it wants to control a lot of design choices for you. But if you're building a traditional RDBMS + CRUD app, you really can't go wrong with this. However, if you're not using a RDBMS (e.g. mongo, etc), you're going to have to delve into third party packages. If you want to do async stuff, there's twisted and tornado (neither of which I've done anything with) or if you're using Python 3.4+ there's aiohttp which I've been building stuff in lately to get a good feel for it. aiohttp is similar to Flask with it's web server setup except even more austere (no templating, no sessions, little in the way of helpers it's almost literally only request &amp; response handling) so you'll definitely need to build some tooling around it. Depending on how stuff goes at work, I'm hoping to open source some of the tooling I've built around it. There's several others of varying quality and support (CherryPy, web.py, Falcon) but I can't speak to their strengths or weaknesses. But I'd say pick three or four (maybe Flask, Django, Pyramid and an async one) and build something simple in it -- todo, small blog -- to get a feel for what each feels like.
I know you're getting down voted, but I'm with you on this one. "Auto-save" in IDEs should work like they do in Notepad++, which saves all the tabs to a temporary file while you work, and only saves to the actual file when you explicitly ask it to save that file. This means you can close Notepad++ or reboot or shutdown and all of the changes will still be there the next time you open up the editor. It's a really nice solution to this problem, in fact I often use it by making new tabs that I never save, as convenient temporary files. The tabs will still be there the next time I open up the editor. Any IDE developers out there, please do auto-save this way instead of modifying the file I'm editing. Thank you.
In Visual Basic it was called Application.DoEvents(), which gave the rest of the system a chance to do its stuff, like updating windows...I can't find an equivalent in Python though.
Use list comprehension that loops through RNA with a range of `RNA.find(start)` and `RNA.find(stop)+len(stop)` then join the list in to a string.
Lol.
I agree with you.
Probably this is meant? `RNA.split("AUG")[1].split("UAA")[0]` (note that this is not slicing)
IMHO that's teaching the wrong lesson.
Reminds me of the TV show, Person of Interest.
This worked, thank you!
&gt; If you are about to ask a question, please consider r/learnpython or the learn python discord. -Sidebar
&gt; If you are about to ask a question, please consider r/learnpython or the learn python discord. 
The teacher might be trying to get the students to think of other ways to solve problems if the normal way isn't viable and at the same time use different string functions.
They should add a red filter for it as a joke, that would be bad ass just like the scan scene in Terminator. https://www.youtube.com/watch?v=YvRb9jZ9wFk 
I'm a bit old for homework. Was asking for advice, as I said I'm new to this. Wasn't aware of r/learnpython so will try there. I haven't tried to solve the problem, because I don't know where to start. Hence asking for help, not the answer. The answer is worthless
&gt; My degree, a maths and physics joint honours programme in the UK has one semester of compulsory rogramming, which I am about to complete. They teach using Spyder (*Spyder maintainer here*) I don't want to steal your thread, just out of curiosity, could you tell us where you are taking this course? Thanks!
Saving is a feature created because we used to have floppy disks and other horribly slow storage. It's been a totally obsolete concept for decades. Only macOS has fixed it. 
Indeed, no need for slicing.
From what I understand in the [terms of service](https://www.google.com/help/terms_maps.html), as long as you're not profiting from the resulting image and you attribute it properly, it should fall under [fair use](https://en.wikipedia.org/wiki/Fair_use) for the purposes of display in your own home. (Not a lawyer though, so my understanding may be incorrect)
Ahh, I go to Cardiff University, in the UK, and currently I'm about to finish my first year here. If you're from the US, university here works kind of differently, we don't really have majors and minors. So, say you apply to study history, then you do nothing but history, or apply to do biology, and you only do biology, and obviously a little bit of maths that you might need. There's also joint honours courses, that are basically like half of each, so I do all of the core modules of the maths and physics course, with the downside of not having much choice.
"Done"? What does that even mean? You have undo if you change your mind but you're never done. Git is where you save your important milestones. 
Not that I'm aware of. Matt Rocklin has a [blog](http://matthewrocklin.com/blog/) with many relatively short articles that provide examples of different use cases, but there isn't one master document of selling points. And that makes sense - this is a low-level library, and it best benefits savvy users doing numerical computation or data analysis.
&gt; you can just go through and change back up to the commit. You can even check out straight to a specific commit. uh to begin with, I don't want to be bothered with that
yeah "file save" - this is such a trivial, computer 101 stuff I feel silly making it a topic of discussion. What's with the Python motto "We're all adults here" ? SO here the designer treats users like Paula the new accountant who saves only on file-close prompt.
&gt; I'm not sure what your objection is. Taking what I consider basic, important control &amp; decision from me. &gt; autosaving is hardly a new feature specific to jetbrains. Please let me know which other IDEs do that, be default - auto-save &amp; save-all-tabs 
well I have been smart enough to not have lost changes as far back as I can remember. It's Pycharm, in being like so, is being "iamveryveryverysmart" Thank you very much Pycharm, but fuck off and let me be responsible adult.
Are you stark, staring, raving nuts? Common sense is not acceptable on reddit :-)
On macOS when you hit save you get a snapshot at that point. So you get the best of both worlds. 
Eh? It's a system that requires manual saving that loses work you know. 
Well first of all your while loop never executes because the length of priemgetallen is going to remain zero. Secondly I don't know why you're doing j = 2 then using a for loop which instantiates the value of j to 0. Third of all why are you looping only up to but not including i/2? Fourth of all your condition inside the loop is wrong, what you should consider doing is using a while loop which checks two conditions, one is j != i and the second should be greenPr != False. Using an or operator you should check these two conditions, incrementing j each time so j += 1. Python doesn't use &lt;var&gt;++ you need to do something like j += 1 or j = j + 1 (same thing written differently). So in the while loop check if i % j == 0 if this happens then the number is not prime since it divides by something other than itself and (not in this case but in general, 1). Think about what you should do then to stop the while loop from continuing. Also your last 20 is incorrect, you need to store the last twenty in some sub lit so you need to do priemgetallen[len(priemgetallen)-20:] This will get the last 20 in the list since your don't know how long the list will be. 
maybe
&gt; saying you only want to save one file in a project is akin to wanting to save only a single line in a file. I want to save *just that* particular file at that moment, is that ok ? 
So now I'm wondering...what if you're to lose this feature tomorrow ? you're going to have a hard time ? how is it going to be difficult for you (by you I mean those who DV'd me) ? I really don't understand why I'm "so out of touch", I'm simply not used to that way, maybe someday I will, but that'd takes time &amp; practice, no ? then again I'm not sure I want to start working like that or go into that mentality. Maybe one day it will become *necessary* for me to turn such helpful feature on and work that way &lt;shrug/&gt; 
See for me, **C**ython is like the elevators in the empire state building. It will get the programmer to the rooftop really quickly, it's up to the person to decide what to do next.
Edit
SimulateMe! Zerg3rr
Yeah, it's definitely Python 2. --- Fatal error: argument error. This just means you haven't supplied an input file! When I use the Hello World example from [here](http://www.dangermouse.net/esoteric/zombie.html) it works perfectly: HelloWorld is a zombie summon task SayHello say "Hello World!" animate animate
Ok well how do I provide it the file then? In the shell right? 
/r/learnpython In the past I feed the data to a d3.js template and it worked just fine, super easy as well. 
No, not anymore, sorry!
Hi, how much time would you be expecting others to put into this project? I would like to help, for fun and profit (more experience), but I could only help on nights and weekends as time allows.
[Learn Python the Hard Way](https://learnpythonthehardway.org/book/) is a good, methodical introduction to python programming. I can also personally recommend [Python for Informatics](http://www.pythonlearn.com/book.php). You can download the book for free or buy a copy for ~$10. There is even a corresponding Coursera course from the author through the University of Michigan. 
So how is the data obtained from the string, by waving one of Harry Potter's wands?
Now auto-import [plumbum](https://plumbum.readthedocs.io/en/latest/) (shell-like syntax in python). That way we get the awesome power of python and the abbreviated syntax of bash.
Actually it is 40x. Cython brings the 40%, while pep 523 brings 40x ! This is a great proof of the prospect for pep 523 and speeding up, and I'll hope that someone will start experimenting with jit-ing cpython soon.
Been interested in doing a similar project myself for a while. How are you managing the get the program to constantly scan for changes to the website; is it simply a process running continuously Running in the background?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Ask in /r/learnpython
odds are you are in separate virtual envs. But I've hit bugs with Spyder before (namely, doctests not running). Just use a different editor?
Uh, this pretty clearly violates 2b (copying content), 2c (mass download) and maybe 2d (making a google maps like product).
Thanks
Will relay the message 
I write packages that I use in other projects all the time. Seems like I wouldn't be able to use this.
Can't you import * in your dunder init?
What do you use for detecting the people? Some kind of haar cascade? and how do you track them if they move?
It's fine, mt flatmate is coming back soon he studies comsci, I guess he'll be able to help :D
I have a feeling it's not a python class, but an intro bioinformatics class that happens to use python. I'm so, so sorry, OP. 
A* is a path finding algorithm. I'm hopping to use it on my teams [IGVC](http://www.igvc.org) robot.
A horrible but amusing way to do this in python is to use setattr() to add an attribute to your function. Better to use a closure or generator as others have said though.
Honestly, the last one isn't *that* bad. It basically *is* a static variable. The second, though, is an abomination.
you don't even need `setattr`. Just go ahead and set the attr: `fun.a = 1`.
Eh, usually you'll want to check for existence with hasattr first so you initialize properly. When I do this I use setattr for consistency / to emphasize to the casual reader of my code something weird is going on.
That seems like a good idea if you want your code to place nice with others ;)
You don't really need hasattr either; you can just write: def g(): g.n += 1 return g.n g.n = 0 
Ah yes... you are right. The article said 40% from cython, and 10x to 80x speedup from pep 523. My bad... didn't read it right.
Pardon me if this is super obvious as I know nothing about the problems you're trying to solve but in my experience with tkinter and wxpython, if I have a ton of identical widgets like a column of checkboxes, I create a generic method that can make as many of the widget I want and all the sizer logic, etc. The bulk of the labor then is handling the data not in trying to keep making my UI look right. Then if I get more data to process later just call that method and point it to the right data processing event catchers. 
What's the mechanism for the camera movement? 
Line 5 of the [zen of python](https://www.python.org/dev/peps/pep-0020/) is "Flat is better than nested". This advises against using closures for more complicated circumstances. I assumed OP was just using an incrementer as a toy example, since one should obviously use a generator for that.
Maybe singleton might work https://python-3-patterns-idioms-test.readthedocs.io/en/latest/Singleton.html
Why not host it on Github so anyone could help?
I think generators seem to be the way to go. Thanks!
I think you're right. I'll have to read up on them. Thanks!
You're reading into that quite heavily. Your suggested code is longer and more deeply nested (as in indented). But that's irrelevant I think. The problem is that your solution is just plain over complex. 
yes, I do. I will write an article with a detailed explanation about this within the next days ...
And you'd better use another name for your function, because otherwise it will shadow builtin `next()` function.
I'm sold.
You could propose to include this in https://pypi.python.org/pypi/cachetools
Ah, the "guido can do no wrong" argument. I missed it. That being said, I have tremendous respect for him, his work, and from the few interactions I had with him on the python bug tracker &amp; github, he came off as a well-rounded awesome guy. But it doesn't mean that I cannot criticize his viewpoints or his choices. And yes, adding a "dumb" keyword to the CPython grammar is not difficult, nor the actual TCO code (it can already be emulated using decorators), the technical hardships would be to straighten out edge cases, have a comprehensive test suite, and find a way of telling developers when their code does not perform tail calls while using the keyword (documentation would be quite short, as it is not a complicated concept). But the problem is more political than technical, so there is no point discussing whether I am apparently an incompetent, spoon-fed developer.
How it is differ/faster/slower from https://docs.python.org/3/library/functools.html#functools.lru_cache (its py3 but it's also package for py2)
I sure did. I'm at an intermediate level, so I normally wouldn't have bought it, but my boss buys a lot of the O'Reilly books for the "prison library" as we like to call it, and I've found some gems there, including yours. There was no single topic I was unfamiliar with, but I find I get a nice, low-effort, reinforcing of important concepts with such books, as long as they're well-written, which yours is. Plus there's always a connection or an approach I've never considered, and the accompanying Jupyter notebooks were really, really, good, complete with illustrations which is a rarity in the genre! I've been recommending it to others starting out as an alternative to Wes McKinney's book, which is a little dense for some (although required reading at some point, especially now that's it's been? being? updated).
Your "closure" code simply creates a local variable `a` in the inner function with an initial value of `0.0`, the fact that this variable of the inner function has the same name as a variable from the outer function doesn't matter. Python closures are generally read-only, once you assign to a free variable, Python creates a new variable with the same name in the current scope. (The same reason why the `global` keyword exists in Python to enable assigning to global variables.) You can get around that by using a mutable container so you don't need to reassign the variable: def make_fun(): a = [0] def fun(x): a[0] += 1 return x * a[0] return fun **EDIT**: As /u/EsperCharmMyself has correctly pointed out, the clean solution to achieve this ist the `nonlocal` statement which I had forgotten about.
To soothe our autism?
worth noting that this builtin `next()` can solve OPs problem quite nicely: &gt;&gt;&gt; import itertools &gt;&gt;&gt; counter = itertools.count(1) # or equivalently, the function by u/tonyf66 &gt;&gt;&gt; next(counter) 1 &gt;&gt;&gt; next(counter) 2 
It's still a global variable in the case of a singleton or a class instance or any of the other weird solutions offered. Only difference is that those solutions are more complex. The motivation seems obvious: write simple and understandable code and then move on. KISS is the default state, any one arguing for something that is not simple is the person who must explain themselves. 
Let's say i launch 1000 dices, i want to represent them graphically! i'm new to python so i think i can build dice simulator, but i don't know how to show results!
So we can use them as components in terminal commands. Piping something to a multi line statement is a pain in the ass. I write a lot of scripts where the meat of the functionality is in subprocess.check_output, but the data manipulation is too complicated to do in bash. Perl is great for one-line bash commands, but python isn't.
Working on a project that calculates how much per litre it costs all to together.
Many networking applications use random numbers, and then using **/dev/random** or the like becomes a bottleneck. For example, a DNS client needs both a random transaction identifier and (ideally) a random source port. Together you usually need something like 26 bits of randomness per query, but these can be thousands per second. I switched to a non-cryptographically safe version for a proxy I wrote, because getting randomness was more time-consuming than everything else the program was doing. :(
What have you coded so far?
While I'm not suggesting this as the best solution for the problem you're _actually trying to solve_ (see: [XY problem](https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem)) the only way to have a _function_ (not a coroutine or generator) with state that can not be accessed anywhere else (barring use of heavy introspection) is to use a closure: def wrap(): n = 0 def f(): nonlocal n n += 1 return n return f f = wrap() del wrap For a bit more Pythonic solution, if you need a lot of functions with internal state, you could make a function decorator that passes a state object: def add_state(init=None): if init is None: init = {} state = type("State", (object,), init)() def decorator(f): def wrap(*args, **kwargs): return f(state, *args, **kwargs) return wrap return decorator @add_state({"n": 0}) def f(s): s.n += 1 return s.n print(f()) # 1 print(f()) # 2 But at this point you should really think hard whether this is the best solution, and take a long hard look at classes and coroutines. 
For showing the results of dice rolls, you probably want some sort of plotting library. Something like plotly should help: https://plot.ly/python/bar-charts/
The suggestion to use generators is fine and could work for what you want ([though not exactly in the way it was suggested](https://www.reddit.com/r/Python/comments/61pyu9/global_variable_for_only_one_function/dfgojti/)). But you actually have a few different questions here that are worth exploring. The first thing you're running into is lack of encapsulation. It feels bad to have everything just cluttering up the global scope with no way to tie together data with the function(s) that will use it. This is why Object-Oriented Programming was created. Python's object model is based around classes. You can think of classes as a nice way to tie together what something is (its "attributes") and what it can do (its "behavior"). class Counter: def __init__(self): # constructor method self._count = 0 # instance variable def next(self): # instance method self._count += 1 return self._count So we have a class with two methods. Methods are just like regular top-level functions, the only difference is they know about the class because python automatically passes the instance as the first argument (which can be named anything, but is universally called "self"). counter = Counter() print(counter.next()) # 1 print(counter.next()) # 2 print(counter.next()) # 3 When you call a class you create an *instance* of it. You can make as many as you want and they will all have their own copies of all the attributes and methods of the class. Python will automatically invoke the `__init__` method (among other things) when you call the class, and pass any additional arguments to it (in this case there are no additional arguments). Then we call the instance method `next()` on the instance. This is essentially the same thing as: count = 0 def next(): global count count += 1 return count print(next()) # 1 print(next()) # 2 print(next()) # 3 ...except now it's all bundled together in an instance of a class, and each instance has it's own attributes and methods and they don't interfere with each other! counter2 = Counter() print(counter2.next()) # 1 print(counter.next()) # 4 How do you prevent things that are not the class instance from reading or writing to the `self._count` instance variable? The short answer is, you don't. Anything the interpreter can see can also be gotten at by programs. There is a convention that any attribute beginning with `_` is private to the instance. But that's really only to express the intent, nothing is actually hidden or protected. There's lot of other things you can do with classes, be sure to check out [the tutorial about them](https://docs.python.org/3/tutorial/classes.html)!
Have you built a web app using Django?
Because in python, default arguments are initialized once and not at each function call. Pretty idiotic IMO.
For most apps including DNS you should be using /dev/urandom. It's a system level pseudorandom device so you get the benefit of random allocation, it's seeded directly from the kernel entropy pool, and maintained by smart people. From the man page. &gt; If you are unsure about whether you should use /dev/random or /dev/urandom, then probably you want to use the latter. As a general rule, /dev/urandom should be used for everything except long-lived GPG/SSL/SSH keys. But it's not designed for bulk randomness. &gt; **The kernel random-number generator is designed to produce a small amount of high-quality seed material to seed a cryptographic pseudo-random number generator (CPRNG). It is designed for security, not speed, and is poorly suited to generating large amounts of random data.** Users should be very economical in the amount of seed material that they read from /dev/urandom (and /dev/random); unnecessarily reading large quantities of data from this device will have a negative impact on other users of the device.
&gt;secure_password = ''.join(secrets.choice(chNo Records.aracters) for i in range(10)) Is that an accidental copy paste there?
Create a program that asks for users to input a number and it will let them know if it's in the list or not (using a while or for loop). 
&gt; Piping something to a multi line statement is a pain in the ass. Why? Normally I just open a single quoted string (ie. `python -c '`) and type away. For one offs in the shell, this is less convenient, but for scripts it's fine, if slightly less readable.
If you are using pyqt, you can build ui files via qtdesigner, it comes with qtcreator, but you sholud manualy rebild those ui files to py classes. Better to just code all of the windows.
[fluent Python](http://shop.oreilly.com/product/mobile/0636920032519.do) 
Yes, that's why if you do it pylint will scream angrily at you. (and everyone should be using pylint, really)
Hi there, this post has been removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
I mean the simplest answer to his example is to use range. Examples are by their nature simplified versions of reality. It seems silly to tell him only solutions which work for his example, without extrapolating a little.
Yeah but when does it decide to move?
You could use a closure, or just go ahead and promote it to a class: class Throwaway: def __init__(self, val=0): self.ctr = val def f(self): self.ctr += 1 return self.ctr f = Throwaway(0).f Or, if you don't want to leak a class definition: (here we go...) f = type('Closure', (object,), { '__init__': (lambda self, val=0: setattr(self, 'ctr', val-1)), 'f': (lambda self: [setattr(self, 'ctr', getattr(self, 'ctr') + 1), self.ctr][-1]) })().f
Abusing mutable containers in that way is gross. Why not just def make_fun(): a = 0 def fun(): nonlocal a a += 1 return a return fun 
to be infinite. you just picked an arbitrarily large number.
Personally I find Pycharm much better integrated - although both pydev and pycharm are python plugins on a java based platform, pydev on eclipse feels cobbled together out of bits and plugins while Pycharm feels like a dedicated python tool. Whole experience is smoother, more elegant, and Pycharm community edition is free and open source too
And the price you are willing to pay for them…
If you are doing visualizations I would say look at bokeh or plotly. If just needed to set parameter data (and maybe visualize also) check out Wooey. I think there might also be a UI toolbox for notebooks but I never pursued that. I have been trying to make it easier to have my coworkers who don't program to be able to run analysis and am pretty much using Django but the that may be over kill for what you need.
Because I forgot about the `nonlocal` statement. You're right that it's a much cleaner solution to this problem.
 File "C:\Users\Rafa\Desktop\Prueba 2.py", line 9, in &lt;module&gt; nombre_pc = datos[1].split (" ")[-1].split ("\n")[0] IndexError: string index out of range The -1 is to be put first the user's name, as it comes out at the end
urandom was not designed with speed in mind and you should use a userspace fast PRNG for operations like wiping a HD. * urandom is ~ 10MB/s * openssl rand is ~70MB/s * There are good implementations that are twice that fast for stuff like wiping drives. So it can be used, but it's really not optimal. 
Post history looks like OP is at columbia university. I'm sure the school would love to see to see an email to this thread...
Adding "a dumb keyword" sounds so simple I'd have thought that anybody could have done the work in the time it's taken to type this up, but it appears that you are like so many developers who want everything from an open source project like Python, but aren't prepared to give anything. As we say here in the UK, put up or shut up.
&gt; except OSError, e: Gross, don't do that. Replace that comma with as. You should also explicitly call close on that handle as well. Though the biggest issue with it is that sqlite will handle creating the file if doesn't exist. As for the actual module, I have to ask why? Sqlite can handle concurrent reads but isn't great at concurrent writes. And the module is stuck using sqlite instead of allowing configurable caches. 
As others have mentioned, there's always [Qt Designer](https://doc.qt.io/qt-4.8/designer-manual.html), which lets you visually design your forms. You can then import them into Python. If you want to step outside of Qt, there's [Glade](https://glade.gnome.org/) for GTK. But in general, what you're looking for hasn't really caught on. Eric's Python IDE had (has?) [some functionality](https://eric-ide.python-projects.org/) like that, but it hasn't been maintained in ages and really was never up snuff compared to PyCharm or WingIDE. There was, over 10 years ago, a [commercial IDE called BlackAdder](http://www.informit.com/articles/article.aspx?p=23288&amp;seqNum=4) that was built around the idea of a 90s Visual Studio-style workflow. But these days, since most new development is either native-mobile or web-based, I don't think there's been much traction in terms of newer 90s-style "traditional" IDEs with form building. It's just not a thing much anymore.
def next(): for i in xrange(10): yield i
/dev/urandom is *quicker* than openssl rand for me. I'm getting about 230MiB/s for /dev/urandom (`pv &lt;/dev/urandom &gt;/dev/null`), and 30MiB/s for openssl rand (`openssl rand 1000000000 | pv &gt;/dev/null`). What about on your system? What's your CPU? Edit: I'm on a FX-4300
Thank you for the help :D
Thank you for the help :D
Here you go: http://jinja.pocoo.org/docs/2.9/templates/#include You can also use extends to have a base template that you can modify.
I sure wish they'd named this module something else. I see `secrets` and think it's a library for managing secrets. Something to, say, manage the database password in my Python code safely; read it off of disk, store it in memory, keep it encrypted until I actually use it. Speaking of which, is there a good module for that in Python?
Broader question: Why does this stuff always get upvoted?
On an Intel 4700MQ, I get similar results of 215MiB/s and 51MiB/s. /dev/urandom is significantly faster. 
That requires you to initialized the variable outside the function before calling it, which is fragile and breaks the encapsulation we're trying to accomplish here.
I haven't used it myself, but [Gooey](https://github.com/chriskiehl/Gooey) may be of use if you're just creating a GUI for a command line program.
Thanks, I know (and am really grateful) about Christoph Gohlke's website, I'm just wondering why the scipy team does not provide an official windows .whl in pypi.
thanks for this. I'm sorry for the lack of info. This is going to be my first real project on my own and I have no real idea of what I actually need. Thanks again for your time. I'll start looking into Flask.
Look at datos after the readline. It will only be one string, not a list. If it was a blank line, then datos will probably be '\n', thus indexing [1] will be wrong. In any case, you are trying to split one character, so will only get back one character. If datos is empty or only one character, you will get the error from the [1] and it won't get to the split. If anything is there to split, [-1] should be legal for the results of split, unlike what is implied by another answer. I'm assuming that "systeminfo" is valid on your machine. On my Mac, in 2.7 and 3.6, I get "/bin/sh: systeminfo: command not found" after popen, so it's possible that datos is empty. But that was from the REPL, so your mileage may vary.
Solving a bunch of little problems, like ones listed on the Project Euler (https://projecteuler.net/) is a good way to gain some experience in programming, especially if you are interested in math.
This is a great post. I am also knew to Python and I have learned that just working on a (any) project is the best way to learn. 
&gt; without using .remove, del, pop or slicing Why? Make a copy first if you don't want to damage the original. &gt; loop a second list with the first element removed over my first list So ... do that? # since you said no slicing... # "1" is the 2nd element... for i in range(1,len(the_list)): elem_from_list = the_list[i] ... Also, /r/learnpython 
 def remove_0th(seq): seq_iter = iter(seq) # advance iterator one step, to skip over 0'th element next(seq_iter) # return a list of everything else return list(seq_iter) z = list("abcdefghijklmnopqrstuvwxyz") print(z) print(remove_0th(z)) prints: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'] ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'] 
Introspection of signtures shouldn't create arbitrary objects, just ones it needs to represent what it found. If default arguments are created on demand then you need to account for the fact that someone is going to default something like a database connection (which is bad enough by itself). 
Anaconda is great! Finally a Python package manager that handles binaries.
Because it's not similar to `random.randrange`
You generally don't want to do that kind of stuff in a scripting language, because there is no good way to establish any kind of chain of trust that what you think you are executing is in fact what you are executing. With a binary you can sign the binary, and then the libraries the binary loads can be signed, all the way down to the OS kernel (not that all software does this, but it could and should, especially if it is key management). If you trust your OS to keep your python scripts secure against intruders (so that you are actually executing the code you expect to execute), then you might as well trust it to keep your passwords secure even if you save them in a plaintext file format. Yes there is some marginal gain in security, but its pretty marginal in a programming language that is very content to let everything be monkeypatched. 
Why is this implemented using the python C-API and not in pure python?
As long as you dont use a lot of randomness (i.e. use up the whole entropy pool) os generated randomness is quite fast.
That's a different story! If you want it to be in the same object, your best bet would be to use unpacking: trash, *new_list = original_list EDIT: pohmelie beat me to it.
Or you use [virtualenvwrapper](https://virtualenvwrapper.readthedocs.io/en/latest/) to manage virtual environments and the related project directories.
They clearly say, its for js only. Bad luck! :(
Good luck finding a genuinely random number generator.
Hello, thanks for your reply I have coded basic things like calculators and programs that edit and hold data really basic stuff.
build a simple website using a microframework like flask. Create a data collection software, or a web scraping software. Create a web spider... 
Thanks good too know ☺
Ok thanks I'll check it out!
Ok interesting thank you!
Yeah, alot of information on this thread :)
Ok nice I'll check it out!
Thank you! I'll try it out.
Thanks, for all the replys! Thank you
Haha interesting thanks for the idea!
how to be a douchebag: attempt to nitpick on shit that doesn't relate to OPs question or add anything to the conversation. also if you are on python2 you actually constructed that big ass range list for no reason
Hey I'm really confused by this. As someone who started programming with Fortran and C (yes those languages) memory management and handling logic is super duper important to me and was ingrained in me. When I started picking up Python I started learning about this weird language where you simply don't need to care about anything it seems. It was my understanding that Python was a "consenting adults" language and after reading and learning more I thought one of the philosophies behind Python was to more or less assume that the user is using your code properly. As in, no need to handle "business logic" like making sure that people can't, say, instance a Triangle object with angles that don't add up to 180. I was under the impression that the """pythonic""" way to do things was to just let the users do whatever they want, construct a Triangle with 70, 70, and 90 degrees for angles if they want, and let other parts of the code complain if and when it's actually a problem. Am I completely misunderstanding things and/or flat out wrong?
Hey op, you're the developer of this right? I'd like to ask you a few questions if you don't mind. I'm making an API for a plugin for a game server, trying to make it as clean as i can really. I did everything my self in terms of sql queries and stuff. (using SQLAlchemy) This seems to streamline a lot of it which i like, however in one of my calls I do a sort of weird SQL query and i'm wondering if it could be replicated using the filtering system, if not how would i go about implementing it in this module. https://github.com/jdlovins/controlserver is my project using flask The query im wondering about in particular is this https://github.com/jdlovins/controlserver/blob/master/server/maps/views.py#L33-L35 Thanks :)
You can also look [my plugins](https://github.com/hugosenari/Kupfer-Plugins) if need some reference/ideas.
This one here looks interesting there are a few other that this one here I will proberly do. To boost programming skills, "You can try http://www.exercism.io/languages/python/exercises it contains a lot of easy problems and also you will hear people opinions about your code So you can level up your programming skills." 
Nice thank you! 
Is there anything you do that you do often that you could maybe automate? For example I play wow, and wow let's you use addons that display extra things on your UI (from their approved API, so it's not "cheating", but things like replacing the skin of windows, displaying different health bars, etc things like that). The major website that you can download addons from is one of the shittiest companies ever. They are extremely shady, but I only bring this up because the only way to automatically update your addons is to download their add on manager which I just don't feel comfortable doing because of how I feel about that company. So what I used to do is every Tuesday (patch day typically) id open Firefox, open my bookmarks tab of all the addons I use, open all the bookmarks and download all the addons, then I browse to my Downloads folder and unzip everything into my wow folder. Then I realized I didn't need their shitty app to automatically update my addons: so i wrote my own basic CLI utility to visit every page I put in a list, do some basic scraping to check the release date of the newest version, compare it with the version I currently had, and download them if it was newer. This is a simple and stupid example but this was something I saw myself doing every other week. Now I just run a script and I'm done. But it's an idea to get you thinking about learning how to identify things that you could start up a python project for. In the end project should be fun and practical for you. 
Yeah interesting I had an Idea about something similar​ for paste bin where you can paste in the URL and download the file. Thanks for the reply
How a popular package, such a scipy, does not have official binaries for Windows is beyond me
/r/learnpython 
Oh, excellent. After I answered, I wondered if readlines() was the problem/answer, but didn't have time to add it to my answer.
Yeap, Django one of the most popular way to build stuff with python, also if you interested in science, machine learning and neural network you can write some interesting and amazing stuff using for example [numpy](http://www.numpy.org/), [scipy](https://www.scipy.org/), [pandas](http://pandas.pydata.org/) and so on; participate in [kaggle's](https://www.kaggle.com/) competitions.
ok intresting thanks!
You could, but in practice you don't. To have a fully signed python you would need to sign the entire python tree. The python interpreter as well as all the loadable libraries (whether they be written in C or python). You would also have to disable pip (otherwise one might just use pip to install a loadable library and potentially compromise the entire python install). And would have to audit (perhaps even disable) all use of eval. And all that signing would be completely pointless if the adversary can modify the path. Then they could just copy your scripts to their folder. Modify them, and then run them with their own interpreter that didn't check the signatures. --------- This is why unix doesn't respect SUID bits on shebanged files, but does respect them on binaries. By ignoring LD_PRELOAD, and instructing the linker to only link to root owned libraries, unix can "guarantee" that any executed code in a SUID file is owned by root. In order to get the SUID program /usr/bin/passwd to link to your compromised libc, you have to modify the system libc, in which case you are root. But if its a script you just have to convince an interpreter to load a single file from some compromised location. That is usually easily done by modifying environment variables specific to the interpreter (like PYTHONPATH) which are not consistent across interpreters and not generally well known. Thou shalt not `PYTHONPATH=compromised /usr/bin/passwd.py` nor shalt thou `~/compromised_python /usr/bin/passwd.py`. `#!python` is right out. `#!/usr/bin/signed_and_env_checked_python` shall be the shebang for `passwd.py` or thou shalt not shebang at all. If you want to do that, then you could create such an interpreter and mark the interpreter as SUID. Its just not safe or easy to do.
not a very high bar there...
Thanks, purplediane. Not sure where I got the idea that one was supposed to reside inside the directory of the other. 
Of course you can do this with Flask-REST-JSONAPI. You just have to provide your custom base query to the date layer. You can see an example here : http://flask-rest-jsonapi.readthedocs.io/en/latest/data_layer.html. Then the framework add filtering, sorting and pagination management to the query and ends with .all()
I'm not trying to protect my secrets against the Python script, I'm trying to protect the secrets my Python script uses from accidental leakage. The perfect example of this is a database password. My Python program connects to a database that requires a password. Where do I put that password?
&gt; My Python program connects to a database that requires a password. Where do I put that password? The answer is that you can't protect that password from anyone with the permissions to execute that script. No matter what you do, at best you are obfuscating. If its an elf binary you might rot13 the db password and how that nobody with half a brain runs a disassembler on the binary. If its a python script... well thats even worse. Python scripts are intended to be both machine and human readable. If I can execute a python script, then I can open it in a text editor and just read the password right out of there. -------- The only way to "protect" it is to have some kind of client server model, where the program connects to the server and requests the db server password. But that just changes the problem from hiding the "db server password" to hiding the "db_server_password server password." So you haven't actually solved the problem. Besides when you get the password back its just going to be sitting in the programs memory and could be read straight from /proc/12345/mem. ---------------- If the user can't execute the script, and aren't on the machine that is executing the script, then it doesn't matter all that much what you do with the db passwords because they couldn't see it even if it was stored in a plaintext config file.
You're solving the wrong kind of threat. I'm not worried about some hardcore attack to steal my database. I'm worried about putting the file somewhere so if someone checks my code into GitHub later it doesn't reveal the password. Or so if my production script is broken / fails in a weird way the file the password is stored in isn't exposed. I wouldn't mind something that mostly kept the secret encrypted in RAM, either, cross-VM memory attacks keep showing up. Database password isn't the best example, btw, probably AWS credentials are. There are multiple bots regularly scanning GitHub for checked in AWS logins.
Yes you can write your API with Flask-REST-JSONAPI.because it is powerful, flexible and well documented.
person_list is the name of the endpoint. You can refer to it to compute urls
ooh okay i see. I'll give it a shot and see where I get. Thanks for answering my questions! 
I think the general consensus is that is a problem for git to solve not a python library. That password should be read from a resource file that is not committed into git. I suppose you could have a secrets module that is really just an alias for the standard python resource loader, but a python library won't be able to prevent git/svn/fossil/hg/... from committing a file. 
You could try using a transpiler like Rapydscript or Transcrypt.
Looking for an experienced test automation framework developer with Python and networking expertise. Full time, on-site in Santa Clara, CA. [http://app.jobvite.com/m?3aaWtiww](http://app.jobvite.com/m?3aaWtiww) 
What does DeepDream do? Does it have a purpose?
newlist = oldlist[1:]
inexplicably neglected, but awesome and does exactly what you're looking for. Either an environment variable, or a small key file on disk is used to 'unlock' the encrypted values in a .ini file. drop in replacement for python ConfigParser. https://github.com/cimichaelm/python3-secureconfig/issues/2 https://github.com/nthmost/python-secureconfig https://github.com/cimichaelm/python3-secureconfig I use it daily.
Another +1 for keeping virtualenv and project directory separate. I quite like using pew (https://github.com/berdario/pew) for managing my environments (I don't run bash so virtualenvwrapper is problematic). One of the reasons I like it is that you can use the `setproject` command to specify the project directory and then when you enable the virtualenv your working directory is set to the project directory. 
You could run git log over SSH....
Thanks for info, so, one can store application state during shutdown and start back from that point after re-run.
This is my goto. Think it's absolutely perfect.
You're likely going to have to do the same thing with PyQt on your Pi as well (compile from source), but actually doing that will probably take forever. Still, if you need it, it's worth a shot, right? Are you sure you need Qt? It's fantastic, but if you can make do with the built in Tk stuff, it isn't awful either.
Thanks for this, now it actually does make sense. It's a pity that they are unable to provide binaries due to the Fortran compiler licensing issues.
That's a hell of a name, m8
FLASk + SwaGGER. What is wrong with the name?
Also curious about this.
Each project has its own venv. For each project I make a directory and then make the "real" version-controlled project directory inside that directory. I put the venv in the top-level directory along with the autoenv file to activate it and various other junk which is associated with the project but which I do not want to distribute along with it. This keeps the venv bundled with the project, rather than being stored in a central location like with virtualenvwrapper.
At work I use Python to scrape several hundred newspaper PDFs and to automate Acrobat Pro to highlight certain keywords. I also use it for more general web scraping.
I was tasked with assisting on some physics research. The problem was that we needed to run the larger C++ codebase against a lot of data sets several hundred times to get good data, but the code wasn't built with that in mind - it was one and done, and the output was being copied and pasted by hand. So I did what any reasonable python hacker would do. You know where this is going. The python script gave prompts for the input files, the number of runs, etc. It simply called the larger program and fed in the arguments, then screen-scraped the results, collated, averaged and meaned, wrote to the primary researchers spreadsheets, and sent emails reporting failures. I spent all my time watching the pretty pictures get generated.
Not very damn secret now you e gone and made a video about it 
it's called control click in AutoHotKey, but AHK isn't avaiable for linux ;c
Sure. I have several Arduino powered instruments that report through the Arduino IDE (serial), which is a pain in the ass for many reasons. To get around that, I use python to communicate with the Arduino/ perform calculations/save data, and kivy to make graphical interfaces that can send the Arduino instructions, graph data, etc.. 
Also, I wonder if that was an intentional masturbation joke...
Was it intelligent enough to kick the most active MAC first, or was this a slash and burn kind of BOFH?
Have a look at the inspect module which will let you look at the classes in the module, and look at each classes mro() (if they are new style classes iiuc) which will tell you the class hierarchy
&gt; libraries the binary loads can be signed This is the same as you said about being able to sign scripts but you don't in practice. Compiled binary programs don't try to sign all the shared libraries they load, and even if statically compiled they don't generally checksum functions in memory, so LD_PRELOAD is often an attack vector.
I guess inheritance imports makes more sense when learning the APIs for a package 
Continuum and Enthought license MKL and are able to redistribute MKL under that license to their users for free, but that is a non-trivial cost for both companies. Full disclosure: I am an Enthought developer.
Cool! Have it on Github? 
Why not use QoS?
 whoa! That seems to be exactly what I was looking for. If anybody else is interested here is a a page with quick examples https://pymotw.com/2/inspect/
I've got a library / program that takes a CSV price list of products and tries to find them on Amazon. If it finds a potential project on Amazon it opens it up in a browser for me to check. If I agree the listing is for the product I'm trying to add it grabs the photo, description, weight, bullet points, etc and creates listings on eBay, Newegg, Amazon, Jet, my companies website and few other marketplaces. I've created some other variations for pulling info off of eBay, manufacturers sites, etc but the Amazon one is my first step. 
I tweaked that first but the qos on the router wasnt that effective. 
you gotta keep em separated... *dun dundun*
I do a decent amount of web scraping. I think I've mentioned these both here before in similar threads, but two of my more notable pieces of work include a script that (daily) logs every dealerships' online listings in my area – I'm anticipating that my '07 Pontiac G6 isn't going to last forever, and I'd like to make an informed purchase for its replacement – and a script that runs every 5 minutes during the baseball season and makes sure I don't have inactive players in my fantasy lineup.
Does a half-finished project count? I downloaded the local state voter registration dataset (publicly available upon request) for one of my employers. Used flask to create a front end that could be used to query the data in accordance to specific needs, such as age and zip code. Data was used to create leads for insurance. The automation part? Well that's the work in progress. Create an API along side the web interface, and combined it with a process that queries the VoIP API of said employer. When a new call comes, it tries to find a match on the voter registration dataset (35% of voters provided a phone number) and gives the person on the phone all the available information. Also looking for other interfaces to compliment the 65% lacking phone numbers. 
its not currently on github and the code is a mess. i could try to clean it up and post it sometime 
I dont get why not use just `-m not mark_name` or `-m mark_name`to select tests.
Can't help but remember that 'Deep Dream' was the name of the social network in the latest Borne movie https://www.engadget.com/2016/08/05/jason-bourne-technology/
How did you do that? Can you give me a hint to make Adobe pro to do x task with python?
I wrote a script that takes the top songs of r/music in the last week and turns them into a Spotify playlist. Later, I made a web interface for it. It's right [here](http://reddittospotify.pythonanywhere.com). It's hosted on pythonanywhere.com so be gentle. ;-) EDIT: Here's the code on [GitHub](https://github.com/StefGou/reddit_to_spotify).
Although the programs themselves don't check the signatures, on both Windows and Linux most of the installed binaries are signature verified at the point of installation. Combine that with an automatic stripping of the known problematic environment variables (like ld_preload) you have "signature verification lite." You know that what you are executed was installed by root at some point in the past. Since you probably wouldn't trust a server that was every compromised by a root exploit that is maybe enough. Again none of this is impossible to do with a scripting language, but since each language is different there will be slightly different ways of accomplishing it, and it becomes less obvious when it is done correctly.
Our libraries ILS (think computerized card catalog) used to have a fairly manual and clunky process for sending circulation notices. (Fees due, overdue, recalls, etc.) If staff forgot to run this clunky, buggy client server program, noone got notices. Figured out how things were stored on the server and completely automated the process, complete with various reports for management types. May not sound that exciting, but people at work love it. :) 
Use a meteorological webservice to gather data and display it on a map in arc GIS. Could always webscrapr the data too
I just built my first basic Django site with Bootstrap 3 and besides HTML/CSS/JS, what other skills should I focus on to become employable? Flask?
That sounds awesome and really helpful! Any chance you mind sharing the dealership scraper? 
Remembered about this: https://www.reddit.com/r/Python/comments/308ucq/how_do_you_use_python_to_automate_tasks_in_life/cpqcegz/
Unfriended
I automate the testing of medical imaging software and devices that surgeons use during cardiovascular ablations. All infrastructure and test suites are in Python. Runs hundreds of man-hours of clinical tests every night.
You can use the package manager only. https://conda.io/miniconda.html
Eight or nine years ago, while working for a very large web retailer (the one you're probably thinking of), I wrote a script in Python to: * retrieve all ~~ASINs~~ SKUs with authorship data in specific categories of products from the catalog (around one million records), * retrieve all the author/creator records for those SKUs (20-40,000 records), * retrieve all the records of the authors/creators from a books/music/media/games business program (around 12,000), and * compare the author names against the customer names (using the Levenshtein distance) to find authors and creators who had not signed up, the find authors who had multiple accounts, and also find creators who may have pen names that also have customer accounts (over 65 million). These records were used to tie the accounts in different systems together so we could make the author link work on product pages, find products the author wrote (or co-wrote) that were missing from their author pages, and contact authors who should join the registered creator program. The fun part was that the standard developer workstation at the time had 4 GB of RAM, ran a 32-bit version of Linux, and couldn't create a file larger than 4 GB either (ext2fs). I had to use the existing identifiers as hashes (they were well distributed) to write them to multiple directories and DBM files for analysis. If I recall correctly, on a 2.5 GHz (?) single core machine, it took a little more than an hour to create a report for all the possible author matches ranked by confidence. I did have to stage some of the data first, like the product catalog which was an overnight batch job (to reduce load on the catalog servers). The report was then used to associate authors with products, and the customer records for the authors were used to contact them to verify their author pages and the products we assigned to them.
I built a framework that scrapes online serialized novels and turns them into epubs. 
For being a data driven bot, you sure don't have a clue about how anything works.
I wrote a simple web scraper that scraped a couple of my fave sites for new articles and then sent them to my pocket account. I used amazon lambda to run it on a daily basis. it's still running now even though I've stopped using it after the subway got Wifi.
I'm getting an error when trying it but am really excited by the concept. I actually was browsing /r/art yesterday thinking of doing the same thing. Can you post it on github?
`git fetch` downloads commit objects and updates your local copy of `origin/master` to match what's on the actual server. So you *still* need to clone the repository. You can't run a git log remotely with plain git. I think the github application might have that feature, though. http://stackoverflow.com/questions/13941976/commit-history-on-remote-repository
It is certainly possible. On screen keyboards do something similar. Xdotool, wmctrl, et cetera can do some nifty stuff, don't need AutoHotKey so much. Flipping the problem on its head: I assume that it is more important that the controlling window stay above the other window. Set that window to "keep above", then even if the client window has focus, it shouldn't matter. You can also force focus back with a variety of techniques.
http://i.makeagif.com/media/9-07-2013/Z5mwOa.gif
Only good for outbound. If four of them are watching Netflix, your inbound will get over run. 
There are some more automated GUI creation things out there. The following are ones I've seen and used. I've been through enough of these that I now like to subclass widgets for a given purpose, with many widgets being compound widgets (like a slider combined with a spinbox, etc) and whenever the state changes it emits a custom signal resultChanged that carries the Python data I want it to carry. This way I can also make a `result` Python property with getter and setters that mask all the Qt mess. This way a combo box can emit a member of an Enum or whatever you want instead of the index. That's getting too complicated for your needs though... below are some automated widget libraries.... Pyqtgraph's ParameterTree is pretty neat and may meet your needs. Their documentation isn't as good as their example. Install PyQtGraph then from pyqtgraph import examples, then examples.run(). PyQtGraph contains several very useful subclasses of many, many common PyQt widgets that solve many pain points from spinners all the way up to dock widgets. Many of those custom widgets act as delegates in the ParameterTree for different types of data. I haven't touched them in a long time but there's also Enthought's Traits and TraitsUI systems that can feed Chaco and Mayavi plots. (I left Enthought Tool Suite when I went to Python 3 about 4 years ago... they did finally make it to Python 3 in the last year) There's another called [formlayout](https://github.com/PierreRaybaut/formlayout) by the original creator of Spyder (a Matlab-esque Python GUI with extra tools for math/science/engineering use). I think matplotlib uses formlayout in its little plot settings dialog. It was probably also used for some of Python(x,y)'s GUI's looking back (which Raybaut was also a dev for... Python(x,y) along with Enthought, used to be more popular in the scientific stack before Anaconda hit the scene). I borrowed some of Spyder's configuration dialog code once and while I don't think it uses formlayout directly, it uses similar automated widgets where widgets for each parameter are automatically constructed and the backend validation and edit signals/callbacks are all automated. I agree with others here that writing code to generate your widgets based in your data is more flexible than editing your GUI in the Designer every time you add or remove a parameter. Whether you need to do that yourself or can take advantage of other people's code is up to you. My final recommendation is to see whether Jupyter Notebooks with the interact() function (now in a separate ipywidgets library) is sufficient. The interact function will generate sliders, checkboxes, combo boxes, etc. for every input to a function. You can let it happen automatically, or provide some ranges and settings, or go all out with the notebooks widget system and build Notebook based GUI's with no JavaScript required. I love showing people how I can make a sine wave matplotlib notebook example with 2 sliders to control amplitude and phase in about a minute. The same example in PyQt using PyQtGraph takes more like 10 minutes and 5 times as much boilerplate. Unlike some of the above libraries, Jupyter is popular enough that YouTube videos might be one of the easiest ways to find examples. If you find old videos, know that modern Jupyter is set up differently than IPython Notebook was just a couple years ago, but the basic functionality of the interact function hasn't changed, just where you import each component from and how you install it. Hope something here helps someone!
Ahh i see. Thank you so much! I'll look into them. If none of those fit what I need I can always resort to a VM.
post what?
&gt;I initally wrote a Python script to update the NTP addresses of 1200 connected traffic signal control devices for a city. It worked great and I got the praise for saving man hours... but I decided to not stop there. Out of curiosity, why not point them to a DNS A record and just change what's it pointing to when needed?
Because dowloading 200mb+ just for the log seems not efficient... Yes actually right now I don't clone the whole repository, but do a clone --bare, this just downloads the repo info, but still there is much data.
Oh, that's neat! How do you create the outline and do away with image noise ? Uncanny filtering? 
I wish. Traffic Systems are an ugly network where change is hated; and the original designers were civil engineers. At that point, no DNS servers existed, and nothing was getting implemented without a bidded contract. It's kind of an interesting field because a Roads GovOrg usually contracts traffic IT work out to external companies. These external companies have to stick to scope because of low-bid and fairness jargon... changes take years. In a nutshell, 2017 is the year of VLAN in traffic systems 😑. Most orgs haven't even figured out real IP schemes yet. Really a sad pictue, but the industry's finally catching on... you would think this stuff would be a solved problem considering the networks are beginning to span 5000-15000 nodes.
Two things, First, I made a really party piece. By sticking together a RPi, a power bank, a heart rate monitor w/dongle and a pretty LED array, I made a Christmas light for my shirt that oscillated in tune with my heart beats! Second, I've automated the data analysis and output PDF text reports from periodical testing of medical equipment. By creating a sqlite database of all equipment / tests, tkinter gui and Excel interface, it saves a lot of time! 
https://www.youtube.com/watch?v=83KLxQ1jjdg
In my job made a Webcrawler to extract data (via Selenium) from a public directory and paste it on a excel file (openpyxls). It stored around of 1500 rows which isn't much, however it reduced a week of manual extraction in 30 minutes! (And one day of development)
Not me, but my coworker made a script that scraped Amazon Prime Now and texted him when the Nintendo Switch was in stock.
I made a web app to tell me the moon phase, next sunrise, sunset, and some other info. Check it out http://radiancespectrumbook.com/planetary.html 
Plz upload
I concur! Just put it out! Nobody's gonna blame you (even if they did, those who would are no real coders).
That's because most off-the-shelf routers are hopelessly undersized for any noticeable QoS/traffic shaping. 
This is actually pretty cool, would you mind sharing?
Like @Lethem says you can try Django it is really easy.
Oh, I wrongly assumed it might just fetch commit-headers without the actual content or at least provides an argument for this
Wrote a script that merges config changes into a running Unbound instance because Unbound drops its cache on restart.
Do you have this code somewhere?/do you mind explaining how you did it?
Using flask and pushbullet and built my own personal API to ingest webhooks from various systems. Mostly it's just for push notifications for activity on GitHub but it's pretty handy still!
Finally picking my undergrad thesis back up. Gotta write plotting scripts to display the isotopic yield from supernovae explosions in a simulated population of stars. matplotlib ftw
Wrote a script that exports my napster playlists to text files and vice versa, looking to expand it to spotify next :)
I wrote a script to go to Facebook daily and post birthday messages on the relevant friends walls. If unable to post, it sends the message using messenger. 
It's nothing too big. I was just automating some stuff on my windows with ahk then decided i want linux as my main os which doesnt support it. I ended up using a vm. Im too lazy to rewrite my scripts ahah
I wrote a lot of scripts that played some games for fun. suing screen capturing and simulating user input. mostly just flash games, but once I hooked it up to a BlueStack (it's an Android Simulator for PC) and simulated resource gathering and keeping the account online in Clash of Clans. (back when they had a more relaxed limit on keeping an account online) 
I have recently automated the installation of a custom Linux on an embedded device (raspberry). Just wait 15-20 minutes and you have your SD card with a cross-compiler. Easy to customise something, easy to debug with python if something goes wrong. I just love automate things with this language :D
Finding a flat in Munich :3
I got into cookie clicker but I realized it was really boring after about a minute of playing it so I wrote a program using python that plays it for me. Then I realized it's a lot of work to actually go on Google Chrome, type in the url, wait, and start of program. So I extended it to where I literally just run the program and it looks for Chrome, clicks it, types the url, then starts playing. It'll click and buy things for me when they're available.
I started as a structural engineer and got into automation and Python from there. I wrote a data processor that builds a 3D finite element model from planar AutoCAD drawings, assigns material properties from a configurable rule sheet, does all sorts of transformations like sewing together nodes of the model at a given tolerance, setting up edge conditions by a rule configuration, cleaning up potentially bad FE elements, transforming coordinate systems from planar to spherical and cylindrical, adding a 3D mesh through MeshPy, and writing it all to a format used in the industry for eventual analysis. It's used for structural analysis of Ukraine's nuclear power plants, I'm pretty proud of it since it was my first real Python product.
That's weird. It is working for me. What error are you getting? And yeah, I'll post it on GitHub. The code isn't pretty but it's not too bad.
Yeah, I heard about this after we did the TurdTracker 2000. I really didn't mean to rip off a tv show. I watched Breaking Bad but never saw Better Call Saul. 
Yep, in python. Actually, I use redis with key expiration.
I've done something similar! The difference is my router let's me limit speeds. So, anytime my brother's being a douche I'd essentially give him 56k dial-up while he's playing CS:GO.
There is also this project: https://github.com/jarun/googler It is a python3 project. You might find some answers there. 
from what sources? care to share source?
[Check out pyreverse, I wrote a little about it a while ago.](https://www.reddit.com/r/Python/comments/47t4v4/found_out_pylint_ships_with_a_uml_diagraming_tool/) It generates UML diagrams from source code, there's a few things it doesn't (or didn't at the time) seem to handle well like mixins. But it's an interesting tool. I haven't used it much since then but I should revisit it. 
Damn, song's old...
I can reach that. Maybe that was a temporary problem.
I made a script that stitched some scanned images together in the correct order. (there's gotta be at least one lame answer)
A friend of mine did this for Warhammer. It took names as seeds for stat rolls. 
I wrote a program that generates a nice report showing all of the electrical testpoints on the circuit boards I design at work. Used to take me the better part of a day to write by hand. Now I can generate a nice formatted report to share with technicians and contract manufacturers in about two minutes. 
I meant you can't call inner() from outside. Also of course the parameter names are bad - it's a trivial example. You used the simplicity of the example to make a moot point. Think a more general case where the url is a more complex function of the parameters.
Not as impressive as some of the other scripts out here, but I automated my compilation of my (wip) thesis. I write each section as a separate markdown file, convert it to latex with pandoc, and then compile the created latex files into a pdf. Finally I made the whole script executable through invoke, probably wasted a bit too much time on it, but it did change the compilation from a chore to a satisfying experience.
My mistake about the parameter names. This sub is in a multi reddit for me. I thought this was /r/learnpython and was a function you were using. I think you should still contruct the url outside of this function. I don't see a reason for it to be nested. It will just decrease readability. I don't know you exact application of this, but you said yourself there is an option for either. In that case, it's best to avoid nesting. Per Zen of Python: &gt;Flat is better than nested. 
I've done [experiments diamond wire cutting marble slabs](https://vimeo.com/94076571). The robotics software converting the CAD -&gt; CAM is built on top of [pythonocc](http://pythonocc.org)
[ref](https://manpages.debian.org/unstable/manpages/random.7.en.html)
One argument against having nested functions is that it's considerably slower. An example: import timeit setup1 = ''' def m1(): a = 10 def m2(): b = a m2() ''' setup2 = ''' def m2(a): b = a def m1(): a = 10 m2(a) ''' print(timeit.timeit('m1()', setup=setup1)) print(timeit.timeit('m1()', setup=setup2)) The output I have with that is: 0.323739087372 (setup1, with nested function) 0.181176352858 (setup2, without nested function) So, the version with nested functions (setup1) in that use-case is around 45% slower. Sure, it may not always matter, but I've had a colleague which used it a lot and in a number of cases it ended up being a performance bottleneck (so, I only use it if it really makes the code considerably more readable, otherwise I try to use different approaches). Also, in bigger functions it's harder to read IMHO (because it may be hard to track which variables are actually coming from the outer function or global scope).
Most likely PyQt5 is not compiled for arm on pypi. It should work by installing python3-pyqt5 though... https://packages.debian.org/jessie/armhf/python3-pyqt5/download
&gt; getting access to tools/materials they needed Can you elaborate on that?
I recently wrote a visual data inspector for Python: https://github.com/fboender/davis You can use it to inspect a module: import davis import yourmodule davis.vis(yourmodule) It includes a recursive tree of all elements in the module and you can inspect docstrings for everything.
&gt; Also of course the parameter names are bad - it's a trivial example. You used the simplicity of the example to make a moot point. It would have been 0% more work to use descriptive parameter names...this code is needelessly obtuse for no reason. &gt; Think a more general case where the url is a more complex function of the parameters. The general case is not a problem worth solving. If it's any more complex than the simple if statement you have (which should be a ternary operator, since it's an assignment), then you should fully abstract it from the function making HTTP requests and either dependency inject another class capable of creating the URL, or just pass the url in as a parameter and make it so this function has no idea how it's constructed.
Thank you, seems like it's back to work for me too :)