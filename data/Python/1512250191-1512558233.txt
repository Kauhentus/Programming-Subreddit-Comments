Nice trolling. I've took this bait though: &gt; Don't fall for this or you'll end up running an old and vulnerable Django version because your client is no longer willing to pay thousands of dollars each year for work that is not adding new features, nor fixing existing bugs. This your client's fault (the choice of not paying for upgrades), not yours or Django's. We are almost into 2018, it is obvious at this point that software gets outdated and security issues appear and get patched. If your client doesn't understand this, maybe they should leave things as they are, and then pay more when they get hacked.
In addition to all of that, 1.11 has a bigger library of packages available.
What does that mean? Angularjs 1.x and 2.x+ are not backwards compatible because 2.0 was a complete rewrite but they're still the "same" JavaScript framework from the dMe people. Or have I misunderstood something fundamental here? 
Perspective, as in, you need to get some. Step back and look at your comments. You are being a total asshole. 
Some people get really attached to their comfort zones and anyone or anything that dares disturb that lethargy gets the angry response because how dare the world go on without them??
I'm going to stop replying to you because you're not responding to logical solutions provided (LTS releases, virtualenv, unit tests, etc) but replying with cherry-picked responses to continue a pointless troll'ish discussion. With those solutions in place, I find it hard to believe anyone is going to take 120hrs (15 days!) to upgrade between releases when I can get them out in 2 days, tested. The changes in django are quite simple to manage compared to other frameworks. If you're going to put a monetary value on time to make changes due to new releases, talk to an Android developer. Every release of Android, be it major or minor, brings in changes which may break your code in subtle ways across a wide variety of devices running various versions of Android. It's the nature of software development. Because of your refusal to upgrade, LTS releases exist. Either take that route and forego new features or upgrade properly.
Should be noted in the issue on the bugtracker.
Well pythons not really designed for coroutines so of course implementing them isn't going to be as expressive as if you had initially. Example: go. 
Python is designed for coroutines, see PEP 342.
10-May-2005 != 1992, Rob Pike had built other languages with coroutines in the 90s he was very familiar with the problem and purposefully designed a language sort of around that not the other way around.
It's not Turing complete. Didn't you read Zed's manifesto? 
They're totally different and unrelated. They have different names and different maintenance teams and cycles
Ugh
No problem! Good luck!
I'm learning it at the lowest level the reason it's in 2.7 is because that is what we learn not because i asked for it and I have close to 0 knowledge with python 
I love being able to write and use regular expressions to solve problems. I hate trying to read a regular expression that someone else wrote to solve a problem, haha.
Thanks for the suggestion. I am already changing all of the tests to use pytest! 
Nice!! This would be very nice to have indeed. I already have an idea of how can this be accomplished in Flock. I will put it as a feature request to the new release. Thanks!!!
Boy you're a real ray of sunshine huh?
Find some open source projects and contribute some small fixes to them. Try to aim for not super niche but also not super well known. Ideally something your potential future employer might actually be using. Depending on the size of the project you'll probably have to start small and trivial (which is not going to be super impressive) and build trust with the maintainers before doing more significant work. Also be aware that some maintainers don't really want the help and some will be lazy and leave your pull requests languishing and ignored forever. Stay away from those projects.
Doing the same on my end (unfortunately). I love the Jupiter notebook's shift + tab help.
I think they’re intrinsically *not* very pythonic at all.
this sub really doesn't support 2.x :( well, 2 more years
&gt; I like straightforward and leggible code that's why I love Python http://docs.python-guide.org/en/latest/writing/gotchas/ https://stackoverflow.com/questions/1011431/common-pitfalls-in-python 
This is more /r/learnpython but, file.write(urString.replace('|', '\n'))
You could perhaps try subscribing to the python-dev mailing lists, as long as you don't mind your email inbox being flooded from time to time. You could also try subscribing to python-ideas, though there's a higher noise-to-signal ratio there. I wouldn't really call either of those mailing lists "organized" though -- it's just more of a way of getting a pulse on what the core devs are up to/are debating about.
How do you limit the second to only 4 digits? I like using regular expressions for URL routing as I can validate a lot of things even before they get to my view.
Not sure. However, this is an optional trade off. If you are writing more basic views that it's easier to write than a regular expression.
I'm in the python-idea. Very interesting but a loooot of noise.
It is an extremely silly sentiment for a developer to consider all tools of equal merit and quality. Your job is to find and use the best tool for the job&amp;mdash;which means that some tools are better than others.
How can you say that slowness comes from large integers and not recursive calls, for example? Should you not add some test using small numbers, replacing `sq` with `def noop (v): return v`?
Thank, I've made benchmark for feature/speed comprision: https://github.com/pohmelie/skin#benchmark
Can't find documentation for this. How it looks at user side?
I get paid less
oh, no please read about PYTHONPATH, how it is used, why it is used etc TL;DR - PYTHONPATH is very important and has nothing to do with used python
Everytime I try asynico, the abstractions leak and I have no idea what's going wrong. Did anyone test it on a non-trivial program?
&gt; when VS itself has been around for over a decade isn't the most honest Huh?! we're talking about Visual Studio Code, editor which was released less than 3 years ago
That's `path`, but `re_path` still exists for the previous functionality, other than `url` as an alias to it.
Personally, I use Google Groups to easily browse the list of topics and read the discussions more pleasantly. * [python-idea](https://groups.google.com/forum/#!forum/python-ideas) * [python-dev](https://groups.google.com/forum/#!forum/dev-python)
Probably not the answer you wanted, but you should fix windows ASAP before doing anything else.
Well took everyones ideas and made it cleaneat i possobly could
Check the relevant PEPs, e.g. [PEP 537 -- Python 3.7 Release Schedule](https://www.python.org/dev/peps/pep-0537/) and the associated [What’s New In Python 3.7](https://docs.python.org/dev/whatsnew/3.7.html).
I am not sure that there is enough complexity to _need_ classes. You don't specify what happens when more than 1 "contains" string would match; is the order significant? No regexps? &gt;&gt;&gt; print(re.search('veronica|betty|reggie', "foo_and reggie.cbz")) &lt;_sre.SRE_Match object; span=(8, 14), match='reggie'&gt; &gt;&gt;&gt; print(re.search('veronica|betty|reggie', "foo_and regie.cbz")) None &gt;&gt;&gt; print(re.search('veronica|betty|reggie', "foo_and reggie_and veronica.cbz")) &lt;_sre.SRE_Match object; span=(8, 14), match='reggie'&gt; I would use a json file with that nasty a["foo"][2] syntax; a text editor can indent and prettyprint it to allow editting by hand without too much pain. It could be done in 2 functions and an `__main__` section.
I've used RgtExps extensively over the past few years. If you know what you're doing, they're an invaluable tool. Cutting down lines and lines of parsing code to a single expression. I feel sorry for the guy who has to decipher it though I've tried to document it as much as I can.
That's why you punt email sending to something like celery and tell it requeue the task rather than doing it in your http server. 
ah, but look at the numbers: the recursion depth is 22 (and no branching either), and the runtime is 88secs, clearly, recursion should not be a factor at all
I don't think citing Go's design is any sort of a good idea, given how immensely shit the entire language is.
I should probably be answering instead of asking, but what's up with single quote vs double quote?
Mad on a programming forum.
Are you trying to look up the key by the value? `for key, value in dict.items():` Do you have a dict of dicts? `for value in dict.values():`
I upgraded an existing project to 2.0 today. All done in about 20 minutes.
I agree that working on a project is the way to go. Preferably something that's aligned with what you envision will be using Python for, since the language is so versatile. If nothing comes to mind, hackerrank exercises are a great option.
Learn python first, and come back to Django later. Django is a really powerful framework, but it can be difficult to learn if youre new to python.
https://docs.djangoproject.com/en/2.0/internals/release-process/#official-releases It's fairly well known by the community (which you've stated you're an unwilling member of) that the major-minor parts of the version constitute a feature release, which is effectively an alternative name for major release. 
Well that sort of thing is matter of opinion, I enjoy go quite a bit but I also love python. Go feels a lot like python tbh, so I don't know why you hate it. Why do you think go is shit?
- No generics (`interface{}` does not count, it's just disabling compile-time type safety) - `if err != nil { return nil, err }` every other line - Importing from GitHub as a recommended practice - GC prioritises stop time over everything else
You're probably right about the key. Say I have this dictionary... employees = {"ID1111": {"Name": "Joe Smith", "Department": "Sales", "Supervisor": "Williams", "Office Phone": 2344}....} I want to use the name "Joe Smith" to find the Office Phone. I'm new to Python, so apologies if this is a bad question.
VS Code uses jedi
That site looks like a dumpster fire on my phone
It's not. You may think it is, but objectively, some of the top software in the world is built using go. That doesn't happen with shit languages. so, tldr; you're wrong. ...you're welcome to dislike the language, as a personal opinion. ...but once again, that does nothing to diminish the OP's comment that go has a fundamentally superior parallel process and perf story to python. /shrug
&gt; You may think it is, but objectively, some of the top software in the world is built using go. That doesn't happen with shit languages. Anything written in PHP calls.
https://gist.github.com/Luctins/c74b95be4dc5a27bedbc22802402c925 For some reason it's very hard to make it trigger skin tones, and it's relatively easy to use a static image instead of a camera using cv.imload()
Kubernetes I think that's a bit more of a 'top software in the world' that wordpress, don't you?
Wordpress powers around 25% of the web. I'd call that top of the world.
Lord, if you think wordpress is part of the best software in the world, we literally have nothing meaningful to talk about. Try using it sometime. /shakeshead
You didn't say best, you said top. 
I do have an asyncio-based web server running in production, on a relatively small load service (around 1.2 million requests per month). It served well for a while, but that's mostly because a lot of the annoying details were hidden by other libraries.
It's as simple as creating a `curio.bridge.AsyncioLoop`, then running asyncio coroutines via `loop.run_asyncio(cofunc, arg1, arg2)`.
My bad. I meant best. My point is, and remains: go is a good language used by people to build real software. It's not shit. If you say its shit, that's your opinion... but *you're wrong*, objectively. tough luck. ...but, I really no longer care what your opinion is on this matter... but hey, have a nice day. :)
Error handling is a bitch, importing from github is also shitty. I've ran into problems with GC not clearing thing from memory well after needed, its a hard problem to run down for sure, I've read about Go's GC but don't know enough to have a strong opinion other than its sometimes annoying. So basically while I agree with everything your saying but that doesn't make it an awful design, it falls more under personal preference.
Awesome. So don't over think it. `for employee in employees.values():` gets you each employee in turn; check the employee for the `Name` you are looking for and record the `Office Phone` when you find the matching record
I like the django deprecation policy, it's also on the home page so shouldn't come at any surprise how it works. I don't think I've ever experienced an upgrade to the next day to take more than a days work for one person, usually it takes less than an hour. Python2 will reach end of support in ~2 years so it's high time to make the switch for anyone still hanging on to it.
And Angular5 is significantly better than 2 fwiw 
(I love regex).*(t).*(o).*(o).* Output $1, $2$3$4
No difference. https://stackoverflow.com/a/56190
I call this my ***KISS*** resume. Looking for a Junior Developer Position. Bio: Recent College graduate with a B.S. in psychology. Asking Salary: 40k Experience with Python: 2 years self taught. I'm comfortable solving most problems involving Python. Interests: Webscraping, Automation, and backend-Webdev Extra information: Willing to relocate anywhere inside the U.S. DM for contact information and/or actual resume! Thanks
Have you thought about using a third party service for this? I’ve been bootstrapping a software licensing API called [Keygen](https://keygen.sh) that could probably help you out here! There’s a [“machine” resource](https://keygen.sh/docs/api#machines-create) that you could associate with a particular customer’s license, so each time a new VM is spun up you could associate it with the license using eg HDD, MAC, etc. like you mentioned (and then you could also disassociate when it’s spun down, if needed). I dog food Keygen for on-premise installs of the APIs, so would be happy to chat. :)
This does sound very interesting.let me take a look and well chat. 
Sweet! Definitely reach out if you think it’d be a good fit and we can chat!
I'll be honest. I'm not unsympathetic to your concerns, but if a team's thinks "we just wanna get stuff done" is a good explanation for bad code quality, their problem isn't Django. I spent a few years as a Django dev. I found that as a rule, upgrading a site for a major version release took about 10 hours. Upgrading from 1.6 to 1.7+ was more like 20 hours because migrations were introduced. If an upgrade from one version to the next was taking longer than that, then someone was doing something seriously wrong. Bad code quality has a price. If you "just want to get stuff done" fine. But you *are* going to pay the price. Either upfront by using a more stable framework (maybe in Java?) that will has bed ergonomics because of legacy cruft and that forces you to do the work that you want to avoid up front, or down the line when your more flexible framework breaks under the weight of your bad practices.
You can profile your python code to see what is going on.
*Here, we see the rare luddite developer surface, speak some utter nonsense, then slink back into the dark depths of obscurity and irrelevance. You can hear a faint whimper as the rest of their industry leaves them behind.*
Depends if u/sioa is completely new to programming concepts or not. Python is very easy to pick up within a few tutorials if you know another language. 
I think the idea is that you are moving the validation logic to where it belongs, your view. I can definitely see myself using this most of the time. However there is always that rare case where I need some fine tuned control over the URL and having the regex will be nice.
I am in no way supporting the OP's emotionally tilted anti-python 3 rant. However, if your client gets hacked, even if it's not your fault, it still comes back on you, so you need to consider whether it's worth giving your client a means to shoot themselves in the foot. To use an extreme example, imagine if you'd done work for Equifax and the hack wasn't your fault. You're still going to have to deal with "Didn't you advise Equifax?" everytime you pitch for a new job. be better to avoid them entirely. 
Seriously. Conceptually, a urlpattern is a mapping from a path to either a view, or to `None`. A function which takes a regex, and returns such a mapping? That's a great idea. I totally want that as a big part of my routing system. It will let me handle a wide range of situations easily and well. It does *not* make sense at all as either the main, or the only way to map from paths to views.
I got it to work sending/receiving a few million REST calls per month. If I'm being quite frank, how exactly its working is a little lost on me. If it breaks, I don't know if I will be able to effectively fix it.
For a 4 digit string you could use a custom (path converter)[https://docs.djangoproject.com/en/2.0/topics/http/urls/#registering-custom-path-converters] For the old behvaior, they introduced the `re_path` function which just behaves like the deprecated `url` function.
I would say 2.0. Not having to use regex for routing alone makes learning it so much easier. 
"Yes I did warn them. But they didn't want to upgrade their software because it would cost them a significant amount of money." What else is there to say/do if you do warn your client?
It certainly affects your advertising. I am just saying that even if it's not your fault, you still have to deal with the fallout from it. The OP is a nut though. I certainly think Django 2 and Python 3 are "safe".
I was just thinking back to all the upgrades I've done and 1.7 was definitely the thorniest. Moving from South to migrations and the new app registry/AppConfig stuff. Even then it didn't take more than a couple days.
I have seen it in some books. 500 lines or less has an asyncio crawler written by [Guido](https://github.com/aosabook/500lines/tree/master/crawler). It's also in Learning Concurrency in Python. Haven't read the second one, I just know there is a section on asyncio in it.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [aosabook/500lines/.../**crawler** (master → fba689d)](https://github.com/aosabook/500lines/tree/fba689d101eb5600f5c8f4d7fd79912498e950e2/crawler) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Certainly second line is simpler but the first URL would require strictly 4 digits for a year whereas the second would accept number. 
noob question--but what exactly does migrating to a newer version involve? Do I `--upgrade` the Django installation within the shell, see what breaks, and update the code line by line according to what's been changed in the newer release notes?
Nah not completely new, I am gonna apply for a jr dev job in webdev shop. They use Python and django. I know the basics of python, but not the nitty-gritty of the language.
https://stackoverflow.com/questions/2612802/how-to-clone-or-copy-a-list
This is a common beginners trap. When you use test1 = test2 you think you are making a copy, but you are actually making an alias. Both names now point to the same list. To fix it, use test1 = test2.copy() [More information here](https://www.reddit.com/r/learnpython/wiki/faq#wiki_why_is_my_list_of_lists_behaving_strangely.3F). --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Both lists refer to one object in memory. 
ahhh thanks you!
a = b doesn't mean a is a copy of b -- "=" means a and b both point to the same bits on your hardware now.
Yep. Exactly my thoughts. Glad to see this valuable development! 
Damn, they beat me to it! I'm a long time programmer, but only within the past few months have I gotten into Python and Django. Whenever I learn new languages I like to make mini-frameworks as a learning exercise, not for any real production use. The one thing about Django that I really didn't like was the regex URL routing, and I wanted to make a simplified version like this. At least I'll have something to reference if I'm having trouble keeping it simple enough! On a side note, I really like how Rails and CakePHP route the URL to a controller and method without having to explicitly define it anywhere. Are there any Python frameworks like that? 
We're not allowed to dislike languages?
Is this the same as with a numpy array too?
I think he's trying to start a discussion. Not ask for help.
Fun fact x = 1 y = 1 There is only a single 1 and both x and y point to it. This is true (at least in cpython) for numbers 0-255. 
Maybe pyqtgraph would be a better fit for 3d stuff. Just guessing, i hate both libs.
&gt; of equal merit and quality. Who said that?
What was the project's original version before upgrade?
You can have whatever oppinion you want of them; but saying they're shit (as opposed to just that you dont like them) is kind of uncool don't you think?
Actually -5-256, inclusive.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/SjwN4pf.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dqowu66) 
A **list** is a *mutable* object, by definition. It allows you to mutate the contents of the object while it stays at the same memory address. Many container type objects in Python are mutable (ie the **list**, **dict**, and **set**), but not all are (ie the **tuple**). So, if you have two *names* that reference the same *mutable*, which is what happens when you do this: x = [] y = x Then changing the *object* referenced by either *name* obviously changes any other reference to that object. In the case of the list you can break this behavior by creating a new *copy* for the new name to reference: x = [] y = [][:] For a more general interface for making copies, look at the **copy** module.
But if that's my opinion, and I'm allowed to have whatever opinion of programming languages I want... 
If it makes you look stupid or conceited, do you care? If so, maybe think about it before you say your oppinion. ...if not, do whatever you want. /shrug
I don't think someone saying something is garbage automatically makes them conceited or stupid. Now, if they can't back it up, maybe. That's why I tend to shut up when it comes to stuff I don't know or are unsure about it (well, when it comes to opinions at least). Now, I can't tell you if Go is garbage. I'm unfamiliar with it. But if you want to talk php or javascript, I can tell you all about why they're garbage despite being popular and easily accessible. Hell, I can even cast some stones at Python to show I'm not a fanboy (not entirely true, but it's important not to unconditionally love your tools). 
Yup.
&gt; Also I just tried removing the recursion and got exactly the same timing (with exactly the same result). Same here.
Why is official documentation for Django written in such a lame language? I've read indian English, hong-kong English, singaporean English, and Django and western european English style are the worst. I am struggling with it for a week and can't do anything that doesn't require to google every single thing. Fk. I've even read google translate into broken english and think that it was much easy to understand than (5 years ago) official django site. Even bad google API documentation is much better than django docs.
OMG the URLS...*swoons*
I really *hate* that these exist. Like I'm glad there's someone helping to spread vital STEM packages out to the poor sods on Windows, but the security implications of the reality of their use is just mind boggling. That reality is that people and companies just download and blindly incorporate what *should* be considered absolutely untrustworthy binaries -- for which no source (or even makefile) is obviously available -- into their projects, with no idea if they've been doctored. In quite a few cases there's already an official wheel binary available (see as a random for instance **babel**) and no one should *ever* trust or even consider using the unofficial one, yet they remain up here. I mean what sort of idiot would use the *unofficial* **pip**? Others simply don't make sense: **os.scandir** is part of Python3, why would anyone need wheels for the **scandir** project in the versions of Python that already incorporate it? In the remaining legitimate cases where it's hard to build these packages on Windows, wouldn't it be better to simply provide build instructions back to the original projects so they can vet and build and upload an official wheel to PyPi? Especially since the site goes out of its way to try to make automated download difficult? Like why not provide leverage back to the package maintainers? At least it's served over https, albeit without checksums. I seen companies that use these; they've figured out a way around the JavaScript and just incorporated direct downloading into their CI process. Totally unexamined, totally untrustworthy. I cringe to think of how that could be abused.
Not quite *any* number. It's implemented as `[0-9]+` rather than `\d+`, which is *very* important in a Python 3 world.
&gt; I don't think someone saying something is garbage automatically makes them conceited or stupid. ...I think anyone who declares an entire language ecosystem as garbage has no idea what they're talking about; and it does make them look both stupid and conceited. Picking a language is about trade offs. I could easily articulate reasons why both php and javascript are both excellent choices *for specific tasks* as well; neither of those languages is rubbish either... no matter how much, I, personally, don't like them. If you want to bitch about how go has no good package manager, or no generics, or you don't like the syntax, but all means, go for it; but if you go out there declaring that all of the entire language is just shit because you don't like it, you are, indeed, looking like an idiot.
Django Crew is a community portal for Python / Django developers. its contain blogs, snippets, video source etc.
&gt; How many core developers make a living by offering Django consulting services (i.e. fixing what they just broke)? How many? Are you suggesting there are people on the core team that deliberately advocate for backward incompatible changes to support their own income streams? Please, show me one core dev doing this or one decision made that supports this assertion. Django is managed by a group of volunteers with limited contribution time and limited funding. So when there’s a decision to introduce backward incompatible changes over 2-3 versions versus support two slightly different or incompatible features guess which one is going to win out? These kind of changes are discussed on the issue tracker and on the mailing list. Each and every backward incompatible change is discussed, and a cost benefit discussion is had. If you care to do more than whine on reddit and accuse volunteers of improper behaviour without any evidence, perhaps you can consider participating in the process. Or migrate to a different framework that never changes. Good luck finding one. (Disclaimer: core dev) 
You will have to iterate all the items until you find the one you want. a dict maps key to value, and not the reverse. This is bad idea and you probably want to make a second index, or use a multimap library, or sqlite.
Checking a repo with [`Code Climate`](https://codeclimate.com/) seems to recommend: * 250 lines per file * 25 lines per function 
I have always assumed that `\d` is short hand for `[0-9]`, is it not? My point however that it would match 8, 18, 018 and 2018 whereas first pattern would only match 2018. Although I have seen another person mentioning way to make custom type 
Thanks. Any personal opinions? Too long, too short?
I have updated [the Data structure section of the Python OOP list](https://github.com/metaperl/python-oop/#data-structure-ish) with your new updates. 
Honestly? If you're using Python 3 + Django 1.11 you're good to go. You might get some deprecation warnings, but everything should mostly just work.
`\d` matches any Unicode character in the numeric category, which is chosen includes 0-9... and every other character in any language that represents a number! 
The number of lines isn't really important per se. A more useful question is "is my class/module doing too many things?" For example, if your program requires a bunch of string manipulation functions, it may make sense to put them all in a single module, so you have just one import. Logically they're all the same kind of thing (they process strings), so they arguably belong together. However, in most real-world cases I've seen, a module with over ~15 functions, a function with over ~15 lines or a class with over ~15 methods is a little smelly and can usually benefit from being split up into smaller, conceptually tighter units. 
1.11.
🌺 Upgrades all the way down 
Thanks, good to know. Although it seems that in the example above \d would work just we well since python understand Unicode numbers of other languages as well. I.e ```&gt;&gt;&gt; int("١٢٣") 123 ```
Ooo that path converter is nice. Wasn't aware of it.
This would appear to be the most convenient way. Thanks.
Could you point a Python newbie in the right direction to learn about dunders?
More importantly, importing from GitHub is not a language problem, just a shitty packaging method. Someone could implement importing from GitHub for Python. (I'm sure someone has).
Thanks, please do go on. Id love to hear your approach to refactoring such smelly file. 
I cannot really think of any optimization Haskell could perform. Would be nice to see the resulting machine code.
Yes, you are right, I did not realize how slow it was for so few multiplications. Still, we do not know if large integers are fundamentally slower in Python than in Haskell without comparing with small numbers. If the test with noop takes 1 second in Python, but 1/80 second in Haskell, it would mean that the overhead is elsewhere. We can look at the path taken by Python for the multiplication of two numbers: * [`BINARY_MULTIPLY`](https://github.com/python/cpython/blob/master/Python/ceval.c#L1195-L1205) * [`PyNumber_Multiply`](https://github.com/python/cpython/blob/0ccc0f6c7495be9043300e22d8f38e6d65e8884f/Objects/abstract.c#L969-L986) * [`binary_op1`](https://github.com/python/cpython/blob/0ccc0f6c7495be9043300e22d8f38e6d65e8884f/Objects/abstract.c#L768-L803) * [`NB_BINOP`](https://github.com/python/cpython/blob/0ccc0f6c7495be9043300e22d8f38e6d65e8884f/Objects/abstract.c#L753-L754) * [`nb_multiply`](https://github.com/python/cpython/blob/28b624825eb92cb8c96fbf8da267d8d14a61a841/Objects/longobject.c#L5338) * [`long_mul`](https://github.com/python/cpython/blob/28b624825eb92cb8c96fbf8da267d8d14a61a841/Objects/longobject.c#L3541-L3562) * [`k_mul`](https://github.com/python/cpython/blob/28b624825eb92cb8c96fbf8da267d8d14a61a841/Objects/longobject.c#L3262-L3432) * [`kmul_split`](https://github.com/python/cpython/blob/28b624825eb92cb8c96fbf8da267d8d14a61a841/Objects/longobject.c#L3225-L3258) That is a lot of steps.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [python/cpython/.../**ceval.c#L1195-L1205** (master → 078f181)](https://github.com/python/cpython/blob/078f1814f1a4413a2a0fdb8cf4490ee0fc98ef34/Python/ceval.c#L1195-L1205) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Fairly similar is this post on adding methods to classes: http://block.arch.ethz.ch/blog/2016/07/adding-methods-to-python-classes/ Since dunder func is gone in Python3, I think this is now the proper way to write the last example (the first option): class B(object): def print_classname(self): print(self.__class__.__name__) class A(object): print_classname = B.print_classname
Right, it still works fine. But for future reference, I'm curious how the actual process of updating your django works. For example, is there a specific django --upgrade command or something? Do we then go through our code and manually switch out deprecated code for the newer standards? 
Yes. In fact numpy will never copy unless you explicitly ask for, or there is no other way to keep the new data array contiguous.
I think you meant to put .* there bud
&gt; If you care to do more than whine on reddit and accuse volunteers of improper behaviour without any evidence, perhaps you can consider participating in the process. I tried, but they don't give a shit about outside contributions: https://code.djangoproject.com/ticket/18494 &gt; introduce backward incompatible changes over 2-3 versions You bloody amateurs introduce backwards incompatible changes with every bloody minor version, so about once a month. &gt; Each and every backward incompatible change is discussed, and a cost benefit discussion is had. That's rich. The cost is passed to us, users, while the benefits go to you - the "group of volunteers" making money out of fixing Django-related breakage for those you fooled into using your framework. &gt; (Disclaimer: core dev) Fuck you and everything you stand for, buddy. You are wasting people's time and money and your only excuse is that you volunteer to do so. Guess what? We all volunteer our work for free software projects: https://github.com/stefantalpalaru/ https://github.com/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Astefantalpalaru Now you can get off your high horse and go back to fixing for money what you just broke in Django for free.
I love regexZt9oFoz
Working on a project that uses nltk from pathology reports and other clinical documents to predict likelihood of surgical site infections (SSI) for patients that recently underwent surgery. First time I've ever used nltk.
&gt; I like the django deprecation policy That's masochism.
[This article](http://www.wilfred.me.uk/blog/2014/10/20/the-fastest-bigint-in-the-west/) compares various bignum (=large integer) implementations. Haskell uses [GMP](https://gmplib.org/). Python does not. But [another article](https://jasonstitt.com/c-extension-n-choose-k) shows that you can use GMP from Python, improving the runtime of one example program from ~14 seconds to ~2 seconds. Your example mainly uses multiplications. (And one modulo operation, but that one seems to be very fast.) Python [seems to use two algorithms](https://github.com/python/cpython/blob/65d4639677d60ec503bb2ccd2a196e5347065f27/Objects/longobject.c#L91) for bignum multiplication: "the O(N**2) school algorithm" and [Karatsuba](https://en.wikipedia.org/wiki/Karatsuba_algorithm) if both operands contain more than 70 decimal digits. (Your example reaches 70 decimal digits already after the 5th(?) squaring, and after the 22nd there are ~17million decimal digits(?). The wast majority of the time is spent on the last one or two multiplications i.e. Karatsuba.) Meanwhile [GMP implements seven multiplication algorithms](https://gmplib.org/manual/Multiplication-Algorithms.html): The same(?) "school" and Karatsuba algorithms, plus various [Toom](https://en.wikipedia.org/wiki/Toom%E2%80%93Cook_multiplication) and an [FFT method](https://en.wikipedia.org/wiki/Multiplication_algorithm#Fourier_transform_methods), but I'm unclear on what the exact thresholds are that select these.
&gt; Or you could just at least try to verify it before making an ass of yourself. https://www.python.org/download/releases/3.0/ Are you unable to read? I was talking about Perl. Why would you link the Python site, vomit some insults and get upvoted? This community makes no sense...
I am having a hard time understanding the legalities of scarping. Many sites say explicitly that scraping is not allowed, but many still do it. I was thinking of scraping genius.com, but I'm not sure what is allowed. Does anyone have experience with this? The link for terms at genius.com https://genius.com/static/terms
Oh, in this case your code is eq to `12345 ** (2 ** 22)`. This takes 18 seconds on my pc.
Django's deprecation policy is actually pretty good. They don't get rid of deprecated code within a two feature releases. That means if you're using something that will be deprecated in Django 2.0, you'd have seen the deprecation warning whilst using Django 1.10 and 1.11. This is why I say that if you're using Django 1.11, you're already good to go. But you might encounter some deprecation warnings for a future release of Django. Personally, I just update my Pipfile.lock (or requirements.txt if you're still using that) and then fix any warnings that might come up.
You missed **"Removal of support for Python 2.7"** Sadly, I still know a lot of shops that *still* can't get themselves past even early versions of 2.7... and that makes me sad.
sometimes you wont get the compatible version from the core repo thus this one is helpful to grab that.. though untrustworthy but helpful in emergency 
Validation logic actually wouldn't be in the view in this case. See the [custom path converters](https://docs.djangoproject.com/en/2.0/topics/http/urls/#registering-custom-path-converters). The example there is for a 4 digit year. It would be its own Converter class with a `to_python` and `to_url` in its own converters module. I think it's pretty damn neat but this is the kind of thing I love and hate about Django. A regex and one line of code and you don't need to write this whole separate module and class and you don't need to know the converter API you have to implement. flask, you just decorate a function and BAM you have an url that *just works*. You don't need to write 10 different lines of code in each 10 different python modules to implement one damn view that serializes a sql row into a json dictionary.
We're running a non-trivial ~50KSLOC asyncio/tornado (yes, both) app in production. Asyncio has made the async story in Python a lot better.
No it's not.. Just choose something different if the Django deprecation policy doesn't fit your own business model, no need for hyperbole. I like it because it makes it reasonably quick to make changes in Django instead of just piling on more and more legacy which in the end would be a daily pain to work with due to having to know about everything that shouldn't be used. I don't use Django for every project but I do start the majority of web/rest projects with it.
i think 250 lines is a nice goal to strive for but not including doc blocks. it's also a matter of the situation. 25 small classes in a file is different than 1 large class.
&gt; Importing from GitHub as a recommended practice elaborate why its bad?
Stop yelling about feature changes in minor versions, that's what you should *expect* as a python developer. Python introduce backwards incompatible changes in "minor" versions too (e.g. `await` keyword, removing `raise StopIteration`) so long as users are properly warned beforehand (2 versions prior in both Python and Django). And complaining about backwards incompatible changes in this *major* releases is pretty striking.
My main language is Spanish and I find documentation grammar to be on point. Super simple to get. Maybe your english skills need refinement?
you fail it
Try something like this: for employee in employees.values(): if employee['Name'] == 'Joe Smith': print(employee['Office Phone']) break This will sequentially go through every sub-dict in your list and print out the 'Office Phone' value of the dict where the 'Name' value of the same dict matches 'Joe Smith'. It'll then break because you've found your man and you don't need to continue running the code.
Remember how I asked for evidence about your claim of core devs intentionally causing backward incompatible changes so they could profit? Seems to be the only part of my comment you ignored, yet you made the claim again. So again, if you have evidence of such behaviour please present it. &gt; You bloody amateurs introduce backwards incompatible changes with every bloody minor version, so about once a month. Major version. So every 9 months. Some are big, some are not so big. New release process is designed to minimise impact by allowing LTS -&gt; LTS upgrades without incompatibility issues. Its not like there’s no consideration of users. &gt; That's rich. The cost is passed to us, users, while the benefits go to you - the "group of volunteers" making money out of fixing Django-related breakage for those you fooled into using your framework. The cost is paid by users yes. The benefits also go to users. Sometimes those people are the same. Sometimes not. Django core devs are also users. That’s why they’re core devs. &gt; Fuck you and everything you stand for, buddy. You are wasting people's time and money and your only excuse is that you volunteer to do so It’s not an excuse. It’s a trade off. Improvements to systems that are deemed to be more valuable than the cost of not making the change or maintaining two parallel implementations. Resources are finite. Go back to using 1.3 or whatever version you think is best. Back port all the security fixes you need. Or participate in the process and promote the change you want. No one is happy with breaking changes. Core devs try to avoid them whenever possible. But they’re still going to happen. If you can’t deal with that, then maybe you should find another way to make a living. 
Seems quite reasonable, thanks. 
&gt; Remember how I asked for evidence about your claim of core devs intentionally causing backward incompatible changes so they could profit? Seems to be the only part of my comment you ignored I can't take seriously a request to prove intent. As far as I am concerned, if you keep doing something that you profit from, you are probably doing it on purpose. Your request for a proof that cannot be provided is just a deflection tactic. &gt;&gt; You bloody amateurs introduce backwards incompatible changes with every bloody minor version, so about once a month. &gt; Major version. No, minor version: https://www.reddit.com/r/webdev/comments/7drep5/which_web_development_framework_makes_web/dq04g5z/ &gt; The cost is paid by users yes. The benefits also go to users. There are no benefits from us charging our customers for avoidable work - and it's usually something silly like changing some method's name or dumping all the previous database migrations because some perpetual newbie thought it would be nice to change the format with South's integration in Django. It makes us look bad when we have to explain why we need to spend extra billable hours each month on framework upgrades that, more often than not, lead to breakage and loss of functionality. Then there's the domino effect on Django apps that need to also be modified and tested for the new version - it's a shit avalanche that gets bigger and bigger the more complex your site is. By the time you fix everything, a new minor Django version appears and you start all over again. No wonder so many of us are stuck on old and vulnerable Django versions... &gt; It’s not an excuse. It’s a trade off. Improvements to systems that are deemed to be more valuable than the cost of not making the change or maintaining two parallel implementations. Resources are finite. I prefer the Linux kernel policy of maintaining a stable public API (mainly syscalls). This is how you show respect for your users and keep yourself honest. When you add to the API, think really hard about whether you want to maintain that for the foreseeable future and everybody will benefit from a better design and the stability that allows us users to not waste our precious time. The way Django (and many other newbie-oriented projects) does it looks like a practical joke. Parts of the public API deprecated and removed for no actual benefits, redesigns that bring more problems, chasing one fad or another instead of fixing the 1000+ reported bugs, etc. Django is not the "web framework for perfectionists with deadlines" as advertised, but the web framework for masochists that get paid for avoidable work and you are part of the problem. Chew on that. &gt; Go back to using 1.3 or whatever version you think is best. Back port all the security fixes you need. How's that for a professional approach to project management? Seriously, at which point do you admit that your whole process is wrong? &gt; No one is happy with breaking changes. Yeah, I'm sure you cry all the way to the bank... &gt; If you can’t deal with that, then maybe you should find another way to make a living. I'd rather stick with software development and make sure that those people using my free software are treated with the respect they deserve and their time is not wasted because of me. Anyway, don't take me as a model, feel free to give up your "amateur hour every hour" approach to programming and pick up farming or something.
/u/1wd has done much of the lookup. Haskell delegates to GMP, which starts with the same basic algorithms (basecase and Karatsuba) but has an additional 5 algorithms (or variants thereof) as the size of the inputs increase which Python does not implement
&gt; Picking a language is about trade offs. Agreed here. However, in my opinion, some trade offs aren't worth it unless your hand is forced. &gt; I could easily articulate reasons why both php and javascript are both excellent choices for specific tasks as well I can't think of anything PHP can't do that Python, Javascript or Ruby doesn't do better in a saner way. Unless you're working on an existing code base or need a WordPress instance, I don't know why anyone would choose PHP these days. But people do, and it boggles my mind. I'll say I think there's interesting things that happen in the PHP community (a big push for DDD, which I haven't seen outside C# or Java) but I'd prefer to forget that language even exists for all the headaches it's caused me. &gt; If you want to bitch about how go has no good package manager, or no generics, or you don't like the syntax, but all means, go for it; This is mostly my dislike for Javascript, well not syntax that's okay. But it all adds up to me thinking Javascript is a pretty garbage ecosystem. * Typing and coercion that make PHP look normal. I don't accept "it's untyped" as an argument but it is typed, just looser than a hooker * A package manager that downloads the same dependency twenty times - I have three copies of webpack, why is that okay? * Async by default but all the mechanisms are weird. * Ass backwards modules with three different competing implementations. I'll give browser JS a pass, but there's no reason this needs to happen else where. * Prototype inheritance is alright, but then traditional OO inheritance is being shoved on top of it. * There's no string formatting. What the hell is this? Sure there's template strings, but that's it. Unless you install a package and it's eight hundred dependencies. * Micropackages. One function isn't a package. I don't get why anyone thinks this is a good idea. * Scoping. Forget a var? It's a global now. * Binding is crazy too. Want to pass an object method as a callback, you better perform the binding ritual every time. * Hoisting, just why? It doesn't hurt anything in the long run but it's just odd. And on and on and on. 
Anaconda would be the easiest and most straightforward solution for your use case. I would install miniconda and install just the packages i need in virtualenvs. 
Thanks, that's informative. &gt; Haskell uses GMP. Python does not. But another article shows that you can use GMP from Python, improving the runtime of one example program from ~14 seconds to ~2 seconds. And since GMP is GPL/LGPL, it's legal to do that. OTOH, using GMP in the primary CPython distribution is probably not going to happen, as I imagine the LGPL is just a hair too restrictive for what Python is aiming at. But there could easily be a secondary distribution that used GMP. Another approach: I imagine that most of the speed advantage of GMP over CPython is due to just one of those 5 algorithms that GMP has but CPython does not. Implement that in CPython to get a big speed-up in large-integer multiplication. And that just might be achievable. By the way: &gt; Karatsuba if both operands contain more than 70 decimal digits. It's actually 70 "[internal Python int digit](https://github.com/python/cpython/blob/65d4639677d60ec503bb2ccd2a196e5347065f27/Objects/longobject.c#L91)"s, which are 30-bits on (most) 64-bit systems and 15-bits otherwise.
The benefits are in the new features and bug fixes that reduce the time users spend building sites. You seem to think there’s churn for churns sake. And you still claim that this is happening so we can get those sweet consulting fees. It’s rude and insulting. If you have issues charging clients then that’s on you for being a poor consultant. You know there are maintenance costs. If you’re not building those costs into your contracts then blame yourself. A new way to make you’re living can still be development, but without Django. But for some reason you still use it and hang around the community pages. Seriously if it doesn’t work for you, find something else. Django breaks shit every now and then. It’s not going to change. Please, find something that works better for you. You’re comparing Linux, a 30 year old OS project with hundreds of contributors and financial sponsors to a 10 year old web framework with approximately 5 active maintainers and very little finances and wondering why the same level of commitment can not be made to a stable API? Some of these changes you’re complaining about were implemented poorly before a version 1 release. “Integrating South” is a stretch of truth at best and more lies at worst. You’re seeing malice where none exists because you don’t like maintenance work. You’re an entitled asshole. That’s it. 
&gt; It's actually 70 internal Python int digits Ah good point, thanks. So it's maybe ~600-700 decimal digits.
Because by default you always get the latest master. 
It's a gray area. If a website has an API you should be using that and not scraping. https://genius.com/api-support
How much is the course? It doesn't seem like "enroll for free" means the course is free.
I have no experience with Python outside of web development and scripting. Given your constraints, I would use whichever language/platform is industry-proven (C or C++?) rather than risk using Python. 
hi, the full course cost 20$ at https://courses.tanpham.org/courses/scrapy-bootcamp-scraping-data-from-internet
&gt; If you have issues charging clients then that’s on you for being a poor consultant. No, that's on me for being honest. 99% of a Django upgrade is not about fixing bugs or adding new features they need. To say otherwise would be a lie. &gt; A new way to make you’re living can still be development, but without Django. But for some reason you still use it and hang around the community pages. Seriously if it doesn’t work for you, find something else. Django breaks shit every now and then. It’s not going to change. Please, find something that works better for you. I can't abandon my clients because their projects use the framework I initially proposed and now I know better. It's on me. &gt; You’re comparing Linux, a 30 year old OS project with hundreds of contributors and financial sponsors to a 10 year old web framework with approximately 5 active maintainers and very little finances and wondering why the same level of commitment can not be made to a stable API? Yes, because it doesn't take thousands of developers and hundreds of sponsors to impose a sane policy. &gt; “Integrating South” is a stretch of truth at best and more lies at worst. http://south.aeracode.org/ - the guy who wrote South reimplemented it (in an incompatible way) in Django-1.7 and deprecated the external app. What would you call that? Oh, and the "professionals with deadlines" are told to just delete all their old migrations - https://docs.djangoproject.com/en/1.7/topics/migrations/#upgrading-from-south : &gt; Delete all your (numbered) migration files Because fuck those people with custom code inside their migrations, right? https://github.com/stefantalpalaru/django-rdflib/blob/master/django_rdflib/migrations/0001_initial.py &gt; You’re seeing malice where none exists because you don’t like maintenance work. Yes, that must be it. I'm imagining things. I don't like avoidable work because I am a programmer. I have better things to do with my time - like fixing bugs and adding features in some other free software projects or contributing my own projects to the community. You don't get to waste my time and then call me lazy when I complain about it. &gt; You’re an entitled asshole. That’s it. If it makes it easier for you to keep on doing what you have been doing, sure. Blame the critics for the way you are abusing your users, then go back to the kind of consulting where you spend 10% of the time upgrading Django.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [stefantalpalaru/django-rdflib/.../**0001_initial.py** (master → 6a23885)](https://github.com/stefantalpalaru/django-rdflib/blob/6a23885c7c170457570111045e9bc53d9ea3fc33/django_rdflib/migrations/0001_initial.py) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
If Brython doesn't do it for you, I had good results with [JavaScripthon](https://github.com/azazel75/metapensiero.pj) in the past.
The vanilla python.org distribution + pip is just fine. Leaning the standard tools is good. Anaconda is also a great distribution and should have all the packages for your use case. In any case, use virtualenvs.
Started to learn Python and I'm trying to make FizzBang as a small project. Keep getting a null byte error so need to look into that before I can finish.
You're going to have to validate the year for reasonableness anyways. For instance, what's so special about the year 7231 that it should be accepted, but the years 958 and 10276 aren't? 
&gt;Conceptually, a urlpattern is a mapping from a path to either a view, or to None No, you're missing the fundamentals of grabbing the capture groups.
the . after didnt work because now it skips opening the tkinter windows entirely 
Well explained, thank you!
Anaconda and vanilla python are both good. If you are beginner, anaconda is easier to handle. Anaconda comes with a good set of tools installed(e.g. Jupyter notebook, spider etc), these can be pretty handy. It is also relatively easier to manage packages. But if you confident enough that you can manage your packages and environments. You could go the vanilla python route, that would give you more freedom. 
I really like Python decorators, but I have to say that Python is doing it's damnedest to prove true the old saying that goes something like: Programming languages expand until they contain subpar implementations of Lisp. Learn Lisp macros. Then Python decorators will be a snap.
Oh brother, scientific mode! Thanks for the reference. Given that hell will freeze over before I pay with an IDE, I guess I will stick with Spyder.
+1 this. Regarding data scraping from spreadsheets, pandas (with xlrd) does a great job importing. When creating formatted spreadsheets, I currently prefer openpyxl. But have used xlsxwriter too.
A good rule of thumb is that a Function (or Method for Classes) should always fit on one screen.
I'm talking in broad terms here. Obviously I was being a little loose with the language. I definitely wasn't trying to get into the details of how the routing system actually works - just how it *must* work at a high level. If I were being more precise I'd say that in *really* broad terms, a routing system is a mapping from paths to functions which take a request and return a response. The natural way to make this system modular is to use an ordered list of such mappings (and allowing them to return null) and handle the fallthrough case. There's no real difference conceptually between returning a function that takes a request, and a function that takes a request and a bunch of arguments, and also the list of those arguments.
Is this true? Doesn't it just drive a browser, which is 'headed' in the case of chrome and firefox (i.e. a window pops up), but you can use it with PhantomJS, which is headless?
It can use either. I believe Chrome runs headless by default now, and Firefox has a headless mode that you can opt into. 
Cool! I couldn't get headless Chrome to work with selenium when I last tried a few weeks ago, but maybe the tutorials I was checked out were out of date.
My process: 1. Change your `requirements.txt` 1. Test everything. 1. Fix bugs as they pop up.
I wrote popular asyncio library. Never had problems with asyncio, async programming is complex but that has nothing todo with asyncio. Also asyncio design allowed me to integrate async rust.
There must be a step before "Test everything." You haven't yet installed the newer version. I'm curious whether theres a step in which we run a command to -U the installed django from the command line, or whether you just rebuild the entire project or something? 
`pip install -r requirements.txt` will install the new django.
I think the markup is just eating his asterisks, hence the slightly random italics. So it's more like he's missing some backslashes.
Oh, apologies, but even then I don't think the "age" of software is particularly relevant if the software itself is well-maintained and updated. New doesn't mean better inherently.
Ugh. It makes sense now.. I hate myself. 
Love yourself. It's ok to not know. What's wrong is to pretend to know when you don't.
I wonder if wxPython has something like that. It is a Python GUI framework that includes event processing. You might be able to find ideas there. 
You are correct 
There is no such thing as an `if` loop. The `if` statement runs once.
I must have done something wrong then, either way are there any alternatives to break?
If you're inside a function you can use `return`
could you post the part of your code you’re talking about ? 
It only recently became the official tool https://twitter.com/kennethreitz/status/936239842039619584
&gt; `self.bar = Attribute(bar)` That can't work. `bar` should be an attribute of the class in order to be able to intercept instance attribute assignment and do something interesting. Here's a rough proof of concept: class EventAttribute: def __init__(self, name): self.name = name self.listeners = [] def __get__(self, obj, type): if obj is None: return self return obj.__dict__[self.name] def __set__(self, obj, value): obj.__dict__[self.name] = value self.fire(self, value) def add_listener(self, listener): self.listeners.append(listener) def fire(self, *args, **kwargs): for listener in self.listeners: listener(*args, **kwargs) class Example: bar = EventAttribute('bar') def __init__(self, value): self.bar = value # pseudo staticmethod def _listen(attr, value): print(attr.name, 'got assigned', value) bar.add_listener(_listen) a = Example(0) b = Example(13) a.bar = 10 a.bar = 20 b.bar = 30 print(a.bar, b.bar) Note a few details: * adding a listener externally would require accessing the attribute via the class (because it can store arbitrary value, duh), like `a.__class__.bar.add_listener`. * the value has to be stored in host object's `__dict__` using the same name, you can't store it in the attribute itself because then it would be shared between all instances of the host class. You can however decide that `name` should be the name of the backing attribute (like you'd do with a property "value" backed by "self._value") and use getattr/setattr instead of going through the dict. This would allow working with dict-less classes. * perhaps most importantly, the above actually applies to listeners as well, in my example they are shared between all instances of the Example class. If you want per-instance listeners you also have to store them in the instance's attribute, with an added complexity of properly routing the host object to the add_listener method somehow.
but we are still taking about 22*k (with k being small) operations! (And yes, noop takes microseconds). Btw, do you realize that the resulting numbers are enormous? I think about 5*2^22 digits (number of digits doubles on every iteration)
 1: try google 2: read about those two tools. They're great. 3: read the sidebar 4: go to the correct subreddit (see 2 above)5 5: read the sidebar in the THAT sub.
should I take this course after my python crash course? Or do it both same time? I was thinking about doing automate the boring stuff after pcc but now not so sure. This looks great :)
Can you simply and shortly describe what those virtual enviroments are? I guess it is aboutseparating rthe packages from each other? Or does it have something to do with python 2 vs 3 ? Thanks
You’re thinking now just about the year but there are many other use cases. 
Yes, My course is like a workbook so you could get it and improve your code skill.
While I understand where you’re coming from I do like being able to configure and tweak every aspect of my project. 
Identity vs equality :). You'll get the hang of when things in python are pointers or unique objects. Plenty of great answers here. If you want to learn a little more about ways you can optimize python memory management in this same vein, you should read up on string interning. If you're ever unsure, and using cpython, you can use id() to check the memory addresses. 
Thanks. This seems like overkill for function to fit screen, dont you think?
Guys: I lost about a third of my comix collection this morning. Never write/run code until after your second cup of coffee. This weekend I found a large folder of comic files on my hard drive in a single odd folder. I could have spent an hour sorting by hand but decided to write a python script to sort. I DID go with a class/factory solution and got strings that would say "file X should be moved to folder Y..." for a lot of the files. So Sun morning I decided to let my Python script clean up the folder so I could see what was left over. The script crashed/threw errors about some files already existing in my folders. I decided I must have copied out some files to this folder so I changed the script to do a over-write. The script started running, the caffeine kicked in and I started pounding Ctrl-C to kill the process. Several months ago I was interviewing for a job where they did a lot of PowerShell programming. I had never used PowerShell so I decided to write something to sort comic files. I wanted to give the script a large pool of content. So I wrote a quick perl script to run through my "to be sorted", "sorted" and "already archived" folders. I did not want to waste hard drive space so I made the perl script create 'fake' text files by copying the file names. (You see where this is going?) Months later (today) my Python routine came along and over-wrote real comic files with the fake files. Mantra: Must always finish 2 cups of coffee before programming. Must always finish 2 cups of coffee before programming. Must always finish 2 cups of coffee before programming. (sigh) 
Doesn't support lyrics though. 
Nice. I'm forwarding this to my team.
It's just function composition, I don't get why it's so complicated. 
Which is why scraping is a gray area. 
for constructive answers i suggest you follow the advise of the sidebar: &gt; If you are about to ask a question, please consider r/learnpython or the learn python discord.
Salut, Quel est ton problème ? Difficile de t'aider sans savoir sur quoi tu bloque 
Can you think of a way to do this without having to give the `name` to the `EventAtrribute`
:D
Thank you guys for the websites.
&gt;Python is doing it's damnedest to prove true the old saying that goes something like: Programming languages expand until they contain subpar implementations of Lisp. That pithy catchphrase always bugged me. If what everybody really wanted or needed was LISP, we'd all be programming in LISP *already*. The key is to implement enough of LISPs power while avoiding a tortuously unreadable mess.
I think 3.6 added support for that to be passed in automatically. It's a known problem with descriptors, but they fixed it. 
Well, it turns out that you can use arbitrary objects as keys in `__dict__` (at least in Python 3), so you can use `self`. That feels really dirty but should work perfectly.
&gt; we'd all be programming in LISP. And we are, slowly but surely. Map/reduce, functional programming, anonymous functions, hash tables, macros--these were in Lisp literally decades before anywhere else.
What, how?
Ohhh shit that's *perfect*, thanks!! This doesn't work if the object ("`self`") isn't hashable though?
Function composition is one possible way to use decorators, but doesn't cover everything you can do with them.
Except we're not programming in LISP, those are just features that were added to python. Except macros. They weren't added. Macros are actually a perfect example of something that will quite easily create a tortuously unreadable mess. There's a reason why Paul Graham's viaweb LISP codebase got rewritten in python when it was sold to yahoo. There's a reason why *reddit's* LISP codebase got rewritten in python. It's the same reason why we're not all writing LISP right now.
Repost
A virtual environment creates an isolated instance of a python interpreter + set of libraries. Yes, you have have different versions of the interpreter inside venvs. But the most important use is isolating the set of dependencies of a specific application. With venvs it is safer to make mistakes without affecting the set of libraries installed for the global instance of the interpreter. They also help reliably reproduce everything required for the application on another machine. The Anaconda system had developed this concept more-or-less independently from the popular version of virtualenv used with python. As a result, their venv implementation is slightly different. But it essentially does the same thing. 
Use procedural to begin with and refactor into classes and OOP whenever you start to conceptual "things" emerging in your code. Usually when I do it I start out with procedural code that does things to dicts representing a "thing" with a few parameters. I usually turn those into objects.
Use proven embedded tech like C. Even if you can do it in Python, if anything goes wrong you'll be escape-goated by the lawyers. &gt; Would need processes that can stay up for thousands of hours at a time without restarting - Essentially the exact opposite of a webserver! Funny, but a big tech company website, when you count the sites and the hardware in the data centers they manage as a single unit, their code is better than an airplane and exceeds thousands of hours uptime. But I would recommend you use proven embedded technology.
PSA: Entering dummy data on the registration page works. no confirmation email needed. @OP: consider doing a guest option available. Needing to enter one's email is so 2016. Would this be a 'confirm-your-email' thing, I would've backed out and never bothered to see if the content is perhaps (dont know yet) very good.
I have a script with 1000 lines now. Pretty complex, it's a trading bot. I could never get into classes though. Just never had the need :S
https://stackoverflow.com/questions/42023852/how-can-i-get-the-attribute-name-when-working-with-descriptor-protocol-in-python#42023924 Found it! 
That mostly hints at the layering being irrelevant, really: calling 7 functions in C is pretty fast, even if you're doing a bunch of crap in there, it's clearly the computation itself which is much faster in GMP (which Haskell uses) than in Python.
All objects are by default hashable and compare unequal to any other object, using their memory address (in CPython) as object identity. There's a neat pattern, when you need a special value symbolizing the absence of value, but can't use None because that's a valid value in your context, `sentinel = object()` does the job perfectly. I'm more concerned about [WTF/m](http://www.osnews.com/story/19266/WTFs_m) this is going to cause in someone inspecting the object using your thing. Because I for one was surprised as fuck that it works. Also, while we are on the topic of coding styles, I personally try to avoid inheriting from built-in objects like lists whenever possible. And in general prefer composition over inheritance. That prevents some very nasty accidents and is generally useful in a language like Python when at some point you're going to do `if isinstance(obj, list): ...`. Also by the way, I'm interested how you'd implement a per-instance listener list, if you decide to do that I'd be grateful if you shared the result.
By that metric, programming languages including lisp are all just subpar implementations of assembly. The function of a programming language is not to make computers do things: it's to make it as easy as possible for humans to instruct computers what to do. Lisp has a lot of great features, I'm sure, and was a long way ahead of its time, but if its design throws up barriers in terms of usage by humans, then it's not the optimum language.
&gt; And since GMP is GPL/LGPL, it's legal to do that. OTOH, using GMP in the primary CPython distribution is probably not going to happen, as I imagine the LGPL is just a hair too restrictive for what Python is aiming at. IDK, CPython actually [used to bundle GMP bindings](https://docs.python.org/2.3/lib/module-mpz.html), though it seems they weren't used by `long` (just available). According to PEP4 it was deprecated (2.2) and ultimately removed (2.4) because &gt; Third-party packages provide similar features and wrap more of GMP's API.
I've come up with something that works exactly like I wanted it to! It's still a WIP and I will improve it by a large margin (also it doesn't work with `int` right now because of the `super().__init__()`), but it's a start: def _event_attribute(attr, event): class T(type(attr)): def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) self.event = event return T(attr) class Attribute: """Descriptor for creating attributes with modify event.""" def __init__(self, default_factory=None): self.default_factory = default_factory def _ensure_existance(self, obj): if self not in obj.__dict__: obj.__dict__[self] = _event_attribute(self.default_factory(), Event()) def __get__(self, obj, type_): if obj is None: return self self._ensure_existance(obj) return obj.__dict__[self] def __set__(self, obj, value): self._ensure_existance(obj) previous_value = obj.__dict__[self] obj.__dict__[self] = _event_attribute(value, previous_value.event) if previous_value != value: obj.__dict__[self].event.fire( obj=obj, previous_value=previous_value, ) 
[Code with syntax highlighting](https://pastebin.com/aVnvy8j0)
Thank you. Good work!
You technically don't *need* them to achieve anything. They just make the code easier to understand, cleaner and easier to maintain. These are all things that become critical when your code grows to be *longer* than 1000 lines. I suspect I could take your 1000 lines and tease out at least 3 or 4 conceptual "objects" and isolate the code that operates upon them - e.g. with a trading bot these things would be things like "trade", "strategy" or "quote".
Parfait, merci est ce que je pourrais t'envoyer le code? Enfaite le probleme c'est que dans ma fonction principale je defini continue = True et que ma boucle dis que tant que continue = true : blablabla puis a la fin de toutes les executions while je fais appele a une def qui prends comme input oui ou non et si le joueur met oui continue = true sinon continue = False mais il y a un beug car il dit Traceback (most recent call last): File "C:\Users\kuijp\Desktop\prjt poker 3.py", line 318, in &lt;module&gt; print(poker_un_joueur(5)) File "C:\Users\kuijp\Desktop\prjt poker 3.py", line 308, in poker_un_joueur mise_ultra_gagnant(gain1,gain2,gain3) UnboundLocalError: local variable 'gain1' referenced before assignment je comprends pas l'erreur :
[Code with syntax highlighting](https://pastebin.com/2hqP1yvv)
voici la fonction: def continuer(bitcoin): reponse = input(MSG_CONTINUER).upper() while reponse not in ('O','N'): reponse = input(MSG_ERREUR_MISE) if reponse == 'O': res = "Oui" elif reponse == 'N' : res = "Non" return res et aussi ma fonction principale: """ La fonction mère """ bitcoin = 100 random.seed(s) continuer = True while continuer: print(MSG_PIOCHE1 + " " + carte_to_string(cartes[0]) + " " +carte_to_string(cartes[1])) y = demande_mise(bitcoin) if y == "rien": mise1 = 0 gain1 = 0 y = carte_flop(bitcoin) else: (mise1 ,bitcoin) = mise_bitcoin(bitcoin) x = verif_str(reponse2) if x == True : (string_gagnant, mise1, gain1) = calcul_mise1(mise1,reponse2) y = carte_flop(bitcoin) else: gain2 = 0 y = carte_flop(bitcoin) if y == "rien": mise2 = 0 gain2 = 0 y = carte_turn(bitcoin) else: mise2,bitcoin = mise_bitcoin(bitcoin) x = verif_str(reponse2) if x == True : (string_gagnant,mise2, gain2) = calcul_mise2(mise2,reponse2) y = carte_turn(bitcoin) else: gain2 = 0 y = carte_turn(bitcoin) if y == "rien": mise3 = 0 gain3 = 0 mise_ultra_gagnante(gain1,gain2,gain3) carte_river(bitcoin) else: mise3,bitcoin = mise_bitcoin(bitcoin) x = verif_str(reponse2) if x == True : (string_gagnant,mise3, gain3) = calcul_mise3(mise3,reponse2) mise_ultra_gagnant(gain1,gain2,gain3) y = carte_river(bitcoin) print(MSG_SOLDE + " " + str(bitcoin)+ MSG_BITCOIN) else: gain3 = 0 mise_ultra_gagnant(gain1,gain2,gain3) y = carte_river(bitcoin) print(MSG_SOLDE + " " + str(bitcoin)+ MSG_BITCOIN) continuer = continuer(bitcoin) return print(MSG_FIN_1 + str(bitcoin)+ MSG_FIN_2) 
You know, western europe is where english came from ;)
I made a site that does this: http://scrapeyour.site
Use a `__slots__` class as a data class, or a `namedtuple`, to represent your employees. Use `employee.id` as your keys in your lookup dict. Then you always retrieve all the information whenever you do a lookup. Then you can pop/remove/manupulate key:value pairs at will in the lookup dict as required because you have the key duplicated in the data structure. 
Yeah, you'll have to muck with `__new__` as well if you want it to work with int and str. Otherwise it's just a matter of preference I think. I'd prefer to get a plain int instead of a weird proxy object that's like a usual int but has an extra attribute that actually calls back and modifies the object you got it from. Spending somewhat more effort to add a handler would probably be worth it in my opinion, but I'm not sure to be honest.
Right, I'll have to experiment a little with the different options, I'll see what I can come up with in the following few days :) Also, it turns out there's a better way than using `self` as the key, they added [`__set_name__` in Python 3.6](https://stackoverflow.com/questions/42023852/how-can-i-get-the-attribute-name-when-working-with-descriptor-protocol-in-python#42023924) so I don't have to manually pass in the name as you did in your original comment.
You spammer you.
OMG, that's awesome, thanks!
[Code with syntax highlighting](Post limit, maximum pastes per 24h reached)
Yes; but if the makefile and a complete description of the build environment was there you could at least build it yourself and verify. Also it does nothing to explain why there even are "unofficial" wheels for tools **and** versions for which there are "official" ones (my point with **pip** and most everything else in that list that has an *any* wheel). I think it's utterly -- and potentially criminally -- reckless for a company to use these. For an individual it's maybe not so impactful and they can assume the risk, but for anyone with actual client data involved, it's the opposite of best practices.
[Code with syntax highlighting](Post limit, maximum pastes per 24h reached)
You either a fat troll, or a very retarded person. Let's pretend, you serious now. Then I have a question. Why the fuck you use python and django if you hate them so much? That makes no sense...
You either a fat troll, or a very retarded person. Let's pretend, you serious now. Then I have a question. Why the fuck you use python and django if you hate them so much? That makes no sense...
I write stuff that sits above controllers in Python but generally I'm talking with stuff over TCP/IP so that is almost always the rate-limiter. What I would consider doing is having a master Python process to coordinate a number of 'bare-metal' C-API extensions that only take the GIL when returning values but otherwise have p-threads running in the background on memory objects the Python interpreter doesn't know about. 200 ms is a long time, even for Python. If I need stuff to be under 100-300 us is when I usually have to use the CPython API to write an extension. If you do try and write 'near-real-time' applications with Python you need to know a lot of micro-optimizations though. Like using function `dict`s for flow control, the `io` module and `memoryview` objects for manipulating bytes, etc. The main trouble I would see with CPython is garbage collection, which can happen whenever. You can disable it at-will however, if you take a look at the `gc`(https://docs.python.org/3/library/gc.html) module. There's also micropython(http://micropython.org/), which is used for such applications, and has a much smaller footprint than CPython. CPython and its standard library is about 30 MB. 
You either a fat troll, or a very retarded person. Let's pretend, you serious now. Then I have a question. Why the fuck you use python and django if you hate them so much? That makes no sense...
All I get from your attacks is that you're mad because they alligned with a vision that's different from what you wanted. 'Fuck you and everything you stand for, buddy.' Really? Mate, if you're so butthurt why don't you just go and look for another framework? Literally no one is forcing you to use it. You'll be happier and the Django community wouldn't have to deal with your rudeness. It's a win/win. 
[Code with syntax highlighting](Post limit, maximum pastes per 24h reached)
You either a fat troll, or a very retarded person. Let's pretend, you serious now. Then I have a question. Why the fuck you use python and django if you hate them so much? That makes no sense... 
I'm a bit remiss you didn't go into `functools.update_wrapper` and it's decorator form `functools.wraps`. Without those, you lose all metadata about the original function. For example, if you add introspection to determine the name of the function being called in the logger, it'll always show up as `inner_func`
i couldn't agree more... i enrolled, watch the first video and i dont think i could keep it up...
I almost strictly use my classes as namespaces. Instead of saving values in object attributes i try as hard as possible to make methods that returns values in a functional style. Mutable object attributes can lead to subtle bugs.
11 years in and I still can't tell you the difference between copy and deepcopy.
Slicing data arrays doesn't create a new array, but transposing does. This changed in numpy ~1.10 and broke a lot of code, but it's a great improvement.
Can you show us what self.df.head() looks like?
I recently used this tutorial to learn scrapy and was surprised how easy it was. The tutorials are no longer than 5 minutes each and everything is explained so you can get going as quickly as possible. https://www.youtube.com/watch?v=vkA1cWN4DEc&amp;list=PLZyvi_9gamL-EE3zQJbU5N3nzJcfNeFHU
Maybe it helps if you look for "multiplexing" in combination with select (or poll, epoll, kqueue). Recent Python versions provide the "selectors" module https://docs.python.org/3/library/selectors.html and there's an example there as well. It uses the most efficient implementation of a supported I/O multiplexor that your operating system provides. Essentially, you're looking into multiplexing the file I/O of stdin/stdout with the network I/O of your sockets.
 Index Ref_Date Value 0 0 1908 503600.0 1 1 1909 513500.0 2 2 1910 464500.0 3 3 1911 480800.0 4 4 1912 484000.0
Isn't that what a function is for?
Is test1 = test2.copy the same as test1 = list(test2) ?
Cheers! Thanks for creating something cool! 
Yes. You could also do test1 = test2[:] 
Maybe add the clarification in 3 that the regex is for email *addresses*, not emails :) 
Very good point. Yes, I should have at least mentioned that as decorators do screw with your metadata
That's interesting, but you should use a spell checker, there's a lot of typos in there.
This is what I get when I plot with the data you provided, is that what you wanted? https://imgur.com/a/KqxDj
Nobody ever mentions `functools.partial` or the `operator` `operator.itemgetter`, `operator.attrgetter`, `operator.methodcaller` etc. series in basic descriptor descriptions which are really simple but extremely useful `property` staples. 
I think it's pretty similar to what delirious_lettuce said, which you agreed was reasonable. When I stared programming a screen was about 25 lines. Now maybe it's more like 40-50 lines, but the main idea is that you should not need to scroll up and down to be able to see the whole function.
What does he mean by moving away from setup.py?
Check out the book Fluent Python.
oops didn't realize -- thanks! Will keep in mind
Ta fonction s'appelle `continuer` et ta variable locale aussi, du coup python ne sait pas (à l'interieur de la fonction) de quelle variable tu parles (une fonction est juste une variable comme les autres, mais avec la particularité d'être "appelable", (callable). Change le nom de ta variable (ou le nom de ta fonction), et ça fonctonnera.
I'm writing a bottom service for Instagram, allows people to go to my site, buy followers and my bots will follow them. Also trying to automate the bot creation..Requests is so powerful!
Is it right to sort_values for 'Value' and not for 'Ref_Date'? 
Thanks your feedback, I will try to improve
&gt; programming languages including lisp are all just subpar implementations of assembly. Allow me to introduce you to [Lisp machines](https://en.m.wikipedia.org/wiki/Lisp_machine).
Non-Mobile link: https://en.wikipedia.org/wiki/Lisp_machine *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^127832
**Lisp machine** Lisp machines are general-purpose computers designed to efficiently run Lisp as their main software and programming language, usually via hardware support. They are an example of a high-level language computer architecture, and in a sense, they were the first commercial single-user workstations. Despite being modest in number (perhaps 7,000 units total as of 1988), Lisp machines commercially pioneered many now-commonplace technologies – including effective garbage collection, laser printing, windowing systems, computer mice, high-resolution bit-mapped raster graphics, computer graphic rendering, and networking innovations like Chaosnet. Several firms built and sold Lisp machines in the 1980s: Symbolics (3600, 3640, XL1200, MacIvory, and other models), Lisp Machines Incorporated (LMI Lambda), Texas Instruments (Explorer and MicroExplorer), and Xerox (Interlisp-D workstations). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
It also looks like it's still possible to dynamically add bases to a class in python3 if done right: https://stackoverflow.com/a/8545134
Was gonna say this as well. If you need things to be sorted by Ref_Date, you have to do that before you plot: self.df.sort_values('Ref_Date').plot(x='Ref_Date', y='Value')
Any program can be represented into 2 unique characters. 1 and 0.
Is the parallelized version faster? I see no run time benchmarks in the article.
I made a mega bus scraper that finds the one dollar bus ticket. If your planning a trip and don’t care when you leave it’ll make travel a lot cheaper!
It would be nice if the folders / exercises where arranged in order, so the user has a sense of where to start and how to progress
There's a really good talk from PyData Seattle on "So you want to be a Python Expert" which covers Decorators and a few other tricks you should know if you want to call yourself an advanced python programmer: https://www.youtube.com/watch?v=cKPlPJyQrt4
I believe instagram has an API that can be utilized using python. I might could look into doing this for you.
no i want to switch x and y axis
Wait but the dates are on the x-axis and the Value is on the y-axis, as in your description.
Windows? Sounds like you need to fix your file associations. Right click on a file &gt; open with &gt; select python (you may need to navigate to C:\Windows\py.exe) &gt; make sure the "always use this" checkbox is checked &gt; click ok. --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
That would be awesome. I'm willing to pay.. Let me know
I haven't watched the talk, but this might be related to [PEP-517](https://www.python.org/dev/peps/pep-0517/)
Was t it clear? It’s a collection of hacks on top of hacks that basically juuuust barely work and sucks really badly. We should have dependencies and contents of packages described purely as a declarative data structure. Like all other languages with good package management. 
The line length restriction idea is stupid and damaging to our community but what you suggested would be much worse. 
Create a second dict: x = {v: k for k, v in first_dict.items()} Done. 
You made me thing of a way it can be done in 11 characters, using exec on a string created using %c formatting on binary literals: exec('%c%c%c'%(0b1,0b10,0b11)) You'd just have to convert the characters of a given program to their ascii values in binary and make binary literals from them and they'd get turned into a string from the character format specifier and then executed.
when I write the way you wrote it I get this: TypeError: Empty 'DataFrame': no numeric data to plot
Yes, Thanks, I will add readme file
Have you tried making the ref_date the index?
Look at the output of self.df.info() and make sure that Value is actually a numeric column and not an object.
it is&lt;class 'numpy.ndarray'&gt;
I think that is your problem. With the dataframe sorted on value, look at the head and tail. You'll likely see one or more records that aren't straight numeric.
so after the comment &gt;Have you tried making the ref_date the index? i made some changes and now have refdate=self.df['Ref_Date'] so now when i do self.df.plot(x=refdate,y=values) i get not in index error i do not know how to index it
No. That sets `test1` to the `test2.copy` *method object* itself, it doesn't call the method. This isn't Ruby where parentheses are optional for zero-argument function/method calls. test2.copy # returns the copy method object test2.copy() # calls the copy method and returns its result 
Down-vote for posting a screenshot. Do you edit your code with Photoshop? Code is text, **COPY AND PASTE** it.
I actually did that and here is the result print(self.df['Ref_Date'].head()) 4018 1908 4019 1909 4020 1910 4021 1911 4022 1912 Name: Ref_Date, dtype: object print(self.df['Ref_Date'].tail()) 4627 2008 4628 2009 4629 2010 4630 2011 4631 2012 Name: Ref_Date, dtype: object print(self.df['Value'].head()) 4018 20800.00 4019 20700.00 4020 26200.00 4021 26500.00 4022 27000.00 Name: Value, dtype: object print(self.df['Value'].tail()) 4627 236927.00 4628 251318.00 4629 176288.00 4630 171390.00 4631 205175.00 Name: Value, dtype: object
This is an excellent explanation. I've been shamefully using decorators in Django without knowing what they are, and this cleared then up completely. 
You know what? I bet what is happening is those values are stored as strings. Seeing some of them have a decimal value, and some not? Yeah. Try this: self.df['Value'] = self.df['Value'].astype('int')
as you can see both variable have same data type and same length but only one can be inserted as x
I am not sure how 
OMG! you are a saviour it worked it is spaghetti but it is working 
Misleading titles, they're not contradictory. But good to know about these quirks of Counter.
Anaconda is really good. It’s easy to get up and going, so good for beginners, but you can do pretty much anything with anaconda that you can do with other distributions. And it comes with Spyder which to date is my favorite IDE. It’s geared towards data science so it works really well with numpy, pandas, matplotlib, etc. There are LOTS of packages that come with it. Installing new packages or upgrading packages is a simple CLI. I started with vanilla python myself. It’s a decent way to go, but that’s only because I didn’t know any better.
Armin doesn't mention (or even really allude to) this PEP. Instead he's focused on the wheel format, and the fact that any generator (setup.py, setup.cfg, whatever this PEP uses), can be used to generate wheels, and then we're all good.
If you're at university, go ask the statistics professor. (Or a math subreddit, idk) This is more a math problem than a programming one. Ask about how randomness is measured. They might want more information on what exactly you want to test, too--distribution, predictability, whatever.
Here's Python 2 in 7 distinct characters by xsot on Programming Puzzles and Code Golf Stack Exchange: [link](https://codegolf.stackexchange.com/questions/110648/fewest-distinct-characters-for-turing-completeness/110722#110722)
This makes sense, I will do that asap. Because, I've been struggling with this one for awhile, but I think it has come down to can I test it as it is written or is there a schematic I need to follow. Thank you.
print "hmm, lol no."
[Link](http://www.marearts.com/webapp/ss2r/)
A cryptographically secure pseudo random number generator should make it impossible to get the next output with a greater than 50% probability when considering the previous output 
/u/Kopachris has already covered the obvious thing here, but just so you know you can run most everything on macOS that you can on Linux. Furthermore, you can install something like [Vagrant](https://www.vagrantup.com/) and get a linux VM running on your local machine.
4 spaces before each line to format code for reddit. What did you expect that code to do? Why do you think it didn't work?
While there are a few cases where it is entirely needed to use raw C extensions, I would highly recommend against it if at all possible. Cython and CFFI are much better alternatives in most every case. Also I get the feeling there is interest in modifying the C API in Python 4.
I was lulled into thinking they were more like nuts due to the ability to use + - and ==.
I'm going to use my style, which fairly closely matches PEP-8. Why PyQt? Why not numpy or flask or take your pick. PyQt/PySide (and VTK) are based on the C API, so to make the documentation consistent and to make the autogenerated Python bindings, they don't change it.
From the looks of the code I think what you want is if else statement ...after taking the input from the user if(answer="yes"): proceed else: continue
From the looks of the code I think what you want is if else statement ...after taking the input from the user if(answer="yes"): proceed else: continue
No, no benchmarks as it is a thought experiment. You could think up some string size and run on some cloud, but it is an exercise that has benefits already in just working out how to section the mapping and create the final result. 
Where is the python source?
Then you should use modules, not classes. That's what they're for. 
Hmm, good point. I wonder if that's more esoteric, or does the use of 0 and 1's take away the flavor a little bit.
Ayyyyy -- non-numeric characters, then :)
Oh, didn't know this existed! Really cool!
I provide a lot of free and high value course, so if the email is fake you will not see notify for next course come out
Check out pycharm, it's really good
Not a big deal since this doesn't look like it can be used maliciously, but you might want to sanitize the strings you return in JSON from your /webapp/ss2r/ endpoint. For example, if you put `&lt;script&gt;alert("hello")&lt;/script&gt;` in the "text" area of "Test Your Regular", it'll actually open an alert window with "hello" after you click inspection. This isn't bad because people can't link each other to it and cause reflected or stored XSS, but in general you don't want to return raw html in JSON from user input and dump it right on the page or you'll get bad XSS vulnerabilities in other cases. If you ever added a "share" feature to this webapp or something, you'd definitely want to fix that. Even with this, it just ensures the DOM doesn't get broken if the user adds html tags and tries to test them. People legitimately might use this to test regex against html and it would render instead of being helpful and showing whether the regex passed or not for that string.
Analisys...?
Python is the perfect tool for the problem you describe. Although I would focus on python 3 (check beforehand if the libraries you want to use are compatible with python 3.x). The libraries you use are mostly wrappers around C code, so you don't really have to be concerned about speed. The introduction of the python-opencv is quite enlightening: https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_setup/py_intro/py_intro.html#intro
`setup.py` is bad because it executes arbitrary code, so we should move on to something better and safer.
Surprisingly he doesn't mention the PEP at all, even though it seems to be very much along the lines of what he's advocating (although it's not too clear from the PEP whether the file should include package metadata).
Homebrew on the mac has [Dieharder](http://formulae.brew.sh/formula/dieharder).
Next up: cython version
True. I used many text editors in past like sublime, atom, vscode etc. I worked over a year in vim for Python dev. Now I use PyCharm because there are features that boost my productivity.
Do a compression test. Random data cannot be compressed. Compare it to how other sources of randomness compresses. It should give a good indication.
Html should not be escaped in json
OP needs this just for the awesome name.
I just did something identical. We were given the task to make a website and the servers don't support running python as a daemon so we decided to host it elsewhere. The obvious solution is to use flask to wrap the script in a simple api that your phone coffee can call upon.
OP you have too much time on your hands :D 
Hi guys, I'm the co-founder of Enstaved, an online business selling custom designed props, accessories and promotional stuff. If you didn't read the blog, our company was started when I designed this staff topper for my business-partner-to-be to use at a Python conference in Melbourne. We now have official endorsement to sell them, hope you lot will get a kick out of the idea!
Your command is wrong. It should be `/usr/local/bin/python`, assuming you have Python installed in `/usr/local`.
Im working on this years advent of code and learning python (so far python is pretty easy and very clean)
I tried that and I just got another error message: [Errno 2] No such file or directory: '/usr/local/bin/python' [cmd: ['/usr/local/bin/python', '-u', '/Users/name/Desktop/helloworld.py']] [dir: /Users/name/Desktop] [path: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin] [Finished]
I’m completely new to Python and this is the first description of decorators I’ve actually understood. Thanks for that!
Can you actually run Homebrew Python from the terminal? What command do you use to run it? 
Yep :-) You can change this behaviour by compiling your pattern (using `re.compile`) with the `re.ASCII` or `re.UNICODE` flags, if for some reason you need one or the other.
I can run it in the terminal and it works but I think it might be the pre-installed Python. This is what I get in the terminal: Last login: Mon Dec 4 22:43:02 on ttys000 name-MBP:~ name$ python /Users/name/Desktop/helloworld.py hello, world! name-MBP:~ name$ which python /usr/bin/python
Are you sure it is installed correctly?
Selling stuff with trademarked logos? (pokeball, Star Wars symbols, etc) I see more legal trouble than anything else if this actually takes off.
To my collection?
The most important thing is consistency. To that end, when I'm working on anything that is based on Qt, I'll use camel case. For any other modules in the project that don't know about Qt, I'll follow PEP8, even if I'll be importing them in the Qt modules. But however you choose to do it is fine as long as you're consistent.
Kook je salades?
I think so but I don't know how to check other than brew info which doesn't say anything and brew doctor which says that my system is ready to brew. It also shows up in the brew list and brew leaves just fine. 
you wouldnt even need flask or any other framework. they'd just call their own script directly from the wsgi entry point
What's the output of `brew list python`?
The Cython was for debugger performance. We share the debugger backend with PyDev (Eclipse). The 2017.3 indexing speedups are the first in a series of steps we're looking at regarding avoiding re-indexing. The other steps are equally valuable, but tricky to avoid problems in edge cases.
Are you learning how to cook pythons?
Wireshark sounds like what you want.
If you want some really in depth analysis, more thought and blood has gone into the study of random numbers in the field of cryptography than anywhere else. The standards for randomness in crypto (and therefore the expectations for a new CSPRNG) are ***breathtakingly*** high, and there are many tests available for a prospective algorithm to fail in spectacular ways. I'm assuming this project is for fun and personal edification, but in case you are planning to use your own algorithm for protecting secrets I should strongly warn you against doing so. Check out: [one](https://crypto.stackexchange.com/questions/394/what-tests-can-i-do-to-ensure-my-random-number-generator-is-working-correctly) [two](https://csrc.nist.gov/projects/random-bit-generation) [three](https://en.wikipedia.org/wiki/Randomness_tests) 
**Randomness tests** Randomness tests (or tests for randomness), in data evaluation, are used to analyze the distribution of a set of data to see if it is random (patternless). In stochastic modeling, as in some computer simulations, the hoped-for randomness of potential input data can be verified, by a formal test for randomness, to show that the data are valid for use in simulation runs. In some cases, data reveals an obvious non-random pattern, as with so-called "runs in the data" (such as expecting random 0–9 but finding "4 3 2 1 0 4 3 2 1..." and rarely going above 4). If a selected set of data fails the tests, then parameters can be changed or other randomized data can be used which does pass the tests for randomness. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
This looks promising. Thank you!
Your buld file uses `/usr/local/bin/python` while the `which` shows `/usr/bin/python`. Might that be the problem?
Perphaps I am been using procedural and I do find it difficult to use class ,i try to get into oop because of much hype from my fellow coders,I don't know if I am left out on something ..
I mean.. it seems as if you just don't understand the benefits 
how is it not working? Is it throwing an error? If so, please provide the full stack trace.
Check out /r/learnpython 
If we use gmpy2 to run your code, Python beats the pants off Haskell. import gmpy2 def multiapply(f, k, v): if (k == 0): return v return f(multiapply(f, k-1, v)) def sq(v): return v * v %timeit multiapply(sq, gmpy2.mpz(22), gmpy2.mpz(12345)) 257 ms ± 7.28 ms per loop (mean ± std. dev. of 7 runs, 1 loop each) So it's a matter of horses for courses. If you're doing bigint math in Python, just use mpmath (which is an abstraction over gmpy/gmpy2) or gmpy2 (which internally uses gmp).
Pygame works pretty well to make games for fun! I have made this angry-birds clone, it was even used for a machine learn study: https://github.com/estevaofon/angry-birds-python https://arxiv.org/pdf/1601.01297.pdf
Like it saves it as a raw text file? If that is the case it's supposed to do that...
This should be on a different subreddit, [r/askpython](https://www.reddit.com/r/learnpython/). That said, your problem is **raw_input** (replaced in Python3 with **input**) always returns a *string*. You're then checking if that string is in a range of **ints**, but of course it cannot be, so your program does nothing. Try: def get_one_to_eight(): while True: i = raw_input("Enter a digit (1-8): ")) if i.isdigit(): i = int(i) if 1 &lt;= i &lt;= 8: return i That should keep looping forever until the user enters a single digit 1-8 inclusive.
No, regardless of my input, it will give me 'choose again'. It never breaks out of the 'while not' loop. 
Ooh sorry
Oh I'm sorry, didn't know that! And thanks a lot! 
Additionally, PyGame can be used for practically any graphic-requiring application. It gives you a wrapper for graphics and you can basically do whatever you like with it. Of course, the main point are games, but it's not restricted to that. You can make simulations (which may in a way also be games, though), GUIs (for fun or to try out how such things work, but making your own GUI framework from scratch might be lengthy)... I think PyGame is useful.
It runs quite well even on my potato laptop. I'll probably just go and start using it and see how it goes.
Nope. The only Python "program" you can express would just be a string of ones and zeros which doesn't execute and returns a syntax error. You're thinking of binary encoding, but you can't express a binary encoded string in python without more characters, and you can't decode it unless you use even more characters. So you can't in fact not represent any python program using only 1 and 0. 
&gt; jdupes Hey, I know that program for some reason. ;-) I'm happy to help if anyone wants some insight on how to accelerate duplicate scanning work. It's largely just a game of "how can I discard match candidate pairs as quickly as possible?" which generally means trying to avoid reading more data than necessary from disk. The basic procedure in jdupes goes like this: exclude by size mismatch, exclude if hard linked, hash first 4K of files and exclude if hash doesn't match, hash full files and exclude if hash doesn't match, compare files byte-for-byte just in case of a hash collision (see "pigeonhole principle" for why even SHA512 cannot be trusted to not lose data larger than 512 bits in size), take requested action on a positive byte-for-byte match.
Yeah I've heard before that I could just straight up use my GPU to render things faster than just simply using something like PIL if we are talking about python. I'm pretty sure every image editing software nowadays does the same. And Python on it's own is useful, I just didn't really know what to expect from interpreted language when realtime speed is kind of crucial for what I'm trying to do. Thanks again :)
Look into Selenium.
/r/learnpython
Syntax error
Indeed, my code can be optimized, feel welcome to send me pull requests! Yeah, do some projects, you will see it's nice to work with pygame because it's really simple, and gives you all control! Have fun! :)
Two things: The cost savings associated with automation is huge; I would not deliver a message like, "I found a way to save the company [x thousands of dollars] a year," in an email. Secondly, I would not stay with a company that didn't recognize the importance of the first thing. So how *would* I get the word out? I was pretty transparent about my interest in automation and helped co-workers gain more free-time, too. This made my coworkers happy, opened up our team to take on more projects (which made our boss happy), and got me noticed by the gruff senior programmers, who took my questions seriously and gave me more of their time (which made me happy). It also short-cut any chance of someone taking credit for what I was doing. Beyond that, it's important to actually talk about what you want. I'd grab lunch with my sup or other leaders and, if the conversation steered to shop-talk, I'd express interest in higher positions or the work people were doing on more complicated projects. My point is, I wouldn't give up if my email wasn't met with an offer letter. People respond better to face-to-face interactions (or phone/skype, something more personal). Maybe the project you worked on wasn't critical, maybe the folks you sent it to missed it or weren't the right folks. If you continue to cut company costs through automation (**always frame it that way**, both to yourself and others) there will be a place for you on the next rung up.
Thank you for your article, that is really nice story
Don't compare 'Perl5 Vs. Perl6' and 'Python2 Vs. Python3'. Perl 5 and 6 are different languages that share a name. 
Actually, I agreed to splitting big piece to code to smaller chunks. I wonder whether 40-50 lines of function is not code smell. 
&gt; Don't compare 'Perl5 Vs. Perl6' and 'Python2 Vs. Python3'. Perl 5 and 6 are different languages that share a name. So are Python2 and Python3, judging by the time needed to port source code from one to the other.
Line length restriction is not stupid or dangerous. It is quite reasonable, valid not only for programming. The same advice goes for literature. For instance, the recommended line length for prose is about 60 characters. My intentions were to start discussion. Please, share your opinion on that topic. What about to put more effort to explain the others why you think it is stupid and dangerous idea?
Based on your other comment threads I really don't have an interest in trying to discuss this with you. Your comparison isn't fitting.
The server should be as neutral as possible when exporting data. The client/consumer should be doing the escaping because only the consumer knows its needs.
&gt; For instance, the recommended line length for prose is about 60 characters You are confusing the width of the editor window with hard breaks. One is reasonable, the other is not. We've had soft line break capability on computers for decades, hard breaks are unreasonable.
Yeah if that's smelly to him then I think I'm covered in shit
That would depend on the complexity of your game. PyGame itself also has some ways to optimalize the game (such as only redrawing changed parts of the screen, although I suppose most engines can do that). Anyway, it mostly depends on the complexity, but I'd say it should run fast enough.
&gt; Based on your other comment threads I really don't have an interest in trying to discuss this with you. Then why did you reply to an old comment of mine? Are you confused about how a forum works?
It is not wrong to roll your own file format, especially for a specific domain. One important question to ask yourself: Does the data get edited in the text file directly or through an application? Eg: is the format an interface on itself or just a thing for the program to store some data? Do other programs beside my own need to access the data? Would they need to implement your custom text parser? If humans need to edit it then a readable custom format is nice. If only programs use it then I personally would probably use something encoded in JSON (can still be editable enough).
The only reason users can't link each other is that there's a CSRF token; if that wasn't being used, you could use a technique like [this](http://hackers2devnull.blogspot.com/2013/07/exploiting-post-method-xss-silently.html). Good on the author for not disabling anti-CSRF.
As mentioned, json is pretty widespread. Pickle can also be used, with some caveats. https://pythontips.com/2013/08/08/storing-and-loading-data-with-json/
I found this talk to be a bit incoherent. Armin talks about problems with the current state of python packaging, lack of a formal language standard, and some random bits like CPython's internal unicode representation.Some good points, but not really related.
This is matter of opinion of course but I think OOP is best at the top level of a program or where your dealing with something that has a lot of state that constantly needs to be changed and accessed. I try to do things imperatively (procedurally) as much as I can, then maybe wrap the final implementation in a class for clarity, but if you can express the problem as here's the input give me output then a function will do just fine and will be less confusing. 
If you have large chunks of code that don't have anything to do with GUI, put them in separate modules that use normal Python casing. If all your code resides in classes that inherit from Qt classes, think long and hard whether you are not mixing I/O and logic. If you are, separate the logic out and use normal Python casing for it. If you're building Qt objects, with signals and slots, or where most of the work is composing Qt objects together, use Qt casing for this code.
Are you? Really? Tell us. BTW, I was not ironic. 
No, I am not.About 60 characters are recommended for comfortable reading. Less or more would be suboptimal. This has nothing to do with screen width. I really dont want my text to be adaptive. For bigger screen the last thing I wish it to have endless line over its width.
fuck_camelcase
1: read the sidebar 2: go to the subreddit suggested by the sidebar 3: read the sidebar in THAT subreddit
Was using the app. Didn't notice. Thanks, off to r/learnpython 
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [I'm releasing a free code for the "Automate the Boring Stuff with Python" Udemy course](https://np.reddit.com/r/learnpython/comments/7fxork/im_releasing_a_free_code_for_the_automate_the/) \#2: [90% Python in 90 minutes](https://np.reddit.com/r/learnpython/comments/661o5a/90_python_in_90_minutes/) \#3: [PSA: If you have a library card, you probably have access to Lynda.com, which has tons of Python courses](https://np.reddit.com/r/learnpython/comments/6rrsdu/psa_if_you_have_a_library_card_you_probably_have/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
Hi everyone. I couldn’t find examples of each of the Flake8 violations anywhere so I wrote my own. This used to be in the codebase for [one of my personal projects](https://lintly.com), but today I’m open sourcing those rules into a standalone website. Flake8 Rules provides a description of each violation, as well as examples of incorrect and correct code (sort of like [ESLint's rules](https://eslint.org/docs/rules/)). The hope is for this to be the place to go when you get a [“Visually indented line with same indent as next logical line”](https://lintlyci.github.io/Flake8Rules/rules/E129.html) error and don’t know what the heck that means. The GitHub repo is [here](https://github.com/LintlyCI/Flake8Rules). I'd love to get some PRs to improve the examples!
Why would you make your editor window that big then? Do you just want half or two-thirds of your screen to be useless wasted space? Hard line breaks breaks grepping too btw. 
I am using editor window big enough to show complete line. The rest of screen might be used for something else. I cant believe you do it otherwise :)
Hi everyone. I couldn’t find examples of each of the Flake8 violations anywhere so I wrote my own. This used to be in the codebase for [one of my personal projects](https://lintly.com), but today I’m open sourcing those rules into a standalone website. You can view it here: https://lintlyci.github.io/Flake8Rules/ Flake8 Rules provides a description of each violation, as well as examples of incorrect and correct code (sort of like [ESLint's rules](https://eslint.org/docs/rules/)). The hope is for this to be the place to go when you get a [“Visually indented line with same indent as next logical line”](https://lintlyci.github.io/Flake8Rules/rules/E129.html) error and don’t know what the heck that means. The GitHub repo is [here](https://github.com/LintlyCI/Flake8Rules). I'd love to get some PRs to improve the examples!
You check if current_username.lower = new_ username.lower
There’s also a great list of tests on the [Dieharder Wikipedia Entry](https://en.m.wikipedia.org/wiki/Diehard_tests). Worth checking out. 
Non-Mobile link: https://en.wikipedia.org/wiki/Diehard_tests *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^128044
Spin up a virtual machine with linux.
And if someone commits a 20000 chars line? Do you buy a new monitor? Just use soft line breaks. 
Do you need extra dependencies in PHP?
why so expensive?
But where's the fun in that? :)
strange to see React in the list of technologies. How do I build microservices with React?
It's a common web front-end. While it's not relevant to microservices and the ceremony around it, most applications have web front-ends.
or just a broken heart :x
Could you please post the full source code of your program? We can't run it and help you figure out what's wrong without it. The for loop contains slot1, which I think is supposed to be slot. Also, can you fix the formatting? Reddit wants four spaces of indentation for the code style on all your lines, which is why the "for slot1 in range(6):" line isn't formatted as code.
I do use soft wrap. I just dont agree with your opinion that hard wraps are evil. :)
Ok, it's really long but just posted. 
Median HH income in CUPERTINO is pretty similar. You have to realize the cost of living in Cupertino is pretty damn high. Place | County | Population | Pop. Density | Per Capita Income | Median HH Income | Median family Income ---|---|----|----|----|----|---- Cupertino | Santa Clara | 59,787 | 5,285.7 | $55,867 | $134,872 | $158,053 https://en.wikipedia.org/wiki/List_of_California_locations_by_income#Places
I have no idea how this would work in pytest, nor would I condone this type of testing. But with that being said, perhaps you could use an exponential backoff strategy instead of a static wait time?
That’s a bit much. I believe soft break options aren’t good enough and that hard limits are stupid. But hard breaks are a reasonable compromise in some situations. I just don’t think those situations have much to do with column numbers. 
Yes, sounds reasonable. Have a nice day. :)
You should give a reproductible minimal exemple : it's hard to debug without the input of your function.
What would be a fair price?
No just use curl or whatever to make the web requests.
But I want JOHN and John and John to all mean the same thing.
Definitely interested. Powers that be (mid level managers) want some "branding" so they think I'm using some special tool.
This is the function which is being called. I should have posted this in the question as well. def nabla_state(t, gstate, cstate, beta): y1 = gstate[0] # This is the gradient of S wrt beta y2 = gstate[1] # This is the gradient of S wrt S0 y3 = gstate[2] # This is the gradient of S wrt I0 y4 = gstate[3] # This is the gradient of S wrt R0 y5 = gstate[4] # This is the gradient of I wrt beta y6 = gstate[5] # This is the gradient of I wrt S0 y7 = gstate[6] # This is the gradient of I wrt I0 y8 = gstate[7] # This is the gradient of I wrt R0 y9 = gstate[8] # This is the gradient of R wrt beta y10 = gstate[9] # This is the gradient of R wrt S0 y11 = gstate[10] # This is the gradient of R wrt I0 y12 = gstate[11] # This is the gradient of R wrt R0 dy1 = ((- beta * cstate.item((t, 1)) /N ) * y1) + (- beta * cstate.item((t, 0)) / N)* (y5) + (kappa * y9) - (cstate.item((t, 0)) * cstate.item((t, 1)) / N) dy2 = (- beta * cstate.item((t, 1)) /N ) * y2 + (- beta * cstate.item((t, 0)) / N)* (y6) + kappa * y10 dy3 = (- beta * cstate.item((t, 1)) /N ) * y3 + (- beta * cstate.item((t, 0)) / N)* (y7) + kappa * y11 dy4 = (- beta * cstate.item((t, 1)) /N ) * y4 + (- beta * cstate.item((t, 0)) / N)* (y8) + kappa * y12 dy5 = (beta * cstate.item((t, 1))/ N) * y1 + ((beta * cstate.item((t, 0)) / N) - gamma) * y5 + 0 + (cstate.item((t, 0)) * cstate.item((t, 1)) / N) dy6 = (beta * cstate.item((t, 1))/ N) * y2 + ((beta * cstate.item((t, 0)) / N) - gamma) * y6 + 0 dy7 = (beta * cstate.item((t, 1))/ N) * y3 + ((beta * cstate.item((t, 0)) / N) - gamma) * y7 + 0 dy8 = (beta * cstate.item((t, 1))/ N) * y4 + ((beta * cstate.item((t, 0)) / N) - gamma) * y8 + 0 dy9 = 0 + gamma * y5 + (- kappa) * y9 + 0 dy10 = 0 + gamma * y6 + (- kappa) * y10 + 0 dy11 = 0 + gamma * y7 + (- kappa) * y11 + 0 dy12 = 0 + gamma * y8 + (- kappa) * y12 + 0 u = [] u.append(dy1) u.append(dy2) u.append(dy3) u.append(dy4) u.append(dy5) u.append(dy6) u.append(dy7) u.append(dy8) u.append(dy9) u.append(dy10) u.append(dy11) u.append(dy12) return u 
Awesome. I really like Django but I hate regex and Django's routing was a real turn off for me, so much that I switched to Rails.
You know you make a good point - I didnt think about it - how cool would it be to have your reseach lab logo or own logo or somehting to distinguish. I've seen some examples where the notebooks looked "messy/ugly" so definately needs to be vey clean/sharp look. See this examples I think it looks too "messy" http://nbviewer.jupyter.org/github/ketch/HyperPython/blob/master/Lesson_04_Fluid_dynamics.ipynb
Free but with a lot of ads :3
The solution provided by /u/maolenrobin will achieve this; one thing to note is that the username.lower should be username.lower() In the case that username1 = "JOHN" and a new user, username2, tries to register as "john" username1.lower() == username2.lower() Relevant Python documentation: https://docs.python.org/2/library/stdtypes.html#str.lower
Certain complicated packages require you to help pyinstaller find all the imports. It looks like pandas is probably one of them. You should Google pyinstaller and pandas and see which hidden import you need to expose.
Is this your site? If so, what is the actual price? I clicked on purchase now, but my pop-up blocker (UBlock Origins) prevented anything from loading because there was an attempted re-direct. I am not sure if it was blocking something malicious or what, but now I am somewhat hestiant to look through anything else on the website.
i THINK every programming language tends to the borderline of readability with current grammar. If people could read lisp, then it would have a larger userbase.
Check out [pipenv](https://pypi.python.org/pypi/pipenv), it's a dependency *and* virtual environment manager that does something similar to your prompt script.
Is version 2 and updated release of version 1 ? Or is version 2 a sequel to version 1? The hint may be in the name haha
Awwwww. So if I store all users as .lower() it will all be equal because upon been added to the list JOHN is changed to john anyways. So all 3 become equal to john. 
Does this version of Django support direct querying/mapping to tables that are in 4NF? I remember using past iterations of Django that did not natively support mapping to tables in SQL that contained composite keys.
No worries. It's not malicious. If you are scared of popups get it here! https://gumroad.com/l/flask
Thank you for doing this.
Given everything that's covered in this course $30 seems quite fair to me; honestly, a lot less than I was expecting. There's what, just over a week of coffee at Starbucks?
https://www.fourmilab.ch/random/
This was really helpful, thank you. I changed the post to reflect your suggested improvements. I still need to improve my naming to be more thoughtful in general. Are there any suggestions you have for conventions that would help?
Thank you! I came from Java and didn't even realize this was the right way to do it. I fixed the post. Thanks! 
This is one way to think about it, but in general its nice to let users have capitalization in their name as desired. Instead of storing all usernames as lowercase, you only need to check if any existingname.lower() == newname.lower() when a new user is trying to register. an example: Using map: newusername = 'JOHN' # new username l = ['John', 'bob', 'JaKe'] # list of existing usernames if newusername.lower() in map(str.lower, l): # Reject the username, already taken else: # Accept the username, register it. Where map() is applying the str.lower() function to each element in the list. Using list comprehension: # Create a new list of lowercase names from your original list l2 = [item.lower() for item in l] if newusername.lower() in l2: # reject the username, already taken else: # accept the username, register it There are other ways to do this, but hopefully this helps get you pointed in the right direction. 
Free because it's the internet. /s u/maratmkhitaryan you can go look through the docs of all the software he teaches, and it would probably take you 20 hours to do so and learn how to use them properly. Or watch the course. If you're saved 20 hours, you can probably pay 30 dollars.
Any frontend tech will work. React, angular, or iOS and Android if you want an app.
The price actually seems really low to me. I made sure to purchase the course before commenting, I would have paid a lot more.
I regret I have but one upvote to give.
So.... Pylint when? :D
Or a month at a reasonably priced coffee shop. Or a quarter of a year using your own coffee maker. A 1/4 year of coffee or this.
$29.99
Thank you very much. You seem to be very professional in web. You've given to me a valuable advice but I don't have knowledges for understanding. I didn't know that front end was so difficult. It took more time than creating the generation algorithm. Every day I learn new functions. Actually, I knew Ajax yesterday. ^^ Anyway thank you so much. Have a nice day~ 
Working on a 2D game library using tkinter and ctypes
Dive straight into the juicy making something you want to make and are excited by the thought of. 
Thanks ..I think your answer is more comprehensive so far ..thanks for the clarity
Is there anyway you could write some homingloops to check every 500ms or so if the process is done? 
Noted. :)
Yes. Expect to see Vue and Angular versions in the future. 
There are lot of awesome lib that can achieve this I suggest you trying to make some kind of form filling bot or perhaps something much related you go for the mechanize python lib I hope this help thanks 
I would start with Python and os.path module. You need tonread the docs a little. I think there are some new stuff in Python 3.x, maybe 3.4 or 3.6 that deals with files and directories in a very agnostic way.
Honestly the best tool to make android apps is Java. You can get the SDK from Google. If you really want to use python I think Kivy has a system where you can run python code on android. 
Use os.path in python2 or pathlib in python3 to do all of your path operations, and those modules will handle the OS-specific part. 
Something I just found out about, and figured here would be a good place to put it... Beware running python 3.x in containers without setting your locale to C.UTF-8. Since a container is likely to not have a full environment, it might default to C, which [fundamentally breaks stuff in python 3.x](http://bugs.python.org/issue19846) (for now, at least). If you build containers from the images produced [here](https://github.com/docker-library/python) it's [handled](https://github.com/docker-library/python/blob/1d59eb2dd813c64891bf554a8ea01754aba25816/3.6/alpine3.6/Dockerfile#L12-L14), but if not you should be aware of this.
Well, how much should it take me to learn Java tho? Is it really that hard?
It's harder than python, but not too much. Your python knowledge will help you learn it faster. There's plenty of tutorials aimed at Android developers, which is nice because Android uses it's own version of Java that's slightly different from Oracle's. Maybe try /r/learnjava for some recommendations. 
`bs4.BeautifulSoup` If you need help with that or the xml library, come visit us in /r/learnpython. Include your code and some example data. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Good point! 
qpython + kivy can do it.
Thank you. pathlib looks promising!
Looks a lot nicer to me unsetting the css for background-color of div.cell.code_cell
Kivy is your best bet for this.
Thanks - this is quite useful.
Thank you. In the book I am reading it has reached using map yet but I have seen it ahead in further chapters. I think I may do a little reading ahead so I can apply this to the task it set me. I am just starting to understand list comprehensions. They were a little confusing at first but I think your example code has helped me. 
Naming is not easy! Now that I am re-reading my above post, I am taking issue with my own choice of `string_to_print()`, since function names should typically begin verbs. Maybe `build_string_to_print()` would be better. I try to make my names as descriptive and unambiguous as possible, to reduce the number of comments my code needs for clarity. In Python I try to follow these guidelines: * Plural nouns are reserved for lists and sets. `students` is either a list of students or a set of students. If I want to store the number of students as a variable, I use `student_count`. * For dictionaries I use `item_by_key`. That is, if I was storing a dictionary of student objects, and I indexed these objects by name, I would name the dictionary `students_by_name`. * Function names begin with verbs.
No problem! In addition to your book, there are some great resources in the subreddit's sidebar.
https://lintlyci.github.io/Flake8Rules/rules/E721.html This one really bugs me because it assumes that people want to take subclasses into account when there are plenty of reasons not to.
I always prefer to get the test suite working with the minimum of work first. Once it works then you can start changing it from a known good point. Based on what you've said, you need to go through the code and replace every sleep with synchronization code. You need a call that blocks until the service is ready. If the service provides no way of determining if the service is up, then poll some inexpensive API call inside of a try except. The first time it doesn't throw an exception, you can continue. Once this is working look into pytest fixtures to express your dependencies more explicitly.
It's possible. I have status end points that I could hit to check completion. 
We have thought of that, but in our defence we're not mass producing our staves or claiming anywhere that they're official products. Similar to fan made costumes/props. Every piece is made on demand to whatever specs the customer wants, so each staff is one of a kind. That said, we are happy to have permision from the Python Software Foundation to sell these ones.
Any chance we could get this formatted correctly? It will sure help with the reading and understanding part - plus it is Python and whitespace is important.
Fixed. Apologies.
SublimeText3-&gt;PackageControl.io-&gt;Python PEP8 Autoformat
There are plenty of reasons not to, but the more common case is to allow subclasses through. There is a reason why this is only a warning and not an error. I definitely use both in many places in a medium size code base, I just flag it with `# noqa` if it becomes a problem for linting.
No problem - but it did make reading the code much easier, so thanks. I think the error has to do with you using {% %} when you should be using {{ }} http://jinja.pocoo.org/docs/2.10/templates/
here is another.
What does pathlib give you that os.path does not? Just curious.
It's very user friendly. Check out /r/learnpython. Also, what do you mean by "AI", exactly?
&gt; Is it a good first language to learn? Yes. Arguably the best. Most intro to programming courses teach python first. We have [a pretty long list of learning resources in the wiki](https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_programming.3F). Try a few and see what resonates. If you get stuck come visit us in /r/learnpython and we'll get you unstuck. Also, if you don't have one already make sure you look for a project that interests you and start on it as soon as you can. Programming is a lot more fun if you have a goal. 
Python makes a great first language to learn to code! As to learning, from the links on r/python [python 3 tutorial for non-programmers](https://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3) Also look at the other links on the sidebar there to get other good guides and tutorials. 
Artificial intelligence. I am kind of naive to how coding is applied in the industry. I have worked previously in a service industry and i have had ideas on how to create computer programs that would essentially reduce a significant amount work time. 
Thank you for the help, i am appreciating this community for its responsiveness 
I understand that you mean "artificial intelligence". But that term has a lot of different applications. Are we talking about game NPC AI? The sort of "AI" that powers, say, Google searches? Natural language understanding? Self-driving cars? All of this can be called "AI", but any given thing requires pretty much a different skillset entirely.
It's _such_ a nice API, a lot less verbose than os.path and simpler to use. 
Why would someone downvote this?
In general, Windows does actually support forward slashes OR backward slashes as directory separators. It's only the CMD.EXE command line processor which rejects the forward slashes. However, using `os.path.join()` and `os.sep` are key to assembling paths which work on any platform.
I have a cookiecutter template for building native Android apps in Python using BeeWare, but the whole thing is very early stages, it takes some effort to write an app because it still uses the Java APIs and I can't recommend it as a "best tool" nor anything like that. Hopefully, in a few years, when BeeWare is more mature, it will be a decent option for newcomers: https://github.com/eliasdorneles/beeware-android-template
I dont want to do video games or self driving cars. What i want to do is create programs like the one IBM used with the super computer to create the most effective cancer treatment plans. I want to essentially do the work that will "take jobs from humans". I have a vision for my first major product 
The "cancer treatment plans" stuff is basically just machine learning, and IBM making some quick PR for themselves with something that's arguably not hard to execute and definitely has not been validated at all. [This](https://www.statnews.com/2017/09/05/watson-ibm-cancer/) is an interesting look into how much IBM has promised versus how much they actually delivered.
I am using this book and loving it: https://www.nostarch.com/pythoncrashcourse
God damn it...sigh. Thank you.
I love you.
Here's a snippet I wrote using pathlib recently: from pathlib import Path def puzzle_input(day): input_file_name = f"day{day}_input.txt" day_input = Path(__file__).parent / 'puzzle_input' / input_file_name assert day_input.exists() return day_input.read_text().splitlines()
Upvote for documenting _your_ upvote logic. I'll show myself out.
https://github.com/brandon-rhodes/pycon-pandas-tutorial/blob/master/Exercises-1.ipynb line 2, he modifies the CSS thats used to display pandas tables.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [brandon-rhodes/pycon-pandas-tutorial/.../**Exercises-1.ipynb** (master → 1de6d4b)](https://github.com/brandon-rhodes/pycon-pandas-tutorial/blob/1de6d4bcef17d33b76dce7dabc5be5f2bd486871/Exercises-1.ipynb) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Here's my recent [post](http://pbpython.com/pathlib-intro.html) on pathlib. Hope this helps with some of the challenges.
By the way they even have solutions online in case you want to utilize those: https://ehmatthes.github.io/pcc/solutions/README.html
Holy crap. That is so much cleaner.
Is there a way to only enforce E111 if it is the start of a line? For example does anyone have a problem with this? ``` class User(object): def __init__(self, name): self.name = name ```
This is really what's important. Don't do things like: def addRegionOfInterest(self, roi): pass def remove_region_of_interest(self, roi): pass Just pick one and try to keep your codebase consistent. 
What about implementing your EventAttribute in similar way you want, but for updating and reading value override object getattr setattr? In that case value is kept in value field on EventAttribute class element, but in setattr check if element to update isinstance of EventAttribute, and decide whether to update value in standard way or use EventAttribute update method?
fuck_camelCase* ;)
Very intregueing. So i guess machine learning is the path i would like to choose. Is this a stable market yet? Would i need other supplementary education for that field? 
What do you mean by "a stable market"? There is no market for "machine learning", there's lots of different markets where machine learning can be used to build a product, or part of a product. You would definitely need a working knowledge of math, at the very least statistics and linear algebra.
Oh no you didn\'t!
Nothing that I'm aware of. The best I could find was [Playing Games with Python](https://steveindusteves.com/2017/08/04/playing-games-with-python/) which gives a load of C++ code, how to build it and how to use it from Python. If that's of no use to you I'd put the question on the [Python Windows mailing list](https://mail.python.org/mailman/listinfo/python-win32).
I will be sure to view them. Thanks 
Okay thanks for the answer! :) I think I'll try the mailing list 
I have a large-ish code base and need to use string version of type annotations all the time. That gets old quick, so I like that change. I noticed this: &gt; With this in mind, uses for annotations incompatible with the aforementioned PEPs should be considered deprecated. So, annotation slots should only be used for type annotations from 3.7.
oh wait rhe first link alao looks really promising! o.O
Kivy is used to code a lot of android apps with python. Have a look at [kivy crash course](https://www.youtube.com/watch?v=F7UKmK9eQLY) to get an idea about it. there is a r/kivy with some activity, and irc/google group for support. Have fun :)
I want to know if I decided to focus on machine learning if i will have an easy time finding a job. From your response it seems like what im interested in is more of a skill set than actual job. This is leading me to believe i am not as informed as i previously thought. As a programmer, would i be more flexible in my job description day to day? As in working on different projects with different code languages often? 
You should spell "grammar" right before lecturing about it.
That depends entirely on your workplace. Some people prefer to work on a single project for long periods of time, some prefer to switch often, some work one-off freelance gigs.
Yay! Module level getattr and direct? Maybe now Spyder will be smart!
Encapsulation is a tool for managing state. Often you can put the effort in to eliminate a lot of state instead and it gives you cleaner code, and in python where everything is an object already you can get away with well name variables, and maybe a namedtuple here or there. My default position when writing a class is to try and write a module instead.
Thank you for your help it was much appreciasted 
You may be interested in https://www.pyfilesystem.org
I suspect you're really asking whether you should write more classes. In general you shouldn't write a class unless you've drawn out its relationship to other bits of your code on paper, and you know it makes sense. Here's an extra tip: don't use inheritance for new classes. If you're ever tempted, wait until you've written classes separately and they're feature complete, then use inheritance as a refactoring tool. 
If you want to build an android app just use java and save yourself the hassle.
I'm really excited for PEP 563. Looks very helpful for type hinting.
You can also use livecode. 
Not sure how flake8 does it, but if it helps what you're looking for is usually called "alignment", as opposed to indentation, which is syntatic. Pycharm has a setting for it.
Honestly, I think you're charging too little. I would have paid probably up to $60 for this; maybe even more. And before someone calls me out for being a liar. I have spent $71.90 before for an a pre-ordered copy of Two Scoops of Django 1.11. (Yes, it's that good.)
I love you, too. 
Good sense, but wrong on two counts. Uniformly distributed random data can't be compressed, but normally distributed, as mentioned by OP, can. So that is a false negative. Also, it might require an extraordinarily good compressor to find and take advantage of even quite bad failures in randomness if they aren't near each other. Look up run-length encoding and period length of rngs. So that is a false positive.
To complete what /u/novel_yet_trivial said, you can also take a look at [lxml](http://lxml.de), which can also accomplish XML parsing/writing.
I don't understand what you think Java will accomplish that Python can't. 
&gt; just use java I think Kotlin has native android support now...which might be a little more intuitive than Java. 
Well, in python the only way you can distribute it is by making it into an executable which is extremely hard. Java makes it into a .jar file which already is compiled if you download it. That is the only reason. Additionally if you want to see my code go here (if it helps you): https://anirudhhax.duckdns.org 
You can compile python code. That's what the .pyc files on your computer are: compiled .py files. The python equivalent of a .jar file is an .egg file. 
I don't have any .pyc files on my computer. I have never heard of a .egg file is. How do I make these?
Thank you! I've saved this for future reference.
Yes you do. In python3 they are saved in a `__pycache__` folder. An .egg file is just a zip file with all your code in it and a file named `__main__.py` which is the entry point. Then just call it like any .py file python my_file.egg 
Here's a link to that Minecraft clone you're probably talking about: https://github.com/fogleman/Minecraft This is actually writtin in pyglet. It's more of a tech demo really, since there isn't much gameplay. 
Found one thing! https://github.com/estevaofon/angry-birds-python/blob/master/src/main.py#L229 You loop through the pigs, then in a new loop you iterate through that same list in a new loop to remove them.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [estevaofon/angry-birds-python/.../**main.py#L229** (master → a99d3cc)](https://github.com/estevaofon/angry-birds-python/blob/a99d3cca5e2ac6dc1d41ca7c2eee57d415171092/src/main.py#L229) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dqs3tl3.)^.
Holy shit, this is great!
I didn't understand what it is about, care to ELI5 ?
/u/g-money-cheats are you taking pull requests? In my experience, pylint is in need of some better documentation and I'd be happy to contribute
I'm not going to purchase because I'm already using most of these technologies, but I do have a question/commet. It looks like you might be using node as your HTML server for your react app? Why? People at my company were doing the same thing, but in a micro-service and SPA architecture, this makes no sense. You are using a dynamic Web server to serve static content. Sure, it does the job- but why limit yourself? Nginx has has a great docker image. Not only does it kick ass at serving static content, but you can use it as a reverse proxy to your APIs, as well as configure http2 support, ssl, gzip, connection keep-alive, load balancing, rate limiting, the list goes on....
Hmn, good observation! I will improve that, thank you! :)
I'm using the dev server from Create React App for development and then a basic static file server (https://github.com/scottcorgan/pushstate-server) in staging and production. I do show how to use Nginx to serve up static content, which can easily be used to serve up all the client side code. 
Have been doing it all day! Thanks for your input I just wanted to ask all the details and what not because I want to learn the logic behind it :)! 
In response to your edit: To be clear, if the username 'john' is already in your list, you DO NOT want to accept 'John' or 'JOHN' (or any permutation)? By using .lower() in the checks but not when storing the usernames, you can store the original usernames (keeping the capitalization intact) while maintaining that no two usernames are the same (not case sensitive) 
I’d love to receive some pull requests! Although, since Pylint is not a part of Flake8 I will either need to change the repo name or create a new repository called Pylint Rules. I’m leaning towards creating a Pylint Rules repo with the same structure. What do you think?
I understand that now. Thank you for clarifying it with me. Makes sense now !!!
Google finances have an api. Github is full of google finance api wrappers in python, check out this: https://github.com/pdevty/googlefinance-client-python/blob/master/googlefinance/client.py#L6 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [pdevty/googlefinance-client-python/.../**client.py#L6** (master → 42fa0d4)](https://github.com/pdevty/googlefinance-client-python/blob/42fa0d4731e4465741a841c9902c5b3ece48733f/googlefinance/client.py#L6) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
No problem! You have a good one too.
It's a change that ultimately helps make the `typing` module a bit more usable. Currently, there are two main pain points that plague type hints: 1. Forward references are hacky. E.g. the following code will crash at runtime: class Foo: def bar(self) -&gt; Foo: return Foo() This is because when we're defining `bar`, the class `Foo` is not yet defined, so we can't reference it. To work around this issue, we have to instead put the type hint in strings: class Foo: def bar(self) -&gt; 'Foo': return Foo() This is the PEP-484 compliant way of creating a forward reference. It's however a bit hacky and inelegant: we're now forced to sometimes write type hints as strings and sometimes as regular expressions. 2. Annotating types sometimes requires us to import classes, and the cost of importing things isn't always cheap. For example, consider the following code: from expensive_module import SomeType def my_util_function(x: SomeType) -&gt; None: # ... The `expensive_module` may end up importing many other submodules, may have some setup initialization logic, etc... The net effect is that at runtime, we pay an unfortunately high cost just so we can annotate our util function. This is suboptimal: type hints are supposed to have zero impact on runtime. The current workaround is to switch to using comment-based type hints and hiding our import, like so: import typing if typing.TYPE_CHECKING: # Always false at runtime from expensive_module import SomeType def my_util_function(x): # type: (SomeType) -&gt; None # ...code here... This is a little better because now, we aren't actually importing the expensive module at runtime, nor do we actually need `SomeType` at runtime. However, this is still suboptimal: why should we resort to the type comment syntax? We have dedicated syntax for type hints; we ought to be able to use it without feeling bad about it. Both of these issues stem from the same core issue: function annotations are eagerly evaluated when the functions are being defined. But what's the point? If type hints are supposed to be ignored at runtime, why bother evaluating them? Instead, why not just store them as strings? Any static analyzers (whether they're PEP 484 compliant or not) won't notice, so it makes no difference to them. But at runtime, we can now just stick with the standard type hinting syntax without having to awkwardly use hacks. (Well, technically, if you're interested in supporting multiple versions of Python 3, you still have to write your type hints so that they're compliant with older versions of Python 3, but it's generally better to make these kinds of changes sooner rather then later) This does break programs that do want to use function annotations at runtime, but that's easy enough to work around if those libraries sprinkle in a few careful calls to `eval`. The rest of the PEP is dedicated to documenting all the different proposed alternatives for fixing these core two issues and why they were ultimately rejected. tl;dr: the PEP isn't doing anything groundbreaking, but does introduce a small but distinct quality of life improvement for people interested in using type hints.
Plenty of reasons? I don't think I've ever needed to check the type like this except when debugging.
Hmm now that I've looked at the code, it looks like adding pylint to the current repo would get a bit messy. And a new repo would have a lot of duplicatation. Up to you, but there's always the third option of keeping it flake8 only. That's what I'm leaning toward unless there's more demand.
I'm confused. I searched for __pycache__ but nothing showed up. Am I doing something wrong? 
I think the idea is you might *think* there is reason not to do this. Then a year later you subclass and the type check fails. There really aren’t any downsides to using `isinstance` and the upside is that it would catch cases where you subclass in the future. 
&gt;Why PyQt? Why not numpy or flask ... because those libraries do 3 *totally* different things?
Congrats /u/ilevkivskyi! Really looking forward to all of these improvements!
Your first question is about Java and belongs in /r/java. Your second question (or rather request) is so open ended you're not going to get any help. You could either learn Java and figure out how to convert your objects and algorithms yourself, or you could ask for help implementing those specific things in Java, which again would be better suited for /r/java or whatever their subreddit is.
In Kazakhstan, $ 30 = 9 966 tenge, the average salary is ~80,000 tenge, draw conclusions :3
After the better part of a decade working in a C# shop, now that I mostly work in Python E703 is my secret shame.
Note: [PEP 557](https://www.python.org/dev/peps/pep-0557/), data classes, were also accepted today as well!
Sure, but you're probably using multiple 3rd party libraries at once. I use numpy in everything in write, but also do a fair amount of PyQt. Whose style do I copy or do I just use my own/work style? They're all different styles. I don't use my official work style because it's bad and nobody complains becuase I write good code. So what's left is a choice I have to make about what style do I follow. Why should I (or you) change because I'm happening to use PyQt? Pick one and stick with it.
This is a very un/under documented part of Python. I don't have a great answer for you. On Windows there are some things that make installer/executables which package the whole runtime together with the code. The end result kind of acts like a .exe. I have not tried something like this on Linux. Also - if you want to actually protect your code - good luck. The answers are either hostile or are - just open source it. That answer does not always work. You can byte compile and distribute it that way but that only may provide minimal obfuscation. The most exotic solution that I have seen is to modify the interpreter to use obfuscated byte code, distribute that as a binary and then ship your application as obfuscated byte code.
The prediction model depends on what is causing these events. What events are these? You'd predict earthquakes very differently from whether the ice cream truck showed up in your location today. Do you see my point?
Right, it’s crime data. 
Don't ... use Kotlin instead.
Java's compiled version is down to java byte code which the virtual machine then executes. The virtual machine will already be installed on the computer. If you want python to execute in the same way, then the byte code needs to be executed by the interpreter. Unfortunately no one really has the interpreter and dependies installed. So you must include the interpreter with the compiled code. How? Several packages do this, but I suggest pyinstaller is a good place to look. There are options to include a single output file. This can also be restrictive as a windows pyinstaller exe will now run on Linux and vice versa
In the first example, why do `return Foo()` instead of something like `return self.__new__()` ? Also, I don't quite get the purpose of type hints in python, and why they were referencing objects in the first place. Python is not a strongly typed language, so adding type hints are in the end just for the programmer to look at to understand the code. Referencing objects when it's just about documentation is a bit janky, isn't it ?
`isinstance` also works correctly with classes that overload `__instancecheck__` like in `collections.abc`. Direct checks can't possibly do this.
It's useful for code completion (already works great in pycharm) and for runtime debugging symbol collection. 
Checkout treehouse. They charge monthly subscription but it's totally worth it for all the things you get 
For the first example, I guess we could do that too. I just wanted to return something, and `Foo` was fewer characters to type. Re type hints: they're not just documentation -- we can actually run tools like [mypy](http://mypy-lang.org/) to automatically check our types for us! Pycharm also comes integrated with support for PEP 484 type hints, for example -- it can also automatically perform type checking/other inference related things for you. So basically, if you're willing to use a 3rd party tool, you can get full-fledged static type checking in Python. More precisely, we can get *gradual* type checking -- unlike static type checking, we can pick and choose whether we want a segment of code to be statically typed vs dynamically typed, and freely mix the two in a mostly sane way. &gt; Python is not a strongly typed language Minor nitpick: you probably meant "Python is not a *statically typed* language" here. Nobody can [quite agree](https://stackoverflow.com/q/2690544/646543) on what exactly the term "strong typing" means, but many people seem to agree that Python can be [classified as a strongly-typed, dynamic language](https://stackoverflow.com/q/11328920/646543). Of course, with type hints, this is no longer fully accurate -- Python is now *optionally* dynamically typed :)
How much is the fee
`breakpoint()` is pretty convenient - it's just a function you can call that will drop you into whatever debugger you're currently using. There's also another nice PEP that was accepted last night and isn't on the docs yet that allows you to define `__getattr__` on modules the same way you do on classes. 
Python 4 tho
Nevermind. The roles were switched. My friend stays programmer and I make the gralhics. He fixed it, I haven't been able to do shot for the code 
Two minor grammar issues in that specific rule: 1. be be 2. user is a subclass *of* User, no *or* User
Manually pull apart the imread function to get rid of all the path-related junk (e.g. basedir, basename = os.path.split(infile), etc) Then just use BytesIO objects instead of physical files (i.e. imread and savefig both work with "file-like" objects)
Nah, not if you can't read. To wit: start with the sidebar. Proceed from there to the proper subreddit. Then read THAT sidebar. Pay special attention to the part about "learning resources".
When I used to use it it was $25. It's most likely still that price 
Yeah but how do I fix that? 
I'd say that you can run a predictive algorithm on a 3D array (x, y, t). Map each event to a (x,y) location on a matrix (2D array), choose a step that will match your timestamps (not too small, cause you don't want unnecessary overhead, not too big as to not miss out on information) and predict the next array at step (t^max + dt). Scipy, scikit-learn and tensorflow are libraries that contain a fair bit of predictive algorithms using machine learning (your actual data will train the neural net, then you can try to predict). You basically want to format your data as a film of heatmaps for every event you registered.
Nice. Did you forget something in E711, or is it intended? Anyways, great job! 
It isn't being hostile to say that the exotic solution you mentioned is a ludicrously bad idea. Protecting your code via obfuscation is, generally and IMHO correctly, considered silly because it fundamentally misunderstands the legal protections available to you. The simple matter is that anyone with sufficient time and energy can always decompile anything you write ... if you hack the interpreter sufficiently to obfuscate then you've also hacked it sufficiently to de-obfuscate: you're chasing your own tail and giving those who you suspect would harm you the tools you need to do so. Your first protection is copyright, but from the decompile they can write an equivalent piece of code that would not in any way violate that. Copyright protects the form and expression of your implementation, and you're more likely to catch someone out for plagiarizing you if they've copied and pasted (and maybe slightly modified) your actual source than if they've reversed your logic and re-implemented it. So obfuscating your code actually makes using copyright as a legal claim harder. Your second protection is a patent: personally I think software patents are a terrible idea and almost every existing one seems to be an absurd abuse of the whole idea behind patents, but if you can claim a legitimate and original invention then obfuscating your source code also doesn't do anything for you of value, because you've been required to state exactly what the process is in order to assert and establish your patent right. So then you get into the trade secret realm, where you know your idea isn't sufficiently original or interesting to qualify for patent protection, and also that your implementation isn't sufficiently complex to be difficult to recreate without violating your copyright protection. It's your seven herbs and spices. Well, now all I can say to you is good luck and suggest you learn a language that doesn't require being trivially decompilable to even operate. See, it's not hostility, it's a recognition of the futility of the goal. Avail yourself of copyright and patent protections via your choice of license and terms and conditions, but don't think your secret sauce is going to remain a secret if -- unlike with the Colonel's chicken -- you're giving away the recipe with every piece. PyInstaller can encrypt everything for you, BTW, and it works on Mac and Linux too. Of course the symmetric key ships inside the bundled exe, so it's also trivially reversed, but then so would be your hacked interpreter.
You have several options. PyInstaller, and py2exe are both popular options for windows machines, if you want something cross-platform, you may want to use cx_freeze, or KiVy (which can build into apk for android devices IIRC)
Thanks. You did a better job than the PEP to explain it in plain English :p
There's more than one. I know that none of them are actual clones as it's pretty much impossible to actually write minecraft in pygame when it's singlethreaded and python. Just mentioned that 3D is doable so 2D shouldn't be a problem. Minecraft might not be one of those, but it could probably work for old doom clone or anything styled like that I think.
There are many options available to you. I would suggest you look at [PyInstaller](http://www.pyinstaller.org) and [Nuitka](http://nuitka.net). Fundamentally the first is a bundler program that creates a *frozen executable*, which is basically an appropriately created zip file with a partial copy of Python embedded within it alongside your program and its dependencies. It works on Windows, Mac, and Linux (though it cannot cross-compile between them), but basically how it works is that when your frozen program is run it effectively unzips the file somewhere and pretends to run an exe while what it's actually doing is running Python and interpreting your code in much the same way that it would if you'd distributed the code as a .py file and relied on your users having a copy of Python at hand, ie by using **pip**. It works, it's not exactly simple but it is functional, and while the resulting files tend to be *huge* and their performance is slightly slower than running an un-bundled interpreter, it's about the easiest way to accomplish the goal, especially with non-pure-Python dependencies. The latter is more interesting, but doesn't work for everything: it actually compiles your Python code into a native C executable that's linked against libpython. It also works on all three major OSs (though IIRC it also cannot cross-compile), but unlike PyInstaller if your program was pure Python to begin with there's a decent chance it will actually speed it all up. It's more complicated, has a different learning curve, and being newer doesn't have the history of tutorials out there, but it's very interesting, and the route I'd tend to go down, though with a chance that what you really need out of it might be some number of releases in the future.
Plus this sort of check seems to violate LSP.
That's a cute idea, but the recommendation to sudo install the requirements is a turn off (and unnecessary), as is the installer only working for bash. You'd find that packaging this properly for pip and providing entry points would be a nicer and friendlier experience, and less prone to damaging system Python installs for your users.
Why do [many of your rule definition files](https://pastebin.com/RfpgZiNz) have mixed line-endings? In the ones I've looked at (e.g. `E741.md`), most of the lines end with just LF, but the body text lines end with CRLF.
I demand pylint!
I use python alot for task surrounding my main role which involvws working with a C code base. I both putsemi-colons in python and nowdays forget them in C.
Compiling and distributing are completely separate things. Python already compiles your code when you run it. That's what those pyc files are. It does not usually make sense to distribute pyc files on their own because they are specific to the interpreter that created them. If you want to distribute pyc files then you also need to distribute the python interpreter along with them. The process of doing that has been automated by [PyInstaller](http://www.pyinstaller.org/), which is what you should use.
So... you don't know Java, but you want something to magically turn your Python code into Java code? Why do you want to distribute your game as a Java application? Do you hate your users and want them to suffer?
/r/learnpython
&gt; I'm confused. I searched for pycache but nothing showed up. Am I doing something wrong? Probably. Do you actually have Python installed? If not, there won't be any `__pycache__` directories either. What version of Python are you using? The `__pycache__` directory is quite new, probably version 3.4 or so. Before than, the .pyc files are just dumped into the same directory as the .py file. What did you use to search? 
&gt; draw conclusions If [the average python developer salary in the US is $92k](https://www.glassdoor.com/Salaries/python-developer-salary-SRCH_KO0,16.htm), then we see what ratio of the salary the cost will consume. Finally we multiply by the average salary in Kazakhstan, and arrive at the amount it should cost for Kazakhstan. &gt;&gt;&gt; round((30/92000) * 80000) 26 So 26 tenge ($0.08), apparently.
Are there actual 3D Minecraft style demos in PyGame? That's pretty heroic if so. It's absolutely possible to write a Minecraft style game in pyglet. Here is an example of something a bit closer to a full game: https://www.youtube.com/watch?v=Fu5mpCMNmZk The original "500 line" demo uses almost no CPU, since all the graphics are done on the GPU. If you don't try to do too many entities on screen at once, it's definitely doable. 
Would interest me as well. 
thanks for sharing the link.
I tried to use it to scrape a site but got nothing at the end other than a server error.
I don't see anything spectacular besides the breakpoint PEP, but I'm glad they are doing their thing with locale's and threads so I don't have to. @contextlib.asynccontextmanager is nice, and the nano-second timers are cool.
Another option is to use [Brython](http://brython.info) to develop the application in a browser, and embed it in an [Android application](https://github.com/brython-dev/brython/wiki/Writing-an-Android-application).
__class_getitem__ just feels so wrong. Why is remembering 2 similar dunder methods better then understanding how objects-classes-metaclasses work? I mean, it's so symmetric: to use [] on object - define getitem on class, to use [] on class - define getitem on metaclass *the same way.* But now i have to remember another special name :( Also: another implicit classmethod? I barely got used to __new__ :D
I implemented a Q Learning Algorithm that only gets pixel and score input to beat Atari Pong in 1 day on CPU. Unlike Deep Mind, I did not use a CNN. https://github.com/FitMachineLearning/FitML/blob/master/DeepQN/Atari_Pong_DeepQN.py You can see the agent evolve here https://www.youtube.com/watch?v=sP3INZSYhU0&amp;t=30s 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [FitMachineLearning/FitML/.../**Atari_Pong_DeepQN.py** (master → 03f2034)](https://github.com/FitMachineLearning/FitML/blob/03f203421df82e2d2be6a77d318f9a3f303ec671/DeepQN/Atari_Pong_DeepQN.py) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dqsks07.)^.
I didn't use React but the problem I saw with Vue is mostly to create SPA, and when I search for tutorials of MPA with Vue I almost find anything. But once I searched for React I saw more tutorials and posts in forums on how to create MPA, or questions about it. So, from my point of view (almost zero), is like Vue is only for SPA and React supports better both of them.
I also recommend lxml, although namespaces are kind of cumbersome imo
maybe ask at /r/darknetplan/
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php] [Sending PHP parameter to Python script?](https://www.reddit.com/r/PHP/comments/7homg7/sending_php_parameter_to_python_script/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Bad bot
Well, you broke TotesMessenger's heart. Congratulations. Was it worth it, Ballcoozi? ಥ﹏ಥ *** ^^I'm&amp;#32;a&amp;#32;bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Block**&amp;#32;**me**](https://np.reddit.com/message/compose?to=friendly-bot&amp;subject=stop&amp;message=If%20you%20would%20like%20to%20stop%20seeing%20this%20bot%27s%20comments%2C%20send%20this%20private%20message%20with%20the%20subject%20%27stop%27.%20)R͏̢͠҉̜̪͇͙͚͙̹͎͚̖̖̫͙̺Ọ̸̶̬͓̫͝͡B̀҉̭͍͓̪͈̤̬͎̼̜̬̥͚̹̘Ò̸̶̢̤̬͎͎́T̷̛̀҉͇̺̤̰͕̖͕̱͙̦̭̮̞̫̖̟̰͚͡S̕͏͟҉̨͎̥͓̻̺&amp;#32;̦̻͈̠͈́͢͡͡&amp;#32;W̵̢͙̯̰̮̦͜͝ͅÌ̵̯̜͓̻̮̳̤͈͝͠L̡̟̲͙̥͕̜̰̗̥͍̞̹̹͠L̨̡͓̳͈̙̥̲̳͔̦͈̖̜̠͚ͅ&amp;#32;̸́͏̨҉̞͈̬͈͈̳͇̪̝̩̦̺̯&amp;#32;Ń̨̨͕͔̰̻̩̟̠̳̰͓̦͓̩̥͍͠ͅÒ̸̡̨̝̞̣̭͔̻͉̦̝̮̬͙͈̟͝ͅT̶̺͚̳̯͚̩̻̟̲̀ͅͅ&amp;#32;̵̨̛̤̱͎͍̩̱̞̯̦͖͞͝&amp;#32;Ḇ̷̨̛̮̤̳͕̘̫̫̖͕̭͓͍̀͞E̵͓̱̼̱͘͡͡͞&amp;#32;̴̢̛̰̙̹̥̳̟͙͈͇̰̬̭͕͔̀&amp;#32;S̨̥̱͚̩͡L̡͝҉͕̻̗͙̬͍͚͙̗̰͔͓͎̯͚̬̤A͏̡̛̰̥̰̫̫̰̜V̢̥̮̥̗͔̪̯̩͍́̕͟E̡̛̥̙̘̘̟̣Ş̠̦̼̣̥͉͚͎̼̱̭͘͡&amp;#32;̗͔̝͇̰͓͍͇͚̕͟͠ͅ&amp;#32;Á̶͇͕͈͕͉̺͍͖N̘̞̲̟͟͟͝Y̷̷̢̧͖̱̰̪̯̮͎̫̻̟̣̜̣̹͎̲Ḿ͈͉̖̫͍̫͎̣͢O̟̦̩̠̗͞R͡҉͏̡̲̠͔̦̳͕̬͖̣̣͖E͙̪̰̫̝̫̗̪̖͙̖͞
Failed object lookups go to the class, so it needed a new name.
&gt; in python the only way you can distribute it is by making it into an executable You can distribute the source code, and it will run on any machine with Python. At worst, you write a tiny wrapper script in your OS's preferred scripting language (say, bash in Linux or OS X, or a DOS shell script under Windows) to launch the application. On Mac OS, there's some trick you can do with any script files, not just Python, where you bundle them up in a directory and turn it into an application. That's OS X only, of course, but then frozen .exe files are Windows only. You can embed the source code and all its dependencies in a zip file, although I'm not surprised if you don't know that, its one of the most well-hidden features of Python. The youtube-dl project is distributed that way. Confused the hell out of me the first time I saw it. 
I can't tell you exactly what's going wrong, but I can advise you as to how best debug your code. Try these two things, I'm sure one of them will result in a clue as to why your script(s) aren't working. 1. Instead of doing `exec("/usr/bin/python /var/www/html/group_a/job_scraper.py $userID");` do `$cmd = "/usr/bin/python /var/www/html/group_a/job_scraper.py $userID"; var_dump($cmd); exec($cmd);`. This will output the command you're trying to execute... it might not be doing what you think it's doing! 2. Instead of doing `exec("/usr/bin/python /var/www/html/group_a/job_scraper.py $userID");` do `$output = shell_exec("/usr/bin/python /var/www/html/group_a/job_scraper.py $userID"); var_dump($output);`. This will let you know what the Python script is outputting.
A little dated, but a lot of it's still relevant: http://sahandsaba.com/python-classes-metaclasses.html 
&gt; $cmd = "/usr/bin/python /var/www/html/group_a/job_scraper.py $userID"; var_dump($cmd); exec($cmd); Output from Step 1: string(68) "/usr/bin/python /var/www/html/group_a/job_scraper.py 112233456" Output from Step 2: NULL Gonna try and wrap my head around why it's outputting NULL, does the first output look weird to you at all? Not sure why it has string(68) right there. 
Is it possible that the PHP variable with the number could change data type as it gets passed to the Python script?
Poor story, documentation is screaming about `asyncio.wait` will not raise exceptions.
Thanks for your feedback. Could you explain the alternative for installing the requirements? 
Could it be, that the user executing the php script (maybe www-data) has no access (execute rights) to this python script?
Well it lets me execute the script because I've successfully returned some little information back in the beginning when I was testing. But their could be privilege issues somewhere because it's a school server I'm running this on.
Thanks for your feedback. Any links on how to do it properly would be nice.
1. That output looks fine. The reason it's got `string (68)` at the start is because PHP is telling you that the varibale you've passed to `var_dump()` is a string of 68 characters in length. That part won't be being passed to Python. 2. Does your Python script output anything? If not then make it the Python script `print("Also done!")` and run it again. If you don't see the `Also done!` output instead of `NULL` then your Python script is failing. It may not even be being run due to permissions. If you're using Python2 then you'll need to change the above Python snipped to `print "Also done!"`
Sure, check out the current [best practices](https://packaging.python.org/tutorials/distributing-packages/) from the Python Packaging Authority.
In E711 it just says "Hello World". Anyway thanks for the collection! : )
&gt; Dict, Boolean, Dict, List. That is three data types. Or one type and two containers. Anyway, simple &amp; safe to store structures is JSON, if your dict's use strings as key. CSV is for tabular data (rows). If you must have more complicated python structures and only load data from a trusted source then maybe python's pickle format.
Most schools already have LaTeX template for thesis work. A common data science template would be the next logical progression. Midlevel managers are the oldpeoplefacebook of corporate work. "What's this Jupyter thing? Why doesn't it say [Corporation]? What are we paying for licensing costs per year?" Just being able to slap our logo in the corner and change the background to one of our marketing 'official' color schemes would go a HUGE way in getting Python/Jupyter running at my company. 
Love it! I still ignore E111 though for preference of 2 space indents.
same.
&gt; $output = shell_exec("/usr/bin/python /var/www/html/group_a/job_scraper.py $userID"); var_dump($output); Did learn a lot doing this? Put prints throughout the code, and I can tell that there was an issue at this line: &gt; job_df.to_csv("job_listings.csv", encoding='utf-8', index=False) I wonder If I dont have writing permissions or something.
That's probably it. If you're expecting your Python script to output something but you aren't getting any output then it's failing. As you mentioned, it probably doesn't have permission to save the file or it's not saving it where you think it should be. Try changing that line of Python to be an absolute path, such as `job_df.to_csv("/var/www/html/foo/bar/baz/job_listings.csv", encoding='utf-8', index=False)`. Also, if you already created the file with a different user, the `job_listings.csv` file may belong to someone else and the web server users (normally www-user or apache) won't have permission to right to it.
Yea that didn't work. Do you think that if I installed SQLAlchemy on this server and then used the function from pandas, df.to_csv() it would work? This is literally due in 7 hours and I'm running out options. Also sucks, because I have to wait on the IT to install dependencies for me.
Huh. The rules used to be in my project called Lintly. I dumped the rule markdown from that database to create all of the rule definition files. There’s probably a mismatch between what was stored in the DB (the body) and what I’ve added for this Jekyll site (everything else). I’ll make the line endings consistent. 
There is a mistake in the second code block. os.path.join accepts multiple parameters: https://docs.python.org/3/library/os.path.html#os.path.join
i posted in there twice ... but neither post has yielded any comment
Interesting, when ever I'm on the command line I usually just impory PUDB
The cool thing about `breakpoint()` is that it works with external debuggers like PyCharm as well - there's a mechanism that allows a debugger to register _itself_ as a breakpoint handler.
Which we can gree is mostly pointless, when already using pycharm to develop. I could see that feature being useful for debugging production, or maybe debugging inside a container. However solutions already exist for both. More time /effort removing warts would be greater appreciated than a new limited usefulness feature, IMO. 
If you need help with code. Post your code to [Github](https://github.com) or [Pastebin](https://pastebin.com) then post a link to it here.
If you can't find the answer to this in 2 seconds on Google, 3.7 isn't gonna fix your problems, sorry dude!
Damn, didn't know about read_text. That's tight.
It's not anti scraping measures as such, its just that the content is loaded in javascript so you would probably need to use selenium. 
Feel free to pm, I'll be happy to help
Selenium is returning a 403 too
I have just tried and I can load that site no problem using selenium and chrome driver. 
Have you looked at wait.until(EC.element_to_be_clickable.. Before trying to access your elements? 
Going through the Python Crash Course book by Eric Matthes. I am a CS noob with little coding experience from the one C programming class during my undergrad. I'm learning this now because I feel like my engineering degree didn't give me enough skills. Any word of advice for a Py newbie?
I have not tried that l. I'm really not a programming whizz so it's quite possible in getting tripped up by something simple. Do you mind sharing the code you're using? I was using Selenium+chromedriver last night and I'd like to see what's tripping me up. Thanks for your help. My method seems crazy, but it's been fun to develop. 
Add a comma between the string and the variable "You got the cards", cards Oh and btw it's better if you print values using format E.g. "The Number to print is {}".format(number)
As far as starting the service goes, that sounds like a job for a fixture. The fixture function can start the service and block until it's ready, and no tests dependent on the service will run until that fixture is ready. If you only want to start the service once, you can module-scope that fixture. Can you access the service in parallel with your different tests or is that likely to cause problems? Or can you spin up multiple instances? I'm pretty sure pytest tests can be threaded or parallelised. Presumably you don't get return codes from your job submissions, or have any way to check that it's finished on the server - is it possible to refactor those calls into async functions which return a Future (or Deferred or whatever Promise is called in python), which you can then block on?
Don't use map, just use a list/set/generator comprehension.
Thanks for help but.. i fixed it 3 Min back xD Im sry but thanks :)
Good, anyway I suggest you to search about format It's a safer way to print variables
https://www.tutorialspoint.com/python/ :)
I'm more of a PHP developer than a Python developer, so I don't have a lot of experience with SQLAlchemy to be honest. If I were you I'd create a test Python script that just prints the parameter it's passed. Something like this: ``` import sys print 'Number of arguments:', len(sys.argv), 'arguments.' print 'Argument List:', str(sys.argv) ``` Then I'd try calling that from PHP, and see what you get. If that works then you know the problem is specific to your Python script. You could take that one step further and get the Python script to just print the CSV (instead of saving it). If it successfully prints, but won't save to file, then you know it's a permissions problem. Beyond that there's not a lot else I can help with. Sorry and good luck!
The entire proposal is basically "have something like [`attrs`](https://github.com/python-attrs/attrs/), but standard". As to why anyone thinks this is a good idea, read [this piece by Nick Coghlan](https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience.html) - it's probably just designed for a target audience that you're not in!
Hello! The problem is we aren't sure what the problem is, so it's tough to give advice on where to troubleshoot. I saw your other question, and neither this one or the other really explain what's going on outside of 'im trying to log in a user and it's broke, can you help me fix it'. Are you receiving any error messages? Can you connect to your DB and confirm that the user was correctly created? What exactly happens when you try to log in? Are you redirected to another page, is the login button unresponsive, do you get errors in the login form? I thought about pulling your code and setting it up to see what's going on, but you don't have a requirements file. If your not sure what that is, Google how to set up a virtual environment (and feel free to ask questions!) and then Google how to export a requirements file from pip. This would allow me to pull your code, and then automatically install the project's libraries so I could run your site, test your code, and troubleshoot a bit myself.
Might be a good idea - if people start submitting PRs, and if their editors try to be smart about line endings, you might get (admittedly minimally) confusing patches containing changes not related to what the PR is trying to achieve. Also, and I should also have said this up front: great work! I know several people who I mentor with their python who will find this really helpful. :-)
I hope it gets `__slots__` support before 3.7 is released.
I have PMd you 
One this I did notice was that your user model is using db.String() to save the password, but your form is using a PasswordField. I dunno for sure because I haven't used SQLAlchemy, but I'd be willing to bet there is something like db.Password in there that you should be using
working on building webapp on the top of sublist3r tool, using flask + mysql
Appreciate all your help! 
It’s fixed now. And thanks a lot!
Probably not. I do have another decorator that shows how to add slots. See https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py#L3 The usage would be: @add_slots @dataclass class C: i: int s: str The reason I didn't put it in `dataclass` itself is because the way `__slots__` works is that a decorator would need to return a new class. That's what `add_slots`does. I want to keep `dataclass` as simple as possible, and I want to reinforce that it always returns the same class that it's given. Maybe if `__slots__` is redesigned so that it can be specified after class creation, then it can go in to `dataclass`.
One big reason: so the standard library itself can use it.
Thanks for your feedback! I’m not receiving error messages. 1.) When I enter in correct credentials (valid username + pw entries found in the database) &amp; when I enter in incorrect credentials, once I hit the submit button … nothing happens … no error message, re-directing to another URL, nothing – it just stays on the login page unaltered. 2.) I can confirm that I can connect to DB and verify the users are correctly created via my register page. 3.) See bullet 1 … 4.) I will look into creating a requirements file + setting up a virtual environment. Many thanks!!
Updated my project [spytnik](https://github.com/MikhailKravets/Spytnik) (where I experiment in the field of deep learning) to the level it can be shown to people :/
Will not have breaking changes. Stop with this
This is /r/Python not /r/rust can we stop with the Rust articles already?
Instead of `shell_exec()` you can just do exec($cmd, $output, $status); var_dump($output); print($status . "\n"); both `$output` and `$status` are optional, but will be populated with the full output and the exit code respectively. 
ELI5?
You might have a look at /r/cscareerquestions
Yes, absolutely. I'd avoid the exact book you're mentioning though (I assume you mean the GvR one, right?) - it's basically a slightly edited together version of the official docs, that targets experienced programmers. Start with something like [Python 101](https://leanpub.com/python_101/) instead.
Python is probably the best language to start learning programming.
Yep ok see that was super helpful! Since your button wasnt functioning, I knew exactly where to look: in log.html it looks like your form is built correctly, but you have this: &lt;button class="btn btn-lg btn-primary btn-block" type="submit"&gt;Sign in&lt;/button&gt; but the submit button needs to be an input tag like this: &lt;input type='submit' class="btn btn-lg btn-primary btn-block" value='Sign In /&gt; That should fix it, or, at the very least, give you some helpful errors so you can troubleshoot further.
I wonder why it's a decorator instead of a metaclass.
What sort of warts do you mean?
ah ok, thanks so much! I'm at my real job now, but will dive back into the python project after work (that's my weekday routine for finding time for my python coding) ... cheers!
Yeah that does seem more appropriate. Thanks. I'll migrate.
Thank you! That is the book I was referring to actually. I am a little skeptical about my ability to learn, but I will try my hardest and give the Python 101 book a look. I already downloaded the pdf.
&gt;Why do we need 5 ways to do string substitution/concatenate? Well, we had two ways to use a print statement. When one was removed the fucking world ended. So lets not remove any string concat methods.
Because metaclasses can conflict with other uses of metaclasses. See the PEP for the rationale. The goal is to not interfere with any usages of metaclasses or base classes.
But if `__slots__` could be changed after class creation that would allow some inconsistencies, since objects might have been instantiated before the change
Good luck, cheers!
Thanks for explanation and code snippet. I like slots feature in attrs a lot, but your `add_slots` decorator will work perfectly fine for me (even if it's not included in `dataclass`). Great contribution, btw!
Correct. We had a very brief discussion about changing it. It needs to be brought up on python-ideas if anyone has some suggestions on how to get it to work.
Have you tried doing the same thing with a simpler python script? There really isn't much to the PHP code except, "run this, get the output." import print(sys.argv) Something like that so you can see all the arguments the python script is picking up and if the PHP script can grab the output from that?
Thanks! It's a surprising amount of work, for a not-so-large feature. Note that the `dataclasses` version on PyPI works with Python 3.6, and I personally plan to start using it in my own code immediately. As soon as 3.7.0 alpha 3 is released, I'll update PyPI with the exact version that shipped, and I'll try and keep it updated until 3.7 is released (in June).
Here's my take on it: There's a decent amount of boilerplate required to setup a class. [attrs](https://github.com/python-attrs/attrs) helps automate a lot of this boilerplate. This PEP takes heavy inspiration from that project and aims to incorporate it into the standard library.
Yes. I have no clue what's the best way to start learning as I started with C++ (school, as to why, ask them...), which pretty much halted my entire learning process related to programming until I swapped language and started learning on my own. But I use [learnxinyminutes](https://learnxinyminutes.com/docs/python3/) as a reference to languages I use. It's densely packed and often times self explanatory, I don't know, maybe even you could start out with this. Especially when it starts out from very simple things. Goodluck!
&gt; Data Classes can be thought of as "mutable namedtuples with defaults". They are classes whose primary purpose is to contain properties. The values of those properties can change when needed. This decorator overrides numerous methods to add expected behavior, such as `__eq__` and `__ne__` (equality checking).
Thank you
`InitVar` seems unnecessary. Why not simply inspect the signature of `__post_init__` and append or prepend that to the signature of the generated `__init__`? @dataclass class C: i: int j: int = None database: InitVar[DatabaseType] = None def __post_init__(self, database): ... → @dataclass class C: i: int j: int = None def __post_init__(self, database: DatabaseType = None): ... 
A new class decorator called ```@dataclass``` which inspects a class for fields with type hints specified. It uses these fields to auto-generate a set of common helper definitions such as less-than, greater than, a repr method that's more than just the object address, etc. Pretty handy
Thanks a lot fo your answer, this was a great starting point to do more research! 
Maybe you guys shouldn't be running things in a shell, but properly using whatever PHP's equivalent of execve is. You avoid security problems, empty string/nil edge cases, etc. In pseudocode: the_output = get_subprocess_output("python", "the_scraper.py", $userID) But really, if you are on a decent OS, you'd know to make the `.py` executable, put a shebang line (`#! /usr/bin/env python3`) at the top, and just call `the.py` instead of `python the.py`.
We all started coding with no knowledge. Python is a gentle beginner's language.
Your `render_template` arguments `[2:-1]` are overindented. Also, a little tip. Try to keep functions reasonable short and coherent. Maybe this logic doesn't all belong in that one function.
It worked that way at one point, but it seemed like too much magic. Also, the static type checkers (like mypy) would have to be aware of this magic, too. And as long as ClassVar was being used, this seemed like an obvious extension.
Est-ce que l'endroit, les heures/la zone, la sorte (contrat, emploi), etc. sont privé?
Ok I'll give it a shot. Thanks!
I'm probably going to mess this up a bit this is what it seems like it's for. Sometimes classes you create have a lot of functionality. Sometimes though they are just used as a way to store data. For example a class used for holding a address book contact data would be class Contact(object): def __init__(self, name, phone, age): self.name = name self.phone = phone self.age = age person1 = Contact("Bill", "555-555-1234", 69) person2 = Contact("Tom", "555-555-4321", 69) So now you have a class that's sole purpose is to hold data. But now you don't have all the useful tools that are available with simpler data. For example if you just have two variables person1 = "Bill" person2 = "Tom" and you want to do simple things like person1 == person2 person1 &gt; person2 print(person1) it will all work fine. But if both of those people are in your `Contact` class then those functions will all fail or give unexpected results. The `==` comparison will almost always return false, but what if they have the same name? The `&gt;` and `&lt;` operators will just throw an `unorderable types` error, and the print will give you a very unuseful `__main__.Contact object at 0x0000000029D8978&gt;`. The data `@dataclass` decorator will create a lot of the functions for you. So by just adding the decorator and changing nothing else the results from the comparison and print operators would then be person1 == person2 # False person1 &gt; person2 # False This works because now it will be comparing tuples of all the data fields. So the `==` would be comparing `("Bill", "555-555-1234", 69) == ("Tom", "555-555-4321", 69)` and the `&gt;` would be doing `("Bill", "555-555-1234", 69) &gt; ("Tom", "555-555-4321", 69)`. This comparison now allows more useful functions like sorting! But coolest of all is now the `print(person1)` would print Contact(name=Bill, phone=555-555-1234, age=69) all automatically without having to define your own `__repr__` or `__str__` methods! (this is my fav).
I tried to read Python doc about those two functions, but couldn't see what you said. Maybe the way it explained is difficult to understand.
So, now officially part of standard library, right?
Don't static type checkers now have to understand `InitVar` instead?
three fiddy
Documentation https://docs.python.org/3/library/asyncio-task.html#asyncio.wait doesn't say what you said.
So what is the advantage of this over namedtuples? 
Mutabiity, methods, ...
For simple data, no real advantage. But there is actually an entire section of the PEP that addresses why/when you'd use this over a namedtuple. &gt; Any namedtuple can be accidentally compared to any other with the same number of fields. For example: Point3D(2017, 6, 2) == Date(2017, 6, 2). With Data Classes, this would return False. A namedtuple can be accidentally compared to a tuple. For example Point2D(1, 10) == (1, 10). With Data Classes, this would return False. Instances are always iterable, which can make it difficult to add fields. If a library defines: Time = namedtuple('Time', ['hour', 'minute']) def get_time(): return Time(12, 0) Then if a user uses this code as: hour, minute = get_time() then it would not be possible to add a second field to Time without breaking the user's code. No option for mutable instances. Cannot specify default values. Cannot control which fields are used for __init__, __repr__, etc. Cannot support combining fields by inheritance. 
Indeed. If you clone [the CPython git repository](https://github.com/python/cpython/) and compile version 3.7 (it's quite easy, just ask if you need any help), you'll already be able to play with it.
Maybe basic Python is enough to start with Django but why stop there?
Awesome work! Extremely useful to me, thanks a lot.
..., good integration with type hinting (although something similar can be achieved with [typing.NamedTuple](https://docs.python.org/3/library/typing.html#typing.NamedTuple)).
soooo java beans then
If you want to go fully into Django....
What do you mean?
I hope you're being sarcastic? Better to add an /s just in case.
No probs :)
To learn Python for scientific work, I'd recommend you to take a look at [Python Data Science Handbook](https://github.com/jakevdp/PythonDataScienceHandbook), which comes as Jupyter notebooks. Perhaps the last part (machine learning) is not useful for you, but I'm sure the rest will be.
If you intend on working with Django only.
It's not Python, but take a look at [App Inventor](http://appinventor.mit.edu/explore/index-2.html). I've created simple apps with it, and it's pretty impressive. It's much easier than trying to learn Java.
More like Java value objects with lombok :P
Well I don't agree woth that, after all Django is all Python under the hood.
Well, you can always come back to learn other things in Python.
Yes you can certainly learn both in parallel.
Is this basically like attrs?
Ah, I remember this as more informative then &gt; Returns two sets of Future: (done, pending). &gt; This does not raise asyncio.TimeoutError! Futures that aren’t done when the timeout occurs are returned in the second set. My bad.
Given that this borrows most of the ideas from attrs, why not just incorporate attrs into the standard library?
Isn't this really just a reimplementation of http://attrs.org/?
Ah okay makes sense. It sounds like namedtuple will still be used for really simple things where the fields won’t change like an x-y coordinate (since there is less boilerplate) but more complicated or subject to change types can use dataclasses. 
&gt; But now i have to remember another special name :( No, you shouldn't. There is an important note in the PEP that this method name is reserved for use by typing module and generic types machinery.
Thank you! I will open PRs with implementation very soon.
Well, you can also define a class, create an instance and then define a new class with the same name so I suppose it would be a similar situation where instances of the old class could be seen as instances of a no-longer-existing class with the same name?
It's basically a much nicer (and type-hints compatible) way to write: class Stuff(namedtuple('Stuff', ['a', 'b', 'c'])): ...
Or like scala case classes
Typo on line 3, should read `import subprocess`
Definitely! If you use ESRI (ArcGIS) has a book on using Python with ArcGIS: https://www.amazon.com/Python-Scripting-ArcGIS-Paul-Zandbergen/dp/1589483715/ref=sr_1_1?ie=UTF8&amp;qid=1512494721&amp;sr=8-1&amp;keywords=arcgis+python There are other books that you can use as well: https://www.amazon.com/Learning-Geospatial-Analysis-Python-Second/dp/1783552425/ref=sr_1_3?ie=UTF8&amp;qid=1512494182&amp;sr=8-3&amp;keywords=python+gis https://www.amazon.com/Geoprocessing-Python-Chris-Garrard/dp/1617292141/ref=sr_1_2?ie=UTF8&amp;qid=1512494182&amp;sr=8-2&amp;keywords=python+gis
I am looking forward to that...assuming it does what I want. Right now, on most of my machines, I use a text expansion program to quickly write: print('-'*60);import traceback as __traceback;import sys as __sys;__traceback.print_stack();print('=+'*30);print('Embed:');from IPython import embed as __embed;__embed();__contt ='Do you want to continue? [Y]/N?\n';__v=__sys.version_info[0];__cont = input(__contt) if __v&gt;2 else raw_input(__contt);_=__sys.exit() if __cont.lower()[0]=='n' else '' (Note: this could be better but it hasn't been worth my time to clean it up)
When you're too fucking lazy to write a title down votes come rolling down. 
True. But while thinking about it, I realize the other reason I came up with `InitVar`: it lets you control the order of parameters to `__init__`. This is especially important if you have fields with defaults. If you're finding `__init__` params by inspecting `__post_init__`, where do you put these init-only params in the call to `__init__`? You can't always put them first, because they might have defaults and some fields might not. And you can't always put them last, because they might not have defaults and some fields might. It was easier just to make all regular fields and `InitVar` fields be defined in the class body, then you can control the defaults and parameter order yourself. I should probably add a note about this to the PEP.
It's discussed in the PEP.
True. That's why I wrote the (poorly named) `@add_slots` decorator (see another comment below for the location). I wanted to keep `@dataclass` conceptually simple, especially for the initial release.
Missed that one. Thanks. But u can imagine my horror when i pictured world, where every dunder metod have ` class_ ` counterpart (it was like one of my php nightmares, where i drown in tons of inconsistently named built-in functions - no matter how hard i scroll thru php.net) :D
https://www.python.org/dev/peps/pep-0557/#why-not-just-use-attrs
I'm trying to learn Python through an app while reading the Python 3.6.3 doc/turorial. So far, I'm in Chapter 4.6 Defining Functions. Still a long way to go :)
Those are the most inane and idiotic reasons I have ever seen, and I'm going to call bullshit on it. Someone needs to take Guido out back and put him down, because he is all over the map with this shit. With the async features one of the objectives of the PEP was to introduce keywords that could be used by different async implementations within a common framework. So we got this weird hybrid where there were keywords `async/await/yield from` and a rough template of what an event loop should be like `asyncio.AbstractEventLoop`, but nothing dictated what event loop we have to use, and we have to pass the fucking thing around all over the place to be technically correct because some asshole might decide to use a different event loop and fuck us over. Had he followed the same logic with your DataClasses the focus would be on implementing a common syntax for these kinds of objects which multiple implementations could utilize, but in fact you don't need any special syntax for this, because you are using PEP 526. Guess what, that makes you LESS PORTABLE than attrs, not more. I don't care that attrs is getting more updates than your dataclass, because I can't use your dataclass because I'm not using Python 3.6. So thanks Guido, you've now fucked over another potentially useful library by anointing a poorer substitute for it as the "accepted" version, while simultaneously making it impossible for many of us to actually use your approved version. 
But it has fewer features, and won't work with older versions of python... so clearly its better!
Charging for open data? No thanks. 
Thank you! This is a good methodology
I wonder if the reason that the OP code isn't getting the user id is that the param is passed to the python interpreter rather than the script which is being executed. Running it as an executable would likely (?) alleviate that issue.
I hate that this has a completely different syntax than namedtuple. They offer the same exact functionality (data objects without a tonne of boiler plate) with the only conceptual difference being that one has mutable members, and the other has immutable members, so why is the syntax and supported feature set completely different? * One supports type annotations, the other doesn't. Why? Is that somehow useless on immutable data? * One makes it really easy to add instance methods, the other doesn't. Why? Is that somehow useless on immutable data? * One makes it really easy to iterate over all member data, the other doesn't. Why? Is that somehow useless on mutable data? Coming up with two completely different syntaxes for almost exactly the same feature means that if you figure your type no longer needs to be mutable, it's not a one-liner to fix it. It is also extremely confusing for beginners. This doesn't feel well thought out at all.
So Python is gaining Pascal records?
First of all, they don't offer the same exact funcionality. The PEP explains this better than I could. Also, there is [typing.NamedTuple](https://docs.python.org/3/library/typing.html#typing.NamedTuple), which has very similar syntax and allows both type annotations and instance methods. I hope this clarifies a bit :)
Is not this an valid argument for any "boilerplate-redude-library" to include it in standard library?
Aside from wiring things up between the model/view/controller, all your business logic (95% of your codebase) is still just going to be plain old glorious python. There's no reason not to dive right into django though and make a site. Learn python as you go
The paid plans are only for if you want to host private data sets. The open data is public and freely accessible, similar to the pricing structure for Github. (I have no vested interest in the company beyond the fact that I interviewed their CTO, I'm just trying to help clarify in case there was any confusion)
[removed]
I can't see that it does. It goes through some of the tradeoffs that the designer of namedtuple chose, focusing almost exclusively on the downsides. But in no way, shape or form does it make any argument for why different behaviour makes sense depending on mutability. If all the design choices made in namedtuple indeed are shit (I disagree with 80 % of the authors opinions on this), then the only sane thing to do would be to deprecate and remove namedtuple and make Data classes support both mutable and immutable data.
Is author want to say, that std is bucket of simple/short/cutted libraries, which are for those, who "scripting" something and do not want to go deeper and use 3rd ones? This position is rational, agreed.
TIL `enumerate` takes a starting index
I think that pep is using "Python 4.0" just as a placeholder for "whatever comes after Python 3.9". So, if the core devs decide to release Python 3.10 after 3.9 (which I think is the current plan? don't remember), then all of the changes described in this PEP would apply to 3.10. But in any case, the reason why people keep stating that there won't be any major breaking changes between Python 3 to Python 4 is because the core devs keep insisting they won't do something like the Python 2 to Python 3 thing again. Here's a quote from Guido a week or two ago, for example: &gt; Since Python 4 came up, I'd like to make something clear. Python 4 is *not* going to be a release where we break compatibility with a whole bunch of things at once. Basically if you think you'll need to wait for Python 4 to get your favorite change to the language, you can forget it. You need to come up with a plan to introduce the change without breaking existing code or at least a clear deprecation schedule. ([Source](https://mail.python.org/pipermail/python-ideas/2017-November/048221.html)) Of course, it'd be unreasonable to expect Python to remain fully 100% backwards compatible (you still have to fix bugs and evolve the language), but any changes must follow the standard deprecation cycle/other existing policies and must make as minimal impact on user code as possible. (PEP 563 attempts to do just that, for example -- that PEP, as well as all of the other type hinting related ones, are making the assumption that most people who are using function and variable annotations are doing so because they want to use type hints. Under that assumption, the change proposed in PEP 563 will indeed have minimal impact on most user code + will give any niche libraries that use annotations for other purposes plenty of time to adjust and add the necessary changes to their code bases.) 
C'est pour mon usage personnelle et pouvoir continuer à travailler sur le code par la suite. Seulement la date déchéance est à respecter. 
A great extension of the anti-patterns are for multiple iterators; A = [1,2,3] B = [9,8,7] for ii in range(len(A)): a = A[ii] b = B[ii] do_something() to A = [1,2,3] B = [9,8,7] for a,b in zip(A,B): do_something() But, I've had times when it gets cumbersome if there are a lot of things to iterate over. Even then, what I will usually do is pick my **primay** iterable and do for ii,a in enumerate(A): b = B[ii] ...
Ah you're right, and this of course means that you can't mix the order of fields with and without defaults either; you have to put all your fields with defaults last because it all gets translated to a call to `__init__` (excepting `init=False`). Perhaps the PEP mentions that caveat; I admit I skimmed some parts. Personally I might think it neater to simply require arguments to `__post_init__` be keyword arguments, and then you can also skip any magic by slurping up `**kwargs` and passing that along. However I can see why you might dislike that idea. Although I don't really feel like `inspect.signature` is that much more magical than anything else dataclasses do... But I don't want to bikeshed.
Maybe try this https://github.com/codelv/enaml-native/
As a noob researching to start a little scraping project, I have a question for those more experienced with this kind of thing... What are the benefits of using Scrapy over something short and simple like this?
I've been meaning to give this a try. https://github.com/kivy/python-for-android
&gt; For example a class used for holding a address book contact data would be Great example, but having seen the traditional-looking version in your 'before' example and the weird-looking syntax in the new feature, I'll be sticking with the old way.
an sqlite3 database with 2 tables to take care of the dict, records in the table are the list, and a single column to store the boolean in.
`namedtuple` is so widely used that I can't imagine it ever being deprecated. It's like trying to deprecate % string formatting (ask me how I know!). In the many years since `namedtuple` was added, we've added features to Python. `dataclass` leverages some of those features to do things that `namedtuple` cannot.
Ordered Fluent Python today and am redesigning an 8080 emulator that I started in C to be in Python instead. 
That's not how shell calls, nor `execve` or shebangs work. For shell calls, you don't have to worry about `argv[0]`. For raw `execve` you do, but PHP programmers should generally use higher level wrappers…
There is a great tutorial on Flask and dB on YouTube. Look for Flask-SQLAlchemy and Flask-Wtforms by PrettyPrinted. He does a great job walking through everything especially with one to x relationships and many to many relationships. 
The abstract is basically the ELI5 https://www.python.org/dev/peps/pep-0557/#abstract
OK, so now you're saying that namedtuple is vastly inferior to dataclass but we can't deprecate it because of inertia, so instead it will remain the one and only source of immutable data classes, and we will have to settle for the supposedly vastly superior implementation to only exist for mutable data. That's a bad choice, right there. Also, as near as I can tell, this breaks the following parts of PEP 20: * Beautiful is better than ugly. * Simple is better than complex. * Readability counts. * Special cases aren't special enough to break the rules. * There should be one-- and preferably only one --obvious way to do it. So five out of 19 principles are being broken. Not bad. I'm not saying PEP20 should be the one and only guiding light in developing the Python language, but it has some sane advice.
You can learn python by installing python only. There is no extra software needed. However there is lots of software that is meant to help writing code. These are called code editors or IDEs. Some of the popular ones are Notepad++ (Windows only), Geany, Atom, Sublime Text (not free, but practically), Thonny, or a full fledged IDE like PyCharm or Spyder. Personally, I like Geany. Here's a long list of options: https://www.reddit.com/r/learnpython/wiki/ide. Wikipedia also has good lists of [code editors](https://en.wikipedia.org/wiki/Comparison_of_text_editors) and [IDEs](https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Python). Come visit us in /r/learnpython if you need help with your python code. 
&gt; Those are the most inane and idiotic reasons I have ever seen, and I'm going to call bullshit on it. Someone needs to take Guido out back and put him down, because he is all over the map with this shit. Beyond being horrific that you think Guido should be *shot*, I find your hate for him surprising, especially considering he didn't write the dataclasses PEP.... Maybe you should know what the hell you are talking about instead of ragging on people and things just because you have a pre-existing dislike of them. &gt;Had he followed the same logic with your DataClasses the focus would be on implementing a common syntax for these kinds of objects which multiple implementations could utilize, but in fact you don't need any special syntax for this, because you are using PEP 526. Beyond the fact that you still think Guido made this PEP for some bizarre reason, async and await syntax are both syntatic changes which couldn't be brought to older versions of Python, so both async syntax and dataclasses are not possible on Python 3.4. So your argument is nonsense. Dataclasses was designed to take advantage of new syntax. The idea could be made with decorators but that would be butt ugly. Also, who said dataclasses should/are more portable than attrs? Nothing in the stdlib *has to* work on older versions. There is a best effort to backport, but it isn't always possible. Why sacrifice implementation purity to increase adoption? &gt;I can't use your dataclass because I'm not using Python 3.6. I don't understand why you think you are entitled to get new features on older versions of Python?
Thanks alot, this really helps. 
I went the other way around. I knew Python and ended up working on a project that required me to learn ArcGIS Pro. I’m not sure what GIS software you’re using but if you want to incorporate python, try using ArcGIS Pro to do it. All of the tools are Python, and extending functionality is done via Python.
How about :- if isinstance(dimension, numbers.Number):
log.html is not being used in this scenario ... but instead login.html (@app.route('/login', methods=['GET', 'POST']) ... in login.html, i have the submit button enclosed in an input tag.
&gt; if isinstance(dimension, numbers.Number): Just gives infinite loop of "only numbers:
I think you've got some worthwhile points here, but the ranty tangent and hyperbole will prevent anyone from taking you seriously. Do you want to sound cool (to 13-year-olds) or do you want to convince people?
i updated log.html with '&lt;input class="btn btn-lg btn-primary btn-block" type='submit' value='Sign In' /&gt;' ... no change in reaction to hitting the submit button ... no error message, no success signing in / throwing invalid credentials.
I agree with everything you wrote. I find the deprecation/breakage policy of CPython okay. I am just surprised by how many people misinterpret "No major breaking changes" as "No breaking changes at all".
this is how it's configured in the tutorial I referenced for creating this... https://github.com/PrettyPrinted/building_user_login_system/tree/master/finish
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [PrettyPrinted/building_user_login_system/.../**finish** (master → 3dcba1a)](https://github.com/PrettyPrinted/building_user_login_system/tree/3dcba1a072745f08197337a7e4bd3659d094ba9c/finish) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dqthr1r.)^.
I’m having difficulty sitting down at home and spend the time learning stuff So i’ve always trying to find some apps that i can use to suppplement the time that is lost due to commuting So far sololearn is working for me since, after im done with sololearn i’ll start watching the tutorials from udemy for automate the boring stuff with python
`namedtuple` is so widely used that I doubt it could ever be deprecated. It would be like deprecating `%` string formatting. Ask me how I know! In the many years since `namedtuple` was added, Python has grown many new features. `@dataclass` uses some of those features to add functionality that `namedtuple` cannot provide. `@dataclass` also has a `frozen=True` parameter, for some degree of immutability.
I know he didn't make the PEP. The person I am responding to made the PEP. My objection is to his approving the PEP. He is making weird arbitrary decisions. async is all confused because we don't have a canonical loop in the name of supporting multiple implementation. but with dataclasses he canonizes one implementation over another (and picks the newer one which has fewer features and users to boot). Pick a behavior and stick to it. You either support all implementations of a concept as a policy, or you direct all users towards a particular implementation. You don't arbitrarily switch between the two.
#526 is cancer, this is it spreading.
A graphical typing training program with WxPython.
Your example is not valid, but I'll guess: for item in data['items]: print(item['name']) print(item['status']) --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Can I use it without type annotations?
Your code seems to display the opposite - the value of "items" is a list of dictionaries, not a dictionary of lists. You can loop over that list as you would any regular list, and for each item get the 'name' and 'status'. You can get more help with this over on /r/learnpython . As a side note: in the code sample you provided, there should be commas between the innermost dictionaries, as they are elements in a list. 
No, it's entirely driven by type annotations. But the annotations are ignored, `InitVar` and `ClassVar`. So, although I don't recommend it, but you could say: @dataclass class Person: name: int social: int address: int That is, use any type you want. If you're not using a static type checker, no one is going to care what type you use.
&gt;Pick a behavior and stick to it. You either support all implementations of a concept as a policy, or you direct all users towards a particular implementation. You don't arbitrarily switch between the two. But *why*? There isn't a point to other than "its more consistent", and there are reasons each PEP was designed the way it was. Why sacrifice flexibility for arbitrary consistency? Also &gt;but with dataclasses he canonizes one implementation over another (and picks the newer one which has fewer features and users to boot). Dataclasses was written to be a smaller more lightweight version of attrs. As soon as there was agreement that "something like attrs should be in the stdlib", a smaller, more lightweight version was the obvious candidate. Attrs would never just be imported into the stdlib, that isn't how this works. The creators of attrs themself endorsed dataclasses as proposed in this PEP and likes the simple API. I really think you should understand how this PEP came to be how it is before criticizing it.
It was like 7 years ago. I tried to make a program that will automatically unpause Foobar2000 on Windows. I was always pausing it, to see something on youtube and forgetting to press play again. Criteria were easy. Unpause when: - Foobar is on. - There is a quiet coming from "stereo in" for at least 60 seconds. First I tried to wrote it in C++ and after half o day of trying there was no success. So give Python a shot. It took me 1 hour to write a complete thing. That's also how it begins for me and Python. 
This is a bit late but you should look into the pandas library in python. It has built in functions to load in an excel file and then work with your data and export it back.
What url did you use input?
Awesome!! Thanks for the quick answer. That did the trick. This is my working code: # [START list_instances] def list_instances(compute, project, zone): result = compute.instances().list(project=project, zone=zone).execute() for item in result['items']: if item['status'] == "RUNNING": print (item['name']) # [END list_instances] list_instances(compute,project, zone) print('done')
Seems strange, but it's entirely possible that that's the case 👍 I'm more familiar with the Django ORM 
Everything looks correct, then, I'm not sure yet why it's not working. Tonight I will pull your project and see if I can get to the bottom of it 
Will there be a reason not to use this with every class you write? Or, asked differently, which kind of classes are not well suited being dataclasses?
I think using the decorator, the class can also be defined using slightly less boilerplate? @dataclass class Contact: name: str phone: str age: int
thanks so much! very curious to see where the problem lies within the code - been driving me mad
This is the question for which I cannot find an answer.
That's true for absolutely any integer. Try this: a = 123456789 b = 123456789 print(a is b) Just don't try it in the REPL, because the "E" in the middle throws things off. Pretty much any immutable literals are only made once. 
This is also why, for example, requests or numpy will never be in the standard library. It moves much to fast, and the requests developers and the python core devs agree that doing so would be bad for everyone.
 @dataclass class Contact: name: str phone: str age: int is weird looking syntax?
thanks for your help Rob.
My solution which could use some optimizing is to alter the generated html and add the attribute to the text. import re def insert_data_attr(df, data_table): for i, row in enumerate(df.itertuples()): for j in range(len(row) - 1): data_table = re.sub( 'row{} col{}"'.format(i, j), 'row{} col{}" data-value="{}"'.format(i, j, df.iloc[i, j]), data_table) return data_table data_table = insert_data_attr(df, data_table) 
Sex number!!!!!!!!!!!!!
Linebreaks are optional in HTML files. It's normal for the entire file to be on a single line. You could look into `bs4.BeautifulSoup.prettify()` to add line breaks to html. I think it will also do the bytes to string conversion for you. --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
No problem, hopefully it helped you get what you wanted to do done?
thanks man I will mind the next time
Amazon added filtering to SNS subscriptions, so I'm adding message attributes to our CMS's pub/sub events.
Just keep practicing and you’ll get it. ;)
Scrapy can navigate javascript loaded content.
Great explanation 👍 This kind of high-level stuff is what makes python a joy to work with. 
There will be an asyncio book coming out sometime in the next two months ;)
Agreed, so long as we don't become C++
I guess that's the answer there :P. Personally would still use attrs for projects
You could just stop using named tuple. It's slow as ass, and you were probably only using it because it was too much effort to make a class, which this new thing does.
By that logic, herpes is the top of the world, too.
But this new thing makes a **mutable** objects. That's a **huge** disadvantage, a lot of the time. There is a reason we have both tuple and list, you know.
 I pasted the text above into a text file and retrieved the volume from there. try: fileHandle = open('text.txt','r') except Exception, e: raise e for i in fileHandle: vol = re.findall(r'(?:\d+\wml)|(?:\d{1}\sLitro)', i) volume.append(vol) print(volume)
One thing I haven't seen, will `dataclass` and `field` be built in functions, or will there be a `dataclass` module?
Moved my simple yahoo fantasy football script from a Docker environment (on AWS container service) to AWS lambda. The script is pretty basic in that it uses the yahoo API to check for roster changes (adds/drops) and lets me know via twilio when it happens! 
I have a decorator to disable `__setattr__` if I want a immutable data class.
nice, thanks. But I have "Litro" and "Litros"
According to the manual for that register: http://support.casio.com/en/manual/014/PCRT2300_NA_EN.pdf It has SD card support for saving sales records. My thoughts would be to save the day's sale records to an SD card, then you could write a script that would read the SD card and insert them into your spreadsheet via a python/excel module. There could be other functionality I didn't see or am aware of, so maybe start at reading your register's manual to see if there's something you can use there.
The bitly link in the youtube comments produces a malware warning in chrome
A crude analogy, but you're not wrong. A feature like Data Classes should be completely orthogonal to type annotations, but instead they are "[entirely driven by them](https://www.reddit.com/r/Python/comments/7hpmp8/pep_557_data_classes_has_been_accepted/dqtjftk/)". Python's famously "optional" type hints remained optional for what, two releases? The Python core developers seem desperate to give the language all of the downsides of static typing (verbosity and inflexibility), for only a minimal increase in safety.
http://www.figlet.org/ is what you want.
Ok, downloaded the code and got it running. The button is working correctly, the page refreshes when I click the submit button. Since the page isnt redirecting, and we arent getting any python exceptions, then the code must not be getting past if form.validate_on_submit(): in the log route. We arent displaying errors from the form in the template, though, so we never see the errors. To solve that, add this above your form in log.html: {% for field, error in form.errors.items() %} {{ field }} {{ error }} {% endfor %} Then try to log in. When I did this, I received an error that the csrf token was invalid. If you get the same, then do the following: At the top of routes.py, import CsrfProtect from flask_wtf. from flask_wtf import FlaskForm, CsrfProtect Below your setup code, intialize CsrfProtect login_manager.init_app(app) login_manager.login_view = 'login' csrf = CsrfProtect(app) Add the csrf exempt decorator to the log route @app.route('/log', methods=['GET', 'POST']) @csrf.exempt def log(): form = LoginForm() Try all of that, run it, and let me know how it goes. After this, I get a database error because I didnt set up sqlite. If we have more problems, I'll set that up and we'll check it out further
Mypy is a class of its own. It uses the relatively new type annotation syntax to implement a gradual, static type checking system. Some people love it, some people hate it. I personally love it, I find that if I'm writing anything more sophisticated than a one-off script it really helps reduce the cognitive load of writing Python code (i.e. keeping track of "what returns what"). Try it out: https://mypy-lang.org
If you need to accept *args or **kwargs, or otherwise store data significantly differently from how you accept the input (At least with attrs, I've found post_init to be almost more bothersome than it's worth). The more functionality your class has, the less benefit you get (as those kinds of classes are less likely to want to be comparable, hashable, and the like). Though I have started to generally default to using them if there's not an obvious reason **not** to
How about this? for i, (a, b) in enumerate(zip(A, B)): ....
That's silly, what I do is make a generator that combines the functionality of enumerate with zip; from itertools import count def enumzip(*iterables, start=0): yield from zip(count(start), *iterables) This is Python 3 only of course, in Python 2 you'll have to get creative with the keyword only argument for ``start`` and you'll have to break the ``yield from`` into a for loop and a yield statement.
thank you so so much! i plug this in once I get to the office tmr - I'm absolutely spent after such a long day today! talk soon.
Awesome, you're welcome! The database error means that the code ran past the form.validate_on_submit() check and tried to query a user, so hopefully since your database is set up correctly it'll work. Keep me posted! 
/r/learnpython
Thanks
Why is it silly? What's the advantage of this versus using the language built-ins?
Is it wrong for me to chime in and say I had a rather difficult time with this tutorial? It is so badly outdated that I spent more time looking for work-arounds than following the tutorial. There is a kickstarter for an updated version. I've aleady paid in. [Kickstarter](https://www.kickstarter.com/projects/1124925856/the-new-and-improved-flask-mega-tutorial)
I don't think calling these "flake8 violations" is technically correct. flake8 itself doesn't have any rules; rather it uses various other static analysis tools (by default: mccabe, pycodestyle, pyflakes) and aggregrates them into a single report. flake8 is very easily extendable as well. I have… maybe too many flake8 plugins installed: $ flake8 --version 3.5.0 (flake8-bugbear: 17.4.0, flake8-debugger: 3.0.0, flake8-docstrings: 1.1.0, pydocstyle: 2.1.1, flake8-mypy: 17.8.0, import-order: 0.16, mccabe: 0.6.1, pycodestyle: 2.3.1, pyflakes: 1.6.0) CPython 3.6.3 on Linux
So I've written a small app on the order of thousand-ish lines of code, and I had a similar experience; struggling with `asyncio` at first, but then I changed my approach and found some success. I created a root `Context` class where I put my event loop and other "task-local" things (borrowing this idea from [curio](http://curio.readthedocs.io/en/latest/reference.html#task-local-storage) and [Go](https://blog.golang.org/context)) and just pass that around to everything (annoying, but yea). I stuck to using only one `loop.run_until_complete(main(ctx))` at the very root, and then only async/await all the way down from there (crucial to keeping things easy to reason about). If I needed to branch off and run other tasks, I used some common patterns like: done, pending = await asyncio.wait([ tracker.send_updates(), tracker.receive_updates(), tracker.interactive_prompt(), ], return_when=asyncio.FIRST_COMPLETED) await cancel_async_tasks(pending) And then I used a few helpful primitives like `asyncio.Queue`. In most parts of my application I got away with only importing `asyncio.sleep` and some exception classes. I also found `async with` (using async def `__aenter__` and `__aexit__`) to be handy for keeping things tidy too. So yea, my experience with `asyncio` is much like riding a Kawasaki motorbike; it feels like you have a large knife between your legs, so you have to move extra carefully and try not to f*ck up or you'll have a large mess to deal with. HTH
Please announce it here when you publish. I'm sure a lot of people have been waiting for one.
I currently use attrs, but given that I **do** use 3.6, I'd be happy to switch to a clean house implementation which doesn't need to maintain backwards compatibly with 2 (not sure why at a glance, but the pypi version of this requires 3.6), if it works by default with mypy, and can simplify hacky internals that attrs can't tbh
[dcmp: Compare files within two directory trees for equivalency ](https://github.com/jftuga/dcmp) The purpose of this program is to recursively examine two directories to find all files that are either the same, different, or mutually exclusive. There are lots of command line options. **ALSO:** I would love some feedback on the code quality, too. Thanks. 
I would be interested in looking at this if it is on GitHub (or similar). 
It isn't backwards compatibility with python 2 that concerns me. It is compatibility with python 3.x for any x&lt;6.
Sorry for posting link to my own blog, but I'm eager for feedback. 
Yes. It's heavily inspired by attrs, but the Python standard library can't use third-party libraries, and can easily depend on new things in the standard library. _You_ are probably in the opposite boat: upgrading to the latest version of Python is probably much harder than doing `pip install attrs` (or `sudo apt-get install python3-attr`, or `conda install -c conda-forge attrs`, or whatever it is you do to get Python packages). It's a very rare user that can depend on new versions of the standard library but not new packages&amp;mdash;probably people using it to script embedded systems or something. If that's not you, attrs supports more functionality than dataclasses.
[attrs](https://attrs.readthedocs.io/en/stable/), which is basically dataclasses but not in the standard library + more features, supports doing `@attr.s(frozen=True)` to make a class of immutable objects.
Classes which are used for actual OO encapsulation with basically all private members. [`gtk.Dialog`](http://www.pygtk.org/pygtk2reference/class-gtkdialog.html) would probably make a very bad data class, for instance: the constructor doesn't (necessarily) initialize any data members directly, there aren't any publicly-writable data members, and anything you might want to modify is going to trigger notifying other code to e.g. repaint the dialog box. It just turns out that actual OO encapsulation is much rarer than structs. (Also, it's a wrapper over the C GtkDialog type, so it certainly can't be a data class even you wanted it to be because every set and get needs to go into an existing C library, but even if GTK+ were pure-Python, it still wouldn't make sense.)
Yep - we're still struggling to get off 2.7. Packages are much easier to update. I guess this felt so much like attrs I was a bit confused - I guess this is the same idea as trollius etc.
I think you're being downvoted because of your rhetoric, which is inappropriate. Nobody needs to be shot here. I do firmly agree that incorporating this into the standard library has the unavoidable side effect of effectively torpeoding a popular, actively-maintained third-party project because of non-fundamental limitations in the standard library, and doing so is _extraordinarily_ poor form, and I know at least one developer who's lost interest in writing Python libraries because of this situation. This is not a good decision.
`__new__` is actually a static method. Also, the reason for the new getitem is because of how metaclasses work. You can only have one and generics in Python were previously done using a metaclass meaning you can no longer have a generic class that uses your own metaclass. 
Oh man! I don't know how I missed that! I was so worried about just finding access to the data. Thank you for the insight! 
I bought the ebook of the previous edition and learned a lot of stuff with it. Updating and re-writing the whole thing must be a massive work, so kudos to Miguel! Buy a copy of his ebook if you can to support him!
Keep it up! As you probably already know /r/learnpython is a great resource in case you're ever stuck.
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [I'm releasing a free code for the "Automate the Boring Stuff with Python" Udemy course](https://np.reddit.com/r/learnpython/comments/7fxork/im_releasing_a_free_code_for_the_automate_the/) \#2: [90% Python in 90 minutes](https://np.reddit.com/r/learnpython/comments/661o5a/90_python_in_90_minutes/) \#3: [PSA: If you have a library card, you probably have access to Lynda.com, which has tons of Python courses](https://np.reddit.com/r/learnpython/comments/6rrsdu/psa_if_you_have_a_library_card_you_probably_have/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
Typehints are optional. However, there's no reason that things in the stdlib can't be built that use them. How do you propose this be implemented in a way that ignores type hints and also doesn't pollute the class namespace with vars? Saying `collections.namedtuple` doesn't count because you end up saddled with all sorts of baggage such as your object is now iterable and has dedicated getitem and setitem behavior. 
`namedtuple` is essentially a hack compared to `@dataclass` the only place namedtuple truly makes sense is with something like a database record or an excel row where: 1. Both index and name are important and refer to the same thing 2. It makes sense to be iterable 3. Immutability is important If you have something that meets all three criteria then you want namedtuple. `namedtuple` (and `typing.Namedtuple`) make inheritance and metaclasses weird as well. There's the argument that `@dataclass` might be faster than `namedtuple` but since that cost should only be paid at start up for most applications, the difference is likely to be negligible. The outlier here is SQLAlchemy which has its own `KeyedTuple` which has a radically different implementation to combat the slowness of creating namedtuples.
The problem is that the user is forced to use type annotations if they wish to use this feature, and they will continue to spread.
Yep. I should have been more clear that I am talking 5 or 6 items. My example was just the two 
Fluent Python and Data Science From Scratch
&gt; The problem is [writer proceeds to describe something that isn't a problem]. 
The way I do it requires very strict OOP code structure. Here's how: * Determine class that misbehaves. Usually this is obvious from traceback. * Instantiate object of that class in Jupiter, preferably with exact arguments that caused the issue. Keeping detailed logs helps. * Examine faulty method and member variables. My methods are normally a few lines long. The issue is usually clear at this point. * Use the same object in Jupiter to prototype and test a fix.
&gt; The problem is that the user is forced to use type annotations if they wish to use this feature, and they will continue to spread. Some of us really like type annotations, including me who used to be a very vocal opponent of them. As long as the core devs make good on their promise to never make them mandatory, then I don't see why it should matter to people that don't use them. Unless you really want to use a library with them in Python 2 (but then you get to feel my pain when I want to a use a library but find out it uses the `except Exception, e` or `print &gt;&gt; ...` syntax). Type hints make building large applications in Python easier and safer since you can have some guarantees that you didn't pass a list where you meant to pass a dict and explode at run time. But at the end of the day, if you don't like a feature, you don't have to use it. If you like a feature but it uses the thing you don't like, you're biting the bullet one way or another.
So, naive newb question: How do these data classes differ from data frames like you'd use with R or pandas?
They may well end up mandatory if they keep spreading - because as they spread, you may not be able to avoid interacting with a project that doesn't use them.
In that case, that's the community at large voting with their code bases on what they think is a good idea. But like I said, unless the core devs decide to make them mandatory, *you* don't have to use them.
&gt; * Any namedtuple can be accidentally compared to any other with the same number of fields. For example: `Point3D(2017, 6, 2) == Date(2017, 6, 2)`. With Data Classes, this would return False. &gt; * A namedtuple can be accidentally compared to a tuple. For example `Point2D(1, 10) == (1, 10)`. With Data Classes, this would return False. &gt; * Instances are always iterable, which can make it difficult to add fields. If a library defines: &gt; &gt; Time = namedtuple('Time', ['hour', 'minute']) &gt; def get_time(): &gt; return Time(12, 0) &gt; &gt; Then if a user uses this code as: &gt; &gt; hour, minute = get_time() &gt; &gt; then it would not be possible to add a second field to Time without breaking the user's code. &gt; * No option for mutable instances. &gt; * Cannot specify default values. &gt; * Cannot control which fields are used for `__init__`, `__repr__`, etc. &gt; * Cannot support combining fields by inheritance.
You do if you need to work on a project that uses it. What am I going to do? Have my IDE strip annotations from every function? Did you also consider that maybe it won't be a vote, and people will use them because they don't have a choice apart from not using Python? 
&gt; You do if you need to work on a project that uses it. What am I going to do? Have my IDE strip annotations from every function? *You* don't have to use them. No one is forcing you to write: @dataclass class LookHowEasyThisIs: x = int y = int z = int or def typed_func(x: int, y: int, z: int) -&gt; int ... You can continue to do all things you want to do without ever using type annotations. If you happen to come across a library that uses type annotations (say an ORM, forms, etc) then you don't need to use it. Or do and work around it. I'm unbothered. &gt; Did you also consider that maybe it won't be a vote, and people will use them because they don't have a choice apart from not using Python? That sure sounds like a vote to me, in that case that sounds like a vote of no confidence in Python.
Actually, it's possible to use dataclasses without using type annotations (though it'll look slightly janky). For example, consider: from dataclasses import dataclass @dataclass class Foo: x: ... y: ... f = Foo(3, "a") print(f.x, f.y) If you run this, it'll work perfectly fine -- the dataclasses library will ignore the annotations most of the time (except for a few it special-cases). You can replace the ellipses with any other arbitrary placeholder value, but I personally think the ellipses look the least hacky.
Reverse DNS zone files generator, 12 years ago
Will a project with annotations accept PRs without them? Likely no, and even more likely in the future as tooling improves. How do I make the annotations in code I've downloaded go away? Some of us actually read code instead of just writing it. I'm not sure what I will do in 10 years when everything is annotated. Maybe there will be a new language to try.
I'll try this out when the interpreter is out. Thanks for mentioning it.
&gt; Will a project with annotations accept PRs without them? Likely no, and even more likely in the future as tooling improves. Excellent, I hope more projects decide to use annotations. I'm champing at the bit for a handful of projects to drop 2 so I can put annotations all over. &gt; How do I make the annotations in code I've downloaded go away? Some of us actually read code instead of just writing it. I don't buy this argument at all. The implementation of annotations isn't my preferred way of expressing types (that'd be Haskell's type signatures), but it's not like they're some ungodly eye sore. Maybe if someone wrote an insanely complicated type with four levels of nested generics and there's a function in there as well, but that's on that person and not Python. There's also type aliases to ease that pain. &gt; I'm not sure what I will do in 10 years when everything is annotated. Enjoy all the amazing tooling that has been developed around them? &gt; Maybe there will be a new language to try. ...oh :(
Why wait? Do you know what pydoc is? It utilizes the doc string to automatically generate documentation for python modules. Doc strings are optional. Doc strings are used by things in the standard library. Doc strings are required by most projects. You don't need to add doc strings to your coding. You can delete doc strings from code you download. But why would you?
At first I thought "Do we really need another flask tutorial?" but it actually seems to cover a lot more than just the basics. I'll keep an eye on it, there will definitely be something to learn for me.
I used your book to automate paperwork at a factory job. We got these things called "work orders" that had the specs of how to build certain things (pipe bending for air systems for CPU fabrication plants), and then we'd scan those on a scanner after they were complete, and we'd spend hours and hours moving those documents into folders and clicking some buttons on custom warehouse inventory software. I automated all of it. I made ample use of the csv libraries, but most of all I made tons of use of this: https://automatetheboringstuff.com/chapter18/ ^ That page was my bible while building it out. Thank you so much for writing it. I bought a hard copy and it's sitting on the shelf in my room :)
Fluent Python !
You rock!
In California and elsewhere, being unpaid means you literally can't do useful work. You cant do what any employee would get paid to do. So definitely seek moderate payment at least. No one values free.
Illegal in California, thanks to film industry interns.
I wish I was single. Sounds super cool!
Do you have a github?
What the fuck is wrong with you?
They are completely different. Since you come from a data background, the analogy is that a data class is this: you can think of a data class as a row in a database table. It's a structure that is primarily for attribute lookup. A data frame is a structure that holds an entire table. It allows to do some common table manipulation.
It provides a method so broad that it can be used by all existing technologies and ones not known yet. I assume they had some unknowns (to me) that got covered too. 
What the actual fuck?
I don't know what you're trying to do, but this is the wrong way. Post what you really want to do on /r/learnpython
Consider an exception instead of isinstance dimension = input("Enter dimension") try: dimension = int(dimension) # insert whatever else you wanted to do except ValueError: print("Only numbers!")
So guys, the Jam.py 5.1.1 is released. What I really like with this release is the Audit option out of the box! The Dev is calling it the History tho :) It would be great to have you on board, even with the small apps you've done with Jam.py! The project still need some traction. Cheers D.
Data class seems spectacular to me 
So guys, the Jam.py 5.1.1 is released. What I really like with this release is the Audit option out of the box! The Dev is calling it the History tho :) It would be great to have you on board, even with the small apps you've done with Jam.py! The project still need some traction. Cheers D.
And Python takes one more step towards becoming C++....
This framework was so revolutionary to my computer science knowledge I will definitely be supporting his new version. 
I’d highly recommend Fluent Python. The Python Cookbook is very good as well.
Disagree. Why do you think this? There's lots of well known huge python projects with good codebases (like the web frameworks flask/django as 1 random example set)
That reads like a pretty strong “no” to me. Which part aren’t you clear on?
You can always use the API. 
Python is much simple in cases: 1. You don't know how does some lib works. You're debugging and you can see actual sources. Also, you can fix bug in sources in place. 2. Syntax of python is really controversial, and usualy it really hard to read it, but in case it has been done good you can read code really quickly as it's formatted well. 3. Entry point to python is quite small then in to Java(for an example) and there are a lot of articles and howtos in a web. Also, open sources are dictate to write code well. 4. There are a lot of python developer which are using python on work every day. Some of them are ready to help) By my experience in Java world I would to say that Python community more shareble with their own experience then Java developers. There are ununswered questions of stackoverflow about Java. Some of people asking, wait for answer, stop wait and resolve problem by their own without sharing results. That's good, but sad)
Hello. If you are a bot, this is not the place to be testing yo'self.
Pretty clear, plus https://www.yelp.com/robots.txt also tells you unless you are a known search engine do not index this site. 
Are they in 3.7? I don't see them mentioned here: https://docs.python.org/3.7/whatsnew/3.7.html
no I'm not 
&gt; It seems weird to me that they'll prevent any type of bot, spider, etc. on their website when google uses a spider to index their page Google provides them with traffic from searches. You don't. It's not at all equivalent. [Yelp has an API](https://www.yelp.com/developers/documentation/v3). Never web scrape if you can use an API.
Palantir is evil.
techjuice.pk
Try /r/programmerhumor, /r/AskProgramming, /r/AskProgrammers etc. If it is python specific or language specific, use that subreddit.
I have a pygame program that simulates n-body physics and makes pretty backgrounds. Examples: https://imgur.com/gallery/KBTRA Now I'm trying to automatically label which ones look good or bad by statistically analyzinga set of hand labeled good and bad images.
I just do ``1/0``it's just as easy to search for. I don't see a huge benefit of adding ``breakpoint``, but can anyone elaborate?
There's no best way (obviously). But you could try using even for example, `Pygame`. It's not really just for games, you can render images a bit faster (when using python, that is) and since it has support for audio, you can play sounds. Maybe [Pymedia](http://pymedia.org/). Depends on what you need.
Tkinter using a canvas. See you in a few years.
I'm not a lawyer but depending on your location these "By using this site you agree to [...]" licenses can't always be enforced. The EFF has a bit on it: https://www.eff.org/wp/clicks-bind-ways-users-agree-online-terms-service There is also an opinion that if you and your browser can see the data you could copy the data manually so you can use a script as well. That being said, just use the API unless you plan to use the data for illegal purposes and are afraid they use unique markers, but you shouldn't anyway. 
`i + 1` is love
Neat. If you have only one`yield from` you can skip the generator and just `return` the thing: def enumzip(*iterables, start=0): return zip(count(start), *iterables)
I've used it, it's as good as jedi, https://pypi.python.org/pypi/python-language-server is just as good imo. And can be installed with pip. 
I would check mpg123 (run it through subprocess). it might perform well for your project even though it isn't a python package. [This page](http://tech.7starsea.com/post/168) has a nice overview
Nice. I've been putting off buying the book as the new one is out next year. Miguel is a bit of a legend.
That's the same link?
Does it work in other editors besides VS Code?
Using `yield from` is pointless in this instance. You're creating a generator object as your iterator when the resulting `zip` object from a return statement will be iterated over 10-100% faster. It's pointlessly abstract. A generator can do anything but it is pretty clear that a `zip` object will yield tuples. I always cringe when I see `yield from` used to convert a built in iterator like `zip`, `map`, or `itertools.product` into a generator. I know it's bad to say this but the only legitimate use for it in generators is when you really do need an iterator due to memory considerations and use it to yield from iterables like `bytes`. I personally love the idea and performance boost `yield from` added to generators but the only use I've ever found was to yield from successful calls of `os.urandom`. That function has a nonlinear performance cost so it is drastically more efficient to draw 10000+ bytes and then only use what's needed. And it was faster to store the state in a generator than any other method. I was able to nearly double the speed of `random.SystemRandom` with this methof. Tldr: Unless the generator is modifying the data like that on each iteration, a function should just return `iter(data)` if `__next__` is absolutely necessary.
En python, on utilise : is True, après pour la suite de ton explication, sans voir le fichier poker 3.py, je ne vais pas pouvoir t'aider plus que ça
Did you read the PEP? It has a `frozen=true` parameter. 
Are you confident that Tkinter will be around in a few years? (I am not implying it shouldn't)
I guess it might not be if every code repository that Python uses is disabled. Should be around otherwise. Python 1.6 circa 2000 is still available, so I think you have your answer. Will it be maintained? Who knows, but everything you need is already included in Python 3.7, so who cares.
Why do this bytes stuff at all? The HTML is supposed to be text already. Load it as string (unicode) from disk or let your HTTP library decode it. The requests library can do this, it even has `apparent_encoding` property on the Response to detect badly encoded HTML.
from line 68 should (propably) look like: if chose == "check": if DealerZsm &lt; sume1: print ("You won!") if DealerZsm &gt; sume1: print ("You lose :(") Let me know if it helped ;-)
Note that if you [buy the book](https://learn.miguelgrinberg.com/) you can get the full mega tutorial before it's available online.
Oh no, thank you Buddy :O
The last time I had to play audio files from Python (mp3, specifically), I ended up having to use wxPython's built in stuff for playing audio. Other than that I know no other way. 