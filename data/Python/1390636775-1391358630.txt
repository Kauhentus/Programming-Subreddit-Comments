There was a great post on here a day or so ago. Check out Sublime JEDI, Sublime Rope to get started :)
gcc is fine, but I hear clang is also very good for students because it has saner error messages and fancy stuff like colored output. You might want to try that out.
Unwieldy, hard to customize, and ugly.
thanks !
&gt; saner error messages &gt;coloured output I like that. Thanks for the suggestion, I'll definitely try it out.
I'd rather go for the beta of [Sublime 3](http://www.sublimetext.com/3) to get things started. Then you can check into [Anaconda](https://github.com/DamnWidget/anaconda) as your IDE. 
Thanks. But that's how it is in this subreddit. I knew that. And I'm not going to delete my comments, I never do.
Excellent guide. Short, easy, powerful.
As has been pointed out in another response "that's like saying losing your virginity to your step sister is best because she sleeps across the hall." Javascript is a horrible language with inconsistent, scatter-shot design and terrible implicit behaviors. All of which make it appalling for teaching to newbies beyond adding numbers together or making text appear when a form button is pressed. And I say that as someone who has professionally developed in Python and Javascript for many years. I shudder every time I have to go and write a unit test for Javascript code. So much magic.
Sorry, but you are wrong. You can be a perfectly competent, productive programmer without needing to understand the concept of a pointer. You can learn a higher-level language to a sufficient level to understand why "5s" + 3 makes no sense, and you still don't need to know what a pointer is.
Celery rewritten without its actual complexity. (I am not talking of rq)
A pythonic version of SimpleCV.
It's not quite like fog as it doesn't cover anything but AWS, but boto is pretty awesome if you don't need others https://github.com/boto/boto
Python variant that aims to combine the benefits of dynamic (or "duck") typing and static typing: http://www.mypy-lang.org/
I used to use Python for everything I could. Then I witnessed multiple projects by multiple talented developers fail to scale in code size and performance in Python, and now I've mostly switched to Haskell for nontrivial work.
I agree.
This question does not make much sense in the context of python. Buffer overflow is a phenomenon whereby a limited size array is indexed past its extents, and the corresponding memory location is modified. In C this would look something like this: int my_array[10]; my_array[12] = 42; /* Oops! This is outside the valid range of indexes, but C doesn't care. This will happily corrupt process memory. */ Since python is a higher level language, we do not typically have access to the bare pointers required to perform this operation. Put more succinctly as a counter-question: What do you propose a buffer overflow looks like in python?
requests+beautifulsoup; fiddler helps to see what fields you need to pass in your requests access to pull data directly from the backend sql server would be best though [requests-ntlm](https://github.com/requests/requests-ntlm) if you need to use ntlm authentication
Your statement is incorrect. Python is designed as a production language, by Guido, who worked on ABC also, and was inspired by his experiences with ABC.
Looks interesting I'll check it out thanks. Have also found http://www.tornadoweb.org/en/stable/ which looks good. The great thing about socket.io is that it's so damn easy to get up and running on both the server and client side.
Sublime Text 3 is about as stable as it gets. I personally see no reason *not* to go for it, especially with the small number of nice additions. Pretty much all extensions I've wanted have been ported, and the ST3 versions tend to be better, too.
hard to customize? what? ugly? just change the defaults.
http://docs.celeryproject.org/en/latest/getting-started/introduction.html http://docs.celeryproject.org/en/latest/userguide/monitoring.html https://sandman.readthedocs.org/en/latest/using_sandman.html http://d2rq.org/
"need" and "can" are two different words, my fellow redditor. Although I question your assertion that one can go through his whole programming career without encountering the concept of a pointer, I am not able to refute it. Yes, you might not need to learn pointers, in which case: don't. But if one is asked to learn the concept, and one cannot, then said person has no place in programming. This is what my last statement boiled down to.
When it is a particularly big project, I see python as not the best anyway. Once I am finished my current Python project, I will definitely learn C at least, I feel you certainly need it as a game developer in this modern age. For smaller, more simple tasks where maximum efficiency would be in working time for the creation of the project as opposed to the time it takes to function is more important, Python definitely seems like the best option.
Built something like this awhile ago: http://www.webelements.in/ but had to give it up due to lack of interest. Glad to see someone giving the idea another go, if it picks up steam will def try to support it with some pull requests :)
If you just want to extract data from an Oracle DB at regular intervals , write a SQL Query and add that to the cron job list so that it can run at regular intervals and extract data as needed. Using flask seems like an overkill for such a small task. 
Thank you, I stand corrected. How odd. In my circle of friends, we've always spoken of its origins as an easy-to-learn teaching language that of course wound up being suitable for production, easy to maintain, etc. I've updated my earlier comment now. I still stand confused that its just now getting recognized as a great teaching/starter language. Most every course I see that teaches computer science uses Python. It's always the language I recommend people start with when they ask me how to get started. 
This function could go anywhere. I personally prefer this solution because it doesn't require any tricky import logic (unless the other solution imports everything when the game starts). I also wanted to add, if you have trouble importing files, you could put the level files in the same dir as the file with the loader method and do the following: import os open(os.path.join(os.path.dirname(__file__), "level1.txt"), "r") And if your file only has strings, numbers, lists, and dictionaries &amp; None, True, False, you could use json/simplejson to parse the files into python: json.load(file(os.path.join(os.path.dirname(__file__), "level1.txt"), "r")) 
&gt;your **main** could use argparse, you know it! learn it, love it, it's a nice flexible tool to use that makes code maintenance and management a lot easier. I much prefer `docopt` myself.
I agree that it has been considered an ideal teaching language for some time. I think the factual basis behind the article might be a recent analysis of search engine terms, which now shows that python is one of the top (or perhaps the top) language for the search "&lt;language name&gt; tutorial". FWIW I'm probably being overly pedantic about python not being a teaching language - it's a production language that incorporates ideas from a teaching language to make an awesome and easy to learn production language. 
upvote!
 try: something finally: something_to_defer No?
Pyqtgraph is purely pythonic. I love it, as its qt based and means i can implement most of my analysis quickly into a gui. Import pyqtgraph as pg Pg.plot([2,3,4])
I don't know a lot about Go (this was brought up by a friend as "I wish Python had this feature"), but I think it's mostly a readability thing. So you would do something like open file defer file.close do stuff Instead of having to remember to put it in a finally block. But to be fair, yes, I'm not sure Python really needs this. I just did it for fun.
Sandman looks perfect, thanks! I had looked at Celery but it seemed a bit unintuitive about what it is and what it can do in this application. 
If you don't haven't tried ruby it is pretty much irrelevant. Ruby/Bundle is nice being able to install all of your packages to a certain version with one command. For some reason it is also hell. I'm not saying it is good or bad, it is just exasperating.
It has this already ;) It's called context managers (with ... as ...:) and are trivial to write using something like contextlib.
If it's a readability thing, `with` is much better than `defer`. To be honest, the whole exception support in Go looks awful to me. Anyway, you might want to make `deferred` a list of `(function, args, kwargs)` triples and append to it in `register_defer`. Go doesn't limit you to one `defer` per function.
&gt; Sandman looks perfect, thanks! http://www.jeffknupp.com/blog/2013/08/21/sandman-is-the-top-trending-python-repo-on-github/ http://www.jeffknupp.com/blog/2013/12/20/your-database-just-got-its-own-website/ &gt; I had looked at Celery but it seemed a bit unintuitive about what it is and what it can do in this application. Celery supports scheduled tasks, retries, and concurrency. It's fairly simple: * task broker (a message exchange, most commonly RabbitMQ) * workers (multiprocess) * task functions with @task decorators For monitoring task progress, there's flower (a web-based GUI built with tornado and websockets) and `celery events` (a curses based CLI).
What do you mean? Isn't SimpleCV python only any ways?
Oh wow, thanks for all the input. Definitely been leaving towards yanking out my log code, and need to learn argparse haha.
Thanks, I've been working on it for about 5 years now and use it for all my personal projects, so I don't plan on ever abandoning it.
I've never used *docopt*. How does it compare to *argparse*?
Ok, i agree with some parts: barcharts are probably one of weakest part of mpl. Legend placing outside the axes could be more comfortable. But I never experienced any automatic scale switching. As already mentioned, mpl is VERY flexible, every design is easily added to an Graph. Also agg-produces really nice lines.
How big of sites are you hosting? Because with python the only success I've ever had is ditching shared hosting and going the VPS route. Plenty of options depending on your needs and price range. I personally use linode, wasn't a huge fan of AWS (although on high end sites it might be needed), but have heard great things about DigitalOcean. https://www.digitalocean.com/pricing https://www.linode.com/#plans http://aws.amazon.com/ec2/pricing/
i've gotten to a point where it's pretty straight-forward for me to tweak mpl to generate professional-looking publication-quality plots, so i've been pretty slow to try out these other packages much. out of the half dozen or so that you mentioned, do any stand out in your opinion? why? 
it's pretty straight-forward to implement BH or bonferroni.
i think the advantage over mpl is that the defaults aren't god-awful looking...
&gt;why it's so easy to get started with. (Replying to you but quoting your parent comment, I know.) I think it may also be because Guido (van Rossum, the creator of Python) likes to be clear, a.k.a. explicit. Also see the Zen of Python by starting Python and then doing: import this 
and this one: http://autobahn.ws/python/ 
Twisted and AsyncIO...
It's fine as long as everyone using/reading your code entirely understands what's going on and where things are coming from.
DigitalOcean, 'nuff said.
Good points. But I do thank you for the clarification - I can't stand accidentally spreading misinformation.
Sure, I'll implement that for 150e/hour for you. No deadlines or my performance gets worse, and that'll mean more cost for you
r/programming
Excuse me if I am incorrect, but I believe that you intended to reference **/r/programming**.
Not to seem dismissive, but [the homepage](http://docopt.org/) really neatly explains it. Basically, write the *documentation*. The rest writes itself.
If you are not hosting a big website you can host it for free using [Google App Engine](https://developers.google.com/appengine/docs/python/). It can be a bit limiting since you can only use pure Python based extensions but it's free :)
Platform as a service. Heroku.
Besides SublimeJEDI, check out SublimeLinter for inline static analysis. 
Or you can put your own heroku on an EC2: [https://github.com/progrium/dokku] but i'm personally a fan of Google App Engine. Except the database requirements are weird.
Funny you say that about the readme, because I feel the same way. I just whipped the readme together, so I'm not surprised it isn't up to snuff. And I used a file to store the words ('words.txt', in this case) because my plan is to have separate, longer, themed word lists. I *could* hard code the words into the source, and actually I had done it that way originally, but I figured this way made more sense in the long run. The word list that is provided is just an example. I need to put together a proper, themed word list. I want them to be themed so that there is some sort of rhyme or reason to the words you have to solve. I love the idea of grabbing the data from some sort of dictionary API, and actually that had crossed my mind, but again, because I want themed word lists, that would be a little more difficult. If I wanted to stick with my themed word lists idea, I'd have to have some way of separating the words out into themed lists. I don't have any brilliant ideas (I rarely do) on how to do that, short of sorting every word manually, which is not going to happen. Anyway, thank you very much for the feedback!
This looks really cool. Did you use pygame? 
+1 for Digital Ocean unless you qualify for the AWS free tier, then go with AWS.
Been using [webfaction](https://www.webfaction.com/) for years and much happily!
Thanks! No pygame. We are using our own engine: http://www.bytebucket.org/duangle .
Here is an example: foo = "hello.txt" with open(foo, "w") as file: file.write("Hello, World!") # no need to close the file; it is done automatically
If a variable is outside of a function or class, it is a global variable. In general, you should be avoiding these. However, it's not really that big of a deal (especially in cases like yours). 
I don't mind at all. Please do. In fact, since my code is open source, you can use any part of the program you want for whatever you want. If there is some part of my code you don't get, and you want me to explain, I can try my best to do so. I have to warn you though, that I am not the greatest at explaining things. I tried to check out your code, but the link seems to be broken. 
&gt;The bot is purposefully a little fuzzy on this due to the large number of people that can't find the bracket keys on their keyboards ಠ_ಠ Why not "(LOOKING), (OFFERING), (ROOMING)" instead of brackets? Simplicity of use for the end-user should be above-all.
Any virtual private server, by definition, will allow you to run any version of Python (or any other software) that you want. A few that I'd recommend are: http://ramnode.com/ (use the promo code IRC33 for 33% off) http://digitalocean.com/ But the list goes on and on. 
Those repos are awesome! CFFI everywhere! Bookmarked.
In Centos/RHEL you can `make altinstall` any version of Python you want. I'm also not sure that Red Hat has a 'deal with PHP'--the PHP version in the current RHEL was superseded almost four years ago. Red Hat just relies on a lot of Python code that isn't compatible with 2.7 or 3.
You can have all the versions of Python installed side by side and cooperate in any system. Your system could easily use 2.6, 2.7 or even 2.5, while your application itself can use 3.3, play dangerous with 3.4 or stay legacy at 2.2-odd. Consider looking at virtual environments and sandboxing. P.S. Reading your answers it looks like you’re playing around rather than seriously evaluating the suggestions. Many of the suggestions are just fine. P.S.S. [PythonAnywhere](https://www.pythonanywhere.com/details/hosting) probably comes as close as it can adhering to hosting definition.
I would recommend [Webfaction](https://docs.webfaction.com/software/python.html), the host that I use. It's not a VPS, they use Centos, but have Python 2.4-3.3 installed, you don't have to worry about security patches at OS level (though you will need to keep your own frameworks and libs patched), you can serve static media using `nginx`and run just about any Python server-side framework, you have databases, your own SSL certs, full SSH access etc, all for $9.50 per month which is excellent value for money IMO. You can run your own Redis, memcached, etc. The support is great, too.
They offer [Google Cloud SQL](https://developers.google.com/cloud-sql/) which can be used at any place where MySQL can be used.
You made a neat concept video but I don't see any gameplay footage to show that off any of that. I just see some weird shapes that might be procedural. edit: "to show that off any of that"... upon reading it again, that sounds really weird. Must have been late. Should be something like "to show off any of your concepts in the game.". Sorry. So no. Good luck though.
Another approach, the one I used for WebElements, is to write a html parsing library that exposes the html document with this as the python-side interface. Designers just write html, and then developers have the task of any server side logic. It worked extremely well for the large project I was working on at the time. 
Cheers! Jeez I must have been bloody blind when I was researching this a few months ago!
I work on a 600kloc codebase. It works fine. What do you mean by "fail to scale in code size"? The performance though isn't super. But we're optimizing for programmer productivity anyway since we're not really CPU constrained in our domain anyway... YMMV
Have you tried cython? PyPy? numba?
Look at http://nimrod-lang.org Or better yet, just install PyCharm and let the editor figure out all the type problems as you type anyway. It's the best of both worlds.
That's mostly why I've stuck with linode. Bandwith seems cheap. Also I've never had to deal with customer support, but I've heard the support experience with them is great. I've also heard the same for DO, but they sound like their off the table.
Thanks :). Very good! Enjoy!
Thanks a lot :)!
Looked at the other videos. Can't decide if it's a game with inspiration from psytrance or a psytrance music video with gameplay elements in it. Whatever it is I like it. 
Eh, I don't vote for games based on what language they're written in.
Do you have any issues with installing python 2.7.x on red hat/cent os? 
Found this: https://pypi.python.org/pypi/blessings
Every other week there is a post about decorators. I honestly have no idea what's so complicated about decorators. Why do they get so much attention? It's just syntactical sugar. 
Yup. I did vote anyway, but I honestly don't understand how (and why) are they going to pass Greenlight at such an early stage, without having at least 10% of concept presented on footage. As an enthusiast in procedural games, I'm looking forward to seeing more.
If digital ocean is too small, it's time for you to move into dedicated hosting - a quality single processor quad core E3 Xeon system will run you a couple hundred bucks a month, and you can run whatever you want on it! From the replies in this thread it seems like you're dead set on everything being bad (DO's bandwidth is pretty cheap - 1TB for $5 is not expensive). Further, AWS works great for some extremely high resource clients, aside from the potential for bad neighbors, I doubt they significantly throttle. It really comes down to you having this odd notion of some anti python conspiracy - any host where you get root access will allow you the ability to run any version of Python you want for your web apps, if you're not capable of pulling that off, I would recommend paying someone who can, it's not hard. 
Not only is that insane (who have you tried?), but there's not an anti python conspiracy in CentOS, perhaps if you were to actually do some google searches, you'd see you can install another version alongside what you have now. 
There are only a few hosts which have the infrastructure and backend to allow scaling like that, the primary being AWS. The majority of hosts don't have the ability to automatically put up and tear down instances at the drop of a hat like that. Rackspace, AWS and Azure come to mind, as well as (to a lesser extent) Digital Ocean. That being said, if you have a base level of traffic, a dedicated server will give you MUCH more bang for your buck. It really sounds like you want AWS. 
&gt; If digital ocean is too small, it's time for you to move into dedicated hosting No, not until you've tried other VP hosting providers. DO does not give you much cpu space and other providers, Linode for example, give you quite a bit more. There are few reasons to use a fully dedicated server today and when you do think you need one load balancing is often cheaper/higher performance.
We paid the steam fee a few months ago ($100) and submitted our concept idea there. But it was pointless. We got a little bit feedback. Nothing more. There is no early access category. A few days ago we heard that Valve wants to get rid of Greenlight. This $100 should be well spent for the sake of the founders and the game. Now others will decide what's going to happen. Concerning the early stage, we had no choice (unemployment etc.) and had to start early with our crowdfunding campaign. Timing isn't always perfect. We will make up for it. Thanks a lot for your vote!
Well, the code was large. The failure to scale in code size was that despite relatively healthy unit test practices, coverage was far from comprehensive. Changing code reliably was very expensive. Getting new people to understand any small piece of the project took longer than it should, etc.
&gt; Static type checking is usually an aid instead of an annoyance though. So say the partisans of static typing. I think it's telling, though, that the most exciting projects generally seem to be dynamically typed. Even C++ to a great extent frees itself from a lot of type checking issues with templates, and Java and C# have tried to imitate that. I understand why you want C and C++ to be statically typed, but outside of the bit-twiddling domain, it doesn't buy you very much, if anything. The inconvenience of it (you really do have to conform your code to the type checker, which frequently leads to code duplication), is not worth what it gives you; I would only take a similar type of inconvenience for something much more valuable, like the ability to precisely determine which code is insufficiently covered by unit tests.
Almost no-one is processor constrained these days. For anything does really big computation, you'll want to parallelise anyway. Pretty much the only truly CPU constrained applications these days are academic computational work (there isn't the budget to buy in new computers all the time), or stuff that has to do a bunch of calculations (probably media-related, probably a game) on a single device.
It would be really nice if there were a new version which was backwards compatible, but also worked out all the weird kinks. As the language grows in the sophistication of its uses and users, this seems more and more desirable.
Well, it depends for what. If you sampled 500 people to find out about the features in human languages, you would have to pick those 500 people very carefully to capture the full range of human language. OTOH if you want to find out about the possible eye colors in the human population, that would be huge.
What're your bandwidth requirements?
They have an API for creating new instances.
Pre-emptive optimization something something.
What's the 1%?
C . :)
I'm a professional dev myself; I know the metrics of what we need better than you do. 
I will give you my thoughts on two I don't particularly like: * Plotly - requires sending your data to a third party for plotting. Yes, the examples look sexy as hell, but I cannot use a solution which requires sending data out of the network * Bokeh - I like what they are doing with the API, but do I really need to run a webserver just to plot things? Also since everything is designed to run in a browser, you have to do some hacks to save a static image you can share with others. Edit: Take a look at [prettyplotlib](https://github.com/olgabot/prettyplotlib), she changed some of the default ugliness of MPL into something much nicer. I don't agree with everything (the legend changes bother me), but it is an easy way to get prettier plots without much work.
I've had so-so luck with nbconvert. Also, it seems like the authors are digging their heels in and don't want to support some seemingly common-sense use cases (default behavior for slides, excluding input cells (really want this when presenting to non-programmers)). Yes, you can tweak things yourself, but this should be included in base.
awsome thx for that :)
I mentioned this elsewhere, but you should try out [prettyplotlib](https://github.com/olgabot/prettyplotlib). Some minor cosmetic changes to MPL that make a huge difference in the attractiveness of the plots.
Seaborn. I'm amazed by the work people are doing on all of these projects but Seaborn stands out for making complicated things simple: sns.coefplot("tip ~ day + time * size", tips) This is from one of the excellent tutorials. It runs a regression on your data and plots the effects of each factor, labels everything real nice and even chooses pretty colors. You can see a lot more here: http://nbviewer.ipython.org/github/mwaskom/seaborn/blob/master/examples/linear_models.ipynb
or open("level{}.txt".format(level_number), "w") 
i may be wrong but if you want to store the level and access it everywhere to me it makes sense to add it in `__init__.py`. if your `__init__.py` has something like this: `level = get_level()` then you could do: `from game import level`. provided you follow the structure mentioned above. If you have a look at my game here it may help you https://github.com/papaloizouc/chess/tree/2e1e3719ba2527422c11937da90e75aceb621c33. Its not too much code so you should be able to understand it. note i dont claim to do it right but i think i do. Also dont use `import *` its bad
suds isn't really that bad...
I felt the same way. I was interested, but I need to something beyond the the phrase regarding being "99% Python" to get into it. I don't need promo vids (as a Python enthusiast), I need to see gameplay.
Well they did create an open source engine, so I guess that's a plus.
Why do all the packages say "best used with PyPy"? Is there anything wrong with using CPython?
Definitely impressed by the concept; I think that having an open world game where you can then play through the world you changed is something utterly brilliant and totally deserving of my money. I am a bit offset by the lack of proper in-game footage though, am wondering if there's anywhere I could see more of that, just to get a feel for how this works. It's a very ambitious goal, just like to see if the concrete foundation has been poured yet. Other than that though, when does the Early Bird discount on your guy's site end? Need to know when I should throw my money at you. =P EDIT: So I found your Youtube page, good stuff, watching it now. 
I'd say speed?
Out of curiousity, any benchmarks? Python has a lot of memory overhead with object creation (without use of slots etc).
This game looks brilliantly inspired, guys! Thanks for the open engine as well, fantastic stuff. Any chance you'd be interested in talking about the engine for an article on our blog? Wish you lots and lots of luck.
Sqlplus and cron/windows task scheduler is sufficient for me. 
Very rich people?
http://kivy.org/#home
CFFI is convenient, but is really slow in CPython. In PyPy it is the "native" interface and gets jitted right into your code.
You can also try /r/botrequests if this post doesn't pan out.
Well, one thing I really like about statically typed languages is the relative ease of learning the ins and outs of libraries. I find it easier to pick up new libraries without consulting the documentation every five minutes in Java and C# simply because IDEs can help suggest the correct methods and the type checker assures me that the return value of a method/API call is exactly the object that I need in a certain case and that I wont get a runtime exception. Thorough unit testing would help in that situation though, like you said.
 from turtle import * reset() speed('fastest') angle = 0.1 depl = 0.1 while True : angle += 0.5 depl += 0.005 forward(depl) left(angle) from this blog (http://www.apprendre-en-ligne.net/bloginfo/index.php/Python)
&gt; ... configuration completely controlled and managed using Salt. How is Salt performing compared to old Chef based configuration ?
This seems too good to be true. How could this have been missed? However, I have no real evidence either way. Does anyone know if there are any major drawbacks?
You didn't enter anything when prompted. `age = raw_input("22")` for example prints `"22"` and waits for your input, if you just press enter it will assume you didn't enter anything and will assign empty string to `age`. You can also use `age=raw_input("Enter your age")`
And what *are* those metrics?
 from joblib import Parallel, delayed Parallel(n_jobs=1)(delayed(my_fn)(*args) for args in arg_list) Ok, so two lines, but [joblib](http://pythonhosted.org/joblib/) is seriously awesome.
SimpleCV is pretty much straight python, but it's not very *pythonic*. There are a lot of strange design decisions that were made, such as returning `None` from methods such as `Image.findBlobs` when there are no results. This leads to a lot of type-checking boilerplate. Another example is their use of getter methods when a property is called for. My understanding is that there's a version 2.0 coming out soon that is supposed to address some of these issues.
So... I can just replace all my for loops with map using this method... that fantastic!!
Thank you :). Just write us a mail. Currently new alpha releases are priority. We will answer as soon as possible.
Thank you! Not sure yet when the discount will end. Might be three more months or less/more. Great, you found our Youtube page :). There will be more in-game footage in the future. We are working hard on it right now. Thanks for the support!
I dont like how he uses producer-consumer problem, when describing traditional approach, and doesn't implement it using his map 'one-liner' What's the point of the first example then?
It absolutely is. And is there some reason everyone is being horribly miserly with the thumbs-up? I see all kinds of boring, uninspired games on Steam. Surely this has more merit than those.
Thanks a lot! We can keep developing with your support.
&gt; At which point the answer is "Write something to scratch an itch of yours", because that's how the best software gets written. Firstly citation needed and secondly who said anything about best? OP is probably aiming for useful rather than revolutionary, top-draw python library. &gt;The point still stands that there aren't any Python libraries I want that don't already exist. Then why comment? Unless, for some reason, you were purposely trying to look like a knob
My only poke is about reduntant comments: &gt;# Load the properties &gt;saved_props = load_properties() &gt; # Not a valid post &gt; if not valid_post: From what I saw your code does good job at telling its intent, so don't waste time writing "cpt. obvious" comments. :)
**Don't Bore Us, Get to the Chorus!** In order for a kid to learn a system, he has to do something very interesting, very fast with that system. [Games can be fun.](http://elm-lang.org/edit/examples/Intermediate/Mario.elm) For me it was the BGI interface in Turbo Pascal. For my kid brother, almost 20 years later, it was pyGame. The recipe is the same. Give kids better abstractions, better tools. The kids today don't live in the world of the text-based user interfaces we saw 30 years ago. They live in a media rich, interconnected world. They will not see magic in "print 1+1" but they will see magic in writing text to program a rich multi-media world where their program can interact with other programs. 
As noted in this link the article is deceptive. Threading in python will not help you with CPU bound tasks because of the GIL. The reason the image example was faster was because it was often IO bound.
Haha sorry, an intro student at my university has been talking to me about how to learn this stuff and wanted to check out the code when I posted it, so I tried to make everything as clear as possible
If any of your loops depend on shared memory, good luck.
Practically speaking, it's like a package manager for python. You can do "pip install &lt;some-package&gt;" to install it on you computer and have it accessible for your python projects
Yeah started doing that in the last commit. I mainly work in Java so I'm still fuzzy on Python's relaxed approach to global variables, which makes me weary of more methods haha
[`concurrent.futures`][1] is the way to go. There’s a [backport package][2] for below 3.2 as well. from concurrent.futures import ThreadPoolExecutor from urllib.request import urlopen with ThreadPoolExecutor(4) as executor: results = executor.map(urlopen, urls) [1]: http://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures [2]: https://pypi.python.org/pypi/futures
Have you tried suds? It is pretty fantastic at just pointing it to a SOAP api and easily consuming it.
SockJS works quite nicely, this is what I use in a project to be able to do site-wide announcements (very small internal system) https://gist.github.com/flexd/5037147c7edc12aef566 Allows me to just publish to a redis pubsub to display stuff or reload the page on all connected clients :-)
ah yeah there is that. But I could probably sort things out in a connected method. hmmm. Something to think about at least.
[shoes](http://shoesrb.com/)
I came to the comments to say exactly this. Thanks for beating me to it! concurrent.futures is awesome
You are 100% correct. I (and most of my friends) got into programming because computers didn't do much years ago. So we were forced to figure it out ourselves. You are also probably correct that robots are the next frontier for nw programmers as many robots are fairly useless and in need of improvement. 
Just like everything in Python, this was an absolute nightmare to get installed. Once I did though, it was pretty awesome. Thanks!
It's all about asyncio 
Thanks. Seaborn was the one i was most inclined to try. I will take a look after i defend in a few weeks...
i think you should post here http://www.reddit.com/r/learnpython
Thanks. I was really bothered by that aspect of plotly too. I will check out prettyplotlib, thanks.
Notebooks are so awesome, and you can even use cython and R through them
Thanks for the advice!
The article is using multiple processes, not multiple threads. Objects aren't shared across processes. Rather, their copied. Each process has a separate GIL. Thus, `multiprocessing` really will help you in CPU bound tasks.
A library providing a foreign function interface to C code. It's much nicer than ctypes and works both on CPython as well as PyPy. On PyPy the jit is able to remove nearly all the overhead so performance is close to a native C call. See https://pypi.python.org/pypi/cffi/0.8.1
Benchmark comparison of FLANN/ANNOY (Spotify's ANN lib)/Yahoo! LSH/... at http://radimrehurek.com/2013/12/performance-shootout-of-nearest-neighbours-contestants/
To be honest, the PyPI infrastructure has so few nodes that it's basically impossible to tell any difference one way or the other. Chef is still in use by the rest of the python.org infrastructure and pretty much the only reason we switched PyPI itself was that the person doing the bulk of the work was more familiar with it and thus could complete things faster than he could with Chef due to his relative unfamiliarity.
Please please please give feedback (here or on Github) on the difficulties you had to install MoviePy. It's really important, I suspect many people get discouraged by the installation. Making the installation run smoothly on most platforms is priority #1.
Sure absolutely. The biggest problem I had was getting pygame installed (which was required by "moviepy/audio/io/preview.py"). I tried to install with PIP, but I kept getting this error: You are installing a potentially insecure and unverifiable file. Future versions of pip will default to disallowing insecure files. HTTP error 400 while getting http://www.pygame.org/../../ftp/pygame-1.6.2.tar.bz2 (from http://www.pygame.org/download.shtml) Could not install requirement pygame because of error HTTP Error 400: Bad Request The most frustrating thing about it was I didn't even care about audio. EDIT: I'm using OS X 10.9. I've installed python via brew. As a solution, I ended up being forced to clone the pygame repo by self and use brew to install several of pygame's dependencies (sdl, sdl_image, portmidi, etc).
Is there a way to use generators instead of `map()`?
That one is discontinued, unsupported. Stay away. Summary of other "stay away" packages and the current ANN@Python landscape: http://radimrehurek.com/2013/12/performance-shootout-of-nearest-neighbours-contestants/
second time in a month for this article, tells me there are lots of python folks not familiar with stuff that is in the std lib. (concurrent.futures) which is unfortunate. 
http://www.php.net/manual/en/types.comparisons.php PHP needs to die plain and simple.
you can give map an iterating input if that is what you mean, But there is no point in map having an iterable output if it is multithreaded as far as I can tell.
Whoops, yes I missed that he switched to using multiprocessing during the article. I was mostly referring to [this thread](http://www.reddit.com/r/Python/comments/1tyzw3/parallelism_in_one_line/cecwakd).
Ever since list comprehension support was added, I've found `map()` to be a bit un-Pythonic. I like the idea of something like this: results = parallel(urlopen(u) for u in urls) I suppose I could write a wrapper, but I was hoping something close to this might be builtin. 
I don't use thread or multiprocessing in python. I go for gevent (or asyncio, eventlet, ...) in a single process. Then i design my code to be able to spawn several times my process to parallelize (for instance having workers and a central queue such as redis or rabbitmq). I rely on a process manager to spawn extra processes (supervisord). If it's done well, it keeps the code easy to read and maintain and it avoids problem with GIL.
I wholeheartedly agree. I'd also add that "you can lead a horse to water, but you can't make him drink". Some kids just aren't curious. Some kids just aren't interested in computers. Some kids are just dumb. I'm not saying these kids should be completely cast aside by society, but your job isn't to get every last child hooked on programming. To put it another way, there's a difference between ignoring kids who aren't interested and ignoring kids who aren't understanding what you're showing them. It's okay to do the former.
Thank you, you just found a real bug (a line I thought I had erased). It is now fixed (I hope): Pygame is totally optional again. Pygame is indeed optional, and things should go smoothly when it is not installed... BUT it is very useful, not only for audio. With pygame, if you replace `to_gif(...)` by `preview(...)` you will get a live preview of your clip, which is faster than converting it to gif and checking. And during the preview, if you click somewhere in the picutre, it will give you the time, the position, the color of the click. 
That makes total sense, my use case is a bit more in depth because it's processing the data and creating reports out of the extracts, and in some cases auto emailing a file to a predefined distribution list. We have an excel document that currently performs these tasks and it's clunky and hard to manage and can only do one thing at once...
Nex time try not to be a mad cunt. xD
a wrapper around rsync? not very useful IMO
Hey thanks a lot! On a side note, it sounds like pygame does provide value to the framework, though I agree with having it optional. Is their an easy way for people to get it installed? If so, documenting that would also be a big help. 
my pi + pms is great.
You gotta find topics that they might find [interesting](http://www.reddit.com/r/raspberry_pi/comments/1w5emx/simple_project_to_do_with_your_kids_that_shows/)! :)
Maybe it depends on the OS. I am on Ubuntu... basically I click on "pygame" in the software manager and it works. I will write a few words in the docs for platform-specific installations.
&gt;I don't doubt that some kids seam this way BUT they are not. I think you're misinterpreting my point. Of course some kids seem dull/uninterested/interested-in-other-things and actually aren't. On the other hand, some legitimately *are*. My point was just that the OP shouldn't feel compelled to help *everybody*, because that's an exercise in futility. Again, for clarity, what you say is true, but not everybody is interested in computers and **that's ok, too.**
Well, I find that python argument names are usually sufficiently descriptive. In any case, I develop using Xemacs, so I obviously don't care for such hints, and don't miss them, although I know many people do like them. &gt; The type checker assures me that the return value of a method/API call is exactly the object that I need in a certain case and that I wont get a runtime exception. It really doesn't, though. It only protects you from missing methods-type exceptions. Plus, as a programmer in any language you need to understand the types throughout your program. I really think you are getting a lot less value out of static type systems than you think you are.
The things that got me into programming are: 1. Game making. You've got programs like the RPGMaker series for basic game logic, and you've got libraries galore for almost every language under the sun for something a little more involved. This is a good way to teach object-oriented programming concepts, especially separation of concerns. 2. Hacking. I remember being very young and getting into AOL punters. There was some source code out there for some of them, and it was fascinating. Then there was software cracking. This kind of thing is great for teaching system introspection, and the inner-workings of software that they use every day. 3. Web development. This is probably most accessible of all, since every computer comes with the tools necessary. Javascript is great for kids, since it's easy enough to put together something fast enough to maintain their attention.
How do you stop a script that uses multiprocessing.Pool? It's always been a bit of a mystery to me why Ctrl+C doesn't work. Frankly I very much prefer Go's method of doing parallelism -- goroutines and channels.
Lol, thanks brother. =P
So much about programming is about knowing how to use the right tool. There are hundreds of different ways to display something in 3D and you have to know which to use. These tools all have limitations which a beginner will not be able to guess at. When you reach the limitation the answer is always to use a different tool that is more native, hardware accelerated, dynamic/static etc. This hides the fact that computers are an impossibly powerful machine. But whenever you actually try to use that power it is always far too slow! However clever the Excel macro the damn thing will never run on more than a trivial amount of data. To encourage imagination and play it should always run. We need to be able to define data and logic as simply as possible and let the machine pick the best way to execute or visualize it. In that sense kids face exactly the same problem as adults; they just have less invested in knowing the tools. 
Is there not any video of gameplay somewhere...?
Talking about factorials, I also quite like: from operator import mul #from functools import reduce # if you're using Python 3 def factorial(n): return reduce(mul, range(1, n+1), 1) But pyDatalog can do much more of course.
+1 for the "Subjective TL;DR summary of the descriptions below." table ◕‿◕
Anybody know how to handle the WindowsError [Error 5] Access is denied?
I like the idea of this, but the level of abstraction that Python can provide only seems useful if you know some HTML. I only know the tiniest bit of HTML and I don't really want to invest lots of time to learn it (mostly out of laziness). Just my $0.02. This is probably the duck's nuts for anyone who has to spend lots of time hacking out HTML boilerplate. 
It still is a very useful thing to know for IO bound uses. I remember before seeing this, I wrote that huge chunk of code that's shown in the article every time and it was really painful. With this, it's much cleaner and faster to get basic threading going.
go (and julia, erlang, and a few other languages) have really nice interfaces to parallelism, based on CSP. python has a CSP add-on you can use: https://github.com/python-concurrency/python-csp i've used it, very easy, very flexible. i think i used it wrong since i had my system explode after a while (process leaks? mem leaks? dunno, i did something wrong i suspect) but migrating my code to it was super easy, only a few lines changed (once i imported csp).
On this regard you have to consider the following: * the standard library is huge; * `concurrent.futures` is kind of a recent addition; * most people still use Python versions that don't have it on the standard library. 
Seam?
I don't know I looked at their 3 videos on greenlight and on their website but I didn't find anything that looked like it could be something they have described in their concept video. So if you find one that's showing off more than their maybe procedural structures I'll happily watch it.
They have some movement videos as well, though there is little 'gameplay', this is true. I'd give them a vote, as it looks interesting and something I may eventually like, but I wouldn't preorder it yet.
Yeah a workaround can be what you're saying, but I was looking for a more native solution. When one's working with 100k nodes then a complete graph can be a liability.
We accepted bitcoins when we used our own payment system. Sadly, the Humble Widget doesn't accept them (atm). BUT - we are (impatiently :D ) waiting in the queue for the official Humble Store. Humble Store accepts bitcoins.
Thanks for your vote! We are working on more gameplay right now and we know how urgent this is. We will make up for it. The look and feel of Nowhere is mostly done. Now we can focus 100% on gameplay.
We are constantly releasing new videos and alpha versions. If you are interesting in the development (and more gamplay), you can follow our blog: http://blog.duangle.com/ , youtube channel: http://www.youtube.com/user/duangle?feature=watch and/or the duangle twitter account https://twitter.com/duangle . If you have more questions and opinions we would like to invite you to our IRC freenode channel #duangle and/or the official NOWHERE forum http://nowherians.com/ .
is your wife 'python' powered too ?
See the explanation about what appears to be the movement system is missing in the gameplay demo video on greenlight. Also the rest does look interesting but it's lacking context. Why am I drawning these shapes? Thanks for updating though!
Thanks a lot for your advice. We will focus on new alpha releases. We don't want to talk/write a lot. Realisation is king!
Payment on completion, I trust?
 import time as sofa sofa.sleep()
"Sigh, ok, fine. One photo."
Have you considered using regex or some kind of lexer/parser to do your string validations? It's much more flexible than doing this: valid_tags = [ "[looking]", "[offering]", "[rooming]", "{looking}", "{offering}", "{rooming}", "(looking)", "(offering)", "(rooming)"] 
I'm sure there's a PEP that designates this as the official Python programmer sleeping setup.
I have, it's just that regexes are black magic to me. Relevant: http://xkcd.com/1171/
[Image](http://imgs.xkcd.com/comics/perl_problems.png) **Title:** Perl Problems **Title-text:** To generate #1 albums, 'jay --help' recommends the -z flag. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=1171#Explanation) **Stats:** This comic has been referenced 6 time(s), representing 0.059% of referenced xkcds. --- ^[Questions/Problems](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Website](http://xkcdref.info/statistics/)
Uhhhhhh
none of those "reasons" justify anything. 
Thanks. :)
Simulated annealing is a good approach as well
How is this fucking relevant? Seriously, take this shit elsewhere
such useful
stupid
seriously, reading comprehension..... look into it. 
&gt; I don't use thread or multiprocessing in python. So?
Great, #1. I just downloaded UDK and show them how to move around. Their respond were encouraging, one said, "Hey, it's look just like the game earlier". I replied, "Yep, but here, we can programmed this thing". #2. How old are you when in this hacking and cracking stuff? #3. I haven't tried to use Web for kids, will do and inspect their reaction 
virtual machines. google virtualbox or vmware. 
Except virtualenv doesn't manage python versions. It provides a sandbox for developing, a sandbox for which you have to specify the python version when you create it.
/r/ProgrammerHumor
As a matter of fact, I have seriously began the development of a Python teaching aid for kid using Panda3D : http://tinyurl.com/pythonthusiast-programmedme-1 Simply imagine it's a Logo Turtle, but with a interactive 3D visualization. I think I got to refine this tool to add game goal, level and another interactivity to make it really functional. Currently it's just a POC of what I want to accomplished
If there isn't, it should be PEP 3053... Or, you know, in hexadecimal, PEP 0xBED...
&gt; But as far I know It doesn't work on Windows or come with pip, so it's useless 
something useful to the padawan(not whatever random redditors suggest). I believe that is the point of your homework assignment. 
Currently I am exploring PySide/PyQt on Android. Still, users would have to download separate Qt library manager, named Ministro. I don't like this separation. It just confusing user. But for the Kivy part, I am quite agreed. It GUI is not native, in the sense that Kivy draw them by itself (using Pygame if I am not mistaken). But, to date, I think it's the best that we have Just published Kivy introduction here : http://tinyurl.com/pythonthusiast-kivy-1 Hope it help!
It must be pretty uncomfortable, since it would have to have a [*low thread count*.](http://fc00.deviantart.net/fs70/f/2013/034/c/5/oh_ho_ho_tumblr_by_freckled_kat-d5tphxn.gif)
Hey, are you guys planning on starting a subreddit for Nowhere? Was going do it myself but hate to intrude on your guy's turf if you have a plan already.
Have you looked at [OpenCV](http://docs.opencv.org/trunk/doc/py_tutorials/py_tutorials.html)? I've used it to write an object tracking program in Python using a webcam and color thresholds to identify objects. [This blog post](http://opencvpython.blogspot.com/2012/06/hi-this-article-is-tutorial-which-try.html) got me most of the way there.
Try using blob detection with OpenCV with the python bindings. Or SimpleCV which is actually simpler to use from Python. - http://simplecv.org/
 Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: sleep() takes exactly 1 argument (0 given)
I wish OpenCV had a library for Python 3+ (and many of other of the Scientific libraries)
For the first two, I have the solution. I've written free Python programming books aimed at complete beginners. Both can be downloaded from http://inventwithpython.com "Invent Your Own Computer Games with Python" teaches how to make games. It starts off with text-only games that use ascii art, but then moves on to Pygame for 2D graphics. There's a sequel "Making Games with Python &amp; Pygame" that goes into more detail with Pygame. "Hacking Secret Ciphers with Python" is also aimed at complete beginners, and covers several classical ciphers as well as writing programs that can automatically break those ciphers.
 import time as no til_brooklyn = 1 no.sleep(til_brooklyn)
Dynamic typing + loose typing with a Java like syntax will always seem easy.
http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/
Your pillow has angered people for some reason. I find that amusing.
Site seems to have suffered a "reddit hug of death"?
Tell your wife that we're sorry.
:) silly mistake... fixed it. :) (contrary to popular beliefs, we don't speak English on Coruscant)
This sounds like it's begging for a typical AAA approach: Authentication (is this user/ssh key combination correct?), Authorization (is this user allowed to login to THIS machine?), and Auditing (is the Authentication/Authorization information up to date on this machine, and show me who has logged in). An approach that I use, which has scaled to 1000's of machines, is to (1) centrally track usernames and SSH keys in a central database (eg. LDAP), applying any SSH key policies at this level (2) using this, regularly generate an RPM/DEB containing users SSH keys and account information (uid/gid/realname), (3) using a tool like Chef/Puppet/Ansible/Salt, ensure that the latest version of the package is installed on EVERY SERVER and also distribute a per-machine ACL saying who may login to this machine, and which UNIX groups they get access to, (4) have the RPM/DEB contain a script that uses the account information, ssh keys, and ACL, to add/remove/update accounts., (5) use some centralised logging infrastructure to get login information, and monitor if the account package is out of date. In my RPM, I also supply a default ACL file, as well as ACL groups, which are auto-generated based on the database. The per-machine ACL file can then be as simple as "@support:wheel". This said, if you can pull off a *standard* UNIX-based Kerberos solution instead, go with Kerberos! Don't mess with any Active Directory integration (even commercial offerings) - it's a rabbit hole with a snake curled up at the end of it.
I would love this, i currently use another program which works alright.
Why not? I've always assumed the two were equivalent? Could you please elaborate?
Why is the sofa sleeping? I think you meant Cariocecus.sleep(sofa)
Yes! I have downloaded your work earlier before I start my own Panda3D teaching aid for kids, http://tinyurl.com/pythonthusiast-programmedme-1. Actually, it counted for the factor that made me know that I strive in the correct direction Those are an awesome work!
I don't know if you are writing this, but I'd like to ask a question or two about the treeWidget or the treeView, if you can answer.
"Please honey, PLEEEEASE let me put the computer pillow on the bed" 
Well if you hadn't have "pretended" and written your post then even fewer people would now know. So thank you!
Anaconda is awesome for binary packages, and especially python packages which link to other exotic compiled code. Of course the poster boy for these type of things is the Numpy family, because it of course links to all kinds of C and FORTRAN to produce fast packages. It also has a lot of tooling around managing building stuff other than python. One problem at the moment is that it is way behind on the security front. The very minimum of effort that should be put in for a tool that installs code on your system is to fetch data over TLS with the CA PKI for authentication, which it does not currently do. This has been one of pip's largest improvements over last year or two. You know all your packages are coming exactly from https://pypi.python.org. I could be wrong but I also got the impression that it used hash-based dependency resolution - that is, versions of things are tied to eachother. This is great for exact correct binary dependencies that you know will work, but terrible for general code where you want the latest versions of dependencies to bring security updates, not exact versions that will stay stagnant until all packages are brought up to date. Really, pip and conda both excel at different areas. AFAIK Continuum are working to make conda very ["pip-installable"](https://pypi.python.org/pypi/conda) (and compatible with a normal python.org python) so it shouldn't be hard to get the best of whichever world you need soon, anyway.
Looking forward to throwing this in to the tox mix in the CI at work :)
I think the major reasons that easy_install and eggs are being "left behind" is because they were both mostly firsts in their field [for python]. easy_install as.. an installer, and eggs as a self-contained package format. And being firsts, that meant they had to get all the decisions about installation paths, and defaults, and metadata formats and extensions, all correct first go. They didn't (not that you can ever blame anyone for not getting packaging right the first time). After that, they still got quite good take up, and then you have to support backwards compatibility, and any bad decisions you made are the ones people now expect. Even more frustrating than standards being changed is old ones being broken so your code no longer works. This is one of the biggest sole reasons for the existance of pip and now wheels, to [try to] get things right. wheels are an attempt to get binary distributions in a far better place, and there are now a whole lot of [formal PEPs](https://python-packaging-user-guide.readthedocs.org/en/latest/peps.html) to actually workout successful standards for a second go at useful and extensible metadata; rather than relying on a defacto implementation to define what's accepted. 
I think there was a routing issue for some people.
Haskell is functional programming, while pyDatalog is logic programming : that's not the same thing. Just look at the readability !
when did you try this ? I fixed this problem yesterday (at least I hope). Did you try the last version on github ? Please let me know if you can pip or install with the github sources. If it is not the case can you please send me the error returned. Thanks in advance ! Otherwise, you go into file moviepy.audio.io.preview and you remove the lines that speak about pygame, that should do the trick.
At the moment we prefer it from paypal or amazon. Easier to organize. Hopefully we can accept bitcoins pretty soon. Thank you!
Jealousy ? I am tempted to do one now with an old conference shirt :)
GIL just means no two threads will be executing **Python bytecode** at the same time. C extensions can release the GIL while running thread safe C code. For example NumPy will release GIL for heavy number crunching. So you could be CPU bound because you are doing billion matrix operations but not GIL bound because you could do several of them at the same time in different threads.
So, what's the deal with [this](https://mail.python.org/pipermail/python-committers/2014-January/003015.html)? ('Python 3.4.0 rc1', posted same day by Georg Brandl) EDIT: NVM, as nnyegaard points out, that's not actually what it says. It's just my brain taking a holiday.
Threads are a trainwreck in python because so many libraries have global state that is not thread safe. On top of that, very few libraries even mention if they are thread safe, one way or the other.
Yes, I am writing this, and what can I do to help you?
Ah okay, that makes sense! I suppose this is why most (if not all) builtins are thread-safe... Thanks for the explanation!
Ok, thanks for identifying a new bug (and sorry for that). There was a remaining buggy line. The new source on Github should work (fingers crossed). I have to disconnect now (im at work).
Read again :) "Python 3.3.4 release candidate 1"
Lucky you, my girlfriend is written in [Brainfuck](http://en.wikipedia.org/wiki/Brainfuck)...
delete (damn, another wikibot...)
Okay, that makes a looooooot more sense :)
Pussy-whipped Pythonista, eh?
Every time I'm force to code in PHP I try to do my best but every line hurts, it physically hurts knowing there are such things as Python or Ruby out there. I wish I could be a little mercenary about this and get some cash with PHP but is way over me, I refuse to use such crappy tools for my work.
I taught both my sons to program, and have seen what worked for quite a few others. Here's a few ideas: * Get them accustomed to the command-line early. That can help them later understand that everything isn't about front-end glitter. The easiest way is to get them playing Nethack - they'll learn the keyboard, discover that the best game isn't the shiniest, and enjoy a type of game that's easy for them to recreate. * One of my sons had a great time learning to program his calculator. All the kids in upper math classes have equipment and a need to write code. * Create fun calculations with them. When they were younger we noted that our snail population was doubling. So, we extrapolated how large this population would get in 30, 60, 90 days. Or we developed a calculator that would determine the weight of a giant made of any material. * Reach out to the kids playing chess - they've already got the delayed gratification, patience and focus to handle programming. Write games like tic-tac-toe with them. * Reach out to the english-nerds - some of them will enjoy writing code that analyzes texts - show the similarity between different authors, times, etc. Bottom line: it's easiest with the kids that are already into learning, and don't mind a little geek-stigma, and it's easiest with tasks that have something to do with what they're already interested in.
Reading Armin Ronacher's blog is a reminder that this guy thinks about issues that I won't know exist until 5 years from now. Bless him. 
PHP won't die at this point. We tried, but they won. PHP is getting better in each version. (Disclaimer: I'm also a PHP developer :) )
So what?
I really like the concept, would make for a neat multiplayer/coop experience maybe. But if you were to fail again, maybe go to Kickstarter or indiegogo as soon as you have some gameplay footage
How is pubnub different from say RabbitMQ?
i still don’t get why it’s “pathlib”. sure, there’s others, but why? every package is a library. contextlib, difflib, ftplib, hashlib, idlelib, imaplib, importlib (well, i understand why this is named -lib), lib2to3, nntplib, plistlib, poplib, reprlib, smtplib, telnetlib, urllib, xdrlib
Awesome! I'd like to make a tree that only shows the sub directories of a folder I select, so that i can select several files (or file paths) to go and get info from them. I started with: model = QFileSystemModel() model.setRootPath(QDir.currentPath()) self.tree = QTreeView() self.tree.setModel(model) But it shows me everything in my computer. Also, I can't select the info from the file. I guess I need to use QTreeWidget, but I'm a bit new to Qt and Python, so I don't understand the documentation very well. I can show you the full code on github if you want. Thanks in advance ! :)
If it uses qt is not pure python no?
it's a platform as a service, thus you just post to an endpoint and not worry about the infrastructure underneath, IE, all the reasons to use PAAS over doing it yourself. thats pretty fucking easy, and no amount of down votes proves otherwise. 
They may be avoiding path as a lot of people presumably use it as a variable name.
Haskell... factorial 0 = 1 factorial n = n * factorial (n - 1) print (factorial 3)
Easy, I didn't down vote you. I wasn't sure if pubnub was doing anything else other than being PAAS that was all.
this makes much sense. i’m avoiding to `from os import path` for that exact reason. luckily i’ll not have to look at `os.path` anymore, anyway.
You're right. Pyqt is not pure python, although pyqtgraph advertises as being a pure python library. Pyqtgraph is downloadable for any system, and I have yet to use a system that it didn't work on though. http://stackoverflow.com/questions/1037673/pure-python-gui-library
Hey! I dealt with this about a week ago. What you need is the TreeView method called setRootIndex. model = QFileSystemModel() root_index = model.setRootPath(QDir.currentPath()) self.tree = QTreeView() self.tree.setModel(model) self.tree.setRootIndex(root_index) The call to model.setRootPath doesn't return None. Rather, it returns the root index that we can use for the tree's setRootIndex function. This seems confusing; what does model.setRootPath do then? As we can see from the [documentation](http://srinikom.github.io/pyside-docs/PySide/QtGui/QFileSystemModel.html#PySide.QtGui.PySide.QtGui.QFileSystemModel.setRootPath), it controls what directory to watch for changes in. That is, it watches that directory and emits a rootPathChanged() signal when that directory changes. The setRootIndex method on the tree, then, is what we actually need to use to restrict the TreeView to our specified directory. I hope that helps!
That helps, but I haven't figured out how to select multiple files and get their path when I press a button. I know that the TreeWidget has a currentItem function, but i don't know if it does what I need, and I know I can't use it with the TreeView object.
Think about it this way: Say you have two instances of the class, should they always have the same value for that member? Unless you're 100% sure the answer is yes (i.e. changing it in one place needs to change it for all of the instances), make it an instance variable.
Use the tree.selectedIndexes() method along with the model.filePath method: def get_selected_paths(self): indexes = self.tree.selectedIndexes() file_paths = [self.model.filePath(index) for index in indexes] return file_paths Also, just a tip when working with PyQt/PySide: I know all of the documentation can be a little overwhelming at first, but once you use the framework for a few weeks/months, take some time to peruse the API again. Read the names of objects and methods, and see if they might be of use to you. This helps prevent you from reinventing the wheel, and might also introduce you to something that can make your job easier. Also, even though you wont remember exactly how to do something, you will know where to look the next time you need to do it. I say these things because I remember searching for a long time to answer the questions you just asked, and I felt silly because I could have answered them easily if I just read all of the QFileSystemModel, QTreeView, and QAbstractItemModel pages. Good luck!
Attaching it to the class, associates it with all instances, and using self in the __init__ method, associates it with the current instance. Say you have a zoo, you can have a class animal, with a total as a class variable, and total as an instance variable. Here's a quick example. class animal(): total = 0 def __init__(self, type, total): self.type = type self.total = total animal.total += total elephants = animal("elephant", 3) mice = animal("mice", 5) print elephants.total #prints 3 print mice.total #prints 5 print animal.total #prints 8 So class variables are for information that can be shared with all instances, and instance variables are for things that change for each instance.
This is something that puts me right off BDD. The tests that are written in plain english are best suited for business folks. Business folks are only concerned with tests that relate to what they can see and can repeat. These tests are therefore at much higher level and take so much longer to run because they end up using Selenium. If not used sparingly then they take too long and simply get ignored.
I have a few problems with reading the documentation because: * I'm not native english * I'm still learning OOP, so I get confused easily :( * I can't find decent example code, I have tried ZetCode, but sometimes I get lost... * Even if PySide is used a lot, I can never find help for my problems (except for you now) Well, I've been trying and failing and /r/python and /r/learnpython have been helping me a lot! But yeah, thanks for all the tips :)
pip install [whoosh](https://pypi.python.org/pypi/Whoosh/) Definitely my favorite for building simple text search engines.
PyMC3 has an HMC sampler, and you can represent the model in python instead of as a string. What are the advantages of Stan?
Date are objects, try this import datetime today = datetime.date.today() print today
Yep, when this article got posted a couple of weeks ago, I decided to experiment but needed to get data back. Had to go find another example. Plus I don't care if I need to use a couple more lines, I care that it works and I understand it.
also datetime.datetime.now()
Forked for further appreciation. I will find this useful :)
Does anyone know the reasoning behind this change? Seems un-pythonic to swap out whitespace for function syntax, so I assume there's a technical reason...
See top post. You're using Python 3, which means you need to use print as a function. print(today)
i saw. but it didn't work anyway. seems like i need import more? how i can import all library (datetime, date, deltatime etc.) in one time? import datetime?
[What single-dispatch generic functions mean for you ](http://lukasz.langa.pl/8/single-dispatch-generic-functions/)
The arguments for making print a function are detailed in [PEP 3105](http://www.python.org/dev/peps/pep-3105/).
That is *exactly* what I was looking for. Thanks!
Don't use the term "global class variable", as that's just confusing. What we're dealing with is a class attribute vs. instance attribute. Class attributes are those defined in the body of the class definition, and instance attributes are those assigned as attributes of `self` in a method (or in general, any kind of assignment of an attribute on an instance; `self` in a method is just one common example of that.) Class attributes belong to the class as a whole, and are visible in every instance. If you have some value that's not going to change and which you want exposed on every instance, you should define it as a class attribute. However, since a class attribute looks and feels like an instance attribute, you might think you can modify it by assigning to it, but that's not the case. If you try to assign to a class attribute as if it was an instance attribute, it will be converted to an instance attribute on that particular instance, i.e. the change will not affect the class attribute, and will not be visible on other objects. Example: class Foo: x = 42 instance1 = Foo() instance2 = Foo() print(instance1.x) # 42 print(instance2.x) # 42 instance1.x = 100 print(instance1.x) # 100 print(instance2.x) # 42 Assigning to `instance1.x` created an instance attribute `x` that shadows the class attribute by the same name. But it only exists on that instance, not on others -- that's what it means to be an instance attribute. If you wanted to modify the class attribute, you could do it as `Foo.x = 10`, and then `print(instance2.x)` would print 10 but `print(instance1.x)` would still print 100.
There's nothing preventing you from installing any version of Python on an EC2 instance. Can you provide a link to the documentation you're referring to? Is it the Boto SDK that you're talking about?
You could probably achieve this by writing a simple script in [AutoHotkey](http://ahkscript.org/)
It's import datetime now = datetime.datetime.now() print(now) 
You're welcome. The PEPs are really helpful for looking back on how a feature came about. Most people don't know anything about the PEPs other than PEP 8.
&gt; In fact for a given HTTP request, 4 or 5 models might be accessed, each doing 20-30 lookups Worst case scenario is 150 lookups. Why not Redis?
Importing those explicitly (date, deltatime, etc) just means you don't need to precede them with `datetime.`. As soon as you say `import datetime`, you have access to the entire datetime module.
dont care
it will probably outlast anything someone pays you to build. 
Bit of a slow reply on this one, but without unpinned requirements how do you ensure that all your environments are the same? Running different versions of packages on production, staging, CI, development, etc. is a pretty scary thought.
Gee guys! :v I just woke up .. and there you go! The problem solved! Pardon, previously it already late at night in Indonesia, so I just able to read the reply. :thumb up:
This module isn't just for rounding to certain digits, but for expressing in scientific notation and plus/minus notation. For instance, sigfig.roundit('3.12345','0.0016',crop=10,format='plusminus') would yield '3.1235 +/- 0.0016'. It's more useful for data tables in scientific journals and such. It doesn't have the most widespread use, but I shared it anyway. Thank you though! :)
Truly pythonic image manipulation, where the values output are well defined. Sure we have PIL and Pillow, but they both bind to a C library and whenever I use them I find myself wanting to beat the living shit out of my PC. The returned values are always so inconsistent with reality. For example, I had to write a huge engine for my work that takes an award image template, and fit arbitrary text into 3 boxes. I managed to write the text to the image in ~10 lines of code, but the positioning of the text was always off by varying ratios due to the difference in text height to glyph height. Another 5k lines later I managed to perfect the offset code to shift the text up by the correct ratio of "calculated text height" and actual offset. It ended up taking so long to write that the project got scrapped the same day I completed it.
Well, actually, that's the problem. I got obsession to turn arbitrary / casual / conventional kid into a .. whizkids. And for what I learn, game is the only common door for them to begin have an enthusiasm in software programming. In retrospect, the first time I really curious about computer, is when my computer instructor show me the output of TREE command in DOS. Got to say, not all kids will be thrilled by TREE output. But, ... well, I am thrilled! I do agree that not all kids will have the same intellectual curiosity to start computer programming. But I've got to try though. It won't be a problem though if only 1 out of 5 kids that I teach will finally eager to learn computer programming by themselves. I still enjoyed the teaching experience ;)
Try /r/learnpython
whoa, python "generators" are new to me! Does ruby have anything like that?
&gt; Recently our test suite completion time has crossed the 10 minute line pffft. I've been on projects where the test suite took hours to run. thats what the ci server is for. 
What exactly do you mean by "I am taking the line 4"? Give us a testcase (code that we can actually run) and show us the actual markup that you're trying to parse. 
The output of qresultslxml.txt look like the following: http://tny.cz/945af27c
The code is: http://goo.gl/bhRT0s The Resource Guide PDF is: http://goo.gl/9VNJNH
what a fuckin pussy, you can't even stand by your comment? I will find you and downvote you to hell!!!!
not very convincing honestly. the article is mostly speculation. 
We use a CI server as well. But running tests faster locally is always a good thing (IMHO)
I'm interested to see what you have to say/cover. I'm using PyQt with Twisted at work to build a GNU/Mac/Windows app.
Let's say you're making a game. To animate a character, you need dozens of images. You can store these images in a class attribute or in an instance attribute. But what if you want to create 100 orcs? If you store them in an instance attributes, you'll have 100 copies of them. So, use class instances when the data is the same for all instances. Note that in the case of the orcs, the images are in a class instance, but each orc has an instance variable to index in which image to use. If the game was space invaders where all aliens in a row use the same image, then the index would be a class instance too.
BSsourcefile.html is the html file that I am trying to read. It is the html file that I saved from location: http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html#ParsingHTML. I named the file BSsourcefile.html
I'm asking for its exact contents, not a description of its contents. Even your description does not match your output, which says &lt;!-- saved from url=(0039)http://www.mangaupdates.com/series.html --&gt; I suspect what you've done is saved the source of "view source" to that file, not the actual source of the page you are trying to scrape. View-source is an actual web page (used to give things like syntax highlighting and line numbering and so on) and if you save *that* to a file you will get all that extra stuff like `&lt;td class="webkit-line-number" value="4"&gt;` that is part of the view-source page but not part of the *actual* page. If that were the case it would have nothing to do with BeautifulSoup whatsoever, which is why I'm asking to see the contents of that file, not a description of what you think is there. 
if you do tdd, it's practical to just write a failing test for what you are doing and then code to that, rather than waiting hours for the whole suite to tell you whether you broke anything. 
http://stackoverflow.com/questions/2504494/are-there-something-like-python-generators-in-ruby Might answer your question.
Classes are a way to organize your code into generic, reusable peices. At their best they are generic blueprints for things that will be used over and over again with little modification. The original concept was inspired by independent biological systems or organism unique from other organisms by the set or collection of features (attributes) and abilities (methods). Functions are great to use when data is central to the work being done. Classes are great when you need to represent a collection of attributes and methods that will be used over and over again in other places. Generally if you find your self writing functions inside of functions you should consider writing a class instead. If you only have one function in a class then stick with just writing a function. A good way to move from functions to classes in your programming is to write classes using composition over inheritance. Its covered in Zed Shaw's "python the hardway" and there was a stellar talk on it at the last pycon. 
Ok, I could be wrong, but isn't that the exact same concept as a class? /foo.py is a class, no? and Foo is the method. I'm probably wrong.
AWS is very explicit about only supporting 2.7 for EC elastic beanstalk services.. http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Python.html To quote that page: "you will need to install Python 2.7 or 3.0." Since nobody should be using 3.0, that leaves 2.7 as the only option. 
Thanks for the reply, this is too long of a topic and really deserves a full blog post. The short version, is that it's compromising the installation process with a deployment process. Requirements should designate known dependencies or incompatibilities, not protect you from uncertainty due to untested environments. It would be like designating that your application only works on RedHat but not Ubuntu. When you build (and deploy) your own codebase, these issues rarely surface short of packages becoming obsolete. Deployment is installation. But as soon as you make your package available for consumption (esp. publish to PyPI), those overly defined requirements infect all the other code. It introduces dependency hell, now I'm stuck with the version of `requests` that you designated, rather than the version I need or other packages require. Think of requirements.txt as a recipe. I need the ingredients, but not necessarily the exact kitchen setup you have. For consistency of product, I might want to keep all my kitchens the same, but I wouldn't write that in the recipe.
Yeah, pretty terrible article. 
Interesting.. :) As I said there, I aimed to target Android as the platform but I will explore first on the desktop part of Qt development. Have you ever develop Qt/PyQt/PySide for Android previously? 
Where is the speculation? I didn't see any. or rather any that detracted from the quality of the article
It has generator comprehensions too
Interesting. Being new to python this article goes with my hunch on python. Generators are very interesting and might be good for a problem my company is currently working on. 
So, I think this comes down to us both being right. In a way. What you're saying is true, and I agree with it. A distributable package (like piprot, or requests) should endeavour to be compatible with as wide a range of versions of it's requirements as possible. You'll notice that piprot's setup.py doesn't designate a version number for it's only requirement, requests, for this very reason. I'm, however, coming from a web application background, where ensuring that you're running the same version of packages/requirements on all 16 or 200 (or 2) app servers, is absolutely paramount. The same goes for development and CI environments, and it's the reason why, I believe, everything in your requirements files should be pinned to a version. Obviously there's a lot more that goes into it than just having a requirements file though, especially around ensuring those packages continue to be available. I wrote the initial version of piprot for use internally to quickly find out what was out of date so that we could run our CI against the new versions of any requirements changes. I think it works a treat for that scenario. **tl;dr: yep, distributable packages should avoid pinning requirements, large applications pretty much have to.**
Nice first module! I have a few points of constructive criticism. print "** WARNING:: INTEGER UNCERTAINTY TAKEN AS NUMBER OF "+\ "SIGNIFICANT FIGURES ("+str(unc)+") **" * Concatenating strings looks messy - try the string format operator: "FIGURES (%s)" % unc * I think it would be better to throw an exception than to print a string and return when an argument is not valid. This may seem like a hassle to the caller, but it is much more convenient in the long run. See [ValueError](http://docs.python.org/2/library/exceptions.html#exceptions.ValueError), [TypeError](http://docs.python.org/2/library/exceptions.html#exceptions.TypeError): &gt;exception ValueError &gt;Raised when a built-in operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError. &gt;exception TypeError &gt;Raised when an operation or function is applied to an object of inappropriate type. The associated value is a string giving details about the type mismatch. 
No, `foo` is a `ModuleType` object, and `Foo` is a function in its namespace.
The author, /u/donaldstufft, and I are working on rolling the things he learned into the new version of PyPI called Warehouse (https://github.com/pypa/warehouse). He's asleep at the moment but I'll ask him specifically what's happened to crate.io
In what way is "fast enough" not fast? Edit: replies to my question seem to be missing the point: "fast enough for 99.9% of uses" is somehow not "fast". Sure, you can find the edge cases where it's not fast. I'm not about to say that its performance for serious number/data/string crunching is great - out of the box it's not. That's why we have libraries that extend its functionality (simply and elegantly) to make it super fast in number/data crunching domains. For everyone else it's fast (enough). (And no, not all the standard library is written in C. Not even half.)
Well, it does not do much to support the initial claim. Where are the Google specific details? Do they even use PyPy or Jython?
In the same way my friend's car that maxes out at 80 is not fast but is still fast enough for standard driving.
Python is fast enough if you are using the standard libraries (which are actually written in C). I have had fairly basic cases where I have to search for abnormalities in log files. The format was *nearly* csv and the comparison algorithm was not a standard numpy/scipy which is written in C and/or Fortran. For comparison the Python version ran at about 4s per 100,000 records after optimising by Python experts - a naive Java version ran in 100ms per 100,000 records. Pypy seems great but it does not support python 3 or cpython plugins. I have never seen pypy in a production environment.
I didn't notice it at first, but the article is really a blog post to promote their bootcamp. Interesting.
Back when I did algorithmic challenges for fun, it was very obvious that Python is sloooowww. For any given challenge, Python's performance was measured in seconds, while the equivalent algorithm in C would complete in milliseconds. Python's great for a lot of things - the fact that you run your backend server, perform your analytics, and execute deployment scripts all in a single language is awesome - but its performance is horrendous.
I haven't worked there for a few years now, but last I heard, Google didn't really use Python for anything that needed to be particularly efficient, or even much of anything in production. The one exception is YouTube, which used python for their front-end before Google acquired them (and I believe continues to do so). Google did use Python for parts of the crawl and the search front-end a *long* time ago... more than a decade ago. Other than YouTube, I believe they mostly use it for internal tools and prototypes.
I appreciate the need to keep a consistent environment. I'd suggest that pinning the current version isn't enough since each might depend on others and so on. `pip freeze` can (for the most part) capture all the packages installed. [Ruby's bundler](http://bundler.io) better captures this distinction. You keep a `Gemfile` that records the dependencies of the application, and a `Gemfile.lock` that captures the versions for deployment. Npm equivalently has [shrinkwrap](https://npmjs.org/doc/shrinkwrap.html). I'd suggest keeping a similar distinction for your web apps. a `requirements.txt` for general dependencies and a `deployed_requirements.txt` as the equivalent lockfile generated by `pip freeze`.
Google don't use it to run production apps, they use it to prototype, googles services are built in java/c++.... (Edit syntax)
[Stop Writing Classes](http://www.youtube.com/watch?v=o9pEzgHorH0) [Start Writing More Classes](http://lucumr.pocoo.org/2013/2/13/moar-classes/) [Stop Writing *stupid* Classes](http://me.veekun.com/blog/2013/03/03/the-controller-pattern-is-awful-and-other-oo-heresy/)
There are countless arguments on OOP vs procedural programming out there and even Linus got involved recently - stating that C++ was an awful invention and object models a hindrance later down the release line. What it really boils down to is how you write software/who works with you/what interfaces you need to your code/what your software actually is!! My personal preference is to use classes when I need to create several instances of a similar thing. Each item might have some uniqueness which can be defined when calling the constructors. After using lua last year for some game jam's and some mod scripting I can honestly say that you miss having hard backed OOP from a language like Python very quickly.
Google App Engine originally used Python exclusively, it's still a prioritised language AFAICT.
I would really like to take a crack at this problem, but "nearly csv" and "optimising by python experts" are so vague that they don't really mean anything. Can you describe what nearly csv means, so I can generate some test data and have a try
&gt; and there was a stellar talk on it at the last pycon. Do you have a link? Google only gives me a talk about decorators/properties for that keyword, is that the one you mean? 
You could post your implementations. Chances are, Cython (e.g. pandas) would be faster than Java or Python. The 3900ms (times n) question may be: How long did it take to write it?
Thank you @Donald for replay and all the great work. Can't wait to see warehouse. Good luck.
but javascript bootcamp; not python. even more interesting.
Hah yeah, glad I'm not the only one who picked up on that. It reminds me so much of this : https://www.youtube.com/watch?v=Pv61yEcOqpw 
Thanks for this, I have been wanting to play with Websockets easily in Django and this is a good solution. Better than paying for a PAAS solution imo.
[citation needed] (especially if you consider pypy python)
Having been coding for 25+ years, migration to OOP is very frustrating. I can see the benefits of it but, as mentioned by others, classes are sometimes over thought, overused and abused. This makes adapting to it very confusing. I've looked at some of this code and, frankly, find making any sense out of it useless. Use classes where it helps but don't rely on it totally discounting procedural programming where applicable and more straightforward. When I started working I did so at a telecom company and I was thrust into a team writing code for a new generation of a phone system. We ended up with about 2 million lines of Pascal code, all procedural. Learning OOP right from the start enables easy adaptability, but coming over from precedural programming makes OOP look stupid. In fairness though I haven't coded anything too complex only doing code on an engineering level but I can see the benefits of OOP in gaming and in more complex business applications.
Classes can be inherited, modules cant.. (or can they?) import foo class FooBar(foo.__class__): def do(self, something): print something fb = FooBar() The example above isn't exactly relevant, but its something i tried when i first started out with python. my thinking was something like; if everything is an object, then everything can be subclassed.. right? 
Unfortunately there is no public API for this. Someone first brought this up in 2006 and then it took [literally years](http://social.microsoft.com/Forums/en-US/9ebd7ad6-a460-4a28-9de9-2af63fd4a13e/programatically-setting-the-default-playback-device-and-recording-device?forum=windowspro-audiodevelopment) for someone to figure out how it worked internally. There's a breakdown [here](http://www.daveamenta.com/2011-05/programmatically-or-command-line-change-the-default-sound-playback-device-in-windows-7/) on how it works but getting that into python would require some ctype magic with the compiled dll.
I do, the only problem is when you are trying to make a command line program, the sublimetext console doesn't handle raw_input and the like, the program just ends with an EOF error.
You might want to fix the first sentence: "You getting ready to start are starting a new company." 
Yes, absolutely. There are many ways to improve on this method. The first would be to use a color coherence vector (CCV) instead of a color histogram. It's a little more computationally complex, but can help encode spatial relationships amongst colors. Edge orientation histograms (as you suggested) would be good as well. Although I would first start with basic Haralick texture statistics and see where that got me. From there I would use a Histogram of Oriented Gradients (HoG). Given that the dataset doesn't have any "rotations" present, HoG would be a good choice. Finally, we could break out the big guns and use SIFT/SURF, codebook construction via k-means, and vector quantization. The reason this post uses *only* color histograms is to show what's possible with a little imagination and a little bit of code. We can certainly improve on it and make it much better :-)
Yeah I looked into this before I have to agree, the best way I worked out of doing it was to export all your system audio to a virtual audio device, treat that as an input and route audio out to other sound devices in-app. I didn't bother as it struck me as a bit of a shitty solution.
For the version I would also add that another good option is to simply have a separate version.py file, especially in cases like your linked example where it is computed. That way both the program and setup.py can import it safely and more reusable as a single location for version computation. I totally agree that for hard coded versions regex is the simple way to go. I found that a very easy way to extract those is simply use: import re attrs = dict(re.findall("__([a-z]+)__ = '([^']+)'", &lt;project file as string&gt; )) attrs['version'] # version, license, author, etc... Edit: Forgot to say thanks to you both! You both make great points about python projects that many people do not take into consideration. 
I agree with you. In particular, take a look at [Twiecki's blog post on Bayesian GLMs](http://twiecki.github.io/blog/2013/09/12/bayesian-glms-1/)
I wonder why you didn't think of using rpm/dpkg for packaging on linux given you already have two distinct way to handle installations. 
1) [Raymond Hettinga](https://www.youtube.com/watch?v=HTLu2DFOdTg) great talk for all levels of programmers. 2) [Composition over Inheritance](https://www.youtube.com/watch?v=3MNVP9-hglc) detailed but they go out of there way to avoid dense jargon 3) The "stop writing classes" talk Its boss. Turned me around from writing python like its java 
That’s the next step, but for now we needed a cross-platform solution. Disclaimer: I am the blog post author.
Have they completely overhauled YouTube, then?
link bait.
In addition, while Python is a great language, it's probably too slow for a lot of Google's critical systems. Many internal scripts and tools may very well be in Python, but their infrastructure is moving away from it I believe. (I'm not a Google insider, but that's what I've heard from employees.) It's become common for companies to build massive applications in Python or Ruby, then inevitably rewrite them in Java, Scala, C++, or in Google's case Go once the scale rapidly amplifies.
So versatile that they can run just about any programming language and have their GPIO manipulated by any programming language which can interact with files...?
yeah but what is most disturbing is that it poses as if you could start a company without even an idea and pick a language as if it were a name. 
Cool, but I don't like that you have to use a different language to define data/variables. 
I think that I started them out playing nethack when they were about 7. I think we started writing python when they were about 13. And we focused on writing code well - unit test harnesses, data validation, etc from the very beginning. 
I think that in Python, it's about code organization and reusability, some things make more sense as classes than sets of functions. I've written about this topic [here](http://www.reddit.com/r/learnpython/comments/1uq8bk/explain_it_to_me_like_im_five_classes_init/cekr5qm) and inheritance [here](http://www.reddit.com/r/learnpython/comments/1v9sx8/understanding_classes/ceqbdcn), take a look there's some examples.
I'm always surprised at Linus's attitude to C++. For embedded/kernel, there is perhaps an argument that it's too heavy. From a design perspective though, the Linux kernel has one of the most object-oriented designs you will find. To convert the kernel to C++ (I'm not suggesting this, it would be a pointless waste of time) would be no trouble whatsoever for them -- it would just be a change of syntax.
This project looks really interesting!
Why does the author use Tries, why would a simple mmaped hashtable work?
and all appengines apis are is a very thin wrapper around rpc's that are probably written in something more like java or even C. 
Quality post
&gt; The "stop writing classes" talk And here's the link for that, as jrubino apparently missed it. http://www.youtube.com/watch?v=o9pEzgHorH0
[***scale intensifies***]
I cite https://github.com/pydata/vbench
Oh, I hadn't seen it. This was the only comment with links that I saw.
another issue the sigfig module overcomes is the limited size of the floating point registers. For example: in: "%.20f" % 3.88888888888888888888888888888888888888888 out: '3.88888888888888883955' so one is not limited to ~18 digits of accuracy.
&gt;I still enjoyed the teaching experience ;) I feel you! And I should add that my post was meant to be encouraging, not discouraging. The tl;dr is pretty much this: Keep it up and you'll find plenty of casual/conventional kids who pick up programming and love it. No use crying over the few that don't.
&gt;we don't speak English on Coruscant You mean George Lucas *lied* to me?!
more importantly though it can round based on a number's uncertainty and not display the unwanted extra figures in: roundit('3.123456789123456','0.0013') out: '3.123(1)'
Well... it was not really a lie... more like poetic license. English is the closest thing in spirit to Galactic Basic. ;)
&gt; Then why comment? Because for all we know, the OP is conducting a survey for the PSF, and "I'm content with the current Python ecosystem" is a valid and useful answer. I use the template 1. Answer the stated question. 2. What is the actual question? widely across troubleshooting forums. If the stated question is the actual question, then you saved some time by answering it. But when it's not, it's a good thing you asked, 'cause now you (or someone else) can point them in the right direction. See also: XY problems.
&gt; You should never import the package you are packaging in the setup script that does the packaging. See how ridiculous that sounds ? Just read the file and parse out the version with a regex. Or use the [ast](http://docs.python.org/2/library/ast.html) module for extra style points. It's pretty easy to walk the AST and read values from variable assignment or function call statements.
"I think PyPI is non-profit and maybe that’s the reason why the PyPI servers are unavailable at least once a day " if it wasnt non profit would u pay it ?
Yeah java taught me oo and it almost ruined it for me forever. 
and the results are where? also this is hardly representative for Python (it only invokes some numeric stuff)
Great feedback vvhy! Explicit mappings is definitely the way to go
Glad to see indexing is fixed. Those pauses every now and then were annoying.
Very interesting! I tried your tests on python 3.3: for len=2 and iter = 1000000 list pop time = 0.8510 for len=2 and iter = 1000000 deque pop time = 0.8872 for len=2 and iter = 1000000 deque popL time = 0.88651 for len=2 and iter = 1000000 deque popH time = 0.8807 for len=200000 and iter = 10 list pop time =0.6307 for len=200000 and iter = 10 deque pop time = 0.5276 for len=200000 and iter = 10 deque popL time = 0.5227 for len=200000 and iter = 10 deque popH time = 0.5216 for len=1 and iter = 5000000 list pop time = 1.6248 for len=1 and iter = 5000000 deque pop time = 1.3945 for len=1 and iter = 5000000 deque popL time = 1.3138 for len=1 and iter = 5000000 deque popH time = 1.3117 for len=50000000 and iter = 1 : laptop froze ;D (times rounded to four digits) All tests run on a i3-3110M 2.4Ghz 4 Gig Ram edit:sorry copy pasted wrong line edit_n: added other runs and sys info
can't get this 4 leading spaces code display to work ;)
If you're worried enough about performance to care about list appends, you should probably be using cython, or at least pypy if your dependencies are compatible.
&gt; Deques are a generalization of stacks and queues (the name is pronounced “deck” and is short for “double-ended queue”). Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction. &gt; Though list objects support similar operations, they are optimized for fast fixed-length operations and incur O(n) memory movement costs for pop(0) and insert(0, v) operations which change both the size and position of the underlying data representation.deque stands for double-ended-queue Were you curious how much more efficient a deque is than a list, or did you doubt the documentation?
I've got a 50M result (Python 3.3.3, OS X 10.9.1, 2.3GHz i7, 16GB RAM) for len=50000000 and iter = 1 list pop = 17.154579741996713 for len=50000000 and iter = 1 deque pop = 12.559046635000414 for len=50000000 and iter = 1 deqye popL = 12.567392034998193 for len=50000000 and iter = 1 deqye popH = 12.613423681999848
Do you need to pull this information from the game while it's running, or is it something you can determine just from the files on disk?
Not true at all! while deque.append() and list.append() are indeed basically the same operation, deque.appendleft() is equivalent (in function) to list.insert(0, data). list.insert operates at O(n) thus nesting within a loop incurs a O(n^2) performance penalty. The 20% performance boost here is clearly interesting and unexpected, but the real reason that I will be using deque is the O(n) difference on leftappend. 
Some notes: It's a little haphazard. While building this, I was learning Python, wxPython, PRAW, and a bit of BeautifulSoup all at the same time. I only just started teaching myself Python at all over christmas break using Code Academy. I am looking for input on both the specific implementation and on style/best practices. Things I would like to add in the future (but that aren't strictly necessary to use): * Sorting of the rules list * Editing of the rules list (right now you need to delete and recreate entries to change them) * Separate rules lists for separate users * A progress bar for downloads (that could expand into a console of messages about what is being downloaded) 
Something that just bothers me, but I would suggest following a style guide for python: * [PEP8](http://www.python.org/dev/peps/pep-0008/) * [Google Python Style Guide](http://google-styleguide.googlecode.com/svn/trunk/pyguide.html) Anyone that ever has to work with your code will appreciate it, it is good to make a habit of it.
I try to, but I also don't spend too much time studying and memorizing all of the little rules. Generally, my styling is based on textbook examples for the first languages I learned (C++, Java, C) and when languages deviate from that more, my style ends up being less correct. Based on codeacademy examples, I hadn't really thought I was that far off.
Well the slowest part (diagnosed by profiling) was this part: http://stackoverflow.com/questions/7974883/optimise-comparison-between-two-lists-giving-indices-that-differ
I find Python easy, but then I am used to writing code in C++ which is diabolically over complex. Which is why in 99% of cases - if I need to parse something that is not performance critical - I will use Python. I like Python I use it all the time. But unless what you want to do is actually implemented in C it is not fast. Which is ok. I'm cool with that.
Though a standard in C, returning 0 in python is not very helpful. In general, you should return true or nothing at all (though that is even less helpful :P ) Also, even though it is just a simple application, it'd probably help to not include the way the function behaves depending whether there is a gui inside that function. Best to just wrap that in button calls in the GUI 
| No use crying over the few that don't. That was really encouraging! I remember only 2 students in maybe around a hundred and fifty that I teach software programming, eventually get serious and began their own path in software development. It really is a rewarding and wonderful experience.
What's your geographical limitation? I'm in Seattle, and I know there are gigs doing software development using Python up here. I also get a lot of recruiting spam about python positions around the nation (e.g. Connecticut, Colorado, Kansas, and Texas). 
Forgive my ignorance, what is an unicorn position?
There's many startups and more established companies here in Los Angeles that are built predominately on Python. Here's a few off the top of my head here in Santa Monica/Venice with multiple openings: http://jobs.shift.com http://www.zefr.com/jobs/
Both the Java and Python implementations took about the same time to write. This software would be run dozens of times each day in an interactive way, so the saving of 4 seconds added up very quickly. Also the log files were much bigger than the test ones mentioned in the SO article.
The performance boost is not at all unexpected. list is implemented as a dynamic array, deque is a double linked list. If you change the size of a list, the underlying memory might have to be reallocated, which is more expensive than creating another node to add to a double linked list.
New England - so I'll look in CT.
My company, and many others around Phoenix use python. We are host to a few big names like GoDaddy, Intel, PayPal, and Honeywell. We host a local Django and Angular.js meetup.
We're looking for some people that know Web stuff + python in Chicago. Bigger emphasis on if you can pick up stuff on your own, and work without much hand holding.
Yeah, deque is pretty chill, Tornado has been using it for its IOStream for a while.
General: * This seems to be Python 2 code. In 2014 (especially as a newbie) you should be writing Py3 code unless you are prevented by dependencies. (praw and bs4 are both available for py3) * json is a much more natural match for your rule format than csv, it will allow your on-disk representation to look exactly like the python dictionary that it is internally stored as. There is a 'json' module in the standard library, consider using it. This would also simplify your serialization code. * PyFlakes tells me: `/tmp/redSaver.py:163: local variable 'imageId' is assigned to but never used`.Consider installing a few of these code-checking programs (pylint, pyflakes, frosted, pep8.py) to help ensure your code is good quality. There is also an online version of pep8.py [here](http://pep8online.com/) Style: * function names `likethis()` or `like_this()` are generally preferred. * The Pep8 style checker [informs me of a number of things](http://pep8online.com/s/jbByj99M). The most important here are E501 (excessively long lines) and E251 (spaces around kwarg assignment), which affect readability significantly. All of the list does impact readability or future-proofness, though. 
Thank you, will repost
We take Python pretty seriously at AWeber. We have several people involved in PyCon planning, we typically have a speaker each year for the past few years, we're in year 2 or 3 of sponsorship, and I'm a PSF member &amp; co-author of [this](http://shop.oreilly.com/product/0636920027072.do). I'm also the CTO, and I'm hiring Python software engineers in beautiful Bucks County PA, along the Delaware River. http://www.aweber.jobs/apply
 numbers = [] for line in sys.stdin.readline(): if isDone(line): if len(numbers) &gt; 1: break else: print "Enter at least two numbers" elif not aNumber(line): print("That is not a number.") elif line in numbers: print("You have already entered that number!") else: numbers.append(line) max = int(numbers[0]) for line in num[1:]: num = int(line) if max &lt; num: max = num As you see there is no need for two loops. I have chosen not to convert the input before the last loop, since it makes it easier to check the duplicate. Of course this is not a drop-in replacement for your pastebin code. Hope you can understand what I am doing and what else needs to be added. Do ask if you need more help. 
You never said for what you expect python to be used. In scientific programming python is rapidly becoming the primary language.
iPython, nothing more to say Except, on the headphones, Krewella.
There's PyCharm, which is standalone, and PyDev, which is an Eclipse plugin
ah TIL
If you are on windows, there is also python tools for visual studio.
While it's running.
Another way would be, if you put the numbers in as ints or whatever, you could sort the list then get the last element. Then you could also get the second highest number, etc.
Then you'll need some way to pull data from another process's memory. [Stackoverflow](http://stackoverflow.com/questions/1794579/how-can-i-read-the-memory-of-another-process-in-python-in-windows) seems to have figured this out.
Thanks for the link :D ill read up and hopefully get this going soon enough.
A fully features SSL library that could be used for SSL validation and checking things as simple as if the cert matches the hostname or expiry would be nice. A C backed hardware based crypto library that doesn't suck. A soap client that didn't suck too.
hopefully this helps. https://wiki.python.org/moin/GuiProgramming
Tkinter http://docs.python.org/3.3/library/tkinter.html is a GUI toolkit that comes with standard python. I can't say about it's visual appearance between OSs though. There's also PySide (LGPL licensed python bindings to Qt) https://pypi.python.org/pypi/PySide which looks good across OSs.
I was under the assumption that linked lists actually were slower for operations such as reading a specific (non end) index, or updating the value at a specific index because arrays have a structured nature that allows a more comprehensive map of the data in-memory to be accessed. Then again, I don't know what's going on behind the scenes other than a naive view on deque being somehow related to linked lists. edit: I misunderstood your implications, I should have agreed with you from the get-go. edit2: linked list confirmed with the code below, read performance at a specific index is indeed crapy, indicating probably O(n) performance for arbitrary reads consistent with linked lists. def manyReads(n, dataStructure): list0 = dataStructure i = 0 while i &lt; n: list0.append(i) i += 1 index = int(n/2.0) while i &gt; 1: a = list0[index] i -= 1 timeReadList = timeit(lambda: manyReads(listLength, []), number=iterations) timeReadDeque = timeit(lambda: manyReads(listLength, deque()), number=iterations) print("for len={} and iter = {} read List = {}".format(listLength, iterations, timeReadList)) print("for len={} and iter = {} read Deque = {}".format(listLength, iterations, timeReadDeque))
vim + a keyboard mapping that calls the Python interpreter. I seriously find this a lot more productive than any IDE.
Another thing to be aware of is the different ways Python is used. A large portion of Python dev roles are in the web space, focusing on frameworks like twisted/django/pyramid/flask/tornado. Others are service/middle ware specific dealing more with concurrency, distributed systems, and the like. Of course there's the scientific role that _uses_ Python also. It depends on which type of role you're best suited for. 
Now go add a move(steps,direction) function. Then make it worry about acceleration.
I ran these tests on python 3.3 first(to get a speed comparison on my computer) and then on pypy. **python3:** for len=2 and iter = 1000000 list pop = 1.5169918490000782 for len=2 and iter = 1000000 deque pop = 1.5199099809999552 for len=2 and iter = 1000000 deqye popL = 1.532282466000197 for len=2 and iter = 1000000 deqye popH = 1.5290258930001528 for len=200000 and iter = 10 list pop = 1.1989290989999972 for len=200000 and iter = 10 deque pop = 0.9543098980000195 for len=200000 and iter = 10 deqye popL = 0.9504460660000404 for len=200000 and iter = 10 deqye popH = 0.9577706459999717 for len=5000000 and iter = 1 list pop = 2.8640108509998754 for len=5000000 and iter = 1 deque pop = 2.2612638999999035 for len=5000000 and iter = 1 deqye popL = 2.295908997999959 for len=5000000 and iter = 1 deqye popH = 2.2972882859999117 for len=50000000 and iter = 1 list pop = 28.073518526000043 for len=50000000 and iter = 1 deque pop = 22.835268901000063 for len=50000000 and iter = 1 deqye popL = 23.013742399999956 for len=50000000 and iter = 1 deqye popH = 22.693501633000096 **pypy:** for len=2 and iter = 1000000 list pop = 0.186662197113 for len=2 and iter = 1000000 deque pop = 0.257698059082 for len=2 and iter = 1000000 deqye popL = 0.252062797546 for len=2 and iter = 1000000 deqye popH = 0.251337051392 for len=200000 and iter = 10 list pop = 0.200149059296 for len=200000 and iter = 10 deque pop = 0.0975501537323 for len=200000 and iter = 10 deqye popL = 0.089910030365 for len=200000 and iter = 10 deqye popH = 0.0978012084961 for len=5000000 and iter = 1 list pop = 0.46339392662 for len=5000000 and iter = 1 deque pop = 0.223926067352 for len=5000000 and iter = 1 deqye popL = 0.24724817276 for len=5000000 and iter = 1 deqye popH = 0.212069988251 for len=50000000 and iter = 1 list pop = 3.75739717484 for len=50000000 and iter = 1 deque pop = 2.53583884239 for len=50000000 and iter = 1 deqye popL = 2.48548698425 for len=50000000 and iter = 1 deqye popH = 2.52400302887
Seconded! 
[Tox](http://tox.readthedocs.org/en/latest/)!!! As for the python versions themselves, get an OS that doesn't suck. Debian 7 has 2.7/3.2 by default, and 2.6/3.3 in the repos (i think 3.3 is in backports or testing)
&gt; If you actually read my link you would notice that I actually tried the builtin symmetric_difference() The linked stackoverflow answer which utilized `set.symmetric_difference` has a different output signature than the other listed implementations. The builtin `symmetric_difference` does not maintain ordering (because of `set`). https://wiki.python.org/moin/TimeComplexity#set Pandas (implemented with CPython, NumPy, and Cython) is much faster than `symmetric_difference`; especially with so many records. The support for HDF5 (a popular HPC storage format) and PyTables further extends the performance gap for this particular use case. [EDIT] Blaze BLZ format is also very fast. &gt; Javascript is a dynamic scripting language but is significantly faster than Python according to various benchmarks when using v8. New goalposts! I agree; every language has strengths and weaknesses. The maturity of the science, mathematics, and computer science libraries and communities in Python is a strong selling point. &gt; A JIT implementation should be the default Python implementation, [...] NumPyPy and CFFI are coming along quite nicely. 
Kivy! PyDev it is then.
&gt; as fast as native routines in a database (such as C, or Java). You complain when I compare it to static compiled languages, then when I compare it to a dynamic scripting language... &gt;New goalposts!
I was taking about deques, probably should have been more specific in my wording. And you are right, while the performance characteristics match what I expect for a linked list, I could go into the source if I really wanted to confirm. 
&gt; my thinking was something like; if everything is an object, then everything can be subclassed.. right? I think you were mistaking the difference between an object and a class. Functions in python are objects as well but they are not class instances aren't they?
... and the IPython Notebook. But they are not very practical for very big projects (packages etc) in my opinion.
Python is my favourite programming language and use it as much as I can. It's just that statements like "Language X is easy" are oversimplifying. It's certainly easier to get things done in Python than in languages like C, but you can mess up in any language. 
I'm currently looking for Seattle python jobs ( planning to move this year) - any pointers?
They want somebody with expert Java, C#, Python, Ruby, Perl, C++, Powershell, and dBase III programming skills that is an expert system administrator (willing to be on-call 24/7), has experience with enterprise financials, embedded electronics and dynamic web applications, able to work with no direction but 14 different bosses. ...and do it for $35k/yr and no benefits. I'm only *slightly* exaggerating here. [The Rogue Brewery posts this position every few months](http://i.imgur.com/cfGFm5j.png).
It feels the same in the UK, except London instead of SF.
This post was an attempt to look harder ;-).
Zefr also has an office in the Boston area where Python is the primary language.
There are more than a few Python jobs available in Boston, we are also home to the largest Python user group.
Tip: https://github.com/Pharylon/28byj-48-Driver-For-Raspberry-Pi/blob/master/28byj-48-driver.py#L45-L50 could be changed to StepSequence.reverse()
That sounds like a really great project, although, I think having to implement SIFT from scratch is total overkill. If you ever decided to pick the project back up again, NumPy and SciPy could take care of that eigendecomposition for you. The BoG model is something extremely useful though. Wish I could have taken the class!
Wow, fuck everything about that.
Interestingly enough, one of my major annoyances in ruby is TIMTOWDI. This encourages the developer to be clever, creating single lined wonders to do something amazing. I really don't want developers to be clever, it should be KISS. If there is only one way to do it, it becomes a pattern that is easy to recognize and easy to reproduce. Code is read more then it is written, so making sure everyone uses the same convention is far more productive then being able to give your code some kind of personal touch. (this can also be encouraged when using ruby, but it is likely to be different with each project) 
This is a pretty decent list - I agree, especially the 'everything is public' idiocy, and ruby package management, which is awesome. Ruby is nice. I'd like to add: Python on Windows is a pain. If I have to use regedit to get rid of the vcvarsall.bat error, then it is broken. This is something Python needs to fix. Having said that, my preference is still Python, and by quite a long way. It is much easier to read, and much more, I dunno, elegant maybe. Perhaps those are silly reasons for choosing a language, but I can muddle my way through Python more easily than doing so in Ruby. As a rule I tend to avoid list comprehensions and 'fancy tricks'. It makes the code more oatmeal than waffles-with-cream, but that's how I do future-me a favor. I see myself as coding with "Python - the good parts". It gets the job done, and well. 
It is simpler to use max() directly. But I presumed the OP wanted to write this algorithm. 
I sure do hope this is a troll post.
I tried out Ruby a good while back (1.6 or 1.7), and I really like its Smalltalk-i-ness. I gave up on it, though, because it didn't support Unicode (at the time), but mostly because I often couldn't understand my own code. I've never had that problem with Python. While I don't mind feeling dumb for not understanding someone else's code, not understanding my own makes me feel doubly dumb :(
Is there a PPA for Ubuntu?
Looks like a very early alpha.
Never drinking it again.
This is actually great timing, I have been testing pycharm and intelliJIDEA and I really feel that compared to eclipse or sublime, both of these projects just work and don't feel bloated. I am not sure which i'll go with, I may end up with both since I am a student and they offer a nice discount and then upgrading once I graduate. 
There's a data analytics company in Winston Salem, NC that hires python developers. I am not sure about Raleigh but I am sure you can find some python related work there.
That's a great way to weed people out for sure. Sounds like a job right up my alley, lots of different problems day to day.
And they have a trial period, so you can try it to see if you like it.
On Windows, I used to use Eclipse+PyDev (mostly because command lines on that OS suck so much, I can't really get away with emacs and a command line). I tried PyCharm when they released their free version and boy, I haven't looked back. Mostly they look alike but PyCharm never feels slow or bloated. 
Glancing at your code, I don't see where you convert from string input to a float or int for comparison. I also see that you really like regex, which isn't a surprise, seeing as you come from Perl. You use this to check for bad input. My inclination would be to let the exceptions thrown by the program on bad input speak for themselves. Also, you're using a list to store your input, then checking on each new input whether the item is in the list. This is a linear operation, and we could use a `set` instead to make sure that the input is unique. If we wanted to do a manual check of uniqueness (to warn the user, perhaps), then it would only be constant time, on average. Also, if you like writing while loops with sentinels, like: sentinel = True while sentinel: ...do something... if something == something_else: sentinel = False then you might like the `iter()` function in the form with two arguments. The first should be a callable, and the second is the value you want to stop on. So `for x in iter(f, something)` means that we will keep calling `f` and assigning the result to `x` until the result is equal to `something`. I've used it in my code below: import sys print "Enter numbers, one per line. An empty line signals the end of input." numbers = set() for line in iter(sys.stdin.readline, "\n"): numbers.add(float(line.strip())) maximum = numbers.pop() for number in numbers: if number &gt; maximum: maximum = number print "Of the values:\n{}\nThe maximum is: {}".format( ", ".join(str(x) for x in numbers), maximum)
i started using pycharm about 3 months ago. i had been using eclipse, and after using pycharm for less than a day i bailed on eclipse and never looked back. it is awesome.
Troll, surely?
Both good ideas, and done. :)
That's why it is less helpful, at least 0 indicates some level of understanding that it worked 
I'm one of the main developers of this project. If you have specific questions please ask. In a Python context this is a Pyramid based web app (both website and service part), uses Celery for async task handling, Redis as a queue, has a MySQL backend and uses hekad for stats/logs. Nothing overly interesting in that setup. The project is deployed on Amazon EC2/RDS/ElastiCache.
Next, install [DevDocs](http://devdocs.io/) offline: https://github.com/Thibaut/devdocs and use `pydoc -p 8090` and you're all set for working with no internet connection.
First of all, thanks for the in-depth answer. I would like to stick with the set of if-else clauses for input as the nature of the program I am writing is one that would rather keep the user in the program (lots of prompting and other non-efficient things). So, is it possible to use the great for loop you have shown me in conjunction with the if-else clauses like what /u/pasokan said? I see no reason why it wouldn't, but maybe you could give your opinion if this is the best way to interface with the user in the context. One more thing, I know .strip() is pythons chomp(), but if you were to leave that off, would the for loop stop on the first input (i.e. - "5\n")? I don't think it would, because it is only searching for the exact string "\n", correct?
I moved from Eclipse/PyDev to PyCharm and have been quite happy. 
:O
&gt;the inability to change the background. Petty I know Oh, man.. not petty at all. The aesthetics is actually why I tried and moved on from most of the IDEs suggested by others. I spend pretty much my entire day staring at code. I don't want that experience to be assaulting on my eyes! More on point, I am a huge fan of Eclipse + PyDev. It's far from perfect, but after writing code with it for several months, I can't imagine going back to the Text Editor + Terminal workflow I had before. I'm *so* much more productive in a proper IDE. For me, a big portion of this productivity boon comes down to PyDev's refactoring tools. It makes Python almost feel like a statically typed language. It doesn't *always* get it right, but it's pretty darn close for things like renaming methods/variables/etc across different modules and scopes. Well worth checking out. 
You really don't want to be doing IO (seeking, reading, unpacking) for anything speed critical. Read the table into an actual Python data structure (dict, list, array, etc) before doing anything. All that manual calculation of offsets and stuff is a big boat anchor. 
I still have most of the videos from the lectures baring the ones about 3D reconstruction, which was the most important one IMO (I doubt Id be able to share em, each one is about a gig if not more if you can think of a way for me to share em PM me :) ). I think coursera is doing a series on Computer Vision but lord knows when that is starting up. I know numpy and scipy can handle it. I just wanted to see if I can role it out on my own. Clearly not lol! As for SIFT I dont recall it being too hard to implement if you have at least some background in signal processing and discrete maths. SVM on the other hand is just handled by libSVM. edit: mm this is tempting me to start up the project again but I am fucking busy these days. If anyone really finds this topic fascinating just let me know. I'll do my best to get something useable online with instructions and a blog post about it.
The table is [130 megabytes of data](https://github.com/chenosaurus/poker-evaluator/blob/master/data/HandRanks.dat).
So? That's not really a lot of data by modern standards. And you're *already* reading it into memory (lazily) by memory mapping it. 
Thanks buddy! This is awesome.
I use Eclipse + PyDev. Out of curiosity, what went wrong? Installing PyDev (should!) be as simple as selecting "Install New Software" from the menu and then pasting the PyDev download url. Then again, we are talking about Eclipse here, so who knows what catastrophic failure happened behind the scenes ;) 
Does anyone know if you get the Ultimate Edition of IntelliJ IDEA, does it support the full feature set of the Professional Edition of PyCharm (eg support for web frameworks, SQLAlchemy, etc)
This looks pretty nice. :-) Thanks! It looks like just enough of abstraction of the API details that the code is easier to write, while not trying to take it too far that you don't know when you're actually making API calls. If anything caught my eye as a little ugly, it'd be the parameter-suffix approach for making query operators (eg. view\_\_gt, thread\_\_begins\_with). It's very Django-y, but I find this to be a hard-to-discover mechanism when compared with, for example, the SQLAlchemy approach of overloading operators.
I thought the Python IO would be written in C and as such the performance hit rather minimal. I reckon the same is true for node. I'll give it a shot, but if I remember correctly I already tried that with numpy.
Python's dictionary is also implemented in C. The reason JS is so much faster is that it's running on a state-of-the-art JIT VM and Python isn't. Have you tried Jython/PyPy?
Raleigh has Red Hat, who have a bunch of Python positions (Including OpenStack work).
LiLiClipse Or Eclipse &amp; pyDev
Your welcome. I just happened to need to work offline for a few days and I really wanted some decent development documentation. If you're deving on Debian or Ubuntu, the installation of DevDocs might seem a bit daunting, but it's actually pretty straight forward. From memory: * Compile ruby 2.1. All you need is GCC and the usual `./configure &amp;&amp; make &amp;&amp; make install` * Grab the binary distribution of node.js, put it in /opt/ * Clone the DevDocs repo in /opt/ * Add node.js to your path (`export PATH="$PATH:/opt/node.js/bin/" * `cd /opt/devdocs/` and run the commands in the README.md of DevDocs: * `gem install bundler` * `bundle install` * `thor docs:download --all` * `rackup` That's it.
How does this work? IPython is just an interpreter, no? Are you writing to files and modules with IPython somehow, or just sketching out and prototyping ideas?
+1. 130 megabytes of data is trivial, even if you were running this on your *phone*. Dealing in Python data structures is likely to be *much* faster than trying to optimize IO access.
So PyCharm is the way to go on Windows? I'm just learning Python and have been using Wing IDE. It seems ok, but I don't really know anything else. 
I'd rather avoid being absolute but it's been quite enjoyable with PyCharm.
From what I understand, they eventually merge all the new stuff from the other tools they develop into the main IntelliJ IDEA, but new stuff developed in the other tools, like PyCharm, might take a while to get merged in to the full IntelliJ system.
I suppose there is an obvious advantage in using the Django-style: it's familiar to Django users. :-) Have you had a lot of experience using DynamoDB? I'd be curious what your overall impressions are of it as a data store. I really like the design and API, but I haven't had a chance to put it into a real-life usage.
PyCharm, RubyMine, etc. are all developed as separate products but their functionality is usually merged into the latest version of IntelliJ as plugins, but it does lag behind the individual IDE's. If you want all the latest and greatest for a specific language you are better getting the individual products, but if you want a polygot IDE (I primarily do Java work with some ruby and python thrown in) then just get IntelliJ.
Mind blown.
I just ran it again. I must have remembered wrong when I said 20x slower. Using the same code as the JavaScript implementation is tricky because he skips so many function calls in his speedtest scripts and never loops over cards, but I think I came pretty close. All 7 card combinations (133,784,560): node: 6.7 seconds CPython: 338 seconds CPython list in memory: 705 seconds CPython list in memory, all function calls eliminated: 63 seconds PyPy: 577 seconds
Wait, PyCharm is or is not quite enjoyable?
It is. Sorry fixed it :p
Are you on linux? I had to manually set PyCharm to launch using Oracle Java and not openjdk.
PyCharm is not based on Eclipse. It's based on IntelliJ: http://www.jetbrains.com/idea/
Yay for pycharm! I'm using the free edition and it is nifty.
Great, now I'm paying attention to the cursor blinking. This reminds me of an old golf *shark*: "Keep your eye on the ball and don't pay attention to your club's shadow."
PyCharm and NINJA IDE
Awesome, thanks so much for writing this up. I find there's very little discussion going on around DynamoDB -- I'm not sure if this just means that people are using it and happy with it, or it's being ignored as a technology, or I'm just not looking at the right places (reddit, HN). The AWS DynamoDB forum has a lot of activity, but it's mostly just technical questions, very little discussion that backs up a level. The denormalization challenge is an interesting one. I suppose it requires modeling your data based upon how you will access it, which is a big change from a normal-form RDBMS approach. I can see how that'd be a struggle when the data models start to have redundant data. And throughput, huh. The provisioned throughput seems to me, as an inexperienced user, like a serious **advantage** of DynamoDB, so I'm surprised to see it considered a challenge. :-) But I can see what you're saying... you're forced to over-provision consistently to avoid hitting those limits, and the effect of hitting those limits (400s and client-side backoff) is quite different than hitting the limits of a traditional DBMS (invisible possibly harmless query slowdowns). Thanks, very interesting points to consider. Do you have any concerns about vendor lock-in with DynamoDB? The only project I know of to provide a compatible API is [MagnetoDB](https://wiki.openstack.org/wiki/MagnetoDB) which is in a pretty early development state, so I'd be concerned that building an application on DynamoDB today might have an uncertain future depending on where Amazon takes the service.
Same question here. How old is that thing? I love it!
Lock in is a concern, but it might be a superfluous concern for **us** at this point. The Amazon services we rely on are: EC2 (including VPCs, ASGs, ELBs, EBS), CloudFormation, S3, RDS, DynamoDB, SES, SQS, CloudFront, ElastiCache, and Glacier. Using these services have allowed our two person team to build some very impressive (fault tolerant, scalable) services. I like being able to deploy an entire copy of our stack for development with one command, and at least at this point no other vendor can provide an equivalent set of services. In short, we rely on so many other services from Amazon that it doesn't matter.
I am, but I uninstalled openjdk. I may have cocked it up because I'm running arch and things got a bit messy
Well, sadly the ugly **** font rendering on Java 64 bit on my machine(s) ruines it for me. Tried switching from OpenJDK to Oracle's version and all the tweaks and "fixes" I found on the net, sadly no improvement :( I don't really *need* an IDE, but at the same time I have a feeling I am missing out on something because everyone is full of praise about PyCharm.
My biggest complaint with Python is my inability to write expressive tests. This library gives me that. Going to try it out today. Excited!
Php storm user passing through (PhPStorm, Pycharm, intellej idea are all based on the same stuff) can confirm that if you use Oracle Java itll be a fair bit faster 
Hey Wudan07, No problem, thank you for taking the time to test and report issues :) Let me know if you experience any other issues or need help setting it up. Thanks and regards, Marin
tmux, vim and ipython
don't use an IDE if you are a beginner use a text editor that can do indentation properly and can do syntax highlight IDEs aren't learning tools
As far as I know, the most popular ones are [pyGame](http://www.pygame.org/) and [Ren'Py](http://www.renpy.org/). [Kivy](http://kivy.org/) is growing quickly too, mostly for mobile games.
I've heard of pyGame, not much of a fan. Does Ren'py offer a user interface like an SDK or something? Or is there any others like that?
Try google then
I am familiar with IPython notebook, but I guess I didn't know you could save your notebooks as .py files. &gt;A notebook may be downloaded in either a .ipynb or .py file [...] Choosing the .py option downloads a Python .py script, in which all rich output has been removed and the content of markdown cells have been inserted as comments. That was the missing piece of the puzzle for me. Using it as a quasi-IDE still seems kind of weird, though.
Can you hide that annotation?
The main problem is memory / performance. Also there seems to be a bug with multiline strings. Every time i make one it gets really slow when opening it. I would buy it if it was build with C++.
[Pyglet](http://www.pyglet.org/) is an alternative to PyGame.
Using it on my 64bit Arch based machine. This fixed the ugly font rendering for me: http://www.webupd8.org/2013/06/install-openjdk-patched-with-font-fixes.html
I got frustrated with navigating json structures in python and wished I could refer to fields in the same way you can in MongoDB (i.e. "head.meta.title" rather than having to do json["head"]["meta"]["title"]) so built a simple library which lets you do the same. It handles things like arrays and missing values in what should hopefully be a smart and "non-surprising" way. You can install via "pip install pson". Feedback welcome!
Anyone have any tips on installing packages that require compilation on Windows using PyCharm? (ex. numpy, lxml) I can install them with the binaries but I would like to be able to install them through PyCharm in include them in virtual environments.
You can never go wrong with vim
I'm always surprised when no one mentions Eric 4 or 5: http://eric-ide.python-projects.org/index.html
I ran into some bizarre issue with Eclipse and autocomplete with sqlalchemy on one script. I could edit the specific script as long as I didn't modify an object from sqlalchemy. If I did, Eclipse would peg my processor at 100% and I'd have to force quit. No idea what the issue is with that script, I could edit others with sqlalchemy code without issue.
Where in the UK are you looking ?
What about [nuitka](http://nuitka.net)?
Good question, I haven't looked into whether or not that is possible.
Tons in Chicago, mostly Django, fulltime &amp; on-site. I freelance, but only telecommute - demand is strong enough that I've landed 1-2 clients who were originally dead-set on someone who'd sit in their office.
We recommend using IPython along with an IDE, not as an alternative. It's good for doing the top level of computing, where you want to fiddle with code, see the results immediately, explain it to others, etc., but it's not really the tool to make modules and packages.
This is actually what I tried first some weeks ago but I didn't notice a huge improvement. It was definitely better with the AUR package, but still rather blurry compared to the fonts in the terminal or sublimetext. I'll look into it again, ty. :)
I wonder if JetBrains could be persuaded to support conda environments as an alternative to virtualenv? That would make working with binary packages much easier.
Thanks so much for all of the information! I will make a decision based on what I think works best, and keep the other options in mind for when I need them later! I can send you the final product later if you want me to, it's my first (semi) big project in python and my sophomore independant project.
Yeah, nice to see that they got a web interface. Personally, I just ran a iPython Notebook instance with SymPy and just accessed it with my browser anywhere I was. WolframAlpha has become so ridiculously bloated and slow, it's just such a pain using it for anything useful. But at the same time, I want something that I can have access to anywhere on any computer.
Is it as good as wolphram ?
Yeah, same here. It's still not as crisp as in other applications but for me at least usable.
All of the additional framework support (sqlalchemy/flask/django) are considered part of the language plugins in IntelliJ.
You like low pay for hard work with people who ban common words like "excited"?
Using return values to indicate success/failure is generally un-pythonic anyway. Failure has to be a pretty common thing before this kind of behaviour is appropriate. Otherwise you should raise an exception*; it's clearer and more debuggable. \* In the case of this particular code, ValueError seems appropriate.
Seems similar to [JSONPath](http://goessner.net/articles/JsonPath/).
A few more comments: * In deleteRule(): if not gui: subreddit = raw_input("Enter the subreddit for the rule you wish to delete: ") elif subreddit=="": return -1 elif subreddit=="Subreddit": return -1 Should probably be if not gui: subreddit = raw_input("Enter the subreddit for the rule you wish to delete: ") elif subreddit in ("", "Subreddit"): return -1 (more succinct, no code duplication) * similar for makeRule() * Also you should probably `strip()` the result you get from raw_input, otherwise your code will do the wrong thing if the user types eg. ' ' or ' somevalidredditname ' * `if imageFile != "":` should be `if imagefile:` This is not just a cosmetic thing, it's also a consistency thing -- the same idiom should generally be used for 'false-ish' things (empty strings, empty lists, empty tuples, empty dicts -- calling `bool()` on any of these returns False, calling `bool()` on non-empties returns True * this is more subjective, but here's a rewritten `menu()` that seems more obvious: `def menu(self):` options = {1: ('Make a new rule', self.makeRule), 2: ('Delete a rule', self.deleteRule), 3: ('List all existing rules', self.listRules), 4: ('Save all reddit saved images according to rules', self.save), 5: ('Exit', quit)) for number, name, func in sorted(options.items()): print ('(%d) %s' % (number, name)) choice = int(raw_input('Enter the number of your selection: ')) if choice not in options: print 'Invalid choice' else: func = options[choice][1] func() * I'm not sure why you don't store `rules` as an instance attribute, and instead, for example, re-load the rules every time you want to save them. There may be a good reason for this (allowing the user to manually modify the rules file while redSaver is running?) that I am not privy to, but usually `__init__()` would load the rules if they are not already loaded, by calling `self.load()`, and `self.load()` would store them as `self.rules`, and the other rule-related functions would access this attribute.
&gt; The Rogue Brewery posts this position **every few months** Gee, I wonder why? /s 
all those disadvantages you list totally make datastore(appengine) sound awesome. 
You can install binary packages to the activated virtualenv via commandline with easy_install path_to_my_package.exe/msi
I was in the same position as you. I followed https://unix.stackexchange.com/questions/55992/use-certain-version-of-jre-jdk-for-certain-programs and used the wrapper to force it to use oracle java. 
I would like to mention [Panda3D](http://panda3d.org) which is a 3D framework and engine implemented mostly in C++, but designed to be used via Python. As the name implies it does 3D rendering, but it is also capable of emulating 2D by creating a 'flat' scene. It is open-source, developed in part by people at Carnegie-Mellon University, stable, well-maintained and current. It has a lot of features for free that other game toolkits such as Unity charge a premium for. It has a browser plugin for web integration, and a packaging system that makes it easy to generate installers for your game, in the shape of NSIS installers for Windows, .app packages for Mac OS and .deb or .rpm packages for Linux.
Generally speaking the language specific features will appear in PyCharm first, then be released in the IntelliJ plugin later. This is generally pretty quick, but there was a delay previously when IntelliJ was a major version behind the core the PyCharm was built on. There are differences that have contributed to my switching to PyCharm despite also having a license to IntelliJ. It's much easier to start up a new project within PyCharm or start working within a directory without setting up a full project. In IntelliJ, a Python project is as involved as creating a Java project. There are other ways in which the language integration makes PyCharm a bit of a better experience.
Wing
Great article. As a small addendum, this [video](http://www.youtube.com/watch?v=2geC50roans) (from JetBrains) show in a really nice way the basic of the workflow of PyCharm. It's what sold me to it. Awesome stuff.
I'm a pretty amateur, but let me ask, this means I can run SymPy locally? I'm not sure how that would work... Sorry if I sound stupid. 
pyglet 1.2 alpha released Submitted by Richard on 13-July-2012. isn't it abandoned?
I really like pyglet, but it definitely requires some OpenGL chops.
Yep, SymPy is just a library for Python, that does Symbolic mathematics. Basically like Maple if you've ever used that. Gamma is just a web interface for it, so anything you type there, you could be doing locally, in python. It lends itself very well to interactive shells like iPython.
great, I will be trying later :)
Yeah but can it relentlessly hype itself up to be the best thing ever?
I have done this type of work with DBMS_SCHEDULER/DBMS_JOB, PL/SQL, Excel VBA, Python, shell scripts, SQLPlus scripts......either a mix of these methods or one. All depends on exactly what/how you need the jobs done, whether it is Oracle-centric or not, how much data, scalability consideration etc. You need to be more specific.
what is "MI server" ?
doesn't look up stuff like "mass earth" for you though, which is mainly what I use W|A for.
The Qt documentation is all about C++. Mental translation from C++ examples to Python is hard, so this is mostly about making sense of the examples in Python. PySide syntax should be similar if not identical.
Not at all! Stable releases are just slow moving. The repo and community are very much active!
I absolutely love pycharm. The database integration, vcs integration, local/remote file explorer and integrated django support is just fantastic. Also the Darcula theme is amazingly easy on the eyes.
This is cool - thanks for writing and publishing it. I have passed it along to the DynamoDB team.
I'm in a bit of the same boat, I've recently taken on a few projects that have made me a Node developer more than anything lately. My general work flow for Node is using Sublime with the Jade syntax highlighter, and bootstrap snippets for the frontend, and just a javascript linter for the back. That combined with a drop down terminal, and I'm generally fine. That said, I've only used phpstorm for a day or so, and I'm actually in the middle of my longest coding session with it, and I'm starting to get how it helps. I think maybe my problem might be in that I'm a relatively new web developer, so I'm not familiar with proper style or techniques yet.
Interestingly, cocos2d claims to be based on pyglet.
Hey, this is great. I'm actually one of the developers of this site! https://github.com/lidavidm?tab=activity Also check out [SymPy Live](http://live.sympy.org), which is a Python shell with SymPy and LaTeX formatting built in running on Google App Engine. EDIT: I think you guys (EDIT2: and Hacker News) broke our quota. :)
Of course, no problem.
Yeah, I'd say try giving it another go for a bit. It definitely took me at least 2 weeks to even *discover* some of the cooler features, much less integrate them into my workflow. Honestly, the only reason I stuck with it for so long instead of going back to emacs was because I wanted to have some Dart-completion support while learned it, and the 'official' Dart editor is pretty meh.
Hey, one of the developers of the site here (http://github.com/lidavidm, wrote some of the parsing stuff + came up with the styling + the integration steps functionality). Thanks for the feedback! Copyable plaintext is a feature that's been on our radar, but seems like I should get it in for my next pull request. We're also planning on adding export to IPython Notebook functionality. Natural language recognition is also something we'd like to have, but as a high schooler I really have no idea where to start with that feature. :C I'd like to point out, though, that we don't make you sign in to do anything (except save your queries).
Also, is the founder an egomaniac?
But will it be over quota for ever?
At the very least, it would be helpful if a syntax error would print out the syntax for the python function the user is trying to use. Syntax was my main problem with a definite integral. Also, the output is not always fully simplified.
Yup, that and/or displaying the documentation (querying a function name returns its documentation currently) on an error would be a good idea. We don't always fully simplify by default because it can be quite time-consuming for some expressions, but one of the things I plan to work on is adding a "simplify" button to each result (much like how numerical results have a "more digits" button).
A bit over four years old, Ondrej did the first version in July 2009: https://github.com/sympy/sympy_gamma/commit/2e0d56c9f594079ef1d81ad42cc5bf7f64b81829
I've heard that before. What I think is really neat is built in Closure compilation. My day job is a Sysadmin for a Web Hosting stack, so I find myself running 'page-speed' way more than I should in development.
Cool idea. Here is some constructive feedback: The first thing I noticed is that there are tabs mixed with spaces. There are some great tools, such as [flake8](https://flake8.readthedocs.org/en/2.0/), that can help you to improve your Python source code overall (including whitespace). 
The only feature I've found missing from community edition is Perforce integration. To say that its "rather hampered" is disingenuous, especially when the original comment was targeted toward someone "just learning python". Source: I've used PyCharm every day (both pro and community) for a year and a half.
I've only used pygame for the sound and controller libraries, but I think it's pretty easy to use. Though I haven't seen any games too interesting made from it. 
I know it's not given a lot of love in the python world, but let me second that Panda3D is actually a very full featured and well developed, battle-tested framework for making games. It's significantly more portable and easier to build than pygame, and has a lot more 3D functionality than for example, kivy (model loading, skeletal animation, etc.). It might be overkill for a simple 2D game, and the documentation does leave something to be desired in a number of places, but it's actually a very decent contender for *desktop* games. 
I linked to it from the article, but if you didn't know about it already, [this](http://www.jurta.org/en/prog/noblink) is an excellent resource for disabling blinking in all sorts of programs.
I can't seem to get this working, I tried to run an [image viewer](https://github.com/odraencoded/pynorama) I made on ubuntu but it keep failing to import gi. from ._gi import _API, Repository ImportError: DLL load failed: The specified module could not be found I even got the [Gtk3 binaries](http://www.gtk.org/download/win32.php). Maybe there is something still missing? This is kind of frustrating, I had been waiting these official windows ports to get released but now when they got released I still can't get them to work.
It showed that the second time I refreshed it. I found it funny with the two #1 listings.
a data warehouse, for reporting from rather than production/transactional Db 
I will recommend installing sage. It has all useful libraries preinstalled on a disk image. http://www.sagemath.org/
Honestly I'd be much fonder of cocos2d if it had a properly abstracted drawing layer that would let me run it on other targets like SDL. It's pretty deeply entwined with the pyglet api.
jesus fuck this is awesome few newb question: 1. would this work on my tablet? i've got a python on mah android galaxy note 10.1, this would be THE library to install... 2. what would i use for plotting functions? thanks
The only real problem is that 'Wolfram' sounds a lot cooler than 'Sympy'
BIte the bullet with Django It is easy enough that it will pay for itself in the longrun And check out Tango with Django after you finish the official django tutorial. If you want scalable after tango with django go through the django rest framework You will have some modestly valuable skills after that.
Hey 3pence, as I've said - I'm not that interested in learning Django. There's no reason, but I've always leaned more into Pylons/Pyramid.
I read your post. My reason for saying so is 1) your cutting yourself short 2) you asked for scalable... the rest framework is scalable and has battle tested community and code being updated daily. If you are already leaning the go for it. Not stopping you, just suggesting you stay open to a framework that people love to hate but is really good as is. I am new to webdeving and started in a place where you are now.... and so I avoided Django.... My biggest mistake was not learning Django many years ago in the first place... and second was framework surfing when Django already provides rapid prototype abilities and low level controls where you would want them.
On unity 3D you can use Boo, which is quite a nice language and has the same sintax and a lot of the semantics of python.
I'm obviously a little biased, but I'm going to suggest Watson (http://watson-framework.readthedocs.org/en/latest/). It's quite an easy framework to get up to speed with. I'm currently using it in production for several large client sites, and am building a CMS on top of it. Of course thanks to Python being such a great language, you've got heaps of frameworks to choose from. Flask, Bottle, Kiss and Wheezey are all great choices, give them all a try and see what works best for you :)
&gt; would this work on my tablet? Sympy will in principle work, since it's pure python so it doesn't need any special treatment as long as you have a python interpreter compiled for the device. &gt; what would i use for plotting functions? If you're trying to do this on a device, it'll depend a lot on the context (what you're using and now). There are a couple of ways to do it from the interpreter using matplotlib or whatever, but if you want to seriously use a computing environment on android you probably want an app that handles it and can display the result.
There's a similar concept in the Nagare framework http://www.nagare.org/trac/wiki/PresentationTier (which is also written in Python)
There are multiple android apps that let you do this kind of thing, at least one of which is python powered, though I can't remember its name. The tool linked in the op is of course just a webapp, so there should be no problem using that on your tablet.
honestly, based on this doc http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Python_flask.html I can't see why pyramid wouldn't run. the flask example is just a wsgi app. 
yeah, but i don't really have internet everywhere tab is not SIM type, and you can't expect to find wifi wherever you go...
since I have to deal with "expressive" tests written by others in rspec, I feel the exact opposite. different strokes/folks
&gt; so it felt to me like poking gems with a stick and looking what will apear. I LOL'd IRL. Out of the 3 you mention, you can't go wrong with pyramid or flask. You could try both in a weekend and see which one fits your brain better. My only experience with web2py was replacing it with a pyramid app :P
Oh cool--this is a blog post of mine from a few months ago. We've made some improvements since this post went up: we're indexing many more Python repositories, which means more code examples, and we have better Python docs. Check out https://sourcegraph.com/github.com/django/django/docs/ref/models/fields/#django%2Fdb%2Fmodels%2Ffields%2Frelated%2FForeignKey, which are the official Django docs, and notice that all of the references to class and method names are clickable and take you to a page with semantic code examples. I'd love to get feedback from other redditers on our Python support at Sourcegraph. Let us know here or at https://twitter.com/srcgraph!
I appreciate your choice of subject matter and the material in your posts. Given that each post is only a paragraph or two long, it would be much more convenient for readers if it was a single page. #4 is of a decent length, but the rest aren't really long enough to warrant their own page.
There are two interactive symbolic math platforms underpinned by python, this one and SageMath. I'm hoping that experimentation in this space will converge on the ultimate scientist's mathematical notebook.
NYC!
One has two animals and the other only has a half. 
Optimizing code without knowing what you are trying to do is pointless. Please also note that mmaping is convenient (i.e. it allow to acces your file data as a pointer) but not really a performance gain, because your IO will be buffered/cached whatever happen. Apparently your data is a bunch of integer, so why not just using numpy and/or array.array which will be efficient (memory and CPU) (And will remove the struct logic). You may also save you unpacking format using struct.Struct objects. You may also want to convert your datafile to a more efficient data format which is convenient for your task. So, what is your task, how is your data file formated? edit: and did you benchmark this code to know where time is spent ? 
Why don't you want to learn Django?
There is a persistent myth in the Python community that Django is "hard" or complex. Having used it myself, I simply can't agree with that. Yes, it is a very *large* framework, but it's very intuitive once you get a basic understanding of how it works. It's extensively focused on [DRY](http://en.wikipedia.org/wiki/Don't_repeat_yourself) and loose coupling, so I found it a pleasure to work with. It *is* rather opinionated about how your system should be set up (e.g. it greatly prefers synthetic keys to natural keys). If you also have strong feelings about that, you may want to look elsewhere. In a sense, it's the Ubuntu of web frameworks.
Did you download PyGObject, as the article mentioned? http://sourceforge.net/projects/pygobjectwin32/files/
It's pretty much random access to a bunch of integers. Numpy arrays are much slower than lists for random access, so is array.array. Both saved a lot of memory, but my concern is speed. I changed the code above to a simple list which is read once with numpy.fromfile (struct.unpack was 100x slower, but I'll give struct.Struct a shot, seeing that using numpy for that simple task is overkill). numpy.array seems to be optimized for calculations across the array. I don't have any concrete numbers, but the benchmark was still running 20 minutes in. All other implementations of card evaluation are very heavy on arithmetics which I figured would be much slower. The implementation with a lookup table is also the fastest even in C. I need it for monte carlo simulation (or enumeration if possible). A few million iterations are usually enough to get a decent accuracy. But at the moment 1 million would already take 10 seconds for 7-card hands. The same takes less than half a second in the JavaScript implementation. I did profile the code above and about 50% were spend on seed, read and unpack while 40% were lost on function calls. I eliminated both and now about 80% seems to be spend on list access while reading the lookup table takes about 1.5 seconds. I guess speeding up list access isn't really possible, seeing that all alternatives are much slower. The file is 32 bit unsigned integers. I guess using numpy.save would improve loading time, but 1.5 seconds is alright. Seeing how simple the format is reading it on the fly can't be improved by changing its format. Unless conversion to the integer format Python uses internally can be eliminated.
Your library prompted me to try and break/abuse python, maybe I am a little bored. Essentially I was curious whether instead of using a function and passing the query in dot notation like in your examples: pq(json, 'body.translations.0.language') Could you use the dot notation on an object directly, as an attribute of a class e.g. foo = JsonWrap.load(json_file) lang = foo.body.translations[0].language So after abusing __getattr__ a little bit I came up with the code below. No doubt there are 1000 corner cases where this would break as I don't mess with getattr very often, and I'm not very familiar with JSON. Anyway, I thought I'd share to get some comments on where it would break, and justify the 15 mins I spent doing this. class JsonWrap(object): def __init__(self, d): self._json = d def __getattr__(self, name): if name in self._json: obj = self._json[name] if type(obj) is dict: return JsonWrap(obj) elif type(obj) is list: new_list = [] for entry in obj: if type(entry) is dict: new_list.append(JsonWrap(entry)) else: new_list.append(entry) return new_list else: return obj else: raise AttributeError def __repr__(self): return self._json.__repr__() and to use: &gt;&gt;&gt; with open("ar00498-98342.json") as f: &gt;&gt;&gt; js = JsonWrap(json.load(f)) &gt;&gt;&gt; print js.classification painting &gt;&gt;&gt; print js.dateRange.startYear 1994 &gt;&gt;&gt; print js.contributors [{u'gender': u'Male', u'mda': u'Hirst, Damien', u'birthYear': 1965, u'fc': u'Damien Hirst', u'role': u'artist', u'startLetter': u'H', u'date': u'born 1965', u'id': 2308, u'displayOrder': 1}] &gt;&gt;&gt; print js.contributors[0] {u'gender': u'Male', u'mda': u'Hirst, Damien', u'birthYear': 1965, u'fc': u'Damien Hirst', u'role': u'artist', u'startLetter': u'H', u'date': u'born 1965', u'id': 2308, u'displayOrder': 1} &gt;&gt;&gt; print js.contributors[0].gender Male &gt;&gt;&gt; print js.subjects.children[0].children[0].id You'll notice it isn't really a JSON wrapper, more a nested dict/list wrapper, which happens to spit things out in a vaguely sensible way. EDIT: Sorry this uses ar00498-98342.json which is in the OP's repository, under the directory testdata or [here](https://raw.github.com/imranghory/pson/master/testdata/ar00498-98342.json)
I've used it for &gt;3 years. Yes.
It's often more efficient to create a coo_matrix convert it to something else. Basically there are sparse matrices that are good for creating and ones that are good for operating on. It's generally less efficient to to try to shoehorn your code into making a certain type of matrix rather than just letting scipy convert it for you.
How long does it take to enumerate all 7 card combinations without making a call to your evaluate function? I had similar difficulties with poker hand evaluation, eventually using cython to get acceptable performance - but my code is numerically heavy, without the lookup table you use. For comparison: cython: around 20s to rank all 7 card hands. cpython: around 20s to enumerate all 7 card combination without making a call to evaluate. I think you could do much better.
Yes, I downloaded and installed it. That's why the line... from ._gi import _API, Repository ...appears. It's not part of my program, it's a line in the GI package code. Which means, probably, that I installed PyGObject correctly, but the _gi module which is a pyd/dll isn't working. I think on importing the pyd/dll the gtk3 dlls are needed, if they for some reason are missing the dll would fail to import and that kind of error should appear, I *guess*. Maybe it's a version problem? The PyGobject seems to be versioned at 3.10 whilst the stable Gtk3 is at 3.6something, or maybe they are not related... Grrr... I have no idea! I just wanted to get own program to work on windows :(
Windows 7 32bit, python 3.3 The pygobject installer comes with the gtk binaries?
&gt; There is a persistent myth in the Python community that Django is "hard" or complex. that's a straw man if I ever saw one. so is saying it's intuitive. everything is intuitive once you understand it. Having been forced to use it myself, I simply dont agree with the opinions and feel that if the app you are to build does not perfectly fit into the crud space, then django is more trouble than it's worth. regex based routing is not maintainable long term and it's certainly not obvious and readable ever. the orm is not great compared to other options(sqlalchemy, ndb). class based views are a terrible abstraction. those of use that did asp.net back when no one knew any better, laugh at this. the supposed apps ecosystem rarely pays off. it's more like try one lib, doesn't work either fork or find another one potentially wasting more time than it would have taken to just write the fucking thing anyway. all my opinions of course. merely to provide a counter point to the cargo cult. 
&gt;class based views are a terrible abstraction. So don't use 'em. Functional views work fine. Actually, this applies to just about all of your criticisms. Django is loosely coupled, so you can replace the parts you don't like with other systems.
There's a draft PEP for something like this, albeit not that polished and missing lots of the features PEX has: http://www.python.org/dev/peps/pep-0441/
Definitely. I'm always trying out other engines and frameworks but keep coming back to the good ole' Panda when I need to actually finish something. The Panda3D website really needs an update though. It looks abandoned, scares the kids away. 
What if I make it better/cleaner?
I've written both Django &amp; Flask apps in a production environment. This. Over and over and over again.
&gt;if you remove regex routing, and the orm. Well, personally, I like the ORM just fine. What *specifically* don't you like about it? &gt;edit: I'd actually like to hear more about this supposed "Django is hard or complex" thing. seems to me you have to do a little more to establish that fact before your original comment carries any weight. Whenever people talk about web frameworks on this sub (EDIT: or /r/learnpython), I've *always* seen someone say "but not Django, that's too hard" or something equivalent.
&gt; Whenever people talk about web frameworks on this sub (EDIT: or /r/learnpython), I've always seen someone say "but not Django, that's too hard" or something equivalent. and whenever I see a web framework mentioned on r/* it's always django. so, I think we are both going off perception here, not truth. on the orm, sqlalchemy is more to my liking. but you can't realistically use it in django without having to ditch the admin and the app ecosystem. so to say that django is loosely coupled and you can replace what you dont like is a nice theory, but is not realistic. it's funny I called out a strawman and then handed you something real to argue against and to fight for your framework of choice and you have yet to provide anything convincing. "fine dont use it" and "I like it ok" 
Looks great. BTW, speaking of packaging, has anyone gone the route of native platform packages via [fpm](https://github.com/jordansissel/fpm)?
I'll suggest to convert first your vectors to 1xN CSR matrices, and stack them all in a single matrix. It would look like this : import scipy.sparse as sp matVectors = list(sp.csr_matrix(self.get_utterance_representation(u)) for u in utterances) self.utterance_matrix = sp.vstack(matVectors) I have not tested it... but creating a sparse matrix directly from the vectors seems faster than looped assignments. Let us know it it works faster :)
Have to disagree about the loosely coupled part. The template system, ORM and admin are tied closely and are the parts that provide many of the development advantages. If you swap out any of those three, the rest of the stack is a lot less useful. 
&gt;which pretty much blows your theory about django being loosely coupled now doesn't it? Nonsense. If you want to interact with the db, you expect to do so via the Django ORM. This is standard library stuff. But, as I just explained (and you apparently did not read), that ORM can just as easily be replaced with a facade or other monkey-patch. You also *still* have not explained what's actually wrong with the Django ORM to begin with, other than your (since you are unable to justify it) arbitrary and meaningless distaste for it.
nice back pedaling. your solution of monkey patching would work for anything in python due to dynamic typing. so the key here is how practical is it to replace the django orm? it isn't practical at all, thus, no loose coupling as you claim. So you fall back on the tired "Why would you want to do that?" instead of correcting your assertion that django is loosely coupled. 
This will let me throw away a lot of code, thank you!
&gt; you can replace the URL dispatch with something custom if you do, then things like reverse dont work, at least in 1.5
OK, I'm just curious, why are you trying to turn this debate into some sort of narrative? All you're accomplishing is being *really* annoying. And you still haven't responded to my question. Anyway, *of course* you can't replace the ORM and expect database-related functionality to magically work. I mean, really. Are you on crack or something? This doesn't impact loose coupling. In a loosely-coupled system, we do expect components to break if neighboring components are changed. So yes, the admin interface will stop working. But that isn't tight coupling. Components that interact depend on a standard way of doing so, and there is no universal object-oriented database API. You're basically complaining that Django isn't magical. Well, you win on that count. I freely admit it: **Django is not magic faerie dust**. Congratulations.
&gt;if you do, then things like reverse dont work, at least in 1.5 Of course not. That's part of URL dispatch, which you replaced. If you want reverse, you'll have to get it from whatever custom system you used instead. If said system doesn't do reversing, tough.
I tried it and it worked pretty well (for RPM). The only issue I had when using it was that it didn't get the requirements right. ~~For example, my setup script requires Babel; it's translated to "requires python-babel" but that's not the name of the package. Usually, that's the convention Fedora follows, but for that package (and others I assume) it's not the case.~~ Actually Babel is available under both names actually I have no idea why... Sorry, I had forgotten about that. The issue with Babel was that an old version of it was available in the repos, so it doesn't have anything to do really with fpm. And not all packages on PyPi have native equivalents, so it obviously couldn't get those right... So I'd rather package it myself with a custom spec file, or use bdist_rpm for a quick test (ignoring dependencies). Note that I didn't try it with debian packages but I'd guess the same issues would arise there.
The fourth benchmark is the one with all function calls eliminated. It's several loops around the table lookup. Perhaps calculating it instead of using a lookup table is actually faster in Python. I don't really understand it. Lists aren't that slow after all. I tried Cython but purely adding static typing probably won't help as the main culprit is the list access. Sadly I can't get it to compile anyway. Spits out a bad reloc address error which apparently means I have either a 64-bit compiler or a 64-bit Python installed, which isn't the case.
Or, there's: obj = json.loads(json_data, object_hook=lambda d: namedtuple('JSONObject', d.keys())(*d.values())) This lets you access your JSON as a real Python object.
So why **do** I care?
Or just run [devpi](http://doc.devpi.net/latest/) which in contrast is both free and open source.
Despite being no longer maintained, SUDS is sadly still one of the better libraries. In my last job I simply gave up on using an actual SOAP library because SAP was cranky as hell and I couldn't get it to spit out valid WSDL files. In the end I just gave up and built the thing out of Requests and lxml.
Thank you. I did some experimentations on your code base and I was not able to get any interesting result. (Array is more memory efficient than list, but a bit slower. Using pypy, both appears as efficient for memory and computation). Doing some ugly unrolling of the loops and inlining of the accesses I'm able to gain a few percent, but nothing dramatic. Compared to a naive C implementation, I'm still 100x slower ;) So for now I have no idea to dramatically improve your issue. As it was suggested, I recommend pushing this testcase on the pypy bug tracker, they are always interested in test where pypy is not as efficient as it should. I also tried to write the evaluate function in C and call it using ctype or cffi. The function is more efficient, but the calling conversion eat all the improvement. In the case where your call to "evaluate" appears in a loop which can easily be rewrited in C, it may be an interesting solution. I'm not sure I'm perfectly understand the way your grid works. I don't know your memory limitation, but if there is "only" 133,784,560 and you are able to store your result on one integer, you may be able to create a direct acces map using "only" 500 MBytes. Have fun. (edit: I may have said total crap in the last paragraph)
Why is this better than wheel?
&gt; template system, ORM and admin are tied closely Nope. There is no relation between the ORM and the template system. The admin is basically an application, so yes, it builds on both the template system and the ORM. HOWEVER, you could use the admin and not use either the ORM or template system for anything else in your project if you insist.
There is a ln active fork of Suds called suds-jurko. Might be work a look. I am currently using Suds-jurko for a project, so far it appears to all be working.
Thank you both for your suggestions. I keep getting a mismatched tag error using suds and requests. Not sure what I am doing wrong. from suds.client import Client from suds.wsse import * security = Security() token = UsernameToken('usrname', 'pwd) token.setcreated(datetime.now()) security.tokens.append(token) url = 'https://url goes here/webservice.asmx' client = Client(url) client.set_options(wsse=security) print client
I have made about a dozen .deb packages with FPM and haven't had any major issues, but I have only packaged a few Python applications ([deluge](http://deluge-torrent.org/) being one).
PEX packages multiple distributions. Wheel makes a single binary distribution. PEX could use wheels instead of eggs. 
I am the lead developer of web2py. I am also the director of MS in Computational Finance at DePaul University(CDM side). web2py has been used to create some financial applications (for example https://code.google.com/p/emte-trading/). web2py supports Vertica, a column based database often used by financial companies to store stock data. Flask is also really nice and it is fast for simple applications but it does a lot less then what web2py does (unless you use third party modules). People like it because of its minimalist approach. People like web2py because of its comprehensive approach (although - applications aside - web2py comprises of less code than Flask + SQLAlchemy). I am not too familiar with Pyramid but as I understand it also take a minimalist approach. For example, I do not think Flask or Pyramid have anything equivalent to the web2py's built-in role based access control, wiki with oembed support, grid/smartgrid, and LOAD helper. They help you a lot to build applications by embedding grid controls via Ajax and editing the rest of the pages as if they were wikis, then slapping permissions on top of those pages. 
Yes it did come out as a hideous mass of XML. After putting the ?WSDL at the end of the URL it is now doing what I need it to do. Thank you for your suggestion.
you can run selenium using chromedriver or firefox in headless mode using xvfb (sudo apt-get install xvfb). here is a piece of code i run weekly on headless as a cronjob to login to a website, so that i don't get kicked out for inactivity: http://pastebin.com/JBGCsuwD besides xvfb, you will also need selenium python package and pyvirtualdisplay. 
That's because Ruby took its aesthetics from Perl (this chump is even referencing Perl's TIMTOWDI as a *good* thing), and Perl is a write-only language. Another good reason to avoid Ruby is security, check out the Ruby core developer's response to serious security holes affecting every version of Ruby: https://bugs.ruby-lang.org/issues/9424#note-14 &gt; *"We don't understand... Fuck off"* 
Step 0: profile this code and figure out what is slow. All other suggestions in this thread may or may not apply.
What are the advantages over https://www.pythonanywhere.com?
lookups in lists are O(n) lookups in dicts are O(1) Lists are very slow, and your main loop starts iterating a very large list on every single card lookup. You seriously need to use the right data structure(s). Knuth popularised the phrase "premature optimisation is the root of all evil" and your misuse of mmap and struct in a pretence that its faster proves why. 
I haven't seen Watson before, but I'll have to take some time to check this out! Looks relatively complete on first glance. I'm a pretty big fan of Python &gt; 3 compatibility (or, in your case, requirement) as well. I'm still left with one [web framework](http://aspen.io/) that is yet to "get with the program" and provide Python 3 compatibility... Not sure why you've received some downvotes. People should explain.
We're one step closer to a python-based Banshee without the bugs... awesome!
ok.. the way you're using `Timer` is weird, maybe try `time.sleep()` instead. I've never used Ghost, I'm not sure what it's doing under the hood. Is it running the javascript required for the page to load properly? I've gotten phantomjs working in cron scripts by using `subprocess`.
It's relatively new, and I haven't really pushed it elsewhere other than reddit. It is quite a bit different to other frameworks in terms of structure and concepts (dependency injection for example). Definitely let me know what you think after you've had a play with it :) Downvotes are just a part of reddit, it's just a shame they're not super helpful in understanding why someone disagrees with a post.
I only looked at code example so far, but it looks like I'd write my own class for reading the audio file/stream and pass that to the musicplayer module. How well does this work with streaming music? Would the musicplayer module buffer some of the music or would I need to handle that myself in the 'Song' class? I currently have a video and music player I've written in Python that uses VLC to play streaming music when not otherwise watching videos. I have tried using PyGame and a couple of other Python modules to handle the music and have had problems every time with them not being able to handle the HTTP stream at all and when I've managed to write something to open the stream outside of the player and just give the player a file object there was always problems with buffering not working properly.
Well for example: if you make a service using Flask served by Gunicorn, CherryPy, Waitress, or any other pure-Python server, you can build a PEX and then just upload that single PEX file to your server. As long as the server has a comaptible Python version, it will run with zero setup. It seems a lot like Java's .jar (which imo is good)
Try running ./pants.bootstrap first
Meh. I see it. I've implemented Tic-Tac-Toe in Python both ways. It has its pros and cons.
You could use either a 1d array or a 2d array. Since it is a small board, a 1d array has more pros the cons. If this were a larger board game, let's say of 10x10, 2d array would be much better. 
Python IO is *relatively* fast, but he's doing disk IO inside loops, that's a huge no no in every programming language. He's seeking and reading data off disk hundreds of times every time he calls the evaluate function. There's no way to make that not slow. 
This is pretty neat. It's not listing my playlists, though. Are you somehow logging in to my account via the spotify executable on my machine?
That is interesting. How would I do that from within PyCharm? Can I use the built in terminal? Edit: I think the problem is I have multiple versions of python installed and the one I want isn't in PATH. So I had to do: C:\Python34\python.exe -m easy_install path_to_my_package.exe/msi Edt2: I realized that was installing it for Python34 not just for the environment. So instead of that path I had to replace it with the path of the environments python.exe. Know of anyways to simplify this? C:\Users\...\Env\Scripts\python.exe -m easy_install path_to_my_package.exe/msi
Just because something has been done doesn't mean that it can't be done again. Look at web browsers, social networking sites, AND some video games. Just make sure to write most of the code yourself!
How is this better than using SOCKS5?
Sure, by all means. Just making sure you knew this already existed.
or just schedule "python c:\...myautotasks.py" ? 
I've been using this every work day for over a year and it's awesome.
There is something called package manager, and there are ports on the mac. Keep that thing on windows please...
This is what's great about the Python programming culture.
Great work! I frequently use sshuttle when i am on travel and surf through unsafe hotel WLAN connections. Sure i could use a real VPN, but sshuttle is so much easier to use. No installation required ... you just type in one simple command and it works!
So just like the VPN functionality already included in OpenSSH, then?
I didn't write it, but I also like the readme. :-) I find this program to be useful.
Read through the readme, skimmed through the code. Does anyone know where this might leak data? If you use this over WiFi on a shared network, will other people just see one connection to a remote IP? It looks like you can tunnel DNS requests through it, so that's good. Will it proxy all UDP traffic as well? All sockets? Is there any chance someone might be able to infer your traffic or activity? Can you run tor on the remote server and tunnel through to it, then again through tor on the remote server, or would I have to use something like socat in tandem?
Hi, I need some help running your code. I did pip install wx but i get an error: ImportError: No module named lib.mixins.listctrl What am I missing?
Hi, (I'm the developer) That is certainly a use case which was planned from the very beginning and which I eventually will implement in my music player (http://albertz.github.io/music-player/). I haven't really tried it yet with this module but you described how I imagined it to work like. I'm very open to suggestions how to simplify the interface in case it gets ugly on the Python side - because I really want to take as much work away as possible. It does buffering etc already all under the hood. It also buffers a few of the upcoming songs in the queue (mostly needed for gapless playback). Probably, for streams, the module must know that seeking doesn't work. The module doesn't support video, though and it was not really planned at all. I'm not sure if you need that and how complicated it would be to add that to the module. I wonder about your problems with VLC. Are you using and controlling the standalone player or are you using the lib? I think the VLC LGPL lib didn't exist when I started my work on this module, otherwise I would probably have considered it. From what I have heard, it is already much more high level than FFmpeg and also has the output modules (so PortAudio or so not needed) and provides a lot of advanced stuff (volume normalization, equalizer, ...) (although one VLC main dev told me that gapless playback doesn't work yet (https://news.ycombinator.com/item?id=4772213)). Also, I'm not sure whether there is any good Python wrapper yet for the VLC lib. A third alternative to this module and to VLC is probably GStreamer, although I don't have experience with it. I got the feeling that it would probably be somewhat a hassle to build this including all its plugins as a static library (something I was planning when using my module on iOS). 
Haven't been able to find any requests going back and forth, I intend to also crawl some chat for statistics and those aren't possible with requests I think.
Now that's pretty scary …
I tried time.sleep() as well, to no effect. I have no idea how Ghost works either. The page is partly a chat that ofcourse is updated over time that I want to crawl after x amount of time and other is content that appears at random times. This is the reason I want to just let it run for x amount of time and see what I pick up, since it gives me the possibility of doing statistics.
I played around with Xvfb, but never knew about the pyvirtualdisplay. ill look into and update my post with what I find. *EDIT* pyvirtualdisplay was just what I was missing. Now the time.sleep() works for letter the page "wait" work as well!
Hey @mdipierro, nice to meet you :-) I've been looking at web2py for some time and I'm leaning more toweards Flask/web2py. Would you mind shearing with me your thoughts about the learning curve for web2py, ability to customize it to my needs/preferences (for example ability to switch templating system), links to additional resources? In addition, would you mind directing me towards some bigger sites (or maybe more known) that uses web2py? I have also one question that wanders around my head for some time. Why are sites built for Python's web frameworks usually so... ugly? :-) Compare your first thoughts while looking at python and ruby sites. Do the same for Rails/Sinatra vs. Django, Flask, web2py, Pyramid, and so on. Have a good day, Mike
Hey btreecat, would you mind sharing some links for sites that you've built with web2py? 
In what particular ways, if you don't mind me asking?
That's what I said. :)
Sorry buddy, but Flask &gt; web2py , at least for novices like me.
I'm honestly not sure :/ don't see any requests going in the chrome development tools.
I am a novice-mid experienced dev, and this is the setup that helped me the most: -GVIM + Janus : Hard at the beginning, but works on every unix platform (well, VIm) and is damn fast, plus it has a graphic interface and . JAnus helps customizing GVIM. -Syntastic+pylint : Tese was the killer feature for me. Helps get rid of bugs before running the scripts and guide you to use proper PEP 8 style. -IPython: Because sometimes you just wanna try a certain piece of code. Ipython makes it extrmely easy, it's autocomplete feature helps a lot when you are dealing with new modules and you dont know 100% how the functions/classes are spelled.
Twitch.tv's chat, easy to test chat-crawling capabilities on. :)
Thanks, that worked.
tun. (The others are just proxying.) See the "SSH-BASED VIRTUAL PRIVATE NETWORKS" section in the man page.
&gt; not much support, at least in the documentation, for using the template system or the ORM outside of Django Just import it and use it like any other library. There's no magic about it. &gt; Is it really the case that people are building apps with just the Django ORM? Well, I certainly have components of my web applications which run outside of the context of any web request. They don't know anything about the web, but they still use django ORM. There's no particular difficulty with it. &gt; Can that be included without bringing in the entire Django package into your app? Well, it's not distributed separately, as far as I know, but there's no reason you couldn't extract it if you want to. There's no particular reason to do that, because you don't pay a penalty for having extra libraries installed in your virtualenv (or whatever). &gt; Most Django apps that I have reviewed expect that the integration of the ORM, template system and admin are in place as is. If your app does not use one of those three systems you lose much of the benefit of the app ecosystem. It depends what you mean. If you use a different ORM, you may lose some of the convenience of some apps, but not others, depending, essentially, on whether they are built to query your models, or expect to be fed objects externally. &gt; My main critique is that the project and the ecosystem is very inwardly focused though the situation has improved. How would you like it to be different. I agree that it builds on itself, but I see that as natural, because every django installation will have those basic libraries.
i'm glad it worked. (btw, link in your post for the xvfb guide needs to fixed.)
Have you considered the [jsonpickle](http://jsonpickle.github.io/api.html)? It'll handle dates. :) 
I did not know that existed. Mine is mainly one direction.
It's over ssh so it's end-to-end encrypted
Fixed the link. I figured I would wrap it up in a post, maybe I can save someone else a few hours of pain. :)
How do those help with the situation when you have multiple different versions of libraries, both internal code from you/your team as well as 3rd party dependencies, that you need to manage across a set of dev, test, and production machines? As I've said so often in discussions about packaging &amp; package management: if you think linux package managers and ports are the answer, then you don't even understand the question. &gt; Keep that thing on windows please... Anaconda Server is mostly targeted at businesses. Most businesses have a heterogenous mix of platforms that cross the POSIX/non-POSIX divide. Anaconda Server is a *cross-platform*, centrally-managed "homebrew" or "ports" system with enterprise integration features. If you've ever had to support Mac, Windows, and Linux users all trying to roll Python scripts into production, then you will understand why this is a jaw-droppingly awesome product. If you've never had to do that, then you probably won't understand the need for Anaconda Server.
Glad to hear conda is working well for you in that environment! If you ever have any questions or feedback, we'd love to hear from you: info@continuum.io
Different thing altogether. PythonAnywhere is a Python shell in your browser - the Continuum Analytics analogue of this is http://wakari.io. 
Many people tend to think that conda is merely a competing thing to pip, and therefore Anaconda is only about Python libraries. However, conda is a much more flexible tool, and closer to a "cross-platform Homebrew" than just a "pip with a better binary repo". (If you really want to get into the details of this, you can chase down the rabbit hole of discussions about conda, pip, wheel, etc. etc. on the PyPA mailing lists) What we find in many production environments where people are using Scipy/PyData tools is that they are both cross-platform and cross-language. Generally there are C, C++, R, Javascript, and other libraries all in there. Managing the production use of this stuff in a sane way is a need that is really underserved at this point, and is what Anaconda Server is meant to address. 
that..that makes so much sense.. awesome :D Thanks for taking the time man. How did you find out?
After my issue with SQLAlchemy and code autocomplete I posted in another comment, I was interested in trying out another IDE as I didn't want to deal with some other odd behavior that would hold me up. PyCharm is fairly intuitive right out of the box. I've only been using it about a month, so I don't know all the features yet. 
Come to Austin! I run [Austin Python](http://meetup.com/austinpython) and we have recruiters and startups hitting us up all the time with open positions. Besides, Austin is awesome, full of good food and fun people, and (still) relatively cheap to live in.
There are actually wrappers out there which will tunnel all your network traffic over a SOCKS5 link.
Hi Peter, thanks for replying. Actually I do have one question for you -- in addition to Linux cluster, we have an array of Windows boxes and we need to run 64-bit NumPy on them (e.g., many scikit-learn functions implicitly assume you are working on 64-bit). Is there any way to solve this via Anaconda distribution? We would be more than willing to obtain the Pro package license(s) if it provided a true 64-bit NumPy (and other NumPy-based libraries) built against MKL, probably with an intel fortran compiler. 64-bit numpy on windows is a huge problem and I can assure you many people/companies dependent on Python scientfic stack (I'm a quant in a trading firm myself) would be willing to switch to conda _just_ for that. Thanks!
It only tunnels TCP and DNS udp packets using chains in the nat table. All other packets travel along the unencrypted network, like pings. I think the following should lock down the outgoing packets on your network, but it would be good to have more people verify that it behaves as intended. # flush out the filter table iptables --flush # set the default policy to drop everything iptables -P OUTPUT DROP # allow loopback iptables -A OUTPUT --dst 127.0.0.1/8 -j ACCEPT # allow TCP, which should be chained back to sshuttle iptables -A OUTPUT -p tcp -j ACCEPT # allow DNS requests to your name server (chained back to sshuttle) iptables -A OUTPUT -p udp --dport 53 --dst $YOUR_DNS_SERVER -j ACCEPT # allow DNS responses from sshuttle's proxy iptables -A OUTPUT -p udp --dst $YOUR_LOCAL_IP_ADDRESS -j ACCEPT 
Not arguing with your choice but so that I understand... The ordering relation is derived from what metric?
Anaconda does provide 64-bit NumPy for Windows: http://repo.continuum.io/pkgs/free/win-64/index1727.html And the NumPy in our premium Accelerate product is 64-bit and linked against MKL: http://repo.continuum.io/pkgs/pro/win-64/index1727.html If you're having trouble getting these to work properly, please email us. We'd of course love it if you purchased Accelerate or Anaconda Server, because that also helps us keep Anaconda free for the community of researchers and students. :-) 
Oh, I just saw your email - thanks for doing that, we'll respond there.
[Wikipedia has a list.](http://en.wikipedia.org/wiki/Comparison_of_proxifiers)
Can PEX work with binary packages and their dependencies as well? pyodbc or NumPy for example?
&gt;They don't say it won't work, but they say it's not supported. 3.x is not backwards compatible with 2.7. It may not run at all. If it does run, it may produce incorrect results. You could use `2to3` on it, but that isn't guaranteed to precisely preserve the semantics of its inputs. You might have to tweak the output by hand.
With two dimensional containers, you have to do some extra math. But it's more semantically correct.
What an unnecessary flame. They're just tools, and web2py offers a different approach than Flask/Bottle. Given the OPs background in finance, and mdipierros' comment, I'd say it is worth a shot for him to check it out. It's not even particularly that much different when you go through the "hello world" tutorials.
Nice talk, with IMHO two shortcomings: 1. The author should have credited Alex Martelli. I guess he was not aware of Alex's work, but this seems a bit strange since Googling "python dependency injection" leads pretty quickly to this talk: http://www.aleax.it/yt_pydi.pdf that was given 5 years ago. 2. Why stop with manual DI and not go all the way to a DI framework, a là Injector (https://pypi.python.org/pypi/injector) ? I'm sure there are pros and cons for using manual DI vs. automated DI, but I'd like to see a discussion of them somehow. 
Another point (a question actually): is there a link to the slides ?
hi /u/starli8, I need more info to debug the issue. You can also use the built in crash reporter if Canopy crashes while running your code. p.s enthought employee here
I often work with csv files as intermediate storage for data analysis because my coworkers primarily use SPSS. This bit of code takes a bunch of csv files, concatenates them and returns a dictionary, formatted as follows: http://pastebin.com/qehxA50z It's fast: I calculated the average running times and the standard deviation of 14000 movies in 0.49 seconds. Feel free to comment on style and flaws.
It seems to have been an amicable transition. Here is Travis Oliphant's blog posting about [Transitioning to Continuum](http://technicaldiscovery.blogspot.com/2012/01/transition-to-continuum.html). 
Is it coincidence that the website is your name?
1.) I thought about that as well, and tried running it once to get the llvm compilation done, before timing it. Didn't make a difference. 2.) I tried n = 1000, and n = 10000. n = 1000 was proportionally slower, and n = 10000 I had to kill before it finished because it was taking so long. I'll check out the annotate function to see if I can figure out why it's not working. Thanks.
since this is free is there any reason to buy two scoops of django?
donst work with unicode
Yes, it does if you specify encoding. For example: csvfile = open(file,newline='',encoding='utf-8')
This looks pretty cool. But, in the Useless Trivia section of your README.md, you mention how 1998 was 12 years ago. Instead of updating it to say 16 years ago, I would simply say "over 15 years ago", so you don't have to come back and update the README every year (not that I think a section called "Useless Trivia" is in anyway important, it's just nice to keep it correct).
Just pick one and jump into it. I initially thought about going with Django but was intimidated by it so I tried Flask. Now that I have a good grasp on Flask, I am started noticing that some code snippets I encounter are from Django. Another benefit of Flask and Django, is you can use Python 3+ which forced me to finally switch off of 2.7. If you do pick Flask, I recommend this tutorial: http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world
I put a full solution over on the stackoverflow page, but the basic reason why is that numba is not figuring out the type of `lookup`. If you stick a `print numba.typeof(lookup)` in your method, you'll see that it is treating it as an object, which is slow. Ideally you could pass in the type of the variable through the `locals` dict keyword to the decorator, but I was getting a weird error. A work-around that produces very fast code is to just create a little wrapper around `np.cumsum` and jit that method, telling it the explicit input and output types. Code is here: http://stackoverflow.com/a/21489540/392949
There are tons of free django tutorials out there since ages, people buy Two Scoops because is really good and is worth the money, from what I've been told and read so far the authors gave their own totally biased opinion instead of yet another how-to, that's juicy reading. But YMMV, I think you can go scoopless and still survive.
Its like a grassroots NSA surveillence program! Joking aside, thats very cool!
The biggest barrier to the real world use of numba is definitely the lack of sensible error messages when jit'ing fails. Generally the traceback dumps the codegen and ends at the decorator, but doesn't show you where things went wrong in the actual method. It would also be nice to cache compiled code, since the codegen/compilation can get very slow for complicated methods. There is also the concern that by splitting off flypy from numba into a distinct project means less support/development of numba in the future. I know Continuum is doing a major refactor of numba right now. There has been a ton of activity in the development branch on github over the last couple of weeks. I'm hoping that the changes will smooth some of the rough edges. 
Thank you, that's very clear!
@autojit is faster than poor numba code. I've seen improvements using doing it the "right" way and I've seen slowdowns. Then I use autojit in those cases and it's fast. Results may vary.
LOL @ "spreadsheet = makedict(..." Nothing wrong just thought it funny you call it "spreadsheet"
&gt; this information should be free Why?
Prior to SOCKS5, SOCKS did not support UDP, but SOCKS5 added both UDP and IPv6 support.
Thanks that is actually the library I am using now.
I solved this. 
[tsocks](http://tsocks.sourceforge.net/). tsocks + ssh -D and you have a VPN.
A solid and developing cross-platform gui library. Glad to hear it got 3.3 support!
* http://en.wikipedia.org/wiki/Information_wants_to_be_free
Thanks. I just found out that a few other groups here are switching to python for tools and automation and they've selected 2.7. So, I guess that answers that! 
This is not the same thing though. There is no government involved and there is no IP issue. djangobook is utterly out of date and no good for new learners working on new projects. twoscoops is not the same type of book as djangobook. 
That link, it doesn't support your position.
Anyone used both Qt (PySide || PyQt) and Kivy that can comment on their preferences? I'm currently a Qt guy that wants to start working on touchscreen, and I'm considering making the jump. Particularly now that it supports Python3.
I am very new at this and just trying to write some functions to retrieve data from old tables. I will try to see what I can do else might have to downgrade to 2.7. Thanks for the suggestions. 
Apparently Python 3 only, variable/function naming is bad, doesn't even run because `main()` takes 3 parameters. Can't `csv.DictReader` do anything for you?
I need to build a GUI for an application that's currently just CLI, but I don't need any touchscreen support for a while. Is this still a good library to start with? I'm just starting with Python and am only really aware of PyGame as any kind of alternative so far.
Thanks, that totally fixed it! I tried playing around with unrolling the numba_cumsum function into loops, and jiting it, but that resulted in slower behavior. Looks like this is about as fast as it can get. What's weird to me is that on my machine, the numba code is consistently ~twice as fast as the cython code. As they are both compiled, I find this descrepancy odd. Thoughts?
Ah, I see. Thanks, I knew that ssh does not support UDP over SOCKS5 and assumed it's a limitation of SOCKS5 itself: http://superuser.com/a/678531/4860
It really depends on what you want to do. In my opinion Kivy is a perfectly good gui library for both learning and using in many things (even on the desktop), but I'm well aware of a large subjective component in that - plus there are things Kivy absolutely isn't good for. In particular, it doesn't really look or behave natively in the way that (for instance) a qt program would. Of course pygame isn't good for that either, it's kind of a lower level screen interaction library (with lots of great tools etc., don't get me wrong). Good for some kinds of games, but probably not a great tool for making general interfaces. So if you want to play with guis, I think Kivy is good and legitimately fun and useful for many kinds of application, but honestly something like one of the Qt binding libraries (PyQt, PySide) is probably a better fit if you really want applications that will automatically fit in with all your other programs.
Continuing to cross post from the SO answer. . . I also tried hand-coding the cumsum and I found it to be marginally slower than calling out to numpy. As far as differences between cython and numba, it could perhaps be related to whatever c compiler you're using vs llvm. What compiler are you using? Are you specifying any optimization flags in your setup.py?
Dude... Is that all you do is bitch and moan about things not being free? Why hang around the sub?
you're confusing free and Free
I'm sure you also like to work for free. 
Numba developer here. As joshadel figured out, the slowness in this example comes from numba creating a python object. I ~think~ the real issue here is that numba doesn't know the return type of cumsum, so it stores the result in an object. A "trick" to help diagnose these types of problems is to add nopython=True to the jit/autojit decorator (e.g. @numba.autojit(nopython=True)). This flag forces numba to bail out should it feel the need to call into the Python object layer, and displays the line number that is causing the problem. One of our goals in the next version of numba is that if numba needs to fall back to Python objects, it should never run slower than pure python code like in this example (and eventually in most cases will run much faster. I ran the example above as is with the numba devel branch and the numba function was the clear winner).
Having the info in more than one place may be useful, who knows :) I'm using GCC 4.6.3. I didn't know you could add compiler flags to setup.py, but after figuring it out I compiled with -O3, and it didn't seem to change anything.
Awesome! Thanks for such a great module. Any idea when the next version will be released? Although, I suppose I could play around with the devel branch now...
It looks like the numba team has been putting in a ton of work on the dev branch, and I'm definitely excited to see what the next release looks like. Count me in as a beta tester once a version is available via conda. I mentioned some of this to Siu in an email, but I think the biggest things that would advance numba are: (1) better error messages that trace back to the code rather than the codegen, (2) detailed examples in the docs on how to debug numba issues, (3) better behavior when things go wrong - I often just get segfaults (4) The ability to cache jit'd code/faster compilation. For a large project I'm working on, re-jit'ing all of the code on startup incurs a significant cost. All around though, numba's performance has been amazing for such a young project. 
/r/learnpython also, just create another list and append that list every run, then just do: if i == j or j in other_list: return False You can also clear that list every 3 times by making a counter and an if/else statement. 
Looks really good.
BS. Based on what?
Why not just csv.DictReader? If this method is significantly faster, you should consider contributing. If not, why did you reinvent the wheel? (seriously, I don't understand why DictReader and glob could not accomplish the same in a few lines) 
Personal experience. I strated with web2py and switched to Flask because of the great tutorials, addons, and docs I found. Plus, it feels much more intuitive. This is probably the comment I have made that has received the most attacks. I am just stating my opinion. And my opinion is, Flask is much better for novice python webdevelopers. Sorry if that makes you upset.
Another good resource is http://www.tangowithdjango.com/book/
PySide, still, but if it's targeting mobile exclusively, still gotta go Kivy
HOLY FUCKEN SHIET!
For that specific need there are python wheels.
Start with tkinter. It's very simple, it's included with python and you can probably do everything you need with it. You can also make it take the theme of your OS, so it'll look like a native app. Kivy won't do that.
Memory-wise, the vstack solution shouldn't use more than (roughly) 2 times the final size of your matrix. How many utterances (rows) do you have in your matrix ? Apart from that, I can't see a much more memory-efficient way to build the matrix, as you'll have to store all utterance data in a single place in the end. Building the matrix incrementally would lead to expensive copies.
I guess QtQuick/QML should do the work.
It's nice to see one "Python2-only goodness" less.
No, they are implemented in Kivy.
&gt; Farther more Further more. The first is for distance, the second is for metaphorical distance.
TWD was exactly what I needed.
Does an Android app made with Kivy run on all Android 2.2+ devices?
Normally yes. Android 2.2 ensure us the minimum: OpenGL ES 2.0. But some devices advertises they support it but it's wrong :)
Wx is easier though. Qt requires to use it's signalling and primitives. Wx does not have those. It's just a gdi library. 
That's the bit that I'm most interested in. I've not used QML yet, so I'm deciding to learn either that, or Kivy.
Don't downgrade, read up on using virtualenv. You can install 2.7, or any other version needed, and not affect your main installation.
For what is worth, PyPy is about 8x faster than pure python and a little bit more on numpy.
I agree. I used PySide quite a bit but recently went through the wxPython tutorial and felt that it was much easier and straightforward to use. I'll definitely be using wxPython for my next GUI in Python.
What's the difference between pycoders and http://www.pythonweekly.com/ ?
It doesn't do Python 3 though.
Kivy is lighter weight, has a smaller disk footprint for packed apps and has *significantly* better mobile support and is actually faster than QT for some things (UI transitions for example). That said, the kivy markup language leaves something to be desired and it's not as good as qt quick... but you don't have to use it if you don't want to. 
Its not in the changelog, but 1.8 is also significantly faster for high GPU demand apps like games. Great work~
You shouldn't use relative paths, as they are relative to the *current working directory*, which could be anywhere depending on how the script is ran. Do this in `mymodule.py` instead: import os.path open(os.path.join(os.path.dirname(__file__), 'AA', 'file1.xml')) 
Hi, thanks for your quick reply. I just made the change and now its working like a charm ;) 
Upset? No. Why? I think Flask is an excellent framework. I never stated otherwise. The author is one of the best python developers I know. Different people have different preferences and that is fine. In fact web2py copied some ideas from Flask after Flask was released, for example the thread local storage for passing requests to modules and the (optional in web2py) session stored in cookies. What I would like and I do not see anywhere is a feature/syntax comparison about what you find in Flask that you do not find in web2py. The only reason I would like you to argue your position in a more concrete way is that without it your comment does not help me make web2py better. As far as your opinion is concerned better because "it feels much more intuitive" is fine and I respect it. It may help others but does not help me. That's all.
*Here is the text of the [accepted answer](http://stackoverflow.com/questions/10814535/10814662#10814662) to the [question](http://www.stackoverflow.com/questions/10814535/can-i-iterate-over-a-class-in-python),) linked above, by user [glglgl](http://stackoverflow.com/users/296974):* --- &gt;If you want to iterate over the _class_, you have to define a metaclass which &gt; supports iteration. &gt; &gt; x.py: &gt; &gt; &gt; class it(type): &gt; def __iter__(self): &gt; # Wanna iterate over a class? Then ask that class for iterator. &gt; return self.classiter() &gt; &gt; class Foo: &gt; __metaclass__ = it # We need that meta class... &gt; by_id = {} # Store the stuff here... &gt; &gt; def __init__(self, id): # new isntance of class &gt; self.id = id # do we need that? &gt; self.by_id[id] = self # register istance &gt; &gt; @classmethod &gt; def classiter(cls): # iterate over class by giving all instances which have been instantiated &gt; return iter(cls.by_id.values()) &gt; &gt; if __name__ == '__main__': &gt; a = Foo(123) &gt; print list(Foo) &gt; del a &gt; print list(Foo) &gt; &gt; &gt; As you can see in the end, deleting an instance will not have any effect on &gt; the object itself, because it stays in the `by_id` dict. You can cope with &gt; that using `weakref`s when you &gt; &gt; &gt; import weakref &gt; &gt; &gt; and then do &gt; &gt; &gt; by_id = weakref.WeakValueDictionary() &gt; &gt; &gt; . This way the values will only kept as long as there is a "strong" reference &gt; keeping it, such as `a` in this case. After `del a`, there are only weak &gt; references pointing to the object, so they can be gc'ed. &gt; &gt; Due to the warning concerning `WeakValueDictionary()`s, I suggest to use the &gt; following: &gt; &gt; &gt; [...] &gt; self.by_id[id] = weakref.ref(self) &gt; [...] &gt; @classmethod &gt; def classiter(cls): &gt; # return all class instances which are still alive according to their weakref pointing to them &gt; return (i for i in (i() for i in cls.by_id.values()) if i is not None) &gt; &gt; &gt; Looks a bit complicated, but makes sure that you get the objects and not a &gt; `weakref` object. &gt; &gt; --- ^[about.StackBot](http://www.github.com/gabrieldain/StackBot) ^| ^(downvote to remove)
Yeah, for something like that I would just use beautifulsoup4 and `timer.sleep`. I have never used the Selenium browser plugin for something like this. I would think that writing a simple crawler using Python would be loads more easier. 
I use it quite a bit for exploring code. I also like to accumulate code into a python file while fleshing out new functionality. You can have the best of both worlds, by developing stuff in a file, doing `reload(mymodule)` in ipython, and then poking at your code interactively.
&gt; IPython is known for the notebooks. Really? 90% of ipython my use is as a shell, since, you know, that's what it is... Notebook was introduced in version 0.12, waaaaay back in Dec 2011. 
I pretty much never use -i, but I use autoreload allll the time. I also use %run a lot. 
It also has a client but that one is a little frayed around the edges. Right now the server has a REST based API. I'm looking to add more features/remove bugs/vulnerabilities. Any suggestions?
Hey guys, FSP author here. This is a guide with resources I've been working on over the past year. I help teach a lot of newer developers Python and I noticed that once they get past the syntax and learning Django, Flask, or Pyramid there's a missing link to learning how to properly deploy their applications. This site will hopefully help the community bridge that gap. Please let me know what resources and sections I'm missing either with a comment or pull request. You can see some of the sections are also very bare bones (like configuration management) so bookmark and check back in a few weeks as I fill those parts in.
hey! Thanks for the guide, newbie here! off topic question: why in your opinion more developers are using lightweight frameworks like Flask instead of..say Bottle? I personally find the latter more complete, having better support for noSql frameworks and overall better syntax. What's your opinion?
Hey you are the [underwear](https://github.com/makaimc/underwear/) guy! Thank you very much for this!
Bottle isn't interesting when I saw it. It had huge code in a single file. Microframework doesn't mean single page app like js. Flask picked up because jinja2 is fantastic templating engine and easy to get started. Armin is active python contributor. 
embed() is probably my most used function
http://www.fullstackpython.com/databases.html No mention at all of SQLAlchemy seems a bit odd. Edit: I see you touched on the Django ORM in the frameworks section though. I guess either place could be a reasonable spot to mention ORMs.
Thanks for the effort going into this. Bookmarked and ready to read through when I've got a bit more time on my hands.
Great stuff no matter Python or not great overview.
would also like to see mention of Underwear (had not heard of 'till I read the comments), Docker and awstats (general server tracking useful outside of Gstats)!
Why does it matter how bottle is designed from a backend perspective unless you're planning to modify bottle itself? It doesn't prevent *you* from designing your application however you'd like.
Thanks. Deploying apps is the hardest part for noob irks like myself which is why I stuck with PHP. Hopefully I'll be able to move to Python, I like the language a lot.
For really simple things tkinter is my go to.
Microsoft does not distribute python with its operating system. Download the installer from python.org and then you can bootstrap pip and setuptools with the get-pip.py file you can get from pip-installer.com Make sure to check the add to path option when installing it, makes things a lot easier.
[http://www.python.org/download/](http://www.python.org/download/). You're going to want the Windows MSI installer.
It's the notebook that speeds things up. You get the benefit of interactive development but can edit and run blocks of code instead of single lines. When something works, you can copy the chunks back to your editor. It also depends what you're doing. For server-side web development, having to restart the server means scripts are a better option. For machine learning (look at the url) you get a matlab-like environment from the notebook.
I noticed that, too. But the guide seems to be in progress rather than a finished product.
yep, this guide along with the Underwear open source repo are my projects for this year. This feedback is really helpful though since it's a lot of material to cover. I knew I forgot a bunch of necessary items
Hmmm, I think ORMs should be talked about under the databases section personally. They don't have to be part of a "framework".
NoSQL...here is a nice concise pro, con and common use page for the different NoSQL databases: [NoSQL comparisons](http://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis) That would be a nice add as a link in the NoSQL section.
How awesome is it to be known as the "underwear guy"?
nicely done! thx for writing this up.
Why no mention of tornado? Also a websocket/ajax section would be nice, and maybe task queues and load balancers.
Wow really? People don't use the interpreter? I feel like you're missing out. I test out code/syntax/errors through the interpreter. It's friggin wonderful.
Based on the HN link it seems to be three years old. He may have updated some (Redis) but Mongo and Cassandra refer to really old versions.
Could I ask what the website is built in..I really love the look and feel to it! As someone who is about to get started with Python Web Apps, I'd love to know if I can achieve something similar to yours. 
yea, it's built in Pelican (http://blog.getpelican.com/) with a slightly customized theme built on top of Bootstrap v3.x plus the Journal theme from bootswatch (http://bootswatch.com/journal/). Content is written in RST. Here's the source (https://github.com/makaimc/fullstackpython.github.com/tree/gh-pages/source). There's a post on how to get started on my technical blog here: http://www.mattmakai.com/introduction-to-pelican.html Also, the diagrams (more coming) are created in Balsamiq (http://balsamiq.com/)
Thank you very much for the in-depth response, plenty of reference material to help with my project. Many Thanks :)
If you (or anyone else reading this) is looking to use Python for scientific work or data analysis, you'll soon want packages like numpy and pandas as well. There are a number of [Python distributions](http://scipy.org/install.html#scientific-python-distributions) available which include these packages along with Python in one download. [Pyzo](http://www.pyzo.org/) is actually based on Python 3, and [Anaconda](http://continuum.io/downloads) can set up a Python 3 environment after you've installed it.
Nice concept. First minor thing I noticed: The operating systems page doesn't seem to consider Debian as a serious option, where in reality I would expect far more people go with Debian stable than (among others) Ubuntu for Linux web servers.
Excellent website and idea. Well done!
&gt; I may need more scripts too as my research progresses, The chances of someone doing something for free, especially if you have revisions, is very small except for some rare exceptions (such as open source). The chances of this happening multiple times is even closer to zero especially with an attitude like yours. If you're going into a career where data collection like this is going to be frequent you **will have to learn to do this yourself** if you want to be successful compared to others in your field. Looking at some of your other posts, you're not a stranger to programming, so is the reason you're wanting someone else to do this for you because you just don't know Python? If you don't know Python, have you put any time into trying to figure this out? If you haven't "because you don't have the time" then I assume you're holding down a job, attending the maximum number of classes you can, and getting 2-4 hours of sleep a night. If this is not the case "because it's not one of my primary classes" then what are you doing here? If you're wanting to do well in a class that's not your primary focus do it yourself, make a damn good attempt at it, or don't try at all (not trying means you can't ask someone to do it for you...). If you don't know how to do it yourself then ask for some direction, try it out, and then ask for feedback because you'll not only learn something but it will be your own work that made the grade. I don't have a problem with people asking for help, in fact it's a great trait to have, I have a problem with people who truly believe that someone else will do the work for them. I will gladly assist anyone asking for help after they have already tried it because it's a sign they want to help themselves but I refuse to help someone who has not tried anything. **EDIT** Nevermind....I've read some of your comment history so the above obviously is not going to help you at all. Best of luck Mr: * entitled senior on the deans list who has room to be "lazy here and not be called part of the deflation of intellectualism in this country" * " Bullshitting is a very marketable skill." * " would definitely be willing to pay someone to build (or teach me to build) a webcrawler for my purposes"
College student with no time to learn?
what's the technology behind Python Jobs HQ? search results are returned so quickly. How did you guys achieve that?
Hm. Nifty. But, is it useful in normal projects? That's my first question.
Wow I've been learning python with not alot of experience in programming, and was trying to find this EXACT thing. Thank you so much!
&gt;If you are about to ask a question, please consider /r/learnpython
sorry :{ 
Hey I'm still a codecademy noob myself! But hopefully I can help. First make sure you are 'importing' the correct module, also when printing out your answer, you are printing actual numbers instead of variables you set(hint: str()) I don't want to give you the answer but let me know if you have trouble with it further!
Thank you so much! i appreciate it!
No problem, they also have a forum if you search codecademy forum (name of section) that can help out, but honestly try to rough it out because I realize I learn a lot more what I just stick it out. My biggest mistake I realize is that the code should be way more simple then I'm trying to make it.
I improvised a rendering cluster on ec2 about 5 years with libcloud and had a single command line for 30 VMs. Another time I was concerned about power going out at home while away so I wrote a thing to email me every few minutes. Probably other things! I just finished a radio receiver interface. Will be interesting to read about other people's projects!
I use it a lot in the REPL to manipulate text. For example, I had an excel spreadsheet that was laid out like: A1 | B1 | C1 | D1 A2 | B2 | C2 | D2 And I need it to be like: A1 | B1 A1 | C1 A1 | D1 A2 | B2 A2 | C2 A2 | D2 So I copied and pasted the data into a triple-quoted string, ran the right combination of .split() and .format() to put it back together right, and pasted it back in. No awards for being flashy, but it made the task much faster than if I'd had to do it manually.
Wrote a Python and shell script that saves about an hours worth of work each day at my job. Basically just automates a routine checklist on our servers we have to do daily.
 curl http://some.random.site/some.json | python -m simplejson.tool
I teach English. Say one lesson I'm going through 12 flashcards with 25 students in the class. A script gives me 25 different 12C9 combinations as a list of numbers: [1, 3, 4, 6, 7, 9, 10, 11, 12, 2, 3, 5, ...] Flashcards are in a pdf, one per page. Open print dialog, specify the list as the pages to print, 9 pages per sheet. Out come 25 unique bingo cards.
2.7.5 should be just fine for you. 
What is it, by the way?
Alternatively, if you want the content of known specific files, you can use [pkgutil.get_data](http://docs.python.org/2/library/pkgutil.html#pkgutil.get_data). It returns the bytes content of the file. The nice thing's it even works with zipped packages and the like.
Yeah, it looks like they still support 2.4 (!). There's absolutely no reason to need a bugfix release of 2.7.
I live in a country where most TV shows come out months later than they do in the US. I have a script which scrapes an RSS feed from followshows to find out which shows I watch aired yesterday, then searches TPB for that episode, and passes it to my torrent client. It does that every morning. 
That sounds really interesting. Could you explain that (how the bingo works)? I'd like to try that.
Thanks a lot!! This is exactly what I needed:) great job!
I have almost the exact same thing! We are some clever bastards.
At work there are various files we have to download throughout the month. I wrote a Python script to log in to each website at night, check for any new files and download them to the appropriate locations. I'm trying to use Python to automate the repetitious and tedious tasks at work where possible.
When specifying custom pages to print, it's perfectly valid to specify duplicate and out-of-order pages. So 1, 5, 3, 1, 2 is a valid input. Most print drivers also have the option to print multiple pages on one sheet -- usually 1, 2, 4, 6, 9, possibly more. This is done by taking the list of pages in order. So if I'm printing 2up, the first sheet will have pages [1, 5], the second sheet will have [3, 1], the third sheet will have [2] printed on half a page. In combinatorics, nCr (or n choose r) talks about choosing r elements from a set of 12. nPr (n permute r) is the same problem, except that ordering is significant. So the combinations [1, 2, 3] and [3, 2, 1] are equal, but the permutations aren't. The number of different combinations is given by C(n, r) = n! / (r! * (n - r)!). In python: &gt;&gt;&gt; from math import factorial &gt;&gt;&gt; def ncr (n, r): return factorial(n) / (factorial(n-r) * factorial(r)) ... &gt;&gt;&gt; ncr(12,9) 220 So there are 220 different ways to choose 9 elements from a set of 12. To generate the actual combinations (instead of just how many there are), `itertools` provides `combinations`: &gt;&gt;&gt; from itertools import combinations &gt;&gt;&gt; list(combinations(range(1, 5), 2)) [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)] In this case printing all the combinations you can choose 2 from [1, 2, 3, 4] From `random` we have `sample` which gives us n random samples: &gt;&gt;&gt; from random import sample &gt;&gt;&gt; sample([1, 2, 3, 4], 2) [2, 5] Here's the full script: #!/usr/bin/python from sys import argv from random import sample from itertools import combinations n = int(argv[1]) r = int(argv[2]) x = int(argv[3]) combinations = list(combinations(range(1, n + 1), r)) sample = [item for sublist in sample(combinations, x) for item in sublist] print sample And a sample run through the script in my command line: ~/bin $ ncr 12 9 4 [1, 3, 4, 6, 7, 9, 10, 11, 12, 2, 3, 4, 5, 6, 9, 10, 11, 12, 1, 3, 5, 6, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 7, 8, 10, 11] Or 4 different 12-choose-9 combinations. It actually prints the list all in one line, but I broke them here to show the groupings that would print out in 1 sheet if I printed them 9up. The `range` function gives ordered output so the ultimate output is also ordered -- it doesn't matter. For a class I'll call it with however many students there are in the class so each student gets a unique sheet, then I start calling out the vocab words in random order; who is able to cross off all 9 first wins 
think it's using pleer.com. nothing to do with the spotify service. 
Someone (non-IT) left my office and was in charge of modifying text files daily to correct errors. This was going to be my responsibility since it was more technical than anyone else was qualified to do. I said hell no, wrote a batch script using sed on Windows in a few hours. 5 hours of work/week replaced by a 5 hour script. No regrets.
The windows client only works with newsgroups, not torrents (or at least, last time I checked). Wasn't much coding to do. 
Which OS and torrent client do you use? The problem I have is that there aren't any clients with decent command line interfaces for windows, so I have to make a call to os.startfile, which doesn't always work and isn't very secure. I know you can use aria2, but I'd rather have something which I could actually fetch the progress of in case a file doesn't download for whatever reason; I thought about libtorrent as well but the documentation is shocking.
Brilliant! Thank you.
Thanks for the extremely detailed explanation. &gt; I start calling out the vocab words in random order; who is able to cross off all 9 first wins I should have been clearer. This is the bit I wanted to know :)
I have taken all of one programming course, in processing. I actually really enjoyed it. I plan to learn python myself at some point, although for my own interests not because of this research. My reaching out here is not about being lazy but rather in the interest of time. My reserach is due in two months and is my ticket to graduation. I am trying to think outside the box with this web scraper, but I dont have the time to learn and program it myself before I even start collecting and analysing data, perhaps if it was a dissertation, but this is undergrad research. So, it is a time thing. If I had a whole month to dedicate to nothing but learning scripting we wouldn't be having this conversation, but unfortunately time is running out on my research and I need to get going with it. Perhaps it would be best to see the whole story before you go flippantly judge someone based on a couple choice comments. EDIT Oh and I should mention the research is in Communication studies, it has nothing to do with Computer Science, hence why I am jumping a bit out of my depth with this python idea. 
The title piqued my interest, but the README provides next to no information. I mean, what does it even do (apart from have encryption)? What problem does it solve? Is it for backing up files? Sharing them securely with friends?
[Homebrew](http://brew.sh)
I'm on a Mac, but that doesn't really matter. The exact way I do it is like this: I get a feed of all the new episodes of my shows from http://watched.li, this feed then gets parsed by my script. It gets the name of the show and the episode number (like S03E04) and then scrapes the search page of The Pirate Bay for the top 720p torrent. The script then creates a new RSS feed that my Synology NAS is subscribed to.
I recently had to do some website testing and then compare the new version to the old version. They changed CMSes, so the site was basically coded from scratch, but should look exactly like before. Instead of going through every page manually and making screenshots and stitching them together, I used selenium to just automatically screenshot all the URLs I specified in a list, name the files and save them.
(I am a python noob, could anyone explain to me what this does?)
Any more info? 
I spend a lot of time at the command line. I also write firmware and spend a lot of time debugging DMA drivers. I needed a calculator that could seamlessly handle decimal and hex simultaneously. I whipped up a command line RPN 'op' (short for operator). https://github.com/linuxlizard/pytools/blob/master/op Link to 'div', 'mul', 'add', 'sub'. How much memory does a 300 dpi mono scan use? 2560 pixels per row, 21 rows per buffer, 60 buffers. % mul 2560 21 60 Same question but this time for color (r,g,b). Hit up arrow, add a 3. % mul 2560 21 60 3 Pointer is stuck. How far from the beginning of the DMA transaction is it? % sub 0x1fc02820 0x1fb81000 With judicious use of awk, also makes for a handy command line calculator. 
Got myself a wife. I wrote a script to hit ticket master over and over until tickets for a concert came up. A girl I was smitten for wanted to see a sold out show. But of course tickets will show up eventually, and they did, my script then texted me so I could go in and buy them. This was before it required a captcha. 12 years later, we are blissfully married.
That's a clever solution, but you can achieve the same effect without programming. See [ShowRSS](http://showrss.info/).
It pretty prints the json output (indents it nicely).
Yes, I have seen some cases like that afterwards as well, but not as extreme as that one. It is amazing what some people will do, and never think to automate it.
I finally did this on upgrading to mavericks (set up python from homebrew, set up virtual envs correctly, etc.) and it makes everything so much easier. No worrying about OS upgrades totally borking my install, Scipy stack installs flawlessly, spatialite (which you may or may not care about) worked on the first try. For a little more time invested upfront, you can save yourself the trouble of ever working with the OSX python again.
When I was doing my undergrad, the university required me to login to a firewall, to gain access to the internet. I didn't want to do this every time I fired up my computer, so I wrote a script with mechanize to do it for me
You didn't import datetime module. 
It's gonna suck when they start offering other kinds of fingers.
A 5 hour script? Or 5 minutes maybe?
Haha yes it will. But I'm interested in all of the finger subs!
It was fairly complex and I hadn't used sed before, nor knew about the task at hand prior to that day, but I don't doubt it could have been done in less time.
I believe he meant 5 hours to write the script? 
~~check out [jq](http://stedolan.github.io/jq/) no programming necessary.~~ Sorry I misinterpreted your question, I thought you simply wanted to manipulate your existing data structure, but it looks like you want to collect the data from marinetraffic.com to add to your existing data. That's a bit more involved as marinetraffic.com provides an API for this, but it's not free. that means programatically scraping their page to avoid the API charges is probably going to be difficult and unreliable. 
How do you get it to SMS you? 
I wrote a script not too long ago that automatically created a Nagios host configuration file for a new network host, made sure the new configuration was valid, committed and pushed the new configuration files into a git repo, and then restarted Nagios, thereby giving Nagios a way of tracking transient network hosts as well as permanent ones.
Wasn't me, but I thought Jesse Noller using random.choice() on stage to pick the winner of a robot from a list of PyCon attendees a couple years back was pretty awesome. 
All cell phone carriers have email addresses you can use that will accept the email and send a corresponding SMS.
Through twitter maybe?
Are [Pokemon images](https://github.com/goFrendiAsgard/kokoropy/tree/master/pokemon_pics) one of features? ;)
I was thinking about scraping as this is a one-time operation (the data is static), yes, but I have API keys, so I could do that as well. 
Mine's quite trivial.. I scrape my twitter account for links that I've posted and write them to the footer of my website login page so I can read them later without going through twitter.
I thought you were referring to run-time, not how long it took to write. All the same, great job.
Before I upgraded my '06 MBP's display wouldn't work until the machine physically warmed up. Wrote a python script to hash the timestamp on a loop which would warm the CPU and thus the GPU so my screen would work. I've used Pandas.py a bit at work to sort through data rather than deal with Excel.
I wrote a script that would do IP look-ups from snort logs and save the output in a csv. It was able to retrieve the country of origin for something like 75% of the IPs that it looked through. The remaining 25% were done by hand. A week after the script went live, we had to let two people go from the company, since we didn't have enough work for them. It gave rise the comment: "We are all just 25 lines of python away from being fired"
Possibly Twilio?
&gt; What's "at name" mean? What does "underscore-underscore-init-underscore-underscore" mean?
For a one-off thing like that copying and pasting is way faster.
The author of toolz gave a great [talk/tutorial](http://vimeo.com/80096814) at PyData NYC last fall. He goes into some of the reasons you might want to use these sorts of functional programming constructs.
I'd put everything into a [panda](http://pandas.pydata.org), from there you can add columns for IMO and MMSI and add in the scraped data. Its a few steps but for some Twitter data I've been working with recently I did this JSON -&gt; CSV -&gt; Load CSV into panda. Then saved the panda as a [pickle](http://docs.python.org/2/library/pickle.html) Code I used to scrape below: import json import pandas as pd import pickle tweet_fields = ['id', 'created_at', 'user', 'text','entities', 'geo', 'retweeted', 'retweet_count'] term_list = [] def makePanda(file): json_data = open(file) data = json.load(json_data) if len(data) &gt; 0: tweets = pd.DataFrame(data, columns=tweet_fields) print len(tweets) return tweets def picklePanda(data, output_file_name): output_file = open(output_file_name, 'wb') pickle.dump(data, output_file) output_file.close() if __name__ == '__main__': for term in term_list: for i in range(0, 7): file_name = term + str(i) + '.json' output_file_name = term + str(i) tweets = makePanda(file_name) picklePanda(tweets, output_file_name) Its not perfect but it should get you started. I used Python for Data Analysis to get most of the code together. You can add columns to the panda by saying DataFrame['IMO'] = None. Edit: DataFrame not panda. Panda is the library 
You *have* to tell us what concert it was! (and nice job, guy).
The physical appearance of the please makes no difference ...
For a lot of people, computers are magic boxes and code is witchcraft. Unless you know how to program, it doesn't occur to you as a solution.
You have to sign up online to go to the library? You can't just walk in?
Spiceworks will do that also (among other things). I've also used Kaseya for systems management.