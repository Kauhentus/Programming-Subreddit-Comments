Yes :-)
Thanks. There is no global state, I guess one of the non thread-safe parts currently is sharing the client object while the scheme is parsed. Adding a lock around initialization/schema-parsing should fix that I suppose
Why are you calling `f.close()` manually? If this is a context manager, I really doubt you need to close it. The docs say it can be used in a with statement like a normal file, and a with statement with a normal file doesn't need to be closed. As soon as the context exits, it should close it. I'll try and check the source of it, but I see no reason they wouldn't handle that for you. [I'm seeing:](https://svn.python.org/projects/python/tags/r32/Lib/tempfile.py) def __exit__(self, exc, value, tb): self.file.__exit__(exc, value, tb) Looks like it's calling the file's exit context which should close it out. It still doesn't make sense why it would reach its limit whether you close it manually or not. And can you just pass what you're writing to f instead directly to `thing`'s stdin? Do you really need to create a file to pass it input, or is that an option without --infile? If so, I'd use `subprocess.Popen(['thing'], stdin=subprocess.PIPE).communicate(input_text)`
plaintext: [http://pastebin.com/1fWmWePN](http://pastebin.com/1fWmWePN) I was able to decrypt it by trying each of the 65 possible keys with your script, when the plaintext became apparent for one of the shift values. import keyword_cipher as kc with open("test_input.txt", "rb") as input: for line in input: print kc.cipher_worker(line, False, True, 63) This is pretty cool, you've made a Caesar shift cipher with your own set of characters. Is there any particular reason that in keyword_cipher.py you chose to use the pattern of global variables for the character set, cipher mapping dictionary, and buffer, rather than passing data in functions, or encapsulating those variables in a class? The Caesar cipher is a good place to start, but it's not particularly secure encryption since the space of keys is so small that it's easy to decrypt by brute force. You might be interested in learning about other ciphers, too, like the Vigenere cipher, or modern encryption algorithms like AES! 
"Anything that you post to Stack Overflow will be under the terms of the Creative Commons license. " Hey good to know that!... :D
When running locally. I just have to do a $ python margo/margo.py &amp; from the project directory. So I am basically just running the script and pushing it into a background process. I hope you get what I am trying to do here. I think removing the `web` keyword from the `Procfile` should work
When I was looking to do the same, someone directed me to the openhatch. May help you find what you are looking for. https://openhatch.org/
Can you please share those benchmarks you found? 
Why isn't this named PyR^2 ?
I've been digging Folium to do some nice geoplotting stuff...good for some initial work. Had to switch over to Leaflet when needed to go deeper. 
I think most of them are in the 50-60hr/week range. One of them I know has been pulling some 80/hr weeks recently, but that is because he has a dual role (developer/deployment). Big hole in segregation of duties for his position, but that is a topic for /r/Audit or /r/Accounting :)
This is exactly the worst way to learn programming or mastering a language...
The only thing I didn't like about codeacademy is that because you spend the whole time using their integrated console, you don't learn about structuring your files for your project or how to actually run a Python script. And also (but I've had the same problem with other courses) once you finish it doesn't feel like you know what to do now, like yes I now know most option syntax and basic programming, now how do I get to a level where I can get a job out of this?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
If I understand right, casino returns your money if you win, so it's 8 * 0.1111$ = 0.88$. That is actually already implied in the first part of your reasoning.
Odd/even bet: you give 1$ for 20/45 chance of getting 2$. That's in average 2$*20/45 = 40/45$. Any pig bet: you give 1$ for 5/45 chance of getting 8$. In average it's still 40/45$. Also check out the definition of the expected value: https://en.wikipedia.org/wiki/Expected_value
1. Why the hell do datetime.timedelta objects have a \_\_str__ method and don't have strptime and strftime? An example I found: &gt;&gt;&gt; from datetime import datetime &gt;&gt;&gt; now = datetime.now() &gt;&gt;&gt; today = datetime.today() &gt;&gt;&gt; lastyear = datetime(year=2015, month=6, day=23) &gt;&gt;&gt; twoyearsago = datetime(year=2014, month=6, day=23) &gt;&gt;&gt; str (now - today) '0:02:02.970383' &gt;&gt;&gt; str(today - lastyear) '366 days, 15:55:34.580079' &gt;&gt;&gt; str(today - twoyearsago) '731 days, 15:55:34.580079' The \_\_str__ method doesn't even return a consistent representation, so parsing the string is not easy. The only consistent representation is timedelta.total_seconds(), but it isn't human-readable - and I wish I had strptime and strftime so I can log eg. connection times and both parse and read the logs easily. 2. I wish we had builtin lazy list comprehensions, like Haskell, eg.: foo = [1..10] would be exactly the same as range(10) ^(in python 3) Also, nested list comprehensions (with multiple iterators) are absolutely unreadable. 3. I wish we had an easy way to compile and package scripts and that PyGame was maintained better, so that Python could enter the video game market. 4. I wish we had an actual, bug-free, working way to use SSH. 5. I wish the support for Python 2 stopped as soon as Python 3 was released.
CSVKit - https://csvkit.readthedocs.io/en/0.9.1/ Powerful CSV manipulation tool.
Combine these two projects http://hackaday.com/2009/05/17/nerf-centry-gun-with-image-recognition/
When making heavy use of lambdas, those extra characters (and the space they take up on a line) really count. ~~I see now that perhaps what /u/jalanb was jealous of is something more like a `let` clause in a Haskell lambda.~~ EDIT: Scratch that, based on /u/jalanb's reply to you, having to write out `lambda` is exactly what he was talking about.
Online, but Automate The Boring Stuff.
This has always irritated me too I'll have to check it out.
&gt; But you could see it this way: she's losing money 3 times faster by betting $3 at each spin instead of $1. That's her punishment. She figured out that losing money is embarrassingly parallel, and decided to parallelize the task.
The django project has special 'easy-pickings' tickets for people new to contributing. You can check [this](https://docs.djangoproject.com/en/dev/internals/contributing/new-contributors/) page for more info for new contributors to django. 
What distro/DE are you using? I like the styling of the hourly notification, as well as the taskbar/notification area
First, I'd love to see python interpreter being written in rust instead of C. Would make writing extensions and performance critical code much easier then it is today, solve most issues with threads and improve interpreter quality. Also allow multiple subinterpreters running in own threads and communicating via message passing. Second, have one way for string formatting, not 5 (or 6? I've lost count). Third, allow to make it less dynamic when its not needed. Allow things like type annotations, static list of class/instance attributes, immutable modules.
Adding compilation or a JIT.
I think the reason I initially switched was because minibar has a nice way to customize the format of the progress bar and message. ... I am also kinda ribbing OP. tqdm is cool, too.
1. One can absolutely get a job in Python with zero experience; everyone gets their first job in a field somehow. What counts for that first job isn't the experience but the preparation. 2. If you're new to programming, Python is a pretty good place to start. It's got a great standard library and you won't learn many bad habits. You can absolutely get a basic handle on it in 90 days. 3. If you're learning Python, focus on Python. You're going to encounter OOP concepts in just about any Python workplace you find, so I'd focus on getting a handle on those instead of worrying about integrating JavaScript. 4. What you're really asking is, will 90 days of (intensive?) preparation in Python with no programming background be enough to get a job? I can only say maybe. If you've got a natural gift for programming, sure. If you find a workplace willing to take a chance on you, possibly for lower pay than they'd otherwise offer, sure. Other than that? You'd have to be pretty lucky, I think. 
I taught myself Python in under a week for a job interview, but I already knew how to code. I think that you could easily learn Python in 90 days, especially if you've got another 60 days on top of that to look for a job, which is time you can also use to learn. The thing that I would suggest though is that rather than trying learn "Python," i.e. memorising all the commands etc that you concentrate more on learning how to code using Python. I.e. understand recursion, flow control, OOP, design patterns, testing, etc.
Thank you for your very quick and wonderful explanation. The reality in the 4th point made me think its better to go with ETL. It's the same preparation and time for that too the only difference is I will have someone to get help from.
In Python 3: &gt;&gt;&gt; 00 0 &gt;&gt;&gt; 01 File "&lt;stdin&gt;", line 1 01 ^ SyntaxError: invalid token
Aside from the some parts of the stdlib (datetime and urllib come to mind), the language itself is pretty solid. I can think of two things though. 1. Better inline anonymous functions. There have been PEPs for this in the past, but they've all been rejected, AFAIK. Not without good reason though. 2. A "None"-coalescing and/or optional-property operator would be nice to have. I'm sure this has been proposed as well, but I can also see why it would be rejected.
Well I guess posting source and the level of encryption(Index 11) I used didn't Help protect my secrets, Thanks for breaking my code!, I think that I will continue to make home brew encryption it seems pretty fun, a game of sorts (I will try the ones you suggested). um as far as the question asked above I just wanted to making something that a person could easily import and use if needed as you did in your example. So Real talk, if you didn't have the original Source (access to CIPHER LIST) or and the number of CIPHER_KEYS generated(11) would you still be able to brute force this easily? 
&gt; You already can use Rust? Sort of. You must play by rules defined by C. Distributing rust extensions would be rather painfull for many people. Having it working out of the box would be much better. &gt;I mean I really like Rust as a language, but it's not like it's inherently able to beat out an existing massive codebase just because it has some nice features. Those nice features, like usable stdlib and cargo, would make this codebase far less massive, easier to understand and modify. That would also lead to less bugs. Main reason however would be that currently if you have a bit of python that you need to be faster, you are facing really unpleasant choices: 1. Go to ugly, error-prone C, that less and less people know and even less can write comfortably and reliably. As software gets more complex, C really is less-and-less usable option. 2. Use some semi-python compiler that is moody in terms of language features it can convert, optimize and how well it can do it. 3. Use pypy which has the same issues as 2. For me having usable lower-level language beats all those options. Having it ootb would make it obvious choice 99% of the time. Unlike all of those options, it also has no problems with threads. &gt;&gt; Also allow multiple subinterpreters running in own threads and communicating via message passing. &gt; Well the whole GIL thing sort of prevents that, and you can just run more interpreters in other processes if you really want to. Not sure you understand. GIL applies to single python interpreter. Having multiple interpreters running in the same process and sharing nothing would be really useful. You could have multiple threads running at full speed, each thread would have its own GIL. This change to python has been proposed by python maintainers, but I am not sure what's the status is.
&gt; I wish we had builtin lazy list comprehensions, like Haskell, eg.: &gt; &gt; foo = [1..10] &gt; would be exactly the same as &gt; &gt; range(10) &gt; ^(in python 3) I would expect those things to be totally different, especially in Python 3. `[1..10]` would be a list of numbers 1 through 9. (Inclusive start, exclusive stop, like everything else). And `range(10)` returns a generator for the numbers 0 through 9. I actually like the idea, though. I think the way to do it would be to reuse the slice syntax. List of even numbers 10 through 20: [10:21:2] Generator of the numbers 0 through 99: (:100) You could even have infinite generators (but not lists of course). Multiples of 3 forever: (3::3)
&gt; not overly test things that heavily rely on memorization So basically every aspect of programming is out then?
It's possible, but you're not going to like the answer much.... 
tqdm has been replaced by this repo https://github.com/tqdm/tqdm
Why's that
Python offers a lot of ways to parse a simple text file. Use whichever way you want. The only important point - is to use that field for multiple purposes: setup, --version arg in scripts, and ideally tags for version control as well.
If only I could actually install OpenCV
Thanks for the info, looking into AES now. I never really got the point of classes unless you are working with huge files with large amounts of definitions, I could see in that case where importing a class would be much better because of the segregation. But besides that and standard is their a reason to use classes on such a small script?
Also be careful with checking for equality of identity, as the `is` operator is doing. For example low integer identities are re-used. 256 is 256-1+1 # True 257 is 257-1+1 # False And this is why you almost always want to use `==` 256 == 256-1+1 # True 257 == 257-1+1 # True
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
On #3: It is my opinion that PyGame is not the way forward here. Kivy is a much more sophisticated and flexible base for building games and other visualization heavy applications that goes much further in solving the actual cross-platform problems that arise in such development. Applications are fairly easily (not trivially, you must know a bit about each OS you want to deploy too) packaged for all major OS including iOS and Android, and handling the variety of inputs available on the market is much easier. Python 3 is already supported everywhere but iOS. In addition, we have been building the [KivEnt](http://kivent.org/) game engine on top of Kivy for over 3 years now and it brings much higher performance than pygame with a lot more goodies out of the box (physics, particles, several types of automatic batching renders + more in development, we have a GSoC student working on tiled integration this year) 
Well… yes you can have a look at mine ! A Django project [for bookshops](https://gitlab.com/vindarel/abelujo) (and recordshops). Involves a lot of web scraping also. I started it as a Django beginner so hopefully I'll help you nicely find your way in it. 
Presumably you actually mean 'I wish python was faster'?
Real quick note: it's a common misconception that `range` returns a generator. `range` returns an immutable container object; basically indistinguishable from a `tuple`: In [3]: x = range(5, 10) In [4]: x[3] Out[4]: 8 In [5]: len(x) Out[5]: 5 In [6]: reversed(x) Out[6]: &lt;range_iterator at 0x101985bd0&gt; In [7]: x[2:] Out[7]: range(7, 10) In [8]: x[::2] Out[8]: range(5, 10, 2) In [9]: x[::2][::2] Out[9]: range(5, 11, 4) In [10]: next(x) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-11-5e4e57af3a97&gt; in &lt;module&gt;() ----&gt; 1 next(x) TypeError: 'range' object is not an iterator Under the hood, this object is using simple arithmetic to compute those values, and obviously the range can be iterated over just like a list or tuple or generator, but it is by itself not a generator or iterator object.
I really like the Anaconda distribution, it is free. It makes installing PyQt4 (and 100s of other packages) incredibly easy. The newest release has Python 3.5 and PyQt https://www.continuum.io/downloads 
They could remove the % operator for strings for all I care, but of course it won't be uncontroversial. I am really looking forward to f-strings in Python 3.6 though! I don't think there are "too many" ways. 
Oh snap, TIL.
excellent point. its very shameful to say I'm from computer science background. I worked in a concern for 1.5 years, after that I took a break. now its been 3 years of no touch of any technology. Its like starting from the beginning. assuming I choose python, I would be very happy to do any kinda development job. I would learn and improve myself.
I would add that if they go with Django, [Two Scoops of Django](https://www.amazon.com/Two-Scoops-Django-Best-Practices/dp/0981467342/ref=sr_1_1?ie=UTF8&amp;qid=1466708029&amp;sr=8-1&amp;keywords=two+scoops+of+django) is a really good book for helping to go from a website that works, to one that takes advantage of what Django can do. I would also recommend [Test-Driven Development with Python](http://www.obeythetestinggoat.com/) which is a free online ebook that can really help you figure out how to build tests.
[removed]
Compilation also allows for standalone execution. The runtime parts can be embedded inside the executable.
I'd definitely go with Python then. Understanding things like Big O notation, and algorithmic design will give you a great head-start. Also, it sounds like you've got pretty realistic goals for the type of work that you want to find which will be helpful.
That's neat. Not going to lie though, I would rather just use my browser, or links if I really want to go through the cli.
FUNCTIONAL PROGRAMMING?!?!?! AAAAAAAAAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
Getting it to a single line would be pretty easy - just cram the phi definition into the list comprehension. I deliberately didn't do that because I wanted it be a bit clearer what I was doing. I don't know how you would get the 'numbers to 1000' rather than 'first 1000 numbers'. I don't think you can get list comprehensions to recurse, so I don't think you'll be able to do it in that way.
I'm not sure about the terminology OP used, but what I think he meant (and what the math actually means) is that the house returns 88.9% of the bet back to player on average. The house's expected value is 11.1% of each bet. Still makes no mathematical sense to play, if your goal is strictly to increase how much money you have.
I can package code just fine with PyInstaller. I'd like it to not be lose 30% on speed though when I do that though. Yeah, I'm using Python, but my code is numpy and VTK-based; 30% on that sort of thing is a huge deal. &gt; Or packageable. I can easily imagine scenarios where you need to write a program and send it to someone to run and they may not be developers themselves so asking them to install Python, set up a virtualenv, then install requirements, just to run one program, is a bit much. Never again will I send something to a customer like that. Oh, our code requires Python 2.3 and a bunch of obscure libraries in 2016? Might as well just upgrade the software, build an executable, and sell it because we didn't do things right back then. I shouldn't have to fight a setup process for a tool that nobody has used in 2 years that I'm just trying to be an end user for.
I am sure there are better solutions, but I hacked this together. I did not use the csv library and just split on the new line '\n' and then by the comma. EDIT: refactored code and added comments EDIT2: formatting EDIT3: adding f.close() thanks/u/0x0000null f = open('filename.csv','r') f_data = f.read() f.close() # split based on new lines rows = f_data.split('\n') final_list = [] for row in rows: # Split based on the comma temp_list = row.split(',') # convert data points to integers instead of strings for e, data in enumerate(temp_list): temp_list[e] = int(data) final_list.append(temp_list) # check if output is correct for your needs print(final_list) &gt;&gt;&gt; [[1, 16, 17], [7, 4, 11], [15, 18, 3], [6, 13, 14], [8, 2, 9]]
For CSV data this simple, just use `map` and list comprehensions: final_list = [list(map(int, line.split(','))) for line in open('filename.csv').read().splitlines()] CSV's get trickier when the data can contain quoted strings, and the string themselves may contain ','s - then splitting on ',' doesn't do the right thing - then you should use the `csv` module.
If i'm not mistaken the exponentiation operator is less efficient than pow() when dealing with heavier computation. Nothing to worry about in this case though. 
Yeah she's "winning" on every spin, and losing twice. People like her are the reason casinos make so much money.
A package on which I'm a core developer has been a first project for many: https://github.com/Axelrod-Python/Axelrod It's an implementation of the iterated prisoners dilemma (game theory) and there are various strategies that would make straightforward contributions. We have a gitter channel on which we'd be happy to offer guidance to first time contributors (we've done this a few times now:)). 
&gt; Those nice features, like usable stdlib and cargo, would make this codebase far less massive, easier to understand and modify. That would also lead to less bugs. This is the main reason why I'd want to see a rust python interpreter. It's just so much easier to read and write Rust and understand from a higher level. Less code does more, and it's easy to understand. Easier to read/write, and bugs will be easier to squash and avoid in the first place. Rust is getting bigger and more popular these days, but I honestly believe it deserves a shit load more credit than it gets. I've tried to follow new and experimental languages for a while and Rust has just blown everything else I've seen away. It's a great concept and it works so damn well in practice. And the community is great.
Lmfit not sure how popular it is but I use it fairly often.
I actually stumbled upon vext today but since I don't really know what I'm doing on linux I didn't know how to use it at all. From what I've read, I think it's quite good :)
The Anaconda install is completely separate. So it won't mess up your old install. However it will modify your system path so that it will become the default interpreter when 'python' is ran. 
Sometimes I need to be saved from Python's clutches.
Ok, thank you for the explanation :)
You know what, I'll just give it a go. It's usable with pycharm - perfect. :)
what is functional programming? 
Damn, you got me. This one is actually Powershell, I was quite convinced it was Python. Sorry for the confusion. 
Hi fooza. I'm incredibly confused at what this actually does...
Cool. Once you have pyqt working outside of a a virtualenv, vext will let you use it inside one (but python version has to be exactly the same). It's a horrible hack :) [EDIT] - Maybe stick with the same python version used in the system (3.4.something), then you'll be good. - Otherwise you'll need to build pyqt for the version you have in /opt ... possible, but might be a bit of a hassle. [/EDIT]
Please update the github installation then! ImportError: No module named 'termgraph' 
[numba](https://numba.pydata.org)!
&gt; I wish the keyword `lambda` were instead called `given`. Care to expand?
This is great, thanks!
But there's very little in that exam that relies on knowing syntax by heart...it's nice to imagine that learning comes from pure conceptual mastery, but you don't get the concepts without being comfortable with some of the mechanics. It's true that IDEs give everyone the same access to error messages and stack traces. And yet the ability to debug has quite a wide variance. I've been teaching programming to non-STEM a couple years now. I haven't been as successful as I want to be but have had the fortune of having a few students who manage to do so well that they even decide to go into CS more formally. The one thing these successful students have in common? They take my advice to make an effort to work on the small mundane things, even the keyboard shortcuts and familiarity with REPL...because while everyone who gets by the admissions process is smart enough to "learn concepts"...it's the ones who don't burn their mental energy on unfamiliarity with syntax who are able to truly make use of those concepts and understand the full intellectual expressiveness of computing
Very basically speaking, it's a paradigm that emphasizes functions over classes or instructions. There's a ton of reading material on the topic on the web.
I'm failing to see the connection you're trying to make here. Their status as programmers has nothing to do with the fact that nearly everything you'd test for in a programming course involves a large amount of memorization.
It's basically a grid with each word of the tweet on its own row. Characters are converted to their binary representations, then each 0 becomes a black square, everything else is a white square.
Takes a tweet, makes its binary representation into a grid of black and white squares, then runs Conway's game of life on the grid and makes a gif of the result.
Glad you liked it!
Hi u/foozaboop - question time! why use redis vs. something like a simple sqlite database or a file with an integer in it? It seems like it is only used to store the single value, and for nothing else. Also, do you run the script with a cron job of some sort?
You never actually created a work thread in your code. I've added it for you and made a quick cleanup pass. There are a couple of issues you may want to look into: * The `or` in your glob.iglob may not actually be what you want. It doesn't join the results of iterators for example (your comment said "both paths". E.g. try `for i in range(5) or range(5): print(i)`. You can use `itertools.chain()` if you want to walk both iterators. * I've added a `Queue` instance for passing work to the thread. The code in `search()` blocks on `queue.get()`, waiting for work (that's why the search function is now a glorified `while True`). There are other ways to do this, but while you're learning threads, job queues should keep you safe. * The thread is created with `daemon=True` which means it will exit when your main thread (i.e. `mainloop()`) exits. Check the docs for more info. This is probably what you want but I don't have all the details obviously. * Running `os.startfile()` in a heavy loop like this can launch *a lot* of Windows. You may want to collect all the results first, and then decide whether or how many windows to open... Hope that helps! from tkinter import * import glob import os import threading from queue import * queue = Queue() def search(): while True: wrNumber = queue.get() print('Got wrNumber: %s' % wrNumber) northPath = 'F:/NORTH/**/**/**/**/*' westPath = 'F:/WEST/**/**/**/**/*' paths = glob.iglob(westPath + str(wrNumber), recursive=True) paths = paths or glob.iglob(northPath + str(wrNumber), recursive=True) for folderName in paths: print(folderName) print(str(wrNumber)) os.startfile(str(folderName)) if __name__ == '__main__': thread = threading.Thread(target=search, daemon=True) thread.start() master = Tk() master.title("WR# Searcher") Label(master, text="WR #", ).grid(row=0) e1 = Entry(master) e1.grid(row=0, column=1) b = Button(master, text='Search', command=lambda: queue.put(e1.get())) b.grid(row=0, column=2, sticky=W, pady=4) master.mainloop() 
Pardon if I misinterpreted your following comment: &gt; So basically every aspect of programming is out then? That seemed like a statement asserting that nearly every aspect of programming involves memorization. This has not been my experience and I studied computer engineering when laptops were a relative rarity and Google was not yet popular. My school teaches Java... I envy Bekteley for using Python in their first year class. But even though I haven't written any Java for more than a decade since the classroom and couldn't run "Hello world" if you put a hub to my head, I've looked at the contemporary exams of my school's Java course and feel no doubt that I could ace them. The exams are necessarily written in a way that the problems, throughout the exam, provide enough example code to provide a reference for the extremely limited syntax knowledge that is asked of the student. In fact, the hardest parts of the problems involve convoluted logic mixed with abstract/fanciful scenarios...the challenge isn't memorizing syntax, it's being able to see the core concepts through the noise of the specific code. For example, the Berkeley test attempts to test concurrent code concepts (altering a student database) using a nonsensical scenario with black box functions. If a student doesn't know enough syntax (e.g what a function call is) to answer those questions efficiently, then it is reasonable to say they've fallen short in understanding the concepts for reasons that have little to do with poor memorization. I mentioned a list of programming standouts who achieved greatness before interactive keyboard-to-monitor tech existed, never mind Stack Overflow. They weren't renowned for having particularly exceptional memorization skills, not that there was much syntax for them to memorize. Woz didn't even have deep familiarity with programming and had to read up on computer science books while writing Apple Basic, IIRC. tl;dr memorization is far from being every aspect of programming that is worth evaluating in a college course
If you can have it write to /dev/fd/1, thats stdout
Thanks for asking! I am running this on Heroku which gives you easy (and free!) cron-like scheduling out of the box. The job kicks off every 10 min. Heroku has no permanent file system, so the "file with an integer" solution doesn't work. SQLite probably could have worked, too, but the setup is a bit more complex than a simple key-value stored in Heroku. In good theory, the Redis instance is never killed, so whenever a new job comes along, it can pick up from Redis easily without stepping on the previous job's toes. Hopefully I will do a short write up on the process this weekend, which I will post here as well.
I've got hundreds of instances running simultaneously, I can't have them writing to the same stream.
If you want to dispatch on class, just write an if statement and pass the args and kwargs to the appropriate other function.
Mind elaborating?
Shared drive. It's kind of my "I know WTF is going on" safe environment. All of my test scripts are in it, mount the drive, open Jupyter Notebook and away I go.
Visualization with ggplot2 is much more expressive and powerful in my opinion than using matlibplot and pandas but YMMV.
Pipelines and prettier lambda as are great but transpired Python? Nope. 
http://stackoverflow.com/questions/15464387/finding-live-nodes-on-lan-using-python https://pypi.python.org/pypi/python-nmap/0.1.1 HTH
Does someone have an example of doing this with pandas? I am often reading files or from a database and concatenating these dataframes into a single dataframe. This is normally within some function. 
 Thanks for the suggestion, I will edit my reply to include f.close(). 
have you taken a look at [functools.singledispatch](https://docs.python.org/3/library/functools.html#functools.singledispatch)?
yeah but else makes sense in english, lamda doesnt.
It's not clear what else does on a for loop. Per Raymond Hettinger, it should be called `nobreak`, because it runs if there is no break. `else` usually follows an `if`, and there isn't clearly one in modern loops.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
&gt; Packaging -- can we just retire confusing verbiage of setuptools, bdist, eggs, et al finally and just stick to pip and wheels and standardize it completely. No, because then all the maintainers of those tools will get 1000 extremely angry complaints from normal people that all their shit is broken and has stopped working, because someone said to retire them. Wheels are already standardised, I don't know what more standardisation you want. Pip is a userspace tool, I don't know how you're supposed to standardise that.
Cheers, that's a really good point, I might do a followup post commenting on this :)
&gt; So basically Ada Lovelace, Charles Babbage, Alan Turing, Margaret Hamilton, and Steve Woz weren't really programmers? You're throwing people that did widely different things in the same bag. Lovelace didn't write any computer program, not even for the Babbage's Analytical Engine. Those who say that she was the first programmer confuse the specification of an algorithm with a computer program. Turing wasn't a programmer also, he provided central concepts (Turing machines) and theorems of computability theory. He did work in the design of the Bombe machine, which is not a computer. Mainly: CS is not "progamming" and certainly not everybody that contributed to Computer Science is a "programmer". A substantial body of work is conducted in the tradition that people like Turing initated that doesn't include "writing computer programs" as its activity.
Are you working right now? If you don't have a job or other daily commitments between here and now, you should be able to.
To people complaining that this is a paper exam: Come on now. Did you *look* at the exam? Do you really think you'd need a computer and google to answer these questions if you know Python? Yes this is more than *just* a python exam, but the questions are all related to how languages in general work, and nothing on this exam should be insurmountable for someone who *just took 16 weeks of a course in this topic*.
&gt; plumbum's LocalPath &gt; pathlib What are the benefits? I quite like pathlib.
Using the `py` prefix for modules that also define an external entry point is proper namespacing. Imagine a tool named `codestyle` for Python and one for JavaScript.
Concatenation cannot be considered as a way of formatting strings. It's a basic programming concept to concatenate strings that is irremovable. That said, I hope for f-strings to "rule them all". I switched to using `.format` a while ago due to it being more powerful (reference the same item multiple times, item and attribute access from within the string) and I will *love* f-strings. `%` will finally lose its only advantage: being less verbose.
After codeacademy I read learn Python the hard way, teaches you a lot more about structure, running the files you create etc and also has a list at the end with courses/books you should read to go further into programming/Python Haven't got any further than that though, I did try PyGame but it just didn't flow for me at all, felt like way too much typing. Now I'm learning advanced Powershell to continue with sysadmin work as nobody is hiring developers near me
&gt; I wish `deque`s could be used with the standard slice syntax, and just use whatever backend is performant. That sounds like one that we could actually get fixed.
Python ought to have TCO. (The arguments against it back in '09 generally showed that the issues were not understood. Alas.)
Ah, I haven't really used C/C++ for anything more complex than what can be compiled directly from the command line, so I guess I have avoided that nightmare. But in that case, a good editor can deal with language-specific settings. For example, I prefer to use four spaces for everything, but if I wanted to do YAML with the more standard two spaces, it would be trivia to have Atom use only two spaces for \*.yml files.
Well, I'm back to say I got the book Automate the Boring Stuff and am planning to put python scripts to use very soon. Will report back. RemindMe! One week
Bit short on time, so i can't comment on the code. You might want to take a look at [PyEphem](https://github.com/brandon-rhodes/pyephem) if u haven't done so already.
Perhaps I am mistaken about that. But why does the ecosystem of Python packaging seems to be very painful to work with as compared to say apt, yum/dnf or npm? To be fair - Haskell's package manager Cabal seems to be plagued with similar issues. What are the pertinent issues here? Is it purely the voluntary contributory nature of PyPI? I invite comments in the interest of genuine understanding.
`pathlib` has almost all of that functionality in some way. There are changes scheduled for 3.6 to make using instances of its classes more transparent for other stdlib functions that work on string paths (like `os.walk`): https://www.python.org/dev/peps/pep-0519/ So I guess the major advantage of pathlib will be that it's part of the stdlib.
Everything is curated with dpkg and rpm systems. Things are released in cycles. Whole different ballpark between a distro software packaging system vs a general programming language 3rd-party packaging system. Then there's legacy, as I said. You can make new standards, but even getting them right is hard, and everyone initially is always too lazy to adopt them. Even after most people have, you still have to support the long tail that don't. And yes, it is 90% volunteer effort. D Stufft gets paid to work on the actual PyPI infrastructure itself and also contributes to most of the toolset, but one person can't solve python packaging. And most of the "problems" in packaging aren't easy ones to work on. At the meat of it you very quickly get into things that need great engineering and/or sound computer science. Lots of stuff for people to complain about. Not very many working on solutions.
Thanks!
&gt; Concatenation cannot be considered as a way of formatting strings. It's a basic programming concept to concatenate strings that is irremovable. Does it have the same result? &gt; That said, I hope for f-strings to "rule them all". I switched to using .format a while ago due to it being more powerful (reference the same item multiple times, item and attribute access from within the string) and I will love f-strings. &gt; &gt; % will finally lose its only advantage: being less verbose. Agreed.
This is fucking radical. Top notch, friend.
Sites online have extremely low stocks of the GTX 1070. Wrote a script that takes the URL of a couple of different GTX 1070's on Newegg and EVGA. Parses and finds if they are in stock. Then I connect to twilio and it sends an SMS to my phone.
Here's a slightly simplified version using a nested loop to hold the variable and removing some parens: fib_num = [k for n in range(1000) for k in [round(((1+5**.5)/2)**n / 5**.5)] if 0 &lt; k &lt;= 1000]
I think type checking would be nice. I hear BDFL pans on implementing it in 3.6
you are right.. haha been searching for the fix and stumble on this site http://comphelp.org/guide/python-csv-reader-unicode-error/
That's awesome! Ty. 
&gt; lambda is an artifact from lambda calculus &gt; The word lambda has nothing to do with what's actually going on. Both can't be true (I'll just spill it: the second one is the false one).
&gt; I wish exact number representation were the default, like Decimals or something like that everywhere instead of floats. No exact number type exists. Decimal has finite precision. It's also _much_ slower than float and more complicated to use.
This one is ugly, but it works using repeated addition of the last two elements. It makes use of the fact that `x` is always the same list and that `append` can be evaluated as an always-false conditional test with a side effect. [x[-2] for x in [[0,1]]*1000 if x.append(x[-2]+x[-1]) or x[-2] &lt;= 1000] 
Spur here (paramiko based), because I'm lazy. 
&gt; Having multiple interpreters running in the same process and sharing nothing would be really useful I agree. And add some smart "inter-subinterpreter" communication tool would be a great way find a way around of the biggest hindrances posed by the GIL. But (I'm not 100% sure here) have an interpreter able to be executed multiple times inside the same virtual memory would heavily affect performance: each interpreter need its own set of global state variables and every access to them would be an indirect addressing forcing the processor to calculate the address every time. 
That must have been it. I did change the PATH but I wasn't aware you had to log out or anything. In any case the problem has been fixed so thank you all
Had to use this for the first time last month. Super easy. 
but [csv](https://docs.python.org/3/library/csv.html) already supports unicode! i think it’s legacy version for python 2 didn’t, though.
Various news agencies are already providing such maps (e.g. http://www.bbc.co.uk/news/uk-politics-36616028). The package you linked probably wouldn't help, since it is for using colours in a terminal. I would use matplotlib.
I use Kubuntu 16.04 with KDE 5 (Plasma.)
yeah you could use the search box before ;) - 4 days ago: https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/
&gt; % will finally lose its only advantage: being less verbose. actually, it has another advantage: it is faster. I'll admit, it will only matter in some few extreme cases, but still it might come handy :) Yes, i have switched over to using .format almost exclusively. And when i don't use .format, it's because i need a more powerful template engine, not because i need speed... 
f-strings should be very fast because, in its core, it's just string concatenation with a little formatting attached. Moreso than .format strings, since f-strings are parsed at compile time. Evaluation of expressions within f-strings takes no longer than evaluating the second operand for `%` formatting (since that creates a tuple first, I'd argue it would even be slower).
Maybe they will in Python 4. I sure hope they do. f-strings are awesome.
Depends what you mean by a "job in Python". You're not going to get a Python developer job, but maybe you can get a job that applies scripting in some way, such as data science like bioinformatics. Python is probably a good language to start with.
ah, so it’s another crutch propping up python 2’s usability.
Hey man, got to say thanks for your encouragement! Installed anaconda late yesterday evening and couldn't wait to get to play around with it a bit more today. I must say: I'm impressed. It's exactly what I wanted. Pretty userfriendly, easy to use, good documentation, good package management. great.
Suggestion: work backwards. 1. Hard code your Twitter keys into the TwitterAPI constructor to confirm everything except loading keys from file works. 2. Immediately after loading the keys from file print them to the console to confirm that they were read in properly.
/r/learnpython read the sidebar
It's used for creating variables for all files in a folder. That's what it does. If you're only here to insult my work, please keep going. Sure my docs are not good. But like i said, this is what it does. I'm sorry if you cannot see past the fact that this package is not for accessing files. Rather it maps a variable to each file. This is something the built in functions certainly do not provide. x = open("hello.dat") y = open("hello2.dat") and so on done as import filemapper as fm fm.load('resources') Another example would be if 'words.dat' and 'nouns.dat' not in fm.create('resources'): print 'Files Missing' After the files are added, just rerun fm.create Also what i meant to say about osx is i never tested it properly. I just wanted to make sure all confusions cleared if for some reason it does not work. I don't own an osx and i only tested it once on travis.
Hmmm... i read the docs but i didn't understand what it does :(
read the docs. no fucking idea what this is
yeah sorry ,i'm no good at docs. Read what i wrote above
try doing this: exec('x="hello"') Now do this: &gt;&gt;&gt;x &gt;&gt;&gt;'hello' See a variable has been created The problem it solves is that people that want variables for files need not write code. Just use this.
ggplot2 in R makes Python graphics look like they were made in crayon. e: typo
Lots of packages in R would be handy for me in Python without having to rely on rpy2.
To automate variable creations. But since most files have extensions even this built-in does not help.
What do file extension have to do with variable names? This is crazy.
I'm not sure if the situation has improved since [the last time I looked](http://stackoverflow.com/a/3698634/120999), but back then perl had the only module that did half-decent handling of the [xmp](https://en.wikipedia.org/wiki/Extensible_Metadata_Platform?wprov=sfla1) metadata format for images.
Why would you call a variable hello.dat? Why would anyone use exec?
How about [Arrow](http://crsmithdev.com/arrow/)?
Or Hy ;-)
YES! Is like, i know you guys tried Yhat (and did it for free), but you left it half done.
Paramiko is great but I feel like it can be pretty confusing to newcomers. A couple of weeks ago we created [sshaolin](https://github.com/bucknerns/sshaolin) to counteract that and try to make paramiko's interface a bit nicer to use. The project is still pretty new but we're actively listening to suggestions and have been using it pretty successfully in our own workflows.
moment.js Arrow is close but not quite.
left-pad 😁
I haven't used ggplot2 in R, but I find plotting in python (I use matplotlib) to be more than adequate. However, just FYI: The ggplot module in python is based on R's ggplot2. http://ggplot.yhathq.com/ 
Django forms are pretty limited and explode in complexity fast in my experience. That's why we wrote tri.form at work. Don't see much evidence of mutations being much better than django forms but maybe it is. 
Arrow is horribly misguided, naive and just wrong. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I usually use the seaborn package to spice up my matplotlib plots. Big improvement over vanilla.
I see, thank you for the clearing up.
`return False if some_name == None else True`
This subreddit is for things related to the programming language Python, not for things related to snakes. Your comment has been removed, but if it's cute enough, you might try posting to /r/aww
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Haha. "How could I have lived all this time without it?"
WPI's library for FIRST robots. It's in C++ and Java, but far as I'm aware not python.
Here's a direct quote from pep8, be free(er): &gt; Some teams strongly prefer a longer line length. For code maintained exclusively or primarily by a team that can reach agreement on this issue, it is okay to increase the nominal line length from 80 to 100 characters (effectively increasing the maximum length to 99 characters), provided that comments and docstrings are still wrapped at 72 characters.
My python code now supports both tabs AND spaces. 
That wasn't a newbie question. 
Haven't used guava or guava caching but looked it up. Have you tried python-memcached plus a memcached server, remote or local? It's damn easy to use. It's just string key to string value, but you can easily just serialize to json and store that for objects. I've done something in the past where I create a decorator that creates a function signature based on the function name and args+kwargs, then store the result in memcached for an hour (or however long). Next call checks the cache first, and if it exists just returns it. All you have to do is wrap the function in @cached and you're set. From what I read on guava caching, it sounds like it could be what you want.
That only works if you know what your looking for. Why would he randomly search for a concept that Python barely supports? Now that I know there is some proper support in Python, I might give it a try. Discovery is a nice thing. Don't poo poo it.
Looks cool at a glance. Thanks for the link, I'll have to do some further inspection soon.
Generators are consumed. You can't iterate twice. How could that be automatic? You would end up generating a list, and having it cached or something so it could be used the next time t was possibly iterated. When I use a generator, it's usually because I care about memory.
This shit should come with a trigger warning...
dplyr 
I'm right there with you for memcached (or redis) being a great alternative in most cases. They've been awesome for me in a few Python projects. In some cases, though, it's important that the cache I'm using be entirely in-memory with no extra server/external proc needed to run. In my particular case, I also needed thread-safety and expiration-by-timeout. Unfortunately haven't been able to find a good Python lib that supports these in-memory.
Someone else said that on this thread and they got down-voted into the negatives until they deleted their own comment, but alright man I'll do it.
How is it "horrible"?
This looks really cool, but like others have said, transpiling to python makes it seem like a tangent away from what you're trying to accomplish in python, although many might choose to use it out of preference for functional syntactic features. If this (or something like it) could somehow spit out static binary, like go, and perform well with concurrency and all, that would be super interesting. Then it wouldn't seem like a tangent for syntactic preference but a move in an optimal direction for python programming. This is really cool though. All the ML stuff mixed in with nice python syntax is lovely.
I'd like to see how (Haxe)flixel would look in Python, as I don't have a must-have package/library yet.
Doesn't memcached cache entirely in-memory already? Are you saying you need to keep the caching in the python process' memory and not rely on another process even if on localhost? For expiration, python-memcached allows you to set the memcached key to expire after a number of seconds, eg `mc.set(key, value, seconds)`. And for thread safety, python-memcached is reportedly thread-safe. http://sendapatch.se/projects/pylibmc/misc.html &gt;pylibmc.Client is not threadsafe like python-memcached’s Client class (which is threadlocal). I'm just curious whether you're thinking of [pylibmc](https://pypi.python.org/pypi/pylibmc) and haven't seen [python-memcached](https://pypi.python.org/pypi/python-memcached), a completely separate library that seems to satisfy your requirements if I understand them correctly.
Sorry for the lack of clarity. As you mentioned, I'm talking about a solution that's entirely inside my python process.
Going forward, Python 3.5 requires a newer version of Visual Studio. Here's a good blog post from Microsoft that has a link to Visual C++ Build Tools 2015, which should fix your issue: [https://blogs.msdn.microsoft.com/pythonengineering/2016/04/11/unable-to-find-vcvarsall-bat/](https://blogs.msdn.microsoft.com/pythonengineering/2016/04/11/unable-to-find-vcvarsall-bat/).
Gotcha. Well, just to experiment I wrote this up. Save as cache.py and import with `from cache import cache` and you get a decorator which will cache in the memory of the python process. It's lacking a clean up that deletes old items in the cache, but that wouldn't be too crazy to implement. You could use whatever concurrency method you like and iterate through CACHE every however many seconds, and delete ones that have expired. You could also just cleanup every call to a function that's decorated with `@cached` Just decorate a function with `@cache` or `@cache(timeout=60)` and it might be what you're talking about. import json from datetime import datetime, timedelta from functools import wraps from hashlib import sha256 CACHE = {} def hashable_dict(d): new = [] for k, v in sorted(d.items()): if isinstance(v, dict): new += [(k, hashable_dict(v))] elif isinstance(v, (list, tuple)): new += [(k, hashable_tuple(v))] else: new += [(k, v)] return new def hashable_tuple(args): new = [] for arg in args: if isinstance(arg, (list, tuple)): new += [hashable_tuple(arg)] elif isinstance(arg, dict): new += [hashable_dict(arg)] else: new += [arg] return new def hash_func_sig(func, args, kwargs): hashable_kwargs = json.dumps(hashable_dict(kwargs)) hashable_args = json.dumps(hashable_tuple(args)) sig = '{}::{}::{}'.format(func.__name__, hashable_args, hashable_kwargs) return sha256(sig).hexdigest() def not_expired(expiry): if expiry == 0: return True return datetime.now() &lt; expiry def make_expiry(seconds): if seconds == 0: return 0 return datetime.now() + timedelta(seconds=seconds) def cached(_func=None, timeout=0): def cached_decorator(func): @wraps(func) def decorated(*args, **kwargs): sig = hash_func_sig(func, args, kwargs) if sig in CACHE and not_expired(CACHE['sig'][1]): return CACHE['sig'][0] value = func(*args, **kwargs) CACHE[sig] = (value, make_expiry(timeout)) return value return decorated if _func: return cached_decorator(_func) return cached_decorator @cached def test_foo(bar): return bar * 2 @cached(timeout=1) def test_bar(bar): return bar * 2 def test_cached(): assert len(CACHE) == 0 assert test_foo(5) == 10 assert len(CACHE) == 1 assert test_bar(4) == 8 assert len(CACHE) == 2 if __name__ == '__main__': test_cached() print('Tests passed') 
I've run into a case or two where there is a good library for what I want to do in R but nothing at all in Python. For example, recently I wanted to do Gage R&amp;R studies in Python. There is nothing that I can find to do it in Python. A quick google search for R brings up the qualityTools package which does exactly what I need it to do.
gedit. I'm apparently a noob.
vim.
Meh, ggplot2 is nice for exploratory graphs but its not very flexible and a total mess if you need to change anything.
Came here to say just this.
TextMate.
And I think you mean the annoyance would be to show preference to Python 2?
geany locally, It has a very useful code browser and bookmarks manager. joe on remote server
3 hours and no emacs? Fine. Emacs.
Tabs or spaces?
Nah, there are tons of crazy packages out there that go way deeper because they were written for someone's PHD thesis. That said they are all written by people with different backgrounds so readability is pretty low. (Why no PEP8, R?) 
Pycharm with vim plugin here, vim on remote/foreign machines
I'll agree that not having true anonymous fuctions kinda sucks, but it's not stopped lots of great packages, libraries and tools from being developed. I think this is a "the grass is greener" compliant. Especially considering that Python is predominantly object oriented - literally everything is an object except for statements, even `.` is an object - I'm just glad we have first class functions in the first place. 
[clojusr.spec](http://clojure.org/about/spec) seems like a golden idea, allowing you to specify data more rigorously and flexibly than most typed languages yet remain fully dynamic.
The suspicious part is that he claims he's restarting the kernel between runs. That should clear the namespace. Maybe something is being loaded from and then written to external memory each run? Agreed on the need for the code. All we can do is make vague guesses otherwise.
&gt; What the heck is going on here? If you post more than a single line of your code, and the full traceback, it might be possible to answer that.
This would be huge, eliminating many issues with distribution. 
I used to think the same thing, then I learned to use it. It's really, really flexible.
Good to know! 
Yes. And along the same lines, magrittr (the %&gt;% operator) that is included in dplyr.
You need to catch that error and debug the value being manipulated. If you see it's changing then you have a direction to search in for more information. Also search stack overflow for stuff like this, I've rarely had a Python issue that wasn't already asked and solved over there.
I've probably used vim the most, but I've used gedit, atom, brackets, and sublime quite a bit. I've recently switched over to PyCharm (I wasn't very impressed several years ago when I looked at it, but it seems great now).
Dplyr
The package cowplot has a function that let's you switch the axis labels. It's called switch_axis_position(). To zoom in you set xlim() and ylim() to whatever you want you area to be. No go on the broken axis or the 3D.
You're after multiple environments http://conda.pydata.org/docs/using/envs.html
My scientific wild-ass guess: the computation is multithreaded and sometimes an invalid state ends up on one of the threads by random chance. For example, suppose your function was sqrt(sum of numbers so far), with two threads, and your series was [1, 2, -2, 1]. The first numbers processed are 1 and 2. Now when -2 comes up, it can go to either of those threads depending on which finished first. The thread's function is calculating either sqrt(1 + -2) (invalid!) or sqrt(2 + -2) (perfectly fine!). Your calculation is much more complex but I'd bet it's still something along those lines where order of operations makes a big difference at a critical time.
Take a look at the warnings module https://docs.python.org/3/library/warnings.html
Pycharm with Vim bindings. 
http://stackoverflow.com/a/30071999/665400 
Perhaps different environments aren't importing the same libraries, and so different code is being executed?
Does it occur in a normal script too? Is the data consistent for every trial? Can you provide a minimal example that produces the same behavior?
Fair enough. I guess that comes with the turf; R is almost exclusively for statistics, while Python is general purpose. So it makes sense that the highly niche stuff isn't available.
Nice. Simple. +1 I've been wanting to write something similar that displays several pics in a random scrapbook fashion (e.g. slightly different sizes, locations, overlap, and rotation)... but it's still sitting on my TO DO list.
Not always, I couldn't find anything to do good differential gene expression analysis in Python.
Ahhh, so that's why the code wasn't working on my computer... Thanks!
Here's [a similar script](https://gist.github.com/dougalsutherland/e289262d157e906644a9) I wrote to do this on OSX.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
But that's the thing: type-checking is generally considered "un-pythonic." As soon as you start checking for types, you've run afoul of a lot of people's expectations, and you can violate duck-typing behaviour. An example of the benefit of function overloading, consider a URI query string that is made up of key-value pairs: # http://www.uri.com/index.cgi?keyA=valA&amp;keyB=valB query_str = 'keyA=valA&amp;keyB=valB&amp;keyB=valC' We may want to represent this query string as a dictionary for easier manipulation of the data: query_dict = qstr_to_dict(query_str) The repeated key, `keyB`, has two values, so the corresponding dictionary value could be a list: `['val'A, 'valB']` Say I write a class to perform manipulations on these query dictionaries, and I need a `delete` method. I might want to pass any of the following as arguments to the method: - The name of a single key (string) - The name of multiple keys (iterable of strings) - A dictionary of key-value pairs (i.e.: another query dict) Thus, I want to be able to write any of the following: qlib.delete('keyA') # Deletes the 'keyA' key-val if it exists qlib.delete(['keyA', 'keyB']) # Deletes two keys qlib.delete({'keyB':'valB'}) # Deletes a specific key-value pair Distinguishing between an object and a list of objects (in this case, strings) is already an unpleasant joy when you need to support both Python 2 and 3. If we start adding more complex types to the mix (in this case, a dict), the code starts getting sketchy. I understand why method overloading is unconventional for a dynamically-typed language such as Python. But the consequence is that I either have to start writing un-pythonic, type-identifying code within methods, or I have to write multiple methods (`delete_key()`, `delete_dictkey()`, etc)
Google for 'python memoize' for other examples of these decorators.
Which field?
[Here is a great list of wallpaper subreddits](https://www.reddit.com/r/sfwpornnetwork/wiki/network).
That doesn't help with Anaconda.
Shit, sorry to hear that! I hope it wasn't because you posted here...
 change_wallpaper_reddit.py --subreddit "SkyPorn+WaterPorn" Or are you talking about the `/me/m/` collections?
Or, you know, the one in stdlib in python3 https://docs.python.org/3/library/functools.html#functools.lru_cache
The [Criterion](http://www.serpentine.com/criterion/) benchmarking framework. Benchmarking is hard to get right. Criterion uses a robust, statistics-based approach and generates very fancy graphical reports.
Doesn't this defeat the purpose of shadow bans? :-P
Conditional assignment. I'd love to see: if regex.search(s) as match: first_group = match.group(1) Also in while loops: while get_next_item() as item: ... The syntax is useful, consistent with name binding in with statements and except statements and avoids causing variables to be defined which are never used. Should I should put a PEP together?
Sorry, I'm super new to this, you mean to say I should edit the consumer key etc. in TwitterAPI.py and then just run it? If so should I just put them where I've screenshotted [here](https://gyazo.com/ec7244e92f3dc343f35f493413491a23)(Under def init)? Then how would I go about step 2? Again, apologies for my incapability. Thanks
Where can i find such scripts. it is immensely help for someone who is just beginning to learn python. Thanks!
the easiest way to create multidimensional arrays in python is to use tuples as keys. paths[('path','to','somewhere')] = 'something'
What do you do with turtle?
anaconda uses conda to manage environments 
pip install MySQL MySQL-python
This is: a) annoyingly obvious :) and b) probably the way I'll go. Thanks. Edit: Actually I think this doesn't address my goal, but puts me on the right path. For my use, it needs to be something more like: for p in path[1:]: if len(p) &gt; 1: (recursively create key) else: (create key)
PyEphem vs Skyfield?
I think I'll try /u/K900_'s suggestion. Yours is definitely reasonable, but has some issue with the application. It's for an audio console and I'd like to be able to easily access channels in order to do things like: Copy /ch/01/... to /ch/02/... Or Insert something on /ch/12/... and bump the former /ch/12/.. to /ch/13/... and all additional channels over one. Edit: Actually, on further analysis this may be the way to go.
For generating the plots, add `plt.axis("equal")` before saving or showing it. It makes circles stay circular.
Look into `collections.defaultdict` - it seems like just the thing you want for creating keys dynamically.
Don't bother. Unless you like dates and datetimes AND time deltas to be treated as the same thing and hitting super hard to debug errors. 
You need to install your distro's development package for mysql. On debian, this is libmysqlclient-dev
Machine learning? Looks like simple statistics to me
Yeah, there's a lot of ways to get you covered, honestly. But to do it properly, you want your language to support it as a whole, have your practices include it, etc. Just the type is useless. If I was to channel guido, I'd say symbols are more trouble than the conceptual overload is worth for a language like Python. For Lisp it's super cool.
Thanks, nice little script. Forked and modified for my needs. :)
That's where I first learned about it. And Skyfield is being actively developed.
i would love rstudio for scientific python. scikit-studio or something like that
/r/learnpython
Not directly addressing your problem but I highly recommend using pymysql. Being pure python it's easier to install and I've found it more reliable and up to date than mysql-python.
Note that this is actually builtin as `collections.defaultdict` - you can do arbitrary depth just by having the default creation function return reference itself recursively.. Ie: from collections import defaultdict def variable_depth_dict(): return defaultdict(variable_depth_dict) paths = variable_depth_dict() This creates a dictionary that defaults to a similar empty defaultdict for missing keys, so will work similarly to yours. 
1. Because it's nonsense. Could only be correct up to days (ignoring that some days are 1 second longer than others) and weeks. Years are different length with an entire day, months are just crazy. You could argue that you could have a fuzzy_str thing though that outputs "~4 years, 20 weeks, 3 days, 4 hours, 23 minutes, 57 seconds, 2345 microseconds". 
So much love for arrow everywhere. Why? It just throws away type safety and let's you get all those errors late at runtime with no debugging info instead. 
This suggestion is pretty worthless unless you also change the entire scoping rules for the language. If statements don't introduce a scope in Python you know...
"Could be improved" or "would have been better if done from the start"? Seems people mostly answer the second question. 
There's no need to change scoping rules. The value is that static analysis/linting tools can examine flow control can easily determine that the name would not necessarily be bound after the corresponding block. This is much easier than, say, statically determining whether a value is 'falsy' after the block.
Does your processor support AVX2? Do the other machines have that? Are you using any optimized algebra libraries like OpenBLAS or Intel MKL?
I need this exactly right now! I'm staying somewhere where xfinity is the only available wifi and was just thinking of how I could make something like this 😁
The amount of people who are looking in this thread that would use it would be completely unnoticeable in the amount of traffic that Comcast sees daily. Not even a blip on their radar. 
I wish more people knew about matplotlib's style module.
http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/
Thank You, I am thinking of making use of them myself. 
Changed it, thank you!
You'll use a similar recursive algorithm to set values on this structure. I will also say that you can actually override indexing so you can build this structure then do things like d['the', 'path', 'to', 'something'] Where the index being used is a tuple Or even d['/the/path/to/something'] Where the index is just split on your path separator then iterated over recursively.
The purpose of shadowbans is to get rid of spammers. I don't think this guy is spamming.
Statisticians write some awful code. I've worked with several whose code readability and performance was horrible. Even saw one statistics intern who did not get hired after her internship because of poor code quality.
github
I really like plot transitions in D3.js. It can be done ib matplotlib, but real pain
If you plan to enter and/or read annotations by hand I would say XML is the worst option. Worse than C++ even. JSON is already much friendlier, but the braces can be bothersome. A similar option without braces is yaml, but usually there are concerns about different implementations (the reference of yaml is not small neither simple, although the markup looks so easy). Have a look at TOML, it is a bit unknown now, but python will use it for specifying build requirements (PEP 518) so I would expect it will get more popular soon.
Thanks!
I've tried cowplot and it's the mess I was referring to in the previous post. It overrides the defaults and breaks a lot of ggplot by just loading the package. `xlim` and `ylim` are setting the axes limits, I meant something like [this](http://matplotlib.org/examples/axes_grid/inset_locator_demo2.html).
It is in the starting code given at the beginning of the game?
/r/learnpython
You can just add a test to see if the url comes from imgur, if not then grab the next one.
I too like to live dangerously. This being said, cool stuff, thanks for sharing!
Thanks for amswering with a pedantic question
Okay! Going to fix some standards (double vs. single quotes mixed) as well as remove a bit of redundant logic too while I'm at it. I'm a Python dev, but at work I've been doing a lot of Node so I'm happy to be doing some Python.
That example seems to be using precompiled wheels which do have binary components - these can be installed with pip, but aren't pure Python. I was also looking at their [example Android project](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/android/jni), which includes the C code to interact with TensorFlow.
Sublime Text with the anaconda plugin (among many others). If you're not obsessive about efficiency, PyCharm is probably the way to go. The code intelligence is very useful, especially if you're new to a library or large project. However, if you want to write and edit code as fast as possible, I recommend vim or sublime.
A practical yet inspiring talk about writing about programming, "Write An Excellent Programming Blog": https://emptysqua.re/blog/write-an-excellent-blog-pycon-2016/ Warning: I'm the poser who gave it.
Biology.
Some of my friends and I just bought Elder Scrolls online to play together... I'll bite. 
Can be shortened to `if RamenNoodles: HP = HP + 10` shorter: `if RamenNoodles: HP += 10` Don't need to check for `RamenNoodles == True` because true things are true already without the need to be compared to true.
Now that's universal, not Python-only ;)
If you have an HP cap, don't forget to check if HP+10 &gt; HEALTH_CAP
Thank you very much for your help and yes i will keep in mind about the formatting.
You're adding to the list "addlist" then throwing that away. You are also declaring "company" as a list but then overwriting it as a string. 
Definitely recommend using a requirements file as that'll help installation quite a bit. Also, any chance for a minimum size setting so I don't get stretched wallpapers on my 4k monitor?
Interesting! Thanks for the help!
Thanks for the heads up!
Bahahaha
Submitted. Figured I'd update you here since my github name doesn't shadow my reddit name.
Can this be used to drain someone's battery? Like Elliot does on Mr. Robot?
It can be a neat tool if you quickly want to plot some data. Of course there are better libraries for that job, outputting nicer looking graphs. But often you don't really care and would rather get shit done than install 4 GiB of dependencies (qt).
 print('What');print('Do');print('You');print('Know');print('About');print('Semicolon');print('?'); It's working python code...
&gt;Special cases aren't special enough to break the rules. &gt;Although practicality beats purity. And &gt;A Foolish Consistency is the Hobgoblin of Little Minds In this situation, type checking is the clear solution. If you violate people's expectations with this situation, their expectations need to be adjusted.
Ok, I'm very familiar with Pandas, and a cursory overview of dplyr seemed to suggest they are similar. Could you explain the difference? 
Have you hear of stackoverflow? Its awesome you should try it, but just don't ask vague or generalized questions they hate that.
Addition screenshots of the flow. I'm trying to save all my driver summaries. Actually I have saved mine but I also want to collect summaries from other drivers to analyze all of our driving data but don't want to have to manually save 730 summaries per person. http://imgur.com/a/6MiQK
https://packaging.python.org/en/latest/
Selenium is used for interacting with a website. Automating the process of logging into Facebook and grabbing the latest posts, for example. Or if you work at Facebook, you can use it to test whether the website is working as expected. Py.test is a test runner. It finds and runs tests of your code. Say I had a project `mymath.py`: def add(x, y): return x + y It's good practice to test your code, so I make another module `test_mymath.py`: from mymath import add def test_add(): assert add(1, 1) == 2 Now I can run `py.test` in the terminal and it will test my module. If I ever want to change how `add` works I can just test it again and be confident that my changes didn't break anything. I actually made these files and ran `py.test` and this is what I got: =================================== test session starts =============== platform linux -- Python 3.5.1, pytest-2.9.1, py-1.4.31, pluggy-0.3.1 rootdir: /home/$USER/tmp, inifile: plugins: cov-2.2.0 collected 1 items test_mymath.py . ========== 1 passed in 0.01 seconds ======== What it did is looked for all files and folders starting with `test` and ran all functions inside that also start with `test` (in this case it only collected the 1 test). It told me that all tests were successful. If there was an error it would have given me some useful information as well. Testing is a practice that is easily overlooked, but as a beginner you don't need to worry about it quite yet. But as soon as you start writing code that you hope to come back to later and re-use, it's a good idea to figure out how to test it. IMO py.test is the best test runner for Python. The example above of someone working on a website, using Selenium to test that it responds correctly, would put that code in a separate test module, and use py.test or some other test runner to run it anytime they wanted to test their code.
Whatsapp web makes this way easier... http://web.whatsapp.com/
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Don't they have an api that could be used to do this without relying on gui automation? 
I think he means you can just use the site in a browser and look at the cookies/headers that your browser sends, then send the same ones with python 
I use this tutorial for my first time submitting. http://peterdowns.com/posts/first-time-with-pypi.html
nice! Tried it with the list of cities and villages in Bavaria. Mostly chibberish but there's some real good ones! waingeingach-esschwapf menbaladug wesbedoch baargzwabach grgesdingenfu korserbachandornzinn grfrobersdorfar weißerg apiteuels oberberlzt erlachlkachen bänstenbur hornnkrandenbau pernbachdein nbach alben 
This is the output: sudo pip install MySQL MySQL-python [sudo] password for user: Collecting MySQL Using cached mysql-0.0.1.tar.gz Collecting MySQL-python Using cached MySQL-python-1.2.5.zip Complete output from command python setup.py egg_info: Traceback (most recent call last): File "&lt;string&gt;", line 20, in &lt;module&gt; File "/tmp/pip-build-rr8qvecf/MySQL-python/setup.py", line 13, in &lt;module&gt; from setup_posix import get_config File "/tmp/pip-build-rr8qvecf/MySQL-python/setup_posix.py", line 2, in &lt;module&gt; from ConfigParser import SafeConfigParser ImportError: No module named 'ConfigParser' ---------------------------------------- Command "python setup.py egg_info" failed with error code 1 in /tmp/pip-build-rr8qvecf/MySQL-python You are using pip version 7.1.2, however version 8.1.2 is available. You should consider upgrading via the 'pip install --upgrade pip' command.
And windows :P, sorry, forgot that part
Oh, wait, is it that you make these different environments, they then permanently exist (doesn't have to be remade each time I start up Spyder or do Python stuff), and, then I just switch between the two any time I want to do stuff in a different version of Python?
This is what I got in my virtual environment: django]$ ls venv/lib/python3.5/site-packages/ backports django_registration_redux-1.4.dist-info pyasn1-0.1.9.dist-info cffi easy_install.py __pycache__ cffi-1.7.0.dist-info fernet_fields pycparser _cffi_backend.cpython-35m-x86_64-linux-gnu.so idna pycparser-2.14.dist-info configparser-3.5.0.dist-info idna-2.1.dist-info pymysql configparser-3.5.0-py3.5-nspkg.pth mysql PyMySQL-0.7.4.dist-info crispy_forms mysqlclient-1.3.7.dist-info registration cryptography mysql_connector-2.1.3.dist-info setuptools cryptography-1.4.dist-info _mysql.cpython-35m-x86_64-linux-gnu.so setuptools-23.1.0.dist-info django MySQLdb six-1.10.0.dist-info Django-1.9.7.dist-info _mysql_exceptions.py six.py django_crispy_forms-1.6.0.dist-info pip sqlalchemy django_fernet_fields-0.4.dist-info pip-8.1.2.dist-info SQLAlchemy-1.0.13.dist-info django_filter-0.13.0.dist-info pkg_resources test_app django_filters pure_pagination wheel django_pure_pagination-0.3.0.dist-info pyasn1 wheel-0.29.0.dist-info 
lol nice... coming from someone who doesn't know Swedish but has been to Sweden, I'd not have batted an eye if I saw a sign with any of these. Makes me want to download an ikea catalog and run it on those. Good idea regarding feeding it it's own results though. The only thing I can imagine might be problematic would be if it made a bad result like mooogå, it might think that there's a high frequency of an "o" following an "o" and "oo", so you might run into repeated o's more often. One odd mutation will be enhanced. If you tailored the results and only picked one's you like though, it might perform really well.
lol, I'm going to take your word for it that those aren't real.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
New word for me "shebang", thanks! Do you mean `wsgi.py` file and some header in there? wsgi.py is just: import os from django.core.wsgi import get_wsgi_application os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ccshop.settings") application = get_wsgi_application() Or httpd conf file?
That seems fine. Are you sure you're using the right Python interpreter executable in your `.wsgi` file?
What's in your `mod_wsgi` config file?
1E-123 is way too small to have a reliable effect. It may work for that particular input, but you'll still run into trouble if the input changes. The accuracy limits on double precision numbers are generally WAY larger than that (IIRC, like 1E-16 or so for double precision)! If it does not work reliably in ipython, but "works" elsewhere, I'd still be very careful about declaring success. Chances are that the problem is still poorly conditioned, and is likely to fail randomly based on input (even on machines that are currently deemed to be "working"). The fact that adding small numbers to your matrix seems to have an effect, leads me to believe that you are trying to do something poorly defined (in the mathematical sense). If this is truly what is happening, then it is entirely plausible that different computers/libraries/python interpreters, etc. could fail differently. Even though individual IEEE floating point operations are standardized, the ORDER in which they happen during your algorithm is not. We see this all of the time when programming on GPU's. You can write the same EXACT same algorithm in C and OpenCL/Cuda. If you add / divide / multiply, etc. a single number, then you will always get the same exact result regardless of hardware (as expected for anything adhering to the spec). However once you try to get more clever and do a bunch of stuff in parallel, the ORDER in which the math happens is no longer well defined (in fact, it is usually wildly different on cpu's and gpu's), and therefore the way precision-related errors accumulate is also not well defined. In your case, calling some higher-level function from ipython may lead to a different number of threads, computation order, etc. You are still getting the same answer to "within numerical precision", but your algorithm is apparently sensitive to variances on that order!
/etc/httpd/conf.d/domain.com.conf &lt;VirtualHost *:80&gt; # Admin email, Server Name (domain name), and any aliases ServerAdmin webmaster@domain.com ServerName domain.com ServerAlias www.domain.com # Index file and Document Root (where the public files are located) DocumentRoot /home/user/sites/domain.com/htdocs/ # Log file locations LogLevel warn ErrorLog /home/user/sites/domain.com/log/error.log CustomLog /home/user/sites/domain.com/log/access.log combined WSGIScriptAlias / /home/user/django/ccshop/ccshop/wsgi.py &lt;/VirtualHost&gt; WSGIDaemonProcess domain.com python-path=/home/user/django/ccshop:/home/user/django/venv/lib/python3.5/site-packages WSGIPythonPath /home/user/django/ccshop:/home/user/django/venv/lib/python3.5/site-packages WSGIProcessGroup domain.com &lt;Directory "/home/user/sites/domain.com/htdocs"&gt; Options Indexes FollowSymLinks AllowOverride None Order deny,allow Allow from all &lt;/Directory&gt; &lt;Directory "/home/user/django/ccshop/ccshop"&gt; &lt;Files wsgi.py&gt; Require all granted &lt;/Files&gt; &lt;/Directory&gt; ~ 
"Activating" the virtualenv only activates it for that single bash instance - it doesn't change any global state. The "deactivate" command is there so you can exit a virtualenv but keep your existing shell section, history, etc. There's no need to deactivate anything from inside the script, as its environment will automatically be discarded when it finishes running, and no other sessions will be touched.
Exactly! To switch you just do `source activate py35` if your on Mac or Linux, otherwise `activate py35` on Windows. And to end `source deactivate`.
The API is closed.
This is reminiscent of the "units" program: http://linux.die.net/man/1/units
This is something a little more nitpicky, but as a web developer there is something that would drive me nuts. Your route naming convention is a mix of CRUD and REST verbs. For the sake of sanity of your users, I'd pick one. For example, you have `create` and `delete`, but then `GET` instead of `read`? I'd pick one and stick with it. Also, you state `update` routes take `UPDATE` and `PATCH` requests. What about `PUT`? Also, an `UPDATE` request? Never heard of it. Re: performance: how does it stand against Falcon?
Why are you using a virtual environment and then installing things globally with sudo? Don't do that.
So this would become part of setuptools then? I'm not sure I would want to add the dependency of the parser, but if Python ships with a parser in the future it is something I would consider. Thanks for the idea!
I figured it out! I used Selenium Imgur link to my code: http://imgur.com/2pPHFYQ
Thats my way, I'm doing dumb things with no keeping in mind how it would behave, CentOS thing. What should I do? Why shouldn't I do this administrative sequence?
You should not install things globally using pip as root. Use the pip inside your virtualenv.
Can you print Dupper and Dlower out individually? Can you print out their type? I don't know matplotlib or scipy, so I'm not going to be much help.... A+= Dupper A+= Dlower Could it work that way? Maybe it's trying to do too much on one line the way you have it?
Compare numpy and scipy version numbers. And to cast an array of integers as doubles, a2 = np.array(a1, dtype=float)
In the Apache error log file, do you see a line similar to: Apache/x.x.x (Unix) mod_wsgi/x.x.x Python/3.4 configured
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Glad it helped. Using the correct dtype is important for some problems, so learning which dtype numpy will use is a good precaution. It often defaults to float64, but in some cases an integer type. You created B using only integers, so it assigned B an integer type. That got passed into A.
Kind of. Still need a connected bluestacks or real device to tunnel everything because of the way WhatsApp web works.
There's an excellent blog post by Jeff Knupp called ["Open Sourcing a Python Project the Right Way"](https://jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/). It's long and comprehensive, but it includes a pretty informative section on PyPi toward the bottom. I think the whole post is worth reading, but that section on submitting to PyPi should contain everything you would need to know.
I'll reinstall server, and try again. What should I install first after installing python? yum virtualenv or sudo pip virtualenv?
It does support unit conversions. 
brb. manually recalculating my model.
I actually have a plan to eventually see if I couldn't use a neural net to pick up on what you like based on what the video *looks* like. I have no idea if that'll work, but I'm definitely looking into "DeepPorn." But right now it needs some polish. Plus I have no idea if anyone is actually planning on using this on a regular basis.
 $ python3 main.py You sick fuck. $
From an evolutionary perspective this is... spectacularly suicidal.
Looking into your database code seems like you add lock for sqlite database transactions: https://github.com/PornSieve/porn_sieve/blob/master/database.py why do you need locks? I think just connecting to sqlite with Python sqlite3 library will add lock for you, see here https://docs.python.org/2/library/sqlite3.html#sqlite3.connect have you encountered some issues with sqlite without handling locks on app level? 
There's a joke to be made about pull requests on the git page...
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/machinelearning] ["What happens when I combine my love of machine learning with my love of masturbation." - \/u\/c3534l](https://np.reddit.com/r/MachineLearning/comments/4pwy4z/what_happens_when_i_combine_my_love_of_machine/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
exec() is a built-in function is it not ? It can be used for creating variables. But it is not a good option to create variables. I am simply agreeing with you. No one would use exec(). But for those who want to use it anyways will usually be using it to create variables. But it is not a good practice. Hence the filemapper package.
It is also possible you guys don't understand it's purpose.
[Spyder](https://github.com/spyder-ide/spyder), [rodeo](https://www.yhat.com/products/rodeo)?
Are you suggesting your package is a solution to the problem of people being unable to use exec to create variables? That is a problem no-one has.
Just don't make that joke at Pycon.
Finally, personally curated porn. We live in the future!
yeah I spose I really like RStudio for some reason
You get an UnboundLocalError which is entirely consistent with my statement "the name would not be bound after the corresponding block". I'm well aware that scopes do not correspond to blocks.
I love this kind of code time.sleep(84600)
Thank you for your feedback. The *update* thing is just a typo in the readme, I meant PUT and PATCH, but probably writing docs during night is not the best option :) will fix that. Regarding falcon: I never compared to falcon side by side. But I'm quite sure falcon is faster than weppy. This is because falcon is "designed to be fast", while weppy is designed to be simple. The fact weppy is faster than flask and django is not a consequence of a desire, is just a good result to add to the advantages, consequence of the fact that the core of weppy is just simple. But yes, weppy aim was never the one of being "faster than everything else". In the future – after I solved some lacks of features – I will probably focus on optimizing performance, but right now is not the main focus.
https://github.com/PornSieve/porn_sieve/blob/master/0.jpg Not sure what this is but I like it. Source?
[Donglegate](http://arstechnica.com/tech-policy/2013/03/how-dongle-jokes-got-two-people-fired-and-led-to-ddos-attacks/)
Hehe dick jokes. Just dont make it in PyCon.
Seems to work reasonably well for me
As soon as Numpy, Scipy, and Matplotlib are compatible. I.e. 2011.
Facetiously? I'm in the exploratory phase of learning python (code in general), browsing other people's code, learning what's possible. Is there a batter way to kick off the script on a periodic basis? 
Not sure why this is necessary? Redis is a fairly straightforward key value store, can't you just use json() on the r.get() result and then parse what you specifically need?
Thanks for this. I usually use flake8 with sublime text. It saves a lot of development time by catching silly mistakes. 
I agree that PyPI can be a bit tricky for beginner. However, even experienced users make some mistakes here, easily. And little mistakes can lead to annoying and confusing package version bumps since you can't upload a package with the same version number twice (ok, technically, with a little "exploit," you can, but I wouldn't want to recommend it to people) I saw some useful links in the comment sections already, so the only thing I want to add is that there is a [PyPI testing server](https://wiki.python.org/moin/TestPyPI). I would use it! I've made it part of my workflow to submit to the test server first, see if everything went smoothly, and then submit to the real PyPI
I'd rather not ;)
Yeah, the database will lock up all the time without it. Adding the lock seemed to solve it pretty well and I haven't had problems since.
Use a cron, that's exactly what they're built for.
As a temporary workaround you can do: from scraper import scrape_video from database import Database url = "http://www.xvideos.com/death_by_snoo_snoo" db = Database() db.save(scrape_video(url)) db.give_feedback(url, 100)
That's very odd. I just use Python's built-in "webbrowser" and I'm on Fedora myself. The only thing I can think of is some kind of popup blocking? I'll have to run Ubuntu in a VM and see if I can reproduce the problem once I get the chance.
The future of machine learning is all about the verticals.
If it's personal, github issue tracking, or a lot of #TODO comments that I will periodically go through. At work we've started to use a combination of YouTrack and Upsource which helps a ton with keeping all of our documentation centralized. 
Asana
Tried to reinstall, same issue.
My it be that wsgi script runs with apache user, for whom python2.7 is default?
In webdev everything new since 2 years, updated most old projects since then. Now we wait for AWS to get 3 on Lambda.
When 3 becomes the default for scientific computing libraries. While most libraries/modules already support 3, cutting edge stuff sometimes doesn't. For instance, [TensorFlow's syntaxnet](https://github.com/tensorflow/models/tree/master/syntaxnet) came out 2 months ago still and doesn't support Python 3. I prefer 3 for web scraping and parsing (Asyncio and better unicode support makes it great for the task), but still stick to 2 for scientific computing work.
I've already downloaded slenium and google webdriver so all i basically need is the code i talked about. 
Not a python question. Sounds more like homework.
Lol why? 
I can only guess this was an attempt at humour. I'm sorry you're receiving so many downvotes. If this is serious, there are 20 people in the organization. Not all have publicly disclosed their membership and there are at present only two Ians.
Thanks That's good to know. Btw is this the plugin you talk about https://github.com/SublimeLinter/SublimeLinter-flake8 ?
I don't remember honestly. I just remember it was a sublime linter person who asked for the feature. =/ (I use vim + syntastic)
What version of RHEL/CentOS are you using? If it's 6 or 7, you can get Python 3 easily through Software Collections (Red Hat supported repo), EPEL (Fedora/Red Hat supported repo) or IUS (Supported by Rackspace) on both RHEL and CentOS.
PySide says it works on Windows. Did you type in pip install -U PySide I'll look into seeing if there isn't some way to package everything together into a windows binary.
Activating a virtualenv is really just a matter of setting a bunch of environment variables in the current shell process (this is the reason why the `activate` script needs to be sourced, not run); no processes are spawned, no resources are allocated, so yes, this is 100% fine.
Any women commentor here? JK, of course not!
r/learnpython 
All data members have a type (e.g. int32/int64, float32/float64, string/bytes, unicode, list, dict, object (basically a class), method (a function), file, etc. Python automatically assigns types to it's types, but because numpy uses C objects for improved memory usage/speed, you have to assign the types slightly more explicitly. Otherwise, numpy will guess and guesses that you want float64s and that guess can change based on the operations you use and make things much less efficient than they should be. If you tell the program that you really want float32s/int32s, then you won't have that problem. Int64s take up 64 bits or 8 bytes of memory, so can store very large integers as compared to a int32 (which more than likely will be plenty). Float64s (also the default Python float) vs float32s are actually useful, but if the underlying program only stores the data in it's output file as float32s (regardless of if 64 bit floats were used during it's analysis), then you are wasting a factor of 2 on memory as well as slowing down your program (32 bit floating point operations are faster than 64 bit operations because that's what chips optimize for). I wrote a binary IO library that originally used dictionaries with Python int and data as floats to store the output. I rewrote the massive library to use numpy and slowed the IO down by a factor of 1.5, but got a factor of 5 on memory by only changing the data structure. In other words, numpy is not always better, but it needed to be done because I was regularly hitting the memory cap. I then reorganized the IO to use array based IO methods and got a 600x speedup (45 minutes to 4 seconds). Efficient use of numpy puts you at the limits of your hardware instead of being bound by the severe performance limitations of Python.
Just do a form POST. By viewing the source, it looks like that school dropdown field is named "Database", and the value of each school is represented by a number. No need for Selenium or anything too complex.
I try to make my code compatible with both. 
The district appears to be codified into an integer: &lt;select class="input-validation-error sg-logon-right sg-combobox" data-val="true" data-val-number="The field Select a District: must be a number." data-val-required="The Select a District: field is required." id="Database" name="Database"&gt; &lt;option value="10"&gt;Bensalem Township Live&lt;/option&gt; Does the list of options not match what you're expecting to see? The mention of "Database" appears to be irrelevant for your purposes, however, the page is running several javascript files, one or more of which probably modify the DOM, and thus *could* be fiddling with the select options. You'd need to explore the DOM with something like firebug, to see if it stays as initially defined. If not, you'll have to track it down in the javascript. If it is indeed a "cooked" value, you'll need to work out how to emulate it or run the javascript yourself (then you're talking about a headless web-server or programmatic control of a web-server). **Hopefully** you can just pick the appropriate decimal value for the district.
Already done.
Of course python has a switch, it is just a little ugly. Here is one in python3 but it can be done in python2. The difference in print between versions make this take more functions and lines in python2 though. #!/usr/bin/env python3 from collections import defaultdict selection = input("&gt;&gt;&gt; ") defaultdict( lambda : lambda : print("unknown number"), [("1", lambda : print("first")), ("2", lambda: print("second"))] )[selection) ]() ^^Please ^^don't ^^ever ^^do ^^this
emacs org-mode
OK, but what the hell is it? The link doesn't explicitly say, nor does their homepage.
I like to think of it as more of a quirk to OOP design principles. While numbers are easily comparable, it is now at the hands of the developer to 'decide' what makes an object "greater than" another instance of that object
We have to use python 2.6 at work still. So when the documentation says that "explicit support for 2.6 is gone", what does that mean exactly. Does that mean no further support for python 2.6 or somehow python 2.6 code will not check any more ? I wasn't even aware of code that works in python 2.6 but wouldn't work in 2.7.
http://flake8.pycqa.org/en/3.0.0b1/user/options.html#cmdoption-flake8--stdin-display-name
Ahhh, very good point. I eventually would need to put a more robust safeguard in place if I were worried about this sort of thing.
At home I only use 3. At work I still use 2 when I have to use arcpy. Hopefully when I get Arc Pro I will be able to switch over completely to 3
This is very true, and can be very useful, but can be easy to shoot yourself with, or confuse people implementing your classes. One can end up with some inconsistent or unexpected behaviors without careful consideration/awareness. Consider: # Type1 uses an unspecified method of comparison. # Type2 uses a different unspecified method of comparison. a = Type1() b = Type2() a &gt; b # True a &lt; b # False b &gt; a # True b &lt; a # False
Usually it means it's just not officially supported (any associated bugs only against 2.6 are 'wont fix' unless they also apply to 2.7 and the test suite likely won't be run against it anymore). It probably will still work just as fine as it does right now.
Please state exactly what "hasn't worked" with matplotlib or python-gantt. If you do go the other route, pillow is a friendly fork of PIL, *pip install pillow* should be enough to get it.
I would start by reading about matrix inversions, and perhaps trying a different kind of matrix inverse.
Meh, I fat fingered it. My working file on my computer is smaller. I just put that in there for no reason. It can be whatever you want.
There are far too many software projects that suffer from this issue. It feels like the phenomenon should have a catchy yet uninformative name.
I don't have a specific piece of code to give you. And I don't know enough about loop ... recur to comment intelligently on that. But here are my thoughts. First, let's note that, while an important use of TCO is recursive implementation of algorithms that are conceptually iterative, it is not *solely* a replacement for loops. TCO optimizes all tail calls, not just those to the current function. That said: 1. TCO allows a function to hand off control to another -- or another version of itself -- in a resource-efficient manner. This has been found to be useful in many contexts. For example, it is integral to the continuation-passing style of programming. And [Guy Steele argued](http://www.eighty-twenty.org/2011/10/01/oo-tail-calls) that TCO is a necessity for the implementation of black-box abstractions using object-oriented design. 2. If decades of computer programming experience have taught us anything, it is that to get correct, maintainable code, side effects need to be kept under control. It is thus understandable that a lot of modern programming-language design is driven by functional programming, in which we avoid side effects. The FP community is united in its endorsement of TCO. I conclude that it TCO is at least worthy of consideration. 3. But it hasn't really been considered. The arguments against including TCO in Python are primarily two blog posts by GvR in 2009: [post #1](http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html), [post #2](http://neopythonic.blogspot.com/2009/04/final-words-on-tail-calls.html). The first post contains some clear misunderstandings -- which he admits in the second post. But the second post, entitled "Final Words on Tail Calls", was written only 5 days after the first. I will grant that an informed analysis just might conclude that TCO is not right for Python. But it is obvious that GvR did not do an informed analysis.
It automatically formats your code according to whatever standard you set. 
/r/learnpython. What have you tried? 
Pycrypto is no longer being maintained. Perhaps Pycryptodome is a better choice - http://pycryptodome.readthedocs.io/en/latest/
Like /u/grizzlegrant said, Google Analytics is a good option. If you're pushing HTML to you repository, you can add the [tracking snippet](https://developers.google.com/analytics/devguides/collection/analyticsjs/) (with your code) directly to the `&lt;head&gt;` element. Otherwise, if you're using markdown and Jekyll, you'll need the snippet to be in your template. For pre-made templates, it may already be there, in which case you'll only have to add your tracking code to the YAML metadata.
Almost all of the scientific computing libraries already support Python 3. 
yeah, it's up to date...
Four years ago.
Good to know. I'll look into this. I mostly used Crypto because we use it a lot at work. 
Please don't use either. Both implement crypto algorithms in pure Python and therefore can not be accelerated by hardware crypto chips (like what's on SPARC). Please use cryptography.io instead as it sits on top of openssl which is written in C and can be optimized.
Use a string containing punctuation and "not in"
Can the waterfalling behaviour create cycles? If so does this project solve having messages get infinitely passed in a cycle?
oddly enough, the 3rd try at uninstalling and reinstalling python seemed to work maybe it just needed a weekend off
Assuming messages are parsed correctly, then it cannot create cycles. The idea is that you store the ID of each message you receive, and if the ID has been seen before, you don't pass it on. Looks kind of like [this](https://github.com/gappleto97/p2p-project/blob/master/figure_one.png) Edit: removed no longer true limitation
&gt; Please use cryptography.io instead If you look at my issue tracker, that's already there :) Current preference is rsa, which is pure python (except for whatever pyasn1 is doing), so it'll definitely take some time to get there. Fortunately encryption is not the default in this release. There's a couple bugs getting it to work in mesh_sockets on python3 that I haven't quite worked out yet.
Ah I see. That's pretty cool. OK-Redis pretty much does the same thing as that then. :D
If you need software written _for you_ then I'd be willing to write it for you _for a fee_. If this is homework, the onus is on you to learn. We can help with specific issues (/r/learnpython). 
Suggestion: Have a "paranoid" mode that: A. Hides/Obfuscates the headers. B. Allows 512/1024/2048/4096-bit encryption. C. Includes some type of tunneling? For better or worse, all p2p systems/protocols inevitably end up used for morally grey activities. Your project will be no exception, if it gets big enough. That being said, I hope it does. There's a serious dearth of python networking modules. 
But you still can get same msg at least as.much times as you are in other nodes' routing tables. Not exactly efficient. 
My big hope is that I can maintain implementations in different languages. That definitely makes "paranoid" modes much more difficult to maintain, but even so. That said, part of the "paranoid" mode is already implemented. If you look, there's an object called `py2p.net.secure_socket`. This uses RSA to encrypt traffic between two nodes. The only reason this currently isn't the default is because there's a couple python3 bugs that I can't reliably reproduce, and therefore debug. Edit: and because I'm not a cryptographer and it desperately needs review I'm more than willing to implement different header structures if people can come up with reliably receivable models. The first four bytes probably can't get moved reasonably, but the rest should be fairly changeable.
Definitely not. That's a problem with any mesh network structure. In fact, the worst case scenarios look kind of like this, where n is the number of nodes on the network: Policy | most total messages | average total messages ---|---|---- Current (echo to all) | n^2 | min(16, n) * n Don't echo to sender | (n-1)^2 | min(16, n-1) * (n-1) Reduce max connections | (n-1)^2 | min(8, n-1) * (n-1) If you want to do any sort of data storage, this setup is absolutely unreasonable. That's why I'm hoping to add some distributed hash tables to this setup. Those are *way* more efficient at storing data, and you can even use it to bootstrap a connection to your mesh network of choice. But, to be perfectly honest, efficiency isn't the main goal of distributed projects. Yes, you'd like to get as close as possible, but it can't take precedence over things like decentralization and robustness. If your system is incredibly efficient, but incredibly fragile to changing network conditions, nobody will want to use it.
Awesome.
Asana now. Used jira before, but it is too heavy in all meanings. No trello. Redmine. 
Can you link to a git repo or something so we can see the actual code? 
I use the community version. Is there any reason to upgrade?
Is there anything which ties in code formatting and maybe git for jupyter notebooks. I do data analysis so I love doing exploratory analysis I'm jupyter, but I end up saving the file in as a.py and open it in Pycharm eventually to format it and version control. What happens is that I edit my py file and eventually it is out of sync with my jupyter file. I'd like to use jupyter 100 percent of the time if i could
I kinda just started writing the code, and I decided to test out locateOnScreen, and it failed every time. Here's a pic of the defined function: http://i.imgur.com/ZuIEciQ.jpg I think it can also be noted that when I installed PyAutoGUI, it said "no module named PIL", and when I tried to install Pillow, it said "jpeg is required unless explicitly disabled using --disable-jpeg, aborting". I looked them up and nothing seemed to help
Aand here's a picture of part of the code itself http://i.imgur.com/ywiFAWB.jpg 
Do you assume that every node is connected to all the others? If not you probably need to have some sort of routing(maybe path vector?). A P2P that sends `O(N^2)` messages is not scalable.
I tried installing the Anaconda I package on Sublime Text a while ago, but I remember that I didn't work at all. Now I wonder : what was it supposed to do? 
Or if you want to be a bit more thorough regarding what is and is not punctuation in various languages, use the [unicode categories](https://en.wikipedia.org/wiki/Unicode_character_property). Eg. to strip out anything in the various unicode punctuation categories, you could do: import unicodedata out = ''.join(ch for ch in inputstring if unicodedata.category(ch)[0] != "P") Of course, that's assuming punctuation is all you want to strip out. You probably want to include symbols too (ie the Sx categories). Actually handling this *correctly* for all i18n cases can be somewhat tricky - answering a question like "Excactly what do I mean by 'punctuation' here" can sometimes require a bit of thought (though fortunately, you can lean on the unicode standard to some degree - it'd be impossible if you had to decide on a character by character basis yourself for every language out there).
Did you actually take a picture of your screen? 
Yes, but not if you don't already have a job, or are into full scale web development like in Django or Flask. It does quite a lot for you like integration with remote servers, vagrant, virtual environments (if community doesn't get that), and lots of premade templates to get you started. I still use Sublime Text for quick edits, but for full project works I love PyCharm. only costs $9 a month USD unless you buy a year.
Go with hash trees(merkle)/lists and use cryptography for verifying authenticity. 
I made the switch in january. I checked every now and then whether all of the 3rd-party-modules i use are finally supporting py3, and as soon as all of them did, i switched. And i'm not looking back!
I'm just looking at net.py, and I already see several things wrong with this. 1. You use RSA signature verification with **the same key** as encryption. There's a good reason that PGP uses separate keys for encryption and key signing. See [here](https://crypto.stackexchange.com/questions/12090/using-the-same-rsa-keypair-to-sign-and-encrypt) to tell you why this is a BAD IDEA. 1. You even **support** using keys less than 1024 bits. You don't have any legacy support *to break*, so enforce 2048 at least. 1. The fact you're using RSA for this is terrible. RSA is slow, especially compared to using symmetric encryption. Not to mention that's a lot easier to fuck up asymmetric encryption than it is if you use AES-GCM or something similar to that. Also, it only supports encrypting up to around 256 bytes of data or something similar. So your secure socket is going to be incredibly slow. 1. You don't run in constant time. Enjoy your timing attacks. I'm not a professional cryptographer, so take this with a grain of salt. EDIT: Something else. You exchange the public keys without verifying them either, not even with a Diffie-Hellman exchange. Anyone can man in the middle your connection, replacing the RSA keys with their own, unless I missed something.
&gt; The idea is that you store the ID of each message you receive (up to 100 for up to 60 seconds) Could this go horribly wrong with a network above a certain size and traffic level? If you get 100 other messages before one has finished going round the network, you might send it again, throwing the whole thing into a positive feedback loop.
A quick Google search... Is this what you're looking for? "Python-Gantt make possible to easily draw gantt charts from Python. Output format is SVG." http://xael.org/pages/python-gantt-en.html
[Actual release notes](https://docs.python.org/3/whatsnew/changelog.html#python-3-5-2)
Yes, numpy.linalg can use OpenBLAS and there are known bugs when using them together: https://github.com/numpy/numpy/issues/654. Curiously enough this one involves matrix inversion. OPENBLAS_NUM_THREADS=1 seems to be a workaround, you end up losing multiprocessing. The end of this story is they "fixed" it by adding a warning in the code: +# **Warning**: OpenBLAS, by default, is built in multithreaded mode. Due to the +# way Python's multiprocessing is implemented, a multithreaded OpenBLAS can +# cause programs using both to hang as soon as a worker process is forked on +# POSIX systems (Linux, Mac). Python 3.4 will introduce a new feature in +# multiprocessing, called the "forkserver", which solves this problem. For +# older versions, either compile OpenBLAS with multithreading turned off or +# use Python threads instead of multiprocessing. +# (This problem does not exist with multithreaded ATLAS.) +# +# http://docs.python.org/3.4/library/multiprocessing.html#contexts-and-start-methods +#
As soon as I finish my current robotics project, I'll be on Python 3 for everything.
Voc is a great project, but I'm not sure you can do a non-trivial app with it right now, especially a game.
I'd recommend Kivy/KivEnt, since they explicitly support Android, have active Android-using communties, and are both modern and potentially very performant. Maybe you've seen it already, but if you want to use pygame I'd checkout pygame_sdl2 from renpy, I think this is probably the best way to run pygame on Android right now (although I haven't tried it). Personally I prefer Kivy's API anyway, but I'm a Kivy dev and so probably biased about it. Another option is to use PySDL2, which also works on Android with [python-for-android](https://github.com/kivy/python-for-android).
&gt; probability : boolean, optional (default=False) &gt; Whether to enable probability estimates. This must be enabled prior to calling fit, and will slow down that method. Why is it slow? [Here](http://stackoverflow.com/questions/15111408/how-does-sklearn-svm-svcs-function-predict-proba-work-internally). I suggest you use logistic regression if you want a linear classifier with reasonably well-calibrated probability estimation. If you want plain accuracy (unlikely!), you should just set probability=false for your SVM.
Recording is available [YouTube](https://www.youtube.com/watch?v=D24ueAK_tDw)
Seems to be mostly bugfixes. 
I have on pretty good authority that this is the highest priority of the Llambda team, though they do not publically promise for release dates so as to avoid disappointment if a deadline is missed.
40 hours / week or so I use .NET, which means my Python usage is only for freelance projects or hobbies. I haven't ever used Python 2, so I guess I'm part of the new generation (with only a couple of years using Python now) that doesn't know the "old days". I've never run into something I needed to use that only supported 2, and sometimes I favor projects that don't support dual compatibility since it adds some bloat to reading through the code.
I never was in 2 :D
Exactly. Right now, it might work. But since there are so few of us actively maintaining it, we're not going to keep chasing down obscure bugs in a version of Python that has long since been supported by the CPython core developers. We've run into obscure incompatibilities in the stdlib on 2.6 versions 2.7+ and having to shim around them is frustrating. Further, we're following the trend of major projects dropping 2.6 support. The old versions of Flake8 2.x all support Python 2.6 and aren't going to be removed from PyPI. If/when 2.6 support stops working on Flake8 3.x, you can pin to the last known good version. If a company wanted to sponsor Python 2.6 support, that would be a different situation entirely. There are also entire companies (e.g., Red Hat) that support old and dead versions of Python and open source packages for them that have stopped supporting those versions. Ostensibly, they could be paid (far more than would be needed to incentivize the Flake8 team) to add support for Python 2.6 to their Flake8 packages if customers really wanted that. See also: http://www.curiousefficiency.org/posts/2015/04/stop-supporting-python26.html (from well over a year ago)
I replied to /u/nerdwaller by accident. Hopefully that explanation helps.
No worries. =)
You need some libraries installed, for Pillow (PIL) to be able to output jpegs. Install them (probably libjpeg) then reinstall Pillow and the message will go away.
Make sure you have all the libraries installed that pyautogui needs (check pyautogui docs) - it looks like it can have that sort of error, if it has a problem importing the library pyscreeze that it uses.
Sounds like `q` plus remote debugging. https://pypi.python.org/pypi/q
And now we wait.
&gt; Major new features of the 3.5 series, compared to 3.4 /u/markusmeskanen is probably asking for changes between 3.5.1 and 3.5.2, not 3.5 vs 3.4.
If this is sending more than 100 messages a second, then I'm truly surprised, and more than willing to increase that limit if it causes problems. Until then, I'd like to reduce memory impact. 
Please elaborate. Merkle trees might be more efficient here, but I'm not sure I understand what you're suggesting.
An @ operator has been introduced for matrix multiplication!
Constant time means your encryption runs in the same time, no matter what data is passed in. If it doesn't, the attacker can tell what data is being passed in based on what time it makes. Also, 1024-bits is not secure. It can be compromised by nation-state actors looking to attack it.
In 3.5, but not 3.5.2 specifically.
But only in scipy, right? I guess it is an alias for __matmul__
If you're going by the standards of nation-states then there's very little we can do, as we don't know their capabilities very well at all. Like I said, though, I'm more waiting for SSL to be properly enabled than anything else. I'm more than willing to work with you on getting that module up to snuff until then.
So is this supposed to be a tool for cracking passwords or for coming up with secure?
What benefit does this give when compared to something like Marshmallow or WTForms (ignoring that WTForms is specialized towards web forms)? 
+1 for Godot I'm a python programmer, and i'm also a big fan of Godot. It's very different than the other options in that it provides a full game engine, truly letting you focus on what makes your game *different* instead of sinking tons of time into getting your sprites to blit correctly. That said, it does not use python, just a simple python-inspired scripting language. A couple times i've hit snags, as its certainly less feature-filled and more poorly documented, but generally it does what it does well. What I learned through experience is to "think in Godot" as opposed to tackling this problem from a dev perspective, e.g. think in terms of "scenes" and scene inheritance (essentially a game entity class system). My initial use of it years ago generally involved re-inventing the entity system by creating pure classes that spawned and managed entities, and this sort of thing turns out to be a lot extra work while erasing the benefit of having a pre-built graphical editor. 
Ok you have too many floats. Float arithmetic is bad for you
It rarely happens the title is TLDR
I'm in love with Pycharm.
Okay, so I'm slowly getting this figured out... First, when I tell conda to make the new environment (I'm doing this through the IPython console in Spyder), I type: !conda create -n py27 python=2.7.11 anaconda It kind of just sits there for a while. I eventually quit out &amp; later found out that it had created the file under /envs However, when I try switching to it using !activate py27 it seems to not switch (I check using !conda info --envs ). The star remains next to the C:\users\.......\Anaconda3 instead of \Anaconda3\envs\py27, even though the console said deactivating &amp; activating new one Am I doing something wrong? Is there a way to "pull back &amp; nuke it from orbit?", or am I jumping to that too soon? Also: How'd you get the 'code blocks' to appear in line? :P
Fair question. Both the things you listed are good tools, and your mileage may vary for which tool best suits your team and project. I can tell you a few reasons why *I*, as a programmer, prefer the schemagic tool for my applications. The first is simpler data types. If I'm reading or publishing programmatic definitions of data, I want the definition to have the same "look and feel" as the shape of the data it represents. Compare the following two data definitions: A definition in **Marshmallow**: class PersonSchema(Schema): id = fields.Integer() name = fields.Method('get_name') def get_name(self, person, context): if context.get('anonymize'): return '&lt;anonymized&gt;' return person.name A definition in **schemagic**: person = { "id": int, "name": str, } Now, obviously this is an unfair comparison, in that the marshmallow definition is also dealing with creating accessor functions for the data. However, I want to point out that the definition of person in schemagic is *just* the data. That is, there is no logic or behavior mixed in with the *data contract*. It could be put into a file of static constants, and that file could be copy pasted onto a confluence/wiki documentation with NO subsequent formatting. Marshmallow has its own powerful tools for rendering its own documentation, along with its complex tools for accessing components of the schema. Marshmallow takes the django, angular approach to utility, in that it is a very large codebase that operates with its own rules, and has its own ecosystem. Anyone who adopts marshmallow is opting into a very complete framework of requirements and features. Schemagic prefers to be a small tool for doing one thing very well. it takes the pure functional first input/output model that lets the person using schemagic take whichever pieces of the tool they like and leave the rest behind. Selective adoption also reduces the business risk of adopting schemagic vs adopting marshmallow. Marshmallow is a very large codebase with quite a few moving pieces. If the maintainers of marshmallow decided to give up programming, and your application is left with the choice of either forking marshmallow or abandoning it completely, you face a very large overhead. The entirety of schemagics codebase, with equivelant functionality, is the size of the definition of the schema class in Marshmallow. **tl;dr - schemagic is a smaller codebase for the same functionality, uses simpler datatypes for data definitions that match the "shape" of the data they describe.** Perhaps though, I'm not answering your question the way you wanted, so im going to end this comment here and check back with you to see if you have any questions or concerns about what ive said so far.
also, on the subject of extensibility, i might add the difference in complexity between an "enum" validator in schemagic and the enum validator created for marshmallow. schemagic extension to allow enums: def enum(*possible_values): def _validator(data): if not data in possible_values: raise ValueError() return data return _validator marshmallow extension: class EnumField(Field): default_error_messages = { 'by_name': 'Invalid enum member {name}', 'by_value': 'Invalid enum value {value}' } def __init__(self, enum, by_value=False, *args, **kwargs): self.enum = enum self.by_value = by_value super(EnumField, self).__init__(*args, **kwargs) def _serialize(self, value, attr, obj): if value is None: return None elif self.by_value: return value.value else: return value.name def _deserialize(self, value, attr, data): if value is None: return None elif self.by_value: return self._deserialize_by_value(value, attr, data) else: return self._deserialize_by_name(value, attr, data) def _deserialize_by_value(self, value, attr, data): try: return self.enum(value) except ValueError as e: self.fail('by_value', value=value) def _deserialize_by_name(self, value, attr, data): try: return getattr(self.enum, value) except AttributeError as e: self.fail('by_name', name=value) I think this serves to show contrast between the problem schemagic is trying to solve and the many, many problems being operated on by more complex frameworks such as marshmallow
I love your enthusiasm but you need to have a plan and have a core focus. Since you are interested in web crawling, data mining and machine learning. This should be your main focus as you already have the pre-requisite python knowledge. It would just be a matter of time learning how to use the libraries. Continue to build your portfolio of work. Better yet make sure it solves an actual problem. In terms of your competitive programming you should learn c++ as that is the go to language for competitive coding. 
It could be that I deal with json blobs (and the occasional YAML blob) and need to marshal Python objects from and to them all the time. So I need that extra heavy weight sitting at the boundary of web and application, rather than just validation. I do feel that your marshmallow example is a little misleading because the corresponding marshmallow schema is only: class Person(Schema): class Meta: fields = ('id', 'name') Or: class Person(Schema): id = fields.Integer() class Meta: additional = ['name'] If you're accepting a text based input (otherwise the first will only load/dump the field as is). &gt; ...it takes the pure functional first input/output model... Marshmallow is also a pure functional piece. Once you have a schema created, you can create a single serializer: personal_serializer = PersonSchema() And use it over and over. There's some hokey pokey, non-functional stuff going on in the lower levels, but up top an input always corresponds to the same output (assuming you've not done anything to change that in the schema). &gt; Marshmallow takes the django, angular approach to utility, in that it is a very large codebase that operates with its own rules, and has its own ecosystem. Anyone who adopts marshmallow is opting into a very complete framework of requirements and features. Using marshmallow doesn't require any dependencies. It does recommend using dateutil and simplejson but doesn't install them by default. &gt; Selective adoption also reduces the business risk of adopting schemagic vs adopting marshmallow. Marshmallow is a very large codebase with quite a few moving pieces. Fully admit to this having contributed to the codebase. For a new comer, it can be completely overwhelming to begin contributing to it. I can't imagine a new comer attempting maintaining a fork of it. But seeing as it was moved from sloira's personal repo to a community one, I'm less worried about it. &gt; If the maintainers of marshmallow decided to give up programming, and your application is left with the choice of either forking marshmallow or abandoning it completely, you face a very large overhead. This is true of any third part dependency, even with one as small as yours. All that said, I can see value in your library if I'm doing something much higher level than interacting with JSON blobs.
Tickled that you looked into my repo and my extension. These two solve separate issues though. The schemagic one just does a membership test, where as my EnumField handles transforming something like `{'something': 'a'}` into `{'something': &lt;Things.a: 1&gt;}` (alternatively: `{'something': 1}`) and vice versa. Which I guess is your point.
&gt; need to marshal Python objects from and to them all the time. So I need that extra heavy weight sitting at the boundary of web and application Yeah, I think this sits at the heart of the difference. schemagic chooses not to mix the work of making classes dance. It prefers the pipeline approach (make your classes into data, then validate it, don't mix aspects). schemagic is, I would contend, a more idiomatic approach to a subset of the functionality of marshmallow.
and yes. Part of what I want to communicate is how suitable schemagic is to agile teams of mixed levels of skill. The schema checking mechanism deals with the complexity, and even entry level members of the team can quickly contribute to building a suite of validators specific to your project. More senior members of the team could write the data coercion component that would serialize or deserialize objects, or indeed that work could be shopped out to another library more suited to the task. Again, as I mentioned above, this is predicated on having a very data driven system.
After thinking about it more, I realized just how tiny of an impact it was relative to anything else, so I scrapped that limit. In fact, you'll see me saying so in this very thread.
Looks interesting; I wonder if web2py support is on the list of future improvements/features.
I think you misunderstand me. The name would be bound only if the conditional value was truthy, so not always when the if statement was executed. It would be equivalent to something like this, although the _condition variable would never be exposed. _condition = regex.search(s) if _condition: match = _condition ... 
Let's see: 1. Don't do this from IPython. The program is going to request your input for permission to download a fresh copy of all the packages. I don't think that prompt is going to appear for you. That's probably why it was just sitting there. 2. Run from the actual command line. You should see Using Anaconda Cloud api site https://api.anaconda.org Fetching package metadata: .... Solving package specifications: ......... followed by other output. 3. &gt;"pull back &amp; nuke it from orbit?" I think you mean you want to remove the env and start over? That's in the documentation under 'Remove': http://conda.pydata.org/docs/using/envs.html 4. Inline code is through the \` character (next to the 1).
If versioning is the only issue, try using Python's **virtualenv**.
How do you figure? Seems like a lot of improvements.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
After 5 more UnicodeDecodeError
use PyQt or kivi. PyQt package have the designer.exe from QtCreator (QtCreator is for c++).Design your plugins in designer, and convert to python code with tools in the pyqt package. then populate with more code. Very easy and the frame work is huge. Kivi is getting big also, and the GUI can be converted to android os/iphone os. Tkinter that ships with python is utterly crap, why they even have it in there make me wonder.Looks like xp gui.
I think there's a web forum where this questions is asked at least twice a week. Try searching there. https://www.reddit.com/r/Python
Alright, you're on the right path. As long as you use the correct SSL params. 
Well, I am partial to Qt, because I like GUIs that look nice, and I have yet to find a tkinter based GUI that I like the look of. Tkinter is nice in that it ships with Python however. I like to think of Tkinter as the Windows Forms of Python (smaller, good for small apps), and the Qt bindings the WPF of Python (more customization, beautiful UIs). A word on Qt Creator. If you use it, I would not use the forms. It is an old technology, that is being replaced by QML (a JS like declarative language). Overall, what you use depends on what you want to make. There is no "best" here. There are some which are better than others for somethings, and worse for others.
I faced the same issue not that long ago (I am now starting my first year at college this fall). I had used Python for a while, and felt that I should think about moving on. I had tried C++, and found it a pain. So I learned C# (mostly because I am on windows, and I wanted a nice GUI, so I used WPF). After learning C#, it was easier to learn C++. Honestly, I would recommend that you learn some language (be it c#, Java, or some other similar language) before C++. I now know enough C++ to feel comfortable working with it, but I'll tell you something: C++ is hard. I still find it hard. I know people who have been using it for years and find it hard to use. I think the only way it is easy is if you have used it for a looong time, but I guess I'll see. My main issue when I am using C++ is that the compilers and build setups are not very crossplatform. gcc and Visual Studio are not the most compatible. In Python, I am used to setuptools on the platforms I want. Cmake helps a lot, but not every project uses it. So if you go down the Java/C++ path, make sure you learn the tooling too! Finally: I would add that you should learn languages which allow you to do what you want to do. If you want to do frontend, learn JS, if you want to do systems, learn Rust/C++/C etc. I don't think learning a language to add to your resume makes any sense, because you want to learn languages that enable you to do jobs that you like doing, so you like your job. At least, that is the approach I have taken.
The problem is on this line : A += Dupper + Dlower Dupper.dtype is 'float64' Dlower.dtype is 'float64' A.dtype is 'int32' The problem is the unary function (i.e. +=). Numpy is preventing you from doing something that is a mistake 99.999% of the time (e.g. change in precision of an existing typed object due to casting... in this case changing A from int32 to float64). A = A + Dupper + Dlower works, because you are creating a completely brand new object named A, so it's presumed that you are totally ok with the types of the individual objects, and the implicit type this new object ends up with (float64). It's a subtle, yet important difference. 
Thanks for the clarification!
/r/learnpython
This doesn't work correctly because division with the operator `/` in python3 always outputs floats, which will introduce rounding error. That is after it has done a single division (which converts number to a float, it will always think large floats are even and divide. That is `float(123456789012345678901) % 2` will give an answer of 0.0, even though `123456789012345678901` is clearly odd. Compare: number = input("Enter a positive integer: ") number = int(number) original_number = number count = 0 while number != 1: if number % 2 == 0: number = number // 2 else: number = 3*number + 1 print(number) count += 1 print("The number %s took %s calculations to reach 1" % (original_number, count)) input("\n\nPress enter to exit application") with the following flawed code (equivalent to version in video): number = input("Enter a positive integer (flawed): ") number = int(number) original_number = number count = 0 while number != 1: if number % 2 == 0: number = number / 2 # Using FLOAT division that loses precision else: number = 3*number + 1 print(number) count += 1 print("The number %s took %s calculations to reach 1" % (original_number, count)) input("\n\nPress enter to exit application") Using the same input `12345678901234567890` gives wildly different results. The correct version (integer division): Enter a positive integer: 12345678901234567890 6172839450617283945 18518518351851851836 9259259175925925918 4629629587962962959 13888888763888888878 [truncated] 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1 The number 12345678901234567890 took 516 calculations to reach 1 and float division (incorrect): Enter a positive integer (flawed): 12345678901234567890 6.172839450617284e+18 3.086419725308642e+18 # should be 18518518351851851836 1.543209862654321e+18 # should be 9259259175925925918 7.716049313271604e+17 # should be 4629629587962962959 3.858024656635802e+17 # should be 13888888763888888878 [truncated] 11.0 34.0 17.0 52.0 26.0 13.0 40.0 20.0 10.0 5.0 16.0 8.0 4.0 2.0 1.0 The number 12345678901234567890 took 286 calculations to reach 1
Unfortunately I need this to stay compatible with python2, so no default context. What's the best you can do while maintaining python2.6 support (because work)? It doesn't look like TLS 1.2 is included in there, though I do see TLS 1.
I cannot directly see your project without a login. I think though mine is primarily for pip as apt at least logs. While the apt log is not as clean as the yum.log it still works. Though apt does lack a history feature for the target audience this doesn't seem to be a huge issue to me.
I am primarily wondering if my functions look OK or should be broken up some more. Originally this started as a single script which is why it is long, but I do know I should break it up. Would an object oriented approach be beneficial here?
Hi nice work on the module. I would recommend switching to GitHub from Sourceforge, it will help spread the word and inspire more people to look over the source code. Also Sourceforge has a very bad reputation. :) https://en.wikipedia.org/wiki/SourceForge#Controversies Edit: Also, in GitHub, people can report issues and make pull requests with bugfixes / new features
It's just whatever you want it to do. Little scripts I write I tend to abstract out a bit so I don't have to repeat myself.
Eh, I think python's a perfectly fine choice for this, especially as python handles big integers natively without external libraries. Python makes it really easy to churn this out and add fancier features like a version that memoizes intermediate results like: COUNT_DICT = {1: 0} def collatz(number): number = int(number) original_number = number count = 0 number_stream = [original_number] while number not in COUNT_DICT: if number % 2 == 0: number = number // 2 else: number = 3*number + 1 number_stream.append(number) count += 1 for i, num in enumerate(number_stream): COUNT_DICT[num] = count - i + COUNT_DICT[number] return COUNT_DICT[original_number] Yes, you can write something like this in a strongly typed compiled language, but it tends to be more annoying and requires more cruft. If I wanted to compute the first million collatz counts the previous version is about 13 times faster than not memoizing. And I could probably iteratively improve on this by say converting `COUNT_DICT` to a `COUNT_ARR` like: ARRAY_LEN = 1000000 COUNT_ARR = [-1]*ARRAY_LEN COUNT_ARR[1] = 0 def collatz(number): number = int(number) original_number = number count = 0 number_stream = [original_number] while number &gt;= ARRAY_LEN or COUNT_ARR[number] != -1: if number % 2 == 0: number = number // 2 else: number = 3*number + 1 number_stream.append(number) count += 1 for i, num in enumerate(number_stream): if num &lt; ARRAY_LEN: COUNT_ARR[num] = count - i + COUNT_ARR[number] return count + COUNT_ARR[number] which gives me a factor of 3 improvement over the COUNT_DICT version when computing the first million Collatz counts. Again, not saying you can't do it in C, but it would be slower/uglier in my opinion.
or you can assign a var after the fact x = _ print(x) #[2, 5, 8]
thanks for educating me on the subject i did not know that a floating point number was equivalent to a double, also i have re-uploaded the video so i'm not displaying incorrect code anymore.
USB numpad would work quite well, and you'd only need to capture keyboard input instead of the GPIO pins. There are plenty of ways to send an email with python, although there are services online for sending text messages too. Shouldn't take too long to put together.
When you run the installer there will be an upgrade option. edit: this is assuming you're already on 3.5+ and download the matching 32/64 bit version you already have.
you good sir, or madame, are in luck. I just finished a bit of code that handles this. use the python SMTPLIB to accomplish what you want. I recommend creating a gmail account specifically for this project, because you need to enable "allow less secure apps". You can enable it by following these steps, or [follow this link](https://myaccount.google.com/security?utm_source=OGB#connectedapps) and do the last step - create an account - sign in - click the 9-square "grid" icon (upper right) - click the "My Account" shield icon - Under "sign in &amp; security" click "connected apps and sites" - Turn on "Allow less secure apps" def sendMail(msg = None): headers = ["From: " + sender, "To: " + recipient, "MIME-Version: 1.0", "Content-Type: text/html"] headers = "\r\n".join(headers) session = smtplib.SMTP(smtp.gmail.com, 587) session.ehlo() session.starttls() session.ehlo session.login(username, password) session.sendmail(sender, recipient, headers + "\r\n\r\n" + msg) session.quit() btw, if you look up your carrier, you can actually "email" a text message to yourself. That is what I am using it for, so I get updates right on my phone.
oh okay that's not so bad. Thank you!
I saw
Vecci
*Vici
Thanks for the suggestion, I'll look into it.
In numpy, A @ B == A.dot(B)
Nice!
The only qn I have is "why"...
would love a post on marketo
I find the following convention quite pleasant: double quotes for "human-readable" text (e.g. `print("Hello World")`), single for more internal strings (e.g. `dictionary['key']` and `punct = ',.;!?'[i]`).
How would an out call to C give you trouble? Does the GIL block on C calls?
&gt;os.scandir() function -- a better and faster directory iterator praise the lord
Cool, always interesting for me to see how people apply Python to real life marketing tasks so I'll definitely give this a read. Thanks
Depending on your OS, you can have multiple versions of Python installed. In my Linux system, I can run command python2.7 to run version 2.x scripts
Spyder maybe the first choice, but something more like-Matlab could be Scilab or Octave.
Ipython notebook is great for developing blocks of code that are independent but can also rely on one another. You can run line by line as well , and take it on the go too. 
Wow! This is a great improvement! Thank you very much! However, While this solves the dask side of the problem, there is still the Elasticsearch side. While I can load data in parallel using dask.delayed, I still have no way to get the results in parallel from Elasticsearch. The best I can do here is use the scan helper: http://elasticsearch-py.readthedocs.io/en/master/helpers.html#scan But there no way to get the results in chunks and so to make them in parallel with dask.delayed. Do you know of any way to get the results in parallel from Elasticsearch (I know that Spark does it, but they have access to the native Java API)?
That's not how it works on Windows. The executables are named `python.exe` without a version.
I used to have Python 2 on my path and I'd just type: C:\Python35\python.exe myscript.py Now I use Anaconda, which supports virtualenvs with multiple Python versions. It's a lot easier.
will work on that :)
All the options are mostly covered, I would like to clarify a few points. + For very basic needs use [ipython](http://ipython.org/) + For a more *Matlab-ish* gui environment, use [spyder](http://pythonhosted.org/spyder/) + If you like the cell-based approach of *Mathematica*, use [jupyter notebook](https://jupyter.org/) + There is also [sage](http://www.sagemath.org/) that integrates many scientific python libraries and feels less of a general purpose language and more like Matlab, Maple etc. According to your needs jupyter notebook will be the best. Is easy to start. Has segmented code sections (cells) for easy debugging and evaluation. Also, since someone mentioned, [PyCharm](http://www.jetbrains.com/pycharm/) is a good IDE for development but not so good for scientific computing purposes.
Doesn't just `py -2` work?
Don't know about Windows 10 bash but if you want to run Python on Linux and have a windows machine why not try Docker?
According to Awesome Python, this is the most actively developed debugging tool - https://python.libhunt.com/categories/306-debugger. Cheers! Awesome job!
After I replace `nameLabel.pack()` with `nameLabel.grid()` it works for me: https://imgur.com/TWnY8oE
To me it appears you are mixing things completely here. You cannot use two packing managers for the same frame, but you can use multiple packing managers in one application. Here is an example of how to use pack on root level and grid on frame level: root = tkinter.Tk() root.title("Survival Game Dev v1.0.3") f = tkinter.Frame(root) f.pack() nameLabel = tkinter.Label(root, text='Survival Game Dev v1.0.3', font=('Rockwell', 32)) nameLabel.pack() pickButton = tkinter.Button(f, text='Harvest Wheat', font='Verdana', command=foo, width=20) pickButton.grid(row=1, padx=6, pady=6, column=1, sticky='W') pickButton = tkinter.Button(f, text='Harvest Furs', font='Verdana', command=foo, width=20) pickButton.grid(row=2, padx=6, pady=6, column=1, sticky='W') pickButton = tkinter.Button(f, text='Harvest Rock', font='Verdana', command=foo, width=20) pickButton.grid(row=3, padx=6, pady=6, column=1, sticky='W') pickButton = tkinter.Button(f, text='Harvest Clay', font='Verdana', command=foo, width=20) pickButton.grid(row=4, padx=6, pady=6, column=1, sticky='W') pickButton = tkinter.Button(f, text='Harvest Ore', font='Verdana', command=foo, width=20) pickButton.grid(row=5, padx=6, pady=6, column=1, sticky='W') root.mainloop()
I don't see why not. Download one of the free VMs MS puts up for web development and give it a test.
Yup, all python resources are in the virtualenv folder.
It doesn't work right now. I don't remember the error message, but there's a bug report on the BashOnWindows github page about it.
this is amazing
Scraping twitter for product sentiment. Scraping stock prices from websites that do not offer an API Scraping kijiji/craigslist to estimate average prices for used products.
You're right. I'll try to remember it next time!
Spent some time reading the documentation of the different alternatives and try to figure how much time you will need to learn the things you'll need for your program. Tkinter is quite easy to learn but it's difficult to find good documentation if you're learning to program (like myself). In my opinion, a good source of information is this series of videos: http://www.youtube.com/playlist?list=PLQVvvaa0QuDclKx-QpC9wntnURXVJqLyk
I have Spyder installed already! I'll give it another try. Thx!
I upgraded
Thanks for the well written summary. That gives me a good overview.
Why can't you use py -2? If you have both python3 and python2 in your path, create a python2.bat next to your python.exe file and put this in it: @echo off python.exe %* Same for the python3 directory (but call it python3.bat obviously). Now you can call python2 or python3 without the py.exe.
Programmers who are actually using graphs; What are you using them for?
couldn't you just rename it to python2.exe?
I'd argue that programmers with MIS backgrounds know how to properly graph data...
Using a single dictionary to store the name data d = {"alex": {"female": [10, 50], "male": [40, 50]}, "alexis": {"female":[50, 50], "male":[0, 0]}} m, f = d.get('alexis').values() You only have to track one most similar name and the comparison is as simple as retrieving the values for 'male' and 'female' subkeys. Pandas is a simple way to read in csv, but if you read in your data one line at a time into the structure I've outlined your code with be alot simpler and run faster. (You won't have duplicate statements for every step for male and female dfs) I would also perform all string manipulations when first reading the files into python.
Fair enough could you symlink a python2.exe to an installation of python.exe (of version 2.7) and then manage it normally from there?
Very true. But my point was more towards the fact that engineers aren't taught properly how to utilize modern programming and visualization tactics. 
I don't get it. Where does `graph.svg` come from? How is it updated in the dashboard?
GraphDash builds a UI from your graphs, but does not create the graphs. If you have a bunch of graphs, like graph.svg in the README, you just add a file containing some metadata, and then the UI will allow you to browse, display and search your graphs. EDIT: tried to clear this up in the doc
thanks for the great suggestion /u/k10_ftw I'm pretty sure there's plenty of space for improvement in my code. I'll update it.
Develop software for market research. But i also chart my teams time management. 
I think the actual code of the CPython interpreter would be a good start : https://github.com/python/cpython
Some engineers are learning!
We developed an application that recommend some actions based on real time video analysis, our users have the final decision so we needed to inform them and the best way was a video with a Picture in Picture graph that can be switched. It is really cool btw.
[Public vs. Default vs. Protected vs. Private](http://stackoverflow.com/a/215505/2714534) By default everything in Python is public. `self._attribute` denotes protected. `self.__attribute` denotes private.
&gt;UPDATE Downvoters, read the god damn sidebar! This subreddit is not for reviewing beginners' code, especially not if it's an image downloader which everyone has done at some point of their "career" ... You sound like a fun coworker.
Not cpython, but a good overview of what cpython is doing: https://m.youtube.com/watch?v=HVUTjQzESeo
Per usual, criticism welcome, though that hasn't stopped denizens of /r/Python before.
Looks great. Good docs keep writing. What did you use to build your site? It looks really clean and good for code documentation.
$150/hr plus equity 
Thanks! Most of my professors in college wouldn't even try to pronounce my last name.
Fetchall returns a list of tuples so I think you have to actually do [some other work](http://stackoverflow.com/questions/16519385/output-pyodbc-cursor-results-as-python-dictionary) to make it a dict. By default it would be accessed like: print(row.FIRSTNAME) or print(row[column_index]) I'm basing this off of experience using PYODBC, which seems to be mostly the same, but in case it isn't [here](http://stackoverflow.com/questions/10455863/making-a-dictionary-list-with-cx-oracle) is cx_oracle specific fetchall dict information.
I used [Pelican](http://blog.getpelican.com/) along with the [bootstrap3 theme](https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3). I wrote up the blog post using a [Jupyter notebook](http://jupyter.org/) and was then able to render it as a blog post with a [Pelican plugin](https://github.com/danielfrg/pelican-ipynb).
You need to register a factory for cx_Oracle. The documentation is probably confusing you because sqlite has a nice sqlite.Row factory which returns something that is dict-ish... cx_Oracle does not.
[Flask](https://flask-socketio.readthedocs.io/en/latest/)
The dbapi is a bit vague I think, only requiring indexes IIRC, everything rlse is optional; depending on db and client implementations, you get cursors working with row['field'], row['FIELD'] or row[index]. You just have to figure out what yours supports and work with it. There might be client-specific options, look in the cx_oracle docs.
Nice! We've built very similar functionality with our Flask + Peewee set up and it has served us well so far.
Flask is the best choice IMHO, but I have also used [Pyramid](http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/firstapp.html#firstapp-chapter) for small apps and it is an option to be considered.
Is python 3 still a thing? I thought it had died out.
&gt; Making an application inherit from one model is powerful. The same is true for views. When you first start a project, the purpose of these classes might seem unclear. https://www.youtube.com/watch?v=o9pEzgHorH0
Please tell me that you're contributing more than an idea. Ideas are dime a dozen. Scratch that; they're worth nothing in the programming world. It's all about implementation and audience. The unfortunate truth is that it will cost all the money you have, and you probably won't get something that works or fits your evolving design, even if you hire someone who has the best intentions. There's little certainty in software development that you'll walk away with anything usable, and even worse, unscrupulous people may try to take advantage of you. Ultimately, ideas are cheap, and you won't be in a good position to evaluate what the programmer is doing or what they've done. You might think you're buying a space shuttle, and it's nothing more than a paper mache miniature. 
http://i.imgur.com/O3mzUwg.gif *Now get off my damn lawn.*
Sounds like you need to do DB stuff, so go with Django. Will save you loads of time compared to flask. 
While that might be right, there are a few problems for this use-case. First is that I don't run a pornsite, so I don't have that data. Second, users may be reluctant to sign up for these sites, rate rarely, and have insufficient data for newer videos. Third, these sites may be unwilling to incur the expense of mining that data on-the-fly for users. As of right now, personalized recommendations are uncommon on porn-tube sites and the search terms tend to be limited. You can search for videos that are over 20 minutes or over 10 minutes directly on the site, but not 15 minutes unless it's amateur at which point 10 minutes is okay. Additionally, my program can be adapted to aggregate multiple sites. Porn may not be a direct analogy for Hollywood movies, either. It consists of a restricted set of subjects and themes, rather than very broad and hard-to-categorize subject matter and style of mainstream movies. I think Pandora is a good example of how if preferences can be decomposed into a finite set of values, the need for collaborative filtering is minimal. They were successful precisely because they moved away from collaborative filtering and into description and categorization.
If it wasn't for a bunch of vendor spun Python variants (Autodesk and SideFx) being Python 2.4(!) We'd have switched at my office. All our tools that don't touch vendor software use 3.x.
I see, thanks.
It's python 3 and was done in 20 minutes. That said, it does what I need it to.
You should still use it. It does more than just check for PEP 8 compliance. It's a system for running various different code quality metrics over your code. It's name comes from pyflakes (which checks for problematic code) and the the pep8 tool, and is also bundled with a McCabe checker which checks for cyclomatic complexity. It's pluggable, so you can write your own checkers that can work with it.
It doesn't. It checks your code for compliance with various standards and metrics, one of which is PEP 8 compliance.
When you give criticism, don't expect people to take it lightly. I take as good as I give.
Any reason to pick one over the other?
The `super` way is cleaner, works better for weird corner cases (multiple inheritance?) and Python 3 allows you to simply do `super().__init__()`, which is pretty cool.
I work in a business where safety is critical, that relies on algorithm implementation to do real-time detection of hazards to human life. The answer is that we produce graphs as output of functional testing. You run the unit tests to check the code, then you run the functional tests to test the performance of the detection algorithm (on hundreds of TB of real world data). You compare the graph for how good the algorithm is at handling certain types of events against previous iterations and against real world data and draw conclusions about the algorithm software implementation. TLDR: Graphs are critical to some software engineers. :)
Yep. For the simple case you've presented, they do exactly the same thing. However, in python 3 you can simply do this: super().__init__() The real fun comes into play when you *may not know* where the method in question comes from! I recommend reading this: https://rhettinger.wordpress.com/2011/05/26/super-considered-super/ for an in-depth exploration of what super is capable of.
&gt; The difference is there is real momentum towarda python 3 now. *looks at fresh update to 2.7* 'momentum'. eh.... 
This would have really helped me when I first started to learn English. 
Problem one: you can't afford it. Any non-trivial project will require months of work, which is tens of thousands of dollars, at least. As the saying goes, if you have to ask, you can't afford it. Problem two: you really can't afford it. Any good programmer will have their choice of projects, and probably already has a good job. What would convince them to work, solo, to implement something you described? The easy answer, of course, is a lot more money. Realistically, you'll be paying $200/hour or more for a contractor, probably for months on end. Unless it's a really simple program, you'd probably be better off making up a pitch deck and getting an angel to fund it.
Is it a named tuple? If so you access it like `result.fieldname`. Or use a dict as a way to map field names to indicies when you access it. Readability counts and I wouldn't just use indices.
Suits like looking at graphs. I make graphs for them.
It wont be overtaking anything utill it is the default distribution shipped with most OS, notably ubuntu and mac. And it has barely started that. Official support ends in 2020, by then i guess comercial use will be about 50/50. A few years later people will finally do the upgrade. Just look at windows XP, it is still a thing...
What libraries does this use? 
Nope. Watch the talk. You don't _start_ a project by defining a base class for everything. It's something you implement later as the requirement for it becomes apparent.
Make sure to have it go down a lot in the beginning, and then have a straight vertical line in the middle, and then have it skyrocket above the graph. They seem to like that sort of stuff.
I've watched it before. You obviously have never worked on a large project using a framework if you think this article's advice is wrong. Starting with base models and views like this allow you to add appwide features without refactoring.
Good point, thanks for trying it out. Added that info.
I'm not concerned about internet points. It kind of sounds like you are. edit: I also know nothing about you. That single comment just sounded all angry and unpleasant over something that wasn't a big deal, I guess.
Bottle is much smaller and quicker than both.
Issue #25961: Disallowed null characters in the type name. https://ideone.com/8drgKT Why was this allowed in the first place?
Yeah, I'm on a 200kloc flask app and it'd be 10x worse maintaining it if we didn't have a base model and base views. I always try to build the least code needed, but that also involves being thoughtful about your patterns and setting yourself up for success.
Not on windows it doesn't. Try `conda install` rather than `pip install`. Also try `anaconda search spacepy` to see if anyone has built it already for Windows. 
Because the `l` argument is evaluated at the time that the method is compiled, not when it is called. So all calls to f that don't pass a list for `l` will use the one list. This is one of Python's Classic Blunders.
When you define f def f(x, l=[]): ... Then the default value for l is a new list. If you call f again, then it will still use the same default list it created the first time. Since you are able to modify the list, that means that any modifications you make during one run of the function will still be there for subsequent function calls. Here's what you are supposed to do: def f(x, l=None): if l is None: l = [] ... Generally speaking, you should not use mutable values for parameter defaults. Why does python reuse the same default value every time you call a function? I don't know. I suspect that it makes it much more efficient for most cases, and dangerous for a few. Here's what the python docs say: &gt; Default parameter values are evaluated from left to right when the function definition is executed. This means that the expression is evaluated once, when the function is defined, and that the same “pre-computed” value is used for each call. &gt; [Function definitions](https://docs.python.org/3.6/reference/compound_stmts.html#function-definitions) *edit fixed comparison. From `not l` to `l is None`
smaller yes.... quicker.... debatable.
Well, I don't have problem with asyncio. The slackclient is just for RTM events, the API full-featured is used Slacker.
Many top-tier institutions only require a single semester of programming (some majors like ChE none) for engineering BS. This obviously leads to a great pool of bright engineers that haven't quite tapped the potential. When 90% of the engineers in your office don't know how to configure any real database, many not even Access, you know it's a chink in the armor of what they could be. 
You don't need the xrange. Permutation takes an integer and permutes the range from 0 to that int.
The code you linked doesn't actually do anything *inside* the emulator - it just runs in the background and injects simulated keypresses into the OS, which happen to be picked up by the emulator since it's the active window. 
And they keep releasing the features they're adding to 3.x on 2.7... really zero reason to transition. 
 l = l or [] This is better.
What have you tried and what were the results? Have you installed Python 3.4 and pywin32 like the instructions say? What happens when you run the script? Looks like it gives you one second between running the script and having to switch to the VBA application before it starts simulating keypresses.
Fixed. Thanks!
I tried one of those but it wouldn't even strap into the acoustic coupler for my modem. What good is it if you can't even dial into your favorite BBS with it?
So that third party libs can use it. 
This is [a FAQ](https://docs.python.org/3/faq/programming.html#why-are-default-values-shared-between-objects).
Where do I run it? Do I just open idle and wite it and then run? Is that all? Like I said, I am a total newb
Total newb to Python, or programming, or computers in general? The steps to run this Python script are: 1. Install Python 3.4 and pywin32 2. Add Python to your system path (http://superuser.com/questions/143119/how-to-add-python-to-the-windows-path) 3. Download the main.py and pi.txt files from that link to a local location (say C:\Users\AtomicEmerson\Downloads) 4. Open a command prompt (found in the Start Menu) 5. Navigate to the directory that contains the script you downloaded by typing `cd C:\Users\AtomicEmerson\Downloads` then pressing enter. 6. Start VBA and have it running in the background with the game loaded 7. Run the Python script by typing `python main.py` and pressing enter. 8. Switch to VBA within one second after pressing enter. After looking at the script I don't think you'll see it do much. The supplied pi.txt file only has like a hundred numbers so it'll press about fifty keys then exit, most of the keys won't even be valid ones. If you could find a much larger calculation of pi and put it in pi.txt then you might see something happen.
This has unexpected behaviour when the list is empty. Checking the argument was `None` is better. my_list = [] f(3, my_list) assert 4 in my_list # AssertionError ...
Check if [this answer](http://stackoverflow.com/questions/5419/python-unicode-and-the-windows-console/32176732#32176732) can help you In your case, because there is a "®" in your list, you get a error when you try to print it out. You can try &gt; print (ids.encode('utf8')) but I don't think you should keep "encode('utf8')" when you are storing "ids" in a variable.
Should there be a FAQ page on the python subreddit Wiki to answer this kind of questions? I can see at least two questions asked regularly here: 1. What library should I use to make a GUI app in Python? 2. What framework should I use to make a Web app in Python? That said, to answer your question, OP, you can have a look at: - Bottle.py (might suit your needs, since it's only one Python file, so you can integrate it in your own project easily) - Flask - Django (might be too complex for what you want to achieve)
no. the features are the business that makes millions. there's no python project in the world that needs 200k lines of code. just doesn't exist.
&gt; print (ids.encode('utf8')) I got this error: AttributeError: 'list' object has no attribute 'encode'
ANOTHER stupd question: my computer has a problem with the "win32api" on line 3, can I get rid of it, what do I do?
The big two are - **Linting:** highlights syntax errors, undefined variables, etc... - **Autocompletion:** suggests variables and attributes of an object. For example if you type `list.` it will suggest append, clear , copy, etc...
I'll be switching when Anaconda gets PySide in python 3.
`aiohttp` can do RTM events (WebSocket) in an async way. `slackclient` does not.
Somehow I knew what this video was going to be before I clicked on it. I love that talk, though I my experience not everyone buys into the philosophy, especially if python isn't their primary language.
Wants people to transition to 3 but keeps supporting 2. PSF please make up your mind. I'm taking bets on a GIL removal patch arriving and being vetoed because it doesn't work with Python 2.
You're right. I know many people who still use fortran 77. I just don't want to keep coding in an obsolete language, e.g. Python 2 / f77. 
Tasker in the android store is probably worth a look at.
[removed]
Hey, it's a legit question. Depends on the country how they split the engineering discipline. I work with Electrical Engineers and many Mech guys that are more robotics focused. My experience is a good EE or robotics guys is a better programmer than a comp sci grad.
considering how much fortran77 gets used in some fairly critical systems, i dunno about calling it 'obsolete'. 'ancient', maybe. 'decrepit', sure. 'fucking OLD' oh yes. 
This is correct. The tricky part about prefix replacement is that sometimes the prefix you replace needs to be escaped (e.g. in Python code), and sometimes it does not. A simpler solution was just to replace backslashes with forward slashes. Windows is tolerant of both (and even mixed): https://github.com/conda/conda/pull/2630
Yep.
Fortran 2008 contains virtually all of -77. Also, I'm talking about new code. No need to write new code in f77.
Now I get it. But since third party libs can use the new operator, it cannot have a default implementation in the std lib, right? So I guess that when someone said it does matrix multiplication, that only happens in numpy, right? What does it do in the std lib? Cheers!
Ubuntu is unaffected by these issues, because *nix uses forward slashes, which do not need to be escaped. Windows uses backslashes, which are themselves escape characters.
Cool that sounds really great. I've been to a quick seminar on game theory and the assistant professor used the example of criminal suspects not ratting out on each other or something like that. Sorry for the late response but I would love to learn and help with it. Thanks a lot!
Does bottle have CSRF protection built in? Last time I looked at flask it was a mess. 
I had an issue with `np.random.permutation` being horrifically slow. In my case, I had a potentially very large vector (~1e5) and I only needed a very small subset, say `N=~100` elements but in a random order. But then I did some research on this and found that `random.sample` is much faster (from the standard `random` library). Below is from the documentation: &gt; To choose a sample in a range of integers, use xrange as an argument. This is especially fast and space efficient for sampling from a large population: sample(xrange(10000000), 60) See: %timeit np.random.permutation(xrange(int(1e5)))[:100] 100 loops, best of 3: 16 ms per loop %timeit random.sample(xrange(int(1e5)),100) 10000 loops, best of 3: 41.8 µs per loop That is a pretty darn dramatic speed up! I hope this may help
Sure thing some FAQ would be nice, you can elaborate one :). Flask and bottle also been mentioned, I'll take a look. Django seems a little to big for this task. Thanks for your replay :). 
I think that error is from having too many open file handles. Check [this](http://stackoverflow.com/questions/25104618/pickling-a-python-image-object) out. I think you'll either need to close the file handle after each file is accessed, or change the setting for the amount of open files allowed on your system. https://easyengine.io/tutorials/linux/increase-open-files-limit/
I'm going to throw in another vote for flask. It's a joy to work with IMO
Atom is a pig with resources and is slow. Sublime is lighter and somewhat faster. "Seems", indeed. It's opposite day!
Afaik atom and sublime don't really understand your code so features like that are a crapshoot. PyCharm can be a bit frustrating performance wise sometimes I agree but the advantages far outweigh the little nuisance in my opinion. I make far fewer mistakes with PyCharm, and the same is true for people I work with :P
KDevelop is pretty fine.
I'd suggest PyDev (http://pydev.org) -- if you follow the suggestion from http://www.pydev.org/download.html and use a bare Eclipse "Platform Runtime Binary" + PyDev + EGit or use LiClipse (which has PyDev preinstalled), it should be speedy (the deal with Eclipse is that it can really become bloated if you install too many things, but keeping it to a minimum should make for a good performance experience). As a note, the go-to-definition on PyDev is Ctrl+Left Click or F3 with the keyboard (make sure you also read http://pydev.blogspot.com.br/2015/03/navigating-through-your-code-when-in.html and http://pydev.blogspot.com.br/2014/03/mastering-writing-code-on-pydev.html to get most out of PyDev).
Adjust the JVM settings to give more heap to PyCharm: https://www.jetbrains.com/help/pycharm/2016.1/tuning-pycharm.html If that doesn't work, then consider a text editor with language support. Unfortunately if you are having performance issues with PyCharm then PyDev on Eclipse may be worse.
Lol. If you translate it it does sound a lot nicer! :)
thank you very much !
Try Visual Studio Code with the [Python plugin](https://marketplace.visualstudio.com/items?itemName=donjayamanne.python), the editor has "go to definition" and the plugin has a bunch of other stuff. Atom is heavy as shit for what it offers and I never really used Sublime. PTVS is pretty good too, although not needing the features made me stop using that and PyCharm. That said, I don't know if you used PyCharm with an ssd, works pretty well for me.
I like Sublime. Really quick and lightweight, and you can cmd+shift+B for quick build testing. There's also a lot of packages that can make it at least sub-par with pycharm's capabilities without adding too much processing like Atom or brackets. If I was building a heavy handed project like a GUI client with multi threading i'd probably use pycharm. But for quick scripting, st works fine for me.
Stream processing, or store the images &amp; pixle data in a sqlitedb. I have stored in the hundred thousands range of images in a single sqlite db and it preforms well. 
Stop leaving behind a trail of unused file handles. Open the image, read it, and close it. There is zero reason to have more than a single file handle open to accomplish what you're trying to do.
Vim
Seconding this. I had to increase the heap size when I upgraded to the latest version. It's usable again!
I find Jetbrains IDEs can really suffer performance-wise if you have a bad plugin installed. I'd recommend going through the plugin list and turning off everything that isn't critical and see if that helps. My IDE was choking and it turned out to be a markdown plugin I installed that was the problem for some reason.
If the cursor in Sublime moved in virtual space, it'd be my second choice in editors after vim. I just can't stand the jumpy cursor... :) 
I would probably take about as much work as you put into mocking the text here.
Hello TylerOnTech, author of the module here. Beautiful Soup is fantastic. I wouldn't say it is better. xmldataset is a different approach to dealing with XML with simplicity in mind. It may tick the boxes in terms of parsing requirements, it may not ( in which case other tools like the one that you mentioned may be more appropriate ). I wrote this as I had a need to parse a variety of XML structures from Storage arrays, EMC, NetApp, Hitachi etc, generally MB's to GB's in size. By maintaining consistency on the output format ( the dataset ) I was able to create parsing profiles for the platforms of interest in with modular code for handling the dataset format. If a vendor adds new functionality; I update the xmldataset profile to achieve the desired outcome without having to spend time concentrating on the XML and how to parse it. All of the features included were issues that I encountered whilst trying to parse large data sets from these platforms.
There's another module in my GitHub repo, a HDS compliance tool, there are examples of profiles within the code for dealing with output from Hitachi Command Suite. Within their API there's two approaches to retrieving the same information, via a command line tool and direct via a http API call. There's slight variance between the two approaches in the output for some of the requests, profiles were made for each type to standardise the output for consistency.
There was one package found.
From you to me: http://s2.quickmeme.com/img/26/263bbec66d658ba0d962dc655b429e9c14fe15afcd9e4598db25ef316d34b0f0.jpg
Also I installed it with an .exe file from this website https://pypi.python.org/pypi/SpacePy any suggestions as to why that in itself didn't work? 
&gt; You obviously have never worked on a large project using a framework if you think this article's advice is wrong. I do that as my day job. The article's advice is _definitely_ wrong. You don't start out a project assuming all these complicated things. You plan for them, or they become apparent. Not every project needs them.
Thanks for points that! Actually the lib has a lot of things, however I don't have time yet to write the proper docs &amp; readme.md : ( How you help me generate the docs with sphinxs? All the modules &amp; functions are documented.
http://www.sphinx-doc.org/en/stable/man/sphinx-apidoc.html
I am an administrative coordinator at a household name tech company. Every day I'm automatically sent an Excel doc with employee records. This doc needs to be converted to .txt and the columns need to be renamed and a column needs to be added. Using pandas, tkinter, and time I run the script and an input window pops up followed by a save location. It's about 30 lines of code and took me half a day to complete and saves me about 30 seconds a day, but it feels good to have written some useful code. Next step is to automate the task as soon as the automated email with attachment is sent to my gmail. 
That's the point. When you're building a large app rather than a series of microservices, having some common base for everything that's extensible is better to have at the start than tacking it on later. Inheriting your model from app.BaseModel rather than orm.BaseModel is a good rule always because if you don't need any special functionality you can start with 2 lines and the moment you need the extra functionality you can just edit it in rather than having to add the base after the fact and then edit every model in the system.
The build package in Atom gives you cmd+shift+b. Also [hydrogen](https://atom.io/packages/hydrogen) is pretty cool for running code in-place.
Ok I now have the spacepy package! However, I am encountering another problem. I need to use the cdf reader, pycdf, that is in spacepy. However when I try to do from spacepy import pycdf I get this error: Exception: Cannot find CDF C library. Try os.putenv("CDF_LIB", library_directory) before import. Even after these commands I still encounter this error: import os os.putenv("CDF_LIB", "&lt;the directory the library is in&gt;") from spacepy import pycdf
It is a bit difficult to reply, because it is not totally clear what you want. Since it seems to be a high leave problem, I wouldn't talk about actual code. Try to explain your scenario, what is your input, what does your program do, how would you use the outputted files? You say you wanna use this code in your various projects, but what would your program even do then, besides outputting files?
I'm going to lie and blame my being on mobile!
TIL kdevelop supports python. Thx! 
WROOOOOONNNNNNNNNNNNNNNNNGGGGGGGGGGGGGGGGG O shit! Someone just rang the Wrong Gong! Was it you!? Inheriting from a base class that does nothing is EXACTLY what the talk is warning against. It's redundant and confusing. EVERY person who comes to the project must now _waste_ time going "oh what does `BaseModel` do? Oh. Nothing. Why is that there?" Consider, later on, you realise you need a base class? Well it's a REALLY simple regex to implement it, and now when someone looks at what `BaseModel` does, they're not wasting time.
Thanks for the help, I no longer need assistance. A simple restart fixed the last issue I was having.
Agreed. Have an upvote. Been using Sublime in one form or another for years and have no need for anything else. Code in Sublime, interact in terminal.
&gt; sqlitedb Or something even better suited, like HDF5... but seriously, OP has not given a convincing use case for why he can't just stream the files into the model using regular file io as he is training the neural network beyond "I am opposed to that" (i.e. taking advantage of the regular paging mechanisms built into every OS out there). 
The talk can warn against all it wants and still be bad advice. Any non-trivial app is going to generally need some shared functionality on every view/model in the system, and any decent editor lets you jump to a definition with some keyboard invocation. Metrics, logging, and change logs are the most common, but I've seen other extensions. If it's too much work for someone to read that base class then they likely aren't the type of person you want building production code anyway.
Spacemacs: a life changing ide
Because a lot of us don't like to "learn" to use an editor/ide. While vim can be great it's definitely not intuitive to most when first opening it.
&gt; You mentioned the middle click 'GoToDefinition' feature, that is comma+g for me. Would you mind sharing your setup?
I use primarily Pycharm, and Sublime Text for everything else. Been using Sublime Text for LUA editing for Stellaris mods.
I got a bonus at work a couple of years ago and bought Komodo with upgrades, it's my daily dev tool of choice. A few guys I work with use PyCharm and swear by it. I used to use Pytools for VS, but it requires VS.
Also, speedbar
You might take a look at WingIDE. 
Thanks for the response! I actually work with similar types of data sets, with similar size. I'm currently using BS4 and I have a solution that works pretty well, but we'll be dealing with various sources in the future. I may run some benchmarks between the two if I can find the time. It's an intriguing module, thanks for sharing!
jedi-vim can do that, for me that's mapped to comma+d
Suggesting a beginner builds their own relatively complicated product instead of using free off-the-shelf CRM? Username fits ;-)
PyScripter has been awesome to me
Thanks for the feedback 😀👍 please keep me posted on your progress and also let me know about any enhancements that you think of. Also, pull requests welcome.
The module is using cElementTree and ElementTree, streaming mode so from a memory perspective, it's the storing of the datasets in memory with which you need to keep an eye on. I'm generally lucky on the systems that I use in that most are blessed on the ram front, however, I have been caught out on this in the past when working with larger XML documents in other languages where the entire converted structure is held in memory. With this in mind, I've added a dispatch option which is detailed in the quickstart, it allows you to dispatch X records to a target method during processing, therefore allowing you to clean up as you go.
If you want to get into vim, I highly recommend the python-mode plugin. Installing that will help you get off the ground with a good vim setup. https://github.com/klen/python-mode Also, what helped me really learn vim was disabling my arrow keys so I really had to learn how to navigate it. Check this out http://vimcasts.org/blog/2013/02/habit-breaking-habit-making/
despite how much i love vim, i feel using pycharm + ideavim plugin offers much more. i was vim-only developer for long time, but once i decided to try out pycharm, i cant find anything better suited to my needs. and of course ideavim is always turned on!
Are you using a Python 3 fork of Scapy? The official Scapy only supports Python 2.x for now afaik.
Thanks! I'm open for new contributors!
Yes.
you're an amazing person if you open software for the first time and just instinctively know how to use it without any direction. This is the strangest comment i've seen against vim. it takes as much or less effort to learn vim than it does with any other IDE. Vim is not complicated, people just see it for the first time, get intimidated by it, and leave, instead of just checking out the basics in vimtutor. "it's different than im used to, so f--k it it's too hard for me" seems like a bad reasoning point.
yep, I can definitely see how many people prefer it :) I don't, its far too slow for my liking, something that you just don't have to worry about in Vim.
Sidebar and /r/learnpython, it's a popular question.
Can confirm this. It feels very lightweight and has all the features I want/need for Python developing.
The difference is that with and GUI IDE you have visual clues and interactions that most people are familiar with such as right clicking to get more option that if named well are obvious what they do. With vim you have to go through a tutorial to even know the basics. Then you've got to set it up to behave nicely and have all the nice IDE features you're used to for whatever language you're dealing with. It's a lot for someone who just wants to get to coding. Don't get me wrong, I love vim and use it as my main text editor, I'm just explaining why someone wouldn't want to learn vim.
Just spend a few days of playing Rogue, movement keys aren't weird at all. ...or get an [ADM 3a terminal](https://en.wikipedia.org/wiki/ADM-3A#/media/File:KB_Terminal_ADM3A.svg).
So submit a pull request with that feature implemented? :\^)
That's interesting, but he didn't write a programming language, he wrote an interpreter for a programming language, I don't want to diminish Woz's efforts but that's much easier than writing a programming language. 
I have watched the first couple of episodes and plan to catch up eventually (they are long ;)) Keep up the good work. As a novice I am enjoying them quite a lot.
If I understand the behavior you want, [this should do the trick.](http://pastebin.com/VbzVNk4E) ^(2.7.8 btw)
Thanks! This is one of those instances where the more I thought about it the more I was suspecting to use a class but I rarely see it up front.
I have one (three, but only one that fully works). Want to bring that into work and actually code on it for a day. It'll be tough though, silly things like backspace and tabs are not standard keys!
I don't think you'll find a foolproof way to do this due to the dynamic nature of Python. If you create a `__setattr__` method then what's stopping a student from monkey patching that method itself? Example: def my_set_attr(self, key, value): print('Overridden __setattr__!') library = Library() Library.__setattr__ = my_set_attr library.myValue = 1 Interested to see if anyone else can show a way to do this.
I use winpython and I love it 
by default, `gd` in vim means goto definition. i use that all the time in ideavim in pycharm.
Not to be rude but this seems like it'd be best solved by examining their code fully The solution I'd pick, (and was picked by my lecturers) was to have a different module for testing, compared to what was given to students, so they don't know how to break it but yeah python will always be allowed to be tricky, introspection is one of its main things
do you have more sleak ways to solving such problem? am a beginner and i dont mind knowing other ways i can solve these.
Thanks. You're awesome. Still, not sure if I am convinced that switching back and forth really is efficient. But changing from escape to tab might be better since I can use my pinky without lifting my hands, whereas escape is far enough that I need to lift my hands away. I think using "w" or "/" are fine, but doesn't solve the problem that I had, which is switching back and forth is a bit annoying. It might be a habit thing? I will pm you more, once I try out what you suggested! Thanks again!
Tab typically does 2||4 spaces for me, depending on the filetype, which is why I chose caps lock key instead :) can toss you my .vimrc if you want it, just pm me.
I use Jupyter Notebooks as my IDE.
Using hjkl is great when you're moving around and don't want to move your hands very far. However, if you have arrow keys, go ahead and use them for short jaunts. Use your delete key and backspace as well (while in insert mode). Of course, sometimes if you're in a limited terminal (like something embedded in another application), doing something over serial, or otherwise limited, you'll find that arrow keys do not work and you'll have to go back to hjkl. Also, like /u/six0h mentions below, using "/" to search comes in really handy. If I was editing that last sentence, I might insert to put `/u/` in front of six0h, then escape, and type `/ngs` so I can correct "usings" to "using". Basically, I do my edit, hit escape, then look for the next target and type `/whatever` to reach it. I actually find this faster than holding down the right arrow for 5-10 seconds. 
&gt; it takes as much or less effort to learn vim than it does with any other IDE. It takes a week of practice just to reach editing-speed parity with any normal text editor.
I also found PyCharm a bit sluggish on my old MacBook; however, on my machines with SSDs it works just fine. Anyway, although I have it installed on my machines, I use Atom (with plugins) 95% of the time. Have to say that I am mostly doing machine learning and "data science" work, besides developing and contributing to smaller open-source projects; for this, Atom + Plugins is just fine -- PyCharm has a too many bells and whistles for my taste.
Its just a pretty hard thing to solve I guess one could... well, have your standard `import fakecomputer`, the module given to students just acting as it would (but with all tests executable from the module's code, instead of otherwise), the private version could have a client/server split? run the student's code in a sandboxed python, which communicates with the server, and since all the tests are local to the module, instead of to the student's code, or the execution of the student's file, all tests could be done without interference from the student's code? (as then any trickery won't cause a change on the server, and as a result, it would cause a test fail) - - - oh also &gt; However, I still want the object itself to change its own attributes through valid methods thats something like `Object.__setattr__(protected_library_instance, some_value)` to get past that, so you can make an object kinda immutable to all but itself, unless a student knows this trick &gt; I also thought about wrapping the attributes in an immutable class Along those lines, I believe C modules have more fine-grained control over who does what and when, that might be worth considering that would be a bit overkill, other options I guess would be to static analysis approach, or turning on tracing (I can't remember how one does that though, but it gives decent information as to what is happening as the program runs, as to whether that information can be made useful, I don't know) There was also some efforts to implement memory guards into python as a hacky project, but I can't remember much about that
This project looks interesting but it will probably drop into obscurity until someone can provide a good reason why we should use it.
+1 for Keras. The community and documentation are top notch. As for lasagne, we ran into the problem that it wants a binary classifier (so 2 labels - on/off) for a one label output. Shot in the dark without any other info, but that stumped us for a while.
I use notepad++ for everything. It's light, it's fast, it's pretty, and it works.
In addition to the official developer's documention [1], you might want to start here: http://thierry-godin.developpez.com/openerp/tutorial-module-creation-pos-modification-english-version/ [1] https://www.odoo.com/documentation/
As far as counting the total number of vowels in a given string, you could do it rather compactly with list comprehension: def count_vowels(string): return len( [x for x in string if x in ('a', 'e', 'i', 'o', 'u') ] ) It's fairly easy to extend this to consonants. Edit: In fact, it'd be better to replace the tuple with just 'aeiou'.
I would do something like vowels = 'aeiou' num_vowels = len([c for c in input_string if c.lower() not in vowels]) num_not_vowels = len(input_string) - num_vowels That uses something called a list comprehension. They're one of my favorite features of Python. I can explain it in more detail if you'd like. Using lower() also catches uppercase vowels. There might be a typo there. I'm on my phone.
Well because I'm an ass to myself and I like to ensure future me hates past me, here's my single line solution using a list comprehension: print(len([c for c in input("Enter string here: ") if c.lower() in ['a', 'e', 'i', 'o', 'u']]))
Really yes. I used the more biggest black magic powers whose I know. I tried simplify earlier, but some pieces of code is really obscure yet. The first version was... WOOOOW! But I tried wrote documentation too to keep easy for others and me. After refactoring, about in v0.4 version, all the black magic was be concentrated in the file decorating.Decorator (the base of all delicious features plus the decorating.base (abstract base class). `Decorator` Is very useful base class to write new decorators as classes; you need just define `self.start` and `self.stop` methods, at which wraps the functions decorated. If you have any doubt, please, create a issue and I'll gladly answer.
You could do something silly and use a regex + len: import re print(len(re.sub(r'[^aeiou]', '', in_str))) All that does is replace all non-matching characters from the character class with nothing. Something like "my input string" becomes "iui", so your total vowels is 3.
Yeah I'll see what's up tomorrow, I just can't figure it out for the life of me lol. I wish Python had an actual ssh library that came with the download. Would make life a lot easier
I'd do: `sum(input_string.count(v) for v in 'aeiou')`
From the Readme examples it is not clear what is the point. The import graph is shown, but only as points. Is there any more data, like names of imports?
How about a generator instead? ` def count_vowels(string): return sum(1 for x in string if x in 'aeiou') `
Sublime + anaconda plug in for the win. Pretty sure anaconda is only compatible with sublime 3 though.
should be python 3 compatible as well! let me know if something doesn't work and we'll get it sorted out!
Agreed. vim is the answer. 
One possibility that might be good enough for you: [follow PEP 8](https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance) and give all your sensitive attributes names that start with double underscores. When Python sees these attribute lookups, it translates the name to `_CLASSNAME__attrname` on the fly. Subclasses would have to do some work to figure out what the real attributes are, especially if you obscure your class' real name by defining it as something you don't tell the students, the binding the public name to the real class as well. At that point, they would have to introspect either the superclass hierarchy or their own `dir()` to find the real attribute names, and hopefully that would be easy enough to catch. Meanwhile, it requires no special code on your part. If that's not good enough: start with your `__setattr__` idea. In that method, use `inspect.stack()` to look at the stack, and ensure that the call is coming from the file defining your class, and not the student's code. If you want to prevent monkeypatching like BinaryRockStar points out, you could increment some counter every time a legitimate call comes in, and then test that the counter is within an expected range after each test. This still isn't foolproof, but I doubt a foolproof solution is possible.
I do this a lot to interesting projects that come up. Mostly I fix Russian and French accents though. I understand them better so it's easier to be confident about the fixes. Done some Chinese and Japanese fixes too, but that involves more guessing.
Pretty sure that's a small subset of what PyCharm does. Just as an example: def foo(x): print(x.foo) class X: def __init__(self): self.bar = 1 foo(X()) # &lt;- warning, expected an object that has a member 'foo' That's some pretty impressive stuff!
I actually did that when I was in school and learning vi (not vim) for the first time. Unfortunately few people learn *any* editor. Most emacs users don't know it, and most vim people don't know it well. Kinda sad and difficult to watch, but such is life. 
Same problem. Saw this in /r/vim the other day and find it much more convenient than the official Esc alternatives of Ctrl-c or Ctrl-[ :inoremap jj &lt;Esc&gt; or if you want to put in ~/.vimrc inoremap jj &lt;Esc&gt; So while in "i"nput mode you press keys jj very fast it takes you back to normal mode. You don't normally need to type two j's in a row but if you do you just have to type them slowly. 
Ok yeah, that's pretty cool. I will admit I've only ever developed using Sublime Text, so not privy on what the full capabilities of PyCharm are.
As an old guy, it warms my heart to see people still feuding about vi(m) and emacs.
My company mostly uses Pydev in Eclipse for our 150,000-line Python nuclear reactor design framework. It has zillions of modules. Jumping around by ctrl-clicking on things between all these files is a breeze. It's really snappy. We often have 10 people all running individual instances on this big VM and it never slows down. Even runs Pylint on every save and shows the results in line. We love it! One nerd uses vim but the rest of us are pretty productive with Pydev. Edit: and the Pydev debugger is a life-saver. Can't live without it. We just load up unit tests and launch debugging from those and it zeros in on bugs in no time. Really slick. 
&gt; With SublimeCodeIntel you get that functionality. ... but now you dont know .. make up your mind
Traitlets from ipython
&gt; I don't really want to get into emacs/vim OP wrote no vim, let's suggest vim!
Atom + [autocomplete-python](https://atom.io/packages/autocomplete-python) beg to differ :)
Yea... you should give PyCharm another shot. It really DOES find scary things/bugs in your existing code bases.
Team emacs wtf FTFY
One does not simply hover on a touch device
Because my work relies on some legacy scientific codes in Fortran and C++ (SWIG), which I wasn't able to compile on Windows. SWIG throws an error and it seems quite a bit of work to modify the code and just doesn't worth the effort.
Are there any python plugins worth installing?
http://www.xbeat.net/vbspeed/i_BankersRounding.htm
from https://docs.python.org/3/library/functions.html#round &gt;if two multiples are equally close, rounding is done toward the even choice But for example round(12.9) returns 13
Documentation for [round](https://docs.python.org/2/library/functions.html#round) indicates that the issue has to do with [how python treats floating point arithmetic](https://docs.python.org/2/tutorial/floatingpoint.html#tut-fp-issues). TL;DRTFM :) edit: as /u/_electricmonk_ mentioned, Python 3.0 uses [round half to even](https://en.wikipedia.org/wiki/Rounding#Round_half_to_even) which is specified in the [IEEE 754 standard](https://en.wikipedia.org/wiki/IEEE_floating_point#Rounding_rules). There's a relevant Stack Overflow with a better explanation [here](http://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior)
For the work I do we often do the same. We often take the average of two numbers like 114 and 115, that would result in you always rounding up, when the result ends in .5. Which would introduce a systematic error. This way is better for that.
you already knew this? wow. you are smart!
It's called "wiggle room". There's probably some language somewhere that changes the rounding mode, but all major ones I'm aware of have it set to the IEEE default.
I dunno man, I tried every other editor and always come back to PyCharm. I second all the recommendations here - try uninstalling all your plugins and increasing Heap Size. If you want lightweight, ST is the best, but it doesn't hold a candle to PyCharm when it comes to understanding code or automatically reformatting it etc.
Personally, I'd use [marshmallow](https://marshmallow.readthedocs.io/en/latest/) to do it. Basically define your json schema from the database schema and then you can just call: `MyTableSchema().dump(select_return, many=True)` and it's all just defined on a top level class rather than nested in a function that always assumes a list. Alternatively, you can make this super generic and never need to manually think about it (from [so](http://stackoverflow.com/a/1960546/1584762)): def row2dict(row): d = {} for column in row.__table__.columns: d[column.name] = getattr(row, column.name) return d
ASTM E 29's rounding method is the same way. Sometimes called the five even rounding rule. 
If you want to be more precise , you can try using Decimal type with .quantize() method - you can control how the rounding will behave there. &gt;&gt; Decimal('15.5').quantize(Decimal('1.'), rounding='ROUND_DOWN') Decimal('15') &gt;&gt;&gt; Decimal('15.5').quantize(Decimal('1.'), rounding='ROUND_UP') Decimal('16') 
This is an engineering standard.
&gt; Spacemacs I read this as "SpaceMacs" and thought it was Apple specific :)
The download page for python includes source distributions of older versions. You can always download those and build it for yourself.
OK, thank you!
But... it rounds up to all...
Ctrl+Click (or F3) goes to the definition of a token in PyDev (i.e.: if you have a 'MyClass' name anywhere, Ctrl+Left Mouse Clicking the name will get you to the "class MyClass(object)" definition.
It should be rolled into Xonsh if you ask me.
You said Atom? Have a look here please: - [Autoindent not working properly (in Python)](https://github.com/atom/atom/issues/6655) - [Auto indent on line continuation with list/tuple](https://github.com/atom/language-python/issues/22)
Is there a reason why you are not using verilog or similar hdls instead?
Yes. When you build the project, `make altinstall` will to all the install step expect make a symlink of `python` to the version you just built. You can also change the install directory when you first configure the project.
You can build anything you have dependencies for. You can install it using make altinstall then you can use it by typing "python2.7" where "python" will still refer to your distribution's python version.
Ok, this is your experience. Mine is this: I am using SSD and PyCharm 4 took almost two minutes from clicking the icon to it becoming usable (mean I could actually click and type). Fairly large code base but I don't think that's relevant as long as PyCharm does not decide to randomly reindex everything (another two minutes). Can't test with current version as my license only extends up to 4.x.
Java doesn't do that either. In fact I've never even heard of this before this thread and I've used rounding in like a dozen languages. Seems like an A+ bug trap to me. But obviously you'll get downvoted for mentioning Javascript. r/Python is very tolerant that way.
Super strange! And yea, I do understand if you decided to toss it in that case.
Ubuntu still provides compatibility packages with 2.7. See http://packages.ubuntu.com/xenial/python2.7. These can be installed side-by-side with python 3.
And I would be happy to know what you think after you tried it!
Yep, this is standrd for floating point to the IEEE standard. That said, it has always surprised me that Python chose to do it this way, as I see this question several times a year.
Why do you think you need mod_python? There are numerous ways of writing a web app in Python these days, and none of them involve running a Python interpreter in the same process as the web server. 
It seems this behaviour is OS or python version dependent? Python 2.7.10 |Anaconda 2.3.0 (32-bit)| (default, May 28 2015, 17:02:00) [MSC v.1500 32 bit (Intel)] on win32 Type "help", "copyright", "credits" or "license" for more information. Anaconda is brought to you by Continuum Analytics. Please check out: http://continuum.io/thanks and https://binstar.org &gt;&gt;&gt; round(14.5) 15.0 &gt;&gt;&gt; round(13.5) 14.0 
 15.5.round ...Do people like this syntax? It looks awful to me, but Ruby seems to be pretty popular
Which part? Because you can write very similarly in Python. &gt;&gt;&gt; 15.5.is_integer() False &gt;&gt;&gt; 16.0.is_integer() True 
And physicists
mod_wsgi has replaced it. However I prefer to have my webserver to just reverse proxy to a dedicated wsgi server like gunicorn. 
It's not very often that you actually need to call methods on literal integers or floating points. When it's done on variables, I feel it reads quite nicely. f = 15.5 puts f.round # =&gt; 16
Yes. Anaconda is a good start.
I'm using [pythonz](https://github.com/saghul/pythonz), I should probably switch to pyenv. 
Yeah, on the other hand I've heard of projects where files are large enough for Atom to become unbearably slow. I think the lesson learned is: YMMV.
Python is just server-side JavaScript...
Python is strongly typed, so that's a big difference. I think there has been some confusion, so: https://wiki.python.org/moin/Why%20is%20Python%20a%20dynamic%20language%20and%20also%20a%20strongly%20typed%20language
Wouldn't the opposite of all be none?
You mean it takes FOREVER to start up and then only SOME things work fine? Now that's what I've always wanted!
If you want a full-featured IDE and your computer is struggling with pycharm, you're probably shit out of luck unless you have a bad plugin installed or something. I sometimes have 3-4 copies of pycharm open without any issues, for days or weeks at a time on a newish macbook pro.
Huh, my bad for shaming Ruby on syntax.
That makes sense based on the quote you just provided. 12.4 returnes 12 because it's closer to 12 12.9 returns 13 because it's closer to 13 12.5 returns 12 because if two multiples are equally close, rounding is done toward the even choice
Thank you, that worked. Plus i made an error in the for loop that duplicated the files while appending them to the list, so when I tried moving, it moved the file and the duplicates thus causing an error
My team just did an informal poll and 8 used vim 2 used emacs and 2 used Pycharm.
Instead of dealing with attributes, have you considered using second, hidden test suite for doing grading? That way, if a student hard codes the result of their homework assignment, their implementation would work for their expected inputs; but fail on the actual hidden verification tests? This seems like a much simpler than dealing with object internals. Edit: I fudged a word.
fucking terrible advice from the idiots here. just apt-get install python2.7
Don't type `python`. Run the `conda` command directly from the command line/prompt. 
This is not a Python decision, this is a numerical decision. It is not just Python, nor is it even just a computer or IEEE thing. It's widespread, and it is how I was taught to round "x.5" numbers in grade school. The logic, whether intuitive or not, is to try to balance out the accumulation errors that would be caused by rounding every x.5 number in only the same direction. Given how common half-integer numbers are in practical real life situations, it's a reasonable and helpful compromise.
As soon as u open it u can start typing tho. In pycharm you have to open a file or start a new file, so its a small tradeoff. I feel like hitting 'I' is easier than dealing with the 'open project' dialog. Are we grasping at straws here?
hm, yeah, these are valid arguments
You could use a [`collections.Counter`](https://docs.python.org/3.3/library/collections.html#collections.Counter). from collections import Counter vowels = 'aeiouy' a_string = 'hello vowels!' counted_letters = Counter(a_string) vowel_count = sum(counted_letters[v] for v in vowels) print(vowel_count) 
I wouldn't dare to say it's a wrong one, but in Python the clearest solution usually wins. I have never before seen this rounding scheme, so it makes me wonder.
And people with an even number of letters in their name.
It changed in python3
I second this. I use ST3 for pretty much everything from Web dev to Python. It's absolutely fantastic, especially when you add on the Anaconda package to make it resemble a Py IDE. It's highly customizable because everything is pretty much tied in through Python and set with JSON files, which is another huge bonus. I'm going to try testing out GUI builds later. I've got Visual Studio with the Python Tools as my backup for larger projects or for if I start diving into C/C++ and CUDA. If all else fails, we always have IDLE ;)
Ok so as it turns out, all of my strings have a space after them before any digits. So I was able to use partition(' ') on my strings and then select the first item in that list. I guess I got lucky in this case.
And good programmers
My hypothesis is that looking at the graph structure of a project *might* help me identify how the high level organization of projects I like differs from that of project I feel are poorly designed. So far essentially all I've noticed is that projects I respect tend to be substantially smaller / compact, buy I'm hoping to eventually notice some other trends. Let me know what you find as you experiment.
Yup, it's hidden at the bottom of the README.
use a regex replace import re s = 'R_KneePV_CtrlMocap 17 2' print re.sub('[\d\s]+$', '', s)
I've seen Ruby syntax that I didn't like, but I can't complain on Ruby in this case :)
ITT: I learned the only correct way to round in grade school. This is not that way, and therefore wrong. OTOH, it is a surprising difference between 2 and 3. IMO, 3 got it right.
You might also want to post this at https://www.reddit.com/r/cscareerquestions/
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
No, not at all. Not if you're a logician anyway. The converse of "all X is Y" is "some X is not Y" and the converse of "no X is Y" is "some X is Y". 
[Image](http://imgs.xkcd.com/comics/ten_thousand.png) [Mobile](https://m.xkcd.com/1053/) **Title:** Ten Thousand **Title-text:** Saying 'what kind of an idiot doesn't know about the Yellowstone supervolcano' is so much more boring than telling someone about the Yellowstone supervolcano for the first time\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1053#Explanation) **Stats:** This comic has been referenced 7345 times, representing 6.3054% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d4u16fr)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
"not all" is not "none".
Hi there, this post has been removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
Cheers! You've helped me understand this completely. Thanks again for the help.
I can't run your code because the formatting is all messed up, but it looks like if you guess the correct answer on the first try your program never enters the while loop because it only enters the loop if the answer doesn't match.
If there is a worst way to do anything at all, Javascript will do it.
I've always been told that the result of solving a problem with regex is generally two problems… So I thing I like /u/idlecore's method best.
i understand what you are saying , how do i fix this issue ?
no love for CherryPy. snif.
Something like this would help without modifying too much correct = 0 while not correct: if downstreetanswer != downstreet: print("Wrong , be careful of capital letters!") downstreetanswer = input("Where is downing street ? , give a city") elif downstreetanswer == "London": print("Correct") correct = 1 I forgot to define correct when I first posted so if it doesn't work try what I've edited it to
As far as integrating Python directly into HTML the way PHP does, no. Python's indentation-based syntax (along with some other language features) makes it fairly hard to do that in a clean way. What addresses the use case of "not too much of a framework" is a wide variety of "microframeworks". The most recommended one is [Flask](http://flask.pocoo.org/). It is very easy to use, requires no complicated setup, and is actively supported and developed. It comes with its own development web server (so you don't have to muck with Apache/uWSGI/etc until you need to actually publish/deploy), too. For an example of how easy it is, here's all the code necessary to make a page that counts how many times it's been loaded, storing the count in a local file: # my_app.py import os from flask import Flask, render_template app = Flask(__name__) @app.route('/count') def count(): count_num = 0 if os.path.isfile('count.txt'): with open('count.txt') as f: count_num = int(f.read().strip()) count_num += 1 with open('count.txt', 'w') as f: f.write(str(count_num)) return render_template('count.html', count_num=count_num) if __name__ == '__main__': app.run() And the template, `count.html`: &lt;html&gt; &lt;head&gt;&lt;title&gt;Counter!&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt; View counter &lt;/h1&gt; &lt;p&gt; This page has been loaded {{count_num}} times so far. &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; That's it! Run `my_app.py` and the page will be available at `http://localhost:5000/count`. 
Yup. Even odd rounding rule.
This looks awesome! I had to deal with very nested xmls that was problematic to parse even with bs4 because bs4 has a slightly different behavior while parsing xmls than htmls, I had to learn it the hard way... Is there yet a possibility to undock some of the nodes, because there is a bunch of stuff in my xmls I am not interested in the slightest and I don't want to produce dictionaries that are nested in the same insane way than the originals. Or even better a possibility to only add nodes that coresponds with a regex, because this feature helped me alot in my bs4 solution to flatten out the mess. However your module looks very interesting though, maybe I will try and rewrite my solution with it.
Help is EXACTLY what I was after. Thank you.
So how does "all X is Y" and "no X is Y" relate? EDIT: Ah, I think I get it. "no X is Y" is just a special case of "some X is not Y."
But why is that an accepted norm to modify the base types in Ruby instead of extending them and using whatever you've extended?
No one does it that way anymore because we all realized it was terrible. I guess there's no accounting for taste.
Yep! If the some things that work fine, PyDev for example, then you have a nice environment. Otherwise Eclipse can be more trouble than it is worth. 
This is one of the problems with Eclipse, there are literally hundreds of options, plugins and other features that can screw things up. Get the wrong combo installed and you are basically screwed. 
And shitty programmers now 
&gt; 'normal human' way It's how I learned rounding, and how I have always done it...
You sound like a smart guy, I'm sure you'll figure it out.
Only if they use Python
Yeah if the pattern is simple enough to have already been implemented in a string method, then that is general preferred since it will be clearer, faster, and more maintainable.
And frankly it probably rounds to even up to all as well. 
`settings.json` &gt; "telemetry.enableTelemetry": false, Sure, it's opt out, and that's kinda shitty, but it's not like they make it difficult to turn it off. Also, the entire thing is open source, so you can see exactly what they're sending. Anonymized usage metrics and error reporting is not worth wearing a tinfoil hat over.
Can confirm. Am an analytical chemist and we round to even numbers if it ends in .5 and are reporting to the ones place.
Why not? Could be the best choice for your ideas of a simple dynamic page... Ok, even in the PHP world they use different approaches nowadays. Perhaps you should recognize the similarities and why these appear everywhere you look... or you just keep on going blindly as you have done so far 😈
https://docs.python.org/2/tutorial/floatingpoint.html Note that this is in the very nature of binary floating-point: this is not a bug in Python, and it is not a bug in your code either. You’ll see the same kind of thing in all languages that support your hardware’s floating-point arithmetic (although some languages may not display the difference by default, or in all output modes). Other surprises follow from this one. For example, if you try to round the value 2.675 to two decimal places, you get this &gt;&gt;&gt; &gt;&gt;&gt; round(2.675, 2) 2.67 The documentation for the built-in round() function says that it rounds to the nearest value, rounding ties away from zero. Since the decimal fraction 2.675 is exactly halfway between 2.67 and 2.68, you might expect the result here to be (a binary approximation to) 2.68. It’s not, because when the decimal string 2.675 is converted to a binary floating-point number, it’s again replaced with a binary approximation, whose exact value is 2.67499999999999982236431605997495353221893310546875 Since this approximation is slightly closer to 2.67 than to 2.68, it’s rounded down. And in your case: &gt;&gt;&gt; from decimal import Decimal &gt;&gt;&gt; Decimal(15.5) Decimal('15.5') &gt;&gt;&gt; Decimal(16.6) Decimal('16.60000000000000142108547152020037174224853515625')
I installed/updated via pacaur and was admittedly too lazy to modify the pkgbuild. It builds all the default plugins from source every update, and that takes the largest amount of time.
thanks, didn't know about that one. And now that I have 10 comment karma I actually can post to r/entrepreneur!
As of right now, we are not planning on live streaming, but all talks will be recorded, and put on Youtube, and indexed at PyTube and PyVideo.
That's ruby, but yes.
The docs seem to say otherwise: Rounding DecimalFormat provides rounding modes defined in RoundingMode for formatting. By default, it uses RoundingMode.HALF_EVEN. https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html#setRoundingMode(java.math.RoundingMode)
Windows 7 Pro, Core i7 5500U, 16Gb of RAM and a 256GB SSD. I have three instances running as I type this, with about 15 other applications in the background.
Scrapy supports Python 3 since 1.1 release. It works on Linux and OS X, but Scrapy+Python3+Windows doesn't currenty work because of unported Twisted modules.
Cool. But it's an arbitrary badge. I have no doubt that the majority of people who use vim do so because they think it's what top programmers do. Just another form of pinning badges on ourselves.
Don't let all the knowledgeable comments make you feel silly. I had no idea rounding in Python worked this way.
Emacs is my suggestion. I was in love with PyCharm but decided to go with something else that was lighter. So i learned vim but it didn't feel right although i came pretty productive with it. I decided to try out emacs. And most emacs users are suggesting, i tried to use spacemacs but it was also too much for me as an emacs beginner. But i still liked the theme and some of it's features such as the startup splash screen. So what i did was steal the code for the splash screen, and using the spacemacs theme (without any other package), i've been able to configure my emacs to be a fully fledged python IDE (based on elpy). Shortcuts such as go to definitions are as easy as Meta-comma (option-comma) on my Mac. My configs are pretty simple and easy to understand. Most of them are based on the configs suggested by the plugin developers. https://github.com/rakanalh/dotemacs
I'm not sure about that, but we'll just have to wonder forever.
I tried the pretest for version 25 (https://emacsformacosx.com/) and it indeed supports python 3.5 syntax. You have to make sure flake8 is also updated if you use it with flycheck.
"Takes some time to startup" - what does it do? Do you have many plugins installed? If it's "indexing" - use virtualenv with only necessary for this project packages installed. If not - try looking in logs, read official documentation on the matter (AFAIK just boils down to adjusting VM parameters), and submit a new defect if nothing helps. If it really is your hardware that limit PyCharm - disable inspections. Actually, you can just try to disable every component one by one from the least used to the most used. Stop when you see that the performance is sufficient.
Weird. I also tried the original from this post in Python and it rounded up everything as well. I wonder if it's only certain implementations.
If you're with Windows 10, Visual Studio. Linux/Mac - VS Code. Microsoft is really doing a great job 
I suggest Komodo IDE. Full disclosure though, I'm on the dev team. - Komodo doesn't run on Java, smaller memory footprint (Runs on Mozilla) - has much of the same tooling as PyCharm (Ctrl + Click is our go to definition, and yes it works for definitions outside of files) - Much of the code base is written in C++ so it's always been relatively fast but with our latest release it's much faster (but whether it's FAST ENOUGH is in the eye of the beholder) 
Yea it is a shame. A nicer datetime lib would be cool but arrow isn't it :( It's probably a bit unclear what a good lib would look like too....
Despite everyone saying mod_python is dead and gone, [it's had commits as recently as last month](https://github.com/grisha/mod_python/commits/master). That said, **do** use mod_wsgi instead (or an alternate wsgi solution, I like nginx+gunicorn). You'll have way more flexibility in middleware and it's more generally useful webdev experience. 
For something simple? Try : - Pyinstaller for a standalone executable - miniconda... install all of the dependencies and your software, then just zip up the entire folder and hand it to them.
Python 3 Decimal.from_float stores the exact value so rounds it "correctly" as a human would expect.
Thanks for the input, but uh just did the following: sudo apt install python2.7 sudo apt install idle2.7 and I am all gucci. 
When you say the excel file is "essentially a csv", Does that mean it is literally a .csv? Or is it .xlsx?
Yup! Got it all installed. Thanks for the help mate.
The real figure is 99.5%; he rounded it.
Pycharm community is free, though it spies on you.
Thanks &lt;3.x.
It is .xlsx but it is in csv format
I was just poking the beast based on the last line of the previous comment. I got what I asked for...
Increasing their user base, goodwill, advertising, and then future renewals. All good for business.
Wireshark shows it sends a lot of data to their servers. Possibly code? I'm not sure. It won't open if it detects that you have an internet connection and you specifically blocked its connection. It's supposed to be open source, but I gave up trying to build it after a few days.
You're right, I assumed poorly and saw this &gt; not just the profits, but actually the entire sales amount. Good for them! But agreed with others, growing a user base for a subscription product will likely pay off. I'd guess they will likely retain at least 1/3 of new subscribers (they were likely to subscribe anyway and just needed that bump over the threshold), meaning many more years of loyal users.
Haha I guess the sarcasm got lost 
I saw the title of this thread and just had to come here to see if someone had mentioned PyScripter yet. Even though I haven't used that many Python editors, I instantly knew this one was the one I'd be using for a long long time and I recommend it to everyone that asks. 
Except, sometimes, you can't. &gt;&gt;&gt; 5.real File "&lt;stdin&gt;", line 1 5.real ^ SyntaxError: invalid syntax
&gt; people like this syntax? It looks awful &gt; &lt;someone points out that python does this too&gt; &gt; I can't complain Yet you complained two comments up, until you found out that Python allows the syntax, and now it's okay? Is that because you've been convinced that the syntax is not "awful" anymore, or are you biased against being critical of Python? I'm not trying to call you out or anything, just curious what made you change your tune so quickly.
I used this today, I knew I'd come back for it eventually. Thanks!
Or just use something with a perpetual license. I'm still pissed at Jetbrains about when they switched.
Click helps with making a nice command line interface. Write a proper setup.py file to handle installation. Get an account on PyPI and upload your package to make it even easier for users to install. Add lots of tests and run them with a test framework (Nose is one) so that you can fight bugs. Put the code on GitHub or equivalent so that others can use and contribute to it. Have an open discussion forum and grow a community. 
User friendly? You gotta use PyROOT. hahaha, I kid. If you don't think matplotlib is user friendly then PyROOT will send you screaming. 
Python 3, but Python 2 does not. 
It's a subjective thing, but I don't find matplotlib as having a lot of overhead. There is also the gnuplot program. Not a Python thing and it takes a little learning but it's pretty simple. 
I was taught rounding on two different continents. Banker's rounding first, then always-up. I might still have tests with answers marked wrong due to my using Banker's rounding, despite it being a better system.
No thanks, I'd rather support lighter weight web frameworks.
Hey, quick question from someone who never used an IDE with Python: what kind of framework support does the Pro version have? Or, more like, what kind of support do these framework could benefit from? Unlike Laravel/Rails that has quite a lot of magic, aren't these frameworks just mostly standard python packages?
That seems to apply for the DecimalFormat format function when the maximum fraction digits is 0, but not for Math.round or even System.out.printf. Math.rint will round ties to even, but it returns a double and not an int.
How would you feel about a javascript plotting library (even plotly's is free) and you send the data to it with your own server? Otherwise bokeh might be a good option but its been a while since ive looked at it.
Consider instead `rpartition`, to cover the possibility of *other* spaces in the strings.
It's mostly stuff like templating support from the code (jinja2, django template), database support/detection, and a bit extra. You can get by without, but once you have it it's really fantastic 
I don't think converse is the correct terminology. Converse would be: "if p then q" -&gt; "if q then p". Not sure what your example is but it's not converse.
I'm kinda new to elegant Python, but I've been trying to follow PEP-8 style guidelines for my code https://www.python.org/dev/peps/pep-0008/ If anyone has more input on this, feel free to educate me :) Edit: For the second question... This is Python... So why not use a dictionary lel Throw your data in a sqlite3 database and load it into memory then parse the list into a dict. If the database is huge, you may want to query it each time Instead of loading it all into memory. Anyone disagree?
I was in Python 2, so that's probably the difference.
Maybe he's moved up an order of magnitude. 
Wish they would do this for PHPStorm. Need to buy it soon as my trial is about to expire.
Looking at that sub model just tells me I need to get a raise...
Python sits on top of a huge c++ library. `@property` is for you and your python logic and pyqtProperty is a bridge between QT properties and python. Any time you inherit a QT class (eg QObject) you should use the QT helpers. As for specifying a return type, c++ is strongly typed so you need to tell the Python&lt;-&gt;QT bridge what type you expect to send/receive so that it doesn't mix up "1" with 1 or True.
https://github.com/airbnb/caravel
Yeah, its just good to mention that it'll work fine on Windows. I wouldn't want someone to see your post, think they need a VM to be productive with Python, and decide "Ah, screw it, I'll stick with R or MATLAB".
Python 2.7 is still widely used. If you've already invested time in learning 2.7 as part of your Coursera series, it's still useful to continue (imho). Then read about the changes in Python 3. Consider starting your new projects in Python 3. It'd be useful to know about both, since you will be seeing existing Python 2.7 code for quite some time, but python 3 is on the rise.
You should be fine if the class you're using them in is 100% python and doesn't interact with QT. the pyqtProperty and inheriting QObject for more advanced QT apps is a requirement because then you can create custom widgets and use them in QML. If you're not at QML or making custom widgets, and if your Python classes aren't being serialized/handled directly by QT then you can write 100% pure python classes (eg use `@property`).
IMO their reaction was pretty decent. They listened and did the right thing.
What kind of web development features are you looking for? Whats your platform?
Looks like the PyCharm team is in here downvoting suggestions for other IDEs.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/hailcorporate] [Software company spams their product on multiple subreddits, mass downvotes all comments that suggest alternative free programs.](https://np.reddit.com/r/HailCorporate/comments/4qqh1m/software_company_spams_their_product_on_multiple/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
If you are using QThread I suspect you should stick to pyqtProperty, to make sure the C++ subsystem can "see it". 
Yes, no, maybe, probably not. Security is not a boolean, it's a matter of weighing threat models against mitigation cost and impact. In other words, you need to answer the following questions: - What is the value of the assets you might compromise (**to a potential attacker**)? - What is the damage to your company in the case that the assets are compromised? - What is the effort said attacker would have to exert in order to achieve the compromise? - What can you do to prevent the attack, what are the odds of it succeeding, and what does it cost? - What can you do to mitigate the impact of a successful attack, what are the odds of it succeeding, and what does it cost? And then you need to weigh these up to decide what a reasonable set of protection and mitigation strategies would be, and whether the cost/benefit analysis is positive. Being an intern, none of these decisions are yours, and you are probably not fully qualified to answer all these questions yourself, so I suggest you raise the issue with whoever is in charge. They will either tell you not to use pyinstaller, or OK it themselves, or ask more questions, or tell you what else to do to keep it reasonably secure, or give you a general set of guidelines and procedures for picking programming tools.
Which PyTube are you referring to btw? The only PyTube i found is a Youtube download utility, which I don't think is what you're talking about.
Does anybody here have experience with PyCharm and IntelliJ Ultimate? I have a license for the latter and always wondered how the Python plugin compares to PyCharm.
This is the most important point, IMO. After an introductory course teaching Python 2, there will probably be only a couple of key differences you need to know for Python 3: - `print(x)` instead of `print x`. You can start your Python 2 code with `from __future__ import print_function` and get used to the new way now. - `1/2==0.5` instead of `1/2==0`. You can use `from __future__ import division` to get this. Various names have changed, but they basically work the same way. The big changes are to bytes/unicode handling, and that doesn't make much difference for data analysis work.
If your target users are on Windows, [Pynsist](http://pynsist.readthedocs.io/en/latest/) aims to easily make an installer for your code, along with Python. It gives you a start menu shortcut to launch. Have a look at the [console example](https://github.com/takluyver/pynsist/tree/master/examples/console). (Disclaimer: I'm the author, so I'm probably biased towards it).
Do you mean the price with discount? it depends on the currency/residency for US it's $62.30
Their site is so confusing. If it's $62, I'm sold.
Thats also a very good combo. 
You can just delete `~/.PyCharm2016.1` folder... But I have all products pack, because I want to support JetBrains
Also, if you are a student, you can get all JetBrains products for free!!! I was about to get the PyCharm at 30% off when I saw this post, and I saw the student option, and BAM, I got more that I wanted and for free. :) THANKS JETBRAINS!
There are logical limits to how fast you can go if you still want to differentiate between a single, double and triple click. If you go fast you can get a hundred-click :P
I use both quite intensively, also for Django projects. As far as I know, all of the PyCharm features are available in IntelliJ ultimated with the Python plugin. Furthermore, I have never actually run into any Django or Python feature that was in PyCharm but NOT in IntelliJ. The only advantage of PyCharm over IntelliJ, is that because the UI is focused on Python, things tend to be easier to find. 
On the other hand if there is room for choice, might as well start with Python3 and learn the differences with python2.7 later. Of course with a course halfway done it might not be worth the extra work.
It's very nearly the same price if you renewed every year anyway, which you should have been. Don't be such a whiner.
Visual studio code has a very nice python module and of course its great for web development, nothing close to pycharm and its debugger though...