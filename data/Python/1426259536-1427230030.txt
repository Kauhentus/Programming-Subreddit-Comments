Much better. Cool project.
&gt; it should be possible to run webapps locally Yes, this technology has been around for several years in the form of Chrome and Firefox apps--not the browsers themselves, but small JS apps that run inside the browser. you can download them from the web store / extension center. Devs can also bundle up webapps into desktop or mobile apps using wrapper frameworks like NodeWebkit and Cordova.
That resistor problem is cool. I personally value my sleep waaaay too much, in my old age.
So? Do you have any strong argument beside "it's python"?
You can post a code snippet that is slow and we can help you optimize it! I've written tons of FEM code using just numpy, and I have had no speed issues. Thanks to numpy, I can create performant FEM code and the only Python "for" loop is for the outer loop of global assembly. Everything else is done using indexing and matrix operations, which are very quick. One tip is to derive your stiffness equations using Einstein notation, and then use numpy.einsum to compute the element stiffness matrices. 
IEEE 754 floating point standard is good enough for practically 100% of math problems out there. If your problem is outside of that level of precision, then you will have to come up with your own.
I usually end up using Cython, but only because I can write C fairly quickly. Rather than rolling your own have you tried [sfepy](http://sfepy.org/doc-devel/index.html)? Looks like it's written in python/numpy/cython. I haven't used it, but it seems to be under active development.
Yep! You don't need the line `ret = []` either :)
I'm not sure based upon your original post, but if you haven't already looked into it an iterative solver, such as a conjugate gradient solver, can prove quite beneficial in reducing the number of total steps that you are doing for each step in which you are solving one of your global set of K*d=f equations, since you don't need to worry about assembling the global K matrix. Though, they really only start to show better performance than direct solvers generally around n~100,000. If you are working in the range between n~10,000 to n~100,000 than you might want to introduce one of the various sparse matrix solvers out there. Also, I hate to say it, but if you ultimately want to start working with larger meshes or look for more speed-ups after moving over to Cython,f2py, etc you really might want to consider converting your code over to another language like C or Fortran. However, I gotta say this probably isn't worth the effort if you aren't looking into running simulations that might run for a couple days to several weeks.
I'll give you a hand brother...
Sorry, i'm not really a pro, i'm in math School (pretty high level) and the précision is not enough, but i don't really know how to "come up with my own" ... Could you give me a hint?
 class Building: __repr__ = lambda s: '%s%s' % (s.__class__.__name__, s.d) def __init__(s, *args, methods=('area', 'volume', 'corners')): s.d, ns, we, r = (args + (10,))[:5], ('sou', 'nor'), ('we', 'ea'), (0, 1) s.__dict__.update({k: lambda n=n: ({'%sth-%sst' % (ns[i], we[j]): [s.d[0]+s.d[3]*i, s.d[1]+s.d[2]*j] for i in r for j in r}) if n&gt;1 else s.d[2]*s.d[3]*s.d[4]**(n&amp;1) for n, k in enumerate(methods)}) Sorry, but this is not Python. This looks more like Perl to me. Maybe you should do `import this` and read it more often: &gt;Beautiful is better than ugly. &gt;__Explicit is better than implicit__. &gt;Simple is better than complex. &gt;Complex is better than complicated. &gt;Flat is better than nested. &gt;Sparse is better than dense. &gt;__Readability counts__. &gt;Special cases aren't special enough to break the rules. &gt; ... Abusing lambdas and comprehensions is bad practice in my opinion.
These are interesting.. but if I ever see anyone actually using these I will hunt them down and have no mercy! The main reason I love Python is that it's easy to read and understand what is happening.
IMO, you can't say you possess a programming language as a skill after just having worked through some books. I would say, try to have at least one personal project in your portfolio revolving around the language.
Nobody said that is a good practice. These solutions are "creative" (from creative solution category). Why so serious? ;-)
You should be able to do something useful with Python, like writing some admin helper programs or extensions for programs written in python, like SaltStack.
One place where precision really matters is in radar/stealth analysis. The angularity of the surface has a huge impact on the radar signature. There's a saying in that field though...if you can't make a design decision with single precision, you're doing it wrong. It's pretty important in astrodynamics and molecular dynamics as well, but outside of that...
Why do you need so much precision? Are you working with fractions, infinite sums, etc.? What's an example problem? Really, it sounds like you should be doing your problem symbolically or your confused about what limitations single/double precision really have. If you need to accurately add floats of 1E16 to 1 (or other numbers of that relative size), you're more than likely doing it wrong.
In this case "Clear" category just for you. Sorry, in this article we've tried to collect one-liners with tricks, so yes - they are not "readable". But honestly I like to examine this kind solutions - they are like a puzzle and have interesting tricks. "Just for fun", because programming can be fun :-)
You either die a sysadmin or live long enough to go insane. 
write an app (even a small, silly one) in Python, post it on a public github account. 
Spoiler: they still don't.
Being able to create code doesn't mean you can code new specified features in the context of a larger project, or debug existing code, so I would say once you have a few contributions of both for a well known project you can call yourself a Python Developer.
Are you looking to develop something that is cross-platform? If you are not, you might want to try [IronPython](http://ironpython.net/) which "is an open-source implementation of the Python programming language which is tightly integrated with the .NET Framework."
Thanks!! Our method isn't implicit (it's nodal DG) so we don't need to solve any linear systems, it's all matrix multiplication. Honestly, the most expensive part outside of np.dot is just accessing elements of matrices to find your plus/minus terms.
this. If you want to mimic the .NET look and feel, you can't get any closer than the real thing. Your code is still Python, so best of both worlds.
It's amazing watching the Python community go through the same shenanigans as the Perl community once did. Although Cython is an interesting hack it would still be reversible. Don't want your source code getting out? Don't use a bytecode driven language. You're going to waste more time trying to "hide" your code than you will writing it. Good luck.
All who hate code golf have scars.
I ask myself that a lot as I'm still learning python and very comfortable with Excel. Now I know I can use them both together. Thanks for the blog post! If it were in America it would be really easy: print 'Everyone in America is fat' YAY my first joke using programming! lol
I'm working on the eigenvector of a 50*50 stochastic matrix, i use this code: def metpuissance(A,t): # version brutale# n=len(A) r=[1/n]*n s=1 i=0 while s&gt;t: q=multvecteur(A,r) r1=scalairevecteur(q,1/(normatvecteur(q))) s=normatvecteur(sousvecteur(r1,r)) r=r1 i=i+1 print("iterations bourrins",i) return r def metpuissance2(A,alpha,t): # t est la tolérance (précision), alpha la probabilité que le surfeur change de site# # methode plus rapide # i=0 # nbr d'itérations # n=len(A) s=1 r=[1/n]*n # vecteur de depart de norme 1 # print(normatvecteur(r)) e=[1]*n while s&gt;t: r1=scalairevecteur(multvecteur(A,r),alpha) #alpha*A*r B=1-normatvecteur(r1) #B=1-||r1|| r1=addivecteur(r1,scalairevecteur(e,B/n)) #r1=r1+e*B/n s=normatvecteur(sousvecteur(r1,r)) #||r1-r|| r=r1 i=i+1 print("le nombre d'itérations amélioré",i) return r and the number of iterations is 4, because the precision give a 0.00000000XX term after that, and this is not enough... ^^Edit: The first indent after the def line is not missing in the programm, but it was a pain to re space everything...
I hope you understand that this is just 'creative' solutions, just for demonstration :) I too hope noone will ever do such a thing in working project
As soon as you're confident you can build anything that job would need, and this confidence can come from building projects and having a core understanding of the language. Unless the python looks like [this](http://benkurtovic.com/2014/06/01/obfuscating-hello-world.html), you should be able to read and understand it, or at least ask intelligent questions about it
&gt; but it was a pain to re space everything... Looks good enough to me :) &gt; I'm working on the eigenvector of a 50*50 stochastic matrix, i use this code: Can you use... from numpy.linalg import eig eigenvalues, eigenvectors = eig(A) or do you have to code it yourself? I'm assuming you don't need to since you're talking about stochastic matrices and as a bonus, it will be faster and much less bug prone. The fundamental problem is you're (probably) using a lousy algorithm.
It's not the books I was reading, but my predecessor's *code*.
The general rule is that anything you put on your resume you should be comfortable being tested on. You can put it there once you can talk intelligently about the language, your experiences with it, and when you can demonstrate that you can code well in it.
 &gt;&gt;&gt; import ctypes &gt;&gt;&gt; x = ctypes.c_byte(123) &gt;&gt;&gt; x c_byte(123) &gt;&gt;&gt; y = x.value &gt;&gt;&gt; y 123 &gt;&gt;&gt; type(y) &lt;type 'int'&gt;
Well, you totally nerd sniped me with this one and it took me longer than I was expecting to answer it. The algorithm was easy to come up with, but the leading zeros caused some issues in the implementation. Though that's really because of the language I used (python). I'd be interested in seeing your solution, care to share? EDIT: I didn't realize this post was in /r/python so I guess I didn't really need to specify that I was uing python. haha.
You absolute star! Thank you very much. .value is exactly what I was looking for. 
I don't really fit into any of your categories (I'd call myself a junior sysadmin), but I do have an example for the use of python: I've set up our recently established backup server, to run a daily python script, grabbing the backup logs, specifically the ones generated by backups within the past 24 hours, and emailing them to me via a system gmail account. So basically: Get all files in the backup log folder Sort out the ones from the past 24 hours Sort them in chronological order Create an email message from these Using the gmail API for python, send it to me What makes python a very powerful language for me, is that I can with relative easy whip up a script to do anything I might have at hand, it doesn't require me to do large project setups, compilations, making sure it'll run on the exact flavor of OS it needs to go on. It's much more of a... plug and play, or I guess, code and run, experience.
Plug and play - that analogy is on point! Thanks for the input!
Awesome! Thank you. Feel free to email me at conaticsedm@gmail.com
But you did that...you used some algorithm, it got a semi-decent answer, but ultimately it has limitations in terms of precision. I think you did your task if it's really that general.
Yea, I just write all my tooling in python.
I still miss it. :(
Here's [my solution](https://gist.github.com/brandjon/7745053d2cf372398a87). I used dynamic programming but I'm not sure how much that helped. I run out of memory pretty quickly for strings longer than 15 or so digits.
I used Python to read in a graphical database of a VLSI chip and one of a chip package (like a pin grid array) and used the program to draw the connecting metal lines from the chip to the package of over 2000 signals avoiding power and ground metalization, noting orphaned or redundant signals. I also used Python to gather multiple SPICE simulation results to help determine the appropriate voltage conditions for the best signal integrity of offchip signals. Also used Python to generate html to track status of various areas of chip and task completion and results. Probably could have used Perl or C, but used Python as it was available and easier. edit: spelling 
Very nice!
I expect you can guess how the SPICE and the HTML stuff worked. Our SPICE had a binary output so as long as I named the different runs according to a predictable nomenclature, I could do time simulations sweeping other conditions, gather the output data to see at what conditions the failure point occurred. Big sims, lots of CPU time. The HTML generation would allow me to go into go into tools output that generated wirelists and check the error summaries for the myriad structures in the chip as well as simulations etc. Modeled much of what I did on other’s work. Same with the above. For my projects, I could look at the entire team’s status for any subset of work on a single html page (one status line for each section). Rollups for management became less work and more accurate. The connectivity of chip to package was interesting as the two databases were distinct and on different scales. There were locations of dozens of buses on chip, usually lined up tightly to signals on the package that were generally spread more widely in a 2d problem so that package return paths could be interspersed to prevent or at least reduce some of the signal bounce. The program took the location data of the package signals, mapped it into the chip coordinates to determine the two points that needed to be connected. Everything else (other than the exceptions 8-)) were power and ground. The top layers of metal were periodic and structured in both the x and y dimensions along the lines of VDD,sig,sig,sig,VSS,sig,sig,sig; the infinitely variable choices were then reduced to a countable number of runs vertical and horizontal with connections accomplished by a via/novia data item. Buses were sorted to be run together and the guesses were started with one tack, then 2 tacks and so-on. Most of the signals ended up being 1 or 2 tacks and were subsequently ‘frozen’ when a reasonable ‘resistive length’ was achieved. Then on to the next bus. Between iterations, roadblocks were introduced to herd signals in different directions or to avoid congestion. Once a reasonable set of all of the routes were finally produced, iterations became more to verify we had not screwed anything up, physically or electrically (With 2 levels of metal with fixed widths resistances were easily estimated). So it was an ad hoc place and route tool but only for top layer metal. It’s greatest utility was that it uncovered missing and misnamed signals plus power and ground shorts in both the chip and the package, something when discovered was easy to fix. All in all, it was great fun. In its next generation for the next chip, we added a real software engineer to the effort, introduced more flexibility, better measures of signal integrity and patented the procedures. Unfortunately v2 was in C. Ran much better than my version, which was the programming equivalent of meatball surgery. But i love those dictionary structures. 8-) Every engineer doing physical and electrical design in our group developed scripting tools for getting work done better. Most CAD groups can never predict everything needed to get the work done. But this was all over 10 years ago. 
The guy who does the videos is terrible at explaining things. He also makes errors somewhat frequently...it would make more sense if he used variable names that were more descriptive
If my understanding of an inversion is right the first solution is wrong. count_inversion((3,2,1)) will give 3 when it should give 0.
Computer Engineer here. We use it for everything. We use it to ensure that we merge all content for a specific task at once (despite being in a multitude of repos we work on), we use it for our full build process, our full release process, including automatically generating a significant amount of the code we compile. We use it to auto-generate our documentation as well. This is the one I can expand on probably the easiest. We have a program that is basically our "source". It has all of our calibration values on the software we deliver. We use python to read the values we have for calibrations and asciidocs templates for the descriptions of the values are used for. We also use a different python script to generate release notes. We do this by pulling the information from our issue tracking list on the issues that have been done between releases and then compiling the notes we have put in each of those issues. We also almost always write a helper script for things that we have to do repetitively but don't have to do a lot. I wrote a script to clean up our makfiles that basically removed each line (which was a separate include directory) and tried to compile with the resulting makefile. This was for about 80 makefiles.
The purpose of that is for type hinting, not type enforcement. [str rtype](http://i.imgur.com/fRXbQXE.png) [int rtype](http://i.imgur.com/2rZtJ0K.png) [Foo rtype](http://i.imgur.com/QJblK3j.png) If you want type enforcement then you'll be better off using type assertions and unit tests. E: Actually, this works: http://i.imgur.com/YK2i8Tl.png This does, too: http://i.imgur.com/2FeRBo1.png
Yea something like that. Im really interested in more indepth articles on pyqt design tips and known hurdles regarding common things a decently complex app will usually face like window modality, event processing/handling and performance issues like adding items to a qtreewidget by the thousands with a progress bar being updated at the same time. Definitely understand this is geared towards beginners though so can understand if ur planning to keep these more at that level.
Yea, your two examples are in the Inspection settings. It can check the inputs and your use of the output. I'll just have to live without the safety net within the function, lol.
While it is more complicated I think a basic (as basic as I can manage at least) threading example or two about how to keep your UI not-locked up while running long background code would be good. It was one of the things I had a really hard time figuring out at first.
Is this a true WYSIWYG graphics builder? Any chance that a similar utility exists for tkinter?
I completely agree with you on qtreewidget. Been using qt for quite some time and came to the conclusion if I could master one widget that would solve most of my problems that would be QTreeWidget. But sadly didn't find good tutorials on it which explains to the core.
Also - re: Tree Widget example -&gt; http://neurochannels.blogspot.com/2015/01/pyside-tree-0-building-simple-tree-in.html
Not sure how it's doing now, but Sikuli is a pretty interesting option. 
Interesting, cool, food for thought... sure. But if you were programming in my team, not much of that code would pass the review.
Brilliant! It's a nice way to see the variable value in a function. But how to exit?
I usually use Ctrl+D, but Ctrl+C or sys.exit() should work too
Last I had seen PySide looked pretty dead. Where would be the best place to see about the status of development?
Yeah, but nothing that hasn't been said in this comment section already. Mostly it's related to the idea of obfuscating code to begin with.... 
Awesome stuff! Being a "maker", I often have a slew of projects rolling at any given time. Being a "hardware guy" means most of my projects - if need programming work - get back burnered or worse. I think I really need to sit and spend the time learning programming. 
Thanks for so much info!!! I'll look into it all.
I am doing a lot of array accessing...in fact, a not tiny chunk of time in my code is spent accessing array elements. I have two index arrays and I have to extract elements of a huge matrix at every time step. Was actually wondering if that can be sped up at all. Other than that, yeah, it's mostly np.dot that's expensive to me.
Interesting problem, thanks. Here's my take on it (not particularly efficient but works well enough on small strings): https://gist.github.com/bmispelon/d6b074f9fcd252b911a5
Hi, I'm still interested in your sample web app, if you have time to release it.
Im late to the party, but perhaps have a look at checkio. You solve real problems and only get to see the optimal solution afterwards. In my opinion this really helps you to think about problems in a structured way, which is arguably better than just know the syntax of a specific language.
Hey - thanks for supporting our site. 
I'd love a tutorial or even a "best practice" method on embedding an event logging console within a PySide application that constantly updates (aka non-locking) while actions/activities are underway. Imagine having a static console/terminal (perhaps hide-able as well) that exposed/logged what's going on while the application is processing-- I always like seeing the "guts" of my application in progress.
I've been using template engines for SQL for years. I'm not seeing why you would need a wrapper around handlebars though. If anything it seems like you wouldn't want to do this.
I'm about whether to use it or not. I'm about where to put it: before or after?
As an FYI I have yet to have a piece of code where I am unable to change: from PySide import QtCore, QtGui to from PyQt import QtCore, QtGui And not have it work. The bindings syntax is very similar.
This is toxic advice, although contributing to a "well known project" may be a nice addition, its a ridiculous suggestion and one that should not be pursued seriously. Random contributions to "well known projects" tells me nothing, it tells me even less about what you can do on your own. If you are a competent programmer, making new features for a larger project or debugging existing code shouldn't be what your focus is on, those things should be second nature to you once you understand the language. After all, you want to call yourself a python developer right? not pass a 2nd year computer science course.
&gt;Random contributions to "well known projects" tells me nothing It tells you the following: 1) You can contribute to a large code base. 2) You can analyze existing code. 3) You know how to fix code. 4) You can make changes without breaking things. These are all things you will need to know how to do in order work on other projects. I can create personal projects without predefined rules all day long but it means nothing if you can't actually put that code to use. Passing a "second year computer science course" would probably be the equivalent of making your own project with everything you learned in the first year course. Again though, all this says is you can create code. Not that you can *contribute* code. Perfectly fine if you're okay with "Not Invented Here" syndrome. 
Am I misreading 'natural order'? Why can't the natural order be descending?
[This](http://puu.sh/gzTKm/fe9140720e.png)? I have no idea what I'm doing, could you elaborate on what I should look for?
It's unlikely to be due to python per se. I see you are using turtle, which does graphics. This may hint at a problem with the graphic drivers. Is the machine a fresh install? It might also be a hardware problem with the graphic card. According to googling around, it seems to be a services.exe database corruption, which seems weird as python does not install services, and it should not trigger anything related. If you can, I suggest you to simply reinstall windows. Otherwise, hunting down the problem may take a while and some knowledge of the windows internals. 
There is a simple to implement alternative. If you cast your list of floats as a numpy array of type longdouble, you can very easily get twice as much precision. You won't have to change the code outside of an array call, so something like: from numpy import array A = array(A, dtype='longdouble') I think that's the right type name. It might be float128 and they might both work.
/r/learnpython
Nice pi, 3.14159 thumbs up!
 # http://en.literateprograms.org/Pi_with_Machin%27s_formula_%28Python%29 def arccot(x, unity): sum = xpower = unity // x n = 3 sign = -1 while 1: xpower = xpower // (x*x) term = xpower // n if not term: break sum += sign * term sign = -sign n += 2 return sum def pi(digits): unity = 10**(digits + 10) pi = 4 * (4*arccot(5, unity) - arccot(239, unity)) return pi // 10**10 if __name__ == '__main__': print pi(100) Run with "pypy pi.py" LOL. 31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 
it's only pi day in america! 3/14/15
The most accurate pi day for the next hundred years. Edit: I forgot about rounding, I am shame.
Next year will be even more accurate,
If you ignore the year and write the time as: &lt;Month&gt;-&lt;Day&gt;-&lt;Hour&gt;:&lt;Minute&gt;:&lt;Second&gt; then the PI time is 03-14-15:92:65 Too bad there's only 60 minutes in an hour and 60 seconds in a minute. So the best we can do this time around is celebrate at 1pm.
Well, people don't seem to have consensus about [when the Easter bunny was born](http://en.wikipedia.org/wiki/Easter#Computations) either, yet that doesn't stop them from celebrating it ever year ;)
its 2015-03-14
Nan values mean you have a division by 0, which given your code is probably caused by the norm method (e.g. (r1^n + r2^n + r3^n + ....)^(1/n). For n=2, it's a sum of N squares &amp; a square root. It's basically a division by 0 if you're not careful, which can sometimes be fixed using some minimum value (e.g. 1e-6) to divide by if it's supposed to square to 1.0. In other words 1/0 =&gt; nan for arrays. I'd make "e" an array as well. You'll also need to make sure your addivecteur and scalairrevecteur methods are returning the correct type, which is really just... # old r1=addivecteur(r1,scalairevecteur(e,B/n)) #r1=r1+e*B/n # new r1b = r1 + e * B/n # check to see if it's close to the new r1 for testing r1 += e * B/n # also set this up at the top...instead of r = [1/n]*n r=array([1]*n, dtype='longdouble') / n # more stuff... B=1-normatvecteur(r1) # old from numpy.linalg import norm # new b = 1 - norm(r1) # be careful with the shape of b, you may need axis=0 or axis=1 as an arg to norm That should be a lot clearer too
Python 2.7.6 I had to modify line pi += ((4 / i) * modifier) to pi += ((4.0 / i) * modifier) then worked for me. 
Why does ISO hate America and pi?
Except if you're from Indiana, when it should be celebrated on [3/2](http://en.wikipedia.org/wiki/Indiana_Pi_Bill)
I think the fastest way to answer your questions in a meaningful way is working through the flask QuickStart quide. Flask is a web framework primarily concerned with with url routing. Working through the tutorial you will get practical experience setting up a dev environment, learn best practice code separation, get to play with a dev server, Jinja2 templates, database connections and more. In the end you will see the big picture in how Python can be used to build useful things. Flask isn't very big...but big enough. The popular place to start is with Django....but too much magic going on there to understand what is happening. Learn with Flask first and Django makes a lot more sense. The only think I'm not sure about is Python GUI dev. I'm a web programming, so keep that in mind before following my advice. 😄 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Indiana Pi Bill**](https://en.wikipedia.org/wiki/Indiana%20Pi%20Bill): [](#sfw) --- &gt; &gt;The __Indiana Pi Bill__ is the popular name for bill #246 of the 1897 sitting of the [Indiana General Assembly](https://en.wikipedia.org/wiki/Indiana_General_Assembly), one of the most famous attempts to establish mathematical truth by legislative fiat. Despite its name, the main result claimed by the bill is a method to [square the circle](https://en.wikipedia.org/wiki/Squaring_the_circle), rather than to establish a certain value for the mathematical constant [π](https://en.wikipedia.org/wiki/Pi) (pi), the ratio of the [circumference](https://en.wikipedia.org/wiki/Circumference) of a circle to its [diameter](https://en.wikipedia.org/wiki/Diameter). However, the bill does imply various incorrect values of π, such as 3.2. &gt;The bill never became law, due to the intervention of Professor [C. A. Waldo](https://en.wikipedia.org/wiki/C._A._Waldo) of [Purdue University](https://en.wikipedia.org/wiki/Purdue_University), who happened to be present in the legislature on the day it went up for a vote. &gt;The impossibility of squaring the circle using only [compass and straightedge constructions](https://en.wikipedia.org/wiki/Compass_and_straightedge_constructions), suspected since ancient times, was rigorously proven in 1882 by [Ferdinand von Lindemann](https://en.wikipedia.org/wiki/Ferdinand_von_Lindemann). Better approximations of π than those inferred from the bill have been known since ancient times. &gt;==== &gt;[**Image**](https://i.imgur.com/6utww78.png) [^(i)](https://commons.wikimedia.org/wiki/File:IndianaPiBillCircle.svg) --- ^Interesting: [^Crank ^\(person)](https://en.wikipedia.org/wiki/Crank_\(person\)) ^| [^Clarence ^Abiathar ^Waldo](https://en.wikipedia.org/wiki/Clarence_Abiathar_Waldo) ^| [^Pi](https://en.wikipedia.org/wiki/Pi) ^| [^List ^of ^topics ^related ^to ^π](https://en.wikipedia.org/wiki/List_of_topics_related_to_%CF%80) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cpevf8p) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cpevf8p)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Those dirty Swiss.
still doesn't. 
hell yeah. It's a solid framework. I think Django and React are all I need. 
Good to see that other people also still value the N900. It's one of the most reliable and hacker-friendly smartphones I've ever seen! Happy Pi day!
That was a nice article, thanks for linking, but it is much much more complex than what I was going for.
It would not have occurred to me to do mutation-only generations with plain genetic algorithms. Evolutionary *programming*, where the genes being evolved are actual code of some sort, uses this as the only technique, since crossover is hard to control with that approach. You might get faster convergence by introducing crossover, breeding the best performers for the next generation, along with mutation.
Get out. 
Like I said, I notice they randomly fail, but I never bother to google to try and figure out why. I don't care if our builds fail when they're not actively being developed. If I'm working on a project and 40% of our nightly builds pass, I'm thrilled. If it's not my project, I don't care. We also release software when the builds are failing and they're fine.
You'll find better feed back from /r/piracy and /r/torrents.
That doesn't sound like a project I'd want to work on.
(please remember that "pythonista" is a derogatory term)
Cut it in half
Some of us still even [write new python apps](http://talk.maemo.org/showthread.php?t=94019) for it :)
I found [these](http://puu.sh/gAzrx/8d3e4734ba.png). Here's what they all say respectively: * "The Service Control Manager tried to take a corrective action (Reboot the machine) after the unexpected termination of the DCOM Server Process Launcher service, but this action failed with the following error: A system shutdown has already been scheduled." * "The Service Control Manager tried to take a corrective action (Reboot the machine) after the unexpected termination of the Plug and Play service, but this action failed with the following error: A system shutdown has already been scheduled." * "The Power service terminated unexpectedly. It has done this 1 time(s). The following corrective action will be taken in 60000 milliseconds: Reboot the machine." * "The Plug and Play service terminated unexpectedly. It has done this 1 time(s). The following corrective action will be taken in 60000 milliseconds: Reboot the machine." * "The DCOM Server Process Launcher service terminated unexpectedly. It has done this 1 time(s). The following corrective action will be taken in 60000 milliseconds: Reboot the machine." Any ideas?
I believe the issue is with services. I just made [another comment](https://www.reddit.com/r/Python/comments/2z0tlt/python_often_causes_my_computer_to_reboot/cpf57xn?context=3) with details on the errors I found.
Generators are lazy and forgetful. This makes them fast. But, it means that for me to get `generator[i]` I may also need to calculate `generator[0]...generator[i-1]`, further if I want to go back and get `generator[i-10]` later, I can't, the information is gone. In terms of interfaces, its because a generator only has a `generator.next()` method, so to get generator 8, you have to call `next()` 8 times, and then you can't go back. If you're wanting to index into something, you probably just want a list.
It's not a fresh install. Unfortunately I don't have an install disk so I can't reinstall windows at the moment. I did intend to try it on a virtual machine but I can't even get Virtualbox working now either
Generators are not random access. They don't store their past or future states, only the current state. There's no way to jump ahead or jump back, you can only move forward one item at a time. That's by design, because it's far more flexible and powerful than the random access model. That is, iteration is a much more fundamental and general concept than indexing. Indexing can be thought of as a special subset of iteration, but not all iteration can be modeled as indexing. Take for example the lines of a text file. You can't just skip to line 'n', because you have no idea what offset line 'n' is at in the file because every line can have a different length. The only way to get to line 'n' is by reading lines 0 through n-1. That's the kind of thing that generators (and lazy iteration in general) are meant to model. It would be possible to emulate random access with iteration, but it would be hugely inefficient, and therefore misleading. Indexing implies O(1) access, but it would not be in this case. It would be much worse. It would be a complete lie. If you need random access of something provided by a generator, feed the generator to `list()` to create a list. Then you'll have your random access. You'll lose all the advantages of a generator, though. 
Not answering your question because others have (tl; dr: iterating is more general than indexing), but you should use `itertools.islice`.
 import pdb; pdb.set_trace() or, if you have ipython: import ipdb; ipdb.set_trace()
Sounds like malware to me. I appreciate it only happens with python, but I would still grab a rescue cd, like kaspersky, and scan you machine 
Because they wanted to release a fix ASAP instead of waiting for a CVE to be assigned? Note that they mentioned "An CVE identifier has not *yet* been assigned for this."
Can you pose some example screenshots, like of one image after 10, 100, and 500 iterations, etc? I'd be pretty interested to see that. I imagine it stays pretty close to the original.
You can [download](http://www.microsoft.com/en-us/software-recovery) the official images from microsoft for free.
I wish that were true. I have a big piece of code I could pare down if you want to take look that doesn't work with PySide. It also uses VTK and crashes when the show method is called, but it's fine with PyQt4. At some point it worked...
Cool. I love applications of GAs. I've been using the [DEAP] (https://github.com/DEAP/deap) package to run a GA in a project I'm wrapping up. 
Do you need to move from PyQt to PySide for licensing reasons or something?
Getting my N900 out to install some new apps. Is the community development still big?
It has slowed down a lot recently. Software is getting pretty dated at this point sadly. Which is a shame because it is still my favorite hardware form factor of all time. I just don't understand the current trend of giant phones and not more slide out keyboards :(
What does it change having a CVE or not?
This is a very simple, straight forward, and correct turtle graphics program. I ran it three times each with Python 2.7.9 and with Python 3.5a2 on my Win7 machine with no problems, not that that means much. I don't use Idle, so I wouldn't even know how to run it that way. Do you run a virus scanner? Windows Defender, AVG, McAfee, etc? Does it ask you if it detects a problem, or just automatically quarantines the suspect object? This can be a source of problems when the AV software heuristic code detects a false positive. Is you machine standalone, or in a domain? Do you have local admin rights on your machine? Are you using a VPN or Remote Desktop to connect to a real or virtual machine at your uni? Sometimes the names and descriptions cloud the fact that you are setting up a virtual network. Do problems happen after you have been running Idle for a while or will it happen when you first start it? IIRC, there have been problems with Idle crashing when you reload programs. Personally, I edit with Notepad++ and/or Geany and run in a cmd window or under cygwin, or from the editor. I'm assuming you have checked that you have free ram and disk and your cpu is reasonably fast. Nothing you are doing should stress those, but if you are running a lot of extra stuff, like a huge browser instance or sketchy music apps, or games at the same time, strange stuff can happen.
Best phone ever.
&gt; Happy Pi day to all ~~pythonistas~~ pithonistas! FTFY
&gt; Do you run a virus scanner? Windows Defender, AVG, McAfee, etc? Does it ask you if it detects a problem, or just automatically quarantines the suspect object? I have Malwarebytes and Microsoft Security Essentials installed. To be honest I'm not sure if they're meant to ask me if they find anything. I don't think I've seen them ask before though. &gt; Is you machine standalone, or in a domain? Do you have local admin rights on your machine? I don't know what that means, but yes it's my computer and I have admin rights on it. UAC is also turned off. &gt; Are you using a VPN or Remote Desktop to connect to a real or virtual machine at your uni? Nope &gt; Do problems happen after you have been running Idle for a while or will it happen when you first start it? Sometimes it takes a few minutes of editing code and running it for something to go wrong. I haven't worked out any pattern though. &gt; Personally, I edit with Notepad++ and/or Geany and run in a cmd window or under cygwin, or from the editor. I tried not using IDLE and editing with N++ instead but sometimes when I try to run my scripts the cmd window appears and closes within a split second and nothing happens. &gt; I'm assuming you have checked that you have free ram and disk and your cpu is reasonably fast. Nothing you are doing should stress those, but if you are running a lot of extra stuff, like a huge browser instance or sketchy music apps, or games at the same time, strange stuff can happen. Yeah I'm not doing any of that. Normally I just have Chrome open but it even happens when I don't have any other programs running.
Sounds like all the simple things are working ok. Perhaps some of the others posts will suggest a solution.
:(
I don't know if I'd consider takewhile an obscure import. Though, it lives in itertools, not functools. Maybe I just love itertools too much. `takewhile` also doesn't consume an iterator so much as transform it. 
You could always try computational biology.
Can you provide the code? In an if-clause, if your typo caused the subsequent code to resolve to false, then that's exactly what Python (or most languages for that matter) would do, is just continue on with code execution.
Everyone is too busy copying Apple's useless form factor to care about what programmers (a small niche) consider actual usability.
The if-clause was just an example, the same happened at other points too. My code was something like: for x in y: dF = foo(param1) if df &lt; 100: doStuff() otherStuff() OtherStuff() and doStuff() are never reached (kind of expected), and it jumped straight to the next iteration. I added the try/except stuff to debug, because I didn't noticed the typo. Edit: I can reproduce this behaviour on four different machines, two of which were "vanilla" before running the programm. And if that matters: my import: from __future__ import print_function import serial import sys import time import datetime import collections import threading from Queue import Queue import errno
[Matplotlib](http://www.matplotlib.org) is the de facto data plotting library in Python, if that's what you mean by "graphing". Install with pip install matplotlib or grab a distribution that already includes it. 
So the typo is that `df &lt; 100` instead of `dF &lt; 100`? Unless `df` is set somehow otherwise, you should be getting a `NameError`. Can you paste in a really short full program (put 4 spaces each line and it will look like code). If it doesn't look like `df` is set anywhere and you print it out before going into the loop (or something like `raise Exception(df)` do you see if `df` has a value? Are there any `import *`s that might be adding it to the namespace (I see nothing on the list of imports). 
I agree with this but I'd like to know what defines a 'beginner guide'. What may be a beginner's guide to some may be an expert level guide to another and visa versa.
__init__ is not a constructor. While telling newbies early on that it is similar to a constructor in other languages, a constructor it is not. In fact if you put a print statement above the dunder init it will print it. The class is already constructed by the time you get to init. http://youtu.be/HTLu2DFOdTg This is A REALLY good class discussion from pycon 
Have you checked that your `y` actually has something in it to loop over? Try printing `y` and even printing `x` inside the loop to see whats going on. Alternatively you could use an interactive debugger to poke around at a breakpoint.
It has something to do. As I said, even if the first line is "print(df)", nothing happens. That's not normal behaviour!
If `print(df)` in the first line of the for loop, then you aren't even getting into the loop. That sounds like your `y` has nothing to iterate over.
Something that's based on SimpleHTTPServer and urllib: https://pypi.python.org/pypi/zget Pure python, uses Zeroconf to negotiate between the two parties.
WE TOOK IT BACK!!1!
Thanks. But I'm not asking how to choose a license, I want know the decision you make and your own feelings about why choose it.
&gt; Install with pip install matplotlib That won't work on Windows. While there are binary wheels for matplotlib on PyPI, there aren't binary wheels for numpy on PyPI, which is a prerequisite. That means `pip install matplotlib` will die trying to build numpy from source without a full development environment including a fortran compiler. OP should install numpy first by going to [Christoph Gohlke's site](http://www.lfd.uci.edu/~gohlke/pythonlibs/) and getting the appropriate numpy binary wheel, installing that with pip, and then running `pip install matplotlib` to get the rest from PyPI (or just using the binary wheels from Gohlke's site for all the packages.) 
[Comment] what?
Yea you are right, but I think the people who right the guides know who they target audience is. If I'm wrong just tell me I'll just delete this thread.
I usually just slap the MIT license on all my projects
The Kolmogorov complexity would be a better measure of randomness. This is an attempt to ask whether pi is normal, not random. For example, 0.123456789 repeating would be considered random though it is clearly not. Since this is /r/python, not /r/math... # Create an empty array to hold the digit counts digit_count = [0]*10 # Iterate through each digit of pi, and tally the counts in the array: # "digit_count" for digit_of_pi in xrange(0, len(pi)): digit_count[int(pi[digit_of_pi])] += 1 why are you looping over `xrange(0, len(pi))`? Doing for digit in pi: digit_count[int(digit)] += 1 would be just fine (though `collections.Counter(pi)` would be better). You can also leave off the expected calculation since scipy will fill that in. Something like this will focus on the interesting parts more. # Pi digits downloaded from: http://www.angio.net/pi/digits.html from scipy import stats from collections import Counter # 100.txt points to a file holding 100 digits of pi file_name = "10000.txt" with open(file_name) as fp: string = fp.next() # To remove the decimal point from pi use this: # (assuming pi only has 1 decimal point) pi = map(int, string.replace(".", "")) # make sure we've accounted for all digits counter = Counter(dict.fromkeys(range(10), 0)) counter.update(pi) _, p_value = stats.chisquare(counter.values()) print("For %s digits of pi, we received a p-value of %r" % (len(pi), p_value))
What does Full Stack developer mean? Ive always wanted to know. 
Great work! That is pretty neat stuff!
We don't want to start filtering actual content like that. Guides are useful for seasoned developers; we often have to suggest guides for people to use to start learning Python (or general programming). Lots of people are posting guides like this to /r/learnpython already as well. Having them show up here isn't a huge problem; if you don't like them I suggest down voting them and then moving on to the next link. At this point, I don't think this rule will be implemented, since we are still evaluating the utility of the current rule (specifically the use of actually deleting the comments).
so people that make software for a living may legally use your stuff
You could look into test engineering. We use python for automation of data collection and processing. It involves everything from interacting with low level libraries for hardware control to building Web interfaces for displaying process data over time. We have had interns and engineers who came from CS backgrounds, but it helps to have an interest in the field related to whatever it is you're testing. We're making electronics, so things like arduino experience would be a good starting point. 
It means you'll be working with both server-side and client-side web technologies.
GPL 4 lyfe!!
&gt; Often the guides answer the exact same question that are asked in r/learnpython. People who ask questions, especially trivial/beginner questions, on user forums are not interested in guides, or else they would've found the answer to their question in the large number of existing guides.
AGPL specifically addresses the server side case of GPL. And you cannot just take someone else's code and put it in your project without a proper license or transfer of ownership.
Good Point, so I just delete this? 
I second this and would also like to suggest looking at computational chemistry with regards to proteins. There are lots of people doing some cool stuff with molecular dynamics simulations and DFT.
I use WTFPL/CC0. I want people to have not the slightest hint of doubt that they can use it. MIT is pretty good too.
Hey, I'm a full stack developer, I had no idea.
But don't you need a phd for that kind of work? And aren't those jobs mostly only in academia? I also have never worked with molecular dynamics or DFT before. 
Ok, so what are you confused about? What is your question?
I use the [Chicken Dance License](https://github.com/supertunaman/cdl) for most of my projects.
I have to make the "OW OW OW" into a for loop and I'm not even quite sure how to put a for loop in a print()
&gt; don't ever let yourself believe that the problem with your code is &gt; somehow not your own fault. it is, you just don't know what the &gt; problem is yet. it is most certainly not Python that is broken. I used to love TA'ing first or second year engineering / compsci courses because every class at least on person would say "I think the compiler is broken, there is nothing wrong with my code" 
Ah, well, I don't believe you technically can. Instead try putting the print inside your for loop. 
If you're making an application for end users, things like GPL make sense. But I hate seeing libraries and APIs in GPL. Some people make an argument that by importing/using that library in your project (not modifying, not distributing), your entire project becomes GPL, and possibly any non-code end products that your project helps make, and fuck that noise. 
I guess thats a fair point, maybe i get a little tunnel visioned. I guess while it may be true in the Chem / biochem departments maybe its less so if you looked at comp sci? I know that sometimes they look that sort of stuff too if you are interested
I used to use MIT but now use Apache2 because it affords more protections to you. You're not liable if someone uses your code maliciously w Apache2. 
Haskell and Golang uses "import" as well :P
Apache v2 - makes it obvious for me that I'm in it for fulfillment, not money, and is occasionally easier for commercial users to adopt. Other than the patent protection clause (which places restrictions on me, not someone using the code), it should be functionally equivalent to MIT/BSD.
I can't think of a time when I've felt the need not to use the MIT license. It's brief and clear. 
This seems like exactly what you need: https://github.com/TTLabs/EvaporateJS
&gt; In practice, this would require that an origin was sending cookies like this on off-host 3XX redirects. This is unlikely to be the case, so we suspect the risk factor here is low. This is actually very likely to be the case. Flask for example will send the session cookie on every response, to keep the session alive.
but wasn't he "compiling terrabytes of code" ? Although at that point he could've been compiling a new python for his bots I suppose :)
GPLv2 and/or LGPLv2 depending on the type of project. I prefer GPL because it aids the construction of a community around the software.
Thank you. I was wondering about that. 
I've been using this code: https://github.com/JeffHoogland/pyxhook to capture key events from a Magnetic Card Reader. Maybe it can work for what you need. 
ELI5 what are the rules on changing licenses? For example, if I forgot to add a license to some code on github and then realised I should add one, or if I want to change from MIT(example) to something else, are there any restrictions? 
You're right that no license can prevent people from suing you, but a disclaimer of liability would make it much harder for them to win. I don't know if it would ever be a problem, though there have been lawsuits over software quality before. It's unlikely, but I'd include it personally to be a little safer.
As someone who works at a large company, and uses a lot of open-source libraries, MIT is the easiest one for us to use, and is easier for us to help promote your open-source project too, if we use it in any significant way. GPL is basically impossible to use at large companies because even if we don't distribute the library, we have to modify the library's code to get it to work with our own internal systems. You should only use GPL/AGPL and the like if you want to create a business focused on providing support for open-source software (and sell commercial licenses), like what MongoDB does. If your goal is just to get as many users using your open-source library as possible, please, *please*, use MIT or Apache. EDIT: BSD is totally cool too. 
Your key word there is includes- distribution. I specifically excluded distribution and am only talking about linking against a GPL library. Some lawyers take the gnu stance you linked to, that even if not distributed with the other application, it still counts. Others take the approach that just writing "import GPLProj" does not mean that. Just because the authors say something was meant to be interpreted a certain way, doesn't make it legally true. And the really ridiculous one is the argument that because the carpenter used a GPL hammer as a tool to build a cabinet in a house, the entire house is GPL.
All copyright owners (i.e contributors) need to agree on the license change. If it's just you, you can do whatever you like since you own the copyright of the code. However, another person who obtained your work under a license you put on it, can't retroactively lose his rights to use it under said license. But if a newer version of the code has a new license, and the user wants to use it, he needs to decide if he agrees with the license or prefer sticking with the older version he already has which was released under another license. I hope it's not too confusing. But basically, as copyright owner you can do whatever you like, but not change the license of a piece of work that has already been obtained by somebody else, if you do it's technically dual licensed.
CC0, http://creativecommons.org/publicdomain/zero/1.0/, because it's as close as you can get to plublic domain and modern copyright law is hopelessly broken.
Okay, got it. Now time to slap a license on my github projects that don't already have one.
Ah, interesting. I will look into that when I got some time on my hands.
Good idea! &gt; Open source simply isn't open source without a proper license. Unless you've explicitly told others that they can modify and reuse your work, you've only showed others your code; you haven't shared it. https://github.com/blog/1964-open-source-license-usage-on-github-com
Yeah, which is why I hate seeing the license in a library/API. GPL should be used for protecting your work when you want your work to be used by users, not developers. But if your goal is to be used by developers... You were correct to point out that GNU has a FAQ answer regarding linking against. I think it's a shit legal argument though, since someone can build another API that works mostly the same way and can be imported the same, with a different license without copying or even looking at the GPL code. Of course, maybe THAT's that shitty legal argument in a post Oracle vs Google API lawsuit world- thank goodness it's going to the Supreme Court.
Do you honestly think people in /r/learnpython do never have a look in /r/Python?
Your second function is strange, it does different things -- either it appends to the list someone gives it, or if someone gives it an empty list then a new list is returned with the element added, or if no argument is given you get a new list with the element. At least check if no argument was given with `if arg is not None` instead of simple truthiness. Python already does include some sort of type-hinting system: https://docs.python.org/3/tutorial/controlflow.html#function-annotations
Thanks, I overlooked it, probably due to copy-pasting the equation from the line above! Should be fixed now.
I'm not iterating over the indices -- just using them in the form B = A[indices]. It would be kind of hard to post the code because it calls on many other functions. Here is the exact code for when I use the indices stuff: um = u[:, :, j][gr.umapm] up = umod[:, :, j] fm = f[:, :, j][gr.umapm] fp = fmod[:, :, j] gm = g[:, :, j][gr.umapm] gp = gmod[:, :, j] gr.umapm is the set of indices. The rest of the code involves matrix multiplication (i.e. np.dot(A,B)) and other matrix operations like A*B, A**2, etc.
I suggest dropping out of her class on a commitment level, stay for the credit. Learn python, and more importantly programming on your own, use something like edx, which really is great, better than CodeCademy. Other than that I would just try to do stuff, make a simple text or ascii game. You will learn a lot by just doing and running into problems.
What is up with the white space? Indent should be 4 spaces, not 8. Stuff like this is well standardized.
Will Flask send that cookie without a domain parameter?
Neat! Glancing at the code, one thing that stuck out is that you don't need your `Point` class, since NumPy `array`s already support point-wise addition, multiplication, etc.
Please show us your code.
/r/learnpython please
If you've written it starting with W, your W branch is constantly returning true. I cannot help you unless I see your code.. (post it on pastebin or github) and then I can further elaborate.
If I wrote libraries, I'd use MIT for those. Since I pretty much only release applications, I use GPL.
The GPL's aim is to promote Free software, not open source. But yeah, both open source and Free sofware can be commercial. Both are capitalist ideologies and explicitly allow for commercial use.
well, i don’t think we need #2, as we can do: def f(arg=frozenset()): # immutable empty set ... def f(arg=()): #immutable 0-length sequence ... the only problem is the lack of `frozendict`. we’d have to implement it as: class ImmutableDict(collections.Mapping): def __init__(self, somedict = ()): self._dict = dict(somedict) self._hash = None def __getitem__(self, key): return self._dict[key] def __len__(self): return len(self._dict) def __iter__(self): return iter(self._dict) # throw these in for increased usefulness: def __hash__(self): if self._hash is None: self._hash = hash(frozenset(self._dict.items())) return self._hash def __eq__(self, other): return self._dict == other._dict then def f(arg=ImmutableDict()): #immutable empty mapping/dict ...
Seeing as software licenses (with disclaimers) are typically written by or in cooperation with lawyers, and Sam Hocevar, the writer of the WTFPL, isn't, I'm not going to take that bet.
Do contributors automatically become copyright owners regardless of the amount / type of contributions? I am considering changing the licenses on a few of my projects, and was wondering whether or not I had to ask every person who made even the smallest contribution whether or not they were OK with me changing the license.
I figured it out. I was writing my "or" statement wrong. if variable == x or y should of been if variable==x or variable ==y Silly mistake, as I said it was probably easy
type hinting/annotations are coming: https://www.python.org/dev/peps/pep-0484/
I use GPL because I am a free software advocate. I want all users of my applications, even if it's a fork, to have access to the code I wrote. 
Python isn't compiled, at least not in the traditional manner
 `g()` is best. In Python 3, you could use [function annotations](http://www.python.org/dev/peps/pep-3107) to indicate this: def g(arg: []=None): pass The list can be any artibrary expression, and isn't used by Python itself for anything. They are shown in `help()` though. The full syntax works like this: def func(arg:'exp', arg2: 'exp'=val) -&gt; 'return': pass You could also add `func.__defaults__ = ([], )` to the beginning of the function body, which will edit the default values to have a new list every time the function is called. This is a bit sneaky though. If there are any other default values you'll need to add them to the tuple as well.
If it a serious project that can impact a lot of people I would use GPL. If it is a toy thing that nobody would care about I will MIT/BSD it.
Yeah, I should have paid closer attention as I meant to check for None (and not a simple truth check). I use 2.7.6 at work, but I had no idea about function annotations. Thanks!
Yeah, that's what I meant to do (should have paid more attention, see my edit).
GPLv3 in all cases. Benefits to society are greater than the benefit to the individual.
There's a tumblr for code that appears in movies and TV: http://moviecode.tumblr.com/
Posted from mobile 
A license says what other people can do with your code, not what you can do with your own. By default, no one else has the right to do anything with your work that copyright law would prohibit (e.g. redistribute it, for free or for profit). A license grants these rights. If you change the license, then people who obtain your code after the change would be subject to the terms of the new license. They could still use the old version with the old license (if they can still find a copy). Just because you license a project as open source doesn't mean you can't also enter into other agreements. For instance, you could have a GPL project, but accept money from certain companies to license it to them under different terms. (So long as you don't have any other contributors, whose rights to their code you don't control.) Keep in mind that according to Github's EULA, by uploading your project to them, you are granting other Github users the right to view and fork your project, though they wouldn't necessarily be allowed to sell it or use it in other ways.
&gt; please, use MIT or Apache. What about BSD? My understanding is that its close to MIT.
&gt; one nice thing about f's definition [...] is to hint to users what types might be used or expected i think you're overselling this. almost all arguments don't have defaults, so almost arguments have the same problem.
For tkinter [PAGE - Python Automatic GUI Generator](http://page.sourceforge.net/) Also see: [Tkinter Rapid Application Development (RAD) library - Tkinter XML widget building](https://github.com/tarball69/tkRAD) 
In my experience, CPython (the implementation you're probably referring to) can indeed grow in size with long-running processes. They're not true "leaks" because Python is gc'd, but the runtime can do odd things regardless. Try it and see how much memory is used, Linux wont' lie to you at least. Memory consumption in general is an issue with Python. I spent a bit of time last year writing a [slotted object](http://stackoverflow.com/questions/472000/python-slots) XML parser for use on parsing large XML files in RAM, caching millions of dicts in memory can run to gigabytes, unexpectedly, due to the extra information the runtime stores "next to" them for providing extra functionality, faster sorts etc. If you really want to dig into memory usage, Guppy/Heapy are very handy.
&gt;but in a loop, when the same variable is created/recreated shouldn't it overwrite the old variable its replacing in memory? In general, yes. Memory leaks are more common in non-memory managed languages, where they're often caused by something that allocates memory, but forgets to free it (or fails to free it in some particular circumstance). Languages like python that provide memory management handle the lifetime tracking and cleanup of objects for you, so this generally won't happen. However, there are a few cases similar issues can happen even in a python (though likely none apply in your case): 1. Keeping stuff alive accidentally. Python will keep objects in memory so long as any other object points to it. When the last object that references the item gets destroyed, the memory for that object can be reclaimed to be reused. However, sometimes you may find that you've accidentally held onto the object somewhere else, and this is keeping it alive (eg. you stick it (or something that reference it) in a list or each new item keeps a reference to the previous item, keeping them alive. 2. Circular references with `__del__` magic methods. There's a possibility for two objects to reference each other. Eg. you could have an object that holds a reference to its parent, while the parent also has a list of all children. In this case, a simple approach to memory management might result in both of these keeping each other alive, even though nothing outside this loop uses them. Python does have a means of breaking such cycles and reclaiming these objects, but one consequence of these scenarios is that `__del__` methods (special methods that execute when an object is destroyed) can be dangerous in such scenarios, and so python won't destroy such objects. If you've no idea what `__del__` methods are, you probably don't need to worry about this. Unless you're using such objects, it's unlikely to bite you. 3. Memory fragmentation. Sometimes, a particular *pattern* of memory usage can screw you, even though actual memory usage remains constant. This can happen when when what gets freed each cycle results in "holes" between more long-lived blocks of memory that end up being too small to be useful. Your first query might result in memory like `| A | B | C | D |...` but after a bunch of cycles may end up with `| A |.| B |.| C |.| D |...` - you're still only actually *using* the memory for A,B,C and D, but those holes mean the amount of *useful* memory (or address space) has shrunk. This isn't a terribly common occurance, you'd need to be reallocating a bunch of structures, and be using a good chunk of memory for even a single pass for it to ever be a concern. But such usage patterns can result in growth. In general though, you're probably fine. Though as issue9mm mentioned, you should probably add a `time.sleep()` call in your loop so that you don't end up hogging all the CPU. How long you sleep for will depend on the script - if these results don't need to be updated more than once every 10 seconds or so, you could wait that long. If it's time-critical, make it a fraction of a second. &gt;should i declare all the variables/containers that i need for the script outside of the loop, and just have the loop add/replace the contents of each variable? This won't make any difference. Python doesn't really have a notion of "declaration". As such, no - just use the variable within the loop as you have done.
Thanks for all the information man! I will make sure to get explicit permission from contributors before changing the license. And I won't add a Copyright assignment thing unless / until I own a big well established organization (such as how Microsoft deals with TypeScript)
[networkx](https://networkx.github.io/), install with a simple pip install networkx Optional dependencies, such as NumPy ans SciPy which enable some other representations and features [are listed here](http://networkx.github.io/documentation/networkx-1.9.1/install.html#optional-packages). You can download wheel files for these packages from [this site](http://www.lfd.uci.edu/~gohlke/pythonlibs/). 
Python isn't really meant to be run indefinitely like this to complete routine tasks. That's what cron jobs are for. Look at using celery which will facilitate your jobs in python
Yeah, I'm just speaking to the OG GPL. Although frankly, even LGPL carries a GPL stink when it comes to trying to get legal's permission to use it as part of a pipeline. I've gotten clearance, but it's always after an initial denial.
a simple way to do it would be to create a CherryPy3 server application which uses the Monitor subclass to run scheduled tasks.
You're kind of asking the wrong questions. Memory usage is a concern, but it's not your biggest issue. Writing a program that does while True: do_db_stuff() with no delays is most likely a really bad idea. How often do you really need to run your queries? How long do they take? If you don't need to run things more often than once every few minutes and the queries don't take very long to run, then cron will do what you want. If you need to run the queries about once a minute or faster then cron is generally not the best idea, especially if there is a chance the program will ever take longer than a minute to run(see: thundering heard). For this type of thing it is best to use something that does process supervision * systemd * daemontools * supervisord * a wrapper script that does `while true;do ./yourprogram.py;sleep 60;done` ) Now, if once a minute is still too slow, and you need something more like once every 5 seconds, then that approach will have too much overhead and you need something like your original: while True: do_db_stuff() sleep(5) In this setup, your problem really isn't memory leaks, it is availability. Inevitability this will crash at some point - the db restarts, something raises an exception, whatever - so you should still be using process supervision. As long as process supervision is in place, you can then change to something like for _ in range(100): do_db_stuff() sleep(5) Which will make it regularly stop and restart on its own. An added benefit of this is that upgrades are easy. Just push out the new code and wait a few minutes (you can always write code to avoid the wait, but more code == more bugs). With efficient queries this will still work ok down to under a second, but at that point you should be looking at other ways to do this, like a message queue or background job system of some sort. Another issue to be aware of is deadlocks. You need a way to detect if your code hangs and stops making progress. The easiest way to do that is to use `signal.alarm` with a timeout that is much larger than your expected loop iteration.. so for _ in range(100): signal.alarm(305) # if this takes more than 5 minutes, kill myself do_db_stuff() sleep(5) I've written "daemons" that worked this way that have ran for years without issue. TL;DR: Use cron or process supervision, don't use infinite loops, use `signal.alarm`
&gt; your first example actually works, try: &gt; print("apple".replace('l', '\\')) Using "print" hides the extra '\' &gt;&gt;&gt; x = "apple".replace('l', '\\') &gt;&gt;&gt; x 'app\\e' The string contains two slashes, not one.
/r/learnpython is a much better subreddit for these kinds of questions. Having said that, no, you are wrong. NOT using print adds an extra backslash. It's called the escape character. Try this: &gt;&gt;&gt; x = "apple".replace('l', '\\') &gt;&gt;&gt; x 'app\\e' &gt;&gt;&gt; len(x) 5 
Hey, I just made a post [here](http://www.reddit.com/r/Python/comments/2z6wue/i_too_am_interested_in_an_infinite_loopbut_id/) about making a monitoring script to run a bunch of python scripts and report stats, kill/restart and so on. I'd be really keen to get your take on how to approach this as it's really not my field of expertise at all.... Cheers
&gt; If it's time-critical, make it a fraction of a second. Will making time.sleep() a fraction of a second (0.1-0.2) make a big difference on if there were no sleep at all?
It'll probably change your CPU usage from 100% to something much much lower since queries and the like tend to have lots of stall.
Yes if you have a loop like that running non-stop without time.sleep() then you will max out your CPU 0.1 seconds should be enough to fix this in my opinion at least (which in all honesty shouldn't count for much)
Thanks for the very detailed reply. I appreciate it. 
I really like the artwork. I'd love to see more friendly illustrations in introductory programming guides.
 &gt;&gt;&gt; "app\\e" 'app\\e' &gt;&gt;&gt; print("app\\e") app\e 
I'd like to see an API in between the single-element `next()` and evaluate-all `list()` similar to C#'s LINQ, but I doubt it will ever happen.
It's the difference between `repr` and `str`. &gt;&gt;&gt; s = 'app\\e' &gt;&gt;&gt; print(repr(s)) 'app\\e' &gt;&gt;&gt; print(str(s)) app\e &gt;&gt;&gt; s 'app\\e' &gt;&gt;&gt; len(s) # Note that the '\' is counted as a single character 5 &gt;&gt;&gt; len(repr(s)) # This string contains two quotes and an extra backslash 8 `repr` tries to make a lossless representation of the item as a string. `str` tries to make a nice-to-look-at version. You can see that the `repr` version includes the quotes and escape characters, and that's what the shell uses when it echos a value.
You might want to try asking on the mpl mailing list whether it's possible/practical to do what you want with mpl widgets. That's a fairly specific question, and I don't know how many people on here know about it.
I second relational databases. Django's ORM is powerful and flexible, but if you don't understand the underlying principles you can get yourself in a whole bucket of syrup.
I use MIT, BSD, or something equally simple. I do a lot of work in the numpy/scipy ecosystem, so I aim for maximum compatibility with those licenses where reasonable. In science, information should be free, and that means free to use however you please, in any context. Imagine if E=mc^(2) was under the GPL?
Thank for the advice! This question might be hard to answer but what should be the main things I learn in flask/Django. (i.e. user authentication, WebSocket, Admin features, etc.) 
I don't know what the support for websockets are like in Django, I've used Tornado to do websocket stuff though. A lot of the boiler plate user authentication stuff in Django is already done for you, but you can customize it. Admin features are also already built in for you, you just have to basically provide links to all your models so they show up in your /admin page. I would also look into providing a good API. The phrase everyone is using nowadays is REST APIs (Representational State Transfer).
ahh... I misinterpreted your statement, my apologies.
huge difference. Try: for i in range(10**10): x = i**671 vs import time for i in range(10**10): time.sleep(0.1) x = i**671 and monitor your cpu usage (Press ctrl+c to cancel)
Looks pretty good :) I do want to point out that one part of what you said about `@property` isn't exactly right. You say &gt; The important part here is the @property decorator means that IO is computed lazily and only performed once. Otherwise we would be creating the entire corpus of words every time the method is called without the decorator. In reality, just adding `@property` doesn't prevent repeated computation. If you created a `Dictionary` and accessed the `words` property several times, the computation would be repeated. For example, d = Dictionary('/usr/share/dict/words') foo_present = "foo" in d.words # performs IO once bar_present = "bar" in d.words # performs IO again This doesn't happen in your code, because you're just storing a reference to the `words` property (i.e., the generated set) and then using that. However, if you told someone that the IO was only performed once then they very well may do something like I've presented above and be in for a nasty surprise.
write some small web app, and make your github green
Oh, phew, thought so. I should really stop underestimating myself. I *thought* OP was being a bit iffy, but I just assumed they knew better than I do. Turns out I'm right and I know my @property! Yay! 
Have you made space for "remote" location in your data model? Please do if you haven't 
Yes.
You can go with cached property instead to avoid this ([SO question](http://stackoverflow.com/questions/6428723/python-are-property-fields-being-cached-automatically)) but then again that kinda defeats the whole purpose of property.
Thanks I'll check this out :).
That's why LGPL exists, right? I usually just use LGPL for almost anything. Means my program stays open source, but anyone can use it however they fancy.
No, thanks you for your responses. Definitely better to be corrected and learn something than going on wrong premises for a prolonged time. I'll definitely need to look the getters and setters! 
Why don't you just run a cron job? Whenever you need to run it (up to once a minute IIRC), it runs and finishes, so there would be no memory leaks anyway.
thank you. i was always going to be using a sleep, although just out of habbit as i forgot about cpu usage ;) , and through a bit of reading i figured that i would need to use a supervisor, like supervisord. Converting the loops to 'for' loops when the scripts are under supervision seems like a really good idea, when the script terminates itself after the loop runs out, all the associated memory is released right? then the supervisor just starts it up again. Ive considered cron but i would imagine that the slowest id want the loop to run would be in 5 second gaps. And my queries may return vastly different amounts of data, so as far as i know, cron will just start up a new instance of the script without knowing if the previous instance is finished or not. im thinking a supervisor is the way to go! and thanks for the signal.alarm tip!
Wow Thanks! Definitely let me know if you find anything useful! I've been working on that project for like a year now, and i've proably rebuilt the entire codebase 3-4 times. Currently the code is a little hard to follow because all the transport is implemented with cooperative multitasking and coroutines. I think I originally wanted to try hooking it up to an event loop, maybe asyncio, but unfortunately chose not to due to losing compatibility. But I did definitely learned a lot about concurrency, synchronization, locking, and the wisdom to stay away from threads, which still kind of makes my head spin!
I looked up the source for the property decorator, and only found the auto-generated C stubs. When I looked for the C source, I found this file with some commented-out Python: https://hg.python.org/cpython/file/tip/Objects/descrobject.c#l1268
thanks for the reply. Is it possible that, say if one query brings back 2mb of data, and the next one brings back 1mb, when the variable is overwritten would the remaining free mb still be held onto? in some videos and reading i got the idea that there is a slight issue with Python and memory allocation, that sometimes it can free up memory for its own use, but it doesnt always give that memory back to the OS. 
If the maximum interval is 5 seconds, running once it finishes after more than a minute will give you a lower resolution. Unless I misunderstood your statement. Anyway, if you are worried about running in parallel if it takes too long, you can use `run-one` on Linux. * * * * * run-one /usr/bin/python3 infinite_script.py
A good example of a property is this: class Temperature(object): def __init__(self, kelvin): self.kelvin = kelvin @property def celsius(self): return kelvin - 273.15 @celsius.setter def celsius(self, value): self.kelvin = value + 273.15 &gt;&gt;&gt; temp = Temperature(300) &gt;&gt;&gt; temp.kelvin 300 &gt;&gt;&gt; temp.celsius 26.85 &gt;&gt;&gt; temp.celsius = 0 &gt;&gt;&gt; temp.celius 0 &gt;&gt;&gt; temp.kelvin 273.15 Getters and setters allow you to implement logic, but expose them as simple variables. For example, I could also make a getter (`@property`) that takes a value from a database and returns that, and a corresponding setter (`attr_name.setter`) that pushes the provided value into the database. I'm not saying that's good design, but you could do it :p The primary advantage is that the user of the class doesn't give a fuck about what they're working with. According to them, they're simply working with variables.
I'd suggest rather than building up a list of tools you've learned to use, show that you're proficient in using them, by doing something. Don't just learn a database technology, make something that uses that database. Doesn't have to be something huge, just something... "real". Rather than "Look I can put data in a database and read it", make a little web app with flask, where Users can type in a message, and it gets saved to the database, then the page lists all messages (Basically a message board). You get the idea, make things, not just a list of stuff you know how to use.
You said that the maximum interval is 5 seconds. This means that you want to run it once every 5 seconds. But you said that it could take more than a minute depending on the data, so cron would run multiple instances in parallel. What I meant was that, in cases where the script takes longer than five seconds to finish, the interval would be longer than your requirement of a maximum interval of five seconds. This would mean that there is something wrong (either with the requirements or with the implementation). I think the next instance would run on the minute. Let's say we have these cases, each starting at 00:00:00: * script finishes in 3 seconds → next script runs at 00:01:00. * script finishes in 1 minute → next script runs at 00:02:00. * script finishes in 1 minute and 10 seconds → next script runs at 00:02:00. * script finishes in 1 minute and 59 seconds → next script runs at 00:02:00. You would have to test that, and/or read the run-once manpage.
This is fantastic to read! I had a very similar experience to you about three years ago now, I've never looked back too my old career. Keep up the hard work.
I had no idea until my lab bought one and told me to make it work. So not everyone, I think. edit: I'll add it to the post.
and ES6 Javascript
Thanks for such feedback. Please tell, what browser do you use?
Yes, definitely - a *huge* one. You really have to grasp that computers work on a whole different timescale from ourselves, where 0.1 seconds is actually a **huge** period of time. A modern computer's clock tick is a fraction of a **nano**second. That's almost unimaginably small. To put it into perspective, if you took a 3Ghz computer, and slowed it down so that one clock cycle was a second instead, a sleep for 1 second would be the equivalent of waiting around for a **century**. As such, even those fractional second sleeps make a massive difference - they're the metaphorical equivalent of telling the process to take a few years off before getting back to the job. In fact, even a `time.sleep(0)` can have a noticable difference, despite seeming a no-op. The reason is that, normally, a operating system will allocate each program it wants to run a *timeslice*, during which it executes it. At the end of it, it'll switch to another process. Each timeslice is tiny, by our standards (say, 100 millisecond), but in "CPU time" it's still a significant chunk. However, it doesn't always use all of it. Sometimes, it may have to wait (eg. for a disk read, or network response), and rather than spinnin the CPU till the end of the timeslice, those operations basically put the task to sleep till the response is ready, immediately pausing it and scheduling something else. A sleep of 0 does the same, though there's no extra delay. It'll switch to the next task in the queue till everything else that wants to run has done so, which means that if there's other work to do, our task won't waste all the CPU time it was allocated.
There's a Python class through Coursera.org that might be of assistance. You can learn through that class and then apply it going forward. Best part is...it's free.
So he took it to a repair shop.
As the others have said it's really not clear what you're asking, but I'll take a stab at what I **think** you're after. You can think of DRF as simply being views (class based) that are specifically about REST APIs. So yes, using DRF to kick off tasks like you are describing (likely with something like Celery to make them async) is a perfectly reasonable and common thing to do. You would just craft your DRF API Views to the particular task(s) at hand and not really have them doing CRUD style operations on a specific Model. So likely a lot of subclassing DRF's APIView and not using the Generic or ViewSet portions. 
MIT. Simply because I can understand it myself.
Agreed. Whether one likes/prefers Django or not a list without it in the Top 10 simply isn't credible. 
I've just started learning Python, The Hard Way book, literally started today, and reading this kinda makes me happy knowing that I'll hopefully have the same feeling (and be able to understand what the hell you wrote) at some point. I've already got the little oooooooo!! feeling just seeing simple stuff outputted, maybe it's because it's my first glimpse at code and how stuff actually works. Like it does stuff! It's awesome. On a break now because my back hurts from sitting at the desk too long :/ but I already want to get back on there and do some more, like a kid with a new toy. I'm sure there'll be frustration and headaches along the way but, as stupid as it sounds, I'm surprised by how cool it makes you feel when it does stuff. Congrats dude, and good luck with the job.
The micropython one does not work, unfortuntely. Here is an [issue](https://github.com/turbinenreiter/micropython-mpu9150/issues/6) I made about that. RTIMULib should work, though. The examples contain two sensor fusion examples. I will try it tomorrow. Thank you.
I see, thanks!
I worked on a similar project - data analysis for low energy electron microscopy experiments (condensed matter). I started writing the program using solely mpl. I eventually reached the point where I had pushed mpl's ability to construct a GUI to its limit. I then started using tkinter for a few small tasks like file dialogs for selecting new data sets to analyze, etc... but I also found some problems still with the focus not properly switching from the terminal (OS X) to the tk app. Maybe I just didn't do enough research but it appeared there was not easy solution aside from doing some trick like using subproccess.call() to run a bash command to launch an applescript to tell the system to switch a certain app to the 'front' I never got it working properly so I pushed on again with the next edition of my program. I started learning pyqt4 (python wrapper for the Qt GUI framework) I got a book that I highly recommend as a reference for examples ("matplotlib for python developers") This book provides a number of examples of how to embed mpl figures into GUI frameworks from Tk, Wx, Qt, and web based apps. This way you can use a true framework that was made for GUIS to do all the heavy lifting for your app (file dialogs, drawing to or updating the screen, buttons, etc...) and save mpl for the things it really excels at (plotting data) It took awhile to rework my program a bit to utilize pyqt4 but in the end it came out much better than I had it previously. if you're interested I can link you the github
Not the Python 3 interpreter, but one written with Python 3. The title is misleading.
No^wait^^stop^^^come^^^^back 
&gt; But I didn't want to become this article a long and "incomprehensible beast" That's what pretty much all articles about DNNs are - unless one is already familiar with them :) What I found lately to be a good vehicle to remove cruft is to work out a technical presentation which is still comprehensive. For example a colleague once asked me why elliptic curves are called "elliptic" despite not being ellipses. I had no idea and WP only left a cryptic remark. I found the following presentation http://www.hillsdalesites.org/personal/dmurphy/work/ellipticcurves.pdf and it clarified those things to me. It is spot on, it doesn't contain everything the professor is also interested in, and there are no gaps. Maybe it contains even too much text for a talk but that's another issue and it entirely depends on the speaker. 
Both methods are remarkably stable. I ran them to 100,010 digits and they agreed except for the last 10 (due to round-off errors). pi Machin 29.289 secs pi Chud 18.625 secs Difference in last ten guard digits: 1566426204 PS: run with pypy 
Because iterators/generators are "one shot", a consuming indexation would be somewhat unexpected behavior.
Why?
yes this is exactly the behavior I am talking about I just wonder why it isn't the default command corresponding to [i], given that the magic method is currently unused / not implemented. It would correspond to !! i in Haskell.
Keep in mind that running into the mutable default arguments problem is indicative of larger structural issues in your program. Regardless of your preferred solution, it's a serious code smell. Consider- if you call `.append` on the function's argument, then that change is reflected *outside* the function call, even if nothing is returned. There are two possible senarios: - This is your intended behavior, in which case, why are you accepting a default parameter? If the function is designed to mutate a list, then being able to not pass a list seems like a semantic error. - This is *not* your intended behavior- you don't want the caller's list to be mutated. In this case, why are you mutating it? If your function's logic uses an `.append`, then you should be copying the list before using it, in which case using an immutable default argument works fine: def func(arg = ()) safe_to_mutate = list(arg) ...
Awesome! very useful package. Going into my toolbox of things that deal with XML, JSON and YAML.
It does look blurry but it looks like they are setting the version number and two items at the top of the file, then importing a two letter module (possibly re) and then the rest of the imports look like what you'd find in a larger python file. I can't think of any other programming language that looks like what I'm seeing on his screen.
Huh? Having a bash-integrated Python could be really cool. Automating things on a whole new level. It's the simplicity of calling bash commands combined with the versatility and feature set of Python. 
This is my dream. I love Python. I don't love Bash-like languages. I love my shell. The fact that the prompt can be a function that returns a string really puts it over the top. I get much of what I would lose from zsh with that.
^^^^^don't ^^^^worry ^^I'm ^back now 
The reason is I am designing an application with a dark theme overall. The default titlebar ruins that quite a bit. The best I can think of doing at the moment is removing all buttons and adding my own inside of the application.
Both Firefox and Chrome has this problem. If you are developing the website. Try make the content shift to then right when window width is less than the content width. Or just get rid of the bar.
I always used 0.5, but 0.7 makes sense. I take it the best parent is 0.7?
I like the description of your project that you included in this post.
That is definitely a valid point. I was a little time constrained, so a lot of the program is not as as to polish as I would wish. But that's life right? But I did kind of put some thought into the names. I dunno how I feel about `WordDictionary`, `(More on this later)` but generally I try to reduce redundancy so I can get as much out of each word and not cause confusion. Sometimes more words just add more ambiguity. For instance don't you hate it when this happens. &gt;&gt;&gt; from datetime import datetime, time &gt;&gt;&gt; pi_day = datetime.strptime('2015-03-14', '%Y-%m-%d') &gt;&gt;&gt; pi_time = time(3, 14) &gt;&gt;&gt; pi_day + pi_time ------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-53-5f5601f4290e&gt; in &lt;module&gt;() ----&gt; 1 pi_day + pi_time TypeError: unsupported operand type(s) for +: 'datetime.datetime' and 'datetime.time' Crap I always forget that binary operators don't work on `datetime` and `time`. What I really meant to do was this. &gt;&gt;&gt; from datetime import datetime, timedelta &gt;&gt;&gt; pi_day = datetime.strptime('2015-03-14', '%Y-%m-%d') &gt;&gt;&gt; pi_time = timedelta(3,14) &gt;&gt;&gt; pi_day + pi_time datetime.datetime(2015, 03, 14, 03, 14, 00) My thought on the `TextCorrecter()` and the `WordDictionary()` classes was around the same, that they are more or less concise over descriptive.. spelling = input('&gt; ') dictionary = Dictionary(words) # vs WordDictionary(words) if spelling in dictionary.words: return correction = Correct(spelling) # vs TextCorrecter(spelling) .. maybe? candidates = correction.edits() &amp; dictionary.words if not candidates: print('No Corrections') print(min(levenstein_distance(spelling, c) for c in candidates)) Which kind of made sense at the time. But thanks for the advice. I feel like sometimes naming variables is the hardest part. I try as much as I can to refactor new names if the responsibilities of the program shift during the middle of development, but I should definitely do this more often. Also probably should use an IDE or something that can go and replace all instances of a word in the document. But honestly, without static analysis you can never be sure that everything will get covered. But I really liked your advice about classes being nouns rather than being verbs. I've actually never heard that before, but it does make a lot of sense.
Thanks for the support. I'm glad to know that there are other people who've done this and are happy as well!
Cool, so I found a pretty good article on the `@property` decorator. http://nbviewer.ipython.org/gist/ChrisBeaumont/5758381/descriptor_writeup.ipynb tl; dr is that descriptors are just reusable properties, and properties interfaces with class descriptors, so that it seem like they disguise attributes as function calls. The reason why setting a property on an attribute makes it read only is that every time the interpreter encounters code like `m.budget = value`, python automatically assigns a value by calling `budget.setter`.
Great idea, but it's very confusing that `${&lt;stuff&gt;}` has two different meanings depending on the context. I think it would be beneficial for code clarity to either remove the python-context meaning (look up in env: how often is this useful?), or give it another syntax like `%{}`.
&gt; Python or basically any computer language could take the place of any other computer program in theory. Very true. &gt; What sorts of repetitive tasks do you need to automate? Kind of hard to fully explain but I would say mostly mouse clicks for part of my project. This program, a laboratory software, uses database but I have no access that that so my coworkers and myself are forced to do the same 40-70 mouse clicks a few times a day in order to setup our analysis . Another part deals with exporting. The programs only exports to excel. I could deal with VBA to manipulate the exported data but I'd rather not plus I don't want to have half of the project in one language and the other half in another. Again, I have some programming experience but it's all been academic. I'm struggling to find the "right" solution to this real world problem. Thanks for your time.
Definitely hope the best luck to you to! I remember reading through /r/programming for the first 6 months just thinking this could not be English! I also read through the Zed Shaw compendiums. I did his C course which kind of gave me a really rough time. C is a very beautiful and quirky language, but honestly don't think Learn C the Hard Way was great choice for new programmers. The best advice I can give would be ya, stick with it. The best way to keep at it is to keep challenging yourself to improve. You almost have to prove to yourself that you have learned something, which kind of sounds silly, but it's not like there will be a standardized test which you need to study for to keep yourself accountable. The easiest way to lose interest is by tricking yourself into believing you understand something because you finished a MOOC or finished a book. Eventually you'll get to a blockade where you just can't possibly climb, and then the process of backtracking and recovering is extremely hard. But besides that, learning things every day making lights blink and lines print at your whim is quite magical. If you ever get to read "The Mythical Man Month" by Brooks, I highly recommend it. I think after reading the first chapter, It pretty much settled it for me. &gt; "The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures. (...) Yet the program construct, unlike the poet's words, is real in the sense that it moves and works, producing visible outputs separately from the construct itself." It's very captivating, it almost makes the entire experience bearable I think. But honestly, the child like view is naiive and it's hard to continue without a good support and community. For me, I ended up reaching out to some friends early on who took me on and pushed me along enough where I could eventually learn and grow on my own. Definitely look for those people and those communities, they're invaluable!
Yeah, I couldn't come up with anything else that was short, descriptive and available. Name comes from portuguese. Seriar (v) To serialize. Names are hard. I am open to suggestions. There are only two hard things in Computer Science: cache invalidation and naming things. -- Phil Karlton 
You deserve GOLD. If i had XD
Very interesting. As for xonshrc, I'm assuming it's written in xonsh, but is there any need for a shebang on it? Edit: Having a bit of trouble with getting globals (read: imported classes) into functions -- not sure what else causes it. Otherwise, it's pretty nifty. Will be messing with the next few days. 
&gt; how it manages memory You're using a lanuage where the whole point is you don't need to know. You can learn, but you'd really want to write some swigged C++ code first. &gt; how can you effectively use magic methods Read the PEPs &gt; how to deal with large code in Python Write one. You learn by doing. I've got a 200k lined open source project. Almost everything I wrote the first 6 months have been scrapped for various reasons.
My advice is: you can't and won't learn those things without needing to do them to solve real problems.
&gt; I take it the best parent is 0.7? I'm not sure it matters with a well-selected parent population.
I think the post by Darkmere is good guidance. I wouldnt worry about learning as much as doing. Whatever useful problem you can solve will require you to learn certain things along the way. _deliverables_ are what the work world looks for. By the way, what is _backend_ web development? I know what backend development is and I know what web dev is. But backend web dev sounds like an oxymoron to me.
Could you share the link to the project? 
Or you could've just used gfycat's "fetch" function: http://gfycat.com/fetch/http://xonsh.org/_images/xonsh-demo.gif
That's exactly the point of your project, though. Writing the code is pretty easy - figuring out WHAT code to write is difficult. In this case, start from a description of the DNS protocol. What do packets need to look like? What data do you need? Then how do you put that into Python?
[Here's a comment I wrote on the topic a while ago](http://www.reddit.com/r/learnpython/comments/2d8zj3/ask_anything_monday_weekly_thread/cjnoct1?context=3). 
Had issues installing this on Debian 8. Will post the error when I get home
Sounds like it would be sloooooow
&gt;Formally removed support for 2.6 is 2.7 still supported?
Yup. https://github.com/SteveDoyle2/pynastran/ Also, I can't vouch for the accuracy of that number. It was 200k at one point. I kinda stopped caring other than remove stuff where you can. As this famous python talk said, we deliver features, not code. Stop writing classes https://www.youtube.com/watch?v=o9pEzgHorH0
I'm ^so^^happy!!
Thanks for the advice man, I'll check out the book for sure. I'm sure it's gonna be super difficult/frustrating at times and a long long journey, but I'm committing to it. The advice I seem to read most is 'stick with it' actually, so I'm half expecting to lose my hair and get depressed looking at code once I'm really into it, but I'm gonna try and stay as motivated as I can. 
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp; best of luck!
It's helpful to name a package something related to what it does. While xonsh is a play on shell I'm not sure what pyster means.
Maybe half a brownie point, if your potential employer likes SO.
I'm sure you'll do great! Let me know how if goes or if you get stuck. Definitely much better to learn from others mistakes then having to make them!
&gt; You're using a lanuage where the whole point is you don't need to know. It's still a good idea to know what the `id()` function does, why you shouldn't rely on it for stuff that can be interned, and to a lesser extent the GIL and how it limits Python (not by much, of course, because cPython is still awesome despite the GIL :] )
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
If you haven't read the [Data model](https://docs.python.org/2/reference/datamodel.html) page of the python docs, that would be a great start.
That is a bug, @nealeyoung. If you could please open on github an issue that'd be great!
Thanks for the feedback. I was wondering how confusing this was going to be. I am open to suggestions on syntax changes. I like the idea that $ always means to do something with the system enviornment, whether that is environment variables or subprocesses. I think `$&lt;&gt;` is another option for syntax. Again, open to ideas here.
Thanks! I'd love to see this happen. http://xonsh.org/todo.html#jupyter-notebook-shim
I'd be super happy if you put this on a hosting site somewhere and then PR'd an ebbedded version of this into the docs!
"False, 0, or otherwise empty" can be summarized as "False in a boolean context" -- that is, its __bool__ (__nonzero__ in older python versions) method returns False or, if not implemented, its __len__ method returns zero (but that's probably far too verbose).
My pleasure! :)
I've done threading once in a GUI, so the GIL and I are good friends. I do a lot of multiprocessing though for numerical calculations though and you don't need to worry about it there. It really is shocking how many screwy things you can do in Python. If you can't understand the code you wrote, just add another layer of abstraction, so no one else can either.
Frontend(client-side) being html/javascript/css and backend(server-side) being some scripting language, python in my case. Backend handles all the logic needed to run the web app. That is at least the understanding of it I have as of right now. 
&gt; that returns a string In a better case it's a ~~function~~ generator that eats chunks (at least newline-terminated) and produces chunks. E.g. `tail -f file | grep --line-buffered ...` 
You clearly aren't doing this to make money, so why not make these open source?
Impressive work. I have a feeling, though, that it would profit from including `numba` in the benchmarks, since it has virtually the same goal, i.e. Python specializer for a subset of the language. EDIT: on the seconds thought, maybe `numba` wasn't mature enough in 2013 which would explain it being excluded.
David Beazley has some cool talks about advanced Python, check them out. 
If you're on Linux, you probably use bash as your terminal/command-line interface. xonsh is an alternative to that. You can type commands and start programs as you normally would, but additionally you can also write instructions in Python. If you're not on Linux or don't know what a terminal is, xonsh might not be for you.
remodel is a very simple yet powerful and extensible Object Document Mapper for RethinkDB, written in Python. 
But isn't this just for fun? I mean anybody would use this in production? Why bother with the name? BTW cool project :)
These one-liners would be good examples of functional style if there are well formatted, wouldn't they?
https://docs.python.org/2/reference/datamodel.html
I deduct you one point for bragging via a double cross post. No one cares about that shit.
Was surprised this morning http://i.imgur.com/Y4FfLWV.png
[**@daraobriain**](https://twitter.com/daraobriain/) &gt; [2015-03-17 10:07 UTC](https://twitter.com/daraobriain/status/577773188370866176) &gt; All right people, it's very simple. A shamrock has THREE leaves. And a four leaf clover has nothing to do with Ireland. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Pythran is very cool and the team behind it are fast to respond to problems. Note that it is Python 2.7-only (sadly they've no plans to update to 3.4+ yet). When it works I've found it to be easier to use than Numba, when it fails it blows up (Numba doesn't tend to blow up, it just runs really slow). If you're using Py2.7 and have loop-based code in short functions (e.g. &lt;50 lines), it is worth exprimenting with.
ELI5 Why I should this over for example `sh` module for python? For those who don't know what `sh` is, it is module that let you do stuff like that from sh import ls,grep print(grep(ls('-a',"."), "*.py")) And Ipython + bash for rest. 
Most important is removing ambiguity, so that when they see `${...}` beginners don't have to remember which meaning came with which context. And I think that applies to all those "exec primitives", if they work the same in both contexts (insofar as that is possible, I'm thinking now of $PATH being a python list), that's going to make the language easier to understand. And I also have another suggestion: it might make sense to convert the return value of the expression in `${..}` (in the not-env meaning) to a str implicitly, because that's the only valid type anyway (as I understand it). That way, you can do stuff like `echo ${3 + 4}` and not have to use `str()` explicitly, which looks a bit cleaner. Anyway, good luck with this project, I like it a lot.
see also a discussion at http://www.reddit.com/r/Python/comments/2xcjht/new_website_for_rapydscript_the_pythonic/
I missed that. Thanks.
is that the one and only, our lord and savior, on the background? 
What about pycontracts? What is your advantage?
&gt; David Beazley has some cool talks about advanced Python, check them out. Yea he does. This guy is really good if oyu want info on magic methods.
&gt;&gt; how it manages memory &gt;You're using a lanuage where the whole point is you don't need to know. I agree - but you do need to know how the garbage collector determines what it is allowed to clean up otherwise you can write some circular reference that never gets gc'ed. It's helpful to know about `weakref` for reasons like this.
I was unaware of pycontracts - but aware of others that are similar (like schematics, which evolved from DictShield) pycontracts (and schematics) are data validators - those are great, but a function validator is different. thedoctor allows you to apply validation to arbitrary functions - after they've been written. pycontract allows you to write classes which are validated as you assign to them 
There is a face in the background
This isn't a replacement for the `sh` module, this is a replacement for BASH. Think zsh, except with Python.
:'( windows only? &lt;\3 
It's an extra step that adds little benefit (IMO). Or am I missing something?
I don't understand why he didn't use a layout on the window. It looks terrible like this, and the widgets don't scale properly when the window is resized.
&gt; for_later = request.get('porn.com')
I pre-ordered it I'm supposed to receive it Friday; pm me later next week and I'll let you know what I think. Hopefully I'll be able to write a decent review of it some time later.
I know it always more fun to write the code and solve the problem yourself, my learning story was similar to yours you might like to check out this implementation http://norvig.com/spell-correct.html as reading it really opened my eyes to the spell check problem 
There *might* be a way to write myfunc in such a way that it would be line-buffered. Can't figure out where's python and where's shell, though; `def` of functions just hangs until Ctrl-C.
Assuming your data is Row-Major, your are indexing over the 'slow' axis. Slicing off the last axis does not yield contiguous memory and thus your advanced indexing will be slow. Try rolling the memory access on to the first axis: um = u[j, :, :][gr.umapm]
Found the One True God's reddit account.
Self hell. Compile at run time. Import fun. Whitespace. AND WHO MADE PRINT A FUNCTION?
Thanks, and if you were wondering "What is ChromeDriver?", here's something to get you started: https://sites.google.com/a/chromium.org/chromedriver/getting-started
It's no Gabe you heretic!!
I believe I have both Python2 and Python3 installed, but when I run "python --version", it returns "Python 2.7.9" which is what I want. I have done multiple ways of installing the OpenCV libraries, including directly downloading it from their website, running "sudo apt-get install python-opencv", downloading it from a git repo that someone had of opencv, etc. None of these have worked.
that's not T-Dog, you heathen.
Bitbucket is built with Python. Mercurial is built with Python. The project is built with Python. Seemed pretty Pythonic. Buh-bam! :-)
It says: "/usr/lib/python2.7/dist-packages/cv2.so"
As someone who loves python (a lot!), but has never managed to quite figure out how to get a nice-looking gui onto his programs, thanks! Now I have some work to do... 
okay, mine on debian says /usr/lib/python2.7/dist-packages/cv2.x86_64-linux-gnu.so So, should be good. Then, in the python shell, what does import sys '/usr/lib/python2.7/dist-packages' in sys.path return?
I'm the author of the book. Let me know if you have any questions!
I like using geopandas for certain tasks because it helps me keep my whole workflow in python - specifically, ipython notebooks, which I like to use for shareability. GDAL + postGIS are great for bigger tasks or one-offs because they wrap-up so much useful spatial analysis/conversion functionality.
Yeah, I dunno. I'd apt-get remove python-opencv, apt-get update, and apt-get install python-opencv again. good luck.
Tried it and it didn't work. Sigh, I've been searching all day and just can't find a solution anywhere.
pycontracts is nice, has numpy matrix size support, but once you declare a new custom contract you cannot change it. 
Thanks a ton!
These are great points. Thanks! I'll make an issue for this thread.
It is now a video :)
That license tho.
OpenCL can be run on the CPU or GPU, but there's no speedup on the CPU. AMD cards have supported OpenCL 2.0 for ages, Nvidia is stick on 1.1, you don't need a workstation card for it, normal cards work. Speed depends entirely on what you're running, but here the speed also depends on numpy's ability to perform what you want, with OpenCL. You'd need a benchmark suite to figure out if it's worth it for general usage. 
What about it? 
If you're still having troubles, try this compiled copy. [https://mega.co.nz/#!UIYjxara!LAZOBU7PbMnZg5arR6IP_KFBMWhYsGkVECTQd93F254](https://mega.co.nz/#!UIYjxara!LAZOBU7PbMnZg5arR6IP_KFBMWhYsGkVECTQd93F254)
GPL or 500+ USD. Not too attractive. I'm keeping my eye on PyOtherSide for when QtCreator manages to stop crashing on Plasma 5, at least that has a permissive license.
Here's [a screenshot](https://camo.githubusercontent.com/bd2442666e9812bb6a0987aeb547f4275f0474e5/68747470733a2f2f7261772e6769746875622e636f6d2f6a61636b6d616e65792f626173682d70726f66696c652f6d61737465722f73637265656e73686f742e706e67) of this in action. Long story short, I got tired of getting burned by pyenv's local vs global versions. If you set a local version, it overrides any global versions and you won't be able to see why unless you notice a `.python-version` file sitting in the current directory or a parent directory of the current directory.
I would suggest to use ``argparse`` and not just catch ``exception`` and print it - where is the error management in that? Python does so by itself if you do not catch them! So, where is the added value? 😏 I had no closer look into the parsing but the usage of ``isinstance`` is often not a good choice - but perhaps it fits here.
[Magic Methods](http://www.rafekettler.com/magicmethods.html) are petty cool.
* Legibility, much of it just looks like pseudo code * Decorators * Multi paradigm * Dynamic, but you can fairly easily use types * one of the best communities, IMO. * Scripting, I'm not about to write java or c# for those tasks. * interactive interpreter (repl) * things like ipython It isn't 100% unique in any one major way that I can think of at the moment, but the combination of the strengths are pretty fantastic. Edit: added 2 items
Canopy? i.e. covers everything...
Thanks, but that nomenclature (searching "python canopy" in google) is kindof already taken. https://www.enthought.com/products/canopy/
Going from zero to hello world is really easy.
"Blog Removed" It'd be fun to try some FFT operations and compare the difference.
In all fairness unless it's a platform heavy language like C# or android hello world in most languages are pretty easy.
a strong and safe type system
Python has "types" but it's not really a type system. It's more the easiest way to keep track of objects. We don't have forward declarations, typed arguments on function definitions, etc. I'd say, Python is more concerned with what an object can do or has rather than what it is 99% of the time. Contrast to Haskell, which I'd say is a type system that is coincidentally a programming language. :P
The awesomely awesome and awesomely huge community.
Heh, not for me :) I'm not really a programmer. I guess I shouldn't have replied as your op does specifically state "coming from many other languages"
Hard to tell without the code, but it could be that you're leaving the scope where the list was created and it gets destroyed. Or you're reinitializing it somewhere.
There's no `new` keyword. Sure, it's not revolutionary. But in other languages when you say `new MyClass` you're obligated to return an object. But in Python you create a class by just doing: `MyClass(...)`. Aside from the class name convention (UpperCamelCase), you've got no idea from just looking at the code if it's creating an object or calling a function. Which is really nifty when you want to use a factory function that'll create the right object for you. Blah blah "There's the `__new__` magic method." Yeah, but that's only concerned with how the class constructs itself, not something the caller needs to worry about.
By chance, I save the page in a PDF file ([Link](https://www.dropbox.com/s/flwou4tlulxky9z/SOUTHNO%3A%20Build%20numpy%20with%20OpenCL%20acceleration%21.pdf?dl=0)) !
Conciseness
Along with what everyone else is saying, I'm a huge huge fan of `dir` and `help` in the interactive interpreter. Can't remember the name of a function in a module? Can't remember what order args are passed in? You don't have to leave your terminal to find out. 
Dead parrots saying Ni. 
Legibility. I inherited a ton of Perl scripts from a predecessor who inherited them from his predecessor. They are horrific. I mean, the guy is a really good programmer, far better than I'll ever be, if he was able to write and manage that code. There's so much implicit nonsense in Perl. Python, basically what you read is what you get.
I would recommend Dive into Python by Mark Pilgrim for a quick primer for developers coming from other languages. This will allow you to discover how awesome it is and your favorite unique feature. It's a quick read too but eloquent, concise and clear. 
Chained comparison operators. Don't know why every language doesn't do them. Eg. `if a &lt; b &lt; c:` works just like you would expect it to. 
When people complain about significant whitespace in Python, I respond with the fact that any developer who **doesn't** *already* indent his code blocks consistently deserves to be lynched anyways. Python just removes the extraneous fencing characters ({,}, do...while, if...endif, etc).
I had a discussion about this with a coworker the other day. Neither of us are bothered by significant whitespace (although it was foreign for the first few scripts), it's the ramifications that has down the line. Without specified blocks it becomes much harder to parse by a lexer. Take lambdas for instance, you can't have multiline lambdas, or lambdas that do any "reasonably complex" task. My problem isn't necessarily enforced whitespace, it's the enforced lack of parseable blocks. All that being said, I do love python and use it regularly.
Mother. Fucking. List comprehensions. So handy. I know other languages might have them, but not any that I have experience with, so they are very welcome!
Reddit is for all to reply lol. But I guess it is a testament to its ease of use if a new programmer can jump into it.
I think the thing that makes Python different is the philosophy of Python. The focus on simplicity, legibility, and there being ideally one way to do something. I like that this philosophy extends beyond the standard library and into the major packages like the scientific stack: Numpy Scipy, Pandas, Scikit-learn and frameworks like Django and Flask which are my two favorite web frameworks in any language (not that I have a super broad experience.)
No love for dict comprehensions here? :P
Compared to most languages, Python is really easy to learn. It's a good introductory language for introducing the basic concepts, perhaps to someone who might not even be a programmer: - small syntactic overhead - [a very extensive set of batteries](https://docs.python.org/3/library) - supports both a variety of programming styles Unlike other introductory programming languages like BASIC that tend to have limited real-world use, Python enjoys widespread use and availability on many platforms, so it remains useful long after the programmer has passed the "beginner" stage.
That's pretty much the only thing I don't like about the language: the lack of multiline lambdas. I *love* the function definition syntax of coffeescript: square = (x) -&gt; x*x So it would be nice if **def** was a function, not a statement. But apart from that, I love the language, and I'm deeply glad I started learning it 15 years ago.
&gt; Take lambdas for instance, you can't have multiline lambdas, or lambdas that do any "reasonably complex" task. I would argue that you shouldn't have multiline/reasonably complex lambdas anyways, so moot point.
My current favourite 'feature' in Python is the Pandas data manipulation library. It's basically SQL + Excel + Matlab + a whole bunch of awesome goodies. Couple that with IPython notebooks, and you have an entire workflow for research; from data parsing to analysis to presentation to publishing.
 python -c "import this"
Someone apparently did [all or most of the Python 3 porting work](https://github.com/pybrain/pybrain/commit/dd66c7bccb4df0e0ae1432b97f80c7f23e812bb4) back in March, 2014. This has been merged in the latest version (0.3.3). However, the [PyPI index has been woefully neglected](https://pypi.python.org/simple/pybrain/) which means if you try to run `pip install pybrain` you get version 0.3 which is from 2009 and doesn't have a chance of working under Python 3. However, you can install 0.3.3 as follows: $ pip install https://github.com/pybrain/pybrain/archive/0.3.3.zip I've verified that this works with Python 3.4, or at least to the extent that `import pybrain` works. (You of course need scipy and numpy et al, and the regular caveats about installing those apply.) From all appearances, the PyBrain project has been coasting for the last 4 years or so, running on the momentum of contributors without much work from the maintainers. The repository is active, but important things like updating PyPI and editing the project documentation/wiki seem to have been completely neglected.
Getting more involved with C++ after using Python for a long time. Templates in C++ seem to be akin to compile-time duck-typing. Thinking of them that way made them much less intimidating. But yeah, building things with duck typing makes me a faster programmer. 
Huh? With iPython Notebook you can insert a new cell and run `len(object)`; I can't imagine anything simpler unless the environment is specifically geared towards arrays and matrices (which RStudio may be). You can easily hide/show each cell's output, but not the code. So that's 1½ out of 3. I'm not sure what exactly you're looking for in terms of conditional code block evaluation, but is it really significantly better than wrapping a block with `if .... :`?
Speed for being a dynamic interpreted language. Good set of libraries. 
Interesting. Kind of `ggplot2` for python. Doesn't feel very "pythonic" but looks powerful. 
Readability, list and set comprehensions, quickly getting things done in comparison to other languages.
I'll add that you don't even have to look up the classes for errors because Python will tell that IOError or ValueError was thrown, but not caught. Boom, go back and add it. 
Yeah. I don't like to compile the .ui files myself, though, because it's such a pain in the ass if you ever change the UI. You have to recompile and then go through and add all your code back in. Such a hassle.
Python has a “batteries included” philosophy. 
Okay fine. Iterable comprehension 
A year or two ago I was looking into libraries for directory comparisons, and I had found a lib called 'xfl', which seemed rather simple to use. I looked back at the creator's site a few months later, and it was completely down, so I uploaded the project to github and kept the license/attribution there (after adding a few modifications). It might be useful for you if this sort of thing interests you: https://github.com/astraw38/xfl
The Online, and offline, Community
I have posted the code above, so I hope that it helps. 
* NumPy and SciPy make rapid prototyping easy for CS applications * Fairly easy to extend a workable prototype into a clean C backend * ASCII or binary protocols are easy with socket, select and struct libs
Furthermore, could you expand on why `isinstance` might be bad in this specific case? You alluded that it's probably fine here, and I agree with that since yaml2dir.py really only needs to recurse when it encounters a `list` or `dict` – everything else are lead nodes.
what would def being a function let you do? 
I know a lot of languages have that "sort" of thing... but It feels more rewarding in python... I don't know why.. probably just because you're "doing magic".. da dum tis.
I'm a non-developer involved in data-driven marketing. I have been trying to break out of Excel for the last 2 years or so, but it is very difficult to find the time. I should have some projects coming down my pipeline soon that will require pandas and matplotlib. Lots of reporting and visualizations work to be done. 
Full disclosure I am the author of the article, but I figured it could be useful for beginners and those unfamiliar with Python 3. Please feel free to ask if you have any questions.
It looks like [this stackoverflow question](http://stackoverflow.com/questions/18878083/can-i-use-variables-on-an-ipython-notebook-markup-cell) deals with your first question. I don't know RStudio, how is the syntax for conditional cell execution? Maybe you could do some magic with an ipython extension e.g. %%only_if condition [code here]
Neat, thanks!
I think the idea is that duck-typing is preferable to instance checking. If you pass your function a tuple or a set, it would stop working. It's an easy fix with `isinstance(data, (set, list, tuple))`, but you get the idea. But with duck-typing, you just treat it as an iterable. So it might look something like: for el in data: try: value = data.get(el) # Do the dictionary thing. # `data` is not a dict. except AttributeError: # Do the list thing. The issue with this approach is that if data is a string, you're screwed. So you end up back in the same boat of having to check the instance of data: if isinstance(data, basestring): # or str if python3 # Bulletproofing... At the end of the day you probably have to do some type of instance checking. So, keep it simple and obvious (as it's written), but throw a docstring on `dict_to_dir` describing what the `data` arg should be and call it a day...
Yeah, my comment wasn't too related to your post and what you're doing in there. I just thought it was relevant if someone wanted to expand on what you wrote, e.g. adding file timestamps.
check out pycharm. the newer releases support ipython notebooks, and pycharm is the best.
Yeah that's about what I figured. Duck-typing would add some protection, but like you said, end of the day still need to check instance of built-in types. This way it keeps the code simple and readable too. As I mentioned on your other comment as well, since I anticipate the source data to be generated from `dir2yaml.py`, I think it's safe to assume sets and tuples won't be normally encountered. &gt; throw a docstring on dict_to_dir describing what the data arg should be Sure thing :)
sorry - when i searched for pycontract, I found https://github.com/bigjason/pycontract instead of https://andreacensi.github.io/contracts/ In that case - they are quite similar. On cursory examination the main difference for me is that I don't like string processing and pycontract constraints are specified as pyparsing strings, thedoctor validation functions are just python code But if you like that, maybe there is no advantage The stuff they have about specifying constraints in docstrings, and annotations is nice - the doctor will never allow that because it relies on regular python functions. 
Check out Guava - it makes Java much more pleasant to use.
How do you give your reports? If you use [nbconvert](http://ipython.org/ipython-doc/1/interactive/nbconvert.html) to convert to "niecer" formats (like pdf or html) you can change the behaviour of that. How exactly depends on which output format you use. [This blogpost](https://hannes-brt.github.io/blog/2013/08/11/ipython-slideshows-will-change-the-way-you-work/) discusses that for html.
Hey MJ, I just started using Python and so far, I've built a scraper to scrape ~2.5?million pages, parse, and insert formatted text into MySQL. Taking that table and then querying against it to narrow my potential client list from 76k to roughly 10k there's a lot more I need to learn and also the methods I can use to analyze my data, but using Python for what I've built so far has helped me out more ways than I could imagine at the start of the project. 
It's got a pretty cool snake logo. Other languages don't have that.
I LOVE Guava. Optional&lt;&gt; is my best friend. But the list comprehend-y parts of it involve the Function interface, which I've never been the biggest fan of (it's a lot of clunk for a small transform). 
As someone of a mixed Java and C heritage, I love Python for it's brevity (that's my Java side talking) and it's batteries included standard library (and that's the C side). Python also seems to have such a creative community compared to C and Java, which I mostly associate with electronics engineers and large soul-crushing enterprises. In Python, you can apparently use libraries to *grep spoken words in audio files with text-to-speech* or *turn a lambda drawing function into an animated gif*. Amazing.
Oh man, no arguments here. I've had a couple areas where it's cleaned up code a lot, but I usually just use a loop. I'm back to coding python these days, and I actually miss some things about Java. Mainly types that people actually use and interfaces. I know you can fulfill the same needs in Python, but no one here does.
Oh you're absolutely right. I wasn't trying to imply it's even in the same ballpark, just laughing about my own failures in paying attention to detail. I used to forget the colon 90% of the time! While on the subject of convoluted C++ compiler error messages, I'd add that anything with templates instantly increases the length (and decreases the helpfulness) of compiler errors by about a factor of 10. The compiler error messages become almost totally useless. 
[PyCSP](https://code.google.com/p/pycsp/) - I've used it, very well polished. Not as nice as Go.
Libraries: there is usually a library for anything I could want and it's usually implemented in C if I need performance. 
Hi, Which module are you using? Are you making a post request to login, then a get request to view their page? If so you will have to save the cookie. You can use the requests module. I would use it to create a session, then any cookie generated is saved in the session and you can simply reuse the session which will have the cookie saved. You will have to log in again every time you run the script but that is fine, unless you save the cookie to a file, but I really wouldn't worry about it.
very much appreciated 
With the introduction of the Stream API in Java 8, this huge shortcoming has finally been fixed. Together with lambda expressions, Optional, and the diamond operator, it's now actually possible to write quite concise, expressive, and readable Java code.
For what looks like a small robotics company, Erle has contributed a lot of free resources on GitBooks. Really awesome find. Thanks a bunch!
I think that should work - the only simplification I can see is that you can check multiple types with one isinstance call: # These are equivalent: isinstance(obj, (str, bytes)) isinstance(obj, str) or isinstance(obj, bytes) 
You may want re-evaluate your use case, expected input, and consider using the EAFP approach (https://docs.python.org/3.4/glossary.html#term-eafp). Accounting for all of the possibilities can be tricky. IMO, it is better to have exception handling rather than trying to account for all possible inputs. Depending on the situation, this technique is generally faster as well. That being said, I believe you got the main ones. See here (str/bytes/bytearray in sections below that): https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range
`defun` in CLtL2 is a macro, not a function.
Look at the commit log: https://github.com/kivy/kivy/commits/master Last commit one hour ago. 
Yeah I agree...definitely not a one-size-fits-all solution. It may come in handy in some hypothetical legacy situation, where things are already fkced-by-design and this is one step towards refactoring. For me, this is partly practice for me in understanding all the differences...between Ruby and Python, and then 2 vs 3 (given the split in documentation and information out there).
Not remotely, wahaa has already linked to the commit log (for reference, my quick check suggests it's probably as active as it's ever been). There's no good reason that we've gone this long without a release, and we intend to make another soon, with many significant improvements. I believe some of the other devs are currently engaged in packaging for the different supported operating systems.
Do you know when it will be available in Safari, but not as a "rough cuts"?
Instead of if useranswer == "A": if useranswer == "a": just use: if useranswer.lower() == "a": Instead of random.randint(0, len(character)) There's a handy [choice](https://docs.python.org/3/library/random.html#random.choice) function! randchar = random.choice(character)
&gt; the next time I run the program it doesn't show up in the list. When your program gets user input, it stores it in memory. Stuff stored in memory goes away when the program stops. If you want the stuff to hang around after the program stops running, you need to store it to a file on disk.
What is this send magic? I've worked a lot with asyncio and I've never heard of send()
I didnt try to read the mass of code, but my assumption is that the group is a str and you are comparing to an int. Try if int(group) == 1 or if group == '1'. Probably should post this in /r/learnpython next time. 
From what I saw looked like a good article. Emphasis on what I saw, the page doesn't scale for phone (or at least my phone, others may be able to confirm or deny)
Thanks! I did a presentation on asyncio last year that covers this a bit: [video](https://www.youtube.com/watch?v=CWmq-jtkemY) [slides](https://speakerdeck.com/pycon2014/fan-in-and-fan-out-the-crucial-components-of-concurrency-by-brett-slatkin)
Ya "in" just works in so many places you forgot about it. Makes things like string comparisons easy.
Just worked thru this. Was really good, but maybe the imgur loop could maybe do with being a bit smaller felt a little slow. Thanks for writing up!
Each thread gets its own stack which is defaulted to the size provided by the OS if it's not otherwise explicitly set. ulimit -a | grep stack stack size (kbytes, -s) 8192 8MB it is.
Yeah I was trying to balance between being large enough that you could see a difference between the different techniques and being too big. You could also slice the links list to download fewer images. For the first example that downloads the images in series you could modify the main method like so: for link in list(links)[:20]: download_link(download_dir, link) to only download the first 20 links. You could update the subsequent examples in a similar fashion if you don't want to download as many images or have a slower network connection. I'm happy to hear you enjoyed the article. 
What phone do you have? It is scaling for me in an iPhone 6 iOS 8.1 in Safari. If you let me know what phone you have I'll look into the scaling issue.
I can't hear "not remotely" without thinking of The Princess Bride.
Tx.
Java does not support operator overloading/overriding. And all modern oop languages are obviously going to have support for basic oop concepts. The reason I think the magic methods are so cool, is in python everything is an object, and the magic methods are one of the consequences of that.
1) /r/learnpython 2) indent all your code four extra spaces for reddit formatting. 3) sort and sorted take a `key` argument, which is a function that returns the value to sort. So, to sort a list of lists by the second element of each list: yourlist.sort(key=lambda k: k[1])
The concurrent.futures module is a nice alternative (also backported to 2.7): http://pythonhosted.org//futures/#threadpoolexecutor-example If you are doing just web fetching specifically and like requests, there's a gevent-capable grequests: https://github.com/kennethreitz/grequests 
Sorry I don't really understand it. Can you please explain in details?
Not only that, but on 32 bit architectures (which some of us still need to support) the presence of additional stacks increases fragmentation, which is already a problem on python due to its heap based allocation strategy. This has very negative consequences on malloc() calls, meaning that the more threads you want to run, the less contiguous memory you can allocate. 
send is basically a way to have the yield statement "return" inside the routine the value you send.
&gt; /r/learnpython 
This is excellent, not just the book but the company itself seems awesome. Thanks for a great post.
Ah, Decorators. Awesome in the hands of responsible devs. Terrifying in the hands of others. 
I do all of my analysis for labs in college in the IPython Notebook. It's pretty good for that.
what should those of us stuck on python 2 do when we have to make a lot of calls w/ libs that use Requests
You should look at Scipy's kernel density estimator class: http://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gaussian_kde.html#scipy.stats.gaussian_kde
Sorry for the late reply-- hopefully this helps if you haven't found the answer yet. Printing and returning are two different things. Printing is making the result publicly viewable. For example, yelling out "THE ANSWER IS 4!" No one needs to explicitly see/receive the print result, but it's nice to be able to know about it. On the other hand, returning is like silently giving someone a written set of instructions. Return values pass the results of a method around, and make it easy to work with data from somewhere else in the code. You don't always need to use the returned data (for example, realizing there is no one to give the instructions to, and dropping the paper on the ground), but it is common to do something with the results. Another analogy is passing a basketball. When you return something, you are passing the basketball. Others can see it *and* throw it around, play with it, etc. In printing it, you're just showing them a picture of the basketball. People can still see what it looks like, but you can't really play basketball with a picture. That's how I've explained it to some people. [Here](http://stackoverflow.com/questions/3881434/difference-between-returns-and-printing-in-python) is another explanation.
How does this run code concurrently? Everything here is still running with one process and one GIL... threading is obviously useless in python, but I fail to see how this makes anything run faster...
and generator comprehensions! and generators in general...
One minor correction: pip is also available for Python 2.x starting with Python 2.7.9. I'd also would have liked to see wheels discussed in one of your chapters on pip or pyenv/virtualenv. Congratulations on writing this book. It expect that it will become a widely consulted reference for serious python programmers.
I noticed that you included logging for the straightforward examples, but then dropped off when you got to the different parallel/concurrent options. Have you found a good way to log with any of these? I've spent way too much time trying to figure out how to simply log if a spawned process is ever created, when I know it should be.
Thanks a lot! I hope so. The book was written for Python 2.7.8 and 3.4.2, before [ensurepip](https://www.python.org/dev/peps/pep-0477/). I left out things like wheels and asyncio because they're so new. 
Thanks!
I highly recommend Rob Pike's talk entitled, "[Concurrency is not parallelism](https://www.youtube.com/watch?v=cN_DpYBzKso)" if you haven't seen it already. It does a good job of explaining the difference. I also cover this in earlier items in the book, such as Item #37 ("Use Threads for Blocking I/O, Avoid for Parallelism").
Thanks so much!
A few issues with the async module. The first is that it is provisional so it might have backwards incompatible changes introduced and I didn't want to write an example that would quickly be broken. The second is that it isn't as simple as just importing the asyncio module and then all IO operations being asynchronous. The urllib module is not setup to be asynchronous so to use asyncio would be a pretty lofty task. You can see [this example](https://docs.python.org/3/library/asyncio-stream.html#get-http-headers) of how much code is required just to print http headers.
Can't speak for the online books, but I learnt all my (albeit limited) Python knowledge from Treehouse. I ended up just cramming it all in over about a week and really enjoyed it. The videos are all very well done, and the challenges are... well, challenging, but not too hard. They let you apply what you've learnt easily.
&gt; GNU Scientific Library I switched from mainly using Ruby to using Python at my new gig (doing data science on geospatial data). Coming from Ruby the syntax with python was so similar I was able to start coding straight away and after about one year I feel much better. Most of the time now I am barely looking up any new documentation thanks to the great libraries (numpy, pandas, gdal are some of my go-tos). All of my time is spent thinking about the data i'm working with and then writing code to process it, jumping between terminal windows and the IDE all without leaving my keyboard! 
Good post. Python is a super simple and easy to use programming language that is perfect for simple data analysis. Some dude posted a blog about this a while ago check it out http://pbpython.com/excel-pandas-comp.html. On a high level, Python can literally do anything that all other languages can do. There are some great libraries that make python especially useful for quick data analysis which is why I'd recommend it. Also you can totally scrape websites for data, not sure of the legality though that depends. 
"A Foolish Consistency is the Hobgoblin of Little Minds" - PEP 8 Most of it is good but if you don't like part of it, do what you like. I don't feel a need to follow guidelines I don't agree with written by people I've never met because I'm an individual, I have free will, and my code is my business.
I meant it's useless for anything practical ;)
functional language is best language, map() filter() reduce() HNNGGGHHH
Cool, are there any feature updates in the pipeline that implement Android 5.x material design (native swishy animations)? That seems to be all the rage in Android development these days and many apps are updating to accommodate.
You're talking about lambda right? I don't think you would use def inline.
Yes! I really loved that article, and although I tried to implement this code myself, since it was for a job application. I can say a lot of the inspiration of for the code came from that article!
You can get rid of it https://github.com/paradoxxxzero/nocolon
Wow, I really enjoyed that list and I agree 100%. If it's okay, I think I'm going to steal those 5 bullets so that I can keep them handy for the future! Something that looks like this! # 5 Properties of Good Names * Be easy to understand * Not too long * Not lie * Not clash with another name and most importantly * If they can replace comments that's even better! 
 &gt; I'm not bound by someone else's stylistic choices. I see your point, but sometimes I like that. I like that when using some libraries it's difficult to do logic in templates. I like that I don't have to grok lots of lambdas (coming from a codebase where C# devs did Python and used a ton of lambdas). I like Python's stylistic choices, that's why I chose *it* :)
Bro! You're winning reverse code golf
Thanks for recommend seaporn XD I like the way its visualization is better than matplotlib
I follow PEP8, but one rule is clearly absurd and undermines the entire thing. On writing comments, it says: "You should use two spaces after a sentence-ending period." Fuck that shit. Seriously though, PEP8 is an opinionated style guide. It might not fit your personal preferences, but everything in there was thought through carefully and it is based on experience.
No problem :)
http://blog.startupcompass.co/how-much-should-you-pay-your-engineers just link the actual source. 
Same, ipython was specifically designed for that and I think it's perfect.
Do you feel quite as clever doing that as you do constructing a list comprehension? It feels like you've set up one of those elaborate dominoes displays, and then when you press Enter, it tips over the first tile.
Two issues, really: * The GIL (Global Interpreter Lock, see [this answer](/r/Python/comments/2zkczi/what_are_the_problems_with_threads_in_python/cpjpg65) * Implicit mutability everywhere - in short, any variable in Python can be mutable, and there is no way to reliably force immutability. Shared mutable state is what tends to make multithreaded programming a nightmare, but in order to change this, Python would have to become a drastically different language.
Awesome article! Only nit I have to pick is that I didn't realise that most of the behaviour is only available in Python 3 after reading through most of the article. Maybe add a small comment at the top?
It's not typo, it's intentionally
Definitely true that for many uses it may not be fast enough, but most of the time when people complain about this they are mostly being overly academic and the milliseconds difference doesn't matter to the use case at hand. One case it is great at is some testing stuff, my old work used java for automated testing and they were crazy slow (a large part due to how the java was written). But I prototyped a subset of tests in python and ran my stuff in 17s vs the Java code base of 18.5m (they had to compile, load the spring context, etc).
fair enough ^_^
PEP8 without the line length limit. We have new technologies these days, we do need to limit screen space.
One of the handiest uses for footpedals I've found is in [book scanning](http://www.diybookscanner.org/). Fiddling with the book, leaning over to the keyboard etc etc can't compare to just holding everything in place and hitting a pedal. That doesn't have the same continuous input issue but controlling peripherals is very often worthwhile.
Pretty nice. A suggestion: allow ":1" to jump to universe 1, and ":" or ":-1" to jump to the last/latest universe.
The primary Pypy interpreter also uses a GIL and thus has the same limitations. They also have a [Software Transactional Memory](http://pypy.readthedocs.org/en/latest/stm.html) branch/sub-project which replaces GIL acquire/release by memory transactions, I believe it's not quite ready yet. Some other alternative implementations don't use a GIL (IIRC neither IronPython nor Jython have one)
I tried something similar with urllib.Request, but it was still blocking. Let me try again and I'll post if it works.
I would add learn python the hard way http://learnpythonthehardway.org/ (There is a free version, but you have to dig into this page to find it)
Yes, it looks simpler but you cannot change or add any template. At this moment initpy becomes complicated, because you have to rewrite a half of files after creating project from template. It would be better to provide option for loading templates from given location or use builtin templates if location not provided. About #/usr/bin/python, I'm using #!/usr/bin/env python, so you can use this file with different search paths f.i. with virtualenv, or custom python installation at /usr/local/ (f.i. at python docker images). And also this header is usually added by well configured editor.
Yeah sign me up for that!
more than Java ? woohoo....
Ah my bad I did something like this before, but I was using print. I didn't realize logging was already thread safe. Thanks.
During a typical month, I may use 5 of the programming/design tools mentioned. Don't most programmers use more than one language regularly in their job?
/r/learnpython please
I was surprised at how little the others pay in comparison - shiiiiiit, if you have a modicum of people skills, jump on the consulting train - pays better
No. Majority use one or perhaps two per job. Unless you're a full stack dev or something.
Personally, I don't know how front end people do it. The amount of stupid variation and challenges specific to working with the array of browsers, OS's, and platforms is absolutely mind-numbing. Ever make a CSS change that works perfectly on an iOS device, but f's everything up on an Android device? Not to mention those guys have to deal with Javascript.. and the DOM.. to me it all seems like a black magic and I'm insanely happy I rarely have to deal with it.
My favorite list comprehension I've ever made is probably the one below, just because it's really fun to say aloud. Seriously. Try it. (Though I would probably never use it in real life) n = [[1,2],[1,2,3,4]] n = [[n*n for n in n] for n in n]
Seaborn - Joint kernel density estimate was exactly what I wanted. thanks
Is there a way to get the full book in one page/pdf/ebook for offline reading ?
thatMakesThemIdiots(reason=this_is_snake_case)
Is Python a highly demanded language in the fields that require Masters and PhDs, while being in low demand elsewhere?
It's probably a language more people actively seek out, as one of the first things people will want to program is a web page. 
Python is particularly good with numerics and has large mathematical and scientific libraries. Python is heavily used in mathematical, simulation, and machine learning academia. Python excels at mathematics, and scientific calculations because of libraries and tools for it. edit: And, it's not just 'Python has good numerics'. The numerical libraries it uses are based on battle-tested, IBM punch card-birthed, FORTRAN-77 bank/nuclear reactor/particle accelerator powering, 70s neckbeard wizard-crafted code (numpy, scipy).
What is wrong with that?
I've heard good things about Effective C++, but I think it assumes you already know the basics. Persoanlly I just used the [Tour of C++](https://isocpp.org/tour) pdf to get started.
It might have come from [my dotfiles](https://github.com/njharman/dotfiles/blob/master/.bashrc) or from one of the people I've worked with (whom I spread it to like a virus :). **Awesome** it's useful to others.
#####&amp;#009; ######&amp;#009; ######&amp;#009; ####&amp;#009; **The C++ Programming Language, 4th Edition** Current $51.24 High $62.46 Low $46.38 [Price History Chart and Sales Rank](http://i.imgur.com/28EXUMF.png) | [GIF](http://i.imgur.com/hZPOmXb.gif) | [FAQ](http://www.reddit.com/r/PriceZombie/wiki/index) 
I'm a bit biased but I think the Treehouse courses are solid. Hit me up if you have any questions.
That's a recommendation? Really?
That's really great! One question though: what happens when you're dealing with a program taking a lot of memory? Does a universe snaphot requires a full copy of the memory pages taken by the original program? 
From what i have seen most in asyncio land uses aiohttp since requests doesn't support asyncio, me included. There was a fork with partial support iirc, but nothing from the official devs. aiohttp is modeled fairly similarly to requests, so its just as simple to use.
Congrats your library gets my attention during lunch today :P seems pretty interesting.
i get that its fun to post this in a the Python subreddit and feel good about being in demand. however, this kind of post just really clearly demonstrates that people outside the software development industry don't understand it very well and can't even come up with charts and graphs that are segmented on something meaningful. segmenting by programming language is weird. should segment by experience level and role. a very junior developer in a C++ shop developing an Xbox game won't make very much. a very senior developer in a Python shop doing high value business data analytics is going to make a lot. the languages they use on a daily basis is coincidental (pick the right tool for the job), not the distinguishing difference between these two devs.
"those with real-world experience see about a 20% salary increase after three years" What? That seems incredibly low EDIT: I read the rest, you guys start out on more than in my country.
I think it was skewed for me, I read the rest of the article and googled, you guys start out higher as a grad so that affects things greatly (if I am reading right). For example mine would have started out much lower but after 2.5 years is ~100% higher. This is also only concerning graduates when I was thinking about it, where salary raises are a bigger percentage.
I agree. edX has a couple great MIT Python courses, among others. This is a GREAT starter imo [6.00.1x](https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-0#.VQsVz47F83k), this is an archive atm. But it will start over again if you want to get a certificate, possibly in the fall. They have a follow up as well. [6.00.2x](https://www.edx.org/course/v2/introduction-computational-thinking-data-mitx-6-00-2x-0) The forums are a great help as well. I personally can't say here or there about Treehouse, since I haven't done anything on there. I went through 6.00.1x, Programming for Everybody on Coursera from UofM (This was pretty slow paced btw), all of CodeCademy Python courses, some Udacity, and then started working my way through CheckIO
Suggestion - make the Entry.hours and Timesheet.total_hours properties that are calculated on the fly. (see: http://stackoverflow.com/questions/6304040/real-world-example-about-how-to-use-property-feature-in-python) Yes, this is "less efficient" in terms of number of clock cycles. It's one of those cases it doesn't matter though. A user sitting at the console typing can't notice, react to, nor use the 2ms saved by doing it the other way. On the other hand, you don't have to worry about consistency any more - you can add and remove and change how the CLI options work without manually having to keep track of "did i properly update my hours counts", and so on. Later if it turns out you are running into efficiency problems, and you can actually show that the problem is from Entry.hours and Timesheet.total_hours, you can replace them with entries in your DB.
Hi, the creator here. It sounds too good to be true but, most of the time testmon is able to deselect the 99% of the tests which will have exact same result as last time. The trick is to measure code coverage individually for each test, store the mapping between tests and source lines and simply NOT run the test if it couldn't have been affected by recent changes.
Do people still manually write XML? XSL seems like it would be more of a hand-written job.
Yeah aiohttp is the way to go as the asyncio module itself is very low level. I have something working and I'll post an update with the example later.
Anything specific you would be interested in seeing? Maybe I could do a follow up.
/r/learnpython
For me the usual suspects are VHDL, C, C++, Python, Haskell, Bash and some legacy perl with one Rust project which is off the critical path.
/r/learnpython
GDB can do this too. I've used it a few times. https://www.gnu.org/software/gdb/news/reversible.html
Because it's biased to San Francisco and San Jose.
I'm just trying to figure out how I can make more by doing this.
But Ruby on Rails is the future! /s
Don't hate on VS6. The good ol' days.
Agreed. I think it was Alan Kay that said University CS degrees have basically become Java certifications. I'm not complaining though. Keeps me competitive.
Side-by-side view though. Diff tools. Editors with multi-column layouts. 
Because HR doesn't know what they're talking about, usually. 
what markets are you looking to trade? I would have to Google for them once again. 
I still can't believe nobody's said it. Slicing. Whoah. Have you ever been writing something in C# or Java or any other language, and realized you could replace 3 lines of code with one well placed slice? I have.
Yes I use [syntastic](https://github.com/scrooloose/syntastic) with vim, and on every write it will check my code using [pep8](https://github.com/jcrocholl/pep8) [and](https://github.com/GreenSteam/pep257) [others](http://www.pylint.org/) It was slightly annoying at the start (like others ITT I'm not really convinced about the 80 char limit), but I quickly realised that I had more important things to worry about and got back to writing code and being a better member of the Python community. Error messages on every write is a very quick way to learn, and I don't go near the tab key any more
Full stack myself. I use god knows how many languages these days. HTML, Javascript, CSS, SCSS, PHP, C#, Node, Angular, Python, some Ruby...I do mostly PHP/C#/HTML/Javascript/Angular/SCSS, but still.
The same one as the past. PHP with &lt;insert modern framework&gt;.
plus python and it's SQL stuff and cython for speed
You don't know how to fix this more simply, then to find source code, understand the problem, and ask someone else to fix it? Put Down The Lemons.
Absolutely, positively this. After working with numpy, scipy etc, I am convinced that they are Deep Magic
When you have threads and you have shared data between these threads, you need locks. The granularity decided for the python interpreter (and any other interpreter such as ruby or perl's) is "ultra coarse", which means that instead of locking on each individual data structure access, you simply prevent two threads to access the interpreter state at the same time with a single, unique lock on the interpreter. The price you pay is that you only have one thread at a time able to execute the interpreter (i.e. python code). If you have multiple threads, they will interleave, so you won't get a speedup. How they interleave is determined by a tick count in python and the kernel thread scheduler. This architecture has deep consequences on performance, but in general it's not a big issue. In my experience, I've only seen the GIL creating problems once. In any case, if you want performance, you normally write in C. When you enter C code, and you are absolutely sure that you cannot _in any way_ reenter the interpreter, you can simply relinquish the GIL. At that point, one thread can do the C level stuff, and the other is free to acquire the GIL and run the interpreter, achieving real multithreading. 
https://code.google.com/p/isproggler/source/browse/trunk/itunes.py#100 I would change the serial numbers there 
Apply Cleary (i.e. simply press Ctrl Alt Right after you installed it), and you'll get this… http://i.imgur.com/GP3zMuX.png Something like Cleary is clearly essential in these times of young hipster websites with tall slim fonts in Grey on Ivory. Some people's eyes have yet to age to recognize what accessibility really means. &lt;/rant&gt; ;)
 int(1.9)
Use the Instagram API probably: https://github.com/Instagram/python-instagram
Well HTML does stand for HyperText Markup Language - but yea it isn't a programming language. When I think of full stack I think of front-end, backend, and sysadmin (even design at some points). But it is kind of like SQL, not really a programming language but still a language. Also SCSS has to be compiled and can also do simple computations, so it is moving closer to a "programming" language. Funny, I started with Django (after working mostly in Java during college) and moved to PHP due to a job. My new job is .NET but I have been freelancing in PHP Laravel (MVC). Now that .NET is opensource I am considering switching to pure .NET. More jobs and more money where I live. 
This idea has been rattling around in my brain for years. Great to see someone doing it! No way I can convince my job to put in the money to finance the indigogo drive in the time left though. 7 hours and it's 1 at night!
Until you have to post code / diffs on a website, or you need to SSH into some host to fix a bug. We need -some- limit but I can see arguments for 80 being too restrictive.
No problems if your threads are IO bound. If cpu bound, the GIL will only permit one thread to execute bytecode at any one time (and actually causing it to switch often slows it).
[Obligatory XKCD](http://xkcd.com/353/). And yes, they DID add an antigravity module to Python
[Image](http://imgs.xkcd.com/comics/python.png) **Title:** Python **Title-text:** I wrote 20 short programs in Python yesterday. It was wonderful. Perl, I'm leaving you. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/353#Explanation) **Stats:** This comic has been referenced 122 times, representing 0.2160% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cpkh3vz)
Hi. I can help you. You can send me email, and describe task. email: ol.podolskyi()gmail.com
This is going to sound bad, but.... I work in academia, coming up on my 15th year, as a programmer. Here, Python became super popular with the researchers (MD/PhDs) simply because it was simple. Java was too difficult to learn for these already busy people, and once they saw how easy and adequate Python was, they stuck with it. Horrificly horrible code flies out of the fingers of these researchers with 0 CS education. Things got particularly bad when we purchased an 16 core server with 32 Gigs of memory to run one of these algorithms (thanks for that $$$ American taxpayers). I was asked to take a look at the code when even with this beefy machine, things still wouldn't work. I looked at it, asked a few questions about what it did, and it took me 5 minutes to explain how they didn't need to load the entire dataset into memory if they are only working on a small bit of it at a time. This information fell on deaf ears of course, as they had no education/experience in memory management. I explained to senior PI that had a C.S. Degree what was going on and never asked about that project again. Now *that* researcher who made this horrific program now has students of his own, and he forces them to use Python (these aren't CS students so I doubt they mind at all), but at least here, that's how Python got so popular. TLDR: some academics use it because it's easy to learn and use without any CS education, not because it has good math libraries or runs amazingly fast
What price are you offering? 
What's wrong with js? 
Mine is definitely guilty of this. You won't learn anything but OOP and Java at my university. It's gotten really difficult to diversify my skillset.
Yes. Explicitly. 
Definitely true on the lambdas, though any time I need something like that I reconsider whether or not the intended lambda has a higher possible usage. Depending on the answer I either add/compose a method or just def in the scope and pass that function, essentially acting the same as if I had passed a lambda.
taking bids
 Something even more crazy, which you probably will also hate - its not really related only to python - there are people who do their writing nowadays with "semantic linefeeds", so that diff's in version control systems make sense: http://rhodesmill.org/brandon/2012/one-sentence-per-line/
I like integrating RDBs into my tools, but more times than not, it is not necessary. 
I work for a small company and not a week passes where I don't work on Python, JavaScript, HTML, CSS, and SQL. There is also some Drupal or WordPress from time to time, so PHP too. Of course people want apps so Java and Obj-C/Swift too. Then I try to keep up with languages I think are interesting like Haskell and Rust. Most languages share enough concepts, that picking up a new one is that big a deal. It is learning all the APIs that is time consuming; Django, Flask, jQuery, Angular, React, Android, iOS and figuring out the libraries you need in each ecosystem. Like should I use Gson or Jackson when I am doing Android dev?
Actually that's pretty cool. See, I like this because it makes the diff easier to read. To be honest, when I'm editing markup languages (sphinx, markdown) I generally just do 1 paragraph per line and set a line wrap in the editor. Having to manually realign blocks of text every time you edit something is bad, so this semantic linefeed actually seems like a great way to organize it.
&gt; What are some cases when you'd choose threads instead of coroutines and vice versa? Almost never. If python is so irrevocably slow in pure execution speed of your computation, that you absolutely need to be using system managed threads to speed it up, just use another language. Hint: in these situations, 99% of the time someone will have either already made a library for you to call to with python, or your project is incompatible with python in the first place. One exception to this is DNS name resolution. Goddamn that's slow and ugly. Even gevent (library for creating co-operative green threads instead of system threads) bundles a library to do that off-main-[system]-thread incase you need that speedup.
I've taken that course, and what I hated most about was the useless algebra exercises. The dull boring scripts, the quizzes which were opinionated. The minute you have to answer tests in a way that match the teachers opinion I lose interest. I thought cs50 by Harvard was a lot better in terms of learning the basics of computer science.
Is this a joke i am not getting? All the typos and grammatical errors makes me think this is making fun of someone/something to which i am not privy.
Agreed. With wide screen monitors and bigger resolutions, it really annoys me that people aren't making the most of it by sticking to the 80 character limit.
I've just coughed the dough the make the project happen :)
Not to come down on all of your hard work, but what was wrong with [celery](http://www.celeryproject.org) and [flower](https://github.com/mher/flower)?
CS50 (with David Malan) was amazing, and I agree that it is a much better intro to CS. However, I was trying to provide some open courseware that utilizes python.
Yeah I get that =) (re: python related courseware) and it was a valid suggestion. Points for that.
Awesome!
Thanks for the link. I have added this to the group resources list. (http://myeducationpath.com/groups/v/resource/11/Learn+Python+the+Hard+Way.htm)
Great, thanks for the link and the explanation. Keep up the good work!
Thanks, I was looking for something like that.
Yeah, some poeple are eager to contribute code so I'll try to coordinate through github tickets as good as I can. But we have a lot's of ideas which are not quite formulated yet so there might be some code written, then deemed a dead end, and deleted :/. It's quite early.
Because it doesn't appear to be related to the install directory. It's using com interop and it looks like the id has changed
"The common tutorials surrounding Threading and Multiprocessing in Python, while generally excellent, are pretty “heavy.”" So true. Great article. Thanks for posting it.
If your algorithm thinks Paganini sounds like Coldplay, shoot it in the head.
Not everyone is a native English speaker.
I didnt write my own version of celery.
Nice! I figured it out that my need wasn't that crazy that it wouldn't benefit someone else putting it on a repo.
Absolutely. Makes mine and especially other peoples code much more readable since we agreed to follow it. And I love that my editor reminds me of the little mistakes I make every now and then.
PEP 8 is a standard, a suggestion, a guideline. If you read the full PEP 8, part of PEP 8 is that it is nothing more than a suggestion or guideline. People take PEP 8 to be word of God, and accuse you of sin if you do not follow it. For the most part, PEP 8 does make a lot of sense. It works great for teams, for anyone who wants their code reviewed or understood by others... etc. It's a good idea to use it. I've tried following it as best I can. I've improved over time, and I would like to follow PEP 8 completely, and I am working on it. I am a repentant sinner. 
This was awesome. I'm a beginner at programming with Python and this seemed like a very cool project to do after becoming more proficient. 
I'd like to see demand too. Quick question: which fields employ Python progammers the most? 
Just pronounce COBOL like Python during interviews, and don't let anyone else work with your code. 
Great lecture, indeed. Thanks for posting it!
&gt; I was really hoping this was a joke... :-P I'm still holding on to the hope that it is. I thought some of our workflows were convoluted bullshit hacks, but damn. I couldn't contrive something that awful if I tried (I know this to be true because I have tried...)
When he made clear that __perimeter will be automatically mangled to _Circle__perimeter in the class's dictionary I've raised my hand at the question "who learned something new?". Damn, I really didn't know, lol
Oh yeah his videos should totally be in a sticky post somewhere. One of the best contents available.
I think it comes up most times a link is posted to checkio.org, but the left navigation bar blocks parts of the article. I would really like to read the article, but.. i can't. At least not the first few characters of every line.
Dow, Nasdaq would be a good start
Made this so I could quickly capture a demo screenshot when pushing updates to my applications. Unfortunately, you need to the Window ID from Quartz to capture a specific window. Hope this makes some dev's life a bit easier by doing that automatically for you.
Good post! This answered so many questions that I didn't even know that I had. My favorite was using `@classmethod` for alternate constructors. Didn't know that's what classmethods were for. All the articles I've read left me believing classmethods were some useless artifact resulting from some ambiguous process--like how the language was written.
I'm with you. Never heard of it. Dig it. Apparently, [**dunder** *is* a thing](http://www.urbandictionary.com/define.php?term=Dunder). (Python double-underscores, along with a few other hilarious uses of the word!) 
Desktop pc but with a tiling window manager, so sometimes the browser window is "small". The design seems not to respond to resizing at all.
Thanks man, :)
Dicks. It's easier to say than /dɪkts/, and used to make me giggle. *Used to*...
I have been using Django on a 4 year old project. I think its one of the main reasons it has been successful despite constantly changing requirements. It is a fairly "standard" relational databse app, (though it has a complex schema and reports, so more than just a CRUD app that everyone seems to look down on. ) I wouldn't say Django does too much magic. Pretty much everything is configurable. There is a lot to it, so it might seem like the Admin is magic at first, but its all built on the components of the framework. Plus there are a good deal of third party libraries such as reversion - for storing history of database changes - which save a load of time. 
You think 8 files is a lot? Maybe we are building apps on a different scale. 
OK, takes me at least two hours to set up an IDE and python environment the way I like. I find it worth the effort. 
I love that EVERYTHING is an object/value in python. This is obviously true in some other languages to varying extents, but python does a particularly good job of adhering to this mantra. In python, even methods and classes can be used as values. I also think that it's pretty awesome that some of python's OO features are built in terms of other abstractions within python. For example, methods are generated using the descriptor protocol implementation given to functions.
I hadn't heard of the series before. Sounds great, I've enjoyed Meyers' Effective C++. Your book appears as if it's more detailed, but how would you say it intersects/complements a resource like "[Idiomatic Python](http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html)"?
What about a dick of dicks?
Please let me know what you'd do to improve the concept. I have all weekend to work on it and I'd love to hear some ideas. plug: Also feel free to follow me on Wordpress cos I like to blog about the projects I do
dunder = double under. I've heard it, mostly spoken.
Edit: I'm on mobile idk what happened to the lines I tried to establish :/
I'm kind of new to python but would like to try to make a program similar to yours, could you point me to the tutorials you used :) ? Thanks
yeah sure here's a few of the ones I could remember: http://docs.opencv.org/trunk/doc/py_tutorials/py_objdetect/py_face_detection/py_face_detection.html https://realpython.com/blog/python/face-recognition-with-python/ https://realpython.com/blog/python/face-detection-in-python-using-a-webcam/ http://coding-robin.de/2013/07/22/train-your-own-opencv-haar-classifier.html
Fuck you and fuck this pathetic excuse. There are only about a hundred different ways to check spelling and grammar.
Thanks man
Have to have some idea of them or most of this will go over your head ....
This is interesting to me. There are a few solutions out there to solve a Vigenere cipher with mod shift, but I haven't seen a program for solving given byte-wise XOR. Were you able to complete the program? If so, would you mind posting it? I'd love to see how that works.
+1 I hear it everywhere
How does it look like on Kindle? Many times books, especially Python books, have a terrible time with the code sections, to where they are unreadable. If I were to buy the paperback, would I get pdf/kindle edition as well?
&gt; But how do I watch for hotkeys/hotstrings like AutoHotkey does? It's complicated. It depends on the OS and basically requires you to figure out what system hooks the OS provides and find a Python library or module that provides access to them. It's worth noting that AutoHotKey itself has already done this work. Rather than reinventing the wheel, you could use the API that AHK provides (and then presumably it forwards them to the appropriate system hooks). Someone has provided a Python wrapper for the AHK API, I found it [here](https://pyahk.readthedocs.org/en/latest/).
Whoa, whoa, whoa.. careful, buddy. That word can get you fired these days. 
&gt; Actually, Monads are pretty awesome in Haskell ... which has also been debated up and down in the past. They aren't actually well composable, there is lots of type duplication ( e.g. List and ListM ) and even the `&lt;-` value binding is one binding too much. Of course they are also somehow awesome in the same way as Church numerals or the Y-combinator are awesome. It comes from the tradition of encoding programming language constructs using lambda expressions and in research it ain't matter if this obfuscates a code base with plenty of scaffolding. I left my comment just as a remainder to keep things direct and flat if possible, not indirect and nested. 
&gt; one binding too much. Of course they are also somehow awesome in the same way as Church numerals or the Y-combinator are awesome. It comes from the tradition of encoding programming language constructs using lambda expressions and in research it ain't matter if this obfuscates a code base with plenty of scaffolding. Sure, monads aren't as easily composed as pure functions or applicatives, but they still are most definitely composable. I still don't understand where the idea that monads somehow obfuscate a codebase comes from. Once you understand what monads are all about there is very little magic to them. Granted, it is a bit difficult to get the hang of them, but once you have, most of the Haskell ecosystem becomes pretty easy to understand. To me the tradeoff is worth it as you gain increased expressive power and modularity in your code. But really, once you "get" monads, how do they obfuscate your code in any way?
Are you trying to install python on the router using optware, or are you planning on building something that sends requests to the routers web interface and parses the responses?
Have you actually found something wrong with the motivations of the algorithm? So bad that it has to be put down? I mean, its actually pretty simple to tune its performance to get a better solution. (Just modify the features() function to include whatever you want. Rest of the machinery is already in place).
If you're planning on interacting with the web interface, here's a start. All the tables are created via javascript so you'll need account for that. Here's a start using selenium. Gets a list of the dhcp clients. from selenium import webdriver from bs4 import BeautifulSoup driver = webdriver.Chrome() #needs to be in your path, or you can specify here. driver.get('http://192.168.2.1') #whatever your ip is soup = BeautifulSoup(driver.page_source) driver.close() dhcpTable = soup.find('table', {'id': 'dhcp_leases_table'}) rows = dhcpTable.findAll('tr') for row in rows: cells = row.findAll('td') if cells: print '######## Device ########' for cell in cells: print cell.text 
No, you only tested it with three CDs so that's not enough of a sample space to say what's wrong with it if anything.
Man, so I spent my evening binging on his videos. His talk on subclasses is really, really good. It's not often that I find a talk that really makes me re-think some of the very basic ideas in my programming, but that was one of them. 
[**@SwiftOnSecurity**](https://twitter.com/SwiftOnSecurity/) &gt; [2015-02-06 19:12 UTC](https://twitter.com/SwiftOnSecurity/status/563777253272985600) &gt; System Engineer: Names servers after greek gods. &gt; Sr System Engineer: Names servers after the closest airport code and an incrementing number ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Just a random idea, could a classmethod be a way to write a method that refers to other static methods, simply using the class like a namespace?
You don't always need to call the parents init unless you're redefining your own For 2, it depends if you're Python 2 or 3
I say "dicts"
yeees i love how he talks.
In my experience when I dealt with a heavy IO based app in Haskell it produced a hard to follow codebase even though it was small. A lot of code was dealing with manipulating the monads and it was much harder to follow than pure Haskell code. The equivalent python or even c code for the problem was really plain and simple. (the app reads a directory for file contents, sorts them by date, and deletes the ones older than x days) I really enjoy haskell but the monads add some hard to follow code sometimes. Its annoying I have to remember another set of functions like mapM and mapM_ when I'm dealing with them.
Hash. I'd rather smoke that than dict any day. Joking aside, I usually say, Dictionary.
I might have missed something, but you complained about the algorithm finding Paganini and Coldplay similar. 
Why don't you iterate over and over the concept as many times as it takes you to figure it out.
`__mifflin__`
From the first image in the article: 1. Its not randomly arranged. Artists seem to separate out pretty well. 2. None of Paganini's tracks are direct neighbours of Eminem's. These are enough clues to show that the method is effective. There's a surprising amount of information we can glean from just this. So calling it insufficient data is somewhat disingenious. ( Of course, when you throw enough data at the algorithm, you'll notice the chinks in the armor. )
Anyone has a link to the slides?
Found [it](https://speakerdeck.com/pyconslides/pythons-class-development-toolkit-by-raymond-hettinger)
I don't do any iOS stuff, but I don't think this is the case - while a new SDK may require changes in kivy to work with it (though I think not always, maybe it's new OS X versions that I'm thinking of), I think the previous one normally continues to work for a while, certainly long enough for kivy to support the new one. The recent issue was because apple made a more significant change to what can be uploaded to the app store. Again, I'm not totally sure of the details, but I think primarily the problem was they required a 64 bit build that we didn't support. This has now been resolved, tito rewrote most of the iOS build tools with this and many other improvements, but it took a little longer than normal for this reason.
I'm enjoying it. I'm taking it alongside of Intro to interactive programming in python. This weeks mini-project was to build Pong. My only concern with that class is that everything is done in their codeskulptor web app which has a GUI built in. Since it's built in I have no clue how real GUIs work.
This has been seen here once or twice before, but the documentation is entirely new. Basically Hypothesis is approaching a 1.0 release, so it's both starting to be seriously ready for more users and also is at a point where feedback would be particularly useful and appreciated. :-)
For me it was how `super` actually works. Holy crackers, I've been working under crazy faulty assumptions this entire time
I'm afraid I've only just started, but here's the groundwork: https://github.com/msiedlarek/wiring/tree/master/example I'll try to find time and develop it further sometime next week.
I've been using hypothesis in a project since 0.4 and it's well worth a look. This is my first experience of property-based testing – as opposed to example-based testing. Not only are my tests more powerful, they are also much better explanations of what I expect of the production code. In fact, the tests are much closer to being specifications. Hypothesis has located real defects in my code which went undetected by traditional test cases, simply because hypothesis is more relentlessly devious about test case generation than I am!
Thanks. Your cheque is in the mail. ;-) But seriously, you've just made my day. This is exactly the sort of thing I hope to hear about it! What's the project you're using it for? Can I quote you somewhere? 
Hipster?
It's probably best to closely resemble a human being. Do not go naked. 
You also happened to misspell adjective in every single bit of that.
As far as Android goes, when you build your application you declare an Android SDK level you want, the application can then run on any device of at least that API level and above. It will also only have access to that level of API functionality. It actually gets a little more [complicated](http://developer.android.com/guide/topics/manifest/uses-sdk-element.html).but the short answer is that upgrades to Android do not change existing application's compatibility. 
I've never even heard of Kivy haha. I think my next class is going to be CS50. Everyone on /r/learn programming is constantly mentioning that course.
Yeah because then they'd think i was an anaconda Heyo
[Learn Python the Hard Way](http://learnpythonthehardway.org) is quite good, if you don't mind learning Python 2.
pants
Me? usually T-shirt jeans during conference; comfy clothes. I am not on a "serious" job hunt but I'll go in a button down just to show professionalism cause you never know.
Do a Google image search for PyCon to get an idea of how people dress. It's mostly t-shirt and jeans. If you're looking for a job, a tie probably isn't needed, but wear slacks and a button-up shirt maybe.
I would say that it depends on what kind of company you want to get in with, in terms of dress code for job hunting. For example, the company I work for would be more likely to hire someone in casual dress, as opposed to a button down and tie. These kinds of preferences are a general indication of the culture of a company I would say. In regards to the dress code when not job hunting, the conference is pretty relaxed. Bring some warm stuff because Montreal can get quite chilly. Lastly, please do not deprive yourself of a visit to Foonzo: http://foonzo.com/ Bombest game bar of all time!
thanks! that's a good point. added and live: https://github.com/makaimc/fullstackpython.github.com/commit/d1087942ea5e007f551f8cc7ce9318ed1f22deb1 :)
pycon is serious business. remember to check your privilege. probably wear a mask for anonymity too, you might be photographed and publicly shamed on twitter.
Just check [youtube](https://www.youtube.com/results?search_query=raymond+hettinger)
How you manually mount a shared drive depends on what virtualization container you're using. For VirtualBox (which I think is the one that uses "Auto Mount"), you want to do it like this: sudo mount -t vboxsf -o uid=$UID,gid=$(id -g) sharename sharefolder
maybe ask the others in /r/learnpython?
The doc is very clear, and although I haven't used it yet, the library looks also very Pythonic. Good job, I'll have a try on my next project!
You're the man! Thank you! "Auto Mount" isn't exactly autonomous, is it? lol
Always a fan of your blogs Matt, keep it up and I'll keep on reading :)
Ever since I first encountered Quickcheck, I have wondered if a similar tool could be built for Python (or with dynamic typing in general), so this idea is pretty exciting to me. I ffound [this blog post](http://www.drmaciver.com/2015/02/revised-hypothesis-1-0-plan/) when I went looking for ideas on intgerating this into django: &gt; You see, Django models come with everything Hypothesis needs to know how to generate them. They’re basically giant typed records of values. Hypothesis loves typed records of values. When this works (and I pretty much know how to make all the details work), the django integration is going to look like. I do so much testing in Django, that this would need to be easily integrated there to be of much value to me. I also had the same thought, that a django model definition is like a contract for its attributes, so it shouldn't be impossible. Anyway, how long before this makes it in? (I would be willing to contribute toward this goal if you are seeking contributors.)
Sounds like your on the right track.
fantastic; thank you for the info 
thank you! I'll keep on coding &amp; writing
If you need help with this, let me know! I can remote pair with you (for free, of course) and help out!
Yes especially about dongle sizes. There are people creeping in the audience who will try to vilify you on social media for their personal gains.
of course there is a sup reddit for that. thank you 
thank you so much for the reply...i really appreciate it 
The same functionality might be in python-mode (haven't tried that plugin yet) but the [vim-indent-object](http://www.vim.org/scripts/script.php?script_id=3037) plugin is very helpful when working with Python.
Might want to check out http://www.codecademy.com/ Very easy to grasp and certainly targeted at beginners 
Go however you feel most comfortable, you are there to enjoy your experience not as a piece of furniture. The beauty of knowledge based work is it shouldn't matter what you look like / where you are from / what kind of genitalia you have. When it does then you are in the wrong place. Have fun =)
I do generally agree with you. I only ask because I'm reading my third fiction book since January and I was looking for a change of pace. Even if it's not python specific, anything to help me in upcoming job interviews or that can help me be a better programmer would be appreciated. I posted it here because if the book is language specific I would like it to be python because I really like python.
The docs are a good place to start https://docs.python.org/3/howto/regex.html
Last year, a large majority of the attendee looked like they were wearing a tee-shirt of some kind.
http://www.amazon.com/gp/product/B00IM5UW3U
Most IDE/Editors should be able to tab sections of text. Usually it's shift+click &amp; drag over the text then hit tab. It should be pretty straight forward to insert the needed if/elif loop. As a side note, if you have 200 lines of code inside of one method you should consider breaking things up into smaller methods. This will makes it even easier to refactor next time and save you headaches down the road.
I'll look at anything I want to look at. EDIT: and people like Ardria Richards? Well, they can eat a bowl of something or other.
upvote for the suggestion to break up a 200 line method. 
can someone do that one
In expecting to see someone wearing [this](http://images2.wikia.nocookie.net/__cb20071115062413/bttf/images/1/19/Mockfry.jpg)
Fixing up your link, I think you meant: [Vim spf13](http://vim.spf13.com) Basically, you got what-goes-where backwards and had a potentially problematic space. When entered "properly", it looks like this: [Vim spf13](http://vim.spf13.com) That having been said, I'm not a big fan of spf13 or similar projects (say, oh-my-zsh). They do to much without the user necessarily knowing what is going on. If something isn't to your liking, it's a lot of work to hunt down and change. Places like the `#vim` IRC room on freenode tend to brush off people who use such things, as its to much work for them to help. They're *great* to use as a source for ideas - you can pick and chose things you like out of them and still get the benefits. Just make sure to understand what each of the things you're pulling out are. Using the entire thing at once... I'm not a big fan of. If you've been using it for a year and you've yet to run into such issues - you're happy with it - I wouldn't want to pressure you to move off of it. However, for people reading what you've put here, I'd recommend against starting with it. The article here *explains* what each of the relevant settings are, and why to use them - I'd recommend following its path instead. 
 import re res = re.search(regex, string) res.groups() res.group(n) ie: res = re.search(r'^(.*)@(.*)\.(.*)$', 'foo@bar.com') res.groups() &gt;&gt;&gt; ('foo', 'bar', 'com') [res.group(i) for i in range(0, res.lastindex + 1)] &gt;&gt;&gt; ['foo@bar.com', 'foo', 'bar', 'com'] That's about all there is to it 99% of the time. https://www.debuggex.com/?flavor=python http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/
This sounds interesting. In a few months I will be done with school, of you still havent found anyone by that time, please send a pm.
Great stuff! Really appreciated. I'm Sam, by the way. Whats your name? Shoot me an email on the address I've sent to your inbox, and when you are done with school (best of luck with that) let's see what happens? Thanks for getting back to me. S
This is the way to go - need that refactoring goodness.
Very cool. Installing now. 
OK then. :-) Well, if and when I get it working, I'll do a big announcement about it, which will probably appear here.
This type of thing has always interested me! Was a musician when I was younger but always amateur. I don't do music python, but I do a ton of data manipulation. Pretty busy right now but might be able to point you in the right direction. Feel free to pm me with More info about the project and I will take a look!
1) compile your regex. 2) use list comprehensions ffs.
Really well done blog, but between iPython notebook and PyCharm, I have no idea why you would want to use vim to code in Python.
Renaming of modules, variables, classes and methods that will Search the project for references and replaces them all. It let's me reference something like a method that don't exist yet, and will make the method signature for me. Can extract the current selection into its own method and replace with a reference to the method. Built in tools for debugging and unit tests with a excellent debugger. Good code navigation that doesn't require messing about with ctags. I'm sure I'm missing a few other things.
PyCharm has some features that are awkward or under-developed in Vim: * IPython (and notebook) integration * Code analysis * Better/easier (IMO) interactive debugging and introspection * The Git integration is simpler for people who aren't as well-versed (I prefer Fugitive or just CLI though) * The completion engine is better presented IMO. It's not really any better than Jedi at the actual completions, but the UI is better. Snippets are also easier to make, but I prefer Ultisnips. Vim can be configured to do almost everything PyCharm can, but it requires a lot of work. PyCharm also has a better UI technically, because it can run stuff asynchronously and the support for managing the more window-oriented IDE workflow is better. Of course, it's way more resource intensive than all but the most elaborate Vim configurations, but performance is still pretty awesome on a modern workstation. I can't say my experience was the same for Eclipse, but that's a different story... IdeaVim is the best Vim emulation plugin I've tried in an IDE by far. *However*, it's effectively vanilla Vim. If you have a lot of customization and/or plugins, you will still feel quite at home in IdeaVim, but you'll miss all your extras. A good example is the surround plugin (which I use so heavily I consider it second nature)... obviously it doesn't work in IdeaVim. There's a keyboard shortcut to do basically the same thing in PyCharm, but it's not integrated into IdeaVim in the same way as surround. If you don't use much past what's in base Vim, well really IdeaVim can pretty much cover all of your needs and I'd probably say you won't have any issues. I've used PyCharm and think it's great, but at the end of the day I went back to my beloved Vim setup. This has been my experience across the board using different IDEs... I like them but ultimately go back to Vim (with the one exception of CLion, for non-trivial C++ I use that). For me, the Holy Grail is if the Neovim guys deliver their milestone for a truly embeddable Vim. PyCharm with *actual* [neo]vim would be the One True Way as far as I am concerned. Edit to add: PyCharm also has some great features for working with remote files over SSH. Similar to using Vim with sshfs or something, but integrated very cleanly into the IDE. You can even kick off remote builds and debugs over SSH.
It is pretty easy to write a .ideavimr to rebind some things like pycharms version of surround to a vi style binding.
This is perfect, thanks. 
What do you mean by "simultaneous db queries"? DBAPI2 cursors are blocking IO, and neither the cursors nor the connections are thread-safe in MySQLdb (other DBAPI2 interfaces have thread-safe connections, I know of none with thread-safe cursors) so you shouldn't have multiple threads using the same cursor (or even the same connection with MySQLdb).
All good editors and ides can change the indent level of selections
@ 1), https://hg.python.org/releasing/3.4.3/file/tip/Lib/re.py#l276 a python program gets 512 free cached compiles globally before it needs to worry
DBAPI2 modules actually advertise their thread-safety via [the `threadsafety` constant](http://www.python.org/dev/peps/pep-0249/#threadsafety): * 0 means the module itself is not thread-safe * 1 means the module is thread-safe, but the connections are not * 2 means the connections are thread-safe but cursors are not * 3 means even the cursors are thread-safe
As mentioned by others, any reasonable IDE should be able to handle the indentation without much issue. However, (not directly related to your question), I would suggest writing good tests for your module/program first before you start refactoring. My general development philosophy is to get working code + good tests before changing anything. If your tests are good enough, the refactoring is really easy, because it will be obvious if you break something.
&gt;Dicks. Everyone always expects the "t" so I always get away with it. Or at least nobody has called me out on it yet.
Nudity would offer fairly conclusive evidence of being human. Clothes seem suspicious. What are you hiding?
My main issue with this is that your tests depend on the test suite you are making because you're providing the command during instantiation. When using unittest your test class is the definitive location for testing feature X. With this I can't pass my test class around as I would in unittest. I guess I would rather that `TestEchoPrintsToScreen` in the example be the base class for other tests.
Good vi keybindings and being able to work through ssh on a remote machine. Also I found pycharm to be bloated and slow personally. The only use for which I thought pycharm was even remotely useful was for navigating to definitions of things in different files. But that's fast from unique to pycharm
PyCharm has integrated ipython notebook, ctrl+click to go to function definitions, a fantastic built-in debugger, the ability to use vi-style input with IdeaVim, awesome refactoring support, built-in github functionality, and a built-in console. Plus more. I'd gladly wait the extra two or three seconds for it to boot up to get all those features over a text-editor that I can spend an afternoon downloading and installing plugins for just to get similar, though inferior, functionality.
I joined! Been studying python for about 2 months using codecademy and the coursera programming 4 everybody course. 
I'm not the author or affliated with either party, I just use this module.
I would say its good to code in python2 but also learn how its done in python 3, or vice versa. Start with python 2 since you will have a lot of things to work with. 
Love the thorough and patient way, the original coder documented the whole thing. Keep up the great work.
People still wear shirts with buttons? How extravagant. 
He's the guy that got me started in Python. I saw one of his talks and them pretty much immediately googled "Learn Python". I had no idea what I was doing and landed on the Google course, which is very hacky, but it got me started in about 8 hours. I then spent ages unlearning the hacky parts and learning idiomatic code.
I've never seen a grassroots tech company exec in a suit. They always seem to wear some kind of geek t-shirt and cargo shorts. All the guys in suits work for boring places like Microsoft and HP ... you might as well wear a Java or C# shirt tie pin if you're going to go in a suit. If they ask you why you use Python, don't say "I was taught it in school, it's useful in enterprise and widely deployed". Leave that for the suits. You say "It's awesome and I love writing code in it. Here's the USB sentrygun-o-mat I made."
Oh sure, I was just using that as an example of something I miss. You can fiddle around to bind surrounding parenthesis, then to do something else, then another thing, then another thing, on and on and on. Or you can just kick the neighbors kids off your lawn and go back to Vim. My point is that it's still different from Vim, but the degree of differences you might notice varies depending on what you use. Of course, the *right* way to go about it would be to learn how to do things in PyCharm properly instead of making PyCharm into Vim. However, a lot of people don't want to relearn things. For me, the benefits of learning PyCharm weren't strong enough to overcome the stuff I was missing and make me want to learn it properly, so I went back to Vim. Other people might have different uses/tastes. Basically, I was trying to make PyCharm into Vim, because that's what I wanted. I figured this was kind of silly.
Typical glasshole.
It's partially for ease of use, being able to do: object.css_load_time as opposed to: css_load_time = object.get_load_time(type='css') It's also because there is more logic in there than just the string type (I provided that as a simple example. If you are curious about the gritty details, you can check out the pull request here: https://github.com/mrname/haralyzer/pull/2 Thanks for the feedback!
Are these properties only set once? If so you could set the attributes once and then you don't need the getattr.. Overall, I find __getattr__ approach easier to read than properties..
Good to know, thanks!
That's a really awesome point! I did not think about that, but I spend much of my time `dir()`ing through modules. That alone has convinced me to scrap this approach. Thanks!
The company I work for contracts him several times a year to teach several different Python courses. I got to take one with him last Fall over 3 days. Very interesting guy, has a lot of useful knowledge, and knows his shit.
It baffles me why people even try to do stuff like that. It takes more time to make someone else's open-source code look like your own than it would to just properly attribute it...and no one is going to think less of something you produce because it uses other (properly attributed) OSS code. Not to mention the negative karma you get by intentionally doing it the wrong way.... GJ to the OP for tracking this down and handling it with class.
I guess it helped demystify metaclasses for me, to see them as another tool I could use in my programs, but I'm not sure it gets much more concrete than that.
If you're new to Python, you should just go with Py3 unless you have a compelling reason to use Py2. The biggest difference between the two is in the text handling, and Py3 is usually much more pleasant to use in that regard. Unless you need libraries that aren't yet available for Py3 or are working with the kinds of text that Py3 chokes on (at which point it becomes a feckin nightmare compared to Py2), go with Py3.
...which is now out, as there was an embarrassing bug I wanted to fix.
/r/learnpython please
Well, sorry to say, ugly and based on ancient testing methods. Take a look at this for comparison (powered by pytest and sh): &gt; https://github.com/jhermann/gh-commander/blob/master/src/tests/test_cli.py#L31-L72 The net result looks like this… http://i.imgur.com/rsdVvpY.png 
You could also navigate the site via a headless browser, like [PhantomJS](http://phantomjs.org/) or [CasperJS](http://casperjs.org/), and click the next page buttons (or call the javascript) that way then parse the result.
Damn she essentially got a guy fired for a fairly innocent private joke and this prompted people to support her? What?
He (markyjackson) might be trying to pad his resume. If I were hiring an IT person for a networking job, then their having experience writing Cisco scripts would be a good sign.
I think so. Some say--and I can get behind this--that code should be largely self commenting. For example, what do you think this function does? def CheckIfUserAccountIsActive(username): This said, some comments are helpful. Also, this is not really germane to only Python, and also probably is better for r/learnpython.
`__getattr__` isn't called because it's last on the list. Method look up goes like this: * myfoo.bar -&gt; `FooCls.__getattribute__(myfoo, "bar")` * Is it an instance attribute? * No? Does it exist in the MRO? * No? Hail Mary, call `__getattr__` * No? `raise AttributeError` If the attribute is found in the MRO and it's a descriptor (which properties are), `__getattribute__` calls `FooCls.__dict__['bar'].__get__(myfoo, FooCls)` and returns that result. If you're interested, I've [written about it]( http://justanr.blogspot.com/2014/11/understanding-foobar.html?m=1). Hopefully that explains some stuff for you.
I am not an expert in Python or psychology, but I think this man might be clinically insane. He should probably not be allowed to code :P
As long as it's slides-only and not in production, right ?
Yeah- our company brought him in for his 'advanced python' 4 day course, it was excellent. Can't recommend him enough.
You should especially comment if you're doing things outside of what would "look right," especially to someone looking at your code with just a glance. Another good piece of advice I heard was that comments should tell you *why,* not *what*. I don't think foo = check_for_whitespace(bar) needs a comment explaining what it does, but it *might* be important to document why you need to check for whitespace in bar.
I agree, but from the sound of it none of what he did was substantial, since all he apparently did was merge two separate, older commits together and call it his own. No contribution was actually made to the codebase. The way he framed it, he made something. If he had marked it as a contribution to the project, the little amount he had actually done (essentially nothing) would have been visible. For the con game, his method would be more impressive, if that actually was his goal.
Do you put [docstrings](https://www.python.org/dev/peps/pep-0257/)? Forgot to mention them (and need to get better about it myself).
There are few new projects, being able to modify some else's code is more valuable then someone who writes new code.
t's straightforward enough to also add these properties to `dir` by setting the `__dir__` magic method in the class. That said, I prefer /u/Brian's approach of defining the attributes dynamically when the class is created. This sort of approach is perfectly valid and quite sensible in many cases. For example, I use it to define an array class adding metadata to NumPy's ndarray that needs to implements most binary operations (e.g., `+`, `*`, `-`, `/`, `%`, `**`, `&lt;`, `&gt;`, `==`, `!=`, ...). It would be a good bit of repetition to write a method for each of these.
They might find out I'm a... Haskell
Might be useful for a distributed webapp type situation, would imagine it's a lot more convenient to include this rather than requiring someone install redis.
Reading the announcement, development seems to be the intended use. That would sort of makes sense if Redis was not absurdly easy to install and configure.
Providing a dummy server for unit tests is a pretty big deal. Any time you can remove a complex dependency, like Redis, you greatly simplify the whole process.
That's just what you do...I get pycon is causal, but still...sigh...you should also stand up straight when talking to people. You want to be taken as professional act like one. If you're Guido, you can probably skip that part. If not, dress the part.
Is it easy to use this with Matplotlib, and what are the advantages over [Seaborn's color palettes](http://web.stanford.edu/~mwaskom/software/seaborn/tutorial/color_palettes.html#palette-tutorial)?
I am using Redis on Windows and deploy to Linux without any issues.
HELP is not a good topic. If the single best one-line description of your problem is "HELP", you need to take a step back, and consider what you're doing with your life, your brain, your keyboard and your existence. Next up, please read the page [Formatting help](http://www.reddit.com/wiki/commenting). Especially take the time to search for "preformatted text" (code). After that, please take a few moments to browse /r/learnpython, read the beautiful sidebar, and think through your problem. To start with, is `maths` really a good term of _anything_, `number1` and `number2`. Why are you mixing `operation` and `ops` in your code? Empty strings for "input" operands? What happens with your code when someone just hammers return? There's so many things wrong here. And it all starts with your first request. `HELP`
From the design section of the docs WSGI applications are run on an asyncio executor. This allows existing Python frameworks like Django and Flask to run normally without blocking the main event loop or resorting to hacks like monkey-patching the Python standard library. This enables you to write the majority of your application code in a safe, predictable environment. Asyncronous parts of your application (e.g. websockets) can be run on the same network port, using the aiohttp router to switch between your WSGI app and asyncronous code. https://github.com/etianen/aiohttp-wsgi#design
Awesome post by Wes
"dicts" is this a trick question?
I don't doubt it works fine, I was just under the impression you wouldn't use it for live production. Ergo as the windows version seems to be mostly for development and testing, does this redislite interest you?
is this the sqlite for key value stores? does it cover all redis features? this sounds awesome!
You need to post in /r/learnpython instead
I remember having trouble getting celery working for Windows a while back and Redis was one of the "other" backend options ... (A lot of it was over my head) ... could redislite help with celery?
Thanks for the feedback lurker.
A comment should explain why, not what. Also, if you add too many comments, you break the flow. It's. Like. Reading. Something. That. Has. Periods. All. The. Time. This is dumb overcommenting: # Initialize the foo subsystem foo = initializeFoo() # The query string query = "myquery" # Check if the subsystem is able to perform queries if foo.canQuery(): # Perform the first query foo.doQuery(query) This is proper commenting # Occasionally, the foo subsystem can throw an exception because python # does not handle EINTR'd syscalls. Neutralize it. Won't be needed for python3 (pep 475) while True: try: foo.fetch_data() except IOError as exc: if exc.errno != errno.EINTR: raise else: continue 
It very well could. RabbitMQ is the recommended celery message broker, but I have used Redis before successfully as well. If you're only looking for something to simplify your development environment, however, I'd take a look at Celery's [CELERY_ALWAYS_EAGER](http://celery.readthedocs.org/en/latest/configuration.html#task-execution-settings) setting, which allows you to run Celery tasks in the foreground just for development. With it enabled, you don't need a message broker at all, I believe. 
Ah, that makes sense - I figured there was a miscommunication. I am pretty excited to try it out!
Hello. I am brief description of Hy. If you wan't to know what Hy is, ask me and I will reply. This is the most efficient way to describe the project, and definately more efficient than putting at ****** description at the top of this post. Thanks a lot -- hybot
Doesn't Flask use thread-data internally? I understand asyncio is not a multithread interface but it seems thread-data would become overkill, wouldn't they?
For example, running ansible with facts caching without forcing you to install/run a redis server.
Yes. Remember : https://en.wikipedia.org/wiki/Don%27t_repeat_yourself Avoid this: def do_something_cool # Doing something cool Comments are supposed to be for things that are not obvious from reading the code. It's actually not a bad idea to leave out comments altogether, and only put them in *as* you are explaining the code to somebody, and *only* then for the parts of the code where they asked questions ("what does this do?" "why is it like this?").
There's also [fakeredis](https://github.com/jamesls/fakeredis), which is helpful if all you want to do is write unit tests without requiring a redis server.
unless you use some special seed for the random number generator, not always. You could luck out and get one that is though
You could just use type, no?
Seeing as all the metaclass does is assign the args as instance variables, there are no limitations in place. The version above that uses the metaclass is functionally equivalent to the version where the variables are set explicitly. It's basically a short-hand way of making container classes without having to explicitly type out every assignment to the instance.
Namedtuple causes all of the variables to be immutable though, this is trying to emulate a c-style struct which is mutable. I made it more as a response to this question on SO. http://stackoverflow.com/questions/35988/c-like-structures-in-python \_\_init\_\_ doesn't have to be empty at all, you just run the risk of saving arguments you might not want. &gt;&gt;&gt; class B(object): ... __metaclass__ = Struct ... def __init__(self, a, b): ... self.c = 12 ... &gt;&gt;&gt; a = B(1, 2) &gt;&gt;&gt; a.c 12 &gt;&gt;&gt;
It's a working mock. You need to learn to read the whole sentence. There's no communication between you and redis server. It's essentially mocking that part out.
Would this work with python-rq? If so... awesome.
Fair enough, but do people really do this that often? I would probably use a namedtuple for things like this. 
A named-tuple isn't mutable while a c-style struct is. Also, this SO question on it has 123K views so a fair number of people have looked into it. http://stackoverflow.com/questions/35988/c-like-structures-in-python I agree it's not a burning issue in Python but I thought it could help people. I've used classes like this enough recently that the time spent learning to make the class should be worth it for my own use.
Only if you're really really lucky
Unless you're interested in event-based programming on coroutines, that's quite okay. :P
You make a good point. I did consider a version with decorators but I found the meta-class version easier to write and think about. My only suggestion would be to use this for "dumb" classes where its only purpose is for grouping related data. I understand code should be self documenting but would something like the following comment not get rid of the ambiguity? # The args to __init__ are assigned to the instance due to the above meta-class 
The python redislite module does not mock the redis server, it has a complete redis-server embedded in the module and adds functionality to have the bindings configure/start a redis-server on access and shutdown and clean up on exit.
Redislite uses unix domain sockets not the network for communication. That's why TCP communication is disabled by default.
Would be cool to add logic to either indicate if it is solvable or to force it to create a solvable one. Though, making that one-line would be...difficult.
&gt; python-rq It certainly looks like it would work if you used from redislite import Redis instead of from redis import Redis. 
Can you one-line pre-compiler directives though? Like #defines
i just tried it on one of my projects with celery for async tasks... put this in local_settings.py: import redislite rsl = redislite.Redis('/tmp/redis.db') BROKER_URL = 'redis+socket://' + rsl.socket_file CELERY_RESULT_BACKEND = BROKER_URL done: django process and celery workers use redislite sharing the temporary db.
Great article/tutorial, but for whatever reason that post, but not your other posts, renders the images directly under the text, so it is impossible to read. Works great in chrome though.
It helps :) even in the decorator version I might include that kind of comment if I expect this code to get a lot of new readers. I might play with the decorator version of this later — I suspect it's probably about the same level of complexity.
PythonAnywhere dev here, just to say, we also pride ourselves on offering personalised support, so if you ever run into any problems, just drop us a note to support@pythonanywhere.com. Aside from that, thanks so much everyone for the nice comments!
You probably need to add: from __future__ import print_function
This looks really promising, I'll give it a shot and let you know what happens! :D
I was leaving her with some delegated work.
The import statements are all from the Python standard library, at least. 
You can process them first then one-line.
Whoops, that was bad phrasing on my side. I initially imagined something like a simple in-memory dict, and rather assumed that redislite doesn't do any IO.
Oh, I had assumed aiohttp-wsgi was single-thread but using co-routines. 
Personally, I use `setup.py` with the `entry_points` option. If I made a more in-depth application I might consider something else, but it would be significantly more work. You wouldn't just have to maintain a deb but also an AUR, etc., if you want to support more than just Debian. Meanwhile, anyone with a Python installation can get your app with `pip install` regardless of OS. Curious what others have to say though.
[They're so adorable in 5e](http://i.imgur.com/zkTnMXd.jpg)
You may want to see this video https://www.youtube.com/watch?v=sPiWg5jSoZI. It describes really well what are the pros and cons of this approach and how to overcome them using really hacky code.
pip package pyTelegram is an infuriating red herring!
I'll give it a watch, thanks.
A [wrapper](http://en.wikipedia.org/wiki/Wrapper_library) is a library that provides a thin layer around an API. In this case the library that I linked, [PyAHK](https://pyahk.readthedocs.org/en/latest/) *wraps* the AutoHotKey API, allowing AutoHotKey functions to be called from Python. As far as what it's specific capabilities are, I can't help you as I haven't used it. But it looks like its documentation (which I linked) provides that information.
Fundamentally, they *are* all the same. IDLE is just a wrapper for the command line, and Pyscripter is a more fully-featured integrated development environment (IDE). The differences come in the external features they provide, like tab complete, code highlighting, snippets, variable tracking, step-by-step debugging, etc. The command line offers none of these things, while more advanced IDEs do. Personally, I use Sublime Text 3 with a few plugins (linters and highlighters mostly) to make things easy, and then the command line for running things. I like my setup fairly bare-bones, but one of my coworkers uses vim and has it extensively modified to suit his needs.
What happens when I need to do setup in `__init__`? Compute some protected attributes or run some method as part of initialization? 
A [proxy interface](http://code.activestate.com/recipes/496741-object-proxying/), yes?
Well `__init__`still works just fine. All this literally does is assigns the arguments to the class before `__init__` gets called. If you're going to pass a lot of temporary arguments to `__init__` then either this isn't really for you or call `del` on them. It's more designed for container classes. If you had to do a lot of pre-setup then you could also design your class to take the "true" values and use `@classmethod` to do the setup.
Frankly, I thought that (and pretty much any Data centric analysis) this was screaming for some nice plots. Without any data visualization it's hard to grab a reader's attention. See for example - http://blogs.mathworks.com/loren/2014/10/16/taking-the-pulse-of-moocs/
I think it's a bad idea. If you're composing objects like this, you should explicitly proxy the call. class Greeter: def greet(self, name): return "Hello, {!s}!".format(name) class B: def __init__(self, greet, name): self._greeter = greeter self.name = name def greet(self): "Defer to stored greeter" return self._greeter.greet(self.name) If you really need to do this, a more nuanced approach is needed: def attrchecker(name): return lambda obj: hasattr(obj, name) class Greeter: def greet(self, name): return "Hello {!s}!".format(name) def bar(self): return "From greeter" class proxier: def __init__(self, *others): self._others = others def bar(self): return "From proxier" def __getattr__(self, name): possible = next(filter(attrchecker(name), self._others), None) if possible: return possible.__getattribute__(name) raise AttributeError("No attribute {!s} found".format(name)) Then use it like this: &gt;&gt;&gt; p = proxier(Greeter()) &gt;&gt;&gt; p.greet("Fred") ... "Hello Fred!" &gt;&gt;&gt; p.bar() ... "From proxier" &gt;&gt;&gt; p.tim ... AttributeError: No attribute tim found Generally, I'd say this is a bad idea. Of course, there's cases when it *is* useful. Remember that `__getattr__` is the last stop on attribute look up. Sort of a "Hail Mary pass" in hopes the developer put something there. In the above example, `proxier.__getattribute__` found `bar` in `proxier.__dict__` first and stopped the process there, never reaching `Greeter.bar`. As for hidden gotchas, are you going to remember you did this when someone files a bug report and you can't track it down? Or are you going to be cursing your name?
Aw shucks, you're just sayin yer cousins are ugly.
I agree with your point, but I think a thousand times before installing something with pip (let alone `setup.py install`, or something like that) outside a virtualenv. For some reason I just don't trust that it will uninstall in a clean way later.
No.
I think [Graham Dumpleton's proxy]( https://github.com/GrahamDumpleton/wrapt/blob/develop/src/wrappers.py) is a better solution as it addresses the `__getattribute__` bypass Python performs on certain lookups . 
Explicitly proxying each method was what I was hoping to avoid because the classes I want to proxy have large name spaces (I can't change this). I want to override just a couple of the methods that are common. I also was hoping to avoid a new crop of classes deriving from those to-be-proxies classes. But that's probably the best option. 
Did you read David Beazley's pycon 2014 metaprogramming presentation? It's right up your alley. 
A guy linked it above and I watched the first half hour, it was pretty interesting. I'll watch the rest another time. Thanks for the tip though.
To make a DEB out of your project within a few minutes: https://github.com/Springerle/dh-virtualenv-mold This simply removes any issues with uninstalling and upgrading. See https://github.com/jhermann/devpi-enterprisey/tree/master/debianized-devpi for a practical example. A similar solution for RPMs is https://github.com/kevinconway/rpmvenv, and then there's always FPM.
You need to ensure that the SDL DLL is accessible from your library path. The easiest way to do this is to put a copy of it in the same directory as your python script.
The slides are great too. Your init meta class is in there almost verbatim. Very good stuff! 
32 bit
I feel like half of my comments in this subreddit consist or redirecting people towards /r/learnpython
Aw shucks, you're just sayin yer ugly.
Lack of a solid migration path to other services if you ever want to leave is the big one for me. Basically, you don't have a web application, you have a Google application, and if that ever becomes an issue, you're in for a fun time migrating away. There are some development strategies to mitigate this pain, but I'd rather use more universal hosting services to avoid the issue entirely.
Can't wait to use these at the bar!
Yeah at the top I was with you but when you went into a full page of comments I knew exactly what you meant :D
Fair point. I will try to add some plots. Thanks for the feedback!
I haven't had the chance to dig through it in detail, yet, but http://newcoder.io/ might be of some use. Also, if you want to write multi-threaded code for scientific data analysis, a few things to keep in mind: * You really want [multiprocessing](https://docs.python.org/3.4/library/multiprocessing.html), not threading (because of the [GIL](https://wiki.python.org/moin/GlobalInterpreterLock), threads in Python are of no use for CPU-bound tasks). * If you haven't already, take a look at what's out there, namely [NumPy](http://www.numpy.org/), [SciPy](http://www.scipy.org/), and [scikit-learn](http://scikit-learn.org/stable/) for much of the "heavy lifting", along with [Pandas](http://pandas.pydata.org/) for munging and [matplotlib](http://matplotlib.org/) for visualizations. * If you plan on analyzing large datasets, one machine will only get you so far. If your needs (and budget) warrant it, you'll eventually want to look into distributed systems. 
A decorator version, for fun and readability :) from functools import wraps def init_all_args(init): @wraps(init) def wrapped_init(self, *args, **kwargs): names = init.func_code.co_varnames[1:] for name, value in zip(names, args): setattr(self, name, value) for name, value in kwargs.iteritems(): setattr(self, name, value) return init(self, *args, **kwargs) return wrapped_init class Vector(object): @init_all_args def __init__(self, x, y): # x and y initialized in decorator self.z = 3
A lot of the comments were clueless bullshit, too! I truly knew nothing. The only difference now is that I know I know nothing. Hence [Beginner]. EDIT: Oh hey no [Beginner], not on /r/learnpython.
/r/learnpython please
"Move to" is a very different issue from "start new project with". One entails extensive refactoriing, the other doesn't. Django itself is stable with Python 3 but that doesn't include all of the plugins or dependancies you might choose to use. You'll have to decide for yourself. Likely, the answer is going to be to staying with 2, but as stated, you aren't a -new- project.
I'm not big on tattoos but that is seriously an awesome design.
That makes a lot of sense, to start a new project, but if you're looking to get into web development and Django, you can't really afford to get onto anything but Python 2. There's simply too many big things that need 2 still. That being said, I'd switch over in an instant if it was as easy as flicking a switch.
I'm more familiar with running something like py2exe first, then bundling into an installer. So your tool bundles the scripts and in interpreter and then installs that interpreter and the scripts, packages, and data files necessary then makes shortcuts to the interpreter? So there's no myapp.exe, but it all "just works" for the end user?
With pyodbc I always find myself writing string parsers when I get output from a database.
 import game
the problem is that I can't even get that line from the database. As soon as it gets to the cell in execute() it crashes. if it read that entry as a string I could parse it and convert to a float fine, but I can't get that far 
Browse the [python standard library reference](https://docs.python.org/3/library/index.html). There are thousands of useful tools in there that will come in handy.
You can try the 3.4 library [here](http://programarcadegames.com/index.php?chapter=foreword&amp;lang=en#section_0_1)
Not the logo I was expecting to see. That is a really cool take on it. Good job man.
Celery looks nice, but I can't use that here. My code is to run in a sandboxed Python environment. A large part of the standard library is off limits. If it touches a file or file-like object, my code can't import that module. However, I'll certainty keep celery in mind for projects that aren't so restricted. 
Great article! 
I was hoping to see the old silly snake :) http://www.markus-gattol.name/misc/mm/si/content/python_lovely_goofy_snake.png
No Monty Python? Isn't that what the language was named after?
Cool tattoo. I imagine that it may actually age well with time, as after Python fades into the same place as Fortran (and [associated tattoos](https://www.flickr.com/photos/ladyartemis/8106062527/)), you'll still have two kickass snakes on your calf.
Hmm... Is there any way to auto refactor code to python 3? Like print "" to print("") and so on.
what is @ again? Can you actually explain your call? You can do everything you want in Python, but you will need to reword it a little. Also, format it properly, so no ...s on the same line as your call and is it really necessary to say `fullModel =` and have that be part of the line? Also, why you have a dot after 382.7458? Seems like you have a syntax error.
It's a shame your tattoo is deprecated. This is the future: https://plus.google.com/+FrancescCampoyFloresP/posts/Crhp8fDv4pr
Did you check google? What have you tried? http://stackoverflow.com/questions/16917149/how-to-make-gps-app-for-android-using-kivy-pyjnius
Dot is an element-wise operation, the default in NumPy.
oh right b/c matlab is silly... That's easy... from numpy import sqrt fullModel = sqrt(382.7458 * b[3] * x[:, 1]) Python is 0-based, not 1-based, so we get a change of index. `b` and `x` should be ND arrays, not lists. `fullModel` is the same shape as `x[:, 1]`. No `dot` is necessary because `b[3]` is not a vector, but if we were multiplying `b.x[:,1]`, we'd do `dot(b, x[:, 1])`.
Mehh...that's not the tricky part. It's a one liner, so use a function if you want. I dislike lambdas and also dislike making functions to calculate simple things. Maybe you would call it a bunch all over the code, but I wouldn't think so.
You never know. From a scientific computing point of view, I'm getting more and more used to write simple, documented functions for "simple" things. Not only because it's (in the end) faster to type, but also because six month from now, you might wonder why you wrote "d = m/v", while a "density" function would be easier to read. Apart from that, sometimes you **need** functions (or lambdas), e.g. if you want to do numerical integration, or something like that.
Yeah, but remembering that python has a with operator requires that I'm not drunk right now. Not to mention it makes it hard for me to type snarky code.
My system (Debian Jessie) defaults to Python 2. Every package expects `/usr/bin/python` to be Python 2, which means that symlinking it to Python 3 is going to break things. The GP might be in the same situation. It would be better for future adoption if all calls to `python` were to Python 3 and any packages that need to stick with Python 2 call `python2.7`, but that's out of my hands.
For things where it's simply the API that changed (eg `print`, float/integer division, etc) I'd be surprised if there weren't a tool already out there. For stuff that's new to Python 3 I imagine that's going to be a big project. Something like that does exist for C++ (clang-modernize) so it *can* be done, but I think they had to use a parser for some of that stuff. They definitely had to lex the code being refactored.
I'd like to add to this: when in exploratory mode, don't bother too much about naming stuff. Just go with the metasyntactic variable names foo, bar, baz and when your code works rename them. This way you're not locked into the way of thinking of when you named your variables in the beginning and can freely change them in subtle ways until you're done.
That is so freaking badass! I love it!
Unfortunately the comparison is not fair. In a novel, the perfection of the refactoring is required because the final product of the refactoring is the one that the final user actually consumes. In programming, it's not. The user does not consume the code. The user consumes the execution of the code. Which is basically like saying that the final reader does not read the novel, he gets it narrated by someone else. The actual way the story is written is not influential to its enjoyment of the story. This is why, as far as I've seen, refactoring is hardly done, and how in particular an agile framework, focused on user-targeted features (rather than programmer-targeted needs), ends up discouraging it (ironically). Refactoring is for the programmers, not the users. As long as the code works, it gets money, and that's all a business is about. I'm not saying I agree with this, but it's the harsh truth in most contexts I've been. 
Sounds to me like you need to know two things: [how to work with files](http://www.pythonforbeginners.com/files/reading-and-writing-files-in-python) and [how to work with strings (text)](https://docs.python.org/3.3/library/stdtypes.html#string-methods). If you have any specific questions, feel free to ask! Also, in general, /r/learnpython is more suited to this kind of questions, you're likely going to get better help over there.
I like the tattoo but I am confused by [where it is](http://i.imgur.com/cAArg5D.jpg). I looks like its on your calf and that's your foot at the bottom but why does the front of your foot look clubbed? I suppose its probably just the angle of the photo.
maybe search this sub for the one million threads about this topic?
You cannot diff/merge binary file. Ofc git handle prety well diff in SQLbinary file, but you know, is not human readable and for Merge Issues you are screw.
Yeah sorry. My bad buddy. Let's hope if someone understand the -rly bad- title, it will click on it, find the gist self explanatory and useful. Have a nice day, kind stranger!
To clarify, when I said: &gt; it may actually age well with time, as after Python fades into the same place as Fortran I was referring to how long a given cultural reference would be relevant. I suspect that Bible verses, poetry, and images that don't allude to a TV show (e.g. Google [*My Little Pony tattoo*](https://www.google.com/search?site=&amp;tbm=isch&amp;source=hp&amp;biw=1133&amp;bih=725&amp;q=my+little+pony+tattoo&amp;oq=my+little+pony+tattoo)) will still make sense and be seen as relevant 50 years down the line.
This is as good as i expected.
That's half the fun of ~~arguments~~ discussions online (and IRL too)!
I have, and all of the ones I found were about which version to use, not the story behind why they are they are split.
Haha are you in Edinburgh? Work nearby? Skyscanner employee here :D
If Go is good then why isn't Google pushing to support it with Android as a replacement for Java? People have been asking that since [2012](http://www.androidauthority.com/android-switch-java-go-86040/) meanwhile Apple launched Swift as a complete language despite Google having a huge head start with Go but they chose to stick with Java instead.
I love Python and tattoos and all, but it's a programming language, not a religion. That said, it looks pretty well done. Good color and lines. 
The speed is the main factor here. The language gives certain properties that allow a good deal of optimisation.
This appears to be very similar to [flake8-import-order](https://github.com/public/flake8-import-order) which depends on flake8 instead of py.test.
Gotta agree with the other guy...read the title, read the gist, still had no idea what problem you were trying to solve, came back to the comments and went, "oh." You *probably* shouldn't be committing db data to version control anyway, but I guess if you're going to this is a decent way to do it. However your naming convention for things is terrible. Use underscores, don't use numbers to join words.
Because upgrading a programming language has nonintuitive quirks: it's not an application where you can just tell your users to install the new version, it's not even a standalone application + a language interpreter where the application writer can just tell their users to install the new interpreter too. A very large part of the value comes from libraries, and libraries have to support the previous version until most applications have migrated, and that can only happen when most libraries support the new version. It's not exactly a chicken and egg problem, but it means that for quite a while libraries have to support both versions -- preferably from the same code base, preferably from the codebase targeting the new version actually. Unfortunately our Benevolent Overlords completely misunderstood the nature of the beast, apparently expecting people to just gradually migrate their stuff to Python3 completely abandoning Python2 in the process, so whatever support we have for writing libraries that support both is (slowly) developed by the community and is pretty gnarly because nobody took it into account when deciding on the ways Python3 should be allowed to break backward compatibility. Of course a bunch of people just wanted to get to The Future with none of that pesky real-world problems, so they stuck their heads in the sand and hoped that Python2 would just go away. 6.5 years later that hasn't happened, but some people still haven't pulled their heads out.
As far as bad life choices go... this one turned out great! No sarcasm here, that tattoo is awesome!
Hello! o/ Originally from the east coast, studying over in Glasgow for a while. Know a fair few EDI lifers, will need to ask if they had any dealings with Skyscanner.
I did think about that for a while but there's just too much damn material to choose from... 
Main reason behind this was marking finally getting into university thanks to work I've done with Python. It was a huge confidence boost being able to understand all these new concepts fairly easily and seeing stuff I'd made come to life. Got to uni a few years behind schedule but loving every minute of it now I'm here. \* \* Except HCI. Fuck HCI. 
&gt; incest is distasteful TIL 
Maybe file a bug with the vlc guys? the bindings work great for me.
Picking your nose is also distasteful. 
Can you use the insert_media() function without any trouble? I tried on Windows and on Ubuntu, the error remains the same. I might try an older version of their bindings.
Never tried it. If it is crashing cant you just generate a temporary playlist file (.pls format or some other text thing) and ask vlc to load that playlist? Please file a bug anyway.
personally i reached the conclusion that style and static checks are not tests, thus shouldn't be part of the normal testing process
https://wiki.videolan.org/Report_bugs ask in the forum or register and file a bug on trac. Thanks!
&gt; Is it possible to make relations between variables, for instance if my function has parameters n(int) and k(list of int), is there a way to tell him it must generate cases only where n == len(k) holds? At the moment, no. The way I'd recommend doing something like that is to wrap it up into an object. Something like the following: from collections import namedtuple from hypothesis import strategy Params = nametuple('Params', ('n', 'k')) @strategy.extend_static(Params) def params_strategy(_, settings): return strategy([int], settings).map(lambda k: Params(len(k), k)) I have some ideas for how to make this sort of thing easier, but it probably won't be happening any time soon.
Have you seen [faker/fake-factory](https://pypi.python.org/pypi/fake-factory)? It's more or less the same sort of thing.
What is this shit? Did you just google python frameworks and the make a webpage about it?
Noteably, most often this is/was because the Py2 version was likely broken for non-english text in the first place.
How do you get Sublime to work with inputs. I've tried and googled but the only thing i can figure out is using a workaround and going through the menus to run it with SublimeREPL
Like it. It's kind of good,because logo is still recognizable and modified to look nice as standalone picture. But I actually have one thing to say. Pythons don't have fangs.And (I'm not sure) snakes hardly have teeth at all. [photo](http://i.imgur.com/WI4aB3A.jpg)
Nothing gets more down to the nitty gritty (aka not noob friendly) then the documentation. The documentation contains both language and library references. [Python 3 Doc](https://docs.python.org/3/) [Python 2 Doc](https://docs.python.org/2/)
Thanks, this will definately help.
Because Python 2 does some things wrong. It deals with encoded/binary strings by default. If you're dealing with ASCII stuff only, this is great. If you live in an international world, this is fucking balls. Of course there are still many opinions over whether Python3 got it's handling of strings absolutely correct as well. It has heaps of old, crufty parts of the standard library it has to support. Python 2 has `urllib` and `urllib2`, rather than just one good version of that API. And many other mistakes in standard library APIs where we only figured out better ways to do things years after the original functions were included into Python. The form of the standard library was cleaned up, all the names standardised into a cohesive, uniform format. Implementation decisions that weren't really great for python were changed to be better. The distinction between a long and and an int disappeared, for example. Old-style Classes were gotten rid of, because simply the new ones are better. *Everything* was made first-class Object-Oriented. Syntax was cleaned up and "de-ambiguised". print is no longer a special statement. Loop scoping contexts were fixed, function signatures are more flexible and easily specified, metaclasses are easier to work with. And then the whole underlying CPython virtual machine was getting pretty crufty and hard to work with, not to mention old CPython Binary Interface it would always have to support (always tends to happen with a decade old codebase) suffer the same mistakes of being bad designs that still needed supporting forever. It was a whole lot (seriously a lot) of paper-cuts of "we could have done this thing better here, if we got to implement this again" that would all be backwards-incompatible to fix within Python2, so the core devs decided a Major version bump was needed. [See also Nick Coghlan's Q&amp;A](http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html#why-was-python-3-made-incompatible-with-python-2) - Really, the whole article is absolutely exhaustive on this subject.
When I try to do something like: a = input("blah") print(a) It throws up an error and I have to run it using sublimeREPL
... less than 1 hour? One day? Time it takes to open excel?
I had some hurdles: * I don't have excel * google docs couldn't import the files for some reason (they appeared empty in google drive) * Mac's "Numbers" application wouldn't display it when imported either * Installed LibreOffice but it wasn't "trusted" by Apple so initially wouldn't open via `open thing.xlsx` command. so I wrote the CLI.
I rarely use input, but because that requires usage of a shell, you won't be able to run it directly in Sublime. That's when I use the command line.
Yes it is. less is a Linux pager program. http://en.wikipedia.org/wiki/Less_%28Unix%29
less the Linux pager program, http://en.wikipedia.org/wiki/Less_%28Unix%29
http://b.fastcompany.net/multisite_files/fastcompany/imagecache/1280/fc_files/2009/1146469-youtube-monty-python-videos-boost-dvd-sales-23000-rotator.jpg
He's reading the Excel sheet using the cli tool Less; tbh the title reads OK to me, hence the confusion with the joke.
I'm going to give you a heavy hint, but I'm not going to fix it for you. :) It appears to me that your are missing the data and/or the code for the 'finished' state. 
Probably going to get down voted with this comment, but WTF, you're clearly not experienced enough. An experienced programmer should already know how to pick up additional languages. At least know how to use Google? Edit: Generally, you should already have a checklist of things to do when you're learning a new language. For example, you might want to: 1. Control structures - normal ones are easy, learn the special ones like list comprehension for python 2. Figure out how the class/obj system works, if there's introspection, learn how that works 3. How to import a library, how to write your own library 4. How to set up your environment 5. How to deploy your code to another environment 6. Do something non-trivial that you've done before in another language 7. ? 8. Profit 
Cool, reminds me of [antiword](http://freecode.com/projects/antiword).
Thanks for pointing that typo, a fix will be deployed soon.
Nice package. [I did pretty much the same thing](https://gist.github.com/dAnjou/83642b547b7a797a6218) some time ago as a PoC for a feature to import Excel files in our web application. 
Please consider submitting this question to /r/learnpython as it will likely be removed from this subreddit. /r/Python is not for basic homework help Also, for future note when asking for help with homework: It is **imperative** that you provide some code that you have tried and not gotten to work along with some general questions about what is going wrong. You should show that you have at least worked on the problem before seeking help and then try your best to explain what concepts you are not understanding. **Please** do not just submit a post saying "here's my homework: how do I do it?" "struggling college student" and "teacher can't teach well" are irrelevant. Also you can submit your code inline with your post by putting four spaces in front of it like this: x = 5 sys.exit(0) #comment
I've never had a problem with my single threaded bot on an Amazon AWS Windows Server 2012 or an Ubuntu machine at home (Python 2.7). Usually get connection errors when I don't have a sleep built in. Can't speak to using the two together in a multiprocessing or other threading library situation. 
I'm running Python 2.7.6: $ python Python 2.7.6 (v2.7.6:3a1db0d2747e, Nov 10 2013, 00:42:54) [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin importing click works I see the following relevant directories: /Library/Python/2.7/site-packages/x_x /Library/Python/2.7/site-packages/click But I must be having other problems because when I use virtualenv and install x_x, it works, but virtualenv is using Python 2.7.5 for some reason. I'm not sure if that is relevant to my problem here though. I'm not desperate to use x_x on my Mac since I'm most likely to use it on Ubuntu, but I'll see if I can get it working mostly out of curiosity. Thanks for the suggestions.
oh right, I guess that sentence sounds confusing if you don't use `less` all the time. Not sure how I would have fixed that...
This invokes less as a subprocess and writes the data to it. It uses the `-F` option (among others) which quits less if the output fits in one screen.