That's pretty terrible. When I teach CS2 I make them implement the various (simple) data structures and algorithms, which Java is rather nice for (given the ease of making and using classes compared to say C++).
Yeah, but you can totally kluge out a class system in C. [idtech2 even had polymorphism](http://fabiensanglard.net/quake2/quake2Polymorphism.php).
My biggest problem with C or C++ is that memory management is really daunting for a beginner. I made it through three levels of CS classes taught in C++ without truly understanding memory allocation and reference (the 300 level data structures class was very frustrating as a result). It wasn't until I took another course that started from binary/simple assembly and worked its way up to C that it really "clicked" and I really understood how memory and pointers work. Ironically, that class was added to the school's curriculum because the main programming language was transitioning from C++ to Java. C and C++ are still very valuable languages to learn, but I think they can be really frustrating for a complete beginner.
I think the biggest thing I hate about pythons syntax is the ambiguous line and scope termination. Biggest source of Bugs I have ever found. 
I'm saying that classes are intrinsic to OOP, C being what it is you could naturally implement them if you really desired - but that wasn't the point I was making.
Why? What do you want to do with the scanner? Messing with the low-level stuff likely isn't what you want to do. But if it is, [this](http://www.usb.org/developers/devclass_docs/usb_still_img10.pdf) should help you getting started.
I want to scan. I want to get an image. And like I said, twain and imagescanner wasn't working for me, so I figured I would go for the harder route of usb, in hopes that it would work.
Sure, but forcing OOP suggests its the only solution to all problems, when its not. I would really suggest that the real goal should be to move towards more and more functional programming. As an aside, take any non programmer, and they will pick up on code done in a functional style much quicker than imperative.
I just did my first go pull request last night. I have to admit: running the entire mess through 'go fmt' made for a very nice experience since the original maintainer did the same before publishing, and my .vimrc uses the wrong tabstops (oops).
The fact that both introductory, required CS course at my uni are in Java is what stopped me from seriously considering doing CS. Even to get the minor I have to take those two java courses before I can take the courses I want to take
I took your suggestions! I got it to check `*args` and `**kwargs` so that the following works as expected: @app.cmd def foo(debug=False...) @app.cmd() def foo(debug=False...) @app.cmd('bar') def foo(debug=False...) ''' command will be bar ''' @app.cmd(name='bar') def foo(debug=False...) ''' command will be bar ''' There are no extra magical args/kwargs in `Application.cmd` yet, but they are possible along with the above functionality. Thanks for your suggestions! 
It's definitely doable (as in _other software can do it_), but magnitudes more stuff to do than just getting the existing drivers/infrastructure/libraries to work, even if you have to fix bugs/port to 64-bit/Python 3/whatever.
But you have object orientation in Javascript which hasn't had classes for pretty much all of its life. Class hierarchy is just another inheritance paradigm, as is prototypal inheritance. You could argue that hierarchy is intrinsic to OO, which I don't really think is 100% true, but classes are not.
Don't make Lisp cry :(
Sounds hard, but if you really wanted a challenge, then maybe try to find some (open source) Linux drivers and figure out the protocol.
Yep, just like PHP. Only more maintainable. And more boilerplate. And you need an IDE to write it because you may have a thousand files.
I'd have known that before if the documentation wasn't so shitty.
Serious question... What's wrong with virtualenv? Hacky or not, its always worked perfectly for me.
This was difficult to watch.. His monotone voice put me off from the beginning. I tried really hard to focus on the content.. but my puny human mind kept counting the amount of times this guy said "basically".
I agree that C# has a lot of parts to it (and .NET's standard library is very large) but I disagree with it being an "incredibly verbose language". With type inference, lambdas, LINQ and even the dynamic keyword, you can have some relatively concise code. I actually went from C# to Python and I like both of them for different reasons. While Python still tends to be a bit shorter (don't have to worry about generics, the way it does decorators is awesome, etc), it isn't the case for all things. If you find yourself doing a lot of collection processing (more than what a simple list comprehension would handle), I tend to find it easier to deal with in C# with LINQ and lambdas.
If you can get a good editor, it may easy the pain of the parens a bit...
Why just not use pyvenv? It comes bundled with Python 3
One thing that I think is useful is to try to think of language features and patterns across a range of languages, especially as you learn more of them. For instance in a simple assembly, a loop with an incrementing index is a design pattern. In C-like languages it is built in. However a common usage of a for loop is to increment over a collection and process it in some way into a new collection. Generally in that case you don't really care about the index per se. C# and JavaScript didn't have a particular functionality for that originally but the underscore and LINQ libraries were written respectively to handle that (and now JS has some built-in support in newer vers). In something like Python or Scala, they have the map/filter/reduce concepts built in and also have an additional list comprehension syntax. This goes for various other things like branching logic (manual assembly branch, if, else if, switch statement, getting an object with an execute method, getting a first-class function, etc).
I would like to know the opinion on this as well. I've never had a problem using virtualenv. 
Apparently it's hacky and he forgets to enable the environment. Oh, the developers these days. 
Had to read your reply a couple times, think you have a crucial typo: &gt; However, I also agree that intro CS ~~should~~ shouldn't be about web development 
Configuration management can work in tandem with container management. Rather than building your image manually or using a relatively limited dockerfile, you declare the state of your container using chef/puppet/etc. You can then take that packaged state and deploy it to your environment. Check out something like [packer.io](http://www.packer.io/) for an example.
Hello. I didn't know that such thing exists. Thanks for the link I will definitely try it. Lastly I needed something simple to pool for some data from mikrotik routers and some windows machines and I used pysnmp which is awesome but as a network admin and not a programmer I found it quite hard to use. 
Ditto, I really enjoy virtualenv, appending the sys.path to load specific python packages seems pretty straightforward to me. Also adding the ability to change python versions is very handy as well.
Shots fired.
I get that it *can* work, but if the interest is in closing the gap between development and deployment (or as I like to put it, continuous deployment/DevOps), I feel like configuration management is unnecessary overhead. Again, this only is if the point is to reduce or outright eliminate the difference between development and production. (Or merge Development and Production for a continuous deployment environment)
The reason, as best I can figure, for why Java has such a foothold doesn't really come down to programming paradigms at all (maybe WORA). Java is backed by a major player (Oracle, formerly Sun), and as such you can expect top notch support. Major companies are reluctant to use any piece of tech that doesn't have a commercial backing. Even when major companies use FLOSS tools (like a LAMP stack), they contract a third-party commercial support entity (SUSE, RedHat, OpenLogic, Oracle, Novell, ActiveState, etc). If it wasn't for early commercial support entities, like Cygnus Solutions, GNU/Linux wouldn't dominate the server marketshare like it does today.
I kinda know how you feel. I've been automating QuickBooks (with Python, of course), but all the samples are in VB or C#. Now, I'm not C#'s biggest fan, but it reads like butter compared to the eye-murder that is VB.
As a fledgling Python programmer, if I were to try and articulate it I would phrase it as a "partial solution." I may be wrong, so feel free to correct me, but I think the problem that virtualenv sought to solve was the dependency problem. A Python application could break without the proper dependencies...but that is just it, it solves the problem for Python specific dependencies and nothing else. Essentially, it is at a software layer that is not very effective for closing the gap between development and production. It is also prudent to point out that virtualenv also came about at a time when Python packaging was very haphazard. While Python packaging has come a long way, I would argue that it still leaves a lot to be desired. Docker is essentially the same concept of virtualenv, but at a higher level. Meaning that a Docker container can contain the Bins/Libs for dependencies outside of just Python libraries. At this point, the question (for me) is what is the benefit of Docker over just straight VM images. And it boils down to portability. Docker containers are smaller and can be significantly so. Virtual Machines are still useful, they are just at a lower level of abstraction. Docker takes virtualenv's ability to control Python run time environments and applies it to the entire application. This has the added benefit of eliminating the need for virtualenv and it's layer of complication/configuration.
&gt; I may be wrong, so feel free to correct me, but I think the problem that virtualenv sought to solve was the dependency problem it's not the dependency problem, it's the dependencies of multiple apps possibly stepping on each other or hosing your system. pip and easy_install solve the dependency problem docker has it's uses, but so does virtualenv. 
&gt; it's not the dependency problem, it's the dependencies of multiple apps possibly stepping on each other or hosing your system. Agreed. However, I still am not sure where/why you would use Docker *and* virtualenv.
I would like to know as well. Anyone know a reliable Python based snmpbulkwalk implementation? SNMP support in Python are full of compromise IMHO. Python netsnmp binding is good enough for most what I need to do but there are time I had to resolve to: &gt;&gt;&gt; from sh import snmpbulkwalk pysnmp is just not fast enough.
&gt; I often forget to enable it which leads to a confused moment while I stare at an obscure error, or I forget to change virtualenv when changing project This NEVER happens to me... EVER seriously. I can't believe how many "developers" get tripped up with this. Here's what you do.... start new project... $ mkdir my_awesome_imgur_clone &amp;&amp; cd my_awesome_imgur_clone $ virtualenv -p /usr/local/bin/python3.4 .env $ .env/bin/pip install pyramid $ .env/bin/pcreate -t starter my_awesome_imgur_clone $ cd my_awesome_imgur_clone $ ../.env/bin/python setup.py develop $ ../.env/bin/pserve development.ini --reload $ #start hacking No activate required, and when I have to change projects, I proceed like honey badger to the next project directory for the hackenings. 
I turned this off after 30 seconds. He really is a terrible public speaker, and it's unfortunate that it limits his message.
Have to say that's my main question too. I still can't figure out why I would use Docker over ansible, virtualenv and vagrant (with VMware), or which parts of my current workflow it's actually meant to eliminate. I literally type a single command to bring up a development box that mirrors production exactly, and another command to deploy the application to production on multiple AWS instances. 
I think it is situational. In your case, I am getting the impression that you have a 1-to-1 relationship between application and AWS instance. In the event that you want to deploy multiple applications with potentially conflicting dependencies, you could use Docker to reduce the configuration management overhead. A 1-to-many application relationship *could* be broken out between many (smaller) virtual machines, but this might not always be preferable. I don't think Docker is going to make most people overhaul their current workflow, but if you are starting from scratch...you might consider incorporating Docker as a piece of a new operational approach.
Could you expand on that? I don't see where you are removing the need for activation. Is pyramid required for the technique or you just happen to use it in every project?
Can somebody explain to me what this does? The google code repository is pretty light on information, the user manual is not existing and the talk is unbearable to watch, even if it's only 11 minutes.
That's what I was starting to think as well (in terms of it being situational). I guess I'm really looking out for an article where I can go "right, well this is similar to my workflow and it fixes XYZ issues", which I just haven't come across yet. I get where you're coming from with regards to using Docker if you've got multiple applications, but I can't see any compelling reasons to use it over virtualenv (at least from this article) and introduce another component to the whole process.
I use a similar setup for preprod and prod environments (python app packaged in a docker container) and virtualenv for dev. One thing that has bit me is that when your setup gets complex, you may have to shell out to non-python programs and these are not packaged in virtualenv.
Doesn't it also set your PYTHONPATH to isolate python library versions between your virtualenv and your global environment?
I see that. So you just manually path all your scripts. I thought you were saying after your secret invocation that you no longer need to manually path them as with an activated virtualenv. There is still room for the exact errors other people are mentioning though. Just once forget to manually path and you get the same errors others do since you will be running from your system interpreter. No? Don't get me wrong - I like it and I might use the local env like that, but unless I've missed something it's not quite as bulletproof as you made it out to be.
&gt; There is still room for the exact errors other people are mentioning though. if the errors you are referring to is typing something that doesn't exist, or not being specific enough yeah, even activate wont save you from that. 
That makes sense... but be extremely wary whenever shelling out, especially ESPECIALLY if you're putting in user input into that shell command's args.
I think docker is easier to work with when you have heterogeneous dev environments. As a recent anecdote, I wanted to use some functionality in Python 3.4, but it was still non-trivial to install on Mac at the time (even with homebrew). I've also run similar issues where certain Python libraries wouldn't compile on other platforms. 
True, but it in my opinion it feels like a partial and specific-ized solution to a general ops problem that Docker solves. To be clear, virtualenv is excellent and absolutely essential at this point in time (I mean probably 6 of my terminals at any given moment are in some virtualenv), but I hope that Docker and free software PaaS built on Docker (Flynn, and i guess Deis), will supercede virtualenv and its cousins in other languages as the cornerstone of the next best set of practices for devops.
Thanks guys, I guess the python interpreter that comes with Fedora 20 isn't the "full" version of python, so it doesn't include tkinter. A re-install of 2.7.8 and set that as the interpreter and it worked! No idea why it wouldn't work with $ python3 tkinterapp.py... still investigating 
I mean running scripts e.g. `python foo.py` or `pip install` and forgetting to prefix it with `./env/bin/` will use your system interpreter instead of what's in your env and land you with similar isues to having the wrong virtualenv activated. It's really not a big deal but the way you pronounced it had me thinking you had something more.
[StackOverflow.com](http://stackoverflow.com) is a great question and answer site for your programming related questions. As for writing python code I like [PyCharm](http://www.jetbrains.com/pycharm/). They have a community version for their IDE which is free.
&gt;I mean running scripts e.g. python foo.py or pip install and forgetting to prefix it with ./env/bin/ will use your system interpreter do you know what happens when you type pytho foo.p or pi insstal ? :)
how could I forget about stackoverflow?! haha thanks
Article completely fails to address anything that is not a docker-supported variant of Linux. Indeed he even seems to assume that the instructions he provides will just work on MacOS (and yes, I'm aware of boot2docker etc). Glaring omission under "things are not all gravy just yet": - Windows - OS X 
If by "simple" you mean "low-level", sure. But it certainly requires you to think a lot more about pointers and data types than, say, Python.
Docker also works _very_ well for doing builds. You don't have to worry about OS dependencies, and ANY dev can do a build locally.
Rare case, but possible: You want to run two Python apps on one OS environment, in the same control group, but they have different Python dependencies. One uses `pyfoo==1.2` and the other uses `pyfoo==2.1`. Do you need to run them in the same linux container? Probably not, but maybe for some obscure reason. Do you want to? Maybe, in this case. So, it can have a point. But I'd narrow it down to in general, you use docker for devops type of reasons and virtualenv only to ensure Python module dependencies are static and work. At some rare point these may intersect but in general I'd expect people to use one or the other, depending on their goal.
Lets say you have a program &lt;&lt;calculate.py&gt;&gt;. It takes a long time to run if you type: python calculate.py But if you install pypy. You can type: pypy calculate.py And it might run faster. But it might not. In fact, it might not run at all.
It's another implementation of the language. Most Python code that you write that works on the default interpreter, CPython, will work in Pypy. Pypy is often faster.
Welp, I'm convinced! You should get into marketing.
Wow, good point. $ virtualenv test $ cd test $ source bin/activate $ pip install PyCrypto $ find . -name "*.so" ./lib/python2.7/site-packages/Crypto/Cipher/_DES3.so ./lib/python2.7/site-packages/Crypto/Cipher/_ARC4.so ./lib/python2.7/site-packages/Crypto/Cipher/_XOR.so ... and many more Well, still though, virtualenv isn't for that. This should be a local dev environment where you're making sure Python module dependencies are satisfied, not much else. Based on what you said, you really shouldn't be using virtualenv as something to package up all the dependencies and just dump them into prod. I get your point, but I think that's still leaning heavily towards the devops side where virtualenv isn't a good thing. If your code relies on a stable OS environment, you should be using docker or a VM. If you're pushing to prod, maybe you should be using puppet with VMs, and have them redeploy what they need to. I think it's more of an issue with fundamental security issues, like using a static environment where you never check for updates, and not so much of an issue with virtualenv, which only ensures specific Python module versions will work with that Python code.
I think if virtualenv isn't working for you, you aren't "doing it right." Virtualenv isn't much more than installing packages to a location other than your main system and altering the pythonpath to hook into it. In the devops environments I've worked in, this played very nicely with ephemeral boxes. Please enlighten me as to how it is problematic. 
There is no best. It comes down to preference. I like PyCharm very much.
Why wouldn't it run? 
Would it make sense to use it for code that isn't cpu heavy? 
There isn't one.
If you've already used eclipse, try PyDev, an eclipse plugin for python. I've used it and I am quite pleased with it. 
Because pypy does not support many of the python libraries. For example numpy, used for numerical processing, only sort of works, kind of. Many other libraries don't work at all.
It depends on what you want to do. IntelliJ has great products for Java, Python, C#, etc. PyCharm I've heard is very good. Sublime Text is also a great editor with some IDE-like features, and it can be configured reasonably well for Python. You just run your interpreter via terminal/prompt and/or install a plugin that helps out. Installing package control is necessary. If you are just doing data analysis, I really like the Anaconda distribution and Spyder. It works well without requiring much configuration effort.
+1 for IntelliJ. I love PyCharm (offshoot of IntelliJ, to my understanding).
It probably won't be noticeably faster.
I think I can dig that. Why consistently manage apache across all containers when the real goal is to give 0 hoots about what's actually serving the requests, so long as the black box does its job? He covers in the article (oops), he basically just calls app.run().
Whoops! I was on my phone and didn't notice the swypo.
I completely agree with everything said in this response.
&gt; def nope() :D Great stuff, thanks for showing us. This looks like a simple and neat example of how to do a Python trainer/bot with memory hacking. Keep up the good work.
For now just use https://www.pythonanywhere.com/details/flask_hosting I guess.
awesome! Computer vision for v2 next maybe?
Pycharm and/or Notepad++
I tried that at first, but I was only able to get it to "see" the game at 6 fps, which isn't fast enough to keep up with the rate of Super Hexagon. I didn't try that side very hard though, so I might have just been doing something wrong.
Very nice! How did you find out the memory locations?
PyCharm is sort of like the Notepad to Notepad++ if you will. While PyCharm has a lot of nice features that fits the purpose of the tool, IntelliJ is a more full-featured solution for doing more than just the single use.
Ok, I'm all for people doing whatever they want and sure if you want to use docker, go for it. But 4 issues were raised at the beginning of this article none of which were addressed. &gt;I often forget to enable it which leads to a confused moment while I stare at an obscure error, or I forget to change virtualenv when changing project. The post here actually makes it look like docker is more complicated. I have virtualenvwrapper enabled by my .bashrc so I can simply enter the terminal and type "workon py27bio" and I'm in my favorite virutalenv. If I want to run another version of python for testing I just type "workon py34bio" or "workon pypy23bio". All of these open a virtualenv made for my current project. If instead you are working on a targeted deployment (ie, for a web server) it's even easier because you can build the virtualenv in a specific directory relative to the package and then point all executable files (including your unit test runner) at the virtualenv python. Thus a person who does this will never encounter weird errors so long as their development environment is constructed. &gt; It doesn’t provide “true” isolation; only Python level (system libraries and non-python dependencies will still cause issues) Ok, true. But here we have to ask whether using virtualization is the correct solution to this problem. In many cases it is but I'd argue that just as many times you can get by without this issue. Only deeply integrated software will run into system library differences that aren't strictly related to the act of development. &gt; I typically don’t want to run virtualenv in production, which means I immediately have a mismatch between development and production. Why? Virtualenv is actually pretty great for production. Especially for web apps. With tools like virtualenvwrapper you can actually script the creation of virtualenvs in order to quickly bring up any new node (if you do your own sysadmin) or to bring new developers up to speed. &gt; It always felt a bit “hacky”; relying on modifying scripts and setting up new paths I've seen several people bring this up, but I think this is just BS. If you have a specific issue bring it up but the software is field tested and well written. Just because it uses bash scripts doesn't mean it's hacky, it just means that virtualenv uses the best tools for the job.
Saved 
&gt;Meaning that a Docker container can contain the Bins/Libs for dependencies outside of &gt;just Python libraries. Not quite. Docker saves you the overhead of having to host multiple VMs. Instead of virtualizing the entire machine, Docker is only virtualizing and isolating a process, but Docker is sharing the host server's OS. This is different from a VM where an entire installation of the guest OS runs in a sandbox within the host OS. virtualenv is solving the problem that the other commenters have posted, which is creating an isolated environment that will allow for multiple versions of modules, etc to exist without creating conflicts. If you're wanting a "cleaner" environment than what virtualenv can give you (i.e. you want to isolate not only the Python environment, but the OS environment as well) then you should be using Vagrant or some other VM solution to do your development. From there you can build the Docker container from that image (well, more likely from a pre-built image of whatever Linux distro your VM is running). Just my two cents from the DevOps Peanut Gallery. 
I would recommend checking out /r/flask. There is [this stickied thread](http://www.reddit.com/r/flask/comments/2321oc/easiest_and_fastest_way_to_host_flask_python/) that contains a bunch of different responses to hosting solutions.
what is the song that you're using in the first part of the video? Awesome script as well!
I've fallen in love with PyCharm.
Are you telling me the 25 hrs I spent playing super hexagon where for nothing?!
does it jython? I write a bit of it for work (built into 3rd party software).
0_o
Haha... most of that is probably from coding then leaving the game up all night.
I'm confused, how is the cursor teleporting around? Are you cheating for that too with memory stuff? Because as far as I know there's no input method for moving to a position instantly, you have to slide at the given max speed, which is the whole challenge of the game. The reading game state doesn't but me as much, you could technically do just as well with really good CV algorithms, but hacking the movements is actually cheating and defeats the whole point of writing a "bot", if all it does it just teleport to safety. As a sidenote, in my CV class at university, for the final project, someone actually did try writing a bot for this gave, but they weren't super successful afaik.
I want to make a slight distinction: PyPy doesn't support many Python /ecosystem/ libraries. The libraries PyPy doesn't support are (almost always) not even written in Python! They're written in C!
Beware. For a while I made a good living going to people who had what everyone insists are totally IO-bound web applications, and getting 20% speedups by moving to PyPy.
Close, but not exactly right. PyCharm is a Python only IDE while IntelliJ is primarily a Java IDE with plugins for various languages like Python, Ruby etc. The feature-set of PyCharm is almost exactly the same as IntelliJ with the Python plugin. (This is referring to the paid edition of course, the community edition of IntelliJ does not work with the Python plugins.)
In what way do you find the built-in Python venv functionality 'hacky'? `virtualenv`, being an external library, has to resort to techniques which perhaps could be called hacks. Why do you feel it also applies to pyvenv? Also, a venv doesn't need to be explicitly activated. If you run a script installed in a venv, it will use the venv environment correctly, even if the venv isn't activated. The activation of a venv is a convenience for when you're working in the shell or interactive interpreter. BTW, Docker and venv both have their uses. Developers find that venvs make their life easier. DevOps / Ops, not so much. There are still deployment environments where you can't use Docker (e.g. Linux kernel too old, or shared hosting environment), where venvs work fine. Oh, and Windows is another use case. Not common for deployment, perhaps, but not to be discounted entirely.
Yes, it 'hacks' the movements by writing to the memory location that defines the current player position. The methods are there for moving left and right normally, I just haven't used them as of yet because it would require some additional wall parsing logic.
But I mean the whole point of writing a bot is to cheat, so I'm not sure I see that side of your comment. I do agree that it would be a better bot if it moved organically, which I plan on doing eventually.
Not really. A bot is an automatic player. It's a program that plays the game within the rules. It's like I wrote a chess AI that could move every piece to any location. That wouldn't be a bot, that'd be... just a cheat.
I also use openshift (https://openshift.redhat.com/): the redhat cloud. Mainly for prototyping and early release. It's free with limited resources such as the the ram, disk space and number of geers you can use. If you pay, then you can have more. 
oh man, this beautiful! thanks!
I think the definition could be game specific. I could argue that the rules of Super Hexagon are based upon human reaction times, so using a computer to play the game is inherently cheating. I do see your point though.
I know this was 3 months ago but it's so useful and I want to say thanks. I wish the packaging guides would update to use this template. Making relative imports work in py2 and py3 was such a headache until I went through your guide. Now it seems so obvious. One question - if you remove __main__, what would break? The way I do unittests and the entry point on my app work fine without it. I haven't seen something that tries to run the package directory as a script.
Yes. The first runs the script and the second installs to the packages of whatever interpreter is in the path (on Windows). If you're trying to say something else, please say it because I don't know what you are getting at.
Right. That is exactly my understanding of what is going on. I just got the impression from /u/twillis1973's original comment that it was setting up something more magical along the lines of virtualenv. Thanks for the explanation.
&gt; it's not quite as bulletproof as you made it out to be It should be, for the deployment use case. You can forget to specify the path when working in the shell, but not in a (presumably debugged) script used in deployment. Of course one can make mistakes in those, but then one can make mistakes in Dockerfiles, too.
It's more that just reaction time. If a player can't teleport around, the player has to be able to plan a path to safety instead of just teleporting to safety. 
Not absolutely. As PEP 8 says: “Absolute imports are recommended, as they are usually more readable and tend to be better behaved (or at least give better error messages) if the import system is incorrectly configured (such as when a directory inside a package ends up on sys.path)” But you can still use relative imports "when dealing with complex package layouts where using absolute imports would be unnecessarily verbose".
I'm pretty sure NetworkManager can do that already, and it's installed by default on Ubuntu.
I had problem with virtualenv. Because some python library depended on a specific version of the C .so library it was compiled against. But there was no way for pip to enforce or even check that the correct .so library was installed on the system. So virtualenv fails when the python packages you need are actually bindings to C code. For example, lxml. For pip to install lxml it compiles some stuff and expects the system to provide it. Shit sucks. Other problems Ive encountered when some packages setup.py fails to build because it was on python 2.6 and it works fine on 2.7. In general, unless you are doing things only on your local developer machine where you control everything - with python you are *fucked*. And have to resort to hacks. At least docker could be a standard hack.
&gt; you really shouldn't be using virtualenv as something to package up all the dependencies and just dump them into prod. What good is virtualenv for then? If you cant reproduce its state accross machines? If you gotta hack around even pip -r requirements.txt because the other dudes machine had that dumb .so but you dont. Ooops fail. 
NetworkManager does not support infrastructure AP mode out of the box. Without that android devices can't connect.
&gt;only able to get it to "see" the game at 6 fps, which isn't fast enough TIL why I can't get anywhere in this game. *I* only see that fast.
I agree, I was just playing devil's advocate. The bot is unfinished it that regard.
PEP8 says the second: http://legacy.python.org/dev/peps/pep-0008/#imports
How isn't the test-suite useful? I'm might not develop with the same python version, other libraries versions, c-library versions etc as the developer of the library I'm using. So I need their test-suite too.
Should this question rather go to /r/learnpython? Let me know what doesn't fit here.
no, they are both typos and will spit out errors in the console, the point is you are doomed if you can't type correctly, whether you activated the environment or not. 
Real men use a chisel and Italian marble. Oh fuck... now someone is going to roll-their-own editor and call it Chisel.
I see your point with people not having to download my tests and my test-data but the downsides seems to great for me to care. Especially when I can actually create a src and a test package from any structure. First up, I want to be able to add/remove a submodule _and_ the tests and the most convenient way of doing that is to have test-directories in modules, not outside. The tests are part of a module, for me that means that they should also be in that module, I also like to have README.rst for submodules if that is required instead of putting it in some docs/ directory. Second, this is python we're talking about. Too many things can go wrong with stuff like 'depends on at least this version' dependencies, c-lib dependencies etc. I want tests to run when a package is installed because otherwise I don't know if it works or not and I want my tests to run on other peoples environment and they should not be installed if a test fails.
Yes, and I agree. If I can put a rationale into the mouth of the PEP: having each import on its own line makes it easier to scan for what's imported, because they're all aligned. Additionally to PEP 8, I always try to order my imports alphebetically, making them even easier to scan -- O(log N) instead of O(N) :-). So the example above would become: import argparse import gzip import io import sys 
This question should go there, yes.
I like the idea.
Why would you recommend webfaction instead?
Oh, it's for the Steam version, that's why it didn't work.
+1for Anaconda. It really works well and they are very much focused on optimizing it for performance.
On that note, Heroku is also viable. With the free instance, together with Cloudflare, the app wouldn't get dormant and could be quite speedy if you utilize the free 512MB RAM well for caching and such.
"Check my Come" - Made me giggle a lot more than it should have.
Python doesn't need an IDE. Use your favorite text editor, like VIM, Notepad++ or Sublime Text ;)
I second that. Check out Heroku if you want to get started quickly. I recorded a quick video on how to do it [here](https://www.youtube.com/playlist?list=PLLjmbh6XPGK4ISY747FUHXEl9lBxre4mM) Best!
I don't really understand why I would care about other users that dislikes the extra size of the package or don't want to run tests. If anyone wants to they can just re-package my code without tests and ship it like that. But then they will also have to take support for issues that might arise because the tests weren't run. Or they can find another package to use instead. &gt; What if I don't want to run your tests when I install your library? I want my packages to come with tests so they come with tests. If you don't want to do the same with your packages that's ok with me but if you want me to change how I package my package I would have to have some reason for changing and the extra bytes my tests takes are not a good enough reason. As I said, I want my tests to belong to the submodule as I don't consider them separate from the code they're testing and this is more important for me than making a package slightly smaller to download. &gt; Tests aren't a part of a module/package. If they were, we wouldn't be having this conversation because there'd be no alternative to including them in a package. That's funny because I have test suites and test dependencies in my setup.py and I have documentation in my .py files. So I'd argue that they are an, albeit optional, part of a package. &gt; You're enforcing your own preferences onto anyone who wants to use your code, but it's for your benefit, not theirs. Yes, I do it for my benefit. I might have users but I don't have clients or customers. If, for example, someone wants to use something I wrote in a Sublime text plugin they can simply re-pack my plugin if they don't like how I do it.
Im new to python as well. Pycharm is what you want to use. Sure you can use notepad, but why would you? Pycharm has code completion and will alert you to errors before you even run your script.
It also makes diffs easier to read.
I notice a lot if people are using Cookiecutter. What's so great about it? 
Support for automatically checking out templates from git repos I suppose. You know alternatives ?
Yup! Good point, at the time I wasn't happy about learning scheme but now I can look back and appreciate it. Plus, the drop rate for that class was rather high so successfully completing the course was a good confidence booster. 
It's Emacs. 
VB is horrific. 
+1 for Sublime Text
You can try searching after one of the few web hosting solutions that claims to work with Python, try all of them, compare the prices, come to the conclusion that a lot of them just use CGI which is crappy, figure that all of them have limitations and finally find something that will more or less work for your application. Or you can use a VPS.
&gt; But I'd narrow it down to in general, you use docker for devops type of reasons and virtualenv only to ensure Python module dependencies are static and work. At some rare point these may intersect but in general I'd expect people to use one or the other, depending on their goal. Ah ok...this is kind of where my impression is at currently.
&gt; You know alternatives ? back in the day there was pastescript. http://pythonpaste.org/script/ pyramid took that and python3-ized it for it's scaffolds stuff. the cmd is called pcreate. scaffolds/templates are registered as entry_points to show up in the lists of the perspective commands rather than published(presumably publicly) on github. mr.bob is another one. https://mrbob.readthedocs.org/en/latest/ 
There are many reasons: * Tested and works on the three major platforms: Linux, Mac OS X, Windows. Yes, I mentioned Windows as some of our usage of the tool is on that operating system. * Works on Python 2.6, 2.7. and 3.3. They are currently working on Python 3.4 support. * Per the previous two bullets, works on nearly every machine and setup, which is critical for beginners and integrating it with random systems as we do. * Easily extended, obvious API. For our company's purposes, this is a HUGE win. The fact that the project is based entirely on functions is brilliant. More like this please! * Good documentation and testing. * Insanely detailed pull request management process means the code is really good: https://gist.github.com/audreyr/4feef90445b9680475f2 * Even more insanely detailed release process (can't find the link) * Works with Cookiecutter templates called from remote git or mercurial repos. * Huge traction. This means people are making templates for Python, JavaScript, Ruby, Scala, LaTeX, etc. There are **HUNDREDS of templates** if you [look on github](https://github.com/search?o=desc&amp;q=cookiecutter&amp;ref=cmdform&amp;s=updated&amp;type=Repositories) 
The article doesn't go into the other reasons that Python 2's range is bad, but it's definitely a big gotcha if you're using it for a large range.
Had the same issue - what we did was use serialize() in PHP and https://pypi.python.org/pypi/phpserialize in Python - both sides agree on how to save text so that works (around the issue)...
Is PyCharm free?
I think saying "if x is None" should be an anti-pattern in favor of the more universal if x==None. Here's the two reasons most-cited: 1: x is None should be used in case the class of x provides its own equality test. That way, we can still know whether x is really None rather than "equivalent" to None. If the class provides an equality test v.s. None, why should we not use it? We should really honor x's belief that it is equal to None in the test to begin with. If x wants to be equal to None, we should respect that, rather than circumventing it. 2: It is twice as fast to check x is None v.s. x==None We should never have to sacrifice readability for the sake of speed, especially when both are blisteringly fast. After all, half as fast as incredibly fast is still incredibly fast. Furthermore, testing x is None is bug prone since it introduces two ways of testing x against values. For instance, should we test x is 5? How about x is True? Or x is False? After all, True and False are also both singletons of the language. But, in truth, who cares about whether they are singletons or built ins? That's an implementation detail. It should not be a language detail. 
&gt; The problem I now have is that I am not sure what I need to send the &gt; device for it to scan and send me back a picture. LOL
There is a free community edition available. http://www.jetbrains.com/pycharm/download/
* Virtualenv gives you a local python environment with external dependencies--you can't copy a venv to another box and expect it to work--it may have an incompatible libc version or be missing some library, etc. Instead, you ship a list of requirements and they either automatically or manually get downloaded, built and installed, possibly requiring a compiler toolchain and networking (even if only to hit a private repo on local segment). * Containers (lxc/docker, openvz) give you a self-contained environment with no external dependencies--have your CI system tarball it up and scp to staging--as long as the host is the same architecture as the libs and binaries in the container it just works. You don't have to care about config management on the host, your configs and dependencies are a self-contained unit in the container. * VMs/images give you the same benefit, but are a lot more heavyweight and require a much thicker virtualization layer, but there's no constraint of having libs and binaries running on the same kernel with the same architecture as the host. In some configurations, VMs can be more secure / safe if containers are configured to be allowed to do things like load kernel modules (--they share the host kernel). I'm not advocating any of them over the others in all cases. They all seem to have their place as development and operations tools. The main workflow difference with containers vs a vagrant + vm + config management style workflow, is that containers encourage you to think about them as very light and ephemeral. If you have a django app deployed in containers and CVE pops for apache, you don't go add a PPA in config management to get the hotfixed package and run config management client on all the containers. You can do that, if you really want to, but it's more common to just spin a new container with the hotfix and replace the old container on all the hosts via config management / automation / CI. Application state is generally persisted via bind mounts to the underlying host OS, so it's very easy to not care about the container itself. This also lets you know that if the container deployed then it's bit for bit identical to all the other containers in the pool, no worries that one node couldn't talk to config server and didn't get the update, or that someone has manually twiddled some stuff outside of config management on some node. Docker's built in versioning lets you roll back or cherry pick container versions, among other things, which are a pretty nice additions to bare lxc. Again, just for clarity, not saying containers are "better" or that you can't find downsides to them, etc, just trying to give an idea of why they're appealing in many cases. 
Docker actually uses a [union filesystem](https://docs.docker.com/terms/layer/#ufs-def) on top of a sandboxed directory. Even with lxc you have a sandboxed data directory isolated from the host filesystem. So you can have your own copies of libs and binaries as long as they are the same architecture as the host kernel. As with a chroot, you have to use a bind mount (or "data volume" in docker) if you want to get at the host filesystem.
Thank you this is what I'm using :)
Thank you.
Thanks for that. Have just installed phpserialize and will give it a try. Can you tell me, however, did you try using pylibmc instead of python-memcache? If I didn't have to handle the serialize/unserialize myself it will save some overhead, however regression testing the whole app with a different python memcache interface might be more time than it's worth - especially if you already tried if and found problems. :) Thanks!
* [Python Projects](https://wiki.python.org/moin/PythonProjects) at the Python Wiki * [PyPI - the Python Package Index](https://pypi.python.org/pypi)
"... With Python AND OpenCV" would be a better title, since the hard work is actually done in C/C++ by OpenCV and not in Python.
I think i am the only one to recommend this, but I use Wing IDE We used it at university and the free version has everything I kind of needed, its cross platform as well. https://wingware.com/
So figure it the fuck out motherfucker 
Making a typo is different to typing `python foo.py` instead of `./env/bin/python foo.py`. It would still be quite easy to do the former and get confused about why things aren't working correctly.
Are `izip` and `itervalue` still a thing in python 3. Or have they gotten the same treatment as `xrange`?
Downvoted? Shit I was kidding, I don't know either bro, keep looking. Too mathy for me
What do you get when you try to run C:\Python27\python.exe directly from the prompt?
I get the proper python 2 prompt http://imgur.com/Gz9m0vy I can make virtualenv without the -p option but they are just in python 3.4 
The only time == and "is" will differ on None is if the implementor of x overloads ______eq______ to explicitly say so. And if they did that, it should be respected. Maybe you think overloading ______eq______ to equate your class with None is an anti-pattern. I would probably agree. But if *that* is the taboo, then == will work as well as "is". Also, pep8 states, "Comparisons to singletons like None should always be done with is or is not, never the equality operators." True and False are singletons as well but you should never use is or is not with them. Just a mistake? I like your suggestion about having an isNone operator to make it explicit None is a weird, special thing, if it is, indeed, a weird special thing. But I don't really believe it is a weird, special thing. I've yet to see a place where comparing it using == will run you into trouble. Have you?
&gt; True and False are singletons They are not. They are both instances of `bool`, which is one more instance than a singleton type can have. &gt; I've yet to see a place where comparing it using == will run you into trouble. Have you? I haven't, but that doesn't say much, since I always use `is None` anyway, so I might have come across them and never found out.
The same treatment.
No izip, no itervalue in Python 3.
This video and Hettinger's two takes on "Why Python Is Awesome" were some of my first introductions to the language and completely sold me on it. This video not only shows how to write beautiful Python but it shows how Python is beautiful by highlighting the wonderfully expressive features of Python in contrast to the original examples which represent how things would be done in a traditional structured language C/Pascal approach. 
typing $ python foo.py expecting the shell to refer to ./env/bin/python when it might not has the same effect as a typo in my opinion. And since i've got in the habit of being specific about which interpreter i invoke, I have had fewer surprises then when I activated envs and then switched to a different directory to do something else and invoked the activated interpreter instead of the one I intended to. removing ambiguity makes things simpler. 
&gt; So is the purpose of iPython to provide a better version of IDLE? I don't know if its main purpose is to do this, but it certainly does this too. &gt; I have also read about a whole load of benefits about parallel processing I know nothing about this so can't comment on it.
I have been using the ipython notebook pretty consistently at my job and it is SUPER useful for interactive, iterative, data analysis and visualization. You can render graphics right there below the code. So say you have 10 lines of code that create a matplotlib graphic. Instead of having you write the code in vim, exit the editor, run the script and open up the image, you type the 10 lines of code right there in the browser, hit 'ctrl+enter' and then the graphic shows up right there in the page. Check this out http://earthpy.org/smos_sea_ice_thickness.html. Like someone else said, it is great for tutorials and presentations. The ability to write code in the browser and run it interactively is huge. At my job we have it set up such that we are rendering entire html pages in the browser. So you edit 2 lines of code, hit run, and the adjusted page shows up. It's amazing! A typical set up for me ( 2 external monitors with a macbook pro retina 15inch) has fullscreen pycharm (vim mode, duh!) on one monitor, fullscreen browser on the other monitor (with an ipython notebook tab running), and then the actual laptop screen for documentation and emails and such.
&gt; It's not a line-by-line debugger, but it's similar in some of it's features. could you suggest some useful resources describing how to use ipython for debugging purposes? I don't mean trivial things like typing a function in ipython, but rather real world examples like cherry picking a buggy function/class method from an existing codebase, debugging it in ipython to the point of finding the issue
Try [etm](http://people.duke.edu/~dgraham/ETM/)
For typical debugging, a standard debugger will be better (better introspection), but if you're trying to debug/overhaul a short function with a long startup time, iPython is better because the data is still in memory. Debuggers don't allow you to easily change code on the fly, whereas in iPython, you're overwriting the old version of the function. If it's something simple, I'd use a debugger or just free hand it. I'll often write code in a debugger and just copy the lines into the code as I go. It works very well for large programs.
I had a look at that and I found the syntax of task rules absolutely cryptic and scary after the taskwarrior experience.
&gt;For those from a functional programming background, `map` may feel more familiar, but I find it less Pythonic. One possible justification for preferring `map` is in cases where multiple sequences are iterated over; a list comprehension would need an explicit invocation of `zip`, but `map` has this built-in (it accepts *args which are effectively zipped together internally). Of course, in 3.x `map` returns a generator, so it's equivalent to a generator expression rather than a list comprehension, and needs wrapping with `list()` to get an actual list object.
Another difference is that Python 3's range provides an explicit `__contains__` method that allows `in` lookups to be efficient (doing this with an `xrange` in 2.x requires iterating). Code like `if x in range(foo, bar):` used to be tempting but inefficient; now it's reasonably efficient. Of course, `if foo &lt;= x &lt; bar:` is still the standard idiom; but I can fathom cases where you'd want to use a `range` with a nonzero step, and explicitly writing something like `if foo &lt;= x &lt; bar and x % step == foo % step` is just ugly (and error-prone).
&gt;True and False are singletons as well but you should never use is or is not with them. Just a mistake? Right (well, except that they're actually a doubleton of the same class), *but you shouldn't use `==` or `!=` with them, either*.
What is yaml.loads and how do you use it to fix the unicode error? Can you recommend a different font.family (don't have Helvetica)?
`[letter for word in words for letter in word]` is kind of a bad example, because the specific problem can be done with e.g. `list(''.join(words))`, and depending on context, the conversion to list might not actually be necessary. 
Much credit to /u/zahlman for the idea of creating a shell dynamically with decorators! Edit: Okay guys, I made a huge improvement. Instead of having weird comma delimited parsing, it can use shlex. The comma stuff is still there and you can override the delimiter with @shell.cmd(delimiter=';') or even in Shell instanciation for the default. But now, shlex, the right way to do it, is the default if you decorate with just `@shell`. The example code below should be the way you want to do things, and it will feel like a normal shell like bash. from shellify import Shell shell = Shell('MyShell', version='1.0.1') @shell def say_hi(name): ''' Put a help string here. Tab-autocomplete works. ''' print('Hello, %s!' % name) @shell def add_floats(float1_f, float2_f): ''' _f appended will enforce type to be float _i/_n enforce int type, and _b boolean which coerces "no,nil,none,false,0' into False and the rest, True ''' print float1_f + float2_f @shell def kwarg_args(foo, bar="barrr", baz="bazzz"): ''' to run this, you run `kwarg_arg 100 bar=something baz=somethingelse` You can omit bar and/or baz but you must include foo. ''' print foo,bar,baz @shell.json def even_json(works, foo="bar", baz_f=1.0): ''' In JSON style parsing, it will take comma delimited args with an optional last argument of a json dictionary. Anything in "quotes" is a string like JSON, ints and floats work as you would expect. This is a strange way to parse, I know, but you can pass in full dictionaries as arguments! It just needs to be properly formatted json. ''' print works, foo, baz_f # Don't forget to run it shell.run() MyShell v1.0.1 &gt; help Documented commands (type help &lt;topic&gt;): ======================================== add_floats even_json help kwarg_args quit Undocumented commands: ====================== say_hi &gt; say_hi World Hello, World! &gt; add_floats 1.0 Requires more arguments: add_floats float1_f float2_f &gt; add_floats 1.0 2 3.0 &gt; add_floats 1.0 f Arguments with _i,_n,_f are typed: add_floats float1_f float2_f &gt; kwarg_args zzz zzz barrr bazzz &gt; kwarg_args zzz bar=bor baz=boz zzz bor boz &gt; even_json "this works", {"foo": "boar", "baz_f": 5.0} this works boar 5.0 suggestions, comments, hate, love? - From the dev that brought you argvee, the same thing but for command line arguments.
Yup tried that too, re-installed python2.7 now it is the default for the system and still get the same error. I have a virtual machine with linux on it but I thought I should at least be able to do this on windows, I wish there was more tutorials for windows since every result on google when searching for virtualenv comes back with linux results :( 
Never saw a good tutorial but the exercises were pretty helpful. In my opinion, Bokeh is cool but just not well enough documented or flushed out yet for me to adapt it. Definitely is getting better though! Check out this: https://github.com/areski/python-nvd3 It's a python wrapper for NVD3 and it makes super pretty charts. 
Well got it now, it is virtualenv --python=C:\Python27\python.exe Python27
This is awesome for scripters like us. 
This is an example of the good kind of repost. That talk helped me a lot when I was learning how to use python. Sometimes I use it as a refresher when I haven't written any in a while to help brush off the crufty bits.
Boa Constructor in the alternate universe where it was maintained through Python 3.
At long last my dream of replicating the Cisco IOS command line experience in Python can be fulfilled. *sigh* I wish I were kidding. I had a good go with the Cmd module a while back, got fed up with something and quit. This module looks pretty promising. Any plans for autocomplete, by any chance?
Same here. Mechanize is awesome, but sadly abandoned and poorly documented. Now to convert a year worth of work to MechanicalSoup...
Edited that last bullet out.
its all there. open terminal. then run each of those lines one by one. simple as that. just copy and paste them in the terminal. if you get lost, i'll be online for another 20, just shoot me a chrome remote desktop thing. edit: just enter the four lines after "Or install from source:"
A word of advice for anyone stumbling on this thread: **Don't try to make a whizbang project**. Make something useful, and if you see ways you can make it awesome as you go along, then by all means, make it awesome. But when you try to make a magnum opus, to make something 'whizbang', it *always* turns out to be a huge disappointment, if you even generate anything more than half a page of scribbled lines. None of the awesome things that people have made have started from the thought, "I'm going to make something awesome". That's pure ego, which is downright antagonistic to actually making something awesome. Any way you can take your ego out of your work (in any field), will make your work that much better. 
This book helps too: http://www.amazon.com/Writing-Idiomatic-Python-2-7-3-Knupp-ebook/dp/B00B5KG0F8
IPython started as an improved version of the interactive python interpreter. It is particularly popular in scientific computing and has grown many features specifically to support this community but its usefulness is definitely not limited to that target audience. Software developers typically spend most of their time in a text editor, IDE or debugger. An interactive interpreter is really nice to have, but many developers do just fine without it. Scientific computing users often spend much of their time in an interactive environment transforming, analyzing and visualizing large amounts of data. A good interactive environment is critical for them. The term 'IPython' is sometimes used to refer to the entire ecosystem that has grown around it or other software that is typically used in conjunction with it even if it is not actually a part of the IPython distribution. Since scientific processing often involves very large data sets this obviously includes tools for parallel processing.
https://github.com/vinta/awesome-python
Damn, this is awesome. I'm great with python, but I certainly learned a few tricks here. I feel like I'm always helping my friends fix their code in the ways the first half of the video shows, but parts of that second half really opened my eyes to some stylistic things.
There are couple of shortcomings in the article. For example, [foo(word) for word in words] is slower, less understandable and mouthful compared to: map(foo, word) And also those "guard values" should be in ``else:`` branch: for idx, other_item in enumerate(alist): if other_item == item: result = idx break else: result = -1 This way you can use anything as your default value - even complex and expensive objects.
I tried porting Mechanize to Python 3 a while ago and finally had to give up. Part of it is that I'm inexperienced with the subtleties of HTML, but there are problems with the Mechanize code base and API that makes a partial port difficult and a full port impossible. It's good to see another project step in. Extra kudos for exposing the BeautifulSoup tree. Mechanize parses using BeautifulSoup, but does not expose the tree. That sometimes leads to situations where people parse a second time with Beautiful Soup, which can get quite expensive.
Well, it's specifically for anything that a shell would improve... not everything is going to benefit. For the most part, I'm happy writing non-interactive programs that just take command line arguments. But what if someone is going to want to do different things with data after they see some initial output? For example, I wrote a program to parse logs at my current workplace. They are spread across several servers, they have no log aggregation, and everything is all mish-mashed and impossible to search. So, the common workflow I had was I wrote a program to read logs from each server, grep for search terms, sort by timestamp, and output to stdout so you can save it to a file and work with it. I wrote other programs to further process the saved, aggregated logs. But I added features to that log aggregator so that it can open up a shell now! Instead of just dumping to stdout all the aggregated logs, it now stays open and allows me to perform commands on the shell. I don't know exactly what I want to filter by or search for before hand, but once I have the logs in memory I can run commands like: &gt; filter_out logseverity=DEBUG ... dumps some data out ... &gt; filter user=API_USER ... only keep data that is logs from that user ... &gt; date_between 2014/07/06,2014/07/09 ... filter out any other timestamps ... &gt; print_stats logins: 52 logouts: 51 checkStatuses: 205 sentMessages: 1082 ... &gt; save results.txt output written to results.txt You see why you might use a shell for something like that? It makes it a lot more user friendly, and you get to see result sets in-between commands. Another example might be maintaining servers... You might run commands like `backup files.vm1-0.example.net`, `mem_usage frontend.vm2-1.example.net`, `reboot db1.vm1-1.example.net`, `django_500_exceptions frontend.vm5-1.example.net`. It can be a lot more user friendly than writing complicated argparse subparsers for something that you want to be very interactive.
"man I need to add a easy-to-use commandline without brackets or silly stuff to my script" and then this pops up \o/
you beautiful bastard, you may have just solved a month of problems for me. thank you so much! &gt; sudo pip install cheetah 
&gt; Don't know what to improve on... Get all that metadata out of setup.py and into the main package's init- don't import it, just read the file and regex. The more places you have that data, the more shit you have to change. Also, I've heard of the reasoning behind the src/ folder, but you don't mention it in the main article or your referenced article- you kinda roll it in while you're changing around where the tests are located.
Thanks for mentioning the book. I am about to order it. **Edit**: If even you are interested it buying it, then buy it from the authors website directly at https://www.jeffknupp.com/writing-idiomatic-python-ebook/
Case in point, [Linux](https://groups.google.com/forum/#!topic/comp.os.minix/dlNtH7RRrGA%5B1-25-false%5D).
You don't have to use print as a function!
Sorry, but at which plane you find python useless? Asking to learn.
Okay, I just pushed a change (bitbucket and PyPI) so that this works: from shellify import Shell shell = Shell('MyShell', delimiter=' ', quotechar='\'') @shell.cmd def now_with_spaces(foo, bar): ... Edit: Pushed another change to use shlex, with a simpler more succinct way of decorating: shell = shellify.Shell("MyShell") @shell def foo(bar, baz): ''' help string ''' pass shell.run()
gift horse, meet look in the face. working well...to get it to work i have to drop my .py app in terminal and hit enter...easy, but i want it to automatically happen at login on mac. oh sage, any suggestions?
Thanks. That was quick. :-) You may experience more flexible parsing with `shlex` than `csv`. In [65]: a = ['abc def "quoted here" "lets try esca\\"ped quotes"'] In [66]: list(csv.reader(a, delimiter=' ', quotechar='"', escapechar='\\'))[0] Out[66]: ['abc', '', '', '', 'def', '', 'quoted here', '', 'lets try esca"ped quotes'] In [67]: list(shlex.shlex(a[0], posix=True)) Out[67]: ['abc', 'def', 'quoted here', 'lets try esca"ped quotes'] You may want to set `commenters=''` on your lexer before using it though, that bit me in the ass once.
 I can't remember the exact details but we tried more than one library. The underlying issue is the type field is not defined by Memcache which states something along the lines of 'it can be used as required'. As a result there are incompatibilities between different drivers even within the same language never mind cross language. You can check if one driver will work by another by looking how they define the types - serialize only works because they both use the same type for text.... Hope that helps. 
IPython is a better version of IDLE. Just as bpython is. IPython Notebook, on the other hand, is a great tool for reproducible data analysis/storytelling. It was created with the science crowd in mind, the main goal being to make it easier and faster for them to prepare for a talk without the need to re-setup, re-run, re-copy-paste everything. You put together a story about your research with code (including R, Octave, and other languages; not just Python), pictures (plots), LaTeX, plain text, what have you, and then anybody can reproduce it and play around (there are interactive widgets, so you can zoom in/pan a plot, for instance) without installing anything. If you're interested in IPython Notebook, I recommend to watch [this video](http://vimeo.com/53051817) for a start. It's from 2012, so some things that the author says are in the future in fact already happened :)
omg... The only time I've seen `shlex` was when people used it with `subprocess` so that they didn't have to split args into a list manually. I had no idea how powerful it actually is. &gt; The shlex class makes it easy to write lexical analyzers for simple syntaxes resembling that of the Unix shell. This is *exactly* what I should have used. I can't believe I used csvreader for this. Thanks for the tip! This is definitely going in shellify. At least worth bumping a minor version :)
&gt; iPython is a Maple clone More like maple / mathematica if you consider inline plotting / expression re-evaluation. Compared to MATLAB the lack of a workspace browser and always visble history bugs me. I agree about the limitation of importing other notebooks etc.
|Any plan to make it pip-installable? I was mistaken. Shellify is already pip-installable
Yeah, I just thought it was funny, because it's in the post title.
Seems useful. Some remarks: * How to quit properly? Ctrl+C and Ctrl+D should be handled. * It'd be great if a function (e.g. `say_hi`) could be called non-interactively too. This way the functions in a script could be called from a bash script too. Example: `bash$ python example.py say_hi World`
This is quite useful. Cheers.
sounds great! Thanks so much guys!
Not sure what you mean about the metadata, only the version is duplicated but it's intentional - as there is configuration to manage that duplication (`bumpversion`). About the `src` - was [this](http://blog.ionelmc.ro/2014/05/25/python-packaging/) not clear enough ? 
Makes transition to Python 3 easier.
Blender
Thanks for the advice. I just posted this because I thought it was an interesting read and an interesting perspective.
You can already include Python script in an html page with Brython. (http://brython.info)
I'll stick with this. https://github.com/marrow/marrow.mailer
Oh, hey. Fancy seeing you here.
With you first debugging line I get ac,ed,0,5 Every time, regardless of what string I try to send. Any idea what that means?
It's not clear to me what this does that ipython doesn't.
Yep, and I think &lt;script type="text/python"&gt; is better than &lt;python&gt; for a webpage too.
xss with python! yay!
There's also Kivy which in addition to being compatiable accross Windows, Linux &amp; OSX is also compatiable with Android and iOS.
I haven't seen skulpt used like that before. Clever. Javascript is machine language for the web. Skulpt is a Python to Javascript compiler. It was developed for use in teaching Python &amp; CS concepts, starting with the stdlib. But now it's being extended to include implementations of numpy, matplotlib, and others (like [Pygal charts](https://github.com/trinketapp/pygal.js)). The skulpt project is pretty sweet- consider getting involved https://github.com/skulpt/skulpt/ &amp; http://skulpt.org
Indeed, the notes fix a variable naming error in Raymond's "Distinguishing multiple exit points in loops" example.
It's Brython. And please stop doing this useless stuff already. 
GPU programming, UI programming, or areas where you need the absolute best speed. For GPU stuff C or C++ is probably best simply because libs for those languages are generally better than python; and often the code that is executed on the GPU cores needs to be C anyways. As for UIs, on windows it's hard to beat .Net. Python can be fast, but C or C++ can be faster in certain instances, so for things that need to be crazy fast you might not want python. Of course you can use python for all of these things, but sometimes it's better to drink a different kool-aid. I really like python for doing multi thread analysis of really big data. I did a computational physics research project and used python because it's fast to develop, run, and understand. Even though speed was required for this the extra development time required for C or C++ was not worth it.
"It's only useless untill someone uses it"
If you want workspace/history, you want an IDE like Spyder.
[It's been around for over 2 years, with over 900 commits](https://github.com/simon-weber/Unofficial-Google-Music-API/graphs/contributors). I tend to think anything suspicious or blatantly insecure would've come to light within that kind of time frame. There's a few other factors that indicate it's probably trustworthy... [dude uses his real name &amp; has tons of contributions](https://github.com/simon-weber?tab=repositories), that's another plus. But that's just a hunch/educated guess.
Skulpt and Brython are not the same. Building something like this is a great learning experience, I doubt that Skulpt is such a big project that discouraging people who learn it, wîll help it at all. 
Hey man, like.. encourage his learning, man.
I wrote a blog post on this subject recently that might be helpful: http://takluyver.github.io/posts/so-you-want-to-write-a-desktop-app-in-python.html
Have you looked into the [code][1]? Passwords are sent over a SSL connection. [1]:https://github.com/simon-weber/Unofficial-Google-Music-API/blob/develop/gmusicapi/clients/mobileclient.py#L27
This was written as a joke, I would hope nobody actually uses it. It was written in response to a post on /r/shittyprogramming 
I usually try to stay away from decorators most of the time, in my opinion they get tougher to maintain and look silly in big projects. I've only preferred to use them either for login sessions and sql query executions. A good tool to have though nonetheless, nice tutorial
You can also check out the /r/coolgithubprojects subreddits with the Python filter [here](http://se.reddit.com/r/coolgithubprojects/search?q=flair%3A%27python%27&amp;restrict_sr=on&amp;sort=new&amp;t=all#python)
The closest thing to line by line debugging is to use ipdb, which you can use pretty much as a drop in replacement for pdb. But you have an ipython prompt for debugging instead of a basic python prompt. So to start debugging from a particular line add Import ipdb; ipdb.set_trace() On the line before. Also, you can use the %pdb magic word to automatically start a debugger if an exception is thrown.
Also take a look to http://doc.scrapy.org/en/latest/ 
I personally use @path above my functions for mocking. I use this https://docs.python.org/3/library/unittest.mock.html as my reference on mocking. Mocking in Python takes some time and some patience to understand and get right. I stress out myself just thinking about finishing mocking on one of my projects I am working on. It is so convenient and so not convenient at the same time. 
you probably meant `@patch` ;)
Have you tried using writeBytes() or writeChars() on the Java side? It may be the case that writeObject() uses one of those internally if the object is a string, but I got the feeling from the docs that it tries to do some additional stuff. You might also try using a DataOutputStream instead, where I think you'd have to convert your data to a byte array to send it; I can't remember if it has a write() method accepting a string.
This is difficult to explain without a concrete example for your code-base. But I'll take a stab at it: Also, I'm not quite sure, but this sounds like you are trying to introduce unit tests into an already existing code-base. This *can* be tricky. I find starting out with tests avoids some annoying spaghetticisms which you may have without realising it. If you do, retroactively adding unit-tests is.... uhm.... fun. ;) As /u/levibostian mentioned, you can use `unittest.mock.patch` to "monkeyatch" existing instances with a mock object. The important thing to know about using `patch` is that you need to patch the "effective name", not the real "fully qualified name" of the instance... Let's assume you have the following code: # filename: mymodule/db/model.py class User(object): pass # imagine this to be your entity. # filename: mymodule/core/manager.py from .db.model import User def add_user(session): the_user = User() session.add(the_user) session.flush() Let's further assume that you want to mock out the `User` constructor in the `add_user` function. In that case, you need to patch out `mymodule.code.manager.User` (the "effective name") instead of `mymodule.db.model.User` (the "fully qualified name"). This is the little gotcha which confused me at first, but makes perfect sense if you think about it. In this case, you could write a unit-test like the following: from unittest.mock import patch, MagicMock import unittest class TestManager(unittest.TestCase): def setUp(self): self.session = MagicMock() def tearDown(self): self.session.reset_mock() def test_add_user(self): with patch('mymodule.code.manager.User') as user_mock: user_mock.return_value = "foobar" # we don't care about the details here manager.add_user(self.session) user_mock.assert_called_with() self.session.add.assert_called_with("foobar") self.session.flush.assert_called_with() ... this was all written from scratch without a python shell at hand... I hope it works :P But at least it should get the basic idea across.
More restrictive use and an interface available to people without any Python knowledge, for the same reasons you might use the stdlib `cmd` module. For your own personal uses, ipython or even a vanilla python -i shell is much more powerful and this doesn't try to compete with that. This is for creating your own shell. You can package it up and distribute it to people who wouldn't even know it runs Python.
did you restrict to access to yourself? d4rch0n: !import os d4rch0n: !os.system('rm -rf --no-preserve-root /') 
Try it yourself. Get ipython up an running and type any expression followed by "?". For instance try the following: a = 5 a? You can do this for any object. ipython offers a wealth of information and support and is really fun to play with.
No you're an asshole! 
Edit: Btw, check the example I posted or the readme. I fixed it to use shlex and parse like bash instead of comma separated values, and to do that you just decorate with the instance, like `@shell` so it's much more succinct. Quitting properly should be done with `&gt; quit`. I considered catching sigint but I decided that you might want to catch it yourself and perform some cleanup, which is mostly why that signal exists in the first place. I wouldn't want to catch it for you. That is a good point though. I think I'll make that a kwarg when instanciating `Shell('MyShell', sigint=True)` As for command line... That's a good idea, but it's a huge feature and I'm not sure if people would want that to all of a sudden mess with command line arguments they already set up. For example, you can easily go back into a program you already wrote and add: parser.add_argument('--shell', '-S', action='store_true') And then drop down into a shell. If I start adding a subparser `say_hi` that might mess with what they already implemented, but it could work as an optional feature too, when instanciating a `Shell` again. So, I wrote this module `argvee` as well which is very similar except for command line arguments. I just tested combining the two, with app = Application() shell = Shell('MyShell', version='1.0.1') @app.cmd @shell.cmd def say_hi(name): print('Hello, %s!' % name) ... app.run() shell.run() And it ran fine, except the only issue was that it dropped into a shell right after saying "Hello, world!" from my command line arguments `python test.py say_hi world` Since there is a use-case for combining these two, I may make an `Application.run` call return False or None if no args are passed in, so you can do something like this: if not app.run(): shell.run() That would cover that functionality. That's one possible way to do it. Another way might be to include `argvee` as a python requirement in the setup.py, then put it together so that if you have `shell = Shell('MyShell', argvee=True)`, it would do what you would expect. That'd be a succint way to do it. I'm a bit nervous about adding that requirement to it when the base shellify infers no functionality with command line arguments, but argvee really only depends on stdlib modules so it wouldn't be crazy. People might be a bit curious if they pip install shellify and they see it install argvee when it really shouldn't need it. I could just include the latest argvee source in shellify, but that's some serious code duplication and I might update argvee and forget to update the copy in shellify. Thanks for the suggestions! Let me know if you think of cleaner ways to handle it, but that's an interesting idea.
no problem!
Describe the actual problem you're trying to solve, not how you think you need to solve it. 
No, the code you propose will fail with ``NameError`` or ``UnboundLocalError`` if ``iterable`` is empty because ``index`` will never be assigned to before ``else:`` branch.
Thank you. This is exactly what I was looking for and a great stepping stone for applying my newly acquired SICP knowledge to Python. 
How is this different from $python -i &lt;file.py&gt;?
Yup! Thanks for the catch. 
This has been covered already by countless other blog posts -- what's new here?
Transforming code into... code *for humans*?
Given the problems sandboxing Python, how is this not a terrible idea?
Not directly, no. You should also take into account how much it adds value to your name. For example, I only know you because of your tutorials so if your resume showed up in my lap, I'd be quick to hire you. Not saying you should/shouldn't do it, but Godot videos are definitely going to be good for your street cred. There is *very* little out there on the engine, especially 3D stuff so you could corner the market quite easily.
&gt; I haven't seen any use-case.. Isn't the use case exactly what you're doing here- an easy package template? I've worked on some setup.py's that only needed 3 things changed per project initially- module name, classifiers and keywords. The rest was pulled from `__init__.py`, which is what people are working on anyway. The only reason I keep bringing this up is because it states one of the points is to 'stop forgetting things'- it's a lot easier to forget to update maintainers, etc if it's stuck in setup.py as opposed to the code. At the very least, version should be pulled from the main project file... but I don't believe any of this fits in with the latest python metadata PEP anyway. RE: src stuff: I agree mostly*, I was just pointing out that it wasn't made as clear as it should be in the article; whose content was more focused on testing than the purpose seemed to be. Keep up the articles, I've referenced them before in the past and will again. *: The stuff excluded by mostly isn't worth mentioning or even talking about- minor crap.
not sure what you mean by 'automatically happen at login' - what exactly are you trying to do?
&gt; Isn't the use case exactly what you're doing here- an easy package template? I've worked on some setup.py's that only needed 3 things changed per project initially- module name, classifiers and keywords. The rest was pulled from __init__.py, which is what people are working on anyway. You're right here, if only consider things from maintenance perspective. My concern is failure scenarios: what if the user doesn't understand that packaging depends on those attributes. Or he forgets to write them. It's just packaging metadata that you put in the code. The code doesn't really need it so why mix it up. Mind you, I don't say it's bad, it's just that it creates friction - just like having to write the packaging boilerplate. &gt; The only reason I keep bringing this up is because it states one of the points is to 'stop forgetting things'- it's a lot easier to forget to update maintainers, etc if it's stuck in setup.py as opposed to the code. You only forget to update the maintainers list in `setup.py` if you have it in multiple places. But that's another issue. Now that I think about it more, you might want to have that metadata available for the documentation generator. Hmmmm .... &gt; *: The stuff excluded by mostly isn't worth mentioning or even talking about- minor crap. There's a fine line between *nitpicking* and *attention to detail* but I think it's still worth knowing minor issues. More so, I think it's generally good for projects to know what trade-offs/disadvantages/limitations they have. Thanks again for the feedback. 
I'm sure you figured this out from the other comments already, but he's using skulpt which just compiles python into javascript which is sandboxed.
It's a good question, but there's a lot of differences. In short, if `python -i` is going to be all you need, don't use this. But, if you're going to distribute this to users and want to restrict them to know to use only certain commands, use this. If you want them to be stuck in a restrictive shell to use your programs in only specific ways, use this. If you use command line arguments, check the output, then run another program you wrote on that output, then look at the output, and so on, use this. Maintain the state in between and run an interactive shell. `Python -i` is for an interactive python shell. This isn't. This is for an interactive shell for the program you write. In fact, people who use your shell don't have to know anything about Python, don't have to be programmers, and can be just an operations or devops team for example that has a linux server with python on it. This way, you can distribute your source and allow users to run it as a shell. I don't want to claim my program is for "security", since I really wasn't trying to make this a secure shell, but it seems that sometimes people offer a `python/ipython -i` shell to random users, which would allow them to do anything to your machine. This would be a better option if you're allowing remote access to the shell but only want them to run certain commands.
Much improved! So now it can work like this... I wanted to leave cmd as it was for users who already messed with it and aren't going to follow updates, but I wanted shlex to be the simplest way to do things since that way is just the right way to do it. import shellify shell = shellify.Shell('MyShell', version='0.3.0') @shell def startserver(hostname, os='debian'): ''' help string goes here ''' pass shell.run() With the default `@shell` it just runs shlex, but you still have the option to use @shell.cmd(delimiter=';') or anything funny if you want! And `commenters=''`. Thanks again for the suggestion. I honestly was a little embarrassed that I put this out there without even knowing what shlex really was!
Okay, I much improved it to use shlex for argument parsing, so instead of commas it's the same as bash. Instead of decorating with `@shell.cmd` just do `@shell` Much easier and works exactly how you'd expect, with quotes and stuff!
Presuming it still requires you to load the script from the page it's going to have exactly the same prevention rules as js.
For me, I really aim to simplify my code to the point where the reader knows exactly what's going on and the broad range of use for decorators could lead to some confusion in that respect. I described them as "silly" or rather silly looking only because I personally think nested anything (loops, functions, etc) look silly. Other than that, they are good tools that I do use to shorten redundant actions like executing sql queries. 
I wrote a parser that does the same thing for a job interview. Leaves html untouched and executes code between python tags.
I'm not aware of any Python-based distributed databases. If you want to freshen up on this material, I'd start with http://en.wikipedia.org/wiki/Two-phase_commit_protocol and http://en.wikipedia.org/wiki/CAP_theorem -- presumably you'd coding against some DBAPI interface and not having to invent a new database architecture in Python. Although bank account balance is the classical example of when to use transactions I've been told that e.g. ATM transactions are not really transactions in the classical database sense (i.e. BEGIN; UPDATE accounts SET balance = balance - withdrawn WHERE account_id = myaccount) but are rather reconciled at end of the day. Here's a book by Fowler (who also wrote Patterns of Enterprise Programming and Analysis Patterns): http://martinfowler.com/apsupp/accounting.pdf which covers OO patterns within accounting systems. That can be an interesting introduction to this sort of thing. I assume you already have some casual domain knowledge within the banking system you're going to deal with, if not I'd say it's more important than knowing trivia about some database. I can't give you a decent link if not, except I recently read this from Zen Payroll which was about the (American) ACH banking system: http://engineering.zenpayroll.com/ 
I wouldn't say they increase the chance for error unless you do it in a harmful way. If you're reducing code duplication and using predictable decorators with obvious behavior, they can very much decrease the chance for human error.
Waaaait... With NFC you can interact with RFID? Does that mean you might be able to fuck with business door locks, passports, some credit cards, etc? That could be so much fun.
Is it worth it if you're already an advanced Python programmer, or is it for beginners?
Do you know the standard library in and out, or at least most of it and have very good experience with another programming language and design concepts? Know collections/itertools/functools/subprocess/threading? How would you implement tasks, queues? Know RabbitMQ? Do you know pretty much everything from here: http://pyvideo.org/video/1780/transforming-code-into-beautiful-idiomatic-pytho The one thing I noticed about pure python position interviews is sometimes, if they're pretty good themselves, they make sure you do things in the right Python way. That `for i in range(len(foo)):` kind of thing is a huge red flag if you're interviewing someone for a python job with "python experience". A lot of people will want to know that you know how to code in python the right way, instead of the way a C/Java dev might when coming into Python. That's as much advice I can give. Just make sure you know the Python way to do things, not just Python. If your interviewers are not that good with Python you won't have to worry about that, but you may have one or two interviewers who do. In the US, technical interviews like that generally take up the whole day, with 3 or more separate interviewers. I'm not sure if it's like that in Europe. good luck!
Oh god, no, not like this^^ The ipython shell is accessible via SSH and just for trolling people.
here's how i interpreted the question since the post mentioned dicts: term = 10 # or whatever length d = {x: '0' * x for x in range(term)} which should output: {0: '', 1: '0', 2: '00', 3: '000', 4: '0000', 5: '00000' ......} not to sound like a ball buster but wouldn't this be better posted under [/r/learnpython](http://www.reddit.com/r/learnpython)? 
Do you need the relations to be consistent? If not you can simply make lists as attributes. If you need them to be consistent, I would not have class attributes, but some sort of "registry". This could be as simple as a dictionary if the lookups are mostly one way.
just pip installed it yesterday, already up and going +1
Good point I guess... Well I have a free evening, and a day off tommorow... Maybe I'll pull an all nighter!
Sure do. Does that relate to my comment somehow?
I use the netCDF4 module. http://netcdf4-python.googlecode.com/svn/trunk/docs/netCDF4-module.html
The issue is that the tuple returns a dictionary. it can be fixed with: print domainCreated[1]['faultcode'] Curious because before it simply returned a dictionary.
You'll get a lot more out of tutorials than this book. I say once you feel comfortable writing code, get this book. Or... if you are studying for a job, get this book. 
Anyone know any good resources on writing robust REST API servers in Python? 
I mean, I'm already advanced. I feel very comfortable with Python and comfortable with pretty much the whole standard library, and common modules. Decorators, properties, context managers, generators, metaclasses... So this book is good for advanced programmers then? I'd like something that explains very high level architecture in Python or low level under the hood sort of details, like efficiency of different operations on collections, etc.
Why are you on /r/python?
Ideally, a full featured clone of taskwarrior. Emphasis on the following subset of features: - support for regular (one-time) and recurring (with different granularity like daily, weekly, monthly etc) tasks - support for tagging tasks with keywords - support for dependencies between tasks (task gets locked until all dependencies are completed) - optional support for nice colored reports like these http://images.51cto.com/files/uploadimg/20120711/14003527.png
First: if you're just putting some personal code on Github, don't waste too much time thinking about licenses. Programming should be fun, and for most of us, licenses aren't. If you don't feel you're doing anything wrong, just go for it, and work it out when someone complains. But, since you are thinking about it: Both numpy and OpenCV are BSD licensed, so they don't affect what license you choose for your code. :-) If you're not redistributing BSD code there's no need to mention it either, though it's polite to acknowledge in documentation (if you have docs) what tools you're building on. If you use anything GPL licensed, and you don't redistribute it with your code, there's some debate over whether your code has to be GPL as well, but it's safest to assume that it does. If you do redistribute other projects, you should make sure their copyright notice is included in an appropriate place. If you redistribute GPL code, then your code becomes GPL as well.
Nested URLs and collection keys is not what rest is about.
awesome... Well, that's my next pet project!
Your comment makes perfect sense, but it seems that no one is taking the leap to develop anything for Python 3.x so it's stagnating. The comment also alarms me because it's been 8 years and that's still the same mentality amongst the community.
I have been working primarily with grib files, but ECMWF's grib_api has netcdf support, it may be worth looking into.
hit me with a pm if you get a repository online somewhere not promising any contributions but i'll certainly be interested to try it as user once you get a minimal working prototype
Oh I thought you were trying to share a fun learning project. Might be bad but every project is something to learn from.
It'll put some chest hair on ya! :)
Very true. It's also worth pointing out that most of the features of 3.x that make it worthwhile started in 3.4 (such as `asyncio`). Before that it was needing to deal with package renames and bytes, neither of which added much value to most of us right away (among other things).
Just make sure you use a google app password. Maybe read the code too?
try using an [application specific password](https://support.google.com/accounts/answer/185833?hl=en). 
That's an arrogant if not, ignorant statement. There are lots of other technologies that are being developed which I could say are competing well with python. We are locking ourselves into a corner, away from any fixes or feature updates. Python will die if we do not all make the final reluctant push to 3.x. I wouldn't sound so intense if 3.x didn't come out 8 years ago.
there's a backport of asyncio. 
Good question, I too would like this answered. I'd also like to know if this person has ever worked on a project at a company other than self where you can't just throw anything you want into production.
The main reason is it is backward incompatible. It would be very weird if the 2 to 3 transition had been compatible and yet everyone were still on 2.x. But to change huge open source projects to be compatible was, apparently, no small feat, and sometimes things take a long time (imagine how much time it took to get the projects to where they were; now you have to invest even more time to just keep them up to date with Python, and based on *choices* that the Python Software Foundation made to break compatibility with things like print really ought to be a function, not a statement).
&gt; but it seems that no one is taking the leap to develop anything for Python 3.x so it's stagnating. Stagnating? You're talking about Python 3 specifically or the community/language as a whole? Regardless, I don't think either are stagnating because there's more universities teaching Python now and several industries (infosec, vfx, scientific) heavily rely on it. Yes there's not a lot of things out there exclusively for three but if you're a developer writing an API you have to keep several things in mind: * What's the default Python version on most distributions? * Which version has the larger user base? * What version(s) do my target applications support? * Can I support 2 and 3 in one code base? * Do I need any 3 specific features? * Do I need any 2 specific features? * Do the libraries I use support 2, 3 or both? The default answer to most of those is often 2. Personally speaking when I write code I try to be as version as agnostic as possible and I will make the effort to support 2.6+ in a single code base because 2to3 does not always do the right thing. I want to give my users a choice, not lock them into a version which they may not be able to install because it didn't come with their os. This is slowly changing though, in fact recently you could finally reasonably stop directly supporting/testing 2.6 because quite a few of the Linux distros are 2.7 by default now.
Here are the three books I recommend for senior interviews: * Cracking the Code Interview (C and Java examples, but the concepts it provides will mean you can solve all those datastructure questions) * Writing Idiomatic Python (So when you interview, your code looks right) * Two Scoops of Django (For Django interviews it's a must. It can also help even Flask or Pyramid people)
Hum, you are practically right, but ethically and legally wrong because making a code available publically on github is redistributing it de facto. 1) Practically BSD licenses are enforcing paternity right: you have the right to do everything but claim BSD licensed code is yours. 2) Genêve convention (http://portal.unesco.org/fr/ev.php-URL_ID=15381&amp;URL_DO=DO_TOPIC&amp;URL_SECTION=201.html) says every stuff are protected as soon as they are divulgated. So publishing a content publically is *de facto* redistributing it thus, it is claiming it is yours. As a result publishing code that is licensed under BSD make it automatically yours, and therefore infringing the licence. It is always nice to say you used code A &amp; B. In real life, who cares? Since you are not apple/google/MS, and no one cares about your code it is not a problem. You have time to think about it, and mostly if one author's don't like it, they normally first ask you to politely comply before going legal. These stuff are boring and everybody knows coding is more important than legal stuff. So do as we all do: first code, and think about legal issues later. Yeah, I don't know why I answered because I basically said the same things.
I too am curious about this but based on my own experience being "robust" has more to do with how the application is being run (DB backend, uwsgi, front-end server, etc) than Python itself most of the time.
Your relationship sounds like it is not a many-to-many but rather a one-to-many. One Bar can be related to many Foos. In that case you can just keep the relationship as attributes. In order to ensure that if a Foo or Bar is ever discarded that the associations are removed as well you can use [weak references](https://docs.python.org/2/library/weakref.html) and protect the association with accessor methods (property() built-in function). Here is some completely untested example code off the top of my head: from weakref import ref, WeakSet class Foo(object): def __init__(self, bar=None): self.set_bar(bar) def get_bar(self): return self._bar() if self._bar is not None else None def set_bar(self, bar): self._bar = ref(bar) if bar is not None else None if bar is not None and self not in bar.foos: bar.add_foo(self) bar = property(get_bar, set_bar) class Bar(object): def __init__(self, foos=None): self.foos = WeakSet() if foos is not None: for foo in foos: self.add_foo(foo) def add_foo(self, foo): self.foos.add(foo) if foo.bar != self: foo.bar = self def remove_foo(self, foo): self.foos.discard(foo) foo.bar = None
Do you know if there is planned support for a Python3 STM version?
Because * Other parts of your project are in python * Python has a library you need for your project * You work with engineers who only know python * You've invested a lot of money in python * Python is the superior choice for some other reason * Good features should be available in as many languages as possible * STM being available in more widely used languages will promote the use in lesser used languages 
There are some really good talks and speakers there. Thanks for the link OP.
http://doc.pypy.org/en/latest/stm.html#python-3
On the flip side I think there's a case to be made for simple code that is instantly understandable by any programmer. I like the ability to show business rules written in python to technical users and have them instantly understand it. This reduces how much documentation I have to write. But they don't understand anything idiomatic.
If you're talking distributed systems with python you should be somewhat familiar with celery. I say somewhat because it's a large complex library. Check out the docs, especially the part on designing canvases
Komodo.
For? 
data science web app. Think BI &amp; visualization
python takes less time to develop for comparable results. boom?
Fair points. Would you consider this a clarification that I should have included with my original comment? I figured OP didn't need someone to tell him that unaudited software comes with risks. On a related note, makes me consider how much unaudited software I trust daily, starting with PyCharm, Paramiko, and Fabric. (Or have there been audits of any of those? I couldn't locate any info... then again, I don't really know where to start looking. Curious though.)
For a senior Python dev, your should know the idiomatic Python as presented from Raymond Hettinger, which is to say, a Python core developer is always a preferred source for advice on writing Python.
This is a video tutorial (3 hrs) that introduces the concepts and walks through those exercises: http://www.youtube.com/watch?v=dV8Ju1R2lhY 
I have a strange feeling this will create a fork and an original edit: please keep compatibility!
&gt; Yeah, I don't know why I answered because I basically said the same things. I appreciate it though. some times saying the same thing in different words can help get the point across.
the licensing part has been answer so i wont bother putting my two cents in but from a user perspective.. please mention your dependencies in your readme. Nothing is more annoying then attempting to use someone else code and find out you have install half of pypi to get it to work 
In fact they have made a minor update, now with the addition of less crashing under certain versions of Linux!
I think it will have a much different effect: rather than creating sub-par IPython-like notebook interfaces for other languages, once could just use Jupyter. A Brainfuck notebook, anyone?
Heroku is a good place to get started Amazon is a good place to get a little more Bare metal when you need it
Django REST Framework. It's the tits.
This is already possible - there are [a number of kernels](https://github.com/ipython/ipython/wiki/Projects-using-IPython#list-of-some-ipython-compatible-kernels) to run other languages in IPython. The name change will just make it clearer that that's something we aim to support.
heroku is literally built on top of aws; it's more expensive but you need to know less about configuring servers
A complete API rewrite isn't worthy of a major version update? Hmm.
If you made a program using pyQT and sold it, would that become a problem? 
Well, I just wouldn't infer security through project age and number of commits, and that's what the other guy meant by heartbleed. But that's apples and oranges I guess. I'd rather infer security through sec knowledge of the author. [And it actually looks like he knows a bit about security.](http://www.simonmweber.com/) He mentions he found [this vulnerability.](https://github.com/simon-weber/XSS-over-NBNS) That makes me trust the code base much more... He might not be a famous sec researcher or anything, but he's conscious of it. Doesn't mean it doesn't need an audit, but it's good to see. &gt; On a related note, makes me consider how much unaudited software I trust daily We all trust unaudited software all the time... That's just how it's going to have to be too, unless you want to dedicate your life to auditing all software you use like some sort of netsec monk. I wouldn't worry about PyCharm unless you think somehow it's infecting code you put together, but I see what you mean about Paramiko and Fabric. Potential for a lot of damage there. I looked up the dev and he's a very active developer (bitprophet). He seems to know his stuff and he's contributed a lot. He also built fabric or at least forked paramiko or the other, if I remember correctly. Jeff Forcier seems like a trustworthy dude. But there is [a vulnerability](http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-0299) in paramiko that came out in 2008, but his paramiko looked like it was started in 2011? Pretty sure he started fabric, paramiko died so he forked it and took over what we use today, and since then we haven't seen a public vulnerability. I dunno. It doesn't take much to look up the dev, see how trustworthy he is, if he knows sec a bit, what he's worked on and if his commits look clean, then check for past vulnerabilities of the software, look at other projects he's done, look up when a vulnerability came out and what commit patched it and how quick... that's how I do a quick and dirty audit without looking for vulns, and no red flags so far. It's not like I know a good python alternative even if it was sketchy though.
That depends whether importing PyQt counts as using something that can be distributed standalone, or as if it was a directly linked library. Let's assume the more restricted option: You can sell the code, but you must provide the source as GPL as well. The GPL has specific clauses to prevent making code impossible to sell.
No, provided your program was made available under the terms of the GPL. If you use some other license, a commercial license, or even something more permissive (like BSD), you would need a commercial license for PyQt to prevent your code from forcibly becoming GPL licensed. Alternately, you can use PySide, which is available under the LGPL and avoids these problems, however it doesn't yet work with Qt5.x.
the author also missed islice when suggestiong how to iterate parts of collections itertools is a must-have!
Install [PyYAML](http://pyyaml.org/) and import yaml to use yaml.loads. It is a function that loads certain objects (including most kinds of json files) as a python dict. Unlike json.loads (which can import data as unicode), yaml.loads would import data as a string. Side note: If you're using python3, json.loads should work just fine. [Roboto](https://en.wikipedia.org/wiki/Roboto) is a great free substitute for Helvetica.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Roboto**](https://en.wikipedia.org/wiki/Roboto): [](#sfw) --- &gt; &gt;__Roboto__ is a [sans-serif typeface](https://en.wikipedia.org/wiki/Sans-serif#Classification) family introduced with [Android Ice Cream Sandwich](https://en.wikipedia.org/wiki/Android_Ice_Cream_Sandwich) operating system. &gt;Google describes the font as "modern, yet approachable" and "emotional". The font is licensed under the Apache license. The entire font family was officially made available for free download on January 12, 2012 on the newly launched [Android Design](http://developer.android.com/design/style/typography.html) website. The family includes regular and oblique styles of Thin, Light, Regular, Medium, Bold, Black, and Condensed widths. &gt;==== &gt;[**Image from article**](https://i.imgur.com/MIge6Uw.png) [^(i)](https://commons.wikimedia.org/wiki/File:Roboto.png) --- ^Interesting: [^Mr. ^Roboto](https://en.wikipedia.org/wiki/Mr._Roboto) ^| [^Mr. ^Roboto ^Project](https://en.wikipedia.org/wiki/Mr._Roboto_Project) ^| [^List ^of ^Masters ^of ^the ^Universe ^characters](https://en.wikipedia.org/wiki/List_of_Masters_of_the_Universe_characters) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ciubhcl) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ciubhcl)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
You accidentally jupyter'd once too many
&gt; except you don't actually have all rights reserved because you put it in a public GitHub repo Making something publicly accessible doesn't lose you any rights over it.
I took a look at it and there's one thing I don't like about its API: the Mailer object is not thread-safe. It means that you can't build a global object embedding all your configuration parameters and simply re-use it in all your threads/requests/whatever. Also they could have used context managers. The start() and stop() methods are error-prone, especially if, in their example, they don't even execute the stop() in a finally clause.
In that case you could do a similar thing, except you would put a WeakSet on the Foo class just like the Bar class has now. Alternatively, you could implement the mapping as a separate class FooBarMap that each Foo and Bar has a reference to. That's what the other commenter suggested about a "registry".
Well, I'd make some sort of "registry" where the relations are stored in any case, perhaps with weak references? To keep deletions and additions from both directions close to each other, codewise. Then you can add methods on the objects that call the registry. Or even a list-like object as an attribute, so yuou can foo thefoo.bars.append(Bar()) 
&gt; you don't actually have all rights reserved because you put it in a public GitHub repo, but there's no explicit license so nobody actually knows who has what rights at all. You do have all rights reserved. And as far as who has what rights, the uploader has all the rights and "nobody else may reproduce, distribute, or create derivative works from your work." Even though license is missing it's pretty clear that you practically can't do anything with the code and that uploader has all rights reserved. The fact that the code is public is irrelevant.
Even better is to put a `requirements.txt` file.
A library at major version zero gives the impression that this isn't for production use, or at least that you should tune in to the public dev channel and see what the plans are for it.
Depending on the license it can be a problem. If your software is licensed under GPL compatible license it isn't a problem. &gt;If you use the GPL version of PyQt then any code you develop with it must be distributed under a compatable license. Like the GPL version of Qt, PyQt grants an exception to the GPL that specifies the list of licenses that you may use. The full text of the exception can be found in the PyQt source package. &gt;If you are unable to distribute your code under the terms of the GPL then you must purchase a commercial license. http://www.riverbankcomputing.co.uk/software/pyqt/license
Heroku pros: easier to use, cons: more expensive - aws is the opposite and allows more manual configuration.
It is one of those parts of Nikola you have to remove yourself. There's a SOCIAL_BUTTONS_CODE in the conf.py you can just set to an empty string.
We had a Meetup presentation in London not too long ago about hosting using Heroku: https://skillsmatter.com/skillscasts/5340-sharing-community-photos-for-free-a-case-study-for-mokocharlie I was personally impressed by the services offering and how easy was set up the whole thing. The cost is largely driven by the number of users, so it can be offset with more revenues: the basic offering was in fact cheap. 
So there is, awesome! Guess I'm just a liar ;-)
Making something publicly accessible doesn't, but putting it in a public GitHub repo requires you to accept [F. Copyright and Content Ownership](https://help.github.com/articles/github-terms-of-service#f-copyright-and-content-ownership) from the GitHub terms and conditions. This requires you to agree that others can view and fork your repositories - not as good as a proper licence, but not the same as simply making it publicly accessible.
With my job, almost all input files are exclusively netcdf. I have used both netCDF4-python and [scipy](http://www.google.ca/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CB4QFjAA&amp;url=http%3A%2F%2Fdocs.scipy.org%2Fdoc%2Fscipy%2Freference%2Fgenerated%2Fscipy.io.netcdf.netcdf_file.html&amp;ei=I8y_U7eBCYyvyATerYG4Dg&amp;usg=AFQjCNGMBRXABF1TYYsnB3VEWOGb86CB7A&amp;sig2=mi_W1dVG-Z87aB6vC_UeHQ&amp;bvm=bv.70810081,d.aWw) to import them. I have found that scipy seems to be slightly faster. An example: import scipy.io as sio data = sio.netcdf.netcdf_file(filename, 'r') lon = self.data.variables['lon'][:] lat = self.data.variables['lat'][:] 
aws *requires* more manual configuration
i actually use pyramid_marrowmailer and it takes care of all that. 
Heroku is stupid easy to set up, and that's their value proposition. AWS is cheap as it gets, but you have to manage your setup and configuration. So do you want to pay a sys-admin or Heroku? Honestly, Heroku is great for proof-of-concept and smaller apps, while AWS is better for when you expect lots of traffic and greater levels of complexity, and you need the total control. 
maybe this https://github.com/Kozea/WeasyPrint, there is also reportlab but not sure if it would work with python3
Anyone else really enjoy all the puns that go into python module and project names? I certainly do...
Hi, you can have a look at https://pypi.python.org/pypi/relatorio . I use it to generate my installation guide from a template in odt and build PDF. But it should be able to produce different kind of files like said on the page of the lib. You can have a look at a quick example here https://code.google.com/p/python-relatorio/wiki/QuickExample. I hope this can help
Depending on the legislation the mere act of making something publicly accessible could implicitly grant specific rights, e.g. the right to use the work. U.S. copyright law doesn't rule the world, and since Github is accessible from virtually anywhere, the rest of the world matters, too. Besides, by uploading to Github the OP has implicitly accepted Github's terms of service, which might implicitly grant some rights as well.
Thanks very much, This looks promising [for posterity] Call this .py script from php to set current memcache values in a php-accessible way: #!/usr/bin/env Python import memcache from phpserialize import * # set inter-python globals using memcached mcC = memcache.Client(['127.0.0.1:11211'], debug=0) # serialize some values for php to access through memcache phpmcClist = {'TZ': 'phpTZ', 'bLat': 'phpbLat', 'bLon': 'phpbLon'} for p in phpmcClist.keys(): mcC.set(phpmcClist[p], dumps(mcC.get(p))) Result: xx@xx:/var/www/html$ memccat --servers=127.0.0.1:11211 bLon F-xx.178510000000003 . xx@xx:/var/www/html$ memccat --servers=127.0.0.1:11211 bLat Fxx.921779999999998 . xx@xx:/var/www/html$ memccat --servers=127.0.0.1:11211 phpbLon d:-xx.17851; xx@xx:/var/www/html$ memccat --servers=127.0.0.1:11211 phpbLat d:xx.92178; 
&gt; Depending on the legislation the mere act of making something publicly accessible could implicitly grant specific rights, e.g. the right to use the work. Any examples of that? Most work has to be publicly accessible in some form to be used, so I'd be surprised if access equals the right to duplicate.
Thanks for the answer! I found this one but the documentation seems incomplete and they don't speak a lot about customising the layout. Unlike xhtml2pdf, it seems it's more a direct html&gt;pdf transcriber. However, I think I'll have to use this one if I don't find something better, thanks for the suggestion!
Wait, so even if I import a module that's GPL licensed- and I don't distribute it with my code- my code becomes GPL?
PyQt actually has an exception to the GPL which lets you use it with a few other popular open source licenses. And you can buy commercial licenses if you want to use it for closed source things.
Thanks, fixed.
Is there a reason you can't use an external tool for this? Pandoc + Latex came to mind.
We've found an exec out to wkhtmltopdf to work well.
Yes, I also thought about LaTeX for this. It seems like an interesting option. I'd rather use only Python for this task but we might explore it if there isn't anything Python-only that fits our need. Thanks for the idea!
I've used xhtml2pdf in a professional setting and experimented with WeasyPrint personally. From what I've seen, WeasyPrint gives far more accurate results when comparing the original HTML to the final PDF. It also used more cpu/memory to process though, which is why we used xhtml2pdf for our stuff (didn't need anything too fancy either). xhtml2pdf has quite a few quirks though and doesn't fully support CSS either.
this seems interesting, are there plans for an android version?
According to the [Computable blog](http://computableapp.com/blog/posts/2014/07/10/ComputableHitsTheAppStore/), it was released fully unlocked by accident. In a few days 1.0.1 will be released, which will make some features require in-app purchases. Until then you can download 1.0.0 and try everything with the author's blessing (though only until you upgrade).
Thanks! it's downloading now.
How Would I make my program GPL licensed? I'm very new to the subject
[Reportlab works fine in Python 3](http://www.reportlab.com/software/documentation/relnotes/30/) and it's the lowest fuss way to make a PDF in Python.
&gt;A Brainfuck notebook, anyone? Yes, this is just what I need to keep my brainfuck clear and pedagogical!
Sweet. Nice work.
&gt; First: if you're just putting some personal code on Github, don't waste too much time thinking about licenses. If you think there's a chance people will use your software in a program, you should. It doesn't take that long to pick one and you can always change it. My open source project used GPL because I had heard of it. I switched it to LGPL because I didn't understand the terms of GPL and someone complained.
sorry
iknow iknow... 
Primarily by giving source code or enabling people to download original source code, and including the appropriate license with your file. This page should cover it: http://www.gnu.org/licenses/gpl-howto.html However, this also has some effects on your clients if they decide to modify the code, resell it etc. In my experience companies don't really like the GPL license, so it's something to keep in mind. Or you could switch to pyside, which is licensed under LGPL - it doesn't support qt5 yet though.
ty this answers it.
ty 
Does anyone know the requirements? I have an iPad 1.
Doubt it'll work, unfortunately. I have an iPad 3 and it's still a bit sluggish. 
Seconded. An (opensource) android version would be nice. QPython doesn't cut it.
Indeed. With Pythonista and now Computable (as well a few other mediocre apps, some free), iOS has some really good Python options.
You may sell a GPL program, but anyone you give the program to must also have access to the source. And not only do they have access to the source, they have rights to make derivatives and redistribute the source. So you can sell it, but any of your customers may make as many copies as they like and distribute them however they see fit.
AWS is cheaper, boto is great, plus if you use AWS you can access all of their services (s3, dns, simple or relational databases, etc).
Should crosspost on /r/apphookup
I did, but a mod removed it and I didn't have the patience to argue :(
Lame :|
relax, man. it was not slow, i was. i was talking to one guy while on that "shell" lazily typing "say_hi world" :D but, i would be happy to help despite my limited ability, though. i can run the graph on complex script, if i get one. 
&gt; if you're just putting some personal code on Github, don't waste too much time thinking about licenses. Programming should be fun God bless you sir.
Thanks for the explanation
As a backend developer, who become a mobile developer, then back to backend and now works with both scenarios. Choose both. As everyone already said, Heroku is awesome easy to deploy. Just push the code and everything is live. Do you need to scale more? Move up the dyno bar. Do you want to use something more? Look at this big list of addons. But it comes with a price. AWS you have to do all by yourself (learn how Linux works, install your database, configure nginx, supervisor, etc, etc, etc). The start is hard as hell, but more rewarding and easy in the long-run. So, seeing your scenario (BI &amp; visualization), you probably will have a lot of things to do first in your project and worry about the server will just slow you. Go with Heroku first, then you can decide if it's worth (Price x Work) to get your own server or if the project became too complex to you have to worry about the server. (One more point: go for DigitalOcean or Linode. Cheaper and easier to setup.)
that was a detailed and well reasoned answer, thank you so much!
Why on earth are you using Ubuntu 10.04? On a more related note, a coredump can tell you more about a crash. Here's how you can get one: $ sudo apt-get install python-dbg # we need the debugging version of python $ ulimit -c unlimited # set coredump size to unlimited (default is 0, as in no coredumps) $ python-dbg crashing_script.py # The name of the binary might differ on your machine $ gdb /usr/bin/python-dbg core Now you can inspect the stack with `up` and `down` and hopefully learn more about the crash.
you're good. i'm happy to help in any way. after visiting the context and viewing that this wasn't the answer that you were seeking, you wanted a fixed list (array in other languages) length but the default value to be zero, you can do the same with dicts by using the setdefault method. good luck in learning python!
Ohhhh lol okay. Thought you had some version issue with a newer python or something that was blocking on a read. Cool, glad it was you :)
Qt seems to come with its own licensing issues. Does the same go for it? Since PySide uses it, it would seem to defeat its own purpose
Yeah, no need to catch the IndexError there.
boto is great, but you can access all AWS APIs whether you are running on heroku or an EC2 instance.
What backend are you using? Try switching to another and see if it fixes it. You may have to rebuild/reinstall whatever backend it is using. import matplotlib matplotlib.use('agg') import matplotlib.pyplot as plt 
Just discovered this resource. Haven't had a chance to explore it in any detail. Looking forward to trying it out and seeing how we might be able to incorporate it into the Alberta CSE (Computing Science Education) curriculum and how it might dove tail with Sweigart's and Downey's excellent resources. Kudos for making this available for free 
Since that is a very isolated problem you can just shell out to a module written in Python 2?
totally agreed actually; if you *really* need to cut every penny, AWS is *cheaper* but I wouldn't call Heroku *expensive*, and it makes many things much easier.
I've used all. If you can put your stuff in a virtual env in python then deploying on heroku will be easy, if not, like if you have to install certain system libraries or packages it can be a pain. AWS has cleaned up their UI over the last few years but it's still pretty clunky, it does have other advantages too like easily scalable datastore's, etc. Personally I think something like digital ocean is the best route as it's cheaper and easier to setup than AWS. I would also recommend looking into using ansible for deployment (https://github.com/ansible/ansible)
The underscores are ugly. 
So, the point of the post is that Python will always be useful for simple, short, fast scripts, even though the author admits that his colleagues are moving to Go because it is a better overall tradeoff for "real" development. I guess it depends on each one's view of what the goal is, but I don't think that one should be happy if Python would get confined to niche areas like short throwaway scripts. A language useful only in such niches would be unable to influence the community, to produce frameworks, to gain momentum, to interest corporates that sponsor directly or indirectly the development. Bash is a language that has tens of millions of users, and yet it's totally irrelevant in the global picture of computer engineering. Should we be happy because Python can get there?
nice! keep up the great work!
TIL I'm the only person who looks at the sidebar
Python isn't my first choice when writing code mostly because (1) I really, really, really, really, really, really don't like the use of whitespace/indentation as a control structure (no, really!) and (2) I dislike the way it handles regular expressions. That said, I'll use it when it's the most convenient choice; for example, when there's a python library that solves my problem easily. I generally use Ruby, personally. But there's nothing *wrong* with Python; it's a matter of taste.
I don't mind the whitespace at all, although it was a bit odd when I first started using Python. Overall, I like the language a lot BUT I don't like how regexes work in Python either. They feel bloated and clunky to me.
I think Ruby was more Perl-like in the beginning, albeit with a built-in object system instead of one that was bolted on in motion. Modern Ruby seems pretty similar in a lot of ways to Python; I can move back and forth between them pretty easily. I wrote a lot of Perl back in the day, but nowadays I stick to Ruby or Python.
`Requires iOS 7.0 or later.`
Pobody's nerfect ;-)
I am uncertain what to make of this. Most people will just look up the reference, but I imagine most people also know the difference (semi colons, maybe?). Best to just Google on the things you're uncertain of...? C is incredibly verbose and almost nothing is done for you. I would argue Python is quite far from that. Mixing them up would be fairly complicated. Maybe start with "would someone have built this feature for me? Oh I'm writing C, nevermind."
That's really cool, I didn't know they had that. Thanks
Wow. Are you on drugs or something? Just Google for a syntax cheat sheet for whatever language you're using and have that open while you're working. I don't know. Or have the textbook next to you as you're programming.
Line 10 does not appear to be indented far enough, thus raising an error on the for loop before it.
Reminds me of that old joke. Q: What's the difference between George Michael and a microwave oven? A: Are you saying there are similarities? 
&gt; I guess it depends on each one's view of what the goal is, but I don't think that one should be happy if Python would get confined to niche areas like short throwaway scripts. I'm currently learning Python and this is something that's starting to bother me. I've noticed a recurrent theme where the main argument given in favour of adopting Python over anything else is that Python manages to be second best at a lot of things. This is a problem, because I don't remember the last time someone argued that Python was the best at something. When someone decides to pick up a programming language and has the entire world to pick from, why would anyone decide to avoid the best solution and instead go with an alternative that does not do so well in comparison?
&gt; In that case you could do a similar thing, except you would put a WeakSet on the Foo class just like the Bar class has now. Weak references sound promissing. I'm currently taking my first steps in Python, so I'm not competent enough to tell if will work or not, but from what I've gathered they do appear to be tailor-made for this task. Weakref's support for a callback function looks even nicer. So far this appears to be the best option available. &gt; Alternatively, you could implement the mapping as a separate class FooBarMap that each Foo and Bar has a reference to. That's what the other commenter suggested about a "registry". With a separate registry, it wouldn't be possible to apply an operator to Foo objects (or Bar as well) without passing the separate class or registry. I suspect this would make the code appear... inelegant.
Indentation, wrong usage of raw_input, comparison of strings to integers, wrong for loop syntax. tl;dr: everything.
The code does not run yet. you need to replace wordlength.start and wordlength.end by wordlength[0] and wordlength[-1] 
Python is great for data analysis and scientific related programming with the IPython notebook, numpy/scipy, and pandas stack. No way would I be able to do data analysis in Go or any C family language that doesn't provide at least a REPL environment.
&gt; Well, "second best at everything" is an overstatement in the other direction I think. I'm very invested into Python (10+ years of professional experience), but I would say that Python is easily the best for general backend developer (unless you're in the top 1% of scaling/performance), and in the whole scientific field (be it biology, chemistry, statistics, etc.). I believe this is a gross overstatement on Python's value in the science and tech fields. Without going into any details, I'm one of those science and tech people who has wasted some years of his life doing science and engineering thingies for a living. In this field, Python doesn't even pop up in the radar. For scripting needs, proof of concept code, research, all around hacking and quick number crunching needs, Matlab is the undisputed king. When software passes the proof of concept stage then Matlab code is replaced with C, Fortran or C++, either as stand-alone software or through shared libraries integrated with Matlab. The FLOSS label (and argument) also doesn't help Python, because GNU Octave already has that covered. Modules such as numpy and scipy do a commendable effort, but they are no way close to what Matlab (or even Octave) provides in this domain. Again, [it's Matlab all the way down.](http://en.wikipedia.org/wiki/Turtles_all_the_way_down) Matplotlib is also a commendable effort, and arguably does a better job than anything Matlab has to offer, but at best this package is used as a complementary tool, like gnuplot is used. I'm aware that Python has managed to make some inroads in some domains, but the ones I'm aware boil down to the developers having personal reasons which motivates them to invest their time working on a personal project, where they are able to ignore any practical issues and technical limitations. Some personal projects happen to gain enough attention that end up being adopted for some reason, but this requires jumping through a lot of hurdles and accepting a number of downsides which in other circumstances no one would even consider. &gt; For desktop application development, if you're into Qt development, PyQt is still compelling. There's the second best theme that's plaguing Python. &gt; It's also a very good choice for system programming, though that category is very vast and with very different quirks depending on what you do, so YMMV, but surely it can be the best choice in most system programming. That's a tad exaggerated, isn't it? Nevertheless, it's the second best theme yet again. &gt; Then of course there is the whole range of throwaway programming and/or quick prototyping, which is a field in itself and another in which Python reigns in my opinion. I can't speak on behalf of everyone, but in the science and tech fields, Matlab is king in that domain. There isn't even a second-best, at all. Until Python offers something remotely similar to Matlab's workbench (spyder doesn't come close to cut it), it can't even start to compete. 
I do data analysis and scientific related programming for a living. Python doesn't register in the radar in this field. Matlab, with all its flaws and shortcomings, dominates this field. Matlab's workbench ensures that anyone with any interest in the domain who isn't a masochist automatically gravitates towards it. Ipython and scypi try to bridge that gap, but the gap is still far too wide, and still comparably unusable. Python, in this domain, is currently what Linux was in the early to mid-90s: it offers a whole lot of potential, it is usable for those who are willing to put in the legwork while ignoring all the conveniences in the world, and it is free. But until someone puts in the work to get the ancillary infrastructure in place to assemble a tool which can be comparable to the standard tools of the trade, people doing serious work will keep on doing their work with the standard tools of the trade.
No, that's a common misconception. The GPL is designed to protect the code commons from abuse, not to screw anyone over.
Hey folks, Full Stack Python author here. Thanks again for the recognition! I love writing this site and I make updates just about every day to the various sections. By the way, For those of you going to [EuroPython](https://ep2014.europython.eu/en/schedule/schedule/#day2) in a couple of weeks I'll be giving a talk titled, aptly enough, "[Full Stack Python](https://ep2014.europython.eu/en/schedule/sessions/41/)." Hope to see some of you there and get feedback on what I can do to make the site better.
Oh yeah I guess I should say that's what we called in during development. One day someone drew a moustache on the back and put "Juan" under it. One...Juan...doesn't really matter, it's not a very good device by todays standards and people shouldn't expect any modern apps to run well or at all on it.
Amazing website. Keep up the good work :-)!
I have been using Python for data analysis at work for past few years and its been great. Maybe prior to few years ago I'd agree with you since libraries such as pandas, ipython, yhat's ggplot, seaborn, etc were in their infancy or non-existent. Not sure what I'm missing with MATLAB or maybe you have a very specialized domain need. I need a general purpose language since I need to perform the full life cycle of data analysis which includes web scraping, cleaning up or transforming the data, and working with databases. I think you should check out the talks at the Scipy 2014 conference to maybe field the latest technologies available. You also seem to imply that your issue is you'd rather work in a more GUI environment since you mentioned Spyder and MATLAB's workbench. If that's the case then yes I agree there is probably not a strong GUI environment for data analysis in Python. Remember Python is still a general purpose language so you have to consider the limitations with that regards. I don't think it is fair to compare Python with MATLAB (general purpose vs DSL). I think maybe you have unreasonable expectations out of Python. It sounds like you've convinced yourself to use MATLAB due to its GUI environment. No one is stopping you. Use the best tool for the job. It certainly isn't Go for data analysis which was what I was originally comparing Python to.
This is a question better suited for /r/learnpython.
One thing I didn't see when scrolling through the sections and that you may want to add (and I may have missed it, so feel free to correct me), was a discussion of automation stuff: Salt, Chef, Puppet, etc. I think it's a great idea, though, and a lot of good work has clearly gone into explaining various topics that can be tough to initially grasp.
Yea, I agree my coverage of anything other than Ansible is non-existent. Partially that's due to my lack of knowledge in Salt, Chef and Puppet. While I don't need to be an expert in those tools to write plain English summaries about them I do like to have spent some time with them so I don't write anything egregiously incorrect. What're your thoughts on having a single page for Ansible, Salt, Chef, Puppet &amp; Fabric on the Configuration Management page versus splitting them out across their own pages?
I don't disagree with your points, but I think you're making an argument of what's used as a mainstream solution rather than what's better. Powerpoint surely is the most used application to make presentations, but Keynote is so vastly better. Eg: I don't dispute that Matlab is still king for research, but Matlab can't be used in engineering a software solution; when it gets to that point, Python is VASTLY superior to rewriting in C++ or Fortran, in my experience, though C++/Fortran are still more widespread. And that's also obvious if you think that mainstream/widespread technologies in the industry are also usually the most obsolete. It's the way technology evolves, you always need visionaries, early adopters, late adopters and laggers, where laggers *are* the vast majority. So well, about learning Python or not, depends on what your goal is. If you're aiming at large corporations that are 10 years behind in the adoption curve (nothing wrong with it, mind you, it's the way the distribution curve works), then drop it. If you plan to work in smaller environments where you're most likely to choose your gears, then I'd say Python will be a wonderful weapon to master.
Is the directory vec2d.py saved in a package? i.e does it have a `__init__.py` file in it?
What do you mean when you say it doesn't work? Would you be able to share the error you get when you try to import the file?
Honestly, I'm not much qualified to comment here. I only noticed their absence because I haven't used these tools and was hoping to start reading about them. On the surface, it seems to make sense to put them together, but possibly someone with more experience can comment?
Yes of course, sorry. When i do import vec2d I get a "no module named vec2d" error. When I do from vec2d import * I get a name error telling me the class is not defined. To be more clear... I have a vec2d.py file with one class called Vec2d inside it. When i do from vec2d import * I get no errors. But I do not know how then to call upon my Vec2d class successfully. 
It doesn't, no. Should it?
You should be able to do from vec2d import Vec2d. Then, you should be able to call Vec2d() from within the program. However, I'm surprised that you're having this issue. What happens if you add these two lines to the very top of your file, does the problem go away? import sys sys.path.insert("/path/to/your/project/dir')
You should read the documentation on [modules](https://docs.python.org/2/tutorial/modules.html). It helps a lot.
Thanks. They seem to be saying the misconception here and that sounded wonky.
Not really, since there's no `yield from` in 2.7, and neither a `return` from generators. I don't want to `raise Return()`
Which good libraries? Fabric, ~~boto~~, twisted, and ...? /edit: Not even boto. And we have asyncio instead of twisted. The time is now. Python 2 is now allowed to die.
There are specific things missing, like image recognition. But for general use, Python 3 is ready. Even boto and paramiko are ported by now.
You should be able to import it by using the filename without the extension, so to import vec2d.py, all you need to write is: import vec2d Note that it is case sensitive. Can you try importing this is the command line interactive shell? Just navigate to your project directory, start python then import: cd /path/to/project python import vec2d 
Packages and modules are distinct implementations. Creating a .py file and importing directly from that (a module) will work as long as it lives in sys.path.
I just had to do the opposite and write some PHP after nothing but python. I am the sad. 
ty 
Newb question here. Will you need PHP if you learn Python?
Welcome!
A few years back I moved from PHP to Python (this was when Python 3.x was still new so I stayed with 2.7.x) and I was amazed... I could write anything! Games, apps, websites, etc! Python really is an amazing language. I've moved on to C# (work requirement) now and I still miss what lil' old Python could do :(
It depends on the type of project you're going to work on, or want to work on. For web development, a lot of sites are using php. (Wordpress, magento) It's a lot cheaper, you can find a php developer in every coffeeshop, a python programmer is harder to hire. 
That's akin to asking if you need a car if you walk. If you _only_ work in Python, then no, you don't _need_ to know PHP. However, just about every good developer knows and is comfortable with multiple programming languages. Whether or not PHP is something you'll ever work with depends on your field. If you're a web developer, there's a good chance you'll have to deal with PHP at some point. If you're an embedded devices developer (think microcontrollers for traffic lights, cars, insulin pumps, pacemakers, etc.), you could go your entire career without _having_ to work with PHP.
I generally use PHP for very simple web based snippet/script things simply because PHP is super easy to deploy (apt-get install nginx php-fpm). The only bad thing is that (imo) PHP code starts turning into a shitstorm when you start coding more complex web apps. And I've never liked any of the big PHP frameworks either. Python is just soooo much cleaner and easier to read and web frameworks like Flask and Django are extremely well documented and easy to use too.
Boy you are in for one hell of a ride. Prepare for nerdgasms.
You haven't looked hard enough.
Do you have any specific ones to recommend?
&gt; I don't want to raise Return() and why is that? 
Glad you like it. Also, the community is friendly and helpful, which contributes to the pleasure. 
No. While it is undesirable to know only one language, there's a solid argument that you won't need php if you know python, because PHP is only for the web (in reality), and python is strong in web technologies, as well as generally nicer.
I recently worked on a python project, and coming from PHP I can't say I experienced the same joy you have... My biggest gripe with python is it's annoying dictionary. PHP's array() is like a general purpose elixir of life, only javascript can compete with it. Python's lambdas are something to make me cry. Annotations are neat. This whole "we are adults" deal, no private members thing is weird. Class vs instance is awkward. The thing I mostly liked from python is the general strict adherence to the PEP rules, PHP has some as well, but it's a more recent thing (I think) and not everyone follows it. If python would add PHP's array() to it, I'd be really satisfied.
I'll give you a hint. They are mostly for django.
Join us at /r/flask, it's a great web python framework that makes things easier and more organized than building sites with PHP.
I don't know if you are actually serious, but why would you prefer the misnamed insanity that is the PHP array()? I love that pretty much the only thing that it is not, is an array. Do you have a hard time distinguishing between lists and dictionaries and their uses? 
You should check out Cobra, it's kind of.Python for C# with some really nice features like contracts and tests. :)
Thanks a lot, excellent resource. As I prefer reading on paper, I just made a printable PDF of it: [full_stack_python-20140712.pdf](https://dl.dropboxusercontent.com/u/144888/wordpress/20140712-full-stack-python/full_stack_python-20140712.pdf). It's 106 pages and it reflects the current content of the site. Hopefully I didn't miss anything.
It rather reminds me of emacs/vim…
I can't possibly fathom what you find lacking in Python's numerous collection classes compared with the PHP array(). Please enlighten us.
I am assuming because it looks better just to *return* rather than *raise Return()*
I saw the light in 2008 when the development manager at the agency I was working at introduced Django to the team. Oh my God it was amazing. After years of struggling with the chaos of a home made PHP framework everything was so clear and simple, so aesthetically pleasing. I never looked back. Now I spend all day every day writing Python for Django apps and love it. Welcome and have fun ☺
+/u/dogetipbot 3600 doge verify python is great! i've worked in it for a few years now and it's easily one of the best tools in a dev's tool belt :) virtualenvs have been a god-send as well http://virtualenv.readthedocs.org/en/latest/
__^[wow ^so ^verify]__: ^/u/cshoop ^-&gt; ^/u/SmartAssUsername __^Ð3600 ^Dogecoins__&amp;nbsp;^__($0.981896)__ ^[[help]](http://www.reddit.com/r/dogetipbot/wiki/index)
+/u/dogetipbot 3600 doge verify :.(
__^[wow ^so ^verify]__: ^/u/cshoop ^-&gt; ^/u/FUNDAUFNFR __^Ð3600 ^Dogecoins__&amp;nbsp;^__($0.981896)__ ^[[help]](http://www.reddit.com/r/dogetipbot/wiki/index)
oh, also pip! http://pip.readthedocs.org/en/latest/ virtualenv + virutalenvwrapper +pip = super good and easy dev environment
It's more like asking if you need to walk if you have a car.
Honestly sounds like you're trying to bang python data types into acting like PHP data types. Instead, learn the way python lists and dictionaries work and how to use them for your application and you'll be much happier (and you won't have to remember 30 different function names with inconsistent argument patterns).
&gt; Pretty much everything except dealing with old-ish websites. There are still lots of new projects being created in the PHP world. PHP isn't becoming irrelevant any time soon.
I want to see if /u/flying-sheep can articulate it bette than you just did. :) Also, a bit of trivia.... a lot of the ideas guido had for asyncio were hashed out in the ndb api for google appengine which runs on 2.7(still). and raising Return() was exactly how it was done. So it's not surprising that there is a backport of it for 2.7. And that asyncio is not as much of a carrot for moving to 3.4 as some people seem to think it is. 
That's a bad attitude to have. Don't ask, "How little can I learn?" Just learn as much as you can. There's no penalty for learning too much.
&gt; Not sure what I'm missing with MATLAB That says a lot. &gt; or maybe you have a very specialized domain need. Without going into details, Matlab's dominance has nothing to do with how specialized a domain or application might be. It's simply a general-purpose scripting language built around highly optimized matrix algebra routines and with data analysis requirements in mind. Some aspects of the language aren't good (functions declared only through m-files or lambdas), but Matlab's ability to analyze, explore, debug and crunch data is one of those features which nothing comes close to provide, at least as well. There is a reason why it's a standard tool in science and tech (has been for some decades now) to the point where it has been introduced in the curriculum of world renowned higher education institutions even in some degrees' only programing-related courses. &gt; If that's the case then yes I agree there is probably not a strong GUI environment for data analysis in Python. Python has no GUI environment for data analysis. It's completely useless in that regard. Spyder is the closest there is, and anyone who has any experience with Matlab can tell you that it's useless in comparison and doesn't even come close to deserve that label. &gt; Remember Python is still a general purpose language so you have to consider the limitations with that regards. I don't think it is fair to compare Python with MATLAB (general purpose vs DSL). The thing is, matlab isn't a domain-specific language. It's a scripting language just as general-purpose as Python. It even supports OOP, exceptions, unit testing, GUI programming, opengl support, and other bells and whistles typical of any general-purpose programming language. It even generates binaries. Matlab might be a scripting language built around cutting-edge matrix algebra packages, but it's as general-purpose as it can be. And again, there's the "second best theme" rearing his head.
What are you running python from? An IDE? Ipython? The command line? If your directory structure is: my_dir/ my_main.py vec2d.py Then in my_main.py you should be able to say either: import vec2d my_instance = vec2d.Vec2d() # Or: from vec2d import * my_instance = Vec2d() # Or: from vec2d import Vec2d my_instance = Vec2d() You should be able to run `my_main.py` from the `my_dir` directory or with a full path: python /path/to/my_dir/my_main.py
&gt; PHP is only for the web apt-get install php5-cli PHP's had CLI mode for years and only really started moving there over the last few years. now PHP has some half decent scraping libraries and decent dom parsers. PHP doesn't touch python on ML though (like comparing training wheels to a corvette), and ipython is really cool. i just wish python would catch up on web already.
Apparently people around here don't take kindly to random acts of gift-giving.
Is it just me or does the description and code for "2.The For, Else Statements" do not match? Didn't know for/else but if I read the description and then look at the code I think those two loops do not do the same. 
There are no e-commerce solutions in PHP either. Just messy horrible disasters that create about as many problems as they "solve". Did you know that there is a company in Amsterdam whose main source of revenue comes from the fact that they have figured out a way to host Magento sites in such a way that they don't fall apart after a few weeks?
Except if you learn PHP.
ok, but say iterable contains one element for which do_something() returns True. wouldn't that lead to do_something_else() being executed in the first loop but not in the second? 
Yeah I need to elaborate on that more in the post. The else statement is called at most once, and that is after the for loop finishes. If the for loop finishes with the *break* statement then the *else* is never executed. if the for loop finishes normally, then the else statement is executed. For example: def test(foo): for num in foo: if num== 2: print('found a 2') break else: print('no 2 in this list') . &gt;&gt;&gt;test([5, 3, 1]) no 2 in this list &gt;&gt;&gt;test([5, 4, 3, 2, 1]) found a 2
But php is designed to die.
Both are pretty shitty, tbh. Python: crippled by the requirement for the lambda to only contain expressions, never statements; scope model is too simple and too messy to make elegant yet unambiguous use of closures. PHP: [parser doesn't fully understand anonymous functions](https://bugs.php.net/bug.php?id=65612); anonymous function syntax is too verbose; scoping wrt. classes and objects is unclear; new anonymous function features compete with old `call_user_func` API (which, frankly, was even worse); explicit closures are a good idea in C++11 where it makes sense to select the desired semantics for closing (by value or by reference), but 1) PHP has value/reference semantics encoded into its "types", 2) PHP's explicit closures lack most of the features of C++'s explicit closures, and 3) it's not exactly a pleasant part of C++ to begin with.
PHP's anonymous functions are actual functions, while Python's lambdas can only be expressions: $func = function($a, $b) { $a-&gt;doA(); $b-&gt;doB(); }
I get that, but the first loop does something else. first loop: execute do_something_else() if iterable contains an item for which do_something() is True, second loop: execute do_something_else() if iterable is empty or do_something() is false for every item in iterable. what I'm trying to say: I understand your description of for/else but I don't think that the second loop is a simpler version of the first one because they don't do the same. 
Sorry, but maybe your line of work involves more traditional engineering analysis, whereas I was originally describing data analysis or maybe your definition of data analysis is different than mine. Yes it would be nice to see specific examples from you since I haven't worked with MATLAB since the 90s as an aerospace engineering major doing signal processing or fluid dynamics force measurements. Even though I work at a Fortune 500 company, I just can't see my company or manager wanting to spend thousands on software when we can do what is needed with python and its ecosystem. We replaced the propriety SuperSMITH Weibull software using an [implementation](http://nbviewer.ipython.org/gist/pybokeh/621af387ebcca464356b) that I made that I use at work. I also do a lot of data munging like in this [example](http://www.gregreda.com/2013/10/26/using-pandas-on-the-movielens-dataset/) and do exploratory data analysis using yhat's ggplot which was inspired by R's ggplot2 which by the way is very good for data analysis. FWIW, I've been doing data analysis for 16 years, so when I hear about "data analysis" or "data science" software or tools, I just don't hear MATLAB mentioned. What I do hear mentioned a lot is SQL, R, Python, Java, Excel, STATA, Hadoop, Pig, Hive, etc. I just don't hear MATLAB mentioned much or at all. You can pretty much do a google search for top data analysis or data science tools or job descriptions, and most will mention the tools above, but MATLAB?? &gt;The thing is, matlab isn't a domain-specific language. It's a scripting language just as general-purpose as Python. It even supports OOP, exceptions, unit testing, GUI programming, opengl support, and other bells and whistles typical of any general-purpose programming language. It even generates binaries. From my early college days, I've always seen MATLAB usage in the traditional engineering fields, but not in data analysis or data science. So according to you, that has changed. But it still doesn't explain why MATLAB is hardly mentioned as being used for data analysis or data science. I think that in itself is telling.
More David Beazley videos! Man is great in terms of material and presenting quality. Added pull request with some of his hard code videos.
No, because in PHP they don't suck as much. 
I hear [pylons](http://www.pylonsproject.org/) is pretty nice too. I personally use the uWeb framework.
Do you want a job writing Python? You should learn Python. No? Then if you have to ask, I can't come up with a compelling reason.
&gt; numerous collection classes Exactly.
It's mostly because when doing webdev I don't want to have to deal with "millions" of data types. I just need one simple general purpose container, if I wanted verbosity I could just use C++.
&gt; Do you have a hard time distinguishing between lists and dictionaries and their uses? Nope. 
Posts such as yours would make people think that languages are being only used for web development when in reality there is still a lot of code or applications being made outside of the web domain. So easy for people to chase that sexy, shiny web application, while the data analysis or scientific domains still rear their ugly heads.
Sorry but this is just not true. PHP may not be the best language, but its tools/frameworks certainly allow for easy and organized coding. (Not hating, I'm even subscribed to /r/flask and it certainly is a great framework!) 
 die(php());
I have a zillion websites that I built using PHP and was perfectly happy and ready to defend PHP as the right tool for the job. Then I dipped my toe into Flask and Python. Now it is one of these "My only regret is not switching sooner" situations. Productivity is way up, enthusiasm is way up. But before I made the switch I did some critical performance tests. Python (keep in mind that I am not a Python god so they aren't optimal tests) but they still blew my PHP out of the water (opcode cached and all). So I would say that the only "compromise" is that Flask is marginally harder to set up than PHP; but only just and I am still gaining experience. When I program in PHP (still have to maintain older code) I work. When I work in Python I am practically giggling. 
I love python but I do wish (and I know there are workarounds) that you could just ask for things that aren't there in a dict in the same smooth who cares way that PHP (and perl before it) just do in a no fail way. Oh you want nothing, then I will return nothing. Very rarely do I actually care if a dict was, in fact, never set just that it has no value. 
Any ideas why it is nsfw?
Laravel and Symphony come to mind first. If it counts, Composer is package management framework.
Welcome to the club. I too transitioned from PHP to Python.
Doesn't iron Python compile to CLR bytecode?
 Syntax Error: Unbalanced parens Grammar Error: Nested parens 
Yes but the syntax is that little bit more complicated. I am fully committed to switching to Python but I hate two things about Python one is the community of assholes that seem to think that they own it. And the other is not being able to say: elem=dict_onary['blah'] when blah isn't a key. I could use a dict.get but then it isn't as dead clean as my above code. Now there are interesting decorator kind of things that can actually strongarm python into allowing the above. As I said, 99% of the time I don't care if something has never been set. In that 1% case I could then use some kind of isdef type of request. And as for my dream being wrong the general attraction of Python is that it is supposed to look like pseudo code that actually works. Yet so many self proclaimed Python purists make code that looks like total shit with their so called "pythonic" ways of doing things that simply aren't intuitive or pseudo code like at all. When someone has to scratch their heads for any length of time figuring out code that when written differently is clearer to more people then the scratch head code is shit. (unless it need to be speed optimized and the scratching of head is a compromise for the speed) 
I'm interested in this too. It seems like a viable solution but haven't heard much about it.
For much of it's life this wasn't true though, and it's hard to shake a reputation once you've got it. 
Exactly, if you already know Python/Ruby there's not much to gain by learning PHP as well. You'd be much better of exploring a systems/functional/logic/etc language with your time. 
Look, I get it, you like Python better... but that's still a crappy attitude. No, you don't *need* to learn PHP if you know Python. But you also don't *need* to learn Python if you know PHP. You will be a better developer having learned at least a bit of both. 
or import sys, os.path sys.path.insert(os.path.dirname(__file__))
&gt; old-ish websites. Oh, c'mon. If you work on websites you are almost certain to encounter PHP. And not just on "old-ish" websites. I wonder how many new installs of Wordpress there are in a given day? I bet more than Flask+Django+Pylons sites.
Uh, you know your suggestions are customized based on your previous google searches, right? (And your location, and god knows what else.) I get "should i text him" and now I'm a little concerned about what Google thinks of me.
Symfony, Silex, Laravel, Aura or Phalcyon are all as good as any framework you'll find in any other language. Unfortunately the majority of the php community is still stuck in the home grown framework or codeigniter/CakePHP days. So yeah. Php has a dark past and plenty of developers still lingering there. 
Well actually, I am talking mostly about the web dev folks and I agree with your point. It seems like there are three major groups of Python coders out there: web developers, scientific coders and everyone else. I fall squarely into that third group myself. :) I have been using Python for than a decade, mostly as glue code.
You may even enjoy IPython, check out Python Tools for Visual Studio -- you can build WPF apps with Python now!!
Pssh, os.path is for pansies who don't like a bit of FUN in their code!
You can use Python to create Android apps? And do you know what other languages you can create apps with besides Java?
Spam much?
Cheers!
Yeah it does, but it would be highly unusual to code IronPython as the base for a serious application. My company uses IronPython for a very specific use-case.
I grabbed the source and immediately found the exceptions in a file called GPL_EXCEPTIONS.txt. Here is a copy of that: https://gist.github.com/takluyver/f7d95b0354a01bae2428 It covers all of the common open source licenses like BSD, MIT, Apache and LGPL, as well as several less popular ones.
lol, doesn't work.
1. Technical debt. Large codebases with complex inter-dependencies where one of them wasn't ported (or possibly even maintained anymore) which started a domino effect of "well if they're not porting, neither am I!" 2. Laziness. If you didn't read the documentation for string handling in Python 2, chances are you're not going to want to read the documentation on what you need to do now for Python 3 given strings are now Unicode. It's a monster effort to get you to the same point you're already at, which feels like spinning wheels rather than fixing bugs or adding features. 3. Ego. If you didn't read the Python 2 documentation, wrote a big library that got a lot of attention / users, and now they find out you duped them all along with a rubbish library that wasn't engineered properly and cannot handle basic internet string standards from 1991 in your shiny new 2012 module - you might not take too kindly to the embarrassment that you got caught out now your code doesn't work and is difficult to port to Python 3. Note that those who did read did it freely and easily. 
What doesn't work?
Check the \_\_del\_\_ method https://docs.python.org/3.4/reference/datamodel.html#object.__del__
Here's a screenshot of 3x3 easy: http://imgur.com/95KmYQN
ahhh never mention cakephp it can invoke PTSD in some of us
IMHO the designers of the language got it wrong with the for/else combination. If break gets called, then the else should run, which is more in line with if/else and try/except functionality.
You could also use something like [Kivy](http://kivy.org)
Why would you use that thing over emacs, vim or pycharm?
According to the docs (https://www.dlitz.net/software/pycrypto/api/current/) it looks like pycrypto has what you are looking for.
&gt; Grammar Error: Nested parens Punctuation's not grammar.
Same story here. Sometimes when we're debugging through a few stacks of Microsoft layers of libraries and integrated code, I wonder how much faster and nicer it would be to code in Python instead. I'm sad we're a MS shop. I've actually come to appreciate c# as a language. Builds on a lot of good predecessors. But I hate dealing with the MS stack, and I miss django/python. 
Pylons is no more. It became Pyramid, which is my framework of choice
You rock too!
I didn't find Laravel to be all that great but I agree with the Symfony stuff. They've done some great work dragging the php community kicking and screaming into modern development practices.
Indeed, Cordova (the Apache foundation funded version of Phonegap) is quite nice, especially when you remote debug in a Chrome browser what happens in your Android emulator… Beware though that access to native stuff (notifications for instance) is a bit sketchy and that the look and feel of an HTML5 app is far from native (see what HTML5 progress bars look like and… run !!!).
Damn! That never happened on my (limited) testing. Tell me what you did, and I'll try to fix the code. Edit: Realised the problem. It's the two cut-Ts from the bottom that are rendering again and again. Looking for the bug. Thanks for pointing it out.
Wat. I meant that other backported features allow for a single codebase. Not asyncio/trollius because of incompatible syntax.
Agreed. I love working with symfony every day and Fabien has been amazing about dragging php out of the trenches.
I looked over Kivy also, but pygame seems more intuitive.
I see the same thing on the nexus 4 - the problem seems to be related to that the screens you draw don't actually fill the phone screen, there are small black bands on the left and right. Maybe the aspect ratio is that of the full screen, but the vertical height is smaller than it expects due to the onscreen buttons, I think I've seen this problem mentioned for pgs4a somewhere before. I don't know exactly what goes wrong, but it seems to be related to subsequent drawing sometimes occupying these black bands, but not being overwritten by the correct images because the code is only properly addressing the central rectangle. Nice game though!
Absolutely. Merging.
Your mileage clearly varies from mine. I've a fair amount of experience writing web and desktop applications in Java, C# and C++ as well as in Python. While it is true that duck typing can let bugs slip in at run-time which static typing will catch at compile-time, I haven't found it to be that much of a problem in practice. I know that's just anecdotal, and no doubt it's a function of the applications I've worked with. 
I've made the transition a few years ago. Welcome, late bloomer. Now go check out Go and it will really blow your mind :)
Python syntax with type annotations is essentially pseudocode with a fairly direct mapping to the current foundations of mathematics; if the type annotations are allowed to be arbitrary computable functions implemented in, say, Ocaml or C or whatever, then suddenly you can graft a type system onto any language; in fact, the type system should follow the domain; the type system is halfway between the language and a dynamic library, but it should probably be shared at the industry-level rather than the corporation level, just as all specs are.
This. I started on Python and used virtualenv without even thinking. Now I've started on working in PHP it is a mess to get a consistent development environment. 
Yes, you should still learn it. You can never fully appreciate the good in this world until you can fully comprehend how much better than the bad it truly is.
Kivy is actually build over Pygame.
No, it isn't really. Kivy can use pygame as a backend for some things (image loading, managing the window, drawing text etc), and does so by default on some platforms, but it doesn't rely on any of them and pygame is not a dependency. What we really need is an opengl context and a window that can display it, to which pygame provides one fairly convenient cross-platform interface, but we also have (for instance) a standalone X11 window, and an RPi window backend that doesn't even need X11. The other tools are also easily swapped out with alternatives, e.g. android uses a clipboard implementation that's interacts properly with the normal android api. Actually, we're planning to move away from pygame as a main backend in the near future, to instead use sdl2 directly. This should make some stuff easier and fit better with our needs.
I'm a Magento dev by day and a PythonHugger by night, People shouldn't blame Magento for problems created due to fails in PHP. Besides, the possibilities of affecting the core (behaviour) of Magento is just plain ass awesome! I don't think they could of accomplished this without (over?)structuring in the way they did. "SLOW" I'm (glad to be) one of the core coders of the http://mageboost.nl/ project, one that uses a variety of techniques to get Magento load within 50ms. "overly complicated" Kinda, it's so structured that you sometimes "drown"/lose overview in because of the structuring, t.b.h., i.m.h.o., Android is way worse
"What the hell is a RESTful URL?" - Roy Fielding
Just saying, you'd probably have had a similar experience moving to Symfony2 or Laravel. No matter the language, moving away from some godforsaken homegrown framework is always a beautiful experience.
[Raymond Hettinger - What's awesome about Python](https://www.youtube.com/watch?v=NfngrdLv9ZQ)
50ms for the API, the checkout page and the admin? Or just frontend catalog pages? I've got no issues making Magento fly using caching (FPC or varnish) and hhvm but it's still slow out of the box. If it's 50ms API or checkout times, then you've got my attention but you're going to have to put some tech details on the table. Also, I enjoy most aspects of Magneto's architecture and think highly of it, even if it will do your head in at times. I've never written anything for Android, so can't comment on that.
You could always look at it this way too: do I ever want a job where I will have to use PHP a lot? Well, yes, if I'm desperate. But otherwise, there is enough demand for other languages I like to keep me in business. So, there's no need for me to focus on PHP anymore. I'll continue to become a better Python programmer instead. 
For a quick python alternative, install python and python-pip and then pip install one of the frameworks that includes a web server, such as web.py. 
It's just you, I think.
I would laugh so much if you'd forgotten to type the negative and accidentally gave the guy $27
&gt; You will be a better developer having learned at least a bit of both. Why so? It's not like PHP embodies novel concepts not seen in python.
Right, you can use PHP in CLI mode, but it was designed for the web, and really doesn't have much use outside of that niche. &gt; i just wish python would catch up on web already. What do you mean by that? Python has a multitude of web technologies, and is in wide use on the web. The real competitor on the web is javascript.
Really? What are the front runners?
What do you mean by "it doesn't work"?
The last line is not included in the `else` and would be executed regardless of whether or not `a &lt;= b`. The output would then be: `"e f h "`
Did you run the program to see what it is actually doing?
[Django Oscar](https://github.com/tangentlabs/django-oscar) seems to be a front runner. 
I live and grok python I love it, last Thursday, i got contacted by referral through a happy client , the problem, the guy needed to update an internal billing tool written 5 years ago. He offers a good sum so I say I can do Saturday morning to have a look and estimate. I get to his office and I log in and its in PHP. I hate php but years ago I learnt php and after looking at what he wanted, it was doable. 200 Euros for an evening of work. So yeah.. you can be a better developer by learning both. It just depends on what you mean by "better".
 &gt;&gt;&gt; a = -5 &gt;&gt;&gt; MITTEN = 12 &gt;&gt;&gt; if a &lt;= MITTEN: print("e", end=" ") print("f", end=" ") else: print("g", end=" ") print("h", end=" ") SyntaxError: invalid syntax
 &gt;&gt;&gt; a = -5 &gt;&gt;&gt; MITTEN = 12 &gt;&gt;&gt; if a &lt;= MITTEN: print("e", end=" ") print("f", end=" ") else: print("g", end=" ") print("h", end=" ") e f 
That's a different program. Have a look at the indenting of line 9.
I love the one where he talks about being an expert witness for a patent lawsuit. He showed a picture of professional wrestlers, one about to bash the other with a chair. He says "I think in this picture, python was the chair." I love his humor! 
Thanks for the help! :-) 
I believe you are getting a SyntaxError due to subtle differences between version python 2.x and 3.x. It looks like you are using the python interactive interpreter, often the first thing it will display is the version number you are running. Here is my output: ~ python Python 2.7.5 (default, Mar 9 2014, 22:15:05) [GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; If you are indeed running 2.x (2.7.5 in my example), you can use 3.x style printing by importing from the future! &gt;&gt;&gt; from __future__ import print_function I think that could help resolve the SyntaxErrors :) Here is the full output of my test: ~ python Python 2.7.5 (default, Mar 9 2014, 22:15:05) [GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; a = 1 &gt;&gt;&gt; b = 5 &gt;&gt;&gt; if a &lt;= b: ... print('e', end=' ') File "&lt;stdin&gt;", line 2 print('e', end=' ') ^ SyntaxError: invalid syntax &gt;&gt;&gt; from __future__ import print_function &gt;&gt;&gt; if a &lt;= b: ... print('e', end=' ') ... else: ... print('g', end=' ') ... e &gt;&gt;&gt;
Actually I came back to PHP for a few months a couple of years ago and it was a Symfony project. I was pleasantly surprised. I also did some Drupal work...
I have recently tried using SDL2 and C++ which works great. I think SFML also has a android port but I'm not sure. The NDK is pretty nice, but can sometimes be hard to set up your project 
What about [Avro](http://avro.apache.org/)? I thought I saw a comparison a while back where someone got a little better performance with it, and it also has some other interesting properties even if it wasn't more performant. It would be good to add for completeness if it is your blog post.
There was no code though!
The configuration it-self is hosted on github: http://github.com/ogrisel/python-appveyor-demo
If "why use x when y is so much better" was what we based our interests in, then we'd still have 64KB of memory, 28.8 kbps Internet and monitors that stuck out like a window a/c unit.
[passlib](https://pythonhosted.org/passlib/index.html) is quite full-featured and probably has what you want.
Would be great if it opened up a TCP port that I could telnet into from another console.
Try django-devserver for query counts, displaying the full queries, profiling, reporting memory usage, etc. https://pypi.python.org/pypi/django-devserver
I have been seriously contemplating getting in to Android app development which I presumed meant immersing myself in Androids flavor of Java so I find this encouraging. How easy is it to package apps and get them on Google play using pgs4a? Do you know if the api for in app purchases is accessible?
Keep in mind that I still am switching pretty my all my code bases to Python. So it is not like this flaw is a showstopper. Just an unnecessary annoyance. In comparison to other languages, python is so much smoother. Occasionally speed is an issue but the speed of development generally blows that argument out of the water. But in response. I might have a dictionary cache of users. So I would ask for that user from the cache. If it returns nothing then I go to the DB and get the user and add it to the in memory cache. I can name at least 5 languages where you can ask a dictionary (or that language's equivalent) for the matching value and it won't complain when it doesn't exist. So, jackass, why doesn't Python? select * from users where user_id=34; does't blow up if there is no user 34. I don't need to tiptoe around, I ask and it either returns a value or it doesn't, no error needed. Errors like that are for pedantic fuckwads. And if Python can't take some criticism then it will be a dead language sooner than later. Continuos improvement is the only way to survive in the computer world. To reject what is good because it doesn't fit some pedantic philosophy is suicidal. I have been in the programming world for 30 years and every time I have heard the argument that "Good programmers do this the hard way and bad programmers do the easier thing." Then I know that the "bad" programmers are going to win in the end. The C developers had this very argument with the assembly programmers who called C "bloated". 
&gt; Do you know if the api for in app purchases is accessible? I'm not sure about pgs4a, but it's certainly possible with [Kivy](http://kivy.org/#home). The billing part mainly depends on components of the java bootstrap in kivy's python-for-android project, as described in the python-for-android [documentation](https://github.com/kivy/python-for-android/blob/master/docs/source/android.rst#billing-androidbilling). It's possible that these would be transferable to the pgs4a bootstrap, if no equivalent already exists, though I don't know about the details of what's possible here.
Because Python doesn't let you be that stupid. I've seen PHP code bases that flooded Apache logs with warnings as a result of such lazy programming. It made debugging issues in those sections a nightmare because you could never tell if the person who wrote it actually expected those keys to exist or not. There are several perfectly reasonable ways to deal with this in Python, and none have those unwanted side effects because you handled it correctly to begin with. 1) user = users.get(userId, None) 2) if userId not in users: blah 3) try: user = users[userId] except KeyError: blah Edit: Reddit is ignoring my line breaks above but it should still be clear. I've already spent too much time helping a troll as it is. Edit in response to the moving target which is your comment: Python can and has taken plenty of criticism. Python 3 is proof of that. Edit again: Just because you dislike that Python makes it harder for you to shoot yourself in the foot by making you deal with objects in a sane, mature way doesn't mean that Python is going to fail. We'll be just fine if you want to go back to the nightmare that is PHP.
What were the problems with protos?
Honestly, that is one of his greatest videos in regards to presentation. But, as I understood, author wants sort of hard coded stuff, and more than that, it has to be about stdlib and not third party packages. I believe this is good for starter, thus I skipped about 3-4 videos of David, where he was awesome, but not much about python hard stuff.
x-posted there
How to d/l, the site seems not updated... Btw I love spyderlib, it is highly useful!
Packaging the app and uploading it on Google Play is very straightforward. Just follow the instructions and you'll be fine. I don't know about the in-app purchases. Probably not.
Thank you! You are a Python hero :)
Thank you! It helped! :)
Thanks for your help! It made my day :)
Does the game work despite the broken rendering?
I tried Atom a while back. It felt like a barebones-everything-you-actually-need-isn't-here-cause-it's-now-a-plugin-somebody-hasn't-made-yet version of Sublime. So I went back to Sublime and was productive again.
next version needs pandas objects viewable in the variable explorer please.
How would you do it with Kivy? I couldn't find that in the docs.
I linked it above, it's in the python-for-android [documentation](https://github.com/kivy/python-for-android/blob/master/docs/source/android.rst#billing-androidbilling) (&lt;- also a link). This is because it's not really a Kivy thing, it's made possible by python-for-android on its own, and would also be accessible to other projects using the same tools.
This is inspiring. I will make an android app. Edit: it might be good if the unmovable letters were a different color. This ran fine on my nexus 7. Some graphics were pixelated, but holy crap that's awesome that you were able to make this. I'll be spending the next few weeks learning pygame now.
Do you know if you can do it on the iPhone too? I do some freelance work in iOS development, and I'd love to use Kivy more often. If you could do this in iOS I'd switch to Kivy cold-turkey for app development.
n^o^o^o^o^o
Tabs
I think I've seen it mentioned to be possible, but I don't think it's made it into the ios build tools in the same way as for android. If you ask on the kivy mailing list or irc, you'll probably be able to get a proper answer from someone more experienced with it - I haven't used ios at all.
(0) UPDATE: So, for various reasons I have been replacing more and more of unittest, so that green depends less upon it, and I discovered that it is *unittest* that is mangling the traceback (gee, thanks unittest). I created an issue to make sure I give traceback filtering another try after they no longer get mangled by unittest. https://github.com/CleanCut/green/issues/25
issue a pull request or file an issue :) (I enjoyed the video .. don't know if it is a must-watch but it certainly was fun to watch)
It's not my blog post, I just found it informative. But I agree, adding Avro, msgpack, etc... would be nice.
Oh, Magento is probably the "best" solution out there, hands down. Except that it's still a disgrace to the programming world, along with Drupal, Wordpress and PHPBB. I have no idea how this happened, but apparently the most popular software packages in almost all the off-the-shelf web application disciplines are written in lousy PHP, and they're all a sorry mess. I've seen good code, I've seen bad code, I've seen so-so code; but this handful beats everything I've seen in terms of worst practices, cluelessness, ignorance, and anti-intellectualism. Except for one custom e-commerce system that I had the pleasure to maintain; it took 48 hours to run the daily cron job, taking the slave DB offline would have brought the entire thing to its knees, etc. etc. Guess what language that... thing... was written in.
We focus mainly on the frontend without API, so including checkout and it is meant for larger businesses. Due to company policy I can't go to much into detail but it involves: - Varnish -&gt; Modified FPC not based on the Magento one - Apache - nGinx - Zend PHP - APC - Percona MySQL (master slaves when needed) - memcached - optionally Redis - CDN europe HHVM is a work in progress atm Checkout http://demo.mageboost.nl/
Really enjoyed the Beazley video, great stuff, would love to see more in a similar vein. As an aside, what is with the fetishization of calling things "For Humans"?
This looks cool. Was wondering if someone has other suggestions on benchmarking django in terms of time for responses?
Come on, share the original code on a repo. Help us to help you. 
I'm not sure why this is getting downvoted, it is spot on. I love python and use it for everything I can, but for signal processing and indeed most engineering research that I've seen, matlab to c is the prototype-production tag team
+/u/dogetipbot 3600 doge brilliant! i like django. can't wait to try this out :) &lt;3
__^[wow ^so ^verify]__: ^/u/cshoop ^-&gt; ^/u/mrrrgn __^Ð3600 ^Dogecoins__&amp;nbsp;^__($0.975983)__ ^[[help]](http://www.reddit.com/r/dogetipbot/wiki/index)
You could probably accomplish that with netcat. 
Lots of languages, to a greater or lesser extent. First, the ability to write Android apps in Python is overstated: the infrastructure to write "normal" apps with standard Android interfaces isn't completely there (pygame and kivy are oriented towards games with custom interfaces). See [Android: The Land That Python Forgot?](http://pyvideo.org/video/2354/android-the-land-that-python-forgot) and [The Future Of Python: A Choose Your Own Adventure](http://youtu.be/d1a4Jbjc-vU?t=22m17s). As for other languages: C++ via Qt or Embarcadero's AppMethod; Object Pascal via AppMethod or Smart Mobile Studio, C# via Xamarin. HTML5/Javascript via many solutions. LiveCode uses a language based on Hypercard. To a lesser extent there is Haxe (which cross-compiles to several languages/platforms). There are probably several other solutions. 
Don't worry, it's being worked on. There's a working prototype floating around somewhere. Check out [Issue #706](https://code.google.com/p/spyderlib/issues/detail?id=706). Right now the issue is really just speed: some think that the first release should have instant folding, while I'd be OK with it finding fold locations every 2000ms just like the PEP8 checking (at least for the 1st release: save the improvements for later). /shrug
Performance comparisons should include charts
Passlib I guess?
So I installed PyQt and Spyder, nothing on my desktop, how do I run this?
I just want to note, that when Nick says "every core developer of CPython", he's using a definition I'm not familiar with. Since, myself, Armin Ronacher, and several other people who are core developers (at least, I think we are...) don't agree with that statement.
It's already merged and will be released in 2.3.1 :)
Someone is already working on it. It'll be there in 2.4.
Any possibility of having vim-style navigation? I love Spyder but this is the main thing keeping me from using it all the time. 
Merged support works for DataFrames and TimeSeries, and you not only can browse but also modify them by double clicking on any value.
We have to upload the Windows installers yet (World Cup fever prevented me to do it :-).
&gt; The views expressed below are my own. While many of them are shared by other core developers, and I use “we” in several places where I believe that to be the case, I don’t claim to be writing on the behalf of every core developer on every point. Several core developers (including Guido) have reviewed and offered comments on this document at various points in time, and aside from Guido noting that I was incorrect about his initial motivation in creating Python 3, none of them has raised any objections to specific points or the document in general. To quote a relevant disclaimer.
I'm not referring to his general usage of the term "we". I'm referring to his specific comment that "every core developer of CPython".
cx_Freeze supports Python 3, but last time I checked, pyinstaller and py2exe don't.
Just another reason to fund PyPy more as the future of long running Python Applications.
What do you mean by navigation? We plan to add vim keybindings later in the year but I don't know if that's going to be enough (never used vim).
That was a very frustrating article to read because it appears his main excuse for not removing the GIL is that "Python programmers should not want to thread in python." I think the fact that python developers are willing to go to great lengths to get threading in their applications (i.e. numba, writing C or Cython) demonstrates the lengths they are willing to go to in order to escape the GIL in their applications. This obviously isn't an easy issue to address, but the whole section about why it doesn't bother "the whole development team" reads like a poor excuse.
That is awesome, thank you. Most common, I think, are: * hjkl to move like cursors * : to select a line * ^ and $ to move to the start or end of a line * O to add a line above * v for text selection * d, y, c, s, r and tilde for text manipulation * p at least for pasting * f, F, t, T to navigate within a given line * ability to add the number of times you want to do an operation * search and replace * markers for position (m and ') * I think macros (q and @) are out of the question? Probably some things I missed too. 
Not a single word about what it **IS**, or why I should care.
Were you, Armin Ronacher and any other Python 3 detractors core developers at the time Python 3 was mooted? That's surely the relevant point, since the sentence &gt; and every core developer of CPython, have not only been persuaded that the disruption posed by the Python 3 transition is worth the effort, but ... seems to me to refer to the time when the idea of Python 3 (then called Python 3000) was proposed, and the various pros and cons discussed, and a roadmap for development worked out. Does the definition of "every" make sense with this qualification? Obviously, since that time, new core developers have joined the team, some of whom might have different views about Python 3 from the consensus that prevailed when it was decided to go ahead with Python 3. Even if not *every single* core developer was sanguine about Python 3 at that time, the consensus of Python-dev clearly was in favour of the new version, after taking into account the discussions (pros and cons presented) that happened at the time. Let's remember, these are the same people who have shepherded Python through the various 2.x versions to the very good thing that 2.7 is today.
[Portable python](http://portablepython.com/) might be helpfull.
Latent Dirichlet Allocation is a model used in computational linguistics that allows you to classify documents by topic. The problem with LDA is that you need to specify beforehand how many topics there are. Sometimes this is a given, but sometimes you just don't know how many topics you need in your model. This blog shows a Python implementation of an method to determine the natural number of topics. Some further information/background reading: [Wikipedia on Distributional Semantics](http://en.wikipedia.org/wiki/Distributional_semantics) says: &gt; Distributional semantics is a research area that develops and studies theories and methods for quantifying and categorizing semantic similarities between linguistic items based on their distributional properties in large samples of language data. The basic idea of distributional semantics can be summed up in the so-called Distributional hypothesis: linguistic items with similar distributions have similar meanings. [Wikipedia on Topic Models](http://en.wikipedia.org/wiki/Topic_model) says: &gt; In machine learning and natural language processing, a topic model is a type of statistical model for discovering the abstract "topics" that occur in a collection of documents. Intuitively, given that a document is about a particular topic, one would expect particular words to appear in the document more or less frequently: "dog" and "bone" will appear more often in documents about dogs, "cat" and "meow" will appear in documents about cats, and "the" and "is" will appear equally in both. A document typically concerns multiple topics in different proportions; thus, in a document that is 10% about cats and 90% about dogs, there would probably be about 9 times more dog words than cat words. A topic model captures this intuition in a mathematical framework, which allows examining a set of documents and discovering, based on the statistics of the words in each, what the topics might be and what each document's balance of topics is. &gt; &gt; Although topic models were first described and implemented in the context of natural language processing, they have applications in other fields such as bioinformatics. 
Hello, we are the benchmark developers, here are some answers : ### adding additional frameworks This is on the roadmap, the code has been structured to allow this. We welcome help on this as we are not familiar with all of the possible options. ### protos problems When running the benchmark we have : terminate called after throwing an instance of 'std:bad_alloc' In pre-production things are less clear, but what is reported boils down to segmentation fault
I'd also like to butt in and say even moreso a reason to fund toward a PyPy 3.x stable release, so it can also improve the latest version of the language - it'd be great to see PyPy applying its full efforts towards the newest form of the language as well!
Yeah, is it really too much to ask to at least have a short description on what something is when announcing something about it?
The biggest *actual* bugbear in this area I see with python is that it can't keep itself thread-local; only one python-per-process can safely operate. This isn't aimed at the purpose of trying to get thread-level parallelism (almost always the red herring people want in this circumstance), but simply being able to *embed* python within other things (enabling python scripting within other applications sure is cool when possible) on a per-thread level rather than per-process.
I'll try to sketch here what I have used. Catch the idea, for if you just copy the code it won't work, because I will paste parts of my own. You need **subprocess** and **numpy**. You read the video with subprocess: cmd = ([FFMPEG_BIN]+ '-i' + self.filename + ['-loglevel', 'error', '-f', 'image2pipe', "-pix_fmt", self.pix_fmt, '-vcodec', 'rawvideo', '-']) self.proc = sp.Popen(cmd, bufsize= self.bufsize, stdout=sp.PIPE, stderr=sp.PIPE) where FFMPEG_BIN = "ffmpeg.exe" # on Windows FFMPEG_BIN = "ffmpeg" # on Linux This code above also depends on the pixel format. I was working with grayscale back at the time. Then you can read frames with something like: def read_frame(self): w, h = self.size nbytes= self.depth*w*h try: # Normally, the reader should not read after the last frame. # if it does, raise an error. s = self.proc.stdout.read(nbytes) assert len(s) == nbytes if self.pix_fmt == 'gray': result = np.fromstring(s, dtype='uint8') else: result = np.fromstring(s, dtype='uint16') result = result.byteswap().reshape((h, w)) # save this to a file for debugging with open('lastframe_raw.txt', 'w') as f: print &gt;&gt; f, s np.savetxt('lastframe_converted.txt', result, fmt='%u') self.proc.stdout.flush() By the end of this, you will have your frame pixel values in a numpy array. I got the idea for this code somewhere else in the internet. I'm sure you can find it if you search for it. I also had something to create PIL images: def render_current_frame(self): """ Renders a frame as a PIL image """ print 'Rendering frame...' frame = self.lastread img_size = tuple(self.size) img = Image.new("RGB", img_size) for i in range(img_size[0]): for j in range(img_size[1]): opv = frame[j][i] # old pixel value if self.pix_fmt == 'gray': newpixel = (opv, opv, opv) else: # print self.cm.m, opv newpixel = self.cm.map(opv) img.putpixel((i, j), newpixel) return img After you have this PIL object it is very easy to proceed. Also take in mind that maybe this is not the best way to implement this kind of stuff. If someone knows how to improve this, please do tell. I hope this can inspire you.
That's EXTREMELY helpful, thanks mate! Some problems I was having were that numpy would not install, and imagejpeg was extremely complicated to install. I'm going to steal all your codes and see if I can't get it working though. Thanks again mate!
Basicly learn the diffrent between the syntax, you can try to use a cookbook http://shop.oreilly.com/product/0636920027072.do
Or even just work through some of the projects you find online. Try and port what you have already written to 3.x
why don't you use your newly acquired skill of python and try out some coding. you could solve some problems from 'Project Euler'. There is a wide variety of problems there which will help you a lot. 
you can count on the latest edition of Learning Python (5th edition) by Mark Lutz. That's an O'Reilly book and a damn good one at that. This book covers both versions 3 &amp; 2. Also, wouldn't it be awesome that you crack on some code while you learn and evolve. Helps your coding style. 
I think you're overthinking this. To a beginner coder, the differences are *really* not that important, it's largely a few small syntax things. I found [this site](http://python3porting.com/differences.html) to be a fairly good quick overview of the major differences. If you don't understand or recognise any of there things, don't worry about it, it's not even a problem because you don't have to learn the difference if you didn't know the python2 way. Along with that, I found it most useful to simply try and run some of my projects under python3. This quickly turns up the syntax or semantic differences that actually affected me, stuff like print -&gt; print() or maps becoming iterators. &gt; I want to learn Python 3 properly first before solving problems It also bears saying that arguably the best way to learn programming is to use it to solve problems - just do things with it! I think the way you present it is seeing differences where none really exist.
For a complete beginner like me, is there any real difference except for print requiring parentheses now? Thanks!
"Python shouldn’t fail just because a user is attempting to run it from their home directory and their name can’t be represented using the latin-1 alphabet" Like this? ~/tmp/ä$ LANG=C python3 Python 3.2.3 (default, Feb 27 2014, 21:31:18) [GCC 4.6.3] on linux2 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import os &gt;&gt;&gt; print(os.getcwd()) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; UnicodeEncodeError: 'ascii' codec can't encode characters in position 21-22: ordinal not in range(128) (yes, that ä actually fits in the latin-1 alphabet, but that's irrelevant for this discussion -- you would get the same result with β's with a latin-1 locale) The entire problem is that stuff *does not* break at the boundaries. Instead, we still have 'strings that magically break when you print them' -- in the case above, os.getcwd() returns 'surrogate pairs': &gt;&gt;&gt; &gt;&gt;&gt; os.getcwd() '/home/username/tmp/\udcc3\udca4' which means that things *still don't work*. 
I agree that Powershell is probably the better option here. Another possible option, if OP does have domain administrator rights, is to use remote information gathering tools like WMI (https://pypi.python.org/pypi/WMI/), and calling a Python version of psexec (https://code.google.com/p/impacket/source/browse/trunk/examples/psexec.py?r=604).
Cap'n Proto benchmarking would be nice too.
Best to comment on Nick's page - I don't think he follows this discussion.
Sorry for that, you're totally right. This is our official description: Spyder is a free, open-source (MIT license) interactive development environment for the Python language with advanced editing, interactive testing, debugging and introspection features. Originally designed to provide MATLAB-like features (integrated help, interactive console, variable explorer with GUI-based editors for dictionaries, NumPy arrays, ...), it is strongly oriented towards scientific computing and software development. 
&gt; Let's remember, these are the same people who have shepherded Python through the various 2.x versions to the very good thing that 2.7 is today. Importantly, minus Tim Peters. I can't help but think that if Uncle Timmy were around during its formative years that Python 3 would be a lot different. https://mail.python.org/pipermail/python-list/1999-June/001951.html
Actually I was unaware how few differences there really are- until I searched it and found that the only difference that really affects me is the print change!
`raw_input` is just `input` in Python 3. Besides that and `print()` being a function, that's about all you need to know for now.
Check out these resources - * http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html * https://docs.python.org/3/whatsnew/3.0.html
I second the solution of u/Kaxitaz, but just in case it's useful, [MoviePy](http://zulko.github.io/moviepy/) also uses ffmpeg to convert your gif into numpy arrays (the core code looks 90% like the one given by Kaxitaz, so if you can use one, you can use the other). For instance: from moviepy.editor import VideoFileClip clip = VideoFileClip('myanimation.gif') # can be gif or movie for frame in clip.iter_frames(): # now frame is a numpy array, do wathever you want newframe = some_transformation(frame) # etc. You can also output jpeg, still using ffmpeg, but that requires that you stay with numpy images (you can use PIL, but you will need to retransform the resulting frames to numpy arrays before saving them as JPEG). In the following example, I load a gif, I flip each frame vertically, and write each of them as an JPEG image: from moviepy.editor import VideoFileClip vertical_flip = lambda frame: frame[::-1] # 'frame' is a numpy array clip = VideoFileClip("mygif.gif") # transform the clip and write every frame as a jpeg clip.fl_image(vertical_flip).to_images_sequence("images%03d.jpeg")
I got really interested in Python about a year or so ago after being PHP heavy for many many years. Even though you can find PHP on any host out there, I still think Python is prettier and more functional language.
Can someone explain to me why base64.b64encode is bytes-&gt;bytes in Python 3? Isn't base64 a binary-to-text encoding? Shouldn't be bytes-&gt;str? [The official doc for 3.4 says](https://docs.python.org/3.4/library/base64.html?highlight=base64#base64.b64encode): &gt; base64.b64encode(s, altchars=None) &gt; Encode a byte string using Base64. &gt; s is **the string to encode**. Optional altchars must be a string of at least length 2 (additional characters are ignored) which specifies an alternative alphabet for the + and / characters. This allows an application to e.g. generate URL or filesystem safe Base64 strings. The default is None, for which the standard Base64 alphabet is used. &gt; The encoded byte string is returned. While the help(base64.b64encode) for 3.4 says: &gt; b64encode(s, altchars=None) &gt; Encode a byte string using Base64. &gt; s is **the byte string to encode**. Optional altchars must be a byte &gt; string of length 2 which specifies an alternative alphabet for the &gt; '+' and '/' characters. This allows an application to &gt; e.g. generate url or filesystem safe Base64 strings. &gt; The encoded byte string is returned. At some point in Python 3, you could also use base64.b64encode with str-&gt;str but it seems like you cannot anymore. This really feels like Python 3 broke it and it did not replace it with something better.
Time is a limited resource. Look up opportunity cost. Everything has an opportunity cost. Maybe he's already learning as much as he can. So he'll need to give up something to learn PHP.
Sounds just right to me. It's encoding 8 bit strings to 6 bit strings, how should it deal with Unicode stuff I don't even know.
Right on mate, not criticizing. Just saw it being done differently and my first thought is always, "why?". For all I know there could have been a performance advantage that way, or it could be so you could pass the variable to other sections of code where the function would have been out of scope. Just asking because I'm always curious.
I have used py2exe extensively for Python 2 without problems since late 2012. I have distributed the compiled .exe to several hundred Windows users without a problem. Most of them have no idea that a Python run-time is installed. I have not used cx_Freeze so I cannot comment on it. I also have not used py2exe with Python 3 so I cannot comment on that either, although it is available.
Thanks for your answer :)
This helps a lot, I was having a lot of trouble installing this shitty jpeg library. +1 to you!
Flask, not Django.
This makes me *very* happy to hear
Maybe you could specify more what you mean by "websites that receive a very large amount of traffic." Being quantitative about it here seems critical, since (I'd guess) that when people don't know a ballpark max number of db reads/writes per time, they err on the side of eschewing SQLite for use with *any* web sites.
Some things seemed to work when I tried using Alembic with SQLite for migrations, but there were enough quirks that I ended up just testing migrations with a local copy of the live PostgreSQL database.
Here's a quote from SQLite's docs: &gt; SQLite usually will work great as the database engine for low to medium traffic websites (which is to say, 99.9% of all websites). The amount of web traffic that SQLite can handle depends, of course, on how heavily the website uses its database. Generally speaking, any site that gets fewer than 100K hits/day should work fine with SQLite. The 100K hits/day figure is a conservative estimate, not a hard upper bound. SQLite has been demonstrated to work with 10 times that amount of traffic. &gt; &gt; SQLite will normally work fine as the database backend to a website. But if you website is so busy that you are thinking of splitting the database component off onto a separate machine, then you should definitely consider using an enterprise-class client/server database engine instead of SQLite. I've updated the blog post with this data as well. Thanks for asking!
Thanks for this. I came here specifically to ask whether or not SQLite3 could support my project and it looks like it can. Your blog post saved me the effort of asking!
Awesome! Glad to help, /u/Dicknosed_Shitlicker (lol)
Thank you. I appreciate the response. Pure Python is a plus. Makes things really easy, and I like that it supports the with statement, too. 
Always nice to see a local Dev on here. A girl too, double cool.
what’s wrong with you system? $ mkdir ẞ $ cd ẞ $ LANG=C python3 Python 3.4.1 (default, May 19 2014, 17:23:49) [GCC 4.9.0 20140507 (prerelease)] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import os &gt;&gt;&gt; print(os.getcwd()) /home/phil/ẞ
Are you kidding me? 3.2 is what Ubuntu 12.04 LTS offers. Besides, Python 3.4 does exactly the same: ~/tmp/ä$ LANG=C python3.4 Python 3.4.1 (default, May 25 2014, 22:33:14) [GCC 4.6.3] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import os &gt;&gt;&gt; print(os.getcwd()) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; UnicodeEncodeError: 'ascii' codec can't encode characters in position 21-22: ordinal not in range(128)
Well, if it's not even consistent between systems, my point only becomes stronger. Have you set PYTHONIOENCODING, by any chance?
I wish so much there was an SQLite equivalent that did LDAP.
&gt; but I forget if it's built in or if an additional library is required. http://alembic.readthedocs.org/en/latest/tutorial.html 
&gt; Are you kidding me? 3.2 is what Ubuntu 12.04 LTS offers. Nay; Python 3.2's string support on narrow builds was broken. Since I don't know your setup I couldn't be sure that it wasn't that. --- My guess is your terminal output encoding is ASCII (or just screwy) and the `os` call has nothing to do with it. Try just `print(chr(228))`. *EDIT:* This is wrong. [See the others.](http://www.reddit.com/r/Python/comments/2amhy1/nick_coghlans_qa_but_name_says_python_3_was_a/cixwbwv)
solid article and interesting read. thank you.
Understandable, but then I think the sensible heuristic of "When in doubt, go with a 'real' database" will be at play in people's minds. I'm pretty sure D. Richard Hipp himself has given numbers...the number 100,000 hits a day seems to be in my head, though I have no idea if that is right... **EDIT:** Whoops, didn't see the updated other response.
I wish the "the GIL isn't a problem because our users obviously have no problem with it" wasn't so popular with the core devs. Just because Thinking that everything is dandy just because the `multiplrocessing` package exists is wrong. I hate, despise and loathe the multiprocessing package. Unfortunately it's the only thing we have. But I'd **gladly** give 10% single-threaded performance just to have a properly running threading module. Several threads co-operating on the same datastructure is ~~a terrible pain~~ impossible in Python. The fact that the core devs don't think that it's an issue and that the complainers are simply beginners who haven't yet grasped multiprocessing is disappointing.
&gt; I don't like how regexes work in Python either. They feel bloated and clunky to me. What differences are you talking about?
Link for the lazy: http://sqlite.org/howtocorrupt.html SQLite can survive OS shutdowns and even power failures, I would call that pretty reliable. I don't know if Postgresql has a similar document, but I imagine there are similar scenarios that would cause it to become corrupted as well.
how does cap'n proto compare to google native protobufs ? I asked this question a while ago in /r/python and no one seemed very sure.
I regularly corrupt my SQLite3 database when using like 10 Gunicorn workers and 10 concurrent writes. Not 100% reliable, but 1 out of 5 `ab` corrupts the database (I'm using transactions, both IMMEDIATE and EXCLUSIVE corrupt the db).
Can't check right now, but not knowingly, no.
In your other comment you mentioned you were using btrfs. I put together a little script and was able to run 200 processes, all INSERTing rows into the same SQLite database without issue. https://gist.github.com/coleifer/ec7535128b550b96beda
Cython is another option. 
I really enjoy reading your site, but the white text on dark background is killer on the eyes.
I'm a Sublime fan, but Atom has a heck of a lot more potential than people tend to give it. Imagine IPython, LaTeX and all, *inside* your editor. The DOM makes that possible.
I think /u/Noiprox means that there is no such thing as a deterministic destructor, as is commonly meant be "destructor" in other languages. The advice for `__del__` is just *don't do it*. Put clean up in it only as a last resort or a backup plan. Primarily, it's because it's nondeterministic.
Sorry, I posted in the wrong sub. Indeed, your snippet is working correctly. But I am still able to reproduce data corruption for a personal project with concurrent writes. What should I do about this? Ignore this issue, because it's just a random thing happening for a certain moon phase?
I'm a dude, but um. Thanks.
Yeah, I realized that after I posted it and checked the app.py on git. So much for doing a quick x-post from HN before jumping on a plane. Haha.
Which is great, until devs start reading articles like this and just throw sqlite at a problem that doesn't require it. And then all of a sudden you have sqlite databases running on NFS because your users who have no reason to know or need to know about data back ends, file systems or other external issues get crushed by your decision to use this tech. Edit: and you can corrupt a database even using a single process on a single host over NFS. Thou I've seen it happen with a single host on local disk too. Its a great tool for scaffolding and testing but when I lose critical services that don't need a database back end but decided to use sqlite for something they could do with a flat file its bordering on absurd.
Just remember that BerkeleyDB is released under AGPLv3. Unless your website is opensource(AGPLv3), you cannot legally use it.
Everyone who wants the GIL to go away only ever focuses on the down side of the GIL in it's inability to scale multiple cores but what about the positive benefits. Some many types of bugs that are normally associated with multi threaded programming just don't normally occur when writing Python code. That's a great thing we should want to keep but unfortunately most proposals to deal will the GIL to improve scaleability would kill this benefit and we would lose one of Python's greatest strengths IMO. The only one proposal that I see that gives us both benefits is the STM work that is currently being developed under the PyPy project. Lets hope this project is able to meet its intended goals and we will finally have a better alternative to the GIL. At least PyPy would have an alternative and maybe someone might be willing to port it over to CPython. Although I have a feeling it would be a tremendous effort to do so.
Built a CMS-based site years ago using SQLite as the development backend, and shoved into production under deadline. Wouldn't recommend that, but it worked beautifully for several years.
Switching dbs can be total ass. Though since this is /r/python, I guess I can say that Django and SQLite make it relatively easy. Well, assuming you're switching to another solid db, like Postgres. 
I just tested it out with font color at `#CCC` instead of `#FFF`, way less eyemurder.
I'm really confused, I have used sqlite3 over nfs and never ran into any issue.
I'm not sure how much this will help but here was my experience with something similar. I work at a large engineering company and I'm currently "in charge" of our Python installations. However, one tricky this is I do not have admin access to either my PC or other engineers PC's due to our tight security. A easier/central way to do this I found is to host a Windows build of Python 3 in a network drive you/your clients have access to. They will be able to run a Windows version of python straight from that location. Let me know if you have more questions about it. I tried all sorts of methods to create standalone programs, I hated them all. They were overly complicated and never necessary for me. 
I've run it for 3 years on one service and had no issues other than tooling issues(a trac environment), specifically we had a mail loop in our ticket system that made the sqlite db so huge we could not recover it, because the tools were incapable of opening it, without reverting to the snapshot from the previous day. On other systems we havn't been so lucky. Users running IPython notebooks out of their lab spaces that close them out and find that the notebook won't open when they return to it in another session for instance. Our mumble install, used for low latency multi user recordable audio sessions, died during a network outage. In these cases the database comes up and [reports itself as locked](https://www.sqlite.org/cvstrac/wiki?p=DatabaseIsLocked) even thou there are no processes using the database. There's no real way to recover it either, you can attempt to do so by issuing a backup command and then swapping that file in for the original but in both cases that didn't work for us. [ In the case of IPython we basically have to tell users 'o well'](https://github.com/ipython/ipython/issues/2426/) and in the mumble install we moved the new database (with it's half dozen settings) to the local disk and instituted a cron job to back it up instead of relying on our NAS that's normally perfectly capable of handling everything we throw at it. This isn't to say you won't have corruption issues with the Postgres's and MySQL's of the world but they have very different mechanisms for handling data recovery and backup. In both cases you can backup your data and then use a suite of recovery tools to roll your data back to a safe state so instead of losing everything you've maybe lost the last few transactions. I wouldn't argue that you should use either of these to back end say... IPython. But I don't agree that SQLite was a great solution for a history file either. I'm not sure how I'd manage it but something less environment specific would be preferable. note: that ipython ticket is not mine, but represents the problem you can run into. edit: I was actually a bit to hasty saying we've never had any problems with trac on nfs, we've had database corruptions once or twice but the .db file lived on an NFS mount that snapshots so we rolled the file back to a previous copy. Everything worked fine after that but unfortunately you lose any data generated in between the snapshot and present time.
In my experience, it breaks when trying to drop a table, since in SQLite it's an ALTER instead of a DROP. Edit: DROP COLUMN, not DROP TABLE
Actually, another really awesome feature of Python are the PEPs. Courtesy of these, we *can* know what alternative futures would have looked like! [The Python That Wasn't](http://pyvideo.org/video/406/pycon-2011--the-python-that-wasn--39-t)
&gt;Column data-types are not enforced, e.g. you can store text in an integer column. &gt;[...] &gt;Transactions are atomic, **consistent**, isolated and durable (ACID). Type safety is a basic element of consistency. This is a contradiction in terms.
&gt;I hate, despise and loathe the multiprocessing package. It works just like the threading module, so you must really loathe Python! &gt;Unfortunately it's the only thing we have. Other languages churn out many thousands of lines of code to try to get what we have. This is like complaining that unfortunately the only car we have is a Rolls Royce. &gt;But I'd gladly give 10% single-threaded performance just to have a properly &gt;running threading module. And what specifically would this do for you? &gt;Several threads co-operating on the same datastructure is a terrible pain &gt;impossible in Python. It's also a terrible pain to develop properly and debug in any other language as it's fraught with potential race conditions, corruption, etc. that can take down the main program. &gt;The fact that the core devs don't think that it's an issue and that the complainers &gt;are simply beginners who haven't yet grasped multiprocessing is disappointing. I'm not so sure. I've asked bloggers showing off parallel code (in languages other than Python) why they were using threads instead of processes - for instance, with a Mandelbrot set program. They sputter like it's the most outrageous suggestion they ever heard. They reply with something along the lines of processes require message passing which is just for distributed computing (!!!). Just as I'm sure we've all seen a Java programmer new to Python start writing (too many) classes right away, I think it's also true that lots of Python programmers were trained to think in terms of threads and locks and semaphores. Just like the Java programmers, they have to realize that there's a better yet simpler and higher level way to do things with Python. 
Really? http://en.wikipedia.org/wiki/Consistency_(database_systems)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Consistency (database systems)**](https://en.wikipedia.org/wiki/Consistency%20(database%20systems\)): [](#sfw) --- &gt;In [database](https://en.wikipedia.org/wiki/Database) systems, a __consistent__ [transaction](https://en.wikipedia.org/wiki/Database_transaction) is one that starts with a database in a consistent state and ends with the database in a consistent state. Consistent state means that there is no violation of any [integrity constraints](https://en.wikipedia.org/wiki/Integrity_constraints). Consistency may temporarily be violated during execution of the transaction, but must be corrected before changes are permanently committed to the database. If the transaction would leave the database in an illegal state, it is aborted and an [error](https://en.wikipedia.org/wiki/Error) is reported. &gt; --- ^Interesting: [^ACID](https://en.wikipedia.org/wiki/ACID) ^| [^Database](https://en.wikipedia.org/wiki/Database) ^| [^Database ^transaction](https://en.wikipedia.org/wiki/Database_transaction) ^| [^Consistency ^model](https://en.wikipedia.org/wiki/Consistency_model) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cixktbr) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cixktbr)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
It will be easier for people to help you if you're able to post an exact description of the error that you're getting.
Yes. Column type constraints are constraints like any other.
Good point!
&gt; tl;dr: Trying to turn a python project in to a simple .exe and having an endless amount of headaches. https://pypi.python.org/pypi/esky : &gt; esky: keep frozen apps fresh &gt; &gt; Esky is an auto-update framework for frozen Python applications. It provides a simple API through which apps can find, fetch and install updates, and a bootstrapping mechanism that keeps the app safe in the face of failed or partial updates. &gt; &gt; Esky is currently capable of freezing apps with py2exe, py2app, cxfreeze and bbfreeze. Adding support for other freezer programs should be straightforward; patches will be gratefully accepted. 
"Python Packaging User Guide" https://packaging.python.org/en/latest/ https://github.com/pypa/python-packaging-user-guide/blob/master/source/deployment.rst#os-packaging--installers
The docs say it's relatively easy to dev in SQLITE3 then migrate to Postgres. I haven't done it myself (mostly smaller projects that stay in sqlite), but is this not accurate, or just an oversimplification?
If you're not using python for scientific development on windows, then you probably have no reason to care.
&gt; Is deploying Python really this frustrating? Yes it is, because PSF all cares about is how to break everyone's `print` and funding scientific computational tools. The distribution or performance problems? LOL NOT PSF's PROBLEM. Core developers once tried to re-invent a wheel called disutils2, aaaaaaannnnnnnnnd it failed.
That is really stupid. Ugh.
Things I dislike about sqlite: 1. Can not rename column, in a fast iteration project, renaming schema is quite common 2. No easy way to upsert data. There should be an easy equivalent to MySQL's "INSERT ... ON DUPLICATE KEY UPDATE". If you use `REPLACE` you got PK changed.
Who ever first wrote the `range(128)` limitation is totally retarded. Why not just dumb copy `range(256)` byte streams if the encoding is unknown? 
GIL is not really a problem, GIL does not scale to multi-core is a problem. Beside GIL is not the worst problem in Python. The worst problem in python is a basic data type `str()` breaks according to a shell environment. That's totally bullshit! 
It's accurate depending on which functions of the DB you're using. If you're not writing any SQL that wouldn't run on both Postgres and SQLite, there shouldn't be a problem. 
The reason i was going for python as opposed to power-shell is because we are also using python for other scripting tasks. The more we practice the better we get. sadly i do not have domain admin rights, else i would've pushed python to all the PCs. I'll see if this network share thing works else, i will use 2.X instead.
Yes, cx_Freeze can be really frustrating sometimes. :/ What is the error specifically, I might be able to help
LDP is kinda close. https://ldb.samba.org/
Thank so much, I'll try out notepad++ and see how far I can get.
Take a look at [Nuitka](http://nuitka.net/), I recently tried it with a Python application which uses the win32api, worked perfectly, building it was as easy as `nuitka app.py` resulting in `app.exe`. But yes, deploying Python is a pain. I still haven't found a perfect solution for it. I'm used to Node.js's distribution system, which is heaven compared to Python's.
I have packaged a wxPython 2.8/Python 2.5 program with py2exe, as assisted nicely by the very neat GUI2Exe tool. I just use Python 2.5 (yep) for some lessened hassles, but you can do 2.7. I sent the .exe to end users and there were no problems whatsoever. No shame in going to 2.7 for this; you can probably make the switch within a half hour and be done with it unless you have a lot of 3rd party stuff to reinstall. I'm not even sure how ready wxPython is for using Python 3...AFAIK you can only do that with the developmental branch, Phoenix, and maybe that's likely to present some issues... I'd stick with the 2.9 branch, probably, unless you like helping out to patch these issues :D Not sure what you mean by a "language native way" (in that Python is an interpreted language, not a compiled one), but Nuitka compiles Python to C++; currently it is not quite robust with wxPython but they are working on it as of earlier today (!) and the dev behind the project seems so active, it's great. ShedSkin compiles a restrict set of Python. Etc. 
nothing
Well, you can either use something that doesn't require you to license your website under the same license as any projects used, or make your website AGPLv3.
That's pretty eye opening. By default I (and probably most others) will think "This is a good toy, but not for real sites" specifically thinking about performance. But realistically, sqlite could probably power most smaller sites I've worked on just fine. There's other things like data-type enforment etc, but still... neat to think of it like a "real" sql backend, not just a small plaything
Alternatively, you could ask the author very nicely if they would consider switching to a different license. It's not always going to work but it's worth a try.
Not to mention sqlite files make it easy to back things up for small sites. Very portable.
You can rename a column, but it's not a simple single step operation ;)
write code of course! you can start off by trying out some coding challenges from online exercises from the list mentioned in this sub-reddit. as you write more code and refactor them, you will grow in confidence and figure out better ways to optimize your code. 
&gt; because PSF all cares about is how to break everyone's print and funding scientific computational tools. Sometimes it does feel that way... but, 1. They had good reasons for most of the most irksome changes 2. They are human: i.e they dont know it all, and like the rest of us mortals, learn as they go along (http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html#but-name-says-python-3-was-a-waste-of-time-didn-t-help-made-things-worse) 3. They are doing this (for most parts) as volunteers 4. You can chip in and help. Be like Armin(mitsuko) very vocal about the pain caused by some of the backwardly incompatible changes in Python3, yet all his libraries (Flask, Jinja, Werkzeug) support Python 3 
For comparison: I'm running python 3.4.1 as well, and I can reproduce bramble's problem. 16 /tmp: mkdir 'ä' 16 /tmp: cd 'ä' 16 ä: LANG=C python3 Python 3.4.1 (default, May 19 2014, 17:23:49) [GCC 4.9.0 20140507 (prerelease)] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import os &gt;&gt;&gt; os.getcwd() '/tmp/\udcc3\udca4' &gt;&gt;&gt; print(os.getcwd()) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; UnicodeEncodeError: 'ascii' codec can't encode characters in position 5-6: ordinal not in range(128) And I cannot reproduce your success: 16 /tmp: mkdir ẞ 16 /tmp: cd ẞ 16 ẞ: LANG=C python3 Python 3.4.1 (default, May 19 2014, 17:23:49) [GCC 4.9.0 20140507 (prerelease)] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import os &gt;&gt;&gt; os.getcwd() '/tmp/\udce1\udcba\udc9e' &gt;&gt;&gt; print(os.getcwd()) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; UnicodeEncodeError: 'ascii' codec can't encode characters in position 5-7: ordinal not in range(128) Finally, I can verify that PYTHONIOENCODING is not set: 1 16 ẞ: env |grep PY PYTHONPATH=/home/myusername/lib PYTHONDOCS=/usr/share/doc/python/html/library RENPY_BASE=/usr/share/renpy/ 
.. Because it violates expectations (that what you are getting is actually made up of valid characters) and would make Py3's encoding handling as confusing as Py2's is.
Which is why I am using it for now. But if they have vim key bindings then they have to be modal by definition, right? 
It looks to me like the call to xero.invoices.put should raise a XeroBadRequest exception and you should be catching it. Can you explain what you mean by this: &gt;If I put the exception code into my python file it doesnt work(obviously) due to varying reasons, but I really dont see the point in trying to investigate that and solve that, and if I put even a simple exception catch on my call of the function it doesn't even publish the info in the module exception call. What you're calling the "exception catching code" doesn't catch anything, which you can tell by its complete lack of the `catch` keyword. It's just a parsing class that turns a HTTP 400 response into a nicely formatted exception.
&gt; confusing as Py2's Py2's range(128) is exactly what makes it confusing.
Don't forget to recreate all the indexes too ;) Yes, that's the method, I was just being facetious, sorry.
Please send me some links.
thank you sir
Yes, exactly. Either a non-ASCII cwd should raise an exception when LANG=C on startup (although it's debatable if file names are 'decodable' on unix at all, as Armin Ronacher pointed out), or the print function should happily accept the surrogates.
Understood. Thanks. 
It should possible to get a speed up for xeon-phi if you compile numpy and scipy to use a BLAS/LAPACK implementation that leverages it, typically Intel's own MKL. However not all scikit-learn models will benefit from it. Typically the decision trees based models such as Random Forests and Gradient Boosting models do not use BLAS.
Out of curiosity @usernaamee, which model did you try to recode in C++?
Isn't scikit-learn written in / with cython? Which means it is python translated in C? 
The contributions of Python to scientific computing is big, IPython is huge, and Jupyter would be magnificent. Their power is not only in collaboration between people, but between different fields. For example, I am a scientist working on brain imaging, and the amount of codes coming from astronomy to help me analyse brain imaging data is unprecedented. 
I'd rather learn German from a book before buying a plane ticket to Germany...
+1 for using py2exe with 2.7, I used it to package a Tkinter GUI application and it was pretty straightforward, the only problem I had was that in one of the modes (of where the stuff goes) it tried to put tcl/tk dlls into the "library.zip", which had an obvious fix.
Some models yes (typically decision trees). Other models are wrappers for embedded c++ code such as libsvm and liblinear. Most other models are written pure Python with numpy / scipy calls that often delegate the critical part for optimized linear algebra libraries such as BLAS / LAPACK that are often written in fortran or C with intrisics and / or inline assembly. As always before trying to optimize some code for performance you should start by profiling the existing code on the data you are interested in. In Python you can use the builtin cProfiler module and the [line_profiler](http://pythonhosted.org/line_profiler/) tool.
Not for SQLite. Not enforcing column type constraints is a well documented behaviour of SQLite and can not be considered an error. It still promises consistency, just not on column types.
SQLite is not at fault here. The behaviour is well documented. The devs that implemented SQLite over nfs should be informed that they have chosen an architecture that is known to break and get their shit together.
I worded it badly, I should have said that it was handling? The exception, as in it was formatting it was grabbing the info from xero and making it all ready. Anyway, so to catch it, I would need to go like this roughly: Except XeroException as XeroBadRequest MSG = XeroErrorMessage.args Print(MSG) Sorry if formatting is wrong, I'm on alien blue, so vars might not be 100% correct but the base idea should come across.
KMeans, Gaussian Mixture Model and Decision trees. GMM uses np.sum, np.log, np.exp, np.dot, np.max very extensively. Majority of time was taken by np.exp, and i don't think there is a blas function for that. There are mkl calls for that, but i think that compiling numpy with mkl would not automatically change the C exp() calls to vsExp() calls. Correct me if i am wrong.
Wait, what? You're a shemale !? But you look so feminine ! Regardless, extra diversity points !
It might map to latin-1 (ISO 2022), however: $ LANG=C python3 &gt;&gt;&gt; import sys &gt;&gt;&gt; print(sys.getdefaultencoding()) utf-8 This is actually worse for you, as yours appears to be ascii as noted in the exception. Furthermore, &gt;&gt;&gt; import os &gt;&gt;&gt; print(os.getcwd.__doc__) getcwd() -&gt; path Return a unicode string representing the current working directory. You then use that unicode string without encoding at the IO boundary (the print function). So when print, in your case, expects ASCII (or the low 128 characters) and you send it ordinal 228, Python correctly throws a UnicodeEncodeError (because you didn't encode your data). It also helpfully tells you the problem, your ordinal is not in the range for the expected ascii codec. &gt; things still don't work. You need to reset your expectations on bug-ridden code. 
&gt; and if I put even a simple exception catch on my call of the function it doesn't even publish the info in the module exception call. Did you re-raises the exception in that exception catch?
I think only the standard BLAS API of MKL is leveraged by numpy, not the transcendental functions.
Testing in IDLE, it looks like a / b returns a float and a // b returns an int, and that's the only difference...
Part of the problem is that with Python, we Windows users are second-class citizens. It literally took about 10 years to convince the maintainers to put the python executable in the system PATH variable on installation - until then, every example or tutorial would fail to work unless the user also manually edited their environment variables.
&gt; here is no language native way to compile a program. Correct, if you mean "compile to native code". However this is not very unusual for modern languages, which often compile to some sort of intermediate code. If you mean "there's no language-native way to bundle the whole lot into an executable", then that is also true, but again that is not all that unusual for scripting languages, which expect the run-time environment to handle it for you. When it comes to the 3rd party package/distribution tools for Windows, I once had some luck with py2exe, but haven't tried it recently. You will almost certainly have more luck using Python 2. On the whole though, don't worry. It's the language, not you. It's gone down a self-perpetuating route of being favoured by server-side developers and scientific programmers, neither of whom need to worry about distributing their work onto systems without Python installed, and so the idea of making self-sufficient programs has become irrelevant to them.
Then why is there a girl on your github profile?
Well, it's Windows's fault, really. Never had any trouble installing python programs on a system with package managers. Besides you have to consider the following: C standard library ships with pretty much every system. So programs compiled with C are the smallest possible and the least hassle to work with because the C stuff is already installed. D standard library isn't. D compilers static link the D standard library on Windows to avoid this hassle. C#/Java build JIT programs. Those programs need a separate install, called .NET/Java runtime, in order to work. They miss both their standard library and a way to get the native code from the "executable" files by default. Python/Ruby/Lua/etc. are literally plain text files. They are shipped as plain text files. They don't get to static link their standard libraries. You need to install something that is like a compiler and a runtime at the same time: the interpreter. Seriously, every language is more or less a pain in the ass to distribute, specially on Windows, and specially if you try to ship plain texts files as an binary code. If I were to ship something that is from a script language I would just copy the scripts somewhere in program files then have the installer install a python interpreter and create a shortcut to run the python interpreter with the scripts. Like most decent folks do.
Second to that. Esky has a few cool things, but I've found the code to be a steaming pile of crap and actually had a few weird ass bugs in it.
"What dbms are you using?" "Um... sqlite. Yup, definitely."
I had several little things that broke when moving a SQLAlchemy project from SQLite to Postgres. Its been a couple years, and I didn't document, but my take away was: dev with the db you plan on using.
Does PyQt/PySide do anything special to handle all of this? They seem to be used quite a bit in deployed applications. I have had trouble regarding specific obscure libraries, but I have never tried playing with Python 3. Might we worth using 2.7 and seeing how things go...
doing gui programs in win32 is on the way to extinction and frankly the open source world ecosystem in windows is not that big (compared to unix)... so yes, choosing 3.4 might have been a mistake. Changing to 2.7 is probably going to solve your problem, and this pynsist seems to be easier than py2exe
Paths should be treated as objects that wrap the low-level details such as whether they are bytes or text on the current platform and provide an API that allows retrieving appropriate byte or text variants. Short of such a large change, LANG=C should be interpreted as utf-8 which should be correct in practice and is what everyone else is doing to my knowledge. If you don't want to do that there should be a warning at startup and/or an exception when an undecodeable path is encountered. What Python 3 is currently doing is not just worse than what Python 2 is doing, it's worse than whatever everyone else is doing. That's dangerous for the future of the language. 
The same pain exists on Linux systems as well. Going from Ubuntu to Redhat Linux for example, you are skilled devlopr so you know to "wait" for 3 to become "mature", so you decide to use python2. Well fuck you now, it wont work on Redhat anyway because theyre still on 2.6 and your program would run perfectly fine if it was not for that fancy fast lxml library you used which has bindings to specific version of .so files which are *not found* on the your target system. So despite using python2, from 2.6 to 2.7 you will suffer. Python shit sucks, compared even to PHP, you cant just expect to type your short script, save it and run it, did you think it was that easy? 
So what goes wrong when you try to catch the exception like that?
Except the devs can't predict the environment they'll be deployed in. Edit: I've removed the second half of this because on review it wasn't necessarily true and I didn't feel entirely a fair statement.
I regularly create Windows binaries of my wxPython applications, using PyInstaller. It's a breeze, and can easily include other binary libraries like GStreamer. For most projects, you only need a generic spec-file for PyInstaller. I'm rather curious - how did you create a wxPython application with Python 3? wxPython supports Python 2 only so far. Are you perhaps using Phoenix? If so, then I would say that yes, you screwed up, because Phoenix is not ready - it's incomplete, unstable and untested. Using bleeding-edge stuff is a guarantee for pain.
You're using a db that is known not to work on NFS and you still blame the db? That's irresponsible. Normally the devs should be able to make requirements on what platforms their software should run. But if that isn't possible they shouldn't rely on a db that is known not to work over NFS, if that's an expected protocol. 
Ok yeah the two are totally the same thing I see great things from you bud.
My point is if I go trying to solve problems without even knowing things like how the print function works I might as well not bother. To a beginner there seemed to be a lot more differences than "put brackets around your print statements, change raw_input to input, be careful when trying to iterate through dictionaries."
You're not gonna break the computer if you type the wrong code... are you really this dumb? I hire and fire Python developers for a living, you don't strike me as the kind of person suited for it after this small exchange.
Thanks for that - works a treat, though single quotes in the app name caught me out for a bit. I have done a short script that generates the installer.cfg and calls the apps to build the install. [https://github.com/acutesoftware/dev_setup/blob/master/make_inst.py](https://github.com/acutesoftware/dev_setup/blob/master/make_inst.py)
might worth a try: http://numba.pydata.org/ 
If you have to ask, you'll never know. Seriously, pick a problem and solve it. Maybe google for small project ideas? Or you could just let other people do the research for you.
Try [Readability](https://www.readability.com/).
&gt; freeze the bytecode and distribute that with portable Python interpreter that's how you do it. almost any language with a runtime environment has to be distributed this way. the only other thing you have to do is manage your dependencies. PIP with a virtualenv and a requirements.txt file works pretty well for this. that will let you install dependencies in a setup script distributed with your Python package.
you could try to solve some of these projects [here](https://github.com/karan/Projects).
Would it be feasible for you to create a web app? You could deploy using Google App Engine, Heroku, or whatever. This might actually be a better solution for a script that scrapes a page because your script will break whenever the html for the page changes, forcing you to tweek your BeautifulSoup. A program running on a server would be a lot easier to update and maintain vs. multiple pieces of software distributed around the workplace. 
Going by your username and 'not a Windows guy' statement, I'm guessing you may not be on a Windows machine? If so, have you set up the necessary ODBC (unixODBC, freeTDS are commonly used) connection to the DB? I've used freeTDS to connect to SQL 2005-2012 successfully, using sql auth. Never messed with getting kerberos working. freeTDS does not support all the new features of SQL 2012 so if your DB admin has gone crazy you may be out of luck with that. If you happen to be running Red Hat Enterprise 5 or 6 - 64bit, Microsoft actually has a pretty nice driver that supports all features of SQL 2012 **[link]**(http://www.microsoft.com/en-us/download/details.aspx?id=28160). It's not open source, and will probably require a re-compile of unixODBC.
It's relatively easy is usual cases. 
If your company will pay for the licenses there's always matlab + matlab compiler. Exactly none of these headaches.
I found an answer to this on [stack](http://stackoverflow.com/questions/11120130/programming-android-apps-in-jython) You might also consider [SL4A](http://www.pythoncentral.io/series/python-sl4a-android-scripting-layer-tutorial/) 
&gt; Some many types of bugs that are normally associated with multi threaded programming just don't normally occur when writing Python code. I don't like that type of logic: "we make it impossible to write multithreaded code, so we don't have to deal with the bugs of multithreaded code". 
You can use virtualenv. When making a new virtualenv, you can specify which python interpreter to use. I'm not a windows user, but I'm pretty sure virtualenv works on windows. http://virtualenv.readthedocs.org/en/latest/virtualenv.html#environment-variables-and-configuration-files
&gt; It works just like the threading module, so you must really loathe Python! Except that I can't share my data across the processes, which my gripe with it. &gt; And what specifically would this do for you? Well, I run number crunching code, typically on machines with 64-2k CPUs. 10% slowdown wouldn't be a problem if I don't have to deal with the data-sharing headache instead. &gt; It's also a terrible pain to develop properly and debug in any other language as it's fraught with potential race conditions, corruption, etc. that can take down the main program. So because something is a potential source of bugs we should outright make it impossible?
It's an over-simplification. SQLite is a great little database, but some things, dates, sequences, etc work much differently than Postgresql. The SQLAlchemy docs and maintainer would frequently make this point. So, long as your database isn't too large, and you don't mind tweaking those bit, then the migration isn't usually too bad.
FYI, MySQL's statement is predictably a non-standard implementation. If you want the ANSI standard statement it would be the Merge.
If you're using Windows, you can just install both. You'll have c:\python27\python.exe and c:\python34\python.exe.
Probably not answering your question, but if you're good with python/jython, you'd be fine just writing the java events (IMO). The syntax is obviously much different but if you understand patterns, it's relatively easy. I don't even feel like that's the difficult part of Android, which in my experience is getting the layout to not look horrible. Not sure if that's constructive or not, but that was my experience.
My problem is, similar to why I don't know Ruby, I don't want to know the language (in this case Java). If I have to I will, but I feel more comfortable with Python than I do Java. That's my biggest hurdle. If I sat down for a weekend and just kept programming and testing I'd be comfortable, but its getting to even do that I mentally don't want to. :/ It was constructive though. I appreciate the input. :)
I've used similar (PhoneGap mainly). My question is though does it make apps look native? Seems every client of mine wants a "native-looking app".
That's fine to say in a bubble, until you introduce something like shared home directories (one of the oldest use cases for NFS available) and all of a sudden Firefox and Thunderbird are unstable because they use sqlite on the backend (these issues can also manifest on a CIFS/SMB mount during profile redirection).
I don't believe it would work. Jython doesn't operate on J2ME. It uses too many features found in the full SE. Dalvik, to the best of my knowledge, is more similar to J2ME than it is to J2SE.
You were right. I fixed it and it'll be released in 2.3.1
Kivy does not look native, though the default theme is similar to Android's. If you _need_ to look and behave "native", Java is really your only option.
Went in a slightly different direction and made VB code for needed parts. Although, is there any way to add macros to excell via python/invoke VB code from it? I've found only ways to invoke existing ones. It serves it's purpose for now, but every time we start work on new file, we need to paste VB code first.
this is how my work buddies did js and python tech talks at an old gig. great way to teach new material!
Thanks for all the great work.
What issues are you having with pycrypto?
If NFS causes mission critical applications to fail then clearly NFS should not be considered a solution. It's not SQLite's fault that you are using it incorrectly on a setup that is known to cause problems. It's like writing code for DirectX and blame Microsoft when it breaks horribly on Linux.
Don't have a github account, but https://www.youtube.com/watch?v=miGolgp9xq8 deserves to be here.
That's what I was afraid of, lol. All well, might just have to buckle down and learn Java. Use SL4A or whatnot for my own personal uses.
&gt;Seems every client of mine wants a "native-looking app". Use java then.
Shoot. Alright, thanks. Kind of sad about it, but...eh.
Have you used Kivy? what did you think?
Or you could you know.. have a way to tell the program to not use SQLite, because you know it's going to break but need to able to enable those applications for end users. It's not like I write firefox, thunderbird, or the myriad scientific applications used by my end users. I make them work in a way that my users can actually get their jobs done, I have no issues with configuring something to not use a tech by default but that handle has to exist (and it does not). For most things statd and lockd do just fine at handling locking and unlocking files during read/write operations, NFS has actually proven to be remarkably fault tolerant when run in Sync mode. My position isn't that you should never use sqlite, indeed I've found it very useful in a variaty of situations, but you should have a plan for replacing it in situations where it's not appropriate that goes beyond 'well just crash out'.
I'm excited for the tcpclient especially since I've been having to write my own code for a simple connect/send/receive/disconnect function.
Is there such a thing as a native looking android app? Aside from a few that use Holo layouts, 90% of the apps I use look completely different anyways...
I have looked into this as well for other reasons, from what I gathered is that Jython isn't terribly well supported or developed anymore. PyPy might have a solid alternative implementation eventually, but nothing feasible currently.
&gt; use the built in library venv to create a Python 2.7 virtual environment I think you mean "a Python 3.4 virtual environment". 
I have never worked with VB, and I never work with excel. I always use Python.
I'm not sure. I'm thinking of writing up a small sample app and presenting that to my clients, and gauging response.
Is this a request for solutions, empathy, or a negative attack ad?
Thanks. Well, guess I'm going to have to stick with either SL4A or use something like Phone Gap or Kivy if I don't want to do Java programming.
Anaconda supports Python 2.6, 2.7, 3.3 and 3.4, see http://continuum.io/blog/anaconda-python-3 It is possible to create conda environments for all these Python versions.
[pyenv](https://github.com/yyuu/pyenv) is great for this. It's a version manager for Python.
I love integrating it into my multi-platform c++ projects. Of all the C++ libraries out there(not just DB but all libs) it might be the cleanest integration by a long shot. 
Same with linux, in cli python --version python2 --version I use sublime and switching the build systems is no problem, as sometimes I learn from python2 materials, but I do my shit in python3
only thing i would add if you're going to talk about re.match() is the only real reason to use it over just using `^` with re.search(): ["Note however that in MULTILINE mode match() only matches at the beginning of the string, whereas using search() with a regular expression beginning with ^ will match at the beginning of each line."](https://docs.python.org/2/library/re.html#search-vs-match)
If you're competent with Python, Java should be a piece of cake. Not a bad introduction into strongly typed languages if you haven't done any of that before.
I wouldn't say that Jython is not "well supported", they've been releasing quite regularly in the last couple of years and adoption keeps spreading. The main problem is that it still doesn't support Python 3 and there is no clear indication of whether it will ever do.
How do you open IDLE and what did you do exactly to install it?
&gt; Or you could you know.. have a way to tell the program to not use SQLite Sure, you could write an abstraction on top of SQLite in order to make it link against a different backing store. Good luck finding one that matches SQLite's features that doesn't also suffer from the same problems you want to avoid. From the [SQLite documentation](http://sqlite.org/faq.html#q5): &gt; But use caution: this locking mechanism might not work correctly if the database file is kept on an NFS filesystem. This is because fcntl() file locking is broken on many NFS implementations. It is clear that the broken software here is NFS, not SQLite. 
Great idea, I've been wondering how to do this optimally. Thanks.
haha, SQLite has "DROP TABLE".... funny
My bad, it was DROP COLUMN https://bitbucket.org/zzzeek/alembic/issue/21/column-renames-not-supported-on-sqlite Edit: I didn't even notice who I was replying to. Well damn.
Right, everything else that functions just fine under NFS and has for years is just an illusion.
No if you install 2.7 or had written it in 2.6 it would work fine. This problem is on you and your OS. 
Start here: https://twistedmatrix.com/trac/wiki/WebDevelopmentWithTwisted If you have a brave soul...
Shapes with even number of sides need to be rotated otherwise their vertexes will point at the midpoint of the adjacent edge instead of their edges lining up. Yes, all polygons are sized so that their edges are length 1. For margin, we want the edge to be offset by some amount, perpendicular to the edge. But our calculations are for the positions of the vertices. So we use simple trig to scale the length of the hypotenuse as needed.
There is a script collection, called [Pywikibot](http://www.mediawiki.org/wiki/Manual:Pywikibot), which provides many tools for browsing Wikipedia (and related projects) easily. You can go from there using Wikipedia articles. From this, I suppose you will rely on the common structure between MMA-related articles, and on categories (to get a list of fighters, for example).
Awesome stuff! I'm definitely looking forward to trying sqlite in my next personal project. Keep up the good work /u/coleifer.
To install it just opened the msi file, and left everything as it was, didn't change pathway or anything just clicked next until it was done. I go into the start menu to open IDLE. I saw that the shortcut linked to pythonw.exe so I also tried opening that. I opened as admin, and I also let python.exe and pythonw.exe through windows firewall.
When I open IDLE, it takes about 5 minutes to anything to pop up. When something called Python Shell opens, an error message comes with it: "IDLE's subprocess didn't make connection. Either IDLE can't start a subprocess or personal firewall software is blocking the connection." I click OK and then the error and the shell both close.
I wish they'd give some indication. I prefer jvm for the game projects I do and the lack of py 3 support for jython is a real bummer.
&gt; Not for SQLite. Not enforcing column type constraints is a well documented behaviour of SQLite and can not be considered an error. "It's documented" is insufficient. If you can commit a transaction which violates the database schema in any way, you do not have consistency.
But it doesn't violate the schema. At least not how SQLite defines the schema. From the [documentation](http://www.sqlite.org/datatype3.html): &gt; In SQLite, the datatype of a value is associated with the value itself, not with its container. That means that the column doesn't have a data type like in other RDBMSs. The fact that you don't get an error when adding a column with a certain data type is just for backwards compatibility with other RDBMSs. 
SQLite doesn't promise to implement a certain SQL standard. :) 
Then why does it call itself "SQLite?" Look, I'm not saying SQLite is a bad library. It's a fine library for its job, which is to implement a subset of the SQL standard in a lightweight and portable fashion. But since it is a subset of SQL, when discussing its merits, we need to compare against the SQL standard. This provides an objective background, so that we may consider "heavier" alternatives such as Postgres. If we defined everything in a Postgres-centric way, it wouldn't be a terribly fair comparison.
Because it's not my github account. This was originally posted on HN.
I think kivy could be used to produce fairly natural looking interfaces on android. If you were doing desktop development, it would feel a little more out of place.
Why not use the twisted library? It has a bare irc class you can extend and handles reconnections well.
&gt; Historically very few RDBMSs has implemented the whole SQL standard(s). I'm well aware of that. It's why their choices as to which parts to implement can serve as a valuable point of comparison. &gt;The SQL standard has in many cases lagged behind pioneers like Oracle et al who have already implemented some features before there even was a standard for those features. Please don't get me started on Oracle and VARCHAR2 (NULL vs empty string). Or `SELECT foo() FROM dual`. Or `ORDER BY ? LIMIT ?`. Or... &gt;Where I'm going with this is that the SQL standard hasn't historically been the gold standard that we'd like to believe, and the big databases has been in development since the stone age and have solved things differently. There is a difference between using nonstandard syntax and flat-out *not having a feature*, which is what we're discussing. &gt;But it's not an error. I never said otherwise. I said it cannot legitimately claim Consistency (and hence ACID) without this feature.
Anyone with experience using this nlp library, how does it compare to nltk's capabilities? I'm currently planning on using nltk to pull out common phrases from a large body of text (~80 MB) and noticed this on my homepage. 
+1 to Anaconda. I've been programming almost exclusively in Python for 6+ years and for several years used virtualenv. I switched to Anaconda after attending a recent PyData conference and am happy I did. 
http://pythong.org/
Right now MITIE just pulls out named entities (e.g. It can recognize that "Pegasus Airlines" is an organization in the sentence "I bought a plane ticket from Pegasus Airlines.") and identifies when pairs of entities participate in certain relations (e.g. person works_for organization). You can train custom entity and relation recognizers, but right now MITIE doesn't have an easy to use "find me the most common phrases" tool in it's API.
Awesome, thanks for saving me the time. Cheers :)
http://shop.oreilly.com/product/0636920027072.do This might interest you. :)
I tried that too. But managing state within each command the bot received got buggy, especially when the command took a while to process. I ended up using a thread for every message. Then I threw it away and used twisted, because prototypes suck.
The build has a "python.exe" file that opens a python terminal. You can create a shortcut to it on your windows desktop. I'm more familiar with Linux but I think you should be able to make it work.
A rather old joke... My question was serious nonetheless and I find it saddening that your answer is so plainly dumb.
i cant figure out easily how to send or receive lol. otherwise its nice
time, datetime, and math will get you very far
[well :|](http://media.giphy.com/media/uY0zZnQqZD8Jy/giphy.gif)
I've worked on a rather large project that used twisted to write an event driven server. Part of that project includes importing twisted web to create a small restful api. If you're using it to run some other wsgi app I have no idea what your experiences will be like. Writing a twisted server takes some getting used to if you haven't used a lot of defered/callback paradigms before in other languages/frameworks. I think it can be particularly challenging when you're starting to handle errors properly, and improperly handled errors can be burdensome to track down where exactly they happened in your system. That said it's actually really easy to setup things like polling or periodic tasks. It's nice to not block on every call. It's fairly feature rich and has a lot of good docs/support.
lol i havent put a lot of effort into it tbh
To me, it looks like you are importing the io module somewhere, either directly or indirectly in voltage.py. Look at the import statements in voltage and those of the modules which are part of your project. Also, *io* might not be the best name for a module as there is already a standard module called [*io*](https://docs.python.org/2.7/library/io.html)
Also, as others have already said, you can install both versions on the machine without issue.
[Oh geez, it was the naming; that fixed it.](https://www.youtube.com/watch?v=YIj0qhYzqCU&amp;t=1s) Thanks! 
Pypy as the reference imlementation would be good. wxWindows included out of the box would be good. But I'd want something more simple. I'd make it harder to accidentally create a tuple. It looks like we're binding 1 and a fifth to var, but we're really stashing a tuple in var: python -c 'var = 1,2; print(var)' (1, 2) 
Not a common enough use case to warrant more syntax complexity.
 xero.exceptions.XeroBadRequest: A validation exception occurred: Invoice # must be unique. During handling of the above exception, another exception occurred: Traceback (most recent call last): File "C:/Users/opm881/PycharmProjects/MYOBInvoicesToXero/myobToXeroInvoices.py", line 156, in manualRefresh putResult = putInvoice(formattedInvoiceData) File "C:/Users/opm881/PycharmProjects/MYOBInvoicesToXero/myobToXeroInvoices.py", line 29, in putInvoice except XeroException as exceptionResponse: NameError: name 'XeroException' is not defined That is what happens when I use try: putResult = xero.invoices.put(invoice_list) except XeroException as exceptionResponse: print(exceptionResponse) Same thing if I try XeroBadRequest instead of XeroException. I only tried XeroException after XeroBadRequest didn't work.
Read my above reply to /u/BinaryRockStar
We use tornado extensively at my office, and the most exciting part of this release (for me) is that coroutines are *even faster.* *zooooom*
You need to import the class to be able to use it. At the top of your script add: `from xero.exceptions import XeroException`
I hate moving graphs so much. Especially when they are the main interface for a database. Glad there's also a browsable list. The database itself seems very nice though.
I'm not aware of any, but you could maybe do it your self. You would make script to parse emails from your blogs email account and generate content. Script would run as cron every 1 hour or whatever. Maybe adjust something like this http://stackoverflow.com/questions/14294057/extract-information-from-gmail-with-python/14294059#14294059 . Note that you don't need to use gmail you can use your own mail server (if you haven't setup email server before then just use external email), or use some email service with your own domain.
&gt; I never said otherwise. I said it cannot legitimately claim Consistency (and hence ACID) without this feature. SQLite can't claim consistency for column types. But they don't claim to enforce that either. But I think they can claim consistency given how they have choosen to implement their db. If you store a value as int you can rely on being able to read it as int. I don't think we will reach any consensus on this since I'm merely repeating myself at this point. But it was a nice discussion. :)
Check out this video of the PyCon US 2014 where they explain so fine how to start in the open source world :) [http://pyvideo.org/video/2586/contribute-with-me-getting-started-with-open-sou-0](http://pyvideo.org/video/2586/contribute-with-me-getting-started-with-open-sou-0)
Cool. Just curious, what method did you use for generating the collage?
Here's mine if you're interested, it's a bit hacky though, but it does have a heap of functionality in the plugins I wrote for it. 
&gt; twisted library I don't know about advising twisted to people anymore, it still forces you to make your entire project callback oriented, which is a pretty ugly way to write python. You can get around this, but reinverting the flow of control is a lot of boilerplate. Don't get me wrong, it's an awesome library, I've used it a lot and it has a lot of great protocol support, it's just a bit of a legacy paradigm at this point.
Anyone having trouble installing it with python 2.7 on windows? I am fairly new to python and without setup.py and _init_.py I am a bit puzzled on how to do it. When in python in the folder where the source code is and run: &gt;&gt;&gt;import mitie I get a windowsError 193 when it tries to open the "ctypes/__ init __.py" telling me "% 1 is not a valid Win32 application" I downloaded the pre-compiled files from github, and I am stuck there. I am running a 64bit version of windows 7.
How many threads run in the same process at the same time ? 
Why do your config files have enough repetition to warrant this? That sounds more like you're just storing data, in which case a database might be a better solution.
What do you recommend instead?
cool. Thank you
I expect on github there are a lot of small projects with less then 4-5 members who welcome any help. And what is more important who can advise if I will have problem with commiting my work. As I said earlier I have no collaboration experience. But it`s. I will try to find such project. Thank you
Thanks for the heads up! 
For IRC i'd either roll my own, since it's a pretty simple protocol, or else I'd use something like irc3 based on the new asyncio tools in the stdlib
Yeah, I don't understand why they need to bob around when I'm not clicking anything.
I tried rolling my own. It didn't so well, especially during network disruption and when commands took a long time to process.
It's because the positioning is decided by energy minimization of the nodes according to assigned forces on the edges. It's useless in this context, especially because it's probably not the best way to show that information. It should probably be a tree. 
I don't think you understand the problem. Go install python 2.7, use virtualenv, and stop relying on /use/bin/python that your OS is upgrading when they need to.
I followed your general advice to the point. 1. Installed python 2.7 2. Used virtualenv, pip iniistall lxml because all other options did not manage to do the task at hand - due to performance reasons, others would take 15minutes to parse some crap xml where lxml took mere seconds. This troubleshooting took a while to do, all while sneering at prervious incarnation of same program in Java that didnt have any performance problem on the same data. Great, now, just run it on the target server - which uses python2.6, no you cant upgrade to python2.7 you dont have root and anyway redhat had not packaged 2.7. pip install lxml. Wrong, you cant because it lacks some other C library which it needs, why the hell does python even put lxml as available for python2.6 when it actually depends on some 3rd piece of shit C library? So, lxml, a python library can not be compiled for python2.6. All other python xml libraries suck dick performance-wise and choke on a simple 15mb xml. Result: fuck python and everything it stands for, its shit joke of a language/runtime, and if you want to solve problems, do Java, if you want to fuck around with dependencies, virtualenvs, runtime-management, then go for something real like C instead of pretending Python is nice. There is a simple reason why a turd like PHP is more popular and used much more than Python. Because its less of a turd than python. 
Ha so I work on both Java and Python. One is not better than the other. If you want to fuck with maven and jar conflicts use Java. If you want a language so complicated you have to write boat loads of code to solve simple problems, use Java. They are both great languages but somehow you reversed which is better at getting stuff done in a hurry.
For me, the bigger loss when working in a duck-typed language is not errors that I write, but comprehending the things I didn't. If I am working with Java, maligned as it is, it's easy for me to look at the public API of a class and know at a glance exactly what it expects in terms of inputs and what it produces in terms of outputs. With the "hash languages" like Python and Ruby, this is just impossible, and I found that in larger Python projects the relatively short type annotations of a static language get replaced by voluminous amounts of docstring. ("Returns: a dictionary containing...")
Are you using the 32bit version of python or the 64bit version of python? The precompiled binaries are for only 32bit python. But beyond that, there isn't anything to setup or install for MITIE to work. 
&gt; easy for me to look at the public API of a class and know at a glance exactly what it expects in terms of inputs and what it produces in terms of outputs Agreed, that is useful. &gt; Returns: a dictionary containing... Yes, but the interesting part here is probably the contents of the dictionary rather than its type ... not something you would get from a static type annotation, even were one available. So while the types do add useful information, they're often not enough for full understanding, and you have to dig deeper anyway. 
noob just joking, You can have a look at my gitlab python library, I have been quite busy lately and haven't been able to keep it up nor refactor anything in there. You are welcomed to hack it, add it, destroy whatever you find interesting in there. https://github.com/Itxaka/pyapi-gitlab Also, you can go to the new repositories created on github and check out small projects by people, add some comments or some patches for their starting projects is a nice help for a lot of people.
Or, you know, just use &gt;=Python 3.3 which includes a launcher that is automatically installed to the `Windows` directory (i.e. always on PATH): https://docs.python.org/3.3/using/windows.html#python-launcher-for-windows Python users can download the MSI here, works just as well: https://bitbucket.org/vinay.sajip/pylauncher You can then launch Python with `py` or `pyw`.
Looks great! Are there models for languages other than English available?
We will probably upload a Spanish model in a few days but right now it's just English. However, you can train your own models very easily, for example: https://github.com/mit-nlp/MITIE/blob/master/examples/python/train_ner.py
I know we're in /r/python, but is there any particular reason that it must be python based?
Well, in most cases you don't return a dictionary in a static language; you'd return an object of a particular type. (There are exceptions in Java, particularly for things like view-presentation aspects, where you definitely have a `Map&lt;String, String&gt;` type thing going on.)
Neat.
Would be cool to see it up on PyPI.
Nao te precupe. No futuro: o mais simple design que funciona e sempre o melhor. :)
I am using the 64bit version, that's why. Wiredly on the github it says "We have built Python binaries packaged with sample models for 64bit Linux and Windows. These packages are downloadable here:" I thought it would be ok 
A bit unrelated, but do you know how to create such a graph? They'd be useful for some flowcharts I make but I don't know where to start. I'm most comfortable in R but okay in python.
We weren't including a binary for 64bit Python on windows. I just updated the archives though so if you use https://sourceforge.net/projects/mitie/files/binaries/mitie-v0.2-python-2.7-windows-or-linux64.zip it should work now.
Yeah whatever, you keep repeating that marketing bullshit "getting stuff done in a hurry", when the facts are on the table - if you really need getting stuff done in a hurry use PHP. 
That's true. We will have to add it to PyPI :)
&gt; But when scripting it causes headaches, See my experience/es with python. Python is great if somebody else has done everything else for you, deployment, server setup configuration, management, linking, environment. Its great if you're coding in a VM and share that 1-2GB image as your little script, together with instructions on how to start the VM to actually make your program *portable*. 
A Tree? If you can define the structure you want in R or python, you should be able to print it out as a dot file (http://en.wikipedia.org/wiki/DOT_%28graph_description_language%29) which in turn is a format that graphviz can plot. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**DOT (graph description language)**](https://en.wikipedia.org/wiki/DOT%20%28graph%20description%20language%29): [](#sfw) --- &gt; &gt;__DOT__ is a plain text [graph](https://en.wikipedia.org/wiki/Graph_(mathematics\)) description language. It is a simple way of describing graphs that both humans and computer programs can use. DOT graphs are typically [files](https://en.wikipedia.org/wiki/Computer_file) that end with the *.gv* (or *[.dot](https://en.wikipedia.org/wiki/.dot_(disambiguation\))*) [extension](https://en.wikipedia.org/wiki/File_extension). The *.gv* extension is preferred in cases where there could be confusion with the *.dot* file extension used by early (pre-2007) versions of [Microsoft Word](https://en.wikipedia.org/wiki/Microsoft_Word). &gt;Various programs can process DOT files. Some, like *OmniGraffle*, *dot*, *neato*, *twopi*, *circo*, *fdp*, and *sfdp*, will read a DOT file and render it in graphical form. Others, like *gvpr*, *gc*, *accyclic*, *ccomps*, *sccmap*, and *tred*, will read a DOT file and perform calculations on the represented graph. Finally, others, like *lefty*, *dotty*, and *grappa*, provide an interactive interface. There exists also a *GVedit* tool which combines a text editor with noninteractive image viewer. Most programs are part of the [Graphviz](https://en.wikipedia.org/wiki/Graphviz) package or use it internally. &gt;==== &gt;[**Image**](https://i.imgur.com/cm9Ryf5.png) [^(i)](https://commons.wikimedia.org/wiki/File:DotLanguageUndirected.svg) --- ^Interesting: [^Graphviz](https://en.wikipedia.org/wiki/Graphviz) ^| [^List ^of ^file ^formats](https://en.wikipedia.org/wiki/List_of_file_formats) ^| [^Trivial ^Graph ^Format](https://en.wikipedia.org/wiki/Trivial_Graph_Format) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ciyyxu5) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ciyyxu5)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Pra fazer o site mas útil, muda essa coisa logo, por favor.
was it necessary to reply in portuguese?
It's broken for me on Chrome (thankfully). Works on Firefox. It really is an horrific main interface. ###### edit: Oh, never mind, it's working on Chrome now. Originally, I opened the tab a while before I read it. It seems the graph eventually reaches an equilibrium and stops bobbing around.
sim
&gt; Well, in most cases you don't return a dictionary Right, but my comment also applies to an object being returned (its properties might be important, not just its type). But the ability to return/practice of returning things like dictionaries, tuples and sets is one of the things that makes Python so productive ...
With the springs? I made my own in java. If you need an image then definitely graphviz.
Well, find a project that you like. There are a lot of options. If you are interested in PyGame and Games you could help some projects for GCW-Zero. You can contact us at IRQ #gcw (http://www.gcw-zero.com/irc) or you could help some good projects as LibreOffice, Firefox and so on.
The popular Python blogging engines are generating static HTML, so that basically rules out any possibility to include such a feature in the core of those. Sadly, WordPress is still the best thing from a user perspective.
True. Lately I've actually been doing some work in Clojure and I've found its idiomatic approach (work with dictionaries and then convert to a 'strongly typed' record when the structure is done) is a nice compromise.
I was looking for a python based IRC bot a while back and ended up settling on [Willie](https://github.com/embolalia/willie). Always glad to have more options to choose from. I skimmed through some of the code here and like what I see so far. Have you considered: * Adding support for other types of chat: XMPP/AIM/etc * Breaking out the plugins into a separate git repo
it's a Flask app