Yep, that's exactly the idea. It makes shortcuts that start Python running your code. I've worked quite a bit with cx_Freeze, which is a similar tool to py2exe, and I know that frozen applications often run into problems that unfrozen code doesn't have. So Pynsist aims to avoid that - when the user runs it, it should all be normal Python code running on their system.
If it's the packages you're installing that you don't trust, be aware that virtualenv is absolutely not a security measure - the package can easily put files outside the virtualenv if it wants to.
oh. why did you do it inside out?
Do you borrow logic from anyone for finding packages/files that need including? I've also used cx_Freeze and py2exe and when it gets tough is with pyside, numpy, matplotlib, and other large libraries that could have dependencies and dlls that aren't detected automatically. Would you say those challenges are similarly challenging with Pynsist?
I don't know for sure, but probably not. When you make an .exe, you are bundling the entire Python interpreter. Are you also using any other non-standard libraries, like a GUI toolkit? Because they then have to be included as well. 6MB strikes me as not bad; I've seen wxPython programs that were more like 15MB or so. I haven't used PyInstaller, but is there a way to exclude stuff from the bundle? That may be one way to cut down at least somewhat.
It's tedious because you're misunderstanding the problem. It has nothing to do with `print()` not knowing how to handle certain characters. This is all about the console/terminal that you run Python under. (Let me guess, you use Windows?) `print()` knows damn well how to handle any Unicode character in existence(*), but it can only encode characters that the console knows how to display. If you run Python under a console that's configured for a character encoding of, say, cp437, then it can only output characters that can be represented in cp437. But if you run it under a console configured for utf-8 or some other universal encoding (or at least a single-page encoding that contains most of the more commonly encountered code points, like cp1252), then that problem no longer exists. Fix the actual problem and everything works fine without having to come up with ugly band-aids. (*) It's not `print()` that's doing this work, or that knows anything about character encoding, it's the `TextIOWrapper` associated with stdout.
You can use [messytables](https://github.com/okfn/messytables) to help you detect the header offset and names.
Fair enough - I have no idea what OS or distro the guy is running. On my box, 'python' gives me version 3.
I think Arch is the only major linux distro that defaults 'python' to version 3. On Windows, it's whatever you installed yourself, as it's not done by the package manager.
You can literally just copy one file into the other.
No, there is absolutely no reason to believe that to be the case. `urllib2` itself doesn't do any threading, and using `urllib2` doesn't make your program multi-threaded. And even if you are doing threading yourself, there's still no reason whatsoever to expect that `time.sleep()` would cause anything to break. That SO post links to some random blog from 2008 where the person was trying to debug a complicated multi-threaded application and suspected that `time.sleep()` might be involved, but that was only a suspicion and they never found the actual root problem. And besides, that was seven years ago, using Python 2.5. The same applies to the person on SO — they're grasping at straws trying to debug a complicated application. Throwing something out as a possibility does not make it true, it means the person is desperate. Don't give credence to random desperate people on the internet, use some critical thinking. The only way that you could conclude that there is anything to this is if you found someone who could actually demonstrate the exact details of what the nature of the problem is, specifically, and how to reproduce it with a testcase. (But if that existed, the problem would have been fixed and would no longer exist, or there would at least be a bug tracker item for it on python.org that had been categorized as valid.) 
For something small like that you may want to use CGI. Basically many servers allow executable scripts to be in a `cgi-bin` folder and you just handle the call there and return. [This](https://wiki.python.org/moin/CgiScripts) may be a decent start. If you intend to have a lot of stuff like this, however, it would be better to learn a framework for more dynamic pages like Django or Flask at some point.
yea, I think it's all a mess atm and a bit inconsistent with different systems.
Realistically, I don't think you can get to your target (at most 1 MB). The main Python DLL is around 1 MB when compressed with LZMA. 
honestly, I never thought to do a less preprocessor. It totally makes sense though.
&gt;But I must be having other problems because when I use virtualenv and install x_x, it works, but virtualenv is using Python 2.7.5 for some reason. Doesn't that just mean the virtual environment you are using is calling the 2.7.5 binary? Maybe upgraded the system's python 2 interpreter after creating the virtual environment?
Super interested to learn how this one turned out.
You could be using something like [flask](http://flask.pocoo.org/) for this and then your button just calls the running flask service. Just wrap whatever logic you have in your python script now into a flask route.
I assumed incorrectly that a new virtualenv would use the default/current Python interpreter and that the fact that 2.7.5 was being used instead was maybe a symptom related to my problem with x_x/click. I've tried some other things and will edit my main post to update. Thanks.
Sounds like I've got something to do tomorrow, now!
Yeah, this actually wouldn't be very hard. The first way would be to have some Javascript use a websocket to connect to a Python instance of your game running on your server. This is similar to what sites like Ideone do. [Websocketd](https://github.com/joewalnes/websocketd) would make this incredibly easy. Another way would be to use a tool like Brython or an Emscripten-compiled Python interpreter to run your game client-side. 
You could upgrade to Python 3.4 and use py2exe. You might have to reinstall any libraries you have but you should be using the newest version anyway.
I laughed when I saw the headline for this article. I'll look into it later.
Yup, it does.
no, i meant install this package (well, more exactly, configure less so it uses it). i guess it would be best if OP could get distros to bundle it.
Another reason to switch. Now if only I could get the network configured....
Yeah - I'll do it for 150 bucks.
Thanks again for the pull request I merged and released it as quick as I could! Looks like there is a bunch of people on reddit using python 3 by default so cheers!
https://github.com/dilshod/xlsx2csv/
Doesn't matter, writing a program never needs an excuse. Nice program btw.
http://www.rapydscript.com/ may also work
Yes.
Good point, thanks for the tip. 
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
2 cheated on 3 with 4 and then 5, 8, 9.
Use Selenium if you're going to do this, it'll make your life so much easier.
Here is a non-mobile link: http://cacm.acm.org/magazines/2015/3/183588-python-for-beginners/fulltext ^[Sourcecode](https://github.com/Kharms/untouchedURL) ^| ^[Feedback?](http://www.reddit.com/message/compose/?to=untouchedURL&amp;amp;subject=untouchedURL%20feedback)
"Did you try just opening it in Excel?"
Man, what do you have against Fortran? When the Zombie apocalypse arrives and you find yourself hunkered down in an abandoned Nuclear Silo with nothing but an old IBM 7090 and a ham radio to contact other survivors with around the globe you will WISH you had spent some time learning Fortran. Where's your fancy googling for python code snippets going to get you then? Nowhere. That's where. No where. Because people who learned Fortran actually knew how to program computers rather than just copy paste shit from the internet. Sorry. I am over 40. Just lost it there for a second. We now return you to your regularly scheduled programming.
Look at the programs you use, and see if any of them are python-based. For example the Kupfer application launcher that quite a few people use is written in Python.
you spelled github wrong.
[The Internet Wishlist](http://theinternetwishlist.com/) is a good place to find new project ideas, though you're not likely to find any codebases there
https://openhatch.org/ https://python3wos.appspot.com/
I was really compelled by the thorough instructions -- especially on setting up the system -- until the "proof of concept" at the very end. Those recommendations the program provided are terrible. Did something go wrong?
This function sums up 99% of my work with files. ~40 LOC def record_reader(filename,separator="",encoding=None,strip=True,skipline=0, yieldcounter=False,yieldline=False, namedtuple=False): '''opens filename with encoding (defaults to binary) iterates on the lines, skip the first skipline rekords, split the line with separator if separator is a sequence of integers, then it is interpreted as a 0-based field position list. If the first value!=0 ValueError is raised. strips spaces from the fields if strip is true yields a namedtuple of fields based on the first row if encoding is specified, then unicode else str else yieilds list of fields if encoding is specified, then unicode else str if yieldcounter is true, then a counter is added before the fields if yieldline is true, then the line is added after the fields ''' 
Agreed. In _most_ cases, having non alphabetically sorted imports would not cause your application to stop working so you should not consider it a "test". In the cases where the import order does matter, the checker still has no way of knowing what the correct order is, so it still should not be considered a test.
50$ and I can do it today. Let me know if still available.
I thought s/he wanted old forgotten code. This would be best for python on github - https://github.com/trending?l=python
lol. good save.
Just today I found information about py2exe having command line options to remove parts of the std, which would make the dll smaller. Not sure about that and have to take a deeper look. Anyway, there are smaller python variants out there, like PyMite and Tiny Python. There is also python-minimal, but I didn't get to look at it yet. You should check these out, maybe your code runs with them. Also I suggest trying to use leightweight modules which do the work you need. Like... why use bloated kivy for gui, if the leightweight pyglet can achieve the same thing. It's a bit more work, but saves RAM and diskspace. At least for me it did. :)
I use a ton of *[mechanize](http://wwwsearch.sourceforge.net/mechanize/)*, a library which does some fairly basic browser emulation. It doesn't do JavaScript (You'd have to use Selenium for that), but for simple forms and session based things, it's invaluable.
My company uses Salesforce, and before I was hired there was a system in place that basically involved clicking a single button in Salesforce over and over again to process certain types of records. During the busy part of the year they would have three people clicking this button for hours and hours and hours.... .....yeah. Over a couple days wrote a script that uses Python and Selenium and now we don't click that button anymore. Planning to someday integrate the code into Salesforce but the script works surprisingly well.
Loging facebook, twitter, printing posts, scraping new users of groups, filling a bulk of tables, extracting data from vast paginated sites.
I write and analyze data from psychology experiments in Python. From simple stuff that just randomizes the trials and prints out instructions for me (if the experiment involves physical objects I need to manipulate by hand), to more complex animated, interactive experiments (basically like little games). Data analysis is everything from standard regressions and ANOVAs to more complex timeseries analyses, mostly borrowed from statistical physics, that I usually end up implementing myself following along with an academic paper. I also do a lot of data visualization as part of the pipeline, which is where I get to be more creative. I teach statistics as well, so I make simple plots to illustrate points in that context. Along the way, if there's something I feel that could be useful, I make it into a library and hope that other people use it. So far I don't think anyone has yet, but someday... For example I made [a library for running experiments in Python](http://experimentator.readthedocs.org) that basically handles the "boring stuff" like randomizing trials, leaving the experimenter to program whatever handles inside the trial itself (as opposed to other experiment libraries that try to handle everything from I/O to timing to experiment design. `experimentator` just does experiment design). I wrote [a library that provides 2D shape primitives for use in pyglet](http://pyglet2d.readthedocs.org), allowing for easily animating polygons with velocity (and angular velocity), etc. Most recently I stated working on [a program that takes data in CSV files and animates it in a 2D top-down view, in a web browser](https://bitbucket.org/hharrison/data-player). For example my colleague has data from football (soccer) matches that he wants to analyze, this lets him easily explore what's going on in a play, show it in a talk, etc. This one is pretty new and doesn't yet have docs or an easy interface. All this is mostly distraction/procastination from finishing my Ph.D. But I find myself enjoying making these libraries that facilitate research more than doing the research itself.
It needs a lot more training, more than five film ratings and probably a good amount of work done on the data to remove any bias.
Our department keeps a calendar of activities in excel. I use python to import that spreadsheet, break the activities into itemized tasks, put due dates on each task, and spit out those tasks for each teammate.
I keep hearing that one should find a repetitive task that you can automate.. turns out I have no repetitive tasks at work &gt;.&lt; I mean, I do - like entering my hours every month - but that can't be scripted since there is so many different tools and whatnot to draw things from. Anyway, so I finally found a thing! But it's not exactly kosher I guess, I have script that goes over our NAS with series in folders. It will then see which of these series we don't have all episodes of and then download them. Still a work in progress, but I hope to soon have it running as a cron job so I don't need to worry about it anymore.
Haha. I was just playing [Mine Defense](http://scholtek.com/minedefense) the other day and was wondering if there is an easy way to emulate input in python, but was too lazy to google. Thanks for the info =) 
Lately, I've been analyzing sensor data at work. The sensor is supposed to give a readout based on how far along the sensors length it's being actuated, but it has some error. I made a robot that takes a lot of data under different conditions: how off-center the actuation was, stroke direction (ascending vs descending), how strong of an actuation it was, and some other variables that affect the sensors output. I made a GUI in Python to analyze all of the robots output, then make plots of the error based on the different criteria. Knowing what error is acceptable to our customers, I can say: "Ok, the actuator can be *X* distance off-center and still be acceptable" or, "The actuation strength needs to be at least *X* or at most *Y* to give us good results". Python helps me leverage the data available to me, and helps me make intelligent data-driven decisions quickly. I was able to create this program in Python in a couple days, and it has greatly accelerated how quickly we can improve our product.
So you don't have to play the games and they play themselves? That would be awesome!
I need to use "get_followers_ids" to get there followers not the list which prints the statuses. I am still having problems getting more than 5000 followers from a specific id. It keeps looping and giving me the same 5000 followers over and over again.
if only we had a python3 update &lt;3
I use Python for all sorts of stuff. Mostly because it's the only language I know well enough to actually do stuff with. Most recently I've written a small application that takes in a text file, searches through it and moves every instance of a ", A", ", An" and ", The" from the end of a line to the front. Cleaned up 10.000 musical artist names with it for work. Got a little GUI for input and output going, as well, even though only I use it. I also wrote a script to take in two text files and compare them and spit out the lines that are in both in one file and the one's that aren't present in both in a different file. Usually I use a combination of Powershell, Bash and Python to do file operations on a huge number of files, basically. Usually I get Bash or Powershell to dump filenames to text files and then perform the hard operations with Python and then iterate over the outputted text files with Bash again to perform the actual actions. It's hacky, but I'm not a programmer, I just got handed this job that happened to be a lot more efficient with programming. ^I'm ^also ^not ^a ^rapper. 
What database do you check against and how to you find the actual files to download using it? Have you heard of CouchPotato? I think it's open source and maybe you could glean some things. 
We are working at https://github.com/griganton/telepy on creating such API, but there is still a long way to go. Feel free to participate if you want :)
This is another interesting article with a different take (a little more visual). http://www.danielforsyth.me/analyzing-a-nhl-playoff-game-with-twitter/ I have also been fooling around with this extensively scraping tweets and using Ipython to analyse sporting events in real time. Next step is to build a flask app that reports back results on a web page with graphs and analysis in real time. Actually I think it would be pretty cool to have two columns in a head to head twitter match to view how fans of each team are using twitter during a game. What they are tweeting about, from where etc etc. This is just a really rough example using ipython. The next part is to develop the flask app. http://www.linuxnorth.org/jays.html Thanks for posting I find this stuff really interesting.
I plan on making a freeNAS and PLEX server soon, and I'm planning on using CouchPotato for this. Is there a reason I shouldn't?
&gt;Actually, I'd probably never do that by hand Me too. STRENGTH IN LAZINESS.
Fair enough, i'll x post. Sorry. 
I'd love to hear more about the backend on this. Where are you pulling the data from? Is it a random recipe, or can is customize?
I have to know more about this! How does it choose which recipes to send? Did you make a list beforehand of dishes you'd like to try, or does it scrape recipe sites?
My brother in law has a "habit" of going to jail. All. The. Time. My wife wants to know when it happens, so I setup a script to poll the local jail inmate rosters, and send me an email when his name shows up. It works pretty well.
I have heard about CouchPotato, but I am trying to take the babysteps approach right now because I tend to jump in an overdo it and then never finish things. I actually take a quite naive approach that lets me learn ( hopefully) a lot of things. What I am doing is: - generate a list based on the folders on my drive - use BeautifulSoup to scrape a link fetched based on the chosen folder - Do some stuff with the info on the fetched html page - Find the right .torrent file(s) and throw them in the directory monitored by my torrent client This does mean the script is totally based on the setup of the torrent search page that I use, but ok. To be fair the finding of the link and downloading the file was the easy part, I am struggling right now with making the cli menu to navigate this script &gt;.&lt; Oh and in case I misunderstood you, what I do is look at the filenames which all have SxxEyy in there somewhere and then I run it through a function that tells me a) what is missing and b) what the next one should be. If it can't find the next one online then it concludes the series is up to date.
pyenv is great, but it can have one annoying catch: if you ever set a local version via `pyenv local x.y.z`, a `.python-version` file is dropped in your current directory. If you're in that directory--or any descendant directory--then `x.y.z` will override whatever you try to set via `pyenv global a.b.c`. So, to make sure this didn't continue to confuse me, I [added pyenv's current version of Python as part of my PS1](https://github.com/jackmaney/bash-profile/blob/27adfe5fc42c41cf28688278c869f13fa74b5453/.bash_profile#L19-L28) in my `.bash_profile`/`.bashrc`/etc. This also keeps track of whatever virtual environment I'm in (via `pyenv-virtualenvwrapper`).
At my old job, I'd be given a tsv file that would need to be imported into our database, so I had a python script I wrote that would parse out the file and create the SQL query I had to run.
I'm currently doing a project very similar to this. I have a barcode scanner, use an API to search a database to retrieve product info, and then search BBC Good Food for recipes including the ingredients I have and return links to the recipies. I am practicing page scraping as I hadn't done it before.
upvoted, pls deliver OP
I'm gonna echo all the other replies. Can we get more details and possibly some code? Pretty please?
https://github.com/realpython/python-scripts
I've been creeping in this sub for a while. I started to try to learn python via some website, don't think it was codeacademy. I remember the project was to ultimately build your own web search. Eventually I just got burned out from that and work. Reading your post makes me want to give it another go. Kudos
Read excel spreadsheet of network elements -&gt; check database that network elements report to periodically -&gt; if element has not reported in the last hour or so log into the element's remote power supply and reboot element -&gt; send email report with all of the network elements that are down with all of the information that I need to troubleshoot further. This is a script I wrote in college. It monitors my laptop for me while gone. It allows me to send commands to it via email. Commands like take a screen cap, a short audio recording, pictured with the webcam, and turn on a keylogger. The results are then sent to my phone via SMS. I haven't worked on it in a while and its kind of shitty code...
I seem to use python as a calculator almost daily now, I have pn aliased in my shell's rc, so it's much quicker for me than xcalc or something.
Fun! I'll definitely be looking at the source for both the graphics and the algos. In playing around, I found some issues that you may or may not want to fix. The first one is critical. The second one is annoying. The rest don't matter as much. * KMeans.py needs to import math (at least for me) * I can't figure out how to exit the thing without killing the terminal. * interactiveKMeans needs to bounds check. It throws errors when you run without cluster startpoints. * KNearestNeighbor: should the "Current K" update dynamically? * InteractiveNaiveBayes: pressing "a" before adding points causes a crash. Similarly with "l" without points. KNearestNeighbor didn't seem to have this problem. 
I use Python to search Cisco CUCM Call Detail Records when HR asks for a report of "who called this extension on these dates" or "what numbers were called from this extension on x date". Before writing the Python script I had to import the CSV file into Excel and delete all but 5 columns from the 60+ columns, convert the date from epoch to human readable format, and then sort by extension, date, and time to find who extension xxxx called, then sort it again to find out who called extension xxxx. Then copy and paste those rows into another Excel sheet. Now I just download the CSV file from CUCM and run the Python script with args and it creates a CSV file with only the information I need formatted the way I want it. Down from at least an hour or more to about two minutes per request. This was my first production script after learning Python on Codeacademy. I'd love to find more uses for Python in my environment, but many of the scripts I use are Powershell for ease of working with AD and connecting to computers/servers to manage them remotely. Since this is an all Windows environment, Powershell gets used more often for scripting. My primary motivation for learning Python is for network security. I'm trying to bust out of my Jack of all trades admin job and get into netsec. After taking the Codeacademy Python course I started the Pentesteracademy Python course that I'm working through now.
Semi-serious question: Can the script also post bail or put money on his books?
Well ok. It's not really a useful task but it keeps me entertained. I also wrote a simple shell script so I use it with variations of cowsy. Also, NSFW text I guess. http://porncumment.herokuapp.com You can give your own names like http://porncumment.herokuapp.com?names=name1,name2,name3 
Our customers use an ERP system backed by an Oracle database. One component of the system is an alert program that generates and sends reports depending on various parameters. Sometimes the program crashes, so we use a Python script that checks if the program has talked to Oracle in the past _x_ minutes and restarts if there hasn't been any activity. It's very simple but effective. 
Nope. We never post bail for him. We don't put any money on his books, we'll only give him gift packages for holidays and his birthday. That would be cool to write though :)
I'm writing a cli app that reads in a csv of my past financial transactions (downloaded from my online banking service), prompts me to categorise the sources, and then outputs a summary such as percentage of total spending that went on beer. I tried to do it in C as wanted to learn C, and never got halfway (in over a month of evenings) as C is hard. Started last night in Python and got almost halfway. I really like Python.
Search for pyVisa and was not disappointed. I use it to run overnight (or overweekend) automated tests on custom testchips. I can control the power supply, DMM, and oscilloscope via python, push vectors (at low speed) via pySerial, and dump a giant csv file of results. I deal with only a few parts (maybe 30) compared to your 1000+, but there's no way you'd log these result by hand and using the software provided by the equipment manufacturers is an effort in frustration in my experience. My only complaint is that it doesn't want to work with a specific piece of Agilent test equipment, so that requires ctypes and wrapping their c libraries.
I've been using selenium with ghostdriver when I'm using python3, works just as well for what I've needed so far.
-forgets to iterate in a loop -makes chicken marsala 65,536 days in a row
A lot of it is because I wanted to try it out. Part of it is just that it automates the really mundane tasks of a game so that some of the real fun happens faster. The rest is that coding something to play a game is sometimes more fun than the game. I've really only done it for the idle-type clicker games. There was one other game that was kind of a shortest-path finding game that I was trying to do some some computer vision stuff on and have python solve it for me. 
can u share the script pls thx in advance 
One of the projects I worked on required a cluster of computers, as it was too huge to run on any one computer. The programming of the project was done, but we had to run one instance of the program on each core processor in the cluster. As time went by, we found old, unused computers and added it to our cluster. Scheduling an instance of the program on a core processor (with the next set of parameters, taken from the central server) and provisioning/bootstrapping a new computer to be a part of the cluster was all done with python and some bash
I'd be alright with that.
I made a vim plugin that lets me interact with SoundCloud and a headless VLC instance. Not complete automation, but it is faster than using the SC website and I don't have to leave my terminal to skip a track.
That sounds like a bit of a chore. The way I learned python was by just messing around with whatever task I needed to do, until I could automate it. Say, for example, you have this huge textfile where 1 value needs to be replaced by another based on something else in the line, *or whatever*. Just write a custom Python script, only for that particular file. Use some Google Fu whenever you get stuck. Yeah, it's going to take a bit longer the first time. Yeah, it's going to be crap code, and really wonky, and all that. But sooner or later, you'll start to figure things out. And when that happens, go nuts. Go for ambitious projects, but make sure that the projects actually matter to you. Something that *would* help you. You'll learn in no time.
What kind of sensors are you using?
You got it. They paid some contractor back-in-the-day to add the functionality, but nobody considered how to optimize this business process (like, at all). What irked me the most -- and in hindsight should've been a warning -- is that prior to me joining, this organization had an admin/developer on staff who was perfectly content to manually push that button all day... 
Was power monitored for the building or just the outlet the coffee pot was on?
DS18B20+ for temperature, using [this library](https://github.com/timofurrer/w1thermsensor) and AM2303 for temp/humidity (still a working on reading from this). They control a [sainsmart 8-channel relay](http://www.sainsmart.com/8-channel-dc-5v-relay-module-for-arduino-pic-arm-dsp-avr-msp430-ttl-logic.html) in order to turn on/off the heat pads and misting system. I'm using RGBW LED light strips for lighting EDIT : I'm using Flask so the sensor data is available as a REST web service (JSON payload) and am attempting to use Polymer/Web Components for the front end
That is def what it became. I've learned powershell AD stuff in that aspect of just doing thing sin the powershell window instead of using AD GUI I have one task that I'm thinking I may be able to use python for. There's a machine at work that does a backup to a text file. I need to convert it to a formatted excel type sheet. The problem is that every so often it will pop up a bogus line of text w/someones user ID. So the formatting isn't always as you'd hope. Like info, info2, info3
That sounds really cool! That would really come in handy when it's been too long without a grocery store visit and one needs to get creative with not very many ingredients.
I like that idea. what module do you use for ssh-ing to the router? I wrote an app that collects data from about 300 routers, switches, and WAPs using pysnmp. It dumps the data to a SQL database using sqlalchemy for others to research. I use flask for the front end to view device information. I can also generate physical maps with the data, right down to the device connected to the port by putting it through graphviz.
This... is a great idea. I might have to steal this idea for my own uses. I might make it an interactive webpage, though, instead of just a standalone script. So I can update recipes on the fly. Maybe have my fridge stats as well.
I work as recruiter. My most used tool is Linkedin. To build my network I have built a bot that sends invitations to people based on a list of keywords. It also forms query strings based on previously invited people (i.e. python NOT ("company name" OR "company name" OR ...). It does also form custom invitation messages based on keywords that it finds on profiles (different messages for specialists and for people in upper management).
Great tutorial. Gonna file this one away for later use.
I work in energy markets. I used the Requests library along with the Python wrapper at Forecast.io to automate the downloading of hourly weather forecast data, which I feed into energy demand forecasting models. I've found the forecast accuracy to be very good compared to other, very expensive, commercial products. I've also used the Requests library to automate the downloading of actual energy demand information at the hourly level. I combined these two processes to calibrate my forecasting models to the latest available "actual" results. All together, I've greatly improved our energy demand forecasting capabilities. Having the whole process automated is a huge time saver. edit: I said "their", I meant "other", with regards to commercial products
I read this and spent the next couple minutes chuckling as I read over the source code and examples. xD
It was monitoring the three power lines of the whole floor. Luckily on one line there was only the kitchen and some constantly running workstations so the coffee peak was pretty distinguishable. Even from the electric caddle which ran about 4 min. Edit: electric kettle
oh all kind of shit
What database are you using?
/r/bestof 
I'm really tired today (started getting up early to go to the gym this week) and this made me laugh so much harder than it should have.
It's called Outpan. It doesn't have that many products to be honest, but it's api is very easy to use, and it allows me to add product information for codes that it's missing. Plus it's free :)
I'm doing data mapping for data migration at work. And apparently every single table in the database (&gt;400) needs to have a Word document table as part of the design documentation. So I wrote a script that takes the mapping data, generates 400+ Word documents, and populates each one with the mapping data in the table. It's saved me a ton of time.
I really like the IMAX - I don't go to the cinema very often, but when I do, I go to the biggest screen in the UK. Problem is, their communication isn't great and you can quite easily miss the opportunity to get good seats for the big releases. I solved this problem by writing a simple scraper that checks their site once per evening. It uses headless webkit instance because some of the listings are hidden behind an AJAX request and you need to click on a certain tab. If it finds any of the search terms that I have added (e.g. "interstellar", "lord of the rings all-nighter", etc.) then it emails me straight away. Otherwise it just emails me a summary of what is upcoming once per week. It works pretty nicely - I found out about the Dark Night all-nighter the day that the listing went up, before it was announced.
Also works with other subreddits, there is an option in the start menu to change subreddit. To set praw up, run setup.py. Then run amaunmissable.pyw (the main program). This is my first project so feel free to critique my code.
Also works with other subreddits, there is an option in the start menu to change subreddit. To set praw up, run setup.py. Then run amaunmissable.pyw (the main program). This is my first project so feel free to critique my code.
Check out Sonarr as well.
If there was ever a program/script that deserved to be put up on github... I'd say this is it! ;)
If you're on linux the easiest thing I can think of is to use python in conjunction wtih cron or whatever the scheduler happens to be.
I think that's partly my mistake for not really knowing what "K" does. I went back to the README and found that +- are used to adjust "K". I'm pretty sure that K is the number of lines that get drawn when in "l" mode. However, I couldn't get it to actually change for me. My original point was from a misunderstanding of "K". I thought it referred to the label of the nearest neighbor. 
You should check out Splinter. It works on top of various headless and normal browsers, so you can use Selenium if you need to see it in action, then switch to PhantomJS so you can get it working faster while still executing JavaScript.
I recently threw together a script for parsing a sitemap and taking a snapshot of each with PhantomJS.
I use mine for creating some simple blog content. I created a script that takes the CSV output of Google Analytics for a given month and produces a list of the top posts for the month featuring the title as a link. I also have a script that pulls out any shortened URL's from the CSV of my Twitter analytics feed, lengthens the URL, and grabs the title from those posts to create a weekly "top tweets" post based on which ones followers interact with. I'd love to figure out how to write each multithreaded to speed up the process, but that's a little beyond my programming abilities and it works well enough for now. They're not fancy, but they work and they save me lots of time. 
Sounds like a nightmare of a company! Oh well, just know that there are a lot of them out there! :) Too many people who don't understand how to build and design repeatable, scalable processes. 
You don't need to install Excel. USSR the closed XML libraries. Much faster than com interop. Remind me later and I'll send you some code.
Meant to type use
We use Selenium A LOT to address issues in a product we support (not Salesforce). Using Python and Selenium has enabled us to overcome some pretty big deficiencies in the system.
In MATLAB, this is called an anonymous function. In Python, the same functionality is from lamda functions. Also, be aware that functions are objects in Python, so you can pass a function name as a parameter: def foo(a,b): return a+b def bar(func, a, b): return func(a,b) Then you could just say bar(foo, 2, 4) And it will work the way it feels like it should, no special work needed.
You can pass the user's input to the dog class by writing `dog(name=custom_dog)` (or even just omit the `name=`). You can then do whatever you like with the argument by handling it within the `__init__` function of the class, e.g. with something like the following class Dog(object): def __init__(self, name=''): self.name = name def say_hello(self): print('Hello, my name is {}. Woof!'.format(self.name)) Then, returning to your original example, you could have e.g. dog_name = raw_input("What is your dog's name?\n") custom_dog = Dog(name=dog_name) custom_dog.say_hello() Note that I also changed `dog` to `Dog`, capitalising words in class names is a normal python convention.
Could you please provide the source? (But fill in dummy info for the credentials and websites)
You were correct. I solved the issue. Thanks a lot 
I second this request. This would be incredibly useful in my day to day life.
First thing is definitely on the list, the latter I hadn't thought of. But good point :) I'll probably post the code to /r/learnpython when I have it somewhat working to get some peer review
/r/learnpython
If you need to literally simulate mouse and keyboard input, look into the pywin32 module. However if all you need to do is convert images why not just use a bulk image converter?
Yep, another vote for Selenium from me. I use Python and Selenium to scrape a customer portal and feed data into a PostgreSQL database. Prior to automation this activity was taking approximately 80 human hours each month.
I use pycrypto http://eli.thegreenplace.net/2010/06/25/aes-encryption-of-files-in-python-with-pycrypto I'd tend not to try and roll your own when encrypting.. This will give you AES256 encryption..
How do you scrape the pdf? We receive customer debit notes as .pdf, and I use pdftotext (as an external command). It's been a while since I've looked at it because the code still runs, but I think I went with pdftotext because it preserved the column formatting better than some of the other tools I looked at way back when.
You can use a dict: dog_dict = {} dog_name_string = raw_input("What is your dog's name?\n") dog_dict[dog_name_string] = Dog() #wow, no variable name needed Now you want to make Fluffy bark? (assuming that's a dog in this dict after user has entered a few dogs) dog_dict['Fluffy'].bark() 
You might wanna look up RoboBrowser on Github. Works with Python 3 and is like a fusion of Mechanize and Requests.
I hope those are not the only times she visits him...
Thank you so much! This is EXACTLY what I was looking for.
Perfect! That's exactly what I needed. Thank you!
How does one monitor power consumption? Is it some sort of sensor attached to the switchboard? 
https://en.wikipedia.org/wiki/The_the
On windows, use `chcp 65001` in the terminal. And change your font to something that supports unicode. Lucida Console works for me in Win7. In linux, if your terminal doesn't support unicode, you need to upgrade. xterm supports unicode since XFree86 4.0, and that was March, 2000. Most linux distros default to unicode in their ttys and have for a decade. Putty and Ssh, if they're misbehaving, are misconfigured. See, for example, http://thegreyblog.blogspot.ca/2009/08/configuring-putty-to-use-utf-8.html
already done. check out vinelink.com can set up email or sms notifications when someone is released from jail. when they are put back in, it will notify again.
`isort` (which this plugin uses) **does** sort them exactly like that, just alphabetically within those groups.
Interesting, you are already onto my next project for work. Honestly I use paramiko, but I don't use it for the way it's intended, I basically just use it for it's raw shell access. For some tasks that are used on routers such as encrypting keys, and updating IOS, it's easier to access the router via SSH just using local shell and waiting for output buffers. It will then store these commands in a SQL DB or do a function upon their output if called. I was using flask as my base when I first started with python, I really liked it, I just needed more documentation and module support. Honestly after messing with Django, sometimes I wonder if I should have stuck with flask. There is a lot more freedom, but in that freedom it also created complexity as you had to already know what you were doing a bit to do the more advanced web features like websockets, registration, and just over all organization. I think now I could use it and be fine, it would just take a bit longer. I miss it though. Quite often. When you are doing some things to cisco routers you can't correctly set them over SNMP because of prompts and what not. We work in a diverse client base and each device is slightly different. Best way is to automate ssh commands with semi expected outputs. I use CiscoConfParse as a module to really get into the converting IOS configurations from device to device. If you use Cisco style configurations for your devices, you might look into it. I want to build a auditing system that checks routers for standardization with ACL's and what not as well. But about your Pysnmp project, I'm literally getting ready to dive into that for a alerting system, I'd be super interested in your source if you've published that anywhere, what are you graphing BGP tables, ARP, routing tables or?
I was gonna come here to talk about how I set up a script to download and launch the latest build of our project when our lead uploads a new build to the server and how cool that is, and then I saw the top comments.
real time trader?
Anything allowing you to charge prisoners or their families for some required service is a goldmine in the US.
&gt; I don't know if its worth the effort to save another two minutes. Try using xkcd's optimization chart : https://xkcd.com/1205
[Image](http://imgs.xkcd.com/comics/is_it_worth_the_time.png) **Title:** Is It Worth the Time? **Title-text:** Don't forget the time you spend finding the chart to look up what you save. And the time spent reading this reminder about the time spent. And the time trying to figure out if either of those actually make sense. Remember, every second counts toward your life total, including these right now. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/1205#Explanation) **Stats:** This comic has been referenced 178 times, representing 0.3109% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cpqtvfj)
So I'm a pretty terrible programmer in general, but... I'm a physics PhD student, and I use a publicly available program to do some simulations, but the output is not read easily - it automatically is saved in some binary-8 format, and can be converted using tcl to a normal text/decimal format. The output is something like 2000 files and doing it manually would suck. So I run it through python with a for loop to do all the conversion. Then to get the average distribution through all those files, I use a python script to iterate over the ~2000 text files. I really do this for all of the analysis with the output files, not just the averaging, but that is most common. *begin rant* Anyways, everyone in my field seems to need to do this, but nobody likes sharing their code... This is a huge pet peeve of mine, because it really is something people need to do, but everyone wants to be special, and that ends up wasting the time of other grad students when they need to learn to do it themselves, instead of focusing on the science aspect. I'm thinking of learning to use github to make it available for people who need it (although I'm getting some blowback from others in my lab, saying I need to keep all my code private because its important to do these basic things that others can't). *end rant* 
PIL or OpenCV can convert your images. You don't need a separate application. If you do need an application, I'd look for some python bindings to it or a command line invocation. Working with closed source stuff on windows can be a pain. edit: and /r/learnpython in the future please
from the sidebar: &gt;If you are about to ask a question, please consider r/learnpython. Homework-style questions will be removed, and you'll be encouraged to post there instead. &gt;Posting code to this subreddit: &gt;Add 4 extra spaces before each line of code def fibonacci(): a, b = 0, 1 while True: yield a a, b = b, a + b 
Here is a github search to find Python projects with open issues with the 'help wanted' tag: https://github.com/search?l=Python&amp;q=label%3Ahelp_wanted&amp;ref=searchresults&amp;state=open&amp;type=Issues&amp;utf8=%E2%9C%93 You may be able to find something interesting there.
&gt;All this is mostly distraction/procastination from finishing my Ph.D. But I find myself enjoying making these libraries that facilitate research more than doing the research itself. Thats how a surprisingly big amount of widely used python tools are created!
I'm a Salesforce admin/dev, and I am absolutely horrified at the stupidity of this.
where do you find jail rosters online?
opening random files in a text editor?
I am using Python for a custom text search. It downloads emails, scans files, collects file metadata so I can search across anything (sort of like Google desktop did some years ago)
My porn library is tagged and organized meticulously with Python.
Hey just a suggestion,it would be handy if you able to specify a path to the image as currently the script need to reside in the same directory as the image :). 
A python file. The idea is to either continue a project or start something new. For me, getting started was the challenge. Once I started coding, I found I got a lot done.
&gt;I am planning on extending it to use OpenCV to parse any type of receipt from a photo. I've looked at doing something similar with receipts, but it is a drag. You effectively need a large training library of receipt photos to get any reliable record. Out of the box OpenCV is awful and tesseract is only slightly better.
I use python to control a robotic whiteboard that I built. https://www.youtube.com/watch?v=8GwKrBInhpY
You lived in a hall?
Nonono. The proper shebang line is #!/usr/bin/env python Then you mark the python script executable and run it. You don't need to wrap it in a shell script.
I used to use python to write all sorts of applications that would make my job easier. I wrote: * A task manager with a GUI with time-based pop-up alerts that import tasks from Outlook. * A GUI app that would look at emails that contained potential shipments(I work in the freight industry) to move, and would use regex to pull the relevant details like origin/destination(checked city/states against a database), shipping dates, rates, and mileages. It would write all the orders to a csv file that would get uploaded to our freight management system. It also worked for pulling details for available truckers/trucks to upload into the freight management system. I wrote a bunch of other small scripts that did file formatting and other boring tasks. I was then picked up by our new development team and I get to write a ton of php, mysql, javascript and bash scripts to automate call centers.
Is this in window? If so you could probably use the task scheduler and trigger on event. Choose to trigger by event and then choose. Setting Basic Log: System Source: Kernel-Power Event ID: 42 
I got hired on contract as a web developer. Unfortunately, taking this grey text and making it a slightly different shade of grey is not terribly exciting to me. Fortunately, my boss felt that he needed someone to handle his VPS and various shared hosting accounts. This to me doing a lot more linux/server stuff. One of the things I was tasked with was making weekly backups of all of our sites. Most of these backups had to be made through a web portal, as we didn't have root access to any of our shared hosting accounts. Fortunately, as it mostly the same series of clicks over and over, python and selenium turned a process that was two hours into two mouse clicks. Still though, my boss doesn't want to just lose that workstation by having it on and logged into my profile all the time. I don't like having to make a special trip into the office just to double click the button. In the face of my unprecedented level of laziness, I think the solution is obvious; further automation. I'm just going to put those scripts (and likely others I develop in the future) on a raspberry pi and schedule cron jobs for them. I've also used python to modify files in various ways. The project for last week and this one is to take a very frowny excel file and make into a slightly less frowny access database that actually has tables that represent related objects. (As an aside, have any of you ever had to make a business case for data normalization? I sort of thought it would be obvious, but I had to fight surprisingly hard for it.) Anyway, as I can't just import directly from the excel file as that would result in one huge ugly table and solve none of the problems I wanted to solve. The solution is to pull out individual fields, possibly massage the data a bit, and dump it into the appropriate field in the appropriate table in the database. Now, realistically, I could likely do this by hand and still get it done... eventually. But really, unless the data set is so small that there would be a significant time savings in doing it manually, I'm not going to do work that boring. I'm going to get a computer to do it for me. I've had to do similar things when updating mobile apps. (It turns out that in android development, android studio doesn't care for images have have upper case letters in their names.) Am I going to rename 90 images manually? Of course not; that sort of task is for people that don't know one or more scripting languages. Python is the first programming language I learned, and the one I know the best. And even though I'm not nearly as competent as some of you, it's still really difficult for me to imagine what my life would be like if I wasn't at least somewhat familiar with it. (Well, I suppose any scripting language would work, but python is stupidly easy to write, so it's really convenient.) I mean, when someone wants their computer to do something it doesn't yet know how to do, how do they tell it what to do? I mean, I know there's already an app for most common tasks, but surely everyone runs into odd edge cases eventually. 
The guy was pretty clear about wanting to learn how to do it... Also the OP was regarding asymmetric encryption - the link you provided pertains to symmetric encryption. OP: Take a look at something like: http://stackoverflow.com/questions/8539441/private-public-encryption-in-python-with-standard-library
You can expose any code you want over the API, but there's good reasons why it didn't make sense in this case to rewrite that code to work over the API (a lot of challenges involving legacy code, evolving business processes, and plain-old time considerations).
I use it in Rhino 3D to calculate large scale display sizes based on ratios. I also script best view angles, range of viewable points in places like Times Square. Lots of analyzing coordinates relative to planar surfaces and calculating costs and feasibility based on size, area, and visibility from specific traffic flows. Fun stuff. 
A senior design group at my university is working on a similar idea. It's a fridge manager-recipe recommender-super app. You can track the foods in your fridge (or grocery list), keep track of expiration dates, and it'll recommend recipes to you based off of the ingredients that you have. It's pretty nifty. 
This sounds like a lot of really great stuff! If I had the need to run trials and collect data. I'd be glad I stumbled upon this post. ...I'll save it...just in case.
it should, would be easy to test. Just make a script that sleeps for a minute or so and see what happens.
No, closer to the retail side 
Log into a private torrent tracker and spend some of my accumulated points for upload credit - run it nightly at 1:00am with a cronjob. Tweets me when it's done with the results. Separate script then checks for new torrents and downloads them (could probably just use their RSS system, but this was more for practice).
Wait, are you talking about an *electric kettle*? Or is this a regional/local terminology?
Go was invented for building systems, not apps. Android is a Java platform. It probably would have been better if Go was the language of choice for Android from the beginning. But there's no way to change that. So it's very questionable what benefit there would be in investing resources to bless Go as an official language for Android development after the fact. Chances are it would accomplish nothing more than fragmenting the Android community. Unity is strength.
Thanks for your interest , we've added you to our database! 
pip install mitmproxy
Day job is enterprise java, they use checkstyle but the output is this crummy xml file that I can't be bothered to read. 10 lines of python filters out everything but the real errors. 
[Relevant xkcd](https://xkcd.com/1319/)
[Image](http://imgs.xkcd.com/comics/automation.png) **Title:** Automation **Title-text:** 'Automating' comes from the roots 'auto-' meaning 'self-', and 'mating', meaning 'screwing'. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/1319#Explanation) **Stats:** This comic has been referenced 163 times, representing 0.2844% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cpr2ydl)
Why not support both?
You deserve gold. I don't have any, but here is 100 bits /u/changetip
The Bitcoin tip for 100 bits has been collected by *rcklmbr*. [ChangeTip info](https://www.changetip.com/tip-online/reddit) | [ChangeTip video](https://www.youtube.com/watch?v=_AnfKpypMNw) | /r/Bitcoin
Like I said, it would divide and conquer the developer community. It's a bad idea for the same reason that having a million Linux desktops is a bad idea. Mac has one really epic desktop named Cocoa (or something) and it's the best there is. Linux has Unity, KDE, XFCE, i3, CDE, TWM, OpenSTEP, XMonad, Enlightenment, etc. which are all sort of OK but not very good. Too many choices crippled the ability of engineers to cooperate. It's why we never had the year of the Linux desktop. Ideally, there should only be *one true canonical approach* to any problem, along with a second fallback solution. In the case of Android, the fallback solution is buying an iPhone.
Sounds like CS101 from Udacity!
Sounds like those might be the only times that she knows where he is so that she *can* visit him.
how did you do this? this sounds pretty cool 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Trojan Room coffee pot**](https://en.wikipedia.org/wiki/Trojan%20Room%20coffee%20pot): [](#sfw) --- &gt; &gt;The __Trojan Room coffee pot__ was the inspiration for the world's first [webcam](https://en.wikipedia.org/wiki/Webcam). The [coffee pot](https://en.wikipedia.org/wiki/Coffee_pot) was located in the corridor just outside the so-called Trojan Room within the old [Computer Laboratory](https://en.wikipedia.org/wiki/University_of_Cambridge_Computer_Laboratory) of the [University of Cambridge](https://en.wikipedia.org/wiki/University_of_Cambridge). The webcam was created to help people working in other parts of the building avoid pointless trips to the coffee pot by providing, on the user's desktop computer, a live 128×128 [greyscale](https://en.wikipedia.org/wiki/Greyscale) picture of the state of the coffee pot. &gt;==== &gt;[**Image**](https://i.imgur.com/JnBuaAH.png) [^(i)](https://commons.wikimedia.org/wiki/File:Trojan_Room_coffee_pot_xcoffee.png) - *The coffee pot, as displayed in XCoffee* --- ^Interesting: [^Quentin ^Stafford-Fraser](https://en.wikipedia.org/wiki/Quentin_Stafford-Fraser) ^| [^Hyper ^Text ^Coffee ^Pot ^Control ^Protocol](https://en.wikipedia.org/wiki/Hyper_Text_Coffee_Pot_Control_Protocol) ^| [^Computer ^Laboratory, ^University ^of ^Cambridge](https://en.wikipedia.org/wiki/Computer_Laboratory,_University_of_Cambridge) ^| [^Krups](https://en.wikipedia.org/wiki/Krups) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cpr3u95) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cpr3u95)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Yeah but with a programming language? When I run a compiled application I don't have to put much thought into what language the source code for it was written in. And Android already has a bunch of different launchers, custom branded versions like TouchWiz (Samsung), Sense (HTC), CyanogenMod etc. 
You should look into recipe database software (I use [Gourmet](http://thinkle.github.io/gourmet/)). It would give you a much better interface for adding meals, and you could access the database directly with python for your e-mail script. Just a thought anyway, you've got me toying with the idea of doing exactly this with my current recipe database!
Python 3 has a ton of fun features, once you switch, it's hard to go back. 
Thanks for the feedback. I'll look into addressing some of the inconsistencies you mentioned. It looks like the date parser needs some TLC, especially where "natural language" is concerned. It also looks like I need to revisit the the confidence calculation for the postal code parser. That's one of the more recent parsers I've added, so I haven't had as much time to balance it out properly. As far as the ruby parse goes, what was your sample? The programming language detection is driven by a [bayes classifier](https://pypi.python.org/pypi/simplebayes), so this is a case where a larger sample raises the likelihood of detection.
How do you integrate word documents with Python?
That's awesome. Can you describe the components a bit more?
What cron jobs are you running?
Sure! In its current form it is obviously specific to Memset's API, but it's just a simple XML API so the general idea is the same: https://github.com/analbeard/memset_dns_update
Anyone else notice how RES night-mode makes code blocks virtually unreadable. The background used to stay dark, but now it's white and blinding.
It is never. People forget to factor in several things that decrease the expected value. Like the ticket is not being bought in isolation or how as the jackpot increases the contribution to the jackpot of the ticket purchased decreases.
No, I have not. That above solves most of my repetitive problem with files. I hardly write any code more than a screen in python. All other data related tasks are solved in a database. I have looked at the pandas tutorial, and I do not need that beast. 
The pre-tax expected return of a Powerball ticket with an X-million jackpot is 0.37 + X/175 dollars. So the jackpot needs to hit $285 million for the ticket to pay for itself. If you factor in taxes, it's probably more like $500 million (which does happen occasionally). See one of my old posts for the [calculation](http://mathdigressions.blogspot.com/2013/02/powerball.html). Since the payout is so skewed, expected value isn't too meaningful. For example, I've probably spent $100 on tickets in my lifetime and I've only won a total of $4. This is significantly less than the $0.37+ expected return. This is due to the fact that the probability of winning the million or jackpot is essentially negligible.
haha
Linux has Python installed by default. If you code is compatible 2.7, you can just provide it as is or even zip it (https://blogs.gnome.org/jamesh/2012/05/21/python-zip-files/).
got tired of refreshing to look at apartment price listing so I just wrote a short script to use their API to dump the price in a CSV format. (Might write ones for other apartments, but found a new place so now it's for fun) code here: https://gist.github.com/jamesonjlee/30b8dcf5524a1e52c25a 
I accidentally got someone laid off doing something similar once.
I am reading data from an inverter and a residential meter to see how much energy the solar panels generated, how much energy is fed into the grid and how much is taken from the grid: http://solarpi.tafkas.net
All I have to say is DAMN. That is awesome.
Not OP, but I've done something similar (albeit a little simpler and with no Django) using Paramiko, if that's helpful!
If you're thinking about doing it yourself, just use a single outlet power monitor and it will be much more simple and reliable.
I'm into flight simulation. There's a nifty program that can download images from Google Maps and save those as flight simulator scenery (G2XPL). However, it can only do one degree lon/lat at a time, and has to be configured using a config file. So I wrote a few python scripts that automatically change the config file, than run the program. My computer has been running for about four months straight, downloading the entirety of the USA...
So I'm a cyclist (as well as a Python programmer). The next time you put a part of a bicycle on your cover, please consult with a cyclist: 1. You NEVER EVER photograph a bike with the chain on the small chain ring 2. You NEVER EVER have platform pedals on a racing bike 
Yeah, I've come across the same thing in my discipline as well. Thought we were trying to be scientists here, you knuckleheads. Science requires the sharing of tools and procedures ffs!
Look up PyNaCl, it provides high-level crypto tools it calls "boxes"; some symmetric, others asymmetric. If you abide by the threat model and assumptions in NaCl's docs it's designed to make real world crypto-app dev easier.
is anyone using pypy in production? if so, what are its use cases.
similar. data processing.
I've been trying to locate myself somewhere where to get that training, unfortunately with no success, it would be great if someone could shed some light into this matter.
yes, there are people using pypy in production. Roughly 0.5-1% of packages downloaded from PyPI are for PyPy. Usecases are mostly high performance, long running applications (e.g. web servers) where cpython is just not fast enough. Getting testimonials out of people is hard, but the ones we got for consulting work are on http://baroquesoftware.com/blog
Hey, suggestion, I think making some structure to keep data for image is more suitable. Make class or something like that. Then you can manipulate output data.
Heh, fun. I think this would a lot more awesome though if the dictionary was larger. If it queried a dictionary file or website, then you'd get some really interesting combinations. Let's see... *Deliberate Dilogy g*
You measure the current flowing through the circuit. This can e.g. be done with an Arduino or other microcontroller-based setup that measures the voltage drop over a low-ohmic resistor connected in series with whatever draws the power. The microcontroller has an analog-digital converter that converts the voltage to a number.
Computer science academic here. We share everything. Nowadays you're measured by your code.
maybe take a look at burp for some ideas
I wrote a cli to sublime that auto creates markdown docs for daily notes, thoughts, class notes, meeting notes, etc. It then nightly syncs all of my git repositories. Further, it indexes all of my notes for quick search of topics. I label a lists consistently, so my task stack gets pulled and collocated per day so I can see if I'm forgetting stuff. I can search the information using natural language as it gets semantically parsed into what's basically a db query. I call her INCA: the information curating agent. She's half done. I hope to integrate her into a bunch of apis soon and give her some more statistical automation so she can pad the annoyances in life more.
I'm sure my organization is not unique. 80 hours spread out over 2 - 3 people. I think it's a combination of IT departments that are focused on managing hardware assets rather than acting as a resource to help other departments operate more efficiently and individual employees who see laborious data gathering as a way to justify putting on headphones and disengaging for a day at a time. Another anecdote: we had a guy who was manually renaming thousands of text files every month. We found this out after he left the company, I don't know why he didn't say something before he left. Anyway, his work flow was to open up a file, read a couple fields from the first line of the file and rename the file based on the value of those fields. Took about 30 minutes to implement in Python.
It was a simple webpage scraping script. If you send me the URL to your university's library's "which study rooms are available?" page, I might be able to replicate it for you
Forgot to say that all data generated by tests/programming/configuration needs to be saved to database for tracking and some local logs must be created for factory technicians so they can analyze the process, defects and so on. Don't even start with proprietary software, I would do some rely bad things to the guy that invented Agilent VEE or LabView or at least fire a guy who started using them for what they were not intended (large volume production). Every time you write bad code a kitten dies, remember that :) !
&gt; Your request cannot be processed. If you have questions, call (502) 815-5533. Please leave a message, and your call will be returned promptly within normal business hours, EST. Wow, what a great service. 
So if I run my python apps using PyPy they'll be faster than the default python installation? Or, is this only in specific circumstances? I use a lot of PyGame GUIs (that's probably the biggest lag). 
Well, the US have recidivism rates above 50%. So for more than half of prisoners it is when, not if. 
Neat!
&gt; I work in energy markets. I used the Requests library along with the Python wrapper at Forecast.io to automate the downloading of hourly weather forecast data, which I feed into energy demand forecasting models. I've found the forecast accuracy to be very good compared to their, very expensive, commercial products. &gt; &gt; Isn't this what free [dynamic dns services are for](http://www.noip.com/free)?
I used PRAW and a PushBullet library to create a script that runs every 5 minutes and check a list of reddit users for submissions created in last 5 minutes and if any new are found, send link via PushBullet notification to my phone and PC. 
That's why I said it would take a few hundred thousand years. 
I have ETL processes transforming about 300 million records a day, that will eventually have to handle 10-50 times that volume. I've started using Pypy for a 40% performance improvement.
but that wouldn't run them concurrently.
Seconding everyone else that this is a freaking awesome idea. I think I'm going to try to implement my own as well. 
You've correctly identified the issue, that I've raised. My issue with you approach is as follows: do I correctly understand, that in your approach, if multiple say `university` objects reference a single in `grant` object and I was to `jsonify` all those universities, I'll have multiple instances of same `grant` object in result json?
While I agree, I asked in the context of company training. So it would need to be something "official". So the upper brass has some paperwork to play with.
&gt; Isn't this what free dynamic dns services are for? For sure, but where's the challenge in that? I had two reasons for doing this: 1 - I wanted to manage the DNS for all my domains in the same place (I was using he.net's DNS servers for the domain with the dynamic IP before). 2 - I've been (slowly) teaching myself python and as I learn better when I'm writing something I'm actually going to have a use for (as opposed to doing exercises), this seemed like a perfect opportunity.
Possibly, but I'd like to take the system through some more maturity and performance iterations first.
&gt; Some people try to create drama about this for no reason, like they're personally offended that Python 3 doesn't have total adoption. I don't get that. Or, in some cases, that Python 3 exists at all.
Yes. The caveat is that pypy does not support every python library so if you use numpy for example, it won't run 
Hey great library! I'd recommend using [pillow](https://pypi.python.org/pypi/Pillow/2.7.0), as PIL wsa abandoned in 2009.
Yup, makes sense. Not dissing your efforts, just genuinely curious of your reasons.
&gt; The original thought of just squeezing in 10 minutes as a token gesture to myself turned into many late nights! I woke up around 11 am yesterday. "10 mins" before class turned in to not going to class, and staying in Sublime until 1:30 am. I know the feeling.
Better. I've held off on switching to Py3 for years. Because it only needs one library in your toolchain to be Py2-only and it's a showstopper. And there were more than enough that just didn't work. (Or were said to work but failed in use.) And there were no great Py3 features drawing me in. Largely, it seemed like minor variation and tidying of the language. But about 6 months ago I started making the transition and so far there's been no problems. Porting code has been full of irritating problems (lots of string manipulation that used to just work now needs careful consideration of whether it has to be coerced to ascii or not, and some ancient personal code that needs dictionary iterators and exceptions rewritten) but no showstoppers. Having said that - as others have said above - if you decided to commit, you can write near idiomatic Py3 code in Py2, thanks to steady backporting of features and maybe using something like futurize. 
OK, then I officially retract my 'jerkoff' statement ;)
Http://www.realpython.com imo is the best book for learning python. Easy to follow, never boring, straight to the point. Not free though =) but worth every penny.
Thanks for the suggestion! I'll look at pillow and see about using it instead. PIL was so easy to implement it was almost criminal haha.
&gt; What types of things do you use Python for when automating your life or tasks at work? I use python to do a lot of text manipulation, e.g. colouring log output from J2EE on the console as it tends to be very log happy and therefore there's little way to know what's important by default. Now, I can glance at the output and know, e.g., red coloured is fatal, purple is a warning, yellow is informative, green is debug.
Pillow is a fork of PIL- it should be as simple as changing the import.
Very cool! Some I18N things you could consider adding: * Month names in languages other than English. * Dutch names, like: [Robin van Persie](https://en.wikipedia.org/wiki/Robin_van_Persie), [Paul de Leeuw](https://en.wikipedia.org/wiki/Paul_de_Leeuw), [Youp van 't Hek](https://en.wikipedia.org/wiki/Youp_van_%27t_Hek), [Jeroen van der Boom](https://en.wikipedia.org/wiki/Jeroen_van_der_Boom), etc. * Decimals using `,` as seperator instead of `.`.
Sorry, jumped straight on the defensive there, my bad. Yep, I could certainly have done it differently, it was definitely quite satisfying to write my own stuff though.
I know. I like hearing Fernarndo Perez's "Afternoon Hack" story about IPython because it rings true.
Cool, let me know if you do, because even though I've gotten stars on GitHub and people saying it looks cool, I haven't heard directly that anyone's used it (except me). I will warn you though, it was my "learn Python" project (and eventually became much bigger than I first anticipated), so it is a little rough around the edges. I tried to explain the weirdness in the docs, but it's still a bit weird to new eyes I would imagine. I'm trying to get more experience with it before I decide how it can be improved.
I manage content for a few web pages for my company and I have a script that monitors the URLs for downtime and sends me an alert if the public cannot access the page. For some reason our IT does not notice when our webpages goes down.
https://store.enthought.com/catalogue/category/enthought-training-on-demand-course-catalog_4/
Thanks for the suggestion. Auto scaling was an intended feature eventually (as well as calculating what character to choose based on the average of a subset of pixels instead of whichever it happened to land on) but with not as much time as I'd like, it hasn't been implemented. Hopefully soon!
Technically, yes. But I would only use it if you _have_ to use JSON for whatever reason, because dealing with cycles is non-trivial, and rolling your own is asking for weird bugs, and it's better to use an existing solution (like YAML, or pickle, or whatever).
Thank you for the link. I will keep it in mind. Alas, even the advanced course looks still fairly basic. I will keep it in mind though. ... maybe I'm aiming too high.
The only time I use Python 2 these days is for image processing scripts.
Not sure if this is the best solution, but it's a pretty simple one and simple is usually good. When you launch the interpreter you can have it run a script prior to entering interactive mode by using the `-i` flag, so I'd write a short script which modifies your class as you see fit and run it with `python -i switch_shell.py`. You could do things in switch_shell.py like override the `__init__` function of your class to use a default set of credentials (or however you want to handle credentials in an interactive setting, such as requiring that they be passed on the first creation of an object of the class, but are remembered for subsequent objects). You can also create your aliases in this file without worrying about dirtying the actual class. Another option is to use the `code` module ([documentation here](https://docs.python.org/3/library/code.html)), which allows you to run an interpreter and specify the locals available to that interpreter. One reason I can think to do this is so that you don't run the risk of someone being confused by a class definition in switch_shell.py and importing it rather than the actual class you intended for them to use. Additionally, you get a function that you can call from anywhere to run an interpreter with your modified class and you don't have to remember the `-i` flag when running the file. The second option would look something like this import code from switch import Switch def run_interactive_interpreter(): #modify the Switch class here, replacing __init__, making aliases, etc code.interact(local={"sw": Switch}) if __name__ == "__main__": run_interactive_interpreter()
That's neat! Could you show us the source for that? I've been wanting to do something similar for grooveshark.
Do you have tab-completion activated in your interactive interpreter? Sure, writing `switch.Execute('sh int')` can be a pain, but with tab completion it's not all that much more than `sw.e('sh int')`. And having *two* interfaces for the same functionality -- one for interactive use and another for scripting -- could get confusing and become a hassle to maintain.
I teach a Python for data analysis class at UC Berkeley and we use Downey's Think Python (http://www.greenteapress.com/thinkpython/) and McKinney's Python for Data Analysis (http://shop.oreilly.com/product/0636920023784.do) -- both provide nice intros to their respective topics.
For my High Performance Python book (published with O'Reilly last year) I have a chapter on 'Stories from the Field', one of these covers a very impressive cluster of machines for tasks like document scraping, OCR, indexing and web serving with an impressive speedup (and reduction in cluster size) by switching to PyPy. Personally I've heard of several cases now where people have switched a long-running web cluster to PyPy for far more responsive sites (I don't know which stack they're using).
thanks
There's no real docs, so if you have any questions shoot me a PM and I'll respond when I get a chance.
Wow! Thank you!
UC Berkeley must be really nice! Thank you!
This looks like a good option but it does appear to have dependancies on conda being available on the host unless I've mistaken. Ideally I am looking to create standalone executables which can be dropped on a host and executed without any other intervention.
This sounds very close to what I hope to be doing soon. I work for one of the companies that produce that actual hourly data, but not in a development capacity (yet!). Are there any bits of your code or models you'd be willing to share?
Very interesting. So if I do `flit mypackage upload` it will upload a wheel with importable files from mypackage dir (assuming it has an `__init__.py`) correct? Can it support multiple packages (root dirs with `__init__.py`)?
Yep, it will upload `mypackage`, and when you install it, `mypackage` is an importable module. It doesn't do multiple importable packages in one wheel, because I want to strengthen the convention that the distribution name (what you `pip install`) matches the package name (what you import). (The command is actually `flit mypackage wheel --upload`)
That's pretty much it. The only thing I'd do different is set Menu directly, rather than adding and subtracting, and have a separate function for each menu.
As someone who's familiar with bash, fish, and other scripting languages, but not at all with .net or windows programming, where would I go to learn PS?
I dont understand every step of the programm. But i think you could greatly speed it up if you didnt test wether there is a remainder when dividing by your x_scale and y_scale. That simply makes you step through the pixels, with a step size of x_scale _yscale. What you can do instead is add this step_size to the range function. for i in range(0, h, scale_y) That cuts your iterations by a factor of scale_y and scale_x, which is quite alot and there is not need for the if branching. Since this seems to be python 2 and the range list for a big image is kinda big you could also use xrange so the numbers just get generated 1 by 1.
Pillow is a drop-in replacement for PIL - it is imported as PIL and has the same API.
Another option for more speed would be to try out numpy, converting the PIL image to a numpy array. Numpy has optimized methods for calculating minimums and averages along any axis, faster than what the program is currently doing piecemeal.
It's yours to do with as you want. If you're more motivated by sharing cool stuff with the community and helping expand knowledge, open source it. If you want to make some money and are worried that people will use your idea without paying for it, then don't. My advice would be that you'll get more out of the experience by sharing your code and asking for feedback; you're unlikely to make any money by entering a crowded sphere dominated by large corporations, so you'll derive more benefit from treating it as a learning experience. Good luck!
Hello, first and foremost.. **THANK YOU**, such a lenghty and informative post is great. I feel like powershell is going to trump python just b/c it seems to talk really easy w/excel. May look for a powershell subreddit to direct this to. 1.) It has some consistencies. I'd basically need to say grab this data from this cell and put it in NEW sheet that cell For some cells i'd tell it to start .~15 characters in and go to the end. IE _ the ones where it says randominfo: userid I've never looked at csvfix but I'm going to look at it after work 3.) Thats what I'm doing now. The easy part was renaming the files. I have a bit of vb stuff that works in powershell but I want to do it in powershell syntax just to do it. 4.) I never thought about sharing the code and asking for help. I'm really hoping I can figure everything out myself. If so it'd certainly push me and help me improve my skillset. Thanks for the motivation and kind words!
It definitely is your choice, but I find that something as big as this is too much to maintain on your own, so open-sourcing it and possibly getting others to look over it is a good idea, while the risk of someone using the code to exploit it is virtually non-existent, assuming your product is not one of the 20 or so "big" antivirus softwares.
So when you say modify the class, what does that entail, exactly? if Switch is the class: from switch import Switch def newInit(self, ip, creds=None): # New code that looks for a default if no Creds specified # Other code from _init_() Switch._init_ = newInit # or Switch.__init__ = newInit ?? And then pass that through? EDIT: Got back to the office and give it a shot. This exact thing works, and is great. (two underscores). &gt; passed on the first creation of an object of the class, but are remembered for subsequent objects How do I implement THAT? That's exactly the sort of thing I'm looking for.
&gt; the languages are not at all different They are very different when it comes to unicode. Everything else is a trivial change.
This is brilliant. I love it.
&gt; Are there major libraries which still don't work with Python 3? There definitively are. I'm still waiting on VTK and I've given up on wxPython (pyQt is better anyways). I wish Python 3 was the standard version people use, but it's not. I want to take advantage of new features, but I can't because it's not compatible and I write cross version compatible code. Python 3 is growing very slowly and while it's going to be shipped with various versions of Linux at some point, Python 2 will still be around. The fact that 80% of devs write more Python 2 code is a problem. https://wiki.python.org/moin/2.x-vs-3.x-survey?action=AttachFile&amp;do=view&amp;target=2013-2014+Python+2.x-3.x+survey.pdf 
Yes. The Python scientific computing stack tends to work with Py3, but a couple packages don't (like twisted), and if you need these then you're out of luck. Here's a good resource for more info: https://wiki.python.org/moin/Python2orPython3
I think @russel_winder (on twitter) might be able to help. He's based in central England.
Yep, and I'd imagine tab completion will get you pretty far, considering that you'd likely only need to type `sw&lt;tab&gt;.Ex&lt;tab&gt;` to complete `switch.Execute`. If you *really* want to create aliases for these things (which I'm sort of arguing against), just hack your class as follows: class Foo: def my_long_function_name(self): print('Hello world!') Foo.f = Foo.my_long_function_name Then: &gt;&gt;&gt; foo = Foo() &gt;&gt;&gt; foo.my_long_function_name() Hello world! &gt;&gt;&gt; foo.f() Hello world! 
* It's very hard to help someone who doesn't provide any information whatsoever about the task in question. If you saw an ad saying "Need a guy to do things", how likely is it that you'd be interested in responding? * This isn't really the place to hire people. The sidebar to the right contains links to a **lot** of sites that are extremely relevant to you. In short, do some **actual research** and find the proper place to hire someone. With that being said, if you can afford a dollar a minute, I'm [available](https://hackhands.com/nickdumas/#/overview).
&gt; usually you're doing something wrong (pygame is written in C) More... the computers I use (Raspberry Pi) are tiny so have very little RAM and very little CPU speed. I've optimised things pretty thoroughly to squeeze as much speed out as possible. The RPi2 fixes this completely because it has 1GB of RAM. Before, I was doing too much so it was running out of RAM (my old unit had 256MB with an OS running in the background... not good). 
I think an important thing that I learned in Python that really drove home this point was the "is" operator. In a code review, early in my Python days, I I used this thing number = 5 if number is 5: do_thing() And, while this worked fine, I was told that is was wrong. After talking with some of the senior developers, I learned that the 'is' operator is for identity. **Is** this object the same as that object. This works because when some value is null, it actually is a reference to a single instance of the null object that is shared. The same applies to most of the lower integers. In the example above, the 'number' name is actually a reference to a shared object that represents 5. That's why using 'is' works when you deal with small numbers. But, at some point, Python will give the name 'number' a new object with the value, and these two instances won't be the same. This was demonstrated with a quick snippet (Thanks to /u/TheManCalledK and /u/camel_hopper for the fix) for i, j in zip(xrange(10000), xrange(10000)): if i is not j: print("'is' breaks at {}".format(i)) break which prints out 'is' breaks at 257 Which breaks out and prints 
So, for mutable objects, it's functionally equivalent to call-by-reference, and for immutable objects, it's functionally equivalent to call-by-value, except that the 'value' can sometimes contain references. However, the interpreter technically works the same for both, and since it has to pass objects by reference for them to be modified like that at all, it's 'pass-by-object-reference', but since an object-reference is a type of reference, it's 'pass-by-reference'. Also, making a new local object in a function with the same name as the passed in object will just override the name of the passed in object. So, even though it's technically 'pass-by-reference', there are cases where knowing that doesn't help with understanding because of the way python works. Am I getting this right? Edit: Apparently it's called '[call-by-sharing](http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing)'
i have request you in Hackhands 
Yes, and the details you provided are "help me to do it" which I don't think is even a technically complete sentence. Refile the request providing actual details about the task you want help solving.
You have the right idea about not using "is" for comparison, but your example is bad. The reason your code: for i in xrange(0,10000): number = i if number is not i: break else: print("'is' breaks at {}".format(number)) prints &gt; 'is' breaks at 9999 is because the loop terminates at 9999, not because the is operator isn't evaluating to true. A better example is: Python 3.4.3 (default, Feb 26 2015, 23:01:07) [GCC 4.9.2 20150204 (prerelease)] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; i = 5 &gt;&gt;&gt; j = 5 &gt;&gt;&gt; i is j True &gt;&gt;&gt; i = 500 &gt;&gt;&gt; j = 500 &gt;&gt;&gt; i is j False
[PEP-423](https://www.python.org/dev/peps/pep-0423/), for anyone wondering about package naming conventions. There are good reasons to break with that convention though. PEP-423 gives the example of Pillow, which provides the same interface as PIL and is intended as a replacement. Another is that [Flask has its own convention](http://flask.pocoo.org/docs/0.10/extensiondev/) for packaged extensions where flask.ext.foo is actually packaged as Flask-Foo.
Well, here's one way, using the second approach that I mentioned (but it can easily be converted to the first) import code from switch import switch def property_alias(long_name): def get_prop(self): return getattr(self, long_name) def set_prop(self, value): setattr(self, long_name, value) def del_prop(self): delattr(self, long_name) return property(get_prop, set_prop, del_prop) def run_interactive_interpreter(): oldInit = Switch.__init__ def newInit(self, creds=None): if creds is not None: Switch._creds = creds # setting a class attribute here else: if not hasattr(self, "_creds"): raise Exception("Credentials must be provided at least once.") creds = self._creds oldInit(self, creds) # replace init Switch.__init__ = newInit # alias methods Switch.e = Switch.Execute # alias properties Switch.mat = property_alias("MacAddressTable") # pass the Switch class as the local "sw" code.interact(local={"sw": Switch}) # now you can do the following: # s = sw(("username", "password")) # first instantiation requires cred # s.e() # equivalent to s.Execute() # assert(s.mat == s.MacAddressTable) # s2 = sw() # no need for cred anylong if __name__ == "__main__": run_interactive_interpreter() Note: I am assuming that MacAddressTable is an object attribute (i.e., something you set in `__init__` and modify in other methods), if that's not the case and it's just a class attribute then you can replace the property_alias call with something as simple as `Switch.mat = Switch.MacAddressTable`.
Just curious... some recommend Spyder to maky Python friendlier. How does it relate/compare to what you do in Anaconda? Do the compete with or complement one another?
Yes, it's an overview. The problem is, many people are not even sure what Docker is, and when to use it. In the next post, Aaron will give a few examples on how to use Docker in practice.
Unless it's stated you work from home or the work was completed on work machines, work done at home is yours. 
Cam someone help me to go through this question?
While I agree that for the beginners Python 3 is a fine choice, the following is not correct: &gt; Packages that don't support Python 3 right now are either not widely used or proprietary (e.g Spark bindings). Some of the top used Python projects don't support Python 3 yet. Examples: http://www.fabfile.org/, https://github.com/scrapy/scrapy, https://twistedmatrix.com/trac/, https://github.com/ansible/ansible, https://github.com/mitmproxy/mitmproxy, gevent, etc. They are all widely used and are in active development.
I never realized Python 3 could do that at all. That's pretty slick. 
That last part is genius. Could you elaborate on how to cancel the sleep process? I know how to in cmd but I'm very inexperienced with Python. Unfortunately I am away from home for ~10 days now but I will message you when I get around to testing this. Thanks!
This was awesome
Really cool stuff. Interesting that you're coming at this from Urban Planning. I learned all this stuff in my studies for a Ph.D. in Psychology. I guess that's the whole point, right, that it's domain-independent, scale-invariant, etc. Good stuff. You should do a section on Arnold Tongues. Also makes for good visualizations.
Your employer owns it 100%. Don't bother writing code at home thinking you can sell it/post it later - still a no go if you bring it into work as you can't agree to your own license on your employers behalf as it is a conflict of interest. Most employers are fine with upstreaming non-secret-sauce patches if you're making modifications to FOSS, since that helps you avoid refactoring everytime a new release comes out. That's about it though. Employers who have open frameworks (EMC ViPR, NetApp WFA, Chef, Puppet whatever) are many times fine with their employees having a public repo with recipies/workflows/integration work etc as it helps them sell their framework. If the specific idea behind your code is not a trade secret, and could not give your employer's competition an edge... There is a viable alternative. I actually write most of my stuff at work in ruby, and because I'm trying to remain sharp with Python, I come home and re-write it in python. My engineering ideas are free to move to a different company if I ever leave, and the code that I write at home is on my own time and most importantly is never in their possession. I'm sure to never reference the ruby while solving the same problem, but having done it that day it's very short work to re-code the solution in Python. This leaves me with code samples and a private repo to lean on. But let's be clear - I'm an infrastructure engineer and I'm not working for an MSP or the like. If my employer's business model revolved around PAAS/IAAS/SAAS then ALL of my code could really be seen as secret sauce - at that point the stuff I re-coded would be subject to any non-compete/non-solicitation agreements that apply to my contract.
All sorts of ways. In my view, in the end it usually comes back to self-organization, and different ways to understand self-organizing systems. Check out [this special issue](http://www.tandfonline.com/toc/heco20/24/1#.VRSaQ_nF_Jg) for an approach to understanding intelligence as an inexorable product of self-organization, rooted in physics rather than biology. There's a lot of work of work using dynamical systems to model behavior (you may have encountered similar models in e.g. traffic models. Some psychologists are concerned with locomotion and steering, there's a lot of crossover between models of vehicular "locomotion" and bipedal locomotion). Related to the dynamics is of course catastrophe theory and bifurcation theory. While it doesn't go deep in to choas, [this paper](http://mlrg.cs.brown.edu/warren-intro.pdf) explains the application of dynamics to behavior. In the last few years [multifractality](http://en.wikipedia.org/wiki/Multifractal_system) has really taken off. [Here](http://www.researchgate.net/profile/Damian_Kelty-Stephen/publication/235350307_A_tutorial_on_multifractality_cascades_and_interactivity_for_empirical_time_series_in_ecological_science/links/0fcfd5138dc3e126c0000000.pdf)'s the leading article describing the application of mutlifractal measures to behavioral data. Personally, I'm in a Psych. department and my advisor is a physicist. My first publication was on multifractal analysis of pole-balancing (subjects balancing a pole on their fingertip, recording movements with motion-capture equipment). It's looking like my thesis might be on the dynamics of behavioral transitions (e.g., walk to run).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Multifractal system**](https://en.wikipedia.org/wiki/Multifractal%20system): [](#sfw) --- &gt; &gt;A __multifractal system__ is a generalization of a [fractal](https://en.wikipedia.org/wiki/Fractal) system in which a single exponent (the [fractal dimension](https://en.wikipedia.org/wiki/Fractal_dimension)) is not enough to describe its dynamics; instead, a continuous spectrum of exponents (the so-called [singularity spectrum](https://en.wikipedia.org/wiki/Singularity_spectrum)) is needed. &gt;Multifractal systems are common in nature, especially [geophysics](https://en.wikipedia.org/wiki/Geophysics). They include [fully developed turbulence](https://en.wikipedia.org/wiki/Turbulence), [stock market](https://en.wikipedia.org/wiki/Stock_market) time series, real world scenes, the Sun’s magnetic field time series, [heartbeat](https://en.wikipedia.org/wiki/Cardiac_cycle) dynamics, human gait, and natural luminosity time series. Models have been proposed in various contexts ranging from turbulence in [fluid dynamics](https://en.wikipedia.org/wiki/Fluid_dynamics) to internet traffic, finance, image modeling, texture synthesis, meteorology, geophysics and more. The origin of multifractality in sequential (time series) data has been attributed to mathematical convergence effects related to the [central limit theorem](https://en.wikipedia.org/wiki/Central_limit_theorem) that have as foci of convergence the family of statistical distributions known as the [__Tweedie exponential dispersion models__](https://en.wikipedia.org/wiki/Tweedie_distributions) as well as the geometric Tweedie models. The first convergence effect yields monofractal sequences and the second convergence effect is responsible for variation in the fractal dimension of the monofractal sequences. &gt;From a practical perspective, multifractal analysis uses the mathematical basis of multifractal theory to investigate datasets, often in conjunction with other methods of [fractal analysis](https://en.wikipedia.org/wiki/Fractal_analysis) and [lacunarity](https://en.wikipedia.org/wiki/Lacunarity) analysis. The technique entails distorting datasets extracted from patterns to generate multifractal spectra that illustrate how scaling varies over the dataset. The techniques of multifractal analysis have been applied in a variety of practical situations such as predicting earthquakes and interpreting medical images. &gt;==== &gt;[**Image**](https://i.imgur.com/epF6kn2.gif) [^(i)](https://commons.wikimedia.org/wiki/File:Karperien_Strange_Attractor_200.gif) - *A Strange Attractor that exhibits multifractal scaling* --- ^Interesting: [^Mandelbox](https://en.wikipedia.org/wiki/Mandelbox) ^| [^Fractal ^cosmology](https://en.wikipedia.org/wiki/Fractal_cosmology) ^| [^Fractal ^derivative](https://en.wikipedia.org/wiki/Fractal_derivative) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cprz18z) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cprz18z)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Great overview. Thanks!
Here's what /u/veidt_co was trying to show: &gt;&gt;&gt; for i, j in zip(xrange(10000), xrange(10000)): ... if i is not j: ... print i ... break ... 257 So numbers 0 to 256 are static, whereas anything above that is instantiated on a case by case basis. I tried the same thing going negative with xrange(0, -10000, -1), and found that down to -5 the values are static, but from -6 onwards, they are instantiated as and when
A little anecdote: Recently I wrote a simple Python program for fun, which flips every bit in a file (by xoring every byte with 0xFF). In pypy it generally ran nearly 3 times faster than in standard cpython. I haven't done much else with pypy, but I found this factor 2-3 speed gain in that simple application quite impressive.
`checkEXP` does not know about `exp` in this context. To be able to use it this way, you have to pass it as well. Edit: Say you use this in a complete, single-file program, you could defiine `exp` to be a global variable, but actually the more elegant way would be to encapsulate the (I assume) player data in a `Player` object that you can pass as a whole.
I'm not great at Python either but running command line processes appears to be best done like this: from subprocess import call call(["shutdown", "/a"]) The only things I'm unsure about are 1) Whether Python can start up and execute the abort shutdown (sleep) command fast enough, considering the script appears to be running asynchronously. and 2) Whether `shutdown /a` can abort a sleep or just an actual shutdown/restart. Your results will be interesting either way, let me know when you've tried it.
maybe [pdfquery](https://pypi.python.org/pypi/pdfquery)? Looks like it could be up to the job.
Cool, thanks for that info! 
I don't know much about it, but a buddy of mine helped make Kitematic.com, for getting Docker on your mac. They just got aquired, so it must be halfway decent.
You could start off with something like this: def progress_message(level): print ("You advanced to level {} attack!".format(level)) def get_attack_from_experience(attack, experience): if attack == 1: if experience &lt;= 83: attack += 1 progress_message(attack) elif attack == 2: if experience &gt;= 174: attack += 1 progress_message(attack) elif attack == 3: if experience &gt;= 276: attack += 1 progress_message(attack) elif attack == 4: if experience &gt;= 388: attack += 1 progress_message(attack) else: print ("Attack must be in range from 1-4.") return attack So a sample run in ipython would be like... In [1]: from expsystem import get_attack_from_experience In [2]: attack = 1 In [3]: experience = 50 In [4]: attack = get_attack_from_experience(attack, experience) You advanced to level 2 attack! In [5]: attack = 5 In [6]: attack = get_attack_from_experience(attack, experience) Attack must be in range from 1-4. In [7]: attack = 2 In [8]: experience = 200 In [9]: attack = get_attack_from_experience(attack, experience) You advanced to level 3 attack! In [10]: attack Out[10]: 3
&gt; Hacking is a very wide term. Most of you knows it is something that anonymous has been doing for quite a while now and you might even be following Lizard Squad. &gt; Hacking is also known as cracking. It started with people who wanted to crack maybe a code or optimize a product or even expand the use of the product. Now a day the world hacking is mostly used about people who gains access to server or computer that aint their own. Yeah. No. I stopped reading there. Dude's clueless.
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
He also calls network packets "data packages". Edit: This is basically on the same level as the [Tracert guy](https://www.youtube.com/watch?v=SXmv8quf_xM).
Sorry for the late response, but that is a great breakdown of method lookup, thank you!
I ended up going with `@cached_property` but I like properties because they are only called as necessary. Premature optimization perhaps...
Use [pygame.time](http://www.pygame.org/docs/ref/time.html). One way to do it would be to call your function in your main loop and record what tick you called the function at with pygame.time.get_ticks(). Then, you could compare the difference between the recorded tick and the current tick. If the difference is greater than some amount (vary on time and fps your game runs at) you call the function and record the tick you called it at again. last_called = pygame.time.get_ticks() # make delay whatever you want delay = 600 # main loop while True: now = pygame.time.get_ticks() if now - last_called &gt; delay: my_function() last_called = now
That definitely handles OP's issue! Here is my optimization though anyway. # Maps attack level to experience needed for next level LEVEL_MAP = {1: 83, 2: 174, 3: 276, 4: 388} def progress_message(level): print ("You advanced to level {} attack!".format(level)) def get_attack_from_experience(attack, experience): try: if experience &gt;= LEVEL_MAP[attack]: attack += 1 progress_message(attack) except KeyError: print ("Attack must be in range from 1-4.") return attack Since we take the same action regardless of attack and experience (add 1, print the message, return the new attack), we can just boil it down to a loop, using the LEVEL_MAP `dict`. We can also use `try` to throw a user friendly error if the attack level does not exist in our LEVEL_MAP. I realize that you are still learning and I would advise you to stick to simpler constructs like what @EddieLomax just offered, but just wanted to pique your curiosity. :-) 
Check out Vagrant. It uses virtualbox, but can auto setup the environment. It's pretty nifty but can be a pain sometimes. 
This may very well be true, and I'm sure it is the case in the US. Unfortunately the hospital literally has a team of lawyers on staff just waiting for something to do. We do not and I think they're very aware of that.
? Use a loop. Show some pseudo code if you're confused.
You also can run docker in vagrant vms, I think there are even plugins for vagrant to set it up iirc.
For anyone interested in this topic, I can recommend two sources for newcomers. Conversational, largely non-technical: [*Chaos: Making a New Science* by James Gleick](http://www.amazon.com/Chaos-Making-Science-James-Gleick/dp/0143113453/ref=pd_sim_b_2?ie=UTF8&amp;refRID=0TKJPT4P9K90X8C7H4J5) Technical (requires knowledge of ordinary differential equations, but highly readable): [*Nonlinear Dynamics and Chaos* by Steven H. Strogatz](http://www.amazon.com/Nonlinear-Dynamics-Chaos-Applications-Nonlinearity/dp/0813349109/ref=dp_ob_title_bk)
#####&amp;#009; ######&amp;#009; ######&amp;#009; ####&amp;#009; **Chaos: Making a New Science** Current $12.25 High $14.69 Low $10.31 [Price History Chart and Sales Rank](http://i.imgur.com/EYYg3LO.png) | [GIF](http://i.imgur.com/uObbNf1.gif) #####&amp;#009; ######&amp;#009; ######&amp;#009; ####&amp;#009; **Nonlinear Dynamics and Chaos: With Applications to Physics, Biology, C...** Current $50.52 High $56.93 Low $50.52 [Price History Chart and Sales Rank](http://i.imgur.com/BqRzHUc.png) | [GIF](http://i.imgur.com/BoDEhzO.gif) | [FAQ](http://www.reddit.com/r/PriceZombie/wiki/index) 
If you're trying to do two things at the same time you're going to need to look into threading or multi processing. There is something called the GIL, which is short for Global Interpreter Lock in python that you should be aware of. May I direct you towards [the threading documentation!](https://docs.python.org/3.4/library/threading.html?highlight=threading#module-threading) Edit: you can also try subprocess or multiprocessing.
It doesn't seem damning unless someone specifically uses netloc to make a request..., I can't think of much that would lead to Also python is spelt wrong: paython
Depends, but considering how Docker uses layers, if you're using a common base across your different images, it isn't a huge issue because the same layer is shared across applications. Yes you can cut your images down and make them quite lean, but that's been arduous in my experience (and the process is quite manual). There are a few applications that help squash the sizes down, but they'd only really be worth the effort in an environment with HDD limitations.
Docker is really quite fantastic, and has proven invaluable from a DevOps standpoint. Using it with django applications and moving away from reliance on bespoke build scripts has made life so much easier. Would definitely recommend people adopt it, it's a technology really picking up pace. The difficulty is on actual deployment orchestration at the moment, but that's more of an operations concern most individual projects won't feel the pain of. I'm liking etcd as a way of defining config, makes it easy for an application to configure itself: supply etcd details and let it run an install script on start-up. Cool stuff!
I have fixed the quick typing
Thanks for this, this was the most delicious part of my day.
There might be some code examples or open sourced software online that sort of does what you want. However, I think this is really where your own creativity and imagination comes into play. Part of the fun in programming for me is exactly to find an elegant or new and simple solution for a real world problem. P.s. [this](http://www.amazon.com/Head-First-Programming-learners-programming/dp/0596802374/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1427442374&amp;sr=1-1&amp;keywords=Head+first+programming) is a nice book to get you started programming an application using python.
The most important thing to know about this is, that this is an **implementation detail** of CPython! So never rely on that brittle knowledge in your code!
Great ! Ive used pypy to run shoebot much more quickly, I would switch it completely but pygi (Gtk3 in CFFI) is missing some things. I know its not a project by by pypy devs, but pypy people please look, Gtk 3 in pypy would be very nice.
Others mention Celery. You can also use beanstalkd or RabbitMQ or Amazon SQS.
Hyped, hipper, nicer chroot. 
It's pass by value but because of boxing all values are object references (pointers). You can modify mutables but only because all object access is dereferencing so you're not actually modifying what is passed (a pointer) but instead the memory it points to.
&gt; I work as recruiter In my workplace, more than half members of the division known as IT can't make a simple program.
Flask and Django are web frameworks not CMS systems. They can be used to write everything, from a simple blog over a CMS to a full web application - such as Disqus, Instagram or Pinterest (which are all powered by a Django backend). Frameworks such as Flask or Django can be tailored to your needs, starting with which database you want to use (MySQL, PostGreSQL, MongoDB, etc.), over which frontend tools to use with your frameworks, be it Angular, React or Backbone. Wordpress on the other side is a CMS that you can tweak to your needs. You can of course implement quite everything with plugins, but you always start with a PHP+MySQL+Wordpress Core and have to code around that. If you just need a basic CMS or are fine with modifying (and often struggling) with a system that someone else has created, then go with Wordpress. But if you want control, flexibility and want to use only what you need, you should learn how to use web frameworks like Flask or Django.
scipy, scikit-learn, pandas, theano, pylearn2, blaze, scikit-image; lxml breaks under pypy from time to time. All the basic libraries for data analysis don't work in PyPy, and it is not clear if they will become supported ever. Rewriting them for PyPy is a huge amount of work with a small benefit - they are unlikely to become faster in PyPy (well, maybe they can, but likely that' s another huge amount of work for a small speedup %). Look at it from a point of a new library author who uses e.g. scikit-learn daily. One option is to optimize a library using Cython, another is to make it PyPy compatible (pure Python + cffi). Cython version will run faster in CPython, and it will be easier to install; cffi version will run faster in PyPy. But a developer wants to use both this new library and the rest of the ecosystem (e.g. scikit-learn), so it makes no sense to create a PyPy compatible version - in CPython it will be slower and more brittle to install (packaging of cffi-based libraries is ugly right now), and CPython is the only feasible interpreter if one wants to use scikit-learn and other similar packages. So this new library gets written in Cython, dragging the ecosystem further away from PyPy compatibility. I'd love to use PyPy e.g. for machine learning feature extraction (a common bottleneck), but this is complicated. Regarding the packaging, an example: PyOpenSSL switched to cffi-based cryptography library, and it made every script which uses PyOpenSSL (including every script which uses Twisted) to have an enormous 0.5s (of CPU time) startup overhead in CPython. I've heard this is worked on, and there are reasons for such behaviour, but still, it shows that cffi is still young. Cython is a nice language if one wants C-level performance for Python-like code. It also has some unexpected advantages, e.g. extensions written in Cython and compatible both with Python 2.x and 3.x. A good Cython code is very hard to beat in terms of speed. PyPy allows to get a good speedup (compared to regular CPython) with less efforts, but if you need maximum speed then Cython is a safe and straightforward option. I must admit my experience with PyPy is quite limited - I'm trying it from time to time (it is improving nicely), but I haven't used it e.g. daily as a main interpreter / main target. Maybe something like cffi compilation target for Cython can bring the two worlds together, or an improved support for C-API CPython extensions in PyPy, I don't know. I don't quite understand how rewriting/forking all popular packages (numpy, scipy, etc.) could help. But very smart folks are doing it, so there is likely a good reason :)
The most [prominent tutorial on Flask](http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world) let's you build a Twitter clone and goes way beyond what you could do with Twitter. Also, the most extensive tutorial on Django, [Test Driven Development with Flask](http://chimera.labs.oreilly.com/books/1234000000754/index.html) teaches you how to build an easy To-Do list - and it one of the most challenging tutorial I've ever seen, because along the way it teaches you everything about TDD, Git, modern frontend workflows. Also, most tutorials in any backend language/framework (PHP, Ruby, Python) are about blogs. Why? Because you can see many concepts that you can then transfer to more complicated use cases. Taking your example - CMS. A CMS basically requires right management, text editing features and media upload. A blog with multiple users needs the same - albeit with a less complicated setup. So, if you worked through any of the before mentioned tutorials, you would learn way more than just how to write a blog, but you would learn how to use the web frameworks and do a lot more with them then you could with Jekyll or Wordpress. If you just need a CMS, simply go for the 5-minute installation with Wordpress, Jekyll or Ghost. If you want to learn how to write applications and modern websites, then you will find enough solid tutorials and documentation in both the Python world as elsewhere.
&gt; Yes, you can do a lot ... but most of the tutorials/books (on Flask for example ) always end up with blog-like stuff .... Why ? Because everybody knows what a blog is/needs to do. So you don't need to explain the domain of the problem and can go straight to solving said problem. And if after hours of programming you reach the same point of one of the most complete blog tools around, I'd say "mission accomplished": People now know how to build stuff in a new language. (In other words, you're looking to the destination and ignoring the whole trip.)
Next time build it at home, or have a talk about your job role first. I used to give my shit away this way too when I was younger, you get better at it ;)
Thanks, it took a while for it to click with me and writing it out definitely helped. I'm happy it helped you too 
Someone mentioned Apache Kafka on this reddit just the other day. I'm not sure whether you are at the scale to need it, but this is one of its primary use cases.
Hey, just a quick question(s), how do you go about django apps in production with docker, like when connecting everything together? compose/fig looks useful but they say it shouldn't be used in production yet. how would you, for instance, connect a postgres container with the web app container once on a server? Or am i missing the point completely with docker? thanks
Two mistakes/shortcuts people tend to make: * Docker is a virtual machine. It isn't. It does not emulate anything, it simply builds upon existing linux kernel features to isolate processes/resources from each other. * Docker is a sandbox. It isn't. Even though your process is isolated and Docker ensures you can't access certain aspects of the host, the user which runs the processes within the docker container may open a door onto the host if it has too much permissions (often processes contained in a docker container are executed as root, this is because people think docker creates a safe sandbox for your process). 
Note the follow-up post linked at the bottom, where they decide to switch to using `inspect.getcallargs` instead. The general lesson here is that Python's introspection is so rich, there's usually a more targeted way to perform this kind of task than `eval`. `getattr`, `setattr`, `importlib`...
Something i wrote years ago in a few lines seems to be literally what you need! https://github.com/easytiger/concurrent/blob/master/concurrent Simple python written automation aid. It allows you to consume a large number of files which may all have large processing times or large memory usage and execute a program over all of them. However this program will ensure than only 'n' files/commands will be executed at any one point in time. i.e. ./concurrent &lt;num procs&gt; "command and args&gt;" &lt;files....&gt; e.g. ./concurrent 8 "mycommand -e 100 -f %f" *.txt
Yeah, people write all sorts of things in to contracts. I've recently come across a contract that had a statement that said that if any of the clauses in this contract are invalid it does not render invalid any other clauses. Without this an illegal clause in a contract would make the entire contract invalid because it's against the law (in Switzerland at least). So basically this means they can put anything in a contract in the hopes that you would obey it and you have to figure out yourself whether they can actually do that.
Since I have never managed to get it to work with pip I do it as follows: Get it via Homebrew and then either link the version I need into the venv. Homebrew: * $ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)" * $brew doctor * $brew update * $brew upgrade * $brew tap homebrew/science * $brew info opencv #decide on the options you want * $brew install opencv in the virtualenv (using virtualenvwrapper): * $workon &lt;project-name&gt; * $cdsitepackages * $ln -s /usr/local/lib/python2.7/site-packages/cv.py cv.py * $ln -s /usr/local/lib/python2.7/site-packages/cv2.so cv2.so This will link to the version currently set in Homebrew. Once you have multiple you can use `$brew switch` to switch between them. Otherwise you can also link directly. So for version 2.4.9 use: * ln -s /usr/local/Cellar/opencv/2.4.9/lib/python2.7/site-packages/cv.py cv.py * ln -s /usr/local/Cellar/opencv/2.4.9/lib/python2.7/site-packages/cv2.so cv2.so If you are getting a segfault during import (as I was today), check this PR: https://github.com/Homebrew/homebrew-science/pull/2005. I finally got it working by fetching that PR into my /usr/local/Library/Taps/homebrew/homebrew-science/ and then $brew install opencv hope that helps.
`getattr` and `setattr` are incredibly useful in a few situations and don't have to be avoided like `eval` should.
Hey, I learning kivy watching your crash courses! You are great! :) 
There are still big disadvantages to using eval here. Eg. this approach will not work if any of your funtions happens to have a default argument that doesn't satisfy `eval(repr(x)) == x`. Eg. consider something that has a function argument, like: def sort(items, key=lambda x: x): pass This won't work with the eval method, because the string representation of the formatted argspec will be something like "items, key=&lt;function lambda at 0x12345678&gt;" which is invalid syntax. The same for various other complex types. &gt;We could inspect the method and verify the provided arguments conform to certain rules, but the flexibility of Python’s (awesome) *args and **kwargs turns this task into quite a large and unseemly blob of logic. It's worth noting that this is considerably easier in python 3.3 and later, which introduces the Signature class, providing access to the parameter binding logic. You can do: &gt;&gt;&gt; sig= inspect.signature(method_or_function) &gt;&gt;&gt; params = sig.bind(*args, **kwargs) # Throws TypeError if args are incorrect.
I first heard of docker at BSides SLC last week. One of the presenters is working on an open source script to run malware against a bunch of different AV software in VMs. His goal is to daemonize it and implement Docker so he doesn't need a Windows VM for each AV. I believe the project is called Plague Scanner.
I was going to raise the same point, except for taking an `x` where `repr(x)` is a valid, but potentially malicious, python expression.
You're much too kind. ;)
I'm currently using docker in production for a flask web app. Spinning up a database docker container that is completely configured and ready to go (using PostgreSQL + PostGIS can be a pain to setup manually) is really fantastic. The other really awesome thing about Docker is that it will cache the Dockerfile steps, so it allows for an iterative process to build the container that is fast and easy to play around with. Docker all the things I say!
Maybe I'm just thick, but I still don't get how virtual machines aren't involved. They're called "images" and allow you to "run your app on Ubuntu but you run RedHat in production", but without virtualization? How?
My company has been giving python trainings for over 15 years. See http://www.logilab.fr/formations/python-avance for the advanced course. If this is not what you call advanced, take a look at the list of extra modules at http://www.logilab.fr/formations including Cython, migrating from 2 to 3, Scipy, etc. If this is still not what you have in mind, send us a list of what you would like the program of the course to be and we will try to accomodate you.
I don't have any code yet, sorry! I'm at the stage pre coding where I'm trying to decide how best to approach my needs. I will update this with specifics as soon as Im finished at work. Didn't expect to get so much help on this!
OTOH, you're letting people run arbitrary Python code anyway AFAICT.
All models are wrong, but some models are useful. For Python, pass-by-value : pass-by-object :: [geocentric model with epicycles](https://en.wikipedia.org/wiki/Deferent_and_epicycle) : heliocentric model
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Deferent and epicycle**](https://en.wikipedia.org/wiki/Deferent%20and%20epicycle): [](#sfw) --- &gt; &gt;In the Hipparchian and [Ptolemaic systems](https://en.wikipedia.org/wiki/Ptolemaic_system) of [astronomy](https://en.wikipedia.org/wiki/Astronomy), the __epicycle__ (literally: *on the circle* in [Greek](https://en.wikipedia.org/wiki/Greek_language)) was a geometric model used to explain the variations in speed and direction of the apparent motion of the [Moon](https://en.wikipedia.org/wiki/Moon), [Sun](https://en.wikipedia.org/wiki/Sun), and [planets](https://en.wikipedia.org/wiki/Planets). In particular it explained the [apparent retrograde motion](https://en.wikipedia.org/wiki/Apparent_retrograde_motion) of the five planets known at the time. Secondarily, it also explained changes in the apparent distances of the planets from Earth. &gt;It was first proposed by [Apollonius of Perga](https://en.wikipedia.org/wiki/Apollonius_of_Perga) at the end of the 3rd century BC. It was developed by Apollonius of Perga and [Hipparchus](https://en.wikipedia.org/wiki/Hipparchus) of Rhodes, who used it extensively, during the second century BC, then formalized and extensively used by [Ptolemy](https://en.wikipedia.org/wiki/Ptolemy) of [Thebaid](https://en.wikipedia.org/wiki/Thebaid) in his 2nd-century AD astronomical treatise the *[Almagest](https://en.wikipedia.org/wiki/Almagest)*. &gt;Epicyclical motion is used in the [Antikythera Mechanism](https://en.wikipedia.org/wiki/Antikythera_Mechanism), an ancient Greek astronomical device for compensating for the elliptical orbit of the Moon, moving faster at perigee and slower at apogee than circular orbits would, using four gears, two of them engaged in an eccentric way that quite closely approximates [Kepler's second law](https://en.wikipedia.org/wiki/Kepler%27s_second_law). &gt;==== &gt;[**Image**](https://i.imgur.com/J49Goiy.png) [^(i)](https://commons.wikimedia.org/wiki/File:Ptolemaic_elements.svg) --- ^Interesting: [^Planet](https://en.wikipedia.org/wiki/Planet) ^| [^Ancient ^Greek ^astronomy](https://en.wikipedia.org/wiki/Ancient_Greek_astronomy) ^| [^Al-Adami](https://en.wikipedia.org/wiki/Al-Adami) ^| [^Ibn ^al-Majdi](https://en.wikipedia.org/wiki/Ibn_al-Majdi) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cpsj3v6) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cpsj3v6)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Those subbed to /r/programming might have seen a similar article about Java recently. Now, Java has a few unboxed types that are technically passed by value, but in terms of semantics immutable values behave exactly the same under pass-by-value and pass-by-object/sharing, so we can say it has the same semantics as Python re: variables and bindings. But that article (and the comments on Reddit) went completely no-where, because everyone was too hung up on call-by-value and call-by-reference.
That second point is particularly important for security. If *anything* is running inside the Docker as root, that's a potential vector for escaping. This is why I still prefer FreeBSD jails.
Docker relies on three components: * [namespaces](http://man7.org/linux/man-pages/man7/namespaces.7.html) * [control groups](https://www.kernel.org/doc/Documentation/cgroups/cgroups.txt) * filesystem The last one is mostly what we call docker images. It's basically a filesystem stored into a binary blob. To make it simple, imagine you are mounting a CD onto your host. Once that's done, you can navigate through its directory structure. The CD has its own filesystem. Well docker images are a bit similar but the default filesystem means you can share chunks of images with other images so that you don't have to copy more than you need. Imagine you have two apps running on Ubuntu. You would share the base Ubuntu system between both images. On your disk, you'd have a single copy of the Ubuntu base image. Docker uses a union-filesystem mechanism to merge all those chunks into a single read-write filesystem when you start the container. This mechanism allows to distribute your apps in a form where they are already deployed and configured within that image. Again, let's assume your app requires dependencies. If you used the Ubuntu base image, you run "apt-get install XYZ" within your container, deployed your app and then saved the result into a new image. This image is what you would distribute. Your app only waits you to run it. But that alone isn't enough to make a container. The other two kernel features are namespaces and control-groups. Remember that the goal of a container is to run one (or many processes) in isolation. This is what namespaces provide. Finally, control-groups ensure your container will only use whatever resources you decide. There is no virtualization per se. It only takes a process and ensures it runs isolated from other processes on the same host, plus with the benefit of its own filesystem (and thus, directory structure). A process runing in a container runs inside the host kernel. In fact, there is no real host/guest here. Just a single live system with processes. Docker only isolates some of them into their own world.
Tracer T says that the dozen or so people looking at Google right now are all from my area. Weird!?
pip and requirements.txt are like bundler without the Gemfile and with Gemfile.lock manually managed by you. You can think of your virtualenv like a vendor/ directory.
Unfortunately we gave up about two years ago. Still makes very very angry every time I think about it though. 
I guess so
Scary. What sucks is the big companies have all the leverage because most people just don't want to go through the trouble of hiring a lawyer if the potential for rewards isn't huge. You spend so much money even before you get to court it's almost not worth considering. But of course most of these big companies have lawyers on staff so it doesn't bother them at all. It's a tricky system.
Yep, we even have Dropbox-themed Island that we've opened together with Dropbox http://www.checkio.org/blog/dropbox/
Ok, noted. Thank you
What's wrong with [`inspect.Signature.bind`](https://docs.python.org/3/library/inspect.html#inspect.Signature.bind)? You mention `inspect`, but then dismiss it for the logic being large and unseemly. But `inspect` does all the logic for you! Here's a simple decorator that causes a function to raise an `InvalidArgsError` if called with invalid arguments: def check_args(func): sig = inspect.signature(func) @functools.wraps(func) def wrapper(*args, **kwargs): try: sig.bind(*args, **kwargs) except TypeError as e: raise InvalidArgsError from e else: return func(*args, **kwargs) return wrapper Example: @check_args def func(a, b, c=2, *, d, e=3, **kwargs): pass 
&gt; Technical (requires knowledge of ordinary differential equations, but highly readable): Nonlinear Dynamics and Chaos by Steven H. Strogatz[2] Yep. The only textbook I've recommended people buy *for fun*. A couple years ago I was catching up with my brother and he was like "I did a weird thing, you'll make fun of me, I ordered a textbook on Amazon. For pleasure reading." I was like, "Strogatz?" I just knew; what else could it be?
Learn the python hard way
Maybe you could explain that for i in exp: foo(i) is equivalent to _it = iter(exp) try: while True: i = next(_it) foo(i) except StopIteration: pass and `import foolib` to `foolib = __import__('foolib')`, etc. OTOH, that may be even more confusing to your students. (written from memory, the actual desugared syntax is probably different for both)
Haha #philosophy was full of sanctimonious losers. I can't remember why I'm banned but it was for a funny reason.
Yes, exactly as high brow and sophisticated as I remembered. Lol
Efnet is a total wasteland now.
Is there a particular way I should share what I have? I can show you the default script as provided with my controller. Are you familiar with LIRC? http://pastebin.com/zdn0FuGW
Great stuff! Thanks for sharing.
go for it!
Broad question. One solution is to use non-blocking I/O when handling the requests and responses. If your requests get handled quickly enough (before HTTP timeout for example) you have your response. If you only need to confirm receipt and not actually generate any valuable data in the response, non-blocking I/O may no longer be an advantage. You need to narrow down your question or put forth some assumptions/requirements. If you want to hit the ground running instead, take a look at [Tornado Web Server](http://www.tornadoweb.org/en/stable/). Simple solutions to scalable and asynchronous systems are here. If you're *not the best programmer* it might not be simple however.
which is? (just curious know about your web app idea)
Hey, this is a really helpful recommendation, thank you! One thing that doesn't appear to be happening here is that there's no bulk-insert going on. If the Postgres database is on a remote server, these individual row inserts are going to generate a lot of network traffic and handshake/auth overhead and so on. I think Postgres's engine is smart enough so that if we were to do, say, 50 or 1,000 times `session.add(pd)` and then one single `session.commit()` that it would be about as fast for the psql database as a command like the Django ORM's `create_in_bulk`. But in this example code, we're going to run the "commit" each time, once per request. Is there a way to stack up those inserts and only commit once per second, or something like that?
That's correct: I only need to confirm receipt and do not need to generate and valuable data in the response. But then there's a subsequent task that needs to happen in pseudo-realtime to process each each of those requests and generate the SQL inserts, with one row inserted per request, but processing inserts in bulk so that there are only a few inserts per second being sent to the Postgres server. Does that make sense?
Hmmm, does not respond well to size change. The code snippets go way out of the container on the right margin.
CTRL-D works. I'm testing other options. I'll let you know if I find something better. 
I discovered recently that pip has a `-t` option to install packages into a target directory. So if you do e.g. `pip install -t pypkgs django`, you'll get Django installed inside the `pypkgs/` directory. Then you just need to ensure that's on `sys.path` before you import django.
Good catch! Thanks. Just edited that bit accordingly.
http://slackhq.com/post/114696167740/march-2015-security-incident-and-launch-of-2fa Not sure anyone is eager to setup Slack today... 
I am biased towards python, so I cannot answer that question yet. I did a little research this morning since this is something I have been interested in but put off. It's a small internet, so you might have already found these links but just in case: https://pythonhosted.org/RPIO/pwm_py.html http://razzpisampler.oreilly.com/ Those were just the first two things that looked promising. It definitely looks like something that would be possible to do with python and therefore in my biased opinion, best done with python. ( Unless you happen to know another better-suited language ;)
It's spelled "arsehole", you degenerate colonial chode.
Leave me alone you worthless turdbucket
This is part of the reason I built theprojproj.com. I wanted a kind of show and tell for side projects to show and to discover. Just got it up and running, so not much content yet.
I have a friend who would love this.
Refreshing to see their bullshit-free assessment of how they've built their product: "We got here without the infamous 'big rewrite' by trying to make things slightly better every day." Amen.
do you run this as a cron job? I have several such tasks that poll, but it's a pain to have them run on my laptop. i could setup a linode vm, but would be nice if there was a service I could just upload my scripts to...
So awesome. Is this on github? 
Still hanging on to python 2 though.
and, from the outside, that dict would have all of the inner state's objects, right? I'll have to see if it's the sort of thing that can be interacted with easily. thanks alot!
It's not completely clear to me what you're trying to do. Are you saying you have an equation `dz/dt = theta*(dx/dt - dy/dt)` and you want to plot `z` as a function of time?. In this case, you can just determine `z` in terms of `x` and `y` by integrating and plugging in initial conditions (or you could add it as an additional variable in your state vector if you're lazy and don't want to do the maths). Or is `z = theta*(dx/dt - dy/dt)` and you want to plot `z`? In that case, the simple solution would be to just loop over your data after integrating and run through your `derivs()` function manually: z = np.zeros(len(prey)) for i, prey_pred in enumerate(zip(prey, pred)): d_prey, d_pred = derivs(prey_pred, None) # don't care about t z[i] = theta * (d_prey - d_pred) You might be tempted to just declare `z` as an empty "global" array and add to it every time the `derivs()` function is called, but `odeint` will in general use variable step size. So your `z` array at the end would not be the correct size and its elements would not be evenly spaced in time.
Sorry that this may have upset you, I completely understand that this is an odd and somewhat complex problem. My lack of understanding of the code is really why I had to post it all. I again, don't really understand calculus nor python in depth enough to have proper grammar when discussing. I hope you accept my apology. 
You know, I've used Python for years and never really used enumerate. TIL.
So... If I distribute my project, pip.exe, python.exe, and a script that runs pip, installs all the dependencies I use into a target folder, and add that folder to sys.path before anything else in my code, I have a self-contained redistributable?
That's the ultimate intention, yes... but like everything else, I want to be able to play with it :)
OK. 1) Where did you get the code? Is there any subset of it which is known to perform correctly? 2) What happens when you run it? Does it give the wrong answer? Does it throw an error? 3) Go through that code and repost it without any of the plotting commands, and without any of the file IO - all that's doing for us right now is making your problem harder to read. As it happens, I'm fairly familiar with python, some calculus and indeed the Lotka-Volterra model. But your problem isn't clearly stated and you're not helping us help you.
Well, the code is not returning exceptions anymore, but it's not responding to the key-press either. http://pastebin.com/mafs0Z2r The aim is that when they key: KEY_UP is pressed, everything below "while true:" happens. I don't know...
Very interesting read! I thought the minimizing method was pretty clever!
Oh, yeah, in that case... that's pretty hard, I wouldn't know how to explain all that to an audience like that.
There is also [Nuitka](http://nuitka.net/) Python *compiler* which translates Python to C++ then builds a binary using your system's C++ compiler. However, for now it needs to link to the python libraries so you will need to add compiler switch to add the libraries into the install package it builds.
I can definitely work with this one. Very nice concept, thank you so much!
Could this possibly be a bug with the Computable app? Are you experiencing this issue with other programs on the app or are there any comments in the App Store about this issue?
Be sure to acknowledged for it and bring it up at your review. May help with a raise. 
It looks like every result has the title "Navigation index modules"
To my knowledge, there aren't any problems with imports using the included packages (numpy, scipy, sympy, matplotlib, pandas, and a few others), but looking at those packages inside the app, it doesn't appear that any special care has been taken to make things work smootly. That's why I wonder if there's something I'm simply missing. And I don't think think there are similar complaints on the App Store. If nothing else, the problem I'm having comes from trying to include my research package with the rest of the core packages. It's not difficult, but it certainly requires some very deliberate actions and software. (I'm using PhoneView to place files inside the app.)
I meant actionscript
That text is at the top of every page, so my guess is that either a Google bug or a python.org bug caused it to show up as the title. I'm not seeing it here, so my guess is a Google experiment gone terribly wrong.
Actionscript is not too bad, when it comes to braces style languages.
at some point you will find that managing these data files will become a bear to work with. I agree with file movement, but renaming by putting a timestamp at the beginning of the filename (YYYYMMDDHHMMSS-Name.csv and now your folder will sort your files by processed date/time. as for managing the data....I would pull the data into a MySQL database. Move your processed data into an archive folder. Use Excel to query your data via ODBC into reports or use a tool like Crystal Reports to make your data nice. Just my $0.02 
link?
Ya but why were they written like that in the first place? (question for posterity, I know it's a 5 month old thread)
Agreed on Kubernetes - for now. It's moving way too fast at the moment and is too deep in development to be useful in any production context. Although Docker was considered the same when we first started using it (and still is, to some degree) it has worked out the important bits to be useful. I'll take a look at Mesos/Marathon! At the moment, we're using Jenkins with the remote docker daemon to manoeuvre them, which is alright for continuous integration/continuous deployment. 
Do you mean for config? Or as in how they actually connect? You can define ports to expose in an image, and then define what ports you want to map to the host when you run a container. So you might have nginx running on port 80 within your container, and map that to port 8001 on the host. Same for your database connections - connections can establish connections out, your postgres container just needs to have the appropriate ports exposed (5432 or whatever) and then mapped to the port you want to us it at on the host. Edit: to add a bit more clarity, with your specific example in mind, the breakdown would be a dockerized postgres container running on the appropriate port, and that's how the web-app connects just like normal. The main thing is that you've got the ports mapped correctly (which you specify when you run an image).
just realized i've been downvoted out of postive numbers. hopefully this isn't a bad thing to ask? Naming structure coudl def change and that's a great idea. I'm just trying to take baby steps to get to my resolution. Your solution seems so far out of reach for me that I worry I'd feel extremely overwhelmed and just lose track of it.
I'm sure in Matplotlib there's something, but what exactly I'm not sure. I'll check and return in a moment. 
I guess I'm getting tired, but it didn't occur to me until just now that I could pass in a Python function that I defined somewhere else as opposed to writing inside the solve/minimize/optimize call parameter - [see lmfit](http://lmfit.github.io/lmfit-py/fitting.html#fit-func-label). I'd still like to to know if a Python solver exists as I described above though.
Thanks for the insight here. When you say "look at the code," how is the code presented? They give you access to the files?
just upload to github
As others have said great for getting started, used as scripting language. IMO, the features are limited and a scripting language is not idea for game development. 
So you want to create an online game using Flask. If I'm understanding the concept right, the only way to go about this is to use Javascript to make everything then just use Flask to render the page.
look into excel vba
&gt; scrapes each of the files pages you mean ? 
&gt; a printable format is it rtf ?
I've used pygame for some small prototype development before. Must admit I did not like it that much. Recently I've made the switch to Haxe, specifically the [HaxeFlixel](http://haxeflixel.com/) framework for 2D game development.
Made a few things in it, basically for fun as distribution isn't going to work well.
This comment is really misleading (~~some people would call it FUD~~ EDIT: it was just misinformation!). First distribution: a Python game can be packaged as a single bundle and you don't need to install anything in the Windows machine. I've done it several times and there's no problem with that. Shameless plug: - pygame game: http://www.usebox.net/jjm/owt/ - pyglet game: http://www.usebox.net/jjm/grid-runners/ Both games are distributed as a ZIP file that contains all that is needed to run the games. They even run in Linux using WINE! Second licensing: Python is GPL compatible, but not GPL (https://docs.python.org/3/license.html), pygame is LGPL which means you can distribute it with your game as long as in unmodified and provide links to a place to obtain the source code or you distribute the source code of the modified version with the game, and pyglet is BSD licensed (just leave the license text alone and that's it). Making games in python has some problems, but your comment failed to mention any of them!
A bit late to the party, but one of the best things I've done lately is write an automute for pls music streams. Some stations switch the icy-title to predictable strings when comercials come on. I use a terrifying combination of tail -F, a file in /tmp/ and asyncio. It works like a charm after tweaking the delays between title change and mute on/off times.
My post was originally intended to point out that PyGame is based on SDL, and therefore a great stepping stone to game development. I then decided to add a blurb about packaging, which I have found to be nightmarish. (Which is evidently just bad luck on my part. Did you use something like Py2exe? I've never gotten it to work properly!) That blurb got long winded and I totally forgot what I had originally sat down to write! Thanks for clarifying, sorry for the poor research on my part. I knew their licenses were GPL-ish. That's what I get for posting at 2 in the morning. EDIT: Also, I just spent the last 20 minutes playing your games. Well done! Thanks for keeping me up *even later*. &gt;:( 
I actually bookmarked your page so I can try out more of your games! They're really excellent work. I'm coming from full stack web development (Though, mostly back-end), trying to get into making games. Portability is definitely not one of my strong suits, since everything I write ends up getting run by *my* server or on one of two browsers. Makes a developer lazy when it comes to writing cross-platform apps. So, here's hoping game development stretches my coding muscles!
Glad it is moving on to Github. I started with this IDE and it functions ok but has no support for things like kivy or cython.
I still haven't figured out much about servo control other than sending timed pulses to control the motor has something to do with it. Looking at the code I can't see any where else besides line 14 that would have much to do with keypresses. lirc.init – the first arg "motorcont" – is that a filename or method name? Is there a file named motorcont.py maybe? (maybe that is the name of this file?) Back to your original question about scripts calling other scripts – I was thinging in the context of 'normal' scripts not multiprocessing and multithreading which do tend to call other scripts. A lot of the code I found on nullege looked multithreaded. I'm not quite that high-level yet, I've done a few multithreading hello-worlds but it's nothing I'm used to.
I present: randomsex.py (NSFW, fairly obviously): https://gist.github.com/anonymous/8091456ff9255f2f234d
Regarding your cisco config auditing system, you might want to check out https://github.com/mpenning/ciscoconfparse-audit, which checks configs with pytest and flags violations in test output. We just finished publishing the first version, but it's licensed MIT which might help if you want to modify it for your customer audits.
FYI I am ciscoconfparse's author; I found this post after seeing a huge spike in my github page views :-).
You do it using a pseudonym
It works with python 3, just not very well documented, have to jump through a couple hoops, and for some reason the [link](http://www.pygame.org/install.html) for installation instructions is currently not available. There is also a bug where you may get an error videodev.h not found and you may have to rename a couple files. I use Anaconda/miniconda to create my virtual environment. So below is what I did to install Pygame with Python 3.4 on Ubuntu machine: # After installing Anaconda/miniconda, create your virtual environment: conda create -n my_env python=3.4 # Install pygame dependencies sudo apt-get install mercurial python3-dev python3-numpy libav-tools \ libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsmpeg-dev \ libsdl1.2-dev libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev # Grab source hg clone https://bitbucket.org/pygame/pygame # Change to folder that you cloned to cd pygame # activate your environment source activate my_env # build and install pygame python3 setup.py build python3 setup.py install If you get an error relating to videodev.h, then go [here](http://askubuntu.com/questions/203630/easy-install-pygame-not-working-due-to-linux-videodev-h-no-such-file-or-direct) to apply a fix (the first answer). # http://askubuntu.com/questions/203630/easy-install-pygame-not-working-due-to-linux-videodev-h-no-such-file-or-direct sudo apt-get build-dep python-pygame sudo apt-get install libv4l-dev cd /usr/include/linux sudo ln -s ../libv4l1-videodev.h videodev.h # Then navigate to directory where the source was extracted to, then do python setup.py install # Due to bug, when trying to import pygame, you may get an error. In which case, try renaming 2 files (libm.so.6 and math.h). /home/pybokeh/miniconda3/envs/my_env/lib/libm.so.6 to libm.so.6.bak and /home/pybokeh/miniconda3/envs/my_env/include/math.h to math.h.bak For Windows, get installer from [here](http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame). NOTE: For some packages, the maintainer of this site is uploading .whl files, so take a look at [this](https://pip.pypa.io/en/latest/user_guide.html#installing-from-wheels) for installing wheel files.
pygame is pretty limited, you can't really make modern games in it except extremely simple ones (NES-era stuff, nothing really beyond that. Pygame does not really perform adequately to allow you to make a modern-looking 2D game, unless your game is very very static [match-three type puzzle games and such].) You can use it to learn the basics if you want, but it'll teach you stuff that is not at all relevant to modern frameworks and how GPUs work nowadays. I also think it is way more complicated and ugly than most of the competing 2D frameworks. It is also basically unmaintained, there hasn't been a release in over 5 years, it has not been ported to python3 (officially, as someone below pointed out. An unreleased partial port is available), it has not been ported to newer SDL versions (SDL2 - this is a big deal, because SDL2 is an incredible improvement over SDL1 in just about every way imaginable, from how rendering works to things like controller support) and it is not being ported to modern platforms anymore. [You can read some more about its limitations and issues here.](http://www.reddit.com/r/gamedev/comments/2nrxiv/is_it_possible_to_make_good_quality_game_with/cmgh5gh) In the end, pygame is what it is, and I'm sure for some people it works, but no serious game-developer would or should consider it, since it is probably the most limiting of all the 2D frameworks around, since it's at an evolutionary dead-end (already ~10 years behind other frameworks [even the "casual" FOSS frameworks like love2d], no serious progress, no company that stands behind it, and the ecosystem/community isn't big enough to push it forwards or fork it), and since it doesn't do things in a way that is aligned with how modern game-frameworks do things (rendering, performance, code structuring, middleware/utilities included, distribution, platform-support, ...), and since it doesn't give you any productivity advantages (disadvantages, if anything; it is way more cumbersome to use than e.g. love2d or libGDX, not to speak about "drag-and-drop" solutions like GameMaker: Studio or Construct2.^*) If anybody claims pygame is still a competitive/relevant choice in 2015, they must've been out of touch with the industry for the past 10-20 years. I do use it myself, because I'm maintaining some legacy applications that use it, but most of those are not exactly games (menu screens for arcade machines and such.) I also maintain one game written in pygame that runs on one of our arcade machines. I would not generally recommend pygame to a beginner who is starting out now, even if you're not serious about game-development, and just want to make a few cool things. pygame will probably make this more frustrating and difficult than anything else. Look into the alternatives, there are a few that are python-based. I don't want to give any particular recommendations, because I'm not intimately familliar with some of the alternatives (like kivy), so you'll have to do some research yourself. ^* In fact, I would even say that even the "big and scary"/"professional" engines like e.g. Unity3D are nowadays more approachable than pygame. They do still take a little more time to download and set up, but once you start adding features, things will quickly become significantly easier, since such engines already have simple UI frameworks that come with them, physics engines that can test for collision for you and resolve collisions, integration libraries for in-app ads/in-app purchases, and then to export to android, iOS, windows, linux, mac etc, you just have to basically press a single button. With pygame, you would have to write such functionality yourself, which can be quite non-trivial, e.g. writing a UI framework that works with different resolutions and aspect ratios, writing a collision detection mechanism that works with more than a handful of objects (not to speak of resolving collisions - in many engines this is basically just a checkbox you have to tick), writing integration libraries to google AdSense or some service you might use to store highscore lists, writing integration support for the STEAM API/steamworks, and then creating a strategy to export to all the platforms you want to support. Also, the amount of tutorials available for the big frameworks as well as the huge userbase that can give you support on stackoverflow et al make it very probable that you can get help solving most problems you'll encounter.
I think for prototyping a basic game that can work with rest calls, Flask would be a fine choice. It's worth noting if you need real time updates, there is socket.io support for up to 0.9 (but the lib is beyond 1.0 and I've not seen updates on an eta for python servers - due to wsgi iirc). In my experience I wrote the same site in both Node.js (using express) and Python (Flask) and the node version was much more performant, but my needs are fairly high I/O and real time data streaming (websockets) - so the use case is fairly different. That said, I tend to prefer python for most other tasks, however. Tldr; Flask = Good for prototyping, go with it and if you start seeing issues evaluate if there may be a better fit.
PyGame is a great place learn about basic game development, or to learn about Python itself. If actual game development is in your scope, creating massive 3D games and such, then no, not PyGame.
Not sure if it would be directly helpful, but you can try writing a function and then creating a lambda function with all but one of the parameters fixed. In the little bit of MATLAB optimization-type stuff I've done, that was what we did a lot. Something like def foo(x, param1, param2, param3): # code here f = lambda x: foo(x, 1, 2, np.pi) solver(f)
Hey! If I were to write a part 3, what would you like to see?
It's not my own package, so editing it really isn't a good option for me. As features are added and bugs fixed, I'd like to be able to copy the new release to my iPad without extra steps.
great for learning and experimenting simple stuff, not so great if you want 3D or advanced stuff. python is great at everything in general, except performance, so having a game loop will have its limitations. I'd say it's great anyway, it allows you to profile your python code, and find some ways to optimize your thing to make it go faster.
billturner-resume.herokuapp.com
Love your work, This module is a workhorse.
That's not pythonic and it is easy to shot yourself this way. For your case, these is a map function and list comprehension expression available: arr = map(process_element, arr) Or arr = [process_element(el) for el in arr]
I'm sure you're right that it's a path issue, and I've tried variations on your suggestion, but to no avail so far.
To Consider Python for Game Development is not a bad idea in general - the question is whether to use pygame or not when you actually want to do stuff. Here are my opinions: 1. If you Prototype use Python for as much as possible --&gt; It is quick and easy to make something visible in Python and even using pygame to get a prototype done - the main key here comes from software engineering: Writing a Prototype in the same stuff you gonna use later leads only to the reuse of this which introduces all the "bad prototype design decisions" right into your real product in the end 2. Python can be a pretty good wrapper around C/C++ --&gt; In my studies at the university we programmed robots with python and whenever there was something necessary to speed up or needs native C (Motor Control, etc.) we put it down in this language - generally with the suppport to control the general behaviour in Python - Take alook at PyBoost or Cython 3. C# is not a "higher" level language than python --&gt; Sure python is often associated with scripting - nevertheless the question is not higher/lower its the question of purpose - in such a way c# might be better because of the typed language but having not to deal with "classical types" at all in python gives you great speed in prototyping 4. I have done a project using Pygame and Python only and it works quite well - its jsut a prototype though but it is something I would consider the right approach to test out an idea. (See the full playlist at YouTube https://www.youtube.com/watch?v=W5aOrprIOUA&amp;list=PLhsG4dQgzlKuQY_4yjF6f7wlHVu7_hOV2)
You may additionally find /r/cscareerquestions useful.
Hey, thanks for posting these. I'm eager to look over your OWT project. :)
(out of the loop) What's wrong with sourceforge? 
There's a strategy game on Steam that used pygame (among some other Python libraries) called [Unity Of Command](http://unityofcommand.net/forums/viewtopic.php?t=607&amp;f=7). So it is at least possible to make a commercial product with pygame, although it might not be the best choice available.
It's not immediately clear what you think that would do, or why you think it'd be useful. Give [this](http://bit.ly/pynames) a read, it should help clear up any confusion you have.
I definitely dont like how you download things from sourceforge but here's a thread from hackernews where a variety of points are raised... https://news.ycombinator.com/item?id=4354229
How? edit: Thinking about it, you'd need to look up the id in the garbage collector and ... Look, just don't do this please unless it's the ONLY way to make your code work (and even then, it probaby means the code is broken). It's a fragile hack, and also interpreter and (likely) platform specific.
reformatting code numberlist = [math.abs(x) for x in numberlist] or arr = map(process_element, arr) 
Can you submit a pull request? Or even just file a bug with the maintainer? You shouldn't just leave it ignored on their end. In any case the fix you suggested won't work `from Package.file1 import *` is semantically different from `from . import file1`. It should be `from Package import file`. A possible solution might be `os.chdir('/path/to/Package')`. Basically the `.` means "this directory", whoever wrote that package is assuming it will always be used from a local directory.
That's pretty slick. I doubt you'll find something much like it in python. I wrote a library to make things like this: http://alternative-schools.org/ElliotHallmark/wp-content/uploads/2014/05/austin_zoning.html edit: code here: https://github.com/Permafacture/pygmaps-ng/tree/master/Examples/gis_polygons
You're getting the same problem with networkx? Can you tell us the error and the line of code that triggers it? It would help to see the source.
Change the Readme filename to `README.md` so it shows up in GitHub (lowercase the file extension). Edit: Oh wait, maybe that's not the problem. It's empty. Put some documentation or at the very least a description if you want anyone to give it more than 5 seconds thought.
http://blog.miguelgrinberg.com/post/easy-websockets-with-flask-and-gevent
Okay, I'll give that a go. Thanks :)
&gt;Wouldn't a shaded 2D map be a lot clearer? Like what I made? Or what are you thinking?
Something like this: http://basemaptutorial.readthedocs.org/en/latest/basemap3d.html Although I guess it doesn't look near as fancy! 
yeah, Power Map is fancy and incredibly easy to use, that's why I love it so much. I think it wouldn't be bad practice to stick with Python to analyze the data, export it to Excel and plot it with Power Map.
Yes, I am curious.... but docs please!
That's one of my two problems. I want all my parameters to vary, not just one. It looks like lmfit may work this way. Other solvers expect the function to return an array. I should be able to manage this if I rewrite my error function (which I really don't want to do as it will require converting a bunch of linear algebra to regular algebra). I'd rather have my error function boil down to one number (total error) and minimize it. This is how the GRG Solver works in Excel. 
Also look into scrapy. Depending on what exactly you want to do.
NP! If you have any questions let me know, I'm currently trying to streamline the installation process to make it easier to get moving.
Please write the fine manual.
I went down the pygame road once because I was (justifiably) in love with python and wanted to see how far I could go using only python. Created my own game engine with pygame, collision detection with a quad tree, used cython and numpy for performance. Lots of fun, I learned a ton. But at the end of day, it just can't compete with the ease of use of something like unity. I don't regret writing my own polygon collision detection functions and whatnot, but damn it's nice to be able to hit a check box and get a collision bounding box in unity, be able to adjust it on screen, etc. I won't lie, writing c# isn't a joy like writing python. It's ugly, you have all these ugly type definitions everywhere, but it's fast and it's very very functional. It's not a bad language, it's comparable to java, and Microsoft has good docs. Also there are plug-ins for all the major editions for writing c#. I'm using omnisharp for sublime text, so I don't even have to touch mono develop. Good luck! 
You won't find better IDE than PyCharm for python (excluding case you are doing scientific stuff). If you are a student, remember that you can get free PyCharm Professional here: https://www.jetbrains.com/student/
Sometimes I need to 'brute force' my way through Salesforce report filters to get data on a list of accounts (e.g. I get an excel file with customer names and I need to generate reports on them in Salesforce). Salesforce report filters can take up to 1000 characters each, so I wrote a script that turns a column copied from excel to the clipboard to long, commas separated, strings, up to a 1000 chars each.
Wow, I didn't know that thanks.
The win32com libraries are the full vb excel implemented in python. If you could do it in excel vb, you should be able to do it with win32com
The reason `os.chdir` worked and not `sys.path` is that `.` means "relative to current directory" not "relative to some directory in `sys.path`". Not sure what the deal is with networkx. Glad you got it working though. You should still file a bug report, because using `.` is not recommended and leads to issues in all sorts of use cases.
Thank you!
Thanks!
* I have a script that [texts me statistics on my weight loss](http://stiglerdiet.com/blog/2014/Aug/30/tracking-weight-loss-with-r-hazel-withings-and-ifttt/) every time I step on my scale. * I have a script that adds all my Facebook posts from the last month to my [Day One](http://dayoneapp.com/) journal every month. (They're saved to a text file via IFTTT.) * I have some scripts to auto-tweet on various accounts. * I have a script that watches my Pinboard pins and automatically creates [link posts](http://stiglerdiet.com/category/sundry-links.html) for my blog. * I upload sermon recordings for my church. I have scripts to help automate this with the [Auphonic](https://auphonic.com) API. There are probably more.
Correct. JetBrains don't include any of their web plugins in any of the free IDEs.
I can see why it'd be why it seems appealing, but typically you'd want to maintain dependencies separately per project anyway, greatly mitigating the benefits of a unified package like this.
Well, redistributing the JB ones would be piracy since they're not covered by the Apache license that the open parts are under. You could make your own, but then you'd also need to port all the plugins that are built against the JB HTML plugins (more viable than it seems at first, since even a lot of JB plugins that depend on Ultimate-only plugins are open source).
Out of curiosity, I've got Selenium to work now, and I can navigate to the webpage I want, and have it enter the username and password, but I want it to remember this for next time so I don't have to keep logging in each time. The problem I have found is that it opens a fresh profile of Firefox each time, when I want it to keep my cookies from the copy I am using right now. Is there a way to do this?
&gt; it has not been ported to python3 I agree with everything else, but Pygame does work in python 3, if it's compiled from source.
For the pygame code, you aren't using the correct update method. You only use display.flip for hardware surfaces. Just call display.update() for the default display settings.
Thanks my bad.
do i replace display.flip with display.update? when i do so, i still get a black square... sorry, i'm really new to pygame, my friend introduced me to it two hours ago.
I can't seem to get this to work. When I go and save the current cookies after logging in, I can't then add them back in, as it says I can only set cookies for the current domain. I want to load the cookies from my current Firefox, but I'm not sure where they would be kept and whether I would be able to use them.
I don't think you understand what the term "higher level" means.
I would include the dependencies rather than a script that fetches them, so you (the developer) are running pip. I have a tool [Pynsist](http://pynsist.readthedocs.org/en/latest/) for distributing GUI applications on Windows that works somewhat like this - it copies dependencies into a `pkgs` directory and writes a launcher script that adds that to sys.path.
How are you declaring your exception class?
Sorry, my inexperience is showing! I've edited the original post per your request.
I'm not advocating its use, just stating it technically supports Python 3. Still, you're greatly overstating the difficulty in compiling it. I can't speak for Windows, but my experience was as simple as `python3 setup.py install`, just like any other package downloaded off PyPI.
Sure, such things tend to be very easy on linux. You need to look at the worst case situation across all the platforms you want to support, not the best-case. Windows will probably be the worst-case, and OSX probably somewhere in the middle (or maybe as easy as on linux.) But windows is also where 95%+ of your users are. And yeah, if using it requires you to jump through hoops such as downloading a 12 GiB IDE from microsoft and then compiling it yourself to get a reduced subset of features, then the support is *very* "technically". For a relative newcomer, there is no way this is a feasible option.
Did you look? `scipy.interpolate`
Maybe you want to do a regression? Take a look at `statsmodels` maybe.
I installed numpy with terminal: pip install numpy Edit: Thanks! Anaconda has saved me!
&gt; Question: HOW DO I DE-INDENT A PARAGRAPH?! Searching for an hour over here Shift+Tab.
PyGame is a fat wrapper around a very old SDL version. If SDL is what you care about, using PySDL2 is probably a better choice. (CryEngine also uses SDL2, btw) Also saying that "CryEngine is written using SDL" is a bit misleading. It is true that SDL is used in many modern engines, but it does not generally play that big a role and can be (and is) easily switched out with other things. SDL is usually used to create a window, a drawing context, and then often to handle some input stuff like joysticks etc. If I were to guess, out of maybe 5 million lines of code in their engine, probably less than 5k-10k are SDL-specific. Once you run the engine on some other platform (like most consoles) the SDL part is switched out with the native context/window/input-handler libraries of that system, and I bet on windows they are using DirectX instead of SDL. (You can use Direct3D with SDL, I think, but that'd probably be a rather wacky thing to do. I'm also not sure if this works with newer D3D versions.) So it'd be more accurate to say that CryEngine started using SDL as a helper-library when porting the engine to OSX/linux. 
After installing Anaconda, everything is working great. /Users/me/anaconda/bin/python
Ahem... cookiecutter is about project templates, not environments. Of course, people build templates for projects using cookiecutter, but that isn't quite the same thing.
Perhaps some of them are simply boring problems given a good set of libraries.
I don't have the money :(
Wow, that's a really neat example! I find this way more useful and easier to read than OP's example.
Consider [PyInstaller](http://www.pyinstaller.org) too, it is multiplatform and supports a lot of external modules.
I've kind've been looking for similar solutions recently and haven't found anything purely Python. If you're willing to look into a browser-based solution with Javascript, you could use [Cesium](https://cesiumjs.org/demos.html), which does 3d maps with graphical overlays pretty nicely. In addition, if you're using the IPython notebook, you could very well create a Cesium widget that interfaces with Python calculations in real time. Here's a video demonstrating [IPython Notebook Widgets](https://www.youtube.com/watch?v=8T-sQztK6uc) including a 3d Javascript visualization library.
Ok i see the edits. I was looking at the [.lircrc file format](http://www.lirc.org/html/configure.html#lircrc_format) and it gave me several questions to ask: ``irexec`` just 'sounds' like it's executable. IF irexec (given as prog) is executable and config 'mpc blah' are arguments that work, what if motorcont must be executable? is motorcont executable? it would be funny if ``chmod +x`` fixed the problem or something like that :P
Take a look at a [pygame implementation of a mandelbrot of mandelbrots I did in the past](https://github.com/stefanoborini/mandelspace), using cuda. 
Hi, this is the author, Al Sweigart. The Feb 25th date was pushed back to April 25th a couple months or so. The good news is that last week the final draft has been put together and sent off to the printers. It'll take a few more weeks for the proof copy to be approve and mass printing to start, but it looks like the April 25th date is on target. Thanks for the interest!
I wasn't trying to make any particular statements with what I said, I just wanted to get the facts straight. That being that pygame does use SDL, but a very old version, and if SDL is basically the thing you care about, you would probably prefer SDL2, and that for cryengine, SDL2 is just a small utility library that helped them to port to OSX and linux faster. But since you said it this way, well, guess I'll reply to it here... "Pygame is just as good as any." - IMO it's worse than any of the others. "It's well documented" - IMO it's worse documented than most of the others "performs relatively well" - I have yet to see a framework that performs worse, esp. when you compare it to how much work you have to put in to do anything in pygame. "relatively small amounts of required skill" - I think it is way more difficult to use than most of the other frameworks, and once you want to do anything even slightly advanced, you're entirely on your own (e.g. physics or a UI.) See my other comment where I compare it a bit to unity et al. "all using similar basics" - hmm, I think if you think using SDL2 and monogame or e.g. SDL2 and Construct2 (to name a HTML5 engine) have anything in common, you haven't used both of them. The workflow is entirely different. But I've already written quite a bit about that in my other post in this thread...
You could try Anaconda/Miniconda. They take a lot of the pain out of installing python modules with build dependencies.
Thanks. I guess it's a good alternative to vagrant.
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
What is better if you are doing "scientific stuff"? (signal and image processing)?
I will argue this to the death, as im a video over book learner: SentDex on youtube Also he just put up a website, pythonprogramming.net I believe. Guys fantastic for beginner-intermediate
Your the man!
You know, there's so much confusion about things like virtualenvs and the `PYTHONPATH` environment variable. If you're not familiar with the mechanisms for setting up environment variables, `sys.path` might be all you need to care about. Look what setting `PYTHONPATH` actually accomplishes: user_rx$~ PYTHONPATH=/somedirectory python -c 'print(__import__("sys").path)' ['', '/somedirectory', '/usr/lib/python3.4', '/usr/lib/python3.4/site-packages'] Guess what else accomplishes this? #!/usr/bin/env python import sys sys.path.insert(1, '/somedirectory') import somemodule import someothermodule 
Are you suggesting that I put &gt; sys.path.insert at the top of all of my scripts as a quick fix or as a permanent fix? For only certain occasions or for all occasions?
I've done a little work on integration between python and cesium. I think that would be the best bet for creating the visualization. For the interactive part, I think eventually Bokeh will provide the components for that. Technically it does now, it's just a little bit of work to hook things up. 
If you are doing scientific analysis, the [IPython](http://ipython.org/) notebook really shines. It can do inline code, markup, images and plots all inside a browser. The [Anaconda](http://continuum.io/downloads) distribution for scientific Python is probably the best for getting everything you need in one go.
will do, thanks!
I like and use vim frequently, but there are things an IDE can offer a terminal just cant. Talking about PyCharm specifically, I am constantly amazed at new features I discover. For instance: - Pycharm can recognise what template file a url route renders, and not only shows an icon, determines if it exists. - Run configurations for launching, deploying, testing and cleaning up. - Very slick debugging, with breakpoints, watched expressions, and simple launching of debug servers. - File watchers, which automatically transcompile known languages (Sass, coffeescript), and give instant feedback when they aren't valid. - Inbuilt database connections for viewing and querying databases. - [Schema diagrams](https://lh5.googleusercontent.com/v0tWQI7EJM2Faf1X-u63aim_dSU9odYgFnzS-fnk4jhtZtEV21Xr_so60AW24_Z75lXJFrR3fwEr_QNezEDgW_jBJYQvsbP8Li9tyNt7E04ByN1tJdKl1emoTA), for Python classes, SQLAlchemy/Django Model relationships, and relational database diagrams. They are very informative, and of course you can click on anything to bring it into the editor. - Pop up documentation. You can bring up the docs for a class/method/function and the function signature with a hotkey. - Very tight integration with version control and github. - Version control is also coupled with a local history log, Which show changes over time, and when files where committed, tested, and labeled. Also has a very pretty diff window. that visually shows the changes between the versions. - Inbuilt shells, which can use additional interpreters (IPython) - Virtual environment and package management. - A *bunch* of other stuff too. Most of this can *sort* of be accomplished with extensions, configuration and hundreds of hours of experience and trail and error in a terminal, but there is absolutely a huge benefit to having everything there and working in a stylish interface that makes good use of the space.
I've always just hard coded the username and passwords that I use into the programs. Its probably pretty unsafe though to keep the passwords in plain text like that though.
Using native data types is certainly easier than importing/exporting to JSON or CSV or whatever on disk format.
The Treehouse Python track is decent but not free: http://teamtreehouse.com/library/topic:learn-python I just can't get into LPTHW As eddwinn pointed out pythonprogramming.net looks really really good! Good luck
LPTHW is very comprehensive and well rounded, however it actively advocates *not* to use Python 3, and says: &gt; Just learn Python 2 and ignore people saying Python 3 is the future. (Quote from the bottom of [Exercise 0: The Setup](http://learnpythonthehardway.org/book/ex0.html), near the bottom.) In 2015, that's pretty ignorant and shows it's quite out of touch. Python3 has been releasing [since *2008*](https://en.wikipedia.org/wiki/History_of_Python#Version_release_dates). For new learners, there is *no* reason not to use the version that has been updated and supported for almost *7 years*, with almost ubiquitous package support for all but legacy modules now, and a cleaner, more up to date and actively developed language.
There's also http://www.realpython.com
Go for it! I would assume you are using some form of SDR (Software Defined Radio), in which case, I would get nice and familiar with [GNURadio](http://gnuradio.org) and its [Python interfaces](http://gnuradio.org/redmine/projects/gnuradio/wiki/TutorialsWritePythonApplications). Some suggested reading on [GNURadio can be found here](https://gnuradio.org/redmine/projects/gnuradio/wiki/SuggestedReading), and also would suggest /r/gnuradio, /r/sdr, /r/rtlsdr :)
A python wrapper for the geonames dataset. These tools are very much dependent on the gazateer used, that's why google charges companies 100k to get more than the 2,500 free queries by the maps API. 
Please do! :-)
I like [Spyder](http://spyder-ide.blogspot.com/?m=1)
Agreed, I have been using more and more features of python 3 and noticed how it has taken a fairly significant leap. Anyone starting won't touch much of that, but they may as well start with py3 even though most of what they'd do there is likely py2 compatible. 
Since Zed gives plenty of extra homework and stuff to lookup in LPTHW, and since it's still (imo) a great resource for learning Python, I suggest just adding "P.S. Research how to do this exercise in Python 3." to each lesson.
I use vim for banging out a quick script, but for large projects pycharm is really quick.
I don't have access to a .edu email
I was just trying this out today actully because I want to be able to visualzie numpy arrays in a better way than using pretty print. I couldn't figure out how to get my instance variables in the variable viewer though, it seems only globals are available. Any idea on how to do that?
The RHEL derivatives default to Python 2.7 So if that's your primary platform then Python3 may not be the best choice.
Hi friends, i had update readme.md
Vim
Like this: https://github.com/kennethreitz/requests/blob/master/requests/status_codes.py ? (fwiw, that's one of the most popular python libraries and I'd say, a pretty good example of good coding style)
If you release a library, say on github (or my favorite, bitbucket), by definition you have your code out there. If you use jQuery, you can download the source code. You can see through it, see what they did &amp; how, etc. Say you wanted to do something... make a library that handles comment rendering, like reddit has. Great. You release the library. You'd put it on bitbucket, and people can download/use it. You'd document it. You make a page explain what it does, how to use it, what functions are available (the API). Now I'm interviewing you, and on your resume you have this library thing. I check it out. 1) It looks very well documented. This is the first thing I see. 2) It says what it does. You'd be amazed how many things don't describe, in two sentences, exactly what this thing does and what it's useful for. 3) I see examples on the page. 4) I see an example site where it's actually being used. Already, I'm impressed. A well documented, useful library, and I could potentially see myself using this kind of thing. I haven't even looked at the source code, but I don't need to; I've see the API in he docs, the 10-line example of how to get started and how to use it, and I assume that the code is as high quality as what I've seen so far. If I'm really interested, I'll go look at the source. But again; at this point, the candidate has already proven themself. Now I interview someone else. They look good on paper, but have so-so communication skills. I can't tell if they're 1) a rockstar, who develops and manages and teaches, and should be on the committee for the next javascript language revision, or 2) someone who talks big, but is not as incredibly smart &amp; quick as they think. Even if both candidates are equal, I've seen real work from the first, and I can judge how they might fit into our team (code wise). There's a lot more to it than just the quality of your code, but it's a pretty fundamental thing when hiring. Nothing worse than someone who has amazing things on the resume (helped write Oracle's next-gen DB engine), but when it comes down to it they can't deliver, you'd never go to them for advice, and you realize "helped" means they worked on a small, inconsequential part of a large project. Resumes are important, don't get me wrong; but I don't trust them. They're like someone at a bar talking about how awesome they are; that may or may not be true. It has to be proven. Everyone thinks they're great.
Great news! Thanks for the update.
I agree . I did not realise it was not updated. I will change my initial post. (Ironically I make "migrate to 3" posts here so I really failed today.)
Really this again? Hardware design is almost nothing like programming, I wish people stopped trying to conflate the two. All MyHDL does is add a level of abstraction (usually something you don't want) with a confusing syntax that produces nearly identical code as what was entered. Then there are a bunch of features that make the intent almost impossible to understand like the use of yield statements for delays. Sure they make sense in the context of a single module but they are almost impossible to understand with multiple modules interacting. This apparent high level language then mixes in raw latches and flip flops, like sprinkling assembly into a python program. Please just learn verilog of VHDL. Or design an actual HDL and not a cheap imitation of one that will ultimately confuse more people than it helps. &lt;/rant&gt;
In fairness most people I know hate VHDL. As far as I know it's only used mostly in academia now. Almost all companies I've seen use verilog. Which although not great is still a lot better.
&gt; It lags a bit on language updates. As I said. :P If you want the latest base IDE and editor then IntelliJ is the choice, if you're adamant about having the latest Python integration, go with PyCharm. &gt; It's pretty expensive too. If you are just doing python and web dev stuff(Javascript), then Pycharm is the choice. OP seems to be a student, so he/she gets either free atm anyway. Regardless, if you use any other language as well then IntelliJ becomes the cheaper option. 
I can do that, but the problem with me doing that is that I'm logging into Steam. Doing this without cookies brings up a verification window, where I have to get a code from my email. Logging into my email will then ask me for my 2 step authentication code, which is on another device and has to be manually typed. I just want it to be logged in and click a button :(
Based on how irrationally angry you sound, I'm going to guess that you do RTL for a living :) &gt; Hardware design is almost nothing like programming, I wish people stopped trying to conflate the two No one is claiming this. In fact, the webpage makes it clear that MyHDL is not a HLS tool 'It does not turn arbitrary Python into silicon'. &gt; All MyHDL does is add a level of abstraction (usually something you don't want) with a confusing syntax that produces nearly identical code as what was entered. see http://docs.myhdl.org/en/master/manual/conversion_examples.html &gt; Sure they make sense in the context of a single module but they are almost impossible to understand with multiple modules interacting This is perhaps the most ridiculous statement in your post. What about MyHDL's semantics makes the interactions across modules more confusing than a conventional HDL? I would argue that python's namespace rules are clearer and more explicit than verilog's. &gt; This apparent high level language then mixes in raw latches and flip flops, like sprinkling assembly into a python program. This sentence makes absolutely no sense.
Quite literally. There is one reason and one reason only I don't use scrot. The author is probably not a native English speaker. It's otherwise a great tool. 
&gt; Based on how irrationally angry you sound, I'm going to guess that you do RTL for a living :) &gt; How did you guess :p &gt; No one is claiming this. In fact, the webpage makes it clear that MyHDL is not a HLS tool 'It does not turn arbitrary Python into silicon'. No but they are making the claim that hardware design can be as easy as python. Their homepage literally has the slogan "From Python to Silicon!" &gt; &gt; All MyHDL does is add a level of abstraction (usually something you don't want) with a confusing syntax that produces nearly identical code as what was entered. &gt; &gt; see http://docs.myhdl.org/en/master/manual/conversion_examples.html Kind of proves my point, none of the examples here were any simpler in My"HDL". The entire always block in bin2gray example can be expressed in a single combinational statement in verilog. G &lt;= B ^ {1'b0, B[7:1]} &gt; This is perhaps the most ridiculous statement in your post. What about MyHDL's semantics makes the interactions across modules more confusing than a conventional HDL? I would argue that python's namespace rules are clearer and more explicit than verilog's. Primarily opinion based. Although [namespaces are a good idea](http://legacy.python.org/dev/peps/pep-0020/). Part of this I realize now stems from the way the author is mixing his sim code into the examples and not the actual language. &gt; This sentence makes absolutely no sense. I'll try again after I sleep
&gt; make the intent almost impossible to understand like the use of yield statements for delays In MyHDL, "yield" means "wait". That's how difficult and confusing it is. 
I'll admit ignorance about Europe. But I've done a lot of work with FPGA's and know a lot of people who have worked for Altera and they are very much a pro verilog company. Xilinx does seem to fall into the VHDL camp though. 
You forgot the colon in PYTHONPATH in your bash_profile.
I think it's a joke. What's the issue?
Obviously I am not talking about the preference of Altera or Xilinx engineers, but about their customers.
&gt; Hardware design is almost nothing like programming Of course it is. http://www.jandecaluwe.com/hdldesign/thinking-software-rtl.html
Non-mobile: http://en.wikipedia.org/wiki/Simple_linear_regression#Confidence_intervals ^That's ^why ^I'm ^here, ^I ^don't ^judge ^you. ^PM ^/u/xl0 ^if ^I'm ^causing ^any ^trouble. [^WUT?](https://github.com/xl0/LittleHelperRobot/wiki/What's-this-all-about%3F)
Just avoid distractions. Before you open your browser, or anything, just think, "is it about Python?" Try a different stimulant, orange juice is my personal favourite. 
I was under the impression that you could use Python as a scripting language in unity, care to clear that up? 
I would suggest https://www.coursera.org/course/pythonlearn for python2. Its a university style introduction to programming using python. You can either wait for the next course to start, or download the textbook and do it yourself.
The brain needs down-time to process information and move it into long term memory - trying to focus continually for long periods while learning can be counter-productive. Try using the [Pomodoro Technique](http://pomodorotechnique.com/): set a timer for 25 minutes and focus completely on learning your subject. When that goes off set another timer for 5 minutes and take a break during that time, avoiding thinking about the subject. Ideally get up and do something physical rather than browse the web. When the 5 minutes is up start another 25 minutes of focused concentration. Take a longer break every couple of hours. Coursera have an online course called [Learning To Learn](https://www.coursera.org/learn/learning-how-to-learn) which is pretty good. It is based on the book [A Mind For Numbers](http://www.amazon.com/Mind-Numbers-Science-Flunked-Algebra/dp/039916524X).
Please think again - the example in the paper is a totally different one - not a combinatorial binary to Gray decoder, but a *direct* Gray *counter* (that is, a sequential circuit where the gray code itself is used as the state). I challenge you to provide a clearer solution for the same spec.
Such as? There are a lot of problems, and a wide audience. The hope is that one persons boring is not everyone's reaction.
But using Pygame isn't as convinient and smooth to use like unity for example, right? (Not mocking,I honestly want to know)
You fixated on how they chose to represent that one line in gray code and ignored everything else. Why they chose to represent it in that format is a whole another story irrelevant to this discussion. The gray code could be represented in myhdl like you want it using the concat function. Here is what you didn't notice: * the MyHDL examples are more concise and involve little to no boilerplate. * helpful abstraction layers like always_seq (which automatically infers reset behaviour) and always_comb (like system verilog) Additionally, MyHDL * Is great for simulation * Much better then Verilog for dealing with external data in testbenches(like images, network packets etc) * Great at parametrization * Supports interfaces.
I challenge you to provide an example where a far easier combinational circuit is not what every single engineer in the world would write instead of adding unnecessary complexity to their tool chain. And once again. The produced code is almost identical to the input. The only magic that has happened is the resets. 
Afaik, PyCharm can visualize arrays too since ~4.0
Honest question: what is wrong with sqlite?
Honestly, it's all about whether you find it interesting, I think. I have no problem learning new languages. I have a problem of learning too many languages, without actually learning the full stack or enough to actually make a useful project out of it. If you find it fun, you'll be able to concentrate. If you're drifting away after an hour, get up, do some walking and come back.
I may need to read scapy's source code to have better understanding, but AFAIK, scapy doesn't support those fields. Okay so I read a bit about Tsecr and tsval, it is Timestamp option, so you should be able to extract it from timestamp field, there's no TSVal and TSecr field directly. Try ACKer.options
1. Bitching about an extremely high quality piece of software that you couldn't have written yourself in ten of your miserable lifetimes. CHECK. 2. Trying to pass yourself off as knowledgeable, while giving weasel answers to legitimate questions. CHECK. 3. Regular poster in super low quality subreddits and not doing any effort to raise the quality bar in them. CHECK. Ladies &amp; gents, we actually got ourselves a pathetic excuse for a human being over here.
Well yes, as I said :).
pelican: http://blog.getpelican.com/
&gt; I challenge you to provide an example where a far easier combinational circuit is not what every single engineer in the world would write Fine. The designers at Altera that you seem to know so well found *the same* example interesting enough to post [their own (cumbersome) solution](https://www.altera.com/support/support-resources/design-examples/design-software/verilog/ver-gray-counter.html). With that out of the way, back to my challenge please. Please show me your code for this problem that is significantly clearer than my solution.
I think learning a language for the sake of learning a language is always going to be tough. It feels like a purely academic exercise, with little in the way of reward. It usually works for your first language because the reward is "being able to program". And it works in university because the reward is not failing your classes. But beyond that... For me, the best thing to do is to teach yourself a language while trying to write useful software. That way, the learning of the language becomes the means rather than the end, and you are motivated to do it because it helps you create the software you want to have made. I taught myself C# in order to write games in Unity, I learned Javascript to work on my website, and I (re)taught myself Java in order to make Android apps. It's much easier that way.
Take a look at the static site generator Pelican. http://blog.getpelican.com/ 
I see you are eating your own dogfood, using your own homegrown ORM. Any reason you don't like using SQLAlchemy?
Yeah I know this I was asking that guy specifically why he cares if the name is so.
I suggest a programming challenge site like Project Euler or HackerRank helpful. It gives you something to implement. 
Yeah it's really going to depend on whether the framework and or the PostGres engine are smart enough to handle it. What I can't have is one TCP/IP transaction per row insert. But this is a great starting point, either way. Thanks. 
Having something specific that you really need to do that requires an actual insight into programming helps A LOT. Your user name is offputting and I am not writing more now I see it. Darn.
Cool! I'd been thinking of something like this myself.
In previous versions of unity you could use a language called boo, which you could call a python like language with type declarations that runs on the dot net framework. http://blogs.unity3d.com/2014/09/03/documentation-unity-scripting-languages-and-you/ It's not iron python, which is an actual python interpreter for dot net, and actually worth looking into if you're at a Microsoft shop and want to write python. So you could write in boo but no one had example code and no one answered questions about boo online because almost no one used it, as the blog post mentions. And of course half the goodness of python is its libraries and you get none of those when you use boo. 
It's also kinda sad though that the only way you can use PyQt is under the GPL. I like the GPL, I really do, but sometimes I want to make code freer to use than that. I'd also imagine it precludes adoption by a great many companies, a small proportion of whom would then likely have extra people to help development of PyQt itself (to improve it for their needs, and consequently for everyone else). Even just LGPL, so you could use it as a standalone library without worry about GPL-infection, would be awesome.
thanks. If you have any suggestions or issues, you can push to me in the github.
 Traceback (most recent call last): File "work2.py", line 13, in &lt;module&gt; main() File "work2.py", line 11, in main execute(['irsend', 'SEND_ONCE', 'raw', 'KEY_VOLUMEUP']) File "work2.py", line 4, in execute p = subprocess.Popen(command, stdout=subprocess.PIPE, NameError: global name 'subprocess' is not defined
[Scrapy](http://scrapy.org/) is a web crawler/scraper and [Scapy](http://www.secdev.org/projects/scapy/) is a Python tool for manipulating packets.
Thats unfortunate, i am dealing with packets that require both seq and ack and full timestamp to be derived from the syn ack recieve packet. Any idea how i could accomplish this with or without scapy, using python on linux?.
There's a few popular misconceptions about SQLite running around. I tried to address them here: http://charlesleifer.com/blog/sqlite-small-fast-reliable-choose-any-three-/
Yup I'm all good now. Just trying to find a way to get everything to fire in parallel (as in not wait for omxplayer to finish) # -*- coding: utf-8 -*- import subprocess from subprocess import call call(["omxplayer", "/home/pi/videos/301.mp4"]) from subprocess import call call(["irsend", "SEND_ONCE", "hdmi", "KEY_A"]) from subprocess import call call(["irsend", "SEND_ONCE", "RM-U305_func", "KEY_DVD"])
You don't have to import call thrice.
Because they want to be able to distinguish function calls with bad arguments (a bug in the user's code) from other kinds of TypeErrors (which probably indicate a bug in the function).
I want to improve automation/scripting skills. They need to have this available as a single file that anyone can print out. Goign database route would likely be a good idea, but that may have to be a "down the road" type thing. thanks for info !
Any chance you could give me a rough example of either method? Sry new to python scapy and programming, trying to pick up as i go.
Sure, as mentioned in the docs, a full example can be found here: https://github.com/hatnote/weeklypedia/blob/master/weeklypedia/crontab Basically in most basic setups, if you have cron jobs, they're going unmonitored. This tool allows you to leverage your webserver to monitor cron jobs through RSS. It takes about 5 minutes to set up and t's certainly been sufficient for [Weeklypedia](http://weekly.hatnote.com/).
* 4 spaces to indent code properly * what exactly is the problem you are having? * /r/learnpython.
You gotta learn how to Google, man. First result when Googling "subprocess don't wait": http://stackoverflow.com/questions/3516007/run-process-and-dont-wait Second result (much better imho): http://stackoverflow.com/questions/10965949/can-subprocess-call-be-invoked-without-waiting-for-process-to-finish
If you want to make a getting started post about login using `&lt;insert framework here&gt;`, _please_ do not skip password hashing or tell people to read about what a hash function is on wikipedia! It's not helpful! Flask comes with basic password hashing functions from [`werkzeug.security`](http://werkzeug.pocoo.org/docs/0.10/utils/#module-werkzeug.security) which are so simple to use, you have no reason to not include them in the example.
Crotal ?
I think so. I just noticed this on the http://www.nostarch.com/automatestuff site: &gt; Full PDF ebook now available! ePub and mobi files coming soon But as far as the orders &amp; fulfillment end, I mostly know just what's on the public website.
Note that there is already a groupby in the python builtin itertools module 
There is. I find that this version is more useable, since I don't have to worry about remembering to consume an iterator two levels deep and it's also a permanent grouping I can consume multiple times if needed. To get a comparable effect with `itertools.groupby` I'd need to do this: grouping = {} for k, v in itertools.groupby(it, key): grouping[k] = list(v) `toolz` also touts it as the fastest pure Python implementation, but I'm unsure about that claim.
Can you just do process.kill()? Also, you could use process.pid to get the process id of omxplayer, to kill it specifically later on.
or when you are there, teach people that there are ready solutions that tackle problems that newbies don't have a clue about. Flask-Login is nice, easy to implement and hides all the ugly bits. Stop teaching people to reinvent the wheel. Especially when it comes to login/security mechanisms.
The downvote was likely because it says right in the sidebar: &gt; If you are about to ask a question, please consider r/learnpython.
They both serve drastically different purposes. Redis is a fast in-memory key-value store with extra features. SQLite is a relational database stored in a single file. Do you want a relational database or a key-value store? To be honest, I find this question a bit worrying. Redis and SQLite are two pieces of software that I don't believe can ever be compared in isolation of the problem that they're being used to solve. I get the feeling that you don't understand what one or other of them actually is. I'd strongly recommend that you go do some research and experimentation. Read up on Redis and SQLite (and relational DBs in general) and try writing some trivial projects using them so you get a basic idea what they might be used for. It would also be worth thinking about using a full RDB like PostgreSQL or MySQL, since one of those may better suit your needs.
Do you know what kind of web application you wish to build? Both can be well suited for building web applications however they are vastly different and both could also be poorly suited for the task too. What could be pro for Redis in one situation could be a con in another. I'd suggest looking at both technologies yourself then figuring out which would be best suited for the case you had in mind.
amazing stuff man!
Is that not dangerous? Will I still be able to start it later? When I've killed the process before sometimes I had trouble relaunching it.
Not enough information to advise.
Killing processes is fun and easy- check out the psutil library for some great options regarding finding and messing with system processes.
Thanks. I'm using an actual physical scanner, but there is only Windows software for them. I guess none of my fellow linux nuts are also scanner nuts. Appreciate the suggestions and will save this for when I dig the stick back out. And when I'm through, I'll need an interface for my old tube radios :) 
Oooh, like an actual radio scanner and not an SDR? Are they controlled over a serial port or serial-USB converter or something? Or are they accessed via the sound card?
Everyone is telling you that the software you wrote belongs to the company, and strictly speaking that's true. But that doesn't mean it's impossible to license it back to the company...you just need to be smart about how you do it, and willing to take on a bit of risk. Don't aim to get the support of tech people for your code, aim to get buy-in from the business to the concept of your code. Then suggest that a third party may have something that would do it...
Try to print Acker.options to see the timestamps. The other method you may need to read the RFC
Genuine Radio Shack and Bearcat boxes. Historically they were serially connected. Newest scanner has a converter in the cable to that goes to USB.
Well, you can access the serial-&gt;USB ones using /dev/ttyUSB0 and Minicom, or in python, the "pyserial" module should do the trick :) I guess you will have to figure out the command protocol, baudrate, etc over it and all that, hopefully its documented!
Check out seaborn which makes use of numpy, pandas, statsmodels and matplotlib for snazzy statistical plotting, including confidence intervals on regression models.
I think Sublime/Notepad++ (I personally prefer Sublime) with some pep8 plugins should be sufficient for getting started, especially if you're just getting started. I tend to only bust open PyCharm when I'm writing application-oriented code (split across multiple files, using code completion, etc.).
Is this basically instead of writing a setup.py?
so am I
so it's kinda like dev C++ in a way?
[spyder](https://pypi.python.org/pypi/spyder). I suggest it when pycharm or pvts too slow and you need IDE more than text editors like sublime/vim/notepad++. Spyder also come bundled with anaconda, winpython, and python(xy)
Depending on where you live there might be an organization that gives out used computers for free in exchange for volunteering. For example, [Free Geek](http://freegeek.org) in Portland, OR.
Hi all, I've just released v1.1 of Reddit Terminal Viewer. I initially posted this a few months ago and got some great feedback! Thanks to the help of some awesome contributors we've added a bunch of new features including voting, leaving comments, and opening links in your webbrowser. Initial post: http://www.reddit.com/r/Python/comments/2xmo63 
Interesting. In researching the answer to this problem, I learned a few important things about using pipes. First, the call to open a FIFO for read will block until another process opens that FIFO for writing. You can avoid that by opening with the additional flag 'os.O_NONBLOCK'. However, that might cause additional problems. When the child goes to read, if no data is available, rather than block, it will get a special error EWOULDBLOCK, which it needs to be prepared to handle. Since omxplayer wasn't expecting a non-blocking read, it may not be prepared to handle this. The easiest solution may be to make sure you open the writing file descriptor first, then the read. You will temporarily be in a situation where you will have the pipe open for both reading and writing, but that's fine. Then when you launch the child, it will inherit both reading and writing ends, but immediately close the writing end (because of the close_fds option, combined with it being told to actually make use of the read end). Finally, close the read end in the parent, and you should have a single write file descriptor in the parent and a single read file descriptor in the child. # Prepare the pipes write_pipe = open('/path/to/pipe','w') read_pipe = open('/path/to/pipe','r') # Start child subprocess.Popen(['omxplayer'...], stdin=read_pipe, close_fds=True) # Close the no-longer-needed pipe read_pipe.close() I also noticed that some examples are using the low-level os.open, os.write, and os.read functions instead of the usual 'open' method and its file object that it creates. These low-level functions only provide a file descriptor; no object, no buffers, no iterators or other useful features. subprocess will happily accept either, and you can add a file object on top of a file descriptor later or get the file descriptor from a file object. I'm not sure if there is a specific reason they were using those low-level methods, but it might be something to look into. Cheers, and thanks for the gold!
My guess: open a selenium session, do your login stuff, use get_cookies to get your cookies and save them in your project folder. Then, set_cookies every time you start a new selenium instance.
I have never used this, but it looks to me like you just need params. I believe those are the only values that are changed in order to reach a minimum. You *can* also pass in other args and keyword args, but they will not be varied in the process of minimization (they are constants as far as the minimization is concerned.) so to minimize a function of x,y and z, but keep w constant: def myfunc(x,y,z,w): #do stuff return result def residual(params,w=5): x = params['x'] y = params['y'] z = params['z'] result = myfunc(x,y,z,w) #calculate the residual, the value you want to minimize res_value = stuff(result) return res_value myparams = {'x':Parameter(value=2,min=.001), 'y' = Parameter(value=2,min=.001), 'z'=Parameter(value=2,min=.001)} minimizer = minimize(residual, myparams, w=5) #args and kwargs must match what residual expects. I expect you'd pass in your target array as one of those keyword arguments so that you can use it to calculate your residual.
borrow it. Pycharm pro worth the pennies ...
Bought my Toshiba in 2005, "upgraded" it to 2 Gb RAM fairly recently and PyCharm runs nicely. Maybe the problem is not in the hardware?
&gt; Which is probably to be expected, since I wrote it, but yeah... no worries, there's a few others who are scared to try SQLAlchemy but love Peewee :-)
Would it not make more sense to use automatic wrapping method? For example what PySide does. Maintaining wrapper generator would be much less work than maintaining wrapper itself. Besides there already is a wrapper generator.
There is. It's called twine2, and it's on gitorious (but undocumented). PyQt has its own called MetaSIP (also offered without docs). Both were too complex for my skill to understand. However you do need to adjust the generated code by hand sometimes.
Part of the KDE Frameworks 5 are cross-platform too (and some only depend on Qt - they're divided on three "tiers" depending on deps). And the way PyKDE5 (unfortunate naming, given there's no "KDE5") is set up would allow to use only whatever is required. However I have no idea if anyone managed to compile it on Windows / OSX.
Not much has changed in this one--it's only been three weeks since the last alpha.
Funny, I had the exact same idea as this a while ago. Good thing I never got started making it.
I was also under the impression that *everyone* uses ipdb.
Well *I* (sometimes) use [`pudb`](https://pypi.python.org/pypi/pudb).
It's a bit more complex than that, but kinda.. It's a bad idea even for pure python stuff, the files in the virtualenv get !#/location/of/virtualenv/bin/python added at the top, so it will only work from exactly the same path (and the you only get Your-OSs version of python) It's a pain that you can't just install use pip install to get stuff like Wx in a virtualenv, there are quite a few factors at play. I've started this project https://github.com/stuaxo/vext to let you use stuff like Gtk in a virtualenv (it uses the system installed version) - I made an experimental vext.wx package, I'll try and upload it on github.. 
It is not required to have a .edu address. I am at a Danish university and my @au.dk address gave me free access to Enthought. This is probably true for a lot of university domains.
Cool thanks! Is there a resource you used to determine all this so I could try and figure this out on my own (long shot)? I'm headed to work but will remote in and see if I get any hangs. Thanks!
Hi, thank you for the reply. I have added your information to our shortlist.
Ever since I started using ipdb, the whole experience with python on the console has become infinitely better. Something as simple as tab-completion can go a long way in exploring new functionality in an existing API. Or being able to just type something like `func?` to print the docs of a function. There's so many things like that, that just make life easier.
Don't put any effort in for me mang, I'm just asking questions and understanding things.
Read the sidebar.
[pudb all the way](http://ahye.zzzz.io/s/04e425b121056974d1fbd0d8e72de0f6.png)
*tip toes in* I suggest IDLE. Good day sir.
import sys if sys.version_info.major == 2: import v2 else: import v3
Have you actually got it working? First of all, your solution doesn't work because `open('/path/to/pipe','w')` blocks because nobody is reading on that pipe. A dirtiest hack would be tmp_pipe1 = os.open(FIFO_PATH, os.O_RDONLY | os.O_NONBLOCK) tmp_pipe2 = os.open(FIFO_PATH, os.O_WRONLY) command_pipe = os.open(FIFO_PATH, os.O_RDONLY) But then if you specify `close_fds=True` then the subprocess dies because "EOFError: EOF when reading a line" (in Python's interpretation), because, well, we've closed the writing end of the pipe -- even though we did that _after_ we started the process. In fact getting EWOULDBLOCK if you do `command_pipe = os.open(FIFO_PATH, os.O_RDONLY | os.O_NONBLOCK)` is hard and requires inserting time.sleep before closing our end, because EOF gets priority of course. And if we don't specify `close_fds=True` then it appears to work because of a double dirty hack: now the pipe isn't getting closed because the child inherits a _copy_ of our writing descriptor, and doesn't close it, of course... However we can embrace the dirty hack and just do `command_pipe = open(FIFO_PATH, 'w+')` -- opening it for both reading and writing means that a) we don't block, b) it never closes (in the pipe sense) because it has both ~~lady~~ read and write parts. After some reflection I actually think that that's the correct solution (compared to, say, using an ordinary file instead). Because apparently the only way to say "we shouldn't fail if the writing end of the pipe was closed" __is__ by having our own private writing end of that pipe open at all times. However our `stop` script can still see if our process has quit already, that's nice. The end result, with minimal necessary error ~~checking~~ handling (that is, the rest of the errors get printed as Python exceptions), `start.py`: #!/usr/bin/env python2.7 import os, subprocess FIFO_PATH = '/tmp/test.pipe' os.mkfifo(FIFO_PATH) try: command_pipe = open(FIFO_PATH, "w+") subprocess.Popen('./test.py', shell=False, stdin=command_pipe, close_fds=True) except: os.unlink(FIFO_PATH) raise `stop.py': #!/usr/bin/env python2.7 import os, sys FIFO_PATH = '/tmp/test.pipe' try: command_pipe = os.open(FIFO_PATH, os.O_WRONLY | os.O_NONBLOCK) except OSError as exc: if exc.errno == 6: print 'Nobody listens on {!r}, unlinking'.format(FIFO_PATH) os.unlink(FIFO_PATH) sys.exit(1) raise os.write(command_pipe, 'quit\n') os.unlink(FIFO_PATH) CC: /u/dfawlt
I wasn't suggesting that you were learning python. I was referring to this in the sidebar: &gt; **news** about the dynamic, interpreted, interactive, object-oriented, extensible programming language Python &gt; If you are about to ask a question, please consider r/learnpython. 
Batteries included! However, someone's been putting used batteries back into the box.
It still hangs right on the write_pipe line... import subprocess from subprocess import Popen from subprocess import call write_pipe = open('/home/pi/videos/fifo','w') read_pipe = open('/home/pi/videos/fifo','r') subprocess.Popen(["omxplayer", "-b", "/home/pi/videos/videomenu.mp4"],stdin=su$ read_pipe.close() call(["irsend", "SEND_ONCE", "hdmi", "KEY_B"]) call(["irsend", "SEND_ONCE", "amp", "KEY_CD"]) Maybe I need to use def to give it it's own class? Could you point me to the resource you used that explains why it hangs and maybe I could figure it out? (longshot but why not). I already chmod 777 the fifo...
No probs, have done a lot of buggering around getting things working in virtualenvs, they are just too useful. BTW, if you use virtualenv, then virtualenvwrapper is even better, I put off using it for too long.
I think it's imperative that one learns how to deal with batteries. They run out, new versions of batteries come along, and the auto battery replacement isn't always up to snuff.
Pycharm, Pydev (eclipse) and Komodo are the ones I frequently see in use. If pycharm is slow, pydev probably is too. Bboth those are free. I don't know Komodo. Do you actually NEED an IDE? Any good editor will support Python with autocompletion and code colouring. Due to the differences between Python and C++, a Python IDE actually does less than a C++ IDE. For example in syntax colouring, you can't (in Python) distinguish between a function name and a regular variable. Autocompletion is similarly less useful. [Basically, you need to run the code to determine what these are, so the static analyser in the IDE can't figure it out; C++ on the other hand requires you to declare them beforehand so it knows.]
"industry standard"? No, pretty much all Python debuggers are woefully inadequate, and have a long way to go.
They should just sign a deal with Geany. It's cross platform, open source, very lightweight and it works way better than IDLE. Sure, it's not Pycharm but it's actually usable. --- Rangdo, Pycharm evangelist and IDLE apologist.
I used the 4.0.5 version on Ubuntu, but i never experience a total hang, just stalling for a moment(3-5 minutes)when pycharm updating python's skeleton, but it maybe due my pc low spec.
Not my book or website, just forwarded by a friend and thought it was interesting enough to post here. 
Thanks! 
So many different *pdb* names. I'm going to make my own called phpdb just to mess with people. 
If all you care about is consistent results, you could also change it to `sum(sorted(d.values()))`. But using integers is usually a better solution anyways.
Anyone know why they're going with `%` formatting rather than the new style `.format`?
I actually don't use venv at all. I probably should, but haven't come up against a use case yet. I don't want every other project to start as `pip --remind-me-how-to install passlib`.
Interesting, but I'm always a bit suspicious of anything implying that you will be able to make money just by gaining some introductory statistics and programming knowledge. Finance is a competitive field. There are a lot of smart people trying to figure out some way to make money. They have degrees in statistics, computer science, econometrics, etc. They also have a lot of capital and the ability to purchase powerful computers and co-located matching engines. Don't get me wrong: learning new things is never bad. However, it's not easy to make money by trading, even if you do add new (to you) computer programming techniques.
&gt; I got the output into my shell, keeping me from running the stop.py until the video finished. I just added stdout = command_pipe and I was all set. No no no no! Don't do that! What you did is directed its output to its input, making it interpret its output as your commands. Luckily for you it didn't tell itself to quit or anything, but this luck will not hold. If you don't specify anything, it would write output to your shell which _should not_ actually prevent you from running the `stop.py`, though might make it less convenient. You can also close the shell (omxplayer probably is specifically programmed to survive that) or redirect the whole output to a log file, or to /dev/null when running start.py. Or you can do it the same way you did it originally, with `stdout=subprocess.PIPE, stderr=subprocess.PIPE`. That would, first, redirect output and error output streams to unnamed pipes, then as `start.py` exists close those pipes (which `omxplayer` is apparently programmed to survive).
If you just want to get an image, I have done this using only PIL. You can check out the implementation [here](https://github.com/Brobin/mandelb0t/blob/master/mandelbot/mandelbot.py#L29). This code creates a nice 1024x1024 mandelbrot colored with a given color scheme. [Example](https://pbs.twimg.com/media/CBWd6NZVIAAKyCJ.png)
I can't speak for them but I find % to be much easier. 
It's to make porting old code easier, and there's a lot more code with % formatting.
Hey, man, I cash in on that sweet sweet link karma whenever I can!
hahahaha well I ran it remotely from my work, and was able to successfully run start.py and stop.py, and right after had my roommate check my tv. No video running... So either start.py was cataclysmic and just kill omxplayer, or it worked fine and stop.py did, but the 4 minute video was not playing moments after the start/stop sequence. Will switch to unnamed pipes and test once I get home.. thx bud.
I don't think you should duplicate source code at all. It's possible to write code that works on both 2 and 3, see http://lucumr.pocoo.org/2013/5/21/porting-to-python-3-redux/
Heh, I just make a requirements.txt then pip install -r requirements.txt and python setup.py install is good, especially when coming back to something from ages ago. For GUI dev some dependencies prob won't work as easily though. Main use case is not buggering up the system python env by installing loads of random stuff, whether to try some random lib... also good if you want to temporarily working on a different branch of someproject + while keeping the env you normally work on it clean. Basically I'm making venvs called 'tmp' quite often and killing them pretty quick, then I have one for my 2 current main projects, another '2d' - for just general 2d graphics, and a bunch for different workplaces I've contracted at, with their crap in them. [Cos they all use requirements.txt, it's usually no problem to kill them / remake them too].
Treehouse would definitely be a good starting point. There are other sources out there that are free. But I think that once you've put in some of your hard money into it, you've made a commitment, and that most definitely can be a motivator. Plus, it isn't even that expensive. I pay 90USD an year for a student account. Treehouse's python courses are cool. I haven't seen any django series yet but I'm sure they're working on it.
Huh, I usually use the same libraries for ages, and learn them pretty hard. Twisted, pygame, wx, and maybe mysql.connector? Are the big ones. At least one of those exists in every project I do, and everything else is pretty small.
So, in trying to adhere to the spirit of the Single Responsibility Principle, a register_user function should only do just that and register the user. In your function you're also handling getting information from the request, validation of that information, and some other stuff as well. So, perhaps you should consider handling your request in one function, validating form information in another, and the actual database interaction in yet another.
Wrote my own generalized multivariate polynomial regression code for model estimation from data. Now I want to model ALL THE THINGS!!!
Good question. I think it should work by adding the [environment markers](https://www.python.org/dev/peps/pep-0345/#environment-markers) as a suffix, like this: requires=configparser; python_version=='2.6' or python_version=='2.7' requests (i.e. that will require requests on all systems, and configparser only if the condition next to it is met) 
Maybe this will help: http://micropython.org/
Hey, Hypothesis author here again. I was on the fence about posting this because of how recently Hypothesis has been on the front page here, but thanks /u/DoISmellBurning for taking the decision out of my hands. :-) Obviously feel free to AMA about what Hypothesis is or how to use it, etc.
How do you use it?
It's a bit distinguished from the arduino, but the raspberry pi can run many variants of linux and then python on top of that. 
Micropython works decent for simple cases. It will even kind of run on some arduino compatible boards such as the teensy 3.1. This is mostly useful if you want to run python on something really small. If a slightly larger size is ok, the raspberry pi is both more powerful and only slightly more expensive.
Key/Value stores like Redis and SQL databases are significantly different. In larger projects it is not unusual to actually use both. To a large extent which one you use will be determined by the components you are using since the component's design will generally use one or the other. I recommend playing with both to get an idea of their differences and benefits. You might also want to look at the https://pypi.python.org/pypi/redislite/1.0.93 module since it makes using redis about as easy to get up and running as sqlite does.
requests, flask for most of what I do
Here are [the docs](http://hypothesis.readthedocs.org/en/latest/quickstart.html) ... looks impressive.
Ah I strictly posted this as a pointer on an intro to Python. That's it. 
I like not having to reiterate the types. Necessary in C with `printf`, but not in Python.
This looks really interesting, just because reading documentation for beginners is a nightmare, I would know. And I'm sure there are easier ways to go about learning the stuff, but it was difficult to find. So I personally am excited for this
&gt; once it reaches maturity and parity If you think that will ever happen. There's a reason CPython doesn't have a GIL-less version.
Fascinating article. Blew my mind a bit. 
It's sort of confusing that this is part of PyPy and not completely orthogonal. Does it have deep ties to PyPy such that this STM fork can't be part of cpython ? What I mean is that I'd like to see a cpython fork that uses STM. That way you'd get a more apples to apples comparison of the actual speed up that is available in multithreaded code. i.e. no JIT to confuse the issue. It would be nice if there were an argument to the python runtime for which backend to use. That way if your code is one of the cases where there is no advantage to using STM you just use the normal backend.
in principle, yes you can do it. However you have to go around CPython and modify all the little bits and pieces (essentially all the INCREF/DECREF) to use stmgc (which is not a part of pypy, it's a separate project). In practice - impossible. If you don't like the JIT, you can disable it in pypy (even at runtime with --jit off)
the deal here is one-thread performance. If we can reach the 10% of cost range for pypy-stm, we'll merge it to the default (10% is no-brainer, 20% is debatable, 30% is right off I would say)
Awesome project. I've been looking for an open source project to contribute to but haven't found anything interesting so far. Are you accepting pull requests?
Very nice collection. But I find it sad that [Pony](https://github.com/ponyorm/pony) is missing. I've not used Pony or studied its source to terribly close, [but it works like this](http://stackoverflow.com/questions/16115713/how-pony-orm-does-its-tricks): &gt;&gt;&gt; select(p for p in Person if p.name.startswith('Paul')).order_by(Person.name)[:2] SELECT "p"."id", "p"."name", "p"."age" FROM "Person" "p" WHERE "p"."name" LIKE "Paul%" ORDER BY "p"."name" LIMIT 2 ... [Person[3], Person[1]] But the way it works is by accepting a generator into the `select` function which actually decompiles the expression and rebuilds it into AST, takes that AST and builds a generalized SQL query then converts that generalized query into one for the specific RDBMS it's interacting with. The stackoverflow link above goes into more detail. I can't see myself dropping SQLA in favor of it, but it's certainly *way* cooler in terms of SQL generation.
How does it relate to hardware transactional memory, present in recent processors? Can this software transactional memory implementation be replaced with a hardware one in order to achieve better performance/less overhead?
Definitely, that is really cool! Do you think that 10% is a feasible goal? I wish I learned more about VMs and stuff, because it is super cool and I would love to help :)
Who knows! 
Cython vs. Pandas... who will get to 1.0 first? :-D
I've written a similar script that doesn't require any third-party libraries if you all are interested. It similarly shells out to scrot and provides a handful of switches for whether you want the whole screen or would rather select a region: http://charlesleifer.com/blog/sharing-screenshots-with-dropbox-and-imgur/
Would you by any chance be running ipython on a python 2 kernel, trying to manipulate Unicode? If such is the case your comment is not sufficient. Your best bet is running a py3 kernel. It will save you a lot of headaches. Use 2to3 to help you translate the code if needed.
Pint.
Yes, I'm running on a 2 kernel, and I can't make the switch because the rest of the team is using a 2 kernel too. Anyways, it seems it is a bug with the latest release of IPython, I'm trying to install it from their master branch of github to see if it solves the problem. Thank you! :)
Not outdated. Python doesn't change that fast. Some folks are still holding out for python 2.8 
Check out these two projects. The Synapse Snap Module. It's wireless, and a pleasure to use. I have one monitoring a sump pump and my driveway. https://solarbotics.com/product/51752/ And you'll need either a prototype board or if you can solder, a cheap breakout board. The starter kit is probably the best choice https://solarbotics.com/product/39292/ Also... If you don't need wireless... This is a powerful little board... Http://micropython.org
Ok man thanks, sincerely. You're the type of bloke that browses new posts, you're the reason any Reddit community thrives, have a good one.
Hasn't changed my life yet but I'm working on a piece that performs data parsing for our system and utilizes it in ways that currently are not happening
Once you have the basics, here's a great quick reference. http://rgruet.free.fr/PQR27/PQR2.7.html Stack overflow is a wealth of python wisdom too. 
You're right about single core perf, I forgot about that. You are wrong however about your second point. The fact that the GIL means that the CPython devs do not have to worry about their code in a multi-threaded environment is a massive burden off of their shoulders, ease of development wise.
also /r/learnpython in the future.
 def e_to_the_power_of_log(x): return x Edit: seriously, though, your question is pretty vague which makes it difficult to answer. Also http://reddit.com/r/learnpython would be a better place to ask this.
if you want to program FPGAs or CPLDs, you can look into MyHDL
python-instagram has a great API wrapper implementation. I use this skeleton whenever I have to implement an API wrapper for other services. https://github.com/Instagram/python-instagram
It's a nicety, but it's not the reason. They would do it if they could get single core performance to not be so bad. Jython manages.
Jython is not very fast.
You want to look into [Socket.io](https://github.com/abourget/gevent-socketio). That way you can process on the server with python and send the results to the browser for Javascript to utilize. Might not be the fastest or what you wanted but could work.
It's comparable to CPython. It's faster in some cases and slower in others. JVM is better than the GIL.
Just use `six`. It's great. from six import PY2, PY3 There are a lot of things like `range`, `zip`, `iteritems`. It makes things a lot easier.
Interesting. Too bad operators like 'v' cannot be implemented properly in python, so the logical statements are not valid python statements without first passing through a precompiler as a string. I'm been tackling a similar problem, implementing a solid geometry program in python. I settled on the python set syntax for union, intersection, added `~` for inverse, and use `&lt;=`, `&gt;=`, etc. for subsets and supersets (tracking the python set operators as closely as possible). But I'd really like to be able to implement additional operators. Python 3.5 gives me `@` which I'll use for vector cross products once 3.5 is stable (the symbol kind of resembles the right hand rule in form). And I'd love to be able to do things like `14 ± 0.2` in the code and have python have a natural type that includes error/tolerances. Ah well, can't have it all.
I think you should review the tutorial: http://docs.sqlalchemy.org/en/rel_0_9/core/tutorial.html#selecting All the methods for the object returned from calling select() are here: http://docs.sqlalchemy.org/en/rel_0_9/core/selectable.html#sqlalchemy.sql.expression.Select Typically, you configure your ORM. The Query object has more functions that make it more useful, and the ORM objects make many tasks trivial. IE, you would want your above code to be: session.query(Message) \ .get('GQWMEJ3DJYPFDH2NJEDOIDZ3W2YBUFYP') (Assuming message_id_hash is the PK) or session.query(Message) \ .filter(Message.message_id_hash=='GQWMEJ3DJYPFDH2NJEDOIDZ3W2YBUFYP') \ .one() 
I had no idea that that hardware was that open. Wow, that's freakin cool.
[PyExecJS](https://pypi.python.org/pypi/PyExecJS) seems useful. It runs on quite some backends.
Well, the problem with such approach is that you can solve the exact same set of problems that you can solve using multiple processes. Things get interesting if you don't want to serialize/deserialize objects passed through queues, but if you can't mark objects as immutable, you can't ever have anything working on large data structures. With STM we're trying to make it possible to work on large data structures that are not necesarilly immutable, but that have "rare" or "localized" modifications with some sane semantics. It's just a very different approach for very different things.
It may also be pandas, since it provides the dataframe. Or you can add a str.decode call somewhere to work around your problem maybe.
It is [Philips](http://en.wikipedia.org/wiki/Philips), not [Phillips](http://en.wikipedia.org/wiki/List_of_screw_drives#Phillips).
Neither iOS nor Android support python natively. Hence, porting a python desktop application to mobile platforms is not trivial. Qt proposes actually a rather good solution for cross-platform programming but I never tested it with PyQt. The license is quite expensive however. It is also possible to use Kivy for python development on Android and iOS. However, kivy is designed with tactile screens in mind and not that adapted for desktop development. Best wishes, Thierry
I'm pretty happy with how [PyParallel](https://speakerdeck.com/trent/pyparallel-how-we-removed-the-gil-and-exploited-all-cores) turned out. Working on a public release as we speak, should have something out by PyCon-ish in a few weeks.
I use milights bulbs (rgb/dimmable + warm white), you can pilot them with wifi thru lan/wan (with the help of a wifi controller in the lan), limitlessled compatible see http://www.limitlessled.com/dev/ ... of course, there are some api for python : https://github.com/ojarva/python-ledcontroller ... You easily find e27 rgbw bulbs 6W for less than 15$ ... the wifi controller can be found around 20$ ... Smartphones's apps are free, vs Philipps/Hue : they "only" have 256 colors, and no way to get the state of a bulb. But there are a lot lot cheaper !
**EDIT:** There was a comment suggesting that this was likely pitched as a teaching tool for functional programming rather than a guide to writing good Python. In light of that, I think my post is unfairly worded - a lot of the concepts given do make more sense in a functional language and I get why having to teach another language is not ideal. --- There are a lot of seemingly straw-man comparisons, such as for i in range(len(names)): names[i] = random.choice(code_names) vs secret_names = map(lambda x: random.choice(['Mr. Pink', 'Mr. Orange', 'Mr. Blonde']), names) Why embed the list inline in the second case? What's wrong with a good old list comprehension? Why is one mapping in-place? Honestly, just do secret_names = [random.choice(code_names) for _ in names] And this one is silly: sam_count = reduce(lambda a, x: a + x.count('Sam'), sentences, 0) There are very few sensible uses of `reduce`. This should just be sam_count = sum(string.count('Sam') for string in sentences) Again, later, there is heights = map(lambda x: x['height'], filter(lambda x: 'height' in x, people)) instead of heights = [p['height'] for p in people if 'height' in p] and reduce(add, heights) / len(heights) instead of - you guessed it - sum(heights) / len(heights) In fact, in 3.3+ you can do statistics.mean(heights) Then in the "Use functions" stage, they compare a terrible imperative version against the functional version. The proper imperative version would at least pass parameters rather than use globals. Oh, and again replace map(lambda x: x + 1 if random() &gt; 0.3 else x, car_positions) with [pos + 1 if random() &gt; 0.3 else pos for pos in car_positions] Note that this *completely ignores* efficiency compared the the in-place version - sometimes that's OK but don't pretend there's no difference. And what the heck is with this? def run_step_of_race(state): return {'time': state['time'] - 1, 'car_positions': move_cars(state['car_positions'])} what's wrong with just, you know, def run_step_of_race(time, car_positions): return time - 1, move_cars(car_positions) ? This isn't Javascript. If you want objects, use `class`, or at least `namedtuple`. Frankly, calling this functional is laughable: def draw(state): print '' print '\n'.join(map(output_car, state['car_positions'])) but... w/e. Also: &gt; The code is still split into functions, but the functions are functional. There are three signs of this. [...] Third, no variables are instantiated inside functions. *What?* There's a reason functional languages have `let`, Haskell has `where` and so-on. (Immutable) variables are not anti-functional, and it's silly to claim it. Not using variables makes code *far* harder to work with, so please don't. Then there's &gt; The code above uses a loop to do its work. Make it more declarative by rewriting it as a recursion. Please don't. Python doesn't have tail recursion optimization. And then... &gt; def format_bands(bands): &gt; for band in bands: &gt; band['country'] = 'Canada' &gt; band['name'] = band['name'].replace('.', '') &gt; band['name'] = band['name'].title() &gt; &gt; format_bands(bands) &gt; &gt; &gt; Worries are stirred by the name of the function. “format” is very vague. &gt; &gt; [...] &gt; &gt; Compare it with this: &gt; &gt; print pipeline_each(bands, [set_canada_as_country, &gt; strip_punctuation_from_name, &gt; capitalize_names]) No shit. If I wrote instead for band in bands: set_canada_as_country(band) strip_punctuation_from_name(band) capitalize_names(band) print(bands) (which is hardly longer), you'd probably start to realize how crazy that criticism is. OH WAIT NO. Because you later discuss using &gt; print pipeline_each(bands, [call(lambda x: 'Canada', 'country'), &gt; call(lambda x: x.replace('.', ''), 'name'), &gt; call(str.title, 'name')]) which is definitely clearer than for band in bands: band['country'] = 'Canada' band['name'] = band['name'].replace('.', '') band['name'] = band['name'].title() Because it's functional, right?! And this comes with a ~300-word explanation of how `call` is defined starting with "There is a lot going on here. Let’s take it piece by piece." And this isn't helped when you say we shouldn't define `set_canada_as_country` as a function that *sets Canada as country* but one that returns a copy with that replaced (`with_canada_as_country`). Plus, you define it as: def assoc(_d, key, value): from copy import deepcopy d = deepcopy(_d) d[key] = value return d def set_canada_as_country(band): return assoc(band, 'country', "Canada") Please don't `import` inside tiny functions like that. Please also note that you've replaced an `O(1)` operation with an `O(n)` operation. This is silly. If you want an immutable data structure, use a `namedtuple` and do: def with_canada_as_country(band): return band._replace(country="Canada") Much nicer. &gt; This contrast between the mutability of strings and dictionaries in Python illustrates the appeal of languages like Clojure. The programmer need never think about whether they are mutating data. They aren’t. Except, of course, when you are. There's also this nonsense: &gt; return reduce(lambda a, x: map(x, a), &gt; fns, &gt; data) How is this better than for fn in fns: data = map(fn, data) return data ? Hint: it's not. --- Python has a really good pipeline process: functions and iterators. Global immutability is neat, but Python isn't suited for local immutability. I *like* functional programming. But throwing it at Python just makes a horrible mess on the wall. Instead, take the learnings from functional programming (no shared state, well-defined abstraction boundaries, DRY through higher-order functions) and apply it *sensibly*. Or just use another language.
I had been thinking of something like [this](http://www.aliexpress.com/item/New-Wireless-Smart-Bluetooth-4-0-Wireless-Control-RGB-E27-LED-Bulb-Light-for-IOS-Android/32302368148.html). It doesn't need a bridge/controller as the lights are directly run from BT and it offers a big range of colours. The problem is to find the protocol if I don't want to use their app.
Does this solve a problem you are having?
There is also [beautiful hue](https://github.com/allanbunch/beautifulhue) which I am currently using in a fun project for you Hue owners: [ScreenBloom](http://www.screenbloom.com).
I understand that Cython will turn 1.0 whenever they reach complete compatibility but what would such milestones be for pandas and scikit-learn? They are two fantastic, very mature packages as they are. As far as I'm concerned they can't get much better.
Looked at all of these, the Amazon reviews are terrible so I went with a hue. They're great but expensive. Excited to see what it can do with python!
I've use Hue for almost all the lighting in my apartment, and also dabbled with some cheaper options. The Hue is worth it IMO. They produce a true white and every bulb is always exactly the color it should be. Some of the cheaper knockoffs have an inferior white, and even if you set them all to the same color there will be minor variation between each bulb. I will say that the RGB trick is mostly a gimmick though, I never change the color during regular use.
I think map is faster than a for loop. So if time matters map can buy that time. Edit: I do agree with your criticisms though
The rule of thumb goes something like this: * If you're using CPython *and* * the function you're mapping with already exists (there is no `lambda` in the call to `map`) *and* * you're not doing `map` directly after `filter` (which a comprehension can do with a single loop) then `map` is likely to be a bit faster. Similarly for `filter`, which is especially fast (special-cased) for `filer(bool, ...)`. These also, usefully, happen to be the times when `map` and `filter` are clearer - I'll do `map(int, strings)` far more often than `(int(string) for string in strings)`.
This kinda smells of spam. All the posts are this guys website and all the posts on the website are by him 
I found [autobahn](http://autobahn.ws/python/) easy to use. You use RPC to execute the function in javascript, and typically get the result back as JSON. It implements a communication protocol on top of websockets, that is called WAMP. There are some slides that describe WAMP (includes RPC) on their [website](http://wamp.ws/).
Since you are already familiar with programming, thats still the best book i could recommend
&gt; Why delete the pipe at all? The idea is that if the pipe is there, then ./start.py fails, to prevent you from accidentally starting two or more players, all controlled by the same pipe. To safely delete a pipe we run ./stop.py, it checks if someone is listening and if so sends `q`, then deletes a pipe. So that you don't have a player chilling out in the background, not controlled by anything any more. But if we successfully created the pipe but then failed to open it or to start the player for whatever reason then we can safely delete the pipe ourselves before exiting instead of requiring the user to run ./stop.py to clean it up.
And, of course, the mandatory link to the brilliant [Python-Future](http://python-future.org/).
I'm not exactly sure what you are trying to do, but with evdev you can capture all mouse interrupts in linux. RelEvent gives you mouse movement relative to the last position. The mapping of mouse movement units to actual centimetes or inches is up to you, and it will depend on your mouse model and manufacturer. http://python-evdev.readthedocs.org/en/latest/
Yeah I really like it.
I think something like this exists, forgive me if this is the graceful restart you mentioned. I have a reload in my init script that sends a HUP signal to the gunicorn process. It allow me to reload the app without downtime as it kills off the processes in chunks. This reloads the whole config including the new version of the code accessed through the wsgi container. kill -HUP $PID
Hey awesome! Another project to tack onto the list...
Dutch company, Dutch pronunciation rules! (Well, the Dutch pronunciation is a little closer to how you'd pronounce Pheelips rather than how you'd pronounce Phillips, but the point stands.)
#####&amp;#009; ######&amp;#009; ######&amp;#009; ####&amp;#009; **4Pcs E27 9W LED Bulb 2.4G Wireless Milight RGB Warm White LED Light Bu...** Current $96.99 High $249.99 Low $96.99 [Price History Chart and Sales Rank](http://i.imgur.com/5UBHGlo.png) | [FAQ](http://www.reddit.com/r/PriceZombie/wiki/index) 
It is a legit site though. I have used it before (but didn't end up taking the job).
Try Spyder.
You're looking for an "IDE". Thankfully, there are a whole bunch. Some of the more popular ones are IDLE, which comes with Python as standard, and PyCharm and PTVS, both of which are free to use.
Thanks I typed in java -version at the terminal and I get: java version "1.6.0_65" Java(TM) SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716) Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-466.1, mixed mode) back so looks like that probably isn't the issue.
Why is the API like this: light = client.get_lights()[0] client.set_color(light.light_id, '00ff00') instead of: light = client.get_lights()[0] light.set_color('00ff00')
thank you! It was a nightmare trying to figure out what it was called... I kept googling Python GUI and getting a thousand and one tutorials on guis...
As /u/K900_ suggested, try Spyder: a lot of work is being done to make it easier to use for people coming from Matlab. Furthermore, I would suggest to install the Anaconda Python distribution, which comes with Spyder.
If you feel like branching out from Python at some point, (which I recommend of course), that term is universal amongst languages. It stands for "Integrated Development Environment", and there are a bunch for every language.
The people at Continuum have repeatedly done a great job at making useful tools. I haven't tried PyParallel (I use numba and conda regularly), but I'm sure it's great.
http://www.dreampie.org/ I would never go back!
A good book on Python Drones (Using Erle Robotics): https://www.gitbook.com/book/erlerobotics/erlerobot/details
Why not: light = client.light_at(0) light.color = '00ff00'
Knowing Python + C is probably much more powerful than knowing Python + R just because R kind of operates in the same space as Python.
Good thing it is open source! You can go and make a fork of it and have that be the api calls or just make a wrapper. Either way it would be good practice for using a library.
At work, we use subversion. I use Github for my open source project as a dumping ground and just put everything or is unrelated that sucks in a dev folder. For my master's project, I just backed up my entire code base every week or so into another folder. Real version control is much better, but I hadn't thought to put it online at that point.
You must work where I do with that 'let's just make a wrapper' attitude. Also happy cake day
throw an exception
True. Only thing is if `get_lights()` is slow then you may not want users to think it's a simple static list. 
But what if None _is_ the correct thing? This is exactly why you should throw an exception if you haven't found anything.
What do you mean by viewing variables visually? Sorry, I've not used Matlab much.
I see, I see. No, dreampie doesn't have that. It's a damn useful shell though! edit: by which, I mean it has a lot of features which make doing python interactively a lot easier. My favourite feature is when you type a method name, when you type the open bracket (i.e. "sorted(") it brings up the definition of the function, so you can see the arguments and the docstring.
Really does look good. Thanks for the heads up
I just have a huge directory structure in my Dropbox where I put everything I work on, and one file called "randomnotes" which I always keep open in my text-editor for, well, random notes.. it's 4000 lines now, should probably clean it up soon again =)
For the low, low cost of $50 or $100 per month?
None is never the correct index into a list, or filename, or numerous other things. None means the empty result, and as long as you're consistent with that then it makes sense the return it. Using exceptions all the time it's laborious. 
Perfect example. None, there is no 6
I use git as a VCS and use [bitbucket](https://bitbucket.org/) as my remote server. You can't argue with [free](https://bitbucket.org/account/user/buddyatkins/plans/). I also use [Sourcetree](http://www.sourcetreeapp.com/) to manage my git repositories (also free). Sourcetree is basically a GUI interface for managing your git repos that will really make getting onto a VCS very easy.
I've been messing around writing a library that basically finds data and returns it. There's a few different methods to do the finding, each for fairly different purposes, so I've used three different styles. Firstly, there's a `get()` function that takes an id key and returns the correct data. If it can't find the key it raises an exception (IIRC ValueError), on the basis that in most cases the id should exist, and the user should be using the method assuming that the id does exist. Secondly there's a `find()` function, that takes a query, and returns a list of matching pieces of data. This returns an empty list if it can't find anything. It certainly shouldn't return None, because the user will probably want to iterate over the list and that's just a pain in the arse, but it's also not uncommon for it to fail to find anything, so it doesn't seem exception-worthy to me. Hence the empty list. Thirdly, there is also a ResultsSet object that has a `first()` method on it that returns the first item if there are items in that set of results, or None. I went for None here because, like `find()`, it didn't seem exception-worthy to fail to find anything. Unlike find, it needed to return one object that marked out a lack of value - hence None. It might also be useful to note that in none of these cases could `None` have been a valid return. If `None` is valid, it might be easier to raise an exception (`list[item]`), or it might be worth having a `sentinel` parameter in the function's arguments that defaults to None (`list.get(item, default=None)`). Or a combination of the two (see `dict.pop()`). Another thought: If you're returning None deliberately, always write `return None` to show to anyone else reading your code that you've made a concious design decision that your function will return None at this point. If you're returning from a function that just doesn't return anything (say, `myObject.setName("hello")` shouldn't really return much), then just write `return`. Would be my rule of style. Although others may well vary.
I don't like this. def foo(x): if x ==2: return True elif x == 3: return False else: return None If you're returning a boolean don't return none. None evaluates to false in conditionals. So 'if foo(x)' does the same thing for any number except 2. 
-1
Both SVN and GitHub are online (or at least centrally stored), but source control absolutely doesn't need to be. I use git local all the time in use cases like that. It's a million times better than dumping the whole directory once a week. 
Is this sarcasm? Hard to tell.
Version control software typically stores your data in another location, either on another computer you have or online. Rather than backing up once per week, you commit to the repository as you go and can backup to any version between now and when you started. Only the changed data is saved, so it's fast. It's a right-click and commit with a message vs. copy the folder to a new location. The advantage of putting it online (be it private or not) is you can access the latest version from any computer, which means any coworker/team member can too.
Per PEP-20, explicit is better than implicit, so when I'm writing code where None is a valid answer, I explicitly return a None. If it's an error to get to the end, raise an error. If it's a hack/preliminary code, I don't care. For production level code, I have one return and it's the last line of the function/method. For a short function, I don't really care, but definitely for a long function.
I didn't say you can't do... git commit -m "here's a hard to write multiline message" We live in a visual world and there's nothing wrong with using a GUI. Fine, use the command line to do it, but it doesn't change that it's still a better approach than using no version control software. I'm not playing the my command line is better than yours game.
My dad's command line is better that your dad's.
Work: Git Home: A device called a "hard drive." I always think what I'm doing is a quick throw away. I can never find what I need when I need it, and always run across it after it's no longer needed/ re-written. Speaking from experience Grepping entire drives is highly inefficient. Don't be like Home me.
Im lost. Are you sure this is nothing related to April fools?
In the case of photo's, this should actually be in the metadata. 
Oh yeah? Well my dad... Has probably never opened a terminal window in his life.
* RAID is not a backup * any volume accessible by the primary machine is not a backup
Might not be exactly on topic but I wish more people would code their functions to NOT return None and instead return expected type. **BeautifulSoup** is the biggest perpetrator of this. Whenever you parse the tree/soup you'll either get a list of results or a single result, now if no results are found instead of getting an empty list you get None returned, which in turn requires you to make checks on every single lookup which really messes up your code up and makes everything look ridiculous. switched to lxml/xpath and never looked back.
Nitpick: a[None:None] == a[:] == a[0:len(a)]
Unless it's an April's Fools, I am a bit concerned by the whole "lock-in" aspect. Why have a tag that says "Bounty" on it, why not have generic tags that would tell the system to order some of that article's type? If I had to deploy a non-gimmicky alternative, I would use QR or barcodes and develop a phone app that can scan the codes and let you order the items. The UPC code can act as the token.
Poor Phillip, so confused over people controlling his light bulbs.
I was setting a, not testing equality :P
Git, no hub. You can put git repos on any ssh-accessible server and get all the pushy/pully stuff you love about github with none of the "github owns my life" stuff you don't.
&gt; Why are map and reduce better? &gt; First, they are often one-liners Premature optimisation is (still) the root of all evil
To me, this doesn't leverage the awesome-sauce that docker enables you to provide. I've started a [python-dev](https://github.com/derek-adair/python-dev) image with the primary purpose of rapid wheel development. The goal usage is something like `docker pull derekadair/python-dev` then `docker run --rm derekadair/python-dev bdist_wheel` and it will install the wheel in a volume that you can then attach via --volumes-from. NO WHERE NEAR that, probably going to settle for this something along the lines of what you are doing here for expediency, just letting you know what i believe to be achievable w/ docker.
Not to discourage discussion, I think you might not find help here. /r/pygame might have more people familiar with what you're doing or maybe look at a math sort of subreddit. And if you're using python 2.7.x or less you might want to use xrange instead of range. Also maybe asking a question or offering a problem instead of just giving some code and your intention. 
Okay (I still think testing for equality makes more sense than doing a no-op assignment) but that wasn't the point of my comment, it was `s/-1/len(a)/`.
&gt;Home: A device called a "hard drive." It seems odd this wasn't one of the most common/obvious answers.
Documents&gt;projects&gt;project(on github) Documents&gt;personal&gt;project(on my own vps git repo) I should set up nightly saves.
I've heard that before, but I've never heard anyone explain why Git doesn't handle binary files well. Are there any things other than that diffs are useless?
 - Diffs forms a rather important part of the Git workflow, so that's a pretty big loss on its own. - Binary files tend to be fairly large. At the very least, using Git would roughly double the size of *every* repo clone. Since Git stores the entire history, if you commit a lot of changes the `.git` directory can easily grow to several times your work tree. You can squash the commits later, but it would require rewriting all of the history afterwards, which then makes push/pull a nightmare. [Git-annex](https://git-annex.branchable.com) makes this somewhat easier, but it's still clunky and introduces its own set of headaches.
I'm sure it is not. Keep in mind they already had Amazon Dash.
GIT 
Good to know, I hadn't thought of that! Diffs on binary files is pretty hard to deal with in general, though. GitHub does pretty well with images with their web interface, though.
don't trust raid would be my comment.
Are you talking about [how you're just about guaranteed to lose data when reconstructing a failed array of disks over 2TB](http://www.zdnet.com/article/why-raid-6-stops-working-in-2019/)? The thing is, for my uses (not GP), losing a sector isn't that big a deal. That's not really much data, and it's all stuff I can easily re-obtain if I only need to get a file or two. On the other hand, the loss of storage capacity from using RAID6 instead of RAID5 on a 4-disk array is substantial, and much more important to me. Basically, enterprise has different needs than consumers do, and you always need to keep your situation in mind.
No updates in a long time but Drrampie is still my favorite. 
Everyone uses git for this now.
Learn by experience. Whatever the language or API, if there is an example, it is worth it to do the example. Even if reading comprehension says 'ok i got it' do the example. Every domain has it's idioms which must become transparent within the domain. Usually the dull boring examples show those idioms. You can't just look at it and say 'uh huh oh kay' and think you've learned it. Do the examples to form the pattern of the idioms. Even if it's boring, consider it typing practice. I don't mean cut-and-paste I mean do the example. Type the mamma jamma in so you can see for yourself. Observe in the wild. Experience is formed from multiple experiences. Simply reading words on a page or watching a youtube does not form an experience of doing. That is only reading and watching. Doing is how you form a proper experience. And don't do to too much coffee.
I think we disagree on where the exception should be thrown for composability- do_work_on is where the exception should be thrown. Not finding a value in a data set is not a particularly exceptional situation. I can happily return None. I can pass None through many a realistic composition chain and get sane results. Expecting a real value, and receiving None instead, on the other hand- that's a problem. And do_work_on *should be validating its inputs anyway*.
Yeah, and perhaps group purchases so you're not needlessly wasting both packaging and delivery as I think this would.
You should distinguish "doesn't return a value" from "returns None," even if they're the same from Python's point of view. If you're assigning the return value to something, it should probably be return None, otherwise leave it or entirely. Use return without None for "no return value, but returning mid-function"
Never ever ever do try: without an Exception type, and unless you have a very specific reason you should be re-raising if you are catching all Exceptions or BaseExceptions. Remember that in python, *all* runtime errors are raised as exceptions, including SystemExit, KeyboardInterrupt, and AttributeError.
Yea that was one of my first questions, what if I don't use tide or bounty. I hope I can make it work with anything else. I opted in to sign up, so we will see what it lets me do. You could also use nfc tags under a sticker on the wall in the pantry/laundry/ or wherever. I would hope that if in the course of say 20 minutes, 6 of them were triggered, it puts all 6 into one shipment. Who knows. I for one, may use it for things like paper towels and TP. Nobody should run out of those.
The existing API is what I was thinking about. Just tying into that and essentially using the buy now feature.
"why have a tag that says *Brand Name* on it" Money. Brand money. Brands should salivate that their branded button can be at the moment of consumer need &amp; link the need to purchase immediately. Think about how likely you'd swap to Clorox if Tide's button is at your laundry table when you run out?
A private GitLab server. Basically github but completely private, complete with Gists (snippets) and a wiki.
&gt; See example.sh for usage. Dude, no. See README for basic usage. You can use markdown or rst to include shell code blocks in the README itself. Also, it'd be nice to have a description of how it's working- what are the principals involved? Right now it's a magic box. Aside from that, cool beans.
HG.
Very well and thoroughly explained. Thank you.
Terribly true. Ask anybody hit by Cryptolocker!
I have ~/projects which is my personal work and typically I push to Github daily - not everything, just what I've worked on. There's also ~/contrib for code I'm pushing things to. I should set up a cron job that'll pull all of these down nightly. Actually, what I should really do is set up a git server that'll act as a middle man and push/pull nightly and then only push directly to Github when needed.
If you have three states, you shouldn't return a boolean. That just leads to confusion 
The idea is that the `callbacks.get_callback()` returns some callback, that `item.invoke()` will call. By having it by default return a function that does nothing, `item.invoke` can just call it's argument without worrying about a `TypeError` or having to do `if callable(arg)` or `if arg is not None`
Github is perfect for this. They'll have to learn some git basics to use it, but revision control skills are worth the effort and go really hand in hand with programming skills. 
Permissions comes to mind. I'm no Linux expert by any stretch of the imagination, but any time an option is greyed out in Linux that's my first thought. Hopefully...that's not a useless answer LOL.
Single return leads to joyless, convoluted code.
I just looked it up, maybe it changed since you used it , but: &gt;The only difference is that find_all() returns a list containing the single result, and find() just returns the result. &gt; If find_all() can’t find anything, it returns an empty list. If find() can’t find anything, it returns None so its the difference between the two apis, and it makes sense to me. In my [huge ass beautiful soup script i wrote a couple years ago](https://github.com/mgrandi/PythonScripts/blob/master/as3Docs2DocSet/create_as3_docset.py) I confirmed thats basically what i did, you use find_all() when you are expecting multiple results, and find() when you just want one
Any reason this is better than the pycharm reformatter? 
Wait, I thought that was an April Fools joke
I have a private git repo called quickcode. There's about 100 folders of one offs, scripts, tests, etc. A lot of times I'll have a tiny thing I need to test in a language and it's not worth it to make an entire repo. 
For a year...
Try saving the custom font profile and renaming it to unlock the other font selections ... I'm not in front of my computer right now but I remember it being confusing-ish
This. I love pycharm's formatter but that doesn't mean everyone else has to. I can definitely see a wide range of situations where this would be useful as hell. 
This!
No, that's really it. Git was designed with text in mind. Human readable, diffable text. Its storage and transport mechanisms are based quite a lot on deltas (diffs) of different objects. Binary data is opaque and hard to diff universally, so git can't efficiently store changes to the object.
I thought this was an April Fool's Day joke for ages, I had to use it before I realised it wasn't a joke.
Here's the original line in question return 37+-+a[42-x : y**3] Here it is formatted return 37 + -+a[42 - x:y ** 3] It says, return 37 plus the negative-positive-of-a-slice on the variable a. I'm not sure what 'a' could be because -/+ are not implemented on lists and strings. Unless the page was updated, there's no difference between the text.
Boom! [enums](https://docs.python.org/3/library/enum.html)
Usually you check for `if &lt;something&gt; is None` as a non-set case then handle it, for example: colorblind_mode = get_mode() if colorblind_mode is None: colorblind_mode = set_mode(DEFAULT_MODE) ... ...
That last part about + being no-op is interesting. But, no one here needs you to explain basic arithmetic. The question is, what object has both slicing and unary operators; it's not strings, lists, nor numerics.
Sorry man ... was sleepy yesterday. But here you go https://github.com/xoryouyou/image-steganography/blob/master/README.md hope this explains it further :)
I decided to go with your suggestion :) Thanks for all your help Marc - I really appreciate it.
Next time you struggle with a git remote command or some arcane manpage explanation of a basically simple configuration thing, cat `.git/config` and take a look at what's *really* troubling you. You'll overcome the hassle quickly I bet.
So I've tested this script: from __future__ import division from faker import Faker faker = Faker() faker.seed(20150401) people = [{"name": faker.first_name(), "height": faker.random_int(60, 200) if faker.boolean(chance_of_getting_true=66) else None} for _ in range(1000000)] people = filter(lambda x: x["height"] is not None, people) print("People with heights: {}".format(len(people))) @profile def oneLineReduce(people): sumHeightAndCount = reduce(lambda acc, y: ((acc[0] + y[0]), (acc[1] + y[1])), map(lambda x: (x["height"], 1), filter(lambda x: "height" in x, people))) return sumHeightAndCount[0] / sumHeightAndCount[1] @profile def multipleVarReduce(people): personWithHeights = filter(lambda x: "height" in x, people) heightsAndCounts = map(lambda x: (x["height"], 1), personWithHeights) sumHeightAndCount = reduce(lambda acc, y: ((acc[0] + y[0]), (acc[1] + y[1])), heightsAndCounts) return sumHeightAndCount[0] / sumHeightAndCount[1] @profile def pythonic_sum(people): sumHeight = sum(p["height"] for p in people if "height" in p) return sumHeight / len(people) print("oneLineReduce {}".format(oneLineReduce(people))) print("multipleVarReduce {}".format(multipleVarReduce(people))) print("pythonic_sum {}".format(pythonic_sum(people))) The results of *line profiler*: Total time: 1.11617 s File: exercise.py Function: oneLineReduce at line 14 Line # Hits Time Per Hit % Time Line Contents ============================================================== 14 @profile 15 def oneLineReduce(people): 16 1 2718766 2718766.0 100.0 sumHeightAndCount = reduce(lambda acc, y: ((acc[0] + y[0]), (acc[1] + y[1])), map(lambda x: (x["height"], 1), filter(lambda x: "height" in x, people))) 17 1 12 12.0 0.0 return sumHeightAndCount[0] / sumHeightAndCount[1] Total time: 1.08788 s File: exercise.py Function: multipleVarReduce at line 20 Line # Hits Time Per Hit % Time Line Contents ============================================================== 20 @profile 21 def multipleVarReduce(people): 22 1 560450 560450.0 21.2 personWithHeights = filter(lambda x: "height" in x, people) 23 1 1005234 1005234.0 37.9 heightsAndCounts = map(lambda x: (x["height"], 1), personWithHeights) 24 1 1084183 1084183.0 40.9 sumHeightAndCount = reduce(lambda acc, y: ((acc[0] + y[0]), (acc[1] + y[1])), heightsAndCounts) 25 1 10 10.0 0.0 return sumHeightAndCount[0] / sumHeightAndCount[1] Total time: 0.273358 s File: exercise.py Function: pythonic_sum at line 28 Line # Hits Time Per Hit % Time Line Contents ============================================================== 28 @profile 29 def pythonic_sum(people): 30 1 665837 665837.0 100.0 sumHeight = sum(p["height"] for p in people if "height" in p) 31 1 11 11.0 0.0 return sumHeight / len(people) Result of memory profiler: Line # Mem usage Increment Line Contents ================================================ 28 162.094 MiB 0.000 MiB @profile 29 def pythonic_sum(people): 30 162.094 MiB 0.000 MiB sumHeight = sum(p["height"] for p in people if "height" in p) 31 162.094 MiB 0.000 MiB return sumHeight / len(people) Line # Mem usage Increment Line Contents ================================================ 14 171.086 MiB 0.000 MiB @profile 15 def oneLineReduce(people): 16 170.445 MiB -0.641 MiB sumHeightAndCount = reduce(lambda acc, y: ((acc[0] + y[0]), (acc[1] + y[1])), map(lambda x: (x["height"], 1), filter(lambda x: "height" in x, people))) 17 170.445 MiB 0.000 MiB return sumHeightAndCount[0] / sumHeightAndCount[1] Line # Mem usage Increment Line Contents ================================================ 20 170.445 MiB 0.000 MiB @profile 21 def multipleVarReduce(people): 22 172.891 MiB 2.445 MiB personWithHeights = filter(lambda x: "height" in x, people) 23 193.090 MiB 20.199 MiB heightsAndCounts = map(lambda x: (x["height"], 1), personWithHeights) 24 193.090 MiB 0.000 MiB sumHeightAndCount = reduce(lambda acc, y: ((acc[0] + y[0]), (acc[1] + y[1])), heightsAndCounts) 25 193.090 MiB 0.000 MiB return sumHeightAndCount[0] / sumHeightAndCount[1] It looks like the fastest, most efficient way to do it is with sum and a generator.
last time I looked at this, it converted all line endings to windows and there was no option to disable it or use unix
NumPy arrays.
Would guess this is a close resemblance to what i was talking about. Believe however, There is still something too the theory i had. Anyhow Thanks @whatsdoom for taking the time to answer to this theory.
@Chason This is not a problem i'm having it's a Theory.
Please stop throwing things, we have had to replace windows several times.
Theories aren't useful unless they solve a problem someone is having. 
This is the face I make when I care what internet nerds have to say
Or Ctrl+KD in PTVS.
Why, for all these years, have I not known about a[:]? That's almost stupid that I've never tried it.
Doesn't work nearly as well though, unless you've got some vim plugin I don't know about. 
This is just horrible and evil.
What an increadible bad Idea - first you should get rid of the other errors. Something like a decorator which wraps the whole file in: try: #file here except: return None that would be great! A program without errors :D
going to have to be a complet noob... how do you install it/make it like matlab? I'm utterly confused by the documentation. eurgh I really hate computers at times lol
`du` reports the actual amount of disk space used, which is different from the file length, which is what `os.path.getsize()` returns. For example, if the block size of the filesystem is 4k, then a 128 byte file will occupy 4k on disk because it will use the whole block, even if all of the block isn't needed. This difference is generally only apparent when dealing with directories that contain a ton of small files. There can also be differences caused by sparse files. If you want the size as reported by `du`, use something like the following instead of `os.path.setsize()`: def disk_usage(path): return os.stat(path).st_blocks * 512 Calling out to subprocesses should be avoided at all costs. It's not performant, it's more error-prone, less portable, and when done incautiously leads to shell injection vulnerabilities.
This is genius
Can you add those to an int though?
C'mon, man.. it's just an April's fool prank...
April fools day is horrible and evil.
I have one of these using a Digital Ocean droplet (VPS). I love it and is now a server that I would never take offline. You can also create users if you need to collaborate with a friend and you can make some projects public. The smallest droplet at Digital Ocean is $5.00 a month and a private repo at github is $7.00/per project. The savings can add up quick with a small time investment in setting up the server.
It seems that this is no longer the case. I just checked % PYTHONPATH=yapf python yapf/yapf -i hosts.py % file hosts.py # outputs hosts.py: Python script, ASCII text executable
You may also have look up your file system block size. It isn't likely to change, but could. 512 is just the most common. 
Right click on the Run pane heading. Select the "Move to" options and select "Left" or "Right."
This!
An April's fool prank that works and is a terrible idea.
I'm actually considering installing this.
comparison to https://github.com/hhatto/autopep8 !?
Exactly this. Line 2 from the zen of python: &gt;Explicit is better than implicit. https://www.python.org/dev/peps/pep-0020/
Evidently this is an April Fool's joke. However, could someone please explain to me why this is a bad idea, at least on a conceptual level? It reminds me of my latex editor (TexStudio) which automatically installed packages that I required on the fly. How good/bad is that analogy, and why is this one so bad?
Interesting that you say "go so far as explicitly writing `return None`". My take is if a function returns a value (anywhere), you should always use `return None` -- when I see a function definition without a return or just a bare `return` I immediately think the function doesn't return a value.
The system always reports the size in 512 byte units regardless of the actual block size. That allows it to be filesystem/device agnostic.
I prefer [swagimport](https://github.com/yolo/swagimport) myself.
Did a good job on the code I fed it. The only fragment I didn't like was it turned this: self.accounts['root'] = {'account_id': root_id, 'master_key': root_secret} into: self.accounts['root' ] = {'account_id': root_id, 'master_key': root_secret} Edit: Formatting, of course.
What happens if (when!) you misspell a package name in an import statement? Say, if you accidentially write `import requets` instead of `import requests`. It almost looks right, so you might not catch it when you write it. So you run your program, and this evil package `yoloimport` automatically downloads and installs the package `requets` from pypi, which just happens to be a malicious package that hasn't been discovered and removed yet, and now you've executed malicious code on your machine.
And bam! something changed indentation-level. Or do you know of some python plugin for vim that is _guaranteed_ to not change the indentation-level of any rows?
I tried doing `import yoloimport` but got an ImportError
You are correct, just used it to clean up a Flask app I wrote recently. Lots of good suggestions, and only a couple i didn't like - http://i.imgur.com/w5VlEZY.png (original on the left, YAPF on the right)
Okay so since OP I bought the book and have read about 60% of it. Overall I like it a lot. It's probably not best for newcomers to programming or the language. I've been programming in Python mostly as a hobbyist for 3-4 years and I've had to re-read many of the examples several times before understanding what's going on and even then I sometimes feel like I don't fully get it. But with that being said, the book is very thorough and couldn't be more real world applicable in the sense that you can start using the lessons immediately in your code. Highly recommended for intermediate/advanced python programmers!
pff switch to linux
I just installed `yol2import`. It took care of importing`yoloimport` for me.
In the tests... assert 'P' != 'NP' # proof is left as an excercise for the reader 
/u/kashmill should be using yololinux, a derivative of ubuntu where every "bash: command not found" error triggers an apt-get install to try and install the package that contains that functionality.
&gt; it's just an April's fool prank Even though, it's not a bad hack for an ipython notebook repl, for instance.
Newbie question one the way: So is the general idea behind these programs that they take the some code that has been written and make it look nicer while keeping its functionality? I guess the main idea being that it makes it more readable? or do they also do things like recognise repeated sections of code and change them to functions etc? cheers
*deleted* Realised what I did wrong. Sorry!
Thanks I didn't see that (is it possible to make the run pane icons disappear - for a less cluttered view? 
Is that not a problem if you just mis-type 'requests' in your call to pip or in your requirements.txt or in setup.py? Honestly I'm not even really convinced this is such a terrible idea. I mean it's basically just an extension of the way it's done now. Except now you explicitly do `pip install -r requirements.txt` then make sure it all worked, then you do your `python setup.py install`. The only big downside I can see is checking for installed packages every time you start the program which might be unnecessary overhead.
Very nice! Added. Thanks.
This isn't criticism. You can obviously program and might be quite good at it! - but are unfamiliar with the software developer tools used by professional software engineers. http://software-carpentry.org/ is designed for people like yourself, to teach workflow tips and developer tools to scientists.
It's ok, it's not about the actual logic :)
Get on Stitcher already!
Fuck IT? 
It really works? YES! I was so disappointed when I got to the bottom and thought it was a prank!
I'm doing it right now! Done!
1) What are the odds of that? You could say the same thing about typing googel.com and getting malware. 2) All Python programmers are good and virtuous and would never put malicious code online. Besides, anyone who wants dynamically typed dangerous code can already download PHP. 
Yup: In [1]: import numpy as np In [2]: 1 + np.array([1, 2, 3]) Out[2]: array([2, 3, 4])
Never had a problem with it. I can post my settings when I am back at my computer
The opposite is "Suicide Linux," where invalid or misspelled commands are converted into rm -rf /*
Script to do what ?
I'd suggest to use PyCharm, it has pretty good realtime debug features. Also, you can use import pdb; pdb.set_trace() 
It looks...... REAL! https://github.com/django/django
Stuff with the companies product. 
Well, the *good* tools are not that plenty, so the similarities are inevitable. But I wanted a solid base for more, e.g. a Flask option will come, just like the current CLI stub, and more automation workflows. Also, the whole thing is written so that some key files (like setup.py) don't deviate much across projects, so that there is a chance for *incremental* updates (i.e. easy merging), and not being stuck with what you got out of the template a long time ago (code rots fast).
Hmmm... class NoOp(object): __getattr__(self, _): return self Is that what you had in mind?
There are many solutions. Start here: 1. requirements.txt and pip install from git 2. chef, ansible, salt 3. docker, vagrant 4. vm cloning from snapshot 5. fabric
* You could be trying to import a Python file that you wrote, but it's missing from your path -- and then yoloimport goes and gets something unrelated with the same name, complicating the situation. * Not all packages' distribution names on PyPI are the same as the name you import. * Notice how some code uses a pattern like this: [ ](/space) try: import package except ImportError: # do something different that also works You'll be hitting pip every time that code runs. It happens in their documentation when something tries importing the platform-specific package _winreg, and yoloimport tries to download "-winreg" from pip. * PyPI has high enough traffic already.
There's not really a good analog for a None-ish object that doesn't do anything in the same way as an empty list does. An empty list is nice because it's effectively the Maybe monad, in that when you have a list you tend to do defined operations on it like maps that just do nothing in the case of an empty list. To get the same thing with single objects you sort of need the Maybe monad where whatever you're trying to do with it you do via a standardized interface. For functors like monads that tends to also be called map, so you effectively tell your type what to do with itself and if it has a value it does that but if it's None it just no-ops and continues to pass along the None. However because Python isn't haskell and we're not usually doing purely functional stuff anyway merely propagating Nones tends to be insufficient, so we usually actually do care enough about our None value to check for it manually and do something about it. 
https://github.com/justanr/pynads/blob/master/pynads/concrete/maybe.py Funny you mention monads in Python. I've been hacking on that over the last few days. I'll admit that it'd be nice to have them as a language feature. But like you said, this is Python and not Haskell.
I'm so very pleased that this project isn't dead! I know what I'm doing when I get home!
Looks Nifty! I can't say I'm particularly an expert with Haskell, I've just played with it a little and I try and keep an eye out for stuff that could benefit from some functional programming like when I'm doing a lot of transformations + the like. Definitely interesting code to dig into though. Python definitely isn't built around functional though. It's too fond of the object oriented approach. 
 Correct, looks more readable. When people do odd things like this it becomes hard to read.
[Here](http://www.panda3d.org/blog/the-new-opengl-features-in-panda3d-1-9/) is a blog post with the new graphical features Edit: The project is also now on [github](https://github.com/panda3d/panda3d)
as funny as an idea it is, its a horrible horrible idea.
Yeah, you can write functional in Python or JS or really anything that believes in first class functions, I just seem to remember that Guido in the past has definitely discouraged use of stuff like map and reduce in favour of pythonic alternatives. In the end, culture and common language idioms define the friendliness or unfriendliness of a language to a particular style. 
Forgot to include shell_escape function... http://pastebin.com/XqR8ubiq
Is this real or some sick April's fools joke? If real, this is fantastic. I use Theano in a lot of my physics codes.
It's real. 
how would "someone unfamiliar with Python" have any clue what "great, Pythonic code" looks like ?
If you don't use the `-m`, git will hand you a text editor to write the commit message.
As Whoopska pointed out there are many solutions to this problem, and many of them compete with each other and are the subject of many religious wars. You can break your needs down into tasks and there are many good tools for each task. **Server Setup** maintaining your server is one thing that makes sense to automate. Having this automated allows you to be able to rebuild the exact server for testing, in the event of a server failure, or when it is time to scale up. 1. Use Salt or Ansible (I believe Chef and Puppet do this is well, but I am not as familiar with these technologies) to automate creating and setting up a new server. You can do everything from manage your SSH keys this way to installing all your dependencies, and configuring Nginx and mysql. 2. You can use Docker or Vagrant to build a micro vm that all you have to do is install and run to get everything up and running. Docker and Vagrant are complimentary tools to tools like Ansible and Salt, many people use Ansible and Salt in conjunction with Docker or Vagrant. One of the major pluses of a Salt/Ansible style of server management is that it creates configuration as code that can be easily stored in a git repository. **Code Deployment** The simplest way to do code deployment is to just clone your git repo. Once you start using a tool like Ansible or Salt you can set that up to do code deployments. While we are talking about github repositories, make sure you have your production code on a separate branch from your development code. This is very important because when you have the inevitable production bug you want to be able to easily fix it and test it an push it. The next step from just pulling from your repo is to take your project and package it. If you do that installing your app is no different than installing the other apps you installed. An advantage to packaging over just cloning is that if you have build steps in your deployment such as minimization you can do it once at the packaging stage and use that packaged code to test and move to production without having to worry about if the environment was different and generated different output. **Continuous Deployment** The so called panacea of the development pipeline is everything automated so that when everything is accepted and all tests have been run (both manual and automatic) your code gets automatically deployed. Depending on the size of your project and the number of people involved this may unnecessary, but parts of this can be very useful. Many open source projects have github triggers set up so that when someone commits to the git repo, a test environment automatically checks out the latest code and runs automated tests on it. There are many tools such as Jenkins and buildbot for this. **References** [Salt](http://saltstack.com/) [Ansible](http://www.ansible.com/home) [Chef](https://www.chef.io/chef/) [Puppet](https://puppetlabs.com/) [Docker](https://www.docker.com/) [Vagrant](https://www.vagrantup.com/) [Jenkins](https://jenkins-ci.org/) [Buildbot](http://buildbot.net/) [Git Branching](http://nvie.com/posts/a-successful-git-branching-model/) [DevOps](http://devops.com/) There are lots of other great resources, but that should get you started. 
Hope u like deprecation warnings
Nice! They also have Python 3 support coming up, will probably be ready for the 2.0 version.