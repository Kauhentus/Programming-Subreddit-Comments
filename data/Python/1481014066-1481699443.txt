**joblib**: gives you "embarrassingly parallel for loops" (their words, pretty accurate) **snakemake**: a spiritual successor to GNU Make, with python like syntax, easier ways to deal with multiple output files and masks, and even more intelligent allocation of jobs **seaborn**: awesome plots in seconds, without the need to touch matplotlib directly. Also has wizardry functions that do common stats calculations for you under the hood and display the results neatly **networkx**: display graphs **numba**: easy jit for pure python numerical stuff I have to also make a shout out to the already mentioned **tqdm**, it's simply beautiful. Also I'm in the process of getting myself acquainted with **pomegranate, hypothesis, tensorflow** and **dask**: they seem very important, but I can't yet say I use them. 
First of all, I'm sorry for choosing the wrong subreddit. Second, thanks for the advice, will move post to /r/LearnPython
I will definitely try that out! Thanks pvkooten!
Hi, If I try your Module I get following errors. 2016-12-06 09:38:30 [yagmail] [ERROR] : Connection unexpectedly closed: [Errno 104] Connection reset by peer 2016-12-06 09:38:33 [yagmail] [ERROR] : please run connect() first 2016-12-06 09:38:39 [yagmail] [ERROR] : please run connect() first Exception smtplib.SMTPServerDisconnected: SMTPServerDisconnected('please run connect() first',) in &lt;bound method SMTP.__del__ of &lt;yagmail.yagmail.SMTP instance at 0x76a12c10&gt;&gt; ignored Here is my test script: html1 = some html code me = my email you = your email import yagmail yag = yagmail.SMTP(me, 'Password') yag.send(you, "Birthday", html1) 
Django, Flask and Bottle are web frameworks, and out of the three, only Django actually does any database stuff - Flask and Bottle are intentionally minimal and allow you to use any database you want (or none whatsoever). SQLAlchemy isn't a database or a web framework - it's an ORM, an interface of sorts to a database, that's not tied to any web framework. For your choice of web frameworks, it's mostly between three choices: Django, Flask and Pylons. Django is big and opinionated, Flask is small and minimalistic, and Pylons is somewhere in between. You should probably try at least Django and Flask to see which way is more comfortable for you. For databases, MySQL and MariaDB are the same thing, PostgreSQL is similar, but more powerful and technologically advanced, MongoDB is a noSQL database which comes with lots of quirks of its own. Here, you should probably choose Postgres, unless you have a really good reason to choose anything else. Also keep in mind that Django doesn't really work well with non-relational databases like Mongo, so if you're working with Mongo, you'll want a different framework.
There's two questions here: what's the easiest? And what scales the easiest? I'm only sort of guessing what you're trying to do here, and I'm no SQLAlchemy expert but I'm getting a masters in Information Management so I think about schemas more than I want to. If this is a one-off, just put it all in the same table and save yourself the dev time. If this is a project that you think could go somewhere, create a table for each league and find the appropriate way to join them for your project. That's the up front design decision you need to make.
Hi, Im not a spammer, I´l try to automate the Birthday emails in our company. Yeah I have a stable Internet connection. And I´ll try to find another solution. **Thanks for your help** 
ditto! :) https://github.com/szaboat/pymodoro
you should checkout the numpydoc extension for sphinx. i think it makes a nicer looking documentation -&gt; https://pypi.python.org/pypi/numpydoc 
Thanks.
that's a nice trick, but (given there are beginners around) should bear a big fat warning that this is a demo and should not be used in anything that's remotely in production or security related. the one thing about f-strings that makes them not be a security can of worms is that they have a dedicated syntax and are never ever passed around for evaluation. that's absent in this workaround. doing this safely in &lt;3.6 is certainly be possible, but i think that the way to go would be hooking into the import mechanism, preprocessing (or transpiling) the code from `f"hello {name}"` to `_process_fstring("hello {name}")` or that like, and then applying all the optimizations chebu has so neatly demonstrated. *edit:* thanks for adding the safety note
Always fun to see articles that dive deeper into what's possible with Python. To be nitpicky, f-strings can be used without the print function as well. They are not in any way specific to ``print``. There is a problem with the way caching is implemented. Since the stack frame is cached, it assumes the environment is unchanged between two invocations if the text string is the same. name = "foo" print("My name is {name}") def test(): name = "bar" print("My name is {name}") test() This will output foo twice instead of the expected foo then bar: $ python optimzed_compile_print.py My name is foo My name is foo I don't know a way to reliably cache the calling stack frame. Another issue is security, which f-strings doesn't suffer from. If an unsuspecting developer would use this print function and allow user input, the end user can access all variables in the caller's ``f_locals``. f-strings solves this by compiling ahead of time. The compiler basically translates ``f"Hi {name}"`` to ``"Hi {}".format(name)``.
This is not very related to Python as much more with the base DataStructure you want to use. Maybe those are better subreddits for an answer: https://www.reddit.com/r/learnprogramming/ https://www.reddit.com/r/SQL/ https://www.reddit.com/r/Database/ My advice on your problem: design yout data structure/tables/objects etc keeping in mind what you have to do with the data, and not where they come from/how do they look. In you case: You are basically storing Soccer Teams, teams have everywhere the same attributes, so I'd suggest solution #2. (that's how they are stored in FM, btw :) ). The only thing you have to consider is time, TeamA will be in England PL this year but not next year. So you may want to consider a second table containing al the team-league relations year by year. 
&gt; The only thing you have to consider is time, TeamA will be in England PL this year but not next year. So you may want to consider a second table containing al the team-league relations year by year. Excellent! Those are the kind of things I tend to miss and this is certainly important. Thanks for your help! How would you go about designing those relationships?
If what you want to do is change the way the compiled output looks, you're looking for a [theme](http://www.sphinx-doc.org/en/1.5/theming.html). Themes typically consist of a single jinja-templated HTML file, a CSS stylesheet, and some associated JS files. According to Seaborn's [conf.py](https://github.com/mwaskom/seaborn/blob/master/doc/conf.py), they use the [Sphinx Boostrap Theme](https://pypi.python.org/pypi/sphinx-bootstrap-theme/) with a [custom stylesheet](https://github.com/mwaskom/seaborn/blob/master/doc/_static/style.css). They've also customized some of the theme's options in their conf.py, like altering the [navbar links](https://github.com/mwaskom/seaborn/blob/master/doc/conf.py#L130). The theme has documentation on what options are customizable.
Very cool. Our friends over at /r/unitedkingdom might be interested in web history fogging tools, now that the UK is planning on storing everyone's history for a year and making it available to any number of agencies.
My poor english lang will no help me for this but i try (i encourage experts to write the same document as Pyramid defense design for Go web app). First, before Pyramid exist I had my own framework, Pyramid was the only framework that let me kept my design and switch gradually to Pyramid components and now gradually to Go. In Go also you organize your handlers, middlewares, hooks, templates... where and how you want but still in a way that it's easy for an other developer to see what you did. You can choose the router (and implement traversal if you want, subroutes...). No black magic. You pay for what you eat, a small app stay small and simple and you extend with what you need without limit. It scale, no need to change or the change can be incremental. Go doesn't need any dependency to start a web app. Pyramid need more dependencies but they are very stable. I mean both are very stable about compatibility. Both are fast as possible. I'd like to know if it's just my brain that fit comfortable with both or if there is really a similarity in the design ? My challenge now is to rewrite a little cms with pyramid+traversal+zodb in Go. Then i will see how much similarities they share !
Just to clarify, Sphinx uses reStructuredText for markup, but formatting (i.e. look and feel) is handled by themes in the output format used. Since Sphinx can output to several different formats (HTML, LaTeX, etc.) each theme is specific to the output format in question.
I hope that you'll enjoy this post! Your feedback is always welcome. Just to kick off the conversation: * Have you ever encountered a memory leak in a Python program? * What tools did you use to track it down?
Damn! I had no idea that was going on. I suspect that they might have the technology to detect fake searches, but if you made so many searches that you over ran their storage capacities you would have a good shot at shutting that down.
&gt; Fake news sites like The Onion and CNN I like this guy
Yeah, I'm working with ArcPy, which isn't bad, most of its tools work, its error reporting is sometimes very strange and unhelpful.
If it just converts an f string to a format call. How is it faster than .format()
Get out of here with your common sense.
Brandon Rhodes had a good PyCon talk a few years back on Sphinx. You should be able to find it on YouTube. The GitHub repo he mentions has his handouts and examples with a minimal geometry library he uses to generate the documentation. I found it to be a good primer.
Cool post! That seemed hard, and a lot of work @o@. Spoil me: In the end, did you have success eliminating the memory leak? 
Dictionaries are not ordered. If you want an ordered dictionary, use `OrderedDict` or a different data structure. Also, questions are better posted in /r/learnpython.
Working on my software for bookshops: - http://abelujo.cc/ - https://gitlab.com/vindarel/abelujo (django, angularjs) - underlying webscraping lib to get isbns: https://gitlab.com/vindarel/bookshops I must figure out the best way to notify a user that a book he just sold can come from many places and suppliers.
As a novice, when picking a technology, you should consider: * Community size (bigger is better) * Maturity of technology (more mature is better) * Ease of use (easier is better) * Quality of Documentation (higher quality is better) Those 4 things will generally steer you to the most tried methods with the most support available to you as a novice. 
reminds me of the Doctorow book 'Little Brother' https://en.wikipedia.org/wiki/Little_Brother_(Doctorow_novel) The protagonist of the story wanted to make large-scale electronic surveillance less useful so he made his own linux distro that did this continuously, with many different protocols - random connections, plausible-human-like searches etc. So that all that crap was going on in the background making his occasional connections, searches etc blend into the background. Then he implausibly got a lot of other people to use this same linux distro and ... big brother was foiled... Well, read the book.
Could you explain why? Thank you for your reply!
This article needs a proof reader. 
So company has full control over its own source code, yet waits for someone else so it for them? They have 12 years (that's twelve fucking years, IMO way too much) until 2020 to do it, also python2.7 binary won't disappear after. It's in their own benefit to move to maintained version. Of the library is non open source from third party, that's even better, since they surely pay to use it, and can demand them to provide version for 3.
you can use flit : [https://github.com/takluyver/flit](https://github.com/takluyver/flit)
I used [Cryptography](https://cryptography.io/en/latest/) in a recent web project and I was really satisfied with it. Straightforward API, good documentation, easy to find examples online, no problem with it so far.
That sounds nice. My first paycheck is sitting in some mailbox somewhere in the building because "oh, the system can't do that for your first check" (even though my information has been in the payroll software for &gt;4 weeks)
"The hybrid Slice Planner gives you the best way of doing zero g experiments." Man I've been half assing all of my 0-g experiments. \s This is funny. Some of them almost look real. Keep it up.
I'm curious: why do you ask this question? I've been programming in Python for 3-4 years and I'm still learning new things every single day. I was a C++ and C# programmer before that. So I can't tell you how fast you'll get a "firm grasp" of Python. It would be highly speculative. Everybody learns at a different pace. My recommendation would be to read an introductory book about Python and then test your knowledge by writing a first program. Then you'll see where your knowledge is at. P.S. Have you considered posting your question under /r/learnpython instead? This is probably better for learning-related questions.
Bangs are great. ( ͡° ͜ʖ ͡°)
here is the [permalink](http://howlroundmusic.org/wp/?p=23)
^ that and YAGNI (Ya Ain't Gonna Need It). I've started off a couple small/quick websites with Django/SQLite. From the DB side, if you need to convert it to a 'real' DB later, that's pretty easy. From the framework side, Django is batteries-included for the routine website stuff as opposed to Flask where you need to bring it yourself (that's fine, but if it's not something that needs to be super-performant, it's a lot of time spent). Sure, that's kinda contrary to YAGNI, but for DBs that can manifest as overhead because you need to administer and secure the DB server. For Django, it's `pip install django`...
I think your best bet at this point is just diving into a project. Find something that interests you and just try to learn as you go. Whenever you get stuck Google is your friend.
The problem is that Python considers newlines to be the end of a statement if the preceding statement is complete. This is a complete statement: data = Pipeline.objects You don't need to use parentheses, though. You can just do it this way: data = Pipeline.objects \ .process(thing) \ .filter(hello) \ .count() The "\" tells the parser "don't consider this newline significant."
I will do. Yeah I'll probably need google a lot from now on, haha. Thank you so much for the advice!
I did something really similar to farm the bing rewards system for amazon gift cards last year or the year before, was a fun side project. I went overkill with it(multiple accounts, fake user-agent to appear as a mobile user, dictionary/history of search terms to avoid repeats) though and got my accounts banned of course.
well, I'll make a table called "teams" and a table called "leagues", then a table called "team_appearances" made of the columns "team_id", "league_id" and "year". In the latter you store all the participations of every team in their league year by year. Maybe you can also store the final position, goals scored and statistics as such. Then you make a join of the three tables, filtering by league, to get all the teams in a particular league like this: SELECT ta.position, t.name, ta.points FROM teams t JOIN team_appearances ta ON (ta.team_id = t.id) JOIN leagues l ON (ta.league_id = l.id) WHERE l.name = 'SerieA' AND ta.year = '2015' Again, this is a database design question, not very python-related but more of a general programming question. Have a look at [https://en.wikipedia.org/wiki/Database_design]. (https://en.wikipedia.org/wiki/Database_design) I don't use ORMs like SQLAlchemy often, but it's a nice exercise to try and build this schema and this query with SQLAlchemy on your own!
It's still not _good_, is it? No mention of dependencies or what to do if you actually want a non-blank test file.
I log events that pass through a Celery workflow on an individual basis using elasticsearch.py, where I have a Client connection to my Elasticsearch host and the call just looks like, client.create(index, doc_type, my_dict_of_info). I've also used elasticsearch.helpers.bulk(my_client_connection, iterable_of_data) to load up a bunch of data from a Jupyter notebook, where you just need to make sure your iterable of dictionaries also includes a _index and _type key which replaces the index and doc_type variables in the single-row client.create method. I have not tried either on AWS Lambda, sorry.
the pendant in me wants to say it's escaping the newline.. \\\n or something
Haha, attempted banned for 'questioning authority' and talking about questioning authority as positive. Somewhat ironic
Interesting, so python will take multiple statements separated by new lines, but it will not concatenate a single statement divided by new lines (unless you escape them). Seems very logical. I kind of like the spacing here if the object was created by a 3rd party, and if it nests its methods and attributes this way and there is no cleaner way to get at them, but it is difficult to understand why that would be necessary. I believe this is what they might call very "unpythonic". Ideally, if the class object takes arguments at the time of initialization, I would try to structure it like this: import Pipeline pipeline = Pipeline(thing, filter=filter) pipeline.count() Or better yet, there should not be a count() function at all, but rather a \_\_len\_\_() function in the Pipeline() class, so that you could do this: import Pipeline pipeline = Pipeline(thing, filter=filter) len(Pipeline) If the class object is indeed from a 3rd party library, and does contain the nested methods that you describe, I would consider making some kind of wrapper class if you plan to use it a lot so that you can use it more easily, without using the unpythonic syntax we are discussing here. 
Absolutely, I was giving the simplified explanation.
Have been working on a gameboy emulator library in C++. The idea is you can link it to your project and create one or more instances of an emulator in your project. An application I thought would be cool is scripting bots that play gameboy games in python. I setup the build, CI and deployment to pypi this weekend. Will start work on the python bindings in a few weeks hopefully 
My first web scraping project and reverse engineering the algorithm that determines which content makes it to the home page of my website of interest. So far I've learned something about "headless browsers", threading/asynchronous requests, rotating IP via VPNs, user agent identification, and more. I didn't know that all websites had a "robots.txt" file until yesterday.
&gt; Is ReStructed Text as dumb as I think it is? Care to explain/expand on that?
Other small tool to start a Python package [pip-init](https://github.com/juanpabloaj/pip-init)
Just wondering what is the motivation for this? For purposes of learning? Wordpress is pretty well made in terms of a CMS.
What does that mean when you say it creates guns?
Or just use a VPN...
If you are serious about learning, give it 1000 hours. ~10 hours a day for a few months, or ~3 hours a day for about a year. You can become decently proficient in much less, but as with anything, the more time and effort put in, the better the results coming out. The above will put you on track to *actually* becoming a programmer who can think creatively and solve problems independently, as well as perform a litany of basic programming/scripting tasks with ease. If you put in 10,000 hours, your knowledge will grow 10x. There is no limit. If you put in 100, you will have 1/10 of the knowledge you would have had otherwise.. 1,000 hours over 1 year or less relatively pretty intense and immersive, but it is totally attainable, and I think you need at least this rate of learning in order to retain and expand your knowledge in this domain. Stop researching it. Go to codeacademy right now and get yourself through their course. You'll feel very empowered by the end.
1) I wanted to! 2) I tried WordPress and didn't want to use it 3) It's a great learning experience, as you noted
When in doubt I just use syslog and let the system handle it. 
I am automating parts of my business: * Optimize wordpress installations (i.e., image compression, auto config file creation, etc) * Auto Notification system for Google Analytics API. It will tell me the traffic stats for my portfolio of websites. It takes too much time to check them daily. It's great when these scripts are directly tied to my business's ROI
I've been happy with [PyJWT](https://github.com/jpadilla/pyjwt). I've only really used it for decoding jwts so far, as the ones I'm using are being encoded in a Node.js app, but PyJWT can handle both tasks.
Could I just ask, why did you decide to write this in Python 2.7 and not Python 3?
Ah, I haven't read that. But that approach makes a lot of sense. We can't escape the fact that we live in a world that generates a huge amount of data on each and every one of us, whether we opt in or not. But we can certainly come up with interesting ways of fuzzing that data.
You mean no one should write 15 line Python scripts like [this](https://gist.github.com/anonymous/964d3a1992d989908d4bdae0a57e4485) to fuzz their ISP history?
The US has the first amendment. Go read 'censorship in the UK' and 'censorship in China' on Wikipedia. You don't know wtf you are talking about. The US collects plenty of information directly from Google, sure, but the difference is that it can only use my words to prosecute me for actual crimes, the words themselves are not criminal.
How many gift cards did you get and what was the 'trigger' for a free card? 
That's why I personally prefer Haskell's way of doing significant white space. Whether or not something is the the end of a statement depends on whether the next statement is indented further or not. So: foobar = foo . bar Is interpreted as foobar = foo . bar
Yes. I seem to remember I was a bit overwhelmed by pyenv at first. But once set up, it is very easy to use.
[jose](https://pypi.python.org/pypi/python-jose/1.3.2) is nice
The holocaust historian Timothy Snyder wrote a brilliant [article](http://www.dallasnews.com/opinion/commentary/2016/11/21/learning-history-can-save-america-tyranny) recently about the straightforward steps every individual can and must take to prevent a nation sliding into tyranny. Number one is this: &gt;**Do not obey in advance**. Much of the power of authoritarianism is freely given. In times like these, individuals think ahead about what a more repressive government will want, and then start to do it without being asked. You've already done this, haven't you? Stop. Anticipatory obedience teaches authorities what is possible and accelerates unfreedom. There is no law against using encrypted DNS. And yet we're cautious to suggest it or even talk about it, *because one day there might be*. We can't let ourselves fall into this trap. 
&gt;trains the model using 10% of the PennTreebank corpus and tests the accuracy against the remaining 90%. Your code snippet above is training on 90% and testing on 10%. That doesn't help explain why your results are abysmal, but it's the only feedback I have...
Sometimes I wish my job could just hand me a big wad of bills at the end of each day. 
Automation, and web page scraping.
Rock, paper, scissors is a popular starter project.
My errors this time are: ``` stdout: stderr: [Thread-11] INFO com.twosigma.beaker.r.module.ErrorGobbler - Error line not captured: ' unable to load shared object '/Users/jespinoz/anaconda/envs/r-conda/lib/R/library/grDevices/libs//cairo.so':' [Thread-11] INFO com.twosigma.beaker.r.module.ErrorGobbler - Error line not captured: ' dlopen(/Users/jespinoz/anaconda/envs/r-conda/lib/R/library/grDevices/libs//cairo.so, 6): image not found' [Thread-11] INFO com.twosigma.beaker.r.module.ErrorGobbler - Error line not captured: '2: In (function (filename = if (onefile) "Rplots.svg" else "Rplot%03d.svg", :' [Thread-11] INFO com.twosigma.beaker.r.module.ErrorGobbler - Error line not captured: ' failed to load cairo DLL' ```
&gt; I think there is value added by providing the service that collects data and puts it all in one place can you elaborate ? Do you have ideas of application ? Do you mean, it would be added value to provide a public api ("microservice" ?) ? I thoughgt a bit about that. It could be useful to non-python programs, and I know of at least one that needs better isbn searches. But: it would be a point of failure, both because of the server and because my server's ip would do all the scraping so if it's blocked, dependent programs are blocked. Alternatively, it could be great if I could provide a library or just a text file of **xpath expressions**, so it would be very easy to scrape the same websites. Every program in different languages would rely on it, so when a website changes, one person fixes the xpath into the repo and everybody benefits ! If you were thinking about a website were one can search books, what features would you like to see ? I'd like to provide open inscriptions to Abelujo, but that's another work and not my priority. &gt; Very cool. :) I cache the results with `requests_cache`. I don't save all of them on my domain, because results change: new books are added so keyword searches change, and a book notice is updated and corrected, so an isbn search may change too. Glad to talk about that ! 
Yeah if this is one off just create a single table. If you want to get practice you can do it a few ways. 3NF, partially denormalized star or snow flake schema etc. If I were doing this at my job though I would just make it a. Single table.
Odds are your path isn't setup right and it can't find your libraries.
A lot of pentesters use Python for their work.
Gross. Asking for trouble.
If you import time, you can get the local time (the one your machine is set to) by doing something like: the_time = time.strftime("%H%M%S, time.localtime()) After that you can use pygame to create a white window, whichever size you want. Changing the screen brightness is OS specific, so you could instead start off by making the box gray-ish, and depending on the cases you set make the color in the window change. pygame.init() screen = pygame.display.set_mode((width, height)) screen.fill((r,g,b)) pygame.display.flip() Something like this in an event loop and check for keyinput for closing, or a click on the "x". If you're using linux you could write an alias that changes the brightness, and call it with different values, like this: myfunc() { sudo su -c "echo $1 &gt;/sys/class/backlight/intel_backlight/brightness" } This does not work for every computer, as the directory may differ etc. Try [this](http://stackoverflow.com/questions/6421356/adjust-screen-brightness-contrast-in-python) link for more reading. Hopefully this was of some help! Good luck! 
The UK's Investigatory Powers Act has been called one of the most extreme spying bills in a Western democracy, so yes, it's worse than anything the US is doing.
I just finished up making a tic taco toe game with a pretty tkinter frame (well as pretty as tkinter even really allows), and quite by chance may have found contracting work for writing a converter from xps to csv... I have a little experience with writing to a file (just a simple plain text file) but i think this will be a great challenge (I am still early on in my BS in CS so am kinda surprise)... But the writing csv I would I imagine is simple enough with some research and youtube videos... I either need to find an xps miner for python, or write something that ill convert xps to pdf, because I know there are pdf miners out there... but with all that taken care of it will just be a matter of making the classes... but I am pretty excited about it, didn't know I would be getting paid to do what have to pay for what I have to pay a university to do... fun stuff edit: Wow looking at what else has been posted in here I am way out of my depth in having a convo in most of ya, guess I should start coming here more often, I still have a lot to learn
I like social media data. There are many different types of analysis you can perform on text data - using social media posts as the source text can let you ask and answer interesting questions about how people are communicating online.
First, this belongs in /r/learnpython Second, put 4 spaces before source code, so reddit formats it correctly, like this: for w in words: print w, len(w) &gt; What is w? w was never defined so thus it should give runtime error. Variables are just names. w is the name that the for loop will give to each element in the list. If you changed it to 'word', then it would mean the same thing: for word in words: print word, len(word) 'w' or 'word' will be the current element in the iteration.
It does, actually. Try root.tk.call('tk', 'scaling', 4.0) Or set some other scaling factor.
I ran: &gt; fpm -s python -t deb tweepy But when I tried the python-tweepy &gt; dpkg -i python-tweepy_3.5.0_all.deb I got this error: &gt; Unpacking python-tweepy (3.5.0) ... &gt; dpkg: dependency problems prevent configuration of python- tweepy: &gt; python-tweepy depends on python-requests-oauthlib (&gt;= 0.4.1); however: &gt; Package python-requests-oauthlib is not installed. python-tweepy depends on python-six (&gt;= 1.7.3); however: Version of python-six on system is 1.5.2-1ubuntu1. &gt; dpkg: error processing package python-tweepy (--install): dependency problems - leaving unconfigured Errors were encountered while processing: python-tweepy BTW, the package I'm creating depends on tweepy, so I'm packaging tweepy as well, but tweepy ha its own dependencies too.
Cool, is there anything that goes well with C? (I love linux and C and python is probably what I want to do so im curious what are some of the things you would be tasked with) thanks!
1. Web development with various frameworks 1. DevOps (SaltStack/boto3/etc.) Frameworks is not very important here, there might be more new popular choices when you start working. 
Setting up a really simple httpserver where I can post files to. Issues with firewalls and such. 
You might want to look into Paramko, an SSH library for Python: http://www.paramiko.org/
I do a lot of scientific application development. Lots of room for science, lots of room for traditional software development and paradigms. Being able to build complex tools and on the fly data processing work flows in the same language is awesome.
ROS!
Tk has great usefulness/size ratio (and doesn't have to look bad), fully supports unicode, multiplatform, the edit widget is a powerhouse. Only thing Tcl/TK truly lack is a bigger community. Most people dissing them as outdated / technologically inferior don't know what they are talking about. Of course, PyQt has more, and looks better, but the PyQt5 package is about the size of my whole Tcl install ;-)
that's something performance tests would best sort out; could be "hello" + str(name), could be "hello {name}".format(name=name); either option needs some mechnism for dealing with !a/!s/!r the __format__ protocol.
As a recovering Tcl developer, I can tell you a few reasons why Tcl/TK lacks a larger community. Terrible, broken tools. Outdated library ecosystem. Proponents that live in a reality distortion field that would make zombie Steve Jobs blush. It's a dead language. It's proponents just don't know it, yet. I'm all for pulling TkInter out into a separate PyPi package. I just don't see why it needs to be bundled with the interpreter.
Yay, I thought I was going to need to learn how to bundle or chain exceptions or something, but I've already been getting this behavior by default in Python 3! I do like the improved exception handling.
&gt; I'm all for pulling TkInter out into a separate PyPi package. I don't really care. But any available replacement is bigger / more cumbersome to build. IUP wouldn't be a bad replacement, someone would just have to do the work. &gt; Terrible, broken tools. Everything I used worked as advertised. And sometimes even better (in the cases of scarce / missing docs ;-))) &gt; Outdated library ecosystem. AFAIR it's more like some missing libraries (CLARIFICATION: that never existed), the rest (CLARIFICATION: those that exist) either continues to work (thanks to Tcl's architecture, you can even continue to use older binary extensions for new interpreters) or gets updated. Windows COM &amp; Services, LDAP, SMTP, SSL/TLS, PDF, Databases, Tcl-&gt;C-&gt;binary-extension on-the-fly compiler and basically any library I've ever used either has a newer version or continues to work (EDIT: oh, i remembered some old widget toolkits that were supposedly great that didn't get updates, but I've never tried them, so no bad memories; it's not as if no-longer-maintained packages were problem specific to some particular platform ...). &gt; Proponents that live in a reality distortion field that would make zombie Steve Jobs blush. Same proponents who built android solution that works (instead of throwing back 'catch an exception, it will restart' when you do basically anything) ? &gt; It's a dead language. About as dead as Lisp &amp; Smalltalk, joker ;-) EDIT: And I'll have to point to your "recovering Tcl developer" catch-phrase: Your [at best unconscious] decision to demonize what you've [supposedly] left behind is your problem, not an argument (but it's about as "normal"/human as it is stupid). The only thing you seem to know about Tcl seems to be that "you are supposed to hate it". 
What is "the right output"? This function isn't returning anything, and you aren't even calling it in this snippet. Please explain what you're actually trying to do and what you expect to happen in each situation.
What's wrong with New Boston? 
Why are you using globals again? Just return w1 from the function.
This is the most important answer. If you are connecting to a consistent host then you can set up a shared relationship between the two machines by setting up the ssh keys. You won't be prompted for a password thereafter. This isn't always obvious if you're new to ssh. 
/r/learnpython It's on the sidebar
This is a really good book.
&gt; I don't really care. But any available replacement is bigger / more cumbersome to build. Who says TkInter needs to be replaced? I'm only saying that it should be removed. &gt; Everything I used worked as advertised. My experiences differed. I couldn't find a single stepping debugger that worked. At best they weren't very useful, and at worst they flat-out crashed with the version of Tcl we were using. Forget profiling. &gt; AFAIR it's more like some missing libraries, the rest either continues to work (thanks to Tcl's architecture, you can even continue to use older binary extensions for new interpreters) or gets updated. My experience was VERY different. In theory, the extensions should continue to work. In practice... well... A lot of the libraries we were using predated TEA, so the results were... messy... &gt; Same proponents who built android solution that works (instead of throwing back 'catch an exception, it will restart' when you do basically anything) ? AndroWish is neat. A little useless, but really neat. I dabbled with it, and ended up making a fugly Tk app on my phone. Works great if everything that you need is bundled up and you don't mind ugly buttons. Probably great for personal tools but... I have Kivy for that. &gt; About as dead as Lisp &amp; Smalltalk, joker ;-) Lisp may outlive all other languages. It's like a cockroach. Such a simple, yet robust lifeform, despite it's utterly unaesthetic nature. How could you hope to kill such a creature? Clojure is pretty neat... Now Smalltalk... I'll put Smalltalk in the same bucket as TCL. As deas as a programming language gets, at least. 
This is an incredible answer and thank you for writing it up. Lovely to see some one come that far in solving their own pains. If I contacted you via PM would you be interested in a short text-based interview for my automation mailing list? They love hearing about how people conquered tasks like your own.
- Data cleansing with pyspark - pyspark mllib &amp; scikit algorithms - ETL Development with pyspark (streaming and batch) - Django API development - Devops &amp; CI (fabric &amp; salt)
That would be even more noticeable then OP's script.
You'd give them a ton of random parts to construct any story they want.
I'll name but not shame. It's wxPython. There's a lot of ongoing work to update it by only a few people who do it purely for the sake of open source, and it's a massive project. I'm not going to hate on them, just be sad that it's holding me back from python 3 at work. Before everyone tells me to just use Qt, remember the licensing bit I mentioned above. We're actively working with legal to get it figured out, but until that comes to a decision in a year or so I still have to write code. We also have 4 years of wx code that we've written, so that has to be converted too.
I just graduated this year and I'm working in Python. I did my internship and now I'm contracted by the same company to continue the project. It's using Tornado (the lesser known of the Python web frameworks) and the Azure SDK for database and storage. I'm having fun writing a web application and back-end API from scratch. I learn new stuff about Python every day.
With /r/monero as one option.
Post learning questions to /r/learnpython There's nothing special about the arrays returned by `np.loadtxt()` If you want help diagnosing the problem we must first be able to create it. The code you've provided isn't remotely close to that.
[removed]
because people are both social and lazy.
Basically, I'm learning everything because I have a startup idea that I want to bring to life. So in a way it's just a small project, but of course with any startup, there is always the hope that it will be well received and attract a lot of users... with that in mind, wouldn't it be more straight forward to just learn postgresql + django? since with postgresql is guranteed to be able to handle everything. Or is there any benefit to using something smaller like sqlite3 + flask/bottle ASIDE from the ease of setting it up? Because, how fast I can get this project up and running isn't a great concern for me. 
People are sometimes on mobile and the mobile apps don't show the sidebars. 
One thing that I suggest you confirm is that the library you pick can actually encrypt tokens instead of merely signing them before they are returned to browsers. I have seen projects where developers did not realize that, say, 'encoding with HS256' does not mean encryption so they embedded things such as user passwords in tokens that browsers were receiving. This is not safe and basically means one is leaking passwords to attackers just like that. Consider this snippet from [PyJWT's documentation](https://pypi.python.org/pypi/PyJWT/1.4.2): &gt;&gt;&gt; import jwt &gt;&gt;&gt; encoded = jwt.encode({'some': 'payload'}, 'secret', algorithm='HS256') 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg' This is pretty much clear text and can be trivially decoded as below *without the knowledge of the secret password*, consider this: &gt;&gt;&gt; encoded = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg' &gt;&gt;&gt; algo, clear_text, signature = encoded.split('.') &gt;&gt;&gt; print(algo.decode('base64')) {"alg":"HS256","typ":"JWT"} &gt;&gt;&gt; print(clear_text.decode('base64')) {"some":"payload"} As you can notice - I did not have to use the secret password at all yet I decoded the payload to its clear text form. This means that if you were to send anything of importance in the token with the assumption that 'it was encoded so everything is fine', this data could be extracted as well and attackers would have access to the supposedly safe information with little effort. As it happens, we actually have both [JWT encryption and signing](https://zato.io/blog/posts/real-world-sso-jwt-zato.html) in [Zato](https://zato.io/docs/) and you are welcome to use it as your API security gateway instead of the lower level libraries if you prefer to use a GUI-based solution that takes care of such security details and a few hundred things more. 
Ignore me
My fren solved it
Mostly blender extensions to automate importing and editing 3D models from various providers and filetypes. 
See, this is exactly why I asked this question. I found 3 libraries on [jwt.io](http://www.jwt.io) but I wasn't certain which one was more production ready (if the term applies). The one that seemed to be the readiest was [python-jose](https://github.com/mpdavis/python-jose/) but a **very** quick look at Zato, the feature list looks like I should check it out some more. My thanks
It's not stable or complete. I checked it or a few months ago like I do every few months to see how far away it still is.
I see, so what problems did you experience with it? I'm genuinely interested, since besides the slightly changed syntax and subsequently slightly different behavior it pretty much works for Papagayo-NG without any visible problems, and we even have a custom widget for our Waveformview.
Using ZeroMQ is pretty much building it yourself ;) 
Building an api server for NLTK, something like Stanford CoreNLP's api server. NLTK doesn't have anything like this right now; maybe people with other language preference can use this or maybe by hosting on a server people can try out NLTK over http. code: [github.com/vipul-sharma20/nltk-api-server](https://github.com/vipul-sharma20/nltk-api-server) I can't think of what more can I do. Currently, I have implemented stemming, tokenization(word/tweet), lemmatization, named entity recognition, part of speech tagging(default/unigram/bigram) using trained corpus. It would be great if you all can suggest what more can I do 
The tricky bit is that "online" is huge, and you'll compete with people in regions where the cost of living is much lower than yours as well as people who are bad at estimating. Either way, it'll drive the price down, but it could still be fun and fulfilling. Sometimes online eLance type sites have vague overly ambitious requests like, "Clone Facebook for $700, please!" Other times the data entry section has stuff that you can get a return on because it assumes manual entry where you can actually write a Python script for automation. That said, the couple people I know who own software companies started by getting a client in person for a specific need. Some paid the bills on that client, and kept honing their category of project work until they could sell a concrete product and hire people to build onto the product. One person simple continued to freelance with some other friends he met till they pooled their income to hire staff and grow into a third party dev shop. It's in person, face to face work that will be easier to make money from. Online feels easier because the market is huge, but once you try it, you'll often hear crickets. In person, you just need to connect your skills to someone's need. If you don't have a connection, hang out in coffee shops, hacker spaces, and jobshare buildings. Just make sure you can word a concrete input: "I can do anything!" might not be enough to catch the interest of someone or make them think of a problem they need to solve.
My company uses Flask for our logistics API that shows trucks on a weather map and suggests reroutes to our clients. The reroute selection logic is also Python, but as our need for performance grows, we could replace hotspots with C.
&gt; My experiences differed. I couldn't find a single stepping debugger that worked. At best they weren't very useful, and at worst they flat-out crashed with the version of Tcl we were using. Forget profiling. Sad story, bro. I think one of the free debuggers worked for me, and the one from ActiveState certainly works. And there are some profilers (free and commercial), and I remember seeing some profiling info in some video from some Tcl conference, so at least one must work ;-) No, Tcl does not have "Java level of support", but it's not as bad as you make it sound. &gt; AndroWish is neat. ... I have Kivy for that. Well, QPython (2 and 3) constantly crashed on me (tried it a few times in the past year), so I don't ... &gt; Now Smalltalk ... As deas as a programming language gets, at least. Pharo, Smalltalk/X, VisualWorks, Dolphin, Amber, Gemstone are all actively developed and used, available to general public. Existing implementations are getting improvements and overhauls. New interesting research is done on / with Smalltalk. In the past ten years, I've seen / heard about three top-notch VMs getting created (sadly, two are for internal use only; third is expensive as hell, available only under NDA and not known to general public). Smalltalk is used to develop new software, most prominent cases being: Financial sector, Aviation, U.S. Army, some Fortune 500 companies. Ok, this means it's dead ... &gt; I'll put Smalltalk in the same bucket as TCL Oh, Tcl is not maintained, does not have commercial support available, is not actively used in Networking solutions, in chip design and fabrication pipelines ... Yeah, dead. Of course, neither of those languages has bajillion of dumb-ass proponents screaming "It's easy in ___", so if this is your measure of alive, yes, they are dead.
Does anyone know if the 3.6 RCs will be available in Anaconda? I'm about to start teaching some of my coworkers Python and I'd love to start them with f-strings right away.
Python is often used for science, especially numpy, scipy and pandas, although we use it for developing web apps. There's this great framework called Pyramid, it's very unopinionated, so it can be used for almost any usecase. It's relatively unknown, especially within the "beginner" community.
Thanks for your feedback! &gt; Maybe you worked this out, but the issue that person was having is that they were expecting that lru_cache would forget about past arguments once there were no longer any references to them anywhere else. You have a good understanding of the bug report, but it wasn't my case at the time. I was on the wrong track, as explained further in the post and in the associated footnote (9): "At that time, I must say that I didn't have sufficient knowledge of the inner workings of the lru_cache decorator to really grasp the subtleties of the bug report." &gt; As of python 3.4 and PEP 442 you shouldn't need to worry about circular references in pure python code (I think?). Thanks for pointing this out. I indeed found that the GC can eliminate reference cycles. This hypothesis was a wild guess, and it turned out to be wrong. In fact, I made quite a lot of hypotheses that turned out to be wrong in the post :) This is what happens when have no prior experience with something (Python memory management, Python memory issues and leaks, etc.). Maybe the tone of the post gives the impression that I knew exactly what to do and when. But it wasn't the case. I was merely exploring possibilities and solutions, and learning everything about Python's internals in the process. &gt; That looks awkward, having to take snapshots and guess where memory leaks are based on changes in memory usage. I usually find that valgrind can pretty reliably pinpoint the causes of memory leaks. Personally, I don't find it awkward at all. In fact, I wish that there was a tool like umdh in Linux. But this is a personal preference :) I used umdh quite a few times in the past to track down memory leaks in .NET and C++ programs, and I almost always found the cause of the leaks. As for Valgrind, I thought about using it (after reading briefly about it), but it seems that we can't use it on Windows. Also, you need to compile Python in debug, use a special suppression file for Python, and it slows down your program considerably. Not quite practical, especially for a long-running program like a web crawler. But since I also develop things on Linux, yes, I'll eventually need to use Valgrind. This would surely make a good topic for a future blog post.
Yes. 1€ each.
You do know that Tcl and Tk is actively developed right? The stuff they have added to Tcl alone in the last couple of years is cool. So "near-dead" isn't even close to accurate. Some Linux distros separate out the Tk stuff out as an extra package. Windows usually has it in.
Very random question, but if you were to choose a VPN to set up database access which would you choose? It's for my company, so connection quality is the primary concern. I've thought of just setting it up in AWS, but I'm not sure what the best option is.
[Using `string.Formatter` turns out to be pretty simple.](https://github.com/evanunderscore/f_strings/blob/master/f_strings.py) I tried writing an import hook to allow the `f''` syntax but eventually gave up trying to cover all the edge cases.
I ain't giving you no tree fiddy you god damn Lochness Monster
Not very. Marketing, people skills, luck, and a bit of recklessness, are more important factors.
What's too long for you? It cannot be any shorter. *Edit:* OK, next time I'll remove the word "see"...
How can I start selling software? I want to make myself a business instead of working for a business (if that makes sense). 
Be sure to train it with `string.magic()` first otherwise the results may be unpredictable.
hallelujah 
Never heard of it. some people are hesitant clicking links for whatever reason. a short summary of what this is in your selfpost would be helpful.
I spent 2 hours trying to get wxPhoenix working on Ubuntu 16.04 with Python 3.5.1. Never got it to install, even following the various instructions on their github and installing all dependencies.
They have problems that need to be solved, and an application can be part of the solution but there is more to it then coding up some program. You need to understand the client(base) and their problems, provide services and information, adapt to use-case, provide assurances/confidence etc. Most clients would not care about the technology used, they need something that saves them more time/money/risk/liability etc then it costs.
Well not sure about what he means, but it says to me: Products you create to solve problems or issues someone is having will sell, not random programs created.
Ahhh, OK, I see.
Still working on a project to take a bunch of geospatial information (road centerlines, address points, a bunch of other data) and feed it to a database for some government applications. I'm feeling a lot of pain because I took about 100 lines of code from a massive address database script (let's call it Project A) I wrote about 6-8 months ago, and I just realized I could have done it MUCH simpler, with about 20 lines of code and some data hygiene, back then. Our primary address points have one field for the address number, a field for the street name, and a field for the full address. "101 A", "N MAIN ST", and "101 N MAIN ST" respectively. The address database needed addresses broken up more finely- "101", "A", "N", "MAIN", "ST". My 100-line solution hinged on a lot of .split() and .rsplit() to pull the street name and address apart and identify type suffixes and directionals. This had always been a little glitchy, especially getting direction prefix and suffix mixed up in really short street names, but it was such an improvement over the old address database that I didn't hear a lot of complaints. I'm now working on the related successor project, Project B, and it requires the same address breakdown. I ripped the code from Project A, changed a few variables, and then realized how incredibly buggy it is, and how many of our less-called streets had errors in parsing. And every fix I attempted just made more problems. Which brings me to the pain. We have a table called MasterStreets that's used in validating when we create new addresses. To create a new address on a new street, the street has to have an entry in MasterStreets. It has the same breakdown fields required by both Project A and Project B, but it was always such an unholy mess that I never bothered with it. Duplicate street names, weird breakdowns that left two type-suffixes, et cetera. But yesterday, I sat down and cleaned it out in about 3 hours. There's a few streets I don't know how to break down, but I should have those done by next week. This cleared the way for me to just use the MasterStreets table to parse street names. I reduced 100 lines of code to about 20 by scanning MasterStreets to a dictionary, with the street name as a key and the breakdown fields as the value. This lets me closely define how ambiguous streets - streets like "ST MICHAEL DR," for example, or "N AVE" get parsed, by defining them in MasterStreets. So I am really kicking myself for not realizing this and doing the necessary work sooner. Augh.
You can use pyenv, it provide 3.6.0b4 and 3.6-dev right now.
it throws an error when i do that saying the resolution set is too high :(
Thanks
Hell yeah, variable annotations! Been wanting these ever since function annotations were implemented. Looks like asyncio is finally stable too. And a new cryptography module! Looks like a great update. 
http://stackoverflow.com/questions/7097163/pygame-dual-monitors-and-fullscreen This is the best I could find, good luck!
Hopefully I won't have to deal with any build issues with numpy, SQL alchemy, etc.
I would understand if you posted this about wanting to find a python job immediately after highschool. But highschool and college? --that's like 5+ years. Just work on stuff you like working on now. Above all Python is a tool, not a job. You can use tools for many jobs.
Are you allowed to use [Turtle](https://docs.python.org/2/library/turtle.html)? It's probably the simplest out there. Edit: The link above is for python 2. [Python 3 Turtle can be found here](https://docs.python.org/3.0/library/turtle.html) 
Really needed this, thanks!
Portsmouth? Do you have to use a specific graphics module? And this is probably better off in /r/learnpython tbh.
What's new, in video form Brett Cannon Pycon Canada 2016 https://www.youtube.com/watch?v=hk85RUtQsBI
Look into [python-docx](http://python-docx.readthedocs.io/en/latest/index.html), it might do what you want.
I stopped reading after the introduction as there were so many things I dislike and even some I consider just as false. * Java is no more formal than any other programming language. It offers static typing and an explicit access policy for class components. That has nothing to do with formality. So the term is just wrong. * Java is no better choice as a language per se for big teams, as the discipline and bondage aspects do not garantee any more maintainability! You need qualified devs, good development processes and methodologies to keep a code base clean. So the conclusion that language paradigms are superior to others is just wrong! The main aspect why Java might be better for large industry teams are rather, that there are more devs available, there are so many elaborated frameworks and *tools* for almost everything. Of course Python has also lots of stuff, the JVM ecosystem is by far the most reliable one. (One can of course get to it via Jython!) * When you have learnt Java you will still have a hard time to learn C++. They differ more than you can assume by just looking at the *paradigms* they have in common, like static typing, strong typed, class based polymorphism and so on. **But** one of the main difference will drive every java developer crazy at first and every other developer too (probably forever 😈): You have carefully to think about the interrelated aspects of object ownage, parameter passing and polymorphism. Very tough and some would consider this over complex 😈 On top of that you have the difference concerning generic programming including the Turing complete metaprogramming (wtf!). So these were the most fundamental concerns I have with this book. As I believe that the overall quality stays at the same level, I am afraid that there will be much more things one should not learn.
Ah yes, the daily "switch to Python 3" post. If people are so adamant about everyone switching to Python 3, why don't they form a group of volunteers to upgrade companies' existing code? :-P
as /r/K900_ pointed out, the problem is that I am using IDLE for my experiments, and IDLE just doesn't support emoji.
TooLazy;Didn'tRequest
Does it even matter if companies use Python 2 or Python 3? Seems like that wouldn't affect the community so much as these are websites/products that others can't build on (like a library). Really it's common open-source dependencies that aren't up to date (e.g. wxPython which was mentioned in this thread) that are holding things up. But as others have pointed out, it doesn't make sense to blame them because this effort is undertaken by a few unpaid volunteers in most cases and we should be grateful for any time they have to spare to this. It'd be great if there was funding to have a couple of people whose full time job was just to identify critical dependencies and get them updated.
Well played!
Yeah, I jumped on Day 7 right when it was posted and still didn't make the top 100 for either part, though I did come close for part 2 of day 6!
Interesting exercise, buy why not just use a tuple? 
I had lots of problems and errors, and it was hard to go through this: https://www.amazon.co.uk/Essentials-Programming-Languages-Daniel-Friedman/dp/0262062798/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1481139628&amp;sr=1-1&amp;keywords=essential+of+programming+languages , not having proper cons list; and of course insert(0) of python lists, tuples (which are in fact augmented arrays) is O(n) - which will be to slow for bigger data sets.
It looks like you included...nothing. No code, no examples of output, etc. 
Where can I find previous Advent of Code challenges? I wanted to try last year's and see if I've improved
To protect what little respect I have in the programming world, I had copied the code block verbatim from the source in Section 4.2 Source: https://docs.python.org/2.7/tutorial/controlflow.html
`import math as maths # localisation`
At my work, our codebase relies on data files from the Protein Data Bank. You can probably imagine the awful namespace conflict that it creates.
I think you can even do: `print(f"THIS IS GOING TO BE THE BEST{"!" * 9999}1")`
&gt; Where can I find previous Advent of Code challenges? http://adventofcode.com/2015 
In the DevOps space - so a tonne of work against AWS (via boto3), but anything CLI tool wise that I want/need cross platform I'll typically turn to Python. Most/any of my prior web apps were all PHP based, and I doubt I'll ever move from that, but if I was restarting today and knew what I know - I would probably kick off with something in the Py space like Django.
&gt; struct Order &gt; { &gt; std::string symbol; // 1 1) Why? What does std::string buy you here that you do not get from a fixed sized array? What is the longest a symbol will ever be? Each std:string takes at a minimum 1 allocation from the heap. If std:string is not on the stack it takes 2 allocations. Anything that runs for a long time will eventually thrash the heap into a bunch of small pieces causing it to grow in size. Keep this in mind if you want to write more reliable software. 
You can learn the 20% you need to get 80% of your work done fairly quickly. The remaining 80% is a slow grind, learned iteratively as you improve over time. 
Unable to interpret question: Multiple syntax errors detected. Giving up.
Absolutely nothing other than being easier since this is just a simple proof of concept. Regardless of the fact that this is just an example app, with C++11, `std::string` now supports SSO, which, in gcc's implementation, and on a 64 bit machine, allows up to 22 characters to be stored w/o a heap allocation. Most trading symbols are less than 22 characters, so in fact, a `std::string` here will, for almost all symbols, not result in a heap allocation. In the event there is a symbol longer than 22 characters (perhaps some combo instrument?), the use of `std::string` won't suffer from fixed size array overflow. I'm not sure what you mean about *if `std::string` is not on the stack it takes 2 allocations*? For a single assignment of a string, there will only ever be, at most, 1 heap allocation. If the struct in which the string is stored is heap allocated, then that's another heap allocation, but that's got nothing to do with `std::string`, that's got to do with the lifetime of the containing struct.
These challenges are pretty fun. :) I almost made it to the first 100 on one. Which got me excited as beginner, but some of those guys are crazy fast!
I do a similar thing using git to pull code onto each of the systems from the same remote repository. As well as a reliable sync method it provides backups and documentation of changes.
literally no reason. To be honest i like expanding my skill so after i finish the beautiful soup one, i might as well check out selenium and write one for it. 
https://github.com/SeleniumHQ/docker-selenium It basically automates how ever many browsers you want running.
The most promising (and also the most boring) way is to find customers who need custom software, and bill them for building and maintaining it. There's no glory there, the work is relatively bland (install Django, write templates, add some CSS, write a few controllers, done), but the market is huge and it pays the bills. The other option is to come up with a product or service that people would be willing to pay for, pitch it to a bunch of investors, and see if anyone is willing to fund you. Bootstrapping is also an option, but then you'll have to find a way to combine a job that pays the bills for the time being with working full-time on your business idea.
Yay! Yet another version-specific way to do string formatting! That's just what Python needs! 
If this sounds useful, please +1 the idea in the github issue! Sound like there is some ambivalence over it's utility. 
A few days late, no? ;)
Well, better late than never, and nothing wrong with spreading the word.
really I have trouble with finding stuff about the indirect/direct messaging passing in Python (using producer consumer). I didn't find anything in /r/learnpython about that
Thanks for this. It so hard to distinguish between "yeah cool" and a genuine you made my life easier. But I mean the latter. Thanks!
Im still fairly new to the language, so i'm working on a basic version of snake that you can play in the console. I've made a fair bit of progress so far, although it isnt yet recognisable as snake, it is still technically playable. you can see the code [here.](http://pastebin.com/W6TkVJJE) (i think it only works on windows right now though, due to some of the functions it uses)
I'm confused on the benefits that one would get out of collaborating??
More of a backtester for a particular strategy than a real-time trading algorithm...
You can get an IDE (integrated development environment). It's just an app with a code editor and a place to compile your code. You can use the standard IDE for Python called IDLE, which you can download from the Python website. Once you get a bit more advanced, you can learn a program called "git" which will allow you to develop software in a more disciplined way from the command line.
Depends on what you want to do. You can create a stand-alone GUI application by using PySide, or a web application by using Django or Flask. For example, most of my programs are limited to console, because they are fastest and cheapest to develop, and I am very comfortable with using Bash (a Linux console). Understandably, a Windows console is something no one wants to deal with.
This is awesome. I'm going to look at the source and see how easy it is to extend 
This is pretty fun, I gotta say!
Thanks for sharing! Here's a quick little script to kind of play songs I made using it. import winsound notes = {'C':0, 'D':2, 'E':4, 'F':5, 'G':7, 'A':9, 'B':11} def play_note(note, duration=500): winsound.Beep(int(256*(2**(notes[note]/12))), duration) song = "E E F G G F E D C C D E E D D" for note in song.split(): play_note(note) 
just saw this today and have caught up with day 1-5 and just did day 8. It's super fun and just the right difficulty for me to do some ~15-25 min of coding around midnight :) (I am in EST timezone)
Haha, already did that about two decades ago with QBasic... If you want your computer to sound like a 50s sci fi computer just let it play beeps with random frequency and duration. 
Or any skill really :P 
I'd be curious to see how this perform with bitcoin, and potentially set it up to work as such! Neat project, awesome! 
What do you mean by logging?
RemindMe! Tomorrow
 What i can remember :- * [Sentdex Channel](https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQhttps://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ) * [George Boole Channel](https://www.youtube.com/user/hobokengar) * [CodeSchool: Try Python](https://www.codeschool.com/courses/try-python) * [CodeCademy: Python Track](https://www.codecademy.com/learn/python) I cannot remember the rest but i will update this comment when i do :) Have fun 
Do you have some kind of tutorial at hand on how to get these things right? 
yup that's a good one i forgot about it [The List](https://www.reddit.com/r/learnpython/wiki/index)
Haven't written a non internal company one myself yet, but this one looks to be a good overview https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/
&gt; PyImport_AppendInittab("StrategyFramework", &amp;initStrategyFramework); What is initStrategyFramework? I can't find place where it defined.
The macro defines it, I guess.
Thanks! 
Hey thanks for this, I've been trying to up my python skills by building more tools (pen tester) definitely going to check out a few of these.
It's handy if you want to insert some sort of notification functionality quickly. E.g. a script has finished running.
_Why_ would you want to share an installation (executable python binaries) between machines? The python binaries don't change frequently, so... _what are you expecting to be synced between them after the first run_? Once that's clear, it's likely there's a much better answer. For example, it is common to have python installed in a virtualenv for each project on a given machine. And for that project's git repository to carry a `requirements.txt` file defining the packages that aught to be installed alongside the project's source. And some folks recreate the environments every once in a while (or, if using `tox`, constantly).
You should ask.
Don't forget lxml! 
Hey, as someone currently doing an assignment on K-means and DBSCAN, thank you for this. It's simple and elegant. How would you choose K if you couldn't easily visualize the clusters?
Treat it like supervised learning and have a test set. Increment K and evaluate the accuracy of the classification on the test set. The error rate will decrease quickly with respect to K at first, but will then level off sharply. Fix your K at the value where the error rate levels off. 
Currently I'm trying to find out the mood of a song. I got metrics like *valence*, *key*, *energy* etc which I got from the Spotify API which I am trying to map to mood. If anybody is interested in this topic, just drop a line. I just read an interesting paper on this topic: *Determination of Nonprototypical Valence and Arousal in Popular Music: Features and Performances*.
Python generates byte code, ergo it's close to machine code. The real reason being since Java is statically typed and offers a stricter data model than Python, it can do more optimizations at compile and run time. 
I do know that all! ;-) Also the default JVM has a JIT compiler on board - CPython does not. (That's why PyPy is a better challanger compared to the JVM)
Okay, that was lost on me. The term would be "paper trader", if it is simulating trades with live data. Though it is worth noting that Yahoo isn't live data, it is actually delayed by 15-20 minutes. Granted, still cool!
This looks nice. I have become fond of pathlib.Path of late. Does it pay nice with Path objects? 
I'm considering trying Bitcoin, I wonder how much it conforms to the mean reversion strategy. Bitcoin is very volatile depending on current events, and it doesn't seem to always revert to the mean. Thanks!
It's paper trading, so it's not really actually making trades, just simulating them.
It doesn't support Path objects explicitly, because FS objects all use the same format for paths regardless of the filesystem or platform. The messy details are hidden from you (see https://pyfilesystem2.readthedocs.io/en/latest/concepts.html#paths). An exception may be for the OSFS constructor which takes a platform dependant path. I'll see if it makes sense using it there. THanks for the suggestion.
sounds like this: https://github.com/Homebrew/homebrew-science/issues/1890
I figured you did, just providing an explanation (and a joke) for those who didn't. 
You didnt read the post, virtualenv is mentioned. try again :)
Me too! check out his blog. I'm doing the tutorial as well https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world
yes, it runs multiple threads, just open a connection
It looks like you're missing a comma before "coupons". Assuming everything is formatted correctly, you should be able to parse it using pythons built in json module import json new_stuff = json.loads(old_stuff) assuming its a string (otherwise use json.load instead). This will return a dictionary, where those subtables will be other dictionaries which you can then call by app_table = new_stuff["applicability"] coup_table = new_stuff["coupons"] Just take note that 'coup_table', in this case, will be a list of two more json structures. But from there you can parse as required. As far as meaningful output, that's up in the air. Someone mentioned SQLAlchemy, which will work if you wanted to make a database. Otherwise, I'd use something like pandas which can take each json object and put it into a row of a table which you can then use or save (as csv or pickle). 
I guess OP wants not to check for truthiness, but if it is actually the value *True*. For that it is recommended you use *is*, like you do with *None*. OP probably should mention the gotcha he ran into. If its just that he also want numpy.bool_ to work too, I think best would be to check both for identity with *is*
GCS is Google Cloud Storage, Google's equivalent to S3. I ask about extended attributes less for xattr and more for S3 metadata. Thanks for the reply, I expect to take a look at this in the near future.
Took a look at pycharm, it does seem like a great fit for someone like me. Thanks!
For the lazies like me, https://docs.python.org/3.6/whatsnew/changelog.html 
lol
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Might as well get this course https://www.udemy.com/become-a-professional-python-programmer/learn/v4/ instead if you have to pay for it. This one has this one included and 4 others
Works like a charm. Played it at home, my wife immediately came downstairs to ask if she should be taking shelter. =)
The `is` operator compares the identity of two objects. I don't know if I would describe it as a pointer check, but I think the argument could be made for describing it that way.
(Disclosure: I'm the PyCharm developer advocate.) PyCharm Professional is indeed subscription. But PyCharm Community Edition and PyCharm Edu are both free and open source.
Here's a series of [8 videos](https://www.youtube.com/playlist?list=PLQ176FUIyIUZ1mwB-uImQE-gmkwzjNLjP) on getting started with PyCharm. A couple of the features are in Professional, but mostly it's Community. Give me a nudge if you need anything.
The title indicates it is aimed at Python 3. I'm glad he wrote an article focusing on what can be done in Python 3 without installing an extra package. (And as a note, I mostly don't use virtualenv.)
Copying from [the docs](https://docs.python.org/3/howto/logging-cookbook.html): &gt; Multiple calls to `logging.getLogger('someLogger')` return a reference to the same logger object. This is true not only within the same module, but also across modules as long as it is in the same Python interpreter process. Also works for grabbing a sub logger of that root logger, aka `logging.getLogger('someLogger.childLogger')`. (Which will use it's parents handlers as well as can have it's own.) I have seen a lot of people new to the language create a 'log' file that sets up the logger there, then they reference it everywhere. Which really screws with trying to debug where something happened instead of using the default dotted hierarchical system which will show you the file logging per log line. 
Sorry! On mobile, too much coffee, up to late :) I know, no excuse per se, I appreciate the polite message and redirection to the correct subreddit. Hope you and the other mods have a great holiday season!
That's really similar. It's basically the same situation but with homebrew instead of conda. When I installed cairo via conda through forge, the binaries weren't compatible and my R completely broke. The error messages mention Cairo so I need to figure out a safe way to install it. The scary thing about this package is if it's installed incorrectly, I have to wipe R and it's frameworks from my computer to reinstall.
when is it released? 
Did /u/dagmx also post this on Codequs? I know he originally created the course on [Udemy](https://www.reddit.com/r/vfx/comments/5dwhhc/learn_python_for_maya/?st=IWGM5KPN&amp;sh=6e33a019), curious if he was branching out or someone ripped it and uploaded. 
When you train a PCA model with exactly three different faces (hopefully with more than one training image per face) you are doing exactly this. Take the top components (say 95% of the variance) and add them up. Then project each of your trained faces to to the same subspace (of the top eigenvectors / components associated with 95% of the variance). For any new face, do the same subspace projection and compute the distances from the above vectors and list them by descending order of their distance to this new face. Then labels you get will provide you with the similarity. You can visualize all the faces as linear combinations of these components and also your new face as a linear combination. Instead of only the face image (as a vector), you can use the facial points in the image or other feature vectors and do feature engineering which you **feel** will capture facial similarity. There are lots of such features out there. Seen one of Zhang's (HongKong Univ) students try some features like this to compare facial beauty (:-). Will this system capture facial resemblance? May be, but mostly may be not. You have to experiment with a lot of feature engineering to reach a level of non triviality. You can try millions of face images of three known personalities with a CNN and then publish a PR memo like Google. They discovered cat. You can discover yourself !!! or not. May be you can discover a business model where people will use this solution to find out they are just one component away from Julia Roberts. Seriously. I have had several project proposals asking for stuff crazier than this. If you are a bored research student with a lot of free computing power, then you should try this approach for what it is worth. PS: I am not joking about the CNN. At least one person has trained variational autoencoders on face images - See this page http://gabgoh.github.io/ThoughtVectors/ and has the type of result you are looking for + a blog. Again, for what that is worth. 
I'd love to see this as well... wish I had spare cycles to write one :(
the problem I ran into was that it was True but not the same True so == True would have worked. id(True) wasn't the same as id(my_boolean) since it was a different type.
Hi /u/ostralyan : There are a lot of learning and knowledge sharing benefits. But if you are talking about instantaneous benefits like cash, there is None. However, as this is not charity, any proceeds made by the project, including recognition or money, is shared by the collaborators. Sorry for the late response
if you are testing a single variable, yes. It's the comparisons with more than one variable where you should be careful and pay attention to potentially mismatched types.
I recommend using `vex` (or [pew](https://pypi.python.org/pypi/pew/), though I prefer the vex cli): https://pypi.python.org/pypi/vex Edit: Both `vex` and `pew` are python version agnostic... they work with 3 and 2. My only semi-gripe is that vex/pew do not add an environment variable to identify that you're using vex/pew. Bonus points (prompt integration)... BASH (can add to ~/.bashrc): # Setup prompt colors reset_color="\[\e[m\]" declare -A fg magenta="\[\e[35m\]" yellow="\[\e[33m\]" function virtualenv_prompt() { if [ -n "$VIRTUAL_ENV" ]; then echo "(${magenta}vex:${reset_color}${yellow}${VIRTUAL_ENV##*/}$reset_color) " fi } export PS1="$(virtualenv_prompt)${PS1}" # END ANSIBLE MANAGED BLOCK ZSH (can add to ~/.zshrc): # Modifying prompt for vex and virtualenv setopt prompt_subst function virtualenv_prompt() { if [ -n "$VIRTUAL_ENV" ]; then echo "(%{$fg[magenta]%}vex:%{$reset_color%}%{$fg[yellow]%}${VIRTUAL_ENV##*/}%{$reset_color%}) " fi } export PROMPT="$(virtualenv_prompt)${PROMPT}" # Add shell completion for vex eval "$(vex --shell-config zsh)" 
Hmmm, damn, we do that at work. Gonna put it in the things to improve list, thanks.
The real equivalent is: https://docs.python.org/3/whatsnew/3.6.html The full listing of issues: https://hg.python.org/cpython/file/3.6/Misc/NEWS
hmm, I just got freed up recently with some more time.. maybe this is my opportunity to make an open source contribution :)
Freude !
oh, so what is the purpose, testing strategies without backtesting?
1_000_000 is 1000000
Here's the schedule: https://www.python.org/dev/peps/pep-0494/ Here's the pre-release download page: https://www.python.org/download/pre-releases/
I'm adding it on CheckiO now :)
If it's what I'm thinking of, it's just syntactic sugar. a = 12_332_111_487 is easier to read than a = 12332111487
I love the new formatting system, but the problem is that now we have three nearly interchangeable systems. Anyone who deals with third party code will be forced to know and use all three within the same project. This kind of thing has permeated all of python, there are just so many features with overlapping use cases. In some ways its nice, because you can always choose the best tool for the job; but in practice you are forced to know and use everything because each library has its own conventions. *There should be one -- and preferably only one -- obvious way to do it.*
This is the most sane comment in this thread.
So you need a server too?
you are one lazy ****
if thats actually true, you should definitely make a bug report about it...
&gt; Separate UI and API portions. Assuming you don't go full javascript/SPA on the UI, there are good arguments to both sides. Why are these even on the same repo? Why couple them together...?
He obviously doesn't write tests often. `pytest` is the best!
`import math`? Oh yeah? Which one? Trig? ARITHMETIC? THERE'S MORE THAN ONE.
If you substitute "Mix it up" for "Learn a new module" they are generic practices for literally anything you want to get good at, not just programming.
The one obvious way to do standard string formatting is now f-strings (love how my phone wants to correct that to G-string). The use case for `str.format` is when you have some base text that you're going to use multiple times with different values. `%` formatting should never be used and should have been gutted in python 3.0. 
I'm really looking forward to Djangocon Europe, it will be my first con ever actually, and Florence is a fantastic city. 
`pip install &lt;wheel file&gt;`. If that doesn't work do `pip install wheel` and try the first command again.
Thanks for answer, where do I write it ? In idle ? Edit: and where do I put wheel files ?
Oh right... I'm unlikely to use that. Thanks for explaining though
Thanks for explaining
The only use case I've found for `%` formatting is the logging module. logger.debug('hi %s', foo) vs logger.debug('hi {}'.format(foo))
why use that when `pyvenv` is bundled with python3?
Ah, I missed that you're on windows, and I don't have experience with python on windows. Unfortunately I don't have experience with python on windows. You would execute it in shell where pip command is available. Perhaps in cmd.exe, but if idle has shell then you could try it there.
What's wrong with the second way?
Hey that's a cool idea! Thanks! Did you take a look at tje site at all? Any suggestions? This is the only place I've even posted it, as it was just for personal fun, but if it has even the slightest chance of being useful to someone I'd like for the experience to be smooth.
Thanks a ton, I'll be sure to check them out
&gt; I doubt it's particularly fast @OP you heard, we demand benchmarks! Anyway, nice job, i always rejoice at clever usage of python syntax.
Yes the [json2html](https://pypi.python.org/pypi/json2html/) module. Unless you meant some other kind of table.
Install Python (I'm assuming 2.7.X looking at that code) Open CMD and run: `pip install imdbpy` And *these* are the instructions: &gt; To create the tables and to populate the database, you must run &gt; the imdbpy2sql.py script: &gt; # imdbpy2sql.py -d /dir/with/plainTextDataFiles/ -u 'URI' &gt; &gt; Where the 'URI' argument is a string representing the connection &gt; to your database, with the schema: &gt; scheme://[user[:password]@]host[:port]/database[?parameters] &gt; &gt; Where 'scheme' is one in "sqlite", "mysql", "postgres", "firebird", &gt; "interbase", "maxdb", "sapdb", "mssql", "sybase", "ibm_db_sa". You would run the script in CMD with: `python COMMAND HERE` Of course I am assuming windows. If not then pull up a terminal and do the same. Now you may need to give the path to the imdbpy2sql.py script (Unless you CD to the directory it is in), when pip installs imdbpy it should get put into the bin directory of the package somewhere in site-packages.
I would uninstall python then reinstall it and make sure to check the option "Add python to PATH" when installing. Then log out and back in to be sure the PATH is updated.
&gt; I think there is an option somewhere in the logging module to enabled {} style substitution though. I thought there was too, but it looks like that only applies to the formatter - there is no way to do the equivalent of the above with `{}` style substitution. See https://docs.python.org/3/howto/logging-cookbook.html#formatting-styles.
In my tests, this seems to be the case. For instance x["key"] = u"string" if x["key"] is u"string": print True This did not print True. This is (presumably) because even though the strings are identical, they arent the same thing (think like identical twins). "Bob is Joe" would be false (from an English standpoint). Update: I tested this before I posted it, as I realized the last time I observed this it was with unicode strings in py2.7. Regular strings in 2.7 would print True. Strings in py3 (which are unicode) print True. This goes against what Ive always felt == and "is" should mean. 
Last line is missing a quote ?
Does that cover writing tests?
In general it sounds like a terrible idea, but there could be the root cause, warming of the Union speech. ~/u/I_dont_work_for_isis ----------------------------------------------------------------------------------------- [*^^[Feedback]*](https://www.reddit.com/message/compose/?to=Simulate_Me_Bot) [*^^[Get ^^a ^^bot]*](https://www.reddit.com/message/compose/?to=iNeverQuiteWas) [*^^[Info]*](https://www.reddit.com/r/FreeKarma4You/comments/5b0r6r/i_am_a_bot_that_will_simulate_you/)
Except they aren't identical twins, they are the same person. Python interns strings and short circuits them to be the same object (implementation detail though, some wacky version/patch may have that broken). What version of Python are you running where that does not evaluate to True? I just tried it under 2.7.10 and 3.5.2 and it runs and evaluates just fine. Wrote up sample cases with unicode, normal string, unicode vs normal, and the two bool types OP referenced. They all behave exactly as expected: Py2 unicode to unicode and str to str evaluate to True, but uni to str evaluates False as they are different object types in Py2. Py3 they are all the same object and all come up True. Meanwhile the bool types fail in both versions as they are different objects. import numpy x = {'uni': u'string', 'str': 'string'} if x['uni'] is u'string': print("Unicode success id1 {} id2 {}".format(id(x['uni']), id(u'string'))) if x['str'] is 'string': print("String success id1 {} id2 {}".format(id(x['str']), id('string'))) if u'string' is 'string': print("UniStr success id1 {} id2 {}".format(id(u'string'), id('string'))) else: print("UniStr fail") print("Python True id: {}".format(id(True))) print("Numpy True id: {}".format(id(numpy.bool_(True)))) Py2 Output: &gt;C:\Python27\python.exe C:/tmp/istester.py Unicode success id1 41406264 id2 41406264 String success id1 40556544 id2 40556544 UniStr fail Python True id: 505513920 Numpy True id: 269431632 Py3 Output: &gt;C:\python35\python.exe C:/tmp/istester.py &gt;Unicode success id1 2069898553472 id2 2069898553472 String success id1 2069898553472 id2 2069898553472 UniStr success id1 2069898553472 id2 2069898553472 Python True id: 1946230960 Numpy True id: 140707247964872 
Thanks!
Sorry, I suppose concept was not the right word. Generators and recursion seem to accomplish similar jobs; iterate over a list one at a time in a memory effecient manner. Because python already provides the effeciency (to some degree, maybe its not as good) through generators, it doesnt need tail recursion. Im sure there is a lot to discuss on the underlying pros/cons of tail recursion versus a generator, but that has been my overarching understanding.
Hmm, I'm not entirely sure what to measure benchmarks on. Defining type signatures? Composition? Or what?
[Records](https://github.com/kennethreitz/records) is not really on ORM, but it does provide a simple interface to many types of databases, including SQLite.
I work for several enterprise businesses. If you set up a IPSec Lan-to-Lan VPN tunnel with AWS it does work fine for Databases. AWS requires the traffic to be initiated from the non-AWS side. Just make sure you use IPSLA or some kind of monitoring tool to keep some ping's going over the tunnel to keep it up all the time.
I think this is what OP and I are looking for! Thanks!
Simple &gt;&gt;&gt; from triangle.heron import area_one, area_two &gt;&gt;&gt; area_one() &gt;&gt;&gt; area_two()
There is pickle; which allows you to literally serialize python objects into binary data. Prob not what you were looking for
A [keylogger for Mac](http://ikeymonitor.com)
Clarification: **I did not create this project.** I am only sharing it.
You mean the `L[]` thing? Without looking at the code, I would assume that is done by defining some class with a `__getattr__` method (ie. overloading the []) and then L is made to be an instance of that class. So `L[1,2,3]` would turn into `L.__getattr__((1,2,3))`, and then that method would return an instance of the HaskList object (or whatever it's called). Edit: Yep, this appears to be the case. Except it's `__getitem__`, my bad. I always get those confused. Anyway, see the code at the end of the file here: https://github.com/billpmurphy/hask/blob/master/hask/lang/lazylist.py
Hey Danny, I can help you out with the frontend part. You can mail me at info@ignitesol.com with your project details so that I can explain how will we work it out together. Visit my website for more info at www.ignitesol.com Thanks. 
you obviously chose something for the points. we've all been there, but still come on.... find other ways to a solution than just simply posting the question and harvesting an answer.
Well, to be honest, I'm taking a shortcut using the *Audio Features for a Track*-API of Spotify ([Link](https://developer.spotify.com/web-api/console/get-audio-features-track/)). So they got to deal with this problem and I'm guessing they take the averages of the metrics. The authors of the [paper](http://asmp.eurasipjournals.springeropen.com/articles/10.1155/2010/735854) are doing this as well. I didn't really start with the programming part as I'm still in the *braining* part. I guess my first step would be to start with a list of moods (just 2-4 for the beginning) and start tagging by hand. Maybe I will find a pattern I can build on. The other idea would be to also start tagging by hand and then traing a classifier on the manually created data. But I guess this would be time-intensive. For example, the metrics of the song "Corinne" by Metronomy ([Link](https://www.youtube.com/watch?v=-jix8bSotZ4)) are: * time_signature: 4 * speechiness: 0,0457 * instrumentalness: 0,898 * energy: 0,532 * valence: 0,837 * danceability: 0,906 * key: D-sharp * tempo: 139,986 * mode: 0 * acousticness: 0,235 [Related](https://www.reddit.com/r/learnpython/comments/5h6qgi/mapping_metrics_of_a_song_to_a_mood/)
THANKS This is what I needed xD I'm not familiar with cmd and so on... I will just have one more request maybe you can help me :p I forgot that sometime python can be capricious with calculations (you know 2+0.1=2.1000001). Is there a way to fix this with a package or smtg else ? I'd like to know if I will be obliged to spam round and int again xd
a Reddit clone wrote in python using Django: https://github.com/Nikola-K/django_reddit 
Since Python 3.2, [you can configure logging for format-style or template-style parameters](https://docs.python.org/3/howto/logging-cookbook.html#formatting-styles).
&gt;&gt; I think there is an option somewhere in the logging module to enabled {} style substitution though. &gt; Not really. Yes really, that literal option [was added to logging.Formatter in 3.2](https://docs.python.org/3/library/logging.html#logging.Formatter).
&amp;amp;amp; become a dev &amp;excl;
But aren't there best practices that only become important once a site scales to significant traffic? Surely reddits architecture has changed since inception? I guess I'm asking: if they built it initially, adapted it as it grew both in traffic and features, would that be wildly different then if they scrapped the entire codebase today and built it over from scratch? 
Ever thought about using Py2exe? Turning the script into a Windows executable makes it very easy to use for client on a Windows machine to use it. 
Since you asked. I'm touching up my subreddit bot. https://github.com/Theonefoster/asmr_bot/blob/master/asmr_bot.py
https://pypi.python.org/pypi/sqlitedict is an sqlite-wrapper with a dict-like interface.
Love the writing in the second to last paragraph. Very dramatic. Well done, author.
[removed]
&gt; % formatting should never be used and should have been gutted in python 3.0. Why shouldn't it be used? (I'm fairly inexperienced with Python).
Thank you! I have seen that, and I am using an updated version. I really appreciate the heads-up though!
I will agree that you need to write readable code (clear variable names, clean logic, etc..), however the notion you won't find documentation valuable is just wrong. Look at every standard library, or ones commonly used like Flask and Requests, you NEVER have to go into their code to see how to use stuff. You should be able to read their docs online, or run `help` (or hover over in IDE) to see their docstrings. Which at minimum should include description and what the parameters do. I also recommend an example for most functions, if not multiple for each. On top of that, there should be documentation about the library itself with general use cases, examples, requirements, installation guide, license, contributors, and API docs (if applicable). 
2to3 and six already let you write(mostly) universal Python code. Seems like 3 is finally getting some serious traction. Sorry your team is so regressive.
Hello! I am working Automate the Boring Stuff. Feels like a great book as I have quit on many books through 10 years of trying to learn programming in python and other languages. I went from the beginning of the book to chapter 7's Regular expressions in a week and half. Now working on regular expressions. I feel like I need some sort of project but I'm not sure about how to find one
We just added a rpm repo as well, instructions are here: https://www.yhat.com/products/rodeo/downloads?linux-download=true
```('other', 'Other (Enter a comma-seperated list)'),```
Yeah, like that. You should though edit your post. Your formatting's gone awry...
The worst seems to be over regarding Python 3, but I'm not ready to talk about Python 4 yet. I need time to heal.
&gt; Dataset? I hadn't heard of this, but am definitely adding it to my prototyping toolbox.
Probably shouldn't be dumping huge tables into the notebook output; it just gets cluttered and too hard to read. No one wants to scroll for two seconds between input cells.
Sure, but why should they live in the same codebase? Presumably, the frontend has completely different architecture/deployment from the backend in a SPA? Thanks for all the thorough replies!
Exceptional talk, albeit a bit long.
Working on my open world rpg game in pygame pushing for slight similarity to Kingdom Rush in mechanics and graphics but changing it up with a multiple (game mode) system of controlling your king in combat but also being able to customize and build. Fun shit, ya know. 
*whew* That was my biggest worry (the explanation). I'm often guilty of a good long ramble where I mess up the introductory gradient in a way which leaves me rehashing the end of an idea with no clear path of how the reader and I got there :P Generally I think some sites do limit on length to around 24ish characters, but for the important ones (email, paypal-ish things) you're usually free to run up to 64 or larger which is nice. I honestly have no idea where I'd even begin to make an API. I've made an API wrapper in the past, and I'm generally comfortable using APIs, but haven't even considered writing one. If you have any links you've found useful in the past they would be much appreciated. I'll start googling around too :)
Looks very good! I'll be giving it a try and say what through twitter :)
I've never made APIs that were exposed to the ~~great British public~~ the web. I've only made APIs that were used by the company's internal systems. But since we are talking python I'd suggest Django + [Django Rest Framework](http://www.django-rest-framework.org/) or [Flask](http://flask.pocoo.org/) + [Flask Restful](http://flask-restful-cn.readthedocs.io/en/0.3.5/)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Nice article Chris!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
So say I have a list called "user_list" and a class called User. I then populate user_list with User objects. A User object has a name and a couple other things. OR I populate user_list with, say, ["Bob", True, 10]. If I have hundreds of these things in a list, are you saying the class based solution would be faster if I were to search for the name of the thing I'm looking for? The iterative thing here is user_list. Both solutions are lists, just with the things I populate them with being different. I'm not convinced there would be a big difference between finding Bob in [ ["Sally", False, 25], ["Joe", False, 15], ["Bob", True, 10] ] versus the same thing if they were User objects instead. Obviously with more users or course. 
I am trying to get through finals before I can start on a couple of projects I've been interested in. First is a WebAssembly Sexpression interpreter in rpython, second, I am working with a friend on a chat service.
Thanks for sharing this lines, its pretty much the idea why I started learning python, a lot of people could make their works (and lives) easier, if they took a little time to learn. Keep it going.
i finished it month ago, keep up with it it's great, as you finish the idea for project will come trust me
When you `import logic`, `prog = gui.Program()` immediately executes, which is what causes the error.
Well, for one, if you create two different instances of `Program`, it'll be two completely different instances, not one shared one. It's a better idea to pass your `program` instance to `addToList` explicitly, if you want to keep your "logic" separate from the UI (though it's not separate even then because you're relying on the structure of your UI in the logic). Also, forgot to mention this: post questions in /r/learnpython next time.
I love Python 3 but these kind of posts are getting old. 1) We should not ignore version incompatibility and what we should be learning. 2) There are people who just can't use Python 3 (but want to!) because factors beyond their control. 3) There is a small group of people totally convinced that Python 2 is perfect. You are not going to change their minds anytime soon. EDIT: formatting
Just imagine "PyBabel", oh my god! Pretty sure there are folks who would love the idea.
This book / pdf is great. I interviewed the author on Talk Python To Me awhile back. Was really interesting to hear his thoughts. Here's the link if you're interested: https://talkpython.fm/episodes/show/77/20-python-libraries-you-aren-t-using-but-should
I agree, factors that can't be controlled are the main case, specially third party incompatibilities. Doesn't matter if some people love Python legacy or not (including myself), thing is the latest version of the language is Python 3 and we have to move on, if we don't then EOL happens or some other company will keep 2.7 live and separated which would be crazy and sad to be honest. I mean these are all contributing to "PyBabel" in many ways :D
If you can guarantee that the name you're searching for is in a specific location in the nested list the times will be identical, in terms of big O--for each element in the parent list you do a constant time access to a position (in your example index 0), giving you a linear time to search the whole list. This is identical to the case of a list of User objects--linear time to traverse the list with constant time to access the name field of each object. If you have to traverse each sub list it gets a bit trickier--if you have a list of length N with sublists of length s, so long as s is significantly smaller than N it will appear to be linear. If s approaches N, then it becomes quadratic, and the class vases (or dictionary based) method will be faster.
Good catch, thanks! I was going crazy trying to figure out why it's different. Actually which vertex I pick if they're equal shouldn't matter, so that should help me figure out what else is wrong. 
Is there ssh/sftp support? The idea is very nice, I will give it a try.
Is there any compelling reason to actually use Python3? This is the most difficult question I get asked and don't really have an answer. Unicode? Python 2 has it. Print as a function? meh. Type checking? Only if you use fancy IDEs. Multi-threading, in python? Hahahaha. Coroutines? what's that?
I really enjoyed it. Made me think a lot about how I teach people... But also I tend to get annoyed more often when I see bad teaching :D 
&gt; When you run the code you posted on a 10GiB input, you will page in the file completely into RAM. That's not correct. I'm only asking for 1MB at a time, which is all the syscall to read() will give. If there is room, the OS *may* put the file into its own caching system *but that applies to both mmap and normal read() access*. From the process's perspective, there is no significant difference between the two. Both use ~11 megs of RAM on a 10GiB file (the hashing function is executed at the end of each python file): ~ ➤ /bin/time -f "%M KB" python directio_mmap.py 10836 KB ~ ➤ /bin/time -f "%M KB" python foo.py 11168 KB In terms of OS file cache, the directio_mmap method *still* causes 10GiB of file cache to be used by the OS: ➤ free total used free shared buff/cache available Mem: 32698708 1580780 30200324 460728 917604 30265988 Swap: 0 0 0 ~ ➤ /bin/time -f "%M KB" python directio_mmap.py 11508 KB ~ ➤ free total used free shared buff/cache available Mem: 32698708 1574148 19693132 461736 11431428 30262008 Swap: 0 0 0 Edit: In addition, the directio_mmap method shown causes 3x more system calls / context switches (71K compares to 21K) and almost 100x more page faults (175K compared to 2K), which again cause a context switch so the OS can fix the memory mapping.
shouldn't happen as 4.0 is supposed to be nothing more than 3.9 + 0.1
Yes, `mmap` causes the IO to be cached, even if the file is opened with `O_DIRECT`. Thats how `mmap` works.
&gt; Unicode? Python 2 has it. and it's a fucking mess. I guess that if you live in an ascii bubble you just don't feel the pain brought by the retarded ambiguosity of py2. &gt; Print as a function? simplification of the language by removing an exception to the rule that has no business to exist, convenient keywords `sep=`, `end=`, `file=` &gt; Type checking? Only if you use fancy IDEs. static analysis tools do exist
&gt; simplification of the language by removing an exception to the rule that has no business to exist, convenient keywords `sep=`, `end=`, `file=` Also, the ability to use it with higher-order functions, and the ability to use `*args`. 
Yes, IO is hard ;) `O_DIRECT` has no effect on `mmap`ed reads. Your script *will* pollute the VM cache. http://stackoverflow.com/a/19934213
Just explored py2exe. It's hard to use! In my brief experience, I think I prefer pyinstaller. Ever use that one?
/r/learnpython can 
Thanks, will post there.
For our project, the reason is that we don't have to manage multiple repositories. If I'm needing to make a change in the backend that'll also need changes on the front end (adding a permission or a new field) I can just do it all at once. Another project at work does the multiple repositories thing and they bitch and complain about it quite a bit - though that could be me just hearing the complaints and not seeing the benefits. But as far as could goes, other than some bootstrapping Django does, the ui and apis are completely separate in our projects. 
Here are more examples of using direct I/O: - https://github.com/oVirt/vdsm/blob/master/lib/vdsm/storage/xlease.py#L630 - https://github.com/oVirt/ovirt-imageio/blob/master/common/ovirt_imageio_common/directio.py The last one is used for uploading/downloading ovirt images. 
http://docs.python-guide.org/en/latest/shipping/freezing/
There have been holy flame wars fought over which tools are *best* for programming and whatnot. What it really comes down to is productivity, preference, and keeping an open mind. It could be these simply are the tools and libraries he prefers. There are times when a company might institute a style guide or a set of libraries that are to be used across different projects for the sake of consistency, but if that's not the case then "to each his own" applies very much so. As for advice, though, try to find out why he prefers the older stuff. He may have very good reasons that you can learn from or he could just be stubborn.
Dataset! I remember that animal icon! Thanks!! I wanted this as well
Ah yes, I don't know why I didn't mention pyinstaller instead. Much better in my experience too. It's great if you want to pack everything into a single exe with no external dependencies. 
Hey man this looks awesome! Thanks for the tutorials- I'll be working on it later so I'll let you know what I think. 
It is a bit of a paradox, but before anything should be adopted it needs years of proven reliablity. I don't mean to discourage you though; keep your tools working robustly through all adverse conditions and eventually your co-workers will notice.
I would also try watching some presentations from PyCon. There are some by David Beazley: http://pyvideo.org/speaker/david-beazley.html
&gt; redis Redis does sound useful. Thanks for the suggestion.
Well, the first 40m are not appropriate to the subreddit, at least. I love it, thanks a lot!
I enjoyed this book. It's more about computer science itself, but uses Python to showcase examples. https://www.amazon.com/Python-Programming-Introduction-Computer-Science/dp/1590282418/ref=sr_1_3?ie=UTF8&amp;qid=1481329522&amp;sr=8-3&amp;keywords=python+programming
/r/learnpython is better for these types of questions. requests has a `get()` function. So you would call data = requests.get('/players/{username}/seasons')
Yes, you are supposed to add the url of the api to the front of any of the locations given. I'd guess: data = requests.get('https://api.r6stats.com/api/v1/players/{username}/seasons') You'll get a json response, which you can go ahead and parse: data = data.json() Why don't you use someone else's hard work: https://github.com/R6Stats/reddit-bot If you have more issues make a post in /r/learnpython 
You're asking two things. GUI programming, and windows distribution. For GUI programming, check out [wxPython](http://zetcode.com/wxpython/). For windows distribution, abandon all hope; Python is historically (and continues to be) terrible at this. Also you should be on /r/learnpython, not here. This sub is for news, articles, and discussion.
Mark Lutz - Learning Python
you can't use str.format - as that is for formatted output only - i guess you are looking for something similar to the scanf functions in C ? If the data is well formatted, with known separators (commas, tabs, spaces etc), you can use either the csv module, or simply use the .split() method (csv will handle embeded quoted strings cleanly if that is an issue for you). If your data is less well formatted, but you know the structure, then re is your best bet - especially if all lines in each file are the same structure.
See, these are the research projects we need.
Parentheses are meta-characters inside regular expressions, so if you want to match literal parentheses you need to escape them: `\( foo \)`. Secondly, `[*]` means a single character, the literal asterisk, which is almost certainly not what you want. (The `*` is normally a meta-character, but not inside a character class.) There are several ways of doing what you want. If the parentheses are never going to be nested, then you can match "anything but closing paren", i.e. &gt;&gt;&gt; import re &gt;&gt;&gt; foo = 'Horizon (Horizon, #1) Replica (Replica, #1)' &gt;&gt;&gt; re.sub(r'\([^)]+\)', '', foo) 'Horizon Replica ' If they can be nested, then you might think to use the "anything" match `.*`, but that won't work: &gt;&gt;&gt; re.sub(r'\(.*\)', '', foo) 'Horizon ' You would have to use the non-greedy version to prevent that: &gt;&gt;&gt; re.sub(r'\(.*?\)', '', foo) 'Horizon Replica ' All in all, if you know they won't be nested, then use the first one and avoid `.*` which usually brings more trouble than it's worth. Also, you probably want to add in something that matches trailing (or leading, but not both) spaces, e.g. &gt;&gt; re.sub(r' *\([^)]+\)', '', foo) 'Horizon Replica' That takes care of the stray spaces. 
Thanks for helping
Did you read the same post I did? This isn't the JavaScript framework of the week, this is pandas he's talking about. While his company is writing their own log file parser for their handmade pipeline, someone else is installing Airflow and getting more done in the same amount of time. Isn't that the point of programming?
Using json configuration file, and automatic compile supervisor conf file, restart application with supervisorctl, switch network traffic with nginx reload.
I'm exploring the cvs module... it may be at least a partial answer.
[Image](http://imgs.xkcd.com/comics/pointers.png) [Mobile](https://m.xkcd.com/138/) **Title:** Pointers **Title-text:** Every computer, at the unreachable memory address 0x\-1, stores a secret\. I found it, and it is that all humans ar\-\- SEGMENTATION FAULT\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/138#Explanation) **Stats:** This comic has been referenced 136 times, representing 0.0977% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_db0dmlb)
Here's one: `b = int(input("b: ")) a = int(input("a: ")) print ((a*b)/2)` Work out another. 
thank you r'\([^)]+\) worked for what I needed
Thanks for the tutorials. Been wanting g to dip my legs in this for ever
You can't future import type annotations, async syntax, keyword only arguments....
Interesting, thanks again for the replies!
Why is this "necessary" instead of just switching to 3?
event loop 
Coroutines pause their execution at the await/yield statement. Control is passed to event loop. The event loop then determines which of the waiting coroutines (that either need to start, or previously paused with await/yield) should execute next.
sorry for the late reply, just fill out their form! here is the link: https://www.jetbrains.com/shop/eform/students
`math.pow()` performs floating point calculations, not integer calculations. &gt;&gt;&gt; 9**29 4710128697246244834921603689 &gt;&gt;&gt; math.pow(9, 29) 4.710128697246245e+27 Using the exponentiation operator (`**`) with integer operands performs integer exponentiation. BTW, calling `set_printoptions()` isn't doing anything because you aren't actually using Numpy to do any work. 
I would rather we all upgrade to 3 instead of more fragmentation. 
Thanks for the suggestion /u/praTtrApRaP , looks good!
I'm going to promote a fellow /r/python redditor's work: [Python 101](https://leanpub.com/python_101/c/48hours) [Python 202](https://leanpub.com/python201) and then also: [Effective Python](https://www.amazon.com/Effective-Python-Specific-Software-Development-ebook/dp/B00TKGY0GU%3FSubscriptionId%3DAKIAILSHYYTFIVPWUY6Q%26tag%3Dduckduckgo-d-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB00TKGY0GU) Pound for pound these books are an excellent resource. To learn a language, you need to learn the syntax and then the pit falls and best-design suggestions. I've gone through too many books that err too much one way or the other, and you wind up with a tome that's just collecting dust...even if they're downloaded pdfs (not that anyone does that ;) These 3 books get a reader spun up on a wide array of python, and they get the job done *efficiently*. 
[removed]
Trying to make a 2d animated matplotlib based face for my robot.
That reviewer is a lazy idiot. It will be really hard, his first chapter will fuck you up, but if you want to *really* learn python, LP is **the** book. You just have to plow through the introduction chapter. If you feel a little intimidated, I can recommend you to start from something simple, like automate boring stuff with python. After reading it you'll realize that it doesn't really teach you anything beyond the basics and when you'll look for something with substance, remember about LP. Also, about the PERL comment. Marks Lutzs' books follow this exact formula. There's Learning Python, there's Programming Python and there's Python Pocket Reference.
You'll get a lot more help at /r/learnpython. In most cases you're not gonna want to (or be able to) put a DB in version control. Other than keep your secrets, secret and you should be good. 
This should go into the /r/learningpython group. The first thought isn't that unpythonic and good enough for a hobby project! Personally I'd do a class and factor out all data looking up into that, so if you at some later point want to change the way this works there's only one place in your code to apply the change. 
Seriously. People in this thread need to stop projecting. Things OP mentioned upsetting his coworker: * Python 3 * Pandas * .format() * Postgres 10 * GUIs * Luigi * Airflow Not one of those things I would call "bleeding edge". 
Thanks for pointing this out. I'll get it fixed up ASAP. 
I have this co-worker that on top of being stuck in the 80s refuses to use any package in Python. Need to log stuff? Write a new logging library RPC? New library. Run processes? New library. API calls? You guessed it, another new library. Kills me on a daily basis.
Good question. I haven't tried it with Kivy. I see Kivy has Windows wheels on PyPI, though, so that's a good start.
Out of the ones listed I would recommend Python Crash Course with Automate the Boring Stuff very close behind. Crash Course is very straight forward, and maybe more traditional with how it presents the content. It explains everything in a lot of detail, but in a way that is clear and really easy to follow. At the end of each section they have scenarios for you to come up with your own code as well so you can get hands on experience too. Automate the Boring Stuff isn't quite as rigidly structured as Crash Course, and has much more of a focus with hands on. I avoided this one at first as for some reason I thought it wasn't meant for beginners, but it is really great for someone just starting out.
Hey, thanks for the feed back. Right, so I do agree that some of the information I am providing is available in the standard library. I am still trying to work out what information is worth providing. I am not so worried about information being readily available, more so information not being readily available in a usable form. Python does have all these great libraries for a lot of this information, but other languages may not. Also, how often are those libraries kept up to date? Some libraries are probably more updated than others. I also agree the price is a little much, definitely going to lower that. 
instead of racing with competing solutions you should talk pros/cons and make decisions. find a third to make decisions if you cannot agree. this is not a python topic.
&gt; The biggest syntax change that I don't like in Python 3 is actually the removal of the "print" statement--it's just easier to type "print x" I can't believe this is really a problem of Python 3. Just because it is easier to type? Really? How many function and method calls do you type throughout your sources? And they are so hard to type? After 10 years of Python 2 I was able to train myself to the new print function, gaining in productivity because it is far more powerful than the statement. And I think anybody could do the same. Unless you're a lazy programmer. I was expecting somebody to fork Python 2.7 and continue to develop it. The problem I see is that these new developers unlikely are talented as the original authors.
put your pitchforks away... "The pieces of information reported are specifically designed to run only in a developer's environment and not in production."
The software engineering way is to have a data layer (database.py?) that handles data i/o. Today you're loading your data from a json file, tomorrow you'll be loading it from a sql server. Your business logic should be agnostic to source of the data. database.py should have a base class ("interface") for general data handling and a json specific sub class implementation. For example: @database.py file: class database(): Abstract imp... class json_db(database): Json specific imp... @business logic file: from database Import json_db as db data = db.get_data_dict() edit: example... Also, sorry about the formatting.
Fixed. Thank you sir.
Maybe a controversial opinion, but I honestly don't think reading about a programming language is the best way to learn a programming language for a beginner (beginner to a language, not a beginner to programming). I like reading about programming languages when it's focused on a particular topic or more about the theory of good practice. When it comes to just learning a language from the ground up, I think hands-on is always the best approach. Most of the start is just figuring out how to do things you know from other languages in this new language and learning common patterns. You learn that much quicker by just reading good code and trying to code yourself and asking for help.
Yeah, [Luigi](https://en.wikipedia.org/wiki/Luigi)'s been around since 1983
Now that I'm looking at the docs, you're just providing mappings right there. If that's the case, why shouldn't I just download the data, save it locally and unsubscribe?
This is equally worse imho. How the fuck am I supposed to thrust something not to be exploitable like that? Also, I still need to convince my company Django is a good idea for a future project. They're leaning towards .NET and this feature would kill of Django for good, killing all momentum Python is gaining in our company.
I was reading the luigi readme, and still don't fully understand what it does. Would it replace celery? Let's say I have a webapp where a user makes a request that kicks off a task to scrape 100 pages and aggregate results then later build some sort of job result which they can view from another part of the webapp. This is something I might use celery for. Is luigi another alternative or is it for something completely different? What would be the pros of using luigi instead?
I'm not sure what the official Python parlance is for this but in the C++ world this is usually referred to as unspecified behaviour. It's not that *anything* could happen (as would be the case with undefined behaviour) but that what does happen depends on the implementation.
What another load of crap. Call it something else but this isn't Python. I'd never use this because it's not official. Who knows if or how long it'd be supported for or if any backdoors would/could be introduced. I've scheduled time this year for my teams project to update to Python 3. It's expensive in the short term but in the long term we get continued support and new features which is a huge win. 
[Previous discussion of precisely this article, from 6 days ago](https://www.reddit.com/r/Python/comments/5g9ps3/django_debates_addition_of_user_tracking/).
I work with someone who thinks the pinnacle of ui design was windows 95. We work in react/redux. He does not make a very modern UX.
To a certain extent on learning new languages, it's age. OO languages are all pretty darn similar, true - but I do remember in particular learning 90% of the semantics of Ruby in a single weekend years ago when I needed to pump out a particular library. My mental edge and motivation is certainly not there to pull that kind of stuff off these days.
1) Good idea if each request is made by independent scrapers. 2) Seems unnecessary because Heroku can run the scrapers already. 3) Only a framework for creating scrapers, does not execute them.
That's nice! Thanks /u/sixhobbits. How come chat bots is the future? I can't see the broad Picture here. Can someone fill me in? Will do this tutorial, thanks once again! 
Thanks, I'll take inspiration from your work !
Actually there is something called scrapy cloud, which runs spiders and provides access to the data via an api.
Yeah that's what I was thinking... that I could easily deploy to scrapy cloud.
Keep doing what you're doing and use new/better tech. Show your colleagues that your method works. I was in the same situation 2 years ago and I know how demoralizing it can be when ideas are shut down, but don't let this stop you. Slowly people will take notice your methods get the work done.
Agree, the print function is superior in many ways: you can pass it around as yet another object, use it with `partial` to wrap up args that are repeated, or use keyword arguments to pull args from a dict. It also exists in Python 2.7 if you `from __future__ import print_function`, which everyone still caught writing Python 2 compatible code should be doing (you can enforce this with `isort` :) ).
Some aren't on a laptop or desktop. Can't assume. 
At that point, just use Flask since it's 90% glue between werkzeug and jinja2. That said, building right on top of werkzeug is very pleasant, but you end up with your own framework eventually. 
I am in the same situation as you are. An R user who wants to learn Python. I use dataquest.io to quickly have an overview of what is available in the language. It takes quite a long time to finish it. 
[The jury is still out](https://www.youtube.com/watch?v=15nNY7uofNw)
You show us the expected output, but not what you got. Are we supposed to read your mind? Hint: py&gt; import math py&gt; a, b, c, d = 9, 29, 7, 27 py&gt; a**b + c**d 4710194409608608369201743232 py&gt; math.pow(a, b) + math.pow(c, d) 4.7101944096086083e+27 
Fluent Python by Luciano ramalho https://play.google.com/store/books/details?id=bIZHCgAAQBAJ It's all about idiomatic python. It made me a much better python programmer... Also, it pushes python3.4+ features pretty hard.
May be i missed it, but i did not find a comment saying this: Staying attached to old technologies can be a burden for sure, but mixing old and new stuff can be too. For example, having a program scattered with bazillions of different ways of doing the same things is (i think) worse than having the same method used everywhere, even if it is not the very best of the day. And fully porting a software to this new method is not always doable (lack of time, most of the time) Programing can be (and should be) fun, of course, but do not forget the real world needs of the industry. After having spent a few years developping, i became cautious with "latest new fangled fashionable stuff", and i learnt the hard way why old tech grunts are often reluctant to changes. They're more often right than not. Keep the fun of the latest stuff for personal projects and work mockups, unless using new stuff in existing things is the totally obvious road to take. Wrote this in a hurry so ... 
You're what?
[removed]
[removed]
Yes but books are good level zero entry. Esp for total noobs..
NOOOOOOOOOOOOOOOOOOOOOOOO! Let Python legacy die already. What you have is not Python, it's just a language with a syntax like Python. If someone wants to use "Python 3" features, then he/she have to use "Python 3". Someone else would bring up a new tool called "PyBabel" :D 
Thank you so much, it seems perfect to start with!
[removed]
And what do YOU personally suggest?
I have an upcoming windows release for one of my projects. I was going to use pyinstaller but I like pynsist better because the installer is more seamless to the end user. Will try this out and report back. 
I found that the best way to show someone a better way to code is to show them the method as a way of teaming up with them and helping them, rather then taking the approach of "This is so much better then yours because of X,Y,Z" I like to say something like "Hey there is this really cool thing you can use that makes reading in data super easy, and it works really well when you have to scale up in size" I find it avoids being confrontational while at the same time moving everyone forward. Oddly enough I am right in the transition between 2.7 and 3.5 as I am just now learning about pandas and postgres ( Which 3.5 does very nicely and handels well)
&gt; There have been holy flame wars fought over which tools are best for programming and whatnot. What it really comes down to is productivity, preference, and keeping an open mind. Tools? Heck man, we have coworkers who refuse to speak to each other because of arguments over how many spaces to use for code indentation, and use of camel formatting for variable names.
A site that ranks subreddits based on how positive/negative their comments are. [opfeels.com](http://opfeels.com) Tools: Django, [Praw](https://github.com/praw-dev/praw)
Completely different. Luigi and airflow allow you to run directed acyclical graphs of tasks with multiple dependencies and related steps. Airflow at least you can use celery to distribute where your tasks run. You could coceivably write your own software layer using celery to do this but it starts getting very complex quite quickly.
I personally don't like to learn a programming language with a book. Therefore I'd suggest something like [this](http://mathesaurus.sourceforge.net/r-numpy.html) to solve initial translation issues and then the official python docs. There are some beginner guides but imho the more important thing when you can already program is to get an overview of what the standard library offers. Ie [itertools](https://docs.python.org/3/library/itertools.html) and [collections](https://docs.python.org/3/library/collections.html) One language feature I feel you should be aware of are [list comprehensions](http://python-3-patterns-idioms-test.readthedocs.io/en/latest/Comprehensions.html) Once you have skimmed a few of these I'd jump into the interactive shell and start trying things out. (To get more information on something while in the shell type `help(foo)`) 
Really cool tool. The only other similar tool I have seen is one called Q: https://github.com/zestyping/q Watch the 5 min lightning talk about q at bottom of github page worth seeing if u have not seen q before. 
I would not call Automate the Boring Stuff a good beginners book. That is a book better suited after one learns the basic language, maybe after a month or two then look at Automate. Al Sweigart, the author, also does some live coding on TwitchTV. You might take a look at the videos he has. Someone else mentioned Learning Python by Mark Lutz. I would also recommend this at least as a supplement during the learning process. It is a pity that it isn't going to be updated in the near future though.
As others have said, 95 isn't a lot. The first step towards scaling would be to use a asynchronous spider(if the given website can handle it), Scrapy does this for you. If you want to spread the load onto multiple nodes then one option in [Frontera](https://github.com/scrapinghub/frontera).
&gt; I suspect the consensus in 2016 is to learn Python 3.x and later on to investigate on how to write Python 2, if needed, instead of learning 2.x and then moving to 3.x I suspect the real consensus is that if you're a new programmer it well and truly doesn't matter which you start with. Whichever you learn, you can program in either with minimal issues. I can't recommend a specific favorite book - I'm sort of unhappy with all the ones I've dealt with - but I think it's a mistake to arbitrarily limit yourself to Python 3 books: pick the best Python book for you, use whatever version of Python it uses, and worry about the 2/3 differences when you have to.
lol, that should bring us down a little. =) Unless... Thanks for your SUPER HELPFUL feedback!!
Is it with or without Python 2 vs 3 threads?
funny you should ask. It looks like the most negative comment is about 2 vs 3.: &gt;If the author can't get on board with python 3, going so far as to actively discourage its use, 8 years after its release, I can get behind not encouraging folks to check him out.
No, he means tie the dude to the line and tow him out of the office for his misdeeds.
I ended up "solving" this by "simply" adding the season ID + year in the team's columns. Then, when querying for a league table, I get all teams that have that season's ID. If I want a specific team, I built a special column that holds Team ID + Season ID (because I might get "two versions" of the same team in my DB). Thanks for your help!
I actually back some decisions on not using pandas for production. For instance, say you get batch third-party data with a particular format. I've had issues with pandas silently having parsing/data type conversion errors, plus there's a whole host of dependencies. Yeah, pandas is great for reading off clipboard, exploring data, but it's not without its own issues. I understand the OP's point of view, but postgres 10 isn't out yet :), so sometimes you have to slow down, use what you know, and get something done.
We would be at least #5 or #4 as soon as mods start banning obvious toxic trolls. Just sayin'. BTW I hate the Python 6-7 debacle. Four ways to format strings are way too much.
Celery is a task queue, but there is nothing inherent in it for managing the state and dependencies of execution. Luigi has you link tasks to its dependencies, which are linked to its dependencies, etc. Then each task has a method of determining if it is complete. So imagine my end product is to scrape some pages every day and output a cleaned up csv file. The existence of the csv file '/path/to/file_&lt;data&gt;.csv' would tell the main task if it is complete. If it doesn't exist, then it looks to see if its dependencies are complete, and on up the chain doing the same thing. The nice thing about luigi is that it works from the end product backwards, instead of from the first step in the pipeline forwards. This method of programming eliminates a lot of programmatic state, and helps in running only the parts of a task that are not yet complete.
That part of it really isn't my code; that's the nltk sentiment analyzer vader module. I thought it did a decent job though, at least on that sentence. One issue I keep finding is that longer sentences get a more polarized score. I should probably limit the sentence size.
learning from docs pays off very well, also it should be mentioned that python has very good docs
Huh. Had it in my head that "toeing the line" was ever so slightly overstepping boundaries, like, not quite crossing the line, and "towing the line" was pirate ship style hoisting the mainsail. I prefer my interpretation.
[Requests](http://docs.python-requests.org/en/master/).
&gt; What about "I refuse to avoid failing to remember to discourage endorsing this project!"? Pos: 0.0 | Neg: 0.607 | Neu: 0.393 | Compound: -0.8687 Sentence Length: 12 Capitalized 0 of 12 Avg Word Length: 5 
The sample size is small right now... about 500 sentences per subreddit. i am hoping to get A LOT more data in the coming months. I will continue to refine the sentence parser for sure. thank you.
I think that would be a bit too far, we shouldn't encourage such madness
btw, how are your feels, op? ;-)
yup. and as I posted, python has a tutorial, which should be read not only by beginners but by seasoned programmers as well. I don't think that there is a tutorial as thorough and correct as the official one, ant the most important point it's not opinionated!
pretty ok, thanks!
myheaps.com
as others have said, this is a very small amount of scraping requests. Hell, going through reddit in an hour you probably make at least that many requests(as a user, not even counting each time you make a click and it has to fetch a bunch of js files from the servers). For most of what you'll need, the issues you likely face scaling up the amount of requests/{time frame} are dealing with the site you're scraping blocking your ip on a network level if you hit them too fast. But for most jobs and sites this won't be an issue. To give you an example: I regularly scrape investopedia.com for roughly 24k requests in about a 15 minute time frame and have had no issues whatsoever. Until you start getting issues either from speed of your scraper or from sites blocking your scraper at a network level, I would not worry too much about prematurely optimizing things. 
Would you mind explaining what you mean by "processing the mapping"? I may be already doing that, but I don't quite understand the wording.
OP delivers!
Well, thanks a lot for your opinion and suggestions!
My primary concern is that a lot of these requests are to the same domain. It seems like I am getting errors when requesting over and over, so I'm trying to spread out the timing and source of the request so that they are successful.
One domain but different page each time.
It's actually pretty damn annoying when doing interactive stuff. To my mind the standard repl should allow without paren. That would take away the only gripe I have. 
&gt; Frontera Definitely looking into Frontera. Thanks!
[Automate the Boring Stuff](https://automatetheboringstuff.com/)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Thanks, I'll change the wording 
/r/learnpython
One thing that would be great to add to the tut, is how to install the bot on a server like heroku. After we complete the bot, we would like it to keep running forever. I searched around , and no tuts for deploying a telegram bot to heroku and equal.
I'm curious to see whether r/MATLAB would come in last or second to last.
439 /r/legaladvice lol
438 /r/MensRights haha
&gt; My output 9 29 7 27 it comes from `print a, b, c, d` and try print "%d" % abcd 
http://opfeels.com/r/Python/ works but http://opfeels.com/r/python/ doesn't. 
I don't read that sub but I suspect I lot of the negative sentiment comes from describing what others do, not how negative the sub itself is. I noticed the same with /r/keto which I have found to be the most positive sub I have read, but is ranked 25 probably due to people discussing the negative sentiment that come from outside the sub and how to deal with it. The actual sub is much more positive than outside the sub.
LOL. I think it's neutral overall though right? "I refuse to avoid" basically cancels each other out and becomes "I will" "failing to remember" can be replaced with "forget" "forget to discourage" cancels each other out and becomes "will not discourage" So a different representation would be: "I will not discourage endorsing this project" -- which is pretty neutral by my judgment. Still, this was tough to parse...even as a person.
I've been tinkering with PyOpenGL, trying to create a Doom/Wolfenstein 3D themed first person shooter where you try to survive in a monster infested maze for as long as possible. So far it doesn't do anything else than render a bunch of "tiles" (map elements - basically just 3m by 3m by 3m cubes that have a 6-bit binary variable that tells it whether it should render the floor, ceiling and walls).
Wait for the thread about the guy forking "2.8" to hit the sub in a few minutes. The ranking will sink like the Titanic.
Pretty cool for quick logs, indeed! Thanks for the ref.
#\#7 now
You will be 1000 times better off looking at p5*js libraries, this code is wildly inelegant.
But Python 3 has so many flaws. There is no a single reason for any company or individual dev to migrate because they will regret afterwards.
Requests is pretty small, if you exclude its dependencies. You can also look at Flask's dependencies like Jinja2 (really good) and Werkzeug (a bit low level).
Ahh, whoops. Before posting I checked the sidebar, wondering if my post properly belonged elsewhere. This morning I looked again after reading this comment, and realized that I had totally missed the bit at the top of the sidebar about posting in /r/LearnPython. Lesson learned: be careful when posting at two in the morning!
I would recommend stack overflow, and also IRC #python you'll find people that would help.
Thanks!
&gt; The only exception to this is None which has a constant space in memory True and False
Will look into it. Didn't know ppl still use IRC. Will dl it for sure. Thanks a lot
Cool experiment but I think your last sentence sums it up: "While not very practical, it's an interesting experiment."
Gotcha, thanks so much. Will make sure to post on the other thread next time. It was a test question, which is why I was asking, I normally don't like using IS for comparisons between numbers either. 
Seems like my wish has been granted. Quoting Guido on [Python-Dev](https://mail.python.org/pipermail/python-dev/2016-December/146945.html) "FWIW the author is amenable to renaming, so that's the end for me. See the issue referenced earlier in the thread." The reference is [Rename this Project #47](https://github.com/naftaliharris/python2.8/issues/47).
Or when you want to have a sentinel: sentinel = object() ... if foo is sentinel: ...
[The missing link](https://github.com/web2py/pydal) :-)
This looks somewhat similar to the toolz library. Although they don't have this lambda-like black magic ;) Can you do 'func(P)' where you have 'P + 1'
Awesome!
I haven't tried it myself but this [scanf](https://pypi.python.org/pypi/scanf) might help. I'd also check out [Python Parsing Tools](https://github.com/webmaven/python-parsing-tools).
Indeed :)
Note that this is a cpython implementation detail and isn't part of the 'spec' so to speak. I don't believe pypy has this behavior, and I don't know about any of the other python implementations.
/r/learnpython
This where the whole 2 vs 3 thing really sucks. Damned if you do damned if you don't.
You sure it's not a -5/7, perfect negative?
Just doing the lookup. From your docs, it looks like you are supplying the entire mapping. Or maybe that's just on your /information/... endpoint. Which, I suppose has value too. But, /month-to-number/feb -&gt; {"result" : 2} is what I meant. Or, maybe /month-to-number?key=feb -&gt; {"result" : 2}. It's not super clear from your docs.
There's also dbpedia for querying Wikipedia-like source programmatically: http://wiki.dbpedia.org/OnlineAccess
LOVE!!! LOVE!!! FANTASTIC WONDERFUL &lt;3 !!! GREAT - That should help us get to #5
No, they can also increase positive score.
Can you be more specific with what you mean by 'efficient'? Far as excel goes, there are libraries that you let you script and manipulate spreadsheets instead of VBA. [xlwings](https://www.xlwings.org/) is my favorite. There is also [gspread](https://github.com/burnash/gspread) for Google spreadsheets. But really, I would look to replace excel with the pydata stack, namely pandas. There is a lot more power there for your analysis needs and you can script and repeat tasks. Which is super helpful when doing PPC work. You could automate bidding algorithms for example. Google publishes a library for interacting with the Google analytics API. It's kind of a bear to work with but once you get the data out and into pandas, you're off to the races. Google adwords has an API, you have apply for a developer token and learn the library they publish, but you can do an amazing amount with it. At the very least, you can get your reports via their API and import into something like pandas or other script to perform your regular analysis tasks. Once you get that, you could take it to the next level and push your changes back to Adwords. If you have more specific questions, happy to answer. I'm a data scientist with a long background in digital marketing including adwords and analytics and happy to help. 
Ha! $ python -m bpython bpython version 0.16 on top of Python 3.5.1 /home/poh/.pyenv/versions/pypy3.5-c-jit-latest/bin/python &gt;&gt;&gt; -1 is -1 True &gt;&gt;&gt; -100 is -100 True &gt;&gt;&gt; 10 ** 10 is 10 ** 10 True &gt;&gt;&gt; "print(-35 is -35) print(-5 is -5) produce different outputs. Why?" * 1000 is "print(-35 is -35) print(-5 is -5) produce different outputs. Why?" * 1000 False &gt;&gt;&gt; 
I love this subreddit!
Why it wouldn't, if you have worked with data, you'd know how much usage metrics are valuable, everything you see that makes internet a much better place comes from metrics and those tiny "useless" data. This is not a keylogger or backdoor, but a simple usage collector that I'm pretty sure you can disable it when it lands.
&gt; pretty ~~ok~~op, thanks! 
I expected to see nothing but profanity in this thread.
Figure out what you want to do and then figure out what you need to use to do it. Do you want to do websites? Do you want to do numerical computations? What about desktop GUI programming? What about real time plotting? Learn by doing what you care about.
This will be in Part 3 which will be a live video office hour. I'll post on twitter (@sixhobbits) and code mentor before I do it in mid Jan
heh. Considering those, there are indeed a debacle of ways to format a string xD
Great book, keep it by my desk most days for reference but keep meaning to take a few months and read it through.
I wrote 4000 lines of code and 200 pages of writeup and got a B, fuck those projects.
ive tried that, it gives me TypeError: 'Response' object has no attribute '__getitem__' the dictionary it formatted weird, atleast to me and my beer at the moment. Im trying to pull the integer for rank back, from item 4 (i know syntax is wrong but i think you get it)
 def main(): data = {"seasons": { "4":{"ncsa":{"wins":48,"losses":36,"abandons":0,"season":4,"region":"ncsa","ranking":{"rating":3397.113763,"next_rating":3400.0,"prev_rating":3200.0,"mean":33.97113763,"stdev":4,"rank":18}}}, "3":{"ncsa":{"wins":152,"losses":162,"abandons":2,"season":3,"region":"ncsa","ranking":{"rating":4951.80855299,"next_rating":5160.0,"prev_rating":4900.0,"mean":28.3858273058,"stdev":2,"rank":17}}}, "2":{"ncsa":{"wins":41,"losses":26,"abandons":2,"season":2,"region":"ncsa","ranking":{"rating":4419.66098484,"next_rating":4640.0,"prev_rating":4400.0,"mean":30.0860547181,"stdev":5,"rank":15}}} } } print(data['seasons']['4']['ncsa']["ranking"]["rank"]) if __name__ == "__main__": main()
last time I checked, /r/legaladvice was full of the "being right gives me a free pass to be an asshole" types...
I don't know. You're using binary logic which I think causes a loss of meaning. Using ternary logic would preserve the meaning but wouldn't necessarily be much simpler. Refusing to avoid something doesn't mean that you will seek that particular thing. It just means you won't avoid it. So "won't avoid" is probably the most succinct phrase without losing accuracy. "Forget to discourage" doesn't mean "will not discourage". The former implies intent to discourage whereas the latter offers intent to do otherwise. I think the simplest that you can do without losing meaning is the following: "I won't avoid forgetting to oppose this project." To me, this means the following: "I don't like this project but I don't feel strongly enough to hinder it."
[Jython 3.5](https://github.com/jython/jython3) seems to be fairly up to date but I figure the developers could always do with a hand. But would any serious Pythonista contaminate themselves with Java? :-)
yes pypi removed last day, last week and last month stats but it still provide total downloads per release
This is so awesome, been wanting to try it out for a while.
[removed]
Have you tried IPython with autocall?
You'll get better responses on /r/learnpython.
I said, "you won't find documentation *as* valuable". You chose to exaggerate my statement to "won't find documentation valuable". I don't really care to discuss this with you if you're going to play that kind of game. Repeating, "document your code", three times smells to me like someone junior trying to pass himself off as someone senior. Best of luck to you. 
is your code open source OP?
Make an account on cloud 9 and screw around. 
Actually, I didn't say you wrong. I have just check your prediction. I now how it works in cpython.
Snapchat memories is not what I'm looking for. I need to post photos/videos that looks like it's not from the camera roll (memory). 
I haven't really moved to Python 3 so haven't looked too closely. But fixing this in the standard repl would be a good idea anyway I think. Sometimes you don't have access to install packages in production systems for example. 
Pypi stats was claimed unrelable many times. You can check the warehouse github issues for details. Google bigtable is the new download stats storage going to be used in warehouse. 
Ahaha i did almost that exact program for my year 10 project! Didint let them generate the amount of questions but the rest was the same! And tanks for the link :D
Your title includes the words "How to" so I presume you are targeting new programmers. I think it is important that you discuss adding `if __name__ == '__main__':` and the reason to include it. You might consider incorporating the multiprocessing context manager to simplify things as well. 
I envision someone maintaining a trackingless fork which will become the new de facto standard. This is ridiculous. If you wanna do clandestine shit on my PC, go closed source and stick an apple logo on the splash screen. I don't expect this from FOSS. This sort of thing is the _reason_ FOSS got so big.
Super easy to do. Just change this: p = Pool(10) # Pool tells how many at a time records = p.map(parse, cars_links) p.terminate() p.join() to this: with Pool(10) as p: records = p.map(parse, cars_links)
Ok I do but please tell why did not you add `p.terminate()` and `join()` in it?
SimulateMe! StatisticallyDeviant
Ik ben donor want als ik een PhD toegepaste statistiek in de psychiatrie. ~/u/StatisticallyDeviant ----------------------------------------------------------------------------------------- [*^^[Feedback]*](https://www.reddit.com/message/compose/?to=Simulate_Me_Bot) [*^^[Get ^^a ^^bot]*](https://www.reddit.com/message/compose/?to=iNeverQuiteWas) [*^^[Info]*](https://www.reddit.com/r/FreeKarma4You/comments/5b0r6r/i_am_a_bot_that_will_simulate_you/)
Alright, I do it in a while.
You can use Kivy with Python 3.5 on Windows if you download and install a wheel from here: http://www.lfd.uci.edu/~gohlke/pythonlibs/#kivy [Here](http://stackoverflow.com/questions/27885397/how-do-i-install-a-python-package-with-a-whl-file) is how to install a wheel with Pip
thx looking forward to it.Also followed you on twitter.
look for py2exe.exe but most attempts will result in failure unless your scripts are simple. Interpreted languages just aren't meant to be distributed that way. If you truly need a standalone executable, I'd recommend re-writing it in IronPython (though you'd need to drop back to Python 2.7 and may not have all the modules you need) which has the ability to package the IL bits into an executable that only requires Microsoft .Net 3.5.
FYI, if you want to search and learn more about this it's called "interning"
Why not asyncio and aiohttp?
Codecademy is launching a refreshed version of their Python course in January. Just something to keep an eye on. Could be good.
I've had the most luck using Pyinstaller for this. If you're importing a lot of packages you may need to do some further configuration of the spec file it creates.
this is the stuff of nightmares.
Guido doesn't like 2 digit subversion numbers, although he was of course forced into accepting them for 2.7.
I think we'll be able to distribute python3.5 wheels for Windows soon, some of the core developers have been working on it. I think it needed some changes to support MSVC.
For what it's worth, I've been making some improvements to the python3 Android build recently and it seems to be working quite well. There's one more major thing to do to make the build easier, but hopefully then it will be relatively stable.
Look into cx_Freeze too.
This week I choosed Python as the first computer language I will learn because I want to understand a thing I read on the internet about languages (my passion). So I'm starting and falling in love with it.
Neat. It's similar to what I'm using it to ( Not the above, but the proper implementation ) which is to validate contents on raw flash partitions after upgrades. 
Well for example the negative comments from makeup addiction are all positive but they've been marked negative. A lot of flaws still. SUPER AWESOME HAPPY GOOD TIME.
So I took the [Python 3 only category] (https://pypi.python.org/pypi?:action=browse&amp;show=all&amp;c=533) page on Pypi (1100 packages), found all packages that have github as their homepage (601 of those packages), scraped github, and then sorted the results by star count (using Python 3 of course). A lot of the bigger projects have their own website as their homepage, or are not python 3 only. Here are the projects that have stars &gt; 100: url|stars|description|last_commit ---|---|---|--- [MagicStack/uvloop](https://github.com/MagicStack/uvloop)|2571|Ultra fast implementation of asyncio event loop on top of libuv.|November 28 2016 [np1/mps-youtube](https://github.com/np1/mps-youtube)|2071|Terminal based YouTube player and downloader|November 11 2016 [tdryer/hangups](https://github.com/tdryer/hangups)|1231|the first third-party instant messaging client for Google Hangouts|December 03 2016 [yadayada/acd_cli](https://github.com/yadayada/acd_cli)|1113|A command line interface and FUSE filesystem for Amazon (Cloud) Drive|November 24 2016 [rasguanabana/ytfs](https://github.com/rasguanabana/ytfs)|979|YouTube File System|July 31 2016 [cosven/FeelUOwn](https://github.com/cosven/FeelUOwn)|913|nothing but the alternate|October 13 2016 [BigchainDB/bigchaindb](https://github.com/BigchainDB/bigchaindb)|840|BigchainDB is a scalable blockchain database|December 10 2016 [jarun/Buku](https://github.com/jarun/Buku)|807|Powerful command-line bookmark manager. Your mini web!|December 11 2016 [mschwager/dhcpwn](https://github.com/mschwager/dhcpwn)|512|All your IPs are belong to us.| [machinalis/iepy](https://github.com/machinalis/iepy)|480|Information Extraction in Python|October 13 2016 [TomasTomecek/sen](https://github.com/TomasTomecek/sen)|468|Terminal User Interface for docker engine|November 12 2016 [retext-project/retext](https://github.com/retext-project/retext)|404|ReText: Simple but powerful editor for Markdown and reStructuredText|October 05 2016 [phaethon/scapy](https://github.com/phaethon/scapy)|373|Network packet and pcap file crafting/sniffing/manipulation/visualization security tool (based on scapy) with python3 compatibility|December 02 2016 [7sDream/pyqart](https://github.com/7sDream/pyqart)|355|QArt Python Implementation.| [aitjcize/cppman](https://github.com/aitjcize/cppman)|316|C++ 98/11/14 manual pages for Linux/MacOS|September 15 2016 [jrfonseca/xdot.py](https://github.com/jrfonseca/xdot.py)|236|Interactive viewer for graphs written in Graphviz's dot language.|November 18 2016 [llllllllll/lazy_python](https://github.com/llllllllll/lazy_python)|214|I will write this later...|November 07 2016 [brechtm/rinohtype](https://github.com/brechtm/rinohtype)|201|The Python document processor|November 28 2016 [veeti/manuale](https://github.com/veeti/manuale)|156|A fully manual Let's Encrypt/ACME client|August 27 2016 [nchammas/flintrock](https://github.com/nchammas/flintrock)|145|A command-line tool for launching Apache Spark clusters.|November 21 2016 [scheibler/khard](https://github.com/scheibler/khard)|129|Console carddav client|September 20 2016 [vikstrous/pirate-get](https://github.com/vikstrous/pirate-get)|128|A command line interface for The Pirate Bay|November 05 2016 [humangeo/preflyt](https://github.com/humangeo/preflyt)|108|A lightweight application environment checker|
Nice!
that's not what a backdoor is though. also, they are not doing that. this is a proposal being discussed. it is also not about tracking all your commands. the proposal lists a few commands that would trigger some tracking. anyway, sure, weigh in, speak your mind, but no need to freak out. even if this gets implemented and enabled by default (which i doubt at this point) it will probably easy to remove or disable. just fork and revert the changes when they get merged. 
It certainly is far from perfect. It only works most of the time. =)
It certainly is far from perfect.
I have no strong feelings one way or another
As someone who starts learning Rust that's one great video. 
Thank you for the feedback kaydub88!
Nuitka.
I'm talking very basic at the "stick figure"/ "happy face" level. I envision this routine to be able to receive an an "emotion variable" from 1 to 10 and then move the mouth , eyes and eye browse to preselected position. It's just the top level structure I'm asking about not the art or movement details.
I can't imagine anybody have done exactly that and put it on the internet, but it should not be that hard. You can draw 2d graphics with cairo which has python bindings: https://www.cairographics.org/pycairo/
Thanks for the feedback! As mentioned above I'll be doing an office hour live video showing how to 'deploy' the bot. Basically there are a number of different ways: the simplest one is to use something like `screen` or `tmux` which allows you to run a script in a virtual terminal and then detach it, which prevents the accidental closing and clutter you mention. This still doesn't help if the machine restarts, etc though. The way I'll be demonstrating in the video is to use a virtual private server and deploy the bot behind a web server (apache2) using Telegram's webhooks. This is a bit more complicated, but it results in an always on bot that scales well to lots of simultaneous users.
Wow thanks for the info!
+1. I've also been using Pyinstaller. You can use the --onefile argument to ensure you output a single executable. It will take some fiddling to ensure you're including all the information it needs - as things like certificates and anything you sys.path.append often won't be picked up.
Just use 3. Its as great as ever. 
What GUI library are you using (tKinter, PyGame, etc.)? Based on what you've said so far, you can probably just put the scraper into another thread, and in the main thread you should keep updating the screen or even just do something like: while self.done == False: refresh_screen() ...and just set `self.done` to be True in the second thread in order to wait for the scraping to complete.
I am using PyQt4
oh okay. I'll try that out. Thanks :)
What you're saying would be good advice if presented as 'consider this alternative', but it's not superior in every situation. One obvious point against web apps is that you generally have to pay for hosting, or live with the constraints of a free tier. And I can think of several other reasons why you might prefer a desktop app. The OP hasn't given enough information to tell what's best.
Which operating system? On Windows you can use pyhook to hook into the windows API. On Linux you probably have to use a system library. Try googling "Python keylogger". 
It's because they aren't asking for the "best" way to distribute an application. You're not answering their question.
looks like we had similar ideas haha
&gt;Is there a good way to poll the keyboard in the background, not just while the window is active, using Python? (Windows) ;) Does PyHook actually detect inputs while not in focus? If so, this is exactly what I need.
I specifically posted here because /r/learnpython seems to be more for helping with specific code, whereas all I really needed was crowd-answer to whether or not input-grabbing was possible. EDIT: in reply to your edit, what had ever implied I was new to Python? I was simply asking a question about whether or not input-grabbing was possible, as I'd seen no implementation elsewhere of anyone doing that sort of thing. You're also being very, very ignorant of what I've said; I did not ask for code, I asked for whether or not input logging while out of the window's focus was possible.
I wrote a library that does exactly this: [pyhooked](https://github.com/ethanhs/pyhooked). However, now I am recommending people use [keyboard](https://github.com/boppreh/keyboard), as I am dropping support for my library. What you are looking for by the way is global keyboard hooks, if you want to search for alternatives to these libraries.
[for hire] Experienced Python developer. Have worked on projects in web (Flask) and, more recently, Machine Learning (scikit-learn, TF/Keras) and Computational Linguistics/NLP (nltk, Spacy, various techniques using Word Vectors and unsupervised learning). Many of my projects have been academic, so I would be happy with a junior position if it provided opportunities for learning and growth. [GitHub](https://github.com/notnami/)
For sharing with others. Windows users are more often end users rather than developers, and so they are less likely to be ok with the trouble of installing the proper versions of python and required libraries. In addition, the probability that the required libraries will install correctly is not very high for Windows ("pip install" fails for many popular libraries on a standard Windows machine, if only because it needs C compiler).
You really should be using [Scrapy](https://scrapy.org), if you're doing scraping in Python.
Man you must be the life of the party.
Note: It can (should!) be better, cleaner, etc. but if you're looking to [markers in Python](http://i.imgur.com/vftW9FR.jpg), here is the way to go... I wrote these little additions, because I couldn't find another module that does this. For example, note that Python's [wave.py](https://hg.python.org/cpython/file/3.6/Lib/wave.py#l221) doesn't read markers.
I love using tornado for asyncio tasks, as an alternative.
Sure! Tweepy is a thing, and Reddit also has an API (and probably some Python modules somewhere if you check). On the phone right now, so not going through the trouble of providing links.
If obfuscation of the source code isn't a requirement and it's ok to have an installer instead of a single portable executable, I highly recommend [pynsist](http://pynsist.readthedocs.io). The generated installer basically installs CPython along with your application, without attempting to freeze it or apply any other trickery. This is much less problematic with respect to imports than solutions that freeze your code.
These structures (both the trees and the linked lists) are not immutable, they are trivial, the implementations are very odd (naming conventions, returning exceptions?) and they provide precious little value.
Flask for sure, Django is like dropping a house on an ant you could step on. There will be a much smaller learning curve and you'll still get exactly what you want with flask. 
Yes I've started to crawl with that mentality and it's working much better. What happens though when I keep adding Heroku schedulers and eventually have the entire day scheduled? I guess at that point I need to look at Celery or other nodes like suggested in other posts?
1+ for bottle, it is very easy and still pretty cool. 
I got you: [Tweepy](http://www.tweepy.org/) [Reddit Api](https://github.com/reddit/reddit/wiki/API) The python wrapper for reddit (that I use): [PRAW](https://praw.readthedocs.io/en/latest/) I don't like tweepy though, I've always preferred twython: [Twython](https://twython.readthedocs.io/en/latest/) You can use either though, whichever you like better. 
Another vote for flask. You need a minimal webserver and that's one area flask excels. The way I think about it, as soon as you start needing authentication, consider django over flask. Of course flask works there too but Django's built-in auth is pretty bad ass considering what it takes to do auth right. It's good out of the box for the most part. Auth is hard, and doing auth wrong is terrible all around. Django makes some sorts of sites incredibly easy, and flask makes other sorts of sites incredibly easy. It's certainly not that flask doesn't do big sites but there's general use cases for each that make total sense to go in either direction. Flask is great if you need a very minimal ecosystem and just need a webserver. Flask is also great if you just want to build a backend and have react do all of the frontend like the templating. I've built a site with thousands of users using flask and it's completely capable, but I do end up having to do a lot of stuff myself that django works out of the box with.
Absolutely, I'd be happy to!
At that point you have the entire day scheduled. Heroku schedulers come with some caveats but as long as you can live with those I wouldn't bother investing the time to look at Celery. In fact Heroku schedulers might actually be a great choice for crawling, if those one-off dynos also mean your IP is different each time.
You can also try using `quamash` with `aiohttp`, sure you'll have to refactor your code a crap ton, but you'll learn a lot!
I voted you down for bitching about down votes
I don't care about internet points but if I said something incorrect, I would like to hear what the correct response should have been (maybe I misunderstood something or maybe I said it in a bad way).
I think most people do not think that OP's question is simple enough to belong in learnpython
I'd bet some social psychologist has done this, so maybe try searching google scholar for e.g. "emotion face detection" Or perhaps you're the social psychologist and no one has done it before, in which case all the more reason to do it yourself!
Django has very good defaults and you can make [pretty small](https://www.safaribooksonline.com/library/view/lightweight-django/9781491946275/ch01.html) Django applications. Not that Flash isn't a good framework, but if you would want to *expand* a website like OP suggested, you would probably be happy with Django's standard lib. For example: the admin, forms and authentication parts could come in handy.
&gt; people who decided to just downvote with no explanation How do you use this website without having a mental breakdown?
As /u/real_edmund_burke hinted the question makes very little sense, these are orthogonal concepts not ones which are related. That the structures listed are not immutable is one criticism, that they are trivial (there's nothing advanced or interesting about the implementations shown here) is an other unrelated criticism, etc… 
I am actually as surprised as you are... -17 is a lot of downvotes for something I agree on.
I can't really say since I don't have access to the information you have. That being said, "requests get" is used if you are using JSON.
Few things: - your indentation in main is all off, python unlike other languages cares about indentation and uses it to distinguish between block of code. You need to correctly indent it - python is case sensitive so "value" is not the same thing as "Value" - the value/Value is not used, so just remove it - nitpick: it's a common convention to have classes starting with capital letter and methods and variables to be all lowercase - nitpick: you don't need to assign local variable "us" to "self.us" just use "us" for multiplication. Also as suggested, you should use /r/learnpython for such questions.
Note2: if someone wants to submit these changes to https://github.com/scipy/scipy/blob/master/scipy/io/wavfile.py, feel free to do it, as it might be useful for other people. (I won't have time in the next weeks sadly).
Great point on the one-off dynos being different IP addresses each time. What I mean is, once I have the entire day scheduled but still have requirement to run additional scrapers, how should I handle that?
Please please do a pull request. This is very useful, and in the best spirit or open source. 
&gt;I don't care about internet points You sure seem to...
The question has 29 points with a 90% upvote ratio. It seems popular, I say it should stay here. 
Ok I guess I'll keep scaling until I run into an issue than deal with it when it comes up. 
meh, I was more interested in why people downvoted it rather than whether or not they upvoted or downvoted because if I said something wrong, I could have learned something new but /u/real_edmund_burke seems to have cleared it up.
I actually think he has a point. If I down vote on a comment I disagree with, i think it's honorable for me to explain why.. Because in some way that's how we all learn and educate each other. That being said I barely downvote unless the comment doesn't add value to the convo
It's possible a lot of those came after he edited his comment to contain an anti-Reddit screed.
django rest framework is better for SPA then flask tbh.
Well how would you get the onscreen data?
Yes you can use django for this. You could also use any of the other web frameworks. 
I'm thinking I can look into building a simple mod that would take all data relevant to the program and save it to a text file. 
If it's just a single function, you could do it on AWS, hosting a static site on s3 and a single lambda function with api gateway for the service. Really easy and low maintenance. 
&gt;name = raw_input('Enter your name:') &gt;print('Hello, ' + name) will prompt the user for a name, and then print 'Hello, &lt;name&gt;' What do you want it to do instead?
Ah, yes, you're correct, it'd be pretty inefficient. But I suppose a ticker like what PyGame has (`pygame.clock.tick(30)` for 30 frames per second) would be ideal if refreshing is titular to the experience.
Django may be heavy, but I think it's not that heavy actually. Why not use it even if it has lots of feature you are not going to use? Django is an superset comparing with flask. Especially when you want to expand the site, like using DB, django will instantly become a much better choice, then your work on flask will be wasted. I would pick django personally whenever I can.
&gt; I'd prefer to suggest a solution that can work for masses. &gt;2.7 lol? like 80% of what "the masses" use is python3. Moving over isn't even hard. 
hmm lots of downvotes, i guess noone gets the joke. Would appreciate any feedback on making the future of the series better! Thanks to the people that took the time to check it out
If you're in interactive mode, Python will try and take the input immediately. I'm not sure of a way around that.
Make a function.
No problem! Glad I could help.
I liked it.
Appreciate the feedback none-the-less, thanks deadringer :)
&gt; It also gives you a truckload of stuff that you won't need. So does Python... I've never understood this as an argument against Django.
Do you have prior experience on a farm or a area of interest? Most farms have huge cash flows and very slim to negative profit margins. Corporate farms would be a better source of data as their focus is usually very narrow. When it comes to visitors they're not fans. Using drones to survey crops is becoming more common. Comparing surveys with harvest data and improving the accuracy could be a thing. Scraping for USDA programs might be worth a try. There are opportunities to participate in experimental programs. It's not exactly common but automating the search would be interesting. I'll keep thinking on this. Getting numerical data from observations on the farm is a bugger. I'm excluding topics if there is already software available that does what python could do. i.e. mapping areas of fields and adjusting the number of seeds accordingly, tracking the movement and health of dairy cattle, optimal feed mixtures, and such.
I understand what he wants to do. He wants to copy some info from a game's mechanics
I think k might be able to answer this. So I have a couple of Internet of things apps setup in my house. For example a timer for the dryer, and a smart alarm clock. Each has a web server attached to it so I can make changes without having to manually ssh into the box and change configuration or kick off the script. Rather than have one big server that's put on each device, each device has its own small server that has a set of routes to ping. I then have a central web app that I can access from my phone and that can control all of my devices. It helps break up the code and reduces dependencies so if I make a change in one spot, it's not going to break everything else. Also it's modular. 
Why can't anyone read the goddamn sidebar? /r/python isn't the place for your awful beginner questions
A named pipe could work for that, to eliminate the unnecessary disk io involved with using a normal file
As everyone else has already mentioned, what you need is a web framework, which probably means Django or Flask. Also as others have said, Flask will be the easier one to learn initially, but Django is more powerful. What I'm posting to add is that all the talk of Flask being 'lightweight' and Django being much more complex, Django is really not that hard to learn, doesn't *have* to be complex, and will be a much more useful tool if you want to do more complex sites in the future. I totally would recommend Flask to a beginner learning his first web framework, mostly because it would force him to deal with things at a lower level, which can be a useful learning experience. If you you're new to web programming Django can seem a bit like magic, which gets in the way of learning. But if your goal is getting stuff done, and you've already used web frameworks in other languages, Django is the better choice.
Sadly, it wasn't. I edited my original comment multiple times so many people are confused as to which comments pertain to which replies but at this point, I'm not going to comment anymore because of the shitshow that this comment tree has become
I used to Tornado. It's mature, stable, good enough and give primitives for async programming. I've not use muffin yet.
If you need to enter data into existing pdf fields on pdf form, the the best approach would be to use [pdftk toolkit](https://en.wikipedia.org/wiki/PDFtk). This is a command-line application that is included in many distributions apt-get install pdftk Python wrappers [are available] (https://pypi.python.org/pypi/pypdftk) as well. 
maybe more information about what you expect the input/provided data to look like? 
Forgive my bluntness, but something you might be able to learn from this whole shebang is that belittling other people for their lack of expertise in a field is almost never well received by people who care about that field. I also get annoyed by r/learnpython questions in r/python, but when I do feel the need to comment, I try to do so in a constructive and kind way because I definitely don't want to scare new users away from our community. And even from a purely selfish standpoint, a non-hostile response is more likely to change the user's behavior.
I had looked at these guys, and I guess their website put me off. Perhaps it's a stupid reason, but it looks dated and gave me the impression this project may not be maintained well. Happy to give them a try after being recommended though. Thanks!
How do you want to specify your agent? If you want to write an algorithm yourself (good old fashioned AI) then pixels -&gt; Open CV object detection is a good route. Alternatively, you can learn the whole pipeline with pixels -&gt; Conv Net -&gt; Reinforcement Learning. This route takes less human engineering, but a whole lot of computation.
Yes I am willing to do freelance work. I've also been meaning to learn Pyramid and Flask, so yes I'd be willing to do that. Could you send me a pm with more information?
Unfortunately your list implementation does not work for large numbers of items due to the lack of tail call optimization in Python. 
I guess I have never understood the reasoning for this idea *not* happening in the first place. People upgrade, but slowly. At $WORK when I joined 8 years ago we were on python 2.3. We are now on python 2.6 and looking to officially upgrade to 2.7 next year. The leap to 3 just seems insurmountable from here. For us to migrate to 3, some manager has to approve the budget for everything to be ported. We are talking about millions of lines of code. The only person with the ability to do that is the CTO or VP and they'd rather spend money on new features. But having a 2.8 with all the features of 3 would encourage those features to be used in conjunction with the current code and things will naturally migrate forward to 3. I just don't get the hard-line attitude of not wanting to build a bridge.
I think you've been a pretty good sport about this, all things considered.
AWS Lambda would be an unnecessarily optimized solution to the problem with some very annoying drawbacks. 
I like flask because i can use as much or as little of it as i please. I also think that django is easier to learn as more users = more examples and documentation. 
How? There is no infrastructure required. It is a great way to run Python code. I'm just curious, I use it all the time. 
I assume you're referring to the "batteries" here; the difference between those and Django's stuff is that they're highly optional. Yes Python ships with a million libraries you won't need, but as long as you don't use them, the only price you pay is a larger download and install size for the Python distribution, it does not negatively affect your coding. Django however is opinionated; it comes with a predetermined project structure, "model" / "view" / "controller" setup, routing system, template engine, data abstraction layer, etc., and while you can override these, it's not usually a good idea to do - Django works best if you roll with its paradigm, for better or worse, and use it the way it was intended to be used. This isn't even a general argument against Django, mind you - when Django's paradigm is close enough to what you want, then by all means do use Django. I'm just not convinced that this is the case here.
I've found tornado to, even ignoring its async capabilities, be a very nice balance between flask and django in terms of what it gives you vs. makes you do yourself. And then adding websockets to my app was a breeze.
Generally you probably won't run repl on production anyway and if you do you can do non root install with pip install --user ipython It's simply miles better then the standard repl, I highly recommend switching. For one thing you don't have to type exit(), history across sessions, autocomplete
Sure, but it would require extra work because normally `wavfile.py`works like this: (sr, samples) = read('hello.wav') To keep backwards compatibility, I added parameters (default `False`) that state if we want extra metadatas while reading (`br`: bitrate, `cue`: list of markers, `f0`: frequency of the root note in Hz stored in some wav files (often the case in instrument sample sets), etc.): (sr, samples, br, cue, f0, cuechunkstr, smplchunkstr, cuelabels) = read('hello.wav', \ readmarkers=True, readpitch=True, cuechunk=True, smplchunk=True, cuelabels=True) It's currently: * not documented * to go fast, I removed RIFX support (I have never seen a single RIFX big-endian WAV audio file in 10+ years of audio production / audio programming), `scipy` wouldn't like this So in short, I'm open to do a pull request, but I'd need help :) ___ PS : I used a lot of these things for my [SamplerBox](http://www.samplerbox.org) open-source project. ___ PS2: Link to discussion on [Scipy's Github](https://github.com/scipy/scipy/issues/6849).
How does Sanic compare to Muffin? 
I'm pretty sure you meant Flask, but still I shivered at the idea of a website fully made in Flash. It's not 2000 anymore. 
https://github.com/zenwalker/django-micro
Ah, cool
&gt; I have never heard of muffin. I'd wager (s)he doesn't know.
You're welcome. Here's the [notebook](https://github.com/brycepg/notebooks/blob/master/Pypi%20Package%20Github%20Statistics.ipynb) I wrote it in if you are interested in how I did it.
I've ported code from Ruby to Python before and wouldn't mind helping out.
&gt; Can someone take this up and convert it to python code ? "Helping out" being the key here. 
Simply impressive. At least to these eyes. :-) I certainly can't understand almost anything but I promise I'll come back often to your code once I'm some months into Python learning. Thanks a lot!!
Hi /r/python, I posted this up here a couple of weeks ago; got some great feedback &amp; criticism which is now handled. I'm looking for another round of feedback. FYI I'm currently working with the guys who've implemented the GO library this uses. They're a smart bunch who are very passionate about testing, CD and CI. Truly hoping this can be of benefit to the python community. Thank you.
As a heads up, the keyword order for functions and attribute definition order for classes are both part of the Python language now, but `dict` being ordered isn't that's a CPython detail. 
I think you're missing something. The point of 3.x was incompatible changes. If the changes could have been made without being incompatible, we would be using python 2.8+ by now. Python 2.x and 3.x cannot converge, the aim is to get to Py3 ASAP to minimise the painful overlap.
NetworkX's graph drawing capabilities are very limited. Consider using [Gephi](https://gephi.org/) instead.
Ouch!
Take a look at [calibre](https://github.com/kovidgoyal/calibre), the ebook library management. It is in large parts written in python, maybe there is some module that you can just import into your own program.
I think that having two coexisting, incompatible versions of the language is a big pile of shit. I thought this was supposed to be a temporary process to converge into a solution.
So keep two incompatible versions of the language? Maybe instead of converging they should just deprecate Python 2.X I think that having two incompatible, coexisting versions of the language is shit and bad to develop tools and a community.
Support for Python 2.7 will be discontinued in 2020. The gap is provided to allow time for people to transition to 3.x.
It didn't talk about the new type annotion support for 3.6. Ex: int_list: List[int] = list() is now valid in python 3.6
Development for 2.x has stopped. You don't have to use it. No one is forcing you to do anything with 2.x. You could use 3.x just fine and never even know 2.x exists. Stop complaining for the sake of complaining and focus on more productive things. 
A generic solution is to use `subprocess.run()` to capture the output from an external program. https://docs.python.org/3/library/subprocess.html CPU-Z probably has an option to cause it to log to the terminal or make a log file on disk. On Linux you can just use `lshw`, `lspci` or `dmidecode` or something. On Windows, why not see if the Windows API has a call for this?
Why does a dict need to be ordered by default though? And wasnt OrderedDict already implemented in C?
Like others already told you, 95 requests is no big number in scraping world, you can do it in a single request with no issues.
You forgot to mention string literal interpolation is now in 3.6: https://www.python.org/dev/peps/pep-0498/
Use subprocess and use command wmic baseboard get product,Manufacturer,version,serialnumber returns on my pc Manufacturer Product SerialNumber Version Gigabyte Technology Co., Ltd. X99-UD7 WIFI-CF To be filled by O.E.M. x.x code example import os, sys from subprocess import check_output file = check_output(["wmic", "baseboard", "get", "product"]) line = str(file).split() moboinfo = line[1]+" "+line[2] print moboinfo if moboinfo =="X99-UD7 WIFI-CF": mobocard1 = moboinfo print mobocard1 print "mobocard1 is the new variable" elif moboinfo == "1000-UD8 WIFI-CF": mobocard2 = moboinfo print mobocard2 print "mobocard2 is the new variable" elif moboinfo =="222-UD3 WIFI-CF": mobocard3 = moboinfo print mobocard3 print "mobocard3 is the new variable" elif moboinfo =="444-UD5 WIFI-CF": mobocard4 = moboinfo print mobocard4 print "mobocard4 is the new variable" else: print "mobo info not found" 
The title misled me into thinking this was going to look at what's on the horizon post-3.6, but I was disappointed to find that it's just a reiteration of information available on python's home page.
It takes "battery included" to a whole new level. install_requires=['pytz'], extras_require={ "bcrypt": ["bcrypt"], "argon2": ["argon2-cffi &gt;= 16.1.0"], Basically, Django development is its own thing, something that even Zope managed to overcome.
i updated the script for doing some things if / elif /else EDIT: i added so if elif , then set a new variable. i would use check_output instead of running it.
Just a note regarding that project's maintainance: they committed a fix four days ago. https://github.com/revolunet/pypdftk/commit/3accf249dca7d0fb4dad70d353948436c64af43a
There's a ton of software built on Python 2.7 still, and even more that's not necessarily tied to the language itself, but built on libraries that are. Python 3 uptake has also been tremendously slow until recently. The gap seems reasonable to me.
OK, then it is good to have two coexisting versions. You, sir, are a true fanboy. 
In the bank where I used to work, we switched from Python to Java exactly due to that.
Yeah, actually discovered toolz last week. The lambdas are inspired and adapted from https://github.com/fnpy/fn.py . The real plus of Phi is the DSL and that you can develop libraries ontop of it by registering functions as methods, see https://github.com/cgarciae/tensorbuilder, a library for Deep Learning. Actually Phi was born out of TensorBuilder.
Getting output from a process in Python has never been easy IME (maybe someone has a better way). I dont have the code on hand but the last time i did this (in 3.5) i used something like process.run(&lt;command&gt;, stdout=PIPE).output.encode() Edit: if you have something like this that works, you might use .split(' ')[2] to split the string and get the 3rd element (or whatever is relevant for you) from the resulting list
Yeah I subscribe to it because I spent a lot of time using it in previous jobs. Many of the comments are people like me that try to answer the question but also give them an alternative to using Matlab. I'm not sure how that plays into this.
Do the [M101P](https://university.mongodb.com/courses/M101P/about) course if you want to learn the details.
Isn't the encoding determined by the filesystem though? Like their example in python 3.5: &gt; sys.getfilesystemencoding() 'mbcs' I see the same thing here and I've seen in [StackOverflow questions that you can not change this without environement variables or monkeypatching](http://stackoverflow.com/questions/20172002/how-to-change-file-system-encoding-via-python). If this is a property of the filesystem, how is python changing it?
lxml uses `dict` for storing attributes instead of `OrderedDict`. And i dont think `OrderedDict` was implemented in c, i could be wrong though.
&gt; that's a CPython detail. Lies. They sure officially claim that, but since CPython is a reference implementation soon enough people will start depending on this feature and when alternative implementations behave differently users will start reporting it as a bug. In the name of compatibility this *implementation detail* will carry over to another python implementations. IMHO this is pretty serious detail to not be defined as part of the language. After all `kwargs` preserves order and is a `dict`, but `dict` does not preserve order. How on earth that makes sense..
Technically it doesn't need to be Python, but I like programming with Python so it's a matter of personal preference. The use case is a sort of data mining and analysis. I guess I can look at the epub format spefication and so something from scratch (I think in the end it's some kind of xml document), but I thought there was already some good library
Basically they wrote all the tests first. Each "exercism" or little project or little practice problem is a test suite. They have a lot of the same exercisms across different languages but it's a nice way to learn how testing goes in general. You can read the test suite source to learn how and what is being tested. I would sign-up and take a look!
I know the program, but the code library seems pretty big. If this is really the case it would probably make more sense to just study the format specification. I was hoping for something ready to use
Wait. No string literals? Was that removed? Why would you not cover that. 
the author mentioned 3.7 and said it will be only beta release on 2017
psutil
Talk to a fucking farmer
Content spam
It is being like that for more than a decade, enough for it to lose a nice part of its user base. Ex. In the bank we switched to Java due to that.
http://www.urbandictionary.com/define.php?term=shill
What happens when someone figures out a new dict implementation faster than this one which is not ordered? It's not at all crazy, since it's one fewer design constraint. In that case, the current ordered dict code could become the base code for the OrderedDict class and the dict implementation could once again become unordered. It's not at all a crazy possibility. In fact, I personally would want them to make dicts unordered again if the implementation were better. If this comes to pass, I will definitely shed no tears for people like you who make use of this implementation detail knowing that it is not part of the language.
I agree. This would make a cool little program, for the sake of learning. However, IMO, the end result would be equivalent to spamming Reddit. Btw, @deplorablepatriot27, did you consider posting your question to /r/learnpython instead? It would be more appropriate.
working on automating database driven web apps and api's in flask with https://github.com/Leo-G/Flask-Scaffold
Libraries that weren't built with Django integration in mind are hard be integrated to work with the Django stack. For example using another ORM with django is impossible, at least to do it properly because all the django middlewares that need a database, use the django ORM which is limited only to a few SQL engines.
The following points make your code hell to maintain in the future: * Not every record has to be of the same nature, making it very flexible * Add new properties to data without disturbing anything * No schema requirements to adhere to * Support for ACID transactions can vary depending on which NoSQL DB is used (this is a big red flag!) * Consistency can vary Once you stop trusting your data, you spend so much time writing extra if cases to check if field X exists in the data, and branching code everything. These checks are scattered around the code base (front end and back end), making testing more difficult. Lack of transactions causes problems when certain ops fail. You end up with invalid incomplete data which is useless once the user attempts a retry, or even worse it prevents the user from trying again with the same information. That said, it is excellent for key/value(s) storage.
This should get you started on encodings of text in machine learning. http://scikit-learn.org/stable/tutorial/text_analytics/working_with_text_data.html Word bag should work pretty well. 
Yes, it's been only 15 years or so
Fairly new to Python, but I'm building a program to automate most of my job. Week by week, adding new functions and getting closer. Learning a lot this way by hitting regular roadblocks and reading StackOverflow. This week, adding functions to: * Pull available member types and setting details * Check for test users, and if none exist, create them
Use a dictionary. You can assign every letter as a key to a value which is the other letter. Also, you should check out the sidebar about asking questions. There's a better subreddit for a question like this!
RTFM .translate()
Eh? And middleware written with sqlalchemy would be easy to integrate with the Django ORM? Of course not. Your argument is pretty weak. 
.Translate() is a very basic function. Your nephew should be able to figure out your problem then too.
Answer OP's question and stop focusing on what other people are doing around you.
It's the worst thing about Python. PHP just got huge speed upgrade with 7, and the language is improving in a lot of other ways, yet old scripts still work in new versions.
Only the dumb ones, and you satisfy that requirement.
I feek like pygame takes way too long to develop games, and imo there are better frameworks one could use to make it easier like unity and C++.
Another person who cannot read the sidebar. Your newb questions are meant for /r/learnpython, not for this sub.
I have one up and running. No api! twitter.com/Int_Twit_Bot
I don't know the answer but maybe this will get you closer. That error is coming from the anaconda installer, not the OS. Here's lines 494 - 501 from the installer: PYTHON="$PREFIX/pkgs/python-2.7.12-1/bin/python" $PYTHON -E -V if (( $? )); then echo "ERROR: cannot execute native linux-64 binary, output from 'uname -a' is:" &gt;&amp;2 uname -a exit 1 The `if (( $? ));` checks for an error from the previous command. See what the error is by running `$HOME/anaconda2/pkgs/python-2.7.12-1/bin/python -E -V` yourself.
Personally python is my language of expertise. For me, learning further in python is my goal, hence importing a measly module is easier then learning all of unity or c++ quirks --\_(0.0)_/--
Good one!
Nice! :) I have looked at this data as well doing some other analyses, but I like that I can copy your queries for my own packages. I had no idea that Python 3 was so "unpopular". I actually have a lot of `null`. Compared to your sketched %, I'm happy my packages are "only" 70% vs 30% for python 2 vs 3, but still, I'd rather see py3 take the lead. My more recent packages actually have a slight lead for py3!
I get that you're [hurt](https://www.reddit.com/r/depression/comments/5d7rmb/they_tricked_me_and_i_lost_everything/), but this could have been [worded](https://www.reddit.com/r/Python/comments/5hy5dz/how_do_i_shorten_this/db3umhj/) [constructively](https://www.reddit.com/r/Python/comments/5hy5dz/how_do_i_shorten_this/db3uhwk/), not critically.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
There isnt always a sidebar...
Well, I don't think Python 3 is super unpopular per se (of course it is to some) there is a lot of Python 2 code that needs to be updated, and that can take a long time.
If you need ordering you can easily get ordering by using an OrderedDict
Depends on the details of how they implemented the webpage, but probably `requests`. And future questions like this are best posted to /r/learnpython 
Doesn't this belong more into r/learnpython or to https://stackoverflow.com ?
I did it two years ago. It was great and very useful.
[Start here](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-ordereddict).
[PEP 528](Change Windows console encoding to UTF-8) and [PEP 529](Change Windows filesystem encoding to UTF-8) will give you the background to these changes.
Libraries used for message queues
Last I heard 1.5 was still in production use so perhaps that should converge as well?
With the capital L...? That's some weird syntax.
Nooo now that I know where to find the answers it's going to be so much harder to not cheat. (;
`from collections import OrderedDict` It's there already, but this was an improvement to the C implementation of dict so OrderedDict is probably a thin wrapper around that. 
Loops (then you don't have to limit the input to exactly 5 letters either). Also, given this is just a Caesar shift, you don't need a lookup table. Use `chr` and `ord` with modular arithmetic. The trick to making your code appear correctly is to indent *every* line with an additional 4 spaces.
Fair comment. Depending on your file setups you could consider using generators, something like "Abstracting your iteration" from Ned Batchelder's excellent [Loop Like A Native](http://nedbatchelder.com/text/iter.html).
You're missing the point - `OrderedDict` is part of the spec, and is great. The correct way to write code that requires ordered dictionaries, even in Python 3.6, is to use `OrderedDict`. Many people won't, though, since they either A) aren't aware dicts aren't always ordered, B) rely on orded behavior accidentally, or C) think Python 3.6's dictionary implementation is something that's okay to rely on. Which is a problem.
True, but we'll just need to educate people when that comes up, just like opening files using `with`
&gt;Python 3.0 final was released on December 3rd, 2008. [src](https://www.python.org/download/releases/3.0/) fwiw. But your point is well taken.
I use it constantly.
Reserving the order of dict is fantastic, though I think 3.6 won't be available on ubuntu soon and it might be risky to use this feature until 3.6's prevalence.
If you're only after text, just unzip the file (epubs are zips), discard files by extension (css, images), and scrape what's left - it's just html. Library support is only useful if you're after metadata or manipulation (merging files, editing TOCs etc). ebooklib seems pretty ok for that and tbh it's banal to pick up.
I'd love some examples. The only things I've used it for are: * A dashboard app where I needed to associate server names with information but the order was important (wanted to show prod servers before staging and dev servers). Arguably a list of tuples works here too but there were plans at some point to look at individual servers so fast lookup was desirable (not that lineral lookup would've broken the bank, we're taking maybe 30 servers). * Modeling albums - again, a list makes sense here and you can look up by track position that way. * Maintaining order of attribute declaration because you could decorate methods as validation/processing but they needed to run in declaration order. But that's it. I get why an insertion order mapping is attractive, but I've only met one situation that demands it (maintaining attribute order). 
There is already OrderedDict, which is occasionally useful. The big change here is that if you iterate over a class's attributes, or over the keyword arguments passed to a function, you get them in the order that they were defined/passed. At the moment, you basically get them in a random order. Preserving the order of class definitions can be really useful. For example, it lets you use a python class to represent something like a database record or a C struct where the order is important: class Record: id = IntField() name = StrField() ... And it makes it easy to specify what order tests should be run in: class MyTests: def test_one_thing(self): ... def test_another_thing(self): ... You can already save the order using a metaclass, but metaclasses are a pain. The main use I know for the keyword arguments is making it easy to create OrderedDicts: od = OrderedDict(a=4, b=5) That syntax already works, but the order of the two keys is random. In 3.6 `a` will always come first. I'm sure people have other uses for this.
you want to log into a webpage, sounds like you need selenium for it. http://www.seleniumhq.org/ 
oops, (fwiw I still mostly agree with you, 10-15 years of support is common in the enterprise space. I know places that still use &lt; 5, and I've worked at a place that uses 6, which is *older* than python3)
Is there any other python alternative to pygame? I heard Kivy was good.
Got it! Thank you. 
Are you talking about aquiring the data or analysing the data they have already collected?
It's a bit of a hack to avoid collisions between `typings.List` (used for the type checker) and the `list` built-in so they didn't have to make the list type (and similar others) subscriptable. There was a mypy competitor that had better syntax iirc, but since the mypy syntax has been standardised it's basically been declared the winner.
Can you please show me an excerpt of what a GET and POST Tornado WSGI handlers look like, with decorators, or better yet point me to a working open source application demonstrating them?
``null`` typically means the mirroring infrastructure, but it can also mean older versions of pip that did not report the version of Python being used.
For me it's definitely ease of running the application. I don't care if people see my source code, but if I write a simple program for a friend using windows I don't want to have to walk him through installing python, setting up `.py` double click associations, and so on.
When is ordinary string concatenation inferior to any of these formats?
Thank you for the reply... that is why I love this community. Even when I have broken a rule, you still take the time to answer, and politely point me in the right direction! :) 
you ain't going nowhere Tyler Lee 
 from __future__ import print_function import string rot22 = string.maketrans( 'abcdefghijklmnopqrstuvwxyz', 'fghijklmnopqrstuvwxyzabcde', ) if __name__ == '__main__': print(string.translate("Hello World!", rot22)) 
Why? Is it really harder to read? Less efficient? I'm seriously baffled.
Crying apparently. 
IBM MQ
2.x is compatible with it, so no reason. 3.x is not, so there is a reason. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
True, but don't you know how people are. Now some people will not even discover OrderedDict because there will be no need to. Dict staying unordered I would definitely hate as it will ease my life now, but it would bring in more certainty in.
I see you are liberal cucks...
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
That's a nonsensical thing to say. If anything, removing posts because they don't follow rules is more fascist than liberal.
Whoops, sorry about that! No worries at all, and thanks for letting me know.
It's an ad for a Udemy course.
Well.. the syntax is not unique but the implicit inheritance *is* unique to 3 
&gt; Nooo now that I know where to find the answers it's going to be so much harder to not cheat. (; The puzzles in last few days seem much harder than the first ones, so you don't need to worry too much - there might be no new solutions in my repo for a while.... :D
Thought I'd just share it because it was very difficult to work out how you're supposed to create python objects like datetimes and also return ValueErrors if something fails. After finding a few odd examples here and there, I finally got a proof of concept out that parses isoformat datetime strings in rust and returns a datetime object. I didn't end up getting that much of a performance boost at all, just 1.325 times as fast. I probably could improve that if I understood it a bit better, maybe just returned a tuple, but I like it this way personally because it shows how to construct a datetime object and return it. It seems like there needs to be a lot more examples out in the world. I'd love to see python programmers use a bit of rust to improve performance in critical areas! cross-posted from /r/rust, [comments here](https://www.reddit.com/r/rust/comments/5i2nr0/example_of_a_simple_python_library_written_in_rust/) EDIT: FYI, a user from /r/rust went through the source in detail and [posted his improvements here!](https://gist.github.com/anonymous/ad12c2e4f3ba1f90cc6addc1fb2348ce) It looks way better after their changes.
I just return the empy tuple because when you write: if tuple, and your tuple is empty, it returns False anyways. edit: can't say anything about which is better though.
yes, thanks, that would make sense
You could skip the part where your program gathers data and just hardcode some testdata into your code.
If you use `requests` there are a lot of libraries that can help you cache the responses[1]. alternatively you can write your code in such a way[2] that it doesn't care about whether the data comes from a HTTP request or a file. In the second case you can simply store the response from your HTTP request somewhere and read off the file when your program starts. [1]: Havent tried it myself but looks good: https://pypi.python.org/pypi/requests-cache [2]: If you have time: https://www.destroyallsoftware.com/talks/boundaries 
So take the part you are working on into a different file and feed it test data? Could work for simple stuff but it would take more time to implement test data and checks for every part of the development. Maybe a debugger is a good option
Thank you for responding, the gathering web data is just a general example. The main question is if I can test parts of the program without having to run the whole program every time. A debugger might be helpfull in this?
How about the Python command prompt?
As other people have pointed out: please don't rely on dicts being ordered. It's an implementation detail of the new version of CPython, not something that the language requires. Other Python implementations, and future versions of CPython, may implement dicts in a way that doesn't preserve order. If order is important, there is OrderedDict.
You should separate your code into different parts that do different things, for instance one makes the request, one calculates some metric based on the request, etc. then you can test those functions easily even at the Python REPL, or by writing a test script (see unittest, pytest). PS: You should not consider manually using a debugger as a long term alternative for a test suite.
You need Unit Testing. 
if `fx()` changes state, then the latter. But the following is fine, as long as all `fx()` does is compute something and return it: y = condition or fx(n)
&gt; I wouldn't expect much speedup here, though, because datetime.strptime is already implemented in C. OTOH strptime is a general-purpose date parser and does error checking, the replacement function uses fixed offsets and performs very little error checking (just that it finds valid numbers at the specified offsets, it considers "1111111111111111111" to be just fine an encoding for the 11th of November 1111 at 11:11:11). On my machine and compiling "fastdtparse" with optimisations enabled, it's 6 times faster than the stdlib (well 4x using the provided bench script, replacing that with timeit yields 6~7). A ratio of 1~2 is what I get for a debug build.
Well, yes, I just assumed you wanted a workaround for this specific case.
If you're exploring data, you could try to look into jupyter notebooks. Any variables you create will stay in memory while it is running, and you can try different strategies on the data you have collected. Of course, after you have everything working as you want, you have to copy the code to a proper python file. Note that this does not replace the need for unit testing as others have suggested.
A call to arms from RH for people to contribute to the Python core. A few topics: - Lots of nice examples showing what can be contributed: - Not just writing C! - Quite a lot of undocumented code in the core - Frequently used modules such as `pprint` are elderly and in need of updating - Code reviews are needed far more than new contributions! - Need greater diversity within the core dev team--'normal' python users would be great, as they don't just spend their days staring at the core. - Creating a PEP is not the same as getting a PEP into the core - API design is the most significant challenge - Some excellent examples of poor designs that have either been rejected or made it into the core!
For certain projects (I'd webdev wager a bet most projects), yes Django is an excellent choice. For this project, no it's not. This project plays to none of Django's strengths. No database, no user system, probably one view. Flask is a much better fit here. 
Tinkering is fine, but we like our stuff pre-tinkered and documented by highly trained tinkerers.
/r/learnpython
Here's the thing, all of those packages are made by highly trained tinkerers (well, I'll reserve judgements on Flask Allows) and they choose you'd write that you wouldn't with DRF is authorization with Flask-Login. And if you're doing anything outside of Basic, Token or Session authentication you'd write that any ways. Here's the last bit of glue you'd write: from flask_login import LoginManager login_manager = LoginManager() @login_manager.request_loader def token_auth(request): auth = request.headers.get('Authorization') if not auth or 'Token' != auth[:5]: abort(401) token = auth[6:] user = ... # fetch from wherever if not user: abort(401) return user That's pretty much it. 
It is a .com address and not a github link???
This may help: https://github.com/SiLab-Bonn/pyNumpyCythonExample or something like this: https://github.com/SiLab-Bonn/eudaq2np/blob/master/eudaq2np/wrapped.pyx http://stackoverflow.com/questions/23872946/force-numpy-ndarray-to-take-ownership-of-its-memory-in-cython 
NO
/r/learnpython
They're one in the same for this list ([GitHub repo](https://github.com/vinta/awesome-python)).
I prefer the second. The 'or' cases look too much like control structures to me. Explicit is better. 
I would change your second example to `y = default_value if condition else fx()` More pythonic. 
Could use Pyglet and Arcade under game development. Too lazy to do a pull request.
Well, I want something that works similar to python list but instead of containing 'objects', it would contain objects of a cdefined class. Right know I am storing in a python list so I can't get rid of the GIL.
the problem i was having is i cant get my projectile to work. I want it to be drawn and move forward from where the player is and get erased when it hits something like a wall or the score box but i'm not sure how and my teacher is no help. (Right now it just draws in the center of the window and slightly above the score box.)
I agree.
Learning enough to be self sufficient is a 4 step process. 1. Learn the basic syntax 2. Learn to find information 3. Learn to properly ask questions and why you shouldn't 4. Practice to build on existing knowledge The first three can be accomplished in very little time. The basic syntax is not very extensive and can be learned in a few hours of focused study. You don't need to know much to start programming, the basics are fine. Finding information is easy with Google, Stack Overflow and the documentation, both official and third party. I recommend you bookmark valuable or commonly used resources. Organization is useful here. Asking questions properly isn't difficult either. Research your question first, then form a question that is concise, specific and sufficient. Be curteous to respondents. If you are unable to find the answer in your preliminary research, do more research. The answer to almost any question you could have already exists. Don't expect others to spoon feed you or hold your hand. No one will. If the answer doesn't exist, you have found a bug, a deficiency, or a project idea and will already know how to proceed at that point. The last step is easy. Try new things, fail miserably, and learn from your mistakes. Welcome to programming.
do any implementations evaluate the other side of the `or` if the first one the true? That seems pretty inefficient to me
I have too many tabs open now! Awesome list, thank you!
I don't want to be picky, but do you think you could comment/document the code? For a Python user like myself who has no understanding of actually writing Rust, it would be even more helpful. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
awesome list of awesome python resources
Or, the list of what Google will give you if you Google the category + the word "python".
&gt; It’s a known fact that every site has a common set of functionality (like handling sessions [snip]) that you need to re-write each time you create a website Not true. I build session-less APIs all the time, so there's not a 100% need. Moreover, since sessions can be modeled as cookies (which are transmitted via headers) technically every WSGI framework can do sessions (whether it's as easy as django is a separate matter). &gt; With Django, it’s easy to generate a Python API based on your models. No additional coding required as a simple command is good enough to begin generating APIs. How's that? Last time I used the startproject it just generated a skeleton file structure. &gt; In contrast to most web frameworks, Django makes it easier to plug new capabilities in your product by using things called applications. As a result, developers feel encouraged to write code that is self contained. I'm not sure what Django projects this person has been looking at, but all the ones I've seen that weren't plug in apps had their business logic smeared across controllers, templates and Django ORM Models &gt; So, no hassles of dealing with the Structured Query Language (SQL), which is mostly used to query the database for the data needed. Flag on the play, you should be comfortable with SQL if you expect to make better than "Eh, it works" use of your ORM &gt; Unlike many other Python frameworks that directly work on the database via SQL, Django developers have a unique option to manipulate the corresponding Python model object. Wrong, literally the graph above this paragraph shows using an ORM with Flask. &gt; Django works out-of-the-box with relational database management systems like PostgreSQL, MySQL, SQLite, and Oracle. I'll rate this half-true as it does work out of the box with *drivers* for those databases, but those need to be installed separately (except sqllite) &gt; It’s difficult to properly read URLs developed in PHP os ASP. I integrate with ASP.net APIs at work and their URLs are super simple to read. It's possible to do with PHP as well but you need some re-writing on the server side last I checked. &gt; With Django, you can create simple and easy-to-read URLs, which is good for both human beings and search engines. You can create readable URLs with other frameworks too, but none is as easy as Django is for URL construction. Really? Here's django and flask side by site: * `r'^/(?P&lt;year&gt;\d{4})-(?P&lt;month&gt;\d{2})-(?P&lt;day&gt;\d{2})\(?P&lt;slug&gt;[\w-]+)/$'` * `'&lt;int(fixed_digits=4):year&gt;-&lt;int(fixed_digits=2):month&gt;-&lt;int(fixed_digits=2):day&gt;/&lt;slug&gt;/'` The only difference here is that the django route is a regex so you need to be aware of what all those symbols and junk mean. I'll admit that having url routes being regex literals that I write, I can restrict stuff pretty easy. The flip side is that Flask gives me an abstraction over the regex it produces and I further restrict things like this: `&lt;int(fixed_digits=2, min=1, max=12):month&gt;` you can do that with Django's regex but it'll quickly become a mess: `(?P&lt;month&gt;(0[1-9]|1[012]))` -- are you sure that's typed right? I'll admit that out of the box, Django's routing is probably more powerful if you're good with regex (I'm not) but Flask/werkzeug allows you to design you're own matchers so with a tiny bit of code, you're back in the game. &gt; If there is a table missing in your database, you can automatically create it by executing the migrate command in Django. SQLAlchemy will do this and Alembic will handle migrations. I'll caveat this with it is very nice to have this built into the framework and no extra code is needed to create and run migrations. This makes automated deploys super easy. Overall this seems like a 6/10 article, there's just a lot of misleading things stated.
Some people 1) have a family and 2) work for a living. 1-2 hours a day is a lot to spare for someone with real life commitments.
No hacking or JTAG libraries? I saw scapy under hardware. I think I've seen web proxy/MITM in python...
"work for a living". And you think programming is not a job and programmers don't work for a living? That's quite an attitude. From your initial post I got the impression you're a young guy possibly student who wants to start on this road, wants to accomplish some things but doesn't think it's worth that much time to invest into actually learning how to do it. Now I have an even worse impression. You're a not so young guy who has no idea about programming, wants to start now, wants to accomplish stuff but without investing too much time because he doesn't think programming is to be taken seriously. Just a bunch of guys having fun coding some scripts and talking on reddit, that's all there is to it, while other people actually work for a living and have real life commitments, can you imagine that?! &gt; 1-2 hours a day is a lot to spare for someone with real life commitments "real life commitments". I took this as an insult, as if programming is not a real job and programmers don't have "real life" commitments. Look around you, everything you see around is possible because of programmers, I'm sure you realize that and I don't have to list the things you wouldn't have access to or wouldn't exist if it weren't for software engineers. If you threat it like a 2 hours a day hobby don't expect too much. Maybe you should have formed your question differently. Just start with the first steps, learn about programming, see how you feel about it. You might get far enough to see that it's not what you thought it was, like something you do in a sunday when you have an hour of free time and don't know what to do. It's actually complicated work that I'm sure for the moment is fully beyond you, which is probably why you threat it with such disrespect. Or so I felt.
I really like Raymond, it's just that (naturally) this "recruitment" (and the same jokes) were already in another video :(
Python on rails! Just kidding (grabs shield). 
I'm actually curious about this but the writing style is completely insufferable. 
I'd like to recommend SQLAlchemy under database driver. It's a fantastic object model for working with databases 
7 years for ... that? Really?
Another way to do it, is you can dynamically construct your query in SQLALchemy bit by bit using Python, first put the columns you want to select in a list, then do something like query = dbsession.query(*columns) and then dynamically build up the rest of the query bit by bit using query = query.join(....) etc.
Kudos to the team for getting this done in 2016... this year sure needed some positives!
I would suggest posting this to /r/learnpython.
I found the better option to be an association proxy built directly into the model class with aggregate functions that return dictionary-like objects, resulting in data like `products['warehouse1']`, and `products['warehouse2']`. But again, it sucks compared to doing it with pandas/numPy. The time and performance investments just aren't worthwhile for most cases.
You are a genius
Depends on your background and existing knowledge of other languages I think. First language, it'll probably take longer. Otherwise you'll probably pick up on it from piecing together similarities from other languages you know. As a reference, I only knew the basics for small scripts. My current job tossed me into programming full applications with Python, and I feel it took me about a month to not have to reference things.
Second one is pythonic since is explicit and more readable. First one reminds me what you would often do in Perl.
well just to let you know i do not have a job and most of my time is spent with school work. i do have another hobby, music production, which WITH ONLY 1-2 HOURS A DAY TO SPARE i have really gotten fit to... so sorry not everyone is a programming genius like you or wants to aspire to be one... but yes it's only worth 1-2 hours a day and i feel that will be sufficient as i each of my classes is only 1-2 hours a day and i have mastered those :) 
thanks :)
thanks :) 
I see nothing wrong with `condition or fx(n)` outside the fact that the `fx(...)` function name sucks. If it was `is_dict(...)` or 'is_value_ranged(...)` or something similar that indicates it returns a boolean, I'd say go for it. The second case just does nothing, so I assume you just didn't type an if condition.
Are there things you would like to see? It's not 7 years of people working on some great goal, it's 7 years of occasional bugfixes and minor additions that finally got rolled up into a release. And Python 3 support was added somewhere along the line.
I would remove the chunksize option. The documentation (like almost all python documentation) utterly fails to say what that argument does, but it probably cuts the big list of filenames up into separate lists and sends each list to each subprocess, instead of giving one entry to each worker in a round robin fashion. The purpose being to reduce IPC at the expense of load balancing. If your chunksize is 1 then each subprocess will report back after ever single value computed, and that will add some overhead in terms of IPC and locking, but that time is probably insignificant relative to the time it takes for each subprocess to do the work on a single input. In other words you want to use chunksize when your subprocess function is something small like computing the square of a number, but you don't want to use chunksize when your subprocess is something complicated that will take a variable amount of time. Even in applications where the subprocesses are reasonably quick I wouldn't think that a large chunksize (above NCPU) would be useful.
https://github.com/gae-init/gae-init could be added :)
https://github.com/gae-init/gae-init could be added :)
"I know in C..." I doubt that: the language semantics state explicitly that `||` and `&amp;&amp;` are short-circuiting, and no compiler is free to change *that* (unless doing so is harmless/undetectable). Things that compilers *are* free to implement as they see fit are left undefined by the (C, C++) language spec. For example, evaluation order of subexpressions: most languages guarantee left-to-right eval order, but C/C++ leave that undefined. E.g. after `int x = 1; int y = --x + 3*++x`, `y` might hold 3 or it might hold 7; each is legit compiler behavior.
Yeah. It is just to show how simple it can be done with a library like pandas compared to going row per row in csvreader. But it's not a problem for either of us really, there is no problem. I just find it weird how at one point he must have been excited to learn new things and try new technology (compared to sticking with just Excel or his initial programming languages), and now he is opposed to trying anything new haha
FWIW the technical term for it is short-circuiting. Evaluation of OR and AND statements can stop if the first item is TRUE or FALSE respectively. Operators short-circuit in almost every modern language and you can rely on this behavior.
I use sublime text and jupyter notebook mostly, but I did seriously subscribe to PyCharm out of my own pocket haha. I have to admit that I finally did it just to annoy him a bit. It was funny showing him how easily I could commit to bitbucket and package my library and stuff though. And be able to query our DBs directly in the same tool. It is actually quite nice.
Yeah, I find it interesting because at some point I assume he was a person who used new tools. Like instead of Windows he learned Linux, instead of Excel he gained skills in data analysis with Python, etc. I guess for some people, they just become stagnant. There are a few folks in my company who are Excel and VBA wizards but do not know any SQL or other languages. I guess they figured Excel could do everything but now I can replace a lot of their work with Python and other tools.
the `condition` *is* the default value in his example.
obvious omission: [aiohttp](http://aiohttp.readthedocs.io/en/stable/index.html) from asyncio import get_event_loop from aiohttp.client import get async def main(): async with get('https://api.spotify.com/v1/search?type=artist&amp;q=snoop') as resp: print(await resp.json()) get_event_loop().run_until_complete(main())
I'm still not convinced about using ORMs. It seems like ORM tries to make database relations match objects in programming languages while to me it seems like the programming language should be adapted to allow writing declarative code. What I really wish is that Python would have something like [JOOQ](http://www.jooq.org/) (scroll down for examples). Where you first connect it to a database and it generates source files that represent the database relations. Once that's generated you can write (in case of JOOQ) in Java code that is similar to SQL using generated objects and benefiting from type checker. Seems like python-sql is trying to do that, but looks like it is no longer maintained.
I've previously steered people seeking advice away from PyGame due to terrible troubles I've had getting anything to run under Python 3.4 or 3.5 (can't recall if I tried 3.3) despite confusing instructions everywhere on how to attempt that. Though I am a big Kivy fan, PyGame seems to be a very friendly community, and I'm excited to give it another go. Perhaps it will turn out to be a fun option! :) Congrats on the release, everyone!
Part of the trouble was the lack of a release, and another key part is that the website is out of date. My next goal is trying to do something about the website. The challenge is that only one person seems to have access to the server, and we haven't been able to get in touch with him for several weeks. So for now, ignore the downloads page of the website!
That use of `or` aligns with bash scripting and Perl idiom. In fact, all perl `if` statements are internally opcoded as `(expr) and (expr)` chains. Most pythonic is two lines, since python favors each line to have its own purpose. Python added the unusual ternary syntax to be consistent with list comprehension conditionals.
Trying to wrap my head around what is developing into a very intertwined database that will be used to test an "algorithm" I'm working on. Too many many-to-manys!
Just starting to read the official Python docs and playing around with the language to learn it. I want to contribute to Cuckoo Sandbox or other malware analysis tools written in Python.
I probably have zero of the skillsets for working on the library itself, but I am an experienced web developer, so if you get the site into a state where you can accept pull requests and maybe even integrate those into a build system, please consider a call to arms of some sort. I'm sure a lot of friendly professionals could help with that. :)
Nice
Sqlalchemy has three big parts: dbapi abstraction layer, a declarative layer, and an orm laryer. All list you mix and match, and the declarative layer sounds exactly like what you described. 
co.py, but it wasn't original.
I'm just commenting so I could come back to this. Shitty reddit official app. Messes up the upvotes.
ITT: It's impossible to estimate.
Cmon I'm sure it was s.exe
My favourite was a program that used a random distribution of dots to calculate the circle constant. pi.py
Nice! I like it. What sort of back end did you use to make the website? Looks very clean. 
Django!
Yes, it is almost entirely default bootstrap. You can look at the custom styles here: http://ruadick.com/static/css/override.css
It dinged me for mentioning the Kingdom Death kickstarter, and quoting Santa Claus from CBB. All in all I'm slightly positive.
shit...
This is great! 
*claps along feeling like a room without a roof*
The algorithm could use some work. My worst comments are not what I would consider to be my worst!
I used it for fuzzy word matching. It is great and easy to understand. I used it on my project [here](https://github.com/BlitzKraft/PocketMortysRecipes). [Pocket Mortys - Recipes]
Congrats!
To get an all-around experience with python, I might recommend bulding a web page with flask &amp; sqlalchemy over postgres. you can run the flask dev web server on your machine really easily and see the site in your browser, so you wouldn't have to worry about hosting or setting up a real web server. you'd gain a lot of practical experience with python and learn a lot about how to take advantage of the ridiculously rich ecosystem of open source python packages 
This is lovely
I don't plan to but there really isn't magic to it. I just connected the PRAW (Python Reddit Api Wrapper) with the nltk sentiment analyzer. The Vader module is really where the magic is!
I'm not OP :)
Well it doesn't work I can tell you that. It said I'm slightly positive but I'm totally a dick. Sometimes so much I feel bad
This is the use-case for if statements. Don't be clever.
&gt;39 of 180 Ranking Woo! I'm *very* positive!
Woohoo, I'm slightly positive!
For those of us still rather new to nltk but knowledgeable about web development, having your code as an example would be a big help. Besides, if you put it on Github, it'll add to your nerd cred ;-)
How do I avoid this in this case?
depends on your "projects" small scale and one off or specific element that you want scrap bsoup +requests able to do it just fine more complex? go for scrapy. easier to maintain if your project getting bigger
I'm mostly neutral. As it should be. Interesting that some of my most negative comments are ones talking about games, since they feature violence, even thought the message itself doesn't contain a negative message. Anyway, cool site, man. =)
thanks =)
Cool, when I looked at SQLAlchemy for the first time it seem too complex at first, but I did not know that there are multiple somewhat independent components. Thanks, I will look more into it.
I meant that 200k is a TON of money for one person, for any job (in my perhaps unusual view). It's just incredible for me that people make that (but obviously make even more). 
Haha did you read the rest of the comment above? I called it!
My most negative sentence: &gt; I'm writing a fantasy setting where "pure evil" is basically absent, but racism and political conflict is a serious issue.
SUPER AWESOME ;) FUN :) TIME THANKS!!!
You should do it for Worldstarhiphop instead.
fixed. Thanks! http://ruadick.com/user/automod/
No problem. Nice program by the way!
Upvote. Will test soon 
I'd think that your sentiment analyser is determining the *sentiment* of comments and not whether they are dick-ish. Plenty of my comments that came up were negative in sentiment but certainly not something a dick would say. I'm working on a classifier at the moment that detects *insults*, which actually would be used by dicks. Perhaps we could work together.
&gt;I'd think that your sentiment analyser is determining the sentiment of comments and not whether they are dick-ish. 100% correct
This was my immediate thought when I saw I was 80% neutral.
Your algorithm needs work, but it's a cool project.
This is not based on upvotes/downvotes.
Very good invention, it's missing sarcasm detection btw. 
http://ruadick.com/user/phillypede/ /u/phillypede inaccurate
There are a number of better suggestions, including returning None or an empty tuple(). But no one really explains why this is better. Functions that have a boolean nature tend to return True of False. Occasionally you want a function that has a True / False / Maybe type response, where you have to implement Maybe. But in your case, you haven't defined any behaviour for `True`, so much as you've defined behaviour for `not False`. This exact behaviour is much more explicit if you use `None` and `not None` instead. Better yet, the empty tuple() is of length zero, so is treated as None or False in the condition testing portion of your code. But it might not even need a condition test. For example, if the first thing you do after you get your records return is iterate over them, then returning an empty tuple might simplify your code. For example, if your calling code looks something like this: records = do_table_lookup() # returns tuple for record in records: print(record) In the above case, returning an empty tuple causes your loops to never engage.
I have a bunch of things that I want to work on but can't, one day I'll get around to doing them
At least I'm tolerable to someone lol
Netural: Suppose I'm a True Mortal
Mine was pretty crap.py
Jeez, rude
What makes a man turn neutral? Lust for gold? Power? Or were you just born with a heart full of neutrality? 
The second one. The first is too clever: you're using an expression for its side-effect instead of its result.
You should ignore quotes before rating the comment. Anything starting with "&gt;" should be stripped out.
A bit more cheer could be used to win this comment a more positive score. "0.8204 So no I'll just take my tacos home before I eat them so as to avoid causing road rage." My most positive score was:... Here we go, " your most positive score sentence: 0.9186 If they aren't busy they usually love it or will redirect me to someone else who is great at it and loves it." Cheer, beer, and agape love y'all! I have to go check my new happiness level. 
My most negative comment according to this is: &gt; Dumbledore comes back from the dead though to steal the Crystal Skull before Indiana Jones gets there, before selling it to Eragon