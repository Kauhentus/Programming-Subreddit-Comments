If you have Windows 10, install the Linux subsystem and do it in there... see [here](https://msdn.microsoft.com/en-us/commandline/wsl/about) for the docs. It's intended precisely for situations like this. (I'd recommend getting the Creators Update first, as it improves the Linux environment significantly.) 
Well, search and replace is nice, but an IDE won't get you much further, especially that there are other hallmarks of bad code. I'm doing the same thing with a package with thousands of lines in several modules. To understand the functionality and the logic logging helped me most. I'm logging everything into a file. I have a decorator for logging functions and methods. I add additional logs all around the code, so I can follow what, how and when it's doing. Info level to follow code logic, debug level to take a look at data. Most of the functions don't use arguments, but occasionally I'm able to call a few functions and methods with fake data in separate test modules. Like I import everything, add the dependences, like constants, imports, etc... and try to isolate functionality. I have saved results from several runs before and can compare if I broke something refactoring. Also I regularily run the code before after to have control results and compare new and old outcomes. Unittests are the next step. And to find bugs the pdb module is really good, executing code line by line and getting any info I want. It's very easy to get lost, but if you figure out what you want to check and narrow a problem down to that part it can be a lifesaver. And keep an atomic log of every change in Git, of course
To learn java?
I'll add it to my messaging collection 
Correct me if I'm wrong, but I think the conda environment.yml won't install pip packages when used to create a new environment. Also I haven't found a good solution for deploying with custom non-conda wheel files. Maybe a custom channel/package repo or something. 
Why would you use this instead of docker? What does anaconda do that docker does not? **Edit:** Ok, I see that Anaconda is a Linux image with a ton of Python packages pre-installed, and with a custom package manager. I still don't see the benefits over using a minimal Python docker image and pulling in all that you need via a single "pip install".
Well, if you're paying attention to reproducibility, you're *already* caching the data is directly plotted, so really the solution is just to isolate the specific code that translates that data into a plot. Then, you can re-implement that code in any language or framework you'd like, depending on what suits your needs. It could be Python, it could be d3.js, or could be hand-made in Tableau, whatever.
What about deploying a Django app with this method?
There is no point in using Python if you don't take advantage of the power that it offers, consenting adults and all that. [Here](https://mail.python.org/pipermail/python-list/2017-April/720786.html) is what the main Python mailing list thinks of the proposal.
Look up eliza. It is very simple, but supposedly it has been used by people who really thought it was helping them.
http://0.30000000000000004.com/ will explain this to you
It looks like you can create a PyQt app with the commercial license and use the LGPL version of Qt. The app will use dynamic linking after all. https://www.riverbankcomputing.com/commercial/license-faq https://www.qt.io/licensing-comparison/
PyCharm is able to change variable names, it's well worth learning how to use it.
http://lmgtfy.com/?q=Java+for+Android+app+development
&gt; but in practice the GIL totally screws that up. do you have benchmarks? mine are here: http://techspot.zzzeek.org/2015/02/15/asynchronous-python-and-databases/ in my test, which is about a very specific scenario e.g. using async for database access which IMO is not the appropriate use case (for HTTP requests, it is, but I'd use gevent), gevent competes well with threads but asyncio gets destroyed. asyncio, being a function of the already slow python interpreter and introducing lots of very python-expensive programming patterns, can't approach the speed of native threads with all the overhead it adds to context switches. I'm told that asyncio has been sped up a lot since my post here, however. I wrote these because I've never seen any benchmarks comparing asyncio to threads anywhere. Occasionally I'll see some blog that compares asyncio to not using any threading or concurrency at all, but that's about it. For the amount of crowing about asyncio's speed, there should be benchmark blog posts *everywhere*, the whole world should be working very hard to understand the speed / performance implications of asyncio / gevent / threads all over the place, because it is almost entirely unstudied. But that's not the case - asyncio enthusiasists just want to use asyncio, and my theory is, that's because of A. javascript and B. unfair FUD about threads being an antipattern spread mostly by one blog post that I think I took down pretty well in my rebuttal (or at least nobody has rebutted my rebuttal - the whole issue continuously drowns in disinterest, which again points to, people just like the asyncio approach for how it makes them feel). 
Thank you. It was actually funny but I understood your point. 
Thanks! I have no formal CS training and am almost exclusively a hands on learner, so these repos should be really helpful! 
yeah sure, just thought about starting with this, and then moving to 5. thank you.
What? How are you using a non coroutine library to benchmark asyncio? That library doesn't even support python 3.4. Or that's the pymysql I found on google. Didn't see a link in your article. You ought to compare a threaded C extension with an asyncio c extension, like https://github.com/MagicStack/asyncpg/blob/master/README.rst But heres a video showing the GIL battle with threads: https://youtube.com/watch?v=ph374fJqFPE
You can specifically tell conda to search for a set of packages on different channels, and that includes pip.
Try downloading python and trying again.
Talk to your professor
Send the author a message. 
No, the libraries are definitely not set in stone! I would be glad to have a look. Thanks for the help
You shouldn't pass floats to Decimal though.
Hm. Depending how big are the csv, they can be long to load, but it doesn't explain the difference between python/ipython... Have you tried running the file with python myfile.py and ipython myfile.py ? I am curious to see if it comes from spyder or the interpreter..
Here is the code: https://pastebin.com/ShKCbNpq In order to have a try, install remi lib https://github.com/dddomodossola/remi
Beer!
I think you meant coffee.
My bad. Good luck dude.
PyCharm 
&gt; How are you using a non coroutine library to benchmark asyncio? That library doesn't even support python 3.4. what is "that library"? here's the asyncio test using aiopg: https://bitbucket.org/zzzeek/bigdata/src/fc3f03f7416e62ded192487ff1c70f4eb77e6788/bigdata/suites/row_by_row_asyncio.py?at=master&amp;fileviewer=file-view-default
Maybe in linux is no big deal, but in windows deploying anything using numpy or compiled stuff using just pip is just a no-go.
Thanks for the correction on iterable objects, that is actually right. About suspending iterators, you can definitely do that in between calls to .next(), but the whole point of having asynchronous iterators is that you can suspend them while performing IO, right? With a synchronous iterator if you perform IO the whole thread is blocked until it yields a result. It doesn't really matter if you swap context in between calls to next in that case, and that is why ```__aiter__``` was introduced in PEP 525. Note that the PEP is for Asynchronous Generators, not any iterable. Any other kind of iterable (read, non-generators) should already have all the data available when iterated over, so asynchronicity (does that word even exist?!) doesn't really matter in that case.
It is on a VM. Thank you. I'll start researching.
What methods have you tried? I just whipped up a simple solution in maybe 20 seconds! i can share but want to see your ideas first.
ok no problem. So first off this is a JSON object. I've tried things like moves = (response json) object = [ { k:v for k,v in move } for move in moves } for move in moves: list = [] list.append(dict(move)) print list and other variations of these but I just can't seem to get the result that I wanat. 
huh. first off naming your list 'list' is bad idea, not sure if that actually works? list is a keyword in python AKA you cant use it for variable names etc. here is what i got, looks the same as the dude below me /u/nmyster In [1]: d = {'a': 1, 'b': 2} In [2]: dict_list = [] In [3]: for k,v in d.iteritems(): ...: dict_list.append({k:v}) ...: In [4]: dict_list Out[4]: [{'a': 1}, {'b': 2}] Also, dict_list. reminds me of a certain ghostbusters scene. I giggle saying it. DICT_LIST.
I built a docker-based deployment pattern, using this described approach available here: [docker-tinyconda](https://github.com/rothnic/docker-tinyconda). I don't see it as either-or and definitely wouldn't want to use conda only because you still can have interaction or incompatibilities between the environments at the os-level.
It does install the pip packages when using it this way. But you have to use this exact approach.
thanks to both of you. I didn't know you could use "for k,v in d.iteritems(): as a for loop like you have. you can see I tried to use the list comprehension but just wasn't producing the right result. Thank you both for teaching me something new! 
Mentioned this in a reply but wanted to re-iterate because multiple people are saying, why conda or docker. I came to the conclusion to use both and described the pattern and reasoning here: [docker-tinyconda](https://github.com/rothnic/docker-tinyconda) Think of conda like a cross platform apt-get. It can help make installing dependencies across platforms more consistent, but you can still end up with os-level incompatibilities and packages that exist only on certain platforms, which is why you should use docker to isolate your application dependencies when possible. This gives you an environment that you know for sure that your application will run in. This is an issue if, for example, you develop on OSX and deploy on Linux, which is a very common pattern. Some packages might be required for OSX, but not exist for Linux, and vice-versa. I see conda as great for local development to create application-specific environments and making use of pre-compiled packages, but when deploying, encapsulating things up in a docker container reduces the scope of incompatibilities you deal with and gives you the opportunity to utilize cluster-oriented application management (swarm, kubernetes).
Ah, I was looking at the pymysql numbers. Well, asyncpg blows all those numbers out of the water. I think it makes a big difference if the library was written for asyncio or not. Im interested in taking a look at http performance when I get a chance, but uvloop has numbers similar to asyncpg so...
&gt; assuming a dict of key/value pairs Is there a dictionary without key/value pairs?
&gt; Well, asyncpg blows all those numbers out of the water. I That also doesn't help us to compare threads to asyncio because it re-implements the whole DBAPI driver, doing everything completely differently from how psycopg2 would do it. All the approaches in asyncpg that apply to threads (such as using prepared statements, which psycopg2 does not) might produce a driver that is much faster than psycopg2 in the thread-space as well. 
So, if I understand you correctly, I set the task for the window scheduler to run the .exe version of the virtual env and set a secondary action for the path to the Python script? Or would the 'script.py' be an argument provided for the first scheduled task?
&gt; I think it makes a big difference if the library was written for asyncio or not. aiopg is written for asyncio, wrapping psycopg2, using psycopg2's async primitives which we see used for example here: https://github.com/aio-libs/aiopg/blob/master/aiopg/connection.py#L169. your argument is then, the asyncio demo here is very slow because psycopg2 itself is not well-written for Postgresql's async system, in that some overhead is being added that isn't appropriate, and that's why it's slow. However, my test suite proves this false as well. because it also [tests against gevent](https://bitbucket.org/zzzeek/bigdata/src/fc3f03f7416e62ded192487ff1c70f4eb77e6788/bigdata/suites/row_by_row_gevent.py?at=master&amp;fileviewer=file-view-default), which [uses the identical primitives in psycopg2](https://bitbucket.org/dvarrazzo/psycogreen/src/115d0627da1ac9ff48c0cb9287257cd35868cdf9/psycogreen/gevent.py?at=master&amp;fileviewer=file-view-default#gevent.py-30), and in my tests the gevent version is comparable with threads (certainly not faster, however unless you give gevent a large throughput advantage over the threaded version). This illustrates very clearly that at least when I ran those tests, the programming constructs and implementation of asyncio perform much more poorly than comparable techniques with threads OR gevent - the fact that it's "async" is NOT why it is slow. It is slow because of the very awkward and unnecessary programming patterns that asyncio introduces on top of everything. one can even just compare what a minimal asyncio and a minimal gevent-style implementation look like. the asyncio version is necessarily more verbose. All that verbosity translates into more work for the interpreter.
Well ya, I don't make an actual web container for servlets, is that what you mean? I meant a container in the sense that it serves as the GUI framework for mobile, while your python (besides flask/aiohttp/whatever you choose to handle routing) remains the core of your program seperate from GUI. For OP, you want this so you just need to select the GUI appropriate for the platform/where and how people want to see and use your app, and keep the core the same. Games, I'd dip out of python and use something more appropriate. 
Have you tried bulk insert/update?
A good starting place: http://www.nltk.org/_modules/nltk/chat/eliza.html
Even if there were, (I'm not sure if there is one) it would likely be equivalent to running English through a translator and submitting that for your Japanese homework.
The path to script.py is passed as the first argument to the Python interpreter executable inside the venv. 
I haven't heard of one. A C++ programmer has to make a lot of decisions that a python programmer does not need to worry about. For instance, what type of integer to use for a given variable. A C++ to python converter would be a lot more viable, but I haven't heard of that existing either. 
I started to go down that path, but wasn't finding very good documentation, so I thought I'd ask here before I burn more cycles (I figure I'm doing something wrong)
You could try the (unofficial, but developed by Microsoft) Windows port. https://github.com/MSOpenTech/redis
&gt; list is a keyword in python It's not a keyword, but it is a built in function in the standard library. Meaning you *can* overwrite the name (but *should* not). Actual keywords like if, while, return and so on would not be possible to use as variable names, like you mention.
Sure, no worries. By "particularly in comparison with matplotlib", I meant that veusz and matplotlib are the Python options that I am most familiar with. matplotlib is a great library and I use it a lot for visualisations in ipython - and it is certainly possible, and straightforward, to create publication-quality figures using matplotlib. But, for my usage, I have found moving to veusz to be beneficial. Practically, I found it difficult to get matplotlib to retain physical sizing and to handle fonts correctly in PDF output - I used to need to export to SVG and then convert to PDF. I haven't had any troubles with veusz in these respects and, in general, I find veusz to be more aligned with specifications in physical page-based units. I have also found things like axes with spatial offsets, discontinuous axes, grid-based layouts, and multipage figures to be easier to implement in veusz than in matplotlib. Finally, having the veusz application is a big help in manually tweaking figures - I find that things like legend and label positioning are easier via an interactive window. In terms of complexity, I don't find veusz to be too different from matplotlib once any sort of customisation is required. Overall, I rarely see veusz mentioned in these sorts of discussions - I certainly think it ought to be considered when evaluating Python libraries for figure creation.
Glad to hear it works! Good luck with your project!
Ooh dude, I've been watching you for a long time. I want to say thank you for your tutorials. Without sounding off like a fan boy I really enjoy your videos. The clarity and brevity of real content isn't found in any other tutorials. Do you have a patreon page or some way I can support? I'd help code but I'm lazy. 
I love your videos, thank you for making them
This would make a wonderful talk at pyohio!
Better yet, have the app go download the report for you!
Any reason for mentioning pyohio specifically? 
If it's not performance driven Flask app, you can make it easier by having your flask app reads the CSV file every time. You just manually upload the file into the directory. def get_csv(): p = './static/salesforce.csv' f = open(p, 'r') return list(csv.DictReader(f)) @app.route("/") def index(): template = 'index.html' csv_data = get_csv() return render_template(template, data = csv_data) if __name__ == '__main__': app.run(debug = True, use_reloader = True)
At least your $60 will go to the publisher who can in-turn create more original content and books about programming and other topics using those funds :)
I'm sorry. I truly am. Should I notify any next of kin? 
Could you do something like have a separate process watch the file for changes, and put the data into something queryable - sqlite would work if your not expecting concurrent writes. And then the flask app could just ask for the latest dataset. Alternatively, you could upload the file through the flask app and then it'd know the latest file name. That's a bit dirty, but it'd work. 
Are you using Python 3.6+? class CountChildren: counter = 0 @classmethod def __init_subclass__(cls): CountChildren.counter += 1 
They want their ad filled spam site to be relevant to search engines for the phrase "python language"
Purely selfish. I'm an organizer :)
Ooh that looks beautiful. Very nice. I have to install that now
how are you using the anki decks? they seem weird to me as it's recommended to keep answers short
this is cool. I might use this approach in the future.
haha, well no. To be exact, I meant a _simple, single-level_ dictionary of key/value pairs, as opposed to one containing sub-dictionaries or other complex objects as values. 
&gt; Note that this is insecure by default, as it's using Python's pickle under the hood. And closed the tab. Insecure by default is not inspiring any confidence...
PS Because the call to open isn't in a with block, this is able to leak file handles, which will eventually crash your server. 
It might not be "too hard" to replicate though --- it seems to me that you'll need to just issue a command (to the OS) to cycle through the monitor input sources (looking into the link: http://www.ddcutil.com/cap_u3011_verbose_output/ ) Feature: 60 (Input Source) That might not be too difficult...I think alanjcastonguay is on the right track with modifying the library/code to the https://github.com/Informatic/python-ddcci project.... Go into the file: https://github.com/Informatic/python-ddcci/blob/master/ddccli.py notice on line 13 controls = {'brightness': 0x10, 'contrast': 0x12} you might need to add a third item: controls = {'brightness': 0x10, 'contrast': 0x12, 'source': 0x60} and then work some magic to get it up and going in the commandline version -- if it's doing it's thing, porting that to a GUI won't be too difficult from that point.
Saving for latet
This is what I have so far I can't figure out why its not correct user_submission = input("What is your name?") user_submission = str(user_submission) if user_submission == "Amar": print ("Hello Amar :) \nI like your shoes") if user_submission == "Brandy": print ("Hello Brandy :)\nYou seem like a cool person") if user_submission != "Amar": print ("Hello " + user_submission) if user_submission != "Brandy": print ("Hello " + user_submission) if user_submission == "Dianne": print ("Hello Diane :)") else: print ("Hello " + user_submission)
I've never actually posted on reddit about programming, so I'm kind of nervous this will go horribly. So I get that the main part of this question is about getting Python setup on your computer generally, and I'm going to avoid all of that. I don't have any special experience in that, and I'm sure my setup is less than ideal. As for web scraping though, some of this might help (specifically, it doesn't require beautifulsoup): First, the basic approach that I use is requests plus lxml. Something like this: import requests from lxml import html response = requests.get('url') html_tree = html.fromstring(response.content) object = html_tree.xpath('desired_xpath') for x in object: print(x.text) In chrome, you can get the xpath by doing to developer tools, clicking the object you want, and in the html clicking "copy xpath" (or something like that). I usually combine that with a pandas DataFrame, so I can store objects into that structure. It should be pretty obvious how that's done after watching a few pandas tutorials, but if you need help let me know. But this approach poses a problem when it comes to JavaScript (namely, it won't work). So instead, I use a Selenium Webdriver. Typical code might look something like this: from selenium import webdriver driver = webdriver.Chrome('/Applications/chromedriver') driver.get('url') object = driver.find_element_by_xpath('desired_xpath') Etc. Hopefully that gives you a starting point, at least. Now fingers crossed I don't get flamed on here for being an idiot. 
\o/
&gt; Domain-driven e-commerce for Django &gt; &gt; Oscar is an e-commerce framework for Django designed for building domain-driven sites. It is structured such that any part of the core functionality can be customised to suit the needs of your project. This allows a wide range of e-commerce requirements to be handled, from large-scale B2C sites to complex B2B sites rich in domain-specific business logic. &gt; &gt; https://github.com/django-oscar/django-oscar
working on rust's tokio-core based asyncio event loop https://github.com/fafhrd91/async-tokio https://github.com/fafhrd91/aiohttp-tokio
Thanks to materialize css :)
Please check the second part of the series.. Thanks!
What exactly are you trying to do? - Just understand what's happening? - Understand enough to audit what it does? - Understand, so you can add features or fix bugs? - Understand enough to rewrite it? Each of these is different, and your approach would also vary depending on the problem with the code ("other hallmarks of bad code" isn't very descriptive). - Is the logic messy? (global variables, IO everywhere, lots of mutable state, randomness, nondeterminism, etc) - Or is it mostly a style problem? (poor names, no comments, unclear structure, functions too big or too small) In the former case, you're basically limited to recording the results of many runs and ensuring that you can replay whole examples (if it's also nondeterministic or time-varying, this will suck). In the latter case, you can also start to test individual functions and improve the readability. I wouldn't bother with an IDE for this as long as you've got an editor with good highlighting and tab-completion, but if you want one anyway Pycharm is the best around.
Yes I have. It's not pickle I specifically have an issue with here, but the idea that "insecure by default" is a good default. 
If you've already changed that, you have three (and a half) tasks left: 1) Implement read_integer 2) Turn "1 to k" into valid python 3) Implement seen_primes - use a set 3.5) If you're using python 3 then use print() instead of print Aside from that what you've written out is already python. You will probably learn how to do all of these things in the first few days of any half-decent introduction to python. If you need more help than this try /r/learnpython 
**Here's a sneak peek of [/r/learnpython](https://np.reddit.com/r/learnpython) using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year!** \#1: [Python 201 Book is Free for 48 hours](https://np.reddit.com/r/learnpython/comments/5814lw/python_201_book_is_free_for_48_hours/) \#2: [Python 101 Book FREE for 48 hours!](https://np.reddit.com/r/learnpython/comments/5bmaz0/python_101_book_free_for_48_hours/) \#3: [Beginner's Python cheat sheets - updated](https://np.reddit.com/r/learnpython/comments/4y06nq/beginners_python_cheat_sheets_updated/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
This is better over at r/learnpython but I would recommend the following site: http://www.diveintopython3.net/ Just dedicate an hour of reading.
thanks i just came here by using google to try to find an answer
Yes, I think this is the most elegant one.
O god please format this. Put it in a Github gist or pastebin.
Slides were very interesting, though do you know if the talk was recorded and if the video is already online?
No no, there are others that find answers like yours useful :-) Have a question if you don't mind. As beginner at scrapping my biggest problem is, how to decide which tool to use for certain site. I understand if there is java script involved I will need Selenium. And requests are better than urllib... so I will use requests. But how do I decide when should I use lxml or bs4? What part of site code are you looking at to decide which tool to use for scraping? Or, could it be, you can always use one of the two, lxml or bs4, which one you know better? 
Please don't tell us that we will have 3.333 posts a day on reddit :/
Why not use a nosql db? I can only assume it would be faster...
To the downvoter: you may disagree with what he says, but I'd still think such a comprehensive answer deserves an upvote (I haven't tried airflow myself).
Done, so sorry for that haha
Although factorial is often given as an example of recursion, there's absolutely no need for it and you can just use a loop. 
It shouldn't be using that much CPU unless it's indexing. I suggest reinstalling and maybe filing a bug report. However the answer is no. Nothing else even comes close to having debugging and profiling tools built in that rival pycharm's. At least nothing I've seen 
Mathworks Matlab
Copy the file ( save as...). Your OS is preventing writing a file that might contain macros you downloaded from the internet. Happens with all files, not just Python
Oh shit, I just assumed the link was to the official python website... 
Neat tool. :) Small tip: make sure to handle EOFs when asking for input (Ctrl+D in your terminal).
Genuine question: wouldn't S3's [eventual consistency model](http://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html#ConsistencyModel) affect this use case as a db? &gt; A process replaces an existing object and immediately attempts to read it. Until the change is fully propagated, Amazon S3 might return the prior data. Granted fully atomic transactions shouldn't be expected, but how would they work around this inherent behaviour in S3?
Eclipse + PyDev. Note that if you're interested in the interactive console in PyDev, take a look at: http://www.pydev.org/manual_adv_interactive_console.html (you have to at least know F2 to send a line from the editor to the console and Ctrl+Alt+Enter to execute the current file in the console). I also suggest you read the Getting Started Manual: http://www.pydev.org/manual_101_root.html for an explanation on how to setup things and get you to the most common workflows, such as launching files or browsing code.
[VS Code](https://code.visualstudio.com/) is actually _surprisingly_ decent for Python (including pretty good debugging out-of-the-box), with a pretty reasonable memory footprint. YMMV depending on the complexity of your projects, but personally, I've got it set up as my main thing, with PyCharm being mostly used for major refactorings, since it handles those pretty well in my experience.
Serious question, does pydev support inline debugging (where the value of a var appears in the code next to the var)? Because I love that feature in pycharm
I'm a fan of Anki flashcards, I feel the spaced repetition helps me better retain key concepts. The answers in the repo decks might be longer than what you are accustomed to. I think an important takeaway is do not try to memorize the answers and code solutions, instead try to understand and retain the concepts. After studying a card for awhile, I tend to just review key points in the algorithm and skip the rest of the answer. You can choose to have more difficult cards show up more frequently by selecting "Again" or "Hard". "Good" and "Easy" show up less frequently (you'll want to still periodically review them so that you don't forget them). The intervals are configurable. As the repo continually evolves from the open source community we'll continue to update the decks.
Thanks. I looked at the reviews on Amazon and this whole bundle is about half the cost of some of these books on Amazon.
I use Spyder with Ipython and Python console built-in.
Not *currently*... I've been thinking about adding that but still haven't gotten to it so far (I know it's also available in google chrome and there's also a request for JDT: https://bugs.eclipse.org/bugs/show_bug.cgi?id=492307 -- my plans are to add it to PyDev within this year, hopefully sooner than later, but still not there).
Seeing this has given me that push I need to jump back to python. Thank you! 
i dig non-blocking IO a lot I just don't agree with the straight jacket syntax enforced everywhere. Some people really want their code to be explicit where IO and therefore context switching occurs. Why not use a gevent-style approach, have those folks put `"__assert_io__ = True"` at the top of their files, then have the context system enforce that every IO point has an "async" keyword before it (but only when the module declares that style)? that way libraries don't have to be rewritten. 
what version of pySerial do you use? &gt; Changed in version 3.0: returning ListPortInfo objects instead of a tuple
Ah, if traveling were free, I'd be happy to go. My issue is that I don't have the budget to do a lot of traveling, and I've already got too many large expenses this year paid and planned for. I am self-employed, so there's no employer who would be happy to send me for a company mention :P
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
How to handle CLI is a very opinionated and personal thing. Everyone has their own views. Personally, I use `getopt` which is in the standard library. Your code ends up longer but you have near full control (only thing I think it is missing is optional arguments. Either a flag has an argument or it doesn't) Then, you can build your code like the following (untested): import getopt import sys usage = """\ demo CLI Usage: python demo.py [OPTIONS] arg1 [arg2 ...] Options: -a,--one : Sets the `a` flag -b,--two VAL : Sets the `b` flag with VAL -c,--three : Sets the `c` flag -h,--help : Help Arguments: arg1 : Required. First arg Additional arguments optional """ argv = sys.argv[1:] # I make this a separate variable in case I want to easily pass it # TIP: Keep these in alphabetical order SHORT = 'ab:ch' # Short args are a string. `:` means needs an argument LONG = ['one','two=','three','help'] # Long args are a list, `=` means needs argument try: opts, args = getopt.getopt(argv, SHORT,LONG) except getopt.GetoptError as err: print(err) print(usage) sys.exit(2) # Defaults: aflag = False bflag = None cflag = False for opt,val in opts: if opt in ['-a','--one']: aflag = True elif opt in ['-b','--two']: bflag = val elif opt in ['-c','--three']: cflag = True elif opt in ['-h','--help']: print(usage) sys.exit() # Process arguments if len(args) &lt;1: Pros: - Full control over how things are processed - Do not need to add your own logic for things like `-a -c` vs `-ac` - No complex API to learn and understand - Can more easily implement multiple flags overriding each other Cons: - WAY MORE TYPING and more verbose - It gets tiring - Have to manually manage documentation - Can't have optional values. - Adding an option requires many changes - help text, short, long, default, parsing `if` block Personally, I still use this. I have a boilerplate like the one below and I go from there. But it is a PITA, especially for what should otherwise be fast scripts. 
Author here: That's a really good point and I appreciate it! Three months later I wrote this post (http://www.onthelambda.com/2014/05/13/damn-the-torpedoes-full-speed-ahead-making-the-switch-to-python-3/) and switched 100% to python 3 for personal projects
Look at the importlib module if you are on a recent python3 interpreter. Or the imp module if you are on an older version. 
sublime3+ anaconda addon: http://damnwidget.github.io/anaconda/ more 2 read: https://realpython.com/blog/python/setting-up-sublime-text-3-for-full-stack-python-development/
Looks amazing, will definitel be keeping up to date with these scripts, just for the sake of learning 
OP is a Twilio developer evangelist, so it's part ad and part someone blogging about cool stuff they made.
I've been using VSCode with the recommended extension for python. Works pretty well. 
 Message_body = &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2B50&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2764&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2B50&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2764&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2B50&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2764&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2B50&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2764&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2709&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; Save the date! &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2709&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\n\n&lt;/span&gt;Lauren Pang and Thomas Curtis are delighted to invite you to our wedding.&lt;span class="pl-cce"&gt;\n\n&lt;/span&gt;Saturday 3rd September 2016. &lt;span class="pl-cce"&gt;\n\n&lt;/span&gt;Colville Hall,&lt;span class="pl-cce"&gt;\n&lt;/span&gt;Chelmsford Road,&lt;span class="pl-cce"&gt;\n&lt;/span&gt;White Roding,&lt;span class="pl-cce"&gt;\n&lt;/span&gt;CM6 1RQ.&lt;span class="pl-cce"&gt;\n\n&lt;/span&gt;The Ceremony begins at 2pm.&lt;span class="pl-cce"&gt;\n\n&lt;/span&gt;More details will follow shortly!&lt;span class="pl-cce"&gt;\n\n&lt;/span&gt;Please text YES if you are saving the date and can join us or text NO if sadly, you won't be able to be with us.&lt;span class="pl-cce"&gt;\n\n&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2B50&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2764&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2B50&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2764&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2B50&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2764&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2B50&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;u&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\u2764&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
It's not a bad way to sell their services. I much prefer this - a real application someone made, sharing their code and saying this service made it not only possible but easy - than some blog post extolling the virtues of a service with tiny fragments of code (look how easy a text is, need a phone menu do it like this, etc). 
Where? You might want to link it at the end of the first article. Makes it easier for people to read them in order.
You ask to debug your very specific code with zero information?
I didn't want to be the IT or sound guy at my wedding, but I did set up a Raspberry Pi to run an iPhoto picture slide show.
Emacs with Python mode pretty suo6s my needs. It also have interactive console, so you can select and send code for execution. 
Look into the `\r` character: import time for i in range(11): print("\r{: &gt;3}%[{}&gt;{}]".format(i*10, '='*i, ' '*(10-i)), end='', flush=True) time.sleep(.25) There's also lots of 'progressbar' libraries you can steal from. If you have more questions like this it's better to post them on /r/learnpython. Be sure to include which version of python and what OS you are using. 
Yeah, +1
You need to look into async programming in Python. It's very simple to set up a loop that calls an async function before sleeping. I don't have experience with Python on Arduino, so I don't know if they support the async libraries and features that have been added since 3.5. If you use an older version, your other option would be multithreading.
Can you please automate my divorce? I'll give you slightly less than half my stuff.
Its highly likely that the limiting factor here is io speed (ie. your internet connection) and not python.
aaaaaand he's using Python 2... :\
At first I thought this was a cool idea, but then I saw they weren't going to have an open bar, and now I hate it.
I see! In that case it looks like lxml and bs4 are similar tools for the same/similar tasks, lxml being faster and bs4 probably offering more or being more advanced. Will look into lxml too, thanks!
Error Module Not Found: No module named prenup [line 1] from KeepMyAssholeTight import prenup &lt;&lt;&lt;&lt; error
Thanks. So I just have to download everything from a new server. Is mldata.org down for good? It looks like they deleted everything and didn't tell anyone.
Apparently the folks behind mldata.org [know about the issue](https://github.com/scikit-learn/scikit-learn/issues/8588#issuecomment-289796922) and are [working on a fix](https://github.com/scikit-learn/scikit-learn/issues/8588#issuecomment-292192727).
Classes are awesome, but this has no business being a class. This should have been a function. Edit: smaller notes: * functions that are part of a class are called "methods" * You can check if the element is one of several types with `isinstance(element, (int, float))` * You don't check if the first sublist has length 1. This is a very easy fix; just initialize "past_line_size" to 0. Although it would be much easier to just compare the line length to the index: `if i+1 != len(line): raise` * the class variable 'triangle' is useless ([line 28](https://github.com/brunocordeiro/hell_triangle/blob/master/hell_triangle.py#L28)) 
Hey I used your code to write a StackOverFlow Q&amp;A. https://github.com/vaulstein/7daysOfCode/tree/master/AskStackOverFlow
instead of &gt;&gt;&gt; from collections import Counter you could do this: &gt;&gt;&gt; def import_Counter(): ... global Counter ... Counter = __import__("collections").Counter ... &gt;&gt;&gt; import_Counter() &gt;&gt;&gt; Counter(n=3) Counter({'n': 3})
Spyder
I should have posted there. Whoops. Will do, thank you. I nabbed the $15 bundle to get the Python Crash Course and Invent your Own Games. (seemed interesting)
No problem!
Author here. Mostly yes. The fact that none of them had seen this sort of invite method made it special. 
You think your lambdas are running on a machine with others that are hogging resources, or what? Makes sense that lambda would be subject to the same noisy neighbour problem (except in respect of memory, naturally).
 #!/bin/python import time i=0 max=100 while i &lt; max: print( str(i) + "% " + "=" * i, end="&gt;\r") i+=1 time.sleep(0.05) print("\n") 
The others have suggested good built-in solutions, but if you want to you use a library though, I have found [tqdm](https://pypi.python.org/pypi/tqdm) to be quite good.
the `tqdm` module also work really well.
Pretty cool little project, but it feels like it's missing the reason people use the mail to send Save the Date and invites — weddings are all about the circumstance. Email has existed for decades, we could easily have wedding email invites . . . but the paper save the date and invitation add to the occasion. 
Thank you, great little resource
Awesome, thank you!
Thanks. Will have a look later too.
I agree 100% here. Despite having used Python since 2001, I have spent the last 3 years migrating code _away_ from Python, and have been meeting people in their droves doing the same. So allow me to take the other side here and interpret the gaps in the scenarios above in the opposite direction where they sound like bigger limitations. I think, if Python is to improve here, the weaknesses need to be explored as much as its strengths do. * Python can _only_ meaningfully parallelize IO * shelling out sacrifices a lot; there's either poorly or no established APIs for throttling, deadlining, retries, or progress reporting * Multiprocessing is not effective if your dataset is large and it uses Pickle which is slow and terrible and you'll have N processes with a huge mem footprint instead of 1. Also, Larger Python applications end up using so much memory just to start up and stay resident that running lots of them is expensive. I dont' know how much of this is fixable or how much is intrinsic, but the best hope is to reduce the footprint of some of these problems. A framework in the interpreter that would allow native objects to be frozen into an mmapped space that could then be read across processes and used transparently as arguments via multiprocessing could be a big win, but there may be structural issues with the language/interpreter that prevent it. At the end of the day, Python's real cpu perf problem is that performant Python code doesn't look or feel like _good_ Python code, and in fact it is often made up of significant bits that are not Python at all. "You can always just drop down to C/Cython" is a blessing and a curse. None of the basic structures of a simple program survive; data all ends up in statically typed numpy arrays, hot paths get shoved into C/Cython libs that are opaque to your tooling, you rearrange things to share datasets over mmap with explicit encode/decode. The approach I've taken (and I'm far from alone) is to just extract these parts into services managed by other languages that have better baseline performance characteristics, and then turn the CPU issue into an IO issue (which Python can handle alright). This isn't a great story for Python, it's a [Python of the gaps](https://en.wikipedia.org/wiki/God_of_the_gaps) type niche that will decrease over time until it's no longer used as a primary language for application development.
My understanding is that python is great for raspberry pi. I've done enough on-the-metal programming for one lifetime... :D
Wed development. I'll see myself out.
This is so timely for me as I just tried implementing A* last night for a adventofcode challenge. First pass isn't using a PQ because although I tried the API felt really kludgy. 
Be interested in knowing the responses as well. 
I am making a discord bot, because discord re introduced me to python and programming, as I have been gaming &gt; programming and eventually lost interest. Now its back!
I'm building a script that will e-mail me top news stories, the weather for the day, my to-do list, and my stock prices.
Just released [plydata](https://github.com/has2k1/plydata), yet another take on implementing a dplyr for Python. There is [dplython](https://github.com/dodger487/dplython) which does the same thing but its API remained alien to me, I could not get around to adjusting to it.
Thank you! Learning python after years of js and front end and then mostly PHP and SQL before that
Needs blockchain vow exchange :)
This post is better suited for r/learnpython
This post is better suited for r/learnpython
I see XML, I think BeautifulSoup. Dunno if it supports everything you need, but it probably does.
I've decided it has something to do with my VPN. I'm headed to the office to test.
This *truly* sounds like a job for XSLT. Are you aware of [these extensions](http://lxml.de/extensions.html)?
Jesus that escalated quickly 
Are you using windows? If so use resource monitor to monitor your network speed see what its hitting.
I was thinking about how I would see an unknown number an immediately write off the text.
Definitely hailcorporate. I used to work for a competitor, and still work in the general market, and can tell you this is definitely the kind of marketing they do. Don't get me wrong, it's a cool platform, and I like to see that people are getting exposed to what's possible in communications, but this is obviously marketing... (FYI webrtc is probably what you'll want to use for nearly anything you can think in that regard... Look into that first. And no, I have not worked for a company that profits from webrtc... just providing information.) 
If he was inviting you to his wedding, chances are you would see his name from your contacts, not his number.
"Hey buddy how r u me and Sophie getting hitched on May 20th and stag is week before. u game? Bring Ur girl 2 man."
Well, the fact that this article is on twilio blog which is hosted on twilio.com should probably give that away. This isn't even sneaky; it might be considered that/native advertising were it elsewhere, but on twilio's own website, I don't think they're trying to hide anything.
Wait what, he even talked in the text about how it should be a no brainer for people to say yes to going to a party with free food and drink. 
This problem is essentially identical to Project Euler [problem 18](https://projecteuler.net/problem=18) and [problem 67](https://projecteuler.net/problem=67). There's a really elegant solution to this problem and I wrote it with less than 30 lines of Python. :)
Here's mine in 9 lines def do_triangle(triangle): last_row = triangle[-1] new_row = [] for row in triangle[-2::-1]: for i, v in enumerate(row): new_row.append(max(v+last_row[i], v+last_row[i+1])) last_row = new_row new_row = [] return last_row[0]
Too soon
&gt; claims this is hail corporate material &gt; suggests competitor they totally never worked for 🤔
Use https://gist.github.com/ for code and /r/learnpython for questions. This sub is mostly for articles and news.
tl;dr: Choose which ever one you like 
Nothing as exciting as everyone else. I'm thinking about writing some blog posts on using frontend frameworks and tools like webpack, aureliaJS, etc.. with the Pyramid web framework
Just commenting to find this post later, curious as well.
Thanks. Yeah, there is a lot more to do still but it is going. Just wish I was a bit better at C++.
actually i think it can be made using pygame there will be server and pygame pulls data from server but i think it will be harder
I upvoted so many of these comments that I feel like Oprah.
Alternative to gists is pastebin.com or (at the very least) indenting with 4 spaces so it gets fromatted.
wed scales to weed.
All of those cases can be most-generally represented by a weighted, directed graph. For the unweighted case, all weights would be 1. For the undirected case, you maintain a directed edge in both directions. (`x -&gt; y` and `y -&gt; x`) For most applications, you'll want to use adjacency lists to track edges. Each node would have a list of `(weight, other_node)`. However, if you're dealing with a mostly-connected graph (ie: each node is connected to most of the rest of the nodes), you can reduce the complexity of some algorithms by using an adjacency matrix. In that case, you'd have a 2D array, num_nodes * num_nodes in size: | A | B | C | D | E ---|---|---|----|----|---- A | 0 | 1 | 0 | 0| 1 B | 1 | 1 | 1 | 1 | 1 C | 0 | 0 | 0| 1 | 1 D | 1 | 1 |1 | 0 | 1 E | 1 | 1 | 1| 0 | 0 This shows `A -&gt; B, A -&gt; E, B -&gt; A, B -&gt; B, B -&gt; C, B -&gt; D, B -&gt; E`, etc. It uses a lot more memory, but if most nodes are connected to each other, you're probably on the same order of magnitude with adjacency lists. An adjacency matrix is useful for quickly checking if an edge exists, or adding/removing edges. It's pretty terrible if you're dynamically adding new nodes.
ipython to the rescue! &gt; In [1]: `bytes?` &gt; Docstring: &gt; bytes(iterable_of_ints) -&gt; bytes &gt; bytes(string, encoding[, errors]) -&gt; bytes &gt; bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer &gt; bytes(int) -&gt; bytes object of size given by the parameter initialized with &gt;null bytes &gt; bytes() -&gt; empty bytes object &gt; &gt; Construct an immutable array of bytes from: &gt; - an iterable yielding integers in range(256) &gt; - a text string encoded using the specified encoding &gt; - any object implementing the buffer API. &gt; - an integer &gt; Type: type So, if it gets an int, it'll return a sequence that long, if it gets a sequence, it'll try to convert it to bytes, awesome! What did you feed it first? &gt; In [2]: `type(0x100)` &gt; Out[2]: int An int, right. Which int? &gt; In [3]: `0x100` &gt; Out[3]: 256 256. Lets look again at that documentation. &gt; - an iterable yielding integers in range(256) &gt; In [4]: `max(range(256))` &gt; Out[4]: 255 Well look at that, it'll take an array of numbers between 0 and 255, and you just fed it 256, and it tells you you're _wrong_ for breaking the rules. Just to see, let's ask it what it means: &gt; In [5]: `range(0, 256)` &gt; Out[5]: range(0, 256) So it's a sequence. That's not helpful right now! Add a `max()` on it to figure out what the max value of the sequence is. &gt; In [6]: `max(range(0, 256))` &gt; Out[6]: 255 Tadaaa! You fed it 256, which is &gt; 255, and it complained and told you you're are breaking the rules. In case you wonder, this is how I always explore code when I get something I don't quite understand. the ipython prompt is _bloody awesome_ for exploration. My two most used commands are `?` and `??`, the first one shows you the help for a function/Class/instance/Whatever, the second one shows you it's code.
Looking for a serverless replacement for Django for small/micro apps so we can run a ton of tiny apps without juggling tenancy, load and uptime on the RDS servers (social media clients and traffic are a mess of surges and deadzone). So this week is browsing for Flask components and trying to piece together a stack that works as well and rapid as Django, but running on serverless infrastructure on AWS. We'll have to find some user/auth, models and rapid-development admin stuff that works well with DynamoDB as storage. 
&gt; within the data being fetched that can be used to track what data you don't have yet (date/time stamps or an incrementing ID fields) Most time series data I've worked with meet those criteria. There are a set of identifying fields (i.e., map to a single endpoint) and timestamps. The library would need to be stateful to "remember" history of successful timestamps, and extend/fill in new or missing timestamps. Even if this is not universally true, SO much data looks like this (regularly spaced events vs. ad hoc) that I believe such a tool would be useful.
It depends on which you want to do with your graph. If you're allowing an intensive numbers of insertion/deletion of new nodes, so maybe an [adjacency list](https://en.wikipedia.org/wiki/Adjacency_list) representation is better than an [adjacency matrix](https://en.wikipedia.org/wiki/Adjacency_matrix) representation. Otherwise, the matrix one is the way to go.
Twilio acts like a switchboard so you're using one of their numbers, not your own. 
Dictionaries are highly optimized in Python and dictionary lookups are constant time. However, adjacency matrix representation works well for graph algorithms and is a more natural representation for dense graphs. Keep these tradeoffs in mind. If you're allowed to use numpy then you can get access to a highly optimized and easy to work with matrices as well. 
hiya, I want to scan available networks after certain criteria. Sometimes there are two WPA types listed when running "sudo iwlist wlan0 scan". I'm not sure on which I should focus. thanks for helping me out
`range` refers to the python function not a mathematical definition, and `range(0, 256)` does not include 256.
It was the 3rd of September
1. How is `match` defined? 2. Please post questions in /r/learnpython next time.
Log in then enter recurssive loop that crawls the link. from scrapy import Spider, Request from scrapy.linkextractor import LinkExtractor class MySpider(Spider): name = 'myspider' start_urls = ['http://example.com/login'] le = LinkExtractor() def parse(self, response): # generate login request req = Request(..., callback=self.all_pages) yield req def all_pages(self, response): # save page yield {'url': response.url} # continue crawl other pages on this page links = self.le.extract_links(response) for link in links: yield Request(link.url, self.all_pages) Note: in the example I used LinkExtractor because by default it ignores links that point to static non-web files (like pdfs etc.) which in usual broad-crawl you want to ignore. But you should really ask this in /r/learnpython or stackoverflow(scrapy tag is very active on it) :) 
Or even: &gt;&gt;&gt; def import_from(module, obj): ... globals()[obj] = getattr(__import__(module), obj) ... &gt;&gt;&gt; import_from("collections", "Counter") &gt;&gt;&gt; Counter(n=3) Counter({'n': 3})
'Tis back up!
Javascript is also popular. PHP is popular.
Interesting. I will retry his steps and see what I can do :) Thank you!
Thanks. I'm in the northeast US. I'll look into test automation jobs. I'll have to find out what other tools a test automation job uses and what other skills I'll need.
Eeesh...
What libraries are you using? Does your code use any website APIs?
It appears to be a simple front end to a movie piracy website.
Definitely switch to python3.6 if you can. The recent improvements to pycharm + python3.6 are amazing. The only time I notice pycharm getting slowed down is when I'm editing rather large or just complicated HTML/Jinja templates. The inspection just chokes really hard there after a certain point.
The access point is indicating that it supports both WPA and WPA2 connections.
I think the issue here is that there's some other patterns that emerge as best practices with threading &amp; queuing. In this particular case I'd recommend one of the following: * Spreading the tests across a pool of multiprocess workers. That way you don't have a single threaded test runner that then needs to distribute a lot of data through a slow process (pickle). Instead you have parallelism from the top down. * Write your test data to a queue, then have the multiprocess workers read off the queue. Either way you should be able to get past memory issues on multiprocessing. 
Following. Seems like a cool project. You might try /r/learnpython
Python isn't handling them differently... your subprocess is
i'd be interested why people downvote such posts.
Heh. Yea, the article doesn't decide for you. But it'll always be based on your specific needs, so I wasn't expecting it to give me an absolute answer. For example, I vote Python. But I also know nothing about Ruby. And I'm not a corporation.
But if I run the same subprocess directly in the terminal it works both ways, with single or double quotes
Definitely, you can make in Pygame! It ain't that hard. But, it would easier for people to use a web interface. Everyone has to install a special application on their pc to play the game if you design it to run in Pygame.
That's good to know. I installed for Py2 based on their tutorials. 
It looks something like this (removed things that are project-specific). Also, I made the setup.py in my x-service dir. So, it makes the spec in x-service/dist when I run python setup.py bdist_rpm --spec-only And builds package in x-service/build when I run python setup.py bdist --formats=rpm Should that be done another way? .spec file: %define name x-service %define version 1.0 %define unmangled_version 1.0 %define release 1 Summary: Some summary Name: %{name} Version: %{version} Release: %{release} Source0: %{name}-%{unmangled_version}.tar.gz License: UNKNOWN Group: Development/Libraries BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-buildroot Prefix: %{_prefix} BuildArch: noarch Vendor: Some vendor Url: something %description UNKNOWN %prep %setup -n %{name}-%{unmangled_version} %build python setup.py build %install python setup.py install -O1 --root=$RPM_BUILD_ROOT --record=INSTALLED_FILES %clean rm -rf $RPM_BUILD_ROOT %files -f INSTALLED_FILES %defattr(-,root,root) Edit: Additionally, dir x-service is in my ~
This is common advice that I get whenever I bring this kind of stuff up on Python forums. I don't think they are strong arguments. The first is basically "There is no way to do this, try and find other stuff to do while you're waiting." In some cases, this is okay, in others the latency of a particular action is just not acceptable. If by Queue you mean a multiprocessing.Queue, it still has to serialize and it still uses pickle: &gt; When an object is put on a queue, the object is pickled and a background thread later flushes the pickled data to an underlying pipe. [source](https://docs.python.org/3/library/multiprocessing.html#pipes-and-queues) If you mean some other queue, then I am now doing manual packing and unpacking of my data, eating time that I was trying to save by parallelizing. Plus this amounts to the age old "Use this thing not written in Python." which again is a sad story for performance in Python. There is just good abstraction in Python (that I've seen) for fencing off part of memory to be used on another core without having to copy that memory. In a lot of real world cases, this copy makes the whole thing a wash.
Last week I've begun to work on a terminal string styling package called [colorful](https://github.com/timofurrer/colorful). Yeah, you might think, *"Yet, another terminal string styling library ..."*. There are several reasons why I've done that: * I want to be able to easily nest different styles. * I want true color * I want to define my own color palette * I want to use more color names than the 8 ANSI colors * I want to have correct string lengths on my styled strings * I want to use pre-defined styles I've tried to address all those things in **colorful**! Have a look at it here: https://github.com/timofurrer/colorful And leave some feedback! What do **you** wish such a library would support?
You are welcome. This course will provide python codes for the lectures. It covers almost everything related to face. The guy hosting it seems to have an awesome grasp over machine learning and opencv. 
/r/learnpython
Check out 'formatting help' link, in the lower right corner of the comment box. But as of now, no one can make heads or tails out of your code. 
Thanks for the help does it look better now?
I also realised that I may need to have MANIFEST.in in my root for bdist to be able to pick up all the files. 
Ok, you need to study modulo arithmetic operator (%) https://docs.python.org/2/reference/expressions.html#binary-arithmetic-operations if lowerword &gt; 122: lowerword = 97 So if lowerword is 124, you would like it to wrap around to 98 right? You can do this by using modulo arithmetic, low_end_val = ord('a') # or 97 high_end_val = ord('z') # or 122 cipher_val = input_letter + cipher_key if cipher_val &gt; high_end_val: wrap_around_val = (cipher_val % high_end_val) cipher_text += chr(low_end_val + wrap_around_val) else: cipher_text += chr(cipher_val) 
Am I the only one that cringe when I read both languages look the same ? I never liked ruby syntax. 
Yea I don't think my skillset is there for this type of project but just knowing it is possible may lead me to actually attempt it. I can always ask others for assistance if I get stuck.
Just trying to package some boilerplate I do every time I use pySerial. https://github.com/eoswald/serialstruct https://github.com/eoswald/watchedserial
Yup, using vertices as follows is very easy in Python! a, b, c, .... = range(n) It gets very handy! 
&gt; # visited = True/False &gt; # neighbours = {Vertex : Edge weight} I don't know about these. In my opinion, it's better to let the algorithm track which vertices have been visited. That way at the end, you can throw away the visited set and be able to run it again. Otherwise, you have to revisit the entire graph to reset the visited flag. And in some cases, you want to be able to have multiple edges between vertices. Using a dictionary prevents that (and requires either hashable vertex objects, or giving each vertex a unique ID.)
I think OOP would be easier to document and generalize, but if you have to build everything from scratch for a one-off project, that seems a bit overkill. In an interview, you'd probably just want to use the classes directly without providing an implementation, since that's a waste of time when you want to describe a graph algorithm.
I just subscribe to [Python Weekly](http://www.pythonweekly.com/). It really is a great weekly summary of the best articles and projects in the past 7 days. I've grown to really enjoy the single, routine, weekly aggregation. Makes for quicker consumption and less noise.
Check r/learnpython for help
plumbum also provides excellent [color support](http://plumbum.readthedocs.io/en/latest/colors.html).
PyCoders Weekly is also pretty good - http://www.pycoders.com/. I also like Planet Python, which is a Python blog aggregator - http://planetpython.org/ I have found several blogs via Planet Python that I like to follow. I also write my own blog - https://www.blog.pythonlibrary.org/
Sentdex has some OpenCV tutorials with python3
How data looks does not dictate how it is accessed and how it is recorded. How you need to record state and map it to the set of parameters that are exposed to you for a given API, especially if you want to avoid overlap in data between calls, is going to vary a decent amount unless all the APIs are following some common set of specific guidelines. I think if you were to go through the experiment of trying to design a general library, you might find that outside of the scheduling, the configurations required for the user in setting up each API to work within the library will likely not abstract very much from what's going on under the hood. 
First paragraph of that page: &gt; So, this year, when I ran the regular Java and Spring survey, I decided to include the IDE question: What is your main IDE? That page compares Eclipse, NetBeans and IntelliJ IDEA. All of which where designed as dedicated IDEs for Java and the question is asked of Java developers. Sure you can develop Python in those IDEs, usually by installing a plugin, but it's not the most common use case. Trying to say, "Eclipse is rather popular" without having specific data comparing PyCharm, PyDev, Komodo/etc and popular editors such as vim/emacs/sublime is misleading.
Face Detection is like beating a dead horse. It has been done many times, by so many people.
Completely pointless, there must be 1,000,001 tutorials that all ready teach this.
&gt; Would I be checking every possible move for each randomized set up? You'd check every possible move for the *current* game state. So the only time the startup matters is for the very first turn. &gt; And then the second move from each of the spawned situations? Importantly, no. This is where Monte Carlo differs from something like a simple depth-first search. In a DFS, you'd then expand all of the spawned situations and go further down the tree. For Monte Carlo, you just continue to randomly play the game until you hit a winning game state. As an example, I'll demonstrate a "Guess a number between 1 and 10" game. It's not really a game that lends itself to something like a DFS, but it should get the idea across. In a full-blown DFS or Minimax, your AI thinks as follows: * Assume I choose 1. * Assume my opponent chooses 2 * Asssume I choose 3... * Assume I choose 4... * ... * Assume my opponent chooses 3... * ... * Assume I choose 2... * ... In short, expanding the entire game tree. Whereas, the Monte carlo approach is: * Assume I pick 1 * Assume my opponent picks some random number, I don't care * Assume I then pick some other random number * Assume my opponent then picks a different random number * Repeat until someone wins. * Repeat a number of times so we can record a win/loss record. * Assume I pick 2 * (Do the same thing I just did above) * ... Monte Carlo doesn't expand the search tree so much as randomly pick branches along the tree as it goes, and then hopes that they're representative of the game as a whole :)
This post is better suited for r/learnpython
This post is better suited for r/learnpython
Thank you. From the recommendation of py2 to code snippets, I cringed too much to my taste.
I think I get it for your simple game, but I think I'm struggling to see how it can apply to Risk, where one move has multiple steps (placing troops, attacking, fortifying), where the initial move affects the next one (can't attack if the units aren't there), and where the attacking itself is randomized with dice. There isn't necessarily one "right" move to make, but there are definitely better/worse moves one could make at any given game state. Maybe I'm still not fully understanding the concept, but it seems like this approach is like giving millions of monkeys typewriters and hoping that eventually they'll write a Shakespearean sonnet. 
thanks, deleted and reposted
I'm not OP but this is very cool and well thought out advice, thanks for the post.
Recently I implemented something with weather data using the dark sky api. https://darksky.net/dev/ 1000 request per day is the limit beyond that you have to pay. The return format is Json. Pretty well documented and easy to work with.
&gt; it seems like this approach is like giving millions of monkeys typewriters and hoping that eventually they'll write a Shakespearean sonnet. You're not that far off, really. Imagine it like every time you want to write a word of the sonnet, you give what you have so far to the monkeys and let each one write the rest. Whichever one got the closest to something a sonnet would look like, that's the word you pick next. Repeat for the word after that. Fortunately, games tend to have a smaller state space than full-fledged languages, or at least an easier way to determine what state is 'closest' to winning :) For multiple phases like Risk, you essentially treat each phase as a separate 'turn'. So, you look at all the places you could place your troops (it's been a while since I played, but I think you've already earned the troops by the time you get to this step, so there's no question as to the number you'll have), and then you split off the gamestate, attack and fortifying randomly, and assuming your opponent does the same. Once you get an answer from that, you then look at attacking. Again, you look at all possible attacks for that phase, then play randomly from that point (the randomness of the dice in this stage doesn't matter; it'll essentially be normalized by the fact that you're playing so *many* random games). Finally, when you see which attacks are most likely to lead to a winning state, you do the same thing with fortifying. See which fortifications lead to winning games, and pick those.
Thanks! I learned it a while back when I made a 'pirates vs zombies' game for a code jam and found it more entertaining to watch the game play itself :)
So is the idea to pick out trends over time (like taking Australia early on) or specific move sets to make given a game board the AI has seen before? If it's the latter, I'd be concerned that the AI would win making some random but stupid move at a certain point and think that said move was the best move it could have made in the situation. Also how would I go about setting all of this up?
Thanks for the link, that explains it! 
This post is better suited for r/learnpython or r/learnprogramming
To be perfectly explicit; that link explains what subprocess has to do when it converts an args list into a string on windows. You are not passing it a list; you are passing it a string. This means you need to care about this stuff yourself and do it manually. Or you could give subprocess a list and let it deal with the quoting.
 if sys.version_info &gt; (3,0): sys.exit("AskQuora requires python 2.") Other than that, it looks useful. It sounds nice that it doesn't seem to require (slow) selenium. 
If all the dependencies are pip installable, the simplest way is to just pip install -t distdir and have all dependencies in the same directory. Tools like pyinstaller and cxfreeze go further and give you a standalone distributable package, so that's probably what you need.
What difference between poet and pipenv?
While I haven't tried it (yet) I must say the cli _looks_ stellar. Good job sir.
Thanks! I'm going to read this. I appreciate the help.
It's a protest until we get a conclusion to Half Life
Using virtualenvs ... pip freeze &gt;&gt; requirements.txt pip install -r requirements.txt edit: cool publishing of packages 
Poet is not only about dependency management, it's also about making packaging and publishing of packaging much easier than the tools we currently have provide.
Thank you for sharing. Just subscribed. I have landed on LearnOpenCV.com many times while searching on Google. Your articles are great for an engineer like me. Have high hopes for the course too.
Ah I see, that's cool!
&gt; pick out trends over time (like taking Australia early on) Exactly - it almost comes back to one of the earlier bullet points I'd mentioned: Balance testing. You can make sure two teams with differing abilities are balanced by having them play random games against each other and seeing if the win/loss is 50/50. Well, this is like that, only we're essentially looking at ways to *un*balance things. If we start in Australia, does that unbalance the game in our favor? &gt; the AI would win making some random but stupid move at a certain point and think that said move was the best move it could have made in the situation. And this is the reason why you play many, *many* random games. I wasn't joking when I said 'thousands', and in many cases you want more. It's so that the flukes like you describe get buried under the rest of the data. It also makes tuning AI difficulty a snap: Just give the computer fewer random games to sample from, and it's not as good. Give it more, and it gets better :)
Aalpha Information Systems India Pvt. Ltd. Website:http://www.aalpha.net Attention ! Director Pawan Pawar. Attention ! This is a Scam. We sent them $ 5,000. The order is not made. The money is not returned. The contacts are not responding.
I'll check it out! This definitely looks great. I've run into a lot of dependency management issues before and, despite using python for the past 3 years, find it annoying to publish a package to pip. 
It all makes sense now!
At the moment, poet handles basic cases but I want to improve it. &gt; entry_points This is already covered for console scripts by using the `scripts` section. [scripts] poet = 'poet:app.run' Here, we will have the poet script installed which will execute app.run in the poet package. &gt; Dynamic requirements depending on the version of python installing the package This is something I want to support by providing a python version for dependencies like so: [dependencies] pathlib2 = { version = "^2.2", python = "~2.7" } Here the `pathlib2` package would only installed for Python 2.7. &gt; find_packages and package_dir `find_packages` is replaced by the `include` directive. In your example it would be: include = ['src/**/*'] Poet automatically detectes packages and modules provided by the `include` directive and populate the `packages` and `py_modules` of the setup. `package_dir` however is not currently supported. &gt; Compiled extensions (C family and Cython, etc) C extensions are supported via the `extensions` section: [extensions] "my.module" = "my/module.c" Cython extensions however are not currently supported. &gt; Complicated builds It's not currently supported but that's something I have thought about and I wonder if it could be possible to take a similar approach as [cargo](http://doc.crates.io/build-script.html) by providing a `build` directive to handle those cases.
You should have a look at warlight AI competitions... Very related. 
Ebook currently in humble bundle of python books
Interesting, I'll check it out
Is docker suitable for a command line app? I thought it was more for things that needed to run continuously, like web services.
No.
&gt; python &gt; &gt; A list of Python versions for which the package is compatible. **Required** This is gold! There are just too many packages out there that are python2 only but will install without problems on any Python. I think I'll be using this!
I would personally see them as two discrete problems and not one big problem to be solved by one big "all-in-one tool". But whatever you're into.
Really!? http://lmgtfy.com/?q=python+split+string+into+characters Actually it's super simple: a simple list(string) gives you a list (i.e. ['1','2',...]) of characters of the string. 
r/learnpython btw you can convert it to a string `str(number)` then you can use split() command `number.split()` so you get a list with each digit, and then convert again to int, for example `number1 = int(number[0])` Edit: split() can't be used for this task without arguments, correct in comments 
I also forgot to mention I am using python for the very first time and I also need to store each digit. For the number.split() command, what would I have to put in the brackets? 
Woa, actually I don't think that's a good idea (but I could be wrong). As doing that, you need to have `n` variables in order to unpack `range`. Moreover, if you're using python3, you're effectively consuming the generator. I could see that as `s = [e for e in range(n)]`.
Oh God, tell me you are a troll... you have to define "number" before use `number = "1234"` `list_number = number.split()` Now you have a list `["1","2","3","4"]` and remember to convert a number with int() before use it
Ok I made a mistake because split() without arguments returns your str in a list and doesn't split it, you can use list() instead of split() `number = "1234"` `list_number = list(number)` `print(int(number[0]))` `&gt;&gt;1`
Selenium is well used in web development. I've also used QF-TEST
I have little experience with such an API... What could be a reason to define markdown like this? And why could be this local flask server necessary?
I take one concept one day at a time and then write a script for it. I may plan for list of some scripts over the weekend but still flexible for now.
No, that's just one technique called Monte Carlo Simulation. You typically use it when you cannot come up with an analytical solution. For example you want to calculate the price of a complicated financial derivative based on a stock and you cannot solve the price equation. What you can do is simulate the path of the stock thousands of times, calculate the derivative price each time and take the average.
import config
I created a script that monitors reddit for me and sends me an email when a post get found that match my criteria. https://www.arnevogel.com/python-monitoring-reddit-for-keywords/
Since you seem to have experience with python programming books I have a question about their topicality. Invent Your Own Computer Games with Python by Al was published in 2016, so I doubt it is outdated already, but I was thinking recently about buying "Making Games with Python and Pygame" also by Al which was published in 2012. Is it still worth buying? Maybe the newer one can be treated as update to the older? 
Thanks I will check this out.
I'll look into it. But with the tech restrictions I have to operate under by working for a school, I doubt I can fix this if that is the issue. 
 import sys sys.path.append("..") import config
Get all the urls in one shot, with the number of occurrences ``` urls = {}; text = ""; $('.usertext-body a').each(function(i, el){href=el.href.replace('https','http'); urls[href] ? urls[href]++ : urls[href]=1}); keys = []; for(key in urls) keys.push(key); for(key in urls){text+='\n'+urls[key]+': '+key;} $('.usertext-edit textarea').text(text).focus(); ``` EDIT: formatting
There's no need to use an intermediate string if you use ``divmod``; mynumber = 12345 digits = [] while mynumber &gt; 0: mynumber, rem = divmod(mynumber, 10) digits.append(rem) digits = digits[::-1]
For some reason I thought Eli had stopped writing. Sweet!
&gt; That page compares Eclipse, NetBeans and IntelliJ IDEA. All of which where designed as dedicated IDEs for Java and the question is asked of Java developers. Sure you can develop Python in those IDEs, usually by installing a plugin, but it's not the most common use case. Trying to say, "Eclipse is rather popular" without having specific data comparing PyCharm, PyDev, Komodo/etc and popular editors such as vim/emacs/sublime is misleading. PyDev+Eclipse itself actually has many active users -- and given the many options, my belief is that those that currently use it do it because they feel it's nice, not because it's pushed upon them... (i.e.: 21k installs last month just on https://marketplace.eclipse.org/content/pydev-python-ide-eclipse#group-metrics-tab, 25 k installs on https://sourceforge.net/projects/pydev/files/pydev/stats/timeline?dates=2017-03-01+to+2017-04-13 -- 2,795,037 files downloaded from https://bintray.com/fabioz/pydev/pydev#statistics in the last 30 days (it may be a bit hard to translate this to the real install count, but it's quite a lot, something close to 100k-150k installs) -- and this is excluding any LiClipse download where PyDev comes builtin, installs from Linux repositories, etc. I do agree that it's hard to gather a real data on all others... open source projects by nature (such as PyDev, vim, emacs, etc) don't have a single central place to get and it's hard to get real numbers and others which are controlled by corporate entities (such as PyCharm, Komodo, etc) don't provide download numbers (and I'd be a bit skeptic if they did anyways unless it was on a public service not controlled by them). -- as a note, I'm not saying it's the most popular -- probably far from it -- if I had to bet on something I'd say vi is the most used -- my point is that there are many happy PyDev users around ;)
What aspect of functions are troubling you?
import time time.sleep(60 * 60 * 24) \# Viola
Here's a fun little Python version: try: # Python 2 from urllib2 import urlopen except ImportError: # Python 3 from urllib.request import urlopen from BeautifulSoup import BeautifulSoup from collections import Counter from pprint import pprint html_page = urlopen("https://www.reddit.com/r/Python/comments/6500tz/what_python_blogs_do_you_recommend/") page = html_page.read() soup = BeautifulSoup(page) blogs = [] for link in soup.findAll('a'): url = link.get('href') if url and 'http' in url and 'reddit' not in url: blogs.append(url) numbered_blogs = Counter(blogs) pprint(numbered_blogs.items())
Python Planet and Python Pandemonium sections on Medium.com
Typical devops. Saying it's not your stack.
Good luck! You can do it! And if you want help or someone to learn with, hit up /r/learnpython.
Or run this way: `python -m MyProject.objects.user`
To aid mobile users, I'll link small subreddits not yet linked in the comments /r/linux_gaming: A subreddit for gaming on the GNU/Linux operating system. --- ^I ^am ^a ^bot ^| [^Mail ^BotOwner](http://reddit.com/message/compose/?to=DarkMio&amp;subject=SmallSubBot%20Report) ^| ^To ^aid ^mobile ^users, ^I'll ^link ^small ^subreddits ^not ^yet ^linked ^in ^the ^comments ^| ^[Code](https://github.com/DarkMio/Massdrop-Reddit-Bot) ^| [^Ban](https://www.reddit.com/message/compose/?to=SmallSubBot&amp;subject=SmallSubBot%20Report&amp;message=ban%20/r/Subreddit) ^- [^Help](https://www.reddit.com/r/MassdropBot/wiki/index#wiki_banning_a_bot)
That's some pretty bad code right here...
[Fluent Python](http://shop.oreilly.com/product/0636920032519.do) is great. It takes a deep dive into the language and illustrates Python's best features.
Talk Python 
Fun to see this here! This was the first big public talk I did and I learned a ton doing it. In retrospect there's a lot I'd do differently. A little ways into the talk there was an awesome torrential rain storm you can hear for a bit :) Feel free to ask any questions, the repo is https://github.com/mrasband/docker_python_and_you
This looks awesome. I've been loving cargo and frustrated with Python's packaging story. Has work started on [configuration](http://doc.crates.io/config.html) so we can configure the equivalent of pip.ini like custom pypi servers, find-links, etc?
Your chances are decent depending on where you are geographically. Immediately install, and read the docs THOROUGHLY for webdriver. That's going to get you in the door. It's very simple. Think of it as a jigsaw puzzle. You have to use the proper commands to complete the puzzle. There's also a few books on selenium/webdriver. You can read those, but the best experience immediately will come from downloading it and using it, reading through the commands list and seeing what they do.
Try to uninstall pygame and then install it with pip. Enter `py -3.6 -m pip install pygame` in the command-line (replace `3.6` by your Python version number). I'm not familiar with canopy.
Convert Java programs you've written into Python, that will show you how to do the things you know in a more "Pythonic" way. I was asked to convert a Perl script to Python and had to learn a lot in the process(particularly because I don't know or even like Perl).
&gt; for loops actually create generator expressions I'm not sure that's true.
I'm doing research at Uni using comments mined from Imgur to create a topic model. Initially my mentor wanted to use MATLAB but I convinced her we could do it just as well in Python. Not to mention there are so many more resources and so much more knowledge available for Python which just makes it easier in the long run. I'm the future we'll be doing image processing, which I'm also going to suggest Python for. 
r/learnpython has [a section of resources](https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_python.3F) for programmers coming from other languages. If you're looking for ways to learn advanced python, [the suggested books list](https://www.reddit.com/r/learnpython/wiki/books) is categorized by level. I personally have found a lot of value by hanging out in Stack Overflow's python tag trying to answer questions and learning new things when you can't.
Fair enough. I've been programming Python for a while and got a lot out of it, but I didn't read the book through the lens of a new Python developer.
You can just use the dependency management part if you want, it's not mandatory to use the packaging and publishing features.
I confirmed that python is working fine. Must be the end user.
Yes, it generates the necessary file internally but it's transparent for the user. So any package built an publish with poet will still work with pip or other standard tools. Regarding virtualenvs, I agree that people shouldn't have to worry about it. It's definitely something I have in my mind. And thanks for the kind words. I really appreciate it.
I won't lie: if you already have the necessary files I don't think you should change it to replace them with poet. For new projects however you could certainly try it.
Do you have blank __init__.py files in your folders? 
You don't know what for loops are. Have you ever used an Else as part of your for loop? Python makes you think different. You shouldn't write Python with a Java mindset. Go back and learn those "I already know how to do that" things again. You'll be glad you did
No problem! Always happy to help!
I really like that you choose Oscar but the voice quality is so low I couldn't understand half of the talk, Is there any transcribe of the show??
Omg ... it's so wrong i don't know where to start.
I just bookmarked this so hard. I've been learning the basics of Python on codecademy, but they don't really touch on modules. Feels like something of an omission. Oh cool, cyrptographic modules!
I haven't looked at your code, but I'd suggest you take a look at the docs where deployment is explained. You can use [gunicorn](http://flask.pocoo.org/docs/0.12/deploying/wsgi-standalone/#gunicorn) for example. gunicorn will handle multiple requests to your application just fine and you won't have to change anything in your application to make it multi-threaded.
I'd second fpm. And if you're​ open to experiments you can check out [basalt](https://github.com/basalt/basalt/blob/master/README.md). PS: I'm the author of basalt. 
im making flask app for managing clients, items and receipts https://github.com/tturkalj/fakturahr im planning to add docx and pdf exporting for receipts
PEBKAC or ID10-T?
Yeah, I use gunicorn for the server setup already. Thanks for the tip! So, for handling multiple AJAX calls to the server, this mainly has to do with the server set up not necessarily the code itself?
The effective programming series will always be my goto answer for these types of questions, regardless of language. http://www.effectivepython.com/
This is one of my favorite python sites and a go to for quick examples of the standard library. 
I'm not totally sure, because whenever I think I understand this it comes back to bites me in the ass. I think you can define __package__ = {package.name} at the top of the file so that value is used to resolve the import path. [this stack overflow question](https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time) may provide an answer. Or [PEP-366](https://www.python.org/dev/peps/pep-0366/) if you want the *real* answer. 
My books are aimed mostly at people who have programmed before, although I know plenty of beginners read them too. My Python 101 book is pay-what-you-want (including free): https://leanpub.com/python_101
I refer to this still...it's always been helpful. And there's a book version too!
Don't waste your time with this 24 hours stuff. I recommend *Learn Python in 17 Seconds*. It bogs down a little in Ch 3, but that only takes two Mississippis and then it picks up again.
Not free but [Jeff Knupp's Writing Idiomatic Python](https://jeffknupp.com/writing-idiomatic-python-ebook/) is pretty great.
Thank you guys for all your replies! I will definitely look into some of them!
I think it can depend on how a class is implemented. I'm not sure how the internals work for lists and tuples, but you could create your own iterator class and return a generator in your __iter__ method, so the person above you may be talking about that.
Get the [Python Essential Reference](https://www.amazon.com/Python-Essential-Reference-David-Beazley/dp/0672329786) by David Beazley. I was in the same boat as you several years ago. I probably read 5-6 python books that were aimed at experienced developers, Dave's book is BY FAR the best that I found. He just started working on the 5th edition, so the 4th edition is getting a little long in the tooth (python 3 was a new thing back then), but I can still whole-heartedly recommend it.
Learning Python, from Lutz is a good place to start. 
Yeah, so for loops just look for (and call) an \_\_iter__ method. That's the better way of thinking about it, rather than some magical creation taking place.
I bought them years ago when he was selling his drafts. Never got the final version though. Do you know what happened? What is the version you have? I bought both 2.X and 3.X versions.
Guidelines.
Decorators can take you for a spin! Pay close attention. 
Neat. Why email though, instead of a mpre direct notification? I'm guessing you check it multiple times a day?
According to [Generator (computer programming)](https://en.wikipedia.org/wiki/Generator_(computer_programming)) "Generators first appeared in CLU (1975)" so I'd suggest that they are anything but unusual.
How is Sublime actually reliably doing that? I suspect the plugin is trying too hard and is making assumptions about the code that may not be correct. I tried it out, and this happened: https://imgur.com/a/3Pywe I think the correct behavior is to color all functions and variables the same, since it's not possible to statically determine which is which with certaincy.
Nice counter example.
Yep, familiar.
Try [Python Is Not Java](http://dirtsimple.org/2004/12/python-is-not-java.html) and [Java is not Python, either...](http://dirtsimple.org/2004/12/python-is-not-java.html).
&gt; I'm really thinking of going to Sublime Text for Python strictly for editing. wow O_o you will loose all emacs editing capabilities and tools, for a bit of syntax highlighting ? O_o
You need to learn HTML. You don't have to build a complicated UI, but you need to learn some HTML.
Some more information on what you're doing may help. Are you looking for something like [luigi](https://github.com/spotify/luigi)?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Very good for a beginner! My only tip is to consider a class, as it would eliminate the need for global variables.
Please post on r/learnpython. Also, please post some screenshots when posting so that it can help people answer your question better.
This doesn't directly answer your question, but you should really switch to PyCharm honestly
One thing led to another, and I ended up spending more time than I would like to admit fiddling around with the cryptography module. Made a simple file encryption script, and then another for decrypting the file output by the first. Fun times.
Second vote for beautiful soup, it's a great library. There's also scrapy, which is more of a fully-featured scraping framework. it's always been a bit overkill for my needs, but it probably makes things like request parallelization easier if you're not used to things like multiprocessing or threads / green threads / coroutines.
That's the best part! There's a whole emacs addon package for Sublime that adds all (95%) the Emacs key bindings and keystrokes. I just installed it and so far it's seamless. At the end of the day I'll never leave Emacs... I just was hoping there was an easy solution to add more syntax coloring but such is life. 
You get used to syntax by coding. stackoverflow is good when you have specific questions
Ok, it's cool it works for you, but to me Emacs isn't just about keystrokes: I'd miss magit, [helm-swoop](https://github.com/ShingoFukuyama/helm-swoop), helm-ag (the silversearcher), buffers, shell, dired, org-mode, ido completion, hydras,… and the evil-mode vim layer !
I've been hearing good things about VS code, though I've never used it myself. I try pycharm out probably once a year or so, just can't get into it. I guess my point is I would recommend trying pycharm out, but wouldn't word it any more strongly than that. Funny thing how personal editors are, isn't it? 
Idk, I sometimes see python code that was obviously written by a Java programmer. It's easy to write python that looks like Java if you try hard enough. So if you're coming from Java, perhaps a straight translation isn't the best way to go. I think you're more likely to end up with a more pythonic result by tackling a new problem. 
&gt; And do not create mutators/accessors for properties unless you really need that abstraction. Can't +1 enough
If you aren't opposed to completely overhauling your emacs config, [spacemacs](http://spacemacs.org/) has an incredible configuration layer for Python (and just about everything else) and has made my emacs experience, in Python and in general, *so much better*. I've never had an issue with syntax highlighting in it.
Updating a library that wraps the public and trading APIs for BTC-e: https://github.com/CodeReclaimers/btce-api Mostly adding Python3 support and updating to use v3 of their public API. 
Thanks for the ideas guys. I'm not terribly interested in hiring it out as the fun is learning how to do it. I guess I need to learn up on HTML forms and how to get user input and send it to the script. Then how to output the results in the browser that makes sense and looks decent enough. Lots to learn.. 
You definitely want classes but that is really neat!
**Here's a sneak peek of [/r/learnpython](https://np.reddit.com/r/learnpython) using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year!** \#1: [Python 201 Book is Free for 48 hours](https://np.reddit.com/r/learnpython/comments/5814lw/python_201_book_is_free_for_48_hours/) \#2: [Python 101 Book FREE for 48 hours!](https://np.reddit.com/r/learnpython/comments/5bmaz0/python_101_book_free_for_48_hours/) \#3: [Beginner's Python cheat sheets - updated](https://np.reddit.com/r/learnpython/comments/4y06nq/beginners_python_cheat_sheets_updated/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
I have started getting the hang of classes now! Thank you for the advice! The logic behind programming did come fairly easy to me but I don't know how much I can brag considering most people say python is extremely easy. lol
Thank you for the advice! I'm working hard to improve!
Scrapy+[their headless solution](https://github.com/scrapy-plugins/scrapy-splash) Selenium is just an api to control browsers, so I'd be surprised if you can't already use the headless chrome with it as is.
It's not true at all for loops iterate over an iterable all generators are iterable by definition
[This taught me how to web scrape.](https://automatetheboringstuff.com/chapter11/)
cpython internals: https://www.youtube.com/playlist?list=PLzV58Zm8FuBL6OAv1Yu6AwXZrnsFbbR0S bunch of great python talks: https://www.youtube.com/playlist?list=PLPfL8-ZJA9kY10vL_K8_c3ALMUtEpClow I learnt a lot of great things from david beazley and raymond hettinger
I got the 2013 version :( Looks like he switched the payment processor. I don't mind paying again but I barely have time to read it. Bought Fluent Python on Amazon last year.
I read Black Hat Python about a year ago. It was adequate if you're interested in sockets and low level python, but I could tell that the coding style was a little outdated (python 2, etc). Also most of the book was just code examples which didn't translate very well to book format. In general I feel that most programming books aren't as useful as online resources like blog posts, pycon talks, and GitHub repos with good documentation.
also, always rot13 everything after you cryptograph it, you can never be too sure.
Sure, everything needs to be a conda package, but `conda-build` is great tool to build compiled extensions and any kind of package in general.
I like how its organized into Notebooks and has a sense of humor. Thanks. 
Splinter ? https://splinter.readthedocs.io/en/latest/
Recent news from Beazley from February - 5th Edition work has started and will focus on Python 3. https://forum.dabeaz.com/t/python-essential-reference-5th-edition/145 I learned from that book originally and it was recommended to me (by one of my best friends who is a Lisp programmer). 
First, ipython is an interactive Python console and also a kernel for [Jupyter Notebook](http://jupyter.org/), which gives you web based interface in your browser where you can write documentation in Markdown, code (not exclusively) in Python and the plot are shown as inline documents. As for IDEs [PyCharm from JetBrains](https://www.jetbrains.com/pycharm/) (has a community edition as well), [Sypder IDE](https://github.com/spyder-ide/spyder) which is more lightweight, or you can use any text editor with a console. I often use [Geany](https://www.geany.org/) for scripts and recently [KDevelop](https://www.kdevelop.org/) in Python mode for more complex code. I don't really think that the scope really matters, I use for data analysis, sometimes for spatial data, statstics or whatever I need. ;)
Hit ctrl-c and give us the stack trace at least. 
You can look at using Web2Py :) - http://www.web2py.com/ it already has a web interface running as a standalone Web Server and it can talk to DB and very easy to use :)
Since you are looking for a HOWTO use this - http://www.newthinktank.com/2010/11/python-2-7-tutorial-pt-13-website-scraping/ Great to give you an into in Web Scrapping, I use it for grabbing MLB stats and putting it into a DB
Yep, this happens all the time. A few thoughts: 1. It's good practice to write this stuff yourself, so you know how it works! 2. This kind of mishap (trying to reinvent the wheel) will slow you down greatly at work. Beware. Hand-rolling your own libraries takes forever, and chances are that other tools are better-developed. 3. Consequently, it's a good idea to do your research thoroughly before starting. Not just so you can find tools that you can use instead of needing to write them yourself, but also so you can *understand* pitfalls and limitations of approaches, should you choose to write a custom tool.
Just playing around, watched a video and thought "I could make this into a function". So I did... If you need to have context in a function or change context vars, just curry like in an example provided. Python has reference semantics for most non-trivial objects and as it's implemented as a function you can return values where that won't work. Thanks to [Dan Bader](/u/dbader) for the video on this, TBH I wouldn't have thought of switch in python without his video, although I probably won't be using this, it was just a bit of fun.
I have uploaded stack trace to this [issue](https://github.com/aosabook/500lines/issues/257), thank you for your help
Actually, you can run Firefox headlessly! There's a utility called Xvfb, which sets up a virtual X session. You can launch any GUI program in it (including your Python script, which launches Firefox via Selenium).
Yeah, it's more work but it's great that it creates a completely dedicated environment for building and packaging. You can be sure that you have all your dependencies completely correct that way. It also solved my issue with needing numpy to build one of my packages (needed `numpy.get_include()` for the Cython extensions, but that means you can't even run the setup.py without numpy installed so you can't even read `serup_requires`).
The closest thing to RStudio is Spyder.
It's a pity that the open for registration was so short!!!
This ticks so many PEP 20 marks negatively that I don't even... Use of divmod for this is a kludge. Sometimes a kludge is all you can do and then, and only then, it must be done so it's forgivable. Well maybe not so much a kludge as it's a mathematically sound way of approaching the problem but wrong in context of Python where data manipulation by casting and utilizing sequences and iterables is both easy and recommended. Anyhow, in this case it's needless, and such contrived use of unrelated function is a horrible etiquette to have as a programmer in general, but it's especially so in context of Python where legibility and self-documented aspect of code is held above everything. And finally, I used the intermediate variable to make code more readable and understandable. If you wanted to avoid it you could just: mynumber = 12345 digits = [] for digit in str(mynumber): digits.append( int(digit) ) It's shorter, more legible (than your solution) and much easier to understand the intent. There is no intention to patronize you or anything, I'm just trying to avoid our beginner friend (OP) to acquire wrong habits so early on.
For this sort of thing I have discovered that searching PyPI and GitHub are better than Google/DuckDuckGo/whatever. For example I found a handful of heap libraries in this way that Google completely failed to turn up (probably because "heap" and "Python" are such common search terms, but whatever...).
Think of fight club. You are not a special unique snowflake. Yours is not the first need. Of course it exists already. Doesn't mean it's better.
First, API. Second, BS and requests. Third, Selenium. Make sure sleep() and fakeuseragent.
You can't turn off the ground and vcc pins. They are directly connected to your power source.
Is there anyway around this then?
you could switch it, but you'll need a couple more bits to wire it in. 
I have not worked with the RaspberryPi GPIO in a while so there might be a better way I'm not aware of. What would work for sure would be to throw in a relay or a transistor.
Most of the time you can just ignore the JavaScript and find out what URLs are being requested client-side by the page, and make those same requests yourself. In many cases the data will be loaded in a machine-readable format like JSON or XML which means you don't have to do any scraping at all. 
Just connect it to a transistor connected to 5v controlled by an other pin and have a script turn it on on startup or even by temperature. 
Just please, for the love of Pete, write code pythonicly once you learn. Having to maintain a codebase written by people who bring in oddball stuff from other languages kills a lot of what's great about Python (like readability.)
It looks like you're trying to mention another user, which only works if it's done in the comments like this (otherwise they don't receive a notification): - /u/destiny_functional --- ^I'm ^a ^bot. ^Bleep. ^Bloop. ^| ^Visit ^/r/mentionhelper ^for ^discussion/feedback ^| ^Want ^to ^be ^left ^alone? ^Reply ^to ^this ^message ^with ^"stop"
if it's boring ? why bother ?
&gt; This ticks so many PEP 20 marks negatively that I don't even... Can you odd then? I don't see how PEP 20 applies, this is a very clear way of breaking an integer into digits. &gt; Use of divmod for this is a kludge. Using ``divmod`` is faster than dividing and taking the modulus separately. _That's why it's a built-in._ And if you're not going to use it for dividing and taking the modulus simultaneously when are you going to use it? &gt; data manipulation by casting and utilizing sequences and iterables is both easy and recommended. Not in the case of an integer, casting to ``string`` is slow, integers are not iterable and loops are not slow in Python. (This isn't Matlab) &gt; Anyhow, in this case it's needless, and such contrived use of unrelated function is a horrible etiquette to have as a programmer in general, but it's especially so in context of Python where legibility and self-documented aspect of code is held above everything. You've never programmed in C have you? This code is effectively an idiom for changing bases and if you're an experienced programmer (as you are, _obviously_) you should have seen this before. &gt; And finally, I used the intermediate variable to make code more readable and understandable. You don't need it. Isn't that in the Zen of Python you were worshipping earlier? "Simple is better than complex." &gt; It's shorter, more legible (than your solution) and much easier to understand the intent. I argue that it isn't, it's predicated on prior knowledge that not only can ``str`` convert an integer into a string but it does so in base ten. &gt; There is no intention to patronize you or anything Your pretentiousness belies this. Also I think you should look up "patronize," maybe you don't know what it means? &gt; I'm just trying to avoid our beginner friend (OP) to acquire wrong habits so early on. There is absolutely _nothing_ wrong with the code I posted. Not a single thing. The fact that you weren't able to point to a single flaw in my code and made sweeping generalizations about bad coding practices that actually aren't supports this. Pull your head out from between your legs and stop being a contrarian.
Yep, sent the email twice already. He used Content Shelf to deliver the pdf/epub previously. Looks like that changed too. I don't see any content on there except a receipt. Amazon books shows that 2016 update was minimal.
If you're ever looking for a hashing package, check out argon2-cffi. One of the better ones out there. 
I've had some luck with scrapy+splash, but it has a learning curve. I agree with r/Rhomboid that it's more than worth the time to figure out if you can get the data without running javascript, because I think it's inherently going to be slow. I think there's a way to cache already fetched js and there are a lot of little knobs to turn to make it run faster... or slower. Scrapy+Splash was faster for me than PhantomJS, but I'm no expert in Phantom and that whole thing, so maybe I was doing it wrong. There's a new headless Chrome browser that seems like it could be useful, but I don't know anything about it yet.
Do it twice for extra security.
Very cool, is the code available?
The main thing is choosing a project that you are legitimately interested in and motivated to continue working on. Find a problem you'd like to solve, or a website you think could be done better, and then just work on it at your own pace. If you get frustrated, step away, and come back later. Good luck!
I need to neaten up the code a bit but I'll upload it to Github or something soon! Just prod me if I forget
no ... please, no 
just post your idea, it does not need to be perfect, it's just need to be good enouth, put online for free. 
This is the exact problem that I'm going though. We have implemented a cross-platform [font manager](https://github.com/fontman) application using electron and flask using flask REST APIs and AngularJS. I'm also excited if there is any good workaround. Currently, we are running the application using a script, calling flask backend to run in the background.
Interesting... so Electron only used to wrap HTML, CSS, and client side JS, I assume? And everything connected into Flask in cloud. Although not ideal, this is quite satisfy my needs.
Hi! Total noob here. Just started reading automate the boring stuff yesterday. Sorry if this is hijacking slightly, but could someone please ELI5 global variables vs using a class?
Too many times to count. Double points if you've re-implemented part of the standard libraries. Triple points for re-implementing a method on a built-in. `dict.get()` and `dict.setdefault()` seem to be common targets.
As a language feature I've always missed it; but that said this doesn't hit my (likely unreasonable) mark for how it should work in python. I'd like the case keyword, but with the ability to provide lists or tuples rather than cascading by missing break, and maybe I'd miss modifying vars from the parent block (IDK). To quote myself &gt; TBH I wouldn't have thought of switch in python without his video, ***although I probably won't be using this, it was just a bit of fun.***
Have you try this? https://github.com/amol-mandhane/htmlPy I want to make the frame thing but can't find time to do it 
Thanks. My only worry with Kivy is that it seems to do a lot of extra stuff "on top". For example in their pong game tutorial (https://kivy.org/docs/tutorials/pong.html) they define simple attributes as NumericProperty rather than just an int. Or when they run an app(), they do so via predefined functions rather than an explicit event loop in main(). Does this extra layer make Kivy slow or restrict what I can do?
Want to add in all the moons and asteroids too!
What library did you use to produce the animation, matplotlib? 
Disappointed at wasted talent and effort and all the debris in the commons.
I personally do feel it is a significant loss. A switch statement makes it's clear that everything is for a single argument comparison, whereas `if else` blocks do not have to follow that. Switch statements could also allow for flow through multiple cases (see my other example in thread), whereas once a single block in an `if else` matches, it only goes down that path. 
it _is_ sometimes helpful to have if (typ ...) But three things about that... 1. `typ` is a terrible variable name and should be renamed to something else. 2. when using booleans, the operator in the middle should be `is` instead of `==` 3. it's strange to wrap a single variable with parenthesis. it would read better like this... Example 1 if typ is True: # do something here or Example 2 if typ: # do something Note that the latter is non-specific in that `typ` could be a boolean, a non-zero integer/float, a non-empty string, etc. So if you're really testing for True, you should keep that within the statement.
I'm just starting out with python; is there some philosophical reason for the lack of switch? 
Understood, thanks again. As a beginner it will be helpful to see what this tool thinks needs to be changed as a guideline. 
Hey. Just saw this. I'm studying this in university right now and I'm struggling a bit. How exactly does this lib work? It cretes a new thread of processing when you call it?
Its a fine implementation, however I'd argue it would be useful to be able to add additional properties to your object during the cloning process. In fact adding additional properties to the prototype of an object is essentially how classes and inheritance work in javascript. Here's a simple example of what I mean. c1 = ConcretePrototype1() c1c = c1.clone(foo='bar') Which would give the clone all the attributes of the concrete prototype, plus an additional foo attribute that is equal to 'bar'. Implementing that functionality is pretty simple, just let the user pass kwargs into the clone method and call setattr(obj, key, value) for each one, where obj is the clone of self. Allowing the user to pass functions as attributes is a bit trickier (since they have to be binded as methods on the object) but doable. You may be interested in checking out [PyPattyrn](https://github.com/tylerlaberge/PyPattyrn), it's a library of design patterns that I created and prototype is one of the patterns I did. You can view the example for my implementation of the Prototype pattern [here](https://github.com/tylerlaberge/PyPattyrn#prototype-pattern), and the source code for that pattern [here](https://github.com/tylerlaberge/PyPattyrn/blob/master/pypattyrn/creational/prototype.py). The library has a bunch of other design patterns implemented which might interest you as well.
i'll probably draft something up soon to investigate feasibility. so if you think of use-cases, please let me know.
Not sure if PyCharm has a VIM mode, but I really progressed in style when I used an IDE that was good at slapping me when I did not follow PEP 8 and other conventions. Python is great for hacking together a quick working prototype. See where you should have spent more time and if you are still interested in a newer and better version of the project, start over and do it better.
Found this one while browsing, hope this will help. [https://www.fyears.org/2017/02/electron-as-gui-of-python-apps-updated.html](https://www.fyears.org/2017/02/electron-as-gui-of-python-apps-updated.html)
good point. posted it now
It's really eye opening to see our orbit presented at such high speeds. Gives you a lot of perspective.
Wonder if it would make sense to have the radius on a log scale
Is there any reason you don't want to go with traditional gui toolkits (python or otherwise) that communicate to the server? 
 def print_testing(): s=entry.get() print(s) button=Button(text="enter",command=print_testing) The command thing *must* take a function, but an actual function, not the result of a function. Putting the `()` on the function immediately executes it and provides the result as "command". If you have more questions like this it's better to post them on /r/learnpython. Be sure to include which version of python and what OS you are using. 
You can spawn background processes with Electron. See [here](https://www.fyears.org/2015/06/electron-as-gui-of-python-apps.html) for an example.
Exactly, this is just a wrapper application. :-) um... I don't think, a flask web interface is that much large.
It would be neat if you could run it and it would show you where everything is right now based on the date and time :)
I have a nice visualization done with D3JS. In either cases I still need webview.
You can ;)
OP, this blog post might help: https://impythonist.wordpress.com/2015/01/06/ultimate-guide-for-scraping-javascript-rendered-web-pages/
This won't work - BS can't directly cope with pages dynamically updated via JS - it's just a parser.
I didn't really like it, it is pretty ugly too. Also Kivy looks really interesting with a more mobile / material feel to it. I only briefly played with it though. I have made simple and complex apps in pyqt. The nice part is you have a WYSIWYG editor which makes initial coding much easier. I believe this package has it included. https://www.riverbankcomputing.com/software/pyqt/download5
One is mutable, one is not. Similar to `bytes` vs `bytearray` or `set` vs `frozenset`. Tuples are (very slightly) faster to produce. However more important is the semantic difference. A tuple is for a group of dissimilar things that are related to each other. The order and length of a tuple is usually very important, mixing the order or changing the length would corrupt the data. For example we can describe a house by the type of walls, how many stories, type of roof: `house = ('brick', 1, 'tile')`. A list is for collections of similar things. The order is sometimes important but often can be mixed, and the length is usually variable. For example we can describe the rooms in a house: `house = ['bathroom', 'bedroom', 'kitchen', 'bathroom']`. `enumerate` returns tuples because it returns exactly 2 dissimilar things that are related. Same for `zip`. On the other hand, `split` returns a collection of similar things, where the length is variable. 
I've never used it, but would something like [CEF Python](https://github.com/cztomczak/cefpython) fill your needs?
 Looks cool. I would think about color-coding each planet and making a legend, then ditch the names on top of each planet, it looks a bit cluttered when you get to Saturn/Uranus. 
I've heard Java uses classes for everything, and I'm guessing a Java dev would do the same in Python. So make sure you know how Python's super() method behaves. [Raymond Hettinger - Super considered super! - PyCon 2015](https://www.youtube.com/watch?v=EiOglTERPEo)
Happens all the time.
That's procedural and doesn't allow override of default handler so unfortunately that's why I don't do what you are doing. Thanks though
&gt; As a language feature I've always missed it Although I started with BASIC, then 6502 ASM, then Ada for my first professional work, I really came into my own as a developer with Smalltalk. Smalltalk doesn't have a switch/case structure either. I was so used to it that when I switched to Python, I think I had been programming Python professionally for a few years before I even realized Python _didn't_ have a switch. It just was never part of my problem solving thinking
Strings are sorted alphabetically (well, technically by the `ord()` value, but it's the same effect). 
Ah! Lexicographical order. Thanks a lot. I think I will use A = list(map(int, L)) A.sort() A = list(map(str, L))
The character '1' comes before the character '8'. Been this way since Python 0.9.whatever
If I'm honest, they can often be mis-applied or mis-used and are nowhere near as useful or robust as `if` `elif` `else`
[Pywebview](https://github.com/r0x0r/pywebview) is exactly what you are looking for. 
Or a list comprehension, which is more readable IMO: &gt;&gt;&gt; A = ['16', '15', '10', '8'] &gt;&gt;&gt; A = sorted([int(e) for e in A]) &gt;&gt;&gt; A [8, 10, 15, 16] &gt;&gt;&gt; Edit: forgot to sort it.
FYI: Pluto and Neptune cannot collide... the closest the planets ever come close to each other is 2 billion kilometres. One is above the other, which can not be seen in this 2d simulation.
According to the [source code](https://github.com/balloob/pychromecast/blob/master/pychromecast/controllers/youtube.py#L32) you should be using the play_video method, not the play_media one.
Performance differences are generally small if they exist at all. I agree that on reflection, it seems to be inconsistent with python's "consenting adults" philosophy, but there are times when you need immutable/ hashable sequences - for example inserting them into sets or using them as keys in dicts, or as the default argument in a function definition. I don't know anything about ruby, but js didn't support default arguments for a long time (some browsers still don't) and I don't know how it deals with mutables in there now, and its set implementation may be hash-based but doesn't define hashable/ unhashable types so it's unreliable.
Yeah that didn't work either... 
tuples are hashable, which means they can be used as dict keys. Lists are not, so they cannot.
Can you do the reverse -- just use the packaging and publishing, while relying on other methods (pip-tools) for dependency management? For example, with [some aliases](https://pastebin.com/LymbdMKx), I manage like this: # create/activate venv with pip-tools, synced to requirements.txt: envin # add modules to requirements.in: pipa requests plumbum structlog # compile requirements.txt from requirements.in, with dep versions and reasons: pipc # sync env according to requirements.txt: pips # bump specific required module version: pipu requests # bump all required module versions: pipu And the requirements.txt files are beautiful, IMO. With this `requirements.in`: ipython plumbum We get this `requirements.txt`: decorator==4.0.11 # via ipython, traitlets ipython-genutils==0.2.0 # via traitlets ipython==5.3.0 pexpect==4.2.1 # via ipython pickleshare==0.7.4 # via ipython plumbum==1.6.3 prompt-toolkit==1.0.14 # via ipython ptyprocess==0.5.1 # via pexpect pygments==2.2.0 # via ipython simplegeneric==0.8.1 # via ipython six==1.10.0 # via prompt-toolkit, traitlets traitlets==4.3.2 # via ipython wcwidth==0.1.7 # via prompt-toolkit
what are the use cases that u have to use a `tuple` as a `dict` key 
So you're saying that you implemented the propagation algorithms for each planet? 
Holy sh*t! Is there no easy way to combine/export video in Python? 
Alright, thank you people for the suggestions, I did not expect this many. * At basic, I will try to implement from Electron first. There will be some "wiring" required to get it work with Flask server still running in the cloud. However, I am afraid if in the future I need access to OS API. I think with this method it cannot be done, since I have NodeJS codes. * If I have time, next, I will try htmlPY and/or pywebview. It seems a nice solution, however, I need write more codes from what I need compared to the Electron solution.
Can you use beautifulsoup? It's built to handle incomplete tags and automatically fixes them. &gt;&gt;&gt; from bs4 import BeautifulSoup as bs &gt;&gt;&gt; data = '''&lt;Contacts data="People" user="user" date="01/14/2017 "&gt; ... &lt;Person name="Person A" age="17" phone="555-1212"/&gt; ... &lt;Person name="Person B" age="18" phone="555-0000"/&gt; ... &lt;Person name="Person C" age="19" phone="555-5738"/&gt;''' &gt;&gt;&gt; bs(data, 'xml') &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;Contacts data="People" date="01/14/2017 " user="user"&gt; &lt;Person age="17" name="Person A" phone="555-1212"/&gt; &lt;Person age="18" name="Person B" phone="555-0000"/&gt; &lt;Person age="19" name="Person C" phone="555-5738"/&gt;&lt;/Contacts&gt; While you are at it you could use beautifulsoup for everything: &gt;&gt;&gt; soup = bs(data, 'xml') &gt;&gt;&gt; for person in soup.find_all('Person'): ... print('elem: %s' % person.name) ... print('attribs: %s' % person.attrs) ... elem: Person attribs: {'phone': u'555-1212', 'age': u'17', 'name': u'Person A'} elem: Person attribs: {'phone': u'555-0000', 'age': u'18', 'name': u'Person B'} elem: Person attribs: {'phone': u'555-5738', 'age': u'19', 'name': u'Person C'} 
It's better to think of tuples as simple data objects than lists of values. They're useful any time you want to work with *connected* pieces of information. For a lookup, it's a contrived example *and not practical advice* but one situation where you have two pieces of directly connected info is login. Tuples allow you to bundle these sorts of grouped information together and then work with them as a unit, e.g. user_pass = [ ("username1", "password1"), ("username2", "password2")... ] (user, password) in user_pass You could use the same sort of lookup on a dict to get some other data. Think about how you would do the above without a tuple structure. user_pass = { ("username1", "password1"): "api_key1", ("username2", "password2"): "api_key2" ... } api_key = user_pass.get((user, password), None) Other examples would be (x, y) coordinates, and (first_name, last_name) pairs. 
You'd be surprised, there are definitely use cases for tuples as keys! For example, if you had a hierarchical naming scheme but didn't want to faff with nested dictionaries with different depths in different branches of the tree, or if you were using tuples as thin objects, like defining playing cards as (number, suit) like (1, 'S'). Your dictionary could be the string representation of those cards, like {(1, 'S'): 'Ace of Spades'}. As for the default argument, here are a couple of examples. def foo(lst=[]): lst.append(1) return lst lst1 = foo() lst2 = foo() What do you think `lst1` and `lst2` are? Are they the same object or different objects? They are actually both references to the same list, which means appending to one will append to both. The default arguments are only interpreted once, when `foo()` is interpreted (not called!). Which means that every subsequent call of `foo()` is referring to the same list in memory, and every new call appends to the same list. So calling `foo()` for a third time means that lst1 = lst2 = [1, 1, 1]. I came across this issue when trying to code blackjack some years ago: class Player: def __init__(self, hand=[]): self.hand = hand player1 = Player() player1.hand.append('Ace of Spades') player2 = Player() print(player2.hand) And I was shocked to discover that all the players had identical hands at all times. The accepted pattern to get around this is usually: def foo(lst=None): if lst is None: lst = [] lst.append(1) return lst In this case, a new list is instantiated for every call of `foo()`. You could also do: def bar(inputs=(1,2,3)): numbers = list(inputs) # also helps for sets, iterators numbers.append(1) return numbers
Thanks for the reply. I wanted to stick to the standard library so I could just send the script without worrying about any 3rd party dependancies. BeautifulSoup does seem to do what I need though. &amp;nbsp; Is there a way to get ET to not care? I know the easiest workaround is to use try/except block &amp;nbsp; try: for event, elem in ET.iterparse(log_path): print 'elem: %s' % elem.tag print 'attribs: %s' % elem.attrib except ET.ParseError: print 'whatever' But it seems like there should be a better way using only ET.
Nice! I have been developing on Django for a while now. I am very interested in knowing what advantages you see and what costs you are experiencing in going serverless. 
consider a sparsely populated grid. Instead of storing a list of rows of cells you could just have (x,y) as keys. 10x10 grid with 3 items is a difference between a collection of 100 objects where 3 are different and 1 dict with 3. anything that can be unambiguously identified by some kind of compound key can be stored in a tuple-indexed dict.
Thank you. I Do really appreciate the time and effort. &gt; I'm not sure I understand your point here. I just made a variable for convenience's sake (consider it like an informal let clause in haskell). You can write the whole thing in one line if you want to avoid being 'procedural'. Beyond that, what do you mean you can't override the default handler? Well I'm not sure what you're asking or saying here. I think haskell is confusing the matter further as I know next to nothing about it. It's not about the amount of lines the definition takes, it's about making a pattern for potential later re-use (I'm not going to use it, it was just a bit of fun I wanted to share). &gt; I guess the bigger point you're missing here is that you've built something that replicates functionality (via a trivial pattern) that already exists in Python, and is already used widely by many developers. That means for someone to use your tool, they'll probably be learning two ways to do the same thing. Oh right. Well this isn't meant to be a solution, it's a musing on something. I would still advocate that this is clearer than the revisions provided for me to read. If someone has this written procedural in-line then I'd view this as an upgrade for them akin to defining constants by meaningful names at the top of classes or in utility classes. Re-factoring that to use this function is for that reason a good idea for those people as it builds a lexicon of verbs people can draw upon, and as you've stated is the same thing, I'd argue mine is clearer as it hides the implementation details. &gt; You're using a mutable object (dictionary) as a default argument. Don't do that in Python. This I don't know why, can you explain? It shouldn't ever be created if not passed right? surely the compiler takes care of that and keeps it to some degree consistent and readable? Maybe I'll remove default conditions as without them it is useless. &gt; Don't do a try/except without specifying the exceptions you're expecting, like in your switch function. In this case, you'd probably want it to be except KeyError:. Otherwise errors that happen within the called functions may be excepted as well. I agree and accept. If the function call generates an exception (it shouldn't) I can see this could execute default branch despite valid input. Hopefully nobody would have a function with that level of detail in a switch, or would have the decency to `try` `except` themselves within their function, but you're right I should have guarded specifically against the types of exception I hope to catch or as I should have done had the None lambda as the default and only called it upon exception, merely assigning the function then later calling it (removing effects another way). &gt; You can tighten up your switch function a bit, while avoiding the try/except problems. However, you'll see that it ends up being the same as the pattern I mentioned above: I don't agree that the prior code or the revision submitted does the same thing, but I do know try: except: is maybe the wrong tool to reach for; I specifically didn't think of a ternary and now I see it, I'm not sure it's as clean. In any case on the revision example * You have three arguments instead of two. Switches have a single argument and a body. I don't know how to do that in python, so I made a second argument that is the body. It works, but it's not ideal as mentioned elsewhere in this thread. * the idea was to keep the cases and default case within the conditions. Essentially we're arguing over an API decision, so the argument is not awesome for either of us AFAIK * I'm pretty sure your return is too complicated to be considered pythonic * I am happy to be told I'm wrong on this, I'd prefer a PEP reference or code example, prior article to ensure we're not just arguing for the sake. Everyone: Python isn't my strongest language, which is why I listen to experts so I really appreciate everyone's time and I am willing to learn. Happy Holidays and enjoy the weekend all!
I think editing /etc/exports directly can result in bad situation some day. For instance when someone simultaneously editing this file via shell. But for now it looks like the only one option.. 
I find that the chrome driver is kinda slow for any sort of DOM search. The firefox one is usually faster. A better solution would be to use selenium to get the webpage, then parse it through beautifulsoup to do your DOM searches and stuff.
Really cool. 
https://github.com/cztomczak/pycef Using a python to exe you can package CEF + Python so it is portable. I did a proof of concept test ~5 years ago when this project was on Google projects and the capabilities back there were insanely impressive. You can inject into the Javascript scope functions that are bound to "server" side Python functions AND you can have Python logic call browser side Javascript functions so it is possible to emulate ajax calls if you have a wrapper/abstraction library: make a html/js app that can somewhat easily be hosted on a webserver or via cef. This guy https://github.com/cztomczak has been very dedicated to this project and it kills me that he or she hasn't gotten much more traction/attention.
Hey I am doing topic modeling this week too, but on news. Using LDA with gensim. What about you? Just curious: how easy is it to generate topic models on short texts like comments?
Could [this](https://zulko.github.io/moviepy/getting_started/working_with_matplotlib.html) help contain the workflow?
That is very helpful thank you!!
You are sorting lists of strings. If you sorted lists of integers it would come out the way you expect. 
Awesome man! Love Super Hexagon. Is this a generalized AI like Deep Mind or specialized for every game?
The first thing I would suggest is just not allowing default arguments. It's usually a better practice. In that case, if you want defaults you can always make helper functions with partials, closures, etc. If you really want default arguments the typical way it's done in Python is: def some_func(a=None): if a is None: a = {} ... I don't like this pattern. It's not type safe. ...But there's a lot of stuff you could do. Have fun tinkering!
I would look into ansible and saltstack, both tools provide a Python API. I don't know any other options besides writing your own code...
That code is to launch a daemon and control it from some python code. If that's what you need I would use the multiprocessing module instead if possible. However it sounds like your entire program will be a daemon, not just part of it, right? In that case you don't need anything special in the code. It becomes a daemon because of how it's launched. 
Hell yeah, that Pluto love.
Awesome, thank you so much!
Kivy itself mostly runs within the single (main) thread, but you can use other threads as much as you like.
Ya, pretty much. This is going to be a glorified micocontroller project. So no user interaction or interprocess communication. Thanks for your advice!
They're also just good for when you need to generate new instances of a "thing" on the fly. Say you have a game, and you need to be able to add users when they join. You could hardcore some sort of system to do this without classes, or you could do something like this: if new_username not in user_list: user_obj = User(new_username, 1) user_list.append(new_username) Assuming you have a class called User and a list of users in your system to keep track of them somehow. 
Ah, that makes sense. Cool!
Yeah but it works only as a command line argument I think 
you could use something like pygame to animate it, then use a screen recorder. Or you could use this: http://imageio.github.io/ I'm sure there's a million ways to create a gif or mp4 or whatever. People do this stuff.
The idea is to give many computer vision and machine learning tools to build specialized AIs for individual games. That being said, you can also use the same tools to build your reward functions for reinforcement learning / generalized AI ;) 
Like always for those questions, "it depends". Now, is Python easy to use and learn ? Yes. It's the official teaching languages in many universities. Actually it's the official language for all high scools in my country. Is Python powerful ? Yes. If it's good enough for Youtube, Facebook, Instagram and NASA, it should be ok for students. Can Python let you code a DBMS. Yes. It's a turing complete language. Does Python has built-ins that make it easier ? It has a huge set on tools in the stdlib that you could leverage. E.G: &gt;&gt;&gt; import itertools &gt;&gt;&gt; list(itertools.product([1, 2], ['a', 'b'])) [(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')] Would I use Python to learn how to code a DBMS ? Yes. It's a fantastic language for prototyping. Would I use Python to actually code a DBMS that I intent to use in production later ? No. Python is slow, you need you DB to be fast. Plus Python comes with sqlite3, which is already a full featured bullet proof fast DBMS. Some tips: - Python distinguish bytes from text, unlike many languages. You'll need to get intimate with this is you deal with a DBMS. - The struct package can help you with packing and unpacking bytes. - the nmap package can help you with mapping a file inmemory to gain some perf. - the asyncio module can help you make your database non IO blocking even with a lot of readers. - the threading module can help you make your database non blocking for CPU, but you will pay some performance penalty (threads are not increasing performances under Python). The threading.Pool is a convenient interface for it. - the multiprocessing module could help you improve CPU perfs, but require serialization. - the array module can help you save memory on big typed arrays Good luck with your project 
&lt;sidenote&gt;Also check out pyQt if you want to, it in my opinion is much easier to use and looks better&lt;/sidenote&gt;
Yeah, well, I'm a rebel. 
This does not help by correctly sorting, and you also change the type of the input without any reason? It's like I want to *sort* a bunch of Oranges and you say: [appleify(orange) for orange in oranges] Also, the order you represent the example data in is different from any example in this thread? Are you trying to confuse people lol.
What kind of ODE integrator are you using for the equations? If you don't use the right one, the approximate system won't conserve energy, and you might get planets flying off into space! 
You can skip dict initialization like this: from collections import defaultdict g = defaultdict(list) # calls the function passed as argument whenever KeyError would occur g[0].append(1) # adds an edge from 0 to 1 in the adjacency list For nested dicts, you need to do this: g = defaultdict(lambda : defaultdict(list)) g[0][1].append(2) 
The main reason is efficiency and the other is immutability and they're both deeply entwined. Because tuples don't have to support changes - adding, removing, sorting etc. they can use a simpler, more efficient data structure, so they're faster to operate on. But also because they can't be changed - they are *immutable* - they can be used as dictionary keys, whereas lists cannot. tup = (1,2,3) dct1 = { tup: "blah" } # this will work lst = [1,2,3] dct2 = { lst: "blah" } # this will give you a key error
Well by cleanup I kinda mean simplify the source code as the thing I want to do with it might go into a peer reviewed paper at some point (involves interplanetary navigation and optimal trajectory finding)
gitlab support? 
Oh, so you want to wait until the paper is published. I understand. I can't wait to read it. I've been wanting to do the exact same thing (interplanetary navigation and optimal trajectory finding) but at a hobby level. 
I know C, C++, Prolog, Haskell, Smalltalk, a tiny bit of Java, but I've just heard it is much easier with Python. I'm also not saying I am a master at any of these languages either. I can list the specs of the project if you'd like. We really aren't doing much which is why I thought just learning what I needed to know for python wasn't too hard.
There are databases of these things which I can use. Wouldn't label them all, would just have them there
I'm the last person you want proofing your code if my last project is any indication, but have an up vote for your ambition and a relevant XKCD: https://xkcd.com/1646/
Everyone is touchy when their code is involved but I have to reapeat the idea: don't use that thing, some poor soul might have to maintain it in the future. &amp;nbsp; https://docs.python.org/2/faq/design.html#why-isn-t-there-a-switch-or-case-statement-in-python
IMO the most fun way to learn Python.
Neat. What do you use it for?
Feels weird to tell someone not to learn Python in /r/python, so sure, go right ahead! It's pretty different from the other languages you know so I'd say you should be prepared for a bit of a learning curve here.
Simplified work example. Data for measures come in from two different days systems. So I might make a dictionary whose key is (ID, measure, data system a):dataframe and (ID, measure, data system b):dataframe. 
Make sure you include your code, we can't help you without it
added (: 
Thanks for the comment, they are actually slides from an oral presentation I have at some Python meetups, so not exactly in a "tutorial" format but still useful I think.
You could use ffmpeg https://jakevdp.github.io/blog/2012/08/18/matplotlib-animation-tutorial/
Its the theme of my aerospace degree (in the UK so don't do major and minors). Basically, 2 out of 3 of my degree years are general aerospace modules (materials, maths, computer science, structures, aerodynamics etc etc). This year and my masters year are mostly spacecraft orientated.
This looks pretty cool! Look forward to trying it out. 
thanks :)
Like the idea, could be some clashes in namespace of packages that are available 
yeah, kinda of funny but we just pushed some code that uses tuples as keys in a dict!
This tutorial for creating a roguelike using Python is very popular, you may want to complete it and then create something following that http://www.roguebasin.com/index.php?title=Complete_Roguelike_Tutorial,_using_python%2Blibtcod Here's a list of around 70 projects using the same framework (many of them using the tutorial above as a base) https://github.com/search?l=Python&amp;o=desc&amp;q=roguelike+libtcod&amp;s=updated&amp;type=Repositories&amp;utf8=%E2%9C%93
Redis
&gt; what are the use cases Look at the way Redis DB keys are named ["user:1000:followers"](https://redis.io/topics/data-types-intro) or any `group by` SQL query - that is exactly the use case when you can use tuples as a key. 
PyCharm has a good Vim plugin (IdeaVim), and the community edition is pretty full-featured and free. It's definitely worth checking out. If you're sticking to Vim, python-mode is a pretty good plugin to give you a bunch of Python-specific functionality out of the gate, though I'm sure you know what the learning curve is like with Vim.
I use sqlparse to autoformat my ad-hoc queries. Works great!
You could do it with a custom class though. Over ride __get__ to look at the types it what ever of the args.
Welllll... the information is there. You could parse requirements and setup.py and such, download the packages and build the import lookup and resolve... Maybe a little bit out of scope.
Ok, things change, so since I learnt that tuples were more efficient, I don't know, maybe 15 years ago, things might have changed. I don't have time to deep dive this, but a quick google search does turn up evidence that certain operations (such as instantiation) are faster. And the data structures *are* indeed different, but not drastically so: the list of pointers to elements is kept *inside* the tuple struct, whereas for a list, it is *external* to the struct. This has implications for CPU cache locality - extra indirection means more cache flushes, which will slow things down. This stackoverflow question discusses this and shows several views, with an answer from Raymond Hettinger (a very important Python contributor) which explains about the data structures: http://stackoverflow.com/questions/68630/are-tuples-more-efficient-than-lists-in-python However, if you are ever bothered about the performance of using one method versus another, the only real way to know for sure is to *test* it, under your particular use case. `timeit` can help immensely here.
Well python isn't type safe by default so anything /u/nebbly says on non type safe is correct by virtue of that. I think what they meant was that it wasn't safe to use an instantiated object like a dictionary literal `{}` and using `None` is a better way, because None is a value-type and won't follow python object / reference semantics, won't change for the next time the method is called. I never knew that about None type, and I did not understand that about default conditions so it helped me twice! I think that was it anyway, I'd like to know if I missed anything.
The double quotes around "gbggrl" are non-ascii quotes. As such, not a valid syntax. Delete the quotes and type them by hand. Then you will get the same error on line 17. Repeat the fix and you'll be done.
Don't you need to bear relativity in mind to simulate Mercury's orbit accurately? I seem to remember reading that the Newtonian calculations didn't work, until Einstein and Eddington corrected them.
What is this for? Main() -&gt;int
Is there something like this for fire to?
It's to type hint the return value of the function. A feature that, I believe was added in Python 3.5. 
Or even as an element of another (frozen)set.
Everything follows the same object/reference semantics, that's why mutable values trip people up in functions. `None` isn't special in the way it's referenced, it's special because it's a singleton (i.e. `None` is the same `None` anywhere in your program). The reason we use `None` in this way is because of the semantics of it, we could just as well have written the function like def foo(bar=0): if bar == 0: bar = {} And it would behave just the same, but by explicitly putting `None` there we clarify the behaviour we're actually after. To clarify what I mean by everything being passed the same way, check this code out: a = 10 b = "hello" c = [] d = None def foo(e, f, g, h): print(id(e)) print(id(f)) print(id(g)) print(id(h)) print("Outside foo()") for v in [a, b, c, d]: print(id(v)) print("In foo()") foo(a, b, c, d) It will output this: Outside foo() 139683459013984 139683459014048 139683400687304 139683458696784 In foo() 139683459013984 139683459014048 139683400687304 139683458696784 See how the object ids are the same? You're passing references to them when you call your function, so the function-local variables are referencing the outside variables. The tricky part is that a reference to a mutable value like a dict or a list will *modify the dict/list that is referenced* by that variable. It's a question of mutable vs. immutable, rather than pass-by-value vs pass-by-reference. And the reason why this catches people out with mutable default values is that the mutable default value is created once as Python interprets the function, and then that same mutable value gets new references assigned to it each time the function is called without that argument. The same way that `b = some_list` will make `b` and `some_list` references to the same list rather than copying the list.
It runs under 3.4 (at least, on my Pi), so the type hinting might've been added a little earlier. Other than that, this is correct.
Only if OP decides to port it. Firefox recently changed the extension API to make this easier, so hopefully he will get around to it
I think the resolution would be the easy part, python itself has the tools and it is documented so you basically do a 'pip install' and get reliable results to resolve with. The hard part is being able to figure out what to install. If you'd browse a github from a pip installable package you find the setup.py and such easily. Could be a bit harder and with assumptions if you also want requirements.txt and whatever else that is less standardised. I feel this kinda stuff must have been tried right? Parsing dependencies from random projects? 
Thanks. Is this the same for all values? Like are all basic type values stored in the same address and just pointed / referencing the same memory location?
On mobile right now, but I tested it and it doesn't work well with relative imports in Python. from .exceptions import SomeException That would go to a Python file called exceptions, but in my case it wouldn't be in the right module.
You may use color code instead of labels when the bodies get to close and fast to read the names
I did not know this. I had always just used sorted tuples when i needed this. +1
This is a near word for word copy of this article. https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook#gs.1CP8=Sw SHAME SHAME SHAME
Thnx
You might find [EasyAI](https://github.com/Zulko/easyAI) to be a helpful package.
Anytime
So I've written chrome extensions that just worked on Firefox before, but since Firefox's web extension support is still a work in progress it's possible that you used APIs Firefox doesn't support yet. I'll take a look since this is pretty useful, but no promises :)
How about [Jinja2](http://jinja.pocoo.org/docs/2.9/)?
Yes Jinja2 is the most mature library to deal with HTML templating.
&gt; How to store/show results of the games, like at end program can show score of user. &amp;nbsp; Here's a version that tracks user score, checks for input errors (*EG: user types letters when asked for rounds*), and implements a few other useful Python/game features: [**gist.github.com/Enteleform/RockPaperScissors.py**](https://gist.github.com/Enteleform/118446e676bc9eb35bb870c400f10dc6) &amp;nbsp; It's not commented, as I tried to make the code self-explanatory, but feel free to ask if you have any questions.
With 5v. logic, [2N7000](https://en.wikipedia.org/wiki/2N7000) example: http://elinux.org/RPi_GPIO_Interface_Circuits#Using_a_FET search-fu: https://duckduckgo.com/?q=2N7000+"pi+zero"+OR+"Raspberry+Pi"+!g **edit:** It looks like GPIO pins are 3.3 logic. You could use a different FET or a transistor, hints are on the page I linked to, and you could ask someplace more appropriate then R/python. Pins 2 and 4 both seem to be always-on 5v. so I wonder if you know how the pins are actually numbered? 
Yes. Thank you for answering this. Chrome Extensions are not that smart when scoping permissions (or at least presenting the scope information to the user when installing). GitHub does a pjax thing when you navigate normally through it, it doesn't refresh the pages, so this is needed. (Module Linker also uses the pjax thing so navigation is faster and smoother.)
Yes, that's it. Thank you for answering this question.
I like it a lot! Although can you describe the advantages of this over something like bokeh, which also makes it easy to generate and host these kinds of reports? 
Can you give me a link? It should work well with relative modules (at least I tried in multiple complex contexts -- in which I myself couldn't understand from where the hell these modules were being imported).
I prefer handlebars because it just makes the most sense to me but python support for handlebars is kinda lacking
GitHub should support this by themselves. Could be quite fiddly though with all the different forks flying around. 
Ok, I get it. I can only now see that the matching algorithm I'm using is pretty naïve, not considering leading `.` in import paths. Gonna fix this.
Put that quote in the readme!
Jinja2 is the best option! If you like to hack Python and use inline `&lt;html&gt;` in your code maybe https://github.com/dropbox/pyxl 
The best analogy for tuples is to think of a tuple as a *record*, like one row in a database table. The table itself is more like a list, because you can add and delete rows, but each record is fixed size, and the position of each element is important. Another way of thinking of a tuple is that it is similar to a C *struct* -- as others have said, a fixed-size collection of similar things. Even though it technically is an iterable, you would NOT normally use a **for** loop with a tuple, because it is not a series of similar things, but a collection of *related* things. 
Likely the `main` function that was defined somewhere earlier, and where the initial call to `countdown` happens.
Why is `stdlib` a dict and not a set?
It's JavaScript, not python
Herp. I was wondering when they added the `const` keyword to Python lol.
Good question. What is GitHub Enterprise? Does it provide GitHub API v3? Does it generate HTML similar to the HTML generated in the normal GitHub? If yes, then it probably works, you have to change the URLs the extension has access to and runs on by modifying `manifest.json` accordingly. Then load it "unpacked", in developer mode, at chrome://extensions/ If you do that, please let me know if it worked.
Yeah normally people will have main as a function that has the entire program in it. It's so that you don't have any global variables usually
Check this link out, let me know if it doesn't work for you. http://interactivepython.org/courselib/static/thinkcspy/Functions/mainfunction.html
Very helpful. Really thx for your sincere help
I think this book has a power to attract me into it. Thx for sharing personal. Def will go through it.
Aren't all chrome extensions WebExtensions? If that's the case, you should be able to get this to work on Firefox without much of a hassle.
Don't personally know of any. Either you use the try/except block (as you mentioned), pre-prep your data by fixing it, or use a library that's set up to handle invalid XML (bs4). Granted, I don't know why you you expect there to be a better way tbh. It's an XML parser, it is expecting XML. You're passing it something that _looks like_ XML, but actually isn't. 
Well i wasn't 100% sure what i was doing and it said that the variable nextTwo wasn't stated so i figured if i made those global when i went to use it later it would work, but it only created my current problem. And no i don't have it on github, sorry.
No worries, I'll check it out.
Thanks lots.
This sounds really nice! 👍
Thanks for your response! I hate to sound clueless; however, I don't fully understand the HTTP part with Python (still sort of new to Python). Would you be able to possibly provide some links where I could understand more of how I might make use of an HTTP server with this project, please? Thanks!
Why would there ever be someone else? Only machines run the machines. Disable shell access for someone else. Use a lock file if someone else somehow gets in.
This is pretty much a textbook case for [Celery](http://www.celeryproject.org). Some thoughts: - Never poll! If your solution to some problem is, "I'll check every n-interval to see if it's time to do something," that's polling, and it's probably sub-optimal. Use Celery to schedule tasks instead. - You've got two different ways of thinking about the data model: the state of the world now, and the historical stream of events that got you to the state of the world now. However you store the stream should be the canonical record, and the state of the world now should be a caching layer on top of that to make lookups faster. Pay attention to how you do this! It's very easy to choose the wrong level of abstraction and make this much harder than it needs to be. - The text thing seems exciting, but there's no particular reason to use a text message instead of a webpage to sign up for a room. In fact, you'll probably need a webpage to list what rooms are free when anyway. So, keep things flexible enough that you can easily support both modes of interaction. Heck, you could also support a Slack bot or Telegram or whatever if you structure it well enough.
Okay thanks 
Thank you I will try this out when I get home. It should work. 
Oh no, not at all ;)
Thanks ! Yes I will write a proper documentation soon. I keep you informed on r/Python.
This is just a link to a blog post of someone promoting their own udemy course of something that is freely available online at 100 different places...
25-45MB for just the Python to interpreted + whatever libraries needed just for it. ~40MB just for Chromium embedded. AND the huge variable is the pyCEF can be integrated with WX or QT which can have a filesize foot print that I believe starts ~90MB. Personally I would avoid all of them and just rely on the CEF window. That, install size, is the one instance of any other language vs Microsoft's ecosystem that people ignore. User's just see the ~15MB visual studio runtime and ignore the hundreds of MBs of preexisting support dlls already installed on the computer.
A few things... 1. This may just be an issue with how you copied/pasted your code, but I'd expect a syntax error before that given you didn't indent on line two. After you define your function, indent everything below it that belongs to the functions. See: def checkTwo(char): if board[0] == char and board[1] == char: global nextTwo = 2 return True if board[1] == char and board[2] == char: global nextTwo = 0 return True 2. You don't define a variable as global and define the variable in the same line. First you state you are using the global variable, then you work with it. See: def checkTwo(char): if board[0] == char and board[1] == char: global nextTwo nextTwo = 2 return True if board[1] == char and board[2] == char: global nextTwo nextTwo = 0 return True 3. You don't need to state you're using the global variable at every if statement. If every if statement in the function is using the global variable, you can just define it once at function level and save yourself a lot of time/lines/clutter. See: def checkTwo(char): global nextTwo if board[0] == char and board[1] == char: nextTwo = 2 return True if board[1] == char and board[2] == char: nextTwo = 0 return True That's just getting into the issues with the code as you typed, not getting into any issues of... efficiency.
Not an answer to fixing the problem, but a shit ton of if statements like this is...not pretty. You can use a dict to emulate case. This prevents having to run through a bunch of checks to get to the bottom of the if set.
I think it depends on what exactly you are trying to get out of the tool. It should be able too though. If you have feature suggestions or ideas for improvements, feel free to create an issue on the repo. :)
why is there no frozendict?
It should be fixed on https://github.com/fiatjaf/module-linker/commit/f221bac13544517e47d43ed5b7270394c7c4a664
Note that the Installation section does'nt mention Microsoft Windows. How difficult would it be for you to try the installation on Mac or Linux?
Do pip install -r requirements.txt and pip will install them all for you. Best create and activate a virtual environment first. 
I have an old MacBook Pro, but a solid currently windows PC. Do you think it would be worth it to learn and install Linux as a second OS on my PC if I am going to be doing programmatic data analysis?
When I pip install it is able to do most of the modules, but unable to build a .whl for scipy. I get this long list of errors detailing all of these dependencies it is missing: http://imgur.com/NpqW5eg After reading the scipy webpage, these dependencies seem very difficult to setup. The typical recommendation is to use Anaconda, but that doesn't have the version of scipy I need for landsat-util. https://www.scipy.org/scipylib/building/windows.html I haven't tried using a virtual environment yet. Haven't done that before.
This was proposed as [PEP 416](https://www.python.org/dev/peps/pep-0416/). A list of rejection reasons are listed, which I heavily disagree with. &gt;According to Raymond Hettinger, use of frozendict is low. Those that do use it tend to use it as a hint only, such as declaring global or class-level "constants": they aren't really immutable, since anyone can still assign to the name. &gt;There are existing idioms for avoiding mutable default values. &gt;Multiple threads can agree by convention not to mutate a shared dict, there's no great need for enforcement. Multiple processes can't share dicts. I feel Raymond doesn't get why immutable data structures are useful to application programmers, even if you can reassign the variable. Also pushing the cognitive burden on the programmer by saying there are existing idioms or conventions misses the point. It's like asking people to stop writing race conditions by writing better code instead of providing guarantees or better tools/data structures. This was proposed in 2012, where only Haskell was pushing for immutable data structures (among many other unique principles). Now with the popularity of Clojure, Kafka, Redux, or other tools espousing the benefits of immutability it's becoming harder to ignore. 
Well, okay. How would I start with PyOpenGL?
For me this is 2 parts, with an extra "maintenance" function to seed the DB. You could have a crontab running every minute. This polls the DB finds anyone who's room has expired since last poll and sends them a message to GTFO. You would then have a small flask web server, that is connected to twillo that listens for texts, checks if the room is free and replies with either, Yes or no, depending on if the room is already taken. Crontab would look something like this. import things, stuff, twillo def main(): expired_rooms = SQL("SELECT user.name, user.phone FROM user INNER JOIN room ON user.current_room == room.id WHERE room.booked_until &lt; now()") for row in expired_rooms: SQL('UPDATE user SET current_room = %s', None) twillo.send_message(row['user.phone'], 'Your time is up, GTFO') if __name__ == '__main__': main() To handle the text messages, something like this from flask import Flask HOUR = 60 * 60 app = Flask(__name__) @app.route('/message') def message(): data = request.get_json() # Don't forget to excape user input! free_room = SQL('SELECT room.id FROM room WHERE room.free_until &gt; now AND room.name == %s', data['room']) if not free_room: twillo.send(data['from_number'], 'Room not free try again') return SQL('UPDATE room SET free_until = %s', (date.now() + HOUR)) SQL('UPDATE user SET current_room = %s', free_room) twillo.send(data['from_number'], 'Room booked you have to get out in ') And if you need to seed the first set of entries just loop over some csv and throw them in import csv def main(): with open('free_room_list.csv') as fh: lines = fh.readlines() for line in lines: # There is a CSV library that does this much better. row = line.split(',') SQL('INSERT INTO room (name, free_until) VALUES %s %s', row['name'], row['free_until']) if __name__ == '__main__': main()
It does'nt cost much to try a linux VM on your solid machine.
So..... Passionate
Sweet! Thanks for making Module Linker btw!
Didn't John Carmack only code in C++
Woah, mate... you okay?
Yup but that's no reason not to code it up in whatever. There have been ports to all sorts of languages: https://en.m.wikipedia.org/wiki/List_of_Doom_source_ports
Non-Mobile link: https://en.wikipedia.org/wiki/List_of_Doom_source_ports *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^56553
Dynamic typing. It's handy, but it makes Python slower by a factor of 1000.
What did it say?
At that point you're really talking about a different language, rather than an adjustment to Python.
Also, not everyone is John Carmack. 
I would remove the typing module and just merge pypys jit. 
That's not really "removing" something. It is dramatically changing the structure of the language. 1000 times is a gigantic exaggeration. 
Argparse, it's so unpythonic...
+1 for web2py - sure there will be some new stuff to learn but what you get out of the box is impressive especially the database functionality which will be important to you. Like you [OP] I am a relative noob to programming, I chose Python for its less fussy syntax and its extensive libraries and web2py is my framework of choice - you can get basic stuff working fairly quickly and get help with the harder stuff from the friendly support community. You will be amazed at how easily you can switch from sqlite to mysql (or many other database) with its DAL (database abstraction layer). One lesson is that sqlite is fine for single user applications but less appropriate for multiuser environments - so you should investigate that. I spent a couple of years doing every online course I could get for Python and a few hours/days adding basic web2py to my limited arsenal but it was well worth it - after a few months (for a guru this is a few hours) I now have a fully functioning web hosted application (on pythonanywhere) for client bookings that generates pdf invoices provides calendar views and much more. Much done but lots more to learn and I can't wait...
Google Codejam is a coding competition organized by Google every year. Here is the link to the website: https://code.google.com/codejam/ I participated in one of the sub-rounds 1A this weekend and could not qualify for round 2 but I have 2 more chances - round 1B and 1C. I am using Python as my language to provide the solutions. Thank you for your interest.
This might be of interest. It's doom written in python https://github.com/Pink-Silver/PyDoom 
see if this helps. you'll also need urllib, pafy, and re modules cast_search_query is the youtube string to search def search_youtube(query): html_content = urllib.request.urlopen("https://www.youtube.com/results?{}".format(query)) search_results = re.findall(r'href=\"\/watch\?v=(.{11})', html_content.read().decode()) print("search results:\n{}".format(search_results)) return search_results import pychromecast, pafy, urllib CHROMECASTS = pychromecast.get_chromecasts() cast = CHROMECASTS[0] cast.wait() request_meta = urllib.parse.urlencode({"search_query": cast_search_query}) first_found = search_youtube(request_meta)[0] media_metadata = pafy_object(first_found) print(media_metadata.allstreams) url = media_metadata.getbest('mp4').url_https mc = cast.media_controller mc.play_media(url, 'video/mp4') mc.block_until_active() edit: you makin' a skill? ;-) there are a few assumptions made with this code that could otherwise be edited... first, my code searches for all chromecasts available on a network and picks the first one (CHROMECASTS[0]). I believe you already have code to identify the chromecast you wish to use. Second, this code assumes you want/have the bandwidth for the best possible stream, in mp4 form. There are other stream options available through the pafy object's (media_metadata in the above example) .allstreams list.
For-loop else clause. If you don't absolutely know what it does, reply first with what you think it does then reply to yourself when you find out what it really does and let us know if you think it should still be in Python. 
Isn't named tuple implemented with slots? Also tuples are immutable. Things with slots aren't. I see lots of things slots do that named tuples can't.
And rollercoaster tycoon was written in assembly by one man. But our computers are much more powerful now, so you can get away with a language like python for building a retro game.
Statements. They got rid of print, let's do the rest next. Everything should be an expression. Esp assignment.
That's what people keep freaking out about with type annotations. I disagree. Just a new feature that you can choose not to use.
Try /r/learnpython
What the fuck?
In a practical sense, this ends up requiring nontrivial apps to use both rather than optionally one. Groovy is a great example of this theory not playing out well in reality. 
Link to study? 
Give pyglet a try!
I would like to see a situation in which they are useful that can't be done without them. I genuinely curious as I've never said to myself "a for else would work great here".
Parenthetical print
Doom isn't a 3d game. It's a top down shooter displayed via ray traced graphics.
It just does not adhere to python principles of being close to english expression. Else just does not make sense in this context. They used because they did not want to reserve another keyword. But it does not do what people expect it to do. 
I know, who thought it was a good idea as-is? Crazy I say!
I wouldn't amputate so to speak but holy crap is ... str.join(list) ... just not intuitive. I know what it's trying to do (I've been a Python dev since 1.5.2) but it's *still* something that irritates me. edit: I wish it were just: list.join(str) So: ','.join([1,2,3,4]) becomes [1,2,3,4].join(',') simply because it *reads* better.
I agree... Confused here. It's awesome.
I felt the same way coming from the ecma world of string.split('.').join(', ').
http://benchmarksgame.alioth.debian.org/u64q/python.html Which one is 1000 times slower? &gt; Why do you think Python is slow? Well PyPy is 7.5 times faster without changing the type system, so it's not just that: http://speed.pypy.org/ 
I asked Raymond Hettinger a similar question on my old podcast: what did he *not* like about Python. It took him a minute to come up with an answer: "rich comparison". I think I agree. Python originally just had ``__cmp__``, which returned "less than", "equal", or "greater than", like the C function strcmp. Now we have six functions and plenty of headaches.
yea, that one has always bugged me as well... 
It's an important memory optimization for some large projects.
That'll never happen. Assignment is explicitly *not* an expression, to avoid mistakes (e.g. the C classic "if (a = 3)").
I think you have it backwards though, the condition is met if *not* broken if I recall correctly
Only if you're using C. Python isn't C.
Maybe my thinking set is to biased since I mostly work with C. 
Python is often described as "strongly typed", meaning that the language refuses to guess about how different types relate to each other, and requires you to explicitly convert between types if you want to. To me, this seems like an exception to that, which is why I think it could stand to be removed.
Is the reason for being str.join() because the result is a string, and it's supposed to be more intuitive that a string method returns a string?
Umm, gets called if the iterable is empty?
bool is bool, not int. Following your logic any type implementing `__bool__` should be regarded bool. 
Yeah, and let's remove its name too, we might call it cython.
Not necessarily. str.split(c) returns a list. As u/ExoticMandibles said, it's because it would require a bunch more C code in the backend to make it happen.
TIL. I've had several scripts recently where that would have been perfect.
 for x in range(100): print('.', end='`' * x)
You can turn off the GIL in Cython
If you still haven't solved it, these are the errors in the screen shot above: * In the top four lines (for keys and secrets) remove the spaces inside the quotes. * `"` - this is a double quote. What you did was type single quote twice - `''`. This is not a valid syntax. If need be, copy the double quote from above to get the correct one. BTW, what is the editor you are using?? 
I would add a Select Case system. Also a little better hardware communication; I'm working on a GPS project and it's difficult to tell if the GPS daemon has lost GPS reception/fixation.
Thanks for the reference material :)
textedit on mac
Thank you! I can see it now, I'd never thought of it or realized 
&gt; That code style is utterly un-Pythonic. That's because it is not Python ... it is ECMA ... 
If you think that being a subclass is equivalent to being the same type then I recognize I'm the one not making much sense here. Also google for boolean algebra and notice how closely related 0/1/+/* have been and still are to f/t/or/and. Bye.
Ah, and regarding bool vs integer algebra, maybe a better critique would have been for + to be implemented the boolean way when done between bools.
I think that's a bit nicer. Never knew about it, but I'd use it in the future. I primarily work in another language, LabVIEW, and this would be very nice there. The language is a graphical data flow language, and if you wire things into a for loop and pass values out, if the for loop doesn't execute it passes out default values. It makes for some ugly code because if you're passing in a reference to run a method on every element of an array you need to check for an empty array otherwise you'll pass out a bad reference. /offtopic 
I understand how to use that. I'm looking for something that looks like the example I showed. I thought it was something that already existed.
You shouldn't need to install the python os package as it is a part of the standard library. https://docs.python.org/2/library/os.html Simply call `import os` and you should be fine.
eval()
like others said, that would be like writing Cython then. Right now, it exists as an option, but looking at code bases, we mostly only tend to use it for scientific computing; my feeling is that a lot of people might not like to bother with static types in Python ... so why enforce it?
https://xkcd.com/1172/
GIL
[Image](https://imgs.xkcd.com/comics/workflow.png) [Mobile](https://m.xkcd.com/1172/) **Title:** Workflow **Title-text:** There are probably children out there holding down spacebar to stay warm in the winter\! YOUR UPDATE MURDERS CHILDREN\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1172#Explanation) **Stats:** This comic has been referenced 1071 times, representing 0.6903% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_dgbp8wf)
collections.Counter Use the function most_common(5) to give you the 5 most common items in a list 
I think this really depends on your use case. For things whose comparison fits what you see with real numbers, sure. But there are other use cases you can define that require the ability to distinguish between `&gt;` and `&gt;=`. For this reason, I wouldn't want to miss out on the multiple comparison functions. I would actually be okay with having both ways of doing it (although they should be mutually exclusive) with the rule that you use `__cmp__` unless you absolutely have to use the others. FWIW though, functools has a [total_ordering] decorator you can put on a class so you only have to define two ordering methods.
This is seems kinda difficult, but doable if you know the right piece of knowledge - [Shunting-yard algorithm](https://en.wikipedia.org/wiki/Shunting-yard_algorithm). This requires knowledge of post fix notation and using stacks (or stack-like data structure, python list works). The rest is left as an exercise to the reader. 
Actually doing it gave me the google coding challenge, which was amusing because I was asking for pretty much the dumbest programming search I made all day. Didn't mind it. Was in a brain fart. I acknowledge this fact. 
Whilei would never advocate for getting rid of it (way too useful), I do actually think the `finally` keyword may have been more appropriate - although that comes with its own issues given the inconsistency it would present between `try ... finally` and `for ... finally`
Now are you attacking me for suggesting to overload the operators or for missing the fact they're not? 1 + 1 = 1, t or t = t... It might be, I really don't care, that surely would follow traditional usage. Besides that, I just pointed out two grossly wrong statements you did: 1. bool and int are the same type (enter the repl and eval `int is bool`). 2. There is no algebra that makes sense for booleans (with which George Boole wouldn't agree). I don't want to discuss all night about this. If you think 1 or 2 above are true, or if you're going to pretend you didn't say any of those, it's up to you.
I'm mixed about this. On the one hand, it is kind of unclean. On the other hand, multiplying by a Boolean can be really convenient, especially in lambda functions.
Why? Sorry I'm new to python and learned python 2.7 and haven't really looked back &amp;nbsp; edit: I'd like to add that my school is pretty weird in terms of coding classes. I go to a very good public high in NYC and the coding classes are so backward. For projects that requiring reading and writing data to .txt they didn't allow us to use any data structures so we had to parse through .txt assign all the data or part of the data to a variable and then paste it to another .txt in weird ways. They don't allow us to use while loops instead we can only use normal loops. They don't teach flow control statements for some reason and they never touched upon classes and inheritance and anything related to the fact that Python is an OOP language. I understand some of this is to make us think with building blocks but I'm one of those people who believe that if there is a way to do it easier then you should teach that way and have us use it in the code no point in reinventing the wheel. I understand that the above restrictions are minor and can be good for students to understand stuff in a different way but frankly I think it's kinda dumb. Needless to say, I'm teaching myself now. 
Regarding whether they're the same type, you're arguing technicalities. Try entering `True == 1` in the repl and then try to tell me that bools aren't integers in Python (or just read the documentation that I linked to in the first place). Regarding algebras, sure, Boolean algebra/logic is a thing. But it doesn't make any sense to represent that with arithmetic operators in Python.
As a general rule, avoid installing packages to your root python installation. Use a tool such as [virtualenv](https://virtualenv.pypa.io/en/stable/) to create a virtual python installation for each of your projects. This makes it easier to manage multiple projects that may have conflicting requirements and never requires admin to install additional packages. PyCharm has [excellent support](https://www.jetbrains.com/help/pycharm/2016.3/creating-virtual-environment.html) for virtualenv and other tools as well such as Conda.
The syntax for creating a decorator that accepts arguments is nasty. I understand why it is that way, but I'd prefer syntactic sugar to prevent the triple nested function and messy use of functools.wraps which ought to be automatic. From memory, try to write a decorator that accepts optional arguments, works correctly with all default arguments, and doesn't trigger UnboundLocalError. I dare you. 
The feels? 
Argparse is great because you can get a lot of functionality out of it, even if you do need to read the hell out of the docs every time you use it, and it's a little complicated to do simple things. However once you start trying to extend it, the underlying code is very difficult to work with, and required me to extend it in a way where I was using 'protected' attributes.
I dont see why people get so offended by a hypothetical post. It's not happening. Who cares?
Try docopt. You'll read the docs once.
PyPy is fast because they compile blocks that are run a lot. If there are two paths through the function, they compile it twice. They are static typing the functions on the fly. 
For-else is wonderful; it should just be called `then`.
I'd google ast parser
except 'finally' on exceptions always happens (even if you raise inside the try: part) but 'else' on for doesn't if you break (or raise)
I'd replace C with Rust as underlying language of default implementation. This would drastically improve quality and accessibility of low-level code in Python ecosystem.
1. Generators would throw an exception if you used them after exhausting them. I've been bitten too many times by writing my functions to take an iterable, iterate over them twice, and then realize the second time the loop didn't run. 2. NaN should throw an error when you try to hash it. Having NaN in a dict or set is pretty buggy. 3. ~List. Maybe I'm missing something but it seems deque is what list *should* be.~ Edit: it seems deque random access is O(n). Oh well.
What's so bad about list? Wouldn't a deque access be O(n), where list access is O(1)?
are you just being edgy or do you have some legitimate reason for disliking python 3?
Because the 2/3 schism harms the python community. Magically getting rid of the old one would solve a lot of pain. As an aside, why did you specifically learn 2.7?
Fwiw, I also despair at dynamic typing, but that's not what's slow here. Compilation != Static typing.
It isn't working in this directory because this directory has a file called `os.py`. When importing packages, Python looks not only in the system paths, but in the current directory too. And it looks in the current directory first. So if you have a file `monkey.py`, you could write in another file in the same directory `import monkey` and it would work. So when you have a file called `os.py`, Python will assume that that's what you want it to import, and not the actual system module – and you get something other than you expect.
@ is matrix multiplication in numpy
Okay, I mean contents, crosslinks (link to method), pictures, custom styles, root markdown where links to others live. And can I actually create custom md file with inserted autogenerated api?
Thanks for the extra clarification. I sometimes forget how much research I've put into things like this.
It was a huge misstep which unnecessarily divided the language. While it has many technical merits, there are plenty of ways they could have been incorporated into Python 2, and many of them have been. If we weren't distracted by Python 3 I'm sure we'd have got it done by now, and users wouldn't still be paying the price.
well, off the top of my head, if a database query returns an empty set, it's useful to return a different type of response. sure, you could check the length every time, but that gets old edit: nevermind. it doesn't do what i expected. I assumed it was called if the iterable was empty. that's retarded. i retract my comment
and reduce execution time. Rust is consistently faster than C++ but slower than C. 
The datetime module. Just... make it go away. 
are you really using print so often that the parenthesis causes a problem?
Python itself is quite slow. But there exist some great libraries for data mangling like numpy, scipy that are actually written in C/C++. Meaning they provide a very powerful and fast processing combined with a convenient Python interface. This way you get basically the best of two worlds: speed and a great high level language. 
What would `','.join('abc')` do?
yea, for me unicode handling alone was enough reason to justify a transition
Other languages have been doing this for decades (see C). At the very least this could have been achieved on a module by module basis by having something like #pragma Python3. Then at some point in the future you make this the default (modified by command line switch), with #pragma Python2 for anything left. The problem with the continued existence of Python 3 as a separate language is that it continues to split the effort. It's my understanding that Python 2 continues to be considerably more widely deployed. Hypothetically removing Python 3 would have much less impact than hypothetically removing Python 2.
I agree that parametrized decorators are kind of awful, but if you haven't you should try the default first argument trick - [slide 49](http://www.dabeaz.com/py3meta/index.html)
Completely agree, I love python byt async is disgusting
This makes total sense, nonetheless, I would still find something like PHP's implode() more intuitive than str.join(). 
That is true. I have been coding python since 1.5.2 in about year 1999. I dont think i have used it even once.
Some of these are rather unpythonic. I.e Anagram should have used a dict to count letters. Would have lead to much more clear and readable code.
EvE online was produced using Python, causes some problems these days. 
camelCase really bothers me too If i find a camelCase in Python, I start to wonder if the person has ever read the pep8.
&gt; At the very least this could have been achieved on a module by module basis by having something like #pragma Python3. Then at some point in the future you make this the default (modified by command line switch), with #pragma Python2 for anything left. That's exactly what they did (with \_\_future__ imports) as far as it was technically possible. Some changes, however, were just impossible to do like that.
I agree. The [moving average example](https://github.com/keon/algorithms/blob/master/queue/moving_average.py) could be cut to half the size if he actually used the language features (e.g. `sum`on iterable instead of for loop) and the standard library properly (`maxlen` argument to `collections.deque`). For a project whose purpose is to show off minimal algorithms in Python, this seems important. import collections class MovingAverage: def __init__(self, size): self.queue = collections.deque(maxlen=size) def next(self, val): self.queue.append(val) return sum(self.queue) / len(self.queue) 
It's not really a backend thing, it's more that every custom iterable would have to implement join, or you'd have to convert them to a list to be able to join them. I much prefer `''.join(generate_strings())` to `list(generate_strings()).join()` from both a performance standpoint, and a API hygiene standpoint. Having it on `str` requires one method that only needs to know about iterables, a very generic and basic concept in Python. Having it on `list` requires `list` to know about `str` and string concatenation, and now you have to decide for each iterable type "do implement `join` on this type?" If yes, now you need another method, and that type needs to know about string concatenation. If not, you have to do a potentially copy of the data to a list to be able to join a string. Plus, as a regular programmer I now have to know which types I can call `join` on and which need to be converted to a list first.
If I had to implement `join` as taking `*args`, I'd do it like this: def join(self, it, *args): if args: return self.join([it, *args]) # ... standard implementation below ... That way 1 arg is always the standard behaviour, and you only get "autoboxing" for 2+ args. But yeah, just wrap things in a list if the items to be concatenated don't come in an iterable.
Python is great component in games, see EVE online
&gt; 1 + 1 = 1 Bro.
&gt; Argparse is great because you can get a lot of functionality out of it, even if you do need to read the hell out of the docs every time you use it, and it's a little complicated to do simple things. YMMV. I never need to read argparse's docs, and it's not because I have good memory -- I just find a CLI tool of moderate complexity that I know uses argparse, look for the type of usage I want, and liberally copy-paste. I find argparse's API self-documenting enough that, with this strategy, I don't really have to look up or memorize anything much. Just the difference between '*' and '+' for nargs -- which matches regexp conventions anyway. (IMO 'crossreference existing code that does X with Y' is generally a solid strategy anyway, it's just that, as benefits of writing self-documenting code go, "saves you time reading up on the APIs you use" isn't very obvious)
",".join(iterable) work with any iterable. I means iterable can be a tuple, a list, a string, a file, a set, a dict, a generator or even a custom user class overriding \_\_iter\_\_. Doing it this way is less intuitive, but so much more powerful. Iteration is at the core philosophy of the language. Once you master all the implication of it, you really master Python. 
You don't want to remove to something here, you want to add something: a better API. That's no the question. Besides, there are already libs to make creating a decorator easier.
Without replacement ?
Without replacement ?
It's not "what would you add to python"
As much as I like that, the title is about removing stuff. You are missing the point.
Nothing by default. In you don't install anything, @ is useless. Libs can use it though, and numpy uses it for matrix multiplication.
I am working on a text based browser game made with Flask. At the end of each week the best players will receive bitcoin prizes and the game starts over.
Arrow would be a decent replacement.
I don't think it makes sorting easier. I'm pretty sure sorting only uses less than and equals, and only cares about true/false results. In other words, exactly what ``__cmp__`` provides. Which makes sense--after all, Python supported sorting long before rich comparison was added. Rich comparison is really for the boolean comparison operators, and the NumPy guys wanted it. It's so you can do things like return something besides True/False from a comparison. For example, if A and B are matrices, A &lt; B also should return a matrix. See PEP 207 for more.
So you want to replace something. It's about only removing something. Read the post title.
Having to grep "f'", for you niche activity (let's be real, security audit are not even 0.001% if the python activity) is not a good reason to kill a feature that is useful to most of the community.
Books will help you learn, but before you get demotivated it is important to know that 3D and raycasting engines needs quite a bit of experience to fully grasp the concept. Take it a small step at the time, it is ok to do a carbon copy of tutorials, but take a few steps back if you get bored.
Rich sorting means that getting the key of the max value from a dict is: max(d.items(), key=lambda x: x[1]) It means sorting by size is: sorted(iterable, key=len) I means get the first result of alphabetical order of string representation is: min(iterable, key=str) Basically, any complicated sort become super easy. With cmp, I have to look up first every time what I have to return, then I have to write a full function returning -1/0/1, then debug it because I probably forgot an edge case.
I agree, in some way. I found very hard to wrap my mind around that kind of async programming model. I (personally) think the David Beazley's curio package implements THE CORRECT WAY to do async, and it should be included in the standard library instead of asyncio (or, at least, alongside it). Can't wait to see the first curio stable release. 
Python is just a fantastic language to manipulate data and a wrapper of choice for C/C++ code. Big data needs a few expressive calls from python to manipulate complexe C/C++ code. Video games need: - repeated call in Python (way more often so more expensive) - embededing python in the engine (other languages are easier to embed such as lua) All in all Python is not a bad languages for video games, but it's a way better languages for big data. The reason Python did not succeed in video games is more cultural.
Yes. I don't remember the last time I wrote an iteration over a string's characters. But I know how many times this feature turned out to be very annoying.
Concurrent requests with aiohttp
I haven't used this myself, but I'd start with something like this: https://developer.nvidia.com/how-to-cuda-python
[This](https://ideone.com/QG0lCM) is what I came up with in ~50 minutes. You can add any constant or function by adding an entry to **math_constants** or **math_funcs**. But I agree with the other posters, 45 minutes is not enough for this kind of task.
Indeed. I'm using grep mainly because I switch *a lot* between languages so it is hard to keep up-to-date tools that are specific to each language. Besides there are already good tools like bandit (https://github.com/openstack/bandit) for security reviews, I was merely stating an example. There is indeed no specific security vulnerability that has been found yet.
You can create an immutable mapping now with MappingProxyType, but I agree with other comments that an actual frozendict class would be more useful. from types import MappingProxyType DATA_MAPPER = MappingProxyType({ VENDOR_FIELD1: MY_FIELD1, VENDOR_FIELD2: MY_FIELD2 }) def convert_record(record, mapper=DATA_MAPPER): pass Generally, I find them useful for defining a default mapping like above, but allowing the flexibility to use a different mapping in a function call. 
Python is a great glue language. It's easy to read and write, easy to explore and iterate, and most importantly, easy to work with libraries in other languages, as well as all manner of things like web APIs, files and so on. As you say, if you were to write a neural network in python it'd be slow - so nobody does that. What they do is write their setup, teardown and analysis code in python, and somewhere in the middle tell numpy (which is mainly a C/C++ library) to do the actual array manipulation. Or even that requires bouncing back and forth between python and compiled libraries a bit too much, so the major deep learning libraries allow you to do your setup on python, define a model in python, and then hand that entirely over to a compiled library like TensorFlow which constructs, trains and runs the model.
"Remove the lack of". Yeah, everyone know that being a smart ass is what makes good language designers.
I do not regard C as fully backward compatible. Try working with a large codebase of pre-ANSI C. Even old, post-ANSI/post-K&amp;R C is very different. I sometimes delve into old MUD and Rogue codebases and the ones from that era (early 1990s) need extensive fixing to get them to build and run stably using a modern compiler. Java is probably a better example.
This is why it should be removed. :-)
You should make this a top level comment IMO.
is that better time complexity though? dict method takes O(n), does timsort use a linear sort on strings?
Counting characters is generally considered better. It runs in linear time; sorting both is loglinear (in addition to a linear comparison).
Wouldn't the GPU still be executing programs that need to be optimized as much as possible? I suppose most game devs don't have to write their own engine, but studios that are making an engine for a game would write in C(++) or something "closer to the metal" at least for the engine parts right?
You're right again.
I suppose `__join__` methods might be needed, but then again not really if the object supports iteration. 
As someone else suggested, wouldn't `join(iterable, string)` do the trick and actually be more Pythonic?
Indeed it can. Just throw it into the default_docs folder before running the generate command and all the contents of that folder will be copied over into the docs folder before it parses and generates the API documentation. You'd want to make sure any references to images and links are not absolute but instead relative to the docs folder and not default_docs.
Also, my copy of *Doom II,* for the Mac, ran on a G3 processor with a clock speed of 100 MHz. Today's processors could probably run a port written in hieroglyphics. ------------------- Edit: Wow! I just realized how wrong I was. It actually ran on a PowerPC 603e processor, running at 100 MHz. That was my [Performa 6290CD, a 1996 model.](http://www.everymac.com/systems/apple/mac_performa/specs/mac_performa_6290cd.html) I didn't get a G3 processor until I bought an iMac, in 2000. (I believe that ran at 500 MHz.)
How do you lookup an attribute of a named tuple by name programmatically? Edit: got it. getattr(nt, 'attr')
Yes! I'm one of the current maintainers. There is a lot of activity in the main branch. One reason for the delay in a proper release is that the entire codebase has been refactored to be dual python 2/3 compatible. There has also been a lot of fixes and cleanup going into the codebase. Not many user visible changes, but there are a few nice features I have planned for the future. One advantage of pyglet is that its pure Python. It also has the full power of OpenGL available if you want/need it, without additional libraries. If you don't want to dive that deep, there are easy to use Sprite and graphic primitive modules available. I'm not sure what you mean by smaller. 
I do not believe that there is enough call for this structure to justify core developers' time writing the code, docs etc. You can always raise the issue on python dev or python ideas but I suspect that the answer would be the same. 
I know it's just a set of examples but there is some test code at top-level which is not so great as it runs on import. Better would be to put it into a `test()` method of each module move it to its own file.
Two years? Python 3.6 was released in December 2016 - it's still brand new. Needless to say, I wouldn't expect you to see many in use in libraries (due to maintaining compatibility) and probably only in applications​ that can define that they only support 3.6+.
Thank you internet stranger, just picked up the full bundle. Are you aware of any kind of order these should be read in?
distutils. Packaging in python aged badly. Peoples now use requirements.txt with pip has a replacement of setup.py. we were the precursor with virtual env but time passed and tooling in other language are better. I play a lot with rust and cargo is really a great tool to use.
Which library is most pythonic? 
You found more test code than I was able to. 3200 lines of Python algorithms, the easiest thing in the world to test, and no automated test suite. That makes the code dangerous for real world applications. It's a pretty bad tutorial / example to set, too.
Virtualization. Building a test lab with a bunch of VMs is essential in learning "hacking" these days since you'll need somewhere to learn and test exploits etc. 
It'd be a lot easier if the Python community &lt;officially&gt; also used something like Go's `fmt` tool. Then you wouldn't be using cultural resource time to police people's style, and people can write in whatever style they want, but have the appearance of a culturally unified style.
Yep, I got it wrong. Somehow I thought it was introduced earlier.
Go look at numpy!
"I'm only half irrelevant so it's ok" 
List and dict don't have the same pessimistic complexity. It's intentional. Dict and set are pessimistic O(n), not average O(n). It matters if you want to present "perfect" algorithm. E.g. if you're on interview, it's good to know the difference.
Is there a way to do that without reposting it?
I'll tolerate it as long as I never have to use it. For any open source project, or any code designed to be shared or used by others, abiding by standards massively reduces the cognitive overhead of using it.
&gt; I'll tolerate it as long as I never have to use it. So you say that if it comes to coding style, you don't compromise? Even if it's existing code base, or other people have different tastes? What about teamwork values, pragmatic approach to programming, etc? You would get used to different style very quickly. You can even configure convention in PyCharm. I work at my job with two projects in Python, one lower_case and other camelCase, and it's fine.
Oh gosh yes! Yesterday I just wrote some heavy string handling code and I made sure to put a bunch of asserts to disallow strings because far too often I forget that an argument is a list and pass a string instead.
I was going to look at it to see what sort of ways I haven't thought of to do things yet. Thanks for saving an hour of my time though. I'd rather get someone not just translating languages.
Nope.
I don't think python is the best language if you want to make a game that isn't snake (!). The overhead of an interpreted scripting language is just too much. You should be looking into a language that compiles down into bytecode (eg: java) or binary (eg: c++) since those are like 100 times faster than python. 
&gt; lower_case Snake case is the term you're looking for.
I think it is saying that there is an executable called `python` in the directory `/root/.virtualenvs/cv/bin/` which is ambiguous as to whether is it version 2 or 3. It wants to put `/root/.virtualenvs/cv/bin/python3`, thus making a distinction between python v2 and python v3, *but* it doesn't want to overwrite it since it might break a ton of things. At the command line, try running `python` and see which version pops up. If you get 2.7, then run `python3` and see if that causes the python v3 interpretive shell to open. If it works then I think it should be okay... if not then make sure you have python 3 installed. If this advice is totally useless then please be more descriptive of what step you were following and what you are doing when the error happens. 
I forgot to mention, no imports were allowed. :/ 
You can use hosts file to fake domain. I used it with Facebook/Twitter oauth implementation. Try using appenlight or sentry logging for debugging live. 
That's good to hear. But how do you show how you're dealing with that? Just make a solid start and leave comments or TODO's? I felt so rushed my code was a complete mess and had no comments at all. 
I think the ternary operator is correct here b = True result = value if b else 0 More explicit than either approach.
And reimplementing a linked list seems fairly dubious. I write Python to get away from C, dangit. 
Thank you for this! I will look look at celery! 
True, but not in this case. Check the example he provided.
It's just matter of what's the typical kind of code you write. Yours seems quite peculiar. I think iterating over the result of a .chars() method shouldn't be bad for anybody. 
Fair. But the example he provided is not the only use case, and other comments already handled the use case he needed, so there was no reason to address it at all. That being said, in a forum for python programmers of all levels, the exposure to other uses of the operator is important for providing search terms, namely decorator functions. I stand by my comment.
Do you have a good resource for learning automated testing in Python? I know of writing manual tests that could print out which tests fail and why. What part exactly gets automated?
that wart allows for a useful, compact idiom of counting items that match the criteria in an iterable `sum(x==5 for x in seq)` I like it better than `sum(1 for x in seq if x==5)` or `sum(1 if x==5 else 0 for x in seq)` or shit like `len([1 for x in seq if x==5])`
But maybe part of that is because of how big of a headache it is to deal with. Maybe if it were easier, you'd use it more!
Hi, thank you for the updated info and the forked repo! If Rockstar really did pursue legal action over that, however, I don't want to mess around with it til that's resolved. That's why I wish we had some more information on it, but the total silence suggests to me some sort of legal something. That said, someone else pointed me towards: https://github.com/ai-tor/DeepGTAV Basically a mod for self-driving cars in GTA V. Will eventually poke into it, but currently working on employing some deep learning to the frame data. I would like a way to easily get speed, as well as smoother handling, I believe the deepgtav project might shed some light on that. We'll see! 
Again, fair. Although I think you could have better worded your response given that you were providing an alternative use case, which can prevent confusion for not only OP but other commenters as well. Maybe start with "there are many uses for this, alongside the other replies, here's another:..." instead of the blatant "Decorator notation." Which sounds to me like you're stating it's only use case.
True that. More info: Decorator notation is the default use of the symbol though and does not require imports (at least in 3.6), unlike the matrix multiplication inline operator which is contained in external libraries. I used contextmanager because it's the easiest example of decoration. But real talk, this kind of conversation is super valuable for everyone involved. It explains how to educate about the subject, and in the process, educates OP. To be perfectly honest, I would consider myself a Python novice. But I try to learn something every day, especially how to speak about programming. Thanks for the comments!
Glad we could handle it without any disagreements! And also thanks for providing your insightful input on the decorators because they can be super helpful.
Honestly, I really like Black Hat Python. It walks you through a virtual installation of Kali, which is essentially a standard OS for penetration, and explains the basic types of penetration recon and gives some good basic code snippets that every hacker should know. From there, it's a matter of managing your exploit libraries, which is the part of pen-testing that is actually changing. The major foundations you need to know are not changing any time soon, ie writing your own TCP / UDP clients, web scraping, brute forcing credentials, managing a botnet... The known exploits are what is really changing and those change with every software update. Grey Hat is essentially about writing a debugger, which you would use to actually identify your own exploits. TLDR, don't discount books because they're not current, because the core knowledgebase isn't changing any time soon.
Am I the only one who dislikes using Python to explain data structures?
&gt; the operator module: promote lambda instead Something are much easier written this way: methodcaller for example. &gt; static methods: useless in Python since they are just truncated class method. I disagree, they signal to me that "This method doesn't need to act on anything about the class but is only relevant to operations in this class" That said, lots of people abuse them. &gt; string.Template. With %, format and f-string we have enough tools to format strings. Plus it's inferior for everything. Template lets you define custom formatting options rather than being restricted to just f-Strings (powerful, but only usable where they are made) and formatting options (substitutions with some formatting) without having to go full hog and write a template language. &gt; map/filter and callable from builtins. Move them to functools. They are useful, but not enough to be built-in. Maybe I'm weird but I use these all the time even if their iterator form &gt; iterability in strings. It's a useless behavior. How many time did you really need to iterate on letters in a real project ? But it causes many surprises. I do this occasionally, but I can see your point. It's possibly a remnant from C. &gt; of course the GIL, but that would depend of the price of the gilectomy. This is only a CPython thing (well, I think PyPy implements it as well but that's a different beast). It's also what enables Python to have its memory model, so removing the GIL requires completely changing the memory model of Python. Here's the thing though, there are C Extensions that interact with that model that will be broken. How do you even begin approaching this? I'm glad Larry believes he is up to the task because I have no fucking idea.
See standard library
line 4 is the thing throwing a ValueError, you're not catching that, you're catching the one thrown by the call on line 17.
How would I go about fixing this?
Not op, but take a look at the mock documentation on python 3. Other external libraries such as pytest and factory boy if you are into django. For book see python tdd by siddharta Even if that book lack material for pytest, you can learn it faster thank to the material in the book. Don't forget to check external package to help your testing such as pytest-cov, tox, etc
I'm pretty sure games are considered soft real time. Things like pacemakers are considered hard real time. Edit: just looked it up on Wikipedia: Hard – missing a deadline is a total system failure. Firm – infrequent deadline misses are tolerable, but may degrade the system's quality of service. The usefulness of a result is zero after its deadline. Soft – the usefulness of a result degrades after its deadline, thereby degrading the system's quality of service.
So far it looks like "I am ready to tolerate that weird syntax for possible benefits of using concurrency, actor model, no GIL, hot-loading ... " Python's dictionary syntax clearer. 
However, that's for the backend, where python's safety as a higher-level language is important. It's not in the player's game client, where oddly enough bugs and inconsistencies are not as mission critical issues as performance.
Thanks for asking while I just take cheap shots :-) I use the [stock unittest module](https://docs.python.org/3/library/unittest.html) for unit testing my code. There's too much boilerplate involved but it works pretty well. A lot of folks like [Nose](https://nose.readthedocs.io/en/latest/) instead. [doctest](https://docs.python.org/3/library/doctest.html) is an interesting alternative. It doesn't matter a lot which library you use. The key thing is the tests become a program you can run that tell you if it passed or not. Don't just print stuff out as "tests", check the output from your functions programmatically. Even very simple `assert` statements can get the job done, although a proper framework makes it a lot easier. To learn more there's a lot of articles if you search for "python unit testing".
Not convinced yet, let's see after the rest of the series =x
I think my version of quicksort is nicer: def quicksort(arr): if not arr: return [] pivot = arr[-1] less = [x for x in arr[:-1] if x &lt;= pivot] more = [x for x in arr[:-1] if x &gt; pivot] lesser = quicksort(less) greater = quicksort(more) return lesser + [pivot] + greater [gist](https://gist.github.com/bag-man/5b7bae0832e6d8fffa4a)
This is the first point of PEP8: &gt; A foolish consistency is the hobgoblin of little minds. And explains that the style guide is just that: a guide. Projects are free to use their own style guides. Hell, even the standard library doesn't always follow its own advice: &gt; Standard library code should avoid complex package layouts and always use absolute imports. https://github.com/python/cpython/blob/master/Lib/asyncio/base_events.py
The CPU still has a lot of work to do in modern games. In some games, you can get a 4 core CPU to run at 100% load and have it use over 4GB of RAM. Imagine the game being implemented in Python, where it would use 5x more memory and be 100x slower. You can forget about things like custom allocators, struct of arrays, vectorization, custom efficient data structures... unless you implement them em... in C and call them from Python.
You can put the data into ElasticSearch (http://eliot.readthedocs.io/en/1.0.0/outputting/elasticsearch.html). The purpose of Eliot is to *generate* useful logs.
I don't know what's going on, but judging from the [top Google result](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=71757), the missing symbol appears to be from libstdc++ (the C++ standard library for GCC). The symbol was introduced fairly recently (GCC 6.1.0), which suggests that it appears your Numba library was compiled using a newer compiler, but when you loaded the library in Python it tried to use an older version of libstdc++. Do you happen to have multiple versions of GCC installed?
I have rarely found that site useful. First thought when I saw this was the code for all stack exchange moderation. # pick a random number # if 1: reply "this is not a question" # if 2: reply "this question is off topic" # if 3: reply "this topic is being locked" # lock the topic Completely ignoring the continuing user response on a useful question.
At that point the disagreement becomes whether or not you view a string as an atomic value instead of a container of chars
I've only watched the beginning of tutorial #1, but I you should probably research classes a bit more before teaching them to others. I like how clearly you explain most things, but whenever it's class related, you sound insecure and the explanation doesn't always quite make sense. If you want these tutorials to teach classes and objects, you should either refer to someone elses explanation, or dedicate a separate tutorial for it. You seem to be using them a bit wrong too I think; you're not supposed to subclass `Turtle` to create a pen with these particular properties! Subclassing is more intended towards adding functionality to an existing class. What you want to do instead is move the code in your `Pen` class out to a global instance: pen = Turtle() pen.setcolor("black") ...
&gt;It just looks ugly and hard-to-read to me Looks nice to me. I'd much prefer to see it over the other two.
Interesting, I wasn't sure how efficient this version would be! I think it does nicely convey the algorithm of a quick sort though. 
This seems more like a question for one of the many subs about jobs/workplace issues. The fact that you used Python for this task is only tangentially related to the question you're actually asking.
You want most of your unit tests run fast, but having a few slow ones is okay (though 30 seconds is but a much). I'm not sure I'd reach for patching classes as a first thought - [though I'll cop to doing it, albeit for other reasons](https://github.com/justanr/datestuff/blob/master/tests/conftest.py) Assuming the code that generates/validates the tokens accepts some sort of clock (doubtful, most people tend to just call datetime constructors) you can just give it a datetime-like class that returns whatever time you want. Alternatively, create a fake token in the test that's already expired and use that instead. 
That's a far different argument than the one I thought you were making (e.g. the project uses camel case all over). Thank you for clarifying. I have to agree with your point that projects like that are pretty terrible. I've encountered and dealt with a few. Just a fucking headache I stuff in some corner of the codebase and try to wall paper over with something a little nicer, hoping that the underlying package doesn't change and someone has to deal with it. 
The SO stalwarts are just cancer. Some other competitor could easily rise up and give them a run for their money (ad revenue). Unchecked mods and nasty attitudes keep people away--- it really shuts down potentially productive discourse. 
Thanks. Was anything unclear or was there something that you wish I'd gone into more? I'm always worried when I write stuff like this it's just a rambling mess that only makes sense to me.
In this case, sure. It seems the function calls may be expensive. Most of the cases where I've needed this have either been cheap calculations in which simplicity wins, or involved `or` statements.
Is this snake eating a fucking camera?
I have done several side projects as a one man team and I still face the same struggles you're talking about. I write mobile and desktop apps in python with kivy. It's a big world and it is very easy to get lost in it. Maybe we could chat sometime 
Or something like `Turtle(color="black")`.
dict.keys() returning iterable views. I know, I know - I should get with the times! But you asked :P
mostly demonstrates some things that the print statement could not do. print(...) print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream.
&gt; Reinventing myself in the IT world at 37, exciting times. It often feels like I'm never the same thing twice. I'm on the sysadmin/operations side of the equation, but every job is different and the technology is moving so fast, I just rely on my breadth of general knowledge and my ability to deep dive in to a subject as needed.
&gt;Not sure why you'd want to explicitly return None when it would be easier to fall off of the end of the function. IMHO functions should either explicitly return from every (non-exceptional) code path, or not explicitly return at all. It's too easy for the reader to forget about the implicit `return None`, and there's no downside to being explicit.
I'm curious, anybody using aio in production?
What are the topics of the book?
Thanks for sharing. Know what I'm tinkering with when I next get some spare time. I see you mention Flask in the article. Any gotchas for someone making this move? Anything specifically you miss?
Just think of the `else` as being paired with the `break`, so it's more like a break/else construct. You either break out of the loop or you perform the else suite. 
...that's exactly what `isinstance(bar, Iterable)` does, checks it has the right interface. You don't have to explicitly have `Iterable` in its MRO. 
Yes, it has happened several times. But in most cases I eventually found out that the existing library was not quite suitable for my use case, had serious flaws, etc.
Well, TIL. References: isinstance: https://docs.python.org/3.6/library/functions.html#isinstance "virtual" subclasses (abstract base classes): https://docs.python.org/3.6/glossary.html#term-abstract-base-class 
I don't know how much of this is a joke, but it's getting upvoted so maybe people care. I don't think the GIL is really the problem. The decision to use reference counting and expose that in the C API is the problem. Reference counting is a concurrency-hostile way to manage memory, and in an increasingly concurrent world it's a non-starter. The decision to add the GIL made sense at the time but if Python were designed today I hope a better memory management strategy would be employed. Trying to make reference counting work without a GIL is hard: https://youtu.be/fgWUwQVoLHo All is not lost though. The Python C API provides a way to run outside (release) the GIL. you can make use of this by writing a C extension (not a great option), Cython (better) or with numba (easy). A function with numba's jit applied and `nogil=True` can be run in threads without being held back by the GIL. Numba is limited in scope, but it already covers quite a few applications in data processing.
Looks like another alternative is Kim http://kim.readthedocs.io/en/latest/
I know what requirements.txt is and distutils and setuptools. I have few packages on pypi, and issue open at pypa too. I just says everthing is messy. - .pth files are awefull - namespace packages is almost unusable. - 99% of setup.py you found uses setuptools (i use it a lot). We are in 2017, and things did not evolve since, just remember that: http://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere/ This is still true and it annoys me. This is a fundamental problem, not like syntactic sugar, semantic inconcistancy noticed in that thread... 
Highlights for me: * `tornado.routing provides a more flexible routing system than the one built in to Application.` sounds awesome, especially the function-based handlers. * `Autoreload is now compatible with the asyncio event loop.` Awesome!
We use the freezegun library to manipulate time for unit tests. Check it out!
My apologies.
ok ! what do you recommand ? 
Ok ! thanks ! I bought grey and black python today ! The coreknowledge is great but I didnt think about linux and black hat explaining how to install a virtual kali ! Thanks for the reminder ! 
Create local cert and use that.
I'd suggest approaching with the same sort of attitude as with a Flask project. You're going to have to do more architecture and install (or build) more things than with Django. 
Thanks for the response. That was my thought - you get used to using the right external library for the right task with Flask as opposed to relying on the framework (e.g. SqlAlchemy). Just checking if any gotchas like missing authentication out the box. 
*bleeds out of his eyeballs*
the `()` on python 3 `print`. I know the advantages of having it as a function but I like it more as a statement. I would get `print "string"` back to Python 3 :) 
Back when I was still doing PyQt applications, I ended up creating an async/await-like approach to manage this to simplify my callback handling Calling the async/await function https://github.com/epage/DialCentral/blob/master/dialcentral/session.py#L283 Async/await function https://github.com/epage/DialCentral/blob/master/dialcentral/session.py#L444 Everything in the function body runs on the UI thread while everything that yields is run on a background thread.
I interviewed the guys about Python @ EVE Online if you're interested: https://talkpython.fm/episodes/show/52/eve-online-mmo-game-powered-by-python
&gt; This isn’t a problem when we’re simply tracking progress, completion or returning metadata. However, if you have workers which return large amounts of data — e.g. loading large files, performing complex analysis and need (large) results, or querying databases — passing this data back through the GUI thread may cause performance problems and is best avoided. &gt; &gt; Similarly, if your application makes use of a large number of threads and Python result handlers, you may come up against the limitations of the GIL. As mentioned previously, when using threads execution of Python is limited to a single thread at one time. The Python code that handles signals from your threads can be blocked by your workers and vice versa. Since blocking your slot functions blocks the event loop, this can directly impact GUI responsiveness. &gt; &gt; In these cases it is often better to investigate using a pure-Python thread pool (e.g. concurrent futures) implementation to keep your processing and thread-event handling further isolated from your GUI. So if there are problems with using `QRunnable`, why wouldn't I just use `threading` and co? It's a handy interface, but it doesn't seem any more powerful than just using `threading.Thread` (which already lets you do `threading.Thread(target=myfunc, args=args, kwargs=kwargs)`).
How long did it take you approx. to work through the book?
Link?
If you want Python users to try this, I'd highly suggest some sort of integration with Jupyter notebooks. The simplest approach would be to define a ``_repr_html_()`` method for your main object that outputs the associated html code. Jupyter provides a pretty natural platform for demoing Python code that has HTML/javascript outputs, and putting your Python examples in notebooks would make them much more approachable and compelling.
There is a C subset parser at the pyparsing examples page: http://pyparsing.wikispaces.com/file/view/oc.py
I wonder why its only for OSX.
Sorry I put 2k, but I should have wrote 2000+. Everything that is written currently will work with 3.6 The problem is that if we want to start writing 3.6 code we will have to upgrade all the users. The users download python themselves, so im afraid that by adding new 3.6 features that those who havent upgraded will encounter issues. I dont need to change the code, i just need to find the best way to get everyone to update.
Well, then you already have your answer. The moment you roll out a backwards-incompatible version (leaning on 3.6 language features), your users are going to complain and moan and ask for backwards compatibility. Either you satisfy them, or you don't. Bifurcating the code to two separate forks to maintain support for older Python is a *terrible* idea, so if you can't cleanly re-factor the async logic so that you can substitute in-and-out &lt;3.6 compatible code, you either upgrade or you don't.
Maybe it's me, but it just seems like a complete mess more fitting in PHP. There are some options like Arrow that feel so much more sensible. Too bad the builtin isn't like that. I always end up copy-pasting my old code or some datetime tutorials, I just can't understand it. Maybe it's just me.
Would it be possible to distribute a virtualenv with your program that includes the necessary version of python?
Windows 10 and 3.6
Thank you! I am excited to get started on a roguelike game :).
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Thanks. This is very useful.
Lol you can date this because nosetests 
This is no longer true for numpy on windows. You can install with pip without encountering compiler error on windows.
I guess I mean the shell I use to program in Python
IDLE? Yes, you will be able to use numpy in IDLE or anywhere else that runs python. 
Working on a web app that'll read a list of trades from an oracle database, and present them in a table so they can be searched, sorted etc. I'm using flask, pandas, and some javascript stuff that I found online that I've integrated into the jinja template. It's going pretty well, although I've discovered that pandas.to_html is a little limited, so I want to re-write the whole thing so that I use jinja to convert to html, and also might take the javascript stuff and try to redo it using the jquery library.
Classes with __slots__ ARE NOT read only. It only prevents new attributes being created, existing ones are mutable. __slots__ replaces __dict__. Named Tuples are **immutable**, like all tuples. class Slotted(object): __slots__ = ['bar', ] f = Slotted() f.bar = 1 print(f.bar) f.bar = 2 print(f.bar) f.foo = 1 Also, NamedTuples absolute use (and require) __slots__, pass verbose=True to see implementation. from collections import namedtuple Point = namedtuple('Point', "x y", verbose=True) class Point(tuple): 'Point(x, y)' __slots__ = () ...
Because of the library he uses, `curses`. According to the [docs](https://docs.python.org/3.3/howto/curses.html#what-is-curses), the Windows version of Python doesn't include it.
Yes, just access attributes of 'parent'. class RenderGUI(QtGui.QMainWindow): def __init__(self, stuff, parent=None): QtGui.QMainWindow.__init__(self, parent) self.stuff = 'data' OpenGLWidget(self) # pass in this instance as "parent" class OpenGLWidget(QtOpenGL.QGLWidget): def __init__(self, parent): QtOpenGL.QGLWidget.__init__(self, parent) self.parent = parent # make instance attribute if you want to use it in other methods def print_parent_stuff(self): print(self.parent.stuff) # prints "data" If you have more questions like this it's better to post them on /r/learnpython. Be sure to include which version of python and what OS you are using. 
Thanks so much!
There's already windows numpy wheels
I know ... I linked them. 
Nice. Yeah I am blown away by the kind of stuff Deep Mind is doing with generalized AI. Are you doing this for fun or do you have some application in mind?
I would say it is very much dependent on what the project is. Would you be able to convince the users the upgrade is worth it for them in the long term? If you have a lot of features in mind that would be difficult to achieve in the current status, then it might be worth the upgrade. If it is just about future proofing the project, it is more difficult for users to accept it.
Thanks a lot for your response :D 
You don't need those, they're on pypi now https://pypi.python.org/packages/92/e2/7d9c6894511337b012735c0c149a7b4e49db0b934798b3ae05a3b46f31f0/numpy-1.12.1-cp35-none-win_amd64.whl#md5=4b32dcd1c59804f53cb9473d99673ea5
You just need to extract the code as a string? I think using the library you linked might be overkill, since it deals with actually parsing the code, and from what I understand you're just looking to extract some of it. If you can assume that the code you're reading is valid (it compiles), then I would probably write my own. Use a regex to find the function signature, then just track the curly braces using a list as a stack. Whenever you see a `{`, push it on to the stack (append), and whenever you see a `}`, pop the last `}` from the stack. The function is over when the stack is empty. This is assuming you don't know anything about the way the source code is formatted. If you did know, it could be easier. There are a ton of different ways to go about this.
It's an ice cream-themed book about best practices for Django. Here's a link to the [third edition](https://www.twoscoopspress.com/products/two-scoops-of-django-1-8) released way back in 2015.
Thanks, I just had the same idea but was not sure if I should try it :) now I will try it tomorrow, thanks :)
It can work with any Python program (though integrating with new async stuff in latest Python 3 might be trickier). It just has extra, optional support for Twisted.
Like I said, slots and nametuples are not the same at all and can't be compared.
If you need to parse C++, then Clang is probably the answer. The only exception is if you're parsing generated code that's guaranteed to be patterned in a very specific way. Documentation isn't great, though. The best reference for the Python bindings is [the source code](https://github.com/llvm-mirror/clang/blob/master/bindings/python/clang/cindex.py) ([with scarce examples](https://github.com/llvm-mirror/clang/tree/master/bindings/python/examples/cindex)), while the libclang API at large is [described in Doxygen](http://clang.llvm.org/doxygen/group__CINDEX.html).
At the moment, it's not possible to use packaging and publishing separatly from dependency management. Also, `poet` uses `pip-tools` to resolve dependencies. And if you like the `requirements.txt` generated by `pip-tools` (which I can understand) you light also like the `poetry.lock` file generated by `poet`: [root] name = "pypoet" version = "0.3.2" [features] markdown-readme = [ "pypandoc" ] [[package]] name = "args" version = "0.1.0" category = "main" optional = false checksum = [ "sha256:a785b8d837625e9b61c39108532d95b85274acd679693b71ebb5156848fcf814" ] python = [ "*" ] [[package]] name = "backpack" version = "0.1" category = "main" optional = false checksum = [ "sha256:0162cf7b34c810ba4ddbbd32a1e5e804ef96fcf2fea5ce2848aa4950770d3893" ] python = [ "*" ] [[package]] name = "cleo" category = "main" optional = false checksum = [ "sha1:36289fd83ab70ab9f844e305a4f4e50f3c918bd8" ] python = [ "*" ] [package.version] git = "git+https://github.com/sdispater/cleo.git" rev = "36289fd83ab70ab9f844e305a4f4e50f3c918bd8" 
@dleybz any luck on this ? I am having the same issue
Yes, it should land in the next `0.4.0` version.
I will be messaging you on [**2017-05-17 22:17:10 UTC**](http://www.wolframalpha.com/input/?i=2017-05-17 22:17:10 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/651gti/poet_dependency_management_for_python/dge7wc1) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/651gti/poet_dependency_management_for_python/dge7wc1]%0A%0ARemindMe! 1 month) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dge7wwj) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Hey Al, late reply, but, could you tell us the difference between the Udemy course and the course online/in your book?
There's no difference between "simple" and "advanced" parsing here, though. C++ is a complex language and any code introspection you do with ad-hoc tooling will end up fragile at best.
Here's a recent [post](http://pbpython.com/categorical-encoding.html) I made about various encoding options. I hope this helps.
If you are asking your users to install python themselves just to use your program, you should really have used some tool to create a standalone package instead, like cxfreeze or pyinstaller. Then you wouldn't have to worry about the versioning, and it would be easier for your users.
Don't use TextEdit, use Visual Studio Code/Sublime Text/Atom if you're looking for a text editor. 
I want improve my randomCaptain script that randomly selects captains for soccer pick up games. I feel like i can clean it up and write it in fewer lines. I also want to create a GUI for it using Tkinter, Kivy or anything else, but i have been having trouble understanding some of the tuts. :/
You need to provide more info if you want help. Also, you should probably post to /r/learnpython.
If that's the actual line, you need a colon at the end of it.
Good insight into how this works! Thanks for sharing. Did you write any tests for this? Curious as to how this would be tested
Heresy.
This was from the Python 3.7.0a1 tag, so I think the compiler has changed a lot since 2.7. I didn't put this in the post, because I was trying to keep the reading time to &lt;7 minutes, but increment and decrement operators are unpythonic IMO. The main reason they exist is in a C-style "for (int i=0; i&lt;c; i++)" for loop, which Python doesn't have. There is little to gain by using test++ instead of test += 1, it's also not explicit enough whether the return of test++ should be a new value or an operation on the test object, https://nedbatchelder.com/text/names.html
You forgot to close the parenthesis on the previous line. 
[removed]
This should be in /r/learnpython, but even then, it's a relatively busy sub and you don't see too much location-specific stuff. /r/Albuquerque is probably a better bet (though I'm sure you're already planning on that eventually) That said, glad to see Python growing in the 505 :)
&gt; This was from the Python 3.7.0a1 tag, so I think the compiler has changed a lot since 2.7. I doubt that. From [Python compiler package](https://docs.python.org/2/library/compiler.html) *Deprecated since version 2.6: The compiler package has been removed in Python 3.*. It's now all the built-in [compile](https://docs.python.org/3/library/functions.html#compile) function.
I don't like spending time reinventing wheels, especially if I make them square or even triangular. However I'm sceptical about claims made regarding code, so my rule of thumb is if it's not on pypi, I don't bother with it.
And get rid of those damn brackets!!!
What's the new?
I'm sorry I don't fully understand - are you saying that `nosetests` is no longer used? It still installs and runs for me, I use it when using `unittest`. However I also use `pytest`when it makes sense to do so. Both have advantages and disadvantages.
What do you plan on using it for?
We're developing a electric car. This is a student project. As i said before this python code run on Raspberry Pi 3, it send data like cocpit temp, battery temp and speed to station lower than 1Hz. 
Have a look at http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html and http://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.DictVectorizer.html Also, I made a framework that deals with missing values, dates, text, to automatically come up with predictions :) Maybe you find something of worth there: https://github.com/kootenpv/xtoy
"6 min read" at the top.
you'd probably get better results at /r/learnpython; they're more experienced in that kind of questions, and welcome them unlike /r/python. for starters, the places you'll want to look at are the documentation of [os.walk](https://docs.python.org/3/library/os.html#os.walk) for going through all files in subfolders. as for pdf sizes: if you expect to do further work with pdfs, you can look into the [PyPDF2](https://pythonhosted.org/PyPDF2/) library, which will give you access to all kinds of sizes in the PDF. if "pdf sizes" is just a thing you want to use to get familiar with the language itself, it might be more practical to use the standalone `pdfinfo` program (available on linux systems in the poppler-utils package), and use the [subprocess.check_output](https://docs.python.org/3/library/subprocess#subprocess.check_output) python command to call pdfinfo on every pdf you find.
I think 2-4 weeks
Awesome, thanks. 
Working on a project is basically what you do when you learn a programming language. Python is used for A.I. a lot. So maybe you could try creating your own A.I. [sentdex](https://www.youtube.com/user/sentdex) has some great tutorials on Python. My favorite is the one in which he makes Python play Grand Theft Auto 5. I'm currently working on making Python play a different game, so I can't copy exactly what he does. It's a challenge and it's fun. If you get stuck, you need to take a break, work on something different, maybe easier, and after a while you go back to your other project and perhaps it works now.
https://www.djangoproject.com/ I'm not an expert, but this article left django out. I'm not saying it is the best, but certainly top 5.
Agreed. I enjoy Sublime as a general purpose editor, but PyCharm offers so many more benefits that I'd actually say that it's irresponsible to even compare the two in a professional context. Choosing Sublime for serious projects means giving up: - Top-of-the-line auto-completion that is not a gigantic pain to set up. - Opt-out code styling and quality indicators so even newbies will get better just by trying to rid themselves of the multicolored squiggles. - Built-in debugger, test runner, version control, visual diff. - Called one too many different variables `i` and find / replace won't save you? PyCharm actually understands what is in scope and can help you refactor without fear of breaking the rest of your code. If we've already decided that good software is worth buying, get the best one for the job so that pros can be productive immediately and new devs don't miss out on anything important.
Sure, will do
all()/and are lazy and won't do unecessary operations.
But if `passes_funcs` doesn't pass, it would still process `passes_attrs` when it doesn't have to. It's better to return after failed checks
An article about Python web frameworks that did not even mention Django and Tornado unfortunately cannot be taken seriously.
No Django LOL https://www.oreilly.com/learning/python-web-frameworks "Django is without a doubt the most popular web framework for Python at the time of this writing"
I'm very much just starting (again!) And doing some data science stuff in python. Right now I'm trying to make some interactive graphs in matplotlib! It's exciting when things work!
THANK YOU!!! sorry it took my some time to reply, it works amazing and I really appreciate your help!
It's not that it's bad, it's just not really pretty, E.G., `print` calls rather than `print()`, `urllib` instead of `requests`, hardcoded ELB URL, no error checking on function calls (catching all exceptions doesn't really count as error checking), imports in the middle of the file, etc. 
I have a project that depends on a larger library that supports 2.7 and 3.4+. I'm on Python 3 only, so I supprt Pyton 3.4+. I'm actually having some doubt if supporting 3.4 is necessary, but it doesn't put too many restriction on the project (I'm not using async/await etc.), so I'm keeping 3.4 support until further notice. I recommend not supporting version python3 &lt; 3.4, unless you have a very specific reason to do it. The Python developers themselves have stopped supporting python3 &lt; 3.4, so why should you?
For this year driver controlled, our next year plan making it autonomous drive level 1. We also will use Python for making it, because python computer vision and Ai capabiilities are very comfortable. Edit: If you want to look our car https://www.facebook.com/beuelektromobil/ 
If I find something that looks nice on here or on Github, I usually download it, pop it in a venv, and have a play with it. If it is fit for purpose, it probably gets used for something. To be fair, most of my projects are far less than 1k LoC (not including library code/dependencies), have not had to build anything large in years (and lets be honest, if I had to build something large now, I'd be totally screwed!).
It is my endpoint and I can see in my logs that the requests are completed within a second server side.
This is a post about a generic context-free parsing library.
Fantastic :) Having a PIP installable package with .WHL that works on other OSs opens this to so many more developers.
Nice idea, a bit expesive, thoug ;)
It's hard to speak generally about this because so much is dependent on the load that non-GPU code would be putting on CPU. It's a trade off between the performance you need against ease/speed of development. My original point is that languages other than C/C++ are generally not considered by game developers not because they have actually thought about it, but rather that C/C++ is what they know. 
Cool thanks, I'm going to go ahead and support &gt;= 3.4 and 2.7. 
As Knuth said, "premature optimisation is the root of all evil." What you said is probably true in some cases (maybe even the majority of cases), but it doesn't necessarily generalise to all cases. When it comes to performance, I'm an empirical kind of guy. I'd rather collect profiling data on the specific problem that I'm dealing with rather than base my decisions on conjecture. I don't think that most video game devs take the same approach when it comes to using languages other than C/C++.
I'd recommend you stick to something simple that you can struggle through with Google searches and experimenting. The first thing I ever wrote was a script to scrape a Family Feud fan site of all the historical questions and write them to a file as JSON. I also scraped the index page to navigate between them. Later I made a gameshow which I "co-hosted" with my wife during my own wedding reception, but the first app, a scrapper, was an intro to Python, a short application, and the final product within 8 hours of struggling through Google on a Saturday. I might not be a master, but I use Python a lot in my new job for tooling and automations as well as a few APIs (otherwise using C#). :) Find a small thing and do it.
Can you upload it to github?
To add to this, if anyone is really interested and qualified, and wants to skip HP vetting, PM me and I'll get your resume to the IT decision maker. 
&gt; [Bonus ASCII Hero I made](http://imgur.com/gallery/FfwaK). Might need to use pygame to use him, but what should I name him? Why not Zoidberg? (\\/) (°,,,°) (\\/) 
Anyone know any good books on wx?