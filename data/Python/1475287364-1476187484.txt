Maybe try something expanding on that a bit then? Maybe me a local fileserver that classmates could share files on?
Oof. This is bad reasoning. Not necessarily just from /u/milkmymachine, but if that's his/her experience, then there's a lot of bad reasoning going around. From a management standpoint, the cost of *replacing* an employee is generally more than merely hiring one. For developers with experiences with certain practices and technologies used in a setting, the replacement cost can be far higher than the raw salary cost. After all, there're a whole training phases that includes evaluating the new employee as well as the multitude of new competencies he or she must embrace. This doesn't prevent capricious or vengeful managers from "punishing" employees from attempting to sell their talents in the wider market (aka "capitalism"). A person might well be fired suddenly by such a manager. That's what I'd call "dodging a bullet." Those managers are toxic and infect the corporate culture. If an employee can't go above that manager to redress the termination, then I'd expect that extrication from that environment is a benefit. I have sympathy for any individual who loses their job suddenly and is stressed out financially, but feeling the pinch of a floundering career and an unsupportive management can be just as stressful.
This blew up. Have to mention that I do lessons on CodeMentor if anyone's interested in learning from me.
`\b` matches a "word boundary". So `foo\b` would match the "foo" in "the word foo is funny" but it wouldn't match "the word foobar is funny"
If you have code that does what you want but not fast enough, you want to profile your code. If looking at the profile doesn't make it clear how to improve the situation ("oh, of course that function is hot! there's a much better way to do it"), then you might consider trying to make your code work under Python 2.7 and run it under PyPy. What is worth the effort of making a worker pool (and where it is even beneficial) depends heavily on where you are spending your time in the program. And just the nature of the processing in general. You might also consider doing more of your processing inside postgres. A big part of your workload sounds like selection and set processing, something database engines are good at. You don't have to insert the data in its final form. 
If you can't think of a project, make a project that generates project ideas. Others in your position could use it.
They put their resume on Indeed and got discovered
I agree. Haskell is an incredible language in opening up our minds.
As I recall, when we got to Python 3, Guido at one point wanted to get rid of the lambda keyword, arguing that the same effect can be achieved by using def. But he decided against that. 
Many of us suffer from that disease. 
Looking at the docs, you have to decorate each test method you want to use the parameterized.expand on. @classmethod def expand(cls, input, name_func=None, doc_func=None, **legacy): """ A "brute force" method of parameterizing test cases. Creates new test cases and injects them into the namespace that the wrapped function is being defined in. Useful for parameterizing tests in subclasses of 'UnitTest', where Nose test generators don't work.""" It parameterizes the test cases not the setUp method. Then just have a setup_driver() method that each test calls at the start. Alternatively, make driver a property and write a setter for it with the logic in your setUp method. Then set self.browser=browser at the start of each test. Effectively the same approach, just a stylistic choice. Either way, decorate each test case you want to parameterize and remove the decorator from your setUp method. Right now you are just injecting parameterized setUp methods that have a modified name for each test case. These methods might not even be called, causing browser to be None in your main setUp method. Try putting an else clause in your setUp and see if that prints instead and also, test what happens if you add browser="chrome" to the top of your setUp method.
How many files are you running in parallel? It might be worth taking a look at apache spark for this job. It will handle parallelizing the tasks and can dump the data into quickly-and-easily-loaded-into-postgres CSV files. spark.read.json("*.json.gz").write.csv("/path/to/some/folder")
&gt; TBH, I find myself using Python less and less because R's weak points are being addressed by a fast growing community Interesting, because I find myself going sort of the other direction: I find myself using R less because I've been finding Python significantly faster and more memory efficient: I recently needed to parse and clean and filter a particularly large dataset: R tended to choke and freeze up earlier than Python and the stuff I build generally needs to be reused often and I'm in the process of figuring out how to turn most of my scripts into something I can put on AWS and call as an API from the command line. In my current workflow I generally use both at the same time, R mostly for pretty-non-console printing of data frames and for when I need to do something that I don't know off by heart in Python yet.
Try this, it is working in my interpreter from selenium import webdriver # from selenium.webdriver.firefox.firefox_binary import FirefoxBinary from selenium.webdriver.common.desired_capabilities import DesiredCapabilities import os import pytest import unittest from nose_parameterized import parameterized class multiBrowsers(unittest.TestCase): def setUp(self): # Initialize driver to None self.driver = None def setup_driver(self, browser): """Helper method to allow tests to be run using multiple browsers. Responsible for setting up the selenium driver necessary to run tests in each browser""" if browser == "firefox": caps = DesiredCapabilities.FIREFOX caps["marionette"] = True caps["binary"] = "/Applications/Firefox.app/Contents/MacOS/firefox-bin" self.driver = webdriver.Firefox(capabilities=caps) elif browser == "chrome": self.driver = webdriver.Chrome() @parameterized.expand([ ("chrome",), ("firefox",), ]) def test_loadPage(self, browser): self.setup_driver(browser) self.driver.get("http://www.google.com") def tearDown(self): if self.driver is not None: self.driver.quit()
Woo will be a complete waste of time if you're not looking to relocate to the bay area.
Cool. How does the experience (smoothness, framerate) compare to CPython?
[Dask](http://dask.pydata.org/en/latest/) would be the more simple alternative to something like Spark. As for bottlenecks, that might be easier for you to answer than to speculate since it depends a lot on architecture, any relationships you are creating and managing in the database, any expensive data manipulations, etc. Do you have some general comments on what you have seen for resource utilization on your current approach? You say you are processing as a stream. I assume you are iterating over the blobs. Are you using threading and/or multi processing? Are you hitting memory limits (consider caching data where advantageous, loading larger batches at a time), cpus only used heavily during decompression then poor useage afterwards? (need to split up the work in this case), are you in the end limited by pushing data into the database (new schema/database approach). The general approach I take is this: * Split the tasks up into worker components based on their resource constraints * Split the data up into chunks for processing * Farm the data out to worker nodes for processing (experiment with worker node counts for each task type) * Offload transformed data asynchronously to some store (csv usually) * Have one or more loader workers watch for transformed data and asynchronously load it to db Once you are using your resources completely, the only way to gain speed is through efficiency or scaling. Efficiency can often be gained by finding where you are waiting and/or not using all processor cycles and creating new ways of allocating the work.
I'm definitely not an expert but wanted to take a crack at talking this through. You're likely I/O bound, right? So you'd want parallel unzipping to memory + writing to the database to sum to 100% of your I/O capability? I would think about parallelizing the unzip into a ramdisk, where another set of processes shaped the data into the appropriate writable format for pgsql, where finally a third parallelizable program took those as they were made available and wrote to the db. I would then ask my peers what they think of my idea and what I don't yet fully understand about solving this kind of problem. By using a ramdisk to store the intermediate data, I would hope to achieve separation of these three steps so that I could experiment with what implementations are the fastest, rather than having to pass the data along within the same process. That way I could construct a working solution but have flexibility to continue to evolve it using any language or any tool.
&gt; and for a lot of people, meeting and communicating casually with people you don't know is very difficult. and for a lot of people, telling a computer what to do is very difficult. Really. Programmers who can appreciate the need to study and experiment, in improving their python, who cannot also appreciate the need to study and experiment, in improving other parts of themselves, are also missing an opportunity to improve their python. You will find talking to people will give you ideas, and make you better at expressing yourself. You will find it easier to tell the computer what to do correctly and succinctly. Or when faced with something difficult, you can say "oh I'm different, I can't do difficult things", and stay programming PHP themes for wordpress, or visual basic calculators for offices, *or you can try to grow yourself*. Of course it's hard work, and if you want *specific advice* about how you can get better at it, you can talk about your specific fears, but I think TomBombadildozer's script was spot-on: Just keep trying it until you get better at it. 
http://lmgtfy.com/?q=step+chart+matplotlib
&gt; what do you think would be the fastest way to process all of these files and push the data into postgres? IMO probably use `jq` for parsing it down and removing unneeded crap, and emit just the `.sessions[].e[]` results, pipe that into python with `import fileinput`, and load each json separately https://i.imgur.com/CJNFVJX.png jq also can do streaming json parsing, but 4-5GB files should be fine either way on that server iirc simplejson is faster in some cases - - - It might be worth taking a streaming approach and just do multiple files at once
Crawls all these type of questions on reddit and other site, and use Markov chains to randomly generate ideas on a web server. 
Looks good! One thing i have not been able to do when it comes to importing csv files to pandas is when working on uneven rows. example : A,B,C,D 1,2,3,4 1,2,3,4,5 1,2,3,4 1,2,3,4,5,6,7 Does anyone have a trick up their sleeve to generate a pandas df from this ? 
So I suppose you did not profile your code. Your performance assessment are just guess. If it is the case it is a very bad idea. Don't guess: mesure ! Moreover you don't detail enough what you do to give you advice. Ideal would be to share your code. If you have 100s of files, a simple and good speed up might be to treat each file separately in different process and/or on different computer so you could have a speedup of approx up to 100x (more likely less, if all the files are not the same size.)
`is` checks for object identity, i.e. the fact that those values are stored in the same place in memory. The fact that it works for small numbers is an optimization detail that you shouldn't rely on. Use `SpecialNumber == n` instead, to check for equality. Also, this is a question for /r/learnpython
Got it, thank you! Will also keep that in mind when posting a new question.
Setting manually the profile changes nothing. PhantomJS had problem with a site I was trying to use. Anyway it is fixed now, the problem was my Apache+Flask setup, I think Firefox had no profile for the user running the webserver and threw that error. Using "flask run -host=0.0.0.0" worked fine.
Some time ago, I was thinking myself on a project involving python (and Beautiful Soap for web crawling) and machine learning for analyzing nsfw footage / images, but for a different purpose. Just imagine reducing the search time of "some stuff".
I was wondering about Postgres' ability to handle JSON at speed. For instance, if I insert each of the "sessions" into a table as JSON, will it be more efficient for Postgres to parse them? I guess the only way to find out is to try.
&gt;Beautiful Soap lol @ the typo. But yeah, I'm curious how well basic ML tools would work for something like this. If I recall a few years ago China tried blocking NSFW images, and it became difficult to get pictures of pigs, because of their similar skin tone to humans (or something like that). It would be interesting to see if more advanced ML tools can do better.
Yeah, sorry for the lapsus, I was probably thinking about something else in that moment.
Besides, please, never post screenshots. It makes your code harder to read, harder to copy, harder to check and it asks the reviewer to click on another link which many won't do because they just don't care that much about your problem. You're manipulating text, use it at your advantage.
I did a similar project categorizing my PFD pay stubs. I will tell you that extracting data from PDF's is no simple task for ongoing statements. They may look the same but the format and location of the fields within the document changes routinely. There are great libraries in Python for reading the PDF's but getting everything to line up is tricky. I ended up with multiple cases selected based on detecting which layout I had for a given document. It is a great project and challenge. Good luck
I compared this approach: with gzip.open(file,'rb') as f: sessions = ijson.items(f, 'sessions.item') with unzipping first (manually while testing)... with open(file,'rb') as f: sessions = ijson.items(f, 'sessions.item') and it was faster when I unzipped first. At the moment, I'm just testing various approaches in a Jupyter notebook. Looks like `line_profiler` isn't working ATM, so I'll save it out and try profiling from a `.py` file. 
My intuition says that inserting the sessions into temp tables would help limit write amplification. And when thinking about how to analyze your data, don't forget that postgres lets you write stored procedures in python.
is there no way you can get csv dumps of your bank statements or even webscrape from your online banking?
&gt;I'm using pydev in Eclipse for my IDE Try PyCharm, it's great.
Is it generative?
My point was that locking it was the best thing to do but whatever
The designer shipped with PySide is the same designer that is shipped with Qt. The designer does not cover all of the Qt Widgets that are available. However, you can [extend it with your own widgets](https://doc.qt.io/qt-4.8/designer-using-custom-widgets.html) (also see [here](https://doc.qt.io/qt-5/designer-creating-custom-widgets.html)). Also, the final release of PySide 1.x was 1.2.4, so you may want to upgrade (not particularly for your question, but because it is a good idea).
Sounds like you've already done most of the obvious things. Rather than offload jobs to processes in the script, why not run the same script multiple times on each of the files? That's probably going to take less time to get right even if you have to develop some process independent data consistency solution. You could put the lookup table in redis or something. 
How does it compare to Chromaprint/AcoustID?
When I clicked on the button "Get Your Free eBook" I see three selections: Download Now: ePub Mobi PDF I chose PDF and the book came downloading. Hope that helps. I also navigated to the page you linked to and downloaded the Hadoop book. Maybe it would make sense to write to O'Reilly and ask them what the issue is. HTH. Cheers, Rich
&gt; I'm not really a unicode person, but my understanding is that python used to have a build option that determined the unicode system used internally. Oh that thing. That's just not using utf-8 to represent things like ASCII strings that take far fewer bytes to represent. That change brought Python 3 more in line with Python 2 in terms of speed. It's still slower as far as I know. &gt; I don't see why there would be a built-in plotting module. There's a built in graphics module and it's not a very good one. It's a basic battery and it comes with things like Matlab, which Python and it's libraries regularly rips off (e.g. slicing, integer division returns a float, numpy/matplotlib function names). &gt; For example, you no longer have to worry about the distinction between classic and new-style classes I put `classname(object)`. It's not something I worry about. &gt; For example, you no longer have to worry about the distinction between int and long My open source library has to worry about that. You can't write a long in 8 characters, so if you have a fixed width format, longs are a bad thing. &gt; pickle and cPickle They are actually both useful in Python 2.7. cPickle has worse error messages. Being able to dig into the code easily is helpful. &gt; range and xrange I use six, but I agree with that. &gt; python 2's nonsensical default implementation of __lt__ (1&lt;object, etc.). I actually don't mind that. I've taken advantage of that and it's hard to make data not have None's sometimes.
looks awesome ;)
You are amazingly naive. Even if literally no one worked on CPython anymore past its "official end of life" (which is unlikely, and there'll at least be people fixing its security bugs and making it compile on new OSes), there are alternative implementations, like Pyston, that are working toward being much better than CPython ever was, and they only support Python 2.x. https://blog.pyston.org/ Yes, right now, at this very moment. people are working on a brand new python JIT implementation that focuses solely on Python 2. Does that make you mad? I bet it does. Python 3 proponents keep harping about the supposed "death" of python 2 as a reason to spend a lot of time porting code to something that barely brings anything of worth. The facts out there are anything but. Python 2 isn't dead, will not die. Not only that but its ecosystem of implementations is healthier than that of Python 3, as people are working on making something better than the slow ass, primitive CPython. As far as I know there is no serious JIT implementation being developed for Python 3. The world does not end just because Guido and his fangirls decreed it. Dropbox is guido's employer and they have absolutely no interest in porting to python 3. They also happen to be the guys who made Pyston. Think VERY carefully about it. Dropbox would rather make an entirely new Python implementation with a JIT to support their current python software than to port to python 3. And that's despite employing the not-so-benevolent dictator. There is so much Python 2 code out there that the absolute worst case scenario would just turn it into a new COBOL. It's just undying. Deal with it.
&gt; At this stage, the libraries argument is largely null and void. If a library you like doesn't support Python 3, there will be 5 others of similar quality that will, for the most part. Yeah sure would rather rewrite the entire GUI bits of apps that use things like WxWidgets than stay with something that works and may even have a better future with a new implementation, Pyston, that will go where CPython has no intention to tread. The library argument is only valid for writing new projects. It still isn't valid for porting old projects. There's still too many libs that are stuck in Python 2. There may be equally good libs for Py3 as alternatives but python 3 doesn't nearly bring enough to justify complete app rewrites. In the case of WxWidgets, the port to 3 is still a "pre-alpha" in 2016. And while WxWidgets has been superceded by better libs these days, it used to be promoted by your little favorite dictator Guido himself and there were a lot of devs who relied on this for their GUI. &gt;&gt; wxPython is the best and most mature cross-platform GUI toolkit, given a number of constraints. The only reason wxPython isn't the standard Python GUI toolkit is that Tkinter was there first. -- Guido van Rossum What does it say about the health of the ecosystem if something that was so favored by your Fuhrer is having such a hard time getting it to work with the new python? and all for what benefits? Was python 3 ever worth it? if, as he said, he had made wxPython the standard lib for Python instead of Tkinter, how would have the transition worked for him? It's not even solely about the most popular libs. All app developers will have different niches and at some point may have used a niche library that wasn't ported to py3 and, while each lib that wasn't ported may be niche, the % of dev who rely on one or the other in global stats can be big enough to still make python 3 a problem right now. Python 3 was the dumbest move in history and python will never recover from it. Most people I know will just maintain their python 2 app as is, just as people maintain old java and COBOL apps, while using other languages for new projects because the trust has been broken. It was even more dumb than Perl 6 because the community behind Perl didn't try to enforce their ways on the old base and hasn't tried to forcefully kill Perl 5. Not only that but they keep adding features to Perl 5. Perl's community is actually far more mature and professional in the way they handle the language and its long term maintenance than Python. The alternative to Python 2 is not Python 3. It's Go. It's C#. It's clojure. It's even javascript with node. Anything but a language steered by a community of madmen who can impose irrelevant busywork on your app development. I'd rather add new features to my apps than spend even 1 minute porting a line to Python 3. And that is why. Python 2 apps will stay Python 2 apps. As for new apps.. they won't be written in Python at all.
It might be clearer if you look at `divmod(a, b)` first. This function returns the results of both `a//b` and `a%b`. There you will see that `a%b` will return `a` if `0&lt;=a&lt;b`.
You could use Anaconda Python or Miniconda by continuum as your Python interpreter and then "conda install" a lot of precompiled packages that would otherwise give you this error if you don't have the compiler. But it depends on which library you're trying to install. 
a quiz was a simplification of it really but no it needs to be in python 
It's interesting but for me a big turn off is that it's on the Java platform. Also it looks like there's a lot of boilerplate code which might not be there in Haskell. I think the only JVM languages that I've seen and liked so far are Kotlin and Clojure. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/onlinelearningnow] [Audio Fingerprinting with Python and Numpy](https://np.reddit.com/r/OnlineLearningNow/comments/55ewgi/audio_fingerprinting_with_python_and_numpy/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
it is so technical :( but it really looks impressive.
feel free to post here! :)
GREAT JOB!
&gt; We think the problem lies deeper than the user interface, in the concepts underlying Git. The concepts that underlie Git are a hash-based addressable database that holds 1. Blobs (files), 2. Trees (folders that hold files and other folders), 3. Commits (hold files, folders, and refer to previous commits), and 4. Tags. What the problem with that concept is, is left unknown. But then it's amusing that: &gt; Gitless is implemented on top of Git So what do you hope to accomplish? I get that Git is harder than (e.g.) Mercurial, but it's a pretty thin layer to make Git act just like Mercurial (no staging area, make `pull` just `fetch`, etc.). Git is a bit of an iceberg, there's some stuff on top that hides a whole lot below, but most people never need to bother diving in and mucking around with it. The most complex thing you need to deal with in Git is merging. Rebasing is purely a choice.
Double asterisk is power of, I never knew that.
Still early days but I've been working on a rest API for a bug tracking / ticketing system https://github.com/chasinglogic/tessera I'm updating the read me to be more friendly I promise! We're pretty active in slack and responsive to questions if you want an invite 
If you enter (0, 3) then y is 3. That makes `(x !=0) and (y != 0)` false and the while loops stops. If you want it to stop on (0, 0) you need to use `not ((x==0) and (y==0))` or shorter `(x != 0) or (y != 0)`
So, I believe I understand why you why you think the second syntax makes more sense, but correct me if I'm wrong: because, in the first snippet, the `i` variable is never assigned; it just sort of appears out of no where. In your second snippet, the setting of `i` is explicit. I can see how that might be confusing. However, even though your second snippet isn't valid Python, I (and I assume many others) would take it to mean "assign to `i` the result of iterating over the list," which, 1) in the context of Python doesn't make any sense, and 2) in this case would probably return something like `None` or an empty list. But again, this is not valid Python. Most of the languages I'm familiar with have a for each loop syntax similar to Python. **Javascript**: for (let i of [5, 4, 3, 2, 1]) { console.log(i); } **Ruby**: for i in [5, 4, 3, 2, 1] do puts i end **PHP**: foreach ([5, 4, 3, 2, 1] as $i) { print $i } These are all pretty similar, and none of them explicitly use an assignment operator on `i`; it's implicit that `i` gets set by the construct itself. ----- Digression Time! ----- The language Elixir *can* do something that looks similar to your second snippet, but which functions like what I described earlier: result = for i &lt;- [5, 4, 3, 2, 1] do IO.puts i end Here the array is iterated over, assigning each element to `i` in turn and printing it to the console. And in Elixir, the last line of every `do` block is returned, so each iteration would return the return value of `IO.puts`, which is the atom`:ok` (on success). The `result` variable would end up being a list of return values of all the iterations: `[:ok, :ok, :ok, :ok, :ok]`. ----- Digressions aside, I think many if not most languages will eschew explicit assignment in for each loops as assignment is implied by the very nature of the construct. Regular old for loops on the other hand (which I don't believe Python even has, and if it does, I'm pretty sure I've never used it), do tend to have explicit assignment. Take Javascript, for example: let list = [5, 4, 3, 2, 1]; for (let i = 0; i &lt; list.length; i++) { console.log(list[i]); } This is functionally equivalent to the Javascript above. Here you are not iterating over an iterable data structure (the list of numbers) itself, so it's up to you to assign, evaluate, and increment `i` manually. So, we can see where `i` is getting set here, but I think I prefer the simplicity of the for each loop construct to this setup.
Thank you all for the comments. I did not know how to indent in Reddit comments for the first snippet. Second snippet is a made up syntax to show it was more readable and nothing like Python. TIL php uses foreach 
I don't find yours more readable.
Here is the motivation for building this tool. I have not read through it all yet but it seems well thought out. http://people.csail.mit.edu/sperezde/pre-print-oopsla16.pdf
Matolotlib could really use a timeline feature for plotting text against text. Horizontally.
Is there a tl;dr version of the differences to regular git? I only found [this](http://gitless.com/#vs) which makes me think it's mostly a collections of aliases with slightly modified behaviour. Is this just someone's personal customization or is there something I'm missing?
Please don't use images to share code; either paste it into your question (indent by four spaces), or use some other snippet-sharing-service (Gist, Codepad.org, Pastebin...).
not tl;dr version but it is the missing bit http://people.csail.mit.edu/sperezde/pre-print-oopsla16.pdf
I've actually been working on all the appropriate documentation so we can hop on that! so far it's been an all local group so we were really bad about documenting.... surpise surprise.
If you're on Python 3, you can just use floordiv: ```python x = 10 y = (x // 7 + 1) * 7 ``` Edit: I'm wrong, don't listen to me.
Wtf, how have I missed all this?!?
That's not correct, if you input 7 for example, you will get 14, because the division inside the parentheses comes out to 2. The other solution with math.ceil is more correct.
Interesting project. Keep it up!
The idea I had was to use this on a box you have root access on. So, * change the parameters * compile with pyinstaller * replace sudo with sudo-snooper * profit So `where sudo` in that case wouldn't show anything different :) You can go the easier route and just alias it too.
I don't intend wasting my time on such nonsensical drivel.
Reading the comments here I wonder just how many people are aware of [Python Mentors - Python Core Mentorship](http://pythonmentors.com/)?
...That's just math. You're describing math.
Very much my personal opinion is that the focus should be on sorting out the core workflow rather than sprints such as this. For those interested please see [The core-workflow Archives](https://mail.python.org/pipermail/core-workflow/)
[fixed it](https://github.com/s-kaczmarek/memoir/pull/1)
+1 for the talk Python recommendation, this looks great. Just the title of the episodes has me excited! Will download a couple episodes, cheers. 
For functional python, I pretty like dogelang https://github.com/pyos/dg, with a haskell-like syntax, built-in currying, etc.
Not a podcast, but you can also checkout these two educational programming games at http://checkio.com
Not sure why you linked that? I know I can fix the error with tagging `common tools for Visual C++` during the `Visual C++ 2015` install. But it also installs the main package for Visual C++ 2015 wich I tought I don't really need, but maybe I'm wrong
Cool. I think I'll make use of this.
You find pre-compiled wheels there for the most common packages, making an installation of VS/compiling obsolete for these. 
http://softwareengineeringdaily.com/
[deleted] ^^^^^^^^^^^^^^^^0.7030 &gt; [What is this?](https://pastebin.com/64GuVi2F/95621)
Check out /r/learnpython for things like this.
/r/learnpython
It's usually better if you ask specific questions about the parts you don't understand. Calling the `split()` method on a string breaks that string into pieces using the specified delimiter (in this case a space), resulting in a list of strings. Then the for-loop iterates over that list, assigning `word` to each item in the list in turn. In the body of the loop, the first character of the string `word` is accessed via indexing, and that character is appended to `result`. 
Not quite getting the layman's are we, I'll post to /r/learnpython
Thank you for this. FFmpeg has an interface that makes me want to claw my eyes out.
I really want a future import about this. 
I would have prefered a clear message: either dict ordering is a thing and then it's not an implementation detail, or it's an implementation detail and it may change in the future if it turns out we find out unordered can be made faster than this implementation. People who care about ordering use OrderedDict and that's it. I've never found myself needing it so I agree with Guido when he says most code don't need to rely on this.
Option 1: Have root access to the target machine. smh
I've considered ffmeg for generating video files from timelapse stills from a cheap webcam surveillance setup. Does ffmpy have that functionality?
Programming Throwdown, for more general programming topics. Also Hello Internet, not programming related but worth listen to.
It would be useful. At least djangos ORM uses this by doing a hack around the lack of this feature. 
Not sure if this is the type of thing that typically gets shared around here -- if it's unwelcome I'll happily take it down!
Why isn't django using OrderedDict? I was able to find that they're using a hack on dicts for Models, but I wasn't able to figure out why.
Guido's being naive, of course some people will start writing code that relies on dicts being ordered as soon as they get hold of 3.6. A post to python-dev asking them not to won't change anything.
This is a really fantastic write-up on how you'd perform medium-complexity plots with each library. I don't think it really does a satisfactory job of pointing out the differences between the approaches of each library though: 1. matplotlib is a pure "imperative" library; you tell your program **how** to plot something, sometimes very pedantically. 2. pandas improves on this by adding the most basic "declarative" syntax; you tell your program **what** to plot, and let it figure out the rest. Sometimes you have to mix the two, as in when you use a split-apply-combine (groupby) operation to map an imperative plotting function, and let pandas do some heavier lifting. 3. seaborn is simply a more complete wrapper around matplotlib, but is still mostly imperative. 4. altair and ggplot are pure declarative grammars. We're *almost* to a "golden age" of visualization in Python. Anyone familiar with seaborn should have little problem picking up altair. You'll write a core plotting function (maybe you need to compute a regression or normalize colors) and let the library apply it across your dataset in the proper combination of glyphs, marker sizes, colors, facets, etc. I think, eventually, that library will *probably* be altair, possibly with a suite of user-contributed extensions that port some of the plots that are provided by seaborn (e.g. grouped linear model/regression plots). But what altair is missing right now is a compatibility layer with matplotlib. For instance, there's very little I do regularly in seaborn which I don't think I could immediately and more succinctly implement in altair. But I'm not willing to do so, because I *love* the aesthetics and stylings of seaborn (which are so popular and nice that they're a default option in matplotlib). Altair is a really brilliant idea. The conversion to vega means that I can easily and transparently include the raw data in my chart for distribution, say in a journal publication. And once I can tweak the aesthetic using my large library of matplotlib code, it'll be an awesome tool. Thanks for sharing! **Edit - cleaned up some grammar/typos, since this comment is being linked to directly; content is not changed!**
Was this inspired by the White Rose's minutely time management beep from Mr. Robot?
That sounds a lot like "letting an error pass silently". 
This is tremendously valuable feedback -- thank you! (Indeed, I found it so valuable that I linked to it from the post; please let me know if you'd prefer I didn't!). Thanks for reading!
That is unfortunately true.
&gt;In contrast, 3.x IS fully backwards compatible with other 3.x releases. No, this is a very dangerous assumption, because it is *almost* true, but there is some subtle breakage in every release. I was recently bitten by [this](http://stackoverflow.com/a/14959001) major behavior change that happened in the switch from 3.2 to 3.3. (I had to fix a very weird bug caused by poorly written code that made some implicit assumptions about hash values.) The more obvious breaking changes are listed in the release notes, e.g. https://docs.python.org/3/whatsnew/3.5.html#removed and https://docs.python.org/3/whatsnew/3.3.html#porting-to-python-3-3
I'm not ... My thought was that this would be a perfect way to write and run embedded applications in Python for something like a Raspbery Pi. The nice thing about Arduino is that there's basically no boot time (because there's no OS), but you've got to write in C/C++. This project would hopefully allow something similar for the Python VM (because IncludeOS can include a boot-loader in the resulting binary), and one of the major drawbacks of IncludeOS (single threaded) really isn't a problem at all because of the GIL.
Because it's not Django who creates the object. `obj.__dict__` is already an order-less dict given by Python and Django tries to infer what was the original order.
It was installed by a technician from the web hosting company. I asked them to install mod_wsgi and configure with python3.4.3. I think they downloaded python3.4.3 source code and compiled and installed it. I am trying to figure out what they did exactly during installation. Sorry for any confusion that I am not familiar with area. It was installed under /usr/local ... that was just a typo from me. when I run: which pip3.4 it reports as follows: /usr/local/bin/python3.4 How can I figure out sys.exec_prefix? I don't think there is PYTHONHOME or PYTHONPATH environment variable setup, as when I run echo $PYTHONHOME, echo $PYTHONPATH, it does not show anything. thanks! 
FFMPEG is one of those tool that has so many options that this type of interface would just be cumbersome to learn. 
Mostly because it's not possible to sub an `OrderedDict` in for the class' `__dict__` doing metaclass stuff (AFAIK). Also probably partly history: pretty sure the field-order hack predates the existence of `OrderedDict` in the Python standard library, though I think we've started making use of it in places where it's possible.
My guess is the installation of python3.4.3 is not correctly configured. Do I need to remove python3.4.3 and re-install again? If yes, how to remove python3.4.3 appropriately? If no, what's solution to use pip3.4 to install package. any help is appreciated. 
You can. There's not a lot of docs yet, but `huestr` accepts `hue_stack` arg with a tuple of escape codes. But certainly, could add proper kwargs handling.
Ummmm. Anyone trustworty enough to help you with this problem is also trustworthy enough not to.
&gt; No, this is a very dangerous assumption Why? Nobody is proposing upgrading blindly in production and/or never testing your code when you change something about your system. Every time you change anything at all about your environment (even stuff that doesn't seem remotely related to python), you should still be running it against your test suite. &gt; some subtle breakage in every release Well we're probably getting into semantics here, but of course a new release means (by definition) that features have changed and bugs got fixed. That's the entire point of a new release! But among the 3.x line of releases, all of those changes are mindfully done in a way to preserve maximum backwards compatibility for properly written python. When we say something is "backwards compatible", we are not addressing the impossible cases where someone is relying on a bug, undocumented functionality, indeterminate behavior, a corner case side effect, etc. It would be insane to try and catalog much less preserve those behaviors between updates. For instance, the example you give of an upgrade that bit you, can be summed up with one crucial sentence : *Python has NEVER guaranteed iteration order of keys in a dict or set* So sure, if you had code improperly assuming iteration order, it could have worked one way in Python 3.2 and another way in 3.3, but that fact is that code was ALWAYS broken python. It wasn't the 3.3 upgrade that broke it. Even in 3.2, you were relying on undefined behavior, which just coincidentally happened to do what you wanted most (even possibly all) of the time. However, the next point release of 3.2 could have "broken" things just as well, regardless of what 3.3+ was doing. --------------------- TL;DR If you define "compatibility" narrowly enough, it's trivial to write code that isn't "backwards compatible" e.g. if sys.version[:3]!='3.2': raise SystemError("See, python sux!") But again, that's clearly not what anyone means when they talk about "backwards compatibility"
That was always explicitly an implementation detail, though. Obviously lots of code does end up depending on implementation details, but that doesn't suffice to invalidate /u/tomz17's claim.
I believe `__prepare__` exists for this sole purpose though... So you can change the `__dict__`, for example töto an `OrderedDict`
I'm with you on that. On occasion I'll make a WebM or Gif from a video. That much is easy with some ffmpeg commands I keep handy. Just plugin the file names and start/stop times. But a couple of times I've tried to do actual video editing, combining / splitting files, etc. and got nowhere after hours of trying. 
&gt;Now my issue is that this setup (using the community 2015 setup) is basically going to install the main package for Visual C ++ too, wich I don't really want because everything totals up to ~7GB and I'm installing it on a SSD Nope... You need to install a compiler if you want to compile things yourself. As others have suggested, you *can* get binary packages from various places on the net, but you are giving up some flexibility in going this route. 
Awesome, thanks man!
Are you invoking your application with the same Python binary and PYTHONPATH that pip is? Look at pip's shabang; `head $(which pip)`
How did you scrape it... you could have written the script so that it just looked like normal browsing. They can't detect whether or not your program is writing content from their site to a file. 
&gt;So if you are averse to maintaining the code, why exactly do you need new features? New features, especially if someone has asked for them and is paying for them, have value. A new version of Python does not necessarily have value. It could even have negative value because the new language features aren't likely to make things better enough for me to overcome the cost of validating the code base on the new interpreter. A futures import gives me the ability to try out new features in isolation without the risk of damaging my entire product.
Small nitpicks (almost) always welcome :) made the change -- thanks for the tip!
Greatly appreciated!
No, it can but I'm stuck with ubuntu 14.04 environment, which officially support 3.4. And companies do not like having ppa's. 
Thanks for this, been doing a lot of visualizing with python and it can be a pain sometimes (im not the most skilled programmer). I've been using pandas for about a year now and never realised it can do this stuff haha.
Ah well, Custom `rgb` values would need to be approximated to corresponding 8 bit color value for this to work out. I still am evaluating the API so the usage isn't awkward. Would love if you could give an idea of how you imagine the usage should be like?
With selenium I'm actually writing to the website 
There is no such thing as named tuples in the JSON format. Dates are supported (read them in as text and convert it). Exceptions are just data - what are you actually expecting here. I think you are expecting far more from JSON than JSON was ever designed to support.
&gt; The reason we had future imports in 2.7 Yes, but what about future imports in 2.1, 2.2, 2.3, 2.4, 2.5 and 2.6? [Future imports](https://www.python.org/dev/peps/pep-0236/) weren't invented for the Python 2 to 3 transition. They go all the way back to [nested scopes](https://www.python.org/dev/peps/pep-0227/) in Python 2.1. There's no reason to think that Python 3 will never again need to introduce a backwards incompatible change that needs a future import. 
Congratulations on accidentally freeing yourself from facebook :)
&gt; Tired of $ sleep 4231; beep? Well not really. I actually prefer that syntax.
If you wrote your g = ggplot(ts, aes(x='dt', y='value', color='kind')) + \ geom_line(size=2.0) + \ xlab('Date') + \ ylab('Value') + \ ggtitle('Random Timeseries') with wrapping parentheses like: g = (ggplot(ts, aes(x='dt', y='value', color='kind')) + geom_line(size=2.0) + xlab('Date') + ylab('Value') + ggtitle('Random Timeseries')) You shouldn't need the line-break "\\"s you put in there.
What you want is not json. It is a private subformat implemented on top of json. Json is defined and standardized only for a limited set of basic types, derived from its JavaScript heritage. There are countless such json subformats and variations out there. You can't really expect the json module to support this Babel out of the box. It does, however, let you subclass and customize it, and you have done just that. There is a related format called cbor. It is a binary json-like format. Out of several binary jsons, this one seems to be the best thought-out and is an IETF standard. While the basic infoset is equivalent to json, it contains a layer of optional annotations that can extend it with the kind of type information you want. Readers can safely ignore these annotations and get something equivalent to plain json. It would have been nice if json had provided such a feature. 
Honestly decoding a namedtuple back into a namedtuple, and etc is not a huge thing. What i more care about is a library that can take a namedtuple and knows to do a ._asdict() on it. The only thing i remotely care about decoding back into its original object is a datetime. The most important thing is when it cannot encode something to json it will ether stick an empty dict or just None in there. 
I totally agree that those minor breaking changes make sense and should not have been queued up for 4.0. What triggered my reply was your claim of 3.x being "**fully** backwards compatible" with other 3.x versions, which is definitely wrong, as I have shown above. Yes of course, if you change the meaning of "fully backwards compatible" into "backwards compatible only with things that made sense", your point is correct. But I really don't think this is a common definition. Python does not have a formal standard like C where you can read how the language *should* behave. The closest thing to a standard we have is CPython + the accumulation of final PEPs (which are regularly being changed even years after reaching final status), so how should we know what is a feature and what is a bug that eventually gets "fixed" in a point release? The "implementation detail" warnings in the official docs do not apply to most of the breaking changes and are hard to find if you are not specifically looking for them. (The code with the hash seed issue I mentioned earlier was poorly written, like I said, but it was not "broken" *in CPython &lt;= 3.2*.)
The official Graph API is easy as REST service, or get one of a thousand wrappers.
It seems they also filter based on IP. Like if your server is hitting 100 pages every X period it gets blocked after a while even with faked/randomized UA headers.
Haha haven't watched that one, but Google images shows me that we're [one and the same](http://sensorstechforum.com/wp-content/uploads/2016/08/Mr-Robot-whiterose-culturageek.com_.ar_.gif).
Yeah I like it too, but the arithmetics and the `bc` pipelining drove me to look for a more humane approach.
Sadly i am already in a world of madness. Unfortunately there is absolutely nothing sane about what i am working with. I am just too tired to fight against this anymore. Basically we have this cthulu: raw data -&gt; black box #1 -&gt; hundreds of python scripts crunch data and dump metadata json or some sort of binary object with json embedded -&gt; black box #2 -&gt; output product where metadata is then decoded so people can work with the output. Unfortunately what ends up happening is a script in the number crunching chain breaks, due to someone trying to be cute and hiding something like a namedtuple, or error data with an exception in the output. So when black box #2 comes to the script and asks it for the data, they explode since the python script cannot decode json, which causes things to faill down like dominos. (imagine every python script as a mini http webservice, that has a input and output method). I have written my own code to decode/encode json. But for example someone did something kind of unexpected, they had a namedtuple inside a namedtuple. Which i never handled. So this is kind of why since i expect there is a library out there that has done this kind of stuff by smarter people. 
Appreciate this, never knew this trick before. Have always done the hackery as well.
I'm also annoyed with this gitless. I don't think they're accomplishing anything here.
Thanks, I've just read your comment, and this... ☺️
I don't know of a library that does this automatically for you. If you want this behavior throughout the entire app then one option is to monkey-patch the packaged module at start up and then other devs can continue to use the regular methods and it'll auto-magically happen for them.
Use [marshmallow](https://marshmallow.readthedocs.io/en/latest/) and write your own fields (dates are already supported) and schemas. Then you have input/output validation and json marshalling for custom data types with a common interface.
OP, great post but you missed Bokeh and, to a lesser extent, [Toyplot](http://toyplot.readthedocs.io/en/stable/).
&lt;3
years ago i got useful hints when i asked google for this.
Could you point me to useful keywords? I always end up on graph visualization library (matplotlib...) or Gui libraries (pyQt...) but never something close to what I look for.
Wouldn't that screw up with things like university proxy servers and VPNs?
You can use SCL on CENTOS to get newer versions of software. They're officially supported alternative repos. They have Python 3.5. It seems to be a copy of Redhat's collections, which doesn't surprise me. https://wiki.centos.org/AdditionalResources/Repositories/SCL
Almost the same process for me: https://gist.github.com/cedricbonhomme/35e81e295fd4baed83d6ccb2cb9fde79
This is an excellent book with one criticism. There's very little on testing, which is probably necessary if you're going to write a program to ~~automatically~~ destructively process your data. I do understand however that because it was physical book (which was a mistake in my view: they no longer exist in my life) they have a page length budget. edit: Why can't these extra parts can't be in the digital version?
is pygame not sufficient?
Yeah, why go with a single compiled version, when you can have all the compiled versions and not worry about it? Pyenv is really the way to go these days imo
Ah -- hadn't seen Toyplot -- thanks for reading/sharing! I think I need to do an update at some point and include bokeh. (To be frank, the main reason bokeh isn't here is because I hadn't used it much and was worried I wouldn't do it justice.)
Thanks for reading -- glad you enjoyed it!
Or make a package that your system package manager can use to install it. That way it's actually tracked and can be cleanly uninstalled. Using your real package manager is much preferred to using whatever language-specific one is provided.
v0.19.0 (October 2, 2016) [What's New](http://pandas.pydata.org/pandas-docs/version/0.19.0/whatsnew.html) TL;DR This is a major release from 0.18.1 and includes number of API changes, several new features, enhancements, and performance improvements along with a large number of bug fixes. We recommend that all users upgrade to this version. **Highlights** - `merge_asof` for asof-style time-series joining - ``.rolling()`` is now time-series aware - `read_csv` now supports parsing ``Categorical`` data - A function `union_categorical` has been added for combining categoricals - ``PeriodIndex`` now has its own ``period`` dtype, and changed to be more consistent with other ``Index`` classes - Sparse data structures gained enhanced support of ``int`` and ``bool`` dtypes - Comparison operations with ``Series`` no longer ignores the index - Introduction of a pandas development API for utility functions - Deprecation of ``Panel4D`` and ``PanelND``. We recommend to represent these types of n-dimensional data with the `xarray package` - Removal of the previously deprecated modules ``pandas.io.data``, ``pandas.io.wb``, ``pandas.tools.rplot``.
I've been using runit with the Docker phusion/baseimage-docker. It's pretty good. 
I've been using systemd (with or without docker daemon) recently for this. There's oodles of clients for each. 
I guess yea, but at Facebook scale they have plenty of resources to figure out IP ranges. Scraping from inside Amazon AWS's IP ranges didn't work long for us.
You can use the other option which doesn't require root access.
Maybe it's time Python got an official specification that covered all these details? 
Manually building unit files, in afraid. It's not great but it's better than manually building sysv init scripts was before...
Don't know if you've seen the service SplitWise. Maybe you can incorporate that rather than having to do the email thing?
simplejson will manage namedtuples
correct academic answer. Reading OP's replies suggest he's nowhere near that type of philosophical goodness.
I've been using [linuxbrew](http://linuxbrew.sh) and it's been working out well so far.
I haven't tried this lately, but I guess that selenium also has something called ActionChains where you can hover and click an element if you wanted to. Something like this could also make the typing part seem more natural: https://www.reddit.com/r/learnpython/comments/4ohuf3/is_it_usually_easy_to_override_a_method_that_you/
why does it matter if supervisord uses python3 or not?
/r/learnpython
&gt; The pd.get_dummies function now returns dummy-encoded columns as small integers, rather than floats (GH8725). Oh very good. Small issue maybe, but the old behaviour was just strange.
Singleton without enforcement? Is everything a pattern now?
Look up methods on str. Look up dict. Look up for loops. Look up print. Look up input. That's all you need. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I often insert random delays into concurrent code to check for race conditions. They sometimes don't show up when tested locally because everything is zomg fast no latency.
All of the points made here are pretty trivial/are common wisdom. For those who don't already know these things, you provide no real motivation or any examples for them sink their teeth into. Add it to the pile of frivolous blog posts
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Man, I tried doing this on my own (with no OpenCV experience) a few years ago and got basically nowhere. Too bad I'm not teaching anymore :)
Maybe they could call them 'Python's Essential Principles', or PEP for short.
Pandas is great. The only thing of its kind in the Python world. But I hope it is designed after Python's motto: there should be only one way to do something. The way Pandas is designed is similar to Matplotlib and to a large extent, Perl. There are so many ways to do something and it gets really confusing to use the tool effectively.
Another option is to use the Miniconda distribution. It's exactly like Anaconda, but comes with less things. The download size is 32.4MB.
It's orthogonal up to the point where he's making it. On fresh machines, I sometimes forget what dependencies I need to install with `apt-get` or `brew`; a matrix of all deps for different Pythons &amp; platforms would be a cool thing
Thank you very much. I always wanted to learn at least one language but Java, etc. were of use to me. I think I'll start with this as there wouldn't be much of a downside.
I would check out /r/learnpython, they are a better community for this question.
Oh, alright. Thanks.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Why aren't the authors of this library shouting about it from the rooftops?!?!? It looks *fantastic!* 
Sounds like an locked down, intentionally minimal version of [qutebrowser](https://qutebrowser.org/), except that it probably doesn't have Vim-like keybindings. Will take a look at it later.
The message I'd really have liked to hear is "dicts are unordered and if they happen to be in order then it's an implementation detail that may break in the very next version so don't rely on it and use OrderedDict where you need ordered dict". Now that they said that they were going to be ordered they must stick with it for all next versions even though they choose that implementation for its performance and did not at the time choose to commit in any special way to ordered dicts. Guido clearly thought of that and tried to precise that it's an implementation detail but its position isn't strong enough on the matter to avoid people relying on it. Maybe I'm wrong and that was a deliberate decision, they do want to use only ordered dicts from now on. But if so their message wasn't clear enough in that direction either. So I'd say it's a complete communication failure that will bring more bad than good.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
No problem. I think this is the most encouraging deletion message I've ever received. I've got my answer already so I won't re-post. Have a nice day :)
The rules seem pretty clear to me: * Regular dicts are now ordered as an implementation detail (don't rely on it!) * OrderedDict also uses the new, faster ordered implementation (and will obviously diverge if changes to the regular implementation make it no longer ordered) * [kwargs](http://legacy.python.org/dev/peps/pep-0468/) are now an OrderedDict * `__dict__` is now [guaranteed to be ordered](https://www.python.org/dev/peps/pep-0520/) * I can't find a source for the metaclass-namespace ordering right now, but I'm sure it's out there too. The original announcement of "ordered dictionaries" made it pretty clear that it was simply an implementation detail, I thought, but as you say, there must have been a communication failure somwhere since it's not clear to you (and I assume many others are in the same boat)
What? The api is xmlrpc.....
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Any examples that you've struggled with in particular?
All good I made a new one over there after I was told. I just didn't delete it because of some solid feedback on the comments.
It's not too bad. Instead of `./configure; make; make install` it's `./configure; checkinstall`.
If I knew my teacher was using one of those I'd just fill in two or more bubbles for a question I wasn't sure about
People who are new are noobs. That is the meaning of noob.
Toyplot. 
They have a [page](http://pandas.pydata.org/pandas-docs/stable/indexing.html) on when to use loc, ix, or iloc. I've yet to fully understand it. 
Same boat here. Read that page and very clearly understood that whatever I was doing was just plain wrong, but it gets me the correct result and only occasionally bitches at me about the danger of assignments to things that might be copies on alternate Fridays. 
Removing it would probably help. I use ix because it is suggested in a pandas warning, is shorter, seems to work, and I have more important shit to worry about. 
I wonder when it will be v1.0 ready.
Thanks for this - I've run into various forms where when the text appears instantly their code doesn't detect the form was filled out.
The short versions is: 1. .loc for label-based indexing 2. .iloc for position-based indexing .ix mixes those two, which can cause surprising behavior when indexing into an integer index (is it using labels or positions?) .ix is probably being deprecated, but there's a lot of code out there that uses it. 
Not to be that guy, but this would be a lot more compelling if at least some of the example answer circles were not perfectly and darkly filled in. 
Thanks for the links, i will read through them! To answer your other question: no threads, only a single process. I'm not using threading at all, only plan on multiple processes for a later time. It's weird that you got stutter from pinning to a single core, that seems rather backwards to me. Hm.
on behalf of the PTVS team, a huge congratulations! looks awesome!
X-Post referenced from /r/programming by /u/Mjjjokes [I created a bot that finds rhymes in music videos. Here is a compilation of some of the rhymes (MJ Avant Garde - Beta) [x-post /r/music]](https://www.reddit.com/r/programming/comments/55qgho/i_created_a_bot_that_finds_rhymes_in_music_videos/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Or use the Python packages from the Rackspace-sponsored IUS project: https://ius.io/
I would do it for every single question.
Dude, it's not like he can't view your answers before putting the key on top.
Is kiosk an unusual word? Perhaps it depends where you are from. I'm not sure about other places, but in the USA and Canada it is common knowledge that kiosks are those small, often portable retail shops in the aisles of most malls.
Hey - you made a punch card reader, and the computer world comes full circle.
Your comment actually made me crack up. I wasn't alive during the era of punch cards but I can imagine my parents' reactions to your comment. Lol
Since that would catch a lot of people using assistive technology, I'm guessing they don't do that. But not even assistive technology is going to fetch pages as fast as a scraping script. That'll nail ya every time. 
Re: the stuttering, I found out why. It's because audio was nominally handled by a thread that was allowed to migrate to another core, and thus work in parallel. Better to simply pin the thread that handled the main game loop and let the threads that handle things like audio be migrated by the OS.
Neat. I'll actually use this!
df.loc[0:n] returns n entries. df.iloc[0:n] returns n-1 entries.
Very cool, great job! Now, as a lesson in why patents suck balls, realize that if you tried to sell this (and depending on how stupid they are, even if you don't) you could be sued by the Scantron company for infringement. I wish you could do something as neat as this and profit from it without worrying some company who doesn't want competition will come sue you for it.
But the magic is that students can scan their test for you! I use [gradecam](https://gradecam.com/), which I wouldn't be surprised if they use OpenCV, and set up one of our laptops to grade. Students hold up their test, they get their grade right away, and they can see the look on their face when they see their success or demise. Edit: The other handy part is the ability to do some data analysis, see if there is a bad question or what I should improve on teaching the next year. Now if we can only get it to grade short answers/fill in the blank as well....
I would post to /r/learnpython I'm not sure about the networking side of this but based on my interpretation of this problem, you have to read a file containing something like vlan1: host1, host2, host50 vlan2: host432, host9, host42 into a usable python data structure. Here's my solution: with open("vlans.txt", "r") as f: vlans = f.read().splitlines() vlans = [ vlan.split(": ") for vlan in vlans ] vlans = {vlan: host.split(", ") for (vlan, host) in vlans} Basically it splits each line from the input along the colon, giving you something like `["vlan1", "host1, host2, host50"]` then splits `"host1, host2, host50"` along the commas and puts it into a nice dictionary, so you now have something like this: { 'vlan1': ['host1', 'host2', 'host50'], 'vlan2': ['host432', 'host9', 'host42'] } Now you can access each vlan like `vlans["vlan1"]` to get a list `['host1', 'host2', 'host50']` and to iterate over all vlans, you can do something like this: for key, value in vlans.items(): print(key) print(value)
I use pythonanywhere which also hosts your web app. It will do custom libraries but not `tkinter` as that needs a screen. However, you can do graphics and GUIs by targeting the browser and implementing your program as a webapp (locally hosted if you want).
Thank you so much, I still have a desktop so I can do the Tkinter there too. Thanks for all the help! 
Thank you for the response!
Sadly it's for a education company so I can't describe how it works, except that it's OpenCV, C++, and a bunch of Machine Learning.
When the API stops breaking with each feature release, probably... which could be a very long time!
&gt; Comparison operations with Series no longer ignores the index That's interesting. So prior to this, if you compared two Series (e.g. `SeriesA &lt; SeriesB`) it would just be positional? I would have assumed it would align on index.
Laughed pretty hard when I saw this. My life for the past two weeks has been telling pandas to shut the hell up about your bullshit copies of slices of data. Do the group by agg function and shut your mouth pandas. 
That looks really solid! 
Neat, that was a great read! As a note, the Gaussian blur before the Canny filter might not be needed; it's performed as step 1 of the filter. (It's then followed by a Sobel filter, non-maximum suppression, and hysteresis thresholding.)
Very cool! What's the company behind that? I've been doing exactly this for a bunch of years now - https://akindi.com - and… I'll be honest - we're good (very good, if you'll forgive my bias), but that's incredible!
I've been using Pandas a lot in my thesis, and I've been pretty confused about the way they do things, indexers among other things. Pretty glad I'm not the only one. 
[removed]
Alternately with apt you can also get many python versions from `ppa:fkrull/deadsnakes`
Guys, come on. I know what a kiosk is. What does it mean in the context of HTML webbrowsers though?
The browser is meant for kiosks; it can be used as a digital sign to display prices, inventory, information about the kiosk, etc
/r/learnpython
&gt; I'm on my phone now, but if there's interest I can post some of the examples from my "interesting scans" folder! Please do, when you got the time :)
Oh wow, never thought it is actually related to *kiosks*. Thanks for clearing that up.
I really appreciate the effort the pandas devs put into their release notes. They are very clear and informative and a pleasure to read.
nice, I didn't know qutebrowser, they must have pretty bad seo because I spend a long time looking for browsers written in python and didn't notice it I tested it and it's a very pleasant interface
(Extra) Gaussian filtering before applying the Canny filter can still be *very* helpful in the edge detection process, especially for particularly noisy images. To see this, apply the Canny filter with no prior Gaussian blurring then save the image. Then go back and continue to apply Gaussian blurring prior to edge detection -- in most cases, you'll be left with more of the "structural" edges and less noise.
I'm curious where the machine learning comes in. I see multiple fiducial makers on the image to localize specific regions of the exam. Is it because the image might be low resolution/low quality and you need to apply ML to determine bubble location?
So dict's keys are O(1) at the cost of memory? Do we have anything similar but as a list? Or is it possible to create one myself?
There is [jsonpickle](https://jsonpickle.github.io/) that flatten non-json object to json. Just check it, it does what you're asking for. 
This is not a python question. This is a 'what are data structures' question.
Yes, absolutely (at least, subject to the individual donors agreeing to be publicly named).
[deleted] ^^^^^^^^^^^^^^^^0.5066 &gt; [What is this?](https://pastebin.com/64GuVi2F/58641)
Please get on soundcloud as well!
That is not how it works...
Has anyone used this as a backed to an API? How'd you like it?
Very slick, and the head nod at the end sealed my enjoyment. 
A list can store unhashable items and dict key must be hashable; therefore you reduce the functionality of a list by implementing this. Unless you want to break everything and start all over again with Python 4. A Python dict uses hashing to look up keys. Internally you can think of a dict as an array (list) of the values. The dict performs a mathematical algorithm on the key to convert it to a number, which is used as the array index to find the value. This is why it's fast: lookup time is based on the length of the key, not the number of items stored, but it means the dict can only store hashable objects. The python dicts have the requirement that the hash of an object does not change over time which means that storing a highly mutable element like a list as a key would cause problems. If you added an item to the list, that would change the hash. 
How about Honcho ? https://github.com/nickstenning/honcho a clone of Foreman, a good point being that we can declare many processes to watch in a Procfile.
I had forgotten to update the ``setup.py`` version requirements so I've released a Morepath 0.16.1 with that correct. 
no
support python3
Awesome, thanks man! :) I learned a lot
I think every single async database driver has had support for SQLAlchemy core. This isn't new.
I was actually going to use Python as a stepping stone to learning JavaScript, to do such things. Thanks for this!
nah its not
/r/learnpython
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Line profiler is best for cases where you have a function that is doing a lot of calculation (usually from individual lines calling out to an external libraries like numpy or scipy) and you are trying to find out where those bottlenecks are occurring (since the default profiler is only function level).
Links: - [GitHub](https://github.com/morepath/morepath) - [ReadTheDocs](http://morepath.readthedocs.io/en/latest/)
Ah, this is good, but the fact that it was omitted from the examples is troubling. Coming from TypeScript's async/await and Promises, Python's async/await and Futures looks identical in implementation and functionality. `Promise.all(iterable)` is the equivalent of `asyncio.gather(*iterable_of_futures)` and the result of `Promise.all()` can be awaited, I suppose `asyncio.gather()` can be as well.
Cool, yeah I had that sense but didn't find any good source for a visualization of the signal. Do you know of anything that backs up what you're saying?
thanks, will take a look.
Here it is: http://imgur.com/a/10qwL Also, didn't realize you also wrote the post. It's interesting to see how someone else approaches this problem. Thanks for writing it! (I've also had three or four people link me to it). If you're interested, our algorithm works roughly like this: 1. Locate the black corner squares. 2. Read the QR code to determine which layout is being used. Now we know approximately where each bubble is (but not exactly; see the nonlinear distortion example). 3. Correct for any distortion. 4. Determine the normalized white point for the page. 5. Classify each bubble as "filled", "unfilled", or "partially filled" by comparing its mean intensity against that normalized white point (… actually the classification is a bit more complex because it turns out that naive normalization only works ~99% of the time, but alas I can't go into too much more detail there)
I submitted a pull request to add some tests and filed an issue to make some changes. Let me know what you think.
&gt; So, i simply navigated to /usr/bin and swapped the two versions, &gt; naming python2.7as python. wow, that was a terrible idea.
This library is using a `ThreadPoolExecutor` to execute queries.
This library allows you to use synchronous database drivers by executing blocking tasks in a thread pool.
Okay, and can i somehow set it as default for IDEs? Is there some environment variable i need to change or is it up to the IDE's settings? 
It can't even be used in 3.4 because of `async def`
My apologies. I've reinstated.
Do you have any examples of the types of images you produce?
Ah, I didn't realize that. How is using this better than just wrapping database queries in an executor then?
You can always create one for yourself, but I'd be careful about reinventing square wheels :-) There are lots of good third party container modules. Some include [blist](https://pypi.python.org/pypi/blist), [sortedcontainers](https://pypi.python.org/pypi/sortedcontainers) and a whole pile at[Fast Non-Standard Data Structures for Python](http://kmike.ru/python-data-structures/).
This is more for people who are already using asyncio and want SQLAlchemy compatibility, rather than the other way around.
Maybe something like that: http://imgur.com/xu5pNq7 Typically, I produce several of those for each snapshot of a simulation, and I have like 100 of them. So it needs to be fast, and even matplotlib's `imshow` is a bit slow for my taste :-(
&gt; A list basically a special kind of dict already; ... No. A list is an array where the indexes represent offsets from the beginning of the array. A dict is a hashtable, which can be implemented using arrays. 
Sets and maps aren't really that different. A set with a way to specify how to get the key from it's members can be used as a map with embedded keys. And the most straightforward way to build a map is to combine a set of keys with storage for values. Here's an ordered set/map design that I've been playing around with: https://github.com/codr4life/albaum/blob/master/src/albaum/core/binset.py https://github.com/codr4life/albaum/blob/master/src/albaum/core/binmap.py
Hashing functions are very fast and they produce a single numeric value. The overhead of having to iterate over the list far outweighs whatever you were hoping to save by not hashing (unless the very first item in the list is the value you want).
I meant the naming convention. He uses camelCase. From Chapter 1: &gt; This book uses camelcase for variable names instead of underscores; that is, variables lookLikeThis instead of looking_like_this. Some experienced programmers may point out that the official Python code style, PEP 8, says that underscores should be used. I unapologetically prefer camelcase and point to “A Foolish Consistency Is the Hobgoblin of Little Minds” in PEP 8 itself.
"Like and subscribe for encouraging us to develop this channel" Are you associated with Lynda in some way? Or does developing the channel just mean lift other peoples work? 
I'm not sure what your point is. My post contained this line: "The implementation isn't actually a dict with these restrictions, but it could be." I never said a list wasn't implemented by way of an array.
That it's incredibly misleading to say a "list basically is a special dict". Maybe from the 30,000 foot view of a public api, but even at that point you'll run into issues treating it like that - running `x in container` for example, the difference between O(1) and O(n), that lists don't care about uniqueness but dicts do, etc. Really the only thing that lists and dicts have in common is that they both contain arbitrary objects, have bracketed lookup/assignment, and are iterable. 
At least he's internally consistent, I guess. I recommend it to others (my siblings for one) despite that, but I do give them a warning that the naming convention is nonstandard, that they will probably see the standard version whenever they look at code online, and it's best practice to use the standard version as a courtesy to others.
This is an honest question: did you read my post at all after the quote you extracted? I specifically discussed the example of `x in container` and why the difference between O(1) and O(n) is because they're doing fundamentally different things on lists and dicts and not because of the data structure. Frankly I think there is nothing misleading about my statement other than that you apparently don't understand what I meant (which is a communication failure on my part). Do you disagree with the claim that you can implement a list using a dict in pure python with the same asymptotic characteristics?
Use virtualenv and tell it to use your python2.7 install as it's install base. `virtualenv -p /usr/bin/python2.7 {virtualenvname}`
No recursive option ARABIC = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1] ROMAN = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'] def checkio(data): for arabic, roman in zip(ARABIC, ROMAN): if data &gt;= arabic: return roman + checkio(data-arabic) return '' 
I should also add that you could also use satellite data, like MODIS. But it depends on your application.
Insertion in an ordered list is always O(n). You can't perform binary search on a doubly linked list, so you have to go element by element, which is O(n). As for contiguous arrays, you have to move elements one position forward, which also is O(n).
I hope this works for you x = input() print('\n'.join(("%s{0}"*len(x)).format(w)%tuple(a for a in c)for c,w in zip([x,(x[::-1]),x],[' ',' ','\n']))) 
Certainly! You can set a per-project virtual environment with whatever version of Python you want. See https://www.jetbrains.com/help/pycharm/2016.1/adding-existing-virtual-environment.html
Which is exactly what the OP is about. They're both supporting the core, and I'm providing one I think that does that well for asnycio.
The tiny scrollbar on the right in this screenshot: http://imgur.com/R93o6Me
It's a good first step, that's how I usually start out when I build tools at work. I notice you have no tests. Would you take a pull request for some? I've written some for a few other projects.
Weird, I don't see it on my browser. Which browser are you using? Mobile or desktop? Thanks
Right, it *is* O(1). I said it can be helpful to think of it as "some constant" I instead if a literal value. Better said here: https://www.quora.com/What-is-the-difference-between-an-O-1-and-O-k-algorithm-where-k-is-a-constant
Google Chrome "Version 53.0.2785.116 unknown (64-bit)" on Ubuntu 16.04 Desktop
You'll get a lot more help at /r/learnpython. 
You'll get a lot more help at /r/learnpython. 
You'll get a lot more help at /r/learnpython. 
I just installed bpython and it's pretty cool so far. Doesn't have the line numbers like IPython as far as I can tell though.
I may be missing something (not a jupyter expert) but isn't jupyter console exactly that?
What about `jupyter console`?
next post :)
I found http://bpython-interpreter.org/ is really nice
You don't move the virtual environments, just the code.
&gt; I've found IPython to be pretty great, but it can be a hassle with different Python verions You can use different kernels quite easily to switch between py2 and py3. https://ipython.readthedocs.io/en/latest/install/kernel_install.html $ jupyter kernelspec list Available kernels: python2 /usr/local/share/jupyter/kernels/python2 python3 /usr/local/share/jupyter/kernels/python3 $ jupyter console --kernel=python3 Jupyter console 5.0.0 Python 3.4.3 (default, May 5 2015, 17:58:45) .... $ jupyter console --kernel=python2 Jupyter console 5.0.0 DEPRECATED: IPython.core.usage.default_gui_banner is deprecated and will be removed Python 2.7.10 (default, Jun 1 2015, 18:05:38) .... You could also switch between them in the notebook mode. Or even put notebook behind nginx with basic auth and https with LE. 
Same for me. Chrome. Version 53.0.2785.116 m (64-bit) Windows 10.
Is the resolution below 1024?
collections.Counter
Trollius is pretty deprecated and mostly unmaintained at this point.
Hm... I can't find recursion solution on CheckiO I think it worth to share.
Really liking ptpython so far.
For virtual environments, use pyenv. If you really need a portable environment, use a Docker container of your own making. They're pretty straightforward to create. You can also use ptpython and ipython together. ``` pip install ipython &amp;&amp; pip install ptpython ``` ``` ptipython ``` profit
I'm happy with these results :)
Some monsters use "mark all that are correct"
Wow, that's quite the variance in captures. The "Random coloring and dark backgrounds" one is especially annoying. Thanks for sharing these and the basis of the algorithm!
wut? &gt;&gt;&gt; set(['a', 'c', 'b']) set(['a', 'c', 'b']) &gt;&gt;&gt; set(['a', 'c', 'b', 'c']) set(['a', 'c', 'b']) 
I think OP's looking for a REPL. Xonsh is cool though. 
I'd like to show you an example I wish I had when I started making pip packages: https://github.com/kootenpv/whereami . It contains (py.test) tests, tox for testing multiple versions, Continuous integration (travis), badges on readme, setup.py classifiers and a deploy script that automatically updates a new micro version number (hooked up to github commit count). Major/minor upgrades I do infrequently and I update manually. Maybe you can use some parts of it.
Looks like you are printing the serial to the console though not sending writing it to the web socket.
Ok, now add something to it.
Added benefit to potentially test on different Linux environments (if that's remotely a concern). 
According to the comment section, last time something changed on that website was in late 2014. Out of date.
I was unaware that PBR existed, so thank you for this! It is pretty good evidence that Setuptools isn't all it is cracked up to be for the developer, but it is still just a bandage over the real problem. 
None of those answers explain why it's more useful to use O(k) over O(1).
As Theresa May said, become a British if you are not one :D Joke mode off, well junior area is very competitive in the UK, especially when it comes to software development. My first advice is to try and get all the skills a competent developer must have, best practices, testing, basic unix skills, ipython etc... There is a job fair event happening 2 times per year in London where a lot of startups and established businesses gather and speak with candidates, and data scientists are in need, check it out its really nice https://www.siliconmilkroundabout.com/ 
LabVIEW is no swiss army knife but it's a very good hammer in a world of increasing nails... 
Raymond Hettinger - Beyond PEP 8 -- Best practices for beautiful intelligible code - PyCon 2015: https://www.youtube.com/watch?v=wf-BqAjZb8M camelCase does appear in the standard library: https://docs.python.org/3/library/logging.html
 &gt;&gt;&gt; kek = set(['a', 'c']) &gt;&gt;&gt; kek.add('e') &gt;&gt;&gt; kek set(['a', 'c', 'e']) Maybe I'm just lucky.
More like Python Shit Sheet 
sigh
Your father-in-law is probably limited in what he can do and most people walk away from him disappointed.
https://en.wikipedia.org/wiki/List_of_Python_software
Yeah, it was a wisecrack. But people do get focused in on what they are doing and think that's all there is. He probably never sees Python being used in dealing with security in large organizations. There's a whole other world out there though. Many other worlds. Not saying you SHOULD learn Python. You should probably figure out what field you want to go into and what languages would be best for that.
Got it..I was looking for a language that would be good for a beginner to lean basic concepts of coding. From what I have read, Python seems like it would be. I messed with Java in a course I was taking and the instructor sucked. I walked away with a bad taste in my mouth, but now I am ready to give coding another try.
This isn't particularly helpful, you'd either already know this or have to look into it.
Yeah but I want to know how it does this in the script
In that case, I would highly suggest Python. I started out two years ago on Python, and I have never looked to switch. And I'm glad you got that Java mess out of your system is early :P I think one of the keys to learning Python is being able to read the documentation. If you can't find anything you need in there, 80% of the time it is explained on Stack Overflow somewhere. Also, if you have a really funky problem, the python IRC chat is also quite helpful ;)
/r/learnpython /r/programminghomework /r/homeworkhelp `width` and `height` are asking for user input from the command line, whatever is entered is converted to a float (number with a decimal). Then, they're multiplied together and stored in `Area`. The last line prints the `Area`, where `%.2f` means "Print a float value but I only want to see two of the decimal places."
Hey there! Does this assignment need to be done in Python? I would think JavaScript or something make this far easier
Yeah - on one hand my post was a bit foolish, cause they clearly don't care, but I had to call them out for claiming that the channel was 'theirs'.
Yes the return from `asyncio.gather` is awaitable. The main headache is that Python's async implementation does not dictate the event loop that you should use. This is good in that old code that uses a custom event loop is still usable (so long as it understands how to handle the generator type defined by `async def`), but the downside is that the interpreter itself doesn't know what loop to be using. Its up to the library (in this case asyncio) to provide the event loop. Here it is an optional parameter to `asyncio.gather` and defaults to `asyncio.get_event_loop()`. There is also some boilerplate to start up and tear down an event loop and give it an initial set of things to call, all of which confuses examples. So they omit it here (and virtually everywhere else). Which makes python async great... plenty of examples of using it synchronously.... and comparatively few of it being used asynchronously.
Guys, I tried all the possibilities. I tried installing it directly from github, didnt work. Installing with pip. Didnt work. Please help.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
spam? if its not plain text its a spam?
I concur, Python is a GREAT language to learn programming with. I don't use it much, but I always enjoy doing stuff in it. A lot of kids programming books and courses use Python.
Flask, django is too kitchen-sinky
Both ! http://importd.readthedocs.org/en/latest/ ImportD is as easy to start with as Flask (minimalistic, everything in a single file), but it's pure Django. from importd import d @d("/") def index(request): return d.HttpResponse("hello world") if __name__ == "__main__": d.main() 
Not really... I was just telling him what my plans were, and he decided to give me his opinion about it. Sometimes I receive it and sometimes question it. Hence why I am asking all of you fine people.
Stackoverflow.
Actually, some of the greatest cybersecurity testing frameworks are written in Python. I guess it just shows his limited view.
So, how would this look on Django, if I do a simple app.route in flask for example @app.route('/') def index(): return "Hi reddit"
What do you mean?
You will never regret learning Python. It should be a good choice for a beginner, because the syntax is pretty straightforward and there isn't a lot of boilerplate complexity as in java, c++, etc. I often use python for little utilities, and one-off tasks, even when the code I am 'really' working on is in other languages.
The '\n' was displayed because `itertools.product` returns a list of tuples, not strings, so the `print` printed the repr of the strings inside the tuples. Instead of the last `print` do: for s in variantmetas: print(' '.join(s)) Side note: It's a lot simpler to just add the comma at the end of the list items, because Python doesn't care if you have a comma after the last element in the list. It's also the preferred formatting in Python.
&gt;It's a lot simpler to just add the comma at the end of the list items I did that in SQL for a long time and it became habit. Thanks for the help!
Are you using python 2 or python 3? In python 3, print() will run its arguments through str() and then print the output. When you do str() on a list you get something like: &gt; str(['one', 'two', '\n']) =&gt; "['one', 'two', '\\n']" What you want is to convert the list to a string: &gt; l = ["one", "two", "\n"] =&gt; None &gt; print(" ".join(l)) one two =&gt; None A final thing to notice is that there's two line breaks in that example. The reason is that print() automatically adds a "\n" after its arguments unless you tell it otherwise: &gt; print(" ".join(l), end="") one two =&gt; None Python 2 is similar: Python 2.7.2 (default, Jun 21 2012, 12:02:52) [GCC 4.4.6 20110731 (Red Hat 4.4.6-3)] on linux2 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; l = ["one", "two", "\n"] &gt;&gt;&gt; print l ['one', 'two', '\n'] &gt;&gt;&gt; print " ".join(l) one two &gt;&gt;&gt; print " ".join(l), one two &gt;&gt;&gt; Oh, and a stylistic note... In python put the list separator comma at the end of the item, and there's no harm in having a , after the last item, makes it easier to read and edit: [ "Company Name 1", "Company Name 2", "Company Name 3", ], [ "Etc", ],
Python 3
i am new too and i started with flask because of two reasons: easy to start and for learning propose.
[removed]
Pyramid!
There are other worlds than these.
i%j is i modulo j i.e. the remainder. 4%3 is 1, 5%3 is 2, 6%3 is 0. You can click 'try it' on the page you linked and add some print statements. Try to figure out how high j gets for instance.
Also being very new to this, I went with Flask. It was easy enough to get a simple API for what I wanted to do running, and it can be set-up or torn down in a flash.
&gt; infomarksFn = 'N:\\Higher CS\\assessments\\Class marks.csv' Given the unlikelihood of your teaching a higher CS class while unable to do this, I suspect you're trying to get people to do your homework for you.
Dude I'm the fuckin' best.
We need more context. My experience is that for small to medium sized projects, Python works fine. I mostly use it for prototyping. For large projects, I'd say that it's not the ideal choice.
Honest question, did he just roll into that job by promotion after promotion, without actually doing it himself? This is typical management speak. He is completely out of touch. These days, Python is used more than anything else to write hacking/cracking tools. That said, outside the niche that is cybersecurity, Python is also very strong represented. It is becoming the goto language in scientific computing, is nr1 in scripting, good web development stacks, ...
&gt; Things like how misc. egg files become placed under root ownership That's a choice. It just happens to be the default. It's totally fine on Windows. It's not so much on Linux. Still, that's a minor concern. You could always just look in the code and run the files that are called out in the script or just not run them like most people. &gt; Now I have to start making classes, maybe even add a 'setup.cfg' file (which seems quite good at increasing the number of times I hit the tab key while editing setup.py but I'm not sure what else) which has like three lines anyway. I hate those damn files. All they do is make sure my packages are incompatible, when I know they're not. &gt; And sure I can make a function to install the file, but what if I want make a subcommand so that the user can generate and install the manpage via the setup.py script? You can make command line programs using `entry_points`. They're quite handy. Not sure how to plug into `man` vs. `mypackage --help`, but whatever. &gt; And last, I find the documentation at this point in time to be subpar, especially for new users. The problem is there is too much you can do. Build the code, get dependencies, etc. I've seen some nasty ones. I prefer to keep it simple. OK, I do some hacks for checking versions of preinstalled pacakges because setuptools is dumb, but that still has issues. At least it's short and it works enough. I make a `setup.py`, `setup_no_reqs.py`, a `setup_no_gui.py`; and other ones if I need it. Also, use a wheel instead of an egg. It's also hard to get right, but the payoffs are worth it. A random from here helped me with creating the wheel since that's also not documented well. I have no issue with most of the documentation of Python. Setuptools is tough.
/r/learnpython
Thanks so much for chiming in Galleone18, it's great to hear feedback like that :) I've had two more questions about SublimeREPL already and I plan to add a chapter on it to the book. Actually I'd love to get your feedback on once I have a draft ready! Okay if I reach out to you?
easy_install? Posting for help 101: show us the output.
Many jobs *require* django, so go with that. Source: went with flask.
Django has a lot of maintainers and a lot of 3rd party packages, flask.. less on both. Sure, if you like to write things all yourself flask is great. If you rather be lazy (like me) and use something someone else maintains then django is great. 
OpenCV is awesome, but installing it on my Mac has had me banging my head against the wall so many times. If anybody has a simple method I'd love a link to it.
http://imgur.com/a/UydOa. I get the same error everytime. And yes. I tried easy_install. Still doesn't work 
Yep. I had no problem installing pywin32.
You try it with python 2?
No. I didn't try it with python 2 . But there is no reason to try it with python 2, because i'll not use that version of python anyway.
Thanks, that's my cheat sheet! It's a bit old now :)
Indeed, the page even wants permissions to send notifications via Chrome.
Yup, it's my cheat sheet and badly needs updating. I really should do a Python 3 one but there are already a lot of good ones.
Anaconda (a python distribution) could work. You should be able to install it with its package manager conda.
Relax man, I'm just trying to help you troubleshoot. We clearly need more information, cause that error message sucks. I'm just suggesting some things until we get a foothold. There are lots of pyhook downloads [here](http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyhook) That have specific chipset downloads. You sure you got the right chipset? install with `pip install pyHook-1.5.1-cp27-none-win32.whl`
There's a lot more on [Cheatography](https://www.cheatography.com/tag/python/) and I add links to new ones when I find them. If you do find any more, please let me know or add them to the site.
My degree is in cyber security, and I am leaning more towards ethical hacking/pen testing. It's the only thing that really holds my attention. From what I have read, and like you mentioned, Python is great to learn for that field.
/r/learnpython
Yes, Python documentation is certainly 'on point' like the kids like to say these days. But setuptools is certainly not up to par, and I think it is a major problem for some small developers. I don't want to create a setup script for every imaginable use case. I want a tool that I can easily add command line options to in a 'pythonic' manner.
It's been a while since I've worked with Flask, but I believe that decorator just uses add_url_rule() or something like that. So you can use the app.route as a decorator, or you can use add_url_rule(). I believe you can also use app.route('/path/here/')(controller.method), without using it as a decorator, assuming you have an MVC-type setup. I could be wrong on some of that. I'm a little rusty and never got too deep into it.
http://rgruet.free.fr/ is my old classic, but it's py2 only
He told.you not to pursue that option and didn't give you another suggestion? 
One of the most used packages on Kali Linux, social engineering toolkit, is almost entirely Python I believe. And the Metasploit framework is Ruby, which has a very similar scope to Python. Dynamic and Interactive languages are great for pentesting because it is so much easier to test things through a console rather than compile every time you want to try something different, and you can change your code up very quickly to suit different applications. The other huge Python advantage in this area is the ability to easily import libraries of course (and download them with PIP).
For a Python Freelancer, would Django be good? Is it comparable to Ruby on Rails?
Well, you can use an OrderedDict. &gt; Ordered sets are in most languages. Such as?
Not really..he said I may want to do more research and find something more popular. I thought that was kinda odd cause from what I could tell, Python seems pretty damn popular.
[Java](https://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html), [all of .NET](https://msdn.microsoft.com/en-us/library/dd412070\(v=vs.110\).aspx), [C++](http://www.cplusplus.com/reference/set/set/), [Javascript](http://www.collectionsjs.com/sorted-set) (kind of), [iOS](https://developer.apple.com/reference/foundation/nsorderedset). Sure, you *can* use an OrderedDict. You can also use indexes in loops, but that isn't Pythonic so Python provides a cleaner alternative. I would expect Python of all languages to have a clean interface to ordered sets.
I would say flask or bottle if you want to make a web service. Django if you want to make a website. 
Derek Banas is the best. I learned android development thanks to him.
Rails is by far more magical. Comparing a Rails controller and a Django one isn't fair. Maybe a few realistic examples of why it's easier to use Django might help? Paint a picture?
Yup - Flask makes you do a lot of things on your own while a noob might just get indoctrinated into thinking that the Django way is the only way to build &amp; structure things.
Looks like you anaconda, why not try the install with conda? `conda skeleton pypi ufal` `conda build ufal` `conda install ufal --use-local` That's off the top of my head but skeleton creates a conda recipe, then you build a conda package, and then install it. 
To my mind sorted implies that there is some element of sorting going on, where ordered implies it retains a fixed order. I'm not familiar enough with teh specific items you reference to say definitively, but the c++ docs in particular imply that doing something like: set([1,3]).add(2) results in [1,2,3] Thats sorted, but its not ordered in the way an ordered dict is.
Do you have link to a longer write up of he weaknesses of Django's ORM? I'm curious to see specific examples. 
For a first language I'd always recommend either C or Python. C is a lot more low level and you'll have a better understanding of what exactly the code is doing and how it works. It's harder, but the upside to that is dealing with higher level languages is probably going to come easier if you encounter them. Python is really simple in comparison. You'll learn all the concepts you need to program with it but it'll do a lot of the work for you in comparison to a language like C, which is great. Basic example, declaring a variable which is a number in C would be like int x = 1; whereas in Python it's just x = 1. With C you have to declare that the value of x will be an integer (whole number) but Python just looks at the value and decides by itself that it's a number. That's as basic an example I can think of but you can already see that Python is quicker to write. Look up "Hello World"s of both languages and you can see how much quicker you can write Python code and how much easier it is for you to understand. As for Python being limited...the only real limitation is the speed. Python is an interpreted language, so it is converted into machine code as it goes along whilst a program written in C has to be compiled into machine code before it runs. So imagine you're watching someone give a talk in a foreign language and there's a translator there and you have to wait for them to understand what's being said, that's like how Python works and C has someone read out the full talk in English straight away. For a lot of things, this isn't an issue really and you can look at the examples other people have posted for what you can do in Python.
Don't know why the downvotes. You're entirely correct. Django ORM is so shit that it isn't even about being unable to optimize things anymore, it becomes about modeling Django ORM first and then finding a database that can replicate the Python classes. SQLAlchemy, on the other hand, allows you to do things in the database first and then use the library as an interface. Then again, you should avoid Django altogether if your requirements call for anything complex or that needs optimization. It's great for getting a basic framework done instantly, but it becomes a nightmare as time goes on.
I have used [scapy](http://www.secdev.org/projects/scapy/doc/usage.html) before for both packet capture and parsing as well as packet spoofing.
The only weakness I've encountered in real life is when trying to use obscure SQL functions (like postgresql's width_bucket to generate a histogram). Even then it's actually possible to write code that tells Django how to use the function and then you can use it within the ORM, as long as it's an aggregate. https://docs.djangoproject.com/en/1.10/ref/models/expressions/#creating-your-own-aggregate-functions
Both are great - as others have said Django is full-featured where Flask allows you to choose your own way. I'm fairly competent with both now, and happy to use either. One word of warning is that if you *are* trying to make a large full-featured web app, if you go with Flask you will find yourself installing things like Flask-Login and Flask-Admin, and if you do get to this point you've just re-created a less well documented and less well unified version of Django. Flask is best for microservices which are very focussed, and Django is best for a full web service which does lots of things. Learn both if you can! If you have to pick one... I'd say pick Django.
indeed his tutorials are great. Fast paced and to the point
Since you mention user authentication, how do you do it? There is no native support, flask-login doesn't do much in the sense that it lets the programmer handle storing passwords, validating log-in, etc. It also uses flask.session instead of a dedicated cookie. Flask-security uses passlib, which is nothing more than a wrapper on a bunch of hashing libraries, using the very insecure md5 by default... As someone who have read a fair share of documentation about how to do proper authentication, with Flask I'm tempted to just do it manually instead of using this bunch of clunky stuff. When it comes to security I always want to use the "standard way" of the given framework but with Flask the options doesn't seem very standard nor are very convincing to me.
A menu-based MMO in the style of Pokemon! It's making progress every day. You can now view your inventory, search for other players, and get details about where you are on the map!
Considering 50% of the languages you reference define what you're talking about as a sorted set rather than an ordered one I'm not sure I agree. That being said, in usual Python fashion, someone has built it for you already! http://www.grantjenks.com/docs/sortedcontainers/
"All these worlds are yours -- except Europa. Attempt no landings on Europa."
I actually fought through this just this last weekend. The simplest way I found was via brew. There are some issues with [Xcode 8 and opencv](https://github.com/Homebrew/homebrew-science/pull/4336) that are fixed in HEAD. $ brew install opencv3 --HEAD It will print out some directions on how to add it to your python path. I'm using venv and had to update site-packages with a pointer to the brew installed version. The brew install output will contain directions on how to do that. In my case I created &lt;myvenv&gt;lib/python2.7/site-packages/opencv3.pth with the contents of "/usr/local/opt/opencv3/lib/python2.7/site-packages". I was able at least import cv2 at that point. I haven't gone any further than that. HTH and good luck.
Totally agreed; I'm using Django for a 3.5 year old project, and have been wishing I'd just stuck with Flask for more than half of it. The ORM makes database queries without developers realizing; the updates add features we don't need, and are scarier to apply than a smaller framework; and the star feature from year one, the admin pages, have been creaking since we got to any interesting scale.
My experience with Django has been everything "just works", which is the best feeling when developing anything.
This works for me (assuming you're virtualenv is already activated): # Python 2.7 ln -s /usr/local/Cellar/opencv3/*/lib/python2.7/site-packages/* $VIRTUAL_ENV/lib/python2.7/site-packages/ # Python 3.5 ln -s /usr/local/Cellar/opencv3/*/lib/python3.5/site-packages/* $VIRTUAL_ENV/lib/python3.5/site-packages/
Disagree if you like, terminology is terminology. That's the meaning of the mathematical term "ordered", which programming inherits. I know it exists. It's provided as an official recipe. I was asking why it isn't implemented by default, or at least in a core package.
I have a similar DictObject class that I use, and had set it up so a missing property value (e.g. 'foo.bar', where 'foo' has no 'bar' property) would return None instead of throwing an error (bad form, I know). This will also cause auto completion to stop working, at least for VSCode's Python extension (by Don Jayamanne).
1 - Start with something small that work for you 2 - Upload your code to GitHub or other software repository(don't be shy) 3 - Write at least a little of documentation(Describe what your code do, requirements, how to install) 4 - If your project is useful to somebody probably there's going to be people willing to collaborate with your project or at least you're gonna get feedback, process the feedback and improve your code. Here's an example of mine, it's a really small project but many people use it in my country: https://github.com/melizeche/dolarPy I hope it helps
One thing to note is that Django has supported Jinja2 out of the box for several releases. This means you can write templates once, and use them in either framework. In general Jinja2 is more widely supported as well by other frameworks, so the TLDR is always write your templates in Jinja2 regardless of framework for portability. Then you can theoretically try the other after you have gotten knee deep in one just to compare, without having to do the hard part all over again.
I'll stick my neck out there and take some downvoting as well: SQLAlchemy is in a class by itself when it comes to ORM design. Mike Bayer is a world-class engineer and architect, as well as an expert in databases. The goals of SQLAlchemy are to be homomorphic with relational algebra, whereas most ORMs -- Django included -- try only to simplify what the authors think are the most common cases. That's why ORMs like ActiveRecord and Django have use cases where they completely fail to abstract away the database, and leave you writing raw SQL or something close to it: they're meant for people who want an object store with, light relational functionality, and are incidentally using an RDBMS to back it. SQLAlchemy is for people who want to access an RDBMS, and to optionally map a domain of objects onto it.
can you point me to one for Python 3 please?
The twitter part is dead easy. Just google Python Twitter API and look at the Docs. Making a Natural Language deep learning network out of the Text database is going to be the challenge. Once again, google the APIs NLTK, and googles deep learning framework and start with the docs. 
Good to teach about `__dir__`, but I generally feel that the `AttrDict` as described in the article is a code smell. I've seen developers use them before and IMO makes code more difficult to understand and encourages poor practices. I think this desire for object-like dicts comes from newer developers who tend to code toward their presentation layer of their systems. These developers don't draw the line between "models" and "views" clearly and as a result they frequently put structured data objects into elaborate nested dicts and lists (to serialize them later into JSON/XML/etc) instead of domain objects. When I take the role of a maintenance developer I assume that attribute access means I'm working with models, and lots of named item access means I'm working on a system serialization boundary, and `AttrDict` violates that. ^(and that's my rant on AttrDict that no one asked for)
I'll be lazy and reference a nice [writeup](http://lucumr.pocoo.org/2011/7/19/sqlachemy-and-you/). You're better off looking directly. Still, so glad Django has QuerySets… unlike the horror that is ActiveRecord sometimes. What no identity map?
http://www.dototot.com/how-to-write-a-twitter-bot-with-python-and-tweepy/ I used this one to use my most recent twitter bot. This will get you set up on twitter. I combined this with [markovify](https://github.com/jsvine/markovify) to make a very basic bot, fed by a [very helpful python script](https://gist.github.com/yanofsky/5436496) to pull all tweets of a particular user. I manually sanitized that data via regex, although I have a feeling there's a much better way of doing it, likely with unidecode. That was all super super easy. The issue comes from your desire to do the learning; I'd point to the NTLK and google's deep learning suggested by exodus111.
I wasn't even thinking of performance, but just being able to model things. If at work we had gone with the overengineered but very realistic data model, we'd be tearing our hair out both in Django and Rails. Still are some times. What? No composite foreign keys‽
I just came to 3 after having very limited experience with 2 a few years ago. Google solved almost all of my issues, though.
Love Derek. His tutes and voice are great. Will be checking out his vegan cooking videos too. 
I don't agree, it's not magic. It's just not obvious. I highly recommend the book Lightweight Django, it'a a much better introduction to Django than anything in the official docs. The import strings have a purpose, once you understand how Django is structured as a Python module.
No, I agree that once you understand it, the magic goes away, but there's so much oddness compared to regular python. Like url routing. # module.urls urlpatterns = [url('regex', 'path.to.my.view.func')] # app.urls urlpatterns = [include('regex', 'module.urls)] And then they're magically imported and registered. I know there's support for first class functions, but most tutorials *I've seen* use the string format. Not that there's no oddness in other frameworks. Arguably werkzeug's thread local stuff and Flask's use of it for request, g, and current_app are far, far more (and deeper) magic than anything advertised in Django despite `threading.local` being a part of core Python. I'm bias, though, because I really don't like django and the django-centric attitude in the community around it. I see too much of "how do I do this with django" but instead the question should be "how do I do this in Python". It's probably confirmation bias, so I'm more inclined to the negative than the positive. 
I would just like to add to the science and countless other things. Python is huge in all scientific fields (look at scipy, astropy, etc). I would argue it is on its way to replace matlab and IDL as preferred languages for many scientists (at least I hope so).
yes, python is definitely one of the best languages to cut your teeth on programming. uses? it's a general programming language, it has uses in quite diverse areas.
If you are creating something from scratch -&gt; Django. If you're having to model an existing database or a database where you will be using a TON of database-specific functionality (like table inheritance at the database level, a lot of DB-specific index types), go with Flask. Django helps you get up and running quickly and it creates a decent database structure from scratch. It makes it easy to go from Python models -&gt; database tables. Flask uses SQLAlchemy which is super awesome and lets you create Python models from your database schema. It makes it easy to go from database tables -&gt; Python models.
I would personally suggest you to also evaluate Pyramid as a third choice. There is a very insightful post on the design of Pyramid, Django and other micro frameworks such as Flask, that I think can help you making your choice. Even if it's on the Pyramid's web site, surprisingly it is not that biased. http://docs.pylonsproject.org/projects/pyramid/en/latest/designdefense.html 
Try markovify to make some Markov chains. It's not nearly as good as deep learning, but you get results easily! https://github.com/jsvine/markovify/blob/master/README.md
SQLAlchemy is nice, but it really only works in Python. You know what would be great? If someone could just write a domain-specific language that maps to relational algebra. A language that we could use regardless of the application environment. A ... structured query language. OH GOD WHAT HAVE I DONE
There is a nice wrapper for django as micro framework: https://github.com/zenwalker/django-micro
https://github.com/blha303/twitter-irc-bridge here's an example using pypi/twitter and Twisted
As for not using Django batteries: apart from the routing, mostly everything is flexible enough that replacing one thing with another has become very easy. Though batteries are included, you can bring your own batteries. This wasn't as true a couple years ago, but a lot of effort has been made.
As a developer with experience in both, that is very true.
I run flask and tornado services inside my django project, works great. 
Interestingly, I started first with Flask and then tried Django. After learning django fairly well I went back to Flask and realized Django taught me a lot about not only python, but also the relationship between python and the web. I didn't really get Flask until I tried it in Django, then it clicked.
And those tutorials are wrong, as string based patterning is no longer supported in [1.10](https://docs.djangoproject.com/en/1.10/ref/urls/). You must import your class and use the as_view() method. I do wish Django had more async going on, but I'm not sure that's really possible with how the web works today. Websockets 2 looks nice. I understand what you are saying, but I have to ask have you tried to learn Django? Sometimes we rebel against popular ideas because our way works, and learning something new takes energy. I was the same way until I tried it, and now that I understand Django, it's even taught me more about Python and how to use Python.
What you wrote is kind of odd. Python you could have: for i in range(0,6): print(i) If that seems appealing to you then I'd recommend Python. I'm on my phone so can't type it properly.
Sounds like Flask-based project is quite similar to Pyramid. Could you say something about Pyramid?
I just tried this out and it works great: [Running Python Code With SublimeREPL](https://www.youtube.com/watch?v=wM2LbXCkLDI) See also: https://stackoverflow.com/questions/19732006/how-to-run-python-code-on-sublimerepl/23722631#23722631 
The pyramids are in Egypt and are very old. 
Python is used in web development, for system admins (shell scripts), it can be used for GUI programming. Python's uses are really diverse, there are a lot of libraries. It's a good language to start with.
And helps handle database portability (up to certain limits, of course).
If you like code that looks like java, go Django, if you like code that looks like python, go Flask.
I didn't try to sound like a douchebag or something. Sorry if i gave this impression. I tried all the methods possible. Also the method with the full name. I'm at school now, so I can't post a screenshot. I'll do it when I come home.
&gt; The ORM makes database queries without developers realizing Maybe they should be using Django Debug Toolbar to learn how queries works in Django 
Like any other ORM you mean?
If you want to get the deep learning going, find Andrej Karpathy's character-level RNN, the original was in Python and works way better than a Markov Chain.
Django ORM doesn't allow for as greater variety of use cases but its tight integration with the rest of the Django ecosystem can end up saving you from writing a monumental amount of boilerplate. Flask might have had this too if it were opinionate about SQLAlchemy being "the way to handle databases in Flask" but it isn't. Which is why so many flask plugins have to accommodate a variety of different storage engines and you can come across plugins that (for example) only work with mongo. With Django they all just plug in to the ORM and everything fits together. This is a trade off. Do you want a large and well integrated ecosystem of applications working together saving you from writing thousands of lines of boilerplate? Or do you want an ORM that handles lots of unusual use cases really well?
The worst thing is Django's team total lack of interest in adding composite keys.
We know how Django works: it queries for foreign key fields lazily when you access them, unless you tell it to prefetch. And if your project gets big enough, it's too easy to write code that is meant to be used on objects that are prefetched, and have someone pass it objects that aren't. In practice, we find that stuff by monitoring query volume. You can blame the user if you like, but I'm tired of using an API that doesn't distinguish between in-memory lookups and database queries until runtime.
go pyramid if you need for completely custom and very long term (i.e. go big) project. For 98% of use cases (exclude completely trivial micro-services) go Django, there is no reason to reinvent the wheel. I cannot see using flask for anything what is not a micro-service and it better will not have a DB. It's completely DIY 'framework', with completely unrealiable/unexisting roadmap. IMHO 98% developers either will adapt and recreate crappy version of django from scratch or will make some custom mess.
I think the large stdlib is actually one reason why py3 adoption is so slow. Py2 is preinstalled on all (relevant) unix distros. With the simple policy "only use standard library modules". We can avoid any dependency issues and have almost everything our application needs. The only option to make py3 similar easy to use would be bundling a py3 interpreter with our project. And that would introduce an arbitrary amount of headache with dependency issues (especially C-libraries the stdlibrary needs.). And even if we don't actually use a module of the stdlibrary it will still throw an error when a client installs the interpreter, and we can't be sure non of us will use this module in the future (And treating every stdlibrary module as a dependency that has to be tracked, is not appealing either). I believe a clear list of dependencies (which python version requires which l C-library for which library module (and is this included in a python2.7 installation)) and a python parser that can be transparently (which modules will not work because of which missing C-libraries) compiled without root access will speed up Py3 adoption. For us it would. 
In my other response, I said that g, request and current\_app are deeper and far more magic than anything advertised in Django. And that's despite threading.local being a part of the stdlib. Seriously, the song and dance routine to push new requests and app contexts onto the stack makes me scratch my head every time I try to follow it
Actually looks pretty cool as a teaching tool.
&gt; The Python SQL Toolkit and **Object Relational Mapper** From their web, so you're wrong
not great (would say sorry but i've been told to stick to my guns). installed python from python.org but thonny does not use python already installed from python.org, ie, i'll need to reinstall all the packages for thonny i've already installed for python. or in other words, uninstall thonny :( didnt look bad tbh
What are you even saying? Hooking up a database can be done in like 3 lines of code + your model which is ubiquitous to any framework. I've had no problem connecting any database type to Flask. 
Keep in mind Django applications run some 3-4 times slower than Flask due to the cruft included with Django. 
Thank you for your help, I really appreciate it 
Pyramid is more like a toolkit to make your own framework. You pay for what you eat and you know what you need and why. Even if you don't keep it you learn a lot by using it, the documentation and the design are very instructive. Also if like me you switch to Go (the language) you will feel comfortable and can reproduce exactly the same design (your own).
I don't know if this is really what you're looking for, but personally I use [dstat](http://lintut.com/dstat-linux-monitoring-tools/). It's free and very flexible. There's a command-line argument to log the output directly to a file, so you could see the CPU/memory usage over time. The downside is that you won't be able to peek into the process, just like with yappi or pyvmmonitor.
And here they are some specific numbers https://python.libhunt.com/project/flask/vs/django . As we can see, although Django is more popular in the eyes of Google, both frameworks enjoy the same popularity on GitHub.
Oh, I apologize, I didn't get to see the other response.
I totally agree. "clunky" is the right word. In my previous project, after finding out that there was no real consensus around authentication in Flask, I implemented it myself. It allowed me to understand how authentication and web tokens really work. Besides, @nilsgarland, Miguel Grinberg's [Flask Mega-Tutorial](http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world) is an amazing write-up that will teach you how Flask works. A few hours of reading and testing, and you'll be all set to build your first web app! I'm not sure that you could do the same with Django.
I am writing a framework for realtime collaborative application modules. So, imho, neither django nor flask. It is built with a ready to use, quite powerful angular 1.5 frontend (if you like, somewhat like django-admin just in _shiny_). The backend is in Python (2.7+) and runs components via the powerful Circuits framework. Its still young and has a lot of todo items to fix, but its progress is steady and the features are numerous. Check it out, if you're interested: https://hackerfleet.github.io/about.html#hfos
The advantages over boltons would be removing Python 2/3 workarounds and unnecessary implementations(custom namedtuple code for instance). The other advantage is most functions return iterators and generators, which makes it much easier to extend functionality when needed, and for processes to be extremely memory efficient constructing memory efficient(i.e. micro EC2 worker instances loading GB's of data using 30-40 mb of ram). We'll add usage documentation. Until then, the best form of documentation is looking at the tests.
Mine was recursive.. in fact a lot of mine have been recursive.
Python bindings for Selenium (Selenium WebDriver) is the way to go for you.
Fair enough. I don't particularly care for a lot of the attitude myself, I just happen to know Django and prefer to not have to rebuild it if I want to make a website (which is what you essentially end up doing if you build a moderately complex website in Flask).
As pointed out, you can try Selenium. However, you should ask if there are other ways to access this function. For instance, you may be able to do an HTTP call, in which case you would use the Requests library instead. It would be much simpler.
Maybe. However here is first rule of asking questions to technical people: Don't ever ask how some specific thing (that you thing is necessary or that you would do) could be done. Ask (or search for) how your goals can be accomplished. Controlling a browser is possible, but tricky and most likely unnecessary. Contact GP support and ask them how could you do what you need, and they should point you to documentation that allows to access their service via API, if they have any. This will be much simpler than trying to control a browser, which should only be used as a last resort.
How does this list differ from the other Awesome Python list, http://awesome-python.com? I've known about the other one for a couple years but haven't seen this one before. Are they maintained by different people?
Great Plains used to be installed on our computer, not on the cloud. The old version of Great Plains has has a macro function, that function allowed me to record an action, for example, enter one transaction into the batch. I then save that macro in a .mac format. I viewed it with my text editor. I then use VBA to duplicate that macro, from one transaction to 1000 transactions, and each transaction is unique to what is on my excel spreadsheet, line by line. I then have VBA to save it in .mac format. I use that new .mac file to import the data into my batch. Now instead of entering one transaction, I get to enter thousand of transactions. However, now that Great Plains is the cloud. Microsoft got rid of the macro function. It is the reason why I am looking for a new way to import the transaction into my batch. :( And no, our payroll batch does not support any importing format, csv, .mac, etc.. It's totally manual now. If that is the case, I have to look into Selenim WebDriver?
Looks crazy in all the fun ways :P The joy of hacking! The repo structure seems a bit funny; it's better to have the actual package in a named folder inside the repo, rather than relying on the repo root being named whatever.
["The Unreasonable Effectiveness of RNNs"](http://karpathy.github.io/2015/05/21/rnn-effectiveness/)
Thonny assumes Python 3.4 or later, Python 2 is not supported.
Thanks for clarifying. I missed this being noted on the website or wiki.
But big O defines the growth of the function. The overheads for accessing one element are independent of size of the dict. Better to say it is complexity k+O(1) where k is some constant overheads. But this is true of all big O notation, and why you shouldn't really pay much attention to it (e.g linear search O(n) can be faster than binary search O(log n) in some cases due to things like prefetching by the CPU). 
They seem to have a api you can use. https://developers.cloud-elements.com/docs/elements/greatplains/authentication.html
No. Just opened it. I have retained internet access and all speed I am used to. In the resource manager I do notice something. Upon opening, a SINGLE python.exe (note, python and not pythonw) task was opened. It briefly uploaded a LOT of information (several 10s of KB/s, when I say a lot, i mean in terms of my other open programs) but downloaded very little. It then opened a new tab which is giving me access to my disk drive via chrome. I assume thats what Jupyter is supposed to do. This Python.exe task has since closed though Jupyter is still running. 
Looks so good! Going to install it very soon, will let you know what I think of it...!
I wrote something like this at work a couple of years ago. We parsed the entire NASDAQ OMX feed, kept every order book in memory, updated it realtime, and sent the updated prices through a socket to a server. I guess you could do something like that, and on the receiving end you write the price datapoint to disk, generate graphs etc. I don't know the service you're planning on using, but if it's a NASDAQ ITCH (http://www.nasdaqtrader.com/content/technicalsupport/specifications/dataproducts/NQTVITCHspecification.pdf) feed, you'll need to save the entire feed to disk, and in order to restart in case your application crashes, you'll need to reparse the file. I doubt Python is up to the task unless you put some serious effort into parallel execution. Threading in python is limited to a single active thread. You could look at how LMAX does it. https://lmax-exchange.github.io/disruptor/ Edit: to give you an estimate of the work involved, we spent around 3 months (3 people team) writing the ITCH parser/order book price calculator, along with recovery code, task controller and command line interface. The entire project ran for close to 18 months.
That's so awesome! 
https://github.com/etkirsch/gmusic/blob/master/startup.py why is pip actually checked here? why are packages checked here? wut
Actually, security is also a well known field in Python!
Took me an hour to figure out you need to follow plt.imshow(img) with plt.show() Points off when code will not actually run.
Tried it in the past for desktop and mobile development. For Desktop is wonderful, for mobile it was not ready, don't know now. I suggest you to go for http://kivy.org, it's a mature and powerful gui library. Or you can try also https://github.com/dddomodossola/remi (i'm the creator) an easy to use, multiplatform, remotable gui lib, equipped also with a graphical editor.
It looks like they offer some kind of web services interface that is probably the best solution. Since OP knows VBA he should be able to hack up some .NET faster than learning Selenium. https://msdn.microsoft.com/en-us/library/cc534132.aspx 
dang ty! I been wanting to learn more python and django for the fact that we use this app https://github.com/digitalocean/netbox and I wanted to know how it works and make it better for us.
It would be nice to see the popularity of the package. E.g number of github stars, downloads, etc 
Thanks for the tip. 
I highly recommend it. It's kinda magic and I can't always get it to do quite what I want (that's rare; e.g. 2 arguments start with the same letter isn't allowed), but I can actually make what I consider to be a good utility. Argparse is just bad and there's a lot you can't do with it. You shouldn't need any documentation (e.g. beyond the one line call) to make a decent utility 95% of the time, once you know the basic syntax. Put optional arguments in `[--optional_arg]`. Put `&lt;positional_arguments&gt;`. Put `&lt;multiple_positional_arguments&gt;...`. Put 2 spaces after words. Document all the ways you can call it. That's about all you need to know.
Test with urllib and beautifulsoup or mechanize. 
i'd guess to make using the app easier?
for what it's worth, as someone who doesn't use python usually, the dep checks really helped.
Have you considered using the API? https://www.microsoft.com/cognitive-services/en-us/bing-web-search-api/documentation
Can this be implemented in pip? What about pull request?
Thank you!!!! Having come to Python from other languages with good package management tools, I must say that pip, while being adequate in some ways, is very deficient in others. Searching for packages should be easy!!!
Great idea! Well done :) 
Flask and then Django if needed for work or interested.
I have mixed feelings here. Using the command line and a text editor isn't that hard with Python and you gain some side benefits for the student. One steep up are far more useful IDE's that a student gets long term benefits from learning. So form my point of view this is exactly what you don't want to be giving new learners. On the other hand an IDE with Python built in is pretty cool all on its own. Unfortunately I'm not a fan of dumbed down software. 
Or simply manage your code better.
I thought the same thing, until I tried teaching a group of non-CS undergrad students Python through the command line. It really didn't work well.
Feedback: the link doesn't work. :-)
And more importantly, when it was last updated. 
Word of advice, from cachedimport: r'(?P&lt;protocol&gt;http|ftp)', If you're going to allow importing from arbitrary URLs (which is a horrible idea, but that's a different point), only allow it over https or ftps. Without that (and in fact, your cached url importers *forbid* it by virtue of your regex), I can sniff that traffic, capture it and replace it with code that's going to do whatever. 
You tried bot. You tried. 
I ended up having to explain to them what the command line is, and so I didn't get enough time to cover the programming part. I think us developers have gotten so used to using the command line that we think everyone else gets it too. It's good to keep in mind that most people don't. That's why tools like Thonny are in fact useful for teaching programming to beginners.
I haven't used the xournal programs so I'm not sure what features they offer. That said, this would be my initial thoughts. Those pens just imitate mouse clicks right? You could just do a ms paint style app with pygame or qt or wx or whatever. I reckon you would probably want to do do everything as SVGs or some custom format rather than bitmaps. It looks like someone mad a branch of inkscape that supports pages, so that may just do what you want out of the box. If you want handwriting to text support you could probably do something with openCV. This would be the only potential computationally expensive thing I could see needing to be done.
Why not OpenCV?
Nope, it doesn't include any lessons.
... and the script will take care of unpacking
By no means am I an expert on this specific task, however, to answer your questions directly: 1) I think python is up to this task. Perhaps someone can correct me if I'm wrong, but it seems like the refresh rate is slightly slower than one update per second, and that really doesn't sound that demanding to me. I actually don't necessarily think huge amounts of RAM would even be required. I do think you should perhaps consider something other than a text file as a storage medium, such as a database. If a text file, you want to use some kind of structured medium, such as XML, JSON, etc.. Something machine readable and some kind of key:value pair structure. 2) I haven't really read about the way the API works, but it seems likely to me you should create one class that takes a stock symbol as an argument and creates a class object that contains all of the data for a single stock, as well as the methods you need to interact with that data. --- You've indicated it needs to be real time. My two cents is that if this isn't being used in a professional environment, you should strive only for a close approximation to real time, and should not sweat delay of even multiple seconds. Choose a refresh rate, and simply query the server as much as the API or the internet connection will allow. Additionally--where are you planning to display these charts? A simple google of "python real time plotting" yields some seemingly fruitful results. However, real time data like this is typically consumed over the internet if it is intended to be shared with people at all. If there is the case, it would be a good idea to design it from the beginning using some kind of web framework. 
Some form of this project could definitely be realized by a beginner. The real time display aspect does sound a little demanding to me, but plotting the points obtained by querying the API should be very straight forward.
Sadly these things are not obvious to people starting out in python. That is why I blogged about them. Thanks for the input though.
Wow. My first ever program wasn't anything like this. Good job! Any reason for using sys.stdout.write in query.py instead of print? That seems more C-like than Pythonic. 
I don't think that is what they are referring to. More likely to be the one that does data conversion/io.
Private message 
And why Python 2 ??! Goddamned...
ORMs are valid Python code and generate SQL, that much is true. To me, "SQL with Python syntax" means that it maps relations to relations. An ORM maps relations to object graphs so I don't see it as analogous to SQL. 
So this is basically colorized search results for pip and an automatic suggestion for installation? Simple but nice. Echoing that it would be good to see in pip itself.
&gt; learns user's habits [...] does not store any data I'm fairly sure these are contradictory.
&gt; with open('data/unlocked/credentials.json','w') as credentials: &gt; json.dump({"username": email, "password": password}, credentials) You should've used [keyring](https://pypi.python.org/pypi/keyring). 
Does not store any data I meant, does not store for the future use, but adjust general system for what users will choose in a particular query. It will work for anonymous users, who pass anonymous data.
Here you have a couple of mini-project to get started and understand: https://github.com/periket2000/mybi-ci https://github.com/periket2000/tempfiles_cmdline They include from pypy ready setup.py, to test driven (mybi-ci), even a small REST API server (mybi-ci).
Feedback is welcome :)
What's updog?
I think it's quite possible to build an search engine, which will be perform as good as google and will be improved by more than 10,000 possible contributors. 
Microsoft is struggling, Yahoo has all but given up, duckduckgo leeches from other search engines.... I mean, just the data storage is astronomical. [Here's a hint what you're dealing with](https://i.kinja-img.com/gawker-media/image/upload/t_ku-xlarge/18mqja71ijai0jpg.jpg) - google has so much data on so many servers they had to [pioneer new ways](https://en.wikipedia.org/wiki/MapReduce) of querying data just to be able to read it meaningfully. Even if you somehow managed to construct a vastly superior and insanely scalable design in the next 5 minutes, you'd still spend years just gathering the data needed to run the code on and get useful results. Don't get me wrong, it's a nice project and you'll learn a lot from it. Just don't expect to make anything competitive in the near future.
You have no idea what you're talking about.
Check the kivy simple paint app tutorial. It almost does what you want, is written in Python and actually cross platform: https://kivy.org/docs/tutorials/firstwidget.html
To be fair he actually described his goal so that's a good start.
I'm not sure I follow how this is really any different than pip's internal search mechanism: pip search &lt;package name&gt; The only difference I see is a convenience feature of being able to immediately install with an index value.
That's the one! Thanks for linking, I was on mobile and lazy.
I'd open an issue on the repo. I'm not the owner.
/r/learnpython
wot?
Anyone want to provide a screenshot?
they’re there, just not under the three prominent dl links a newbie would click. i’d also have assumed that if you know you want a architecture specific DL, you’d’ve been be able to find the link to all the downloads.
I got my start here: www.pythonspot.com
IIRC (although this may have been a different missing type), they aren't included because the usage of the versions on pypi is so low that python devs believe it would be a waste to include. I'm not entirely convinced of that argument (it's a useful type to have, but if I don't have it built-in, I can either just make my own or work around it without too much work rather than depending on another library), but I think that's the logic. Personally, I'd love to see ordered sets in Python, even if I wouldn't use them often (I don't use MemoryView, frozenset, or Ellipsis often either, but when I want them, they're fantastic to have).
https://github.com/dariusk/NaNoGenMo-2015
Here you go, https://www.youtube.com/playlist?list=PLGLfVvz_LVvTn3cK5e6LjhgGiSeVlIRwt If you already know how to program he also has a learn python in an hour or whatever that is great 
Yes, it seems like something people can really point to and say, "See! Python is deficient!" Especially since Python is increasingly taking over as a language for mathematicians. Thanks for explanation. Not sure I agree with it but I understand the reasoning. :)
[This video](https://www.youtube.com/watch?v=OSGv2VnC0go) and [this video](https://www.youtube.com/watch?v=EnSu9hHGq5o) are good for learning pythonic ways of doing things, and (if you work in other languages) how python differs from them.
Also it is important to note that they were [designed and built to store grain.](https://www.washingtonpost.com/news/morning-mix/wp/2015/11/05/ben-carson-believes-joseph-built-egypts-pyramids-to-store-grain-and-it-just-may-get-him-some-votes/)
&gt; After experiencing it last night, I purged my driver and reinstalled it fresh and that has fixed nothing. I am running the latest wireless driver provided by HP for my machine Right idea, wrong component. Get rid of the OEM bloatware ("HP System Screwer 1.0") and see if that helps.
I have it hanged close to my desk since a few years, thanks for it :) 
That all went ages ago, sorry I should have said. I purged it all ages ago but I will check to make sure it hasnt snuck back on. 
I admit, I did forget about Windows Defender. That said, wouldnt an antivirus problem kill all in and out data? Python is SENDING and RECEIVING data, its just also maxing out my connection. 
Only those who doesn't have light to shine on others loves darkness :) It's a quote from a very very early Turkish indie game. You shine light on us, and so do we :) The game I quoted ; İstanbul Efsaneleri% Lale Savaşçıları (Legends of The İstanbul: Tulip Warriors) you should check the art style :) 
That Python traffic should be local (on the loopback interface), shouldn't affect anything unless there is a third actor we aren't aware. I mentioned antivirus because many install a filter on the network interfaces. Most antivirus software are based on signatures and heuristics, and can fail hard. At work I had intermittent issues on a couple machines (2 out of 20) and found out it was the aggressive Trend Micro suite that was causing issues (I end up uninstalling it from all machines). Some other computers that came with McAfee Internet Suite also presented weird slowdowns and dropped connections. With Defender itself, what I had noticed is that the real time scan can destroy HDD performance, but maybe there is some setting or interaction with some driver that's causing network issues for you. My note about the antivirus is just an idea though, it could be something else, but most likely not Python by itself. As another example, I also had users with issues related to a shitty internet banking "protection module" that changed a bunch of settings. If it's just your connection settings, you could try running in an admin cmd prompt: netsh winsock reset netsh int ipv4 reset netsh int ipv6 reset and resetting the machine. Just google those commands if you want to understand what exactly they do.
A tip for your way: Whenver you'd like to ask anything, anywhere, _**use the search function pls**_
For reference: https://i.imgur.com/dGwLZpN.png This is running both Spyder 3.0 (Anaconda with Python 3.5 x64) and Eclipse/PyDev. Notice that all Python traffic is restricted to the IPv4 loopback.
Where is your spec file? 4 years ago, it took a day or so the first time you're trying out pyInstaller to make a super complicated package work. It should take you less time now. Creating a new packaging system is a bad choice. You're going to spend way more than a day on it and it's not going to work on your next package.
Off-topic but why do people need a pdf warning? I've seen them a few times.
I've heard of rsync. I was hoping to do it in Python, but that is me just being stubborn. I suppose I could just look into rsync though. 
Well pil, sci kit image, and the python open cv bindings could fall into that categorization of python packages. And are probably much easier to do what you want. Now if you want to implement some features yourself to better understand the inner workings then using packages that are more general makes sense. 
proof?
Hum, When I read : https://github.com/repoze/repoze.lru/blob/master/repoze/lru/__init__.py It has 3 import a visible implementation of a lru cache and it seems threadsafe. I would call this library (repoze.lru) a *simple* lru implementation. Plus it does not have the expiring cache Plus I read here https://hg.python.org/cpython/file/3.5/Lib/functools.py#l411 # Users should only access the lru_cache through its public API: # cache_info, cache_clear, and f.__wrapped__ # The internals of the lru_cache are encapsulated for thread safety and # to allow the implementation to change (including a possible C version). So basically you actually never checked that lru_cache in functools was threadsafe. I would thus rate this blogpost as an example of the arrogance of the young developers never checking their sources. But go on, that is the way to do stuff; reinventing a broken square wheel. 
Thank you, I haven't been called young in quite a while. For my use-case, I wouldn't call repoze.lru's cache implementation simple. For the problems you encounter, it may be that is as simple as it can get. Would you care to elaborate on how my code (with the exception of calling _make_key, which can be easily replaced by any other hash function) accesses the internals of functools.lru_cache ?
BeautifulSoup. But I think you might struggle to build a generic parser to pull out the bit you want of the source pages are wildly different in their construction. 
So in Your opinion, the official Django documentation is the best source to learn Django right? What about ebooks like Two Scoops of Django or Tango with Django? 
If I remember right bs4 provides a `.text` or a `.get_text()` method on objects that can contain text.
I know we use Odoo at work, well, not the team I am in but another team consisting of one senior and one trainee developer. Anyway from what I have overheard about Odoo development it's a whole lot of XML that not too many Python developers at work want to actually work with... but each to their own I guess.
The official documentation is the best place to start. Two Scoops is a great continuation to the official docs. Like all things, only experience will teach you the finer nuances of how you like to set your project up.
I have a fairly simple Markov Chain written in Python that I've used to generate IRC-messages. I try to keep it simple and minimalistic so that it is easy to understand and expand on it. https://github.com/Gavekort/markov
I hope [THIS](https://www.youtube.com/watch?v=4_OiUURbYlQ) helps.
Yeah man, you're right on. Back when The Semantic Web was first coined there was an effort to standardize these things with &lt;header&gt;, &lt;article&gt;, &lt;footer&gt;, etc tags. It was relatively unsuccessful as tags are mis-used alllll the time. I totally agree the best approach is to catalogue the structure of each page the developer is interested in parsing and label whatever text they're interested in according to it's position in the DOM.
Slightly related: I work with a guy who used to work for one of the big anti virus firms, and he tells me that PDFs are really commonly used maliciously. 
I created a study guide for the Django intro tutorial for myself [here](http://dashwood.net/lessons/learn/django-intro.html)
It'd be nice if was capable of automatically adding installed packages to requirements.txt if requested.
Well, then it sounds like you're on the right track. You'll need to compare checksums for the files on both ends. Good ol' md5 will get you started, and it's easy. You might need something else should the files you're monitoring get too large. 
[No.](https://www.youtube.com/watch?v=msKI1T9i710)
&gt; non-CS undergrads
&gt;It's possible to have fantastic mobile support for Python 3 - and we're closer than most people think. 3.8?
Too subtle, [try this](http://i.imgur.com/b1oDY2p.png)
Está bueno Miguel pero tal vez sea más útil en [r/learnpython](https://www.reddit.com/r/learnpython)
Could you post the error message?
I teach a beginning programming class at work and will evaluate this for my ~20 students. Thanks for putting this out there, it might make the "getting started" classes much less painful.
This looks a lot like homework, and if people are going to be willing to help you with your homework you have to put some effort into your questions. You have provided some code that you have so far, but you need to ask specific questions about it, or the problem. You cant just say: &gt; Here's what I have. What have I got wrong? Further, you have chosen such an awkward way to present this. Don't use images, we can't copy the text out of them. We also have to keep flicking between them. Questions should be presented as preformatted code in your self-text. Finally, this question would belong in r/learnpython
I think you're probably thinking of the Roald Dahl story.
[Here](http://cs.stanford.edu/people/karpathy/char-rnn/shakespear.txt)'s a sample of Shakespeare-esque output from a recurrent neural network (from [this](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) blog post). Maybe you were thinking of something along those lines? The code is also linked in that blog post.
I would hash the file to detect changes and then move stuff around, ssh, etc with Fabric.
You'll get a lot more help at /r/learnpython. 
Alright. I'll post the error message when I get home. Currently on my phone. It's a big wall of pretty much the same thing over and over again about firefox. But I'll reallocate my question to /r/learnpython and hopefully get some help
I will put it on something for you or just PM it. I wrote a modified copy and of a ton of other tools but I need to be careful about posting it publicly since much of the work was done at work. 
that would be great, though my plan was to use it in a toolbox which, when finished, will be publicly available. If you're not able to share, I understand. 
Try inventwithpython.com here you can find good tutorial and i am sure you will love and enjoy coding.
The creation notes start on page 81 of 115, for anyone interested.
Im in the same boat. Some stuff I found so far. https://learnpythonthehardway.org/book/ This is good if you know absolutely nothing about coding but some people don't like that he teaches python 2 instead of python 3 Automate the boring stuff using python. Ive only heard good things about this book so far even though i haven't delved into it yet. https://automatetheboringstuff.com/ Mark Lutz's Learning Python is a classic (or so I've heard) but the price range is pretty steep. https://www.amazon.com/Learning-Python-5th-Mark-Lutz/dp/1449355730
[removed]
I might be able to add some perspective as a total noob that's trying to learn django. The official tutorial is an awesome way to get started and build that foundation. Once you have that, start building your first Web app. I also got Django Unleashed and am working through it to better my existing code. 
Sorry you don't understand Python... Use venv. Don't install libs into your system Python
Mark Lutz's book is awesome but despite it's name I wouldn't recommend it for rank beginners. He explains in quite the detail python syntax and data types and delves into Object Oriented Programming and Metaprogramming. But I feel that for beginners it lacks practice exercises of simple control structures (for loops, if clauses). I personally started out with Udacity's [Intro to Computer Science](https://www.udacity.com/course/intro-to-computer-science--cs101) and I found it quite enjoyable and it's heavy on practice exercises. The only drawback is that it doesn't teach OO programming but once the basis nailed down I learned OOP quite easily form Mark Lutz's book.
Isn't pygame a pip package?? So if you do brew install python2 python3 then pip install pygame?
You can try to train a neural net with your transcripts.
I highly recommend codecademy's online Python program. It's free, and will teach you all the basics in a very well laid out way. I'm currently in a graduate program in programming, and I still consider codecademy's program just as important as my current coursework. 
jesus man, /r/learnpython
/r/learnpython
There are many packages that are installable both ways, pip's virtualenv and homebrew's python-virtualenv come to mind. pip tends to install the latest stable version of a package whereas brew may install the latest version that has been proven usable with homebrew and packaged in a formula. 
Not in my experience. It works perfectly.
Try this: http://pygame.org/wiki/macintosh or * Make sure you install python from homebrew (to replace the mac default). * Make sure you're using virtualenvs * Create virtualenvs for Py3.5 and Py2.7 * brew install mercurial How to install via the python in your path (likely the apple python): * brew install sdl sdl_image sdl_mixer sdl_ttf smpeg portmidi * sudo pip install hg+http://bitbucket.org/pygame/pygame How to install to the brew supplied python. * brew install python * brew install sdl sdl_image sdl_mixer sdl_ttf smpeg portmidi * /usr/local/share/python/pip install hg+http://bitbucket.org/pygame/pygame
I promise you I'm a very reasonable person and I'm not the biggest expert on reddit. What is venv? Please elaborate or link. Thanks in advance
No my point is : 1) too much dependencies and useless overhead (and probably performance loss) 2) the functools.lru_cache is already threadsafe. 3) explicit is better than implicit, and the biggest value of a lru is a Keep It Simple Design proven (yes, reading CS papers and understanding them). 
But if you have to do a non-homebrew install, it's a fucking nightmare to get configured correctly. It took me several days to get a solid pygame installation, and it still won't load .png files correctly. 
+1 for automate the boring stuff
One option would be a Markov chain program, but they tend to produce nonsense, albeit using your phrases.
The aim of BeeWare is that you won't need to know the platform-specific libraries. Here's a video of the same codebase running on web, iOS and Android: https://www.youtube.com/watch?v=RisCgSIWwLA
I don't trust any programmer unable to handle the command line in any OS.
It's exactly what it explains. The algorithm doesn't just convert a single word to a single value - it takes a corpus of texts, finds all unique words in that corpus, and then assigns them specific "values" based on where they appear in the corpus and other properties. The "conversion" then is just looking up the word and finding which values the algorithm assigned to it. Edit: your edit shows you don't actually understand what word2vec does. It's not about converting multiple words to a single vector - it's about associating a single word with a vector of multiple "features".
1) My code has three imports, all of them builtins. I don't have any benchmarks to show you so I can't say anything about performance. In any case, it was not a priority at this point. 2) functools.lru_cache is indeed threadsafe but does not prevent the execution of a function call when it would be more efficient to block and wait for the return an identical call that's already in flight. Which is the problem I was trying to solve. 3) That's a very general statement and I'm not sure how it relates to my code.
Amazing books! 
[newspaper](https://pypi.python.org/pypi/newspaper) [justext](https://github.com/miso-belica/jusText) [sky](https://github.com/kootenpv/sky) [goose](https://github.com/grangier/python-goose)
I don't approve of this post on many levels.
MVP 
Alright, so I finally figured it out. Here is a youtube video that helped me install Pygame on MAC. At least up until the point that I could import it without error. https://www.youtube.com/watch?v=L0Cl4Crg7FE
Are you shitting me! So I installed homebrew, and did the whole lot via the youtube video and everything was working. I EVEN RAN A GAME MAZE RUNNER. However, now my both my terminal and shell cannot perform the import python command. What gives?
It's completely unrelated 
Bringing docker into it makes no sense to me. What advantage does that give you? I'd use a simple web API like Flask and the subprocess (or the multiprocessing) module. 
In your currently prevailing solution, what problem is docker solving for you? Strive to simplicity. If the complexity cost of a solution is greater than using the alternative or leaving it out, then it is not a good choice. Without an actual problem statement, I can give no further advice. I can only ask questions. Why does the system require N number for processes on demand? Why does the spawned process live indefinitely? What is the limit on number of spawned processes?
Install python3 and compile print "hello world"? Dude come on 
Workflow is really critical if you're introducing a new tool. You need to consider that people already have a workflow and that this new idea doesn't add extra work or that the extra work overwhelmingly will provide value (I'm not sure it will). Most developers have already picked their editor. For python that's generally one (or a combo) of these: vim/emacs, sublime/atom, or pycharm. The editor generally controls (or doesn't dictate) the workflow. So your tool, if you want adoption, should integrate seamlessly with at least one or more of those editors. And I think it would be best if it was a plugin. Also, it's not clear to me where your tool really falls because it seems rather ambitious as a start. If you're a beginner, you should pick some aspect of the tool and make that really good and then expand later. Also a note on packaging. Python's packaging is a mess partly due to misinformation or old information and partly due to a lack of a comprehensive tool which can handle that aspect. There are tools out there to make package management easier: pip, cookiecutter, pyscaffold, etc. You should avoid duplication unless you can provide evidence that your utility does everything that these tools do better. Finally, I wanted to point out that project management is generally done terribly in every organization. There are a plethora of tools already out there to help manage projects. The best group of tools that I've seen is Atlassians. And of course there is a larger set of tools that only do one thing.
Easiest way to make this yourself would be using "markov chains", like r/subredditsimulator. Basically you split every sentence in groups of three words (can be more than three if you have lots of data). For instance the sentence `I have bananas` becomes: - "`null` I have" - "I have bananas" - "have bananas `null`" You then put this into some database (SQL?), storing the number of times every triplet occurs in your data set. Then, you can build sentences based on any keyword, or even completely randomly. You grab with weighted-random a triplet, i.e. `I have bananas`. To build that to the left you look for something ending in `I have` and to build it to the right you look for something starting with `have bananas`. Repeat until both sides terminate with a `null`. If you do it properly with weighted random it can create some interesting sentences.
I thought it'd be simpler to restart the workers if they were in Docker containers, but I admit my gut feeling says otherwise ;-)
I would avoid Learn Python the Hard Way at this point, unless you know you're going to be working in Python 2. Python 3 has really taken off in the last couple of years with async support and a bunch of other exciting features. The edX (MIT open courseware) course is an excellent resource; my fiancée recently took it, so I had the opportunity to observe it first hand. Once you get a feel for the syntax, I highly recommend [The Hacker's Guide to Python](https://thehackerguidetopython.com/). It is a great book on intermediate concepts like package management, project structure, deployment, generators, decorators, etc. It is written by one of the guys at OpenStack. 
Here's one. Pretty simple idea. You need to feed it a lot of text to get creative. Once I fed it Alice in wonderland and the Constitution to make it generate absurd laws. https://github.com/sp1d3rx/nonsense/blob/master/nonsense.py
The tool's main purpose is to make stuff easier, if it results in extra work for the dev, it will be a failure. I am a PyCharm user myself, but it's missing quite a few things when it comes to project manager (other things are amazing!). I really want them to work together nicely, but making it a plugin is way too much work for way too many potentional editors. Plus beginners - main focus group - don't usually have their IDE setup just yet, so standalone is the way to go. Of course building a tool will take a while, we'll start with some core things and add the ambitious stuff later down the line - but I want to plan it ahead, so I don't end up rewriting 50% of the stuff when I do. Dependecies shouldn't really replace pip, but use it in the background. What I meant by dependency management is having requirements both in requirements.txt, setup.py etc with one list that gets edited in my tool/app. Plus add functionality of something like requires.io, where it shows what packages you use are not up to date, if you should update based on changelog hopefully available in app etc.
copy/paste * get through [codecademy](http://www.codecademy.com) python course, and [Dive in to Python](http://www.diveintopython3.net/). Or some other introductory course to programming/python * start working on your own project, learning stuff that is needed as you go. Eh, you dont have any? Thats normal but you will need some eventually... so keep that on your mind, meantime... * start doing challenges. [CodeEval](https://www.codeeval.com), or [CheckiO](https://www.checkio.org/), or [Codewars](http://www.codewars.com/) from easiest to hardest, its important to do some challenges, it will keep you using the language and it will get your confidence up, not to mention learning stuff as you search for solution * somewhere here you should start learning about [git and github](https://www.youtube.com/watch?v=DR7MLaAKcUk&amp;list=PLfdtiltiRHWFEbt9V04NrbmksLV4Pdf3j), about possible text editors and IDEs and their benefits, about linting your code, about [pip](https://www.youtube.com/watch?v=jnpC_Ib_lbc), about [virtual enviroments](https://www.youtube.com/watch?v=N5vscPTWKOk), and about possible ways to distribute your application * have a look at PyQt, [short zet code tutorial](http://zetcode.com/gui/pyqt5/). To make user interface, windows, menus, buttons, tables,... you realize that you can do very interesting things rather easily. Having some basic understandings of a GUI is needed or you be quite limited with what you can make of python and what projects you can undertake... * if you want to continue PyQt way [there are](https://www.youtube.com/view_play_list?p=8B63F2091D787896) some [yotube tutorials](https://www.youtube.com/watch?v=53oeJPKRttY&amp;list=PLA955A8F9A95378CE). And beyond that theres [a book](http://www.cs.washington.edu/research/projects/urbansim/books/pyqt-book.pdf) * if you dont know html and css it might be good thing to get some under your belt, its easy and the web will be with you your whole fucking life. [Html and css in 30 days](https://webdesign.tutsplus.com/courses/30-days-to-learn-html-css)(its free course once you register and actually last like 3 days even if moving slowly) * web scrapping is an excellent thing to know, [learn and try scrapping](http://www.pythonforbeginners.com/beautifulsoup/) * Understanding whats API and using some is also essential, maybe start with [reddit api](http://www.pythonforbeginners.com/api/how-to-use-reddit-api-in-python) * basic idea about databases, [zetcode short intro to sqlite](http://zetcode.com/db/sqlitepythontutorial/). You got some data, even just few? You wanna use a database just to play with it. keep doing those challenges, try some more on /r/dailyprogrammer or find new source of challenges that you can do while you wait for some inspiration of what you want to try to do in python, some project of your own now that you have some basics. But if nothing comes to mind, just keep doing challenges and moving in to directions that interest you... 
Pip3 works now. Just pip it.
Have you thought of building this tool in a Docker (or other container) image? This would mean you can abstract away some of the Windows, MacOS, Linux management issues. 
So, `cookiecutter`?
With GUI. And some other stuff on top.
You can install git and all of your other prerequisites in a Docker container but maybe I'm misunderstanding your concerns. 
I think (but I might be wrong) everything you are describing can be done in a container. A container would let you ensure that all the libraries you need are included on a users system. The GUI piece of things is where I'm not super sure. Look at this page to see examples of how Chrome and Spotify are launched from containers on MacOS and Linux: https://blog.jessfraz.com/post/docker-containers-on-the-desktop/ I don't know if this will work on windows. 
Thanks! I'll explore it a later 
MLK? What?
Maybe check out supervisord. there is also an api and plugins, if I remember correctly. You get great logging in addition.
"I have a dream! (and so on and so forth)" His speech was not that
Oh come on, It was just another way of saying "So listen, I thought this would be cool". I don't see how it's harmful/inappropriate in any way.
You need the amd64 version. This is unrelated to your graphics card but has to do with your cpu. Even on intel cpus you need the amd64 version because intel uses that.
Thank you! I guess I'm just stoopid. 
Thank you very much
We all start somewhere. I think everyone scratches their head about that the first time they encounter it.
This script no longer works for me.
Might I suggest Win Python? https://winpython.github.io/ It's all in one, portable, and has most everything to get you started immediately. If you're new to Python having a bare Python install might be a harder place to start.
&gt; Learn Python for Data Science Installs standalone Python 32bit... uses Sublime Text instead of Jupyter... Yeah thanks, but no, thanks XD
Try putting it in /usr/local/bin
Beginner friendliness most importantly. And to edit some stuff, keep it up to date. Not everything has to be done through shell. Sketching is my next step, still thinking ut through
Then don't depreciate the value of someone's accomplishments by stating "and so on and so forth". Unless you are familiar with how us African Americans are treated in the US.
another python js vm https://github.com/pybee/batavia :/ how about merging or contributing to the existing ones ? 
Well, sometimes you need to get web data off of pages heavy with JavaScript, and requests just won't cut it. Even then a headless browser like PhantomJS is much preferable to ChromeDriver from a resources standpoint.
You can set the web driver location when creating the driver object like this: driver = webdriver.Chrome(executable_path = '/path/to/webdriver_binary') 
Nvm fixed it! I tried specifying the file path in there and it worked - just wouldn't work for other file paths I tried
Yes i'm aware of the history of the swastika. Just thought it was interesting.
 bin(3) &gt;&gt;&gt; '0b11' float.hex(3.5) &gt;&gt;&gt; '0x1.c000000000000p+1' Is this what you need?
There is a builtin function called bin(). If you want some more references on working with binary data in Python check out http://www.devdungeon.com/content/working-binary-data-python
What was it that you didn't understand about the answer you got from the top link when you entered "convert decimal to binary in python" into your favorite search engine? I'm presuming you did try to search for an answer before asking here, right?
I'd recommend a Flask app for the GUI.
Thanks for all the help guys. I have solved my problem, and am currently programming games on the mac with pygame. It is running nicely. There was a bit of a hiccup in the beginning where I had to redo some to the installation steps, but now its up and running. Currently, I am using program arcade with python and pygame for help. It's loads of help. 
Do you know SQL, orms, html, JavaScript, CSS etc? Learn how to build a website and you can find work
Don't learn Python. Learn **programming**. Learn how to write code. Learn how to find solutions to problems. Learn how to make them better. That will take some time. I recommend Introduction to Algorithms (CRLS) for that. Once you have that down, you can start trying to implement those solutions in Python (or any other language, since programming is universal). Once you know programming, learning a language is easy.
That's one of their projects... 
Reasons I switched to Python: - You're cheating yourself if you only ever use 1 language. There are other ways to approach the problem of delivering a web site/application. Branch out, try some. - Personally, I think the syntax and flow of Python is much more elegant and satisfying than PHP. I've heard PHP has improved a lot since I used it last (~5.3 or 5.4), but it still feels like a clunky language to me. - Really good library support in Python. I feel like I find better libraries for things I need since switching. Guess it depends what libraries you need, though. I guess I'm being a bit vague, these are more overall impressions since I switched. For reference, I coded in PHP for about 7 years, switched to python about 4 years ago. 
quick question how did you come up with days = (age % 365) % 7 I've been trying to figure it out for a while but can't come up with an answer
Thanks! I am not using only one language, I also use JavaScript and Java. About improvements to PHP, it's hard to say. Everyone is using some framework, so it comes mostly to framework, not PHP itself.
If you want to pad it to 8 bits, for example: &gt;&gt;&gt; x = 15 &gt;&gt;&gt; print('{:08b}'.format(x)) 00001111
I feel like this is kind of a begging the question problem though? "How do I learn Python?" -&gt; "Learn programming." -&gt; "How do I learn programming?" -&gt; "Pick a language" -&gt; "Which language?" -&gt; "Python" -&gt; "How do I learn Python?" I think it's a bullshit answer that divorces the actual problem set from the needs that created it. I became pretty good with computer science fundamentals because I learned Python, not the other way around.
Ok but first I'll say again, you need to do your own homework. Now after rereading your original post I realize I misunderstood. So basically what that days calculation was doing was saying after calculating all the weeks how many days are left. If that doesn't make sense you should research the modulo operation and just think about it. Now after reading your update the week and day calculation /u/nemom gave you would be wrong which they mention because the months calculation is so difficult. Your code in your edit is wrong because you are assuming that months are 30 days which is not always true for each month and isn't even true for each year (leap years). Put another way, each calculation depends on the previous calculation being correct. So if you aren't calculating months correctly then your calculation for weeks isn't going to be correct, and if that's not correct then your days calculation won't be correct. Make sense? Edit: I think a proper solution for this is actually a lot more complex than it looks on the surface. You have to take the persons age from the current day, figure out how many leap years there were during their life, calculate the number of years, then for the remaining part of their age you have to have how many days are in each month (and whether or not its a leap year for Feb.), calculate months, then take the remaining days. Maybe I'm overcomplicating this.
You missed the bit where apparently you "learn programming" by working through CRLS, which is a special kind of hell. I broadly agree with "Learn to think, then programming is easy.", and it is common to follow language tutorials without grasping underlying concepts. But you do need some language to hang the theory on, you can't "learn programming" without actually programming.
Both caramba and lighttigersoul make good points. The thing is, you can spend that time learning programming and have enough knowledge to be capable of making a career of it. You can also spend that time learning programming and not even be close to the knowledge you'd need. Ask yourself why you want to learn it. Do you like it? Do you find yourself excited for the next time you get to sit down and think about it? Or do you want to do it because it's a "good" career? If it's the latter, you probably won't be able to gain what you need in that time. But if it's the former, you might. What's absolutely critical is that you need to build a program. Pick something you want to exist and start building it. If you're going to get anyone to take you seriously as a candidate without the "on paper" qualifications of a degree or previous work experience, you're going to have to have code you can point them to anyway, and you won't ever really learn the important stuff if you don't put it into practice. Exercises alone won't get you there. It won't be an easy undertaking, and it won't guarantee you a job. But if you like it, then it may be worth it. Only you can answer that.
Ah, didn't know that, you'd said you were just a PHP dev. Anyway, here's a blog post I wrote a few years back after switching to Python, which some people have found enlightening: http://www.alandmoore.com/blog/2013/02/02/from-php-to-python-things-i-wish-id-known/ Since writing that post, I've also started using Django, and it's pretty useful for certain kinds of projects. Frameworks don't cover all the language issues. The biggest thing that annoyed me about PHP syntax (many of which I think they've since fixed): - `function_that_returns_an_array()[0]` didn't work (think that's fixed now) - Hash rockets (`=&gt;`) in the array syntax, and arrows (`-&gt;`) for object member dereferencing. Super annoying to type, hell on readability. (Think they've improved array syntax, not object syntax). - No consistency on function names, parameter order, snake_case vs. CamelCase, abbreviations, etc. This really makes a difference. (pretty sure this hasn't changed) - No keyword arguments in functions. Even if I use default argument values, if I wanted to change the sixth argument value I had to provide values for the other 5, in order. (also sure this hasn't changed) There's more, but those were the big points that go away when you move to another language. Python, and from what little I've written, Ruby, seem to have these issues sorted out.
You won't spend 8 hours a day learning Python. I learned fast and I only put in two to four hours daily in the first few months, and significantly less than that until I got a development job. Even now, I'm a professional software engineer, and I'm lucky if I put 8 hours a week into furthering my skillset. My suggestion is always take about a month and master the basics of Python and programming in general, then pick a thing that interests you and fucking do it. I chose video games, and now it's the topic I'm known for in my local development community despite primarily doing web development professionally. You don't need to learn everything, and you don't need to know everything well, but you do need to prove you can turn a requirement into code, you should probably demonstrate you can integrate an external library, and version control is a thing you want to learn for yourself. Outside of that? Just code, and do as much as you can. 
This guy is only suggesting that learning algorithm is a good way to improve your programming skills. I see nothing wrong with it. I used the same book and it was very useful.
How did you install python? What OS? I would suggest trying Anaconda which will simplify this a lot.
You'll get a lot more help at /r/learnpython. 
I was about to write an answer, and then I chanced upon this comment. This is what I would absolutely recommend as well - whether for absolute beginners or extremely experienced developers. A good solid grounding in Algorithms and Data Structures, and developing good problem solving skills - nothing better than that! In addition to the wonderful CLRS, I would also recommend another very approachable book which also improves problem solving - Algorithmic Problem Solving by Roland Backhouse, especially for beginners. Finally, a solid grounding in Discrete Mathematics would be very helpful in all aspects of programming. The MIT OCW courses seem comprehensive enough for this purpose.
You'll get a lot more help at /r/learnpython, especially if you include what OS you're on. 
Came here to say that. Also, having it as a job gives you the impetus to succeed.
Cool, just thought I would give some feedback on the API. It caught my eye in the example that you imported pprint and called it with the root node to print the tree. If you instead have the tree a __str__ method and moved the logic to build the pretty display into that then people could just print() any node. Also lets someone dump it to a different file object than stdout. You could add a dump method onto node that was just print str(self) to have a quick stdout printer. I would also move inspect onto the tree too. The other functions that serve as factories for new Nodes make sense as top level funcs. Just a couple suggestions nice work though. 
Look up the dateutil module.
Calling the code outside `with` doesn't guaranty that it would be executed after commit. `@transaction` decorators could be nested (ex in caller function) or even setup globally with [ATOMIC_REQUESTS](https://docs.djangoproject.com/en/1.10/topics/db/transactions/#tying-transactions-to-http-requests) settings
Thank you for your suggestions. I think those are all very good ideas and I will include them in the next release. I will have to force the users to subclass from binarytree.Node when they want to use customize the specification so they won't lose the class methods.
I hated writing PHP. Writing Python is fun. I choose Node for web though.
That's normal. Welcome to programming!
Who knows
Did this have a specific feature we haven't seen before? Emacs does all these things.
I'm confused. Its purpose is to browse code? Is it a reference to another IDE that can be used to browse code?
I can do it for 24 hours straight, and sleep for three and do it again, more excited than I was the day before. I don't want to build my own Facebook or anything, I just want to help people by getting the computer to do what they ask. And maybe even do it, before they ask. 
## Reasons to use Python 1. Python serves really well as a language outside of just web development. This means that if you need to branch out into writing a system script, or desktop tools, Python lets you use one language for the brunt of that. 2. Python has a much larger set of libraries covering a larger set of tasks. For example if you need to manipulate images, the python libraries for it via Pillow are much more advanced than the comparative PHP code. Similarly, Python has better libraries for mathematics, scientific research, machine learning etc... In short, python is capable of doing more than PHP can. 3. Python supports async/await which I believe is still not present in PHP. This means you can write asynchronous code with Python which is very powerful for writing web applications. 4. Python is a much nicer language than PHP. There's way fewer bizarre design decisions than PHP has, and the syntax to me is a lot cleaner. 5. There are many different python server types and you get a lot of flexibility in how you set up a server. This can be really nice because it gives you a lot of control to tailor it to your needs. 6. Python as a language is better designed with a better, stricter team behind it. There's been fewer critical bugs and security flaws inside of it, and less issues with the way the core library and tooling has been handled. 7. Better interaction with C libraries than PHP. ## Reasons to use PHP 1. The ecosystem is simpler. There's really just a couple choices in server types, the scope of what the community uses it for is smaller. It's just easier to get up and running. 2. There's no real equivalent to Wordpress. There's Django+Wagtail, but it's not as simple to set up and there's no rich community around it. 3. PHP is a lighter language and runtime so can theoretically be more performant. ---------------------- I think you should definitely try learning python, solely to see how it can grow your own horizons. If for nothing else, learning new languages can help improve the way someone works in their dominant language. I suggest downloading Python 3.5 and starting up server using Flask. It's very simple to get up and running and work with larger problems. To begin with, I recommend downloading python from https://www.continuum.io/downloads as their distribution of python comes with a lot of prepackeged binaries already built for you.
I think the idea is that you can index your code on an online server and find code in larger code bases quickly. This is similar to https://opengrok.github.io/OpenGrok/
Decoding encryption. But right now, I like algorithms 
Looks like it's has numpy as a dependency and it is not installed. Try installing that as well. Otherwise follow the suggestions above and get anaconda/ miniconda.
So, is it good idea use kivy and django rest framework for android application ?
8 hours a day for ten months is plenty, but I don't think you should study that much. Learning has a high cognitive load, so most likely you'll be better off studying for two ~2-3 hr sessions a day. I would also take a nap daily (this is crucial for memory consolidation). You'll want to take at least one day completely off from programming a week. Try not to Google answers to questions you have before first searching inside yourself, because attempting memory retrieval enhances your ability to learn. If you have difficulty focusing on the task at hand, I recommend using the pomodoro technique. The pomodoro technique is a tool you can use to help motivate yourself to complete any specific task. Just set a timer for 25 minutes, and then make a commitment to yourself that you will focus on that one thing, like learning a specific Python library, for the whole time. Once the timer's up, you get a five minute break, and then the cycle starts again (it's a bit more involved than that, but that's the gist of it). Remember that practice is one of the most important aspects of learning. When you perform any cognitive task over and over again (this includes things that require dexterity, like snowboarding), your brain forms groups of the neurons involved called chunks. In programming, this means that as you learn what it means to write Python-esque code, the need to consciously think about what you're doing will fade. Just like a pro-snowboarder who appears to perform tricks effortlessly, your brain will start "chunking", and programming will become automatic. Serendipitously, I just took a class on optimal learning techniques, so this information is fresh in my mind. I hope it helps, and I wish you the best of luck in your learning.
Check out the odin project if you want to learn how to be a full stack dev. There's also the viking coding school.
This is thorough and really well done. Great work! 
First of all, try /r/learnpython. Then, what's the actual problem? x = 3 if x == 1 or x == 2 or x == 3: print("x is between one and three") else: print("something else?")
What does youcompleteme have to do with installing python packages? Also is youcompleteme even useful/useable from pycharm?
&gt; It's quite possibly the most useless function ever. Hmm, what is with the fibonacci functions? I don't see much use in the programming world beside calculating the fibonacci series directly.;) At least I can imagine that you can encouner some data that just stored 0s and 1s as a string and you have to convert that ;)
Im already studying my 3 control courses and really need Matlab, but also i wanna use open source. So it will be a great study help for control-Matlab-python Thanks for your work. I really appreciate you guys who do tutorials, YouTube lessons and stuff. 
&gt; I hated eating apples. Eating strawberries is fun. I choose cabbages for breakfast though.
&gt; missing bracket Not in python. Unless it's a dictionary 
You are asking the right questions at least. Pygame is fine. The idea with these libraries is that it lets you get to the meat of the thing you want to do. Let's say you want to write a game. You don't really want to get bogged down by the details of how to put pixels on screen. Pygame will just give you an API to use and you won't need to know how it actually talked to the video card. Of course, if there's another library you want to use, that API will be different but the goal is the same. Also, if you really want to do the nitty gritty, you can avoid libraries altogether. Some people enjoy that and it's fine too. Depends on what you enjoy doing. If you want a finished product though, it's best to stick to use these libraries. 
simply not true. 
I recreated the program from [this](https://www.youtube.com/watch?v=JbnjusltDHk) classic Arrested Development scene. It was my first ever coding project, give me a break.
In currently working on a program that builds a text file based on templates, I just started it yesterday and I'm already proud of it. Simply: [template](https://github.com/nadehi18/template)
The coursera python courses from Rice are great.
&gt; What kind of security should I use between client and server? TLS
What? No. I run several Python servers exactly like that in production right now doing mission critical work at a bank. If you're delivering content to clients on the internet it can be useful to let a web server like nginx deliver your static content but if you're just serving up an API what's the point of the web server? There is none. If your Python app uses multiprocessing then there's no need to use nginx to load balance anything either (which is another area it is useful). If you're using WebSockets then load balancing at the server is pointless anyway (to effectively load balance those you do it at the client).
My [programmeble calculator](https://github.com/prog-re/klak)
`{` This is a **brace**, as in "curly braces". `[` This is a **bracket**, as in "square brackets".
Just look yourself, the purpose is to browse code
/r/learnpython
Cool, is the app Kivy or are those native?
Currently using selenium to automate social media interactions
[Qinfer](https://github.com/QInfer/python-qinfer) is a library for performing Bayesian parameter estimation on quantum systems. Internally it implements numerically optimized SMC methods and is easily parallelizable. It will soon be usable for any probabilistic system (my main contribution). We recently released version 1.0 which I'm really thrilled about. It should be noted I'm just a collaborator not the project lead.
It's a mobile web app https://home-assistant.io/demo/
OpenCV has Python bindings. Or you could just use any ffmpeg wrapper.
The correct way to do it would be to make your program a Python package, and then specify an entry point in your `setup.py`. Then you can just `setup.py install` or `setup.py develop` and it'll create a wrapper script that sets everything up automatically.
Here's an astronomy related one that gives me data on the best times to observe Jupiter's electromagnetic radiation based on the positioning of its moon, Io: https://github.com/adamk/Jovian-radio-emission-flagger
You need to import WeightedDoc2Vec as well since objects of that type are in the pickle.
Well, actually I am importing it explicitly: from src.doc2vec_ext import WeightedDoc2Vec
* [Pygame Example Code](http://programarcadegames.com/index.php?chapter=example_code) - Code for people learning to program. * [Arcade Libray](https://pythonhosted.org/arcade/) - 2D game library.
[Pynsist](http://pynsist.readthedocs.io/en/latest/) is a tool to make a Windows installer for a Python application. It can bundle your code, any dependencies, and Python itself, into a standard point-and-click installer that creates start menu entries and adds it to the 'remove program' list.
could you elaborate what you mean with setting up everything automatically? Here is the project btw. if that's of any help https://github.com/spaghettic0der/terminal_timekeeper
I'm trying to load the model in the same script that I created the pickle file with. So nothing changed there.
[pywebview](https://github.com/r0x0r/pywebview) a GUI toolkit that lets you build user interfaces using web technologies 
I have two projects that I'm relatively proud of, both were beginner projects that I kept tinkering with. 1. [ScreenBloom](http://www.screenbloom.com) - uses Python to average your current screen's color and update connected Philips Hue lights. [GitHub](https://github.com/kershner/screenBloom). A few GIFs: https://gfycat.com/@kershner/detail/PlasticSorrowfulIcelandichorse https://gfycat.com/@kershner/detail/IckyLargeAnt 2. [Raspberry Pi Gif Display](https://github.com/kershner/RPi_Display). This thing is really dumb but entertaining. It maintains a huge list of GIF URLs by accessing the reddit API every night and endlessly displays them 24/7 on a little display that sits on my desk. https://www.youtube.com/watch?v=PFvCgDggzr4
Post your `setup.py`.
You need to add an entry point definition to your `setup.py` pointing to your "main" function. I doubt IDEA does that for you. 
[PrettyPandas](http://prettypandas.readthedocs.io/en/latest/) is one I'd like to share. It's a class which wraps the Pandas Style API and allows you to do some pretty printing of Pandas tables in HTML.
[PyPattyrn](https://github.com/tylerlaberge/PyPattyrn), a simple python package I created which contains templates for many of the common design patterns, making it easier to use design patterns in your projects since the boilerplate code is already written. It has reached 150+ stars which I'm pretty proud of since it's my first public project and when i originally made it I was only doing it to learn about design patterns and would have been happy with only 10 stars.
Wrote some scripts for data analysis for my doctoral thesis but was having a hard time explaining how they worked so I wrapped them into a full GUI for ease of use. This made it much easier to adapt the software for use in a larger number of experiments leading to new publications. I know you've all been searching for a way to streamline your data analysis for low energy electron microscopy and diffraction experiments. Look no further - [PLEASE](https://www.github.com/mgrady3/pLEASE): the Python Low-energy Electron Analysis SuitE 
http://www.celeryproject.org/
You could look at airbnb's Airflow? Same idea as Luigi so maybe not that helpful though
I'm making a bridge engineering tool kit web app with a Flask/python/numpy backend. First couple modules take some input and return some values and a matplotlib plot. The module I'm working on now lets you build a beam model and uses the JavaScript library plotly.js to display the model as you build it, and then (soon will let you) view the result plots as well. Not really useful for anyone on here I assume, but I'm pretty proud of it so far.
Mine is some pyqt apps. I just started with pyqt a month ago. And some more daily life python scripts. http://github.com/PythonWare, http://github.com/mananpal1997 Made with pyqt: Email box, music player, text editor, browser, github desktop app, paint app. (some are still under development and not yet pushed online)
I tried nuitka, and it is easy to use, I don't really see why recipes would be needed.
I looked at both, Luigi seems to be for more smaller scale stuff and Airflow is apparently really into assigning dates to every job...
I made a [twitter bot](https://twitter.com/PollTrackBot) that tweets every new poll for the 2016 presidential election: https://github.com/haaspt/PollTrack Nothing too fancy, but it's been a fun little project.
An e-commerce stack named [Saleor](http://getsaleor.com/). Also a Requests mocking library named [httmock](https://github.com/patrys/httmock).
Okay I didn't find anything how to include my function to run :( from distutils.core import setup setup( name='terminal_timekeeper', version='1.0.0', packages=[''], url='', license='', author='spaghettic0der', author_email='', description='' ) 
Frankly, I'm a little bit confused about your problem. {"00-XXXXXX":"name","ZZZZ","datapoint1","YYYY","datapoint2","BBBB"}} is not valid JSON syntax. The first value is fine; The key "00-XXXXXX" leads to value "ZZZZ". But then it suddenly turns into a list, which is a no-go. And that's not mentioning the extra \} at the end, which makes no sense. If you want to parse JSON, I'd recommend trying out the standard library "[json](https://docs.python.org/2/library/json.html)". It'll convert a string into a python dictionary (or list) for you, making it much easier to parse.
&gt; a = Math.floor(Math.random() * 1296 + 1); lol, this is cheating :-) You stopped simulating dice in the first place. python: import random def yahtzee(): i = 1 while True: roll = [random.randint(1, 6) for _ in range(5)] uniques = set(roll) if len(uniques) == 1: print(i, roll) break i += 1
It always seem like I should package everything for pip. I don't want that. I want to do ./program and it should just work. 
[InstrumentKit](https://www.github.com/Galvant/InstrumentKit) is a Python library that aims to provide a connection-, manufacturer-, and device-agnostic API for interfacing with laboratory equipment. I started the project years ago when I was just starting grad school in an effort to reduce our dependence on Matlab and speedup the setup of new experiments.
Or Python Toga!
Why Flask and not Django?
www.travelthe.earth Connects separate flights to get you to your (ideally long-haul) destination cheaply. Constructive feedback welcome!
Isn't that a bit like Jinja?
I wanted to thank you for this. Pynsist is awesome, I really wish I had found this a LOONG time ago. 
I though python is supposed to be easy. It's nice writing the code, but this really sucks. I'm too stupid for this. Gonna use java next time again for bigger projects prop. Build and run --&gt; jar, which I can execute everywhere. But thanks for trying anyway :) 
Or use itertools.count to abstract away from the counter: import random from itertools import count def yahtzee(): for i in count(start=1): roll = [random.randint(1, 6) for _ in range(5)] uniques = set(roll) if len(uniques) == 1: print(i, roll) break
I came up with the idea for the program randomly and thought it would be a fun, doable project, and after I already made most of it I searched pacman for things with the word template and I believe that came up. But I believe jinja is used for auto creation of html pages, this is going to be intended for people that create a lot of code files and want to have something to start from relatively quick, although maybe it will evolve into something similar I'm not sure yet...
Indeed. Running images through `diff` is rather difficult. And `lxml` can't read them either. The image format does a disservice to the workflow of someone working with XML.
My humble project is [kmanga](https://github.com/aplanas/kmanga), the is the engine behind [kmanga.net](https://kmanga.net), a site to send Manga chapters to your Kindle. The spiders are build on top of Scrapy, but I extend it a bit to take care of the database synchronization, some common patterns, proxy management and stuff. There is a bit of Django too, and some pieces to manage and create MOBI documents.
Don't download manually. Use the pip command to install pygame, and packages from pypi. Pip is part of the Python distribution and will be installed along with Python 3.5. To use it, you would just open a terminal and type 'pip install packagename'. However if you're using modern tools like a good graphical IDE (e.g. Pycharm), it will have a GUI you can use to install packages.
Mercury, my attempt at a WordPress-like CMS with static page publishing: https://github.com/syegulalp/mercury I'm already running one site with it: http://www.ganriki.org
I used PHP a bit... 18 years ago. Haha It doesn't surprise me that it has an interactive interpreter now. Don't know how useful it'd be considering the nature of the language but whatever.
yeah it's a symlink so it can't access the other files. So sadly this doesn't work either
Please go to /r/learnpython, this is for news.
[Engel](https://github.com/Dalloriam/engel), my simple framework based on [sofi](https://github.com/tryexceptpass/sofi) for generating web interfaces for python applications.
$229?
Ah OK, so not Jinja. Sounds pretty cool! 
It's `cx_Freeze`, exactly spelled like that.
Really?! Cool! Glad I could help :) Also, let me know if you have a feature request or a bug report :)
WSGI Python looking glass implementation (works with remote routers as well): https://github.com/andrew-azarov/py-lookingglass Ganeti (cloud management software) external backup script: https://github.com/ServerAstra/gnt-ext-backup A simple mail function to send all sorts of emails: https://gist.github.com/andrew-azarov/dc17c1ad5d4f24f035bd0f9e63ca7563
I used a Raspberry Pi to monitor the occupied status of the restroom at one of my previous jobs. It hosted a webserver that displayed which of our two bathrooms were occupied so we could check from our desk instead of walking through the office to check the door handle. Ultimately the raspberry pi just used a light sensor to see if (bathroom light on? --&gt; occupied. light off? --&gt; unoccupied.) [restroom-status-monitor (GitHub)](https://github.com/ridleylarsen/restroom-status-monitor)
99% of what I do is for myself or my group at work. Not a lot of application outside of my use cases, for now. 1. I converted a lot of [University of Michigan's Controls Tutorials for Matlab](http://ctms.engin.umich.edu/CTMS/index.php?example=Introduction&amp;section=ControlStateSpace) into [Python](https://github.com/DadAtH-me/ControlsTutorials_Python/blob/master/README.md). But the part I'm most proud of is the batch converter I wrote to do most of the hard work for me: https://github.com/DadAtH-me/ControlsTutorials_Python/blob/master/DevScraps/BatchImporter/09-checkpoint-Copy1.ipynb That was the result of 2-3 all nighter hackathons. And documented like it was as well. It downloads the MATLAB .m file from Umich.edu, breaks it apart into cells, and converts it mostly to Python. So when my boss asks for a .m to .py transpiler I have something mostly ready. 2\. Plus a [pytest jupyter notebook runner](https://github.com/DadAtH-me/pytest_notebook_tests). To automatically generate data analysis reports from Jupyter notebooks. [That way I can have something like Jenkins do my data analysis and reports for me]. 3\. Used Python in Jupyter Notebooks to do ['numeric control' of my Mitersaw](https://github.com/DadAtH-me/MitreSawNumericControl/tree/development) using off the shelf hardware (cheap threaded Rods, etc). Within that project there are a lot of other smaller subprojects: - Using an Arduino and a Notebook to [automate data collection](https://github.com/DadAtH-me/MitreSawNumericControl/blob/development/ArduinoPressureSensor/arduino_component_05.ipynb) and analysis. - Creating a few [Python classes](https://github.com/DadAtH-me/MitreSawNumericControl/blob/development/mosfets_04.ipynb) to handle controlling Smoothie Board IO like [mosfets](https://github.com/DadAtH-me/MitreSawNumericControl/blob/development/mosfets_04.ipynb) Still to be done is link that with Alexa and have a Flask API so I can send board cuts from a design program in the house.
home assistant is fucking awesome. We had been trying to get some automation started but never managed to make anything complete, then home assistant let us do everything in a couple of days. I've even submitted a couple patches, and I have more to come!
op pls...
Point to a video file, get a 'barcode' back of the average frame colours: https://github.com/timbennett/movie-barcodes There are many implementations of this effect, but this one is mine. 
I would love to see a Python project like [Love2D](https://love2d.org/). Old pygame was close, but it would need a major overhaul to have the sort of polish Love2D has.
Not OP but... input("Gob's Program\n&gt;") while True: print("Penus", end=" ") EDIT: Penus, thanks /u/dyingtosaythis 
In-progress peer-to-peer networking library, 25 stars [Python](https://dev-docs.p2p.today/python) and [Javascript](https://dev-docs.p2p.today/javascript) implementation now, ready for beta 4 by end of the month. Message parser in Java, C++, Golang. More networking implementations to come. http://git.p2p.today
[aa_macro](https://github.com/fyngyrz/aa_macro) This is a text-to-HTML/CSS/Whatever processing language. Of all my own Python work for myself, it's the one that gets the most use. It's like [Markdown](https://daringfireball.net/projects/markdown/) -- if Markdown took steroids for ten years while living in a gym with a personal trainer.
I think Django is better than flask, but avoid both if I can help it. Once you get past hello world examples, flask apps approach Django complexity, except the seams of all the independent parts you need to glue together in flask never quite fit together as they will with Django. For example, I think the way flask does its global request context is horribly unpythonic, needlessly confusing, puts a lot of strange burdens on your app design and structure, once you grow beyond single file apps. Its just stupid, stupid, stupid. Django requires a lot upfront learning before you get real efficient at it. But I think its ultimately easier than flask for medium/large size crud style apps, if you can put in the time. But... take a good look at Tornado. Its quite an amazing little framework that delivers on a lot of the false promises of Flask. 
You know what, lua is just fine too, never thought there was a great framework for it
The wiki and forums are great learning resources. 
I have a [project](https://github.com/isislab/CTFd) for running [Capture The Flag competitions](https://en.wikipedia.org/wiki/Capture_the_flag#Computer_security) 
It works! Thanks for the tip!
I've actually just started learning to code and writing a blog about it if you wanna check it out here... http://www.lifenoob.com/. It's a bit basic right now, but hopefully I'll advance pretty quickly, so maybe we could help each other out?
"PoopInPeace"(tm) .... but what if someone likes to poop in the dark?
Hello. I tried doing it and ran in some problems. https://www.reddit.com/r/learnpython/comments/56m05e/anaconda3_in_pycharm/ post made by me.
I am a very very new to programming, but I made an active-passive load balancer that updates Cloudflare DNS records if it detects your site is down. I can provide a link if anybody is interested!
if ans2 in ("y", "n", ""):
[angrysearch](https://github.com/DoTheEvo/ANGRYsearch) - Linux file search, instant results as you type I missed [Everything](https://www.voidtools.com/) really bad on linux, and alternatives felt like shit...
[flask2postman](https://github.com/numberly/flask2postman), a small util to generate a Postman collection from your Flask application; I find it very useful for testing my APIs easily without doing any spec à la Swagger and stuff.
Solution for publishing content in the form of an interactive dialogue. Convert your content to a spreadsheet of questions and answers that user can then explore by chatting with it. Chat with a cat at www.talkigy.com/chat/poppy-cat 
No point in checking the answer if it's not being used. Also you can use a `for` loop and not worry about keeping a `count` variable. import time input("Gob's Program: Y/N?\n? \033[1;32;40m") for _ in range(50): print("PENUS " * 6) time.sleep(0.1) *Edit: added color
I really like my python editor since it was my first project where I learned so much python, I made it for different project, however I am really happy to code in python see you can discover in my github. https://github.com/techbliss
Jinja is most often used for HTML, but it can be used for any text-based output. E.g. Jupyter's *nbconvert* tool uses Jinja templates to generate formats including markdown, latex and Python scripts. From your description, you might also be interested in [cookiecutter](https://github.com/audreyr/cookiecutter). This isn't to discourage you from doing your own thing, though! It's valuable to approach things from different angles. I like the idea of cookiecutter, but I never actually use it myself.
I actually love that it checks the input, doesn't give a shit what it is and goes on anyway.
Tornado has nice support for web sockets and decent documentation. https://pypi.python.org/pypi/tornado http://www.tornadoweb.org/en/stable/ http://www.tornadoweb.org/en/stable/websocket.html
Not trying to get into arguing correct vs incorrect in any prescriptive sense, but the term bracket is sometimes used for square [, curly { and angle &lt;. And the considering context the comment about the "missing bracket" definitely didn't have me thinking square. Here's a few from a quick Google: https://en.m.wikipedia.org/wiki/List_of_programming_languages_by_type#Curly-bracket_languages http://stackoverflow.com/questions/3162030/difference-between-angle-bracket-and-double-quotes-while-including-heade
he managed to run a jupyter notebook with a PyPy (a jit version of python) implementation instead of the usual Cpython interpreter. PyPy, though promising, its tricky to use and thus, OP is happy that he got it working with jupyter notebook.
Well , I have not used PyPy myself in production, so I cant tell. Probably OP can elaborate on that. Regarding jupyter , is not a web app, is much much more. You should [check it out](http://jupyter.org/)
Is this some dev branch of PyPy that implements Python 3.5? I didn't think PyPy could do that yet.
I started a love2d implementation wrapped around pysdl2-cffi. Basic 2d was there. Feel free to fork and continue the good work. :) https://github.com/mongrol/pylove2d 
Bookmarked for later, thanks for putting all the time into creating that.
Flask's request context is some really evil black magic, that tends to affect lots of other things in a flask app. Its not very pythonic, IMHO, and was a *really* poor design decision. I'm not even sure anything in django is as magical as that. I think web.py (the framework that came from reddit) and Tornado really are great examples of straightforward very pythonic frameworks. 
 SyntaxError: invalid syntax
I was going to fail you for this &gt; Cannot use lists that includes split function But now I see that it has only one list, not lists. And it doesn't include the split function. PASS!
Well, that makes my life easier.
I wish I could share what I work on on a daily basis, but since I work at a startup and we have to protect our intellectual property I cannot :( However, I love teaching and want to get people interested in python (and math). So I'm starting up a blog at: https://mathcodelife.com I'm not yet "proud" of it since I just started it a few weeks ago, but I do hope to turn it into something I can be proud of.
&gt;Think of it like /b/ on twitter &gt;/b/ &gt;twitter What have you done?!
I want to write the same- GUI is needless. Many successful tools use combination of single configuration file and limited set predefined commands, for example nodejs: * `npm` with package.json * 'express` java: * `maven` with pom.xml * [Maven Archetype](https://maven.apache.org/guides/introduction/introduction-to-archetypes.html) (project templating toolkit) 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
If you are working with outlook, I have a similar problem where i need to read content of email from specific folder. I am stuck at accessing email where I can access folder directory but not the content of email. Could you please send me few pointers/links ?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Most benchmarks from Benchmarks Game isn't possible yet, because PyPy 3.5 currently doesn't implement multiprocessing module 
Yes, I can do some benchmarks, but I need benchmark programs :) Benchmarks from benchmarks game are not suitable, mostly because almost all of them use multiprocessing, which isn't implemented in PyPy 3.5 currently
By the way, PyPy isn't so tricky :) I just typed this commands: python -m ensurepip pip install jupyter jupyter notebook
If package is pure python - it will run on PyPy 99,99%. If not - report a bug. Packages with Python C API supported too, but they're slower on PyPy. It's sometimes better to use pure-python package on PyPy instead of Python C extension with CPython (PyPy still could be faster)
https://channels.readthedocs.io/en/latest/getting-started.html
agreed - i posted too soon
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
A PyPy with CPython and Py'd Pyper. 
Thanks, I never thought of that
Now i'd be impressed if you can get all of that running on windows. I can't for the life of me
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
For a school project I made a [terrain generator.](https://github.com/GravitatingGnome/Python-Perlin-Based-Terrain) It's very amatuerish and incredibly slow. Not to mention the UI is complete ass . Someday I hope to rewrite and expand it with better optimisation and C++ but that probably wont be any time soon as my course is using Java and I'm mostly trying to learn C++ in free time. If I do use more python it will be to learn Machine Learning. I also made a neat little script to [fetch album art](https://github.com/GravitatingGnome/FetchAlbumArt) from the itunes-api. I've also combined it wish some bash scripting to automatically download the currently playing track by checking the state of mpd. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I did it as some of the first, and it was decent, but it's also outdated. If you are totally new I would start at codecademy.com.
It's significantly out of date, and I personally don't like the "I am a Rockstar Programmer, which is why I'm always right" attitude Zed takes in all of his books. 
What should i do after codeacademy
Or even better, define `__enter__` and `__exit__` on your Camera and Window classes. 
No, I did it as a beginner and didn't gain much by the "type it to you get it approach".
You'll get more help at /r/learnpython. I suggest starting with their sidebar. The book is fine for beginners. I used it years ago to learn python. It's a little out of date and you have to ignore his opinions on python 3, but it's a good into to python and OOP . I think one of the better recommendations these days is "Automate the Boring Stuff". After codecademy find something tgat annoys you on your computer and write a script to fix it or build yourself a website. Just write something. You'll never retain it or get better if you don't practice. 
If you want some light-weight stuff to start on you could get some inspiration from [Automate the boring stuff](https://automatetheboringstuff.com/). Other ideas could be to create a personal website (great python web frameworks out there), do simple data analysis on a field that interests you (Python is great for data analysis with libraries like SciPy, Pandas etc.), create something useful for yourself like a to-do-list or mini-diary.
Can you please elaborate why do I need to manually check for 5 same values in different indexes, and not 1 in 1296, since the probability is the same?
So many resources suggested, so I guess I'd share a personal tip (I, too, just started out a couple of months ago): don't get too caught up comparing which resource is better, pick one and go straight into it. All the best!
 def countdown(correctsyntax): while True: #Make sure you set the correct syntax outside the function print("Incorrect, Enter it exactly the way it's supposed to be") count = 5 count = count - 1 print("you have " + "(" + str(count) ")" + "times remaining") if count == 0: print("This is the correct syntax ----&gt;" + str(correctsyntax)) print("Make sure to enter the syntax with no spaces")
Okay, to explain the above countsyntax = something is outside the function. What I want to accomplish here is, is once the count down reaches 0 the code should print("This is the correct syntax -----&gt; something")
Automate the Boring Stuff with Python: Practical Programming for Total Beginners is such an awesome book. I'm currently going through it.
Ah, okay, nice! I usually use BeautifulSoup with requests, as opposed to Scrapy, but I suppose the underlying principles are the same. It's mostly a matter of use case and preference. The big thing, however, is I do mobile notifications through [Pushbullet](https://www.pushbullet.com/). Pushbullet notifications are fairly instantaneous, easy to set up, and unlike Twitter it's private. Sadly they seem to have made some business missteps, and pivoted a bit from the notification focus, but they're still around and work well (**Edit:** other options that look absolutely sweet are [Pushjet](https://play.google.com/store/apps/details?id=io.Pushjet.api&amp;amp;hl=en) and [Simplepush](https://play.google.com/store/apps/details?id=io.tymm.simplepush)). I'd say it's definitely a great choice for phone notifications even today. I'm not entirely certain there's much more insight to be had beyond that, actually. In any case, I went ahead and uploaded the tool (along with the underlying Kickstarter API) for you. [Feel free to have a look!](http://obskyr.io/filer/kickcheck.zip)
1. you have a while loop, but you set count=5 every time round the loop - so count will never get to zero. you need to set count =5 once only before the while loop starts. 2. Even if both some miracle count gets to zero and you get the message printed, your code will still be in that while True loop as you don't exit the loop. You can either use 'break' to stop the loop once count gets to zero, or even better you could use a whole loop with a real condition 'while count !=0'
For me, probably: * [Newspipe](https://www.newspipe.org): open-source news reader (formerly named JARR). And now available for everyone! ([code](https://github.com/newspipe/Newspipe)); * [Stegano](https://github.com/cedricbonhomme/Stegano); * and I also like this one: [IP-Link](https://github.com/cedricbonhomme/IP-Link).
An easy to use Ansible API called [Suitable](http://suitable.readthedocs.io/en/latest/). It beats the [official way of using the API](http://docs.ansible.com/ansible/developing_api.html#python-api-2-0) for my use case (orchestration scripts at my company).
I see that the Wemos D1 that's used in the video costs [£2.48](http://www.ebay.co.uk/itm/191813500136), which is a *lot* less than the [£28](https://micropython.org/store/#/products/PYBv1_1) for the Pyboard, which makes it worthwhile to buy one to chuck in a drawer so that I can experiment with it later if I find the time. Otherwise, although I appreciate the effort put into Micropython and the Pyboard, I personally wouldn't go in that direction given the low cost of the Raspberry Pi and especially the Pi Zero which can run full CPython or Pypy. 
Hah, great work! I'm building [`harold`](https://github.com/ilayn/harold) to do all these in point 1 in native Py3. Let me know if you are interested I'm really looking for control people in Python
Used an esp8266 the other day to build a wifi based BBQ smoker thermometer. Unfortunately it would lock up after running for several hours with a 5 second refreshing of the data. Went back to node MCU and while I lost math.log() and had to implement my own, I gained a much harder to implement elegantly end user setup page. Micro python felt a little bloated, and the tools and documentation a little scant. Esplorer was having transferring files with string templates so I was having to manually flash/update my python files one by one, line by line. Also importing my modules didn't seem to work correctly and after boot scrips are run, their functions are not available from the REPL without reimporting them. And I use python daily, might even call myself a fan of the language.
Are you aware of [Lantz](https://lantz.readthedocs.io/)? It's pretty awesome.
PyPy with CPython 3.5 currently building only for Linux x64 (because this can make developers just develop software, and do not mess with platform-specific options). There's win32 version for standart PyPy with CPython 2.7 support thought
Funny; if I think about it I've barely used any of the cheatsheets I've found for other projects. They're most useful for introducing me to other functions in the family of ones I'm already familiar with and giving me a head-start on what to google or where to look in the docs.
Honestly, I'd say no. It's outdated, and there are better resources now. For example, I would suggest doing a month (or more!) of the Team Treehouse [Python track](https://teamtreehouse.com/tracks/learn-python). It's fantastic, current, and can be done all in the browser if that's how you like to do things. It teaches important programming concepts alongside teaching Python syntax, and it's hosted by my second favorite TTH host, Kenneth Love.
I oicked up one off pimoroni. Combined it with a few other items to make it worth the shipping cost. Incidentally, this was right after the Brexit vote when the euro had dropped so certain Adafruit items they carried actually cost less than the US version :-)
I did this in Python 2.7, the target is teaching how to use surfaces, classes &amp; Python stuff after Scratch. What do you think?
I used the imaplib and email modules, https://docs.python.org/3/library/email.html once you have the connect and have set the folder, do search to retrieve the messages: typ,data = mail.search(None, '(SUBJECT "Email subject I'm looking for")') for num in data[0].split(): typ, data = mail.fetch(num, '(RFC822)') text = data[0][1] msg = email.message_from_string(text.decode('ascii')) for part in msg.walk(): if part.get_content_maintype() == 'multipart': continue if part.get('Content-Disposition') is None: continue filename = part.get_filename() data = part.get_payload(decode=True) if not data: continue f = open(os.path.join('/home/username/directory',filename), 'wb') f.write(bytes(data)) This was the code I found to pull out the attachment. Don't really understand it, but it's walking through all the parts of the message until it finds the attachment part.
32-bits is dead in the water as far as your average enterprise/data science stack goes, unfortunately.
Resolution should not be a problem - at 25-30 Hz refresh rate :-/ I am more concerned that there are no ARM drivers for the tracking. OpenHMD still needs to link to some binaries, which are x86 only, I am afraid.
I honestly don't understand how someone can learn *anything* with this approach. Isn't the best way to learn to figure stuff out by yourself? 
I... I've made a huge mistake
As you would already know Luigi does not have a Scheduler as compared to Airflow - it would be better if you wrote something on your own using APScheduler python packaga..
One of the most upvoted posts on this subreddit of all time is a post suggesting that book gets removed from the sidebar. It did.
I'm not using python 2 only
Yes, but it will be not faster (because NumPy implemented in C mostly)
I should let the thread die, but this is my final attempt to explain my point of view: My reply clearly assumed that any kind of meaningful project would be OK to share as long as it was educational or clever enough to be shared. Using Javascript against Python was a very big drawback, but I my mind, worthy enough IF the effort is made by a) A student (self-taught must say), and b) if solves a problem in a interesting, unusual way (see post /d8kdlsm). I was horribly wrong since people only wanted to share python stuff regardless of the scope of the project (again see post /d8kdlsm), not even reading what others have to say about it. I did indeed, explained WHY and WHERE 1296 comes from, in fact, is the very fist link that appears in my original reply, AND the very fist thing that is written in the Github repo where the my code is hanged. If all of you guys took the liberty to check any of those said links (which obviously you didn't), it would be perfectly clear where this 1296 number comes from. Anyway, I'm gonna explain again where this number comes from: "There is a one in 1,296 achieving a one-roll Yahtzee." So my hackerman solution is to compare a random control number (1), against a random generated number between 1 and 1296. a = Math.floor(Math.random() * 1296 + 1); Since I did a full perfect simulation that took +100 lines of code to get the same results (https://repl.it/lhS/1), figuring the key factor of the problem and solving it in 1/10 of the size, look worthy enough of this thread. It does reads "what are your proud python projects?" anyway. And yes,I already knew it was doing wrong when I posted it because Js. Should have followed my gut. That's it. That's the big deal. But again: thanks everyone anyway.
Jupyter is a rebranding of ipython since ipython decided to focus on multiple languages. Ipython started as a more featurefull Python shell/repl(read eval print loop), if you haven't tried this before it's a very useful form of interactive programming, you type various Python expressions, classes, functions and get the results back immediately. The ipython shell was written by scientists and scientific programming places a premium on exploration and visualisation of data, so they added a workbook environment like MATLAB where you can evaluate Python expressions, visualize them with inline graphs, and add presentation noted(in markdown or latex). Since this workbook feature was useful for many languages and ipython was already fairly abstracted between front-end/back end they added support for other languages and renamed the project jupyter.
I like pypy. It's "interesting" and very exciting from an 'ooo cool' tech. I'm really excited for STM and I truly hope that Pypy can stand on it's own against Python3 in the near future. Right now it cannot. If you're stuck in Python2, then it makes sense that you'd reach out to pypy. It can help move you past a few at scale problems by improving your vertical. But, if you're using Python3's syntax within Pypy, then you're clearly not using the modern version of Python3, because it's not supported. I think it's disingenuous to push people towards an interpreter because of a personal bias rather than an analytical reasoning and a set of bullet points on how Pypy actually improves performance of your app or workflow or both.
It looks valuable for people learning how to program. Any particular reason why you chose Python 2 over 3?
Yeah that module sold me on sticking it out and learning a little bit of Lua. 
I thoroughly enjoy that our projects are adjacent to one another in this thread (literally). Huge fan of pywebview, by the way!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
$65 for us that work in academia. 
Thank you so much! Yes, i've also worked with BeautifulSoup but I'll definitely check out Pushbellet/Pushjet/Simplepush. I'm gonna take a look and get back to work on what I've got. Hopefully I'll have something to show for it soon. You've been a great help, much appreciated!
Try [Warehouse](https://github.com/pypa/warehouse) - it's not feature complete yet, but is fairly stable and runs as a Docker container, so you can deploy it on just out anything. 
yes actually to measure my inet speed! https://notebook.thrive.to/tutorial/jGfajkinD32ovC2k4 
Have you tried looking at the line that the interpreter says contains the syntax error? λ python thing.py File "thing.py", line 3 &lt;--- line number 'b': 2} ^ SyntaxError: invalid syntax
Thanks, I found the error. It was so simple. I was just so tired that I couldn't see it. 
define bot
You probably should turn off the debug console
If you're looking for something to be used by users other than yourself, consider using Flask. Flask has built in functions for uploading files in a secure manner. I've used Flask for doing a very similar task (that is, uploading a user file, doing work on it, then serving the new file), and I had it set up in no time. Of course, Flask can also handle most other security measures you can throw at it, and it's all pretty easy to set up. 
Also, this is an /r/learnpython question. Also, please don't ever use `eval`.
[deleted] ^^^^^^^^^^^^^^^^0.0641 &gt; [What is this?](https://pastebin.com/64GuVi2F/32109)
If you're doing written test then you should be studying with pen (pencil) and paper. Run the code once you think you have the correct answer. Depending on the result, you will verify that you did it correctly or you will be given detailed information on what went wrong. Take note of went wrong and be sure to avoid that in the future!
Is running ffmpeg in a subprocess an option? It can probably take a stream as input and I know it can output to a stream. Converting files is as easy as ffmpeg -v error -i source.mp4 -f mpegts result.ts Adapt arguments as required for your streams. I'm using ffmpeg via subprocess.Popen to convert any audio file to a PCM audio stream and that works great. Failing this, I'm pretty sure VLC is made for jobs like this (converting streams) 
One simple improvement is write line of code, and then comment of what result/change it makes.. you can then step your code in debugger and see where exactly you fail.. 
Why scrape these instead of using the [API](https://developers.google.com/drive/v2/reference/)? I see pretty often people wanting to scrape something that has an API (and maybe for some reason the API doesn't meet your need), but generally I would suggest people to check if an API exists before taking on a scraping project unnecessarily :) In most cases it will probably save you some time.
If you learn by thinking and experimenting, it's a good book. if you learn by rote, it's a bad book. However it's Python 2 so it's no longer ideal.
Codeacdemy is mostly python 2. I can't recommend it.
Codecademy is mainly 2.x. I personally no longer recommend it until they modernise.
I have tried the API, but I really couldn't make it work... It's something on my end I'm sure, but I just can't figure out how to use it.
I think not, I was trying to download a certain file, periodically, and take a picture of it and send it to another service. Currently using a Windows Phone, so yeah, I wanted to access that screenshot easily without having to use the browser. Anyway, I got it working by using a program to move the mouse on my computer, which obviously isn't very versatile or future-proof, but...
 TREES.MODEL_SCALE_X = TREES.MODEL_SCALE_Y = TREES.MODEL_SCALE_Z = TREES.MODEL_TRANSLATE_Z = Math.random()*3+1
Is there a reason you are using the Windows 3.1 "Hotdog Stand" theme? quick edit to include a screenshot for all the youngsters that weren't around to experience this theme in all it's glory: https://i.imgur.com/QLmx6mt.png
[deleted] ^^^^^^^^^^^^^^^^0.7876 &gt; [What is this?](https://pastebin.com/64GuVi2F/82745)
The email validation form accepts a@b.com
BeautifulSoup is good for parsing arbitrary HTML; however, if you need a quick, parallelizable, compact scraper, I recommend [Scrapy](https://scrapy.org/). 
[removed]
I'm sorry to say it but I got so sick of seeing this "new" `&gt;&gt;` operator abused recently. Every second new library has it. Other than that `tco` is pretty cool.
this way you're creating a list with 4 attributes and tries to assign random number to this list. You can use `setattr(class, attribute_name, attribute_value)` here: for attr in [ 'MODEL_SCALE_X', 'MODEL_SCALE_Y', 'MODEL_SCALE_Z', 'MODEL_TRANSLATE_Z', ]: setattr(TREE, attr, value) 
I'd re-think your color theme a bit - I think you could make it look much prettier without too many changes.
Or you could just spend 5 minutes learning xpath and us lxml directly. Same amount of code, less dependencies.
It's actually a fun small book, even with the click-bait title :p
I'm sure it is. Those are very useful modules I hope they're more common than they think haha. 
Sounds like a plan then! :) Security wise, what do I need to think about since I'm receiving text files from users and, sadly, ill-intentioned hackers? I've been shared this link which seems to be useful but it might be heavy to implement: https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=35979419 
There are a few links across the bottom of the page. Not sure if there are any others.
Security is a weird one. I mean, there's a chance that even if you follow all security standards and have everything locked down tight, someone might find away around it tomorrow and all that security won't be worth anything (a very unlikely case, but you get the idea). But I digress. I'd say if you follow a simple set of standard security measures for uploading files (and possibly dealing with SQL security if you decide to set up your site that way), then you're set. I'd recommend taking a look at this tutorial http://flask.pocoo.org/docs/0.11/patterns/fileuploads/ It should give you the bare bones for secure user uploading via flask. I'll also point out that flask has a security module that can handle a lot of the little things that might make your site vulnerable (just be sure to adapt it to uploading to S3, which isn't much of a hassle). 
something like leaving comments on forums. 
Amazing! I'll be sure to check all that!
I found a cheap one at a thrift store that looked like it had 433 hardware in it. It wasn't worth unsoldering to deal with. The probe also looked like a one wire system. Right now I have a few Type-K boards and the 2/3/4 wire RTD shield, but nothing Wireless.
Arg, this is what annoys me about Python: "There should only be one way to do something" gets thrown out the window when you look outside of core. Having worked as a controls engineer in industry for the last decade and knowing controls engineers, most of them are pretty basic when it comes to a lot of computer stuff. Launch Matlab. "```tf()```" and my boss is happy. Well just: pip install harold, control, etc import .... tf(). The difference is lost on a lot of Python people. What direction do you see ```harold``` going? Off the top of my head "Controls Tutorials for Python" training classes should sell like hotcakes to likes of GE, The big 3, etc. I see it's MIT which would satisfy the crazy legal requirements at one company I worked for. I've been meaning to go back and redo some of my controls work in Python in my 'free' time. It's funny you linked to the MIMO stuff, I had that class and had been looking to do that in Python. Redoing it in Jupyter notebooks with ```harold``` done right and some Youtube videos should be enough to get a lot of people to jump ship. That matlab-python transpiler is 2-3 weekend hackathons away from converting a good chunk of Matlab to Python. (Another profitable place in industry, eliminating technical debt).
Looks like [someone already has](https://www.reddit.com/r/programming/comments/56qwqk/free_programming_ebooks/d8m06bf) Or in the time it took me to reply to you, /u/ryokimball made a script to download them all.
Cool, thanks! Python script to DL them all (i've only tested pdf filetypes) (requires BeautifulSoup library) (Gotta copy/paste the source code to the [Oreilly page](http://www.oreilly.com/programming/free/) or modify the source to automatically do so, since I only coded it enough to be convenient for me) I think that's all the caveats. Here you go: #!/usr/bin/python3 ######################################################################## ## Do you want EPUB, PDF, or MOBI? filetype = 'pdf' # Change to EPUB or PDF ######################################################################## ## Copy/paste HTML source here because I'm lazy html_doc = """ HTML SOURCE CODE GOES HERE """ ######################################################################## import urllib try: from bs4 import BeautifulSoup except ImportError: print("Install BeautifulSoup!") soup = BeautifulSoup(html_doc, 'html.parser') print("Starting...") for link in soup.find_all('a'): if("popover" == link.get('data-toggle')): dl_file = link.get('title') + "." + filetype # print(dl_file) dl_url = link.get('href').split('?')[0].replace("/free/","/free/files/").replace("csp",filetype) print(dl_url) try: urllib.request.urlretrieve(dl_url, dl_file) except: print("~~~~~~~Trouble with this one. Skipping~~~~~~~") 
Wait — how did you know my email! Did O'Reilly give it to you? /S
Oh, I already did so before I responded to you. I just didn't share because I feel like people should be practicing by writing their own. (I used requests and BeautifulSoup to do it in 14 lines, including multithreading it)
There is Paho for mqtt which is about a simple of pub/sub as you can get. 
I've seen this pop up several times lately. It makes me wonder if O'Reilly isn't trying to use Reddit for marketing. If they are then I'm a willing accomplice. Have an upvote for sharing great resources. I'm a big fan of O'Reilly. Their eBooks are DRM free and the content quality is excellent. 
If all you need to do is perform "Asynchronous background Tasks", why would you need to include Flask and/or Celery (and/or RabbitMQ, which your approach also relies on). Why not just spawn new processes using `multiprocessing`? I mean, it's not like you're handling failures in any of these components anyway, so at least simplify as much as possible.
These are called "webhooks". Feel free to google for myriad libraries to accomplish this.
If the game is turn-based, why does there need to be anything asynchronous at all? Presumably while player 1 is making their turn, player 2 is blocked from doing anything. A simple procedural approach (read: a loop) seem sufficient.
I grabbed the unmodified URLs at once, then made the base modifications needed. I created a generator with itertools.product to provide pairs of (base URL, extension), which I wrapped in an iterator that combined them into a single string. Then I wrote a function that used requests to write it to a sensibly named file after completing the entire request (reasonable since i knew all these files were fairly small so they'd fit in memory with no problem). Then I fired up 4 threads and just checked that there were still enough ongoing requests every 100 ms or so until I exhausted the URLs. Then I waited for the rest of the threads to finish and wrapped up. This is only really possible with threading in Python because most of the time my program is waiting for network or disk, both of which release the GIL. But honestly, multiprocessing would have been easier since I could just start up a pool and run pool.map(save_url, urls)
How did you hack MY email address from me?! 
The real LPT is always in the comments! Thanks!
What it sounds like you might be after is something like [CGI](https://docs.python.org/2/library/cgi.html). You can host your own website (on AWS for example) and use a button that will call the CGI script. 
Not sure why you would want to do this but you can try and look at this: https://github.com/micropython/micropython/wiki/Getting-Started. These are the supported systems. You could run make to find all the necessary packages based on the errors. 
I went through the index, and didnt see anything related to encryption. 
They are working on pypy 3.5 support, but that only just started a few days ago, so I would expect many things to not work yet. However, if enough things work for you then go for it.
Think I was mistaking it for another book I've got. Will try to dig it out and get back to you.
It depends if the parts of numpy you use are supported yet, the best thing to do is give it a try.
Thanks c:
Excellent! One of the things I love about Python is that it is a great language for beginners - but also a great language for experienced professionals. Do you think it would be possible to make Thonny a great IDE for beginners as well as a useful tool for professionals - and without making it any less friendly to beginners?
To DL them all with bash: wget -O- http://www.oreilly.com/programming/free/ | tr '"' \\n | grep http | grep free | cut -d "?" -f1 | sed 's/free/free\/files/' | sed 's/\.csp/\.pdf/' | xargs wget -P ebook
dont forget the other groups of free books. wget -O- http://www.oreilly.com/data/free/ wget -O- http://www.oreilly.com/security/free/ wget -O- http://www.oreilly.com/business/free/ wget -O- http://www.oreilly.com/web-platform/free/ wget -O- http://www.oreilly.com/webops-perf/free/
Just change PREFIX when you configure if you're worried. 
I extended your scraper a bit. It now checks whether the ebooks are new (found inside defined path) and downloads them using requests. #!/usr/bin/env python3 import re import itertools import os import requests from pprint import pprint path = '.' # put path where you save your ebooks here! def grep_oriley(): data = requests.get('http://www.oreilly.com/programming/free/') pattern = re.compile('http://www.oreilly.com/programming/free.*\.csp') urls = pattern.findall(data.text) endings = ['.pdf', '.mobi', '.epub'] combinations = (url.replace('.csp', ending) .replace('/free/', '/free/files/') for url in urls for ending in endings) return [x for x in combinations] def filter_known(links, path=path): files = os.listdir(path) ebooks = [x for x in filter( lambda x: x.rsplit('.', maxsplit=1)[1] in ['pdf', 'mobi', 'epub'], files)] ebooks_new = itertools.filterfalse( lambda link: link.rsplit('/', maxsplit=1)[1] in ebooks, links) return [x for x in ebooks_new] def dl(links, path=path): os.chdir(path) for link in links: name = link.rsplit('/', maxsplit=1)[1] # extract filename resp = requests.get(link, stream=True) if resp.status_code == requests.codes.ok: with open(name, 'wb') as f: for chunk in resp.iter_content(1000): f.write(chunk) else: print(resp.status_code) if __name__ == '__main__': links = grep_oriley() links_new = filter_known(links) if len(links_new) == 0: print('No new ebooks!') exit() pprint(links_new) while(True): confirmation = input('start download? ([y]/n): ') if confirmation in ['y', 'Y', '']: dl(links_new) break elif confirmation in ['n', 'N']: break 
I improved on your code, I wanted to download all the free ebooks in other areas too e.g data, web dev. I wanted the files to be downloaded by python (because I am on windows). I also wanted to downloaded the files in folders for the subject and again in subfolders for the specific book (so all formats of a book are in a single folder). Also I added the feature that it will only download files that have not yet been downloaded (or re-download if they have changed) so you can run the script again in the future and only download the new ebooks. import re import os import requests def download_file(url, download_dir): # http://stackoverflow.com/a/16696317 local_filename = url.split('/')[-1] file_dir = "".join(local_filename.split('.')[:-1]) # NOTE the stream=True parameter r = requests.get(url, stream=True) os.makedirs("./{}/{}".format(download_dir, file_dir), exist_ok=True) file_save_path = "./{}/{}/{}".format(download_dir, file_dir, local_filename) # If file is fully downloaded don't redownload it # This can also can update when a new version is published if local_file_size(file_save_path) != get_file_size(url): print("Downloading file") with open(file_save_path, 'wb') as f: for chunk in r.iter_content(chunk_size=1024): if chunk: # filter out keep-alive new chunks f.write(chunk) #f.flush() commented by recommendation from J.F.Sebastian else: print("File already downloaded") def download_all_from_urls(endings, urls, download_dir): combinations = (url.replace('.csp', ending)\ .replace('/free/', '/free/files/') for url in urls for ending in endings) for combination in combinations: print(combination) download_file(combination, download_dir) def get_urls(dl_type): data = requests.get('http://www.oreilly.com/{}/free/'.format(dl_type)) # Other URLs # Don't worry, I'm not _parsing_ html with regex. Merely scraping it. :) pattern = re.compile('http://www.oreilly.com/{}/free.*\.csp'.format(dl_type)) urls = pattern.findall(data.text) return urls def get_main_urls(): "A function to get all the pages that have free ebooks on" data = requests.get('http://www.oreilly.com/programming/free/') # Just match the name not the whole URL pattern = re.compile('(?&lt;=oreilly\.com\/)(.*)(?=\/free\/)') urls = pattern.findall(data.text) # Remove duplicates urls = list(set(urls)) return urls def get_file_size(url): "Read the length of a file from the file header it is in Bytes" response = requests.head(url) return int(response.headers['Content-Length']) def local_file_size(path_to_file): "Return the file size in bytes and 0 if not exist" try: return os.path.getsize(path_to_file) except: return 0 file_types = ['.pdf', '.mobi', '.epub'] download_types = get_main_urls() for download_type in download_types: urls = get_urls(download_type) download_all_from_urls(file_types, urls, download_type) 
There's also [this post](https://www.reddit.com/r/learnprogramming/comments/556kxj/oreilly_offering_programming_ebooks_for_free/) from last week that has direct links to all of their free books (at least from that time).
thanks!