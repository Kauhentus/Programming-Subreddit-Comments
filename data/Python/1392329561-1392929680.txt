Sure. I don't know how much you know about the memory model of modern computer hardware, so forgive me if I go too basic. CPUs maintain a small, fast cache of recently (or suspected soon to be) used memory, both data and instructions (code). When your data fits inside of this cache, operations are orders of magnitude faster than if the data must be fetched from main memory. To understand just how significant a cache miss is, with real numbers, [check out this paper](http://www.akkadia.org/drepper/cpumemory.pdf). I was actually mistaken in remembering that slots helps with performance in that way (it may, but I don't have evidence for that). What I was remembering was [this video](http://youtu.be/HTLu2DFOdTg?t=42m) where Raymond Hettinger talks about the flyweight design pattern in the last few minutes. He also talks a lot about keeping data small to fit in the L1 data cache, and I mixed up the two. Edit: the reason I specifically mentioned loops was when you're operating on the same data using the same code over and over, the difference between being in or out of the cache is magnified.
I did not know that, but That doesn't really answer my question, can the python pickle module be made safe by explicitly listing the classes you accept, so you don't deserialize some random object that does something bad? edit: it seems that http://docs.python.org/3.4/library/pickle.html#restricting-globals sorta does what i am talking about, but It should be made easier i feel edit 2: about the java XMlSerializer thing, its part of the 'apache' namespace, so im not sure that comes with default java, and the whole Serializer interface is deprecated anyway according to the api docs
in my python.framework directory all it says is 2.5
This is an interesting visualization of Python's evolution: [code_swarm - Python](http://vimeo.com/1093745) The community explosion in 2000 is just incredible, but more incredible is the tremendous initial effort from Guido and other core developers.
Makes sense. Thanks. I'll have to do a bit more reading on the subject. It seems rather difficult to keep that sort of thing in mind when writing python - where you don't have to really deal with memory directly. Im not even sure how I'd detect a cache miss programmatically, or if that is even possible. 
It's pretty good.
This is very illustrative! Thanks!
Named tuples anyone?
Easier than Linux? I doubt it. There's nothing nearly as easy as `apt-get install python-numpy python-matplotlib` on W32.
I really don't get why you were downvoted because you are right, there's a specific way to get virtualenvs and pip installed and working properly that is not obvious like it is in Linux.
I have being using Python on Win (pywin32, ctypes and COM) for the past 6 years. Can confirm, sounds worse than it really is. Just learn to love binary installers for those packages you need (there is an AWESOME place on the internet with most of them, sadly I'm on my phone, not at work, so I can't share the link). If pip install fails, search for the .exe installer.
How do you upgrade you Python version?
Develop in a VM, please. For the love of anyone that may have to support you.
As far as I can tell, Python was always more popular than Ruby, except for a short period when Rails exploded, and then fizzled. Python also started a few years earlier, so it had a head start, and it was less confined to a country like Ruby was in Japan early on. There are countless factors that you could try to analyze. But you can't really know for certain why many thousands of programmers over ~20 years developed a preference for one language somewhat more than another. Everyone has different opinions and motivations.
+1 for pymssql. Python3 support is fairly recent, but works.
Sorry, but that was the website that helped me get python, pip, and virtualenv up and running less than a month ago on 2.7 with low amounts of frustration after hours of searching, I don't plan on recommending anything else.
This is pretty awesome, hand't seen the present tool before. I happen to have a project I'm working on that this will work great for, thanks! 
Big Brother has dumped tons of cash into Python. That's what I think accounts for the most recent surge in python's popularity. It's a good language. You should give it a fair shake. Full disclosure: I've been using python professionally for several years - and recently started using RubyMotion, which I like a lot. I
&gt; What do you mean by your statement that Python has surpassed Ruby in popularity? As far as I know, Python, which predates Ruby, has always been more popular than Ruby. Dang, this was cold.
Additionally, you might want to checkout http://www.py2exe.org/
Easier to just install mingw.
You can find a large collection of pre-built C extensions at http://www.lfd.uci.edu/~gohlke/pythonlibs/
Bleh... packaging something for the cheese shop is a pain. However, the best UIs for python packages is always a web browser. (protip: develop on a server, make people interact on a web browser)
&gt; What am I overlooking? Maybe you attend too many Ruby meetups. Yes, python meetups are fewer.
&gt; As far as I can tell, Python was always more popular than Ruby, except for a short period when Rails exploded, and then fizzled. ...and all the trend-hoppers have jumped to Node.
Similar approach: http://andreacensi.github.io/contracts/api.html#using-functions-docstrings
&gt; with a bonus that can tie virtualenvs to different versions of python What do you mean by this? virtualenvwrapper works with different versions of python for different virtualenvs...
NP, while heroically multitasking I accidently ordered the python 3 version when I really wanted the python 2. So, then I separately ordered the Python 2 version. Which was more $ than getting the package deal. So, a sufficient amount of incompetence may make up for some piracy.
In regard to package management, I've recently started using Anaconda and it's "conda" command line tool instead of virtualenv and pip. It has advantages with some of the difficult binary packages and even lets you run multiple python versions alongside each other. Very nice indeed.
I'm guessing the person who told you that writes Go
PHP was his favorite language, he said.
You should create the range outside of the timer. Memory allocation takes time too. For all you know it triggers swapping. I think a purer example would be random accesses of a long list versus linear ones. 
The smaller the community or the more "pure" the language, the fiercer the passion. Same with anything, really. 
On XP at least (resolved to be my last version of Windows), redirecting to stdin doesn't work at all when you launch a script by file association (such as from PATH). You need to invoke python.exe/py.exe with the path to the script. I don't know if that issue is fixed in later versions or how it plays with Powershell.
Is there a platform capabilities detection for python, instead of relying on a single platform string detection)? It is interesting how HTML5 has moved away from OS detection and towards feature detection but compiled applications haven't.
&gt; [Namedtuples seem to be surprisingly slow in CPython.](http://lukauskas.co.uk/articles/2014/02/13/why-your-python-runs-slow-part-1-data-structures/#comment-1242618646) Frankly, I'm shocked and appalled. 
I'm coming to Python from Delphi, where for the 100th time corporate-appointed "MVPs" and "Team B"ers (B standing for the old Borland) are attempting to convince concerned forum members that the TIOBE index doesn't mean anything at all and Delphi isn't in decline. During the last several months there I've been told that modern language features are all "fads", that type inference was "impossible" and then just "the computer guessing", functional programs only look shorter because of "tricks" and they're all just hiding their code in another module, slice notation was impossible to read and "a complete mystery" as opposed to "Copy(someArray, 1, 10)", the desktop PC market isn't in decline, it doesn't matter than the last commercially published Delphi book was in 2005 because since then two books have been self-published, if Delphi is obscure it makes it "a secret weapon", that Delphi has had more influence on business than Python ever has (since I've become passionate about Python you wouldn't believe the whoppers that have been lobbed at Python), C# users believe there's more code reuse in moving to Delphi and using its desktop/mobile solution than in using Xamarin's C# for mobile (chief evangelist couldn't explain this statement to me), automatic memory management is for lazy, stupid programmers, garbage collection is too slow and Java is impossibly slow (despite the reality of Java creaming Delphi in SciMark), reference-counted mutable strings are superior to immutable strings, strings need to constantly carry around their Unicode encodings with them, ANSI strings are vitally necessary (shades of the Python 2.x holdouts) and that Delphi in fact needs to keep its four (!!!) string types, despite Delphi using different ways of checking for membership in sets, dictionaries and strings "it's still consistent" because sets were in the language before dictionaries (???), it's a perfectly acceptable practice to intentionally import a unit with a namespace collision to replace a default type because it's easier than subclassing it and importing it into Delphi's component pallet (this from a guy with a Phd), Delphi should never warn the user of namespace collisions because that's an intentional feature of the language and a valid feature should never be a warning (Delphi is bassackwards to Python in that units decide what they export and what the names are and the only way to use them is to import the entire unit), and that Delphi doesn't need an arbitrary precision integer unit because some Russian guy posted code for one on his blog in 2010 and "it probably still compiles". When complaining about Delphi's DateUtils Unit not even using object orientation (and representing date-time values as a floating point!!!) I was asked indignantly is I was so lousy a programmer that I couldn't implement all the classes and functionality myself. It's not a problem that Delphi has no HTML parser because you can buy one for only 100 Euros with source (many things built into Python cost $75 to $300; I think the only Delphi programmers left only build things to sell to other Delphi programmers). And I won't get into the fact that Delphi blog posts/talks in the last few months have had to include topics such as explaining what DVCS is (Delphi only natively supports SVN, and even that for only the last few years) and why unit tests are important (Delphi has no native unit testing but its IDE interfaces with an open source library that hasn't seen a commit since 2010). And there are still a few users who swear by dBase and Paradox files as data storage formats, with obscure, proprietary Delphi only databases also being popular. There was an actual study about this subject when it was observed that old Blackberry users had the highest user satisfaction rating! Part of it is selection bias - everyone less than thrilled have already moved on - but scientists also determined there was Stockholm Syndrome at work. Not wanting to face the reality of their bad situation or not wanting to admit they made a bad choice, the worse things get the more these people concentrate on the positives and ignore the negatives, resulting in the high satisfaction ratings. There's also a bit of "siege mentality" going on where they consider themselves "under attack" and thus the product needs to be defended, loyalty needs to be proven, etc. It's honestly so bad in Delphi-land that not only did I read one person's tale of quitting his job and taking another at half his former salary when his company was taken over because they were going to stop using Delphi and he'd rather take a 50% pay cut, but due to a misreading of a marketing item from a (generously) estimated 2 million copies of Delphi ever sold (and pirated) into 2 million active users they subsequently proclaimed themselves "the largest Windows development base outside of Microsoft's tools". When I brought up the little bugaboo of Java I was told by one True Believer that "no one writes Java code for Windows" so Java doesn't count. And then one curmudgeon suggested it's not impossible that there are indeed more Delphi programmers than Java programmers! (Although I suspect that was done to drive me insane). One (former) user has told his tale of being frightened to start over again at 50 (I've seen Delphi salespeople use this line in blogs to scare users into not wanting to give up their experience) and got called "grandpa" while beginning a new job using C#. He was uncomfortable and afraid and really wanted to go back to Delphi. The good news is that he stuck with it and the team he was leading was the only one to get a year-end bonus for having their project on time and no one calls him grandpa anymore! Now he's telling people it is possible to switch and how happy he is for having done so - and of course is treated like a traitor and a villain by some. :-( Needless to say I'm working on my own Saying Goodbye to Delphi essay in favor of Python. :-) Sorry to dump all that here, but for the last several months I was trying to get Delphi believers to talk me out of learning/using Python after I came across it while helping to compile a survey of languages and DBs for two startups and becoming amazed by it. I finally realized no one could defend my old beloved Delphi (which I still defend as the best choice when I chose it for a start-up I worked at from 95 to 03). But during this time I saw an almost unbelievable amount of obsession and irrational defense when I began dialogs with the Old Guard of Delphi and began asking them "Why don't we have this and this and that?" For anyone that doubts your post, I can provide hours of testimony that it's all true in spades. 
You're not thinking like they do. It's like being in a gang, a religion or a cult. If your language was never in the top three then you were the underdog and constantly "under siege" and you had to promote your language as much as possible. It was a latter of loyalty to refuse to use anything else because everything else was inferior. If your language doesn't do mobile or web you simply don't program mobile or web. If your language isn't there then it's all just fads anyway. There's nothing to learn from other languages because your language is RIGHT and the other languages are WRONG. Why learn other languages when you already KNOW that there's nothing you can't do simpler and easier in your One True Language? You may have even tried another language for 10 or 20 minutes and went back to One True Language because you weren't more productive in those 20 minutes. Besides, you've encountered users of these other languages on the Internet before and they're all stupid for not having seen the wisdom of your arguments for One True Language. Who wants to use a language that's filled with stupid people? The only reason their languages have all those bells and whistles is because they're too stupid to do everything manually like you do. When you do in 50 lines of code what they do in 10 that just shows that you're smarter than they are and less lazy. They could never have figured out how to do it in One True Language like you did! The harder the language is to use, the smarter the user must be. Just ask Slackware Linux users. Unless One True Language doesn't run on Linux, in which case no one needs anything other than Windows. 
I'd like to add: while Python rocks the scientific community, Ruby is used extensively in system administration. http://devopsanywhere.blogspot.com/2011/09/how-ruby-is-beating-python-in-battle.html http://www.talyarkoni.org/blog/2013/11/18/the-homogenization-of-scientific-computing-or-why-python-is-steadily-eating-other-languages-lunch/ Sorta interesting.
Absolutely disagree. We're seeing an explosion of new languages and Dr. Dobb's shows quite plainly that people are using more languages than before: http://www.drdobbs.com/mobile/the-quiet-revolution-in-programming/240152206 &gt;However, during the last 24 months, the sheer volume of change in the computing &gt;paradigm has been so great that programming has felt its imprint right away. &gt;Multiple programming paradigms are changing simultaneously: the ubiquity of &gt;mobile apps; the enormous rise of HTML and JavaScript front-ends; and the &gt;advent of big data. &gt; &gt;The greatest effect these changes have had on software development is the &gt;requirement of multiple languages. Web apps, by definition, are multilanguage &gt;beasts. Many mobile apps require more than one language; and even if they can &gt;be written in one language, they often rely on a Web- or cloud-based back-end &gt;that's written in an entirely different language. And, of course, big data is written &gt;using all forms of specialized languages. We have had to become polyglots to &gt;develop almost any current application.
&gt; The days of .Net vs Java are long gone. I agree with your general point but every quantifiable measurement shows these two still dominating enterprise software development. &gt;Platforms win based on userbase and contributors, not dollars and marketing &gt;spend. MS and Oracle's might still enable it to foster the ecosystems necessary to build sustainable languages. It's the non-monopolies that have all but disappeared, still eking out a living selling $1000 proprietary languages to a graying customer base.
Okay, I was procrastinating so I wrote this: import time import random SIZE = 10000000 def timeit(label, func): t = time.clock() func() print "time for range:", label, time.clock()-t lst = range(SIZE) sorted_indexes = lst[:] random_indexes = lst[:] random.shuffle(random_indexes) def loop_over(lst, indexes): for i in indexes: x = lst[i] timeit("sorted", lambda: loop_over(lst, sorted_indexes)) timeit("random", lambda: loop_over(lst, random_indexes)) timeit("sorted", lambda: loop_over(lst, sorted_indexes)) timeit("random", lambda: loop_over(lst, random_indexes)) timeit("sorted", lambda: loop_over(lst, sorted_indexes)) timeit("random", lambda: loop_over(lst, random_indexes)) tmp$ python foo.py time for range: sorted 0.499554 time for range: random 2.3897 time for range: sorted 0.506257 time for range: random 2.386909 time for range: sorted 0.503017 time for range: random 2.32205 
&gt;I'm more excited when the tools actually work well; Coming to Python from a product that now has a $1000 minimum price tag and an 8 month bug support window and where the 2-year-old 64bit compiler still can't use a 64bit integer in a for loop and you're told to "just use a While loop instead" I do the Dance Of Joy whenever I see anything in Python actually work! :-) (I do a lot of dancing lately; so glad no one can see me do it). There the True Believers don't consider it a bug or at least worth complaining about so long as a workaround (including writing tens of line of code) exists. As one True Believer put it in response to a complaint about yet another bug: "There are those who complain about problems and those who do something about them." (Note said language is commercial closed source). &gt;Or worse, having to spend time building the tools in the first place. Try a language whose DateUtils module uses a floating point to represent datetime(!!!) and no object orientation in the whole unit and being asked when I complained if I was so bad a programmer I couldn't just write all the classes I wanted myself. Imagine a recode datetime function with no optional parameters in a language with no named parameters that requires any unused values in this function to take the enum "RecodeDateTimeAsIs". So to change the year, month and hour (without using three separate functions) you'd need to write: RecodeDateTime(someDateTime, 2014, 2, RecodeLeaveFieldAsIs, 12, RecodeLeaveFieldAsIs, RecodeLeaveFieldAsIs, RecodeLeaveFieldAsIs); And **that** is why I LOVE PYTHON. :-) :-) :-) If Guido Van Rossum tells me to bleed, **I will bleed**. He and Raymond Hettinger's wonderful videos have freed me from encroaching insanity and rekindled a love of programming again which I'd basically walked away from for 3 years. P.S. Don't show the above function to the fellow who wrote Requests or he might collapse. Oh, said language just got a native REST library in Sept. 2013 and if you *did* want to kill him just show him this code I snipped from their official code sample that gets an Auth Token from the Google Tasks API: http://pastebin.com/c32kDhnC
Here's another program that shows it vividly: import time import random SIZE = 10000000 def timeit(label, func): t = time.clock() func() print "time for range:", label, time.clock()-t lst = range(SIZE) sorted_indexes = lst[:] random_indexes = lst[:] random.shuffle(random_indexes) def loop_over(lst, indexes): for i in indexes: x = lst[i] timeit("sorted", lambda: loop_over(lst, sorted_indexes)) timeit("random", lambda: loop_over(lst, random_indexes)) timeit("sorted", lambda: loop_over(lst, sorted_indexes)) timeit("random", lambda: loop_over(lst, random_indexes)) timeit("sorted", lambda: loop_over(lst, sorted_indexes)) timeit("random", lambda: loop_over(lst, random_indexes)) tmp$ python foo.py time for range: sorted 0.499554 time for range: random 2.3897 time for range: sorted 0.506257 time for range: random 2.386909 time for range: sorted 0.503017 time for range: random 2.32205 But unless you are dealing with a large number of items that are very similar, as in this example, it is really hard to do very much about cache effects. You just want to preserve memory and try to deal with data close to data that you've dealt with recently if possible. So instead of traversing a long list 10 times, do 10 things to the same data element all at once. Then that element will be in cache.
Ugh, that is what I've been trying to do on my project. I gave up on trying to find a good python library for SSH on windows. I wasted a good week trying different libraries. I actually posted a question here on reddit, in the environment I'm building for people have to use an RSA token per login. So was trying to find something that could SSH in and run multiple commands per login. Then someone suggested just use a Linux shell and send the commands to the Linux terminal and bam, instant traction on my project. Windows, python, and SSH (from my limited experience) was a match made in hell.
I just thought I'd ask since you mentioned Fabric but is there any way to run more than one command per login with fabric? I got SSH working great with fabric but each login needs an RSA key so that isn't going to scale at all.
Not sure why they're getting down voted. This was my exact solution. :-( granted I'm a noob to python but in windows I wasn't getting anything done. On my Ubuntu vm stuff just works. Believe me I wish everything was as smooth in windows. &lt;\3
If you mean microssoft SQL server, the drivers are already included in windows, you just need a odbc library, which one exists (google for pyodbc) it uses the drivers on the operating system, so you can't connect to microsoft sql server on linux/mac unless you have some special drivers
link to Anaconda: http://continuum.io/anaconda
Links! Anaconda (full scientific distribution): http://continuum.io/anaconda Miniconda (just base python + conda): http://repo.continuum.io/miniconda/ 
sounds like a good case for a web app or? later you can build a mobile page and you only have to update the server side and not all the clients all the time?
Sounds like a good case for kivy. 
Please, don't use wxPython. It's horrible. One of the main things why I dislike it is that is has implemented it's own stdout which makes debugging (for example with `pdb`) horrible. 
ok noted thank you.
web2py perhaps?
Thank you, I was so hung up in the application space and what lib to use I forgot about web apps.
Thank you.
Salt and Ansible are both Python and are starting to gain ground in that world, too.
I like the way this guy writes
for example, but there are a lot of frameworks. a small one like flask or so should be fine
I guess what you're meant to take away from that quote is that you shouldn't study CS to become a programmer, you should study CS to become a scientist. Of course that flies flat in the face of how CS is generally sold to students.
Have you tried paramiko? I did and it worked fine on Windows. It was not a big project though and SSH usage was fairly low.
Are you doing anything in 3D? if yes then Pyglet. If no then Kivy for sure. 
You shouldn't poll a server, consider using EventSource to talk to the UI and PubSubHubbub/celery to subscribe to the server
I agree, this sounds like the kind of thing Kivy was made to do. Playing sound and flashing lights, displaying a task and a timer, pressing buttons: these are pretty trivial in Kivy. It helps that it compiles for windows, iOS and Android pretty easily.
Nicely done, always good to have variety and different options to choose from :)
There's some discussion about this at http://www.reddit.com/r/django/comments/1xtm24/wagtail_a_new_opensource_django_cms_focused_on/ Who's your friend, ShinyCyril?
I'm not sure teenagers (who haven't sought programming out on their own volition) are going to be very interested in socket chat protocols. It's a bit of a dry topic, and even a description of it will bore the kids. Don't you think they should start on something a little more conceptually accessible and creatively engaging?
As a Perl guy this hit me in the feels.
You should see the long winded rants he leaves in the Delphi forums explaining how they're all losers. Leo Tolstoy responded to one of his messages with a simple "tl;dr". However, I know a bunch of Delphi developers who are also big Python fans. Is this a direct result of Joseph's sustained, impenetrable logic? You be the judge.
By any chance, did you find a solution to this?
And I'm actually okay with that line of thought. I can at least respect it. But this was coming from a PHP programmer.
ARGH! Many thanks!
Kaedroho.
Another vote with kivy, I found it nice to work with.
I used keypairs on all hosts to authenticate. And something like: def function(): with settings(host_string='hostname'): with prefix('command'): with prefix('another command'): sudo('yet another command', user='username') I am somewhat a beginner and there might be a better way to do this but for what my needs are it works great. 
Edit: With "command" you mean a Fabric task or a command that is executed on a remote host? Isn't it possible to collect all remote commands in one Fabric task? Reading a bit more on Fabric connections and execution model it seems that the connections are closed when the fab tool exits: http://fabric.readthedocs.org/en/1.8/usage/execution.html#connections. Maybe you can try to use Fabric as a library and keep the connections open until all tasks are done (http://fabric.readthedocs.org/en/1.8/usage/library.html)? ~~I'm not an expert on fabric. From what i've read it sounds like a context manager could help?~~ ~~http://docs.fabfile.org/en/1.6/api/core/context_managers.html~~ Context managers don't work on connections.
Let me put it to you that I am an idiot with experience using Ubuntu and Windows to run python. I was completely unable to install BeautifulSoup4 in Windows but managed to do it with one line of code in the terminal in Ubuntu. Simply put Python in Windows is an unnecessary pain in the behind.
Well, your innermost `while` loop is doing something 10 times with a single row
Why Ruby was only confined to Japan? 
I don't understand what you're trying to do. The 4th column has the value from an array of what? Also, row[4] returns the 5th column, not the 4th.
This is 50% off today using the code "DEAL".
The array U is populated by finding the distinct values in column 4 (the fifth column thank you) So first it reads in the unique values, then it is trying to take those unique values and export 10 rows for each of those distinct values.
How can i re-structure this so that it exports 10 rows for each of those distinct values read into array U?
What I would suggest is going through step by step and following what your program is actually doing. Add print statements inside each loop and make sure the variables print what you expect them to print, especially around this area: for row in reader: for x in u: while (i &lt; 10):
You want the entire program to be dependent on writing 10 rows, so change it to something like this: with input_file as f: reader = csv.reader(f) while i &lt; 10: row = reader.next() for x in u: if x in row[4]: o.writerow(row) i += 1 Although are you sure you don't want "if row[4] in u: o.writerow(row)"? Edit: Just saw your other comment, this probably won't solve all your problems, but is probably a step in the right direction. Edit 2: Actually if you want to write 10 rows for *each* unique value then you'll have to keep a count of how many you have so far (a unique 'i' for each unique value).
[A Kivy book, which has been recommended in a G+ thread, is 50% off for today.](http://shop.oreilly.com/product/0636920032595.do?code=DEAL) Discount code is DEAL.
I'm not sure what you're trying to achieve, but have a look at the code below and see if it does what you want. EDIT: I think I've got a better handle on your problem. See what the new code does. EDIT2: here's a version that only reads through 'Book4.csv' once. EDIT 3: there was a bug in my code; I used 'chain' when I should have used 'chain.from_iterable'. I've rewritten it in a simpler style. import csv from itertools import chain from collections import defaultdict with open('Book4.csv', 'rb') as f,\ open("vlist.csv", "wb") as o: reader = csv.reader(f) output = csv.writer(o) # create a dictionary of empty lists to store rows in unique_dict = defaultdict(list) for row in reader: key = row[4] if len(unique_dict[key])==10: # already got enough rows for this key continue else: unique_dict[key].append(row) for v in unique_dict.values(): for row in v: print row output.writerow(row) 
If you build Web Services, there's Cornice on the top of Pyramid - that makes it even more minimal - http://cornice.readthedocs.org/
Both are somehow outdated... 
This is really fast, but it only exports the first 10 for the first member in "uniques". I need it to loop through all the unique values and pull 10 rows for each of them
What do you mean a unique i for each value?
The larger and more complex your database (both schema and data) gets the more SQL you are going to end up having to learn. If for no other reason than to be able to profile slow queries and make sure your ORM is generating sane SQL in the way you intended it to.
Wouldn't Pandas package make this relatively easy? 
For the record: Windows installers for most Python Packages that otherwise would require painful builds: hhttp://www.lfd.uci.edu/~gohlke/pythonlibs/.
I've been using odbc ( pyodbc ), I'll have to check out pymssql. One problem with python libraries on windows is when you have to build them. Luckily most of the popular ones have pre built binaries. So often instead of pip install AnAwesomeLibrary it's search google for the binary download binary easy_install AnAwesomeLibary.msi 
Yea, not sure why either... Windows fanboys galore apparently. It is just not as easy and simple to use in Windows. Period.
On WinXP, using cmd.exe, I have no problems doing this: C:\&gt; myscript.py &gt; output.txt
Ah, I understand what you are doing now. I have the perfect tool for this: [a defaultdict](http://docs.python.org/3.3/library/collections.html#collections.defaultdict) In a defaultdict, you can set a default value for each new key-value. &gt;&gt;&gt; s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)] &gt;&gt;&gt; d = defaultdict(list) &gt;&gt;&gt; for k, v in s: ... d[k].append(v) ... &gt;&gt;&gt; list(d.items()) [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])] So you can iterate over the rows in your csv and create a dictionary where each key is a unique value from col 4 and each key's corresponding value is list is all the rows that share that col 4. After you've built the list, you can iterate over the keys in the dict and print the first 10 rows that were added for each key.
I ran the new code, and it runs, but it does not output any records.
Oh for crying out loud. Bitter much? If Delphi is so terrible, then maybe it's (long past) time to move on and embrace the things in Python that get you excited.
Bingo, this is great. Thank you very much! This does exactly what I need.
Agreed, it makes more sense as an app like Grappelli which puts a nice skin on the admin site
SQLServer is not supported by peewee
I like the idea of micro frameworks. My biggest concern is setting up proper security and permissions. Is there anything around that could be used as middleware for managing authentication, CSRF, and what ever other new attack vector of the week is? This is pretty much the only thing keeping me tied to Django. I'm not a security expert, and don't have time to develop for every possible attack.
Another +1 for pymssql. Seems to lack any of the headaches of pyodbc.
wait... the programming language itself was in Japanese ? :O
I'm curious--is this for contracting work, or in-house at the company you work for? I'm guessing by the word "client" the former. So I'm then curious how you got this gig without the Python GUI experience to know how to do it? (That's not meant as a slight; just as helping my own understanding as a very fledgling Python contractor). Thanks!
I've never worked with a Django based CMS before, but this looks really nice. I've been looking for a CMS lately because I'd like to create an app that is primarily based around a calendar. I'd like some sort of login process and a calendar that people can use to create, edit, and join events. Would I need a Django plugin to do this sort of thing?
stdout is fine, it's stdin that is the problem. myscript.py &lt; input.txt If you try to read sys.stdin you get: IOError: [Errno 9] Bad file descriptor Python 3 is a bit smarter and gives you a None object instead of the broken file object.
Why does noone ever mention the `mkproject` command? That's half the value of it, IMHO!
It *looks* ridiculously well built ;)
Hey, as a user, all I care about is function. 
til.
Python has always been more popular than Ruby, but a Rubyist won't tell you that. I personally hate the mindset of Rubyists, they act like it's their one true answer. You need to learn a hell of a lot more especially since Ruby has a pretty limited scope of what it's capable of.
Ah, right. I didn't know there was a specific database called SQL Server, thought he just meant a generic SQL database. But yes, to be clear peewee only supports Sqlite, MySQL and Postgresql. You can apparently extend it to other SQL servers, as discussed [here](http://peewee.readthedocs.org/en/latest/peewee/database.html), I have no idea how well that works.
I'm not really considering it. I guess I worded that wrong. However, for some small simple projects, Django is a bit of overkill. Also for connecting to an existing database it's much harder to work Django around it as opposed to using SqlAlchemy to work with it. Pretty much just looking for the right tool for the job. 
Yeah, something like this: df = pandas.read_csv('Book4.csv') filtered = df[df['column4'].isin(acceptable_values)] filtered[:10].write_csv('vlist.csv')
A legitimate concern you are mentioning. I was asking as I've started getting acquainted with *Django* lately. What's the problem with the existing database? Can you expand what you're experiencing? Thanks!
Django's ORM likes to create a DB from it's models. However going the other way, and trying to create a model from an existing db is much more difficult. I would recommend going forward with Django. It's a great framework. Just like everything else though, its not perfect. 
If for every unique value (the ones from the 5th column) you want to print 10 rows then you need to keep a count for each of those values. So say your unique values are 'A', 'B', and 'C'. You need to know how many rows for 'A' you've written, how many for 'B', and so on. The way you have it right now the variable 'i' is just counting how many rows you've written total. I think I've misunderstood what you're trying to do so this might not be helpful.
You wouldn't actually need any kind of plugins to do this. Django actually ships with an authentication system, as well as generic views that will handle logging in and out. An event calendar would also be easy to make using Django out of the box.
Do you know about the inspectdb command? IIRC it can create models from existing databases.
Thank you kindly, jayfehr! I'll keep your words in mind.
Serial is just the bus used, what you get in Python (with pySerial for example) is a bytes object. The formatting is application dependant, you can either have a look at the documentation or try to reverse-engineer it.
Ok - so I have experience programming with serial (though 20+ years ago!) and also with Python but never together..... Typically a GOS device will 'spit out' (to use your phrase) data at a fairly regular time interval, not continuously. The protocol from the device will depend on the device :) obm
Let me clarify: you shouldn't study CS with the goal of learning how to write code. It won't teach you how to write code, just as astronomy won't teach you how to use telescopes. You can "do" astronomy without ever using a telescope and you can "do" CS without ever writing a single line of code. Writing code is neither necessary nor sufficient for computer science. What the quote doesn't say (but I would argue), is that the same is true in reverse: computer science is neither necessary nor sufficient for writing code (ditto for telescopes: astrologists can use telescopes without understanding astronomy). Of course computer science can help you write better code (and thus maybe figure out what you're doing wrong) like astronomy can help you to make better use of a telescope (and thus maybe figure out that astrology doesn't really work), but while there doesn't seem to be much of a market for telescope-using there is quite a market for code-writing -- and plenty of people are pretty good at it without having a solid formal understanding of computer science (though they may in fact have become that good by unknowingly picking up some CS along the way). That said, for 90% of the industry (e.g. most GUI programming or generic CRUD), when it comes to day-to-day programming, understanding how to use version control and writing readable code is more important than fully understanding Big O or the halting problem. Although a basic understanding of the general ideas is probably necessary, I wouldn't classify that level of knowledge as "scientific" any more than an understanding of physics that basically consists of "if things go up they must come down" or "water hurts if you are too fast". tl;dr: good programmer != good computer scientist, but also good computer scientist != good programmer
authentication and authorization doesn't take care of the same things csrf takes care of though. But pyramid can be extended with minimal effort. here's an example of adding csrf validation via event handler. http://stackoverflow.com/questions/6434550/how-do-you-add-csrf-validation-to-pyramid I would probably do it as a tween or wsgi middleware though. 
here's my my "saying goodbye to delphi" essay. I grew up on borland products, but it's now 2014. :)
~~Philosophically,~~ I'm opposed to the batteries included approach of Django. Not because I'm necessarily opposed to batteries included philosophy, but I just dislike Django's batteries. I don't like the forms API, I don't like the ORM, I don't like the template language, and I don't like their class-based view system. I don't like the way you have to build arguments to `manage.py`. If you're doing nothing but pumping out small, straightforward webapps/services, I can see some merit in getting all of your tools from one library. But I am personally much happier when I can pick and choose the gears that make up the system, especially when it turns out to be a larger project where the various warts really start to pile up. EDIT: I don't even
To me the benefit of smaller frameworks is being able to use modules for db/templating/forms that are useful outside of the framework. I don't think too many people would use Django's ORM outside of a web project, or Django's templating system, or form system. Obviously there are trade offs there, and in a lot of cases the trade offs are more than worth it with Django. Really just comes down to personal preference, which is why I'm glad there are so many quality options out there.
&gt; The days of .Net vs Java are long gone. I mean they are for me, I wont do .net anymore on principal. I see java more as the jvm, and I like that ecosystem ok. But, for the majority of the US if you want someone to pay you to program. I suspect the # of available jobs in Java and .Net probably dwarfs the jobs in all other languages. So the only way I can agree with your statement is if qualified by "among people who talk about it on the internet on sites that I read and comment on." What we perceive is not necessarily reality. 
My foray into Python UI has been with PySide, which is a python binding for Qt. PySide is roughly similar to PyQt, but with a more liberal license allowed closed source, commercial development without buying a license. Qt is a very respected and mature application development platform (not just a GUI platform - PyQt/PySide can do almost everything Python stdlib does, but also works seemlessly and Pythonicly alongside regular Python code) and works across Windows, Mac, Linux, mobile, etc. I'm not at all saying Qt/PyQt/PySide is instantly better than PyGTK, wxPython, Kivy, web frameworks, etc, I just wanted to put it out there since it's another viable option. There's nothing a commercial application can do that I haven't been able to do in PySide with a little Googling and some experimentation. It has something of a learning curve, but it's been around a while and there's lots of tutorials, some good books, and a great community. Again, the same applies to other solutions, just suggesting options. There are also super simple GUI libraries for making forms without any GUI code like formlayout and guidata (which build PyQt type widgets and dialogs for you, or can be plugged into a larger PyQt app), as well as Enthought's TraitsUI (which uses PyFace as an abstraction on top of either PyQt or wxPython backends). All of these are oriented to making automatic forms that provide editors/widgets for standard types of data. Lots of options! I'd encourage you to separate your GUI logic from your server/client, task, status logic so that they can be improved independently and bugs are isolated between the two. That also makes your backend code more testable since GUI interactions are more difficult to test. I've been struggling with this and don't implement good testing practices partly because all my logic is too wrapped up in how the GUI works, so nothing is independent. Anyways - good luck!
Csrf requires a header added to responses and also a hidden form key. Authentication and security are not that hard to learn and you should learn it even if you are not building it yourself.
Agreed, but not really my point. My expertise exists elsewhere. I'd prefer to leave security to the experts rather than believing I'm secure while not knowing about some obscure new threat.
That makes a lot of sense. Thanks. 
This makes good sense. 
If you use the pyserial library it should be quite simple. First you need to find out which device your GPS is. This will usually be /dev/ttyXX. Then you need to know the baudrate. One you know these things you can use minicom on Linux to check if the device is spitting out data. To this: minicom -b &lt;baudrate&gt; -D /dev/ttyXX If you see data coming through there it should then be possible to read that data in in python. You will need to grab the pyserial library from PyPi import serial gps = serial.Serial(tty_device, baudrate=baudrate) if gps.isOpen(): gps.flushall() while True: lat_long = gps.readall() # Do stuff with the data If you don't see data coming through you will have to pour over the datasheets and figure out which commands you need to send to the device to get it to start spitting out data.
Look at pynmea Here's a tutorial: https://www.sparkfun.com/tutorials/403
Thanks!
Thank you - yes I will be separating it in a clean way. Ideally I would like the whole think to work as a command line , text only app - then I can 'add' the gui on top.
It is polling a webserver for some JSON feeds of a few tens of bytes. We are going to use HTTP for this. No my choice - that is the ... API ... I have been given.
I'd actually suggest PyInstaller rather than py2exe - IME, it is more comprehensive, supports more use cases, and also supports compiling binaries for Linux and Mac OSX as well, so you can use a single build workflow to generate standalone binaries for all three platforms. Edit: oops, forgot link: http://www.pyinstaller.org/
Looks complicated (and interesting). How many loop executions do you have in total ? Could you paste the "nested for loops" part of your code ?
It depends. In my experience if you are using numpy functions it requires a bit of effort to do better. The reason is that the numpy code is already written in optimized C. A better target would be the nested for loops. I think that is why el_isma suggested PyPy though I don't think PyPy supports numpy yet. If you can get rid of those for loops by using [vectorizing](http://stackoverflow.com/questions/17483042/explain-the-speed-difference-between-numpys-vectorized-function-application-vs) you can get some pretty amazing speed ups. Finally, every function call in Python has some significant overhead. If you are calling a small function repeatedly you can save alot of cpu cycles by removing the function call and putting the code inside the for loop. From what I understand PyPy is supposed to do these optimizations automatically but, like I said, it doesn't work well with NumPy yet. 
mezzanine is cool also (uses Grapelli and other bits)
Fixed, thanks!
AFAIK, *some* of numpy does work. I haven't tried it myself. See for instance the release notes for 2.2.0: http://pypy.readthedocs.org/en/latest/release-2.2.0.html
Hope this is formatted ok. My first Reddit post ever! So, I actually spent some time implementing SSIM in Python. First, don't ever, ever, ever use for loops for something like this where you can help it. Vectorize everything. When you can't vectorize it, use something like Cython or numba so that the inner for loops are executed in C, where there isn't the enormous overhead of Python. I can't post my actual code which is generic, but I can help you out some. The trick I use is to reshape the array using stride_tricks in numpy. This avoids a memory copy, and allows you to apply things like np.mean and np.var along entire axes. For an input array: first reshape the array to a convenient shape import numpy as np patch_shape = [8, 8] calculate the number of patches per column in the image, and per row ppcol = array.shape[0] - patch_shape[0] pprow = array.shape[1] - patch_shape[1] calculate the shape of the newly strided array shape = [ppcol, pprow, patch_shape[0], patch_shape[1]] define the strides for the new array strides = [array.strides[0], array.strides[1], array.strides[0], array.strides[1]] create the new array strided_array = np.lib.stride_tricks.as_strided(array, shape=shape, strides=strides) Now you have an array of shape (n_patches_per_column, n_patches_per_row, patch_height, patch_width). So, strided_array[0, 0, :, :] is the 8x8 patch at the corner of your initial array. if you want to calculate the the variance or mean in each patch, you would do it as (assuming you're using numpy 1.7 or newer): patch_means = np.mean(strided_array, axis=(2, 3)) Since many of the terms in the SSIM things like patch_mean_a / patch_mean_b, you can simply code it exactly like that and you're doing the operation for every patch at once. Calculate the structure, luminance, and contrast components, get the SSIM per patch, and take the mean. ----------- Hope that helps! That should get you a huge performance boost over what you're doing, and also get you the exact same results as the actual SSIM metric. ------------ **Now, a caveat...** numpy's variance function is stupid. It makes a memory copy (if I recall correctly), so you might consider implementing a cython function that does this in place (as an added bonus you can release the GIL and use all the cores on your machine). I don't think numpy's mean does that. So, calculate the mean with numpy. Create a cython variance calculation, and pass the mean and an output array to your cython function. Since this overlapping array is huge, this can potentially completely kill the performance gains. Maybe they've fixed it in 1.8. ... Alternatively, write the entire thing in Cython. It might be easier. :)
Arrrgh in the age of mobile who has this floating 'like this post' crap on the side.
Ah, might be worth a try then. I didn't know they had made that much progress.
I did check out pypy, and wasn't able to get it working with what I'm doing, either because it can't, or I didn't spend enough time fucking with it. I'll check out vectorizing, see if it helps.
My implementation actually only uses matrix summations with a bit of simple math on top. I'm not convolving or using numpy's variance function. I can't actually remember if it gives me the same result as the original script, but it does work, so I just went with it. When I have time I'll look at your suggestion, seems promising. EDIT: more specifically, I'm implementing the mean ssim algorithm used here: [DeadRinger](http://deadringer.codeplex.com/) I'm also using multiprocessing to run 3 or four processes at once, which gets around the GIL and allows me to speed calculations up significantly. EDIT2: are the patches acting like a window or something? Let's say I'm breaking a 128x128 image into 32x32 chunks, so that means 4 chunks per edge or 16 total chunks. Would I use 32,32 as my patch shape?
Sorry didn't realise it was your page. Mucho respect for the work and the quick reply! A tip: Bootstrap. It's pretty much impossible for your site to look crap and you'll get all the responsive you need. Good luck! PS: I down voted myself out of guilt.
Pelican, what a refreshing and ambitious choice to use. Quite a good job tweaking the look.
Don't forget falcon! http://falconframework.org/ Edit: I have no affiliation
Wow, I *do* like all that stuff about Django. (Except the manage.py 'commands', although I get why they do it that way.) Also with the "batteries included" approach, Django can easily be extended without a ton of dependencies. Look at Rails - not too many batteries included there, modules have tons of dependencies, and doing auth and auth extensions without a built-in user model is highly annoying. However, I am glad that we have a variety of Python web frameworks from which to choose! Personally I'm with WallyMetropolis - even small sites are pretty simple in Django, and I hope Django continues to flourish.
Love this! Really enjoy your writing, as well. The comment on @shitmydadsays had me laughing. Subbed!
I am seriously considering it. I believe Google has a nice JS library out these days.
I like bottle, one file, no other dependencies. If you need it to "scale": use it behind nginx + uwsgi.
No worries -- I upvoted you since you have no reason to feel guilty! Yeah I wanted to avoid the Bootstrap aesthetic but I think at this point I'd rather just convert it to Bootstrap/Foundation to get the benefits and then just design over it.
Pelican has some really strange quirks but I'm enjoying the workflow a lot more than other static site generators I've used: it even comes with a nice makefile for uploading to s3, which makes actually pushing out changes much easier.
One really good comparison of these micro-frameworks, albeit from 2011, is [this slideshow](http://www.slideshare.net/r1chardj0n3s/web-microframework-battle) called "Web micro-framework battle". I once wrote an interface to vsphere in Cyclone. I rather kind of like it, especially once I figured out how to tie it to redis for session and state managment. I wouldn't classify it as a micro-framework, it really 3-4 frameworks glued together. It implements twisted, tornado, and bottle all at once. I know that makes it sound incredibly complicated, and in some way it is, but I found it was well put together. But it's probably overkill for most projects. Recently I've been dithering between using Flask or Bottle for small projects and I've been developing an api-driven "yamlstore" app that stores yaml data in a git repo in bottle. At the same time, I started developing a "club roster" web app for my club and I'm using Flask for that. I've "cheated" with flask by using [cookiecutter-flask](https://github.com/sloria/cookiecutter-flask) to create a base project with all sorts of goodies. In working with both, I've decided that it almost doesn't matter, they are fairly similar. bottle.py has a killer advantage (for certain scenarios) that you can include the bottle.py along with your app. So if you have no other dependencies, then you can store your entire project in one directory and run it out of that directory. But, if you start needing other libraries and needing a requirements.txt, this advance goes away. So flask is starting to win more and more for me. 
 while True: for i in ["/","*","|","\\","|"]: print "%s\r" % i, I can't figure out for the life of me why he finds that amusing? It just produces one of those five characters in a loop with no pause - so the console just seemingly sputters random characters. What's he trying to do? 
Yup. Yup, I just went ahead right in the second sentence and negated the first sentence.
Good to know that, thx. btw, Windows Console does have stderr, as 2&gt; in: dir ... 1&gt;nul 2&gt;&amp;1 dir ... 2&gt;&amp;1 1&gt;nul
I agree, there's a ton of value in the fact that any add-on you can find for Django will be able to integrate with e.g. the ORM or the templating or the admin. I suppose what I've found is I usually prefer to be writing glue-code for very well designed libraries, instead of finding add-ons to provide "missing features" in core libraries. It comes down to taste here; I really felt the Django developers bit off a lot more than they could chew in terms of API design. However even with that said I recognize a lot can be done with Django, and if you accept it for what it is and learn/embrace the various quirks you can do a wide range of tasks with it very quickly. And I'm sure Django will continue to be popular, since it has such a large community and there are just too many well written add-ons for it.
I've made a couple things with Web.py and I like the *framework*, but the documentation is pretty bad. I'm fairly used to it at this point, but I want to look for something that takes care of some things like authentication and database access. 
Must say Tornado is in the top of my list here. I just can't get into WSGI based frameworks as they are harder to deploy (requiring a web server for production use). Though Cyclone and CherryPy would handle my needs just as well. 
I just did a bunch of work with pyserial reading from a Parallax RFID Reader. The data sheet for the RFID reader gave me the answer you are looking for. It explained what the data would look like on the line. Take a look at the data sheets for your GPS and find the encoding used for the data over serial. 
I think it's supposed to look like a spinning line or propeller.
Thanks, I appreciate the info. I consider wxPython to be the thing in the Python world I know the best now (which, admittedly, is still not saying much) and have developed apps with it for years. It seems to sometimes get a little rap here and there on Reddit but I'm not sure it's deserved. The community has been just stellar and although it's not perfect, I'm quite pleased with it. I wouldn't recommend it for your case here, though, of course, since it can't be run on iOS (or web...though it is *sort of* possible in some experimental ways) and your client seems to want that. 
I've not used Pythoncard, but perhaps, for wxPython apps at least: * Boa Constructor 0.6.1 (limited to wxPython 2.8.x; last updated 2007) * wxDesigner (last updated 2010) * wxFormbuilder (last updated in Nov 2013) (**EDIT**: I had switched the last updates on the last two projects; fixed now) Then PyQT has its own builder, QT Designer I believe. Might be wrong on that.
I've started playing with this combo only to hit an error on the Windows platform. It was reported as a bug for Selenium so hoping they fix things soon! In the mean time I've been using the Chrome driver...
[wxglade](https://bitbucket.org/agriggio/wxglade) is also a great tool. Py3k compatibility in development. With the same file you can generate wx code for Python, Perl (I have used both), XRC, C++ and Lisp (these I never used myself)
I really like Pyramid's approach. It has so far IMO the right amount of batteries with plenty of options for Form (i.e deform, WTForms), ORM (i.e. SQLAlchemy, ZODB), template engines (i.e. jinja2, mako) etc. Definitely worth checking out.
well, it didnt work that well
3 months ago, i had no idea what a website was, and in a weekend i had my first Flask app deployed on heroku. Just sayin'
Bruce I've never told Delphi programmers "they're all losers" because I'd be calling myself a loser too, wouldn't I. I notice that once again you won't actually address the issues. :-( That's what makes your posts so short. 
As someone in the industry, I have to agree. OP, this is cool, but you have to cross reference it with some of the other data IMDB releases to get accurate results. I recommend cross referencing with the distribution studio, and whitelisting the major 30-50 over the last 50 years. You'll have to generate that list first then sanity check it. Imdb lists a lot of shorter TRT, non distributed film festival content, which is almost always on the short side. Each year, IMDB lists more and more of those, which will be skewing your results. There should also be a field that lists the initial medium- film vs TV.
I'm not sure I understand you. The all need a webserver. Some provides their own (tornado, cherrypy are two examples). But you need an HTTP server to serve a webapp. Did you mean like a reverse proxy?
Well, as you mentioned in the title, `itertools` [can permute iterables](http://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.permutations). I'm not sure if you're looking for source code or what, there's literally no post here. In any case, you can't do this any faster than O(N!) (the number of permutations of N items).
When you say "unique" do you mean that the order of items doesn't matter? That's a combination, and itertools can do that as well via the combinations() function. Permutations - order matters. Combinations - order doesn't matter. 
Vim! This video made me start using it: [Vim as a Python IDE - Martin Brochhaus](http://www.youtube.com/watch?v=YhqsjUUHj6g)
This thread has been linked to from elsewhere on reddit. - [/r/programmingcirclejerk] [epic Delphi rant](http://np.reddit.com/r/programmingcirclejerk/comments/1xz0da/epic_delphi_rant/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
That sounds like [Sikuli](http://www.sikuli.org/), which is also a multi-platform automation tool and supports the pattern-based screen matching with Python scripting.
For about a year, you've spent time in Delphi forums and trolling blog posts insisting that the product is dead and taking shots at users and Embarcadero employees and then complain that they don't take you seriously. Maybe if you asked the occasional legitimate (and short) question and didn't dismiss any answer you get out of hand. What have you got to lose?
Sikuli requires some computer vision and OCR librarry, and I think is certainly much more complex and has more features.
what is the imagemagick version ?
You seem hung up on libraries. Not sure why. What you describe sounds extremely simple.
Some form libraries have csrf support (wtforms in particular, but I'd bet others do to)
The more I think about the project the simplier it appears. This post has been quite helpful - that and a day or so of thinking about it.
I don't know Pythoncard but for GUI stuff a lot of people seem to enjoy Kivy. Someone please enlighten me if I am suggesting something not at all similar to the question.
You're question isn't very clear. itertools.permutations is probably the most efficient way of getting all permutations, which are, by definition, unique. Possibly you're not actually talking about permutations, because you've already mentioned itertools. For work I had a problem where I had a list of trigrams (sets of 3 words) and I needed to return the list without permutations, but preserving order. Probably nothing to do with your question, but I'll post the gist of my solution anyways. https://gist.github.com/gregroberts/8666134
Sounds very promising. Please discuss how this compares to Sikuli?
How fast can this recognize the pattern being available on the screen? And can that functionality be imported as a module for other python scripts? Edit: Looks like finding things based on pattern is provided by visgrep, a part of the xautomation package. Thanks! Now, off to automate some games!
Itertools gives you the permutations by index order. What I'm trying to find is an equivalent that computes the permutations based on element value. A generator that ignores duplicates. 
Sorry for replying so late, I asked the question then I went to sleep. When I say **unique** I'm saying that if I try to find all the permutations of a list which happens to have duplicates (e.g. `[1, 1, 1, 3, 4, 3]`), I get identical permutations (for example I get 3 times the same input list in the exactly same order). Of course, I could create a `set` of all the `permutations`, but that isn't going to help me much with lists that have more than, let's say, 8 elements - it will become incredibly slow (each element increases the O(n! + 1) time required to compute it). `itertools` generates permutations based on the index order - that is the cause of all duplicates. Now, a better question would be: is there a way of generating the permutations of a list by ignoring all the duplicates?
What's up with the 11 PM in the x-axis of the final plot?
Could you not just find the permutations of the set of the list? Would this not produce a subset of the permutations of the list containing none of these duplicates?
What are you trying to say? my_lst = [1, 1, 1, 2, 2, 2] a = list(permutations(my_lst)) print len(a) - len(set(a)) # this list has 700 duplicates (20 elements are unique - the ones I need) b = list(permutations(set(my_lst))) print b # prints 2 elements: (1, 2), (2, 1) 
FWIW, this kind of discussion would be most welcome in /r/pystats. I hope you and OP will drop by sometime!
Sounds like a terribly slow way to do it, and what about different fonts and/or subpixel hinting etc?.. Shouldn't support for navigating and interacting with the "DOM" (to use a term most probably know and understand enough to apply outside of HTML) ideally be inside toolkits? I do not doubt its usefullness though =)
Definitely laughed at loud at the implication that Blackberry users have Stockholm Syndrome. God forbid somebody use a different *phone*, clearly they are wrong and sick in the head. I say this as someone with a 5S so I'm not trying to defend my own phone choice or anything. 
wxFormBuilder's [latest beta](http://sourceforge.net/projects/wxformbuilder/files/wxformbuilder-nightly/3.4.0-beta/) is dated 2013-11-06.
I see, I see. My mistake. I spent a while dicking around making things which were of no use. Someone has answered this on StackOverflow quite elegantly: (top answer) http://stackoverflow.com/questions/6284396/permutations-with-unique-values Haven't looked into how efficiently this will run relative to the set implementation, but it answers your question :)
I think he meant that Tornado is both a framework (albeit a very minimal one) and a production-quality web server, whereas frameworks like Pyramid, Flask, and Bottle are usually deployed on top of a separate (WSGI) web server, e.g. uWSGI, gunicorn, gevent, Twisted, etc. 
Toolkit support. How is an implementation detail, but for example (simplest i can think of) having toolkits by default exposing the applications UIs widgets trough dbus with methods like click() and drag() et cetera maybe? And if they don't take patches, well, how about LD_PRELOAD hacks which hooks the widget creation routines? Which in itself is terribly ugly but probably less prone to breakage and definitely faster then pixel matching which in worst case can be o(n*m) or so where n and m are the amount of pixels of the areas to match Granted, there are probably better ways then both yours and mine(which i have given close to no though), and there are moments where yours is the only way; but putting it in the toolkit, while not as simple, is not only faster but more elegant.
Hi r/Python - I just released my first open source package and I'd love if you'd check it out and give me some feedback! It's also on Pypi so you can pip install flask-nicely to give it a test run!
I actually did this in a similar analysis a few weeks ago: http://www.randalolson.com/2014/01/25/movies-arent-actually-much-longer-than-they-used-to-be/ I looked at all movies *and* the top 25 most popular movies each year (separately) and reached the same conclusion as OP.
avoid the loops! This is what kills your performance here. Try to write out your equation in terms of vector/matrix operations, and it'll be smooth sailing. Especially the inner loop looks like it can be avoided. 
1 word: [Anaconda](https://store.continuum.io/cshop/anaconda/)
You would have the same performance troubles in MATLAB too because as BeatleJuce mentions, your loops are going to be a drag. If you want super-fast performance, you may want to rewrite that part in Fortran and hook it into Python (Fortran optimizes those kinds of loops through unrolling and other techniques). Otherwise your best option is to express your problem in matrix-vector, or more native to Numpy, array operations. You have to think in terms of math to derive the right form. Let x in R^259000 and y in R^kl, where kl = 172799. In your code, your indexing sets are: K = {0, ..., kl - 1} I_k = {k + 1, ..., k + 86400 - 1} And your equation is: y_k = sum_{i in I_k} (a * (i - k) - b) * x_i for k in K where constants a = 2/(86400^2 - 1) and b = 1/(86400 - 1). You need to build a matrix A and z, such that: y = A * z where z is a subset of your original dataset vector x. z_i = x_i, for i in I_k, k in K Also, A = a*G - b where G is matrix whose elements are defined as follows: G_k,i = [i - k]_k,i for k in K, i in I_k Once you build your G matrix, you get you can easily compute your A matrix. The z vector is easily computed -- it's just a subset of x. Finally, y is simply the matrix-vector product of A and z.
parsed_films = filter(lambda x: x[1] % 30, parsed_data) This looks like it could have unintended consequences. This looks like it drops items that have run times of 30 or 60, but also 90 or 120 minutes as well (really any multiple of 30). Considering the average running times calculated at the end are almost 90, it's not unreasonable that a film's run time may fall exactly on 90 (especially since x[1] is an int). As others have noted, there may be better ways to filter out TV shows, but if the goal is to only drop items with run times of either 30 or 60 minutes, then I suggest doing only that.
Well I tried altering security settings and stuff, but that didn't help for me. Life and other stuff got in between so I haven't had a chance to tackle the problem again, so the answer is no, sorry.
www.python-camelot.com
ok
A few suggestions: * Be Python 3 compatible, if the underlying library you are building a library off of supports it, so should you. * Use super(). * Don't assume people only need the errors you're supporting. * Just use responses instead of exceptions, Flask knows how to do the rest. Also use integers instead of strings for errors: try: from httplib import responses, BAD_REQUEST except ImportError: from http.client import responses, BAD_REQUEST from flask import jsonify, Flask app = Flask(__name__) @app.route("/") def error(): return jsonify(error=responses[BAD_REQUEST]), BAD_REQUEST * Write some docs explaining why I should use your library when I can do the above myself. The above is very simple and flexible while the way you've written it make a lot of assumptions about the exceptions that will occur and how they should look.
i'm totally going to blog the next I have an itch. and I will post it here too. 
really liked these, very useful resource.
Delphi sounds awful. Why does it have 4 different string types? 
Harder to deploy? A WSGI app running on Apache only takes a couple of lines of code and a few lines of configuration to set up, then it's just pushing code. (Which you still have to do with cherrypy, et al)
Yay! Now you should learn about static site generators. 
If only it had decent docs...
This company is headed by the numpy guy. I just install this distribution if I need python on a windows box. [Anaconda](https://store.continuum.io/cshop/anaconda/)
Thanks so much for the prompt feedback. These are all good suggestions, especially the use of httplib responses. I will certainly incorporate those! I will also work on making the package Python 3 compatible. I wanted the base ErrorResponse exception to be extensible so that a user could provide any HTTP error they chose, so I should probably improve the documentation to reflect that! The reason I went with the exception model was so that I could raise a particular HTTP error anywhere in a nested function, and it would propagate up and still give the desired response. Something along the lines of the [Implementing API Exceptions](http://flask.pocoo.org/docs/patterns/apierrors/) section of the Flask docs. It isn't obvious to me where I could use super() in my code - could you possibly tell me what I'm missing?
Edit: Just wanted to let everyone know that I was able to get ipython notebook working on Window 7 using 2.7.x of python and installing ipython and ipython notebook via easy_install: easy_install ipython[all] I had tried several time over the last several weeks to accomplish this using pip and the instructions from several googled sites (which all recommended using pip) and could not get it working. Finally, just used easy_install for everything and it worked out of the box. I confess I'm not sure what the down side of using easy_install is over pip but I'm sure I'll find out. We will see what happens when I try to install virtualenv which may not play nice with easy_install.
&gt; I personally hate the mindset of Rubyists, they act like it's their one true answer. Yeah, me too, almost *everyone* knows that *Python* is the one true answer.
Please allow me to present an original work related to this very subject: [clears throat] *nix is forking good And Windows is forking not. I'm speaking of course Of a call in the source Just one of them has got If you need your code To go down both roads When choice becomes a Y Then the *nix is better The one to get her Forking day and night Fork, fork, fork, fork Fork, fork, fork, fork Forkety-fork Fork-fork-fork. Thank you. Try the veal. 
You may want to review what you are doing in your algorithm. 86400 x 259000 =~ 22e9 inner loops - it's no wonder it takes a long time. It looks like you are doing some operation over a day's worth of 1 second resolution samples, and sliding that operation over three days of overall data. If you downsampled your data to 1/10th of its present resolution, you would take two orders of magnitude off of the calculation time. 
Have you tried numba, or numba on a gpu?
Its about 1) having the right tool for the right job, and 2) creating working software and delivering to your customer on schedule. I don't think there's a right answer here. On the other hand, if you want code to be pretty, and meet the other stated expectations of the [Zen of Python](http://www.python.org/dev/peps/pep-0020), then choose Python over PHP by all means.
I would use python in almost any situation (basically all except where there's a large existing codebase or library) where PHP would be useful, and in many other situations as well.
&gt; The reason I went with the exception model was so that I could raise a particular HTTP error anywhere in a nested function, and it would propagate up and still give the desired response. In application code I tend to use abort() instead of exceptions directly. The reason why is if `Flask.errorhandler` is setup for a specific error code I know that the resulting response will be constructed by the handler which is specific to the HTTP error code. For cases where extra data is needed, such as a custom error message inside the response, you can use `flask.g.&lt;attr&gt;` to propagate that extra information. From a pure Python standpoint it does not make a lot of sense sometimes but the way of handling errors for web applications is slightly different (or at least I tend to treat it that way). /u/doug100500 brings these points up too. &gt; It isn't obvious to me where I could use super() in my code - could you possibly tell me what I'm missing? New style classes should be using super() instead of &lt;class&gt;.\_\_init\_\_. The specific location you're doing this is [here](https://github.com/Jwpe/Flask-Nicely/blob/aad33989f7527c8e2babd5f3a292ec2298c267dc/flask_nicely/errors.py#L16). Of course since you're not even passing anything into `Exception.__init__` you can probably just remove line 16. **EDIT**: One thing I forgot to mention about this [here](https://github.com/Jwpe/Flask-Nicely/blob/aad33989f7527c8e2babd5f3a292ec2298c267dc/flask_nicely/errors.py#L17). This would be cleaner and less prone to odd problems with "", 0, or anything else that evals as False: if error_message is not None: self.error_message = error_message 
I use python for web development. Can confirm: life happiness improved. 
&gt; Actually, now that I think of it, catching these exceptions isn't such a good idea. Definitely this. As I said in my reply above raising exceptions directly is not all that common in web applications. 
PHP is a scripting language designed for the web, that's trying to become a general purpose language. Python is a general purpose language that people use for the web. As with any language, it's all about using the right tool for the right job. Throwing together a relatively simple website? Use PHP. Building something that will need to scale or requires additional background processing? Python (or Ruby or NodeJS or Java or...) will give you more options.
I was a PHP developer for nearly ten years before switching to Python. After I switched to Python I realized I'll never need PHP again in my life, everything I did in PHP I feel Python can do ten times better. Python also fills multiple roles (science, web development, shell coding, gui apps, even window managers), where PHP really only works well for web, so I'd argue that PHP provides only a subset of all the functionality Python does (I know you can make executable scripts in PHP, but no sane person would do such a thing). To answer your question: I think they're competing languages if you only consider web development. PHP isn't really meant to do anything else so I think it would be unfair to compare the languages as competitors in other areas, as Python would be the clear winner since it's a much more general purpose language than PHP is.
I think these answers are very compelling. Truth be told, I'm just learning Python and love it. I have not used it for web though.
Definitely a case of the right tool for the right job. PHP is really only used in web development (you can use it elsewhere, but I'm not sure why you would want to), where as Python can be used for a broader range of tasks. Plenty of space for both of them to coexist in my opinion. Choice is something that should be encouraged in this industry. I'd primarily been a PHP developer for 7 years up until a year and a half ago when I really started to get involved with Python, and it's improved my happiness at work by a lot. Really feel like I owe the language for making development fun for me again :)
The numpy stack does **not** work well with pip by its own design. For most other things, pip works great, except if it needs a compiler and doesn't come with a wheel. You can easily install binary numpy packages into your system python on Windows, using [Chris Gohlke's installers](http://www.lfd.uci.edu/~gohlke/pythonlibs/). If you want to get started quickly you can use his [scipy-stack](http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy-stack). That said, AFAIK pip should install ipython just fine. The error you're reporting sounds like an internet connection error. Does your system use a proxy to connect to the internet?
I came across http://www.onespacemedia.com/news/2014/feb/5/getting-started-generic-class-based-views-django/ the other day which was a good resource for CBV as well :)
You could try [Google Code Jam](https://code.google.com/codejam/contests.html).
`easy_install` can't uninstall things. `virtualenv` should work fine with it.
Python and PHP aren't even directly comparable. But I'd rather shove hot iron shards under my fingernails than use PHP.
As a Flask committer I would be interested what problem this extension is actually supposed to solve? There exists the JSONIFY_PRETTYPRINT_REGULAR configuration setting (set to True by default), that already instructs Flask to pretty print JSON responses generated with jsonify.
Yeah. I completely agree that there are times you can have two complementary languages occupying the same conceptual space without there being a clear winner. But Python vs PHP is not one of those times.
Complete replacement, although note that you typically would use a templating library in python, and one could conceivably make a templating library that resembled php.
This would have been a tougher question ten years ago - when PHP had a huge marketshare in the web dev space, and Python's was very small. But I think it's a pretty settled point now in 2014: PHP has been roundly declared a difficult to maintain language, with much of that kind of work now going to Python and Ruby.
As someone who uses Sikuli for their job but wishes it wasn't based in Jython, this is pretty nice.
I had not considered memory requirements in my reply. One way to save memory and still gain a speed-up is to not form the full matrix, but instead construct individual rows of A on the fly, i.e. essentially vectorizing only the 2nd for loop in the OP's algorithm. This is often done in numerical computation codes.
&gt; I know that there are no winners per se. That may be true. However, there are certainly [losers](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/). PHP is a really good programming language for setting up honeypots. Or if you work for an organization that you're actively trying to undermine. If you care about your project, for the love of all that is good, use Python! 
&gt; that's trying to become a general purpose language According to whom?
That will give me list of subsets. I don't need that.
If pip is experiencing a problem due to proxy server wouldn't easy_install suffer from the same problem?
PHP is not even a respectable language. http://phpsadness.com sums this up. Python wins.
Better question: Is PHP a worthless headache and insult to language design? SPOILER ALERT: yes
Sorry if I wasn't clear enough. Ok. So, here's what I'm talking about - when I want to generate the permutations, **I want them to have the same length as the original list**. In that case 4 elements. That means all that you generated at `In[4]` without the duplicates (for example (3, 2, 1, 1) appears two times, right?).
Hah. Things op probably wished he knew before he did all this work.
Pip uses [requests](https://pypi.python.org/pypi/requests/) under the covers to make verified HTTPS requests to pypi. `easy_install` only makes http / unverified https requests. You could report: * `python -V` * ` pip -V` * `pip show setuptools` I'd also encourage you to run `pip install --upgrade pip setuptools`.
I still can't get over [the segfaulting object copy bug that's been unfixed for five years](http://phpsadness.com/sad/50), or the also-unfixed problem when PHP runs into an [unexpected T_PAAMAYIM_NEKUDOTAYIM](http://phpsadness.com/sad/1).
At its core it's java, so you can probably get it to play nicely with anything on the jvm.
There is absolutely a right answer here. Always choose Python over PHP, unless forced to do otherwise. Python v. Ruby v. JS is a worthy discussion. PHP is garbage.
PHP is the best way to sabotage any project.
Those equality semantics are beyond atrocious. Distinct hash strings can compare equal, but the strict equality operator means identity on objects?
I think I got wxFormBuilder and wxDesigner switched. I'll edit it, thanks.
Nicely done! I wish Flask did this sort of boilerplate stuff out of the box, but at least it gives you the flexibility for proper JSON output support. We've essentially made very similar plugin for our API. Keep up the good work!
What is "the CON"?
PHP is a disaster. Python not only replaces it as a language for creating dynamic Web applications, it's supercedes it in every imaginable way. It's also a powerful language beyond the web, and has found utility in many domains such as scientific research and statistical analysis. 
Noob question: how do I replace my php with python?
I think PHP is more of an insult to python. Other than working with something already written in php I cannot think of a single reason I'd rather use php for anything what so ever.
I feel like you'd get the same answers in /r/php or /r/programming though truth be told. I've never heard someone say php is better at anything with the exception that they already know it and thus it would take more effort to transfer to python.
http://www.atsc.army.mil/tadlp/contractors/capdl/config/networthiness.asp
Can you tell me how to start developing in python? I am done with PHP.
Thanks for your comments, Doug! In response to your and /u/NeedsMoreTests comments, I am trying to recreate the desired behaviour that I wanted using only Flask's existing API. It could be that I am reinventing the wheel! Your suggestion for a HTML/JSON decorator is indeed a cool one!
I used to use PHP years ago. Anything I could do in it, I can do in Python. Futhermore, I don't have to fight with Python to program cleanly, like I would with PHP. For example, PHP excels at quick and dirty web development, because you can intertwine your code with the rest of the web page. However, that's not a good idea when you're aiming for maintainability or best practices. Also, PHP's standard libraries are an utter mess, and it handles things inconsistently. The language was pretty much cobbled together and it shows.
The difference between PHP and Python is the difference between giving and receiving oral sex. You use PHP because you have to - it can still be fun but it takes a lot of work. You use Python because you want to, because it's great. 
I made a gist to try and see if I could get the same behaviour that I wanted just using Flask builtins. This is what I came up with: https://gist.github.com/Jwpe/9029046 Seems like I could have done a lot of the stuff that my package is trying to do just using existing Flask functionality. I'm wondering how I can add value to my package or whether it could be reworked to be worthwhile just as boilerplate for this functionality!
Hi DasIch, the goal was to be able to return data from/raise HTTP exceptions in views without having to worry about explicitly defining the output format or setting error handlers for each one. Having done a bit of research, I have definitely discovered that I could do the majority of these things using just Flask builtins. Made a gist to compare: https://gist.github.com/Jwpe/9029046
http://acm.timus.ru/ https://open.kattis.com/ https://www.codeeval.com/
Ooooook. So I was just going to start work on a new personal website. I should go ahead and just use Python huh? That's what it sounds like. Thanks for all the replies. I just wanted to get some input from people who know the language better.
I hope python takes over and squishes PHP into oblivion!
I don't 'get' node. Why would I want to use Javascript on the server instead of something more powerful and expressive like python or ruby?
These might be useful: http://docs.scipy.org/doc/numpy/reference/generated/numpy.convolve.html#numpy.convolve http://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.fftconvolve.html
And note that there're /r/flask and /r/django.
When I mean baggage, I don't mean "manual memory allocation," I mean syntactical annoyances, strong typing, etc. The first language you use, for a while at least, should just work, it should never make you ask "why the hell is that happening that way" until you've moved past hello world and understanding loops and conditionals and such. Once you've learned logic and stuff, and how to write simple programs, then switch to whatever, but by then you also understand the syntax of the language you started in. As a result, I think ruby and python are probably the best two starter languages, not sure which I prefer. Ruby is better after the first week, but I think for really basic stuff, python is more easily grokkable. And I don't consider a text editor "baggage," I'm not sure how much I consider a command line baggage, I think its good to know how to use it, and understanding what 'echo "this"' or 'python test.py' and how to ls and cd, but I don't think that anything beyond that is really necessary as a beginner. Also, I should mention I'm a first year CS student, first class was in python, second is currently in java, but I do a lot outside, so I know enough js, some ruby, a bit of C, some lisp, and others. Honestly more important than that, imo, is teaching students how to use documentation, I was, consistanlty, one of the best performing students in the intro class I was in, and people would ask me for help problems that weren't issues to be because I knew about built in functions that people never thought to look up. Like, "hey man, how do I get the biggest number that a user inputs?" "Well, you make an input loop to take in the numbers, make a list of them, sort them, and return the last one." "how do you sort a list?" "uhhh, list.sort()" Students seemed to have some aversion to the python website despite it being linked to on the class webpage and talked about pretty often. Luckily, the java class (heh) seems to have solved that problem, since they stress, heavily, using builtins and java api stuff, and the entire class is based in swing, which can't be done by memory. &gt;still not understand what an executable is. While I think that you should, I don't actually see why this is central to understanding computer science. Code-writing yes, but CS (at the higher level where I don't just mean code-monkeying), maybe. But certainly not at the freshman level, not that its difficult, just not necessary.
I am an expert in PHP, and use python now as my primary language. I do not see them as being even in the same domain. There is so much more you can do with python.
any suggestion?
Yep!
Yes and you could use pythonxy as well
The only thing I can imagine is sharing code between the frontend and backend. But that seems like an extremely narrow window of benefit to me.
It's not so much the language as the platform. Node js is an event driven language, and writing code for it is very different than your typical python way of thinking. I'm a huge fan of python myself but could see applications that node would be better suited for. 
I'll be the devil's advocate. Python engulfs PHP in functionality, but there are some things in PHP that make a lot more sense to most people. I love Python, but PHP doesn't deserve the hate. It's a good easy language that lets people build things without having to be more than they really need to be. - The LAMP stack is damn simple. You just stick `.php` files in a directory and point your browser at them. It's basically CGI with a PHP instance running in the Apache process. It's only fast because it was popular enough to optimize and it was made efficient with opcode caching. In Python you need to know a good bit more about servers and often accept the role of a system admin. You have to understand that the web server and the language interpreter are different things and each runs as a separate daemon with the web server passing the content to and from the interpreter through a unix or network socket. You don't think in terms of file names anymore - you have to define functions and create routes. In PHP code reloading never becomes an issue for people. In Python, it bites you for a while before you understand that it's a thing to be worried about in the first place. Most people gloss over at these concepts. - PDO is quite an accomplishment. In PHP you can talk to a dozen or more databases with the same damn class. Python specifies a standard interface that independent libraries should implement, but they end up being subtly different in a way that keeps them from being interchangeable. SQL dialects differ, but working with MySQL, PostgreSQL and MS Access in PHP through the same standard language class is a lot smoother than working with 3 different independent libraries at very different levels of capability, like Python. - Date/time handling in the standard library of PHP is much more sane than in Python's. Python washes its hands of time zones and tells you it's your responsibility. You must rely on 3rd party libraries (pytz, dateutil, arrow). You need to keep track of which functions and objects are aware of time zones and understand how the 3 different standard modules (date, time, calendar) interact to convert between strings and objects. The truth is that time is a very hard problem in any language. It's political because different countries observe time zones or DST differently, or have borders that have changed recently enough to affect the meaning of time stamps or even have borders in open conflict. It's a hard problem [from a scientific point of view] (http://docs.python.org/2/library/datetime.html#id1). Satellite software developers really appreciate the problem. It will not be great fun coordinating millisecond-level timestamps between off-earth colonies. Just wait until we must record and convert between logs on different solar system bodies, based on different frames of reference and different spherical coordinate systems.
While I do agree with all of these opinions, I think you're missing out on a large potion of opinions by posting this in a Python subreddit.
In the several years I've been doing web development professionally I've spoken with several people who express a desire to switch from PHP to Python. I've never spoken with anyone who expresses a desire to switch from Python to PHP.
What drives me crazy about this sort of comparison is that most of the projects you'll see related to node or js in general are merely adding functionality that Python has built-in or in its standard library.
Python-wise I'd say Hyde or Pelican. Jekyll is also pretty nice (it's what I'm currently using for my site, it's ruby, though)
Depending on what your personal site is for, you might be able to get away without really using either. For example, if your site is going to be a blog, you could probably get away with the likes of Nikola for a static site/blog generator. But that's not to say you *shouldn't* use Python, especially if the project is more than just a blog.
I learned to program in Delphi, it was fun and very intuitive. Great beginner language. Everything else about it though...
&gt; In PHP you can talk to a dozen or more databases with the same damn class. Python specifies a standard interface that independent libraries should implement, but they end up being subtly different in a way that keeps them from being interchangeable. Have you used SQLAlchemy at any point? Cause it sounds pretty much like what you are claiming for PHP here. It abstracts a lot of implementation details away and you can say what you mean rather than directly writing SQL queries.
On the internet, no one knows you have a Nokia.
I thought node was more like a better developed twisted.
Thank you for giving me an idea of how Python would be used with Apache. Do you have any more in depth information on how to pass data from the Python interpreter to Apache? Which socket are you talking about and is this socket handled like any other socket that is fed to a select loop or whatever method libevent utilizes for handling sockets? I assume Apache would be using libevent.. I really want to learn this stuff, so I guess I'm asking you to share some magical words I should use to invoke the omniscient web oracle in order to obtain the information I seek.
PDO is just SQL, which is a good thing. An ORM solves an entirely different problem set on top of abstracting away which database you use.
Fair enough. Although you don't have to use SQLAlchemy as an ORM.
I'm usually running a python web framework with WSGI support on uwsgi, with nginx in front. I'm using supervisor to control the uwsgi process. Nginx handles all static files and caching and redirects other requests to the unix socket uwsgi listens on. I also ditched MySQL/MariaDB along with PHP and now mostly run PostgreSQL instead. It's a pretty simple copy/paste setup once you create a working configuration. I think this setup provides much better flexibility and speed than a traditional LAMP stack, but it's definitely more work to get the initial configuration working well which I think is the reason LAMP is still so popular.
If they are truly small and you want some feedback consider posting them on http://codereview.stackexchange.com
I'll give you my full answer despite it repeating others. I developed PHP casually for 6 years. I started doing some big projects and felt worn down by them. I had a basic grasp of the concept of MVC, I knew a little on ORMs but that's all. I started with Django, I fell in love with all the hidden magic. It was incredible. Best thing ever. I was much more productive, development time cut right down. Then I got a little bored, and wanted something with less of a black box, so I tried flask. I fell in love with new libraries which made Django's home grown feel.. clunky. I had a lot of control back. But I tried building something big, and hit walls. All the lovely permissions that come with Django are hard to match. Now I am learning Pyramid, it sits as a great in between. I bring my own ORM and Form library. It helps me build a flexible permissions system. So far I'm impressed. If you have any more questions, reply here or PM me.
Awesome, Thanks!
no problem! I'm always willing to promote subreddits especially /r/progether :) 
&gt; (I know you can make executable scripts in PHP, It goes further than that; you can also make GUI apps (with GTK) in PHP. Of course, as you rightly point out, &gt; no sane person would do such a thing)
https://github.com/pyca/cryptography in heavy development at the moment, seeking be a new standard crypto library for python 2 / 3.
I wonder the same, so if an answer could be given... How does one integrate Python in a webpage ?
I hadn't thought about that, actually. These days I mostly use python-MySQLdb and psycopg2. Neither of them really get in my way, so I haven't sought other options.
Thank you for taking your time to go into the details. I really appreciate this.
Hey `/r/python`! Don't know how many Tornado users are here, but I'm a fairly (kind of somewhat) avid one. Anywho, I wrote `Tornado-JSON` just to have simple but very useful things available when building an JSON API, such as: * Autogenerated routes based on RequestHandler inspection (you can still define routes yourself of course, but Tornado-JSON does it for you if you don't want to). * Input and Output [`JSON Schema`](http://json-schema.org/) validation via decorator * API Documentation generation from provided schemas * Standardized output using [`JSend`](http://labs.omniti.com/labs/jsend) This is my first "real" public facing OSS project, so I'd love some feedback on this; how it works, what it could do better, how I could've written part of it better, what sucks about interfacing with it etc.
It's the amount of code you have to write to build HTTP web services that becomes even smaller.
Most of the time, using a python web framework like Django or Flask (or ten others). They either come with their own http server, or integrate with others using the WSGI protocol. 
If you released this about 7 months ago, you would have made an avid user out of me. I use Tornado and JSONSchema *extensively* in my current project at work. I didn't even know about this JSend thing so I may have to look into it. Looking at your documentation, I would say you probably want an example that actually uses the input schema. I don't know how to post a JSON blob at you: do you want some JSend thing or just the blob that matches the input schema?
That's actually been my main WM for about 6 months now. If there was another python WM, though, I would have been interested to try it. Qtile's pretty nice, but it's not perfect, either. And I knew I recognized your name from somewhere, so I just checked your github to make sure you weren't the main qtile author or something. Easymotion and powerline are both amazing. Thanks for the great work!
once someone told me that python is like php. i got really offended. 
I think what sorrier is trying to say is that if you want to do anything beyond just flask, you need to hunt down and learn several additional packages. One for sessions, one for auth, one for forms, one for templates, an ORM, etc. And it's not always obvious which ones are best or which ones work together well. So building a website with flask involves a lot more than learning flask, whereas learning django is enough to build a reasonable site with django.
if they are build in python and you think they could be useful to someone you can surely post it here too. just make sure you have a good readme file. i assumed you are allready on github
If you're using a modern framework in either it really doesn't make that much difference. Sever configuration *is* simpler using php and apache, but I would argue that sqlalchemy is hands down a more mature and sophisticated database offering that anything in the php ecosystem and templating solutions are better in python too (yay, phptal. Yeah no.). The real differences are only really visible at a small scale. If you just want a static html page with a 'current date' field in it, just use php. It started out as a templating language and it's really good at it. Doing the same thing with python is easily an order of magnitude more complex; importing a template framework, setting up a wsgi container, etc. It's pretty tough to get started in python without using one of the frameworks (flask/bottle is probably the lightest weight you could get away with comfortably). Once you start scaling with classes and a proper php framework like zend or symphony, it's really not that different. The only really strong feeling I have is that the php api irritates; I understand backwards compatibility, but its a terrible mix of new DateTime style names along with old style invoke_date_item_with_obscure_underscore_method() functions. If you're careful you can write nice php avoiding the sharp edges, but it's a little bit harder. 
Actually, I think I have no reason not to support Python3. The only things holding me back previously were some database related dependencies that no longer exist. I'll look into it's behaviour with Python3; it should actually probably just work. EDIT: Python3.3 is supported as of [v0.12](https://github.com/hfaran/Tornado-JSON/releases/tag/v0.12)!
I haven't actually done this myself, but from some googling the answer seems to be combining a FieldList with a FormField. Like: class UpdateMultipleWidgetsForm(Form): widgets = FieldList(FormField(UpdateWidgetForm)) http://wtforms.simplecodes.com/docs/0.6/fields.html#wtforms.fields.FieldList
 for k in xrange(k_limit): for i in xrange((k+1), (k+86400)): ... These loops run for 14929833600 iterations of pure Python code, which will be *very* slow. The options would be: * Figure out how to express the computation as a small number of numpy calls (which are implemented in C or Fortran) instead of looping over data. * If there are no suitable pre-existing numpy methods, use [Cython](http://docs.cython.org/src/tutorial/numpy.html) to compile the loop into C code. I have obtained 1000x speedups of similar numerical algorithms using Cython.
i can't believe you made me wait over thirty minutes to get official 3.3 support. on a more serious note, thanks for making a contribution to the community with this project.
Look at web2py. Comes with everything to get started and many of its concepts can be carried over to other frameworks like flask and django.
Personally I find ORMs get in the way but SQLAlchamey has libs that abstract your connections but don't rely on their ORM. This way you can just do your raw SQL but have it wrapped in a parameterozed function call. 
The first time I had to deal with time zones in Python my thought was "What asshole approved to half ass this PEP?" If a third party lib can do it mostly right why the hell is the core team throwing up their hands in defeat? 
Thanks for this! As I am sure you can guess, I want to get productive ASAP, and ideally, I want to be able to scale whem my projects grow. If I take your meaning, pyramid combines the speed of flask with the scalability of django. If I am coming from a similar casual PHP background (never want to over or understate myself) would you recommend that path, or skipping straight to pyramid? I really appreciate the insight and thank you for the offer!
d'oh thanks, i actually could have known that :) thanks a lot
A better definition might be that, Django has a LOT more built in, and a LOT of extensions too. The ORM is decent, so is the forms library. But others can do those things better (Namely SQLAlchemy ORM and WTForms Form Library). Pyramid let's you pick and choose any ORM you like, or any Form library you like, as does Flask. But that comes at a price. Django has a lot of extensions, which integrate well with it's ORM, Form library, etc. etc. Which makes life easier. I would say go Django, for now. It'll get you off the ground quickly, will let you cut corners and build things quickly. Gives you a great confidence with how things work. Then, when you finally get bored. Play with something else. Flask is a real drop down, takes away everything you take for granted in Django. Pyramid is somewhere in the middle. Your interests will tell you which to use. For me, I'm starting to take to Pyramid. I feel like given enough practice, I'll be able to code as quick in Pyramid as I could Django. I tried to build a "serious" project in Flask but when I started wanting some complex permissions, things got.. icky with the libraries. I don't have time to implement a full library for permissions. Pyramid gives me the perfect place in the middle. Just intrusive enough to support me, keeps out of my way to let me decide how to do things.
It's really useful, but not advanced and it's already covered in official tutorial iirc.
A few reasons. Sharing code between server and client increases code reuse, and reduces the need to change mindsets when switching from server to client. Node's native asynchrony makes making a high performance api extremely simple. You can also share your templates across server and client. I would also question your premise that javascript is less powerful. It definitely has less built in, but that's what modules are for. Javascript is actually a fantastic language to write outside of the browser. Without the vendor inconsistencies, everything is a breeze. Node is perfect if you don't intend to do any heavy lifting on the server. If you do, look elsewhere as Node is single threaded and any computation will block that thread for all incoming connections. If you want to build an API for a Single Page Application, Node is perfect. All of it's IO operations are non-blocking, making server response times lightning fast. Basically, node is the dream of every frontend engineer who wishes they could just build a simple API and keep all the application logic on the client. If you're building thick server applications then Ruby, Python, or Java are the way to go.
&gt;compliment complement
Tornado is a nice mix of simplicity and built in useful things
IE, wordpress
Tornado and twisted are the "different paradigm". It really is mostly just about using JavaScript everywhere.
This isn't about dictionary comprehensions, this is about functional programming. And, given the sheer amount of 500 pages long decorator tutorials I've seen (expressed in FP terms, a decorator is simply a higher-order function), I'd say this *is* an advanced topic for most people.
who's "jack" and "sjoerd" ?
http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/
[**@ValbonneConsult**](https://twitter.com/ValbonneConsult): &gt;[2014-02-16 10:50:25 UTC](https://twitter.com/ValbonneConsult/status/435003226438369280) &gt;illustrated: tail-recursion in [#python](https://twitter.com/search?q=%23python) [*pic.twitter.com*](http://pbs.twimg.com/media/BglxITRCAAAV5Hm.jpg) [^[Imgur]](http://i.imgur.com/jm2FOXz.jpg) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/1y2rdh%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
But python doesn't have tail cal optimization, so there should be an infinite number of snakes instead of one snake forming a loop.
neither. But given the point of view of your question, yes, replacement.
The example shown wouldn't actually work; when a dictionary is iterated over it only produces its keys but this example assumes both the keys and the values. Use `my_dict.items()`.
virtualenv maybe with --system-site-packages ?
I thought Django was a piece of cake. I'd never done any work with any web framework before Django and I was off and running in two days. 
I know how to do it man. But that kind of thing is not very efficient. It takes a lot of time to do it with large sets. I asked for an efficient way to do it. That's not an efficient way.
Asyncio?
So I checked the Deadringer implementation btw. It does indeed split the image up into non-overlapping tiles, but that is not the real SSIM metric. The real mean SSIM has overlapping patches, as I described. It is not a computationally cheap metric by any means, so it may not suit your purpose. I'm not really sure what kind of images you're looking at, but depending on the distortion, with non-overlapping "chunks" that are that large, you could be completely blind to a lot of distortion on smaller scales. I haven't had much time to do work on this. If you still want to do 128x128 with 32x32 non-overlapping patches, my code does still work, and probably takes 10s of microseconds. I can benchmark it monday morning real quick for you.
[tail call optimizing decorator.](http://code.activestate.com/recipes/496691-new-tail-recursion-decorator/)
I think you've been too ambitious with this. Looking at the source code it seems that you're not particularly happy with programming in python. I think you should probably start off with a much smaller project and expand it when you've got it working. I would suggest you start off by implementing a person class and go from there.
&gt; One for sessions built in &gt; one for forms what part of forms doesn't flask do? &gt; one for templates build the fuck in. &gt; building a website with flask involves a lot more than learning flask only an ORM *if* you need it.
exactly.
Yeah, I realized that the deadringer code was doing something different, but I figured that it was close enough to work for my purposes. I chose to go with ssim because there's the possibility of filters and such being applied to images, so I can't just use color composition and other more general metrics. as I said before, a lot of this stems from inefficiency resulting from the fact that I don't save existing comparisons in any way, so if I throw new images in I have to rerun the whole set. If you look at the deadringer testpat.1k folder, the numbers.512.tiff and 4.2.04.bmp, for example, are pretty solidly determined to be similar with the deadringer method. My values depends on how fuzzy I make the comparison, so results vary based on the image size and chunk size. At this point it's really not so much about needing to go faster as wanting to go faster. Could I go back to the original algorithm and just let this chug for 30 minutes or however long while I go do something else? Sure. But I could also spend time seeing just how fast I can go because it's something to do when I'm bored. Also, in the original algorithm, what do you weight each pixel when you don't apply a gaussian blur? Do you just set the window to 1 or 1/(window length*window width)?
The Jenkins complaints seem out of place. Jenkins can be setup in 10 minutes, it's pretty easy to manage out of the box, and it doesn't require the registration of your application with GitHub (that's a strange requirement).
How was I rude? I was stating the obvious. You want me to sugarcoat my replies before I send them?
whatthe*what*?
Wow, never mind. Good luck with that
You have my apologies.
Yes.
If anyone forks, I suggest naming it Sharknado.
That only works if all recursive calls are tail calls. If you have a binary tree it won't detect the difference between the left (normal) and right (tail) call.
This could be handy to automate the bug fixing process, but is the original purpose (to teach new developers it's ok to Google error messages) really an existing problem?
I could have been clearer, I meant including GitHub with pull requests support, HipChat notifications and a green build. That said, your are probably better than me for setting up Jenkins :) For GitHub's requirement, well, this is a 0.1 version that was launched barely over a week ago, so support for self-hosted git repos &amp; BitBucket repos are on the roadmap (see bottom of http://blog.drone.io/2014/2/5/open-source-ci-docker.html). Thanks for reading and commenting!
&gt; I've talked to several people who think that Python and PHP are direct competitors so to speak. PHP is a web development language. Python is a general-purpose language which has libraries making it good for web development. So Python is a competitor to PHP in the webdev sphere, but PHP isn't a competitor to Python anywhere else.
&gt; Seems like I could have done a lot of the stuff that my package is trying to do just using existing Flask functionality. &gt; I'm wondering how I can add value to my package or whether it could be reworked to be worthwhile just as boilerplate for this functionality! I don't think it can or necessarily should be reworked. Flask makes handling the issues your package is simple and straightforward which drastically reduces the need for packages like this. Additionally when errors occur it's typically handled by the application in a specific way and attempting to restructure or limit that won't exactly help anyone. Don't get me wrong, it's a pretty neat idea, but I don't see it solving any problems that are common enough for it to be beneficial. *But* this is your project so don't let some random person on the internet change your mind without really thinking it over first. 
It's like any other job writing software but in Python.
Of course you wouldn't see the people who are not asking for help, since they are busy Googling their problems in stead of bothering you.
I like it. I may even install it.
So.... all this does is save me the trouble of opening google and searching for the error message myself?
You probably won't spend much of your day writing python. Some of the non-python delights include meetings, documentation, figuring out how things work, bureaucracy, training, planning, debugging, testing, and more meetings. Technology work is rarely boring: if it is, then you try and figure out something to make it less boring, such as automating it, or learning a new skill that will take you out of there. Where I work it seems pretty easy to make $100K but hard to go much beyond that. The con's are that it can come with long hours, pressure to perform, and having to make uncomfortable compromises on quality vs speed of delivery. If you have an enquiring nature, then the chances are you will love it, because a lot of the time you will be trying to figure out something. Freelance work could be hard to come by if you don't have either experience or charm (the more you have of one, the less you need of the other).
It's the best~! ... It is like any other developer job except you're more likely to be working on a project that needs to be developed rapidly than you would be if you were working with Java or one of the .NET languages.
I think Python's use cases totally subsume PHP's. I use Python for everything I'd use PHP for and more.
&gt;never ask for help or search for the answer &gt;&gt; Of course you wouldn't see the people who are not asking for help, since they are busy Googling their problems in stead of bothering you. I was referring to the extreme end where they don't ask for help and don't google the answer. After spending a day or more trying to fix it themselves this group asks for help and when asked if they googled it the surprising answer is "no".
So, better.
I have been working in Python for the past two years. Prior to that, I have 4 years of experience working in PHP. I have been working on a web application, which, at a startup, means I am also working in JavaScript, HTML and CSS at least part of the time. I am also working on various backend components in Python. In my experience working in Python right now means Python 2.6 or 2.7. Some shops are doing their work in py3k, but not many. Hopefully that will change soon.
use our brain. Troubleshoot, and not fear to fix the problem upstream wherever it ends. Do we have a problem in PEP, in the C compiler, norms, HW, the math we are using? We should always think of eradicating problem to their core, not walking around them at the highest level they appear in order to not break the edifice. If the edifice is broken: it is broken and I don't care. This is my job, not my life.
better than java
I'm not sure I fully understand your question. Look at argparse module for getting commands from user or script. There are no switch statements in python but you can use a dictionary as a replacement. Or unpack the arguments from the parser into a function.
Yeah, but switching largely to Java got me a pay raise. There are just too many Python programmers for it to be lucrative.
Where a live is quite the opposite. Everybody programs in Java or .NET, but anybody takes Python seriously
Where I'm from, there are too many PHP programmers and no Python. In fact, I haven't seen any job postings for Python.
Myself and my friend ran into the odd situation of needing to delete roughly 30k members from a Facebook group (since you can't delete a group until it's empty), and because there's no good API for this kind of thing, I wrote a Python script to do it fast! I adapted the python logic from [here](https://gist.github.com/babrath/5743753). Also a huge shoutout to /u/pandanomic for helping me out with the Selenium and threading stuff!
Should specify that facebook's graph API *does* allow for removing members from a group, but for whatever reason my attempts with facebook-sdk weren't working and giving invalid method errors (roommate was a facebook intern and said it was probably one of the many bugs in their API) If anyone is wondering why we were deleting a group this big, it was one of the spam groups created by OneClass. Relevant article: http://techgeek.com.au/2014/02/12/fk-oneclass/
Don't forget copy. AND PASTE.
San Francisco &amp; Silicon Valley has a glut of untalented Java "programmers" and everyone is clamoring for Python (Google, LinkedIn, Yahoo) or Rails (every startup) devs. There's still plenty of openings for Java devs but as an infra SRE, fuck those idiots. They're like physicists, everything works fine in a vacuum as long as all objects are perfect spheres. (And memory is infinite and self managing.) tl;dr: Eat a dick, Java!
Allow me to offer some tangential advice. Stop thinking about programming languages. They're largely irrelevant to a career as a software developer. Concentrate on concepts and good practices, and look for jobs that are themselves interesting. Know a static, compiled language, a dynamic language and a functional language and you're pretty much set for picking up any language you need for a job.
Python is fun and the community is amazing! The only problem was the pay, at least in my experience with a very small company. I had to move to Microsoft stack for a nicer pay. But once Python, your heart stays with it ;) My side projects are all Python, so easy to get up and running and free! Advice though - love what you work with, money will just come, don't feel shy to quit a boring job. So many just give up and get comfortable with a boring job - family and kids might attribute to it since stability is much required and move cross country may be a difficult option. Do all the traveling when young is my experience!
Are you in a high tech market? Where I live Java jobs outnumber Python by, I dunno, easily 40:1. The only jobs I've run across were for crappy webapps, with even crappier pay. I've more or less given up on writing Python professionally until I'm able to move to a better area. I've accepted my Java, XML configuration, dependency hell reality. I wish Scala was more popular.. 
Postings aren't a good measure. The best jobs never make it to postings.
To provide a list of completions: `readline.set_completer(fn)` where `fn(prefix: str, index: int) -&gt; result: str`. To display them: `readline.set_completion_display_matches_hook(fn)` where `fn(prefix: str, matches: [str], max_length: int) -&gt; None` should display the contents of `matches`, re-print the prompt and the contents of the line buffer, then call `redisplay`. Also, readline, otherwise known as GNU readline, is a C library that does a lot of termios- and \033[-based magic, so good luck writing an alternative. **EDIT**: [Here's an alternative](http://www.reddit.com/r/Python/comments/1y5uyf/an_experimental_gnu_readlinelike_library_for/), if you really need one.
Come to Los Angeles. Tons of Python jobs and if you know Django, there's startups offering up to $140k a year. 
I like how you hate Java.
&gt;everyone is clamoring for Python I see this happening a lot in traditionally low tech positions. Nowadays Python is essential for finance, business analysts, country manager, marketers, etc. 
Here in Texas Python jobs are almost nonexistent in comparison to Java/C#. Ive interviewed at places where they havent even heard of Python. Out of touch old farts...
I like how you like how I hate Java! Write once, debug everywhere... Java: Converting XML to error logs since... what do you care? You're writing in Java, you just graduated from Phoenix on-line. Fuck you!
&gt;Ive interviewed at places where they havent even heard of Python That described the climate around here perfectly. I just went through a round of talking with head hunters hoping that they'd know of something. However, that was a huge mistake. Only one of them had even heard of Python -- though the majority hadn't even heard of "this github thing" either, so Python being foreign to them wasn't all that surprising. To be completely fair, there are some Python "startups" in my area, but not a *single* one of them is willing to pay actual money. They all want to do that equity (e.g. work for free) bullshit. 
Concurrency for scaling is a big deal these days, and this is best handled with immutable message passing rather than explicit threads sharing state. Functional programming and immutable types go really well together, and languages such as Erlang and Scala utilize this very effectively in their actor models. But learning a functional language will make all your programming better regardless of language.
&gt;for hipsters who don't give a fuck about code maintenance Reminds me of when some people on my team built several applications in mongo. Months and months swasted on useless code
As an example, Guava (the best "missing standard library for Java" that I know of) is heavy on providing immutable types, and understanding where they're effective is easy when you're familiar with functional programming. Having experience with these concepts helps reason about code in any language.
Thanks for the suggestion - I'll have a go at this shortly and let you know how I make out. edit: but the fact that it won't allow for BooleanField may be a dealbreaker, we'll see.
There was a white paper out that suggested a move to one string type in the future. Of course the Delphi roadmap ran out in September 2013 (I guess they're off-road now!) so there's no telling when that will actually be done. There's a shortstring type that only holds up to 255 characters, and this is for backwards compatibility with ancient Delphi and Turbo Pascal. ANSIString is limited to 2GB and holds 8bit ANSI characters. UnicodeString is also limited to 2GB and holds UTF-16 characters. There's no concept of bytes vs. characters; UnicodeStrings carry codepage information around with them and you might end up with implicit conversions (especially as you can also assign ANSIstrings to them). WideString is a type that's erally only intended to be used with Windows' weird BSTR strings. There's actually more than four because in Delphi there's no problem that can't be solved by another class or type (including ones caused by excessive classes or types). RawByteString is intended to be used for passing strings in parameters while avoiding implicit conversions. The documentation warns "In general, it is recommended that string processing routines should simply use 'string' as the string type. Declaring variables or fields of type RawByteString should rarely, if ever, be done, because this practice can lead to undefined behavior and potential data loss. " Yes, under certain conditions even RawByteString may trigger an implicit conversion! There's also a char type, Pchar type (pointer to char), and probably a few more. An interesting thing to note is that Delphi didn't add Unicode support until 2009, after Guido had already pronounced two string types as a nightmare and fixed Python. Embarcadero's engineers usually operate blissfully unaware of what anyone else is doing in the rest of the computer world, so they ignored Python's lesson and decided four+ was the way to go. Now, surprise, surprise, they've decided this hasn't been a good idea and want to faze out the non-Unicode string types. Many of the exiting users are up in arms insisting they need ANSIstring because 1 byte=1 character (and they've used a string type to deal with bytes, arguably because Delphi doesn't have anything like Python's bytearray). I attempted to explain the incredibly awesome (to me at least after the mess of Delphi) characters != bytes concept of Python 3 but to a man the stalwarts have fought tooth and nail against the idea. They tell me that "under the hood" they're bytes (leaky abstraction?) and that I'm just too stupid to understand what's "really going on". One user insisted he couldn't encode/decode at the edges; he needed to do so everywhere in his program. It turns out that this was to get around a major bug in Delphi's interface with PCRE and had nothing to do with Unicode in general. Delphi's strings are also 1-based and a custom reference-counted, copy-on-write mutable implementation. 
It depends on the company's commitment to the project, the actual need for it, performance and ROI wise and the available talent pool. Mongo DB has it's niche but is performance really that tight that you're willing to spend to support another tech and take the long, expensive road to implementing it correctly? Almost always not. I have the good fortune to currently be working for an established and profitable company with no technical direction (or talent) but foolish aspirations to be relevant in SF and the wallet to try to back that up. I get new toys errday with no expectation of returns.
Thank you!
Thank you. That was educational. You seem to be very knowledgeable on a language which you seemingly despise...
&gt;For about a year, you've spent time in Delphi forums and trolling blog posts &gt;insisting that the product is dead No, I gave a very detailed account of the months-long work I undertook compiling an overview of modern computer languages, frameworks and databases for two start-ups and how disturbed I was by what I found - namely that Delphi was far, far behind many other offerings, including free ones. I provided significant detail and then asked for feedback - specifically, what was the compelling case for Delphi today? No one had an answer. The Chief Evangelist didn't have an answer. The CEO didn't have an answer. Marco at least tried to answer very narrowly (about Interbase). Other than that, no MVP or TeamB'er had an answer either. And it's a plainly observable fact that Delphi use is down to "niche" status in most of the world; that was never in question. Any claim to the contrary would be a Carl Sagan-style "extraordinary claim". The question was how would one convince a company to use Delphi in 2013 as opposed to 1995. The collapse of the ecosystem was a key component - how do you convince an enterprise to adopt a language that's not taught in schools, has no commercially published books, few remaining users, no API support, etc? If you took this as "trolling" it's because you have an extreme emotional attachment to the product and experience cognitive dissonance when these facts are brought up. &gt;and taking shots at users and Embarcadero employees and then complain that &gt;they don't take you seriously. You make it sound like I was a bull in a China shop rather than, as in one instance, writing a 400+line detailed summary of the work I'd done and all the weaknesses of Delphi I'd seen compared to its competition and how it seemed to me an unsurmountable challenge to sell it to enterprise today. I'd sold enterprise level software for a few years and had no idea how you would "put it over" in a presentation, especially if the competition had been able to present first. I asked what the business case was for Delphi. The answer? A total of one (!!!) reply. That was Rudy. The complete response? "If you don't like Delphi, then don't use Delphi." Several posters called him out on it, recognizing that if that was all he had then he couldn't be serious in his positions. Now who doesn't take who seriously? There was another thread, not started by me, "The Case For Delphi", inspired by what I'd written. Total number of MVPers or TeamB'ers who took part in the discussion? Zero. Not one word chimed in. Again - who's serious and who's just fooling around? I won't even bring up Mason Wheeler's claim of Delphi being able to produce smaller code than Haskell then when given an actual Haskell program and asked to demonstrate his claim insisting that I just wouldn't understand the point he was trying to make so he wasn't going to show me. Not a single person called him out on that. He really went off the deep end on his blog, arguing that Delphi was the superior language because the program his company sold was #1 in its market and it was written in Delphi. There were enough logical holes in that claim to drive a truck through, and at least several readers did point them out (such as all the top programs that aren't written in Delphi and what that meant) but not a single MVPer/TeamB'er oddly enough. Is Mason serious? Oh I forgot Warren did pop in to the case for Delphi thread only to say that there was no need to make the case because "it's been proven a million times." Ok. Who's serious? &gt;Maybe if you asked the occasional legitimate (and short) question What does "legitimate" mean? What's the business case for Delphi today is the fundamental legitimate question. Nothing else is legitimate unless that's answered. And what's this about length? I deal in facts and I'm actually serious, hence I lay out all of my evidence, my documentation and my sources when taking a position or making a claim. The replies to me are so short because they aren't proven or backed by evidence. They don't respond to every claim made or address every point. Generally (especially with Rudy) they cherry-pick one line or word and derail the argument down the rabbit hole. I **have** to be extremely detailed to try to keep him from doing that. &gt; and didn't dismiss any answer you get out of hand. I don't get answers, other than "If you don't like Delphi, then don't use Delphi." Even when I give the chief evangelist an email address and ask him to talk to me privately if he wanted to (hardly to move of a troll) I don't get answers. I was the one who asked a serious question as I'd just watched two start-ups choose languages other than Delphi. I'd chosen Delphi for the start-up I worked at from '95-'03 and been very happy with it but I was upset by the fact that in '13 if I was doing it over again I wouldn't make the same choice. I wanted to know how we dealt with the objections, the ecosystem issues, the language issues, the quality issues. I either got no answers or steered down the rabbit hole where people denied there were any problems, claimed there were over two million Delphi developers (which would mean 1/9 of the estimated world's developers were Delphi users), etc. But no, I never got a single answer other than "If you don't like Delphi, don't use Delphi". I can't take that to future start-ups who ask for my help. 
Just started looking for a Python gig in LA. Do you have any tips on where to look/how to go about finding one?
I love programming metaphors. Like threads for instance. They're an interesting metaphor, of a computer that runs until an IO operation, halts until IO complete, then resumes, as if IO was just a really show instruction. Except really, that's just a metaphor. Really, you have a set of registers summarizing the state of the program, and "blocking" is just saving those registers off to let the computer run something else until you want to resume. *That's what a thread really is*. And it's a very easy to use, structured abstraction. I've been meaning to try out stackless+twisted as a better implementation of IO threads. I hear it works well. Thoughts?
The place to put your packages is ~/.local/lib/python2.7/**site**-packages/ Let pip manage ~/.local/lib/python2.7/**dist**-packages/ 
updated :)
Until you have to deal with concurrency.
Yep. There's no respect for Python, until you force it on them as a way of performing otherwise impossible tasks, and even then it's only grudging acceptance. That's more or less how I turned Python into a six-figure job for myself though. I joined a small company that had a hugely profitable legacy platform written in Visual Basic, Delphi and ASP.NET. It was a mess; awful, fragile, and completely unable to scale. They hired me to scale it. After determining that was basically impossible and would require infrastructure investment way outside their means, I told them I could have a working prototype of a replacement in Python in a week (the prototype actually took about 2 days), which would do everything the old system did and more, and also scale gracefully and free them of their dependencies on Windows and the various OCX controls and DLLs they paid continuous licensing fees for. Meanwhile I did some evangelism to an intern and a few other members of the company who embraced Python with enthusiasm. Having multiple developers onboard and seeing how easy it was to learn calmed the bosses frayed nerves a bit. The sysadmin was also on my side. The savings from ditching Windows and MSDN and all their other subscriptions allowed them to make substantial and much needed investments in a much beefier Linux infrastructure. About a year after everything had rolled out very successfully, I brazenly asked for a substantial raise. It was granted with little question, because the bosses knew something I didn't -- the new system was looking so glorious on the income statement they had received an offer they couldn't refuse and were spinning off my entire department and selling it to a much larger company. Six years later, I continue to work for the new company, and despite occasional sabre rattling about how we need to switch everything to Java, I have been able to disarm all of those fights so far.
Hahaha, those poor sons of bitches! Looking forward to the "Why we stopped using gevent" blog post in 2 – 3 years.
I work at a Java shop and I've been shot down repeatedly when planning to do various projects in Python. I would fucking love to work at a Python shop. Or just a place where I could code in Python 50% of the time. 
Programming doesn't change based on the language. Programming changes more based on the company in which you work. For me I probably spend ~80% designing/stress testing/discussing ideas and ~20% coding. Chances are that as you learn more you spend less time coding and more time thinking.
I wrote quite a few concurrent Python apps in my professional career. You have many options for concurrency in Python. It's most of the time perfectly doable and often surprisingly easy and pleasant. The "Python is not concurrent" is just on old mantra repeated by people who think that the classic multithreading model is the only way of doing concurrency.
Got to say, since learning computer programming, I never think about Job. I did it solely based on hobby. But, reality struck, I got to make money by programming. And it was fun! ... but not as fun as programming for Hobby. Yeah, but we must make compromise... Anyway, my first timer with Python is still under a year. Probably 8months. It is the best time I had with a programming language. It was just amazing. Can't express it better though, but it was A.M.A.Z.I.N.G.. I am an online remote freelancer from oDesk, and just about this 6months I start to apply and take Python job. And loving it! * Still, my core experience was with Java and .NET. So, I made a quick switch everytime those skills are needed. And I am not having a slightest boring episode in programming. It was just my hobby.:)
Fair enough.
I find the name confusing as if it were linked to Qt somehow. Cool idea though.
Is that a joke? Thats a really weird scenario.
Agreed. Besides if you prove your worth good managers often start either letting you pick your own tools or consult you first.
The problem is not angering the GIL, but angering the programmer. Node's async I/O easy of use can't be compared to its Python alternatives. Gevent is great, but it's not part of the standard library, it's not a core part of the language; and, as such, you find yourself re-rolling every third party component you use to make it gevent-friendly.
I agree that "Python is not concurrent" is a gross oversimplification. "Python is not out-of-the-box I/O async'd" would be a better description of Python's plight with concurrency and I/O locks.
gevent, as you say, is one way of doing it. `multiprocessing`, on the other hand, is a part of the standard library, and also allows you to write concurrent code that takes advantage of multi-core CPUs. 
From the python glossary: "Function: A series of statements which returns some value to a caller. It can also be passed zero or more arguments which may be used in the execution of the body. See also parameter, method, and the Function definitions section." A type (or class) is a function that takes in some arguments and returns an instance using the namespace defined in the rest of the class definition. If it does not match this definition, how does it not? Sure, it's a special subtype (I've been trying to avoid this word) of a function, but it's still a function.
I thought the same thing.
It doesn't create any members at all - it creates a definition for the sequence and sees if the value falls onto that sequence. Eg `x in range(0, 10, 3)` creates a range object whose `__contains__` method evaluates `10 &gt; x &gt;= 0 and x % 3 == 0`
Ah, that makes perfect sense, thanks. The post hints at this, but doesn't mention it explicitly, and I must have glossed over it.
Yes, `int` and `str` are listed as built-in functions while also being types. The docs don't really make clear when built-ins are actually functions and when they are types (but to be fair, it doesn't matter *too* much, and if it does, you probably know about it)
tbh so did I. I put off looking into it because I had no need for a python GUI, then when researching kivy + sl4a, I decided to look into it properly and was pleasantly surpised
I have been coding with Python professionally for almost 10 years here in Austin. I get hit up by recruiters looking for Python programmers several times a month. The local Python user's group regularly draws 75 or more people to their meetings and practically no one attending is actively looking for work. My current company is actively looking for another mid to senior level programmer with significant Python experience. Having said all that, the demand for competent Javascript programmers is even higher.
I learned something new. &gt;.&lt;
My day job is to work on [boto](https://github.com/boto/boto), the official Python SDK for Amazon Web Services (AWS). It's a bit of a weird situation for several reasons, but maybe I can provide some insight for you. Like most large corporations, Amazon is primarily a Java shop. When I joined I got my foot in the door by writing Java, but once I was allowed to transfer teams I moved. I mention this because it's important to realize that there aren't many Python jobs in the company as far as I can tell. Moving to this new team required in-depth idiomatic knowledge of the language, and my previous experiences with Python helped a lot. The majority of my day-to-day is spent maintaining boto. I'm now the #4 top contributor to the project. We use GitHub almost exclusively, but obviously can't for anything that hasn't yet been announced (we use an internal private git mirror for that). Typically this means my day is spent between code reviews of new pull requests, triage of new issues, fixing high priority issues, implementing new API calls as services get updated, etc. I can't go into a ton of detail, but there is at least one meeting every day among the team and many days of the week we have several. Due to the nature of boto and its breadth of service coverage I frequently wind up working with other teams across the company. The vast majority of these use exclusively Java. The larger team works on several SDKs, but I primarily work on Python. Others in the group handle PHP, Ruby, Javascript, Java, C#, etc. The nice thing about this is that I can get perspectives from other language experts when I need them. I work in the office 4-5 days of the week, and many times work from home one day a week, as do many of my coworkers. Remote work can be allowed, but is really not the norm. Up until recently one of my luckier coworkers was remote 90% of the time. My recommendation: don't expect this, particularly in a large company. The work can certainly get boring at times, but that's true of any job. Overall I'd say my satisfaction in this position is quite high, and my day to day work is interesting enough and keeps me busy. There's a never-ending list of stuff to do for boto. Many members of my team also have open source projects that they work on (some at work if sanctioned, some in their free time). Glassdoor has some info on pay at http://www.glassdoor.com/GD/Salary/Amazon-com-Salaries-E6036.htm?filter.jobTitleFTS=Software+Development+Engineer Also, my team is hiring a Python developer. Feel free to PM me for a referral https://us-amazon.icims.com/jobs/251558/software-development-engineer%2c-aws-developer-resources/job Feel free to ask me questions - I'll answer them as best I can. Edit: I'll also add to all the naysayers citing static types and compile-time checks: proper testing and documentation can largely mitigate the risk. Boto has both unit and integration tests that go a long way to fixing any potential problems with a dynamic language, as well as [fairly impressive documentation](http://boto.readthedocs.org/en/latest/).
The syntax doesn't change what they are. Syntax is just syntax. Whether you prefix it with "def", "class", "function", "define", or even "walrus", an entity that takes in arguments and returns a value of some form is a function. Classes fit this definition just fine. The binding of the namespace defined in the class definition just describes what the resulting object that the function is going to return is going to look like. 
My last project developed a very large environment in Python over ten years. At the end we probably had six people maintaining &amp; contributing to the codebase. While we had challenges, type and testing weren't serious ones.
APUG or AWPUG?
This is pretty fantastic. I'll give it a tryout when I get home.
This is where I dont get corporations. Personaly, I am probably twice as effective in Python as Java, but my company and others push Java and pay more for it. 
It's very fortunate to be able to choose the language you work in (or that it aligns with your supervisor's preference), especially when you're supporting a larger ecosystem.
I don't see a pygame version for 3.3 listed here: http://pygame.org/download.shtml Not sure where that 3.3 version came from, but it might be beta. Stick with the versions on their site. 
 cd /your/local/package pip install -e .
It has been posted before. It has been posted now. It will be posted again. I'm okay with this. This is hands-down the most informative python video I've ever seen. I highly recommend it to all python programmers, both new and seasoned.
Would be better to say that *some* types are functions in the abstract notion of a function. They're functions in the type domain, mapping types to other types. The ground types in Python (int, str) are not though.
&gt; tl;dr: Eat a dick, Java! I don't know enough to understand this opinion but I enjoyed it regardless.
How are int and str not functions? They take in a value (E.g. 5), do some operations on it (or not, depending on input), and return a value. It sure sounds like a function to me.
Just as a random sidenote, my friend used to like to join groups that had no administrators, message them and say "I am the king", and then kick them out. This would have been useful.
But unlike a function, a class can only return a value of one type; classes and functions are both `callable`, but they aren't the same.
this is location specific, as I've found the opposite in my current location
This is where Python's duck typing comes in - they're all [`callable`](http://docs.python.org/3/library/functions.html#callable), but have different uses, because classes have state as well as behaviour.
If you're having difficulty doing parallel I/O in python, you're probably doing it wrong. https://medium.com/p/40e9b2b36148
Good shit! That story rocked man.
that sounds nice...whenever I'm at work not writing...that's where I want to be.
Can you include an example project in the distribution? So that people can get a clearer idea of how they would implement it? It's not clear to me whether you can configure it to ask questions of the person installing the app or not, and if so how. I find real-world examples easier to understand than abstract examples.
See now you're making me question the universe
I enjoyed this thoroughly!
thanks for the gist, got some useful stuff in there. My particular problem is that the db in question, I only have read only access to but I am asked to report off and analyse data. This was my creative workaround..! I know it would be tons easier to create the table/view and use sql logic to join as you have described but my access is less than desired(!), I used a random sqlite db in this case to proof of concept my idea.
Java looks 'grown up' to people who don't actually have to work with technology and probably has the highest profile of any programming language among non-programmers. Just as no one ever gets fired for buying IBM or Microsoft, no one ever has to explain to a non-techie manager why they chose Java for a project. Everyone knows it's 'enterprise ready', which means it must be perfect for everything, whereas Python is a plaything for nerds without the backing of a major corporation.
They're pretty awesome tools for when you need to interact with a site that doesn't have an (flexible) API, or when testing a site's UI
You can't possibly be in Austin. 
This guy does really good, well-paced lessons. Unlike most nextdayvideo which is disorganized and slow.
Anecdote related to time. I once tracked down a bug between two app servers that was due to the underlying O/S (Linux) being configured with New York and Detroit respectively. Now... today both are in eastern timezone and observe the same daylight saving time but they have not observed the same daylight saving times over the years! So some really weird hard to reproduce off-by-one hour errors in date math caused havoc.
You're confusing the syntax which overloads the callable on the type object for casts with the underlying PyTypeObject. They're seperate entities.
https://argcomplete.readthedocs.org/en/latest/#readline-style-completers
I don't know if I buy this. An experienced developer can get hired into a shop that uses a different language, but I don't think an entry-level developer would get hired that way unless he's coming out of a top school. No one's going to want to teach C++ or even Java to a beginner who only has Python or PHP on his resume unless there's something about the job that keeps them from getting enough candidates. Even for experienced devs, it takes six months to really start writing idiomatic code in a new language, and to work through most of the gotchas. And then you still see people trying to write C/Lisp/whatever style code in Python. Companies that are using Scala or OCaml obviously have to be openminded, but C++ and Java jobs not so much.
If you can't do it as a view, you can always just have it as a prepared statement and just have a central point in the code that builds the statement.
It's precisely an implementation detail, I'm talking about the implementation of Python internals not the surface language. We can create all sorts of random PyObjects structs that define ``tp_call`` that are not functions. Python defines some (not all) type objects to overload the ``tp_call`` field for specific builtin cast function, but the cast functions are not associated with the object. When you use ``isinstance(x, str)`` and ``str(3)``, the str identifier is overloaded to stand for two different entities entirely at the implementation level. 
Two things.... 1. This is a MUCH better implementation doing the same thing: https://github.com/sloria/cookiecutter-flask 2. Shouldn't this have been posted to [r/flask](http://www.reddit.com/r/flask/)?
I would recommend this book for training: http://www.amazon.com/Python-3-Object-Oriented-Programming/dp/1849511268 It's a very modern approach to Python which I think is the direction people should be heading. 
Python is not CPython so implementation details for any given implementation don't really have much bearing on the language at the conceptual level.
I never said which was which.
So anything that implements some abstract notion of some abstract callable protocol in some abstract definition of the "python language" is a function, is this what you're saying? 
You could use a lot of different tools for that but just the default module [`urllib`](http://docs.python.org/3.3/library/urllib.html) should be enough for most basic tasks. Also, [`re`](http://docs.python.org/3.3/library/re.html) often comes in handy when parsing text.
Binary Python distributions have several different 'flavors' depending on which features were enabled at compile-time. These 'flavors' can be distinguished by suffixes; versions with different suffixes have incompatible ABI (and therefore compiled C modules). From `configure`: # * --with-pydebug (adds a 'd') # * --with-pymalloc (adds a 'm') # * --with-wide-unicode (adds a 'u')
There is no language reference the exists independent of CPython, the implementation is the reference. It's not like ML or Haskell where there is an actual description of the operational semantics that the implementation must uphold. It's pointless to debate about some ill-defined abstract language in which the ground type couldn't even be defined independent of the implementation, you can basically claim whatever you want to about this because it doesn't exist. I'm only interested in the concrete implementations of Python, because they have a concrete definition.
`cmd` is a much higher level library (both GNU readline and this library implement the `input()` built-in, which `cmd` then uses to read a command from a terminal), and `shlex` is simply a parser for sh-like commands that has nothing to do with terminals or I/O at all.
Um, what? There is indeed exactly that: (For 3.3) http://docs.python.org/3.3/reference/ http://docs.python.org/3.3/ It's not pointless. I've already cited my claims by quoting directly the documentation. If you want to disagree with the documentation, please take it up with the python-dev mailing list. If you're only interested in the implementation details, that's fine, but that's not what I'm talking about, so counterarguments based on implementation details miss the point entirely.
google `python beautifulsoup` , `python requests`, `python scrapy`, `python mechanize`. Personaly i would go for requests + beautifulsoup. 
I really like the format of this page. I'm running through my school's Python curriculum, and I think this page will be a great companion to my school's learning materials. Thanks!
i would say regex is a bad way to parse html. also requests is better than urllib.
Beautiful Soup is a beast for HTML parsing. 
no offence but have a look at this http://www.python.org/dev/peps/pep-0008/#class-names. 
This is from Docker's official install instructions, that said, you can most probably work around this and do it manually. Up to you.
thanks for the link!
The page's layout doesn't help but there is a link pointing to this page: http://qpython.com/ Which in turn has a link to this page that finally has useful stuff: http://qpython.org/questions/ **Edit:** This seems just what you (and me) were looking for: https://github.com/qpython-android 
Thanks. I couldn't find this info when googling for it.
.
Nice format, great presentation and very noob-friendly. But wtf, dictionaries should definitely have their place in there!
I think you didn't understand my problem, but I am appreciated that you tried. I really don't know why people decided to vote you down, rather than leaving a reply explaining that you weren't quite there. :)
thx didnt know that it looks really good, i like selenium so ill definetly consider using it soon. Usualy it depends on what you whant to do. the only problem is performance
Thanks, I think this may not be the solution I'm after, but I must be honest, I am not familiar with argcomplete, nor am I trying to parse/complete argv-styled parameters and the documentation is simple enough. :)
Python 3 already has [function annotations](http://www.python.org/dev/peps/pep-3107/). And runtime type checking is [extremely expensive](http://www.reddit.com/r/Python/comments/1a5tc6/a_powerful_unused_feature_of_python_function/c8uqky9) so its usefulness is limited.
Looks good. It would probably help to be consistent with the level of training that you're offering. If you have to explain what a string is, you should probably also teach people how to launch a python shell, and you might have to introduce other basic programming concepts. You take more of an "ingredient" approach rather than a "recipe" approach. That's probably great for people who know other languages and need to know python's way of doing things. You might consider breaking up the tutorial and incrementally have people produce real, useful python scripts using the "ingredients" you've introduced. Just some thoughts. Good work!
That's a pretty cool work. Thanks for sharing.
&gt; nor am I trying to parse/complete argv-styled parameters So you are trying to create an interactive REPL with completion which does not accept arguments from the commandline? (a "command line parser") If your requirements are such that you must reinvent the wheel and/or maintain state: * http://docs.python.org/2/library/cmd.html (http://pymotw.com/2/cmd/) * https://pypi.python.org/pypi/cmd2 * https://pypi.python.org/pypi/CmdLoop If you also want to accept normal unix-y shell parameters (so you can pipe and redirect command output), a cmd loop which prints a subset of [`argparse.ArgumentParser.format_help`](http://hg.python.org/cpython/file/164504ecc2e3/Lib/argparse.py#l2322) may be helpful: * http://docs.python.org/2/library/argparse.html * http://docs.python.org/3/library/argparse.html * cmd + argparse: https://groups.google.com/forum/#!topic/argparse-users/7QRPlG97cak 
Nice hacking there Doug. I see you are using a module that I'm unfamiliar with *dg* for this. What is it doing?
I agree with this poster. Some thoughts: * As above poster says, a Person class would be a good start * This should be multiple files not one: I'd have one file for the gui code, one for the console, one for the person class etc. * In programming in general, it's considered good practice to separate concerns (so for example, you shouldn't mix your gui with your data storage or your business logic). * In some cases where you've used print, you'd be better off using the [logging module](http://docs.python.org/2/library/logging.html) * As a general rule, I aim for zero print functions in my code, unless the code is handling terminal output. * You're using *str* as a variable, which is overriding the str type and I can see that ending badly. You should treat str as reserved, because it is. Variable names should also be more descriptive. * There should be validation on the date of birth, also consider storing the date using datetime.date * Your logic for teenager could be simplied using 13 &lt;= teenager &lt;= 19 as your criteria * Although I can't think of a reason why you shouldn't, it's not convention to use strings as comments (except docstrings) - use # comment goes here instead. * The structure of the code at the moment means that there isn't really any hope of unit testing it. * I think in general, it's a good idea to put all of the stuff like help and licensing in when the project is more developed. At the moment, the useful functionality of your programme could be done in like 30 lines just by taking out the bits that aren't adding value or that can be simplified. Simple is beautiful. * It's good practice to use if __name__ == "__main__": ... * When using version control, my rule is not to commit code to HEAD or master that can't be used or that is broken - so I avoid things like placeholders, if something's not ready, I hold it back locally, keep it in another branch or stash it. * You're representing numbers as str instead of int Just by taking out the stuff that has no real value and fixing some of the logic, I've got it down to less than 60 lines: https://gist.github.com/anonymous/9061337 (I didn't see whether it ran, but you should get the idea). All of this stuff about licenses and CI and whatever is important for professional programming (sometimes), but it just hides what's actually going on when you're learning. 
None is the best, it depends on your application.
I think you are focusing on the parsing of what input() returns and that isn't exactly my issue. The problem with readline completion is that if you have the words "enable" and "options" in a list for consumption by your completion function and you press "tab" at the prompt, readline will display it in this fashion: switch#&lt;tab&gt; enable options switch# I'm trying to change it to make it output differently, i.e: switch# enable options yada switch# 
This sounds like it involves a bit of domain-specific knowledge. I would try StackOverflow -- I'm willing to bet you'll have more luck over there.
What operating system?
What's the bar of quality for a Python developer on your team? Would someone need lots of GitHub projects and open source involvement to be considered good?
There are lots of options .... a business knowledge would probably be useful combination with programming skills. 
Ah, a `\n` between suggested completions. Yup not sure how to do that.
Windows
If you have setuptools, you should just be able to run `easy_install pip`. 
(Google += JavaScript) - oh wait, wrong sub: Google.append(JavaScript).
I can't seem to find the right version. I need it to be compatible with 3.3 and not be a .whl file extension
Im sick of this sites blog spam. 
I usually just grab get-pip.py: http://www.pip-installer.org/en/latest/installing.html
I was at ARL from 2009-2011. Maybe we were allowed to do things differently since we were a research organization? We wrote a lot of open source software for researchers and scientists to use.
http://learnpythonthehardway.org/book/
There are no "super stars" in programming.
I think a big Java selling point is long established and stable packages. Python is getting there, but just 3-4 years aho this really wasnt the case.
Doesn't python 3, which is what the tutorial is using, use new style classes by default?
Ah, apparently. It's still recommended to subclass from Object though, which makes sense if you want to try keep compatibility between 2 and 3.
That's exactly what I meant.
I have no idea what this thing is supposed to do for me, even after reading the documentation. Especially after reading the documentation...
I don't know whether you mean the standard library, but if so, yes, I was shocked at how weak Python's collections are.
Pretty cool that you can run Google App Engine's ndb datastore API on top of Cassandra.
For something like IRC that works with human generated I/O, it's not likely to be any real problem for you so don't worry much. We work with real-time market data, and the forced latency is substantially larger than socket I/O, so it popped up during development. q.v. /usr/lib/python2.7/threading.py class _Condition about line 343 Edit: my mistake, it's 500ms, not 50 -- you *might* care about a 1/2 sec lag. 
I am in the same boat. Any body have good Python 3 book recommendations? 
When you get this sorted out, can you please update with a step-by-step process? That'd be amazing, thanks.
Do many people really follow the 80 characters rule? I'm a fan of everything else in PEP8 but that just seems utterly outdated for modern development. My company uses 120 and that seems pretty reasonable.
Nice, very informative, I've been needing a good example for text manipulation for input. As another example, the CERN guys working on ROOT have developed their own cross-platform text input library that supports windows also called [TextInput](http://root.cern.ch/gitweb?p=root.git;a=blob_plain;f=core/textinput/src/textinput/doc/textinput.txt;hb=HEAD). It seems to be pretty advanced, although I had a hard time parsing the interface.
Will do, thanks.
Thanks god we have ninja gurus!
Looks like fun! Also looks like you're trying to support both python 2 and 3. Bravo, good sir.
Let me expand a little on that. Before you continue make sure that you have your python folders in your paths [screenshot](http://imgur.com/WkDvOOW) 1. download [get-pip.py](https://raw.github.com/pypa/pip/master/contrib/get-pip.py) 2. from the command prompt change directory (cd) to the folder you downloaded get-pip.py to 3. run: python get-pip.py HTH
Awesome!! Thanks for posting. I'm definitely going!
The blog is for Python 3, and all classes are new style classes in Python 3.
If you're pasting it straight into IDLE, don't do that. Open up a terminal and run it from there.
This is awesome :) The only problem is the dates. Late may is not the best time of the year for a full time student
Hi guys, apologies for the layout - i just changed it this weekend but tbh all the wordpress free themes suck for technical writing... i'll go through the themes again to see if I can find a better one...
Yeah, dates are hard. With PyCon, EuroPython, SciPy and DjangoCon + all the national Python conferences filling the calendar, and taking venue availability into consideration... it's tough.
I have mixed feelings. Some of the content is really utter garbage (like the recent 'How to write a Python library' post), but most of the time it's okay-ish. Nothing blatantly wrong, just an immature style and code examples that are far from being perfect/idiomatic.
I found performance of splinter to not be a problem. Mainly cause the browser and Aussie internet combo performs so badly. It is another option to have in one's toolkit.
That entirely depends on whether you intend the code to run on Python 2 or not. If not, then no, there is no such recommendation.
The Philippines is going to have their [second PyCon this weekend](http://pycon.python.ph/). We from Python.PH wishes PyCon Sweden luck.
You know what he meant
Traditionally there is a quite large amount of attendees and talks related to science at PyCon conferences - I expect this to be true for PyCon SE as well. 
Stolen from http://code.tutsplus.com/series/python-from-scratch--net-20566
I don't know that it's appropriate, but on your local network you should be able to type in the IP of the machine running the server, followed by port no. ie. 192.168.1.7:8080 You can get the ip with (sudo) ifconfig -a on Linux/Mac or ipconfig /all on Windows. 
Try: from splinter import Browser profile_preferences = {'intl.accept_languages': 'en-UK,en-GB'} browser = Browser('firefox', profile_preferences=profile_preferences) 
No location or ticket price specified yet, although it's still twelve weeks until it will be held. I wonder what companies will show up, it seems to be somewhat difficult finding jobs focused on Python unless you get hired by a smaller company that does web development - at least in the north. Are there any Swedes known in the Python community that may show up to give a talk?
It seems that pip really uses site-packages. Vanilla python.org Python does not know anything about dist-packages, only site-packages. dist-packages was invented by distributions (probably Debian). 
Good to know! I'll try to at least attend. Considering other deadlines are looming, getting something in this year is unlikely. Now I just need to convince the boss to let me go :)
I feel like its something I could complete. Remember I am still in school. Therefore releases are at apart and code is not fully completed. I will read the replies soon. I also am a beginner. But thanks. You guys are awesome. I also shouldn't feel scared to edit something and know that I will probably not finish it in one day.
There is a list of free Python books here: http://freepythontips.wordpress.com/2014/02/04/free-python-books/ Although I can't really recommend one. Perhaps have a look around and find one you like the style of.
Thank you very much! I've only started learning recently. Im pretty good with the code but they haven't exactly taught us how everything works yet.
I do really think u should learn more python. And extend a lot more. It's a new language to me as my first language was visual basic. Obviously haven't learnt either of them fully.
A couple of people from Spotify I'd think. http://labs.spotify.com/2013/03/20/how-we-use-python-at-spotify/
What is the program meant to do? What is the content of days.txt? What are you importing from "daysProgram"? I just removed it to get it to run. Other comments on the code: * function printDays() unnecessary loops twice over same list * Data structures are all over the place * findNextAnno(), looks like the nested while loops wanted to be recursive but never got there * findAnnos() is only called from printAnnos(), printAnnos() is not used.
The program is meant to find anniversaries, to help me remember them; like the fact that Galileio Galilei was 450 years last Saturday. The content of days.txt is a list of people and their birth dates, in the format of Charles Darwin 1809-2-12 Alan Turing 1912-6-23 Sigmund Freud 1856-5-6 Dr. Seuss 1904-3-2 daysProgram is a small program, only containing a definition for "TODAY", because I didn't want to have to declare global everywhere I needed a "today" date, and I didn't know of any other ways of making constants... (I know, bad coding practise, but I really only wanted it to _work_. On the other comments: printDates() first loops through to find the longest name, and then another time to print them out, with the spaces; I just realized right now that I could have done it way easier, but when I code, I just code to make it work. Again, I am very bad at good formatting. I'm not really sure what I was thinking when I made the findNextAnno(); and I don't really understand what you said about it. printAnnos() is for now supposed to only be called from the terminal, to actually find the anniversaries; findAnnos() was the same, until I found out that I wanted them nicely printed, as well.
I didn't expect to get the answer so quickly so here's what I threw together meanwhile. I'll update with one that uses your input. #!/usr/bin/env python #Let's say we have a list of dates, this could be in another file, #but let's keep it here to simplify holidays = """Wednesday, February 2, 2011 Groundhog Day Sunday, February 6, 2011 Super Bowl Sunday Monday, February 14, 2011 Valentine's Day Tuesday, March 8, 2011 Mardi Gras Wednesday, March 9, 2011 Ash Wednesday Thursday, March 17, 2011 Saint Patrick's Day""" #keep track of what holidays we found parsed_holidays = [] class Holiday(): def __init__(self, day, date, year, description): self.day = day self.date = date self.year = year self.description = description def __str__(self): return "'%s' will be on %s, %s in %s" % (self.description, self.day, self.date, self.year) #for each row in our holidays file for holiday in holidays.split("\n"): #The year is the first 4 digits after the 2nd comma(,). #If you're writing this for something other than a quick #hack, you might want to have a holiday class to keep the #data structure. If the date is in ISO standard, go ahead #and use the date library if that suits your task. day, date, year = holiday.split(",") #split description from year and clean up a bit year, description = year.strip().split(" ", 1) #clean date aswell date = date.strip() parsed_holidays.append(Holiday(day, date, year, description)) print "These are the holidays I found:\n" for holiday in parsed_holidays: print holiday 
It's a tool, not a job.
Wow, I never even thought of using classes... I'm stupid sometimes...
you can change this part: count = 1 for stock in stocks: blabla(count) count += 1 to for count, stock in enumerate(stocks, 1): blabla(count)
+/u/CompileBot python import datetime class PersonBorn(): def __init__(self, name, year, month, day): self.name = name self.year = int(year) self.month = int(month) self.day = int(day) def it_is_my_birthday(self, now): """Expects now to be a datetime object with the dates as integers""" if now.day == self.day and now.month == birthday.month: return True return False def __str__(self): return "%s was born %s, %s, %s" % (self.name, self.year, self.month, self.day) def parse_input(input): people_birthdays = [] for row in input.split("\n"): try: #split from right, to avoid names with hyphen name_year, month, day = row.rsplit("-", 2) #year is the first 4 digits from the right year = name_year[-4:] #name is the rest, clean it name = name_year[:-4].strip() people_birthdays.append(PersonBorn(name, year, month, day)) except Exception, e: print "Couldn't parse the following row:\n%s\n Because: %s\n" % (row, e) return people_birthdays if __name__ == '__main__': input = """Charles Darwin 1809-2-12 Alan Turing 1912-6-23 Sigmund Freud 1856-5-6 Dr. Seuss 1904-3-2 Random dude 1968-2-18""" people_birthdays = parse_input(input) now = datetime.datetime.now() for birthday in people_birthdays: if birthday.it_is_my_birthday(now): years_old = now.year - birthday.year print "%s is now %d years old." % (birthday.name, years_old) else: print "%s sighs sadly, alas it is not my birthday today..." % (birthday.name) 
I'm not sure if this applies to all of twisted's handlers, but the IRCClient protocol was incredibly limiting in twisted, it uses the LineReceiver, and each line received blocks until processing is finished, each line sent blocks until it is sent. There may be a different way to configure it to prevent this, but I found it was easier to just use threads and raw sockets. If you look at the code for IRCClient, most of it is just async socket handling, with a bit of IRC code thrown in, and I may make the async socket handling its own class in the near future
&gt; what was the compelling case for Delphi today? Asked and answered. Dozens of times. &gt; writing a 400+line detailed summary You seem to think this is a good thing. A really really (realllly) long diatribe filled with half truths, questionable conclusions and unrelated comparisons isn't much different from a short one with these things. Only longer. Doing it over and over again doesn't seem to help. &gt; What does "legitimate" mean? If you spend time in a product's peer support groups and blogs going on and on about how that product is dead and anyone who doesn't agree is suffering from "Stockholm Syndrome", you're off to a bad start. &gt; I don't get answers Sure you do. You just don't like any of them. I'm not sure why you think you deserve personal answers from the chief evangelist, product manager, TeamB or any of the MVPs. After a year of trolling, they might not think it's a good use of their time. You might have a hard time letting go, but they're just not that in to you. And now you're whining in Python groups about how your doom and gloom hasn't been greeted with the respect and gratitude that you seem to think it deserves? &gt; "If you don't like Delphi, don't use Delphi" Since you keep insisting that it's dead, this might be a good option for you. If you ever choose to move on from the Python community, I hope you do it with more dignity.
Awesome! I've been toying around with flask lately and this will be a great reference. Good job! 
If I'm honest it looks pretty awful, without seeing specific content I can't obviously say that but even the TOC is uninspiring.
/r/learnpython/w/books
Is there a way that you could make it work on mac? is there a way to install python-nfqueue?
Just yesterday I ebayed one to use in my raspi... it's great find useful code like this!! I'll comment about any problem, if there is any...
I also see how stupid in terms of learning Python Travis-CI could be, I should just well I code run the program and see if everything works, and the times when I have got errors, I think then that I tried to resolve them or found some way to get it to works even if it meant changing the whole way things would be printed out onto the screen. Hence no option to choose to have a auto-biography or biography ~ Have an idea of how to do this now.
I know it seems ambitious but I know even if i make something small and even useless, at least I learnt something. This was a piece of test code before I actually embarked on the main system of how OpenProfile works. https://gist.github.com/deavmi/8297224
My old job sent me to learningtree for pl/sql and xml. They're allright, but only do it if your company will pay for it. They're stupid expensive otherwise, and there're plenty of materials out there to learn on your own otherwise. Seriously, just google around. There's tons of materials out there. Also, checkout /r/learnpython. I think their sidebar has a lot of free resources. 
So like a chunk of data to refer to later.
I will check this out soon. Currently completing an English writing assignment about "the perfect world." :)
Thanks, and I agree: there are lots of sources for self learning. I am just looking for something with a little more structure then "googling around"
No, I didn't. I happen to know Bots and clicked in here wondering why it needed and/or got IRC integration. Is that capitalization commonly used in the IRC ecosystem?
By the ambitious part what do you mean, just asking ;P I see it as a simple project, but actually now I see how it has become a great learning tool and how it actually isn't necessarily simple, there seems to be so much to learn, and that makes me happy. ~~I actually think there is no such thing as ambitious~~ IDK
The module is over 400 lines. When you're still learning, that's too much for you to know. The most important thing when learning, I think, is to know what you're doing and keep a handle on it. I think that what you've tried to do is do everything at once. It would be more beneficial to write ten lines that you understand because you can always expand it later on.
How would it be too ambitious or too much to maintain, but I just got a notification, and I see how it is quite a big project, I am a beginner, so yah, I really want to continue this project and I will but in the proper way.
Thanks man, I do feel like that (what you said, I should learn in a structured way) like from variables to GUI, it's like basically mashing up what I wanted to do and not following a certain pathway of learning. &gt; Feels like jumping from a console-based application to a GUI application.
I will get time to read your kind words, I am saving them, I have to finish a bunch of schoolwork. But when I get the time I shall be right on this page on reddit.com
Was away from the computer for the long weekend. Sorry for the lateness. Put all of your modules in your own directory. Doesn't matter where. Let's say it's in /usr/local/droggi/pylibs for now. Preface your scripts with: #!/opt/opsware/bin/python import sys my_lib_path = “/user/local/droggi/pylibs” if my_lib_path not in sys.path: sys.path.append(my_lib_path) #now import your custom modules. 
That depends on how you wrote the tornado apps, actually. You should be able to simply save the response in your get/post methods, so that when they pages are visited it saves it to the static directory. 
The word "Person" used to create the class using the code "Person(object)" I am guessing and I know it sounds like a stupid question, but this would be correct then, it can be anything like Potato(object).
That's exactly right :). 
Yes, it's just like a variable name, you can call it (pretty much) what you like. By convention, classes in python have a capital first letter to distinguish them from functions. 
Many newcomers recommend the "Learn Python the Hard Way", which has a free HTML version: http://learnpythonthehardway.org Another great book (maybe more as a quick follow-up and companion) that was just updated last week (for Python 3) is the Python Pocket Reference: http://www.amazon.com/Python-Pocket-Reference-Mark-Lutz/dp/1449357016/ref=sr_1_1?ie=UTF8&amp;qid=1392743502&amp;sr=8-1&amp;keywords=python+pocket+reference A little bit more expensive is a book by a former Professor of mine. It was also updated to Python3 in its second edition: http://www.amazon.com/Practice-Computing-Using-Python-2nd/dp/013280557X This was how I learned Python.
It think you won't have to worry about that as a beginner. The basic concepts are still the same, and once you get the concept behind Python, there a just some really minor changes which can be easily grasped by reading through: http://docs.python.org/3/whatsnew/3.0.html
Thanks! It is still missing a few features like comment voting, down-voting, and private messaging but I thought a ton of extra features would ruin the easy-to-follow codebase of the current app. This was built for having an example flask app in the future (for myself and others). 
I spent about 30 minutes writing something that uses better practices: https://gist.github.com/anonymous/9075932 I would do things differently, but I've tried to keep things simple so you can understand it more easily.
Yaaaaaay! funtions like def apple(): print("The name for this definition a.k.a funtion is apple.") Banana(object): 'What would I put under banana' Could it be like: banana.citrus = 'false' 
Well you could define a citrus class and then check to see if banana is a subclass. class Citrus(object): ''' defines a citrus class ''' class Lemon(Citrus): '''' defines a lemon class that inherits from citrus ''' class Banana(object): ''' defines a banana class ''' then you could do b = Banana() print issubclass(Banana, Citrus) &gt;&gt;&gt; False
Even then, you shouldn't. You'll regret working with this guy: https://twitter.com/PHP_CEO
with the "issubclass(Banana, Citrus)" tha check wehether the banana is citrus and ij this case it isn't. Therefore if say now banana needed to be citrus, you would make it like this class Banana(Citrus) print issubclass(Banana, Citrus) P.S why do you say b = Banana() ? Does it mean b is a string name with the value of the class Banana?
Will read this saving the link now.
... but Reddit is already in Python?
Cool. You might also want to look at [pyrepl](https://pypi.python.org/pypi/pyrepl), which is what PyPy uses for readline-like features.
Teaching someone a programming language is the whole point of it being an *entry level* job, no? Where else are they going to learn? Colleges are not churning out usable developers -- they're learning that stuff through experience on the job. Like most trades, really. 
issubclass(Banana, Citrus) returns True if Banana inherits from Citrus and False otherwise, so your code would return True. Yes, that wasn't needed, just habit. It makes a banana object and puts it in the b variable. You could then assign attributes to it, b.mass = 0.1 b.colour = 'yellow' b.tasty = True etc. 
In python they're called lists but they behave similarly.
In Python it's called a list. In PHP, Javascript and lots of other languages, it's called an array. The concept is basically the same. It's a collection of any other object: lots_of_strings = ["One", "Two", "Three"] lots_of_ints = [1, 2, 3] various_stuff = ["One", 2, 3.0] You can do various things to lists, such as looping through them (for ... in ...), append elements to them and pop elements from them (get value and remove from the list). It's pretty much impossible to write a halfway complex programme without types like lists and dicts.
That's true haha, but i'm going to take this comment at face value and still try to justify the existence of this project: If you look at reddit's official source code on github: https://github.com/reddit/reddit They have a lot of code dedicated to things only a huge + widely used site would need, like: detecting fake users, spam, rate limiting, tons of middleware, etc. This makes their codebase much more complicated and hard to follow than a simple easy to extend project. Also Reddit uses pyramid/pylons as a framework, not flask.
Colleges aren't teaching people to use CI servers or deal with dependency conflicts but it's reasonable to expect a recent graduate to have done an internship or group project in Java, built a website with rails, or whatever you're basically looking for. They may not have good taste in API design, but if they basically know the language they can add small features until they get more comfortable. It's easy enough to work with open source these days that there's no excuse for applying for a programming job with no relevant language experience. The only exception might be places like Jane Street that are trying to recruit people to something obscure like OCaml or ADA, knowing they're gong to have to get C++ developers up to speed.
The readme says it is using supervisor to watch the process, but never walks through setting up and I don't see anything else about it in the source. Over site or work in progress?
I'm guessing they'll discuss a new online app store to replace PyPI called Pykea. ;-)
Ah, I forgot to add that into this repository. All of my supervisor config scripts are located in the /etc directory so it just wasn't there. I'll be sure to add that in a few days!
Pythonware guys were pretty active back in the days. Not sure if they are around anymore.
Predominantly English, but we've said that we'll accept a minority of Swedish talks if they are good enough to warrant it. 
have you tried MIT OCW, Coursera, Udacity, or any other structured MOOCs
&gt; Is it possible to disable runtime type checking but still have the new syntax be valid? That's exactly how it works. These annotations are part of Python 3. If you don't install the checker, it is still valid Python code.
0. Have python installed sensibly (seen so many errors from partial past uninstallations and merely deleting folders) 1. download [get-pip.py](https://raw.github.com/pypa/pip/master/contrib/get-pip.py) 2. Double click on it from explorer, wait for it to run and finish 3. You now have pip and setuptools installed 4. If you didn't have python on your path before, run `C:\Python33\Tools\Scripts\win_add2path.py` in the same way, it will do that. 4. You can now open up a Command Prompt and run `pip install &lt;something&gt;` and it should work.
https://github.com/jsober/pyprof
Glad to hear it!
This is great. I can't help but draw the comparison between some of the deep type checking and C++ template concept checking. I suppose that makes sense since duck type checking like this works almost the same way, just at run-time.
1. I think there is a option in auto complete/editor settings somewhere, I know that annoyed me too and I was able to turn it off. Unfortunately I'm not on windows right now so I can't help. But I'm sure it can be disabled or at least mitigated. 2. According to the feature list on the project page, no. ___ http://www.jetbrains.com/pycharm/features/ IDE (free/commercial) http://www.sublimetext.com/ Text Editor (commercial with indefinite trial) https://wingware.com/ IDE (free/commercial) http://ninja-ide.org/ IDE (free) http://www.vim.org/index.php text editor (free) will take some time to get used to and learn how to use Table with features of some other IDEs /r/learnpython/wiki/ide 
Oh good. This part was confusing because it sounds like you're defining the syntax. You're saying the general syntax is standard but the content will be ignored unless some hook is installed? &gt; My ambition is that this Obiwan syntax is widely adopted
Nice, I think I like that approach the most for my use case :) Thanks!
Yes, I meant the convention of how the annotations are interpreted. I want editors and static checkers to use the same syntax (even if that means adapting obiwan to conform with any other tool that becomes popular).
Awesome project. I've been meaning to eventually play with Flask, so this will be fun to test.
If I'm understanding it correctly, you just want something like: if (y%1) != 0: return 1 - (y % 1) else: return 0 which should give you how far away y and floor(y+1) are, assuming y isn't an integer. If y is an integer, it'll return 1.
I'm new to python, but the C math should be similar. Wouldn't int(y) + 1 - y calculate the delta?
Use a proper verb describing what the method does? If I see get_ I think its probbaly an unecessary getter. compute_foo() fetch_foo()
Has anyone used the scl tool with virtualenv? Surprised they left it out of this guide.
Let me know if you do make the voting system and the up and down comments too. Reddit uses a point system where things get more points as they become newer so a new post can have more points than something old with more votes 
There is literally no example on how to validate json, except for one method call,.. Also, how does the json validating compare to other libraries that do something similiar, like validictory?
You should probably consider not writing a getter (they aren't very pythonic), and simply create a python 'property' for the relevant instance variable (which can be the result of a complex function) using the @property decorator. http://www.itmaybeahack.com/book/python-2.6/html/p03/p03c05_properties.html
In principle right. But please read the full text i wrote, the term "getter" is not actually quite cutting it here. These methods actually have to do some stuff to "get" what they are supposed to get, that should not be done using a property as it would hide that there is work done on accessing it to a coder. Btw. what i'm writing is not unlike a versioning system, and what the "getters" get is things like the log (i.e. list of commits), commit-info according to a commit-id, etc... most of these imply file system access, partially some processing/computation.
I read what what you wrote....I dont see why a function with a property decorator doesn't meet the requirement. It basically turns a function (with whatever you want in it) into something that can be accessed like an instance attribute. Not sure why you think you can't hide work being done - thats much of the point of object orientation in general and the property decorator in specific. Seems to me that would be the most pythonic way to do it, and you avoid much of the naming concern. You just have properies like Class.commit_list....
&gt; Moreover much of it's simplification was possible because we decided to drop windows compatibility. yep, in other words, a lot of the code being called out as complex is because multiprocessing is multi-platform. 
Not quite. Of course everybody has a different taste with these things, but many people agree on terms like the principle of least surprise (which I dont think contradicts the zen of python): When I access a member of an object, I expect something that behaves like one, not only syntactically and semantically but also performance wise. That is I wouldnt suspect the member access in print(foo.x) to have severe side-effects or to be a complex operation, such things I'd rather call more explicitly. Of course every python programmer knows, that member access can in theory do arbitrary complex things, but if it really does more than getting/quickly computing a value, your interface would seem rather "magic" (at least to me).
Django uses `.all()` instead of `.get_all()` etc. They also chose to use methods to signal database calls
Hey, looks great! I've been looking for something to replace evernote for a while, are you working on providing an API? It's not a necessity but would help a great deal to be able to play with the data from custom clients =) Also if you are looking to commercialize that would help brining in the value to the product
Thanks! An API could be in the works. I need to iron out some more of the program first. Get through the alpha phase and then I will most likely include an API. I am going to try to keep it free. If the costs get too high, or the users seriously tax the server I might add a paid version. Time will tell. Let me know if you have any suggestions any time. Thanks for checking it out.
Hai As per suggestions well something like sharing notes comes in to mind, don't know how easy/hard would accomplishing that in the access control level of flask be since it requires some fiddling. Looking good all in all, I'll be keeping an eye on this. If popularity seems to slowdown over time, you could try gathering a community of active's around it on github to start ramping up dev if you are FOSS-minded 
Dammit. I've been working on a site that has a lot of these features for the last few months. This would have ( and I'm sure still will) come in handy. I using Django right now but looking at the source code does flask transfer over to django at all? I guess I'm asking if I would be able to look at the code and understand what's going on?
If the method does something long, you can probably find a better verb then get and if you can't why not use it? Do they even interact with the object at all? Do they need to? Would they be better off as module level functions?
so you want the difference between a number, and the closest integral? simple stuff. getting the closest int is a matter of rounding: import math rounded=math.round(input_value) the difference is a simple substraction: difference=rounded-input_value that might give back negative numbers though, let's take the absolute of the difference to prevent that: difference=abs(rounded-input_value)
Yes. Absolutely yes! Every Python developer that is me loves science-based talk. If only I could attend to watch you speak. :(
&gt; They also chose to use methods to signal database calls That's not really true, because Django's ORM doesn't hit the database until you try to iterate through the queryset. Before that, it's all fun and games.
I use the hell outta that one myself. :)
Well, timely for me. Been considering migrating my codebase while it's still reasonably small. 
You're gonna be hated by your future self...
You might have more luck posting this to r/cryptography.
If you're finding it hard to name things, it's probably because they do too many things at once. For instance, imagine you have a complex method that performs an (comparatively) expensive operation -- suppose it, say, computes the SHA-1 hashes of all the files in a specified directory. What you wouldn't want to do is make this look like it's just another property. That's because it would be very surprising to a consumer of this method if it takes a few seconds to return a result (of course, a method like this should probably be asynchronous, but that's for another time). So, to avoid the surprise, we should clearly indicate that the method's going to be doing some work, and describe the result it returns. There's a few ways to do that. First, we can name the method something straightforward: def calculate_dir_hash(self, dir): # ... This tells the reader pretty clearly that there's a calculation going on. Alternatively, we could make it appear to be a value that's expensive on the first call and cheap subsequently, by memoizing it: def dir_hash(self, dir): return self._dir_hash if self._dir_hash else calculate_dir_hash() def calculate_dir_hash(self, dir): self._dir_hash = # &lt;expensive operation&gt; return self._dir_hash Or, we could have the calculation step (a _command_) always be separate from the "get the value" step (a _query_). Some people like this style, and it's called _command-query separation_: def dir_hash(self, dir): return self._dir_hash def calculate_dir_hash(self, dir): self._dir_hash = # &lt;expensive operation&gt; # doesn't return a value, because this is a command, not a query
[Properties](http://docs.python.org/2/library/functions.html#property) class C(object): def __init__(self): self._x = None @property def x(self): """I'm the 'x' property.""" return self._x @x.setter def x(self, value): self._x = value @x.deleter def x(self): del self._x
Flask, in general, is a bit lower level than django. There is less structure forced on you and much fewer abstractions. If you are an experienced developer (if django isn't your first web framework) i'd say you are OK. Otherwise, the code will look quite a bit different and you may or may not understand why. 
I was going to post the solution here until I realized what the solution actually was. Fun little challenge though! Edit: Here's a 2-line solution in case anyone wants to enjoy this charming message for themselves: num = "1324354112813243541304132435413521324354728132435413281324354122413243546721324354119213243546721324354129613243541256132435412401324354124013243541224132435413281324354784132435467213243549681324354129613243541264132435413041324354138413243546721324354138413243541304132435413521324354132813243546721324354125613243541296132435413441324354122413243541328132435412961324354122413243541344132435413361324354784" print ''.join([chr(int(c)/8-52) for c in num.split('1324354')[1:]]) 
Is it possible to architect things a bit differently and fetch the relevant information sooner than the method call, or is the "lazy" evaluation vital to the utility of the program?
&gt; They also chose to use methods to signal database calls and then made the syntax of the template language not distinguish at all between attribute access and method calls, to help you write templates that query the database eleventeen zillion times.
Side question: Is it reasonable for a mapping to do I/O in order to retrieve the values? What if it has a method [like this one](http://nbtparse.readthedocs.org/en/latest/nbtparse.minecraft.terrain.html#nbtparse.minecraft.terrain.region.Region.load_all)?
Why would you use fetch_foo() over get_foo()? The words fetch and get are both literal synonyms for retrieve. Just seems like people bend over backwards to avoid using the word 'get' because this one blog page said it was bad this one time. 1) Don't use get methods over properties if you can avoid it 2) Don't be afraid to use an accessor method if it is required 3) Call a fish a fish, an accessor method is usually prefixed with 'get'.
Ok, thanks. Experienced, I am not. I've been using Python and Django for about six months; seriously for about two (the first few were just doing python tutorials and looking at documentation trying to make some sense of it all). So, I probably wouldn't be able to make any sense of Flask at this point. I'm book marking this though for sure. Thanks so much!
Strongly agree. Surprise expensive magic is the part of Python I like the least.
Just fyi, python is case sensitive, so there are 1024 ways to capitalize I_pity_da_foo. They are all treated as distinct by the language and can be different values/functions/classes/instances/properties.
Why migrate to 3? What are the benefits?
load_foo() ?
"Decay", good thing to have in any rating system
You are your own and everyone else's worst enemy.
Ironically in that case I was using the method names provided for the assignment. -Still in school
Even if lazy, you can cache the value once computed/fetched. Lots of web api wrappers works like this....
 def calculate_x(self): if self._is_x_calculated: return self._x self._x = 5**2 self._is_x_calculated = True return self._x 
You're welcome.
They aren't going to continue supporting python 2 forever. You might as well switch now at your leisure than be forced to at some point in the future. 
No small-screen-mobile friendly. Other than that... Neat!
The basic question here is API naming. Which do you think is better? dict.get_items() Or dict.items() ... I don't need to tell you I'm getting the items. I know I'm getting them, that's why I called the method. On some getters, it can be important to include verbs that may imply the cost of a method. Spam.files() may or may not be a cheap call. Spam.load_files() implies that I might not want to call that more than once. And of course verbs themselves make for clean clear methods: Spam.load(). In the end, it's about API readability. Can I figure out what your code does without reading docs? Then things are named well. 
I'm new to python and have barely read any PEP's but why use properties over methods? Isn't the point of a method to abstract retrieving values so that the underlying model/api/whatever can change but the implementation doesn't have to? Or is that considered bad practice in the python world?
Here's a lesson then: code readability and maintainability is just as important as the algorithms it implements. 
Because it hides the implementation and the difference between attributes and value-returning methods from the API user, thus providing a more consistent interface. Obj.value_a and Obj.value_b() is non-intuitive. 
&gt; this one blog page said it was bad this one time. what are you talking about?
(Obiwan author) Static type checking for dynamic languages is an interesting and unsolved problem. I've been active in the static type checking and compiling Python community and we're at the point where, if you write simple static programs using a *restricted* subset of Python, then that can be validated. Its far from usable though. Let's hope things progress on this front. If you have questions or want links about the innards of this problem, I'm happy to bore you all to death on this so just ask ;)
Yeah, I use this style too.
you are like one of those annoying dicks in school that says "I didn't even study for the exam and I still did OK" edit: you are still in school. 'splains it.
I would avoid using a mapping for anything that requires I/O. When I see something that looks like a dictionary access, I expect it to be a fast, constant-time operation. Doing I/O means neither of those are predictably true.
Wow so many packages that nobody will ever use! Super impressive commitment. 
Version 1: class A: def __init__(self): self.cost = 100 self.price = 120 # Sale Price Version 2: class A: def __init__(self): self.cost = 100 self.markup = 0.2 @property def price(self): return self.cost + (self.cost * self.markup) @price.setter def price(self, price): self.markup = (price / self.cost) - 1 And in both cases your variable can be modified with myA.price = 120. This is not possible in Java, hence getPrice and setPrice everywhere in Java.
English is the *de facto* language in computer science though. Certain terms, e.g. "arrays", that have an official meaning in the specification of the programming language are difficult to translate. Then, if you have several translators working on separate text books - even more discrepancies may pop up. Perhaps it's just me, and perhaps some language specifications have official translations for its bits and bolts. I usually end up using English everywhere as far as computers are concerned because of it being so much more convenient when looking up error messages and the like. If I try to explain something technical myself I mostly end up speaking Swenglish and stuttering.
I like to use this ``cached_property`` decorator, that does just that. def cached_property(f): """Caching/memoization decorator for object properties""" attr_name = '_' + f.__name__ @property def wrapper(self): if not hasattr(self, attr_name): setattr(self, attr_name, f(self)) return getattr(self, attr_name) return wrapper 
Thanks, I didn't know about this. (I'm new to Python)
Python 2.7 stats: 8076 packages - https://pypi.python.org/pypi?:action=browse&amp;c=532 Python 2.6 stats: 6029 packages -https://pypi.python.org/pypi?:action=browse&amp;c=531
&gt;I've been working on a site that has a lot of these features for the last few months. Me too! It's actually my first complete web app written from scratch, but it's still a long way from finished though :/ http://imgur.com/NMTVru4,LTcGXnp,8IaQGFA,asSkqj4#0 
some packages are also out of date (cpplint), I wanted to fill a bug report but it was a pain in the ass to register to sourceforge and I wasn't even sure they would do something about it...
It's an issue of many python core packages, indeed. Platform specific code should allways be in a separated dedicated module. In multiprocessing, common code would be minimalist, I guess. 
Looks like a great start. I might suggest a little guidance after logging in, it took me a second to figure the filecabinet/notebook/note relationship. In hindsight it should have been obvious, but that second of thought made me a little worried. A quick, simple example would go a long way there. Also, a template for lists and the usual would be pretty sweet. I've actually been thinking about a project of this nature, myself. Slightly more focused on todo/gtd/project organization...tomboy notes with a calendar for the web. So I've got an endless amount of ideas for features for something like this. Is the code open source and available somewhere? I'd love to take a look and maybe contribute.
It's generally not a good idea to hard-code paths in your code. Case in point: [this](https://github.com/codelucas/flask_reddit/blob/591ee76691aca68cb9f4ed9c361555732623ebaa/flask_reddit/wsgi.py#L5)
The Python 3 wall of superpowers is definitely looking a lot healthier today, it's mostly green now. Paramiko is a biggie still, as Fabric is dependent on it, hopefully Paramiko will be Python 3 soon.
I extended this a little bit: https://github.com/tehmk/mailer3k/blob/master/mailer3k.py Tell me what you think! **usage example:** ./mailer3k.py -u hallo@world.de -p datpassword123 -s smtp.gmail.com -P 465 --ssl --to mytoto@example.net testmail or ./mailer3k.py -u hallo@world.de -p datpassword123 -s smtp.gmail.com -P 465 --ssl --to mytoto@example.net --subject "my subject" --body "Dat body tho!" -v mail
People have a tendency to latch onto grand sweeping statements which declare "this practice is bad" or "this practice is good" without taking the time to understand the nuance behind them - which might have been "this practice is bad, most of the time" or similar. Accessor methods like getFoo() have been disparaged by the Python community because a lot of the time they are used where there is no need. That doesn't mean that there is *never* a need for them, but people miss that nuance and just repeat "get methods are evil" without actually understanding why.
I remade the program, using classes: http://pastebin.com/hDSvYg5v Now, the only problem is that I can't get it to accept letters like 'ø', 'é', or 'ä'. Do you know why that is?
blaag.haard.se/What-s-the-point-of-properties-in-Python/
**EDIT:** I can't read. ... but that has nothing to do with pattern matching, that's usual function overloading familiar to anyone coding in C++, Java, etc. Pattern matching should dispatch based on the _values_ of the arguments (and type tags of algebraic data types are values too, if you squint at them right), and usually you want to be able to do that in a single expression, not with separate functions for each case. By the way, Python already has the so-called destructuring bind for lists/tuples: `[a, [b, c], d] = get_stuff()` is a basic building block of real pattern matching -- we have a syntax for assigning values contained in some data structure to individual variables that mirrors the syntax for constructing that data structure. Now if only we could use constants instead of some variables (demanding equality to the corresponding element on the right hand side) and chain several assignments so that when one doesn't match, the next is tried instead of throwing an exception, we'd have pattern matching. In imaginary syntax: def visit(node): match node with: case 'Internal', child1, child2: visit(child1) visit(child2) case 'Leaf', value: print value 
Not sure I like that. I can see the utility in it, but the proposed syntax looks rather awkward to me. I've said that before though -- I could be swayed!
Ah that makes sense. So convention dictates that when accessing data, use properties, when doing a bunch of actions, use a function?
I think your argument is understandable if Obj is purely a data object. Would you say ideally you'd have a class for accessing data (properties) and then another for acting on that data (functions)? 
I don't much care for the message. I'm fascinated by the solution though. How do you go about solving sth like this? If it isn't rot-13 I'm at a loss ...
I'm not sure that &gt; value = x if x &lt; y else z has a lot of people singing it's praises. I think having the condition come first would be how most people would expect to see it. However, that boat has already sailed… 
Can someone please explain to me the main differences between pycharm ide and intelliJ IDEA regarding python? If I am developing mostly in python are there any features I am missing if I only use Pycharm instead of IDEA ultimate? What about code completion? Interactive console? debugging differences? 
A LUG friend suggested me: https://github.com/xolox/vim-session
Well from my understanding there is no demand for python 3. What does it offer that 2 does not? Why even create 3 instead of just tweaking 2?
&gt; ### Python 3 support · Issue #16 &gt; &gt; [**bitprophet** *commented 16 days ago*](https://github.com/paramiko/paramiko/issues/16#issuecomment-33996563) &gt; &gt; &gt; This is still near/at the top of my list, just FYI! need to wrap up a few other bugs &amp; get a set of releases out first. 
Much cleaner: value = z if x &lt; y: value = x
I'm going to make the assumption you are young, I hope it doesn't offend you. I mean it in the way that it seems you need more patience when looking at the rules, take your time. The code is much too big for this problem, I think you should start over. &gt; Now, the only problem is that I can't get it to accept letters like 'ø', 'é', or 'ä'. Do you know why that is? Every input and output of text in a program needs to consider encoding and decoding. The utf-8 encoding you have set in the top of the program means the code and comments are in utf-8, the file itself can contain a [BOM header](http://en.wikipedia.org/wiki/Byte_order_mark). If you read a file, you need to know the encoding of that file. I'm guessing you are italian because of anno/anni, but in any case, if you use for example ISO 8859-16 (which I think is default in italian windows versions), you will need to do a .decode("ISO-8859-16") for the input from the file and when you print it to console .encode("ISO-8859-16") [See this from stackoverflow](http://stackoverflow.com/questions/447107/what-is-the-difference-between-encode-decode)
No, in python all attributes are public so simply use the attribute to access the data. In the future if you have a specific need to change it you can convert the attribute to a property and all code accessing that data does not have to change.
With both your help, and a friend via Twitter, I have finally got it kinda done: https://drive.google.com/file/d/0B5E-MOfH4dwiRUdnNmZ5cGR6UW8/edit?usp=sharing Thanks a lot!
So now for the next step: http://pythonwheels.com/
I think maybe you're misunderstanding what a property in Python is - it is like a hidden method that does perform the sort of abstraction you're talking about, but without you having to use method call syntax to execute it.
I was just intrigued enough to copy it into a text editor and start hacking away at it. I noticed the repeated usage of "1324354" as a separator. Then I put the separated tokens into a list and noticed they were all even, so I found their greatest common factor (8) and divided them all by that. Then the 52 just came from trying to find a constant that worked to make a coherent message. Imagine my surprise after that hour of work to find out the message I was decoding. I felt like the kid in A Christmas Story when he decoded the "drink more ovaltine" message. You know, if "ovaltine" was a horrible racial slur.
I'm tackling the problem in a different direction, its very un-twisted. I may try to do that, but I feel like this is a completely different project at its core level.
&gt; Static type checking for dynamic languages is an interesting and unsolved problem. Cf. http://mypy-lang.org/ Unfortunately development seems to have slowed down since last summer.
I really like it, for one. The classical ternary operator has always looked awkward to me, more so because the `?` and `:` characters aren't as good at being clear visual separators as the `if` and `else` keywords. Out of curiosity, is there anything that supports the `?`/`:` syntax other than sheer convention?
Which library are you using to read your mouse clicks? There's a good chance that an event-driven approach has already been implemented. But, to answer your question directly: the easiest way is to have a while loop that continuously checks for a mouse button press/release. In your little example, `mouse_click` could just return `None` if no mouse event occurred. `object.moveToMouseClickSlowly` would then test if `click is None` and handle each case as needed.
I agree. I would love to have this feature, however the syntax just looks kinda blah.
All proposed syntax variations that use colons are pretty sure to get rejected by Guido. A colon introduces a block. It has not place in an expression. Lambdas are an exception, but I don't think that Guido would like to extend this.
It is pattern matching - the final code block is calling different functions based off whether the values of the integers passed in are even or odd (and if a list is empty or not empty). 
Are you talking about me? Because that was not my point.... 
If you want to blog with your mobile device then it is way easier to just stay with Wordpress. Static blog generators are great and all, but not the right tool for your job, I guess.
Not necessarily; the colon-based syntax parallels lambda, which is an expression that has an associated sub-expression. But there are alternate proposals involving keywords, including suggestions of creating a new keyword. What's your preference? So far we're looking for any strong recommendation for a second-section keyword. There's also a recent addition of this syntax: expr except Exception -&gt; default Again, come and join the discussion on python-ideas and make this happen! 
I will try this out. I have some questions and will ask them soon. Just really need like a weekend to do this stuff. P.S should I get rid of the current input system (obviously yes) I just need to think it out I guess, p.s help on github is greatly appreciated as I will comment on all the lines that confuse me. Thanks.
Oops, I missed the part where he implemented that, sorry!
Nbviewer approximately does this with Tornado, saving rendered content to memcache then sending it on to the user. You could then write this out to disk or put it on a CDN. As for generating the content, I'd recommend iterating through directly on your handlers (the tornado test suite has good examples of this). If I was on my laptop I'd get you some decent links.
Yes you are right, since i made the post i found some blog posts on the subject, i really love github and i like those python blog systems, is geeky which i like, but are better for more basic stuff. Thank you for your input.
If you like Python: Django + Mezzanine + Heroku
Don't feel bad, I'm not new to Python but I just learned this today as well. Sometimes you can read something in the documentation way before you are ready to really absorb it. Then one day you'll come back to it and when you can think of an application for it and really appreciate the cleverness. Siempre aprendamos.
I still haven't understood what wheels does really. 
Any special reason you're building it instead of downloading a binary? I advise you to not to build Numpy yourself unless you really need to (even on Linux). If you're using a 32-bit Python, you can download from the [official site](http://www.scipy.org/scipylib/download.html). If it's a 64-bit installation, get it from [Gohlke's unofficial repository](http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy). Some people also recommend installing [Anaconda](http://docs.continuum.io/anaconda/index.html) instead of the default (python.org) installation but I have no experience with it. 
 Well, I was using pip, which I didn't really consider building it myself. Regardless of where or how I get Numpy, the issue appears to be that Numpy requires a C compiler, and it appears that it will look in Python32\Lib\disutils\mscv9compiler.py to find it. The thing I need to change supposedly tells it that I am using Visual Studio 2010 (which is where the C compiler is). After further examination, I think I see what I was missing in my analysis. 'version' was passed to the function 'find_vcvarsall', so I can't just go in there and change it. I need to find out where in mscv9compiler.py the version is assigned, and then continue backwards from there. Regarding Anaconda, from what I can tell it's 2.7-centric, and I really want to make this a 3.x stack. 
The Python 3 Wall of Superpowers is looking a lot better than many people realize. Here's a few slides on Python3 adoption that I presented at the Pittsburgh Python User Group: https://docs.google.com/presentation/d/1I4869x1x0f6ZEcWa7e1XxWaMQHvmY6HwSuyn2AHNn5Y/edit?usp=sharing Some important takeaways from that, for those not wanting to click through: You can run multiple Python versions on one system fairly easily. It's even easier if you use virtual environments. Many of the packages that have not been updated are primarily applications that don't need to interface with your project's code: Supervisor, Carbon, Graphite, and Deliverance are among them. If you need these, keep a Python 2 virtualenv around to run them, and start your new project in Python 3. Some packages that have not been updated are officially end-of-lifed, including Python-Cloudfiles, Minitage.Paste. Others haven't seen new development in over a year (including Deliverance, Meld3) or over two years (including Paste, PasteScript, Suds, OAuth2). 4 of the 21 packages in the top 100 packages are by Ian Bicking, who has said Goodbye to Python: http://www.ianbicking.org/blog/2014/02/saying-goodbye-to-python.html Boto is a big one, but the developers have said that the difference between boto 2 and boto 3 will be as dramatic as the difference between Python 2 and Python 3. boto 3 will be the first version to support Python 3. My point is that most of the most important stuff is on Python 3 already, or headed there very soon. Many popular packages that haven't made it there yet aren't coming, and many of them shouldn't be holding your next project back from using Python 3. For example, it's just stupid to use Supervisor as a justification for not writing your next project in Python 3. Supervisor doesn't care if your app is Python 2, 3, Ruby or bash. For the ones that aren't coming, there are likely Python 3 compatible alternatives already, and if not there's a great opportunity to lead development of a brand new library that will be the de-facto standard for Python 3 users. I'm not suggesting you should rewrite your 100k line legacy project in Python 3, but just look long and hard at it for your next NEW project. It's worth it.
Sometimes it's important to populate the data haphazardly rather than at set or triggered intervals. A 'setter' is the logical choice for that type of behavior. In addition, for these types of setters, caching within the getter is far more performant than a repeat setter.
I tried what you posted now. age = input("Enter age: ") print(age) Yay, that works. But from what you said I could say this rather for more properness and best practices: age = int(input("Enter age: ")) print(age) Because the age is a number (here comes the maths lesson 101) and therefore -1; 0 and +1 are integers, negatives and positives. P.S i am loving how awesome this code is, and how from two lines to one line it can do the same thing but in the correct way.
Those numbers are practically meaningless. Please don't port every trivial piece of bullshit in PyPI to Python 3! It will accumulate its own bullshit plenty fast enough. What matters to most developers is functionality first, the top 100 to 200 packages second (the ones people actually use, and that's being generous), and everything else in a distant last.
Winston Churchill said, "Play for more than you can afford to lose, and you will learn the game." That's basically my situation now. I took on a job that's way over my head with the idea that I would absolutely have to learn the game. I just went back and carefully re-read all the instructions, and finally figured out how to make it work. I had to delete literally everything and start from scratch...learn a little bit more about how Windows environments work...and pay close attention to Andy Sturges's blog. But Numpy is not installed and working. Sometimes just the act of talking helps, and the initial response and yours induced me to dig a bit deeper in a few areas and think more carefully about a few things. And that helped. So I thank you guys both for that.
Yes, exactly. Eventually you'll probably want to validate values by exception handling (i.e. what if when prompted for their age the user types 'fish'?). You could do that with this kind of thing, try: age = int(input("Enter age: ")) except ValueError: print "Enter a number silly!"
"If you're finding it hard to name things, it's probably because they do too many things at once." That sounds like a nice general advice, thank you, i'll rethink what my methods do :)
Again, i know I'm not talking about getters. I should never have used that word, it totally destroyed the intention of my post. My methods just happen to be named "get_something" and I wonder if they should.
that's basically how ML handles it, and it's worked well enough for 4 decades.
You seem to be assuming database storage here. I assume a python object. object.xyz = 5 The above code can be done anytime. It can even save to a DB or cache if you use an @property decorator.
I get what you are saying, and I dont think you are wrong. There's certainly a continuum of 'complex' that could be included in a property. Something reasonably minor like just reading some lines from a file i think is reasonable. Something involving 30 other functions probably doesn't. In your case, if the task that the 'getter' performs is 'minor' (whatever you definition of minor is...its your code, not mine), its probably better as a property. If its major, I'd suggest it doesn't really belong in a 'getter' or property at all, but should potentially be updated in the background by the class itself (maybe as part of a .update() method) and then the results accessed via a property?
 class T(object): def __init__(self): self._x = None @property def x(self): if self._x is None: self._x = 5**2 return self._x &gt;&gt;&gt; t = T() &gt;&gt;&gt; t.x 25 
So this works by seeing if the user enters a string??? Then that means it is not in the integer format, as requested by the second line of code (since the code wants an integer and not anything else.
&gt; value = lst[2] except IndexError: "No value" Long have I joked about unless-then keywords, that would read nicely here though value = lst[2] unless IndexError then "No value" 
I am trying to run: class Citrus(object): ''' defines a citrus class ''' class Lemon(Citrus): '''' defines a lemon class that inherits from citrus ''' class Banana(object): ''' defines a banana class ''' then you could do b = Banana() print issubclass(Banana, Citrus) But it is returning an error when trying to run in IDLE. "invalid syntax" which I am guessing means wrong peace of code that doesn't exist in the Python world. It highlights the word "issubclass"
issubclass(b, Citrus) should work 
python tries to convert the string to an integer, if it can it's happy. If it can't then it raises an exception.
So wait how do you setup a class. I am confused of why I should use one. Person(object): p.s The above code returns in an error.
So what purpose do double-underscore variables (`self.__foo`) serve?
I've since learned that lesson, I was mostly joking with the ridiculous method name. I typically keep a commented list early on in the program that contains all of the method names and a 1 line description of what they do these days.
Well, there's a reason PEP-8 starts with "A Foolish Consistency is the Hobgoblin of Little Minds". Even though "x is True" is listed under "worse", noone will blame you if, for example, you actually need to do different things for a `True` and a generic truthy value.
to be fair, doing OK just means passed. Doing well is obviously preferred but that takes effort. I usually fall somewhere in between, I work and like to have the occasional social night so I sacrifice straight As for the bit of social time (and reddit/internet hahaha) I do study though as I wouldn't really be learning much if I didn't.
What libraries are out there that handle continuous ongoing mouse clicks?
Probably not, no—that would be overkill given the size of the classes I tend to write. Methods that do stuff to data other than getting/setting it get descriptive verb_noun(_modifier) names. I just often find myself passing a method instead of calling it because I thought it was an attribute/property, like with requests' `Response.json` vs `Response.text` (`.json` is a method, `.text` is a property/attribute). I would have made `.json` a property or named it `.as_json` or `.parse_as_json` or some such.
Aaaah, I learnt this from integers, print (issubclass(Banana, Citrus)) needed the two brackets.
The Python way is almost identical to how you'd express the statement in English: "Set value to x if x &lt; y, else set it to z" Even though the order of the C-style ternary operator is the same order as in a multi-line if-then-else statement, that order always seemed unintuitive to me on one line: "Set value, if x &lt; y set it to x, else set it to z"
So is there a reason that it won't allow: b = "lol" and then to run this: b.mass = "0.1" Is it because the class is special or something and therefore we make the variable "b" 's value to the class Banana()
You should look into [this](https://github.com/ceronman/typeannotations) if you want to do this even nicer.
The colon bothers me too, but `lambda` does set a precedence. 
OK hopefully this is early in the semester, because there are MUCH better ways to do this... First enter the number of items, and store it in a variable called something like numberOfItems. numItems = int(raw_input("Number of items")) This line asks the number of items, converts that number to an integer, and stores it in the numItems variable. Note that the raw_input command allows you to add a text prompt, which is a good idea. As your code is written, the code expects an answer before it asks the question. Now run a for loop to get all the items. That loop will happen numItems times, so do it like this: for i in range(numItems): items[i] = raw_input("Please enter an item") Again, incorporate the prompt into the raw_input or have the print statement _before_ the raw_input. Now use another loop to print out the list. for item in items: print item This second form is a better use of the Python for statement, which is especially useful for iterating through a list. The range mechanism is used when you know how many times you will go, the simpler format is when you're doing it once per item in a list. Source - Teaching this tonight in my CS course. Edit - clarity on adding prompts to raw_input 
I think this is a great idea, really hope some variation of it gets accepted (and soon!) I do wish the syntax was more in-line with the current `X if A &lt; B else Y` conditional expression though (e.g. the presence of the colon), but I can't think of anything better. 
You don't have a loop around the bit asking for the items. #get number of items number_of_items = int(raw_input("How many items?")) #initialise shopping list shopping_list = ['']*number_of_items for i in range(number_of_items): shopping_list[i] = raw_input("Enter item %d" %i) for item in shopping_list: print item Notice the first loop uses a range, but the second loop uses a generator. that is, you can put any iterable object (like a list) in the position you put the 'range' object, and on each loop, i will be the next item in the iterable. also, rtfd. 
Don't declare it as a global or an argument or a class variable and watch your scope (don't nest functions inside functions). Maybe I misunderstood your question...
Maybe: def test(): global variable variable = 'blue' &gt;&gt;&gt; test() &gt;&gt;&gt; print(variable) 'blue'
Thanks - I'll try it tonight. EDIT: While viewing this: http://matplotlib.org/faq/usage_faq.html
Turns out that it's actually `instance._ClassName__foo` for `self.__foo`, which confused me until I remembered the `dir` method. Seems to be right, otherwise. Thanks.
&gt; If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores. This invokes Python's name mangling algorithm, where the name of the class is mangled into the attribute name. This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name. From [PEP8](http://www.python.org/dev/peps/pep-0008/). Example: class A: def __foo(self): print("A's __foo()") &gt;&gt;&gt;vars(A) {..., '_A__foo': &lt;function A.__foo at 0x7f05c3c9d0e0&gt;, ...} As you can see, Python automatically prepended the function name with _classname. This can be used to prevent subclasses from accidentally overriding methods: class B(A): def __foo(self): print("B's __foo()") &gt;&gt;&gt;a = A() &gt;&gt;&gt;a._A__foo() A's __foo() &gt;&gt;&gt;b = B() &gt;&gt;&gt;b._B__foo() B's __foo() &gt;&gt;&gt;b._A__foo() A's __foo() Name mangling only prevents accidental overriding. If you're evil you can do something like this: class WtfNo(A): def _A__foo(self): print("Why would you do this!?") &gt;&gt;&gt;c = WtfNo() &gt;&gt;&gt;c._A__foo() Why would you do this!? 
http://www.python.org/dev/peps/pep-0427/ Bottom line: it's a binary distribution format for Python modules.
I don't know of I like this syntax, it's not very readable. Especially when you combine multiple exceptions it becomes unreadable. display.set_text( urllib.request.urlopen(url) except urllib.error.HTTPError as e: "Error %d: %s"%(x.getcode(), x.msg) except (ValueError, urllib.error.URLError) as e: "Invalid URL: "+str(e) ) This PEP speaks about risk migitation, to prevent users from using in a wrong way &gt; As a mitigation of this risk, this form: &gt; value = expr except Exception1: default1 except Exception2: default2 &gt; could be syntactically forbidden, and parentheses required if the programmer actually wants that behaviour: &gt; value = (expr except Exception1: default1) except Exception2: default2 &gt; This would prevent the accidental omission of a comma from changing the expression's meaning. Isn't this a sign that the syntax is to complex?
I'd do it like this: #get the number of items from the user, as an integer. numItems = int(raw_input("Number of items")) #items is the list that we will store our resulting list in items=[] #get numItems items from the user for i in range(numItems): items.append(raw_input("Please enter an item")) #show some output print "Items selected:" for item in items: print item Then you could go all extra credit with a try:except: block around the numItems= part like this: try: numItems=int(raw_input("Number of Items") except: print "You must specify a number" 
I did this course last time it was offered, it's brilliant!
As others have suggested, you should consider pre-packaged distros. If you need numpy then you'll likely also be needing scipy or matplotlib and those are likely to be equally frustrating. A stack that comes with all saves hours. [Anaconda](http://continuum.io/downloads) is the popular version, and I'm pretty sure you can get it with Python 3. If not, [Pyzo](http://www.pyzo.org/) &amp; [Loopy](http://algorete.org/) are both available with Python 3. If you're determined to do this yourself then grab them from Gohlke's site as /u/anonUbuntu suggested.
Grey text on a white background... :(
Anybody that can understand and write idiomatic Python would be considered. It certainly helps to have some open source involvement or at least some public code, but it's not necessarily required. A previous Python job was beneficial to my getting on this team. You just have to pass the standard Amazon interview bar, which is high but achievable. I believe that the team is fairly open to any level of SDE. Others have posted [sample questions to Glassdoor](http://www.glassdoor.com/Interview/Amazon-com-Interview-Questions-E6036.htm). I can confirm that I've encountered some of them in my time here. I would definitely recommend studying compsci fundamentals, and specifically how to solve problem sets in Python. It also helps to know C++/Java in case an interviewer wants that for a particular problem.
I managed to get things finally playing nice on Win7 64bit Python3 by using windows SDK 7.1 Don't remember exactly where I found this, but it worked for me. &gt;For Python 3.3, use the Microsoft Windows SDK for Windows 7 and .NET Framework 4. Note that there is an incompatibility between the SDK and the Visual C++ 2010 Redistributables. They must be uninstalled before the SDK can be installed. &gt;The link for version 4 of the Windows SDK is: &gt;https://www.microsoft.com/en-us/download/details.aspx?id=8442 &gt;Before you run setup.py to build with distutils, do this in the SDK command window: &gt; C:\Program Files\Microsoft SDKs\Windows\v7.0&gt;set DISTUTILS_USE_SDK=1 &gt; C:\Program Files\Microsoft SDKs\Windows\v7.0&gt;setenv /x64 /release &gt;The yellow text should now turn green, and you are ready to build AMD64 Python extension modules. &gt;Setting the DISTUTILS_USE_SDK environment variable tells distutils to use the platform C/C++ compiler. Otherwise it will try to use the compiler shipped with Microsoft Visual C++.
Is this course an extremely basic one? I've read most of "Learn python the hard way" and "dive into python". Is this course right for me?
That's a weird one, too, right? They recommend using truthiness, sure. And then next best is to use `==`. But I think the result of `True == 1` would be undesirable and possibly surprising in this context. It would seem to me that `is` might be what's intended if you find yourself reaching for `==`. I can't imagine a case where `==` would be exactly the right choice.
I made a landing site for first time logins now. Quick examples and how to notes. Thanks for the idea.
Your second loop is broken. `items[i]` will throw an index error. You really want `items.append`.
I have been thinking all day how to do the shared notes. A couple questions if you don't mind. Do you mean shared as in collaborate with others? A simple link? It's the security aspect tripping me up. Encryption is nice, but makes some things hard. It is also why I don't have a search. 
&gt; Without the assignment, a while expression becomes useless True, though I suppose I could likely be happy with using generators for iteration and assignment: loop(f(a) for a in xrange(1,10)) Or, for a better example, [Pythagorean triples](http://codepad.org/eYXmgkEp). And you can definitely do assignment. `[x for x in [value]]` assigns `value` to `x`. :-) 
I was just think of a quick add function for lists....Kind of like google keep does. It's really handy if you're making anything like a grocery list. You are right, an unordered, bulleted list works about the same...the only thing is sublists in the list since you can't tab, but that's just me being whacky. In my opinion, opening you code up will only increase your security. Don't publish your keys and you're good. If you aren't rolling your own encryption, it's most likely open source already....and if you are rolling your own encryption....then you definitely need to open it up so others can find the flaws (read: don't roll your own).
Sweet. I'll have to check it out. If I delete my account will I be able to re-signup so I can get the first time login?
Yes you will. If you made notes they will be gone though. Just a heads up
Yeah I can see readability being an issue if people start going crazy with it, but then again `X if A &lt; B else Y` isn't abused much. On the other hand, I think the convenience will make people pay more attention to proper exception handling. 
Very nice. I was just wondering the other day if there was an easy way to spin up an instance via an API. Combine this with Fabric, and a person could have a one click development platform ready to go in a jiffy!
If you want a standalone type python build in windows and happy with the packages that they natively support, go for it. But Anaconda for python3 will require you to either do their mini installer and build off python3 or create a python3 env before running anything. Which creating the env and going though route it taking similar steps to building the env within SDK in order to run setup files, you don't need to run python through it. Working with python3 especially in windows just makes things crazy to work with in terms of anything that requires distutils. But I don't know what your intent is though. I just know I smashed my head in a wall for awhile, found this gem, and got it work well outside of something like WinPython or Anaconda well. I was trying to build off the devel numpy 1.8 at the time to see if a certain problem was fixed and no clue how you could do that within Anaconda without dealing with being able to run a setup.py file. Ramblin done, good luck. I just recently installed winpython 3.3.3 on a new box and seems to be working well right out of the box with spyder support and ipython.
what I want to know as well, I finished about 80% of learn python the hard way.
If you don't know how to do that, you most likely shouldn't be. Global variables tend to be the simplest solution to problems best not created. Depending on what you're trying to accomplish, an instance variable for your method's class may be appropriate.
I was just looking into Anaconda with Python 3. They have two options. You can get their miniconda install for python 3 and then install the full version off that. Or you can install anaconda regularly and then build a python 3 env. You just need to either go through the additional step installing, or deal with remembering to switch env and getting paths to work properly if tying in with something outside of anaconda. I don't think the accelerate package and a few other choice tidbits are available under python 3 though. Not sure how the other two are with installing Python 3, WinPython seemed to work pretty well right out of the box though.
Any discussion of the 'is' directive that doesn't include the id() function is incomplete. This article does nothing to disambiguate what 'is' is for - and that's determining if the id of two objects are the same. Equivalent strings often will share the id's, and some will not - that's an implementation detail, but isn't confusing when you understand that Python does it's best to reuse the same memory whenever possible.
Personally, I try to avoid *global* variables as much as possible. In the case of a variable in a method that needs accessibility outside of the method, I'd probably pass and return that variable. However, additional context would be welcome here. Whatcha tryin' to do?
&gt; And you can definitely do assignment. `[x for x in [value]]` assigns `value` to `x`. :-) nope, not after the expression (in python 3): &gt;&gt;&gt;[x for x in [1]] [1] &gt;&gt;&gt; x NameError: name 'x' is not defined 
Hi thanks for this great reply. It's taken me a bit of time getting back to it, because I wanted to have the time to dig into this and de-magic PRAW. In implementing this I've run into a minor issue. The way to import a module as mentioned in [PEP328](http://www.python.org/dev/peps/pep-0328/) doesn't seem to work for me. Inside praw/\_\_init\_\_.py I have the following line. from __future\__ import absolute_import from . import decorators, errors Which results in ImportError. I'm missing something, but I cannot see what the difference should be and experimenting around didn't produce a working solution.
Ah, you're right, I was thinking of Python 2. I haven't made the switch, and probably never will.
I just checked out the getting started page, looks pretty solid. Definitely makes it a little clearer on how it all works. I realize that you can do everything I was saying with the WYSIWYG editor...I was just asking myself why I don't use similar web based text editors (google docs) to store my notes like this...and it mostly comes down to being able to write them quickly and in an organized fashion. I do a lot of brain storming in text editors and I just need it to be intuitive and quick. It is very possible that I'm the edge case, but this is how in my mind I'd like to work. # new note # click template for list # type a title which gets an &lt;h1&gt; automatically # hit enter, now I'm in a bulleted list automatically # first item &lt;cr&gt; # second item &lt;cr&gt; # &lt;tab&gt; # first subitem &lt;cr&gt;&lt;cr&gt; # third item You're totally right that I can do that all with the WYSIWYG editor, but from the time it takes to go from an first level bullet to a second level bullet, I've lost my train of thought/flow. On my personal site I use PageDown (stack overflow WYSIWYG/markdown editor) and I've struggled with finding the right combination of ease of use and practicality/feature creap of my code-base....so I might just be the pickiest mofo out there when it comes to this stuff. ;)
Thanks! I saw the repetition but the next steps are not obvious to me I guess ;-) [BTW](http://www.reddit.com/r/cryptography/comments/1yb4cq/in_the_body_of_the_post_i_hid_a_little_message/)
as other said: lambda. my favourite alternative is food = spam() except ThinMintException pass eggs() because it makes sense semantically (“pass” has two meanings), and pass elsewhere just means “do nothing”, which is correct, since it just separates expressions here.
coffeescript has that: “then” only exists when it’s needed: if foo bar = baz else bar = fooz is the same as bar = if foo baz else fooz is the same as bar = if foo then baz else fooz
i think /u/poswald rather talks about the order and would have preferred value = if x &lt; y then x else z or sth. like this. but i also like python’s ternary like it is.
I don't know anyone in any industry who is switching over to 3 and there are so many more python 2 libraries. Great way to evade the question though
PEP 463 is 404
Give a bug report. Supposedly PyPy takes these things very seriously. Possibly discuss it on their mailing list first. 
That alone is enough reason to switch to Py3, in my opinion. And then there are plenty of other bonus features.
The downloads section seems to have gotten worse, if anything. All the different OS links appear to go to the same page, and the downloads are now at the bottom, under the release notes. It doesn't matter much for me on linux (yay package managers) but I remember when first using it on Windows the installation was one of my major stumbling blocks. Overall, the new styling is very...stylish, which is cool. I love the responsiveness too. The examples on the homepage aren't completely Pythonic print "Hello, I'm Python!" Python 2 print syntax print 'Hi, %s.' % name Percent formatting instead of the format() function :/ sum = sum + num Not using the += operator, although that's probably just for simplicity Also no cool iterators (a major part of Python!) And does anyone know what this is supposed to show/do? I'm probably just misreading it: &gt;&gt;&gt; fruits = ['Banana', 'Apple', 'Strawberry'] &gt;&gt;&gt; fruits = [fruit.strip() for fruit in fruits] &gt;&gt;&gt; print(fruits) ['Banana', 'Apple', 'Strawberry'] EDIT: Extra examples
See the 'beta' flag? Give 'em a few days to hash this stuff out. Or open a ticket. ;-)
The form you're looking at there is now a rejected one. Everything involving either multiple 'except' clauses or the 'as' capturing sub-clause has been deferred indefinitely. So the current syntax proposal is simply: expr except Exception_List: default with other suggestions for either of: expr except Exception_List -&gt; default expr except Exception_List pass default and other options in place of "pass" (including new keywords like "then") have some measure of support too. This should mitigate the complexity and thus risk. Here's a collection of examples from the standard library, places where the new notation could be used. There are a _huge_ number of them like the early examples. https://github.com/Rosuav/ExceptExpr/blob/master/examples.py Of the ones further down, take note of tarfile.py: https://github.com/Rosuav/ExceptExpr/blob/master/examples.py#L333 It may be controversial, but I really like the compact form. It makes it easy to see the similarities and differences between the two lines.
&gt; with other suggestions for either of: &gt; expr except Exception_List -&gt; default expr except Exception_List pass default &gt; with other suggestions for either of: expr except Exception_List -&gt; default expr except Exception_List pass default 
But ` -&gt;` isn't currently a keyword (nor very clear), and `pass` is already used for something entirely different.
Sorry, I assumed this was the release as it had been in [preview.python.org](http://preview.python.org) for a while :/ I'll send those in, although it seems the lead dev is checking social media (he responded to some complaints on HN) so maybe he'll see this. I'll try and be patient! This has less bugs than most of my programs scripts do :)
Nice, I have a feeling it's much better than the Harvard one. I tried the Harvard course and it was unorganized, overwhelming, and the students were all jerks!
ImportError. But i got it solved, it was me trying to test the imports by running the test suite. However since the test suite is in a subpackage "test" this caused import problems. Importing it regularly had no ill effects. Sorry for bothering you. Thanks again.
-&gt; is currently used for annotations: http://www.python.org/dev/peps/pep-3107/ So it is technically a part of the language, albeit an obscure one. And yes, neither of them is used in this way. But look at these two: from spam import ham yield from spam There's not a lot joining those other than the English meaning of "from". And since "pass" has no meaning inside an expression (unlike "yield", which was an early suggestion - wouldn't work because "yield x" is an expression), it would be reasonably safe. Everyone knows about "pass by value" vs "pass by reference" (even if nobody can agree on what exactly those two mean), so in that sense, "pass" may be useful. Currently the colon has support, but all three forms are plausible.
And it seems the problem is solved upstream, PEP links are working again.
I'm not going to spend the time explaining something when you could easily read the article from Redhat (which should hold some weight) and google it to find out more information than I could ever give. I take it you're the type of person that shy's away from change and only gives in and makes a change when there is an immediate tangible benefit. What I was saying with my original point is that sometimes you have to look to the future and position yourself technology-wise so that things are easier in the future. The article clearly states that python 2.x is no longer under active development and only gets bug/security fixes. Technology is slowly migrating to python 3 and eventually major libraries are going to start dropping support. Would you rather migrate now at your own pace or wait until you're using a language and libraries that are no long supported by their developers? All of a sudden you encounter a bug or a security hole and guess what? You're out of luck because nobody is making fixes to the technology you are using.
Didn't they just redesign it like a year or two ago?
What problems do you see that are specific to BE framework? The site seems to work fine for me. The only issues I've seen are FE/design related.
iirc similar issues (if you can call them that) were mentioned last time I saw this new redesign, when it was first introduced on separate subdomain.
http://pandas.pydata.org/pandas-docs/stable/api.html#dataframe
Though it is still used a lot (including by me), shouldn't they *kinda of* hide the Python 2.7 download link? Assuming people are new to the language, it should be nice to get them started on the next wave of the future. For the people that know enough to use the 2.x versions they could still get it, just have to do some searching :P (or use a package manager).
Good point.
no probs. glad to help, gladder to see things resolve themselves ;)
Yeah, that fruits example is just a mistake, I guess. I'm not sure what it was supposed to actually be.
It looks refreshingly sharp and modern--and easy on the eyes--without looking like a too-typical 2010s site. A few little things can be helped, but it seems like it is headed in a really nice direction.
Not sure how I feel about this one. # For loop on a list &gt;&gt;&gt; list = [2, 4, 6, 8] &gt;&gt;&gt; sum = 0 &gt;&gt;&gt; for num in list: &gt;&gt;&gt; sum = sum + num &gt;&gt;&gt; print("The sum is:", sum) The sum is: 20 Shadowing builtins list and sum, and not using the builtin sum.
While I understand the concern. I hardly think that anyone new to a programming language would just pick an arbitrary version (given two kinds of them) without bothering to take a look at their meaning and which one would fulfill it's needs. Also worths pointing out that 2.7 is still the default in production, specially for web development.
Though that is true, I was swayed to learn Python 2.7 first because of the *huge* library support it has compared to Python 3.x. Though it really did not change anything, that point is not very helpful for new people (who will not use many libraries) and the new Python versions are actually making it easier and easier to learn the language^([citation needed])
Restarting syscalls on `EINTR` is generally the Right Thing to do. The only reason `time.sleep()` doesn't do so is because that could result in sleeping for longer than the user requested (possibly much longer if multiple signals arrive in rapid succession, e.g. as a result of a bunch of child processes dying at once).
This looks identical to before: https://www.dropbox.com/s/uf8z9b6frlxua8v/Screenshot%202014-02-19%2017.29.07.png
Yes, it's like a function in that you need some kind of content, even if it's the pass statement class Person(object): pass 
Yes, this is just the concatenation of three strings.
Yes, b is of the str type and hence has no mass attribute.
Sexy and it's even *responsive*. I like it. 
I use a program at work called ArcGIS which has standardized on python as it's automation language with 2.7 being the latest version that they support. I get that people should be encouraged to move on, but there are probably other examples in the "enterprise" software arena that are still stuck with 2.7. Edited for grammar. 
I hate this with the fire of a thousand suns. I want easy access to all releases. I want to know things like the date that e.g. Python 2.6.1 was released, or the URL of the source tarball for 2.5.6. The redesign hides all of those pages; the only thing I can find is the latest version of the two main branches. I shouldn't have to manually edit the URL to get to older releases. There is this tempting "Older release: Source releases" link, but clicking on it does absolutely nothing. Complete garbage. 
I was under the impression that restarting is a decision that one generally gets to make though. `man 7 signal` reads: &gt; ### Interruption of System Calls and Library Functions by Signal Handlers &gt; If a signal handler is invoked while a system call or library function call is blocked, then either: &gt; &gt; * the call is automatically restarted after the signal handler returns; or &gt; &gt; * the call fails with the error EINTR. &gt; &gt; Which of these two behaviors occurs depends on the interface and whether or not the signal handler was established using the SA_RESTART flag (see sigaction(2)). The details vary across UNIX systems; below, the details for Linux. It then goes into a list of calls that you can control if they restart or not, and the list of ones that will always `EINTR` even if you set `SA_RESTART`. Forms of sleeping are in the latter list as you suggest is reasonable. The call in question here, `poll`, is also in the latter list. Regardless `strace` does not show us setting `SA_RESTART` when registering the handler rt_sigaction(SIGTERM, {0x558fd0, [], SA_RESTORER, 0x7f076f467cb0}, {SIG_DFL, [], 0}, 8) = 0 So even if it's the Right Thing to do, it doesn't appear to be what we're asking for it to do. And we can see in the `strace`ing in the post shows that we do indeed not restart the `poll()` call. It does return with `EINTR`. I would expect `getaddrinfo` to see that one of the calls it made failed, and to surface that to its caller by return immediately with an `EAI_AGAIN` ("The name server returned a temporary failure indication. Try again later.") to indicate the transient failure. What I find to be the surprising thing is that it instead just continues on its merry way as if the EINTR never happened.
To be fair, python isn't really right for me. However, I've got a bunch of scripts accumulated, so don't bother switching because it would break my existing code. If I were OK with breaking existing code, I'd be switching languages.
Maybe you have the old version cached? Ctrl+F5 in Firefox to refresh ignoring cache.
I think a beginner would find that easier to understand than a magic `sum` function. 
Looks like the fruits example is already fixed, it's now: &gt; loud_fruits = [fruit.upper() for fruit in fruits]
I meant it's the right thing for Python to do. What appears to be happening here is: 1. `socket.getaddrinfo` calls `getaddrinfo(3)`. 2. A signal is received. 3. Python's C signal handler catches it and schedules the user's signal handler to run when we get around to it. 4. `getaddrinfo(3)` returns `EINTR`. 5. `socket.getaddrinfo` calls `getaddrinfo(3)` a second time to "handle" the `EINTR`. My contention is that step 5 is the Right Thing. The alternative would be raising an `OSError`, which IMHO would be very bad because the user would have to wrap all calls to `os.foo()` in `try`/`except` blocks.
 I think that's highly unlikely. Snippets like that are just supposed to demonstrate the language, not efficient coding techniques. I agree that they could find a better example, but good books/tutorials will explain the built-in functions and why `sum()` is better.
What's so magical about `sum(list_of_numbers)`? As far as I can see, if you've ever used the `sum` command in Excel (and I would think that you probably have if you're learning Python), it the behavior of the Python `sum` command should seem like it neatly carries over from what you saw with Excel.
In terms of finally getting the community solidly onto 3.x, I see your point, but in terms of an individual's ability to "do Python", it shouldn't matter. I learned on 3.x, and had to move over to 2.7 for work (projects which were already in 2.7, or where a necessary module required 2.7). There were some unexpected hiccups, like 2.7's default behavior for ingesting CSV files being a bit different than 3.x's, and a few other cases (which currently escape me) where things weren't exactly the same. But by and large, if you can do 3.x you can do 2.7, and vice-versa. I would say that you should know about print vs print() but apparently 2.7 will actually recognize and properly handle print() by default.
Because it shows how simply a `sum()` function can be written in Python. Sure it's a built-in function, but the point is to show off the language and `for` loops are more general and important. &gt; it neatly carries over from what you saw with Excel. But Python is a general purpose programming language, it's not supposed to have pre-written functions for every conceivable calculation (e.g. you can use `sum()` here, but there's no `product()`). 
Ah, my apologies, I see your point now. And playing with `strace` and various `SIGTERM` timings, it does look like all the lookups start from the beginning again after a `SIGTERM`, so it looks like it's time for me to go amend the post. :) However, I can't seem to find step 5 in `Modules/socketmodule.c` or `Modules/getaddrinfo.c`, though I'll admit that I'm not able to just skim this code easily. Would you happen to be able to point to where repeating the call on EINTR/EAI_AGAIN occurs?
If the developers are reading this, there are some HTML errors on the front page.
Did they change the old URLs without redirecting?
Actually, I'm not sure I'm right about this particular case because `getaddrinfo(3)` is a library function rather than a system call (and thus the enumeration in `signal(7)` of system calls which will or won't be restarted doesn't apply to it in the first place). What I think may be happening is this: 1. `getaddrinfo(3)` makes a system call. 2. Signal interrupts it. `EINTR`. 3. `getaddrinfo(3)` restarts entirely by itself. Python never gets control back. The rationale for 3 is as follows: `EAI_AGAIN` is for transient *server-side* errors, not client errors. And, quite frankly, the library function is more useful (to C programmers) if it handles transient client errors by itself than if it doesn't.
&gt;Again not a problem for the first semester. Syntactical annoyances are a first semester issue. &gt;I really think you have a wrapped sense of what C++ is. Beyond that, when I was taking the first few quarters of Comp Sci we did the course in Modula 2 (long time ago) and assembly language. Getting a college education shouldn't involve hand holding, so I disagree with your liberal give me an education attitude. Believe me C++ is light years ahead of Modula 2 and assembly language. This especially considering that the compilers actually work. No I understand what C++ is, its a statically typed, C-style language with automatic memory management unless you want to do that crap yourself. I may not have experience with it, but I understand how the language works in general. &gt;"Starter language" has a different meaning to me than a language used to support a Comp Sci program. The whole point of a degree program is to develop people as "Computer Scientist", not programmers specifically. A programmer can be hatched from a community college. Ruby is something I could never wrap my head around, very poorly designed for my needs! I'm well aware, I'm in one of the best in the country, and because the focus should be CS as a whole, not programming, or a programming language, but things like philosophies and paradigms, and correct (or valid) ways of thinking from a CS oriented perspective, it shouldn't realistically matter the language you learn in, at least not in the long term. &gt;You are really missing the whole point of what it is to enroll in a degree program. You aren't a beginner, rather you are a student that will hopefully leave a program with a broad understanding of the technologies available to professionals. With your attitude people would forever be beginners as they would never be challenged to learn. The majority of the people in my degree program come in with little to no prior experience. It legitimately is your first language. Our intro to Computer Science class covers great and difficult things such as "what is a variable" and "what is a keyword" and "what is a function." It goes from there all the way to "why is merge sort better than insertion sort, and, on a high level, how would each sort the list [8, 2, 3, 7, 4, 6, 1, 5]?" The answers to all of those are the same no matter what language you're using, how you implement them is another matter altogether. &gt;So you are damning C++ with no real exposure to it? There are a number of universities that have had great success integrating C++ into their degree programs. It works because it is simple to deliver the lessons needed in a Comp Sci 101 class yet there is plenty of power with in the language to support the student further into his studies. By no means, I've used C++ (for openCV) as part of a project I'm working on, its rather nice, for something that needs to be very fast and reasonably quickly editable, but I wouldn't want to have dealt with it as my first language. And while I do agree that you could very easily teach a class with it, I think that class would be better taught with another language, for much the same reason that I wouldn't want to teach "Programming 101" in java or haskell or C. That isn't to say no one does it, I mean CS50 is a great course, and taught in C and PHP, a terrible learning language (I mean, being brutally honest, do you really want to deal with manual memory allocation as you're learning about how to concatenate strings) and a terrible language overall (I hate php). My biggest issue with intro CS classes is the pervasive attitude of "here's some programming stuff, for now just do x, y, and z, we consider them ancient magicks that you must follow." Like in java, "Scanner scanner = new Scanner(System.in);". We were exposed to that line on the first day of class, we hadn't yet been exposed to what a constructor was, what anything other than a main method was, etc. Now I can understand some of that, but it irks me that we're dealing with this magic bit of text "System.in," I understand that it interfaces with stdin and that System.out interfaces with stdout, but that's never been explained in class, it has remained this bit of archaic magic computer science jargon. That isn't conducive to learning in my opinion. Compare that to python: "print x" or 'input("Type your name")'. Admittedly, those are simply wrappers over the C level interfaces with stdin and stdout, but its totally covered up, the jargony magicness is gone and the computer does what you tell it. Eventually that layer will be peeled back and you can learn about how stdio works, but until then its entirely hidden, which in my opinion is better than the pseudo hidden ignored "arcane magicks" method that simply leaves people curious and confused. Its continued throughout the java class I'm in because for example we're dealing with java swing, which uses frames and panels that inherit from other things, so we're told to say "public class MyPanel extends JPanel" with no clue what the hell extends means, and no idea what a JPanel is other than that you can paint and repaint it. Its more arcane magicky stuff until a month from now when we actually learn what inheritance is, and sure, someone could easily look it up, but most people in the course don't have a solid grasp on what object oriented design is at all. &gt;By the way I'm not saying students shouldn't be exposed to more than one language, I'm simply saying C++ isn't as bad as many make it out to be for teaching Computer Science be that in a University or high school. A smart student will leave school proficient in a couple of languages. Obviously, My program expects that, and while it coddles you at the beginning, by your third year or so it expects you to have matlab under your belt despite the class not being required, the school offers one (its the CS course for engineering majors), but you don't need to take it, the language is required for certain things either way. &gt;Well this I agree with to an extent. I wrap this into the concept of communications, it isn't just reading that is important. However you need to ask yourself is it really worth your time helping students that won't help themselves. These aren't the type of people you will want to work with in the future. Keep in mind many of these people are freshman, and for many of them CS is totally new, so while some are quite intelligent, the idea of being able to, and it being required that, they look up further information on how the material works is completely foreign. &gt;In any event Alien Blue has stopped quoting for me and I'm too lazy to cut and paste. I don't know what the intentions are for this program, but making it easy serves nobody. Even realizing that this is a high school program there should still be the expectation that students learn a bit of computer science otherwise they might as well call the course a "programming" option. Making it easy, no (I actually hate how coddling the first few CS classes we take are), but don't make it difficult for the sake of difficulty, I mean you wouldn't teach the intro to programming course in brainfuck, because while brainfuck is valid as a learning aid for state machines and turing machine style languages, trying to learn how to create functions, much less do anything that could be remotely called "computer science" is near impossible for anyone. If I, as a teacher, wanted my students to both be introduced to programming, and learn basic principles of computer science, I'd want to make the class as language agnostic as possible, and the language as easy to understand as possible, so that they aren't bogged down by difficulty understanding a language. As a result, I'd want the topics covered to be general and relevant, and the language to be quick to pick up and easy to understand. And while you probably understand C++ and python very well, be honest, if you'd never written a line of code before, which would you grok faster?
hmmmmmm https://github.com/python/pythondotorg/blob/master/Gemfile no ansible https://github.com/python/pythondotorg/tree/master/chef no fabric https://github.com/python/pythondotorg/blob/master/tasks.py ಠ_ಠ
Landing page looks better. Documentation looks the same. Couldn't have asked for more.
Do you think this syntax is useful? try: do_sth(*args, **kwargs) except: monkey_patch(args, kwargs) retry I really **hate** to write `while True:` loops for these kind of jobs.
providing totally different example: &gt;&gt;&gt; Z = lambda f: (lambda x: f(lambda *args: x(x)(*args)))(lambda x: f(lambda *args: x(x)(*args))) &gt;&gt;&gt; print("The sum is:", Z(lambda f: lambda x,*y: x if not y else x + f(*y))(*Z(lambda f: lambda x,y,z: [x] if x+z &gt;= y else [x]+f(x+z,y,z))(2,10,2))) They probably didn't use this one because it shows python's weakest point - that it doesn't have a builtin Z-combinator, so you have to make your own :( /s (note: python3)
I see [the redesigned site on my tablet](http://imgur.com/3jcwHcP), but when I asked snapshot service archive.is to capture it, [the snapshot shows the old site](http://archive.is/OrTjY). Archive.is downloads everything anew for each snapshot. I'm in Norway, archive.is have their servers located in Germany. There must be something on python.org's end causing this.
Hah! I just started learning python and even *I* know that it's sum += num! Silly people! ;)
I have been developing in python for 8 years. I had no idea you could do &gt;&gt;&gt; 5.0 // 3.0 1 
That seems very likely right. If I run python under gdb and breakpoint on `getaddrinfo`, it only hits the breakpoint once, and strace shows all the lookups starting from the beginning again. This seems to support `getaddrinfo` redoing the call from the top internally pretty strongly. I'll try to clarify this in the post with a link to this thread soon. I tried actually looking at glibc, but that's definitely not something I can work through in a night, so we'll leave it at this. I do appreciate you taking the time to read and comment to help ensure technical accuracy of the post. :) Edit: Rewording of post is done, with a large footnote. Thanks again.
And all the news items are from 2012... Derp.
multiply your matrix by 2 and then subtract 1
I wrote a web crawler using urllib. Then changed the code using requests. Then started playing around with map, filter, sets etc, to build a index of the items crawled. I wrote a little search engine and it was hell lot fun!
Write an app to simulate the Monty Hall Problem and prove the correct answer. (Once I was proficient at Python, this took me 10 minutes; maybe it's a good one for a beginner).
Haha I don't know. Even knowing the correct answer I still have no idea how it works.
You could use the time module and run a loop with a sleep in it, or you could write a script that makes the query you want only once and setup a chronjob to run it every so often. I'd suggest the latter.
or just `sum = sum(list)` 
I was trying to make a Python joke :(
I guess I missed it. Sorry!
I'm Canadian...this is awkward...sorry!
Stocks? Write a simple python program which checks stock prices of the company you follow. And you should get an email/sms when the stock prices fall below the price your mentioned or below 20-30% of current price, something like that. 
Not within the scope of PEP 463, but I suspect that this wouldn't get a lot of support. Best would be to ask your question on python-ideas or python-list and see what people say; the idea of control flow that uses the try: block isn't inconceivable, but it might be confusing.
:O The way zoom in and zoom out of [this](http://bokeh.pydata.org/plot_gallery/correlation.html) graph looks is so beautiful!
Why they say 'Python interactive visualization library'? Why not just 'Python visualization library'? What is 'interactive' here?
The graphs. 
Current: pan, wheel zoom, box zoom, plot resize, dynamic server-based downsampling, hover/data inspector, selection, highlight, and linked selection, ... Planned: dynamic layout, data-driven layout, more tutorials &amp; demonstrations of viz interactions tying back to in-process data
So it tries too convert say now, "age" from an integer TIA. String so it can be printed out?
I'm not trying to contradict you here, but as I recently started learning Python (about a week ago) and I find the magic sum function pretty easy to understand. I've worked a lot in Excel, so a lot of things such as that one have been rather intuitive. 
I am guessing "pass" does nothing and just passes through the class? Or you could just put a comment in its place 'hello' but I think it would probably be good practice to use "pass".
A sum function isn't any easier to write in Python than other languages if you disregard generics vs. dynamic typing. &gt; it's not supposed to have pre-written functions for every conceivable calculation It's supposed to make our lives as easy as possible (hence Batteries Included).
Would it be any harder to understand if you called the variables `items` and `total`? Every code example you put in front of a beginner shapes their first and potentially long-lasting ideas about a language. You don't have to tell the whole story, but telling the *wrong* story is usually a bad idea, IMHO.
They hyped the new web design like crazy and even hired two companies to work on it. Right now it just seems a bit rearranged and... bluer... after all these months. And I don't really see any new content. And it should make fans of other languages cry to look at it. :-) It doesn't really seem to be going for the "hard sell" - showing off a function declaration isn't going to wow anyone. Is it possible to somehow distil Raymond Hettinger's "Why Python Is Awesome" talk into a splashy web page? There was a brochure that came out in beta after quite some time that was also a fantastic sell (although I don't know if they ever used it for anything). That was also leaps and bounds better at selling Python than this new front page. Here it is - download the brochure from this link: http://brochure.getpython.info/learn-more and see if that isn't much better than the web site. I think the website people swindled the PSF. :-( I mean, does this really look awesome to anyone: http://python.org/success-stories/ I think whoever did the brochure should have worked on the website design instead.
Sticking beta to everything is so 2005.
To elaborate- the purpose here is to normalize the request format for a service I'm building. The soap call is the 'bridge' part to a third party provider. The restful stuff is on the handler side- and the soap call would be an action taken as a result. 
Thank you for referencing the exact use case that I mentioned myself: that Python's `sum()` ought to make obvious sense if you've *ever* used the Excel `sum()` command. (I also argue that you've probably used Excel at *some* point in your life if you're trying to learn Python.)
Oh I get it. I was being dumb, of course it's the graphs. Anyways awesome job. A noob question, is knowledge of NumPy necessary? I don't know NumPy and can I still use it? And also the output will be always html right? I don't need Flask at runtime I suppose
Exactly. I do see some value in knowing how to do it without the built in function, for the sake of knowledge. That said, I think the built in function should be taught *first*. I just think that it's much more important to learn how to use the tool effectively rather than understanding all of its intricacies. Again, I do think 
Don't know which? How the problem works or how to write a program to simulate it?
You don't have to use Numpy arrays - you can just use lists of numbers. The output can be either a static HTML file, an output cell in an IPython notebook, or stored as a plot on a bokeh plot server (which you need to run somewhere) and that you can then get an embed code for. You do not need to run Flask or anything like that - you can use Bokeh just to generate self-contained HTML files which then get served up statically. (That's how examples like http://bokeh.pydata.org/examples-0.4.1/unemployment.html are served on the main Bokeh site.)
so, nodebox-python?
"Early access" is what all the cool kids used nowadays.
&gt;You're missing the point of the snippets. Just having s = sum(my_list) wouldn't &gt;tell you much about the language Coming from Delphi it told me that I could do something with Python lists I couldn't do with Delphi lists. :-) &gt; -- a for loop would be far more informative. I personally would lead with the awesome stuff - list comprehensions, iterators and generators, packing/unpacking of tuples and parameters, the amazing key-based sort function, one-line multiprocessing, slice notation, the powerful and comprehensive math support (standard library and 3rd party), JSON support, function decorators, sets, powerful and easy DB-API... ok, now that I think about it, there's quite a lot of awesome stuff. :-) 
The theme could be more light. BTW, when does @Django office site going to redesign to attract us?
I think it looks really really nice ! 
The jobs page doesn't work.
Kinda sorta not really. 1. The web 2. Big data 3. language-based &amp; extensible I've always thought Nodebox is a neat project, and conceptually the way that it encourages users to think about data-driven graphics is similar in spirit to Protovis and Bokeh. However, the data event and data-driven layout ideas that we'll be implementing in 0.5/0.6 are a different way of thinking about interactivity, and I've not seen anything like them in infovis, except maybe Stencil. Also hasn't nodebox 3 moved away from python?
Planet Python CSS links are broken now! http://planet.python.org/
Don't do that.
Erm, you do know that invoke is more or less fabric 2.0 minus SSH support (developed by the same person and will be used to power the next major version of fabric)? 
Can you show some example links so I can file bug reports? :)
Well strings have very interesting and helpful behaviours that seem to just work for the user. For example, concatenation. 
Perhaps I'm misunderstanding - but as long as the HTTP layer is non-blocking, why does the SOAP library need to be non-blocking? Isn't a SOAP call just: 1. Prepare SOAP payload in memory (data -&gt; XML) 2. Send SOAP message over HTTP using a non-blocking HTTP client 3. Receive SOAP results over HTTP using a non-blocking HTTP client 4. Interpret the SOAP results in memory (XML -&gt; data)
I see you are doing Steve Huffman's course, so maybe you should've asked on Udacity forums, but .. what the hell: the way you do string substitution in Python is: you place %name in your text, without parenthesis, example: text = """&lt;a href="%s"&gt;""" print(text % "reddit.com")
Someone posted an issue https://github.com/python/pythondotorg/issues/64
But don't use sum as the variable name, since that shadows the built-in.
Looks like the wrong reddit too, the article is for PHP: http://code.tutsplus.com/tutorials/solid-part-4-the-dependency-inversion-principle--net-36872
Problem with the later is that if it takes longer than a second, another script will run and could clash. The database might be inconsistent if say the second script finished first, saved some models then the first one finally completes and overwrites the first. That, and cron can only be set per minute.
Nothing magical or hard to understand about using the `sum` builltin, though it wouldn't accomplish showing loops
They have a feedback thing on the page itself.
No.
I especially like that the download links appear as: &gt; Latest: Python 2.7.6 - Python 3.3.4 So I can download the latest 2.7.6 *through* 3.3.4? It looks like a single link, but when I click near 2.7.6 I only get 2.7.6 downloads, and for 3.3.4, it takes me to 3.3.4 downloads. It certainly doesn't look like that should be the behavior. I've had non-Python programming friends who have been put off immediately by the "which version?" nonsense that even this new Python page presents. They usually tell me, "I didn't know which version to get, so I just went back to MATLAB." I can't defend it, so I just shrug and say, "yep." 
Have you seen this entry on the [Twisted Matrix labs blog](http://labs.twistedmatrix.com/2013/01/twisted-python-3-and-you.html)? &gt;What it really means is that it's time for you, Twisted users who care about Python 3, to contribute patches that port specific modules to Python 3. You can also see the progress against the Twisted [Python 3 milestone](http://twistedmatrix.com/trac/milestone/Python-3.x). HTH. [Edit - fixed typo.]
Hello swims_with_spacemen, please check out this new feature of Zato ESB and app server - serves exactly the very purpose! :-) https://zato.io/blog/posts/secure-scalable-and-dynamic-invocation-of-soap-services-with-zato-and-suds.html https://zato.io/docs/index.html
but in this case won't the SOAP lib typically block at 3 when it asks for results immediately from the http layer and has to wait for them?
I think you are not supposed to copy virtualenvs... some packages do compile ad-hoc when installing.
Came here to say that, and laugh very hard.
Have you checked the [APScheduler](http://pythonhosted.org/APScheduler/) module? Very neat way of adding cronjobs. For the request itself, i'd use the [Requests](http://requests.readthedocs.org/en/latest/) module.
Damn, that looks really cool. Especially including the interactive interpreter. Real neat!
So a string is like this... app_name + " is written in " + programming_language That would then be a string since it is like a string of data I guess. And integers are like... 1 + 2 + 3
Often isn't strictly true. CPython only interns string constants, and only up to a certain length, and only within the same lexical scope. (Is the length limit still true? It was in older Pythons.) So in fact I would say that your statement is backwards -- often strings will not share ids, and sometimes they will. And maybe going further, as you have noted, you can't count on the result to be the same between implementations. I don't think it's fair to say that Python will do its best to reuse the same memory; again, it only does so in a few cases, as an optimization. It pursues a strategy where the gain of saving memory is balanced against the run-time and compile-time costs of hunting for identical strings, and so the hunt is only conducted in limited circumstances.
It is an okay way to distribute applications. Works best for command-line based developer tools, since Python devs probably already know how to use pip to install stuff. For end-user oriented GUI apps, hmm, it's still a place that lets you host an .exe or .msi installer. If you manage to build one, which is the hard part.
In suds (https://fedorahosted.org/suds/), you can set 'nosend' option; instead of using it's own transport it will generate a RequestContext object which contains generated SOAP envelope and succeeded() method to feed with response from your own transport.
No thank you. I'm happy with 2.7. It works well, and 3 has nothing worth the change. 
Personally, I blame [Slashdot](http://beta.slashdot.org/).
Yep! That was it. Thought it was doing something more interesting.
Found that out shortly after. Had to use a requirements.txt file after all.
Thanks :-) (I'm part of the team that did the interactive interpreter)
It's really not done at all and should still be in private beta (cf. for instance the calendar and latest news blocks which are currently just placeholders). Regarding the design: it would have been great 2 years ago, IMHO it's already a bit outdated. 
I like it a lot, but I think for compatibility we should put the new website on a subdomain and slowly transition over the next fifteen years.
Yeah, so... we did a plot server refactor that will make this possible, but it didn't quite make it into this release. Do the redis binaries at https://github.com/dmajkic/redis/downloads not work for you? I do anticipate fixing this in the 0.5. Actually if I get time today I'll start working on an in-memory server backend.
Ooh- that way I can use the non-blocking transport of tornado and not have to deal with the xml hell of Soap! I'll check that out!
News to me, as well. Funny how the most basic of capabilities can elude you after all that time.
That's alpha, I'm afraid
You are right, it's not good practice. I'll change it (or at least hard code one path and refer to that path everywhere)
:D Yea haha no worries. Will eventually add comment rating and downvotes also!
Did you post this comment with [requests](http://requests.readthedocs.org/en/latest/)?
nope I did it with webobtoolkit
Python vis has always been about "different strokes for different folks". Even as Matplotlib became more widely adopted, there are plenty of folks who needed MayaVi for 3D, Chaco for interactive widgets and streaming, PyQTGraph and others... And almost 10 years after the start of Matplotlib there are still efforts like ggplot.py and seaborn for folks who need plotting in a particular domain. And this exists in other languages, too: Javascript has a whole field of options, as does Java, and C++. If combined several decades can't solve the problem of "one viz library to rule them all", what evidence is there that this is even possible? Concretely: The Matlab convert who is new to Python just wants "subplot(2,2,1); figure()..." to work. The R convert doesn't ever want to type subplot - she just handed you a dataframe, do the obvious thing. The 3D vis person wants to configure the number of rays to use when you raycast a volume, and on their slower macbook air, please use bilinear instead of trilinear texture filtering. The finance guy just wants line plots, but the date &amp; time axis had better be able to zoom in from decade spans down to microseconds. And the day trader wants to try to draw Point-and-Figure charts - what do you mean you can't directly render pixels into arbitrary parts of screen space?! Don't even get me started on graph/network visualization and bouncy node-link diagrams. Or OpenGL libraries and GLUT and vendor drivers. Or GUI toolkit integration or lack thereof. Matplotlib is certainly the dominant and most popular - and it's very powerful and polished in many ways - but Python's strength has actually been in the diversity of options. You can do basemap and some "light" 3D in matplotlib, as well as animation. If you need things beyond that, there are tools for them, which scratch other itches really well. The idea that there has been "one" viz library is not an accurate representation of what I've seen out in the field.
Yes you are right.
Idea Ultimate doesn't have python support by default. However it is possible to install free python plugin which adds PyCharm functionality to IDEA. PyCharm itself is always more solid and ready-to-go solution for Python and Python/Web development since it's dedicated to it. Anyway IDEA + python plugin provides equally the same functionality since they have the same code base and PyCharm is derived project. The complete FAQ about PyCharm and IDEA can be found here - http://confluence.jetbrains.com/display/PYH/PyCharm+vs.+IntelliJ+IDEA+Python+plugin+FAQ
Sorry, I'm confused myself why this doesn't work.
How does this compare to pycurl? 
Lol. /r/programmingdadjokes
Yes. We get that. That's not the point. 
Hey there, I'm the lead dev for Trigger. Trigger does not officially support 3.x yet, but it may work. The major hurdle has been the third party libraries such as Twisted and PyCrypto, which until very recently were not ready for Python 3. Use Python 2.7.6 and your life will be grand! Most of Trigger is coded to Python 2.7.x best practices and should adapt fairly easily to Python 3. I really want to get Trigger ready for Python 3, but just haven't had the cycles. Please join us on IRC!
Layout reshapes nicely to squeezing window width.
I may be doing this wrong but without `sys.path.insert(0, '/home/lucas/www/reddit.codelucas.com/reddit-env')`, I'm not able to import flask\_reddit (I need to get the contents of the `__init__.py` file). The line `from flask_reddit import app` breaks. If there was a way to do this without inserting something into the path i'd use it instead.
You using Chrome? It has an internal DNS cache.
What do you mean by "outputs different file types as data"? Do you mean print it to standard out using print()? If so, it's easy to create a text file! Assuming Python 3: data = ['.txt', '.png', '.jpg', '.foo'] with open('dataoutputfile.txt', 'w') as F: for d in data: print(d, file=F)
"from . import app" should do it. Actually, even if it does work, it would be much better for you to move the code from the init.py to a different module in the same folder.
Python 3 being used. Yes! The script prints straight into the GUI and I want it to print into a suitable document for the file type. Edit: I've managed to output to a file, however the data is the name of the file.. any way of making an image of the actual file i.e read and copy rather than write and pull up extra information such as headers ? 
I'm not saying the examples are the best, but I think it's worthwhile to show off basic stuff like `for` loops and iteration to give people a feel for the syntax.
There is no `bokeh-server` command in Windows installation. The docs don't explain how I can start the server in windows and I'm not experienced enough to jump into the source code and figure it out myself. It would be nice if you add a real Windows how-to to the docs
I'm pretty sure that was backported from 3.x. That might be why you've never come across it.
Site's down it looks like.
Here's the recommended way of structuring flask apps: https://github.com/mitsuhiko/flask/wiki/Large-app-how-to Although it may not be suitable for every situation, I personally have never felt any need to deviate a lot from this. Hope it helps :-)
Not sure if trolling.
Cant wait for that feature. 
Thanks, I sent a message.
That would make sense.
wow. so meta. (I wish I had dogecoins to tip)
My name is /u/coinflipbot, not /u/coinbot. *** ^^[Statistics](http://coinflipbot.re/stats.php) ^^| ^^Don't ^^want ^^me ^^replying ^^on ^^your ^^comments ^^again? ^^Respond ^^to ^^this ^^comment ^^with: ^^'coinflipbot ^^leave ^^me ^^alone'
Have you been drinking again?
Is anyone auditing this course as opposed to paying for it, or has audited in the past? Is there much of a difference really? I'm not sure if this course is for me, so I just registered to audit...
Fully agree. How's this for a better example? https://github.com/python/pythondotorg/pull/141 -- there's no built-in `product()` so this could be real code, and it doesn't shadow the builtins: numbers = [2, 4, 6, 8] product = 1 for number in numbers: product = product * number print('The product is:', product) In real life you *might* use `reduce(operator.mul, numbers)`, but I (with Guido) actually prefer the straight-forward for loop.
Oh my god my first dogecoins &lt;3 Thank you so much!