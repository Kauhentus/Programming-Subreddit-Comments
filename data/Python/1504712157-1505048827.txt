It does, I used to learn from CodeAcademy. It makes a great work and I learned a lot form it. Just to let you know, sometimes people tend to underestimate how complex this language can be. Working with can cause some bugs sometimes and it's important to detect and fix those. It can happen by using programs like checkmarx or others of the same kind or just by coding slowly and maintaining you code. Good luck.
ama request
Sic transit gloria Redditi...
AFAIK you can, hell you can even access "hidden" methods via name mangling, because Python. But to paraphrase Jeff Goldblum "you know you could, but you didnt stop to think if you should". Calling magic methods is IMO bad practice, but there are some exceptions, like calling the parent class `__init__` in a child `__init__` Edit: i think even then, super() is the preferred method now. 
I use a flake8 plugin that warns if you have a debugger statement.
Don't set breakpoints by modifying your code then. "I don't feel like using tools that are available but the way I do it sucks." is hardly a good argument for changing a language.
You may have lost your charm, but none of your self-awareness.
super is definitely the right way now. I completely agree, calling the "public" methods is always best practice. I started programming in JAVA where it forces you to, so I just always have. I'm just surprised that SO many tuts follow the "private" import convention rather than using the more proper importlib.
this was absolutely amazing. he's unbelievable. i watched him do a live coding talk of asyncio once, he's just ridiculously good. https://www.youtube.com/watch?v=MCs5OvhV9S4
Think about what sorts of problems or annoyances you face day to day. Is there some information that would be really nice to have in digestible form but isn't? Make a web service that provides it. Some of the best projects come from real needs that you face. It's much more motivating to work on something that you'll find useful rather than something you build just as an exercise. 
Since most guitar tabs are text files I parse through the text file extracting the tuning and notes. Since I know the tuning I can build a fretboard to convert all tab locations to notes where I then process them determining the key by checking if the song fits into a given key (I check all 12). Then which ever the song fits best is the key. After knowing the key it becomes easy since you now know which notes fit within the song so you just place those notes back on a fretboard. For piano this might be tough to find the key however since most sheet music is pdf form and harder for a computer to read then just basic text input. Although making a list of chords and keys is kinda easy since you just need to know what notes fit the key. My website is currently up at bellerb.pythonanywhere.com if you want to check it out. Although you need to sign up to use the key finder since I want to be able to log who is adding songs to the song bank.
I don't think that has anything to do with the PEP though right? What the linters do is completely up to them, independent of the proposal here. He's only arguing that having linters spew about multi-statement lines is a useful feature that shouldn't disabled because of debugging idioms. So that *is* a point in favor of the PEP, imo, because by separating the debug case from actual wrong-multi-statement-lines, you will get fewer hidden/ignored non-spurious warnings which were disabled because of the spurious warnings.
1. /r/learnpython 2. Because `numbers` is a tuple, not a list. Make it a list of tuples.
## `continue if` / `break if` YES https://gist.github.com/Socialery/551064b4a82bec326db85ac8e360289d My personal usecase &gt; [from python-dev] but more specifically it makes the control flow almost invisible Do you code in your mail client tho? or in your editor with syntax highlighting probably? with keywords all being the same color, its VERY on-the-nose about the word "continue" there, e.g. https://i.imgur.com/GlcAVdn.png without highlighting, instead of reading in-out-in-out-in-out, you just read down, the first word on the line is a keyword, and it is a keyword that changes control flow, you are still being warned and alerted to the change in control flow! "there should only be one way to do it" is followed by practically "but we don't know what that is yet" for a reason, its not to discourage alternatives completely! and if you want to go with zen, "avoid nesting it looks bad"! - - - ## optional expression for `while` In this case, there isn't any heavy modification to the syntax, but as a result, there is nearly no modification to the typability, readability, speed, etc, etc. And because of that, it searches for an excuse to exist (at least thats what it feels like) &gt; If practical, it should also be an error if the body of an expressionless while does not contain at least one break or return statement. Which is a weird edge-case to introduce! "How does `while True:` differ from `while:`?" "it doesn't unless you don't have one or more of two keywords, in which case it becomes a syntax error" "okay to avoid that, I'll just use `while True:`, since then I don't have to remember this weird specific difference" If that error gets removed, then all it is is 5 characters, not even a structure change, and it makes it slightly harder to teach python unless you again omit its usage completely from your teachings!
It's a legacy format that Microsoft and the open source world has been trying to kill for 10 years. It's super proprietary to Microsoft and even they don't want you to use it.
&gt; I don't see a reason for why this is better than using a debugger and setting breakpoints. Sometimes it is, sometimes it isn't. If I'm running something locally just using my IDE's debugger makes sense. If I have a script I'm running on a virtual machine or something, it's frequent enough that I'll want to check out what's happening on that system and might not have easy access to a full featured debugger there.
Thank you for the clarification, but unfortunatelly some people have to use the legacy .doc format, so advising OP not to supportit without relevant information is unproductive.
Implement your idea! You are not going to create Wolfram Alpha but you'll learn to write something "good enough" and it will be important to you to accept what to compromise in order to deliver on time. Use https://github.com/python-telegram-bot/python-telegram-bot to create a telegram bot, it's not hard, start with some command and then expand from that, you won't be able to parse complex English sentences but you'll end up with something useful. If at some point you are in trouble you can still use the code and develop a different bot. Good Luck.
I missed the boat badly on this one. Does anyone know how I could still buy these - at or close to the original HB price?
Why is it unproductive? The OP can make a choice based on his/her needs. Supporing everything is more costly and you'll end up with worse support for a format that is commonly used and poor support for both. It's not my choice... Saying it's unproductive to me without info from the OP is unproductive... it's possible they just used the two interchangeably. 
If you want to work with other python devs, we also have a fairly large slack team (8,400 users and growing), pythondev. You can join on http://pyslackers.com (click "join the community") as well. We have many channels and all skill levels. We even have a few community projects we are working on to help people learn.
I think youtube-dl can. You can use it as a command line program or a library: https://github.com/rg3/youtube-dl/#embedding-youtube-dl
Now you're just making noise. Working with all Micosoft Word document formats is trivial in Python.
Why not just a repeat...until loop? None of these options look simpler.
You'll never* accidentally type the wrong variable name if you use all GUIDs when you program! *Within the age of the universe
Sure, I've used pdb once or twice for debugging but if that's so common that you want to change the language in order to make it marginally easier then the problem lies somewhere else.
To be backwards compatible, `__debug__` would need to be a callable with a custom `__bool__`, returning False if Python was started with an -O option.
Typo in the last paragraph of the Proposal section: &gt; sys.displayhook() would be called with no arguments. It returns whatever is returned from the underlying debugger entry point. debug() returns whatever sys.displayhook() returns. That should be s/displayhook/debughook/g EDIT: how about `yield break` instead of `debug()`? It defines no new keywords, and cannot currently legally appear in Python code and thus there is no possibility of shadowing variables. It also would be compatible with e.g. [PEP 548](https://www.python.org/dev/peps/pep-0548/).
I like the additional syntax because it feels like a natural extension to expressiveness. However, I agree with you. Python lacks `do..while` semantics which can only be accomplished with a function.
I would like to see the implementation. 
[I found it here](https://github.com/python/cpython/pull/3355).
Here you are https://github.com/python/cpython/pull/3355
I agree with this: https://mail.python.org/pipermail/python-dev/2017-September/149192.html In particular: &gt; This proposing saves just a one line of the code. But it makes "break" and "continue" statement less visually distinguishable as it is seen in your example from uuid.py. &gt; If allow "break if" and "continue if", why not allow "return if"? Or arbitrary statement before "if"? This adds PHP-like inconsistency in the language. I do like the bare `while` syntax, but the advantage is too small to warrant the change in Python's grammar, IMHO.
 &gt;&gt;&gt; import dis &gt;&gt;&gt; dis.dis('a: int') 1 0 SETUP_ANNOTATIONS 2 LOAD_NAME 0 (int) 4 STORE_ANNOTATION 1 (a) 6 LOAD_CONST 0 (None) 8 RETURN_VALUE &gt;&gt;&gt; dis.dis('b["k"]: int') 1 0 SETUP_ANNOTATIONS 2 LOAD_NAME 0 (b) 4 POP_TOP 6 LOAD_CONST 0 ('k') 8 POP_TOP 10 LOAD_NAME 1 (int) 12 POP_TOP 14 LOAD_CONST 1 (None) 16 RETURN_VALUE Hm, it seems it's not stored at all. It evaluates `b`, then discards it, then it evaluates `"k"` and then discards the result, then evaluates the annotation and then discards _that_ result. Attributes are similar, but doesn't evaluate the attribute name: &gt;&gt;&gt; dis.dis('b.a: int') 1 0 SETUP_ANNOTATIONS 2 LOAD_NAME 0 (b) 4 POP_TOP 6 LOAD_NAME 1 (int) 8 POP_TOP 10 LOAD_CONST 0 (None) 12 RETURN_VALUE
I'm a simple man. I see David Beazley I click and upvote.
For free, or....
He said free hands and didn't say no take-backsies
Or my work environment is different from yours?
Very nicely written, nice graphs, nice disclaimers, thanks for posting :)
/r/learnpython
cool! I am just starting with python and this really has some nice tips to keep me busy :) 
Seconded, when you're starting out anything worth doing is surprisingly big and you just don't have the same inclination to keep going if it's not your own itch. Something handy is working out intermediate steps that are still useful -- say, you've not built the web front end or collation functionality yet but it makes a folder full of documents you can read in one place. That means that you're seeing tangible results before the project is completed
I remember coming to Fluent Python a little bit sceptically (I thought the 'fluent' metaphor was a bit gimmicky) and it absolutely won me over. It's a fantastic book.
Still pretty early stages on writing a budgeting app that talks to my bank account and automates a lot of budgeting and tracking, notifications, and more. Still early to share. But everything will be using async too.
That's in PEP-20.
thanks 
Each component you build already has a makefile. There is nothing as part of the git repo I am building. lds is in my path and it knows all the commands I am building. With python, I can use many libraries for making things interactive etc
Yes it is. But I don't think that is a reason for adding a builtin. Should we add a builtin for all things that someone finds convenient?
If it's pluggable, it might make sense to make it into a no-op in production unless you do something specific...
Congratulations for the effort.
I use Sublime Text 3 with snippets and this plugin for Python autocompletion: SublimeJEDI: https://github.com/srusskih/SublimeJEDI Also, anaconda is a good plugin for sublime (code analizing, autocompletion etc.) https://damnwidget.github.io/anaconda/ 
I have never been on a job interview, so I'm not sure if this helps anything, but I recently saw a [video by Tom Scott](https://www.youtube.com/watch?v=QPZ0pIK_wsc). I thought it was interesting, at least \^\^ Break a leg!
Whatever you guys work on, I'd like to participate and watch commits if possible. I'm learning about machine learning/AI myself, and need mentors and peer to bounce ideas between.
What kind of text editor are you using?
These guys have a major spoofing problem and have been looking to hire machine learning experts: https://nianticlabs.com/jobs/
You can kind of already do this today with pip install debug import debug but I don't think it works with python3 yet... I've been using this in python 2.7 since forever.
I would recommend selenium, Scrappy and if it is necessary, pyautomation
From the link: &gt; Ice is a Python module with a WSGI microframework meant for developing small web applications in Python. It is a single file Python module inspired by Bottle. What *should* follow is why Ice is better (or at least different) than Bottle. I don't see that in the following text nor any other compelling reason to use it. (Certainly not saying there isn't one. Just that it would behoove them to explain why!)
Furthermore on the [Github page](https://github.com/susam/ice) it does have a "Why Ice" section, but somehow still manages to not answer that question
They might ask some object oriented programming stuff. Like what's a class, abstract class, polymorphism, agregation and composition etc... Maybe what other projects you've worked on before, and ask you to explain in detail so that they can be sure that you understand what you're talking about. Otherwise basic interview things, proper clothes, smile, bring your resume and something to write on. Prepare some questions for them for the end of the interview, like what will you work on, who will you work with, what will the pay be. Hope it helps!
Excellent video recommendation, thanks!
I don't think it'll get into polymorphism and things like that, it's a "junior" dev job (really, will be my first job as a dev, used to be a linux sys admin) but good call on OOP! There'll also be some on-chain programming so I'll need to brush up on Solidity too This is my 3rd interveiw with the company, so we've already done all the talking about projects I've worked on before, etc... so I think this is just to show them that I can actually program and I'm not some copy-paste warrior. All the pay stuff and what have you has already been discussed. I made sure this job was a remote and not in person job so I'll be interviewing in the buff lol https://media.giphy.com/media/l2SpPvzFidEyGwq2Y/giphy.gif
If you are ok with being locked to Windows and requiring word...
I assume you are trying to run cloudformation.py? Python really does not like importing from parent directories. Option 1) Put the lib folder in one of the folders that python checks for imports. You can see them with the command `python3 -m site`. A good way to do this is to make a proper package and install it with pip. Option 2) Add the lib folder to the list of folders that python checks for imports by adding it to the PYTHONPATH environmental variable. Option 3) Move the file to a location where all imports are in subfolders. --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Okay, that makes sense. And I apologize, I didn't know /r/learnpython existed - I guess I should have checked the side bar. I'll looking into the pip option - I like that idea the best.
**Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year!** \#1: [Python 201 Book is Free for 48 hours](https://np.reddit.com/r/learnpython/comments/5814lw/python_201_book_is_free_for_48_hours/) \#2: [90% Python in 90 minutes](https://np.reddit.com/r/learnpython/comments/661o5a/90_python_in_90_minutes/) \#3: [Python 101 Book FREE for 48 hours!](https://np.reddit.com/r/learnpython/comments/5bmaz0/python_101_book_free_for_48_hours/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
I had once a job interview about development of embedded python application on an microprocessor. I guess you can run it on pretty much anything that can also run java.
Hi Timmy_T! Sorry for the delay. We are always open to reconsidering candidates. If you've interviewed, but were not offered this go around, we will reconsider you again in 1 year. Getting more experience under your belt is always good; we love seeing work with open source, consumer products, anything else relevant to Yelp, etc. I'm happy to check on your candidate profile if you send me a direct message. Thanks!
That's not really how it works. It depends entirely on what the program you're writing is going to do. A simple "hello world" script for example shouldn't require more than perhaps 5 MB of memory and a few dozen MB of disk space for installation; in such a case any computer in the last 25 years or so could run it. But in that case you'd be limited more by the operating systems supported, e.g. support for Windows XP and earlier was dropped several releases ago. 
a benchmark and comparison with other methods would be nice for acserious scientific publication
Java is a lot more ressource hungry than python, micropython runs on mcs that have a tenth of the ram and computing power that the jvm requires for "hello world". Asking for the minimum requirement of a programming language seems wrong. What ressources are needed is determined first and foremost by the program, not the language it is written in.
OT: that first graph (visits to questions for different programming languages over time) is really interesting. Java (and to a lesser extent C++) seem to have spikes twice a year, in the spring and autumn (bigger in autumn), and JavaScript seems to have the opposite - spikes in summer (big) and winter (small). I'm no expert, but that looks a lot like people are learning Java and C++ at school, then going home over the holidays and doing JavaScript. E: hah, that's what I get for commenting before I read the whole post...
E.g. https://keras.rstudio.com
I personally prefer to debug with IPython rather than the default shell. It has so many more features! I also want an easy way to exit if this is inside of a loop. As such, I created the following text expansions. I type `~embed` and my computer fills in: print('-'*60);import traceback as __traceback;import sys as __sys;__traceback.print_stack();print('=+'*30);print('Embed:');from IPython import embed as __embed;__embed();__contt ='Do you want to continue? [Y]/N?\n';__v=__sys.version_info[0];__cont = input(__contt) if __v&gt;2 else raw_input(__contt);_=sys.exit() if __cont.lower()[0]=='n' else '' (It works with both 2 &amp; 3, plus gives a traceback and an option to stop)
But why lint while you are still debugging? lint after you debug?
Thanks for the reply! I sent you a PM. 
I'd bet what you're seeing is people going home over the summer and making websites.
Python, I think, is the closest thing we have to being able to speak directly to the computer and just tell it what we want it to do. Huge community behind it that builds easy to implement libraries so you can implement thousands of lines of code with just a few key words. Can't wait to see what programming looks like in 5 years
yes! that's why for now we only submitted a method to arXiv (https://arxiv.org/pdf/1605.00998.pdf), not to a journal. maybe in the future though
A system meeting Windows 10 requirements is certainly powerful enough to run Python. The real question might be what the resource needs (compute, memory, storage, ...) of the particular application you want to run are. To make an analogy: disks can store data (systems can run Python), but to store 1Tb worth of data you need a disk of at least 1Tb (to run your_app.py the system needs at least xGb of ram) 
Sure. Did you need help with that? /r/learnpython can help you. 
This title is clickbait. No hacking is going on, or at least not in the way the title implies. The author is just cloning the Reddit repo, altering it, and running it locally. 
It all depends on what resources your python program requires.
_It all depends on_ _What resources your python_ _Program requires._ &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ^- ^impshum ------------------------------ ^^I'm ^^a ^^bot ^^made ^^by ^^/u/Eight1911. ^^I ^^detect ^^haiku.
Oh great. PhDs write horrible code. 
Good! Class is twice a week for 3 hours and have finished my 3rd class so far. Turned in my first homework assignment in yesterday. :)) Looking forward to class tomorrow
Doesn't add coloring like jq does (could easily, but I didn't) import sys import json try: print(json.dumps(json.loads(sys.stdin.read()), indent=4, separators=[",", ": "])) except ValueError: print("Unable to parse JSON") 
Not all heroes wear capes
Haven't seen all the talk yet but that seems on par for David Beazley.
I've never been a fan of "while", and definitely not a fan of "break" which seems like a clunky holdover from C. The best syntax I've seen for a loop is in Ada, as follows: loop do_something exit when condition_is_true do_something_else end loop This is a loop at its most generic. It can be a "while" loop or a "repeat..until" loop, simply by moving the "exit when" line up or down. In Python, the final "end loop" would be redundant, of course. "exit when" is clear and expressive, and keeps the exit clause on one line.
Looks like they've renamed it `breakpoint()`. I was confused reading your comment for a bit.
In version 1.2 sound mixing is now implemented so the game can now play multiple samples simultaneously, and is able to play sounds in a loop. This means it now properly plays the title screen music, and the amoeba and magic wall sounds are now also in the game. And I fixed a magic wall behavior bug as well. Saving and displaying high scores are left as an exercise for the reader
Have you tried pickle? It serializes in binary. I've had problems with it, though. Seems to get confused on complicated objects. Don't remember the specific problem I had, but it couldn't serialize psphere (a VMware API) objects.
Selenium for mobile? I'd be interested in helping with this perhaps.
For the past few years everything has been called hacking. I hacked my cabinets by painting them. I hacked my phone by installing boost for reddit. I hacked my goats by petting them. I hacked my hack by hacking the hack hack hack hack hack. 
Thanks I will add that!
Look into Numpy - it can do everything you want for matrix math, and more.
&gt; hackers we're taking it back
Hi OP. This SO post should help you. :) https://stackoverflow.com/questions/25125178/how-to-scrape-tables-in-thousands-of-pdf-files
and beautiful giant hipster banner.
I'm on mobile so can't grab specifics, but it's quite active. We have consistent chatter across a number of channels and most questions have some sort of dialogue within a few minutes (note: I'm US based, so my experience is skewed toward those time zones).
Its pretty active. There are slow times like any other community. But here are some stats: Messages per month: 40,756 Daily active Users: 690 Daily active users Posting: 84 Weekly active Users: 1008 Weekly active users Posting: 263 Public Channels: 57
I could be wrong here but I don't think that fits what we need. We have a (big) schema that we've done a pyxb binding against, and we generate some python objects from those bindings - either constructing in pure python or by ingesting them off of a JMS. Then we later need to write those back to XML on the JMS. 
I wouldn't know where to start really
Or you know. Ill hang out with people who have decent social skills and actually are smart instead of acting smart. 
Check out [Real Python](https://realpython.com), if you're looking to learn the syntax and then move into web development. Note: I am the co-founder/author Real Python takes an experiential, learning by doing approach so you build interesting projects. Happy to provide a discount. Email us - info at realpython dot com. Cheers!
Wish I had your experience, I have a few ideas to implement ML but I work too slowly. If you like any of my ideas they're all yours
Care to share those ideas? My hands are also occasionally free.
nice bot : redditor for 16 hours. 
https://fosswire.com/post/2008/04/create-a-mirror-of-a-website-with-wget/ + cron gets you most of the way there.
Numpy is the tool for scientific computation, and can do a lot for you in regards to linear algebra. Ref: https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.inv.html
This is the incredible growth of *questions about* Python. Probably because so many "learn how to code" classes are in Python.
[MRW I git clone](https://media.giphy.com/media/QbumCX9HFFDQA/giphy-downsized-large.gif)
I was just confusing my self using the linalg.inv command but thanks:)
Well, if people are taking "learn how to code" classes they're new Python users, right?
As a subscriber of both /r/python and /r/netsec, this was the most disappointing switch-a-roo I have experienced.
It's time to crown Python as officially being the new Turbo Pascal. Cheap (free!), available to everyone, simple to learn, perfect to teach programming with yet actually useful for real-world business tasks. 
Another thing you can do is add `# TODO: Delete` to the snippet you use for pdb to make the linter complain
Bad bot
Thank you SconiGrower for voting on haikubot-1911. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
I guess that points to how weak the "number of people using it" metric really is. 
People who get through their second year Java course and then aspire to have their own startup over the summer, perhaps?
Don't knock print-based debugging. It's a simple tool that's useful for so many situations. But I get it. You need some more comprehensive debugging sometimes. When I face situations like that I just :w | sh and start up pdb. Tmux is nice, but I end up just opening tabs in my terminal emulator.
Awesome it gets really awesome when you add GUI's and start making programs that do what you want not what someone else thinks you want. 
Thank you. May I ask "cron"?
I wish ceazyflie had better documentation if you want to add your custom controllers.
Remember that a small start is always a shit load better then no start at all. Keep working at it you will get there. 
A scheduler daemon. From chronos; the Greek word for time. See https://en.wikipedia.org/wiki/Cron and your platform's documentation. 
**Cron** The software utility Cron is a time-based job scheduler in Unix-like computer operating systems. People who set up and maintain software environments use cron to schedule jobs (commands or shell scripts) to run periodically at fixed times, dates, or intervals. It typically automates system maintenance or administration—though its general-purpose nature makes it useful for things like downloading files from the Internet and downloading email at regular intervals. The origin of the name cron is from the Greek word for time, χρόνος (chronos). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
 I think numbers matter even with really novice programmers. For example, companies and open source feel the pressure to develop well documented and intuitive libraries in order to reach a wider audience. 
Counterpoint: it's slow and getting slower, and the GIL is so central to almost every distribution of Python that it will never parallelize well. I've used Python extensively for the past 3 years across a wide array of projects, it's a great tool right out the gate and even in perpetuity for many projects. But some of the basic design choices of the language mean it will never be the right choice for any application where cycles count. The addition of type hinting I think adds a lot of correctness guarantees that really give it legs on larger projects that it didn't have before, I'm excited to see what other features the community can push in to make it more effective and versatile. 
I mean basically every language anyone cares about is free, available to everyone and useful for real-world tasks. So the only thing listed there that isn't universal is that its easy. Which makes sense since Python prioritized easiness over a wide number of other factors such as performance.
I kinda want to build a little army of bots that down vote shitty clickbait titles like this. Especially ones that don't make any sense at all. 
that makes sense. thanks :) 
I agree with you on this, but I wanted to add that there currently are tools available that can help speed up Python code, such as Cython. Furthermore, Python can and should be considered as the Swiss army knife of programming languages; used in everything from web development to game development to even apps and science stuff, super easy to use and setup, but still limited by its performance 
You need to install it.
Chances are you want solve instead of inverse. Inverses are horribly inefficient.
I keep trying, and failing, to do proper logging. ```print``` just works so well.
Redditpost.downvote(*) perhaps? (Humor)
That's the point we using a linear solver and comparing it to the time and resources it takes to find the inverse of a matrix then perform the operation. 
It doesn't show up in pypi. Do you mind explaing how can i install it?
Uses the `requests` library: http://docs.python-requests.org/en/master/.
I would suggest using the requests module (pip install requests) Something like this would work: r = requests.post('http://somewebsite.com/post', data = {'key1':'value1'})
You gotta make sure the comparison is fair. There are many methods to solve a matrix depending on the organization of your data structure (e.g., sparse vs dense vs banded vs tridiagonal vs pentadiagonal). Comparing a C function to a Python one will probably make the C one faster regardless of the routine.
We are comparing it to the Thomas algorithm if you've ever heard of it.
&gt;I mean basically every language anyone cares about is free, Ironically the successor to Turbo Pascal, Delphi, will run you $1400. &gt;available to everyone At least until very recently it wasn't easy to do C# development on anything other than Windows. The same could be said about Swift and Macs. &gt;and useful for real-world tasks. There are learning languages such as [Scratch](https://en.wikipedia.org/wiki/Scratch_\(programming_language\)), but I'm not going to develop a spreadsheet with it. Python is the one language out there that really ticks all of the boxes. In regards to being available to everyone, running on a $35 Raspberry Pi is another strong factor. I doubt you can run Visual Studio or Eclipse on the Pi. In regards to being useful for real-world tasks, right now Python is a scripting language for my spreadsheet (LibreOffice Calc), a language available for writing functions in my database (PostgreSQL), the language for plugins for my version control system (Mercurial), for plugins for my ebook manager/reader (Calibre), plugins for my text editor (Kate). I can write plugins for my data mining suite (RapidMiner). There's a Python API for my accounting software (GnuCash). I can write plugins with Python for my documentation generator (Sphinx). I can use Python's Restructured Text to write blog posts and use Python to create plugins for the static blog generator (Nikola). I can write plugins for my full-text indexer (Recoll). Python is the language that binds all of the operations in the math tool I use, SageMath. I can write plugins for my video player, Kodi. I can use Python with my desktop (KDE)'s scripting system, Kross, to write scripts for my IM client and IRC client. Even my shell runs Python (via Xonsh)! This is just a partial list off the top of my head of the areas I can put Python to use (and most of the above tools were my tools of choice before I'd even learned Python). It's hard to think of a language that is free, cross-platform (for development as well as execution), very simple to learn (including free books and courses) and can be so practically useful, from the number of areas in which it has strong libraries to the number of places it's embedded. 
Do you have a sample code? The module name is listed there. I learned it back when it was called Logo something like 20 years ago and used BASIC. Haven't touched it since.
Python is growing very fast in the sciences, for doing simulations and modeling. When you're a Physicist or an Astronomer, and you need to create models or simulations in your research, you go with the program that is easiest to develop in. It's fine if your simulation takes an extra 2 hours to run, because it's likely that you saved more than 2 hours in development time. 
Didn't know the name, but yes. It's a standard tridiagonal method. Scipy... maybe it's numpy...implements it.
looks like the module name is "PythonTurtle" i was able to find it but when running: pip3 install pythonturtle it returned: Could not find a version that satisfies the requirement PythonTurtle (from versions: ) No matching distribution found for PythonTurtle 
https://docs.python.org/2/library/stringio.html you dont need an actual file to output to
Anyone use discord ? Slack's desktop UI is always inferior to me.
Idk if I agree with that. Python is high level but there are plenty of higher level and more declarative languages. I suppose it depends on what your definition of "speak directly to the computer is".
I am sure some do. But this slack and IRC are the only established python chat groups i know of. And at this point, with the # of users we have, migrating would be both difficult, and split the community. And we want to avoid that as we are trying to bring people together.
the value of community is not the # of people but the topics or ideas it generates.
I agree. The documentation is pretty sparse. Trial and error presents additional risks when you're talking about powered flight :)
I use emacs but its probably similar with tmux/vim. I have a keybinding that inserts a `import pdb; pdb.set_trace()`. Then I hit my keybinding to re-run tests which hits my breakpoint and then I jump to the buffer that is blocked on pdb and start debugging. If I run a test and it fails, I am about 5-8 keystrokes from being in a debugger at the point I want. On print based debugging... Please do not encourage print based debugging, you are missing out on a LOT, its ok if you're a ULTRA beginner. Sure pdb takes longer to learn than just print. But it has so much more power, after a little while figuring something out with pdb will be faster than print based "debugging" even for trivial things. The great thing is you can test your hypothesis about what will 'fix' something as well by rebinding a value and continuing execution. Just printing things will hamstring you. Anything to shorten your feedback loop is good! And real debuggers are a huge step in that direction.
&gt; Ironically the successor to Turbo Pascal, Delphi, will run you $1400. Doesn't really take away from the fact that basically all programming languages people care about are completely free. C, C++, Java, JavaScript, Haskell, OCaml, C#, Rust, Ruby etc. &gt; At least until very recently it wasn't easy to do C# development on anything other than Windows. The same could be said about Swift and Macs. &gt; until recently Plus you can compile Swift on windows to make windows binaries. &gt; Python is the one language out there that really ticks all of the boxes. In regards to being available to everyone, running on a $35 Raspberry Pi is another strong factor. I doubt you can run Visual Studio or Eclipse on the Pi. It really isn't the one language out there that ticks all the boxes, it shows some serious naivety to think that. Plenty of other languages would claim that they do that too, from JavaScript to Haskell. And uhh... you realize Visual Studio and Eclipse are IDEs right, not compilers or programming languages. So basically not really relevant. Hell if you want good performance on a raspberry pi Python is not going to be in the first dozen language choices. I can't personally talk specifically about every item on your list because plenty of the things you are interacting with I haven't found particularly useful to interact with. But everything you have listed there that I have also done or looked into or read about I can do in Haskell, and probably also in something like JavaScript or even Java. The downsides of Python you also seem to be glossing over pretty hard. Such as the complete lack of any static guarantees, thus making automatic refactoring or program analysis of any kind impossible in the general case. Not to mention its just downright the slowest language anyone ever uses (quite a bit behind JS for example). Also I have found its abstractions rather lacking, seeing as the only real generic interfaces you have are the ones that have been built in to the language like `__eq__` `__iter__` and friends, and its all pretty ad-hoc and arbitrary, true typeclasses and `(G)ADT`s are absolutely killer for code reuse and expressiveness, hence why Haskell projects tend to be far more concise and reusable than Python projects.
True that
yea, and we have had a great many ideas and collaborations in our slack. we have community projects that you can see on our github. we help a lot of new people and talk about pretty much any topic. That also has no effect whether we used slack or discord. But even then with the number of users we have, migrating would not be easy. and impossible without splitting the community in some way. 
I'd google how to install it. Packages don'r always have the same name as their import.
Actually, there was a good talk at PyCon about how there have been a bunch of under the hood optimizations that is making Python 3.6 (and later 3.7) significantly faster than previous versions. Beyond that, a lot of the heavy lifting is done with lower level languages for which Python provides a great wrapper for.
I sent a complaint to Udemy, not sure why there's been a sudden flood of these weird fake Medium articles. I actually had opted out of the affiliate program to avoid stuff like this, not a big fan of these affiliates. 
Browsing your comment history I'm quite certain you lack the skills to identify either.
thanks all
&lt;something that dumps unformatted json&gt; | python -m json.tool
&gt; Ironically the successor to Turbo Pascal, Delphi, Them fighting words. You have a closer option; [freepascal](https://www.freepascal.org/). [Lazarus-ide](http://www.lazarus-ide.org/) would be your delphi 7 replacement. All for free; without losing $ 1400.
I don't like your proposed `yield break` syntax because although in some ways, `yield`s do act a bit like breakpoints, breakpoints are pretty significantly different and it makes no sense to have a magic `yield` statement that works everywhere (inside and outside generators -- especially inside generators because it looks like a yield). However, I do agree that if we are doing this PEP it would be nice if it were some sort of statement or other syntactic feature so it can get "optimized" away like asserts, although for the most part you would just want to remove them from your code anyway so maybe it doesn't matter. `break point` is a little better than `yield break` in my opinion, since it is also invalid syntax and a little less contrived, maybe special characters like `?` could also be used in some way.
I don't like this PEP very much. I think in general it is better to assign breakpoints outside of the code itself, and the pdb thing really isn't that bad. Breakpoints don't need to be generalized like this.
I don't understand your point about interfaces. Python is duck-typed, you can define any interface you like. There is no way to define *syntax* for them, but at that point your complaint boils down to "Python isn't Lisp".
&gt;Not to mention its just downright the slowest language anyone ever uses (quite a bit behind JS for example). As long as it's fast enough for the intended use case ¯\\\_(ツ)\_/¯
Look at Sherlock here. Youre wrong though. Nice try genius. 
&gt; But some of the basic design choices of the language mean it will never be the right choice for any application where cycles count. Counterpoint: the fact that it has a full C API means that this almost never matters. Most common operations that need to be fast are either implemented as built-ins or can be expressed as linear algebra operations and passed down to numpy. Binary extensions also circumvent the GIL. I'm not saying it's *never* a problem. Just almost never.
I think you might have wanted to respond to the other guy. I was just quoting them.
"You're"
The key thing you CANNOT do is define new interfaces for built in types. Lets say you want some sort of `Enum` or perhaps an `Applicative` interface. So you implement `__ap__` or `__next__` on all your custom types, now you try to modify `int` or `list` to have these methods, and python tells you it won't let you. And even for just data types from other libraries even though it is technically possible it is really dirty and dangerous, as if someone else also defined `__next__` you are going to get bugs and bad behavior. All this stuff comes completely for free and with zero issues in Haskell, and it runs fast as shit. You just define `instance MyInterface SomeBuiltin` and it works. Plus I like that in Haskell all these interfaces and such are guaranteed (and erased, so they are fast as hell) at compile time. Sort of a side note, but I do really appreciate it.
I'm a bit suspicious about those "STL" projections in the second graph. If you are modelling "% of total questions", you know the upper bound is 100%, so you can't just apply lowess or any other trend-cycle-seas decomposition. Also, from that 100% some people are likely doing unrelated stuff (e.g. webdev) so the ceiling is waay lower. That's why in most cases, growth of a new dominant tech follows a sinusoidal function. Example: http://radar.oreilly.com/2007/11/its-not-exponential-its-sigmoi.html 
But I mean we can do better. Haskell is more concise, faster, less likely to have bugs, and 1000x easier to refactor, and also has much more flexible and powerful abstractions and makes it easy to define your own elegant abstractions. The downsides being market share and learning curve, which aren't negligible but they can be overcome, and the learning curve is blown out of proportion by the fact that everyone and their dog learns tons of imperative / OOP code when they are young, but few are taught FP, so its a big jump, but if FP was taught young then the reverse would be true.
Out of arguments now are we? 
The GIL was never a problem in Python. It's a design choice and not a BUG. You can, however, use C-based threading libraries or execute multiple interpreters if you really want concurrency. As for the slowness, you can change the bottleneck with a C/C++ code or compile using Cython or use PyPy (JIT advantage). NumPy is an example. NumPy does a lot of heavy calculations and it was never slow. If Python is slow, then it will never be popular among data scientists. Further reading: https://www.infoworld.com/article/2619428/python/van-rossum--python-is-not-too-slow.html 
They're not idiosyncrasies. They're ouright wrong semantics. JS was created and released very quickly and sadly those are now set in stone. Almost any language is better than JS. Another issue with JS is the current thinking about async programming as the one true way to write software. Which is ok if you're writing GUI or network apps with an event loop, but pretty awful in a lot of other cases, and results in unreadable, unmaintainable code and unpredictable execution flow. Then there's the fucktarded package management and habits. Then there's the fact several other languages are just inherently better for beginners, with richer stdlibs, sane semantics and oop constructs, and equally good REPLs to JS, like Ruby or python. JS as an intro language is mostly teaching people to code like idiots with horrible tools. Dijkstra is spinning in his grave.
Not by a long shot. But then I can't engage in an argument with someone who thinks that time has always existed, any more than I can get into an argument with someone who thinks that the Earth is flat. There's no argument being had, there's just one side that has some idea what it's talking about, and then there's your side.
Acting smart doesnt make you smart ya know? Proof: your last comment. Edit: protip: read the imaginary time concept by Stephen Hawking. 
Last time I checked Javascript was on top. So this statement also work that way??? I guess not, even professionals asks a lot if the libraries they were using are not properly documented or if there are better alternatives to a specific implementation. Google can't solve anything about Python, that's what StackOverflow was made for.
Oh, I've read it. I've just understood it as well.
Sure you did. 
At the end of the day I believe PyCharm is just using **pdb** as well, albeit with a very nice way of setting it up and visually assigning breakpoints. The debugging hierarchy of Python is basically **pdb** (+ possibly **strace**) &gt; **logging** &gt; **print** &gt; **prayer**.
&gt; As for the slowness, you can change the bottleneck with a C/C++ code Calling C/C++/Rust releases the GIL as well. You can run low level code without the GIL getting in your way.
Or because it's so difficult everyone has more questions?
First thing I thought when I looked at python was that it looked just like pseudocode, like someone had just written down the steps so that a human could read them easily.
Except Turbo Pascal was not free, it was a commercial closed source product, and it was locked very closely to one (closed, commercial) platform. Also a huge thing for python is that it is the scripting language you use to write extensions and plugins for almost everything (well, almost everything I encounter frequently). I do not think Turbo Pascal ever had that use-case going for it.
&gt; I mean basically every language anyone cares about is free LOL, in a world Matlab doesnt exist
&gt; basically every One exception doesn't make my point wrong.
Me too. I was actually looking for Livestream coders in Datascience. Couldnt find much though. Let me know if you find anything.
Hi feel free to also check out my blog post http://etlsh.com/2017/09/04/scraping-planet-python-and-getting-the-history-of-python-blogs-and-projects/
Really? Huh. I joined up for Discord finally to join the React group and I haven't been back since the first time I logged in because I found the Discord UI to be awful.
The metaclass trickery at approx 45 minutes was one of the funniest things I've seen in a while. And most scary ;)
SO has what you need :) https://stackoverflow.com/q/3142705/1215241 There are several packages on pypi which implement websocket support. It depends whether you need async support etc 
Do you only use Python externally? (i.e., aren't you modifying the C code?)
Not quite what you asked for but shift + enter would take you to the next line.
Languages are strongly related to their platform/ecosystem. Matlab is one example but there are also Swift and C#. Of course you can use them in every text editor but if you have to pay to access the official SDKs/other tools you can't say it's free. Python ecosystem is really cheap instead.
You might as well write python for your whiteboard/scribble pseudocode needs.
I mean there are paid editors and libraries and tools for Python. So therefore it's not a free language? Seems very stupid and wrong IMO. 
Excellent answer, thank you; the fabulous `dis` module to the rescue.
Is the project open-sourced somewhere? Would be cool to see the code!
Right now it's pretty much spaghetti code but I can trim it down and put it online if you want
Would be nice, I'm just intrested in the real-time stuff within python.
sure! 
I requested to join, got email link confirmation and when I try to use the link I get to "https://pythondev.slack.com" sign in page. I already have account on Slack for group: "ATBSPW" Do I need new 'account', new username and password for your group? I can't seem to join with Slack account I already have. Quite confusing
[Redacted] There are a lot of useless dependencies for notification sounds and tts which you can remove if you'd like. Praw is necessary though. Important note for the one above - You'll get an error. Just make a filters.py file and add this filtersb = ['sub1','sub2'] ttsfilter =('test1','test2') that defines your pre-defined sub list if you decide to enable it when you run the script. [Redacted] a MUCH more trimmed down version that stream comments. edit: if you run it, comment out all the mysql stuff too edit 2: I removed the links because I'm an idiot and put my API key in it. If you'd like to see the code let me know and i'll re-upload it without my api key
Hey wow thx a lot man, will take a look at it!
no problem!
This is the correct answer
&gt; and the GIL is so central to almost every distribution of Python that it will never parallelize well. People talking in that way about the GIL have no clue. I recommend a lecture from Raymond Hettinger on YT about concurrency. 
Python had different design goals and is offering a rich infrastructure. Your rant is without any substance. 
But you don't need them the way you need a Mac to program in Swift
There are thousands of things you can do. The easiest of which is probably to put a space between the word "debug" and the parentheses that call it. The point is, though, that you shouldn't have to; that the presence of a breakpoint is indicative of code that should never make it to production, and should be linted as such. If you have an odd situation where a breakpoint should make it to production (or a wrapper function around `debug()`, then that's a perfect candidate for locally disabling the lint.
While I agree that the slowness in CPython is there, in most scenarios it's either not a problem, or when it is, there are many solutions to it like PyPy/Cython. Your point about NumPy not being slow is also slightly misleading as that's all in C and possibly some Fortran.
The fact that almost all major universities are switching to python as their language of choice also helps growth for sure.
I'm interested, but what we've seen so far from 3.6 is a 10-50% decrease in speed from 2.7 for many workflows. So we need that much improvement just to get back on track with where python was 10 years ago - not promising. But frankly, it's okay. I don't expect a hammer to also drive nails. Not every programming language is the right choice for every situation. I'd much rather Python remain a simple, forgiving language that focuses on readability than it get bogged down in trying to do everything at once.
If you want to jump to after the ) just type )
&gt; It's a design choice and not a BUG I agree. If you're trying to imply I think the GIL is a bug, I'm not sure why, but I don't. &gt; If Python is slow, then it will never be popular among data scientists. In the data science field Python is competing with R, and doing so well now that it has a solid set of packages to rival those available in R. It is generally fast for data science applications because there are a lot of data science oriented packages which use C for the heavy lifting. For most developers, we don't want to write fast C just so we can have fast Python - we would just write the fast C and move on.
&gt; People talking in that way about the GIL have no clue. Okay
&gt; It's fine if your simulation takes an extra 2 hours to run, because it's likely that you saved more than 2 hours in development time. That's great! More power to them. But once again, this is an application where cycles don't really matter. On the other hand, I have friends who do physics modeling for chemical engineering and biology research who need to squeeze out every possible efficiency, because it's going onto a supercomputer and they only get a limited amount of time. Python doesn't work for their use case. Like I said, it's a good tool for many situations, but there are performance use cases where it isn't the right one.
&gt; the fact that it has a full C API means that this almost never matters. What you're really saying is "if cycles count, write C." I totally agree. I'm just not sure why, if my team and I are comfortable writing C and are going to have to do it for the majority of a project anyhow, we would then write Python on top of it. From what I've seen professionally, when faced with this particular conundrum, most teams/companies just choose a more performant language from the start. There are some definitely out there trying to solve Python performance, but for most people who just need to produce performant code, there are a ton of alternative tools.
Totally agree with all your points, well said.
In that case, you can write in pure Python and Cythonize it to get a fast C code. It will not be as fast as pure C but it is fast enough and saves you a lot of development time than tinkering with a low level language. I believe the problem is not with the Python language or the way it is implemented. If it doesn't satisfy your requirement then the best choice is to use the right tool for the job.
Yep it might be misleading. But the point that Python can be easily used with C/C++ doesn't limit its capabilities to just being an interpreted language. A lot of tools were created to help the Python community, let's use these. Python is not a perfect language. 
for community projects, thats correct. however, many users are working on their own projects and bringing in questions and contributions from their own experiences. so, ideas and collaboration aren't just limited to the community projects. there is also a shameless_plug channel to talk about your project. don't forget that there is always a large gap between group registration numbers and actual active participants. the numbers in the title are the total registrations to the group, regardless of activity.
Yeah except writing your entire project in C, assuming equivalent proficiency in both languages, will take about 20x longer.
Hi man! Share some of your ideas in PM :) 
Thank you very much! :) 
Good bot
I'm on the PyCharm team. We don't use PDB, we maintain a fork of the pydev debugger, and share most of our code with it. You can see the source here: https://github.com/JetBrains/intellij-community/tree/master/python/pydevSrcw
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [JetBrains/intellij-community/.../**pydevSrcw** (master → 2a17866)](https://github.com/JetBrains/intellij-community/tree/2a1786665813328712d6e8d4ebbd211a90a8f97c/python/pydevSrcw) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dmohkpe.)^.
Ahh, sorry about the mistake.
Whoops, that link comes back 404.
You don't need to install it - turtle is part of the Python std lib. So it won't show up on your PyCharm list either.
We still need a full stack engineer, but recently hired two front end engineers, so are postponing hiring a third person for now.
If we're already writing a project that is largely in C as a result of performance demands, all Python on top adds is context switching. That's not a net gain for dev time, it's a net loss. In the end though, people are generally just going to take the 80% solution - Java. Similar dev time to Python, similar performance to C, and much easier to hire for than devs who are proficient in C.
&gt; In that case, you can write in pure Python and Cythonize it to get a fast C code. You can, but you could also just choose a better tool for the task at the beginning. This is the "I have a hammer, everything must be a nail approach." &gt; it is fast enough and saves you a lot of development time than tinkering with a low level language. Lots of assumptions built into that, all of which are not likely to be true for "any application where cycles count."
Or you could use Go. Ease of coding is in the same ballpark as Python, performance is in the same ballpark as C. The *excellent* built-in support for concurrency and HTTP makes it very compelling for a lot of use cases.
&gt; Scraper that looks for remote DevOps jobs Which sources are you using?
I have used pdb many times. After that, I discovered [pudb](https://documen.tician.de/pudb/)
Ah a random 'w' appeared at the end of the link, should be: https://github.com/JetBrains/intellij-community/tree/master/python/pydevSrc
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [JetBrains/intellij-community/.../**pydevSrc** (master → 6eb47b4)](https://github.com/JetBrains/intellij-community/tree/6eb47b43dd0900b46902e59e81d3461df2a0b09d/python/pydevSrc) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dmojbhg.)^.
Here is a [draft PEP](https://github.com/haypo/misc/blob/master/python/pep_c_api.rst).
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [haypo/misc/.../**pep_c_api.rst** (master → ac96a6c)](https://github.com/haypo/misc/blob/ac96a6c6467009d727f66a65bd4a1d13b4fbe14a/python/pep_c_api.rst) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dmojll2.)^.
You're reading the documentation for the 1.0.0a rewrite but if you installed discord.py from pypi then the version you have is 0.16.11 (which seems to be the latest version available via pypi). You need to look at the [latest](https://discordpy.readthedocs.io/en/latest/index.html) documentation page instead. Alternatively, if you really want to continue developing using discord.py 1.0.0a+, you could install it manually from the rewrite branch at https://github.com/Rapptz/discord.py
Use numpy as others have said or see [Transpose list of lists](https://stackoverflow.com/questions/6473679/transpose-list-of-lists).
this is the code im trying to run: https://pastebin.com/CuvwcFf4 i get the error: cannot find reference "(anything after turtle like setup, circle)" in turtle.py screenshot: https://i.imgur.com/b4aT1Ed.png
 pip search pythonturtle returnes: PythonTurtle (0.1.2009.8.2.1) - A learning environment for Python suitable for beginners and children, inspired by Logo. but pip install turtlepython returned: Collecting pythonturtle Could not find a version that satisfies the requirement pythonturtle (from versions: ) No matching distribution found for pythonturtle 
What? The performance critical parts are inner loops, likely to be 5% of your code at the most. All the glue code around benefits from being python.
`DROP DATABASE reddit;`
Do you have a file in your local directory named 'turtle.py'? If so, that is masking the one in the std lib.
This is so great to hear! I got signed copy of Fluent Python and photo with Luciano for free at the PyCon 2017 O'Reilly booth (I was first in line!). I hadn't heard of the book beforehand but it looked like the best free book option that O'Reilly was offering and now you've motivated me to start reading it!
no i know that causes it not to work. btw updated image link : https://i.imgur.com/b4aT1Ed.png
This seem to be mostly stuff that was posted here recently; compare to https://www.reddit.com/r/Python/top/?sort=top&amp;t=week - is this newsletter just a batch of past news? Or does it add value on top of what reddit already provides (central location, curated, ranked, etc)?
&gt; The performance critical parts are inner loops And what if my entire program is performance critical? Most performance critical applications are trading off cost of dev time with costs saved at runtime. Real world example: my employer has &gt;$100MM of server hardware across the world, and that number is growing rapidly. A 1% increase in execution speed on our app servers can easily save us several hundred thousands dollars in future hardware acquisition costs just in the next 12 months. At that point, it really doesn't make sense to use Python and spend a ton of time trying to get the tool to run more optimally, instead we just use a better tool for the job - generally meaning Java around here.
And sacrificing security.
Hey so the newsletter is in no way a summary of reddit. I also run @importpython and @getpy twitter handles ... You can see on ongoing basis many of the articles appear there before even on Reddit. The python reddit community is super active and thus pretty much every Worthy article makes it to reddit before I send the newsletter ( which is weekly ). 
[The opinion that really counts](https://mail.python.org/pipermail/python-dev/2017-September/149232.html).
I still suspect name collision: import turtle print(dir(turtle)) print(turtle.__file__) 
Yes I ideas aren't limited to our own stuff. Those are something we use and need and the community is welcome to contribute to. And many have. But we talk to others about their stuff to and answer help and even just chat. Share articles. Videos. Learning material, and more. As for the gap, of course. It's the same with irc. Even the reactiflux community which was on slack and migrated to discord. They claim 20k users. Not a chance all 20k are active. If you find it skeptical or are reluctant for whatever reason then fine. You don't have to join. There's no reason to debate numbers of active can inactive or if we have ideas or not. Just try it. If you don't like it, don't participate. If you do, awesome.
Hmm very odd. I will let the others know and see if we can fix this. Thank you for letting me know. If you like, you can PM me your email and I will add you and make sure you get in. 
I concede I have no experience running python apps at that scale. If the savings from running Java indeed exceed the decrease in developer productivity, it does make sense to run a JVM language instead. Hopefully you are able to use Scala/Kotlin/Clojure, though. I find Java has the absolute worst developer experience of any modern language in popular use.
I am the Recruitment Manager at www.mercurytide.co.uk We are a digital media agency in Edinburgh. We code in Python and are always on the look out for talented coders of all levels. If you would like to work in an award winning firm in beautiful Edinburgh with an amazing work/life balance let me know. Perm contracts only and unfortunately we do not sponsor visas for non-EU workers....https://www.mercurytide.co.uk/about/careers/ 
Except its syntax makes me want to bleach my eyeballs
You need a new slack account for each group you join. You can use the same name and email, but simply having an account at `foo.slack.com` won't allow you to join `bar.slack.com`
&gt; If we're already writing a project that is largely in C as a result of performance demands, all Python on top adds is context switching. Obviously, adding a Python layer to an already existing project is a different proposition than if the high-level architecture was in Python from the start. Although I have worked in a project that did this, and if we had started from scratch we might have gone with Python from day 1. The context switching is actually less than you'd think. If you use boost::python, for example, you can actually manipulate Python objects directly from C++. You can pass Python `dict`instances to C++ functions for configuration parameters, etc. And yes, Python aside, why on Earth would you choose C over C++ in 2017? I'm sure you have your reasons but for anything that's not a library (where the simpler calling conventions might be an advantage), I don't see how C++ isn't superior in every way.
The provide a dev/SDK VirtualBox machine if you want to go in an hack the firmware(C) directly, but they also provide Python libraries for the client and direct control, which I'm using right now. * Client: https://github.com/bitcraze/crazyflie-clients-python * Communication Library: https://github.com/bitcraze/crazyflie-lib-python
HackerNews, SimplyHired, Reddit. I know that whoishiring.io already has a pretty good take on this functionality, but it never hurts to learn by imitating, plus there are additional features I'd like to try and add.
CKAN is using Pyramid's ancestor, Pylons, and is migrating towards Flask
&gt; Reddit Which sub? 
&gt; C# &gt; if you have to pay to access the official SDKs/other tools You don't.
Maybe this post iwould fit into /r/datasets too
Sounds like your python app is polling reddit frequently, dumping data into a database, and then your php app is going to be polling the database frequently. Why php instead of python (eg Flask?)? Why write to MySQL? Did you consider holding that recent history in ram? Can you avoid the double-poll by dispatching newly-discovered posts to each websocket client?
Don't I need Windows?
" This post demonstrated that Python has shown a surprising growth in the last five years " I disagree, it shows only the growth of interest in Python, not the growth of Python itself.
 - Parse the file system/MFT and generate an image that diagrams where a file's content is located in the volume. This is a nice visual way of showing fragmentation. - Process the PE files across a forensic image to identify load order hijacking vulnerabilities and exploits. Technique is well documented, though I'm not aware of many tools that identify this. - Answer the question: "can the given user account write to the given NTFS directory?" Sounds easy, but it's a little tricky. Relevant to many situations, including cleaning up after ransomware. 
Heh. Not quite sure yet. /r/devops and /r/sysadminjobs seem like good candidates atm.
Try https://github.com/Jbot29/intermediate-programming-projects
You're talking about async programming, package management and standard libraries none of which are no concerns for those learning the ropes of programming. But yes, if you attach a generator to Dijkstra's dead body you'd be able to supply a half of the world's energy demands.
Yah, if enough of the community does, then yes, that's how we got most things
I'm working on an assignment where I have to take an input x and find the xth prime. If anyone got some hints they'd be appreciated. (-.-)/ https://pastebin.com/nybWKCGg
Very interesting.... to look at from afar.
I'm not getting the invite email, am I missing something? Also doesn't look like the number on the website has changes from 8,492 from last night.
No. There is an alternative cross-platform implementation (Mono) which is sponsored by Microsoft, and a year ago Microsoft rolled out their own cross-platform implementation (.NET Core).
Hmm. Check spam folder? As for the number I'm not sure. We have had people join since yesterday. If you PM me your email I can check the invite status. Also, the name of the slack group is pythondev.slack.com so if you have an account there already just sign in
When I read "scraped" and "got 10 years of" I thought I was looking at every Python web scraper's worst nightmare. 
Whoops! Looks like I signed up previously, sorry about that.
No worries at all
Michael Kennedy uses it for talk python to me and his courses from what I understand.
Yes. Its sort of in between flask and django in terms of scope. We use it for our big production systems. Its really fantastic, and rock solid. Also, Michael Kennedy of "Talk Python to me" podcast fame, uses it in his courses I believe. 
Why not flask? Because I've never used flask before and I have a little bit experience in PHP. I know that's the wrong answer, but I just wanted to throw it together really quick. I'm going to learn flask here soon when I have more time. I have been interested in Flask. And no I haven't thought about storing results in RAM. I didn't even know you can use ram like a database anyways, but I feel like that would slow things down either way. I only have 8gb of RAM and my computer isnt the best as is, plus i'm moving to shared hosting because it's all I can afford right now and I can't store things in RAM on shared hosting(to my knowledge). As far as dispatching posts to a websocket client, I'm not sure. I'm new to Python and I'm not that great with PHP. This whole thing is just a small side thing I made as a hobby. I'm sure there are definitely better ways to make it. I just made it the one way I knew how.
Hope it isn't so bad :)
https://trypyramid.com/community-powered-by-pyramid.html
Where did you see the message. We have a security channel and we have new and experienced people in there. We don't limit who can be in what channel. We also have an #admin_help channel where you can talk to the admins and raise your concerns. So don't let one little message someone said make you not want to join. 
Heck yes. It's a wonderful framework. So many aspects (extensions, metadata decorators, traversal) are incredibly powerful. It has a slight learning curve at the start, but I think it's well worth it... Especially for projects (large or small) where you want maximum control over how things go together. My company uses it pretty much exclusively, and I couldn't be happier. I don't see Django having the flexibility we needed (sqlalchemy for instance), and Pyramid's extension system lets you cleanly isolate components in a large project in a way nothing else (flask Django etc) can. 
How up to date is this? I've seen built-with *X* pages for many frameworks and often see sites that I know have switched technologies.
this is the result: https://i.imgur.com/jibOQfx.png
I used to use Pyramid, and found it quite frustrating - overcomplicated in places, often underdocumented too. For my next project, I used Flask instead... ... after 2 years of Flask I'm hoping to go back to Pyramid. Flask has sone crazy ideas about globals and thread locals and contexts and special hacks to avoid circular imports, none of which were an issue in Pyramid, which just feels like a much cleaner and better-engineered framework. 
Didn't even know about /r/datasets - Thanks
**Here's a sneak peek of /r/datasets using the [top posts](https://np.reddit.com/r/datasets/top/?sort=top&amp;t=year) of the year!** \#1: [Uber is releasing detailed historical transit data to the public.](https://movement.uber.com/cities) | [13 comments](https://np.reddit.com/r/datasets/comments/5mumo4/uber_is_releasing_detailed_historical_transit/) \#2: [7,375 Donald Trump tweets in Excel and CSV](http://www.crowdbabble.com/blog/the-11-best-tweets-of-all-time-by-donald-trump/) | [36 comments](https://np.reddit.com/r/datasets/comments/5czkdz/7375_donald_trump_tweets_in_excel_and_csv/) \#3: [BuzzFeed publishes 40 years worth of federal payroll records (~30GB)](https://www.buzzfeed.com/jsvine/sharing-hundreds-of-millions-of-federal-payroll-records) | [11 comments](https://np.reddit.com/r/datasets/comments/6d4c29/buzzfeed_publishes_40_years_worth_of_federal/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
If the different design goal is "worse reusability and abstraction and code reuse" then sure. Plus I assume by "rich infrastructure" you just mean that it got popular so people made stuff for Python. Which does not retroactively make language flaws not flaws. 
Fair enough! 8GB of reddit posts is _massive_. I was assuming 1MB of recent history is sufficient for this purpose. In a pure list or dictionary. Do you _need_ any fancy database features that a python iterable doesn't give you?
I design molecular structures using a C++ library which has Python bindings automatically generated. This really speeds up my prototype development workflow (no compilation, fraction of the lines, flexibility, easier library incorporation) with barely a performance cost. Most of the time I can embarrassingly parallelize an application I piece together in Python and get enough computing to move from the computer to the wet lab. This is a huge deal when rapidly iterating over new design strategies and heuristics. If your project falls into the same boat (rapid experimental development for design with a computationally expensive evaluation/complex object hierarchy) I certainly recommend the model of a core C++ library which enforces typing/relations of objects and a Python binding wrapper as a polished, full featured API. I really think it is the future. We use Binder and pybind11.
Ain't we stating the obvious? To be fair even C or C++ may not be performant enough for many use cases. I know for a fact that in game development (especially on consoles) falling back to assembly isn't that uncommon, and often engineers go through the compiled code to optimize it. So again, ain't we stating the obvious when we say that a single tool isn't perfect for all use cases? Especially considering Python isn't even a compiled language.
The number is grabbed as a [daily job](https://github.com/pyslackers/website/blob/4096eb10d81bf4ae6f2908da335779b9eddc6689/config/settings/_base.py#L188), we had more granularity but it didn't seem necessary :)
No worries, it may not be for everyone :) Part of the perks of being in a community is to work together to improve it - so if you decide to stick around, please share back ideas.
Pascal is still cool. You can write Python modules with Free Pascal: http://wiki.freepascal.org/Developing_Python_Modules_with_Pascal also, subscribe to /r/pascal ;-)
ok, lobby is the default channel that everyone gets into. admins use that for notifications for entire group. #random is the primary hangout for general talk before splitting into specific channels 
ah. but that doesn't mean it's only for one class or group of people. It just means for those who are interested in security. as I said later in that line, simply `join if you are interested`. That's all it takes. I did not once say it was ONLY for those people. so if its an interesting topic, just like any other channel, just join it.
Or, you could use https://github.com/lorien/grab which is based on curl and is much faster than requests. You can also switch curl to a different "engine".
That shows turtle is importing from /usr/lib/python3.6, but your PyCharm interpreter is pointing to /usr/bin/python3.6. Not sure why these would be different.
well initially i decided to use mysql to store up to 100,000+ results or so. I ran my script for about 8-10 hours once and got over 100,000 submissions stored into mysql, just as a test to see how slow it would get and whatnot. The idea behind it was that if I could do that, I could probably store comments into 10 or so databases(unless I use a faster DB engine of course), so I can get the latest million or so comments. Then have another script to do some type of analysis on the comments like sentiment analysis in the last 24hrs. I only stuck with MySQL because it was there and it was super easy for me to say "well, if im already putting this into a DB, let me put it on a webpage real quick in PHP" since I already knew how. I wasn't initially planning on using AJAX to have it feed onto a page in real time. I only thought of adding that after the fact, just to see it work. I wasn't aware of any other way to do it tbh since I'm not very experienced. Also, I was thinking of coding out a video discovery site with categories/subcategories with a login system and everything, using videos scraped off reddit. I only feel comfortable making that in PHP just because I'm more experienced with it. I used to create wordpress plugins professionally IRL and I worked with that type of stuff a lot. I'm afraid if I immediately try and take on a project like that in Python, i'll skip an important security step or i'll be constantly confused and never get anywhere. That's why I'm taking baby steps with python in the mean time and doing what I know. I like both PHP and Python, even if PHP is on the decline. I still feel confident in my ability to make stuff in PHP.
for some reason the error still shows but the program works now. but after running it outputs Process finished with exit code 0 thank you for helping i don't know what fixed it, i tried multiple things but i appreciate you taking the time to help
I don't know why you were downvoted, but this is absolutely correct. Slack user accounts belong to the workspace (team) it was created with as opposed to a system like Discord where you have one Discord account that can be a member of many different servers.
&gt;sentiment analysis in the last 24hrs Then you totally need a semi-durable persistence layer, and mysql works fine. Carry on!
[Warehouse](https://github.com/pypa/warehouse), the new [PyPi](https://pypi.org/), use pyramid.
haha yeah that's where my gut took me as far as what I should do. As far as doing what you suggested, I would like to learn that stuff sooner or later. I'm slowly easing into python. I'm juggling other things in life too.
I honestly appreciate your feedback. You seem pretty cool. I'll message you if I ever need advice.
I am a part of this community. I do not know about others but I really enjoy this community. 
This has bugged me as well. Sometimes it is a lot more than a single ')' to type as well, it would be nice to have an advance button that just did all the right side autocomplete and move cursor to the right. Tab seems reasonable since you don't usually tab in python in the middle of something like that. Wonder if there is a suggestion on https://youtrack.jetbrains.com. 
You don't really need a mac to program on swift tho. Also regardless JavaScript checks off the same boxes that Python does. So neither of you can argue uniqueness. And if you are ok with a stronger learning curve Haskell checks off a bunch of new boxes such as performance, correctness, refactorability, conciseness, and powerful and extensible abstractions. Python is ok I guess. But it isn't anything special. 
Just so we're clear, "I have friends" isn't code for "I actually mean me." I work in enterprise SaaS. You advice seems interesting but not particularly applicable to my field.
How would you quantify the growth of Python itself?
You can use SQLalchemy with django 
Try this. (1 &lt; -1) == (3 &gt; 4) True False == False equals True edit: also I think people will be more receptive/helpful if you post to r/learnpython
As a PM, we really need customer lifetime average median value segment score by month by market share by provider. Please export excel thank you!! Feel free to reach out to touch base with any questions. EDIT: CAN I PLEASE get an update on this. Our marketing team needs it to present new conversion opp metrics to c-suite at off-site Friday pm. Has this been prioritized
1. Evaluation is left to right 2. Do your own homework
Ahh thanks so much, I get it now!
your welcome
Lol, no generics. Also, Rust.
Fluent Python is the one that really showed me just how deep the Python rabbit hole goes, taking my love for the language to an entirely new level. Now, on a related note – where does everyone stand on Essential Reference vs. Python in a Nutshell (of which a third edition has recently appeared). I'm looking to add one of them to my paper library, but seem to be stuck in an endless comparison loop (the PDFs are easy enough to find).
I've had a lot of luck with Pyramid. However, Reddit uses Django. Edit: Apparently Reddit only experimented with using Django.
Exactly, I can't think of many situations where you'd tab in the middle of a line. Using Xcode you just spam tab like a madman and your code more or less writes itself.
TRIGGERED
https://github.com/reddit/reddit/blob/master/r2/setup.py#L59
[removed]
good bot
Thank you smbkr for voting on GitHubPermalinkBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
You need to list your project dependencies or else your work is a lost cause. I would recommend PIP freeze and apt-get call for installing kafka at the very list.
My point was just that programming in one language/ecosystem can be cheaper than another
Huh, I wonder when that changed.
My site www.kvalifood.com runs pyramid with cassandra as a back end. Jquery and plain html as front end. Behind nginx cache. Runs really fast I think :-)
This is way too uninformed to be taken seriously. For example; remove the GIL and replace with smaller locks. Larry did that in like 2 days. It's what happens next that's an issue. And the zero risk of backwards incompatibility is crazy bullshit. Maybe the author is very knowledgeable about the subject matter but it doesn't come across in the PEP that way at all.
You *can*, but django is by default an opinionated framework whose extensions assume a lot about the underlying ORM, templating language, etc. Whereas pyramid is almost a meta-framework, which provides extension &amp; dispatch systems; and lets a bunch of different (overlapping) sub-ecosystems exist, centered around different template languages, ORMs, dispatch mechanisms, etc. Personally, I go with pyramid_sqlalchemy + pyramid_jinja2 + custom roll most of the rest; though there are a lot of more opinonated frameworks built on top of the pyramid base libraries, which may be easier for newcomers. 
I also encountered a similar pain with Django's globals. While pyramid's design initially seemed complex, once I got to know it, I came to respect how *clean* their single registry object (as well as their view decorators) make reasoning about code and testing it.
If they didn't make a major change there would have been no need for a new major version. 
You should be using the newer version. The changes were made because they improve the quality and expressiveness of the language.
i don't think so that version changes required syntax changes .. 
They never used Django. They've been using Pyramid for years. Before that it was web.py (or what became web.py), and before that it was (briefly) a Lisp application.
That's not what they were saying. They are saying that you should view a change in the major version number as a major change, which includes things like new syntax and breaks in backwards compatibility. The reason it was necessary was to flush away a couple of decades of accumulated bad design choices and other regrettable warts. I don't see why you find it necessary to use 2.x. Just leave it in the past where it belongs. 
That is really cool. How do you deal with key changes? I'm sure determining if something is minor or major may be a little difficult too.
Never said they had to be. Need, as well as geek, is a pretty common and generally vague term. It's not derogatory unless you want it to be. And is used pretty common in many related industries to IT. This is the first instance I've seen of anyone ever trying to get over the usage of the word nerd. I'm a nerd and damn proud of it lol. So the only person trying to get over is is the one debating it's usage. I haven't seen any others. As far as I see there's nothing to get over. 
good bot
You are the 7017^th person to call /u/GoodBot_BadBot a good bot! ^^^^/u/Good_GoodBot_BadBot ^^^^stopped ^^^^working. ^^^^Now ^^^^I'm ^^^^being ^^^^helpful.
[removed]
What syntax changes are you talking about? Other than adding new things, they didn't break existing syntax. If you mean print, you can use the new style print in py2 as well. If you're talking about the newly added features like type annotations and async await etc, well it's a newer version so they've added new things. That's how it works with everything. C++ 14 code won't work in c++98 compilers, perl 6 code won't load in perl 5 etc.. Edit: see reply below for other big changes but still nothing so big that I think it's hard to support both
You are absolutely right about leaving the old ones in the past. No doubt about it .. But i just wants to know the reasons or the major changes that should be accepted by me to start using the python 3.x 
Pylons, not Pyramid.
That's normal! Code 0 means 'Executed normally, no errors', while anything else signifies an error :)
You already were told the reasons: &gt;The reason it was necessary was to flush away a couple of decades of accumulated bad design choices and other regrettable warts. Python2 has existed for a very long time, and in this time some design choices were made. The effects of these decisions make it so python 2 no longer provides what is expected of it today. So it had to change. And it had to change so much, they bumped the version number and broke backwards compatibility.
&gt; Other than adding new things, they didn't break existing syntax That's not true. Raising/catching exceptions, using metaclasses, division operator, octal representation, backticks, string/bytes/unicode, dictionary iterating, items in `itertools` moved to builtins, raw_input/input, etc. PLENTY of syntax breakage. And I say that as a daily py3 user and aficionado. 
That's fair and I concede that. Still I feel like it's not that hard to support both versions unless you're specifically using py3 only features. 
Yeah! You should totally take credit for their success! /s
Yep, and the best part is the same user just flamed the course creator above. Guess the love died quickly.
Good bot. 
You are the 2208^th person to call /u/Good_Good_GB_BB a good bot! ^^^^And ^^^^now ^^^^I'm ^^^^being ^^^^anti-community.
Be careful making tools as a final year project. You've got to be careful that manages to tick the boxes academically -- your supervisor can keep you right.
and without consideration of backwards compatibility which can often do as much good as evil.
Wow, what a great judgement!
lolwhat
[Porting Python 2 Code to Python 3](https://docs.python.org/3/howto/pyporting.html) should help you.
Can you be a little more rude please
Thanks 
You can't improve the core of a language without breaking backwards compatibility. Luckily there are a lot of tools available to help people migrate.
Pyramid is probably the best python web framework ... lots of flexibility when it comes to data persistence, security, templates etc. However for reasons that I never understood is not 'main stream' ...
Why is there an image of some handsome winner next to a beautiful statue?
With the proposed change, "python3.7" and the current C API remain the default, so there is no reason why your application would behave differently. The whole change requires to opt-in this new mode, so you have to be prepared for issues. If you use the new C API, the main risk is to get compilation errors. I don't expect bad surprises at *runtime*. FYI I'm a CPython core developer for 7 years, I know well the C API, how C extensions use it, etc.
Been using it since 2011 on our internal site. It was a little rough starting up (a data guy) but it's been very solid after you understand how things are put together. It's been very clean for us, we haven't come across many of the frustration points of the other frameworks. We have four major apps and around 40 minor apps on a single code base. It was actually fun to go through the refactoring of the site (twice). I would love to go through another round - upgrading to current pyramid and python versions and internal coding clean ups. In my opinion, and this is still true today, the main selling point for myself was the ability to not work with an ORM layer. We work directly through the sqlalchemy library with pooling. When we initially rolled it out, the apps were sitting on top of 8 Oracle servers, now we are down to 3. It is unfortunate that pyramid doesn't have the vocal fan base, but I would expect that most enterprise level (hate this term) teams in the python web world choose it over the others. 
 def hello(a, b, c|) # pressing ctrl + shift + enter jumps to next line and finishes statement, but it doesn't work everywhere def hello(a, b, c): | 
We need a study that shows how many people, projects, enterprises are working with Python compared to other languages.
&gt;The downsides being market share and learning curve I.e. the two most important things to a scripting language's popularity and use. 
&gt;By Artisans, for Artisans Great framework, vomit inducing marketing 
I was making a counter point to demonstrate the value of Python which acts as a wrapper for C++ in engineering and design application development when cycles do matter.
Good bot
You are the 2215^th person to call /u/Good_Good_GB_BB a good bot! ^^^^And ^^^^now ^^^^I'm ^^^^being ^^^^anti-community.
I'm keeping a close eye on [APIstar](https://github.com/encode/apistar). Its new, so is missing some things, but is in rapid development, and it's just so very clean to use. It's the first time in years that I've gotten that "wow, that's just nice"-feeling from a web framework.
That's the github author. 
I was being facetious in reference to the rude comment below but thank you for the genuine answer dalore!
What about limits of search? Google blocks your request after you reach some limit.
Um, this would be Victor Stinner writing (and on a scratchpad at this point). He's a core dev and probably the most consistently focused on speed improvements. The GIL replacement section wasn't a serious proposal but an overview how it would become easier to remove / mitigate the GIL problem. GC and the C API always come up in every discussion of the GIL problem, so a short reference to how the PEP might change the GIL landscape is reasonable. Thanks for the blog post, the draft PEP, and everything you do for Python performance, Victor!
I used pyramid for a while. It works okay, but I found it rough around the edges. Documentation was generally spotty. Concepts were given vague names. It was difficult to do simple things like divide a configuration file into common and environment-specific files (we ended up duplicating everything). It was flexible in all the wrong ways. I was happy to be done with it, and move back to django, where I could spend my time thinking about the problems I was trying to solve.
This is against Google ToS. The reason no other library exists is because they *shouldn't exist at all.* If you want to use Google Search API you need to pay for credits. &gt; JSON/Atom Custom Search API provides 100 search queries per day for free. If you need more, you may sign up for billing in the API Console. Additional requests cost $5 per 1000 queries, up to 10k queries per day.
If you want to get a string's length, you have to do: len(myString) If you want to get a specific character from a string, you do: myString[i] Where i is the index of the character (Starting at 0).
Great i guess the "could not find reference..." Is a bug
Not sure how this question is even Python related, but other than that, yes, it is very well possible.
And it's been done, repeatedly, since the 1970s.
I know :) 
A cool thing about strings is that you can iterate over them (evaluate each character one at a time). This mean you can make a for-loop that grabs each character and then runs a piece of code, and grabs the next character. It would look something like this: `for character in myString: #Block of code`, where 'character' is the character you're working with. E: Alternatively, but not preferably, you can do what Befungle suggested; use `len(myString)` and get each character by its index. EE: If by any chance you need the index too, `for idx, character in enumerate(myString)` would be the way to go.
Ur a friendly little troll aren't ya
Totoally agree. Loving APIstar, but it is definitely not ready for prime time. I lurk on the github or submit issues when I find them. It is just great to have a redo. None of the baggage from some of the older frameworks.
Last I saw, Reddit's "baseplate" API layer was using Pyramid. That was months ago, it may have changed.
Woah. The most important thing to popularity is a synonym of popularity, no fucking way. But if you care about writing high quality, maintainable, production ready, performant and extensible code. Then it is perfectly reasonable (and in my experience he right choice) to make that trade off. 
What's happening with [PEP 523](https://www.python.org/dev/peps/pep-0523/) and [Pyjion](https://github.com/Microsoft/Pyjion)?
Now this gets much more difficult right now major vs minor is determined since I use a major scale against all notes meaning the best match is major, however if a relative minor is the first note I know the song revolves around the minor instead making it a minor key making the song minor. This is one thing however that is not perfect yet and the program very rarely gets wrong. Now if something changes key within the song it's debatable what will happen. Most of the time it says it's the first key however sometimes it gets confused and says it's the wrong key, when this happens I start chopping the song up and running only parts of it through the algorithm for the time being. I intend on beefing up the algorithm soon but have just been very busy with school and work.
&gt; often underdocumented too Please let us know when this happens. We want to make sure our documentation is comprehensive and includes all the relevant information.
&gt; How up to date is this? We keep it as up to date as possible, if you find that something is listed there that shouldn't be, please let us know in the issue tracker and we will follow up. It is self reported though. 
&gt; vomit inducing marketing Come help us change it then :-)
Mac OS needs python2 to run. You can't uninstall it. There's nothing wrong with having both versions; most of us do. Just type `python3` to start Python3. eg: python3 --version I'm not sure what you mean with "my computer is getting the files confused." but it seems you should learn about shebangs and executable files to point your computer to the correct version of python. --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
&gt; Documentation was generally spotty. What was spotty? Do you have examples of where we could do a better job? &gt; Concepts were given vague names. More information please, so we can try and fix this. &gt; It was difficult to do simple things like divide a configuration file into common and environment-specific files (we ended up duplicating everything). We recently switched from using PasteDeploy to a project called plaster. Plaster is a loader that allows you to write your own config file formats if you want to. We currently ship a PasteDeploy compatible plaster loader so you can continue to use ini files, but if you would prefer to write your own to load some settings from Mongo, others from a yaml, and yet others from a toml file you can do so easily. &gt; It was flexible in all the wrong ways. What ways specifically?
All of their new micro-services are either Thrift or Pyramid (for the HTTP part). They are slowly migrating away from the Pylons based project.
Thank you for the prompt response. For some context, my teacher gave a guide on how to set up python on Microsoft Visual Studio Code, and told us to write "python -m pip install pylint" in it. However, it doesn't work due to exceptions that include Python/2.7 in their identification. I assumed that that meant that the computer was getting confused about which files, as I had just installed python 3 on it, and what our teacher was instructing us to do required the right version. I know that you just told me to post on a seperate subreddit, but I would love to get an answer ASAP. I'm on version 10.12.5, if that's helpful. 
That's instructions for Windows. The problem it that on windows, the "python" command will launch python3, but on linux and mac that command is already used by python2, so you have to use the "python3" command. So just use "python3" every time your prof tells you to use "python". python3 -m pip install pylint Also, you probably have a "pip3" command that you can use instead of "python3 -m pip". So you can probably use this as the equivalent to the command from your professor: pip3 install pylint
Yes it is possible, and I'm actually working on an RPG development tool in Python right now. Not that I've gotten to implementing pathfinding and such yet, but they're on my plans. https://github.com/Diapolo10/RPGenie/blob/nightly/
I'm trying to build a game! Something like a cross between Pokemon battles and Hearthstone, if it makes any lick of sense... So far on the engine picking stage. Well, I tried Löve but I turned out not to be a fan of Lua. I'm thinking about using either PyGame or Pyglet (both with their pros and cons for me), or picking something else entirely. What's your opinion on them both?
I'm all good with him being a bad ass - I'm just saying the PEP isn't drafted well imo.
Well, certainly, I'll defer to you then. From my perspective, it read as very handwavy is all.
well i mean pathfinder the role playing game
I want to develop an app in python for it
Wow that needs some grammar fixing
Oh, my bad. Still, it's definitely possible. 
Isn't Pylons the latest incarnation of Pyramid?
Just did it, and it ran without error. Thank you so much! I can wrap my head around the logical side of the code, but when it comes to commands like these, I'm a bit hopeless. 
sweet.
Do you have an implementation of the Django poll app? Might make a nice comparison.
I would like to see something like Seaside for Python.
&gt; Then it is perfectly reasonable (and in my experience he right choice) to make that trade off Great, we'll keep using Python.
Most of the "research" methodology is flawed, I agree. 'Popular journalism' isn't popular because it's accurate, but because it's exciting... oh well.
I would say Python is excellent for this, actually. However, if you want to create a phone app, I am not sure if Python is the way to go or not.
Suffice it to say: "Not in the way the author did." This is an interesting article, but a misleading one, and relatively uninformative. 
well not an phone app.' like an application
Good luck. If your project gets big or performance starts to matter then you will need it. 
Get hung up on the GoF Design Patterns! The purpose of design patterns is to establish a language of common abstractions that is independent of programming language. Understanding their origins is crucial to understanding Design Patterns as a whole. You SHOULD NOT be reading about design patterns for the code they are implementing, except to use as extensible snippets. You SHOULD be reading about design patterns to understand the problems they are trying to solve, and why the well-tested solutions out there solve those problem. I highly recommend "Intro to Programming: Design Patterns" taught by Simon Allardice on Lynda.com if you have access or complete it within the trial period. You can follow it with the additional Design Patterns course, "Design Patterns in Python" (not sure who the teacher is) if you want to see how the patterns vary by language between Java and Python while getting the Python snippets spoon-fed to you for 15 popular design patterns.
We have a list of companies, organizations, websites, and applications that are [Powered by Pyramid](https://trypyramid.com/community-powered-by-pyramid.html) on the official Pyramid marketing website. To add your company, organization, application, or website to this list, submit a pull request to this project's repository, using [this issue as a template](https://github.com/Pylons/trypyramid.com/issues/162).
When performance matters I'll just use one of Python's linked languages like C, C++, Rust, etc. For a big project I'll use Java.
[PEP 552 itself](https://www.python.org/dev/peps/pep-0552/)
Nerd.
What use would a sub-interpreter have for python applications? The only thing I can think of is sandboxing, but actual process separation is a much better solution for that.
Python: The most important optimization you can make is in readability.
We tried "Start Small, Finish Big, Beer Me!" but that did not poll well amongst the Chief (Whatever) Officer focus group. "It doesn't suck" was taken by [BBEdit](http://www.barebones.com/). So we just settled on having 100% test and documentation coverage, a clean code base, performance, extensibility, configuration separate from code, and cookiecutters to generate new projects. We are, after all, writers of code and documentation, not marketing geniuses, in an open source software project supported 100% by volunteers.
&gt; For a big project I'll use Java. Well there are a million reasons to use Haskell over Java. It's basically just objective improvement over objective improvement. You are going to have to write about 1/10th as much code and it's all going to be 10x as generic and reusable. Java lacks massively in terms of expressiveness and in terms of ability to write generic and extensible abstractions. It's type system is simultaneously much weaker (side effects, null, lack of ADTs / GADTs / `.equals` and friends not checked at compile time) and much less flexible (can't freely pass around functions, no real parametric polymorphism or type inference). Plus Java isn't even particularly intuitive or easy to learn, so it's not like this is one of those "simplicity vs power" tradeoffs.
Not being able to monkey-patch builtin types is hardly a "design flaw". There is only a handful of languages in existence that allow this on *any* object, let alone something like `int`. I might as well call Haskell's design "flawed" because it's less extensible than Lisp. 
No. **Pylons the web framework** is in maintenance-only mode. **Pyramid** the web framework is the successor to Pylons the web framework. Finally a collection of projects is under the organization named **Pylons Project**. Read details at https://pylonsproject.org/about-pylons-project.html
It's not that I think they should allow monkey-patching builtin types, they shouldn't. It's just that in my opinion there really isn't a good replacement for typeclasses, if you want lots of code reuse and abstraction you kind of need them. By what metric would you say Haskell's design is less extensible than Lisp? Sure it prohibits things you can do in Lisp, such as very type unsafe and dirty things, but things like typeclasses and families and GADTs and so on (which don't exist in Lisp) make it absolutely up in the air on which languages is more extensible and expressive. And Haskell is much safer and less likely to have bugs, and runs a hell of a lot quicker.
I'm not sure what your point is other than you clearly have no trouble finding credit to give yourself. Describing yourself as an "artisan" is a pretty good way to make people roll their eyes at you. I think it's a ridiculous and inaccurate thing to say, nobody's forcing anyone to agree with me or change anything.
The nondescriptive title of the talk almost scared me off at first, but this is now my favorite talk of all time. A perfect combination of mind-blowing hacks and humor that culminates in a surprisingly elegant-to-use type- and trait-checking framework.
Except I trained with Java, so the simplicity Vs power argument doesn't matter in the slightest because Java has already won.
Thank you very much for explanation, didn't know about this
Thanks, now I understand :-)
I read their comment as being supportive, since they put "good" first.
That's quite a bizarre syntax. I can't make heads or tails of the example.
I don't know why you are conflating how much time it will take to learn it with simplicity. And in the long run the initial learning / training period will easily pay off. 
Thanks for the input! I will be writing a full report with the tool as well. I also have occasional check ins with the professor so no worries there. 
Interesting ideas! I'll have to research and explore these a bit tonight. Do you have any good sources on the second idea or is Google probably my best bet?
I accept that we are not marketing geniuses. Constructive suggestions for improvement are welcome. Can you help? I don't have vomit pooling at my feet after reading the overused marketing terms. I would call it not the best language choice. I just don't know what it *should* be. We don't spend much resources or efforts on marketing, and instead focus on things that matter to end users (which is in itself a marketing strategy).
Are you trying to get us to do your homework for you?
another happy customer here. 
Oh, I did. The attitude I tended to encounter at the time was basically "you should have spent longer reading the source", but I was a hobbyist trying to make rapid progress and the core developers and community members were using it for their day job and were used to digging around in the guts, so we had a difference of perspective over how detailed the docs should be and what level they should be aimed at, as well as different opinions over how much effort should be necessary for certain features. (e.g. Trying to support sessions during the period when the EU had banned unsolicited cookies) (In fact, the session support still seems a bit anaemic, looking at the docs. pyramid_beaker hasn't been updated in 4 years. Maybe look at that? Server side sessions are essential in 2017.)
Can you give any details beside the demo in the notebook? I'd be interested in having more infos about the framework (what does the code solve? how can I extend it?), the experience (why did you use theano, what's the story behind this, why not use a classical CFD solver), and even the general context (how does your signal filter works exactly?) ! Thanks :-)
I commented elsewhere, but I'll repeat here because the "flexible in all the wrong ways" struck a chord with me. One example was the sessions: I kept being told "you can plug in your own sessions", but really I just wanted a decent server-side implementation that worked without having to write it myself. sqlite, shelve, pickled files, whatever it takes, just don't make me write this basic functionality or have to install extra packages for key functionality. Another one was the auth; there was a versatile system based on authentication and authorization and "principals" and ACLs and 'groupfinders' and other abstract terms that meant nothing to me - I just wanted to support 3 states - logged out, logged in, and logged in as admin. But implementing that involved a lot of extra complexity, trying to understand how to get this generic and powerful system to resemble my very simple specification.
Good point, and I agree.
Thanks for mentioning APIstar it looks great but I get nervous about using something with out a lot of community support like Django. Too many times I have used the greatest thing since sliced bread and found it unsupported or not really used a lot and now we have projects written in a framework that is dead. However this looks very promising and I hope something like this (something more sensible than flask) takes off
Python has a built-in HTML parser, so I do have to wonder...
&gt; Overusing this library might lead to your IP being blocked by Google Search servers. Searches through Chrome or another browser might still work but this library will stop working. I recommend keeping a 15 seconds gap after each usage of this library. In most cases, much lower gaps or even continuous use of the library will still work but still this is something to be kept in mind. If you see a 'rate limit' or a 503 error, it's best to stop using the library and try back after some time (~1 minute). These statements don't exactly give me warm, fuzzy feelings...
We use it at NewCars.com. Currently is our go to solution for any new web application. 
Be nice, dude. We all have to start somewhere
&gt; Mush is a light weight type-based dependency injection framework aimed at enabling the easy testing and re-use of chunks of code that make up scripts. My first instinct was *this seems really over-engineered*, but my mind's starting to begin thinking of ways this would be useful.
This describes the python rogue-like support library libtcod: http://www.roguebasin.com/index.php?title=Complete_Roguelike_Tutorial,_using_python%2Blibtcod http://www.roguebasin.com/index.php?title=Roguelike_Tutorial,_using_python3%2Btdl 
bad bot
You're a dick, stop calling innocent bots bad. They don't know what they're doing, man.
good bot
You are the 2260^th person to call /u/Good_Good_GB_BB a good bot! ^^^^And ^^^^now ^^^^I'm ^^^^being ^^^^anti-community.
is that a random number, bot?
I'm not going to be much help, I'm afraid. It was three years ago now that I used it (professionally, for about a year). Recalling specifics would require a couple hours digging up old commits. I'm glad to hear its getting love.
It does look a bit weird even compared to Haskell lenses, but I feel this is mainly because Python doesn't have a native "compose" operator, so `.` is hacked to do that instead. The example takes a bit of guesswork to understand, mainly because it doesn't explain what `each_` or `[…]` mean. Here's my best guess: lens.each_()['scores'].each_().instance_(str).call_upper() This translates to: “for *each* element, for the value whose key is `'scores'`, for *each* element in that list, for each entry that is an *instance* of `str`, call the `.upper()` function”. The second example lens[2]['scores'].each_().set('a') should translate to: “for the 2nd element, for the value whose key is `'scores'`, for *each* element, set to `'a'`”.
English isn't his first language so perhaps that's where the disconnect is? I watched his [talk at PyCon 2017](https://www.youtube.com/watch?v=d65dCD3VH9Q) and while I barely understood the content (I'm a newbie) it was fascinating nonetheless.
I am not familiar with the Django poll app... what is it?
From the [draft PEP](https://www.reddit.com/r/Python/comments/6ymnvg/a_new_c_api_for_cpython/dmojl56/): &gt; Sadly, none is this project has been merged back into CPython... Pyjion is developed in the limited spare time of two Microsoft employees
`pyramid_beaker` is but one implementation of sessions for Pyramid, and it relies heavily on the `beaker` library. There have been no real changes to the session implementation/requirements in Pyramid in the last 4 years that would necessitate updating `pyramid_beaker`. At one point `beaker` was unmaintained and as such we didn't recommend using it at all. Writing your own session implementation for Pyramid is not that difficult and is well documented. Pyramid provides you all the tools necessary to build your session support however you'd like. We ship a default implementation that does cookie based storage, however there are a variety of other implementations (redis, beaker, and others) that store cookies server side. I would say that server side sessions are not essential in 2017, but I am open to hearing arguments why you think they are. When was "at the time"? 2+ years ago? Things have changed but not that much. I hope we have improved the docs since then, but I have a feeling that if you were unhappy then because of missing certain features, then it will still be very similar. Pyramid doesn't include the kitchen sink, because of that you will have to install other packages that you can build on top of or with.
&gt; install extra packages for key functionality. This is a feature though, not a bug. Pyramid ships with a session implementation that is cookie based, you can use it, or you may use for example `pyramid_redis_sessions` or `pyramid_beaker` or `pyramid_whatever`. As long as that package implements the session interface it can be plugged in and will just work with your existing code. &gt; Another one was the auth; there was a versatile system based on authentication and authorization and "principals" and ACLs and 'groupfinders' and other abstract terms that meant nothing to me - I just wanted to support 3 states - logged out, logged in, and logged in as admin. Pyramid's authentication system is incredibly flexible, but that flexibility comes at a price. Supporting just a logged in/logged out/logged in as admin is pretty simple. We are trying hard to remove the concept of a "principal", you can think of this as basically the "user". The groupfinder is what allows you to associate extra attributes to that "user", for example the fact that they are an administrator. You can then build ACL's on top of this. That's where the flexibility comes in. You can start out with "logged in/out/admin" and then move to "logged in and is authorized to edit this". We could potentially ship something like a `pyramid_simple_auth` that implemented just a logged in/logged out/admin type of state, but most of our users have needs that are much larger and require a lot more from the authentication/authorization system and they build their own.
No, the Pylons Web Framework is the predecessor to the Pyramid Web Framework. The Pylons Web Framework and Pyramid Web Framework are both developed by the Pylons Project.
rogue like?
oh I get it! thank you!
I made a thing - a Python module for truecolor terminals (iTerm, etc.) and uploaded it to PyPI (first time module writer/publisher). Comments welcome. * [Truecolor on PyPI](https://pypi.python.org/pypi/truecolor/1.0b2) * [Truecolor on Github](https://github.com/simplegadget512/Truecolor)
It depends?
I mean, he's not entirely wrong, guys. Researchers generally build prototypes, not maintainable systems.
I was really excited for some text-based RPG things... This is cool too though. 
I think people are going to need more to go on than this ...
/u/haypo5 - Just curious why these were macros in the first place. Is the performance hit of function calls vs. the current macros (with no other changes) significant at all?
[Writing your first Django app, part 1](https://docs.djangoproject.com/en/1.11/intro/tutorial01/) has been a core part of their docs/getting started tutorial for many versions now. In it, they implement a very basic polling app to demonstrate how apps within Django are scaffolded. Kind of an intro to Django's take on MVC.
I actually have no idea, but my first guesses might be that it could be useful for minimizing perceived startup time for things with live code reload, or else maybe gunicorn-like reverse proxy in-a-single-process kind of scenario
Lots. Even just survival analysis models aren't well supported.
I mainly did this because I had to create an Alfred workflow and it's a pain including external dependencies in the workflow (unless they are not simple). Now that I think back, it might have been possible to do so. Will try to do that for my next workflow. 
I was never good with using the built in HTML parser. Conversely, I find myself very skilled with regular expressions. But that's a good idea and I honestly didn't think about it. Maybe I should go ahead and try using it instead of the regex. 
Starting an upgrade path for a Django app, from Django 1.7 to Django 1.11
nvm I found it. https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path
In my experience, I have been blocked only once and that was when I was too careless and kept on doing requests one after another, even when I was getting a 503 error (I didn't realize it that time). I have then since been using the library normally for my Alfred workflow and haven't faced any such situation. 
My approach would be to choose something you want to do. Anything that seems fun, from making a game and releasing it to automating your garage door. And then learn on the go about how to do it. Explore different areas and do different shit until you find the shit that you like most. And keep reading technical books and articles that you find and interest you if your aim is to get a good cs background. 
The /r/learnpython is a better place for this kind of question.
Yes - if you have the skills - although effective communication is going to be one of them.
See https://www.reddit.com/r/Python/comments/6yom38/google_search_unofficial_api_for_python_with_no/dmpqz8t/?utm_content=permalink&amp;utm_medium=front&amp;utm_source=reddit&amp;utm_name=Python I will have to rephrase that paragraph. 😅
RESOLVED : While pasting the path i realized its installed in a different place, silly me!!
that draft seems wrong since frame eval is in 3.6 https://github.com/Microsoft/Pyjion/issues/209
threading. (though this solution potentially eats a lot of memory).
Yes, I have heard about it. Do you have an official link for it? I would like to read the complete document. I have been reading about it on various blogs. I think first of all I need to attach a T&amp;C to the library stating this fact. Anyone who is concerned about violating the Google ToS and not prepared to handle the consequences should not be using this library. https://benbernardblog.com/web-scraping-and-crawling-are-perfectly-legal-right/
I would suggest to you study how get better the structure from your projects.. So your structure will be easy to maintain and beyond of stay the beautiful and pythonic code. - Object oriented concepts ( classes, inheritance, polymorfism , abstraction ) .. - Some libraries from python builtin How you have the some knowledge in exact are ( math , statistics ) I suggest you get look in pandas and the data science area in python .. Is a great area with great growth in these times.. Can I alter your code and send some suggestions to improve them? Sending pull requests.. 
didnt know it existed. ill have to look into it.
I've been using since it first came out (as BFG) and since used it at many jobs now, as well as on my own consulting work. And I love it! It's absolutely the best as far as being a meta-framework you use to build a cleanly extensible framework of your own. It does have a bigger learning curve, but I don't think you can beat it for serious projects that are going to live a long time and grow in unexpected ways. And the ZCA (in there, under the hood) is a beautiful DI system. (FWIW, I also used, on commercial projects, CherryPy, TurboGears, Pylons, Django, and Plone, so I've compared to quite a few!)
https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags even if you are a god of regex, you shoud not use regex fot higher level languages, like html
Follow up on this issue can be found here. https://github.com/aviaryan/python-gsearch/issues/1
Thanks for that link. Really helpful. The idea behind using a regex here was that Google Search HTML was very organized (and regular). For a general use case, using a parser is a much better option. As I said earlier, I will try to rewrite the regex part using html.parser. 
https://github.com/Socialery/m-google with external dependancies, with API
Side note, just in case (and for future readers). There's so much confusion in the comments of some of the answers on that post. For example, one user wrote: &gt; One might think that python imports are getting more and more complicated with each new version. And another replied: &gt; @AXO and more to the point one wonders why something as simple and basic as this *has* to be so complicated. It isn't in many many other languages. They're missing the premise of the question: *the file could be anywhere on the system.* That's a very unusual stipulation. Most of the time, other code (should be / ought to be) "on the Python path" and can be easily imported using a syntax that is at least as easy as any other language: import package_name 
technically true but pointless.
It's also a great example of a modern web development stack with docker, docker-compose, basically 100% test coverage including the frontend, postgres/redis/rabbit, huge security focus and more. I learned a lot from reading the source code.
Not sure if you replied to the right person or not... as a core developer on Pyramid I am familiar with our quickstart tutorial and our wiki tutorial!
https://docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki/index.html and https://docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki2/index.html Are both great places to get started.
Ah, we have something similar: https://docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki2/index.html and https://docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki/index.html Where we show you how to create a wiki application within Pyramid using either URL dispatch or traversal.
Victor is French, English is a second language for him. I'm sure he'd appreciate it if you sent him thoughtful suggestions on how to improve his English in the document.
Here you go: https://github.com/locie/triflow
Thanks all for responding on this query.
I will provide an extra notebook with detailed step, but in short : Triflow is a general (not juste cfd) solver. It is composed by a simple pseudo mathematical langage translated via sympy and allow very fast writing of a system of pde equations. For example, an advection diffusion problem will be written ```python model = Model("k*dxxT - c * dxT", "U", ("k", "c")) ``` (for dtT = ...) The derivative will be transformed via finite difference scheme in order ton obtain a symbolic discretized system of ode, and the Jacobian of the system is computed in a symbolic way as well. The sympy system of equations obtained is translated via theano, so we have now an optimized C binary that take the vector T and the parameters c, k and return the temporal derivative and it's Jacobian. After that, some temporal solver are furnished, the default being a 6th order implicit Runge kunta one (named RODASPR, it's a Rosenbrock Wanner method) with varying time steps. I have to upload on pypi the last version with some fancy stuff : real time plotting in the notebook, persistent data for the simulation, nice repr of the different classes... For the signal filter, a basic one is using a moving mean of some size in order to smooth the discontinuities. It's the same as convolving a boxcar window on your data (a rectangular window). Applying a gaussian or a hamming window is more efficient and avoid to create high frequency artefacts after filtering. We smooth a bit the unknowns and avoid the numerical shock, it's a kind like introducing a numerical diffusion but only on the highest frequencies. EDIT: And by the way, I plan to extend this solver from 1D to ND in next months, and add the possibility to choose arbitrary finite difference scheme (upwind, centered with different orders) with uneven grid (with the Fornberg Algorithm). I have a prototype for a 2D solver, but I am at the end of my thesis, so it will have to wait the time I finish the manuscript!
Yes, that's right. The `format_scores` line is equivalent to this: def format_scores(data): result = {} for key, value in data.items(): if key == 'scores': new_value = [] for letter in value: if is_instance(maybe_letter, str): new_value.append(maybe_letter.upper()) else: new_value.append(maybe_letter) result[key] = new_value else: result[key] = value return result It's hard to make a good api for this stuff.
To highjack this thread, does this library have the ability to show summaries? For example if I search Australia, the summary is generally the wiki page &gt; Australia is a country and continent surrounded by the Indian and Pacific oceans...
You can run it on pretty much anything from rPi to Pentium 3. You cant run it on certain Arduino microcontrollers, so I heard.
What are you going to school for? 
Data recovery from file systems (NTFS, ext4 etc.)? check this fon an example: https://github.com/nneonneo/ntfsrecover/blob/master/ntfsrecover.py or a program for Android/iOS investigation? Maybe this is too big project for an exam, but check Andriller for Android: http://andriller.com/ maybe you already know this book: [Python Forensics of Chet Hosmer](https://doc.lagout.org/programmation/python/Python%20Forensics_%20A%20Workbench%20for%20Inventing%20and%20Sharing%20Digital%20Forensic%20Technology%20%5BHosmer%202014-06-19%5D.pdf) 
Please forgive my ignorance, but wouldn't multi-processing be a lot easier to use/understand, and use far less memory? (due to COW forking)
&gt; P.S. I came up with the idea for this PEP while awake Is that a reference to something? Is someone writing PEPs in their sleep?
But my point is that you aren't really correct. You don't have to pay for any of these languages (besides matlab) if you don't want to.
i expect a hammer to drive nails
&gt; This is a feature though, not a bug. Pyramid ships with a session implementation that is cookie based And which will break if you try and store more data than serialises into into 4K, right? That's a very opaque and low-level limitation to put into a feature that many users are going to need. 
I seriously hope they don't decide to use a crap hash function because "it doesn't matter, we're not using it as security": &gt; Security of the hash is not a concern, though we pass over red-flag hashes like MD5 to ease auditing of Python in controlled environments. &gt; &gt; ... Python will determine the validity of the pyc by hashing the source file and comparing the hash with the expected hash in the pyc. Key phrase is "determine the validity" - you are absolutely using a hash for security here. If you use a weak hash function, then someone could potentially distribute a malicious pyc with clean source.
&gt; I have a feeling that if you were unhappy then because of missing certain features, then it will still be very similar I think my frustration was more that the session support was basically: * "We provide cookies... but try to scare you off using them" * "We used to recommend you use beaker... but we now don't" * "There's Redis, if you fancy an extra dependency, and which isn't supported on Windows" * "Or you can write your own, which is obviously so easy that there are still only this couple of examples available" Turns out that I did manage to implement my own server-side session, but it took a while to iron the bugs out because the flow was not entirely obvious, and it's the most complex part of the application I wrote. Wrapping all the accesses, scheduling the cookie updates, it's all quite subtle. (Let's not talk about the configurator concept either, aka the sessionfactoryfactory...) Regarding pyramid_beaker, I appreciate that not being changed in years is not always a bad thing, but if it's basically finished, someone should change it to version 1.0. Something sat at version 0.8 for years tells me that either (a) it's abandoned, or (b) the author doesn't care about versioning. Neither are encouraging. Personally I think server-side sessions are essential purely because sessions are very useful for flash messages and other simple data to avoid unnecessary database hits, and you don't want to have obscure bugs when you hit that 4K limit. But I appreciate that Flask doesn't seem to offer a built-in server-side session either, so this isn't the hill I'm prepared to die upon.
You could have a look at [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/), it does to html parsing what Requests does to http calls - i.e. makes them trivial and very robusts with little effort and a sane API. It's also pure python and on pypi/pip ("bs4" if i remember correctly), and it's extremely mature with no real changes in API for years, so there is little overhead in terms of packaging. It's the tool of choice for 99% of my (arguably limited) parsing needs.
This is my experience as well. Over complicated, under featured, half documented with old documentation. It destroyed a friendship.
Thanks.I need to establish a long lived websocket connection and send data over it.
I’m stumped too. Considering the PEP doesn’t allow objects to be shared between interpreters, threads seem to be strictly more powerful. If objects can be shared, I do see this as a possible way to have actual multithreaded pure Python, replacing the monolithic GIL with local interpreter locks. (That might not be feasible)
Was the PEP even ready for any review? The article don't link to any PEP ...
5 Bucks says that google's gonna send you a nasty gram. ... &gt; Overusing this library might lead to your IP being blocked by Google Search servers. Called it. I've been there trying to make a clever music scraper that used google 'advanced' searches. 
Could be useful for running Python as an extension language for applications or games, as the parent application could start up multiple interpreters that run independently of each other.
Two things: - I cleaned up the README of [pysorter](https://github.com/chriscz/pysorter) for the upcoming *Hacktoberfest*. **pysorter** is a command line utility for organizing files and directories according to regex patterns. - I'm writing a tool to keep track of the lists I've been storing all over my machine. Trying to strike a balance between idealism and pragmatism. **NOTE** I'd really appreciate any feedback on the [pysorter project](https://github.com/chriscz/pysorter). Be it features, issues or other suggestions. 
So it's just displaced right? Can't you just subtract the position of your new origin from the position of your centroids? 
Thanks, this looks like a really useful tutorial for my students....
No, I don't think this library will support that. (Though it would be a cool thing to have)
I too had made a music lyrics scraper once. I remember batch tagging around 50 songs (a folder) in one go and I didn't have any issues with rate limits. Maybe this is something they added recently. 
Indeed. I've been looking for something like that to integrate into a few of my projects. Although it's not priority enough to do it myself. Maybe one day.
ok, do you mean that they may hire me, even if I don't have a degree, if they really need me?
ok, do you mean a degree? I do have good communication skills..
ok, so do you mean, that they offer me a job, even if I don't have a degree and I do have practical skills with good communication skills.
Sometimes setup scripts call another python interpreter via subprocess.call
I'm not going to school, I'm about to complete my graduation and looking for a job in Python as a data scientist.
[Python 3.6.2 documentation](https://docs.python.org/3/). Note that to the top right the `quick search` isn't very useful, but the `modules` and `index` links are invaluable.
Okey, i will try that. Is it one of the best websites to use as a reference guide for quick searching what functions do?
In future you'll probably get better answers if you state exactly what happened. &gt; but it did not work is about as much use as a wet fart in a thunderstorm :-)
Not sure if OP was aware, there's a well known library already made for this. https://flask-restful.readthedocs.io/en/latest/ Though it looks like he was more interested in advertising his sponsored course so he can make some money off of the lack of knowledge of his potential students.
My suggestion is to use [Pandas](http://pandas.pydata.org). Open the csv with pandas (pd.read_csv()), if necessary change the columns to numeric, and then save to excel (pd.to_excel()). You may not need the middle step; Pandas is reasonably good at identifying numeric columns by default, and you can explicitly define column types during import.
As it's the official Python site I should certainly hope so!!! E.g. to find out about HttpResponse() I'd click the `index` link, click on `H` and then `CTRL-F` (or whatever your browser uses) to find HttpResponse, click on the link and Bob's your uncle :-)
This belongs in r/learnpython, but I think I can help. The csv module pulls each row as a list of strings by default. Obviously this messes you up if you want numbers. I believe if you use something like: csv.reader(f, quoting=QUOTE_NONNUMERIC) I'm on phone so can't test, but that should modify it so that numbers are not quoted (turned into strings) and are instead handled as floats. 
I'm not sure I fully understand, but if you display the picture with matplotlib, the xy coordinates of your cursor are displayed in the window. This can be helpful for locating objects, bounding boxes etc. 
Thanks. Works great. That's what i was looking for. I think.
Well, in the section about stuff they left out of this proposal they mention go like channels. So if they implement those i see a nice future for my favorite pattern (csp) in python. Essentially they propose having subinterpreters for goroutine like functionality which combined with channels would make me a pretty happy camper.
Try making a website without JavaScript.
Oh my god, that's horrifying. I wonder if that still works with Python 3, or how much I'd have to learn to make it work.
I think the best way is to load the csv data using pandas or csvreader and use selenium to post your data to the required space.you can also use request.post()method to post the data.But i personally prefer selenium.
Flask restful is outdated at least to me, I prefer just vanilla flask
Thanks for acknowledging about the r/learnpython as I new on reddit. Yet I have raised the question in the same forum. I tried what you suggest &gt;csv.reader(f,quoting =csv.QUOTE_NONNUMERIC) but I got ValueError message: &gt;ValueError: could not convert string to float: 'Text'
**Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year!** \#1: [Python 201 Book is Free for 48 hours](https://np.reddit.com/r/learnpython/comments/5814lw/python_201_book_is_free_for_48_hours/) \#2: [90% Python in 90 minutes](https://np.reddit.com/r/learnpython/comments/661o5a/90_python_in_90_minutes/) \#3: [Python 101 Book FREE for 48 hours!](https://np.reddit.com/r/learnpython/comments/5bmaz0/python_101_book_free_for_48_hours/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
Thanks for suggesting about the Pandas modules. After using csv modules, I will definitely try this too.
Yet, here we are, discussing something. There's also /r/learnpython, irc channels and issue trackers for discussion. I've had people reach out to me by email with questions about my projects (not my favorite way as it's not public and I'm terrible at checking my email).
I'd agree with your point about this helping new comers if it was actually doing that. I appreciate your blog post, but neither that nor the course is for beginners At the start of your blog post, you imply that the article, as well as the course is for people who are in the "Python circle" and for those who know of Flask. Furthermore, later on, you write "If you want to dig deep or learn advanced technique, then I would suggest you take up the REST APIs with Flask and Python". Which means at the end of your blog post, these people can indeed look up docs, and free community-driven sources like StackOverflow to proceed. There's no shame in creating a course to share your knowledge for profit, but don't get so sour when someone points it out, haha
/r/learnpython It's not really that difficult, I have done this before several times. Just read a pandas example of read CSV and a selenium tutorial on filling forms. Adapt those examples to your need, merge them in a Jupyter notebook and it's done.
&gt;but yeah Python can be run on Android or ios I'm gonna have to disagree with you on this. I've spent countless hours figuring out how to do this. And really I've only come up with 2 options: -Deal with the headache that is pyqtdeploy, and honestly, it's not worth it. -Create a REST Flask server to do all the heavy lifting in Python and use a basic QML/Java app to GET from the server the info you want. But from what you're saying you want to do, I don't think either is very applicable. If you wanna talk more PM me, I've made a couple of apps from the second method I mentioned.
There's also flask-restless to make it even easier: https://flask-restless.readthedocs.io/en/stable/ But then OP wouldn't be able to sell his course :)
[EVE](http://python-eve.org/) all the way
What does restful provide? Serializer/deserializer tooling, simplified routing, documentation generator? Those are the only things I can think of that would be useful from a "RESTful" library. It's more useful in my experience to do those things yourself and have a little more flexibility.
flask-restful seems kind of dead or moribund. When their last 0.3.6 release [broke list arguments](https://github.com/flask-restful/flask-restful/issues/681), nothing has happened for three months. We had to pin our systems to the previous version, 2 years old. In the next major release we plan to move away from using it. 
Joined and left in a day, whole place is just a circle jerk of regulars.
Hmm, to be completely honest I have not used the csv module a whole lot, that just looked like a possible solution based on what I saw in the documentation. When I just need something to work, you can use openpyxl to iterate through rows and columns and change the data type on a one-by-one basis. It is ugly and probably slow, but it works and is very explicit. 
Wow this looks like a nice framework. Gunna try it out. Thanks for sharing!
Nice article! &gt; Keep in mind that the above code has severe restrictions and is not fit for real life use. For example, if you use this linked list implementation with larger example lists you’ll quickly hit recursion depth limits (CPython doesn’t optimize **tail recursion**) Besides that I just encountered none tail call recursions there... 😉 Whoever is interested in *functional programming* and *Python* should have a look at [Hy](http://docs.hylang.org/en/stable/) - very nice Clojure like language built upon the Python runtime. BTW: Hy offers [TCO](http://docs.hylang.org/en/stable/contrib/loop.html?highlight=loop)!
Lol, yup wrong person. Sorry just got the mobile app. Wasn't paying attention. I loved the tutorials btw. 
Give apistar a go
you're pretty dense
lol
What? You are about to complete your graduation but youre NOT going to school? Troll alert...
Full Stack developer to focus on GUI for our web based trading backtest application. All backtests are in python. https://info.cloudquant.com/2017/08/full-stack-ui-developer-chicago/
THE PONY HE COMES 😂😂. One of the most classic SO answers.
Cool! Going to try this out when I get back to my desk.
Rephrasing what I think you want: * you have identified camera pixel coordinates of the centroid of a shape in the camera-captured image * you want to transform these coordinates into the real-world coordinates of the centroid of an object sitting within the view area of the camera Is that right? If so, this is reversing the transform of the camera's perspective. There are three basic approaches: * approximated simply (it sounds like you've constrained the situation so the camera is fixed and perpendicular to a flat area), * compared brute-force against a large number of calibration samples * calculated according to a transform which accounts for the camera position, focal length, lens type, and any distortions of the optics If it's approximating simply, then a basic linear interpolation is fine. realworldX = (pixelX-pixelLeft) * realworldWidth / pixelAreaWidth + realworldLeft realworldY = (pixelY-pixelBottom) * realworldHeight / pixelAreaHeight + realworldBottom 
Why because I don't let one word control me or get offended by a commonly used everyday word that most people don't get offended by? Ok. Sure.
Kinda hard to determine that after not even one day. But ok thanks for trying.
Based on GDD Europe and the talks google has released, I think it will soon be possible to just render on a phone exactly what you want based on a trained AI. Ultimately, there might just be one AI on the phone that is trained to render various screens and trigger various protocols based on user inputs. Separately, programming being fun and visual, kind of like house builder from Sims 3, probably isn't too far off. But they've already automated a substantial part of the process. I don't really know what's worth knowing anymore, besides Google's specific framework for shipping PWA's and AMP's 
the flask connexion plugin all the way
bad bot
I'm not familiar with go channels and goroutines. Could you give a bit of a hint as to what these features do, and how in-process subinterpreters can help?
Don't you still have to write class A(B): def __init__(self, x): x = f(x) super().__init__(x) Or do you not have to call `__init__` explicitly?
Reference to [PEP 553](https://www.mail-archive.com/python-dev@python.org/msg96863.html)
Well, it is a draft.
I have a utility for that too.. looks something like rm -rf ~/Downloads
Hey, as for beginner first thing I would recommend is to get familiar with [pep8](https://www.python.org/dev/peps/pep-0008/) or use this as reference [google](https://google.github.io/styleguide/pyguide.html). There are lot of tools to help you with that such as [flake8](https://pypi.python.org/pypi/flake8). As of your code I would recommend to check out standard library [argparse](https://docs.python.org/3/library/argparse.html) module to handle command line arguments and also check context manager (with statement in standard library) to handle opening and closing files. For checking whether line starts with some character you could use [startswith](https://docs.python.org/3/library/stdtypes.html#str.startswith) method. For choosing random song from list you could use [choice](https://docs.python.org/3/library/random.html#random.choice) method from random module. You should also consider what if URL for some song will stop existing in future and returns 404 or similar error code. You should handle error cases and maybe retry for different song or raise an error or you could check all urls before starting an alarm... Or what if Videos.txt file is missing or not readable or empty? You could also make name of the file configurable? You could also check all requirements before starting an alarm. Like is firefox installed? Can I maybe use different browser to open url? For detecting operating system you can use [platform](https://docs.python.org/2/library/sys.html#platform) method from sys module. It is also a good idea to write some unit tests for your code, you can use [unittest](https://docs.python.org/3/library/unittest.html) standard library for that. Also when you are using some 3rd party libraries you should use requirements.txt file where you specify exact version of libraries that are required to run your script. You can generate such file using [pip freeze](https://pip.pypa.io/en/stable/reference/pip_freeze/) Python standard library provides lot of builtin functionality so it is great idea to get familiar with its modules. You should also consider using subreddit /r/learnpython for beginner questions about python as you can probably get more help there about that kind of stuff. For getting more familiar with python modules you can check out something like [PyMOTW](https://pymotw.com/3/).
good bot
You are the 2383^rd person to call /u/Good_Good_GB_BB a good bot! ^^^^And ^^^^now ^^^^I'm ^^^^being ^^^^anti-community.
Have you given any consideration to transitioning filteypes.py to plain text, maybe YAML? It might encourage a wider target audience.
enjoy )
I decided against flask-restful. It is outdated and really just unnecessary.
Nah, it's been there for a long time. I done the same thing when I first got handy with python, and ran into this as well before I knew about the API and just doing it the proper way.
Thank you so much, this is exactly what I was hoping for. I'll look into everything you said. I actually did try to add a connection test, and to play a local sound file if the URL is unavailable but I couldn't get it to work reliably. If I were to remake this now, I'd try to have the alarms as objects and store them in a file, so you don't have to set the alarm time every time and could also have multiple set
That's a good idea. In a previous release I did have a plain text format, but I wanted more flexibility so just made it Python. I'll add it as a potential feature. Thank you!
My downloads is often the only thing that needs serious organising; I thought others would relate -- hence the title.
If I recall correctly, it's a way of using classes to model resources, providing render functions, etc. It seems good when you start off, but honestly, I'd much prefer vanilla Flask
Nice. Hadn't heard of that one.
You could write your own.
Looks like (per others) I need to register separately for this one. Thank you for the answer
Hi! Another thing that you might want to do is get the command line arguments operations out of the **set_alarm** function. That way you can do these operations inside the **if __name__ == "__main__"** block and just pass the arguments to **set_alarm**. The idea is even though the program is meant to be used on the CLI, you might want to use it's main function inside another script and that would be hard to do in it's current state. Another thing, the regex is not the most efficient. I tested it and it requires 130+ steps for a simple operation like that. Think about a simpler regex. I would propose something like (&lt;(title)&gt;(.+)&lt;\/(\2)&gt;). All around it's not bad for a beginner. And also, think about maybe using cron jobs and how to adapt the program to using them.
Goroutines are golangs way of running lightweight threads that run concurrently. And channels are a way for these threads to send messages to eachother. So let's go for a simple example. Let's say i have a file with 10M lines that i want to run function X on and then insert into a database. I could read all these lines in order and process them on 1 thread. But since this can be done in paralell let's have a file reader that sends lines over a channel to a bunch of worker routines so we can process more than one line at a time. I'll try to write some pseudo python to illustrate, but i'm on mobile so i might screw it up: def process(line_channel): for line in line_channel: result = X(line) insert_in_db(result) If __name__=="__main__": line_chan = new_channel() #spin up 10 workers for x in range(10): spawn_routine(process(line_chan)) with open('filename') as f: for line in f: line_chan.send(line) 
Ah, thank you. That really helps. I suppose this could be easily built on linux with subprocesses, as `fork()` is very inexpensive, but on windows starting new processes is quite a resource investment - subinterpreters would help there, I suppose.
No, he means that your post was so short and vague that answering the question is difficult. There are so many factors to consider that without more detail it's impossible for anyone to say. It definitely doesn't show "good communication skills."
QUOTE_NONNUMERIC forces everything not in quotes to a float. If OP has fields that are text but not quoted it is going to barf trying to convert those entries. The proper solution is to either use Pandas or roll his own solution for converting certain columns while processing each row. Blindly slamming data from a csv into xlsx the way OP is doing is very rarely the right answer.
Sessions shouldn't be storing massive amounts of data in the first place. 4KB is a lot of data. That being said, as I mentioned there are multiple other session implementations you can use if you absolutely must store more than that in the session. For most web applications 4 kb is plenty.
well the url for the team is http://pythondev.slack.com but we mostly go by pyslackers on our site and twitter. If you have registered there before you can just use your existing login. If you havent, you can request access on the website linked in the OP. If you need help with anything just let me know.
I'm working on a course through edX. The course is *MITx: 6.00.1x Introduction to Computer Science and Programming Using Python*. It's free so that's nice. Python will be my first programming language if I can grasp it. Right now I'm struggling through while loops and for loops. It's starting to make sense, but it's still slow. Even so, I feel like if I can learn this it will go a long way toward helping me in the future.
There's also [flask restplus](https://flask-restplus.readthedocs.io/en/stable/\) which has Swagger
&gt; "We provide cookies... but try to scare you off using them" We used to scare people off using the implementation because it was just a signed cookie and you had to provide a secret key to it. This is no longer the case, and we even allow you to change out from using Pickle to JSON in case you are worried about leaking your signing key. I wrote a session implementation that allows you to very easily plug in different backend implementations as you wish: https://github.com/usingnamespace/pyramid_pluggable_session It's missing tests, and I personally don't use it anymore due to building single page applications where all state is kept client side and the API accepts only an authorization token for the user. It works though, and works well. It's in use on a couple of different large sites that are using it with a sqlalchemy SQL backed storage.
For more heavy things, there is Curl replacement completely redone in python - httpie https://pypi.python.org/pypi/httpie
[hug](https://github.com/timothycrosley/hug) is another good option.
Thanks for the clarification, I have mostly used pandas myself for this type of thing.
I am thinking about that 🤔 But it would be nice to find something that can save me time
Another option is to use `pip install tco` https://github.com/baruchel/tco Usage: @with_continuations() def factorial(n, k, self=None): return self(n-1, k*n) if n &gt; 1 else k
Is it not possible to serve a static blog under a flask route? Or does that not satisfy your requirements?
Pandas++++++ I learned my lessons the difficult way. Excel does some really, really weird shit sometimes when importing data. My favorite is when it decided to convert a bunch of datetime data into floats. Apparently the conversion for that is just a percentage of how far into the year that datetime occurs. 
`attrs` in the standard library... This would be a very welcome change. Edit: https://github.com/ericvsmith/dataclasses/issues/19 ""dataclasses" will to some extent look like a stripped down attrs." Something is better than nothing I guess...
Would be glad to see suggestions or comments. Thanks!
You could try optimize.fsolve(lambda x: function(a, b, c, x), x0)
There's also [potion](https://github.com/biosustain/potion)
I have wanted something like this.
I think this is a really good idea. We have a few BaseObject classes in our company that we use to extend every model we create, so we can avoid most of those methods.
sudo apt-get install python-wxgtk3.0 git -y git clone https://github.com/cool-RR/PythonTurtle.git cd PythonTurtle/src python pythonturtle.py I'm guessing I am using python3 Things might be funky. Your canberra-gtk-module is missing one thing. I was missing the -dev of the module. Look it in your package manager. Search for canberra. I believe I was missing this package libcanberra-gtk3-dev. After that I try again and it ran like it suppose to. 
thanks for the feedback. I am looking to get more into OOP concepts and various algorithms (recursions, abstractions etc.). Would you be able to suggest some good resources? Essentially I was looking for a book like [Eloquent JavaScript](http://eloquentjavascript.net/), but a little easier for beginners and for Python. Not sure if I want to get into data science though. Still thinking of security or something similar, but not sure what kind of expertise I will need etc. Feel free to send pull requests, would love suggestions on how to make my code better. 
[I was just writing about data structure options on my "Notable Python" reference last week](https://github.com/tukkek/notablepython/#structured-data) and it definitely felt like something *exactly like this* was missing since each and every option nowadays has several drawbacks (either verbosity, immutability or being error-prone). All the tools and ideas were there but they never "clicked" into an amazing one-size-fits-all solution (which Python has so many excellent examples of)! This would be a great addition to the language itself!
Flask-RESTful used to provide serialization/deserialization, but now they recommend you use Marshmallow. I personally like(d) the "class definition" and "method definition" of REST functions. However, I have since learned you can also do that in vanilla flask (need to double check how).
If you find yourself looping in Python using an index, you're probably doing it wrong. Usually just iterating over the collection is the Pythonic solution. Sometimes you do need some form of an index counter, then ``enumerate`` can help. But very rarely you do a for loop using an index that you increment and then get items from a collection using that index. It's inefficient and verbose and unpythonic.
I'm guessing this is it: https://github.com/h2non/paco Thanks, it looks interesting.
Yes, it is. Sorry for not posting the link originally -- brainfart
You could do it through websockets, but that will likely require rearchitecting your entire app around that.
Hi ryanzane09, there was indeed a lot of discussion about the need (or not), to break compatibility. The decision was not taken lightly, and was discussed heavily. Unless someone knows of a summary somewhere, you might research the appropriate news groups etc in the years leading up to the start of work on Python 3 for more depth. Or maybe someone knows of a precis blog post somewhere to give you a start? You have already been given the short and sweet answer of "Use Python3 unless you really, really cannot".
You may also be interested in Acceptable which provides Flask API versioning, schema validation and test double generation (extremely useful for testing microservice integration). https://github.com/canonical-ols/acceptable Bare in mind it is a new library and might be a little rough around the edges.
Can you please tell me more, point me in a direction, show me some code?
/r/domyhomework Or, if you are stuck and want help try /r/learnpython, but you will be expected to show what you have done and describe where you are stuck. 
...this is like 5 months later and i'm not op but if you still have this, I'd be interested in it.
 for each do my homework for me goto fail
sure, this will get you started def convertSecsToMinutes: ... print result Just fill in the blanks 
Fuckin finally
I too don't like the lens syntax. I tried doing the correction with a list comprehension, but it isn't too readable either, (but *is* standard python): from pprint import pprint as pp pp(data) [{'name': 'Jane', 'scores': ['a', 'a', 'b', 'a']}, {'name': 'Richard', 'scores': ['c', None, 'd', 'c']}, {'name': 'Zoe', 'scores': ['f', 'f', None, 'f']}] corrected = [{key: ([(v.upper() if type(v) == str else v) for v in val] if key == 'scores' else val) for key, val in item.items()} for item in data] pp(corrected) [{'name': 'Jane', 'scores': ['A', 'A', 'B', 'A']}, {'name': 'Richard', 'scores': ['C', None, 'D', 'C']}, {'name': 'Zoe', 'scores': ['F', 'F', None, 'F']}] 
How does this cover pyenv? I see no python version api.
I buy a lot of programming related books but I hardly ever read them front to back. You learn programming by programming not by reading books. Buy books if there is no better reference material available on the subjects you want to learn.
I often find that the time I spend trying to understand and modify existing codebases for something as relatively simple as a blog app would have been better spent writing one that already does what I want.
There is also Falcon
How does this differs from dummy https://github.com/pohmelie/aiorequests/blob/master/aiorequests.py ?
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [pohmelie/aiorequests/.../**aiorequests.py** (master → 503eb3a)](https://github.com/pohmelie/aiorequests/blob/503eb3a79ee93ac34bf2781a85dde762b280bda9/aiorequests.py) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dmqxjkw.)^.
`pip install awscli` works. Like they mention in stack overflow be sure you have added anaconda to your PATH environment variable. You can also get a conda package for it from conda-forge, a community maintained collection of recipes, like this: `conda install -c conda-forge awscli `
https://docs.python.org/3/reference/import.html Python's rules for where it looks for imports are terribly complicated. The simplest thing to do is just run from the shared root directory so they both exist. Also add another \_\_init.py\_\_ file. 
Learning a language's core language set isn't that hard. Learning about the available libraries takes time and motivation. Then there is the knowledge of how to do what you want in a particular style or approach. For Python, I enjoyed https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/
Same as importing it from a .py file. Note that .pyc files are very specific to the OS, python version, architecture etc, so generally you can't just move them to another system. --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Thank you I'll do some research into all of that, I wasn't really sure what I was doing with the name == main I had just heard you were supposed to do it... What about the regex makes it so inefficient?
[class-based views](http://flask.pocoo.org/docs/0.12/views/) (Flask documentation)
I read over this PEP but I guess I just don't have enough experience in this domain to fully understand the rationale, is this supposed to fix the fact that `__del__`can be called multiple times?
fuck. yes.
Youre right, not sure why I thought it called init for you.
I tried to do it that way, but there was an error: ImportError: bad magic number in 'test': b'\x16\r\r\n' I really don't know what is going on
Thanks. I'm glad I'm not the only one that thinks it's complicated. 
I think python is really the long language to try to implement these category-theory-esque data structures. I love haskell and functional ideas but the syntax is just so awkward to do this kind of thing in python. 
You may have a look at [ocr.space](https://ocr.space/). Not affiliated with them but got good results on the free tier. As for the name, email and number parts I'd go with regex or common libraries like [python-phonenumbers](https://github.com/daviddrysdale/python-phonenumbers)
In general, you don't! A .pyc file represents a module that has already been compiled from its .py file, and can basically be ignored as just part of how Python works.
Either that .pyc file was not compiled for the OS, python version, or architecture you are using or it's corrupted. Where did you get this file? 
No, we're not into doing your Programming101 homework for you. If you can't code that in 5 minutes, drop the class and enroll in remedial math.
I'm working on problem set 3 (Robot simulation) of the MIT 6.0002 OpenCourseWare. Here is the link: https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0002-introduction-to-computational-thinking-and-data-science-fall-2016/assignments/. The problem asks me to test my code by running the ps3_test_f16.py file, but I can't get this file to run properly. I'm not sure how to fix this. Like you said, it could be that the .pyc file was not compiled for the OS, python version. I'm going to try using earlier version of python to see if it works 
You wouldn't want to use a source file or pdf here. There are a few databases you can access with SOAP, etc., or you could try to write a data skimmer for en.wiktionary.
We have [a pretty long list of learning resources in the wiki](https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_programming.3F). Try a few and see what resonates. For a brand new programmer I'd recommend codecademy. If you need help on a specific problem come see us in /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
json.dumps turns the list object into a string.
/r/learnpython is the right place for questions like this!
Well the misspelling in the title is pretty embarrassing; I've fixed it on my site.
The magic number claims it was compiled by python 3.5 (if it's not corrupted). 
I know a bunion named mb 
So their big thing was serialization? (Asking as someone trying to recreate Flask in Lua)
You can't put the `function()` call in before the `fsolve()` call because it would evaluate first and return the result. You have to pass it the function handle itself, which is just `fsolve`. Also `x` has to be the first argument of the function. import scipy.optimize as opt args = (a,b,c) x_roots, info, _ = opt.fsolve( function, x0, args ) 
Sorry for the format, i don't know how to work this 
APIStar is pretty cool. I've been playing with it a fair bit recently... https://github.com/encode/apistar
Had a C struct for ages already! https://docs.python.org/3/library/struct.html
In [base_task.py](https://github.com/moelius/async-task-processor/blob/0aa44b68b382425e1030718c24865fa91f9336eb/async_task_processor/primitives/base_task.py#L3), the end user should be given the option to use ProcessPoolExecutor. Even though you are using multiple threads, all ThreadPoolExecutor threads are bound to only use one core because of the GIL whereas ProcessPoolExecutor can utilize all CPU cores. 
Try googling "how to format code reddit".
I did
Did you attempt to read the information it provided you and use it? Code starts with four spaces, and needs a blank line on top and underneath. Code 
My apologies I kinda rushed through, will remove post and update in a few in the correct format 
Try using paste bin instead. No need to mess with reddit formatting. Just post the link. 
[First google result for "list of english words"](https://github.com/dwyl/english-words).
I use Anaconda with Python 3.6. I tried to make a Python 3.5 environment to run the test file, but it still gave the bad magic number error. I'm going to download and install new anaconda python 3.5 and give it another try Edit: apparently the course was taught in python 3.5 so switching from 3.6 to 3.5 got it working. Thank you! 
Yes. I started a new project a year ago with Flask-RESTful, and they said they were deprecating their serialization logic in favor of Marshmallow. If you are recreating Flask in Lua (if you post/DM me a link, I can follow the project!), I do think serialization/deserialization is important. At least to some JSON format, to easily support some REST standards. I don't know that much about Lua scripting (outside of my wow addon days), so I don't know if there is a community standard for it. If there isn't, it seems like a good default behavior for your app to set.
A "hash table" is the generic name for what python calls a dictionary. If you only want to check if x is in y, then you need a "hash tree"; which python calls a set (sorta). These are only good for you if you know what sort of data you are looking for. In order to calculate a hash, you need a discrete object. For instance a word, a sentence, or a paragraph can be hashed and quickly found. IOW for your example it would be very easy to add every word in AiW to a set (python handles the hashing and lookup). Then you can very quickly check if some new word appears in AiW. However to use this for a series of x words is much harder, since you would have had to have the foresight to hash that same series of words. However I think you are well underestimating the power of modern computers. The simple python code if 'change places' in full_aiw_text: Basically brute forces this problem and will run in a couple milliseconds. --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
`dict` is a hash table in Python. A hash is simply a way of taking data (an object, a class, etc.) and reducing it down to a long integer. Instead of comparing 2 large objects, we can define a function that represents them in short form. Hashes are also very quick. If `hash(a) != hash(b)`, we can guarantee `a` and `b` are different, without checking every element. If `hash(a) == hash(b)`, there's a chance that `a` and `b` are the same.
You're trying to build a reverse index. If the dataset is small enough to fit entirely in memory (like AiWL would be), you just need to use something like NLTK to break the text into sentences, then build a dictionary of every word pointing to the sentences they appear on. from collections import defaultdict from nltk.tokenize import sent_tokenize, word_tokenize index = defaultdict(list) for sentence in sent_tokenize(text): for word in word_tokenize(sentence): index[word].append(sentence) You can store and load the entire dictionary using pickle, which would give you persistence. If the data is much bigger, then you'll need a proper search engine. 
Are you looking for /usr/share/dict/words or /usr/dict/words ?
**UPDATE - MAJOR UPDATE - V1.0.51** Adds skytorrents support, logging, new terminal UI, better code/project structuring and many, many more changes. Complete changelogs: https://github.com/kryptxy/torrench/blob/master/CHANGELOG.md https://github.com/kryptxy/ Update right away! **Note: Please download a fresh copy of [config.ini](https://github.com/kryptxy/torrench#configuration-instructions)**
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [kryptxy/torrench/.../**CHANGELOG.md** (master → 4c242d1)](https://github.com/kryptxy/torrench/blob/4c242d12a597aa241715e91ea2ffc26f6e8da62d/CHANGELOG.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dmrb30a.)^.
Read it expecting something amazing. Got nothing except vanilla flask which works but meh. Advertisement post.
Yeah with an intro to programming I don't understand why the educator should feel burdened with all the things a CS person will need to know later. As an engineer I've happily used programming to solve problems with no formal training and over time I've been interested enough to learn more of the details behind the magic. It should be expected that one will relearn various concepts and competing philosophies multiple times in a variety of contexts without the need to explain all the magic on day 1. If your goal is a deep understanding of computer science and you are fully committed to learning all things, then sure, there is no need for fun or approachability. If your goal is to be introduced to programming for the first time ever, why should it necessarily be the same language in which you might later compare sorting algorithms or construct linked lists or learn the different between functional and object oriented programming or whatever? I see it a lot like music theory. You learn enough in choir or band to make music, enough in an intro course to plunk out scales and simple chords on a piano, and then in Theory 1-3 you start learning why you were playing certain chord progression, why the western rules are what they are and how they evolved and you study the pieces and composers that you previously merely played. This allows you to play/sing better but also understand analysis, composition, conducting, etc on a deeper level. The technical content of the first song you sing in choir has no bearing on your ability to learn and understand its composition after years of training. It should be a fun, easy song.
The syntax of this is interesting. It's allowing the declaration of a variable without assignment, which IIRC was one of the reasons that an implementation of auto-incrementing enums was rejected. I haven't read the whole discussion but I wonder if that syntax will make it to the final implementation.
Fluent Python is a great book. I have also enjoyed "Effective Python" by Brett Slatkin. 
Just use python3 and pip3 instead of the usual python and pip. 
I have been experimenting with finding the best way to send a GET request Google search so that the chances of it being flagged is the minimum. As far as I see, if we don't set any extra query parameters in the request like `num` (for custom search results count) and randomly set browser-based User Agents, we can achieve a good performance. I did the same last time also (in that lyrics project) so maybe that's why I was never flagged. 
Do you mean these? * https://krzysztofzuraw.com/blog/2016/ports-and-adapters-in-python-part-one.html * https://krzysztofzuraw.com/blog/2016/ports-and-adapters-in-python-part-two.html * https://krzysztofzuraw.com/blog/2016/ports-and-adapters-in-python-part-three.html 
Thanks for your comment. Good idea.
I second this recommendation. It's a really good book
I have as well. Just started learning kotlin and they use data classes quite nicely. This would definitely be sweet in good 'ol python.
What? The .pyc file is the bytecode the interpreter creates, these are saved locally as a cache. The .pyc files would be used first, and since all .py files are being translated to .pyc, technically you /only/ import from .pyc files.
Unfortunately, there isn't really much of a standard. I have a tiny utility serialization lib that just wraps other libraries into a .decode() and .encode(). By the way, the web framework - SUPER alpha - is at RyanSquared/Turbospoon. Unfortunately, I've no time to work on it recently, but if you find bugs I'll make time to fix them.
Lenses also work with data types that don't have a convenient comprehension syntax: from lenses import lens class Person: def __init__(self, name, scores): self.name = name self.scores = scores def __repr__(self): return f'Person({self.name!r}, {self.scores!r})' data = [ Person('Jane', ['a', 'a', 'b', 'a']), Person('Richard', ['c', None, 'd', 'c']), Person('Zoe', ['f', 'f', None, 'f']) ] format_scores = lens.each_().scores.each_().instance_(str).call_upper() cheat = lens[2].scores.each_().set('a') cheated = format_scores(cheat(data)) pprint(cheated) # [Person('Jane', ['A', 'A', 'B', 'A']), # Person('Richard', ['C', None, 'D', 'C']), # Person('Zoe', ['A', 'A', 'A', 'A'])]
That's an interesting project, but it could use more motivation and documentation. What are the use cases? You could always construct a regex from a giant "or" of all the words. In what cases is "a compact trie-structured regular expression" superior, and why? Is there a memory or performance difference in the compiled regexes? Why not just use a trie?
Have you tried py2app? https://py2app.readthedocs.io/en/latest/
I tried earlier, I was unable to figure out how to use it
This sounds awesome! It seems like theirs a package that allows you to interact with their API: http://imdbpy.sourceforge.net I'm very a very curious type of person, so I'd love to play around with it myself to see how to get data from IMDB. 
Hm.. I see the use cases, I just feel like if this was a core aspect of some task it would either belong in a database or in a real class. I've read through and they don't really address this, mostly just compare to namedtuple which feels flaky to me. Anyone have thoughts on that aspect? The real benefit here that I see is instance initialization- avoiding duplication when dealing with many input parameters. And that's always been a problem, but this feels like a solution to that that does a lot of other stuff too. I feel like it could just be a @autopopulate decorator or some function call in the first line of the `__init__` that would instantiate and fill those instance attributes.
Why would I want to use eve as opposed to graphql, they both seem to be solving the same problem but graphql is way more mature. (Legitimate question, not trying to bash eve)
I think you misunderstand what they're saying. You're both agreeing that you import from a pyc file but you don't necessarily need to be concerned by that implementation detail. Also you can bypass pyc files in Python by setting the sys bytecode flag.
Ive been looking at this, and i cant figure it out that easily. The instructions make sense logically, and i understand what i need to do, its just i cant figure it out. Can you help me with my project?
+u/compilebot python3 from bs4 import BeautifulSoup import requests def get_data_for_url(url): soup = BeautifulSoup(requests.get(url).text, "html.parser") title = soup.select_one('h1[itemprop="name"]').text.replace("\xa0", " ") star_score = float(soup.select_one('span[itemprop="ratingValue"]').text) rating_count = int(soup.select_one('span[itemprop="ratingCount"]').text) duration = soup.select_one('time[itemprop="duration"]').text.strip() return { "title" : title, "start_score" : star_score, "rating_count" : rating_count, "duration" : duration } print(get_data_for_url("http://www.imdb.com/title/tt5719700/")) Btw the css selectors I'm using are incredibily lazy, you could probably make the parsing 10x faster with real selectors (but it parses in .005s on my laptop).
So lenses is a short -form way to access this type of data. I guess it needs to be weighed; utility vs syntax. Rather like the re module - Very many use cases, unfortunate syntax.
good bot
Both **py2app** and **PyInstaller** will do this, but *how* to do it so that it works depends a lot on what's in your Python package.
Great tnx :)
About the regex, it's probably the lookahead and lookbehind. Don't get me wrong, this inefficiency might never be a problem. Just theoretically your regex takes a little more steps to find a match. :) 
Consult /r/learnpython, it has some good guides on the sidebar
Nice - when I switched to Python, these articles weren't around. I think I'm going to go a lot further, though. edit: still drinking my morning coffee, that sounds kinda douchey. What I mean is that I'm hoping to go deeper into the techniques, and talk more about the supporting patterns. 
I can give you a clues about what can be improved: - module structure: the naming of the main module is very unfortunate. `common` should clearly be renamed to something else. Imagine that the library would be used in a larger project: the `common` module will literally give no hint about what it contains. It is a good practice to have all the project sources inside a single module (the code from `namesilo.py` could be moved to `namesilo/__init__.py` and `common` to `namesilo/common`. - you should define some library specific exceptions and use them instead of working with instances of `Exception`. It will make integrating and using the library in larger projects easier. Other than that, it looks like a very nice library. Keep up the good work! 
My group received an assignment from a big company (which I will not name). What I'm trying to do this week is that I'm inserting data from .txt file to MySQL database through Python3. 
very nice! With Python 2.7 I only had to replace title = soup.select_one('h1[itemprop="name"]').text.replace(u"\xa0", u" ") 
The official Pi magazine has many Python examples. 
+1 for pudb, it's awesome
Sure, I can never think of a time when I _want_ to store 4kb in a session. But it's a leaky abstraction to have to worry about. Obviously this is just bikeshedding; the original issue I wanted to raise was that it felt like Pyramid was using 'flexibility' as an excuse for not providing a single usable session implementation in the box. It seems now that SignedCookieSessionFactory is considered up to the task, so maybe the word 'insecure' could be removed from the docs? If it's signed properly then it's secure enough for holding a user ID. And I'll look into your `pyramid_pluggable_session` as well.
What does your package offer that others (such as colorama) do not?
Word of caution: if your nested if statements start looking like a skill saw blade, you're doing something wrong.
graphql mature? Anyway - eve is a framework, graphql - is not. As for me, graphql is major step back to somewhere 2004-6 when you have one entry point and do all your requests trough one pipe but in fancy package. Im standing for separation of concerns, imho less messy at the end. i think ATM you need to choose wisely between this two.
&gt; I haven't read the whole discussion but I wonder if that syntax will make it to the final implementation. The syntax is already available since python 3.6.1: &gt;&gt;&gt; from typing import NamedTuple &gt;&gt;&gt; class Person(NamedTuple): ... name: str ... age: int ... &gt;&gt;&gt; alice = Person('alice', 23) &gt;&gt;&gt; alice Person(name='alice', age=23) The problem with `typing.NamedTuple` is that subclassing isn't working like you would expect it.
Before reinventing wheels why not try [Whoosh](https://whoosh.readthedocs.io/en/latest/)? The description says *Whoosh is a fast, featureful full-text indexing and searching library implemented in pure Python*. It is available from pypi.
&gt; Jason https://www.youtube.com/watch?v=xYG89rB6c5k
Thank you for advice, I'll make sure to improve these things. 
This is actually great! Just recently I wrote a program where I had a lot of such data classes and having to type out the constructor for each of them pained me a bit because I'm like *uuuuugggghhhh, yuuuup, my class has properties foobar and bazinga and bazoopers and so on and so on and so on and so on, and yes for everyone of these I want to take the value as argument of the constructor*. It was quite evident to me that I need something like what is introduced in this PEP. So much so that I was *considering* implementing a DSL of my own for declaring my classes with minimal amount of keyboard input that I would then automatically translate to Python classes. Thankfully now I won't have to do that :))
A similar library with support for more async backends https://github.com/ReactiveX/RxPY
&gt; (also, this is my first ever reddit post \o/) And you already forgot the link to your actual content.
I'd be okay with that. Well, with mypy we're more than half way there. 
At least with attrs you get "free" comparison, repr, and hash implementations, faux immutability (through properties), and constructor input validation. Even if you only use it for getting the free dunder methods I usually find it's worth defaulting to using attrs classes
TIL there is a 1:1 relationship between python REST frameworks and the javascript front ends that most frequently consume them.
If this PEP interests you, check out [Coconut](http://coconut-lang.org) (a superset of Python with functional additions), specifically the "data" keyword: http://coconut.readthedocs.io/en/master/DOCS.html#data.
(bordel de merde..) thanks!
Got it, thanks I changed quite a few things yesterday if you get a chance to take another look, added some error handling and better use of built in methods as suggested by the other comment on here
I’d love this in the std lib! This is a thorny issue though: &gt; Mutable default values &gt; One proposal was to automatically copy defaults, so that if a literal list [] was a default value, each instance would get a new list. There were undesirable side effects of this decision, so the final decision is to disallow the 3 known built-in mutable types: list, dict, and set. For a complete discussion of this and other options, see [11]. I think this decision has some big drawbacks to the intuitiveness, compared to setting defaults in __init__, or setting defaults in other languages like TypeScript. Perhaps a language-level feature could be added to smooth this over?
Thanks for sharing. Looks very useful. I am quite impressed that it does not have any (non-standard) dependencies and needs (relatively) few lines of codes.
This might be super damn useful for reporting status of our CI jobs.
Also it's a tuple, which isn't always desirable
Maybe, though slack already makes it super easy to get data into it with incoming webhooks
Yeah, so to have a built-in mutable as a default, you'll have to do something like: @dataclass class Foo: people: list = field(default_factory=list) So this is analogous to the mutable default function parameter "gotcha". It is surprising behavior, but I think it is probably the least surprising among all options that I've thought of.
Note that you can already achieve some of this with typing.NamedTuple already found in standard library.
You do realize that creating software is a job? If you could learn everything in half an hour there wouldn't be much reason to pay people for it. If you want to write an app you'll have to invest a bit of time and dedication and not give up at the first sign of difficulty. Otherwise you're just wasting everybody's time, including your own.
Kudos for thinking you can solve all your company's design problems signle handedly, don't get me wrong I think everyone needs to learn how to program and python is a great place to start and build some awesome skills. However, if your target is to build Enterprise ready software...you have a long way to go.i would concentrate on pitching ideas, if you want something to show get comfortable with some prototyping software, you can even do it in Excel. Also remind your bosses that if they want to deliver they need to invest, then make sure you get paid for it.
This sounds legit as long as your pyqt code is released under a gpl compatible license.
IANAL but I can't see why the GPL wouldn't work here. You're not modifying or redistributing PyQt5 at all. Even if you did your only requirement would be to present the modified or original PyQt5 source code on request. The GPL essentially says that people can request you provide the source code to GPL-licensed portions of software. And when they do request you need to provide it. It doesn't and can't apply to other non-GPL software or APIs.
Thanks for taking a look. The fact that the standard library includes [wave](https://docs.python.org/3/library/wave.html) and [aifc](https://docs.python.org/3/library/aifc.html) modules definitely helped with both making it general-purpose and keeping the code short.
That is not correct. GPL is a pervasive license. It "infects" everything it touches. If you use pyqt in a commercial product without paying, your software is now GPL and the source must be made available. If you make any changes to pyqt, you also have to release those changes, but if you don't make changes then you don't. Your code is still GPL regardless of what you did to pyqt 
Since you're converting to lossless graphic formats, would it be possible to convert those back to sound files, or is necessary information lost in the process?
Atuomatetheboringstuff.com
This is just a UX failure on reddit's part.
That's super vague. Can you be more specific? Do you have an example?
I think only a lawyer can really give a definitive answer to that, but as far as I understand you should be allowed to do this. If the software can only be used with your SaaS it is not really free, but there is [no requirement that it has to be free](https://www.gnu.org/licenses/gpl-faq.html#DoesTheGPLAllowMoney). The GPL can be used in a commercial context and if the app is Open Source then you should have no problems (if you also include the licence and so on). There is a requirement that you can not make someone [pay for the software if they get the software from another source](https://www.gnu.org/licenses/gpl-faq.html#DoesTheGPLAllowRequireFee), but in this case they are not paying for the use of the software, they are just paying to use the SaaS. Also see here for a short summary of the License: [TLDRLegal](https://tldrlegal.com/license/gnu-general-public-license-v3-\(gpl-3\)#summary) There is also PySide which is licensed under [LGPL](https://tldrlegal.com/license/gnu-lesser-general-public-license-v3-\(lgpl-3\)) which might be a better fit because it allows you to license your app with a different license.
I gave quite literally the best advice that could be given. The first tells him the general rule that applies to the specific problem without handing over the answer. The second recommends that OP develop the habit of persevering in the face of a challenge.
Yes, think `tail errors.log | slack-cli -d oncallchannel --pre`.
So why use this instead of a standard IRC client?
Yes, it's possible to convert back (and maybe I should implement that...). Depending on how the original transformation is scaled, you could lose some resolution. A quick google search shows that there are several tools for converting SVG graphics to wave files. Apparently people who like to make analog oscilloscope art use them: http://dalpix.com/blog/oscilloscope-drawing-everyone
I would ditch slack for irc any time of day, but I'm not the one making that decision.
No, I mean IRC client. Why use this instead of an IRC client connecting to Slack. https://get.slack.help/hc/en-us/articles/201727913-Connect-to-Slack-over-IRC-and-XMPP
I'm not following. You mean: first forward error messages to irc, then from irc to slack? This would add an unnecessary level of indirection.
This would be great for the work I do, with databases. Each Data Class instance could represent a row in a table. The problem with named tuples is that you have to provide all the attribute values upfront, which gets messy when the logic to generate those values is complex. Not so keen on the idea of using a decorator for this, though. Couldn't we just have a special kind of class?
You likely need to modify the User Agent in your request header. Check the UA in your desktop browser and then use that in your modified header.
&gt; your software is now GPL and the source must be made available Including the SaaS part in OP's case then? But isn't it a different product technically?
Sorry, I couldn't understand your comment at first... I'm pursuing Bachler of Computer Application in IT..
And also with the `attrs` module which I didn't know about until today after seeing it mentioned ITT.
Scheme is a dialect of scheme?
Very different use cases.
That's not true. If you keep PyQt in separate files, modules, and dll/so object files and only interface with them then ONLY the PyQt portion is GPL. If you start mixing other code into/with PyQt then you encounter the issue you mentioned. The GPL only applies to code UNDER the GPL. It's not infectious. Having GPL and non-GPL code side by side is super common. This has even been tested. Google had a dispute with Oracle over Java APIs and the US courts found that APIs are not copyrightable.
The other comments are right. Its decently easy to do. I do it a lot with csv reader and selenium. I can post an example if you're interested just need to strip out some identifying information from the code.
I’m not “giving up” asking for help is part of the learning process. 
Share with us when you are done.
You may also need to put in some wait times for all the javascript to load. I have done this before. PM me if your stuck. 
From the [GPL FAQ](https://www.gnu.org/licenses/gpl-faq.html#IfLibraryIsGPL): &gt;[Q:] If a library is released under the GPL (not the LGPL), does that mean that any software which uses it has to be under the GPL or a GPL-compatible license? &gt;[A:] Yes, because the program actually links to the library. As such, the terms of the GPL apply to the entire combination. The software modules that link with the library may be under various GPL compatible licenses, but the work as a whole must be licensed under the GPL. Some StackExchange questions on this: [[1]](https://softwareengineering.stackexchange.com/q/87446), [[2]](https://opensource.stackexchange.com/q/1640), [[3]](https://stackoverflow.com/q/999468). --- &gt; This has even been tested. Google had a dispute with Oracle over Java APIs and the US courts found that APIs are not copyrightable. An API doth not a program make.
Oh ok, I thought you just forgot to add the link(s) to your original post so I tried searching for them. ~~Seems a bit odd to create a post about articles that you haven't written yet but good luck!~~ EDIT: Thanks for the link! 
&gt; Including the SaaS part in OP's case then? But isn't it a different product technically? Yes and yes. It is a different product, but that's the whole point of GPL. There are some subtleties of GPL. You are allowed to use a GPL product (e.g., a compiler like G77, an image editor like GIMP) to produce another product that is not GPL. You are allowed to use GPL library as a dynamically linked library, but not as a statically linked library. PyQt does not offer a dynamic linking capability, so you are locked into full source code disclosure if your product is commercial and you choose not to pay. Riverbank, the developers of PyQt, offer an LGPL license option for PyQt. Then, you can just use it, assuming you do not modify the PyQt source (which more than likely you won't; it's quite robust). If you do, you need to make your PyQt mods available, so basically your bug fixes, which again you more than likely won't need to do.
Oh man! I forgot the link... https://io.made.com/blog/introducing-command-handler/
&gt; Having GPL and non-GPL code side by side is super common. This has even been tested. Google had a dispute with Oracle over Java APIs and the US courts found that APIs are not copyrightable. It is, but as a dynamically linked library. Not as a statically linked library and not in a commercial product that the license specifically requires you not do. Python does not support dynamically linked libraries that the user can change. If the user can swap out a library (e.g., a couple of DLLs) to upgrade the version of the library and you provide instructions, then it's not GPL. If you lock them out, it's GPL. This a not a general discussion about GPL. It's specifically about PyQt. There are multiple caveats in their licensing agreement giving you different options depending. For example, PyQt for open source is not GPL; it's LGPL. It's not infectious for BSD-3, which is why matplotlib is BSD-3 and not LGPL or GPL. Seriously though, talk to a lawyer or just use PySide...
I tried to post this yesterday and failed because I'm a cretin. A friendly Redditor pointed out my mistake, so here's my second attempt.
Haha. Posted the link again. Thanks for pointing out my stupid mistake. I thought the title just wasn't interesting :)
You can open terminal and run script there. Ie. python myfile.py
It works! Thank you very much.
Yeah that's fair
Valid question. It looks like slack-cli is more for piping data into slack and not as a chat replacement.
Whether you use static or dynamic linking [doesn't matter](https://www.gnu.org/licenses/gpl-faq.html#GPLStaticVsDynamic) according to GNU. &gt; [Q:] Does the GPL have different requirements for statically vs dynamically linked modules with a covered work? &gt; [A:] No. Linking a GPL covered work statically or dynamically with other modules is making a combined work based on the GPL covered work. Thus, the terms and conditions of the GNU General Public License cover the whole combination. --- &gt; For example, PyQt for open source is not GPL; it's LGPL. [PyQt **is** GPL licensed](https://riverbankcomputing.com/commercial/license-faq), it's Qt that's LGPL licensed. (BTW, one can also buy a commercial license for PyQt which would allow proprietary licensing.)
No, it's enough that the client-side is released as GPL. The server-side program is not distributed, and therefore you don't need to release the source for it. (It would be different if we were talking about **A**GPL) &gt;Riverbank, the developers of PyQt, offer an LGPL license option for PyQt. [This is false.](https://riverbankcomputing.com/commercial/license-faq) 
&gt; Yes and yes. It is a different product, but that's the whole point of GPL. But what if the server-side product is made by a different business entity? Say I want to make a client app for one of Google APIs?
Thanks a lot for this. Looking forward to reading more of your work.
No, unless I’m misunderstanding you, /u/BlindTreeFrog is correct: Slack explicitly provides support for connecting via an IRC client. Which means that if you use an IRC client like Irssi, a very comprehensive Slack CLI already exists. *Edit:* Never mind, /u/Corm’s explanation makes sense.
Now I see two polar opinions here... Please have a look at my reply to /u/billsil as well.
Ah, that actually clears things up.
You can also use this to try and convert it back into a .py: https://pypi.python.org/pypi/uncompyle6
Awesome, thanks for the link! 
&gt; The find function ***must not*** loop through the whole list to find the matching words. All of your solutions seem to loop through the whole list (`self.wordlist`). If I had to guess, I would say they wanted you to use a trie. https://en.wikipedia.org/wiki/Trie 
**Trie** In computer science, a trie, also called digital tree and sometimes radix tree or prefix tree (as they can be searched by prefixes), is a kind of search tree—an ordered tree data structure that is used to store a dynamic set or associative array where the keys are usually strings. Unlike a binary search tree, no node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated. All the descendants of a node have a common prefix of the string associated with that node, and the root is associated with the empty string. Values are not necessarily associated with every node. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
GPL basically says: "If you use my code in your code, and **if** you distribute the program, you **have to** distribute the combined source under GPL". Don't want to distribute your source? Easy. don't distribute the program. If you run it on a server, and let others push data to it to get output data, it doesn't count as distributing the program. This is where AGPL kicks in. It says: "Yeah, do everything GPL says, but let's forbid that workaround: **if** you run the program on a server and let other users communicate with it there, you **have to** distribute the combined source". --- Then we have people who don't want to infect others' programs, but simply want to keep their own code free. That's when LGPL says: "Feel free to use my code, but **if** you modify my code **and** distribute the resulting program, you **have to** distribute **my code and any modifications to it** under LGPL". Merely using a LGPL library doesn't force you to any license.
You could use selenium to open the page in a browser ([could use headless chrome too](https://intoli.com/blog/running-selenium-with-headless-chrome/)) and then save the page html to pass onto beautifulsoup. https://selenium-python.readthedocs.io/getting-started.html `driver.page_source` in the above example page gets the html. 
The IRC gateway is optional though and off by default, so you don't always even have that option. 
do you still have to loop through the whole list to make a trie? Another solution I had just makes a dictionary based on the length of the 'pattern' class WordComplete1: def __init__(self, pattern, wordList): self.pattern = pattern def displayCount(self): d = {} for i in word_list: if i[:len(self.pattern)] in d: d[i[:len(self.pattern)]].append(i) else: d[i[:len(self.pattern)]] = [i] if self.pattern in d: print(d[self.pattern]) else: print('None') emp1 = WordComplete1(pattern,word_list) import time start_time = time.time() emp1.displayCount() elapsed_time = time.time() - start_time print('Time:',elapsed_time)
&gt; do you still have to loop through the whole list to make a trie? It depends. &gt; word_list can be extremely long, design accordingly. What if you couldn't fit the whole word list into memory? If that wasn't a concern then yes, you could iterate over the whole word list to create the trie. That might not be the issue in this case though... &gt; The ***find function*** must not loop through the whole list to find the matching words. They don't want your "find" function to loop through the whole list each time it searches for a separate word. Creating the trie isn't the issue, it's the searching that makes your solutions inefficient. 
If you want to keep it console-based, you can checkout Python's curses module: https://docs.python.org/3/howto/curses.html
I agree I won't be able to do it on my own. There's 0 chance of that. My goal is to become involved in the process, and be able to see what's going on based on what they're putting in, and put things in myself. Until I'm a seasoned programmer, I'm going to play around with my ideas until they become what I want, and stop breaking on me! My company has a structured advancement plan, and offers free outside training, and pays for tuition for those who want to do it. Until I feel my programming work is becoming even a little bit productive - that's when I'm going to suggest new ideas. Thanks for letting me know! 
Thank you for the information! I tried out codecademy, and subscribed once I felt I enjoyed how it taught me things. I am now on course to do the following languages. HTML5 (Already completed it) CSS Java, and PYTHON!!!! Once I'm done that - I found some challenge sites. I think one is called codewars - where I'll be able to get problems to solve, and REALLY learn how to program instead of just being shown the basics. I'm not sure what I'll do after that 100% to get better aside from working on personal projects, but I think I'm going to join groups of programmers that enjoy solving issues together just so that I can get into the culture, and so I can see programming being applied live. If you have any other suggestions, please let me know! I'm 100% both feet in now. I finished HTML, and I found it easy. I want to be as informed as possible with my new hobby, and hopefully my new career skill!
Thank you for making it so clear. Now I see how GPL, AGPL, and LGPL work: * LGPL: you are free to use my code, but if you add modifications to my code, please open-source the modifications. You don't have to open-source your own product. * GPL: if you use my code and distribute it as part of your product, you have to open-source the _distributed_ part (such as client apps) of your product that contains my code. Parts of your product that you only pull data from (such as a server back-end) do not need to be open-sourced. * AGPL: you can't use my piece of code without open-sourcing both the client and the back-end code of your product, even if my code is only used in the client part.
This is cool. It could use some exception handling though. When using a destination that does not exist, a `ValueError` is raised with an informative message, but it is not caught so the program crashes with a stack trace instead of printing the error message and exiting gracefully.
All I had written about is for one program. Sorry for not making that clear. Executing and communicating with another program doesn't count as linking to it (which requires GPL licensing for the whole). If you go with server-side and client-side, they are two different programs and you have to go through the same logic for **both** programs. (e.g. you wouldn't have to release the client-side source simply because your server-side uses GPL/AGPL and you wouldn't have to release server-side code simply because your client-side uses GPL/AGPL) Another important point is that you don't have to do anything unless you distribute a program. This means some company could just take Linux or any other GPL/AGPL project, and modify and use it only internally without distributing neither source or binaries to anyone. --- In OP's case, PyQt5 is licensed with GPL. If the client-side program uses the GPL PyQt5, the client-side source has to be released to the any user of the client-side program under GPL as well. This doesn't bind the server-side. If he uses GPL code on the server-side, he still doesn't have to release source, since the server-side program isn't distributed to anyone. However, if he wants to use some AGPL code for the server-side program, he has to release the source to the server-side program under AGPL to anyone who talks to it. None of these bind the client-side.
Another issue is that the structure of your class doesn't seem to follow their instructions. &gt; Write a class called Autocomplete. You called your class WordComplete instead. &gt; This class must have a constructor that receives a list called word_list that contains all the known words in lowercase. Your constructor has two arguments instead of one, `pattern` is supposed to be supplied to the `find` method. &gt; The class must have a find function that receives a string called pattern and returns a list with all the possible words that start with the given pattern. If no word is found, then return null. Your class does not have a `find` method (I know they called it a function but it's a method since it's inside a class). You aren't returning a list, you are just printing it. Also, I would guess that they want you to return `None` since `null` isn't in Python. You might want to start with something like this to follow their instructions: class Autocomplete(object): # don't need (object) for Python 3 def __init__(self, word_list): pass def find(self, pattern): pass 
When building C extension modules you have to use the same compiler that was used to build Python. If you're using the Python from python.org, it was built with MSVC so you must use MSVC (and the same specific version) to build extension modules. It's a matter of ABI compatibility. If you don't want to install MSVC, just use a precompiled binary wheel. [Christoph Gohlke's site](http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted) would be one example.
A Trie is overkill. Just shard by, say, the first letter. 26 sub-dictionaries. Still O(N), but you're technically not searching the whole list. 
So if you look at the solution I posted in the comments, it's basically sharing by the length of the search length
b comme bourdet ? 
I wrapped the first try except block in a function def start_mail(self): I put that function in the __init__(self, username, password): and I also put that function in the handle(self): except Exception where it prints Restarting... Now when the socket error pops up the whole imaplib mail function is restarted too and the script continues to function. 
Excellent reply, I've just successfully installed using a wheel from the linked page. Thank you. (I had previously found that site but wasn't entirely sure what it was all about!)
Im using Windows and could not find an working curses port for it.
Isn't it O(1)? Finding the first sub dictionary is constant time (array with 26 values), then the lookup in that dict is amortized O(1)
Was going to point this out. It's worth noting that not only did they specifically ask for the find method, but also in general the code isn't very useful if you have the pattern as part of the constructor. You want to initialize the object only once since this is very slow (compared to the expected response time for auto-complete), then re-use it for all your searches. Another thing which isn't really necessary, but an incredibly easy performance boost (at least for Python 3) is to add caching to the find method: import functools @functools.lru_cache() def find(pattern): # method body
The second one is not a direct lookup though, you have to look at each and every key to check the prefixes. This is essentially what the problem description describes as a design constraint. &gt; The find function must not loop through the whole list to find the matching words. You could be pedantic and say that "technically" it's not the whole list, only a list of every single word starting with a particular letter but, by the same token, they could come back and say you are searching a particular letter's whole list and we told you not to. It just seems like the problem description is strongly hinting at a trie (ie. prefix-tree). 
Oh, right thanks
Yeah, that eventually clicked for me. 
You hit the nail on the head, great description. Caching is also a great idea that I didn't mention, thanks! 
I think they want you to use generators to iterate through the list one at a time. Using a loop retains the entire list submitted in memory. Generators only store the current element of the list in memory. 
so there's a number of channels I can't get a log for ... is there some kind of channel setting I may need to change?
Python is way better for open source projects as there's a _lot_ of stuff already out there written in Python. If there's a library you want to use, there's probably a Python binding for it. Ruby, not so much.
Thank you for the response ✌️
Your on a Python subreddit so your going to get some bias responses
I just want to know why Python is more suitable for those things I wrote above. 
[**r/Python/good_python_gui_framework**](https://www.reddit.com/r/Python/comments/5uvf65/good_python_gui_framework/) - Has a good outline of the most common GUI frameworks - I disagree with the description of Kivy, as it is actually great to work with for any type of application (*not just mobile/multi-touch*) &amp;nbsp; [**TkInter Tutorial**](https://www.youtube.com/playlist?list=PLGLfVvz_LVvSj3Nn_zeqWFnBusqvsjMqF) &amp;nbsp; [**Kivy Tutorial**](https://www.youtube.com/playlist?list=PLGLfVvz_LVvTAZ-OcNIXe05srJRXaJRd9) - This is my preffered GUI framework.&amp;nbsp; Here are some resources from [**a presentation**](https://github.com/enteleform-presentations/-2017-07-22-Kivy/blob/master/README.md) of mine. 
Wat? That is still looping through the entire list, i.e. an O(n) answer which is too slow. Also, if your supposed generator isn't storing the entire list in memory then is the data coming from disk?? That would be even slower.
Ah, I don't know anything about windows :\ I bet you could install curses under cygwin or [WSL](https://msdn.microsoft.com/en-us/commandline/wsl/about), but finding a different UI toolkit may be simpler.
Both are really good languages. I really like most of Ruby's syntax and it is quite OOP. Python really wins out with all the libraries that already exist. Python feels slightly hackish to me at times, but sometimes you need to refactor to make your code more " pythonic". If I could program in a vacuum and do it all, I'd pick Ruby. However, I mostly need to use existing libraries, so Python is my goto language.
[The code is unreadable](http://i.imgur.com/ATZ7Ada.png). Something on your site messed up or not configured correctly. 
Thank you. Many programmers note that Python is slow and its Django framework is less suitable than Ruby's Rails
you could install just a compiler, https://blogs.msdn.microsoft.com/vcblog/2016/03/31/announcing-the-official-release-of-the-visual-c-build-tools-2015/
Python. I looked into Ruby and its kind of fun to write in but it's been pigeon holed into Ruby on Rails and isn't widely used for much else. Python has a whole plethora of uses inside and outside of web development. 
You might want to check out Pyside, which is almost exactly the same as PyQt, but licensed under the LGPL, so your code doesn't have to be open source.
This exists in [functools](https://docs.python.org/3.6/library/functools.html) as a decorator: functools.partial I would look into it, this is an excellent use case and opportunity to learn about the functools library. 
I'm not versed in web programming. Programmer time is worth a little more than system time. Get the application to work first, then you can worry about speed.
First, check out /r/learnpython Second, that's called a list comprehension. It's basically an expression that builds a list. There are a lot of great articles out there on list comprehension. Your comprehension of list comprehensions is only a Google search away! Also be sure to look up dictionary comprehensions, and list comprehension's speedy cousin, generator expressions.
Being honest they both are good languages, but outside of web development I do not know anything else where you would use Ruby, speaking of webdev both languages are really good it lays in what you prefer because RoR likes to manage implicit logic and Django manages everything in explicit logic. In RoR I could not stand those implicit changes, for example a model is named singular, but table is plural named, there are also nice things like an autogenerator for all REST verbs if you need them all of course, to me those last two things clashes with Ruby's "philosophy" of being able to do anything your way forcing you doing things in a chosen but PROVEN way of doing. Instead in Django almost everything is left at your logic, that openness lets me breath without sweating, but that is my opinion.
Waiting for PySide2 to become more stable and be available on Pip. Pyside1 is only Qt4.
It is possible that the easiest way to do that is to build a tiny web server and use have browser repeatedly refresh a page with the top ten posts; if you have the scraping code already you would need a few dozen lines of new code to build a flask server. 
Thanks for that replay. Didn't knew about /r/lernpython, definitly worth a subscription!
There is a small example of a tkinter program that updates itself here: https://stackoverflow.com/questions/25753632/tkinter-how-to-use-after-method The update routine re-schedules itself to run using the `after` function.
Try "pyotherside" 
Open this up as a repo on github, you will get more response since it will be more familiar and therefore more accessible to people.
Nice, I might actually take a look at code and code something, find reading your coffee is better than those Mal API docs 😉
I'm happy to answer any question anyone may have.
Here's the official docs on list comprehensions: https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions The `%` is the [modulo operator](https://en.wikipedia.org/wiki/Modulo_operation) So the expression in your example seems to be building a list of even numbers. However, I don't understand why it is trying to iterate over `int` which is the name of the builtin integer type and not an iterable.
**Modulo operation** In computing, the modulo operation finds the remainder after division of one number by another (sometimes called modulus). Given two positive numbers, a (the dividend) and n (the divisor), a modulo n (abbreviated as a mod n) is the remainder of the Euclidean division of a by n. For example, the expression "5 mod 2" would evaluate to 1 because 5 divided by 2 leaves a quotient of 2 and a remainder of 1, while "9 mod 3" would evaluate to 0 because the division of 9 by 3 has a quotient of 3 and leaves a remainder of 0; there is nothing to subtract from 9 after multiplying 3 times 3. (Note that doing the division with a calculator will not show the result referred to here by this operation; the quotient will be expressed as a decimal fraction.) Although typically performed with a and n both being integers, many computing systems allow other types of numeric operands. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
This kind of question is better suited for /r/learnpython or even a Google search. I'm not sure if you're trying to get colors like that in the python interpreter directly but it's easy to tune color schemes in many IDEs. I've used many and currently work in Pycharm which can achieve what you're looking to accomplish. 
Looks like the word_list is alphabetical. How about a binary search for pattern* and then a while loop that adds words to the result list until the pattern no longer matches?
Username checks out
Here's an example using one, https://github.com/npezolano/Python-T9-implementation
Definitely the answer. There were four criteria in the task, and OP failed every. single. one. Doesn't matter about whether the lambda function or trie is what the intended answer is. From the employer's point of view: 1. Can this programmer do the work I've asked them to do? 2. Can the programmer do the work skillfully? Doesn't matter if you're skilled or not *if you won't do what you're asked to do.*
&gt;Important: Design Constraints: word_list can be extremely long, design accordingly I'd think they really want to see a Trie here. See, this is one thing that bugs me about problems like this. Either you've worked with a Trie or read about them or you haven't. Sure, you likely will in your first 5 years of employment, but maybe not. Maybe you will come up with one not knowing about them, maybe not. I only ran into seeing a trie in my 5th year, and it was a junior who implemented it. That very junior dev who worked with a trie in his first year would have no problem with this, but he's still junior as hell. Having problems like this where you expect one answer or you aren't happy with them isn't the best judge of skill. Solving this problem well really just shows that you know how to program and you know how to solve this problem well. One thing I appreciated about my interview for my current job is that he asked me to do something he might've asked me to do on the job, and third party libraries or whatever, didn't matter. It wasn't a generalized data structure problem. It was a real problem we might run into. It still shows that I wouldn't have much trouble with that specific problem but at least it was a *real* problem.
because it's encrypted. 
This covers a lot of stuff I am looking at doing so I have saved it to view later when I am not on mobile. Looking forward to checking it out!!
Looks like it's using HTML to encrypt. Anyone got a spare HTML key?
Ehrm, I just came here for comment karma. :'(
Here's how a quick and dirty Trie-like solution could look like FWIW, though it doesn't sort the returned output like they seem to want. class MarkedDict(dict): def __init__(self, *args, **kws): super().__init__(*args, **kws) self.mark = False class Trie(object): def __init__(self, words=None): self.root = MarkedDict() for word in words or []: self.insert(word) def insert(self, word): node = self.root for letter in word: node = node.setdefault(letter, MarkedDict()) node.mark = True # Mark end of word def _dfs(self, node, acc): if node.mark: yield acc for letter, suffixes in node.items(): yield from self._dfs(suffixes, acc + letter) def find(self, prefix): # Advance to node of last letter in prefix node = self.root for letter in prefix: try: node = node[letter] except KeyError: return yield from self._dfs(node, prefix) class Autocomplete(object): def __init__(self, word_list): self.trie = Trie(word_list) def find(self, pattern): return list(self.trie.find(pattern)) or None
Yes. Especially that unit of work post. Almost every example of ddd is presented in terms of Java or C#, which are fine languages but the examples and specifics are sometimes hard to translate. 
Since when can IRC Clients connect to Slack? That's cool.
thanks man, I was planning on trying to implement it when i got some time
lol i may get downvoted for this but class names arent super important to me, thanks for the **very** helpful criticism 
thansk for this
that uses a loop 
yeah that is a great idea, i didnt even know what it wasnt automatically cached
Couple years at least, I've used it from day 1 that I've used slack.
someone probably did `int = [1,2,3,4]`
Not just the class name, but the number of inputs, methods, and values to be returned. Also, not trying to be an ass, but it *doesn't matter* if the name is important to you or not; it was specifically requested. Anyways, you asked if there was something you could have changed, and I think that was it- format your answer the way it was requested to be formatted. 
It's what I use at work to connect to personal slack channels. Bit more subtle.
&gt; The problem with typing.NamedTuple is that subclassing isn't working like you would expect it. Like not being able to have `__new__` to have some of the arguments be optional, which is a nice hack for regular namedtuples. 
Why should I use this instead of `click`?
Slack is built by the guys at StackOverflow right? That's why it makes so much sense in the programmer's perspective.
me too
&gt; must not loop **through the whole list** This only loops through the number of matches +1. **Edit**: actually, though, you would have to do a binary search, loop *backwards* until there was no match, and then loop *forwards* until there’s not match (starting from the index the binary search turned up).
But it doesn't loop thought the *whole* list, just about log(n) of it. Wayyyyyy faster, especially for really long lists.
I like that you have both video and text as I don't like to sit through a one hour video when I can skim a text for the same information in under 2 minutes. Overall it looks good for total beginners, maybe more approachable than the official flask doc. I guess that would be the point. Please be original, don't make whatever example app you will build a blog or a todo... the world has seen enough todo and blog tutorial apps. :) 
Lower memory footprint though; so can scale further. Speed doesn't matter if you crash :)
I'm not very familiar with click, so please correct me if I say anything incorrect. linotype is much less restrictive with formatting. You can have an argument string that looks like this: sync [name [instance]] (--destination | --source) -- files... To create an argument string like that, you literally just input it as a single string. It automatically determines what the arguments are and applies ANSI terminal markup as shown in the example image in the README file. As far as I could find, click doesn't apply any ANSI markup. linotype doesn't have a concept of "options" or "commands." In this way it's much more generic than click in what you can do with it. The information you see under "Global Options" and the information you see under "Commands" in the example are the exact same data type. They're just formatted differently, and you can control exactly how that formatting works. Even the names of the sections and what goes in each of them is completely up to you. linotype also integrates with Sphinx, so you can define your help message in your code and then import some or all of it into your Sphinx documentation, removing the need for duplicate information. In the Sphinx documentation, you can replace or append to certain parts of the imported help message. Check out the "Usage" page and the "Examples" page in the documentation if you want to get a better idea of what it can do.
I'll keep that in mind. Blog App is mainly to introduce implementations to build some basic features around a user, however I would agree, I might change it a bit then.
I agree with others that the failure to follow the directions is a much bigger issue than the particular algorithm you chose. I also really appreciate others mentioning the trie solution. I happen to know databases pretty well, so my first thought was to create an in-memory sqlite db (sqlite3 is built into python). Create and populate a table for the word_list in the constructor and query it in the find function. Maybe it's cheating a bit, but it doesn't use any external libraries and it's very unlikely that I'd be able to write something that outperforms sqlite. 
One important practical consideration with a search tree is that when the number of nodes in a subtree is below some empirical threshold (e.g., 100 elements), it doesn't make sense to continue indexing. Instead, leaf nodes should just use linear search. Otherwise you waste a lot of effort. As an extreme example, consider auto-complete for a rare long word like "supercalifragilisticexpialidocious". Using 34 dictionaries lookups would be quite excessive when there is only one possible after the first handful of characters.
&gt;&gt; do you still have to loop through the whole list to make a trie? &gt; It depends. Sure you do. The interviewer just wants find to run in logarithmic time.
Yeah, you're absolutely right. It'd be better to use a [Radix tree](https://en.wikipedia.org/wiki/Radix_tree), but the short insert logic above is hard to beat!
**Radix tree** In computer science, a radix tree (also radix trie or compact prefix tree) is a data structure that represents a space-optimized trie in which each node that is the only child is merged with its parent. The result is that the number of children of every internal node is at least the radix r of the radix tree, where r is a positive integer and a power x of 2, having x ≥ 1. Unlike in regular tries, edges can be labeled with sequences of elements as well as single elements. This makes radix trees much more efficient for small sets (especially if the strings are long) and for sets of strings that share long prefixes. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
sentdex youtube channel has fun and informative tutorials from basic to advanced python. If you prefer to read, I'd recomment dive into python 3 book, this book is online and free 
You are right and I can really understand that I reduce the amount of people finding and reading my code by not putting it on github. But, I don't think that my plugin system (just another one with not much or even no benefits compared to others) is worth the effort of moving it from my private hosted version control system to github. If I am right is one of the things I want to find out with your feedback. 
No. Can you please open an issue on github and include the command you are trying to run? 
Nope, different French guy. 
Yes, it makes sense. I opened this issue: https://github.com/regisb/slack-cli/issues/4 Did you use `slack-cli -d yourchannel yourmessage`? Please add a comment on the issue if you did something else.
Right, `slack-cli` is not a full-fledged slack client, but it provides a useful interface for taking data in and out of slack.
Nope, different bunch: https://en.wikipedia.org/wiki/Stewart_Butterfield
**Stewart Butterfield** Daniel Stewart Butterfield (born Dharma Jeremy Butterfield, 1973) is a Canadian entrepreneur and businessman of Polish descent, best known for being a co-founder of the photo sharing website Flickr and team messaging application Slack. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
From what I've gathered Ruby isn't very fast either. Did they get rid of scaffolding in rails? Because if they didn't it's really crappy compared to Django imo. 
Bookmarked! Thanks for sharing
Agreed, both are good languages. I've used both, each have parts I miss in the other, but not enough to be inconvenient or make me want to switch back. I started with Ruby and moved to Python, and don't use Rails or Django by default. The thing that attracted me to Python was the data processing libraries like Numpy, Pandas and scikit-learn. It felt (subjective, not supported by actual data) that anything outside of web development (where Rails has a strong foothold) was first/more mature in the Python ecosystem that in Ruby. That being said, for mobile app development, Rubymotion looks really interesting and I've not seen the equivalent for Python.
Why web at all here? Sounds like you want a desktop app.
Python. Ruby had it's chance and people are frothing over Python for some reason now.
I would add how to actually install PIP. 
Nice! I see Flask going a long way. Thanks for the tutorial.
JavaScript
Python. I'm biased towards python but I have also used ruby and I like pythons structure a little more 
Thats right. Actually the only way since it is client side
Ruby had its moments with ruby on rails. But it is not that significant any more (since new frameworks come out). On the other hand python is much more general. 
You should look at lxml and use xpath. In my opinion its the way to go and much more easier. Also take a look on scrapy
This is anecdotal at best. Ruby is slow as well. Django less suitable than Rails? For what? I'm pretty sure both can do more or less the same stuff. Rails has probably a larger ecosystem compared to Django but Ruby's game stops there, while Python has libraries available pretty much for anything. While Ruby does have some nice features the language is an inconsistent mess (optional parentheses for function calls, really?). This is what you get for adopting the Perl philosophy. But I guess for people who like it this is a feature.
[removed]
Official MAL API is a joke :(
I am also a beginner. I made a script that automatically logs in to reddit
That is true.
- Wrote a library that did my chemistry homework - Wrote a library that did my linear algebra homework (kinda) - Wrote a library that did my stats homework (micro PANDAS / R clone) - Wrote a music downloading bot. Got a nasty gram from google on that one. - Wrote an API for a robotic potato launcher using a raspberry pi that could be controlled from my phone. - Writing a personal website - Wrote a job scraper that would do my job of job hunting for me. 
Hey Buddy!!! Just subscribed to ur yt channel!!! Good Luck Man!!! Make great content
Awesome idea. Would be nice if you show a proper way to write tests as well.
You made me curious, so I tried it out. Running on `/usr/share/dict/words` (~123k words), SQLite ( `SELECT string FROM string WHERE string LIKE "prefix%"`) is about two orders of magnitude slower than my trie based solution. But I don't know databases all that well, so I may well be missing some optimizations. Is there anything special you'd do with to make sure it's able to use an index for the select? Some thrown together code import sqlite3 class Prefix: def __init__(self, gen=None): if gen is not None: for s in gen: self.add(s) def add(self, string): raise NotImplemented() def find(self, string): raise NotImplemented() class SQLitePrefix(Prefix): def __init__(self, *args, **kwargs): self.conn = sqlite3.connect(':memory:') self.cur = self.conn.cursor() self.cur.execute("""\ CREATE TABLE string ( string TEXT PRIMARY KEY NOT NULL );""") self.cur.execute("""\ PRAGMA case_sensitive_like=ON; """) super().__init__(*args, **kwargs) print(self.cur.execute( 'EXPLAIN SELECT string FROM string WHERE string LIKE "test%";').fetchone()) def add(self, string): self.cur.execute("""\ INSERT INTO string (string) VALUES (?);\ """, (string, )) def find(self, string): self.cur.execute("""\ SELECT string FROM string WHERE string LIKE ?; """, (string + '%', )) return [x[0] for x in self.cur.fetchall()] class TriePrefix(Prefix): def __init__(self, *a, **kw): self._trie = {} super().__init__(*a, **kw) def add(self, string): d = self._trie for char in string: d = d.setdefault(char, {}) d[None] = string def find(self, string): d = self._trie acc = [] for char in string: d = d.get(char, {}) return list(self._find(string, d)) @staticmethod def _find(string, d): for k, v in d.items(): if k is not None: yield from TriePrefix._find(string + k, v) else: yield string 
Hope you will find some inspiration... and welcome to the Python world \^_^ **Most popular:** https://github.com/kootenpv/whereami Uses WiFi signals and machine learning to predict where you are **Most interesting:** https://github.com/kootenpv/neural_complete A neural network trained to help writing neural network code using autocomplete **Most useful:** https://github.com/kootenpv/yagmail yagmail makes sending emails very easy by doing all the magic for you **Currently working on:** https://github.com/kootenpv/xtoy Automated Machine Learning: go from 'X' to 'y' without effort.
Well it's about damned time.
I'm tackling django currently and it is a bit of a beast! Will definitely subscribe and check your videos as I want to learn flask as well. Thanks!
oh no, that again. :( &gt; If you’re a developer who wants more control over your application, and less bloat, Flask is great because it’s very minimal as opposed to Django which comes with a lot of functionality included. included in the library or framework is not the same as included with the application you write. the wording ("bloat") is negative and misleading. bloat is arguable things, that are included and you are stuck with even though you don't need them. but of course what you include in your django project is entirely up to you, this is a complete django app: https://raw.githubusercontent.com/syntarsus/minimal-django/master/minimal.py [source](https://www.reddit.com/r/django/comments/6mhytm/is_there_a_benefit_to_using_django_over_flask_for/dk1s5x1/) i know this is a flask course and the rest of that paragraph goes into details and it is of course not wrong, that django has a lot more "included" as flask, but opening that way seems unnecessary biased and might send people just learning about that stuff off on the wrong track. 
Can you add a code example how it integrates with argparse in the example.rst or usage.rst?
Nice tutorial. Blog is clear, well presented. Didn't have time to watch the videos so can't comment. Love the fact that you give the option though. Some comments Tutorial 3 should be split into several themed blog posts as it covers a lot of ground currently (general theme is templating uses) I'd also mention how the architecture compares to something like model, view and controller (and routes). I like how you distinguish business and presentation views, just like it to go a bit further! Picture of your bootstrap-themed page to break up the 'theory/code' a bit?
Were any hawk owls harmed?
Speaking as a relative n00b, I don't even know what a "framework" is. I always thought it was a client-side thing. But wouldn't that have to be (or at least compile to) javascript? Which this doesn't do, AFAICT? So then a framework on a server side? Which means...what? *These* are the questions that beginners have.
`cl` is the C compiler from Visual Studio. Depending on the python version you are using and you need to install a compatible Windows C compiler ( you can check the full list here: https://wiki.python.org/moin/WindowsCompilers). Installing dependencies with native extensions is a real pain because Windows doesn't come with a compiler and you need to install it. Hope this helps or at least gives you a starting point to fix the issue.
It's all personal preference. Just use whatever you're more comfortable with.
I suspect they would vote it down. Breakpoints are handled with one click. There is no importing and no risk of committing/delivering code with breakpoints. This PEP sounds to me like the author is JUST lazy and wants to type fewer characters. It isn't a non-vi friendly addition. What's wrong with just making a key binding?
Thanks a lot for your response. I went on the link and since I'm on Python 2.7.13, I downloaded the version 9 installer. Before installing I uninstalled cl with pip. However now I still can't execute cl in prompt, with the result that the boost bootstrap.bat doesn't run. any ideas? Update: I'm not building from VS command prompt that might be the issue. Need to try this
Very cool. Thanks for trying this out. I tested this out as well and found that instantiation of the sqlite version was a few times faster, but finding results was, indeed, quite a bit slower. Of course, getting results is far more important than instantiation. Here is the sqlite-based class I wrote last night, which is not too different from yours: class Autocomplete: def __init__(self, word_list): self.db = sqlite3.connect(':memory:') # We want the result to be a single list, not a list of tuples self.db.row_factory = lambda cursor, row: row[0] self.db_cursor = self.db.cursor() self.db_cursor.execute("""CREATE TABLE word_list (word text primary key) WITHOUT ROWID""") self.db_cursor.executemany("""INSERT INTO word_list (word) VALUES (?)""", ((word,) for word in word_list)) def find(self, pattern): self.db_cursor.execute("""SELECT word from word_list where word like ? ORDER BY 1""", [pattern + "%"]) results = self.db_cursor.fetchall() or None return results
That doesn't work if you prefix all the entries in the dictionary with 1 letter.
He should have seen tries in college, and if he didn't, then he should be able to work it out in the 24 hours they gave him.
Great K900, thank you. searching here Python seems to be fully portable among platforms (source code). If I am not mistaken you have to compile in Linux.
The binary search is much simpler since you can use two calls to [bisect](https://docs.python.org/3/library/bisect.html). Unfortunately, its complexity is slightly worse. A compressed trie solves this with the minimum number of array lookups (one for each letter in the prefix that matters), the binary search is logarithmic time, potentially many times worse. Still, logarithmic time is basically constant.
There is no "compile" step in Python, and Python itself can run anywhere there's a Python interpreter. The most commonly used interpreter, CPython, runs on Windows, Linux, OSX and a bunch of other platforms.
The python script I use the most is one I made to effectively press F5 and open a webpage for me. The one I learned the most from was making a reddit bot (it's not deployed, just had it on /r/test). It was more complicated than the first script but did something pretty similar. The one I'm working on now is a script to pick a random song from a musical subreddit, probably /r/listentothis, and open the link to soundcloud/youtube. Again probably an easy one but it's interesting. If you're wanting to learn, I know it's often repeated advice but make something you're interested in. All the above projects I've done because I wanted to do them specifically and didn't just want to do a project, it's worked out well (or at least I think so). I had my first programming class only a year ago, if you really work at it you could really, really easily do all the projects I've listed above in a year. 
I followed up on this a bit and tested finding a bunch of random strings like this: with open('/usr/share/dict/words') as f: words = f.read().splitlines() print("Got %d words" % len(words)) import random import string import time def test_it(words, clazz, repetitions): t1 = time.monotonic() autocomplete = clazz(words) t2 = time.monotonic() for n in range(repetitions): autocomplete.find(''.join(random.choices(string.ascii_lowercase, k=random.randrange(1, 5)))) t3 = time.monotonic() print("Instantiation: %f" % (t2 - t1)) print("Finding %d results: %f" % (repetitions, t3 - t2)) print("Total time: %f" % (t3-t1)) print('sqlite solution:' test_it(words, Autocomplete, 1000) print('trie_solution:') test_it(words, TriePrefix, 1000) The results were pretty consistent. Finding words using the trie method was about 4x faster. Here's a pretty typical result: Got 235886 words sqlite solution: Instantiation: 0.336238 Finding 1000 results: 19.914836 Total time: 20.251074 trie solution: Instantiation: 1.032532 Finding 1000 results: 5.088274 Total time: 6.120806
Ruby's syntax is really nice. Python has a much, *much* bigger community, and it's somewhat easier/faster to code with it.
Let's say I start a new project in Python 3.6 and Twisted is completely ported to Python 3. Would there be a reason to choose Twisted over asyncio?
When you are learning Python, it really doesn't matter whether you use a text editor or an IDE. Considering your background, you might be more familiar with text editors, so I'd suggest those, but it's really up to you. (Personally I prefer text editors, mostly Atom and Editra.) As for the operating system, again, it doesn't matter. But as you already have Windows 10 installed and you are likely fairly familiar with it, I'd suggest you use that. If you ever run into problems, feel free to PM me though!
I would say the answer to the first question doesn't matter as it'd all a matter of feeling comfortable. Perhaps a simple text editor is better at the very start as some IDE's might be too convenient and hide some details. The operating system doesn't really matter as python is portable and is still again a matter of comfort. But, my opinion is that, Linux is better because it's easier to use and I've had much less trouble installing some packages on it, and a lot of dev tools are native to Linux. Also I've always thought that a text editor like emacs would be enough but after trying out an IDE like Pycharm I realized it's faster, works better, has much more features and is not a pain to setup.
It doesn't integrate with argparse. The point is that you're not limited by the constraints of what you can do with argparse.
Bench it ! :D 
Python can do a lot more than Ruby in general. I would recommend looking into Open Source software if you're worried about Google takeover (IDK if I've read your post right?) Here's some amazing tutorials for learning Python though, good luck :) https://pythonprogramming.net/
Learning Flask is on my to-do list and this looks like the kind of series that would kickstart this for me. I will wait until you produce more content and sit down 1 weekend and grind through as much as possible. Good luck.
I'm afraid I really can't think of any reason for this to be implemented. Why would a literal `None` not be enough? And even if you *did* need this for some otherworldly reason which my simple mind cannot comprehend, the implementation is so simple you quite literally could whip up your own in under two seconds.
Python is an easy learn and is the go to language for research/data science and a top contender in other fields (save for mobile app development) Ruby is much newer than python but the only area it has real dominance in is web development (Ruby on rails). Since that time, flask/pyramid/Django in python, as well as node.js have all popped up as server side web frameworks. It has specific use cases where it excels but overall I think it is a less flexible first language to learn
I've never had a reason to use this but there do seem to be some reasonable use cases on [Issue 10049](https://bugs.python.org/issue10049). This was rejected, please see [this message](https://bugs.python.org/issue10049#msg118626) for the rationale behind the rejection.
I don't see you hooking the event for the 'end of track' state; is that what you are looking for? &gt; pygame.mixer.music.set_endevent() &gt; have the music send an event when playback stops https://www.pygame.org/docs/ref/music.html#pygame.mixer.music.set_endevent