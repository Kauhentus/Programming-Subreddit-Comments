False choice. Learn both. If you are too lazy to learn both, you will be a crappy programmer.
There are a lot of ways of interpolating strings in Python (three in the standard library, more templating frameworks available). One way of doing something similar to that would be: print("Total items: {0}".format(integer)) The `{0}` means "the zeroth item I pass to this." This lets you do more useful stuff like: if language == "English": template = "{0} has {1} messages." elif language == "Gibberish": template = "Sjenkjn {1} dkdknk {0}?!" print(template.format(username, message_count)) That's kind of a silly example because there are better ways of doing localization, but it at least gets you started thinking in the right way.
What's not in 3.0 that a person who is learning Python initially on their own going to need ? It has Numpy, Tkinter, Most of Pygame. Unless they are diving right into something complicated or specific, why learn 2 and then 3 ?
as far as I'm concerned, printf and similar functions, use templates, which is what I meant all along and is still fundamentally different from php ;)
The use of dozens of libraries not yet adapted to Python 3.x
Oh dear
Or, try print "I have", num, "apples" which is another, shorter variant. Parantheses needed in Python3.
I would say: learn python, which is an awesome language, but don't forget PHP. They're different, valuable tools on your toolbox. PHP lets you knock up a website, painless and dirty cheap, on absolutely no-time. Which is a nice thing to have.
Agreed. Also, you should learn C, C++, Java, PHP, COBOL, BASIC, and Perl. You know, just in case.
I always see threads, locking, and concurrency brought up in these kinds of discussions as things one should know early on. I've been "coding" (mostly writing pipeline tools and such) for 10 years, and at a hobby level for 10 years prior to that, and these things have never come up for me. Honest question: where are they necessary? I have a feeling they're common for work with databases or networks, which seem very common in the work of most redditors, but completely uncommon in what I do.
Why don't you pass in the username and password to psexec explicitly and see if that makes a difference? I believe the psexec switches that accomplish that are -u for username and -p for password. You probably need the domain name for the username as well.
^This^ type of comment really doesn't help the OP in any constructive way. Perhaps posting some resources he could start with, or maybe drawing some comparisons of the two languages as opposed to tearing down the OP who happened to learn how to code in PHP before trying to learn Python. You really don't know anything about the OP's abilities in PHP, and already you're making large generalizations.
use 2 until nobody asks this question anymore, because everyone is using 3.
Yeah that sounds like a good idea. Windows does some really funky stuff with sessions when a user is logged in vs. users that are not. Being explicit about authentication when dealing with Windows stuff is usually wise.
That sounded like a really good idea when I read it, but it made no difference. I even moved the psexec command (with the user and password) to after the point where I unmapped the drive, just to make sure that I wasn't getting any of the funky stuff cecilkorik mentioned.
if you're going to make up your own special API, at least base it on a nice library such as oursql. MySQLdb is pretty much the worst thing
Yeah, I found that earlier. The thing is, I'm not trying to change another user's Current User key - I'm trying to change my own, while authenticated as me. And it works with no problems when psexec is called from a batch file. Having said that, however, I haven't tried editing the HKU/SID - it's worth a shot.
 from __future__ import print_function from math import sqrt def fib(n): phi = (1 + sqrt(5)) / 2 psi = (1 - sqrt(5)) / 2 return int(((phi ** n) - (psi ** n)) / sqrt(5)) print([fib(n) for n in xrange(50, 61)]) EDIT: I know there's probably an issue with rounding, but bugrit. 
I always start new Python 2.7 programs with from __future__ import print_function because I like the Python 3 style print(). And I'm not sure about 2.7, but in 3, integers are unlimited in length. Python automatically switches to a BigInt-style representation after you reach 2^(bits in a word - 1) - 1. EDIT: According to my install of 2.7, it autoswitches from int to long. (Python 3 has no long type.) So, your computer will continue until the numbers are big enough to occupy all of your RAM plus all available swap, or the heat death of the universe, whichever comes first. EDIT 2: Forgot about the sign bit.
I think once Python takes hold you will never look back. I would recommend. http://www.udacity.com/overview/Course/cs253/CourseRev/apr2012 Web Application Engineering (CS253) Also the New Boston Python Courses by Bucky Roberts http://thenewboston.org/list.php?cat=36 For python web development I really like the CherryPy frame work it has enough built in to allow you to do pretty much any thing you would do with Apache and PHP alone but the structure will be much better. You can create web apps using sqlite and CherryPy and distribute them as an executable using py2exe and even though CherryPy can be run on any WSGI server such as IIS or Apache its so fast I doubt you would want to; at that point you would probably want to look at Amazon EC2 or Google App Engine both of which will run CherryPy.
Usually, what I do is to use pywin32 to impersonnate an user who has sufficient permissions on the remote machine. Then I simply use _winreg while I'm shadowing that user. Something along the lines: import win32security import _winreg as wr handle = win32security.LogonUser(username, domain, password, win32security.LOGON32_LOGON_NEW_CREDENTIALS, win32security.LOGON32_PROVIDER_WINNT50) win32security.ImpersonateLoggedOnUser(handle) reg = wr.ConnectRegistry(host, wr.HKEY_LOCAL_MACHINE) key = wr.OpenKey(reg, path) ... wr.CloseKey(key) win32security.RevertToSelf() handle.Close() 
Another shameless plug: [PySO8601](http://pypi.python.org/pypi/PySO8601), which I built because the only ISO8601 library [available at the time](http://pypi.python.org/pypi/iso8601) wasn't very flexible at all. I use this pretty-much daily for web development.
Looking good. One additional improvement would be to assign Maine and Nebraska's wins at the congressional level, because their electors are not allocated at the state level: http://en.wikipedia.org/wiki/Electoral_College_%28United_States%29#Congressional_District_Method
Related issues arise with setting a default argument to a mutable container (a list or a dict for example). For reliability, I try to stick to only using constant values as default arguments.
Oh god, that does complicate things. I head no idea Maine and Nebraska did this. Fortunately for the model these states don't have many electoral votes and are not swing states. But yeah you are right. A good model would include this.
Did not know that about default arguments. This story means I'll probably remember from now on. =D
I'm proud of myself for spotting that one.
&gt; You're going to have to create new instances constantly which requires that you remember which kind of variable you're using... it seems very inefficient. I write a lot of python and I have no earthy idea what you're talking about here. Please give an example of the kind of thing you're referring to. 
Psuedocode of something I do fairly constantly: temp = astring temp.split() first_val = temp[0] In any other language I've used, this will work, but in Python, this will destroy my "astring" variable in the process. As I understand (and yes I'm new), I would have to assign temp to a new string like this? temp = string(astring) Every time I use a temp variable, I'm going to have to use constructors or something to force it to create a new variable so my original variable doesn't get destroyed. That's how I understand it anyway.
Simple aliasing isn't often useful, but it's a logical part of a larger model that makes many things simple. For instance, you can pass an object into a function and have the function modify the object, without needing to mess around with pointers. To turn this around, can you give an example piece of code where this behaviour would catch you out? I hope we can come up with a neat way of doing the same thing in idiomatic Python.
non-primative? So this would only be the case for say lists or tuples and not strings, ints, etc?
From my understanding, numbers and strings are treated as literal values whereas lists, dicts, and other objects are treated as pointers.
So performing functions on lists will result in new memory space? That probably means I'm ok then.
I think you're missing the fact that [most types in Python are immutable](http://www.reddit.com/r/learnprogramming/comments/vucev/performing_mathematics_on_an_array_of_lists_in/c57z5zs?context=3). That means that you can't modify `astring` through `temp`. `split()` returns a list, it does not modify in place. All string functions work this way, because strings are immutable. 
I don't quite understand what you mean, but the split() method on a Python string returns a list independent of, and without modifying the original string. Example: a = "str" b = a.split() print b # prints " ['str'] " print a # prints " 'str' "
On short notice, this: temp = astring temp.split() first_val = temp[0] This would split my "astring" variable as well yes?
Kind of, but the usual way to describe it is 'mutable' vs. 'immutable' objects. If a and b point to the same thing, and you change that thing, both a and b see the change. So with a list, `a.append(1)` will affect b, because b is a. But numbers and strings are immutable: there's no way to change them. You have to point the reference to a new one. So with an integer, `a += 1` will calculate `a + 1`, store it as a new object, then point `a` to that object. `b` is still pointing to the old object, so a and b are no longer the same.
So then the behavior isn't different as I expected, though that does mean that I would need to be careful with anything that is mutable... But from what I can tell, the only things that are mutable are lists, tuples, dictionaries etc. Is that right?
That wording is helpful, thanks!
(N.B. We're discussing this example in another strand, so I won't comment on it here)
Tuples are immutable. Any objects other than ints, floats, bools, strings, and tuples are mutable, including lists, dicts, and any user-defined classes.
Could just use mock with the patch context manager and patch date.today in the test suite.
Good to know. Thanks!
Then it must not affect the things I use because I never noticed this before.
So functionally speaking, python DOESN'T really behave differently than other languages.
2
[Nate Silver](http://fivethirtyeight.blogs.nytimes.com/author/nate-silver/) has a nice site with polling data. If I find a good site for scraping, I will pass it along. The code looks better. Should be easier to update now that the states are listed. Also take a look at what someone posted about electoral votes for Nebraska and Maine. They divide up the electoral votes in these states that our models don't take into account.
python -m antigravity it made me chuckle.
&gt;I'm not sure what the moral to this story is, except that even things you know can still come back to bite you, if you aren't careful/don't realize they can. I think this is a pretty good lesson. I've been dealing with this exact quirk on an old project I've been trying to slowly breath life into again. I have default arguments for mutable data types *all* over the place, and as a result, I'm getting unexpected behavior in parts of the code. So this post was a nice kick in the brain for me. 
Also, strings are immutable in Python. You can't change them. Although you can make a label (variable name) point to a different string.
temp = astring temp.split() first_val = temp[0] You can do that fine in python, like this: &gt;&gt;&gt; astring = "this is a dead parrot" &gt;&gt;&gt; temp = astring.split() &gt;&gt;&gt; temp ['this', 'is', 'a', 'dead', 'parrot'] &gt;&gt;&gt; first_val = temp[0] &gt;&gt;&gt; first_val 'this' 
Over Quota Gotta love the app engine
I'm glad I helped!
Thank you - this is very helpful! Interesting that you say that &gt; if you try to install a program on linux ... and the user has to do more than click ok, it's too hard. My experience with installing programs on linux has been more like * Find and download a .tar.bz2, after double- and triple-checking that it is the right build for my system * Unzip, and navigate to that folder * Read the (sometimes cryptic) Readme, make the necessary tweaks to config files to suit my system * `$ make &amp;&amp; make install` * Watch the output like a hawk for any clues as to what is going to go wrong * Google the ensuing errors for clues as to what's gone wrong * Rebuild required software, edit configuration files again, sacrifice a ram and examine it's entrails for clues * Acquire working software I'm not complaining - I knew getting into Linux that it wasn't going to be a hand-holdy environment - but I would never have imagined that it would be considered to be easier to install something than Windows. Might I be doing something wrong?
What distro are you using? There's probably a package manager that will handle common installs for you. Not to say you'll never have to compile a package again, but it will save you a lot of hassle 90% of the time.
you're not doing anything wrong. it the software that you're using that's doing something wrong. the problem comes from there being 1 windows flavor and 100 linux flavors. at my company, we had that philosophy up until recently. our customer told us that he couldn't install it on his system b/c we required python 2.5 and he had python 2.4. his system admin told him it would take 6 months to approve python 2.5, but he could run it on their system with no internet access. so he'd have to move files from his system and go sit in some other room to use our software. additionally, the install manual was full of if this-then this things and unless you followed it perfectly, you were screwed. we're not smart enough to make good ./configure files... instead we used pyInstaller and built an exe and he was able to drop it onto the computer with internet access and run it. the software you're using is intended to work on ALL linux systems without a lot of maintenance for the developer. if you're a company, you have a customer and you'll test it on his version of windows/linux/mac in order to verify that it runs and that it's as easy as it can be to install. it depends who your customer is on if it's easy to install or not. if your customer is IT, you can be lazy, if your customer is a windows user on linux, you need to make it easy.
Wouldn't: if not foo: foo = bar() Be 'more correct' than: if foo == None: foo = bar() 
I find it kind of amusing that the favicon for the over quota page is an 8-ball. "Will this page load?" *press refresh* "Over quota" It's akin to a magic 8-ball.
I maintain a cross platform application written in Python. I use [cx_Freeze](http://cx-freeze.sourceforge.net/) to create a Windows exe and a Mac application. I then use [Inno setup](http://www.jrsoftware.org/isinfo.php/) to make a Windows installer - I later learnt that cx_Freeze can do this step as well, but the setup I've got works for me. I also have an Ubuntu PPA, containing a package that depends on Python along with the other things it needs. I feel this is the right way to go for Linux, where package management is baked in. But users of other distributions will have to put up with manual installation for now, until someone packages it for them. Unfortunately, even with Python, it's not quite write-once-run-anywhere. I need to package and test on each platform. The Mac in particular was tricky to get set up. But once I've prepared the packages, users can install them with a few clicks and have the app running very easily.
Well Maine's 2nd district is ranked 14 on 538's ROI index, implying that voter contact efforts can influence the outcome there. So I would simply split Maine into two prediction geographies and have it incorporated.
It depends on what "foo" is allowed to be. Could foo be an empty list or empty string or zero? If so, then a boolean test would mistakenly interpret it as unset, so "is None" would be correct (not "== None"). Could foo be None? Then you need a special "sigil" object to test for, e.g. _SIGIL = object() def get(self, default=_SIGIL): if default is self._SIGIL: # no default else: # has default
the main reason is that variable is simply the wrong terminology for python try to think in terms of names for objects instead, cause that’s what it is in python - assignment gives an object a particular name
The point of the post is merely to inform people about the vulnerability and about possible fixes. The fix, as mentioned in the post, will appear in the stdlib in Python 3.4 (some way away), but meanwhile, anyone using the `listen()` API should take note of the vulnerability and be comfortable that it doesn't apply in their situation.
Gotcha - thank you!
An old version of Xubuntu, since the hardware is quite outdated - I'll look into package managers though, thanks!
Here is what I consider to be a somewhat complete piece of software I wrote in Python: https://bitbucket.org/jgrigonis/mathfacts/downloads All the source and stuff is there too, if you want to look over how I did anything. I used py2exe and py2app to build the binaries. On windows I used [nullsoft](http://nsis.sourceforge.net/Main_Page) installer. I used tkinter for the gui stuff, which has some drawbacks, but from an end user perspective, they have no idea that the program is made in python, and probably don't care.
Worth noting that both java and javascript work in exactly the same way: StringBuffer foo = StringBuffer("123") StringBuffer bar = foo; foo.append("456"); System.out.println(bar); // 123456 ---- foo = {a: 1}; bar = foo; foo.a += 1; Console.log(bar.a); // 2
That "someone" was me! Thanks for the good press! The app only works on Snow Leopard for now, but I'm making a new one for Lion (which hopefully will work in Mountain Lion too). Wait for it in the next couple of days.
Definitely related.
Check out apt-get. It should already be installed.
`if foo is None` is the standard idiom. `None` is a singleton.
Sorry about that, turns out my design was using 400 KB of fonts for a bit of text. Removed that and enabled billing, everything is back to normal (well, better than normal).
my pyInstaller build (for windows). I'm lazy, so no linux version: http://code.google.com/p/pynastran/downloads/list a picture of the GUI is in the upper right corner of the link. if you want to see how i made it, download the source (from subversion) and look at the spec file.
It all depends on your goal. If you are building software to be run on computers which do **not** have Python installed (like most Windows systems), you will want to generate an .exe file. I have typically used py2exe to generate these executables, and it works quite well. I am guessing, by your mention of C++, that you're concerned about performance. Keep in mind that you don't necessarily want the fastest possible software. You want something that is **fast enough** to serve its users. In some cases, that means having to write parts or all of your application in C or C++. In most cases, however, Python is more than fast enough. I have Windows services performing critical system monitoring that are written entirely in Python. They work beautifully. In short, don't worry about the "proper" technology to implement an application. Use what works. The key is solving a problem, and having the software run fast enough. Not everything has to be optimized to squeeze the most out of hardware. It all depends on what the application needs to accomplish.
Well, the only real advantage I can think of is that it's built in with python, no need to install anything extra. That's pretty much a non-factor if you are going to build a binary at the end anyway though. I've only experimented with wx and pyqt4, but they felt much nicer.
I am a compiled language bigot. I always prefer compiled languages and I have a built in belief that compiled languages are always immensely faster than interpreted languages. Then, a few years ago, I came across some benchmark studies that compared lots of languages. Yes, I was right. The compiled languages (C! Yay! ) were the fastest. But not by very much. Unless you are building software for an OS, or an application that is going to be scaled up for huge loads, or crunches huge amounts of numbers, you will never see that speed. (Especially with today's hardware!) So you are better off developing in the language that lets you do the least amount of work and puts the bread on the table the fastest. (eg - gets the project delivered the fastest.) Remember, I'm not just a programmer, I'm a compiled language bigot. I eat, breathe and code in C, Assembler, and C++. I'm not telling you this to promote my agenda. (In fact, I hated reaching this conclusion, but its fairly inescapable when logically analyzed) (Yes, I know assembler isn't compiled, its assembled. I only use assembler when I need to be an Avenger.... ) http://shootout.alioth.debian.org/u32/which-programming-languages-are-fastest.php http://attractivechaos.github.com/plb/ Edit - added url(s) of some of the language comparison stuff I had found. 
What's up with this layout? I had to delete the header &lt;div&gt; nodes just so I had enough vertical space to read the article. Not really a plus if you want someone to come back to your blog.
This is really cool. &lt;3 CodeAcademy
Brilliant! I've loved their Javascript course and wanted a fun way to learn python for ages. This is perfect!
_Always_ think twice about the lifecycle of your objects.
http://fivethirtyeight.blogs.nytimes.com/ 
yea i may have confused myself a little trying to keep that going. oh well
You have mutable and immutable objects. Although you can have a,b and c point to an immutable object (e.g., string, int, tuple), changing one does not change them all. On the other hand, changing a mutable object (e.g., dictionary, list) would result in the behavior you're speaking of. You can always copy a mutable object without having to always reference it, you can do so with [:] (if the object supports it), a copy method (if it is provided) or the copy module which supports shallow and deep copying of an object. The one and only reason I can quickly come up with on why you might want to reference the same object with A and B could be to **DEFAULT** some values to B if B has not been explicitly given any personalized and custom values.
The second generation code posted above uses that data. It predicts 83% chance of Obama winning. I also posted the data in dictionary form if you want to write your own model.
Beta testing it now &gt;:D
Only Python 2 for now :(
I've got a similar question. Say I want to run a python application on a PC that doesn't have Python installed on Windows. What tool do I use to make sure I can run it?
Your site is broken on my Android phone, I can't scroll all the way to the right.
My hosting company is still on 2.6 so I don't mind too much. And Zed Shaw has a pretty good migration guide for when 3.x becomes more prevalent. 
Seems to be having intermittent issues. Occasionally I will be doing an example and attempt to hit "RUN" only to have nothing occur. Exiting out and selecting the course again appears to reset this state. Its certainly interesting, the biggest issue for me with python has been attempting to learn it while I study for a bunch of certs so I dont write as much python as I would like resulting in me not cementing a lot of it to memory. This helps as a small refresher.
I thought I was the only one. If you reload the page, it should restart the interpreter without you losing any work.
pyInstaller
yeah, I would give it a shot too!
Thanks for the article, I killed plenty of time doing a much needed recap.
That's my point, there is a large area of things that can be done. If you are just starting to learn Python, you likely won't be tackling a big project first. and if you are, as I mentioned. Pygame, Numpy, Tkinter are available. Rather then getting hung up on what's not available, you can find a project for what is available, and by the time you have finished it, there will be more libraries available. PIL's site states that a 3.x version is planned. 
Of course every library has a planned 3.x version... but it is just that it is still not done for most of them. The point I tried to make is that with 2.x you can use every library. It is not the same with 3.x, at least now. It depends on what you do, but, for me, PIL is way more important than PyGame for hobby projects...
I was bitten by this once, with a list default argument. It's one of those once in a lifetime mistakes.
Thanks - I wasn't aware of the win32security module. That will be helpful.
Just in case anyone is interested, I discovered why psexec called from a batch file acted "differently" than psexec called from a python script. The account I was using to authenticate is a generic account used by installers. Normally when I run the batch file the installer is onsite, logged in to the account on the server. When I was testing my python script, there was no one logged into the server with that account. So it wasn't really acting differently at all - I was just being a little stupid and not taking into account the differences between reality and my test environment. ;) I still plan to implement the program more in a more "pythonic" fashion as I learn more.
Wait. "a == None" doesn't convert a to a bool value like "bool(a)" does. Isn't it just that "a == None" does a comparison on values (possibly calling a.\_\_cmp\_\_/a.\_\_eq\_\_) whereas "a is None" does a simply comparison on pointers? In [1]: None in [[], "", 0, {}, False] Out[1]: False 
Most projects I work with are still 2.x only projects for now.
It's a standard Blogger template; no one else has mentioned any problems with reading it. Which browser are you using?
PyQt + PyInstaller works perfectly. Distribution on windows should be with a Python containing package (zip or exe, I prefer one simple exe). Don't rely on installed Python. What the Java guy in your link is saying gets me going: Java in general is a nightmare. The attitude to expect a JRE is a nightmare. JRE and JSDK installation is a nightmare (you get crap-ware installed if you don't take care). Java on the client is a nightmare. Oracle is a nightmare. The only acceptable default runtime on Windows is .NET (note: I'm not saying MS is not a nightmare :-)) Really, the only alternatives to Python + PyQt to build Desktop Apps for Windows are C# and .NET (I think WPF is alright by now) or native Qt.
Notice that this is from Coursera.
Notice that this is from Coursera.
Thank you for that: &gt;I can write bad code in any language, especially Perl. You only use C or C++ if you really need it for very very good performacne reasons. I see no reason at all to use C++ except for using it with a high performace desktop app like a 3D CAD app or a game, where you are really forced to use an OO approach due to the size of the app. For all smaller bits: C extensions and Python as glue. In case Windows is your target plattform: Why not force yourself to learn C# and .NET? To me it's the best compromise of "forced conventions" (static), performance and developer efficiency. 
We should place one big sticky red note on the front page of the python docs with a warning of this kind of unintuitivenesses. I think everyone stumbles over that once. Now, don't hate me, but that's actually a beginner mistake (which I still make often enough.)
Or a bool, when I feel brave :-). What scared me recently was the use of sets of strings. Actually it still scares me. Do sets evaluate their operations on identity or value? Damn ...
Not really. There's no difference in how they're treated, they're all pointers under the hood. The only difference is that there's no way to notice any difference with numbers and strings, because these are immutable. Ie. there's no way to modify them "in place" thus no difference (beyond wasting memory) whether you copy or make a reference. You can see this with the `id()` function or `is` keyword, which will tell you whether something is the same object, rather than just being equal: &gt;&gt;&gt; x = 1234567 &gt;&gt;&gt; y = 1234567 &gt;&gt;&gt; x == y True &gt;&gt;&gt; x is y False &gt;&gt;&gt; z = x &gt;&gt;&gt; x is z True (Though note that for small numbers, you may find that it *always* points to the same object. This is a performance optimisation possible *because* the two are behaviourally identical (apart from is/id themselves).
This behaviour is identical to both Java (apart from primitive types) and Javascript. What would you expect v2 to contain in the below code? Vector v = new Vector(); Vector v2 = v; v.add(1) &gt;How do Python folks use temporary variables? You're going to have to create new instances constantly which requires that you remember which kind of variable you're using... it seems very inefficient. The other way round, surely? There are no new instances *ever* created by assignment, only by explicit creation (youcanteatbullets is incorrect here about primitive types being different - there are some languages that make this distinction (eg. java primitives, value types in c#), but generally only as a behind-the-scenes optimisation). Conversely, a language with copy semantics may have to do a lot of work when assigning a variable - it's possible to have unexpectedly slow performance when you use an unexpectedly complex copy constructor in some seemingly innocuous C++ code. With reference semantics, assignment is consistently never doing more than copying a pointer (plus admin like refcounting etc).
Will you need to have any coding background for this course? 
&gt; Is there any use for this? Every language I write in I might want to create a temporary variable and set it to another variable without messing the original up. The only language you programmed with is PHP?
If you learn Python 2 you will only have to spend 5 minutes learning the differences between 2 and 3 when you want to switch. It's not wasted time.
Indeed. &gt;500 Error. We're sorry. Looks like we dropped the ball on this one.
Same here. Always looking for interesting Python projects.
And that it is being spammed.
Wes McKinney, the main author of *pandas*, is [working on book about using Python for Data Analysis](http://shop.oreilly.com/product/0636920023784.do). It's coming out later this year, but drafts are already available for those who pre-order.
Awesome. Thank you!
The first example can't even work… there's a return value to an \_\_init__ method… of a one-method class might I add…
This person doesn't seem to be remotely qualified to make posts about Advanced Python.
Whoops. I'm accepting down votes as flagellation. 
&gt; py2exe, pyInstaller, and cx_freeze dont make real exe's. they make bundled python code, so you can reverse engineer it if you want...however, it's tough and the real vs fake exe thing doesn't bother me. 1. There's nothing "fake" about these. 2. All exes can be reverse engineered. The difficulty of doing so has little to do with the distinction you're pointing to.
speaking as one too lazy to go beyond looking at their example apis...how is this different than gevent beyond being more explicit/verbose?
I'd like to suggest that you experiment with the builtin function *id*. It gives you (at least in the CPython implementation) the memory location of the object you pass it. id("string") id(variable)
Neat. But no tests, so I'm going to assume it's a toy.
It behaves differently from some other languages, and like other other languages.
This should be at the top.
&gt; With C, you can look at it and pretty much see exactly what assembly is going to be emitted ... Mr. Linus have spoken exactly those words.
Not really.
I would like to join a group project. Perhaps I could suggest some general projects to get the ball rolling. * Web page built with Django or web2py or some other favorite. The web site could be something like: * Image sharing * Project time tracking * Random quote generation * We could try to recreate some other site that is liked * something else... * GUI Application. I prefer wxpython but I am open to other interfaces. * Recipe book - store recipes etc. * XBMC interface to control XBMC from another computer or from an iPhone or Android or some other smart phone. * Smart phone application. Any other brainstorming out there?
http://labs.codecademy.com/#:workspace not quite as deep as this I assume, but codecademy labs does have a basic workspace for python for free.
Same thing with pyserial 2.6 I can send bytes, just not other data types
There's nothing wrong with doing that. Just remember that it's a process-wide change, and that it's inherited by child processes. 
They also leak between sub interpreters within the same process, so must be careful about using them in a system such as mod_wsgi.
PythonAnywhere can also do in-browser bash sessions, and you can run vim from there.
I commend you for admitting your mistake and correcting it. Many authors would not care.
I do find emacs to be my personally choice of editors.
he didnt point to projects, so its more of a metaquestion finding projects is easy those days, we got google, github, bitbucket, sourceforge just name a kind of thing you are interested for and you are bound to find a project for it
Excellent interview!
HTML regex parser and an automatic 'can I has accurate floats' thread responder.
Well you can launch Emacs in a bash console...
Strings are unicode in python 3, maybe that's why? Have you tried encoding them to (for instance) ascii before sending?
In Python 2, strings *are* bytes. In Python 3, they're unicode. If you're working with unicode, you can just encode it before sending. This should work for any text, although you should check what encoding the other end expects: s = "Abcþ€" ser.write(s.encode('utf-8'))
Global state is usually worrying and environment variables aren't a normal way to share information in a Python script. What circumstance are you looking at this for?
I don't see how this is bad. For example, I'm running IPython and dinking around with some stuff in C and I need to build with warnings in `make`, so I have to : import os os.environ['CFLAGS']="-Wall" make ...
I did learn Python directly on a book, with only very few week-end coding (I was very busy on a PHP codebase for daily work). I was one step more amazed for each page of the book I read, and found one more reason to leave PHP. This book is so well written, so clear and precise, I didn't feel I had to confirm what I learnt in a terminal. Which book may you ask? Well, just "Python in a Nutshell", by Alex Martelli. 
&gt; The lesson I've learnt [avoid] anything that's not specifically immutable Wrong lesson. The correct lesson to be learnt here is to pass all Python code through a decent code checker, like pylint. They tell many interesting things about the code, and raise some life-saving warnings. 
Their feed is borked, it won't show any episode in iTunes :(
Sorry about that, we had an infrastructural change that took longer than expected. Everything should be fine now.
who wants patches from someone so small-minded they can only use github?
Actually very much cheaper than EC2 if you use their free level. Consider this: you can get an account, set it up to sync with dropbox. This means after you create some initial wiring, you can create a python web site (e.g. using bottle.py) and edit it on your local machine via dropbox sync. Change the file, restart your web site at xyz.pythonanywhere.com, and you have the cheapest python web site I know of. (In fact, you can also point a drop-box aware iOS editor at it and edit files on your iPad...) Paying a few dollars gets you ssh access, which is also great. I can't tell you how nice it is to get out my iPhone, log in via ssh, and start coding. And the web interface means I can log into my machine from, like they say, anywhere. Overall, a very satisfactory experience. Since this is (mostly) free, I don't see any reason not to try it out. 
so you've successfully created an APK from python source?
As a grammar nazi, `worried`.
Something he may have missed, but there's also something called "PyGame subset for Android" which would be even better suited for this. It actually allows you to use PyGame under Android including sound, graphics, etc.
i like. i get a similar object from the following (that i think i initially got off of r/python): from collections import defaultdict def recursive_defdict(): return defaultdict(recursive_defdict) dd = defaultdict(recursive_defdict) this gets clunky, though, when it nests pretty deep with all the brackets and such.
You try it recently? I don't have iTunes, but a friend said he fixed it and it worked for him. He has a Mac.
"Better" is a poor choice of words here. Each of these python implementations provides entirely different purposes. The one which is developed by the ren'py and kivy teams is the one you discuss, and it provides almost no access to many of the native android APIs. You cannot create native looking applications, call intents, and do a variety of other things easily in this python implementation. The SL4A implementation allows you to call many native APIs, and doesn't provide the same access and easy wrappers to OpenGL ES. They serve different purposes. One is not better than another.
Unit tests are generally considered "a special case" in terms of doing dirty things that you wouldn't normally do. 
Oh my god thank you. As someone entering who has some python knowledge, but very little Android dev knowledge, this is very helpful. A good place to start.
You're right, it's ok now! I removed the old subscription and re-subscribed, and now it shows the episodes. Last time I tried was about two weeks ago, nice to see it's been fixed since :) 
idk my buddys app that he released a month ago has earned him a grand thus far so
I'm missing quite a bit of information, so I can't really be helpful. * What version of MacOS are you running? * What do you mean "won't run graphics?" * Are you looking for an IDE? I mostly work in terminal, but I'm trying to draw out more information so others can (hopefully) get you what you're hunting for. 
Python is preinstalled on your Mac. `python` *is* an interpreter, and the standard one at that. You really don't want to be using anything else unless you have particular needs that you don't have.
* I'm running Snow Leopard 10.6.8 * When it tried to open an empty window with TKinter IDLE failed to do anything. * Explain an IDE. I'm just getting into this whole thing.
I tried that a while ago but I'm running Snow Leopard. There's no file in the Library directory called Frameworks.
I think [Kivy](http://kivy.org/#home) might be a better alternative for folks who want to write python and distribute to Android/Apple products.
Yes, but I have seen a lot of time and energy lost because unit testing code did not receive as much attention as it should and broke in weird ways. 
An [integrated development environment](http://en.wikipedia.org/wiki/Integrated_development_environment) combines an editor, compiler, and various other tools into one. So, I edit files with `vim` and run them with `python` - in an IDE I would edit files and click a button somewhere in the interface to run it. PyDev is an IDE.
I did. It returned /Library/Frameworks/Python.framework/Versions/2.7/bin/python However, there is no directory in Library that is named Frameworks. I've searched the entire computer for files named python or frameworks and nothing shows.
Alright. That helps a lot.
Ok, I think your TKinter failure is a wxPython issue. Again, I don't do much with graphics in python. You may want to make sure your environment is set up correctly, and you might need X11 accessible for the program. IDE is an [integrated development environment](http://en.wikipedia.org/wiki/Integrated_development_environment). Eclipse and XCode are both examples of this. They do help many people develop larger and more complicated projects much more easily.
Yes it does! Thanks you so much. If you don't mind, if the file doesn't appear in finder without opening it in terminal, how can I run files with it? Or am I misunderstanding what I'm doing?
Interesting. I wonder what's wrong with my install of MacOS. I don't have that directory (/Library/Frameworks/Python.framework) at all. My install of python is in "/usr/bin/python". I also found that I have "/System/Library/Frameworks/Python.framework/Versions/2.7/bin/python".
haha thanks.
Cool, I'll keep this in my grimoire for next time.
What does it do? Have you installed Python yourself or done anything else that would change this, particularly since it was last working?
I feel really stupid doing this, but define "open file dialog." I found a command for finder to show all files and it still didn't show framework. (defaults write com.apple.Finder AppleShowAllFiles YES) I'm going to bed now so I won't reply for a while. Thanks for all your help and I hope to continue asking for guidance a little while longer if you don't mind.
You're double-clicking on your Python files to run them? What does the get info finder window say the files open with? What is the first line of the files? And finally, what happens if you merely run `python` in the terminal?
How is reading sensor data (Bluetooth, wifi, battery, accelerometer), creating native android user interfaces, managing phone and SMS data, and interfacing with other android applications not worth a crap?
Babby's first computer?
&gt; I feel really stupid doing this, but define "open file dialog." The window you see when you do a File-&gt;Open in things, that allows you to choose a file.
I'm not sure what exactly you want, but from some comments I've read, I think you might like [Pygame](http://www.pygame.org/news.html).
A subreddit or using google groups sounds like a decent idea.
Dark grey on darker grey. Is there a readable version available? Edit: [Readability.com](http://readability.com/read?url=http://hashbeat.blogspot.ca/2012/08/no-use-case-type-constraints.html) (click "Readability view" at the top).
 NameError: name 'os' is not defined
What's your fitness function? An actual polynomial or just some (x,y) pairs or something?
Honestly. Pa is cool and all, but it seems to me that her value for money is much better with a small linode vps. Just saying... i don't get most of these paas plans.
Cool - please come and tell us about it on [the ipython-dev mailing list](http://mail.scipy.org/mailman/listinfo/ipython-dev). We don't have anyone working on Android, but someone might have some useful thoughts.
This one is better: http://evernote.com/clearly/
We have a very similar object in web2py which we use to set plugin configuration options: https://gist.github.com/web2py/web2py/blob/master/gluon/tools.py#L4252 We made a different design decisions: parent.a.b.c = 1 does not create a key 'a.b.c' but parent.a is a new PluginManager, parent.a.b is another PluginPanager and 'c' is the key associated to value 1. This allows us to do parent.keys(), parent.a.keys(), parent.a.b.keys().
&gt; Yeah but as a first language, you don't need to learn both. I think we're coming from different angles. You're talking about what you should know first. I'm talking about where you should end up. &gt; You don't need to learn French canadian to speak French, that's just a dumb concept. You don't need to know both equally well, but certainly, you should be able to understand both if you plan to be fluent in French. What are the differences between Python 3 and 2? * Write `print foo` instead of `print(foo)` * Do `open(filename).read().decode("utf-8")` instead of `open(filename, encoding="utf-8").read()` * Do `raw_input` instead of `input` * Some modules have moved * Some things return iterators instead of lists (`map`, `filter`, etc.) This is not an imposing list of stuff. If you are good at Python, you should know these things. Do you need to know them all when you're just starting out? No, but that's because you've just started. Use whatever language your book uses, but be aware that there's also another related language out there that is almost the same but with minor differences. If you get done without having learned these differences, you quit too soon.
That one may be better. Edit: Ooh, with Readability there is a bluish-gray on a darker bluish-gray option. Perfect.
no it doesn't work with south, but that's definitely on my todo list now. uuid presents a 16 byte number while slug consists of alphanumeric characters, hyphens &amp; underlines for use in URLs. So the main reason this app is made is so i can have randomized urls for my models. Didn't try the UUIDField myself to use it for URLs, so i can't really say is there any advantage
Or I faked it very well! Thanks for the compliment. I've since found out there's a few more cool projects like android-python27 and Kivy out there. I'll blog about it once I successfully sort out what they all are up to.
Useful, perhaps, but I suspect you'll never get an environment for creating iOS apps on iOS past the App screening. On Android it is not a problem.
Well I've created an APK using SL4A Python, which has been possible for quite a while from Eclipse on a desktop OS. The interesting thing I've done here is I realised that AIDE has come far enough that this can also be done on Android itself.
That would be very cool, and I'll be working on it as I find time.
Anything with C extensions is unlikely to work easily. There are ways, but I haven't touched them yet. Here is a place to start https://code.google.com/p/python-for-android/wiki/BuildingModules
Very cool, I hadn't seen PyGame Subset for Android yet. Well, actually I had seen it at http://www.pygame.org/download.shtml but it appeared to be dead. The project at http://pygame.renpy.org/ seems to be in active development. Nice find!
This would be an interesting way to bootstrap a Python development environment on Android. Combine it with http://www.reddit.com/r/Python/comments/xia3i/how_to_to_create_android_apps_on_android_with/ for even more fun.
Do you have any blog posts or write-ups about your projects? I'd be very interested to read them.
okay, who's going to take the lead?
[From the docs, "it should"](http://kivy.org/docs/guide/architecture.html#providers), but I really would like to know if this isn't the case so I can plan accordingly.
This is from Kivy's python-for-android. It looks like they have some of the native functions wrapped, but not nearly as many as SL4A. http://python-for-android.readthedocs.org/en/latest/android/
Why would I want to host a website or do webdev on an Android device?
Because you can! And you could do something like create a custom database application for yourself, especially if you're comfortable with Python and webdev. You could make a web interface to your phone available over wifi. You could create an alternate file browser with complete control over the features. Your imagination is your limit!
Note that eventlet also has the [exactly same thing][1]. [1]: http://eventlet.net/doc/patching.html
Our mail server crashed and we didn't have a backup of the usernames and passwords. I wrote the most insecure script ever that would check the dovecot logs, grab usernames out of it, put them in the database, then when they tried again, grab their plain text password, hash it and put it back in the database. Saved us a lot of head aches. And yes, this was totally insecure, but as a 20 year old, new sys-admin, it was pretty cool and made me get into programming.
I actually had a similar experience. This one isn't that impressive, but it was pretty good for a simple script and it worked really well. I was taking a photography class, and was studying for a test on exposures (basically, as you adjust one aspect of an exposure you have to compensate with the other, but the measurements you use aren't 100% intuitive). It wasn't going to be that hard, but the thing is that our book didn't have very many examples, so I was afraid of making a stupid mistake due to lack of practice. So I made a script that would generate random exposure problems. It would give an exposure (say, f/4 @ 1/125), and either ask for an equivalent or an exposure with more/less light, then give the closest answers (all of these have more than one answer, like asking for a fraction equal to 1/2, but it gave the nearest answers). I ended up getting an A on the test. -J
Nothing too awesome. Just threw together a script to roll 1d6 20 times, for a probability assignment my sister had a couple years ago. Took me like a minute. Hopefully in the near future I'll find a better opportunity.
i converted pictures from photoshop format to jpegs so an old lady could look at her pictures. there were thousands....
I made a kris Kringle script for my family! My ISP has an API where I can send text messages, do I made a list of name-phone numbers. Randomized them, ensuring that nobody got themselves. Then I send everyone a personalized message! I should make it into an iPhone app and make millions...
Normally they got the wrong username and password box, change their password, and that was their new password :D
Twilio is your friend!
At work the daily filling of a production server of files (before I was hired). Wrote a python script within my first week eliminating almost daily Sev2 tickets by zipping files from said directories individually and sending them to our local NetApp for storage. I crashed course myself in python as it's more powershell friendly than ruby which I'm more familiar with.
You didn't have to show your work?
I love python, and programming in general, but the problem is I can never figure out anything worthwhile to code. I don't know what aspects of my life could be made easier if I automated them.
Wrote a thing that looks at the author of a Guardian article, goes to their author page, downloads all their articles and then cleans up the HTML into plain output. A mod to that script takes the godawful output of a commercial mailing list creator we use and cleans it up suitable for publishing on our website.
I wrote a script that makes sense of my online credit-card transfers and automatically creates a report with pie charts and stuff with info on how I use my money (earnings vs food, clothes, bus fares, games etc). It was quite "interesting" for me as a student to get a better overview of how much I waste on useless shit...
I ran a football (soccer) aggregation site back in the day (still running but I haven't touched it in years) and I wanted to put in thumbnails with the articles. This is before any RSS existed for most of these sites so no thumbnails. The script would go through each of the articles, figure out what are the images and then go through a logical sequence to figure out what (if any) images exist that are linked to an article. Worked really well for 20+ sites that I used to draw from, a single script written within a couple of hours with testing. Not my proudest scripting challenge, most of my coding is done with PHP, I wanted to learn some Python and this seemed interesting to do with it.
By "renders," do you mean like AFX renders?
This sounds like something the world could use. Perhaps you could post it on a forum? If you're willing, PM me with the a link to the source code. I'm curious!
used it to scrape stock of a competitor's website to see what they sold the most of
What the fuck, why couldn't you just use virtualenv...
I printed the source code and handed that in as well. I said something like, "Trust me, understanding the bisection method and turning it into this was much more of a challenge than using a calculator and robotically doing it by hand" to which he responded, "...I suppose you're right. This will do!" Hahaha
I was going to add this one :D
Hey, I think it's true. Congrats! :)
BRILLIANT! Hahahahaha, I wish you both the best! May Python bring you years of automated simplicity hahaha:)
Respect. I can always admire the use of a script to get a new perspective on business.
Haha think nothing of it! Thanks again.
I made a script that changed the color of my Christmas Tree based on Twitter hashtags. It's documented [here](http://www.austinrobertson.com/projects/). Maybe not for 'everyday life' but 'everyday in December' . 
LOL that's awesome. Just awesome. 
...or to demolish the competition
I should! Just need to find the time to learn XCode. =)
I wrote a imgur album downloader, too. It simply scraped a random page (e.g. an imgur album) for imgur links, converts them to the full image if they are thumbnails, and downloads them. I also wrote a regex-driven document deleter for the kindle document managing site, but that was JavaScript. 
how?
The more serious version (can serve multiple clients): python -c "import SimpleHTTPServer, SocketServer, BaseHTTPServer; SimpleHTTPServer.test(SimpleHTTPServer.SimpleHTTPRequestHandler, type('Server', (BaseHTTPServer.HTTPServer, SocketServer.ThreadingMixIn, object), {}))" 9090 
I did this too, but my script did 200,000 rolls! :)
Next trick : write a backup script in Python.
Im working on a Trello-like weekend project, I'll try to remember to make an API. It shouldn't be hard all my js is already using json calls to the site. All I need to figure out is an oauth authentication system + https. It's all in python!
Our company used to do an online auction for used computer equipment. I wrote a little bot that would auto-bid for me up to a specified amount. I think I ended up with like 3 or 4 pentium-4s one time! Nobody seemed to complain that my bids always came in &lt;1s after I was outbid
just this week, I wrote myself a script to cross-post to Twitter and Facebook at the same time. I spend most of my time at a commandline, I figured I should add the ability to shout my thoughts randomly into cyberspace.
There were a bunch of us who wanted to play kelly pool, but several tokens were missing from the bottle you randomly draw out of. Laptop was playing music, took 5 minutes to code up a random assignment script (press any key to hide your numbers). All assignments were also written to a text file which could be checked after the match.
I would love to be a part of this! Sounds fun! I just started Python today at codecademy.com, I think I grasp it. Also, I do HTML and a bit of JavaScript and CSS.
I once had a research paper assignment where my teacher told us ofit had to be at least 1500 words, not including quotes. Since MS Word's wordcount couldn't handle that, I wrote a script in a couple of minutes that counted the words outside quotation marks for me.
is there an australian version or a non us version of that? if not...could i check out your code? would love to get a better over view of my spending
you could have used wget.
allows easy access to files on a box you only have shell access to through a firewall for one, which is really useful in highly controlled environments. when you need a quick transfer and don't want to set up smb/dick around with network file shares. when you want to share an image or something with someone easily you can drop them a link. many more useful ways to use it, but those are just a few. very handy tool. all of the machines I use are either CentOS or OS X, so they all have Python installed and this is widely available. 
SCP, etc, blah blah I know. Sometimes it's so much easier to just transfer a file over HTTP
I don't know about individual rolls, but in total it took the character rolling process from a 20-30 minute process to 5-10 minutes.
What made you expect it?
I made a script that would extract Vocaroo play links from the text of the comments in the thread, modify them into the corresponding download links, and download the .ogg files.
DownThemAll is a browser extension that could also work.
I like to download and read other peoples github code on my comps editor. Best way to learn I think, but it sucks to have to go into each of those directories and `git pull` updates. Having multiple computers meant doing that twice. So I wrote a script. I list github username or particular repos that I want to follow in a dotfile. I linked that dotfile to my dropbox so it syncs on all my comps. Now my script reads that dotfile and checks and update/deletes repos for my reading pleasure. Peeping just becamse so much more pleasurable.
I use the built in scheduler to do that kind of thing. 
What python libraries are you using?
I was writing interrupt-handling code for a hobby OS I program. There were about 30-40 basically identical lines, and I didn't want to write them by hand. So I fired up an interactive session and used Python to write the lines for me.
Seeing as I'm currently pretty shitty with python I'll take that as a complement.
How did you make the program send you a text? Could you link me to a resource about how to do this?
I feel like I live in Michigan and therefor don't get to know.
Hahhhahah perfect
!!! I was actually going to create something like this within the next month or so. Mind if l had a look at your code?
Well-written scripts: the gift that keeps on giving. Cheers:)
I can maybe see cumbersome, but not annoying. And it's only cumbersome if you're doing specialized programming
Post it up, I'd love to see it!
Here's a couple more successes: &gt; Hapfair, Asylum of the Fierce Werewolves Cobcorrie, Vault of the Old-Fashioned Thieves And a couple more hilarious ones: &gt; Onyxschyppe, Sewers of the Jolly Stoners Clockwithy, Culverts of the Unsightly Otaku Tethemire, Hobble of the Sexy Presidents
This is exactly what I made for my first python script! The only difference is that I had it send an email instead of a text message. With this script running I was able to grab the best profs even though I was a freshman (Upper level students register first, and the incoming freshmen usually get stuck with the worst profs and classes). How did you send the text messages? I was trying to find a way to do that, but every service I found required you to pay per message.
My mom wanted me to send her pictures of my son every day. I didn't trust myself to remember to send a picture every day, so I wrote a script that picked a random picture out of a directory and e-mailed it to her. That directory is in a dropbox folder, so I could take pictures with my phone and upload to that directory with a few taps. That way I could build up a few days buffer, and not have to remember every day.
&gt;I have friends who are split on the issue about whether or not linux will last in the future. What's your opinion? WTF does that even mean :/?
I need a job so I wrote a script that checks the library's website for new jobs and reports back to me yes or no, and if yes opens the web page in Firefox for me
Got tired of hunting and pecking with the remote control when searching Netflix on my Roku. Wrote a script that sends a search to the Roku...one keypress at a time.
Nah, nothing that fancy. I got the name pieces from something else (it's been a while, so I can't remember what), then I just cut them up so that any of them could be paired with any of the other ones. They just follow that sorta-kinda Middle English type of spelling. Like "Hylles" instead of "Hills." By request, [the source is available](https://gist.github.com/3243799). Note that it uses libtcod for random numbers, as it's meant for a libtcod game. It can simply be switched to the random module, I just didn't. I might as well do it for the Gist version, though. EDIT: Switched it over to `random`.
LOL I feel your pain hahahahah
HAHAH. Using python to trick our parents EVERY DAY, FTW
I have been playing FFR for a long time (it's like DDR but on the keyboard). There is something called "average rank" which I've decided is not only a decent ranking of how well you're doing, but the funnest rank to improve. Problem is, there's no way to know which song to play next. If 500,000 people have played a song and I ranked 1000, that's fine. However if 2000 played it and I ranked 1000 from years ago, I can drop my rank by a lot with just one play through. The data is not easily accessible, so I scraped the song list pages for my rank and number of players on each song. The script outputs an up to date list of songs I should play next, along with the expected change in my rank if I play once - it's surprisingly accurate.
This may be the perfect thread for you then.
Not sure which were used, but urbllib, htmlparser, and writing a csv file would work.
You're so chipper. It's rare.
LIFE IS BEAUTIFUL MY FRIEND. LET'S ALL BE CHIPPER :D
This is amazing. How does the -m flag work like that? I googled but the explanation is much too technical.
I have a Python script that checks my various email accounts hourly and stores incoming mail counts (total mail, total size, new items, unread items, etc) so that, over time, I can judge how effective I am at keeping my inbox at zero. It also sends me a text if it sees a massive influx of email, which is usually indicative of a problem at work that needs addressing ASAP.
[This](http://www.flashflashrevolution.com/levelrank.php) page contains a list of all songs - and your rank if you're logged in. That page has a link to every song page [like so](http://www.flashflashrevolution.com/levelstats.php?level=328). However, I just used the last part of that URL "level=328" and cycled through 1 to 2000, skipping the missing pages, to get the number of plays.
this whole comment section is so deep
No I used wxpython They had just added the styled text control (scintilla I believe ) first time I saw it I was thinking "man how easy would it be to make my own editor" sono did it and in a few days it was good enought to keep building it in itself So I spent all my after hours coding playing around with it I called it Pyper. 
**TLDR: I named my first-born son with the help of a Python script.** When my kid was born I had a name in mind for him but no one else seemed to like it. So my choice was overruled and my wife and I stalled for a long time on what to name our kid. Time flew by and we were a week or so from the supposed deadline to name the kid. Being Chinese comes with its own unique set of strange cultural practices. One of them is getting a geomancer/fortune teller to come up with a name for children. My family didn't do this (I'm guessing because my dad is literate), but my wife's family did (which I guess is due to her mom being illiterate). I don't believe in that fortune telling crap, but it looked like it was the only way to break the deadlock. Pay some guy $88, and he comes up with a list of Chinese characters that would be suitable for my son's name, based on when he was born. A brief intro to [modern Chinese names](http://en.wikipedia.org/wiki/Chinese_name). We all have a surname or family name passed down the paternal family that is one (rarely, two) Chinese character(s). It is then followed by one or two more Chinese characters, which will then make up your entire name. The fortune teller came up with two sets of characters, one for the first character following the surname and another for the second character. I then wrote a Python script that spit out all permutations of his name based on those Chinese characters, printing alongside the [hanyu pinyin](http://en.wikipedia.org/wiki/Pinyin) "translations". The script originally read out the names in Chinese too, but we found the computer voices irritating so I removed that feature. Wife and I went through that list of 144 permutations, crossing out all the names that look bad in English/hanyu pinyin. We then read out the remaining names one by one and crossing out those that sounded bad. That produced a list of about 12 names. I liked one of them a lot, wife didn't like any of the names. We were now days away from the deadline. In the end, we went with the name I picked from that list. The script isn't exactly clever in any technical way, but hey, I don't know of that many people who got named with the aid of a Python script.
&gt; I have friends You should fix that
Let me elaborate: this man is well into his 70's, I'd say. Not exactly up-to-date. Although, to be fair, he is a brilliant professor - and I think what he meant was that he didn't know it was possible to do it so easily and quickly. His face had more a face of mild surprise than confusion or disbelief:)
This is perfect, thanks a lot.
I tried wget -m first, but it gets really tricky due to the javascript they used. Was easier to rock out the html parse tree imo.
we would need someone who has a good base knowledge of Django, so anyone? Also, frontierman have you ever worked on a web application with Django before?
Used a google voice script i found to send the text message. I think it was this one. http://code.google.com/p/pygooglevoice/ http://pastebin.com/Yf4JUJqm
I used google voice. Here's the script if you're curious how it works. http://pastebin.com/Yf4JUJqm http://code.google.com/p/pygooglevoice/
Nice OP! Did you do it on your phone or laptop? 
I have to try that first bullet out myself! Hahaha. And I agree. I was tinkering with some lame script side projects and wondering what the development community was doing. So I figured, "why not ask?" Gotta love reddit&lt;3
Ah. Good ol' restart-a-couple-times-if-it's-down sysadmining.
This reminds me of http://code.google.com/p/xee/source/browse/XeePhotoshopLoader.m?r=f16763d221dfca6253983824b470adf553a19e06#108
Huh? Neither wget nor Beautifulsoup are going to handle JS modifications to the DOM...
&gt; Just a little script I wrote to grab **all images** from a **4chan thread** That's a risky script.
[This I guess](http://switcheroo.igautomation.com)
For those of us just learning, can you help by providing an example or a link to the standard you're talking about? I'm looking at the [Python PEP page](http://www.python.org/dev/peps/), but I can't easily find what you're talking about. As an example, maybe he wrote: "BlahBlahBlah" but that should be "blah_blah_blah" according to ___.
Shell alias. Fuck yeah.
if you have an iPhone, you can also use [prowl](http://prowlapp.com)
I feel like after jm_ we've been progressively trading off "hardcore" for "practical." We really have come full circle, haven't we?
The arXiv post mentions that the code samples can be downloaded from http://www.mcs.uni-oldenburg.de/58424.html However, it appears a password is required. Is there another way to get the samples?
I wish that would work over WiFi
May I ask why you didn't use Imagemagic or similar?
I wrote a post about a similar task: [batch convert raw image files to jpeg using Photoshop and Python](http://yoo2080.wordpress.com/2012/07/01/batch-converting-raw-image-files-to-jpeg-using-photoshop-and-python/)
I'm coding this right now just finished the file monitoring and parsing part though and just started on the autopilot, did you use anything for storage if so sqlite or just pickle?
Once you get the ball rolling, you'l soon have a constant stream of ideas on what to automate. It just takes some time to get into the mindset of it all. 
Make sure that's not your real password. :(
pagescrapes my uni's timetable, converts it to an ICS format and google calendar does the rest!
Indeed.
You can do it with [matplotlib](http://matplotlib.sourceforge.net/users/screenshots.html#pie-charts).
I wrote a script that calculates an MD5 hash for every single file in a given directory (or directory tree) and then removes any duplicates it finds. It has served me well in getting rid of duplicates in my music and picture collections. I have a bad habit of somehow having multiple copies of various files.
Not sure what to choose. * [Heating my beer](http://www.garshol.priv.no/blog/130.html) * [Solving Sudoku](http://www.garshol.priv.no/blog/178.html) * Indexing all MP3s on my laptop and playing them in random order (Linux, way back in 2004) * [My own RSS reader](http://whazzup.garshol.priv.no)
I'd say that's also fairly clever. What's the runtime on 125,000 lines of engineering calculations?
I love me some USAA.
except that python avaible in most Linux box and avaiable as install in Windows too.
Definitely my eh mah gerd converter, http://pastebin.com/3Fh0YUY1
Ctrl-R SimpleHTTP. History fuck yeah
I wrote a script that finds the most recent version of a tv program in my torrents directory due to the S00E00 format, and then it checks the pirate bay for a new episode and adds it to my torrent client. It's not perfect but it saves me manually searching ~20 programs every day, and I just have to quickly check what it's added.
What did you win?
If heating the beer isn't a joke I fail to see why would you heat your beer instead of some other beverage &gt;.&gt;
I did that with albums to listen to. It just randomly queries one album from Banshee's sqlite database.
It moves them to a separate folder.
Until I upgraded to a paid plan, my free webhosting required me to log in to a control panel every two weeks to "prove" I cared about it. The same webhost also allowed python, and cronjobs. (It was that and the fact it was free php and mysql before that was really a thing that persuaded me to go for it). You can see where this is going. I used Mechanized to write an extremely simple script. It needed my password, but actually submitted it as a (hand-coded in javascript) MD5, so I just put in the hash. Set it up to run on the 1st, 11th, 21st, and we're good. Later on, I discovered they had blocked the useragent, which is hard coded into Mechanized, so I hacked it a little. Eventually it stopped working - I'm guessing they ignored logins from localhost as I was receiving no error messages. By then I had always on internet at home, so I set it up on my home computer.
Spiderman Rambo 
Can you go into some more detail on the 911 access? This is very relevant to my interests. 
I just recently wrote a script that checks the status of a package that has been mailed to me and sends me an sms when I can go and pick it up at local store. The service itself sends me an sms but it has ridiculous delay of 30 minutes or so. Did I tell you I'm a bit impatient once in a while? Both services have only web interface so I wrapped them up in simple Python classes using BeutifulSoup and requests libraries. :)
FYI you might want to escape some quotes if you, like me, stuff that line into your .bashrc or .zshrc this one works for me: alias python-httpserver='python -c "import SimpleHTTPServer, SocketServer, BaseHTTPServer; SimpleHTTPServer.test(SimpleHTT PServer.SimpleHTTPRequestHandler, type('"'"'Server'"'"', (BaseHTTPServer.HTTPServer, SocketServer.ThreadingMixIn, object), {}))" 9090'
Your mom is a douche.
Some of my friends at my former place of work and I started pooling money to play Powerball lottery. It was a buck a week per person for a chance to win millions. We regularly forgot to play or to check numbers and there's the ever-present risk that someone will not show up on Monday and later send a postcard from the Cayman Islands after absconding with our winnings. Anyway, I wrote something to make it easier for us to get rich. It generated the numbers, emailed them to the members of the pool, parsed the lottery website for the winning numbers, compared them to our numbers and emailed the results highlighting the number of matches we made. Worked, but never got rich. :(
My iPhone didn't want to (for some reason) restore photos from a recent backup. After around an hour of Googling, I decided to whip something together in Python. The script successfully recovered all photos from the iTunes backup, and copied them to a folder on the desktop. I was amazed that it worked. All of this in under 15 lines of code. &lt;3 Python.
My extended family does a secret santa gift exchange for xmas every year. I wrote a python script to email gift-givers the name of their recipient. It could take into account the constraint that spouses can't be assigned to each other.
I used to have a scrapper that would hit some anime torrent site (can't remember which one) that refused to publish an RSS feed and would insta-ban you if you asked about it. It would run at random intervals of 5-15 minutes and populate my own personal RSS feed :) I did eventually get banned though 
I keep all my music in AAC format in iTunes as they're smaller than MP3 and I can therefore fit more on my iPhone/shuffle. I created [a script](https://github.com/unpluggd/BurnAudio) to convert a playlist in iTunes to mp3 format, name all the files consistently, and burn it to a CD which I can then play in the car. It'll estimate (badly) whether the playlist will fit and bail before converting to MP3 or before writing to disk if the playlist is too big, and allows me to tweak the quality/filesize.
Jump on it :D
 f=open("text.txt","r") filetext = f.read() f.close() unquoted = "" inquotes = False for c in filetext: if c=="\"": inquotes = not inquotes elif not inquotes: unquoted += c print unquoted words = unquoted.split(None) print "Words: %s" %len(words) raw_input() That simple.
Ex-gf liked some comics from her childhood. Wanted them on iPad. Pointed me to some site with links to what I think was ImageShack (or Photobucket) albums of pages. Wrote a Python script to automate downloading, sorting, and PDF-creation :D
4chan has moderation. Non-NSFW boards actually are non-NSFW, you know. Now if he'd said /b/, that's another story...
Mind sharing?
I wouldn't mind a copy of that, for learning purposes. :-)
Woah.. this thread is inspiring. Kudos to all of you, who used Python to create such amazing things.
It's not. Also not my real phone number. I didn't see much point obfuscating the email address.
I made a script to scrape reddit posts and comments using [mellort's api wrapper](http://mellort.github.com/reddit_api/) then put them into a mysql database. Now that I have the data my plan is to analyze the data for various curiosities like what time of day/week is best to submit links (is this different for different subreddits?), how quickly after a post is made do you have to comment to have a decent number of people still see it, how controversial are various subreddits, what is the ideal length for a comment, how much better to comments do if they have links, etc.
50 line script records my time on the job and creates a ready-to-sign .doc at the end of the month.
You know we have mail alerts?
Please post the source! This would be tremendously useful.
You can activate the scheduler whenever. So basically set the scheduler to always turn down uploads to 1 kb/s and turn off the scheduler. If you need it now, then right click the icon and turn on scheduler.
Why are you crushing my dreams?
A script that uses Selenium to fill in a bunch of fields from a Wordpress blog about iTunes apps. It pulls all the data from the App Store via Beautiful Soup, only needs a csv file with the app URLs and works in batch
used it to scrape prices of a competitor's products and automaticly sugest me prices a few dollars lower 
Well, one of the professors around my university is around 65, programs in Fortran and is known worldwide for his computations
This kind of thing is also explicitly banned at my school as well. Looks like a fun project though!
python -m SimpleHTTPServer 
Sadly, downthemall isn't available on Chrome.
People like you are why my uni's system is so slow -___- That being said I've never had a problem getting a class since I've always been an upperclassman (transferred).
Adorable.
I've always wanted to have a text message feature in scripts, but I'm too daft to find something to implement this, could you provide me with a link to the module you used or a tutorial for it? Or even a pastebin of the section that does this from your code?
It would be funny if you wrote them a script to ban people who asked about it.
If your college's website can't handle a page refresh every two minutes, they've got problems.
I have the opposite problem. She knows just enough about programming that she assumes I'm capable of anything ;)
1 if you know what you're doing you shouldn't be doing much wading 2 if you enjoy coding letting the IDE do everything for you sucks, I've never used an IDE for help writing code, java or otherwise 3 the verbosity of java is there for a REASON, it's a fantastic object oriented language
How did they find out? I would think they would encourage their students to exhibit creative thinking like that, as long as it's not explicitly against the rules. 
That's very large for what I want. I really don't need so many features. And I've already written it so I might as well stick with it.
Good question. I think they could tell he was reloading/checking the class status every couple of seconds for several days.
Upvote for you sir.
First useful python script i ever wrote was a little program to scan my downloads folder each night, snag all the .jpg, .png and .gif's from the day, check for duplicates, and then move them to a dated folder on my fileserver. Definitely not as cool as some of the programs people write, but damn it's useful.
The problem with what you're saying is that you're forcing python into android, when it's practically the same language as Java. And people don't want a bunch of newbie python developers working on android stuff, Java gives a solid foundation of actually needing to know what's going on before you can just code away
Question to everyone that has scripts that run on the web daily, where do you run them from? Do webhosts support python scripts or do you just have your own server? Whats the cheapest way i can set up one?
Extremely doubtful - as a server platform and as a certain type of development environment (especially the kind that focuses on developing for server platforms) *NIX and its descendants have several key advantages over Windows and OSX and other consumer/end-user-focused platforms. OSX itself *is* a *NIX-based platform (POSIX-variety), although it has given up several of the above-mentioned advantages in order to focus on the end-user experience. 
from what I can tell it wraps selenium up in a more pythonic api. that seems to be the goal anyway. http://seleniumhq.org/
Maybe this helps -&gt; http://docs.python-guide.org/en/latest/shipping/freezing/
You could use [tkinter](http://docs.python.org/library/tkinter.html), or one of the other GUI bindings out there. I'm not sure which this is, but it looks complicated to make.
That is one seriously pretty Tk GUI. I didn't know Tk could look that nice!
It's a good thing then that "people like me" know what they are doing.
Good point. How about [this link](http://www.igautomation.com/switcheroo/?startUrl=http%3A%2F%2Fwww.reddit.com%2Fr%2Fpics%2Fcomments%2Fqqx2o%2Fnever_in_my_many_years_of_eating_poptarts_have_i%2Fc3zsgf7%3Fcontext%3D1)? I spend once a couple of hours on a switcheroo like [that](http://www.reddit.com/r/pics/comments/qqx2o/never_in_my_many_years_of_eating_poptarts_have_i/c3zsgf7?context=1). Decided not to do it ever again and created a script that follows the links. Then made a website out of it.
LESSONS No particular order: 1. I started making real progress when I completely separated the 'operational' logic from the GUI. At one point I realized that it was easier for me to think about/draft the GUI without worrying about the underlying code. That's when I seriously got into Tk. I basically asked myself what the optimal program would LOOK like if I could buy it off the shelf. That forced me to think a little more clearly about how the controls should be organized, which in turn forced me to be clear about the underlying class structure. Now, I suspect that's the wrong way to do it. But it's somehow easier for me to start with the GUI and let everything flow from that. 2. I read a bunch of books. Over and over. Until the syntax started to gel--even if I didn't understand the intent of the syntax. That really helped. 3. I wish I had better understood the standard library. It's shocking how much functionality is included. 4. I really struggled with object orientation in general. For some reason I couldn't get my head around the class/instance distinction, or why that would be a particularly good way to model real-world entities. I was on an elliptical machine when the conceptual force (for lack of a better expression) of OOP hit me. Hard to explain, but one of the side-effects of learning Python is that OOP design patterns permeate my daily thinking. I'm a senior executive with a major company; I now find myself restructuring management problems along OOP and MVC principles. MVC--as in model, view, controller. I'm an evangelist for the idea that computer science in school (undergraduate level in particular) as a form of robust training in critical thinking. 5. I forgot to mention above: with TK, build one perfect box (frame), perfectly labelled, with nice colors and borders; then stuff similar boxes inside that, always copying the same padding and other thematic graphical elements, and always using the 'grid' layout manager. It's all a bit vague--I'll let you know if I think of anything else! 
Fire up a web browser, point it at the IP address of your new server. http://192.168.0.4/ etc.
I forgot to mention this book: http://www.amazon.com/Learning-Python-Help-Programmers-Mark/dp/1565924649 And everything else by the talented Mr. Lutz. I really appreciated his pacing and clarity.
[Here you go](http://hg.ausiv.com/daily-picture-email).
What if the win verification step didn't work?
&gt;I tried a few other GUI libraries, but didn't find them to be quite as powerful or as well documented. Did you try [PySide](http://www.pyside.org/docs/pyside/)?
Thinking about user interfaces first isn't wrong at all. For a program like this, it seems the interface is very close to the requirements, and so essentially you're combining requirements engineering with interface design. For larger, multi-team projects it may lead you in the wrong direction but for this project it seems A-OK.
You just gave me a python boner. Excellent work! Looks great. I had no idea that TK was capable of looking so clean.
This is pretty cool.
[I've uploaded it to github.](https://github.com/pomber/depto_scraper) I would like to hear suggestions or improvements to the code
Don't forget PySide (Qt implementation)! 
I can't get voice.login() to work, after peaking at the source I'm not too surprised. Does this work for other people?
That's quite nice. Python 3.0 ?
Yes, actually. I was at a friend's house when I posted my original comment. He's a big time DF player and showed it to me afterward.
just in case you forgot or something, the last 2 buttons for simulation both say twelve years
haven't heard about it but.. isn't it a bit outdated? 
Is it [this ridiculousness](http://www.reddit.com/r/technology/comments/xnp8a/ucf_student_penalized_for_writing_program_to/)?
Naw, different institution.
Last year, I spent about 2 months to write a long script. It can automatically scrap the new options of some newspapers from their website for every day. And put them on a forum. So some authors who write the options for the newspapers could see their works. Later, the script could automatically put the options on a blog. Now, every day, about 200 authors will read the blog to find their own options. The best thing for me is that those authors admire me a lot. ^_^ see blog here(Chinese): http://shiping.sinaapp.com/ 
Has that proved to be easier than using traditional backup methods? 
I kept track of my bills in college with a Python script. I was in charge of all of the money, so the bills split 4-ways would come to me. I always paid the bills on time, but being college students not all of my roommates could make the deadline. So I made running totals of what everyone owed me and stored them in a sqlite db. It made life easier when someone would ask me how much they owed me and I could just run the script to find out.
Did you do it? Mylawd.
Gonna do this. Good idea, thanks.
With a better license than PyQt! (LGPL instead of GPL)
I would say yes. It's a script to back all my stuff up to a WebDAV that I have. The advantage to this is that I can access it from anywhere: my computer, iPhone or iPad. And, it's connected to the web; not a physical hard drive that I have to plug in. Plus, I set up a `cron` job so that it runs weekly. Automatic backups = an ease.
"Work smart, not hard." :)
I'm really happy that people seem to like my UI. Here's a picture of the full UI, if anyone is interested. http://imgur.com/uRmez The program lets you model different academic programs under different market conditions (or simulation environments). My previous picture only showed the controls for the programs, not the controls for the simulation environments. The "Event Modeler" module lets you quickly generate disruptive enrollment events (sudden spikes in interest, for example) and apply them selectively to different programs. The buttons on the menu bar let you hide modules. I found this helpful when giving presentations (so the audience wouldn't be distracted by the event modeler, which is animated). Again, the UI is all Tk (and Tk's cousin, tix).
Makes sense. With the limited screen real estate that's where you'd have to start. 
Yeah--but not too outdated for a noob like me. And I really like the clarity of his writing.
Python 3.2 with matplotlab (alpha version for Python 3.2). 
Thanks for noticing! Actually, that's because I ran the same simulation environment twice. My original post didn't include a full picture of the application (one of my recent comments in this thread shows it). The program lets you model an arbitrary number of simulation environments and then switch back and forth between them.
Sigh. Nope. I have no idea how this escaped me. Looks awesome.
Could you post a larger image of it?
The concept you want is the setuid bit, as mentioned by another poster. Not actually sure how to do this on Windows.
You can basically do one of two things. One is distributing the code and the other is building a package for your desired platform. I recommend distributing the code because it is easier but the downside is you need to be able to compile all the packages you are using on your production server. The first step in distributing code is to create a requirements.txt file. Do this by enter *pip freeze &gt; requirements.txt* at the root of your project. Next move over to your production box and install the virtual environment you want to use. Activate the virtual environment, *source env/bin/activate* and the install all the packages, *pip install -r requirements.txt*. Then from there follow the virtualenv setup instructions of the server you are using (uWSGI, gunicorn, or mod_wsgi). 
Also think about using something like fabric for deployments. Trust me this might seem like overkill setting up for a simple deployment, but it saves HOURS. 
Try lxml , it can do html realy fast. Like 18 times faster. Cant find benchmarks, on the phone. Great job anyhow.
Have it run as a system daemon with cron/launchd as the system. Then have it delete itself afterward. That way it will only run once
Manifests are for .NET applications.
IIRC I used lxml too but source html is/was broken so no dice there.
Actually, they are for any kind of .exe. You can even put one in a py2exe executable.
Interesting, I didn't know that.
Pass it a list of 1000 urls to discover why you still need a queue. 
I'm not sure how much Python you've done, but if you really think Java and Python are practically the same language, you're doing one or the other of them very wrong. As for not wanting newbie Python devs working on Android, I think we must come from communities with different values. I encourage anyone interested in programming to work on whatever platform or project they find interesting in whatever language they find easy to learn. You can't become an experienced developer without first being a newbie.
I made a Python script that could handle transposing of really large matrices (read-in from delimited files) by transposing sub-matrices then gluing it back together. Worked for the gigantic matrices that couldn't be transposed entirely in memory, and felt kind of proud / smarter after getting it to work. Even though I'm sure there's some ready-made, better solutions, it felt good programming it myself.
Using multiprocessing.pool would avoid the issue of spawning a ton of processes. With this example, one could simply use map. For something more complex, apply_asynch could be used. I very rarely use Python threading, but isn't this example exactly the situation that it's made for? Shouldn't doing several slow IO operations simultaneously be something that that the threading module is good for?
There's a shorter version, here you go: python -c "import SimpleHTTPServer as h, SocketServer as s, BaseHTTPServer as b; h.test(h.SimpleHTTPRequestHandler, type('S', (b.HTTPServer, s.ThreadingMixIn, object), {}))" 9090 But yes, I would like to know if it is possible to make it shorter than this ...
hahaha
GIL?
Although I am pretty sure the op is just trolling. I will say that both Jython and IronPython do not use the GIL and can be multithreaded. As well stackless python does not contain the GIL, with pypy making tremendous performance improvements to CPython.
&gt; Ruby is way better anyway. "*CPython and CRuby* use GILs." http://en.wikipedia.org/wiki/Global_Interpreter_Lock
You're a poor troll. Ruby has a GIL too, and it is less developed than the python GIL. See a talk by David Beazley on Ruby's (he's of python GIL fame and founder of SWIG). http://blip.tv/rupy-strongly-dynamic-conference/david-beazly-in-search-of-the-perfect-global-interpreter-lock-5727606 
&gt; Ruby is way better anyway. Them's fightin' words, son. Anyway, Python takes the approach that threading for parallelization can be much more confusing, painful, and dangerous than simply using separate processes. For instance, without the shared variables, there's no need for synchronization techniques for variable-related operations. Do keep in mind that there are all kinds of libraries for doing process-based parallelization in Python. Also, Python generally takes the approach that readability, cleanliness, clarity, and elegance are generally to be considered higher priority than performance (extreme examples excluded, of course.) In other words, it takes Donald Knuth's (author of [The Art of Computer Programming](http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming)) quote "premature optimization is the root of all evil" to heart. For code for which high performance is extremely important, most of the Python programmers who know what they're talking about will admit freely that C is a better option. Fortunately, Python has some great hooks for talking to C code. Scipy, a great and widely-used library for sophisticated number crunching is written largely in C, but intended for use pretty much exlusively as a Python library. And, finally, I see what you did there.
Say I move the entire virtualenv to the production server. How would I go about making apache/nginx work from inside there? That's what confuses me. Would the wsgi configuration let it know?
I imagine everyone varies. My main daily use of python is getting calibre to download a set of newspapers and email it to my kindle and that runs on a rooted [pogo plug](http://pogoplug.com) I have in my house. Beyond that, many webhosts, eg Dreamhost, will support python and it's always an option to use your own dedicated or virtual server.
Here ya go: http://stackoverflow.com/questions/130763/request-uac-elevation-from-within-a-python-script/11746382#11746382 The code is at the bottom, and should be able to be modified to suit your needs.
In the words of Bill Gates, you should hire smart lazy people because they'll find an easier way of doing things.
I've been using multiprocessing.pool.ThreadPool's imap_unordered for this kind of thing with in the last few hours actually. I'm not sure if the pool is supposed to be as large as I've got it set to be, but its working fairly well so far.
Python supports it through os.setuid but whether the underlying OS lets you do it depends on how Python was built, whether PAM is setup right, whether you're using SE linux. You're right that its not something you can rely on unless you're controlling a lot of the platform.
Not sure if this is what *the best* programmers do, and I know this doesn't really answer your question about videos, but someone once instructed me at the beginning of learning to program that the best thing to do before coding anything (if we're talking about steps to take), is to break things down with a pencil and a piece of paper. Has been the best advice I've ever had. You can't really get good at sitting down and busting out code until you have learned how to take an idea or problem and break it down into the components you will need to solve that problem or realize that idea. I've found that just using visuals or pseudo code is best so that you don't get too clouded or overwhelmed by what you're supposed to be writing down in actual, syntactically sound code. Once you can do this, you will get to the point where you can start coding form the get-go, as I imagine the more advanced programmers do. 
Not Python specific, but the [Destroy All Software screencasts](https://www.destroyallsoftware.com/screencasts) are very well made and I would definitely consider him to be an expert. Most of them are about Ruby though.
Idle
Yes! The best advice to anyone is to buy a whiteboard, big or small. If you want to spend a lot of money, getting a tablet could possibly kill two birds with one stone. Pencil/paper work too, but when it comes down to it, you do a lot of erasing and fixing things.
I'm not sure exactly what you're looking for, but if you want to see the work of some good programmers, you could look at some of [Peter Norvig](http://norvig.com/)'s stuff. He's a really good programmer who's currently the Director of Research at Google, and he's posted a number of elegant programs on his website (including many in Python).
I've always thought no one used IDLE.
There are the Play by Play videos on [Peepcode](https://peepcode.com/), which are sort of what you describe. I would recommend to watch the older ones first. They are not Python-specific, but they talk a lot about the process of programming in general, TDD and common or useful programming tools and techniques. Really, there is a lot to learn there!
I'm glad you found this thread, it's been an inspiration
Definitely. I use Dia and throw together some diagrams, just because dragging boxes around is easier than erasing, you can save and print copies and stuff. Normally I'll go through a couple architectural iterations before I write a line of code. Redesigns that could have increased the total development time by an order of magnitude if I'd discovered their necessity after I'd already written a bunch of stuff. The other nice thing about using UML is that anyone else familiar with UML can look at the diagram and have a better understanding of what it means because you're using a common language.
I usually just look at the source code of better programmers than I and of the libraries I use (like Requests). Pick a few, watch the repos, read the issues and pull requests.
Honestly, watching advanced programmers code isn't going to be terribly useful beyond inspiration. I don't mean to put you off doing it, but don't go into it expecting to see techniques you can use. The reason for this - and it applies to many things not just coding - is that experts have enormous interior knowledge to draw on which a beginner lacks. As a result of this experts do many things a beginner cannot, or more importantly should not, attempt to copy. An example of this might be going direct to the code without planning (an expert may have solved the same problem a dozen times before), or using advanced language constructs. Expert coders write software in a very different manner, and it can take years to build the right experience and pattern recognition to do it in that fashion. Until then, keep trying and experimenting, and don't ever stop learning.
I wrote an imgur album downloader too! I used basic http sockets instead of nicer libraries, but it did its job quite well. It has downloaded over 20 thousand images, most of which have never been looked at because I didn't really care about the pictures, I just wanted to see if I could do it. :-)
Wow, awesome. https://live.gnome.org/Dia/ Googling dia gave me some other results so I figured I'd just post the link here to save some extra work.
web2py isn't the most Python philosophy oriented thing to be learning either...
Yes.
Seconded about the clarity of his writing style, I have picked up a few other books but Mark Lutz just does such an excellent job of explaining concepts and technicalities that I keep going back to his books.
For many people, pen and paper are a good way to determine the problem they need to solve. Of course, at the same time, too many managers consider any time you spend with hands off keyboard as "wasted time". Reading documentation? Wasted time. You should be coding. Talking to the users? Wasted time. You should be coding. Discussing the problem with your coworkers? Wasted time. You should be coding. I've found that the best programmers are the ones who have the least hands-on-keyboard time and the most marker-on-whiteboard time.
I use a micro Amazon ec2 instance. Mostly it's free, when I use it a lot it's a couple bucks a month, but still super cheap. You get full root access on a Linux VM with great uptime and fast bandwidth, so it works great for me.
This series is amazing. He has a few in which he uses python, but I suspect that most of the concepts readily apply to python just as well as to ruby. The screencasts are mostly about design patterns and has really opened my eyes to composing concise and well tested code.
You are definitely not a Python programmer ...
Here's another one - make random password: python -c "import random, string; print ''.join(random.choice(string.ascii_letters+string.digits) for i in range(16))" On windows I do (start-&gt;run): cmd /k python -c "import random, string; print ''.join(random.choice(string.ascii_letters+string.digits) for i in range(16))"
These people giving coding practices advice are giving good insights, but they are missing the point of this post. Watching others program is **astoundingly helpful** in developing your own abilities. I've mainly watched peers and professors code in person, but videos would be a great resource.
You're not going to pick up everything they do from watching them, you're going to pick up things they do that you are prepared to learn. Which will be a lot, even for a novice.
&gt; I disagree with a lot of the comments so far, describing top down coding, scaffolding and ivory tower style application design. Of course you're entitled to disagree, but a lot of useful software gets built in those ivory towers. &gt; Clarity. Know EXACTLY the problem you are trying to solve. OK, I'm with you so far, though I'd also say that understanding the solution you're trying to implement is as important as knowing the problem you're trying to solve. &gt; So, write the tests you expect to pass before you write any code. [...] If writing these tests seems to hard, you need to understand your problem domain better. What if the problem domain simply doesn't lend itself to self-contained test cases that can drive the development? Not everything is a CRUD app with convenient black and white answers. How would you write tests to drive, say, a little graphics demo that renders a Mandelbrot set? Also, for larger projects, if top-down coding belongs in an ivory tower and you prefer to start with the lower-level building blocks and test-drive them, how do you know that any of those building blocks will ever actually be used as part of the final product? &gt; Do the absolute most minimal solution that does the job (if you went test first, that passes the tests), don't over-complicate, don't try to see into the future of upcoming needs, don't optimize. Unfortunately, this policy means you can only ever reach local maxima in your design, and you can all too easily go down a blind alley where the achievable local maximum is never going to be acceptable and a completely different approach is needed. It also means you will never have anything but an "organic" design, which simply might not be good enough to deal with issues like performance and security in a reliable way. It's very hard to understand and audit code that doesn't deal with these issues systematically. If you evolve a design where everything is loosely connected but there is also no cohesion, it's going to be a nightmare to maintain it, too.
Or you can use [Read the Docs](http://read-the-docs.readthedocs.org/en/latest/getting_started.html) where it's just a matter of adding your repo URL to the RTD account. No branching, fabric scripts, etc.
For the love of all that's holy, delete the psuedocode after. Comments should describe why you are doing things not how you are doing it. The details of how you accomplish the why tend to drift over time and the how-type comments tend to not get updated. So the next time you modify the code you have to fight (cognitively) against the stale comments. It's sort of like trying to count money while someone screams random numbers in your face.
The program is focused on user-generated plugins, so I can't trust that a plugin won't use pickle. Perhaps there's a way I could issue a warning if the user tries to run something as root if pickle is imported?
Yeah but, who has $9? 
For myself, with 20 years experience, I'm not really certain I'm so "advanced" as much as senior. What I do is start everything on a sketchbook before I code. Everything. I even carry a sketchbook with me to make sure I don't lose an idea while I'm working on a project. INitially, I write down the problem I actually want to solve. If I can draw a picture of it, that's even better, because having a visual concept in my head helps me think about it more effectively than as a purely abstract idea (There's a fairly common belief that the visual cortex is better at these types of problems). You might say I make a bit of a mind map, which is sometimes true, but it's nothing so formalized, it's really a means of defining on paper for myself the relationships of the various parts of the problems and the solutions. The main problem that I find with most applications is complexity management. The reason for this is embodied in the trusim: "To truly understand a program, the programmer must become both the program AND the machine." This means to work the most efficiently, I need to be able to model the application AND the machine/environment it runs in all in my head to some sufficient detail while I'm working on it. The better I get at THAT, and maintaining sketches/notes of its operation on paper, the better I get at rapidly troubleshooting &amp; refactoring things. (Yes I know there are some systems that are simply too complex to model cognitively...but the concept of "what's needed to know" arises. Understanding the system your application is running on is every bit as important as knowing the language it's written in)
Glad you like it! I assumed (wrongly obviously) that most people already knew about Dia. Microsoft Visio is good too, but they haven't ported it to Linux for some reason, no idea why. Dia isn't quite as good as I remember Visio being at keeping your connections between things all nice and pretty, but it does the job. And it really, really doesn't hurt to familiarize yourself with UML. Yes, if you are just planning something out for yourself then it probably doesn't matter. But if you're working on a team, as many programmers are, or if you're working alone but don't plan on maintaining the software for the rest of its lifetime, then providing this kind of documentation will make your teammates and successors very, very happy.
I personally despise almost all "tutorials" because of this. It results in task-oriented programmers, who literally only know ONE way of doing a particular thing. I recently had this experience with a junior coder who, after watching a tutorial on building user interfaces using a GUI editor, tried to apply that knowledge to the idea of instantiating multiple windows of the same type.
Erm... Is that meant to be a joke?
The only non-trivial Tkinter app I know of (besides IDLE) is http://www.skencil.org/index.html I've no idea about the code quality but it's a very full-features app, although it's decades old now. There's a reason there are few complex GUIs written with Tk. It's an outdated toolkit. If you want to do GUIs, skip straight to Qt (PyQt / PySide) or wxPython. PyGTK is also an option if you're on *nix. Of these, wxPython is the easiest to get going with (the wxDemo is an awsome learning resource).
Without the code for complex Qt or wxPython GUIs I'd just run into the same problem...
Yes. This comes from the fact that it's a lot easier to foresee bugs in your design and change code when it's all just sketches on paper. Changing already-written code takes time (especially for testing that the change works with existing code.)
so...for the "realtime server" part - build a service with twisted ? 
Seriously, the Javascript folks are doing "real time" much more elegantly than the Python folks. It is very nice to have variables shared transparently by the servers and clients. Right now to do it in Python, it seems one has to do something like Juggernaut --&gt; Client --&gt; WSGI app (Flask) --&gt; redis / Juggernaut . It's kinda tedious. And now, Juggernaut is not maintained. It'd be nice if all of these are integrated into a framework, making it nice and elegant for developers to use.
I came to r/python to complain about this. I'm going through a lesson and it just stops responding or it says I've passed when clearly I haven't. It's terribly frustrating. I guess I'll have to learn python by referencing the side bar :D 
It seem like you could do something similar but with less setup using the web server Mongrel2.
I created real-time interaction layer by using flask along with Gevent-SocketIO. Flask handled the http side for static content and the SocketIO library handled the websockets for the real time interactivity. Gevent-SocketIO acted as the WSGI server in that case 
I have used Qt with C++ before and it was a very pleasant experience (QtCreator lets you create GUIs without dealing with a lot of code). I haven't tried Qt with Python, but I have used wx a bit. wxPython has many demos, some of them complex. Go to http://wxpython.org/download.php and download * wxPython2.8-win32-unicode-py27 if you're using Windows with Python 2.7, and * wxPython2.9-win32-docs-demos.exe for the demos. The most impressive demo I saw is "AUI_DockingWindowMgr.py" (in C:\Program Files (x86)\wxPython2.8 Docs and Demos\demo after you download the demos). Here is a [screenshot](http://i.imgur.com/cd9nP.png).
Similarly, if you want to write a program to make an animated movie, first write a test comparing the output of your program to a copy of your movie.
This is r/python.
I don't know about tkinter, but have you considered something like Dabo ( http://dabodev.com )?
Here's my advice (professional programmer): don't worry about watching videos of other people programming; if you want to see how 'advanced' programmers work, do so by reading their code. Fix bugs and add features to existing applications. This is, in my opinion, by far the absolutely best way to learn to code. This is also how we train entry-level developers where I work. 
Good article. In web2py we have a similar solution. About one year ago we implemented comet_messaging.py which provides a realtime server based on Tornado. Normal HTTP requests go though the wsgi app. The realtime server takes input from the wsgi app (communications between the two are encrypted using a shared, one time, secure password). All validation, authentication, and db IO is done by the wsgi app. The realtime server receives data from the wsgi app and distributes it to subscribers. The realtime server is agnostic to message content, except that clients must be authorized to subscribe, and subscribers belong to groups, so that the same realtime app can be used to multiple apps or uses simultaneously. The developers never need to program or modify the realtime app, only the wsgi app. All of this works great in theory but, if users want to move beyond a simple chat, users are required to write some JS to handle the realtime notifications. The server may be agnostic to content, but the clients are not. This has proven to be a major obstacle as it requires good js programming skills and a higher level of understanding of network protocols. I wish there was a simpler way.
That's actually quite nice. Thanks for the link.
I generally comment minimally. I use highly descriptive value/method/class names, so generally I let the code explain *what* it is doing. My naming convention even includes whether the value I'm working with is local, global, an iterator, and similar useful information in how it's used, built into the name. Comments I use to explain *why* I'm doing something. Python is awesome in it's ability to encourage writing a solution in one good way, so the problem to solve is all that's left to be documented.
[Autobahn](http://autobahn.ws/) has a good response to near realtime pubsub on the web infrastructure. It's based on WebSocket. It's interesting to follow what will come out of the [RTC-Web](http://rtc-web.alvestrand.com/) IETF WG.
it may be but it very much does not follow Python convention, eschewing them for magic (implicit global scope variables, exec instead of imports) which makes it create quite a schism between web2py programmers and the rest 
There are different levels of elegance. I disagree with calling a stateful connection elegant but I can see how people disagree.
&gt; I suspect the challenge of academic coders is that in their careers, they are focused on whatever they are &gt; working on and end up using whatever langauges are needed. In the course of a career, they might gain &gt; moderate fluency in up to 20 different languages. quite the opposite. At least in my experience, it's already a lot if they learn basic skills of only one language &gt; And every one of them will have different preferences for naming, etc. Again, from my experience, there's no preference in naming. It's just what comes out on the spur of the moment. &gt; But unlike a professional python coder/developer, they aren't focused on the languages themselves and they aren't experts in any particular language. PEP-8 is not that long, and every tutorial on python in the world uses that naming style. Not following it is simply unforgivable. &gt; As for myself, I've done some of: basic (old line numbered style), pascal, c, c++, x86 assembler, Visual Basic, SQL, php, and Net Logo... (just off the top of my head). And I'm not even a real academic yet. My suggestion is not to become one. Stay away from it. &gt; I personally like Hungarian notation you are the only one left. &gt; (or at least a simplified version of it), since it's nice to see in a variable's name what kind of data it contains. But I'm not sure how that fits with the PEP and python, especially with its lack of typing. Python _has_ typing. It's just not static typed. Besides, the point of hungarian notation is to put semantics of the type into the variable name. If you need that, you are already doing it wrong. It means that your variable name is not communicative of the content of the variable. I don't really care if something is a lpsSurname. If it's a surname, what was I expecting it to be ? an integer ? clearly not. &gt; I would say if they python folks really want to enforce these naming standards, they should make it so programs won't run unless they follow the standard. If they don't do that, then it's really just a set of guidelines. The fact that you can do something in a language does not mean that you should 
more mass? also more leverage.
I almost always try to get the UI first, even if it's just mockups and drawings. If I know the UI, I know what the app needs to do from an end user perspective. If I start with the code behind the scenes then I create all these features that may not even be useful and have to figure out how to cram them into a tolerable UI.
Watch recorded talks from conferences. When you find somebody who has a style you like, go download that guy's (or gal's) source code and read through it.
I use [Notify My Android](https://www.notifymyandroid.com) to let me know when my data analysis is complete.
I'd like that code.
&gt; If the traditional web developers become used to and like the Javascript's style and mechanism of server side development, then Python will lose. Then Python shall lose compared to JavaScript, it's not a competition. This discussion is not new, it's just the PHP discussion in new cloths. PHP made it much easier to write web applications compared to Python, the price was spaghetti code.
Of course there's a reason. Preference. It's a little deeper than that, but not by much. 
&gt; but even then the object itself could due to monkey patching. That's a good point. I've seen some horrible abuse of monkey-patching in my time, so it's possibly good to restrict it in a big project. 
[First of all](http://en.wikipedia.org/wiki/Real_time_Java) — secondly modern garbage collectors run concurrently and don't stop the world. Even with all of that it's entirely possible to write Java code that does not need any garbage collection.
Please avoid doing this, as it affects process-global state when a simple top level try/except would suffice. The problem is that you are not the only person starting threads, libraries can do that too, and if your code ever needs to be turned into a module, you've moved the bar a little bit higher than it otherwise would have been.
Black and white statements are not going to move us anywhere. Your argument was that node.js is better than Python here because it has things like websockets integrated into the HTTP layer. To which my argument is (as outlined in the article) that I believe this is the wrong way to approach things. You can perfectly fine do websockets, async, standing connections and all that fancy stuff in Python the same way you do in nodejs with Tornado or Twisted and you can even improve upon the callback base paradigm with gevent. I do not believe a single bit that exposing the standing connection to the application layer is the way to go. If you believe that is how you should do things: fair enough, I could be wrong. I see the advantages in my approach and I know the disadvantages. Based on that I drew my personal conclusion which is sticking to the stateless paradigm for the actual application code because it fundamentally scales better and has advantages when upgrading application code. I realize that it's harder to implement and not as beginner friendly but this is a price I am willing to pay. Flask's core design concepts are not beginner friendly either and it works out for me. Mainly because I learned to write better documentations (through try and error and experimentation).
lol @ 4:50
check out pyntch. I think it's the same thing, but it took it farther. it's also horribly out of date, so you'll need to use python 2.4 to try it (I think that's the version, anyway).
Check out the Google Maps API.
Tkinter I think its actually called tkinter in python 3.x edit: changed Tk and tk to Tkinter and tkinter respectively
Isn't that what keyrings are for? (Not to be a downer, I like scripts ;) )
depends on the project. there are awesome applications for it. granted, it’s not in my standard toolbox, but i bet it’s awesome for ORM stuff and the like.
you can use Google Maps API to do exactly what you want. Since it's HTTP-based, any language with http libs will do. [Here](http://hci574.blogspot.com/2010/04/using-google-maps-static-images.html) is a script upon which I built a more complex Google Maps app.
Couldn't agree more. What I've seen though is a project where you have half a dozen classes extending a base class, then adding attributes to some objects of those types in high-level scope, depending on if logic. So if you have an object with an attribute that you weren't expecting, it can be very tricky to figure out where the value of it comes from. Unless I'm mistaken, you can only really do it by grepping the code, which might be tricky if you've got 10,000 files and the attribute has a shitty name like .size or somesuch.
I have, I created a simple json/REST api to expose the data, an then used jQuery's ajax functions to consume it from js and add as markers in Google Maps
If you want to use google maps, feed the points from python to the [javascript api](https://developers.google.com/maps/visualize). The harder/more fun way is to generate the maps yourself. This can be done with [Mapnik's python bindings](https://github.com/mapnik/mapnik/wiki/GettingStartedInPython). This doesn't use google maps at all, so you need to get GIS data yourself (also available online).
Project SCM: http://github.com/jwp/py-c
Awesome, been learning Python to do stuff like this with!
SMS is just a skimmed down version of Email, you can send a text without the need for third party modules such as pygooglevoice using a lib such as smtplib and a local sendmail implementation http://docs.python.org/library/smtplib.html that said the aforementioned google voice lib is nice as you are able to have a number on the send/recieve end instead of an email address, but has become unmaintained as of late
Awesome, but why?
Title is misleading. Should be: has anyone used python to feed data to google maps. I say this because as the question stands you are asking if you could create "google maps" in python. Sorry for nitpicking. 
Oh god. Chrome is becoming Emacs.
yep, mine too. for some reason i get mildly frustrated every time i wait for the shell to open.
Personally I prefer [repl.it](http://repl.it/) for a few reasons. 1. repl.it allows you to write code in the left-hand pane which is similar to a text editor, and load your code into the right-hand pane which is basically a Python REPL. 2. repl.it has a "save" feature, which lets you write up a session in the left-hand pane, save the url, and let other people run your code. It's kind of like jsfiddle for Python (although not exactly the same, just a rough comparison.) 3. repl.it supports more languages (Python, Ruby, Javascript, Coffeescript, Scheme, Lua and some more obscure ones. There are a few drawbacks of repl.it. 1. Imports can be slow, to the point that some modules are unusable because they take too long. 2. Cancelling a command that is taking too long can't be done until a dialogue box pops up asking you to terminate. 3. No automatic saving of sessions. Which means if you cancel a session that's taking too long, you lose any unsaved work. 4. When you save a session and pass on the url, any info entered in the REPL isn't saved, only what's entered in the text editor pane. But all things considered, I'm surprised it doesn't have wider adoption. edit: Note that Python Shell for Chrome (PSFC) is partly built on repl.it. And PSFC requires a browser extension, where repl.it can be accessed from any modern browser.
[Not until it can read email](http://catb.org/jargon/html/Z/Zawinskis-Law.html). Wait, err, never mind.
Chromebooks maybe something something?
Does repl.it work offline?
New things which don't support 3.x give an impression of being busted
I am telling my high school students to get this. It is an easy way for them to get Python without much thinking. 
In no particular order: - Decent font rendering - Hardware accelerated drawing canvas - high-level widgets for tables / grids / column views - MVC design and generally good API - signal-slots design more flexible that Tkinter callbacks - Native C++ toolkit, vs embedded Tk interpreter for Tkinter =&gt; Qt is much more responsive - Modern drawing API - antialised drawing - Full featured GUI designer and IDE (QtDesigner / QtCreator) (maybe a miss-feature this, as I think GUI designers are a bad idea but the rest of the world seems to like them) - Much more sophisticated widget layout using Layout Managers. - Many more non-GUI related classes which make it a true Application Framework, as well as a GUI toolkit. However, some of these duplicate existing python stdlib functionality. - Much larger range of widgets: Qwt extension gives you plots, knobs, thumbwheels, gauges etc. That's about all I can remember off the top of my head.
i like sublimetext (it got python as scripting language, but is an editor - not an ide)
that’s true, but we’re talking about flanging type checking onto a dynamically typed language. i just said why it’s hard to do *that*. scala’s (and apparently ocaml’s) static type system has type inference and duck typing, which is awesome, but built deeply into the language and surely no trivial task. class Duck { def quack = println("Quaaaaaack!") def feathers = println("The duck has white and gray feathers.") } class Person { def quack = println("The person imitates a duck.") def feathers = println("The person takes a feather from the ground and shows it.") } def inTheForest(duck: { def quack; def feathers }) = { duck.quack duck.feathers }
Obviously not everyone saw that one.
I think what you speak of is also available in Go via Go's "Interfaces", i.e.: type Stringer interface { String() string } type ICanHasString struct {} func (ich ICanHasString) String() string { return "You can has" } func ShowAllStrings(s Stringer) { s.String() } To which `ICanHasStrings` is now a valid type for the `ShowAllStrings` method. 
Eclipse with PyDev. It might not be everything you want but it is a pretty advanced IDE. 
ipython notebook
Isn't Chrome already much bigger than Emacs?
well, I gave you data. It's up to you to decide what to do with them. I work in academia against my will (my cv self-sustain itself and makes it impossible for me to get a real job) since 10 years, and I curse every single day.
Sorry, I wasn't paying attention, and I meant to say "configuring logging" not "logging". The python docs here (http://docs.python.org/howto/logging.html#configuring-logging-for-a-library) recommend not setting up handlers.
usecase?
Over the internet? But seriously, using its ip adress, or you setup a dns to it... like you access any other web site damnit.
I succesfully used this on my mp3 library: http://code.activestate.com/recipes/362459-dupinator-detect-and-delete-duplicate-files/
&gt; What you actually gave me were conclusions with no supporting data... The supporting data can be found [in my previous comment](http://www.reddit.com/r/india/comments/xjymm/is_being_a_software_developer_in_india_really_a/c5n3dcn) or on the [Academia stackexchange](http://academia.stackexchange.com). &gt; I'm sorry to hear you're so miserable working in academia. I really enjoyed the time I spent working at a University and really want to do it again. If you are a student, I can understand it is: they are teaching you something new. If you are a professor, I also can understand it is: you have plenty of slaves. If you are inbetween, you discover how alone you are, how useless is what you are doing, how sick is the system, and how inefficient is the workflow. &gt; Have you looked into getting work with a contracting/consulting company? There are lots of these companies in my area (Pacific Northwest) and I suspect elsewhere. I am in Europe, we don't have all this fancy private companies here. The market for innovation is rather dull. We are not risk-takers, we don't have established business seeders, or they are not given enough visibility. &gt; If you have decent coding skills in fairly common languages, or if you're good at dealing with customers (gathering requirements, etc) then it should be easy to get your foot in the door with one of these places. And an H1B visa. &gt; What I can tell you is that life is too short, and work days are too long, to spend all that time doing something you really don't like. Yes, I agree on that, but I don't take risk with my hard earned money, and in order to start a business, you still need 1) an idea, 2) a market for that idea 3) policies and politics that allow your idea to prosper in the global market. Most of the US based business would have never got anywhere in Europe. Indeed we developed businesses similar to the established ones, but they never got anywhere. Tell me one large, well established company involved in software that is not US based. Facebook, Amazon, Twitter, Google, Wikipedia, Kickstarter, are all US based. As I said, similar companies would have never prospered in Europe, and similar attempts basically disappeared. I have my opinions on the reason, but I may be wrong. &gt; I'm not sure exactly what you mean by "my cv self-sustain itself and makes it impossible for me to get a real job" That the jobs you get access to depend on the skills you can write on your cv, which in turn depends on what you learned. I am a good python programmer, but I am stuck in a 4 years employment with Fortran. Most python jobs today are django-related. My employment and career has nothing to do with django development, but there's plenty of jobs in that direction. The fact that you see the green pastures does not mean that you actually can walk in that direction, and even if you can, when you are there, they are already grazed by someone else. &gt; If you're lacking some skill, then try to develop it somehow. If you're lacking experience, find some way to get it by volunteering, or maybe working on an open source project. Time is not for free. I work 10 hours a day, and when I'm home I have to do other things. Programming requires continuity. I can't simply pick some project from github and work on it for 2 hours, and then maybe I am forced to stop for a week because I have to go to a conference or whatever else. I already tried, and it does not work. Additionally, when you join a project you have a startup time in order to learn what's going on in the code. In 2 hours chunks, this time maps to months of just browsing the code, which, in an active project, will always leave you behind. As of today, I am studying some Scala, but I hardly think it will be useful. The only way you have to grow as a programmer is to have a daily job that allows you to learn things that are useful. Your spare time allows you very little. &gt; I wish you luck. Thanks.
I see... I feel silly for learning tkinter.
Someone that is using a chrome book that wants access to a python shell to test out an idea they had. 
This is an old blog post, so thought I'd run the numbers again. Interesting results: dmcgee@galway /tmp $ python3 attr.py 0.2966909408569336 0.16568899154663086 dmcgee@galway /tmp $ pypy attr.py 0.435633897781 0.504189014435 dmcgee@galway /tmp $ pypy attr.py 0.356221914291 0.407660007477 Pypy slower than cpython on a non-realistic benchmark doesn't surprise me. What does surprise me is that attrgetter() is actually slower than the attribute access.
This is so broken
Did the same thing with Jython 2.5.2b1, results are even faster. zero:lib russ$ java -jar jython.jar attr.py 0.84700012207 0.389000177383 zero:lib russ$ java -jar jython.jar attr.py 0.917999982834 0.404000043869 
Neat, but as the review points out, Apple forbids downloading code to run, so you can't install any extra modules. And if you write a great script, your friends with iDevices can't run it, unless there's an easy way to make and submit an app from it.
I can't believe I didn't think to check file size first... Now I get to update my script and make it better!
Seeing as lambda expressions are a big part of python, I would think that maybe they spent the time optimizing stuff like this?
Thanks! Next I will add a github-service to facilitate releases via: $ git commit -a -m "Release 0.0.1" ; git push ; echo Done!
&gt; What does surprise me is that attrgetter() is actually slower than the attribute access. Not sure I'd be surprised: 1. in CPython, `attrgetter` is implemented in C, the lambda has to context-switch thrice between C and Python (C for lambda call, Python for the code inside the lambda, then C again for the actual attribute access) 2. In Pypy, `attrgetter` is implemented in pure Python and it's a rather gnarly one (34 lines, 2 top-level functions and 5 nested functions in the implementation), so pypy's JIT may very well have a hard time with it. 3. Pypy might also have special support for e.g. inlining literal lambdas, especially when they're pure. The difference is not big, so probably mostly 1 and a bit of 2.
The posted benchmark is not very good: the first test takes a hit for the second test, warming things up. If you duplicate both tests in the code and ignore the first runs, the results even out noticeably. Here's a simpler benchmark, just testing the invocation of `lambda` and `attrgetter` alone: In Python 2.7, `lambda` seems to edge marginally ahead: $ python2.7 -m timeit 'from attr import Point, attrgetter; p = Point(1,1); f = attrgetter("x")' 'f(p)' 100000 loops, best of 3: 2.1 usec per loop $ python2.7 -m timeit 'from attr import Point; p = Point(1,1); f = lambda p: p.x' 'f(p)' 100000 loops, best of 3: 1.97 usec per loop In Python 3.2, `attrgetter` seems to edge marginally ahead: $ python3.2 -m timeit 'from attr import Point, attrgetter; p = Point(1,1); f = attrgetter("x")' 'f(p)' 100000 loops, best of 3: 2.39 usec per loop $ python3.2 -m timeit 'from attr import Point; p = Point(1,1); f = lambda p: p.x' 'f(p)' 100000 loops, best of 3: 2.42 usec per loop In PyPy 1.9, `attrgetter` is a bit slower than CPython, but `lambda` is off the scale (*1400×* faster): $ pypy -m timeit 'from attr import Point, attrgetter; p = Point(1,1); f = attrgetter("x")' 'f(p)' 100000 loops, best of 3: 4.27 usec per loop $ pypy -m timeit 'from attr import Point; p = Point(1,1); f = lambda p: p.x' 'f(p)' 100000000 loops, best of 3: 0.00306 usec per loop For `lambda`, that's around 7 clock cycles per invocation on this 2.3 GHz processor, if my arithmetic is right.
You need two parts - a server you can you can send the points to a browser, and the Javascript part to recieve these points and add them to a map using the Google Map API Tornado is a good option for the server, specifically it's [`tornado.websocket`](http://www.tornadoweb.org/documentation/websocket.html) module. The examples on that tornado docs page gives you most of what you need - you'd create the websocket server, then use the `WebSocketHandler.write_message` method to send your coordinates (serialising them with JSON probably) Then in HTML/Javascript, create a [map with the Google Map API](https://developers.google.com/maps/documentation/javascript/tutorial#HelloWorld) Finally modify the WebSocket code from the Tornado page, instead of doing `alert()` you just have to JSON-decode `evt.data` to get your coordinates, then [add a marker to the map](https://developers.google.com/maps/documentation/javascript/overlays#Markers) Incidentally, the [Peepcode node.js](https://peepcode.com/products/nodejs-i) video covers doing something almost identical (albeit in node.js, not Python..), except with a different map (static image) **Edit**: Threw an example together, https://gist.github.com/3304597
If you don't need the real-time bit, the [pygmaps](http://code.google.com/p/pygmaps/) module is useful for generating self-contained HTML files, containing a Google Map with markers and so on (it's just a module which generates some HTML) Also, there's also a simpler API for Google Maps, [GMaps.js](http://hpneo.github.com/gmaps/), although I always found the official API decent enough
Cool, have you shown /r/gamedev?
I suppose, but compared to a language with actual lambda functions like Haskell, Python's implementation feels rather weaksauce.
People are recommending redis, but be aware that redis is an in-memory database. If you have 100 million entries, and each entry is 100 bytes: 100 bytes * 100 000 000 = 9.31322575 gigabytes You'll need 9.3 GB of RAM free to store that data. Depending on what server you're hosting this on, that might not be reasonable.
So one of the nice things about NumPy with CPython is that I can access arrays of data allocated within my C library without doing any copying. Is this type of scenario going to be possible with NumPyPy?
kyotocabinet
MongoDB (pymongo library)
Do you really need it to be in memory? If disk read/write is fast enough four your app I don't really see any reason to use redis. Besides redis, you can take a look at the riak[0]. [0] http://wiki.basho.com/ 
what system?
If you want a fast persistent disk based key value db you might want to check out [leveldb](http://code.google.com/p/py-leveldb/)
[Also itemgetter](http://www.reddit.com/r/learnpython/comments/xqu6l/sort_max_and_min_for_tuples_quick_question/c5ot2cl?context=3). 
What are the advantages over PyObjC, which is included with OS X?
Works fine for me in Mountain Lion! Neat effect.
I probably shouldn't have said "I prefer repl.it". The intent of my comment was more to say "Here's something similar that you may not have heard of." They are both useful in their own ways.
I'd recommend taking a look at [HyperDex](http://hyperdex.org). The Python API is [clean and simple to use](http://hyperdex.org/doc/tutorial/#interacting-with-the-phonebook-space). I'm the main dev and I'm happy to answer any questions or help with any problems.
If you're writing a program that allows arbitrary python code to run as root, you are really beyond the point of worrying about security.
This is an excessively serious thought. Shouldn't we be paying more attention?
I learned python has a module like curses header file in C and the tree utility. Also, I tweeked it so the screen is filled with characters as soon as it starts :D
SQLite (unless you need concurrency). Redis is cool, but it's another dependency you probably don't need.
Firebird with FDB new python driver 
Redis is a really easy dependency, but yeah, sqlite is a good choice. It's simple to use and performs surprisingly well, and it comes with Python: import sqlite3
I kinda like GHCI as a calculator more.
It means it wouldn't be too hard to rewrite the code to be more efficient, but the creator isn't interested in doing so at this moment.
curses is part of the python standard library on *nix systems, he's likely using windows or some obscure system that doesn't come with curses. There are workarounds for windows (namely, [pygcurse](http://inventwithpython.com/pygcurse/), but I suppose you could use cygwin)
this is so unnecessarily cool. yes, indeed, it is for somebody to show off if the work was done in five minutes and should have taken longer to impress, satisfy or squeeze money out. but I would change the name to something more professional and ungoogleable. (is that a word?)
http://www.pytables.org/moin Well, if you look for speed, and don't need a network protocol, you have the fastest DB with the less overhead. The only caveat is the installation being a little tricky. 
&gt; Shouldn't we be paying more attention? Never blame the user
Contribute it to http://libcloud.apache.org/ ?
post the code :)
Is it possible the OS just doesn't have the python curses module? Or does it come with a standard python install? 
Definitely. Though, used with care, it can have a useful effect--such as in Django applications when setting the DJANGO_SETTINGS_MODULE. Eliminates the need for replicated code in this case, and generally doesn't have any negative side effects (that I or my team have ever discovered, anyway).
If the code is invoked via command line, couldn't you make an optional argument that overrides the environment variable? e.g. foo@bar$ env ... (some env vars) THAT_CFG_FILE=/path/to/file/default.cfg ... (some more env vars) foo@bar$ python script_w_config.py -c use_me_instead.cfg where if the -c &lt;filename&gt; is omitted you just use $THAT_CFG_FILE.
Your definition if "fake" is what's fake.
http://i.imgur.com/LjoCZ.png 
random.sample will never roll a yahtzee! See the [documentation](http://docs.python.org/library/random.html#random.sample): &gt; Return a k length list of unique elements chosen from the population sequence. Used for random sampling without replacement. "Unique elements", that means: no repeats. What you want instead is to use "``random.choice``", 5 times on a list of 6 elements, or you could use ``random.randint(1,6)`` five times. Both of these will correctly simulate 5 random rolls of a six sided die.
table locks are a bad idea in the vast majority of cases, reducing performance to a crawl, dramatically increasing the chances of deadlocks, and should be considered an ultimate last resort. A "transaction susceptible to concurrency problems" will usually be made worse with full table locks - try using SQL Server without snapshot isolation to see this in action. Better options include "SELECT..FOR UPDATE" to lock only those rows that you need, and better yet to organize your app such that explicit locking isn't needed at all. 
i like ipython ;)
All I did was adjust range on the line where the 'jumbled' string is concatenated. I put it to 5. Not much but, [here!](http://paste.pound-python.org/show/24718/) ;) ~My first comment did have upvote(I don't post for it) but, someone down voted it, puzzling *scratches head 
Is `time.sleep(2)` for me to have time to switch to the browser window?
I looked at libcloud before starting this project and came to the same conclusion that I did with the other libraries I'd tried: it only covers one service (CloudServers / OpenStackNova, in this case). I was looking for a library that wrapped all of Rackspace's cloud services in one consistent API. Sort of like the Boto library with AWS.
possible, but unlikely, python's manual says that the Linux, OS/2, and *BSD variants (including Mac OS X) come with curses, it's pretty much only windows that doesn't.
It's only Windows-only because of the keyboard event stuff. You can simulate keyboard events on Linux with [xdotool](http://www.semicomplete.com/projects/xdotool/), which you can trigger through a system call from Python (just swap it in for the win32 stuff in the script), or read through [this](http://stackoverflow.com/questions/5714072/simulate-keystroke-in-linux-with-python) and [this](http://stackoverflow.com/questions/2575528/simulating-key-press-event-using-python-for-linux/).
Sometimes you can't get away with "SELECT..FOR UPDATE", this is where this code snippet gets useful. But I agree that "transaction susceptible to concurrency problems" is too broad.
Swap the press function and win32 imports with this and it'll work on Ubuntu: import pyatspi def press(x, delay): pyatspi.Registry.generateKeyboardEvent(65, None, pyatspi.KEY_PRESS) time.sleep(delay) pyatspi.Registry.generateKeyboardEvent(65, None, pyatspi.KEY_RELEASE)
&gt;Here is mine that is for Gnome FTFY
 C:\Users\maden&gt;python Desktop/test.py Traceback (most recent call last): File "Desktop/test.py", line 2, in &lt;module&gt; import win32api, win32con ImportError: No module named win32api Both on 2.7.2 &amp; 3.2
Am I the only one baffled as to why char, = chars is an unacceptable solution to implementing set/frozenset.choose()?
This is a really cool script though.
very nice script, it works very well!
A friend of mine developed this a while ago to work in OS X https://gist.github.com/2912270
&gt;Console doesn't work for non-US keyboards Will this be fixed at some point? EDIT: Doesn't seem to matter anymore ignore me
too many values to unpack -- or is that a Python 3 thing?
Or, more useful, extend set and implement your own choose function based on what you see as the best implementation listed in the original post.
This is the obvious choice to me too ... I don't understand what's the rant about.
It seems like a made-up example to me. Why would I want to print `[abc]` if there is more than one element but `a` if there is only one? Why not be consistent and just do this unconditionally? print("[" + "".join(escape(char) for char in sorted(chars)) + "]") If you really want to eliminate the brackets if there is only one element, then write it like this: foo = "".join(escape(char) for char in sorted(chars)) if len(chars) == 1: print(foo) else: print("[" + foo + "]")
Whoa, cool. The more you know.
If you can get python on your box, then fix the gnome-desktop section to whatever does it on windows (IIRC some registry key under HKLU), then it should work. Might have to use a different downloader, since windows doesn't come with wget, curl, etc. Shouldn't be too hard to port.
Dammit
This isn't really Debian/Ubuntu specific, it should just work anywhere that you have a Gnome desktop installed.
Heh, thanks zhongwei. I found this blogpost too, but the pity is, it's only for Mouse stuff and not for a Keyboard Input. :( cheers,
Either you trust the users of your functions to use them correctly - which then opens up the rich panoply of a dynamic language; or you don't - which means treating each call as untrusted and having to jump through hoops trying to guard against misuse (which isn't only a matter of type checking by the way). If, for example one of your functions accepted a list and a valid index into the list as arguments, do you add a specific check for this? What if the list and index are usually produced by another of your functions but could also be generated by other users? This is a question not just of static type checking, but of dynamic range checking of the index. I think you might also work on educating your users so that they can best understand what is at stake. little more 'checking' might be necessary on both sides :-) 
In 2.7 numtoadd is made global variable, in 3.x it is not.
Tangential, but this is why I like compile time functionality in languages.... in languages that compile. It seems silly to check against the debug state every time the script runs *from startup*. I guess I can just comment it out. I should really devour some sunshine and rainbows.
Python-specific and general preprocessors exist, so it's definitely possible to strip it out for a release. Myself, I just mostly use the logging module and toggle the log level to WARN before putting together a release.
Python 3 changed the scoping of list comprehension control variables (see [Guido's account of the history](http://python-history.blogspot.com.au/2010/06/from-list-comprehensions-to-generator.html) for details). In Python 2, `numtoadd` from the list comprehension is a local variable in the containing scope; it's the same variable as the `numtoadd` in `for (func, numtoadd)`. In Python 3, the list comprehension's `numtoadd` doesn't leak into the outside scope; the `numtoadd` in the for loop is a separate variable. Now, the lambda's `numtoadd` is looked up in the list comprehension's scope at the time the lambda is executed, *not* when it's defined. In 2, this happens to work as you expect because the for loop has set `numtoadd` to the right value moments before you execute the lambda. In 3, the for loop has set a separate local variable that the lambda can't see; the lambda just sees the final value of the list comprehension's `numtoadd`: 9.
Wow thank you for that response! I'm still not sure I understand it... I'm going to need to digest that for awhile. In the meantime, is there a similar way to accomplish this with list comprehensions and lambda in Python 3? I'll definitely read through Guido's post, maybe that'll give me the insight I need. Also, sorry, I just discovered /r/learnpython and think that would have been a better place to post. I appreciate the help in understanding this!
There are two important things here to understand this behaviour. 1. A variable in a lambda looks up the *variable* x, not the *value* at definition time. When it sees "x" is looks and gets the *current* value of x, from whatever scope it was defined in. 2. **Your python2 version is not working as it does for the for the reason you think it is.** Those lambdas will act exactly the same as the python3 version if you call them before that for loop. I'm bolding it because this is going to really confuse you if you assume that the difference is that python2 is binding to the values as you expected it to. To illustrate point 1, consider a simpler setup expressed as a for loop: l=[] for x in range(10): l.append(lambda : x) print l[0]() # prints 9 x = 5 print l[0]() # prints 5 The reason this prints 9 or 5 rather than 0 each time is that this function will return the *current* value of x. At the point it's been **called** however, x has iterated through the loop, and reached the last value. If you had called it *within* the loop, you'd have seen the current value of x at that point. The reason your first example seems to be working otherwise is because you *reassign* numtoadd again in the *second* loop. If you change the name of the loop variable, you'll see the same behaviour as in python3: &gt;&gt;&gt; funcnum_tuples = [((lambda x: x + numtoadd), numtoadd) for numtoadd in range(0, 10)] &gt;&gt;&gt; for (func, numtoadd_RENAMED) in funcnum_tuples: ... result = func(1) ... print numtoadd_RENAMED, "+ 1 =", result So, this brings up the question "What changed in python 3?" - why doesn't changing numtoadd change the behaviour of the lambdas? The difference is that in python2, when you use a variable in a list comprehension, it creates it in the enclosing scope. Ie: &gt;&gt;&gt; l = [x for x in range(10)] &gt;&gt;&gt; x 9 # x "leaks" from the comprehension into the variables of this scope Comprehensions are essentially pure sugar for something like: &gt;&gt;&gt; l = [] &gt;&gt;&gt; for x in range(10): l.append(x) In python3, this doesn't happen. Instead a **new** variable is created local to the comprehension that the outer scope knows nothing about. It's closer to: def temporary_wrapper_function(): l = [] for x in range(10): l.append(x) return l l = temporary_wrapper_function() The "x" each lambda refers to is the x from the wrapper, not the x in the outer function. This means when you have a for loop using the same variable name (numtoadd in your case), it's actually referring to a different variable than the ones the lambda functions are using, so it doesn't change their behaviour. &gt; In the meantime, is there a similar way to accomplish this with list comprehensions and lambda in Python 3? There is - though do note that this issue will **also** hit you in Python 2 - it's just that you've accidentally covered it up by reusing the variable rather than that the core difference being what the lambda gets bound to. What you want to do is not bind to the "x" *variable* but to bind to *the current value* of x. One way is to exploit python's default variables: funcnum_tuples = [((lambda x,numtoadd=numtoadd: x + numtoadd), numtoadd) for numtoadd in range(0, 10)] This creates an argument that gets bound (at function definition time) to the value of numtoadd. The downside with this approach is that it does expose this parameter on your lambda (ie. you could call funcnum_tuples[0][0](1, 10)). Another approach would be to create a new scope of your own so that you're not referring to the list comprehension's variable, but to a variable which is not rebound. Eg. consider a helper function: def make_adder(numtoadd): return lambda x : x + numtoadd funcnum_tuples = [(make_adder(numtoadd), numtoadd) for numtoadd in range(0, 10)] Now the lambda doesn't bind to numtoadd from the comprehension, but to the local numtoadd variable in make_adder, for which a new scope is created every time this function is called, and the variable is never changed.
Thanks a lot!
I'm assuming this works on Windows only?
Good example of plugin architecture is trac &amp; pyutilib.component https://software.sandia.gov/trac/pyutilib/browser/pyutilib.component.doc/trunk/doc/plugin/pca.pdf
Okay, that bit about numtoadd_RENAMED really clarified what was going on. It really WAS by sheer luck that my example worked in Python 2. I only used the same variable name to keep track of what I was doing - it didn't occur to me that by doing so, I might get the expected output but by an unexpected mechanism. Now that I know about it, I actually prefer the Python 3 way, since there is less likelihood of that sort of messiness when using the same variable name. Thanks for making me smarter!
One of the main ideas in Transactional Memory (TM) is that the transactions are like database transactions, [ACID](http://en.wikipedia.org/wiki/ACID): atomic, consistent, isolated, durable. TM transactions are atomic in that no other core can see any intermediate values while the transaction is being executed. In HTM this is usually accomplished by either eagerly updating values in the local cache, but assuring they are not written back to the shared cache, or by lazily keeping an update list of new values and at transaction commit time updating all of the new values atomically. TM Transactions are isolated (what you're question is about) by cleaning up any changed values when they fail (or abort in TM language). This can be accomplished in an eager system as described above by invalidating all of the updated values in the cache, or in the lazy system by invalidating the update list. The consistency and durability don't apply as well to transactional memory as they do databases. If you are writing a TM program and need consistency and durability it's more up to the programmer than the underlying TM system. There are a lot of other ways to implement HTM (and STM) than what I described above, but it gives you an idea of how it can be done. 
&gt; one operation that synchronizes using the GIL, takes it, reads from a location, writes to the location. In between reading and writing, another operation that uses HTM reads from the same location, writes to the location. The HTM-using operation sees no reason not to commit Actually it would abort the transaction in this situation. The TM system would recognize that the value in the location has changed since the beginning of the transaction. Again there are lots of ways to implement this. And if you're worried about context switches or suspended processes I think most HTM systems don't even try on that and require that there are no transactions running before they are context-switched out. To implement HTM that didn't do that would be extremely hard, and would probably not give much performance benefit. But you are right, the composability of locks and transactions is hard. In general there is a "simple" solution, though. You can just force all threads to go through the GIL when something bad happens (like a transaction fails too much or is too big to fit in the HTM system). In fact, this is very similar to how hybrid (hardware and software) TM systems work. 
In this case, chars represents a character class from a regular expression.
What other kind of proof of opinion would you want? A laboratory study?
* The Instant gratification: I spend a lot of time with pdb and a repl because I love the fast feedback I get when I try new ideas. * The list comprehensions: Hands down the best way I've ever seen for processing entire sets of data in a one-liner. * The freedom: Python doesn't make me feel forced to think in object-oriented, functional, or imperative terms. It lets me use the right paradigm for the right situation.
yeah that would be cool. :)
Comprehensive. Honestly (I'm really saying this without malice) it looks like stuff people love to write but no one likes to use (*everyone loves writing frameworks*). Case in point: instead of using Trac's infrastructure, they went on to develop their own (although it's extremely similar).
You'll see the light. I've learned over 20 languages in my life, from fortran, cobol, rpg, lisp, pascal, c, java, php, ruby, haskell, and for my day to day coding I stick to python. Quick prototyping, fast results.
I did get a lot more out of this than I did from the talk at EuroPython. Thanks!
I didn't say it was good proof. I said it was good anecdotal proof... which really isn't a thing. in other words, I was kidding :)
ah then kudos to you sir. 
Why does the last example work? Why is adder_maker(n) evaluated in the list comprehension but the explicit lambda expression is only evaluated in the for-loop? Why isn't the final value of n used in the for-loop? 
&gt;If you look at the disassembly under 3.x, it's using LOAD_DEREF to access numtoadd instead of LOAD_GLOBAL. As I understand it, this is like accessing a variable from a sequestered execution environment Just to nitpick a bit, the real reason is that python 3 has introduced a new scope here, and the `LOAD_DEREF` is just a consequence of this (because it's no longer at the toplevel, so gets it from the enclosing function rather than the global namespace). In python 2, it'd also be LOAD_DEREF if you put all the code inside a function. eg: &gt;&gt;&gt; def f(): ... funcnum_tuples = [((lambda x: x + numtoadd), numtoadd) for numtoadd in range(0, 10)] ... dis(funcnum_tuples[0][0]) &gt;&gt;&gt; f() 2 0 LOAD_FAST 0 (x) 3 LOAD_DEREF 0 (numtoadd) 6 BINARY_ADD 7 RETURN_VALUE But you'd still see the same issue. The big difference is that the list comprehension acts as if it were within its own function, where it creates all its variables, rather than putting them in the global namespace (in the original case), or f's namespace in the example above. &gt;There doesn't appear to be any way to print out the table of local variables There is actually a way if you get hold of the code object. Eg above, if you do: &gt;&gt;&gt; f.func_code.co_varnames ('funcnum_tuples',) &gt;&gt;&gt; f.func_code.co_cellvars ('numtoadd',) The `co_varnames` are variables which are entirely local to the function. The `co_cellvars` are also locals, but they're ones that an inner function is using (the lambda). The same thing in python3 (though `func_code` has been renamed to `__code__` &gt;&gt;&gt; c.co_varnames ('funcnum_tuples',) &gt;&gt;&gt; f.__code__.c.co_cellvars () numtoadd is no longer a cell variable in the function. Instead, it's defined inside the list comprehension's scope. Getting at that is harder, but possible: &gt;&gt;&gt; import inspect &gt;&gt;&gt; funcnum_tuples = [((inspect.currentframe(), lambda x, n=numtoadd: x + n), numtoadd) for numtoadd in range(0, 10)] &gt;&gt;&gt; frame = funcnum_tuples[0][0][0] &gt;&gt;&gt; frame.f_code.co_varnames ('.0', 'numtoadd') As you can see, it's now a plain local variable inside this inner scope. (The ".0" I think is an implementation detail - an internal variable used within the comprehension code) 
nice work.
[SimpleCV 1.3](http://www.simplecv.org/) was released this week too. Please let us know what you think. 
If you have multiple anecdotes of different individuals (who are also Python developers) complaining about the GIL, then that *is* data to support a claim of "There are lots of Python developers frustrated with the GIL", although "lots" is a subjective measure.
Note you already get some of this in respect to IO concurrency if you use gevent or eventlet. I think that is where Rigo might have gotten the inspiration (he wanted to make sure PyPy supported greenlet -- the initial base module of those 2). So in 2 green threads you get atomic code blocks in between IO points. I feel like Python should have adopted that as their threading model, because the only benefit you get from threads in Python is if you IO, but you still get all the warts from real threads (can be interrupted at any time while updating a shared data structures). Greenthread concurrency helps with those warts so you get the advantages of IO concurrency with less downsides. 
Not really related but I found your twitter bot code [HERE](http://inventwithpython.com/blog/2012/03/25/how-to-code-a-twitter-bot-in-python-on-dreamhost/comment-page-1/#comment-9970) the other day. I've been having loads of fun with it. I also cleaned it up abit and added some extra functions.
Look, a shortened link to hide the fact that there's a referrer code. Spam.
It is a bit of a feedback effect perhaps. After so many years those who are really frustrated by the GIL have switched to something else. Those that are left are fairly ok with it. Not saying it won't be nice to get rid of it, but I don't think currently too many devs have the hots for it. I, for example, bypassed CPU-oriented problems, by writing a C extension with a thread pool and a queue. Most of the time I actually deal with IO concurrency and then Threads are silly too, so I use gevent/eventlet. So real (OS-backed) threads in Python are there but I just don't use them much and I feel other devs are in the same boat, is that true?
~~look at the API, furl is stateless and uses a jQuery-like API to manipulate immutable URLs.~~ murl is stateful and uses a standard OOP API.
Very useless since it just abstracts an already abstracted url parsing lib.
They don't have the same probability. 5 independent dice have a chance of 6/(6**5)=1/1296 of rolling a Yahtzee, while this method (selecting without replacement) would have a probability of 6/(30 choose 5)=1/23751 of "rolling" a Yahtzee.
Writing python modules in C is awesome. I used it for a large project of mine, but since I've discovered Cython I'll never go back. It's so much easier to write the code in python; afterwards Cython basically turns your .pyx file into a .c, compiles it, and creates the library. It's also very easy to implement OpenMPI by including a few extra steps and changing your for loops from for i in range(0,somelength): --&gt; for i in prange(0,somelength): which then will run multiple threads depending on what your OMP_NUM_THREADS env variable is set as. Using this method I've seen considerable speed increases on large data sets. 
&gt; Simply you don't deal with the same sort of problem as we do. Agreed. That's why I presented my use case. Others have theirs. I guessed my use case is common. You suggest it is not. That's fine too. Unless a survey is taken it is hard to say. &gt; It's fine, but don't say we don't need to get rid of the GIL. I didn't say it. I said it would be "nice to" get rid of it but I guessed that most Python users don't see that as a priority or a make-or-break feature. &gt; Same was said about writing a JIT for python. And having the JIT is really nice. But, again, I don't see that being make-or-break feature for others in choosing Python. Ok maybe someone bench-marked their program and said **Oh it is too slow, I must use Go then** Then their co-worker suggested PyPy, they tried it and then found the speed acceptable. I can see that happening, but I don't think that to be a common issue. My point is people who need absolute speed or CPU bound concurrency are already using something else. People left using Python are ok with it and love it the way it is. Improvements and research is always welcome, and I am very glad with what PyPy is doing it. 
Announcing a new library: ezURL Usage: from ezURL import ezURL url = ezURL("http://www.google.com") print url.scheme, url.host # -&gt; http google.com Source: import murl def ezURL(url): return murl.Url(url)
My recollection from the original article written by the author of pypy-stm was that thread.atomic could be implemented as a no op context manager in cpython and the code would behave as expected, but would run on a single core without the stm advantage. In that case it wouldn't fork the language, it would just be a pattern that only did anything on one interpreter. 
YOU can help implement the next financial disaster that will effect the entire world.
Oh what I wouldn't give to have this for java
It looks like Bitey actually depends on llvm-py for its under-the-hood magic. Bitey itself is a nice wrapper for fancy and clean importing.
This is wonderfully cute, although I have no idea what I'd use it for. What I simply *love* though, is the ability to introspect the C types automatically. This is a problem I've pondered for years, it would make wrapping arbitrary C libs so much nicer if it could be done at scale.
Affect. Affect the entire world. 
Looks like [llvmpy repo on github](https://github.com/llvmpy/llvmpy/commits/master) is pretty active.
How's Rackspace's API compare to Amazon's?
The thing is, to introspect C pretty much requires you to be a C compiler, because you need the preprocessor, the parser, and the AST before you can even start to get at function and struct definitions. And of course that's assuming the preprocessor is just being used to paste headers together and not for things like macro-based templates. Actually, Clang is designed to be simple to integrate into, unlike GCC, so you could probably build an introspection system around it. One of the biggest things I've noticed missing in the C/C++ development environment is introspection. It's one of those things that you don't really need for most code, and then when you do need it you need it BADLY. Sadly the C++ spec committee and the C spec committee aren't motivated to actually create a sane way to introspect code. I'm tired of having to write ad-hoc systems to marshall binary data around. I just need to be able to ask the compiler some specifics about a type so I can serialize it and pass it on the wire or something. Restrict it to POD types if you really want to.
I did an interview like a week ago. It was for the financial industry and they told me that I might have to port Python code to Java...
Okay thanks... I thought maybe I was going crazy and completely misunderstanding everything going on. Thanks for sticking with me!
The only way you can prevent downloading of code on a scripting language that has an exec statement is to prevent all network communication. Does this have socket/urllib?
Anyone who works with Python in similar circs (industry/location) know what this job would pay ?
Btw, the EVE Online server is written in Python (stackless, actually)
To be honest, I think Java is fine. It does have its problems (factoryfactoryfactory), but it is just a language. But porting Python to Java, the only thing that I can think of that is reasonable is if they are making a client library in java where they already have a python library implemented. If performance is an issue there are a lot of things you can do, porting to java would not be something I would really consider.
import marketcrash
They say that writing readable code helps reduce bugs. Looks like we're *all* about to find out.
Oh no, financial types have a high opinion of themselves. The next financial disaster will literally cause the entire world to happen.
In the context of finance, yeah I would opt for strictness over ease probably. I still think you are overstating how easy it is to screw up or have oh shit moments, but not enough to disagree with you. You can actually know what type you are dealing with in python, but it requires extra code that no one would probably ever use, and is actually discouraged :) The interesting thing is, python actually works very well with libraries written in other languages, so I think it can be very positive even in the financial sector even if you write the financial logic in something else.
Sure, I mean I am pretty confident that I don't hate Python. Otherwise I won't be working with it. It's just that writing the "entire" system rather than parts in Python feels so wrong to me. You are right, numpy/scipy and other scientific extensions do make Python a good choice for certain workloads.
I am still hopeless with all my c++ template code..……
Using Cython would have been way simpler.
[Mandelbrot performance example](https://github.com/dabeaz/bitey/tree/master/examples/mandel) From README: Make a mandelbrot set. This example illustrates the resulting speedup you can get by writing code in C. To run the example, first just try running the mandel.py program: % python mandel.py Wrote mandel.png 12.3137500286 seconds % Now, try making the LLVM extension module and running again: % make clang -emit-llvm -c _mandel.c % python mandel.py Wrote mandel.png 0.817422151566 seconds % Your timing numbers will vary of course. 
I hope this doesn't kill the market for [Resolver One](http://www.resolversystems.com/products/resolver-one/), they are good guys.
Made a program for todays game too: http://i.imgur.com/MkPys.png But the code is a little mess. 
Competition of the main signs that there **is a market** to begin with. If you go to investors with an idea, and they ask you about competitors and you say "there are none", you can forget about raising financing.
Resolver One hasn't been updated for quite some time now...
I wonder if this will kill the market for VBA. 
Are you sure, look at the footer of the first site.
Hey me too! We should start a union to protect ourselves from such slander
I'm super late again answering your first question here, but I'll give it a shot anyways in case you're still loooking for advice. In web programming the current style that is used most often is MVC ([Model View Controller](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)). This divides the way the page looks, what creates the page content, and the way the data is accessed into separate areas, and separate classes. While this may not be entirely the way you want to approach things in a GUI based project, I think at least splitting the "Model" or data access layer out will benefit you greatly (see my other post on SQLAlchemy and SQLite). If you can find that "fit" of sorts into the MVC style project it will divide your project literally into 3 directories and really give your project some initial structure. It also will force you to draw those lines between classes and force you to categorize classes you otherwise would just throw into one directory. Try out MVC, try out your own ideas, make mistakes, do it the wrong way, keep reading everything you can find on the topic and you will learn a ridiculous amount. The basic idea of learning to divide your classes up into various categories is very useful as you advance as a programmer. I would posit that in this day and age it is an essential abstraction for larger (+10k) projects to succeed without insanity.
I've understood it to refer to different concepts. Flat/Nested applies to control structures, too deep and you've probably chosen a less than ideal algorythm. Whereas, namespaces are a way of collecting/grouping related things and giving them their own place to live. But ya, having a deeply nested package structure is also probably a bad idea. 
Jython. Write python code, use java interpreter. http://wiki.python.org/jython/WhyJython
Ah, yes. You're right. Thank you. 
are you doing releases that can be installed without a c compiler? I know that cffi has something for that now... if it doesn't need a compiler it could be a nice lib for pyglet to use so it doesn't depend on pyobjc anymore. IIRC there is one guy on pyglet that did a ctypes based lib also, have you looked at it?
Here's some pseudo code: **Namespaces:** import some_http_library import some_socket_library http_response = some_http_library.get("www.python.org") socket_response = some_socket_library.get("eth0", "tcp") VS import some_http_library import some_socket_library ERROR: Conflicting method name "get", consider refactoring. **Flat vs Nested:** import some_http_library http_response = some_http_library.get("www.python.org") VS import network_library response = network_library.socket.tcp.http.request.get("www.python.org") (Silly examples, obviously.)
I think that they don't want to assume the risk of installing another "software system" as they call the interpreters in every desktop. It is a bank that operates in ten countries and it is a desktop application, so it can be a pain in the ass to install the interpreter in every computer. And I think that they are not going to take that risk... Python was for prototyping, but they prefer to use an already installed environment for the final users to operate on.
Well, part of the problem is the implicit access to locals(). That pretty much kills any optimization opportunity. Javascript eval isn't much better in syntactic form, but the function form has no access to locals, so has no negative impact on the rest of the function. My first suspect any time Python performance is concerned is the half-dozen stages of method dispatch. Javascript '+' does comparatively little compared to Python, where it may invoke `__getattr__`, `__getattribute__` `__add__`, `__radd__`, and others. It's relatively hard to natively compile that compared to Javascript. 
"import this" uses a hand-coded ROT-13, rather than string.encode('rot-13') - it's not entirely consistent with itself.
The main idea is to keep "how stuff works" in modules and use Pythonect to describe "how stuff connect". But I agree with you, there's a need for a better syntax. I have opened a [Call For Syntax](https://github.com/ikotler/pythonect/wiki/Call-For-Syntax) a few months ago and I'd love to hear more feedback/comments/suggestions before I pick the winner.
There are name spaces, in the standard modules they are seldom lower than one level of hierarchy. What is hard to get?
That's because it predates encodings in Python.
RichardWolf: it works automatically in Intel's clever HLE transaction mode (Hardware Lock Elision). All transactions appear to acquire and release the GIL for their whole duration: they start with an instruction like "XACQUIRE LOCK CMPXCHG" that writes atomically to the place in memory that contains the GIL, and end with "XRELEASE LOCK CMPXCHG". The XACQUIRE and XRELEASE are new instruction prefixes. This looks like it is always causing a conflict: all transactions appear to write to the same place in memory. But the XACQUIRE prefix means that it is special-cased: instead of actually changing memory, it turns on HTM and only records the lock's memory location in the "read set" of the newly started transaction. So in case the transactions are all run using HTM, then this particular conflict does not occur and they can commit in parallel. Only in case one of them needs to be aborted and restarted because it is too long, the XACQUIRE prefix is then ignored and the lock is *really* acquired --- i.e. the memory of the lock is really modified. This causes a write which instantly aborts all other running HTM transactions.
Very good. I can put on a resume that I can use Python to organize excel file data. Btw, does anyone besides clueless business majors use VBA?
I looked at that and thought of something like this, but perhaps there is a more elegant way to do it: bubbles = range(4) popped = [] for b in bubbles: print "Checking for collisions with bubble:", b if b == 2: # always collide with this bubble popped.append(b) for pop in popped: bubbles.remove(pop) print bubbles --- Results: Checking for collisions with bubble: 0 Checking for collisions with bubble: 1 Checking for collisions with bubble: 2 Checking for collisions with bubble: 3 [0, 1, 3] 
I don't know if it's more elegant, but you could give each ObjectOnMap object an 'alive' attribute that defaults to True. In stead of removing them directly you tag them as dead by setting b.alive = False. At some point later in the game loop you prune dead bubbles (or any other dead object). The 'best' or most elegant solution will probably depend on the use model and personal preference. However, removing items from a list while iterating over them is never a good idea.
No sir. :)
Yeah, people who work for them do. (sob) 
So, no one has mentioned [ZODB](http://www.zodb.org/); is that because no one thought of it, or because it's a poor choice? If the OP is **only** accessing this data from Python, wouldn't this work fine?
How about both? from some_http_library import get as http_get from some_socket_library import get as socket_get http_response = http_get("www.python.org") socket_response = socket_get("eth0", "tcp") 
I think he was envisioning a Python whose `import module` command works like `from module import *` does now (or how import works in erlang &amp; C, and some other languages), and showing how that's bad.
Nested if statements are fine. I'll argue they are better, because if you ever do static code analysis: if X: do stuff return Has no early escapes and one point of return, whereas something like: if !X: return do stuff return Introduces early function termination which makes logical analysis of code a pain, because you have to figure out all the branch paths that lead to each exit condition and treat them all as unique situations.
Most fixed income and equity trading desks heavily use excel.
I believe sirkne's idea of creating a second list on the fly is a good solution. The ObjectOnMap could work, and pruning afterwards, but it may not be as succinct as their idea.
Confirmed. We have this VBA module that does a large amount of numpy or scipy stuff with no tests. Makes me want to cry.
The only change you need to make to the pogoplug itself is to add a bootloader which also looks for an operating system on external storage. For that I've always [used this](http://projects.doozan.com/debian/). Once that's installed it's rooted. Beyond that it's a case of picking a distribution of Linux that's been compiled for ARM processors and putting it on a USB stick. Jeff Doozan's site covers Debian, while http://archlinuxarm.org has instructions for Arch. I personally like Arch and think it's good that they include instructions for specific models of pogoplug. Don't expect too much raw grunt out of the thing once it's rooted but it has the advantage of being always on and it's great at just chugging away at scripts.
Because calling a generator creates an object which has a fresh stream.
I'd imagine the main reason is that it would make reading code that you are unfamiliar with more difficult because you'd have to distinguish generator/coroutines and functions by context.
... You mean, nested like import os os.path.exists('./something')
I'm not convinced that generator(x) is "more intuitive" than generator.send(x), especially in light of "Explicit is better than implicit". It's possible however, that there *is* no good reason, other than "because it is". The send() feature is an addition that wasn't present until 2.5, and it may have been simply "tacked on" to the existing generator implementation. In any case, you could easily create a generator wrapper that allows you to "call" it: class CallableGen(object): def __init__(self, gen_function): self.generator = gen_function def __iter__(self): return self.generator def __call__(self, send_arg): return self.generator.send(send_arg) def callable_send(f): def wrapper(*args, **kwargs): return CallableGen(f(*args, **kwargs)) return wrapper ...or something to that effect
This is also valid, but at that point you already have the nested circumstances that the OP was quoting against :P. The early returns are bad are a part of [Hoare logic](https://en.wikipedia.org/wiki/C._A._R._Hoare). Which uses a subset of mathematics that can be effectively used to prove the functionality of code given some assumptions about the operating environment that exist like the equivalent mathematical axioms (like 1 + 1 = 2 every time). There are actually a set of fundamental axioms to the math that are a part of his proofs. NASA and other extremely critical software that *must* be guaranteed to run right every time will include a mathematical proof to justify its execution, often in addition to the usual testing and documentation from your normal project. Since a function is defined bya translation of inputs to outputs, multiple exit points in a function *might* correspond to the same input (if you have an integer paramter, consider it to be 5, but some random variable inside the function can return true or false) then you violate the traditional mathematical "function" test, and while it is still a valid expression, it takes much more work to prove. Also, functional programming languages often don't have multiple exit points on purpose, for that reason. It is also easier to test if you can *guarantee* a single return for a single set of parameters. It is *exactly* like how most bigwig computer scientists *don't* like someone using goto, continue, or break, because they are also invalid logical operations because they change the order of execution arbitrarilly. Logical proofing is best done when an order of operations in guaranteed given conditionals, without any early escaping or jumping. Loops are considered valid though, since repetition can be dealt with the same way you can expand multiplcation into the same addition some number of times.
VBA is used in many commerical programs: SolidWorks and FEMAP both use VBA and are used by engineers. 
I don't use anything but pandas when working with my data. :-) Indeed Wes is a good guy -- was always quick to answer any questions I had when I got confused with pandas functions.
No, this is not the nesting this is referring to... it is referring to block nesting. Block nesting is bad as it leads to code complexity. https://en.wikipedia.org/wiki/Cyclomatic_complexity Namespaces are great as they help organize code to reduce complexity. These 2 are complimentary as they are both about reducing code complexity.
so... any chance we could get a hold of the code?
Very cool man! do you still have the source code?
As someone who works in the finance world. With many large and small projects written in many different languages, from C++, C, Java and Pro*C (an ugly Oracle thing...don't ask) to Python, Ruby and Perl. Defects/Bugs are treated very seriously. I have never seen a development language impact the amount of defects found. What i have seen impact the amount of defects found, is the length of the testing cycles and the gap between development and testing (i.e. the longer the gap the more defects were found). Another misconception that i often see is that static compiled languages are somehow immune to run-time errors. Lots of defects caught in testing are the result of null pointer (or similar) issues. Personally, i think the dynamic languages are better for the large projects, because the shorter development allows for more testing. But, thats just my personal experience.
this is a good point. you can't call send until you call next &gt; Because generator-iterators begin execution at the top of the generator's function body, there is no yield expression to receive a value when the generator has just been created. Therefore, calling send() with a non-None argument is prohibited when the generator iterator has just started, and a TypeError is raised if this occurs (presumably due to a logic error of some kind). Thus, before you can communicate with a coroutine you must first call next() or send(None) to advance its execution to the first yield expression. http://www.python.org/dev/peps/pep-0342/
Yes -- I bought his book "Python for Data Analysis" which is a great tour through numpy/ipython/pandas
If you ever have to deal with a large codebase, you'll quickly give up ever making callable items. Searching for /\bsend\\(/ to find all places where you send something into a generator is easy. If it were callable, how would you do it? In particular, the code location where you send to your generator quite likely completely different from the code location where you define the generator. So if the wrong thing is being sent into your generator, how can you easily find it if you can't identify the places where sending occurs?
&gt; calling an instantiated generator does nothing but throw an exception You can't guarantee that this is true - all you can say is that this happens by default but specific generators that your program encounters might well be callable.
Ok.
Ah, you bastard! You beat my score! Want to compare code? Edit: Back in the game! Beat you by two points! My bot is often retarded; it takes it a couple of tries. 
A little bit different way of thinking about things that includes some dumb examples. from itertools import takewhile, ifilter import random NUMBER_OF_BULLETS = 5 class GameWorld: def handle_collisions(self): has_bullet = lambda _: self.bullet # pretend the bullet is gone already colliding_bubbles = set( takewhile(has_bullet, ifilter(self.bullet.collides_with, self.bubbles))) self.bubbles -= colliding_bubbles class Bullet: exists = True def collides_with(self, bubble): return random.randint(0, NUMBER_OF_BULLETS) == bubble def __nonzero__(self): if self.exists: self.exists = False return True else: return False class StrongBullet(Bullet): """ Can take down two astroids """ exists = 2 def __nonzero__(self): if self.exists: self.exists -= 1 return True else: return False class InvincibleBullet(Bullet): def __nonzero__(self): return True g = GameWorld() g.bubbles = set(range(NUMBER_OF_BULLETS)) g.bullet = StrongBullet() g.handle_collisions() print g.bubbles
Oh, I thought you were making a joke about being from the future (given your tag).
Here is is: https://gist.github.com/3325733
[Here ya go!](https://gist.github.com/3322488) A lot of random commented out stuff still in there from my initial failures and tests. My original plan was to keep track of incoming balls, calculate the vector once the ball entered the zone the bot was watching, and then stick my guy at the end point. With him just tracing the ball, the main failure point of my bot is triggering the jump too soon and not being in the correct spot. But, it's good enough for a quick funzies project! I (of course) made a little [video of it in action here](http://www.youtube.com/watch?v=xbhPM_01CUE&amp;feature=g-upl). While the vector probably would have worked better, just tracking and readjusting the goalies position gave him a constant enigmatic jiggle, which I thought was funny, and therefor worth keeping. 
That isn't an attack, it's the expression of a personal opinion. The author is entitled to his/her opinion, and in this case I suspect that many of us would agree. Although you CAN write Perl that's easier to read, but there is a certain amount of "uglification" built into Perl... For instance, putting "@" or "$" before variables isn't exactly reader- (or writer-) friendly. Btw, if we take away the word "scripting" in that line, it works even better. Readability is an important aspect to any language, one that is often overlooked by the &lt;fill in your favorite ugly language&gt; crowd. As humans we often forget that our learned ability to read the language hieroglyphics easily is not the same thing as the language being easy to read.
Having white space to the left makes code hidden? We are arguing semantic preference. I've written over 100k lines, and prefer nested conditionals so I don't have early escapes. You prefer the opposite. It's like next line or current line braces on declarations, it is a religious war.
More specifically: &gt; TypeError: 'generator' object is not callable
Way more than that. My greatest logical reason to have nested statements with conditions to execute code is actually brevity. You need fewer lines if you have: if(not X &amp;&amp; not Y): do stuff return Than if(x || y) return do stuff return When you have multiple early escapes, they are just adding extra cruft with extra return statements that are *already* making static code analysis harder. I should also note I love John Carmacks work and he really nails static code analysis [here](http://www.altdevblogaday.com/2011/12/24/static-code-analysis/).
&gt; For instance, putting "@" or "$" before variables isn't exactly reader- (or writer-) friendly. Actually, I think it is, somehow. &gt; As humans we often forget that our learned ability to read the language hieroglyphics easily is not the same thing as the language being easy to read. What do you think the difference is?
I don't know why you got downvoted. You're absolutely right. Clever programming yields clever bugs. Keeping your code as straightforward as possible is often the best course, even if that means you have to do more typing. This isn't Perl, guys.
It is not as featureful or mature an API as AWS. But it has improved considerably since the OpenStack project started. Right now the Rackspace Cloud service is kind of a DIYers AWS, they give you all the indiviual components you need, but it's up to you to tie them together. OpenStack is more a true "next generation" cloud platform that might even leapfrog AWS, but it still has a ways to go.
Using Windows for scientific work? Sounds like we've isolated your problem...
Fair point. My mistake.
Clarity is the reason. As it is you can see the difference among func(), generator.next() and generator.send(x) just by reading the code. If you make them callable then you cannot tell the difference between function calls and generator invocations without looking up their definitions. 
To use another language as an example, in Lua, coroutines created with the `coroutine.wrap` are callable, but that's because the wrap function is a policy function. What it's actually doing is creating a closure that _wraps_ the mechanism function `coroutine.resume`, which is more or less the same as a `generator.send` call. I'd say the reason generators aren't callable in python, is because they're a mechanism, and not policy. If you want a callable generator, you'll have to create your own wrap function.
I tried and it is working fine in a spanish keyboard
That's right.
here is a pastebin of the code http://t.co/tiaNjU3p let me know what you think of it please
Is this supposed to be open source? I can't see anything in the source code listing...
I actually came across it after I had been using python for a while. Overall I thought it was pretty good, but yes, it's *very* basic. I'm sure everyone's different, but the way I learned was by doing Ruby Quizzes (google it) and reading (all) of the python documentation. Also, if you really want to learn, the interactive interpreter is your friend. Try to use it as much as possible.
.py available in downloads, should open fine with any text editor.
right, i'm currently and have been out of work for about 3 months, sadly i had liver failure which kind of fucked me up - I'm feeling better and want use the time off to add something to my resume, so i'm starting with Python and may check out Ruby after. Any thoughts?
That first unit was god awful. There are WAY WAY better python tutorials that cut through the meat of the way they explained stuff. It got better eventually but a lot of the crux still stayed. I found it much easier to learn elsewhere and then come back strictly for the examples of building stuff.
&gt; That's a really peculiar count-argument! For the curious, this is consequence of integer caching: &gt;&gt;&gt; number = 10 &gt;&gt;&gt; id(number), id(10) (29336160, 29336160) &gt;&gt;&gt; import ctypes &gt;&gt;&gt; offset = ctypes.sizeof(ctypes.c_long) + ctypes.sizeof(ctypes.c_voidp) &gt;&gt;&gt; c_obj = ctypes.c_int.from_address(id(number) + offset) &gt;&gt;&gt; 10 + 10 20 &gt;&gt;&gt; c_obj.value = 20 &gt;&gt;&gt; 10 + 10 40 It actually segfaulted when I tried to do 1 + 1 the first time. &gt; There is no specified behavior when an instantiated generator is called. That seems equally as dubious if not more so: I can easily specify I behavior if I'm willing to monkey patch and kludge around. 
Very cool script, but don't be afraid of your links getting taken down. The limit is 20GB bandwidth per day for free accounts and 200GB for Pro accounts. From the Dropbox support pages: &gt;Links that use up more than 20 GB/day for Free accounts and 200 GB/day for Pro and Teams (paid) accounts are automatically suspended. &gt;If your account is flagged, we will send an email notification to the email address registered with your account. Once flagged, public links will be temporarily disabled and users who use the links will see an error page instead of your file. &gt; &gt;If you think you've been inappropriately flagged, contact our support team. https://www.dropbox.com/help/45/en
Hmmm. Do you have any prior programming experience? Also, how are you with math? And, more importantly, what are your interests (as far as computing goes)?
I thinks pretty good, but this is better: http://www.diveintopython.net/toc/index.html 
The math point is a good point, but I'd honestly say just give coding a shot and see if you take to it. I did **horribly** at maths in school, but I love programming. Bad teachers, and all that, but I had no idea until I tried it.
I just read "Learning Python" the O'Reilly book, if you have a pretty decent grasp of OOP learning Python using that book is pretty straight forward and it covers all the ins and outs that you need to know to get going. (mind you the book is a little long, but if you like the details like me, it's a good thing)
Good book...feels like it's necessary to jump around a bit sometimes. 
there should be a 3.0 version somewhere around the nets.
Yeah, what's nice is the author assumes it, so he'll often refer to other sections if he thinks it's relevant.
No. Which is why I can relate heavily. I tried different tutorials and different online programs and for the love of god I can not recommend Udacity CS101 (at least the early units) or Codecademy. I strongly prefer courses that removes all the bullshit and get straight to the point, particularly with examples or things you can do to recognize the idea of what something does. Perhaps thats why I absolutely hate Udacity's way of teaching. For example, I hate that they spend a few minutes writing shit out like &lt;variable&gt; = &lt;something&gt; vs just typing an example and just explaining that the left is an example of a variable and the right is what we're doing. If you want an example of a Python tutorial done right (something that I was able to learn from, I found this on Youtube while googling for Python tutorial: http://www.youtube.com/playlist?list=PLA175E8A1816CD64B&amp;feature=plcp). I went through that with ease. Alternatively, I also like Zed Shaw's book, learn python the hard way. It's pretty damn good. Admittedly, both still cover basics. Which is why I said its best to go back after you've learned the meat of python simply for the example programs Udacity develops, in this case, the search engine. I'm also the type that absolute hate people who recommends people read official docs saying they're awesome. I swear official docs are complete mindfucks for beginners (at least they are for me). I don't know if you have programming experience already or what not, but definitely check those mentioned above out, I found them WAY WAY more useful.
Crap. And ever so slowly Python 3 is starting to amass a set of features that are nice enough to have that it starts to become thinkable to take on the pain of porting all that Python 2 code. I *so* do not look forward to doing that. 
Bottle is cool and I think underrated. but for some reason I just never do anything with it... so I don't have a lot of reason to hang out on the subreddit
So: for someone who is thinking of writing a new web app with no legacy baggage, should I be looking at Python 3? What is the state of web framework wrt to Python 3? Are they porting over, or are they staying on Python 2.x? 
As a friend told me when I started with Python, if you want to write your own libraries for a lot of things, go ahead with 3. If you want to avail yourself of all the hard work of the community, go with 2. Of course it's changing over time and I don't have much experience with web apps. Maybe someone with more web experience can give you more specific information.
In case you didn't know, this is a dropbox feature :) http://www.groovypost.com/howto/howto/dropbox-online-photo-gallery-free/
[The Pyramid framework](http://docs.pylonsproject.org/projects/pyramid/en/1.3-branch/whatsnew-1.3.html) works great on python 3.
It's really not that bad. In fact, you'll probably find bugs in your code. However, one recommendation. Don't try to straddle py2.x and 3.x. For some projects it's possible, but often it's best to bump a major version and cut over. Most pain I've experienced with py3.x packages has to do with half-hearted attempts to make it work on both. Subsequently, the 3.x pseudo-branch bit rots because the author isn't bothering to test it against 3.x. Sphinx/docutils, however, has apparently done a wonderful job.
I see (curses) that Flask is still incompatible with Python 3. Sigh. 
Yeah, I'm actually quite shocked with Flask/werkzeug because of that. For a project that claims to be a micro-framework, you'd think that they would be an early adopter.
pyuno as in the Openoffice/Libreoffice API? Ubuntu already has a [python3-uno](http://packages.ubuntu.com/precise/python3-uno) package.
Ah, I hadn't seen that. Thanks!
JFDI?
Just F**king Do It That would be my guess on it.
Just Flippin' Do It?
[Bottle](http://bottlepy.org/) works on Python 3.x and 2.5+ (single codebase)
Great. Are you planning on porting pyglet to use nspython as an option? It would be cool for when pypy starts to make cffi faster than ctypes.
The problem with converting completely over to 3.X is that you essentially preclude others who are not able to convert over at this time from using your library.
I had some programming in college, but more or less, i dont recall much - i'm not good at math....but im not looking to be a programmer here, i'm interested in automation, thats a big + for a Sys Admin these days.
lulz. I really love pocoo for the satellite Python ecosystem that they've managed to create. Python *really* does need more of those, and JFDI may be a little too pushy of wording. Certainly I wouldn't want anyone to rush into a solution, but considering the fact that it's a problem for their 3.x port, it would seem that they completely ignored the problem in the first place. Just because python2.x lets you ignore it, doesn't mean you should.
But the essence of your reply then seems to be that making the switch is not a big deal for users stuck on 2.X because you can just keep maintaining the old branch, but in that case you still end up maintaining two branches and so you haven't reaped the benefits of converting completely over to Python 3.X which seems to defeat your earlier point.
The mere maintenance of a 2.x branch does *not* Preclude a library author from reaping the benefits of a 3.x port... The part missing from my original response is that /new features/3.x specific improvements/ should *only* go into the 3.x branch, and only critical fixes should be cherry-picked back. Sure, sometimes, you can't just do a cherry-pick, and you'll need a whole new patch for the critical fix.
Source here: https://github.com/blha303/99bottles App info here: http://blha303.tk/99bottles Cos of Twitter's rate-limiting, I set it to post every 120 seconds. 50,000 * 120 seconds is about 4 months 18 days. It'll be starting in a few hours.
This may not answer your question directly, but I recently read an interesting post exactly about implementing plugins here: http://eli.thegreenplace.net/2012/08/07/fundamental-concepts-of-plugin-infrastructures/
Just running Cython against unmodified python code is not going to give you much of a speedup. To get any gain, you need to add cython specific annotations to declare variables to be a certain type. This is generally the big killer for python performance - even a very simple operation like adding two numbers involves a lot of work since it needs to check their types, perform the appropriate operation, allocate a new PyObject for the result etc. Generally any major performance increases will need to either *infer* the types (for a language like python, impossible to do at compile time for many instances) or require the programmer to specify them as cython does.
RHEL3 is supported until 2014-01-30. RHEL3 shipped with Python 2.2. RHEL4 is supported until 2015-02-28. RHEL4 shipped with Python 2.3. RHEL5 is supported until 2020-03-31. RHEL5 shipped with Python 2.4. RHEL6 is supported until 2023-11-30. RHEL6 shipped with Python 2.6. Most of the features that allow you to support both Python 2.x and 3.x from the same code base (such as `from __future__ import unicode_literals`) were only backported to Python 2.6 and 2.7. If you have customers that still need to use Python &lt;= 2.5, it becomes much more difficult to support 3.x from the same codebase. It is not laziness that is keeping people from porting their libraries. It's their users. I'm sure there are countless module authors that would love to stand up today and announce dropping of support for Python 2.4 and 2.5, or even 2.3, because it would mean they'd finally have a fighting chance at getting to work on that 3.x port. But they can't just do that, because they have users that work at large companies that run enterprise Linux, and those distros stick around forever. If you look at the above numbers, it won't be until 2020 that you can definitively say that Python 2.4 and 2.5 are dead. Django 1.4 was just released in March of this year and they finally got around to dropping support for 2.4, but they still support 2.5. That means when 1.5 rolls around they can finally drop support for 2.5 and *then* they can start the process of offering experimental Python 3 support. Again, it is not laziness. 
Thank you for explaining :)
For me, it's `nonlocal`, aka proper lexical scoping.
Right. I see what you want to provide but I'm not sold yet. Mind you, I'm still using httplib2 anyway ;) I think the HTTP method tail is probably too much implementation bubbling up. If you were to replace POST() by create() for instance, that would mean one could use Hammock as a data model provider, independently from the underlying mechanism. In other words, you could use Hammock to load data from a web service, a file, a database and it would feel more natural. Just some thoughts :)
There is no need to distribute two versions if the only difference is the folder separator. Verify the operating system and create a SEP constant according to it, or (even better) use `os.path.join`. **Edit:** Here I have two posts how to get the image type and demension more elegantly: [Get the dimension of an image](http://pythonadventures.wordpress.com/2011/04/04/get-the-size-dimension-of-an-image/); [Determine the image type](http://pythonadventures.wordpress.com/2011/04/19/image-type/).
A couple of thoughts: To add URL components, you allow attribute access, calling any component with arguments, and passing extra arguments to the HTTP call. As the Zen says, "There should be one-- and preferably only one --obvious way to do it." There's a good reason for that: it leads everyone to do it the same way, so when you read someone else's code, it's immediately clear what's going on. So, IMHO, you should pick one method and stick to it. Also, a lot of webservices use query parameters (`?search=foo&amp;page=1`). Could those be worked in naturally?
Thanks! The page you linked helped me to more clearly understand how hooks are implemented. 
Looks nice except I can't use Requests yet since it doesn't support client SSL certificates :-(
Out of interest, what does it mean to "support" an OS that is stuck with software that is clearly insecure? If you're not providing an upgrade path for things that are broken, what does this support really mean? Are Red Hat backporting all the security patches to 2.3/4/5/6? If so, what about the 3rd party libraries we're talking about? I'm no fan of the "ship early, patch relentlessly later" approach to software that we now seem stuck with, but this is the other end of the extreme where we actively encourage people to stick with something that is 15 years old and quite possibly dangerous in some way.
I took a class that gave REALLY long exams on tight deadlines that were open book and open (physical and digital) notes so I wrote solvers in python for the various problem types. I would input the specifics and it would output the perfect solution, correctly formatted with all of the steps. I then just had to copy it down on my paper. It got me perfect scores without violating any rules :-) 
&gt; [Django] can finally drop support for 2.5 and then they can start the process of offering experimental Python 3 support. That's already happening: Changes for single codebase support are being applied to the main development branch (see commits with messages prefixed with `[Py3]`).
Half the changes in the changelog lin the linnk sound like nice additions to me.
Shed Skin is an "Optimizing Python-to-C++ Compiler" that compiles ordinary Python code to C++ in order to speed up the code, typically by an order of magnitude or more over standard Python (and even over Psyco). Still in experimental form, but it works on a variety of real-world examples: http://code.google.com/p/shedskin/ http://shed-skin.blogspot.com/ 
shed skin does not compile python. It compiles something similar to Python, akin to RPython, but with restrictions on dynamism.
You're right about it being difficult to support 3.x from the same codebase, but your claim that "they just can't do that" is wrong. A 3.x *branch* does *not* keep the "countless module authors" from continuing 2.x support for whatever period of time demanded by contracts or requested by users. Added difficulty? Yes. Impossible? No. Also, if Redhat is supporting an old version of Python, that's *redhat's business*. The module author signed no contract, nor does she/he get any money. (Sure, there may be exceptions such as distro employees working on the OSS project).
[CFFI](http://common-lisp.net/project/cffi) is already taken by a Common Lisp C foreign function interface. It's under active development. 
I didn't know there was an acryonym reservation agency for nerds.
Either. However, as you affirm, the advice is more sound in the case of your own codebase. Naturally, provided a tractable situation with your dependencies.
I've wondered why there is so little optimization opportunity. Take Scheme as a counter example, where many compilers can generate very good integer handling code, but Python can't, even though integer-integer addition has the same semantics in both languages. Is it that pathological cases are hit more often in "typical" Python code? Or maybe some irregular Python semantics that would break the typical "easy" optimizations? What are some examples? Or maybe all the good compiler writers would rather be working on Haskell or JavaScript? (I think I need to start reading some of the PyPy papers) 
Sorry for the bad scripting in this script, still on a pretty steep learning curve. I learned quite a bit from making this script, and thing others might do as well. Feel free to clone the repo, and make any change to it as you please. **Plus:** it's quite fun to see what people upload on sites like imgur.com, without any thought of who is going to see it. 
But this important for some reason!
There's a new version if you want to learn python 3. Anyway it only brings you up to speed on the basics which haven't changed.
&gt; Also, if Redhat is supporting an old version of Python, that's redhat's business. The module author signed no contract, nor does she/he get any money. The (implicit) contract is between the author and their users, not the author and Red Hat. If you have a mailing list full of users all telling you, "I work at $FooCorp and we may only use RHEL5. Don't drop Python 2.4 support, otherwise I won't be able to use your software!" then it doesn't really matter how or why or who's responsible. The fact is that if you care about your users you don't want to strand them.
except ImportError: import bailout
k, You're using contrived situations to support your position. This is reddit comments, and I'm all about some speculation, but the framing this time around is just tailored too well to suite your argument. Dropping support for older versions of Python in *future* releases of a project does *not* mean support in past releases magically disappears. It just means they don't get the new hotness without upgrading Python. If the users' institutional policies are so broken that they can't upgrade Python, why is it that they can upgrade a particular package willy-nilly to take advantage of its new features? Seems like an inconsistency to me.
CherryPy was one of the first Python web frameworks to support Python 3; it's Python 3 support is first-class.
&gt; clueless business majors use VBA? No "business majors" I ever heard of in 15 years know how to code shit.
&gt; the excel team to reaaally support python... the M$ Excel team ??? why should they ? what's the benefit to M$ ?
This -&gt; "I work at $FooCorp and we may only use RHEL5. Don't drop Python 2.4 support, otherwise I won't be able to use your software!" Not one part in isolation. The whole thing.
what's the architecture behind this tool ? is it based on IronPython ?
This completely blew my mind until I realized you're just displaying GIS results. Nice.
No, there's a general preference for trying to stay out of eachother's way to avoid confusion.
X posts are ok according to reddiquite. 
It's not under incredibly active development https://github.com/cffi/cffi/commits/master, but also topics of lisp and python are so drastically different, you'll be looking for one or another anyway.
Thanks for the hard work!
eh, the onerous part is ignoring the features you can't use because it wouldn't be portable. yield from heaven()
It's not that hard to add "Python" to the search terms, I really doubt this will be a problem.
looks really similar to [slumber](https://github.com/dstufft/slumber) both really clean syntax for dealing with rest though :).
Post in /r/forhire might find someone there?
Try "google".
I love its music.
Counter reply 
Some tips: downloadImages should be called downloadImage, it downloads one image don't do: local_file_name = dlPath + filename do instead: os.path.join(dlPath, filename) you don't need to do f.close(). That's what the with statement takes care of for you. ridiculous nitpick: in your check_output_dir, you should do os.path.isdir to check that the file exists and is a directory. You just assume if the file exists that it is a directory.
Brilliant! I use buildout for every single python app/script I build and find it much better than virtualenv/pip; so glad to see that it's still being supported and improved!
Yes, python is pretty big in finance. Virtually all the major firms are using it although to limited degrees. My current firm has a substantial amount of production code using python. It actually works fairly well.
Pretty cool. In general I advise against/try to avoid using metaclasses (there are usually other ways to do what you want, like class decorators) This usage justifies itself.....just barely. Seems you could just not use metaclasses, and define your `__init__` and `__iter__` methods on Choice itself, then you just have to change your syntax to: `choice_field = models.CharField(max_length=2, choices=ChoiceClass(), default=ChoiceClass.FOO)` adding 2 parens vs using metaclasses /shrug I guess it seems a little weird to have a class that you will *never* create an instance of also I don't think i've seen metaclasses defined inline like that before, I think i prefer defining it somewhere else and not have class definitions inside of class definitions. Sorry if my feedback is weird, i think it's a neat idea
I put it on FileDropper. Do you know a better file sharing service? **Update:** [Here is the script](https://github.com/jabbalaci/Full-Circle-Magazine-Series) that put all this together.
I think what he's saying is that when you try to access an image that isn't there, you don't get help.jpg.
It is, in fact, a wrapper for Google's search API, dressed up to look a little more magical.
No, you can just do: http://dpaste.org/0UwJR/ You just have to do `choices=ChoiceClass()` instead of `choices=ChoiceClass`
 &gt;&gt;&gt; Foo.C (3, 'CEEEE') That's no good, you want Foo.C to return 3 and not a tuple.
TIL that `font-family: cursive` exists and it makes your tech blog Comic Sans
Ah, fair point. but why do you need that? is 2 values not enough? (db, display) ?
yayınlayabiliyorum.Kısacası 3lüsü
The best font
you do not have to install anything just download the pdf
Well, I stand corrected. I first just tried the giant blue [ Download &gt;&gt; ] button, but I agree that the other one works just fine. Thanks for the reading material. :-) 
What do you gain when using a choice class and instances over a metaclass? Either you have a global instance for each choice which seems a bit pointless (a global class and a global instance?) or you create an instance every time you query: `models.Something.objects.filter(prop=MyChoice().MyValue)` which looks a bit icky to me.
Can you use this for mp3s? 
This is my version (based on [pluxes version](http://www.reddit.com/r/Python/comments/y6fzu/small_noob_script_random_imgurcom_image_downloader/c5t2v9y)): https://gist.github.com/3353430
Has anyone really been far even as decided to use even go want to do look more like?
nginx configured to run as "root" ? Why do people always ignore the security basics ?
Why not just make a pre-compiler and rewrite traceback and the exception classes and standard library? 
May I recommend /r/learnpython to you? I think they will appreciate your experiences.
H
I found a copy on an old system I was using as a mame cabinet I fired it up and tool some screenshots they are done with my phone sorry for the quality. If there is intrest I may try to revamp the old core and get it breathing again. [pyper](http://i.imgur.com/FrUxr.jpg) [action menu](http://i.imgur.com/BU0SH.jpg) [docs aggregator](http://i.imgur.com/LRTGP.jpg) [footer bar](http://i.imgur.com/TTx07.jpg) 
short attention span much ?
Another language that might be similar in goals are http://code.google.com/p/anic/wiki/Tutorial
I'm amazed over how much work people can put down just to not have to learn to use the python debugger ;) 
I had created a random imgur images viewer: https://github.com/svartalf/random-imgur Demo doesn't works now, but you can check source for some ideas, maybe.
A friend suggested I post a bit more info about what it actually does, but I think the best way is to defer to the example on the website itself. This is a 100% complete option parser: """Naval Fate. Usage: naval_fate.py ship new &lt;name&gt;... naval_fate.py ship &lt;name&gt; move &lt;x&gt; &lt;y&gt; [--speed=&lt;kn&gt;] naval_fate.py ship shoot &lt;x&gt; &lt;y&gt; naval_fate.py mine (set|remove) &lt;x&gt; &lt;y&gt; [--moored|--drifting] naval_fate.py -h | --help naval_fate.py --version Options: -h --help Show this screen. --version Show version. --speed=&lt;kn&gt; Speed in knots [default: 10]. --moored Moored (anchored) mine. --drifting Drifting mine. """ from docopt import docopt if __name__ == '__main__': arguments = docopt(__doc__, version='Naval Fate 2.0') print(arguments) Team it up with [voluptuous](https://github.com/alecthomas/voluptuous) for rich validation: """ Usage: prog.py --count=N OUTDIR FILE ... Arguments: FILE input file OUTDIR out dir Options: --count NUM number of operations [default: 1] """ import docopt from voluptuous import Schema, Invalid, all, clamp, coerce, isfile, isdir if __name__ == "__main__": args = docopt.docopt(__doc__) schema = Schema({ 'FILE': [isfile("The input file does not exist")], 'OUTDIR': isdir("The output dir does not exist"), '--count': all(coerce(int), clamp(min=1, max=5)), }) try: args = schema(args) except Invalid as ex: print "\n".join([e.msg for e in ex.errors]) print args 
I'm pretty sure it will accept that as is, but you'd have to split it and handle it yourself. What would you like to see it do instead?
Holy crap, using the docstring to represent the option parser.. genius. 
Thanks for the hint docopt + voluptuous seem really cool.
Assuming you are correct, that is great news. When my friend told me that, of course I decided to use Python 3 :) Recently I have been backporting to Python 2 so I can use PIL and OpenCV so I had to take his advice in the end.
no need to prove that it runs on python 3. You need to prove that this is _actually_ the first.
Huzzah DSLs. Though, you lose any benefits of extant static analysis tools so it's a trade-off.
what static analysis tools do you use with python? I know pep8, pep257, pyflakes, pylint, pychecker. And I can't see any disadvantage of having DSL such as **docopt** with those tools.
Why is this interesting?
If there's a syntax error then your editor/IDE won't have a way of notifying you.
`.split(':')` is your friend! 
Because Python 3
Please give an example of such a library. Python's getopt, optaprse and argparse do not support anything like that.
You can also use the flags specified on the command-line of the uwsgi: &gt; --die-on-term --master --uid www-data --gid www-data --logto /var/log/uwsgi/emperor.log and put them on your uwsgi.ini, so you don't have options on command-line **and** on the uwsgi.ini. To solve socket permission problems you can use **socket-chmod** from uwsgi, so nginx will be able to access it without problems. 
QTcpSocket needs an event loop. So either create it in a QThread and call the thread's exec\_() method, or instantiate a QCoreApplication and, again, call exec\_() on it.
For the record, this post was downvoted and I think rightly. You're entitled to ask for help, or advertise a job, or whatever. But in order to make a contribution, and not be downvoted, and exhibit simple good manners, it's better to explain your purpose and say why we should care.
Just wanted to say i love docopt! It saves so much time writing boilerplate and helps maintain a consistent interface across all of my scripts. It's one of those genius ideas that seems obvious as soon as someone else thinks of it. 
I'm sorry. What were we talking about? 
Neat, though it might be worth mentioning the [fileinput](http://docs.python.org/library/fileinput.html#module-fileinput) module.
I think a docopt2argparse will solve the problem.
I'm doing my PhD in computational plasma physics. I switched from IDL to Python and haven't looked back. There is a module for almost everything I could ever want. 
I got a simple site running months ago, though it wasn't on the public Internet (just a test site for the port of Django to Python 3).
I manage an open-source project and developing in only Python 3 is not feasible. If most users use Python 3, then development should be done in Python 3, and if most use Python 2, use Python 2. In my case it's 60/40 in favor of Python 2 and I even can't fully support Python 3 b/c packages like wx and VTK (technically matplotlib too) don't exist. I tried using 2to3, but it's buggy for binary files. I use a find-replace method that's almost perfect and 2 orders of magnitude faster than 2to3. It's a pain, but it can be done. Companies should just pick a version, and code to that.
Cython is awesome. You can incrementally improve/decorate your python code with static type annotations, and the "cython -a" feature is very helpful for figuring out where potential hotspots are. Just running Cython on unmodified Python2 code should work just fine, and give you a minor speedup. But if you know that certain places are only ever going to get certain types, you can "opt out" of paying the performance tax of dynamic typing. It is true that general optimization of Python is difficult. PyPy seems to offer some very significant speedups with their sophisticated JIT, so if that works for your code, then go for it. However, do be aware that the amount of performance gain can vary quite a bit depending on the input code, so there will probably be some tuning work there, too. 
mainly because Python's a great scripting language &amp; has a boatload of relevant libraries in just about every field you can imagine. it would make excel a better product, but alas theres too much momentum &amp; existing code wrt vba... 
Cool, I can't wait for the wos to pass the 50%, we're almost there with 80/200 so it's real close...
&gt; I'm not familiar with the other shells, but bash arrays do not involve colons at all. Nor is there even an easy way to convert a colon-delimited string to an array in bash (that I know of). huh? you’re right: i’ve got to investigate. &gt; It is true that some specific applications' options and/or environment variables are expected to be colon-delimited (e.g. PATH), but that entirely depends on the application. Other applications expect semicolons, or specifying the option multiple times, or passing a filename with the list, etc. There isn't a single standard. here you’re wrong: applications on windows use semicolons, in linux, it’s colons. everywhere i’ve ever looked. * `$PATH` * `$LD_LIBRARY_PATH` * bash’s `$CDPATH` * java’s `-classpath=` option * ruby’s `$LOAD_PATH` (the variable’s short name is even named `$:`) * …
you could also read this as "how to get your python web application setup with apache2/mod_wsgi" the directions are mostly universally applicable.
 import physics results = physics.lhc.collide(physics.Positron(), physics.Atom("Au"), velocity = 0.9 * physics.C)
I'm not sure what Python's error handling has to do with this conversation, but I can assure you that I've done a fair amount of error handling in both languages. I greatly prefer Python's exceptions (and just about everything else). In fact, I wrote a MATLAB extension to bidirectionally embed a Python interpreter in MATLAB so that I could use Python with our lab's existing software: https://github.com/kw/pymex
Thanks for the informative response.
That's the problem with adverts these days. It's generally safest to click on the least prominent download link.
I disapprove of muting the error, imo a better solution would have been outputting "if you see permission denied here, it's not a problem, see bug report at someURL"
Spam. Ignore.
You've never dealt with "real users", have you?
Consider that almost all of the examples you listed are environment variables and not command-line options (and Java's -classpath is also available as an environment variable). I agree that it's common to use a colon for environment variables, particularly for paths (with semicolons on Windows due to the path syntax). But this is a library for command-line options. It is quite rare to pass a list of things as a command-line option to begin with, but when it does happen it really tends to vary by application, in my experience. * Some require specifying the option multiple times (e.g. `gcc -D` or `-l`) - this seems to be the most common one, and is easiest to implement with getopt * Others use a delimiter, often a colon (like in `java -classpath` that you mentioned), sometimes a comma (e.g. multiple options in `chmod`), and occasionally a semicolon (this one is quite rare, I can't think of one at the moment but I've definitely seen it) * Others require passing in a file that contains the list of things (e.g. `grep`'s `--exclude-from`) I'm sure there are other variants too. While the colon is great for paths, it's not really as universal for command-line options as it is for environment variables.
I know it's mostly pedantic, but the `except Exception` and hoop-jumping with `e` isn't needed. Just `try` and `finally` and if the `try` had an exception, it'll flow through while still running the `finally` - that's the whole point of a `finally` clause.
Nice catch. Thanks. This code came into being in such an evolutionary way that I was unable to spot this on my own :)
Exactly, could've solved this way quicker if it weren't for that. I do one of two things. 1. pipe the trace output to a pager and do my searching there, so I have some context of what's actually happening 2. grep, but with a healthy -C value, again for context of what's actually happening
Your particular position is actually the worst case scenario. Much of my advice is actually directed toward package/library authors near the beginning of the dependency graph. They have to transition before you can. The advice *does* apply to anyone, but in your case, you're subjected to the support of your dependencies. The only other way to Python3 for you is to find alternative dependencies(unlikely). http://www.blog.pythonlibrary.org/2012/05/24/wxpython-for-python-3-is-almost-here/ http://pythonsprints.com/2011/04/8/matplotlib-python-3-thanks-cape-town-group/ VTK looks like fail. I'd suggest letting them know that you're interested in a Python3 binding.
One thing I found is that by default it attempts to infer the bandwidth on its own, sometimes with unwanted results. You can kind of sort of choose your own bandwidth with bandwidth = 0.2 density = scipy.stats.kde.gaussian_kde(data) density.covariance_factor = lambda : bandwidth density._compute_covariance() 
meh
fuck the users!
I think many python devs spend too much time not getting work done, myself included.
Just beware, they in turn would gang-bang you. ;)
Well, we have tests to prove those mostly work :)
It's not entirely a stylistic detail. If you try to use the same code in Python 3, the exception handling would have gone wrong, because exceptions are only in scope for the `except` block. So it's good to get it fixed now. Besides, that's *example code*, useful to people trying to solve a similar problem. Example code should be your best code: because more people will read it, and because once they've copied it, it's too late to fix things. So, +1 for pedantry.
It's hard coded to use file descriptor 3 to keep stderr while you're not using it. Presumably that will cause problems if another file is already open on fd 3? The docs for `dup2` say "...closing the latter first if necessary." I think it would be better to use `stderr_tmp = os.dup(2)` to get a new file descriptor, then `os.dup2(stderr_tmp, 2)` to restore it. I haven't tested that, though.
if your class has two functions and one of them is an init, it's not a class. http://www.youtube.com/watch?v=o9pEzgHorH0
I think there is no such kind of framework, the stuff you need uses too many kinds of services. Each combination of services will give you different ways to get what you want. I did some of the stuff you need using Postfix SMTP Access Policy Delegation, python imap lib (for dovecot), regular expression, mongodb, spamassassin and log files...
A framework might not be what you are after, a better alternative would be a good service with an API, like http://www.mailgun.com/ or http://postmarkapp.com/ . Dealing with the sending and receiving of email is a messy business.
Sequel Pro is lovely. I spent £2.99 for Navicat Essentials from the App Store. It's not quite as nice as Sequel Pro, but it's a lot nicer than PgAdmin3.
I'm curious about what /r/Python's opinion is on while loops that decrements itself by one each time instead of increment?
Postgres truly is a lovely database. There's loads to love about it. Just one little example: tsearch2. A lot of the time it means you don't have to bother with a separate full-text search engine like Lucene/Solr or Sphinx.
He also wrote [*Learn Python The Hard Way*][1]. [1]: http://learnpythonthehardway.org/
I was expecting something more like this: &gt;&gt;&gt; import sass &gt;&gt;&gt; print sass.compile(string='a { b { color: blue; } }') 'You'd like that wouldn't you?'
This is really awesome. A couple questions: - How do you handle syntax errors? What put me off pyscss is its silent handling of syntax errors. - Do you provide a binary like sass/scss do? Edit: Also, isn't it dangerous calling it "sass" if it provides scss syntax? I would expect either import sass/import scss or from sass import scss, sass.
It may be, but only because of how popular apache is. Nginx + gunicorn (or uWSGI) is also popular.
PySide runs on Python 3. What's so attractive about wx?
E.g.: &gt;&gt;&gt; sass.compile(string='a { color:') Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; sass.CompileError: ERROR -- , line 1: error reading values after :
Sounds cool! The executable would be for something like django-sass. You may or may not get some of my offspring if you manage to make django's staticfiles compile scss files at collection time. By the way, cross post it to /r/myopensource! That subreddit needs some love.
No python 3 support makes me :( (Not that I'd actually use it in py3, but still - write it to be compatible!)
Can't you get Django compressor to call different compressors? 
Sweet! Would we be able to port Compass using something like this?
actually it can handle "has been read", since read-acks are send out as email also its rightfully not possibly by default, to ask the imap of a random person if a certain email has been read
I'm the author of that blog and I just wanted to let you know that it seems rather straight forward to use the same library to handle keyboard events as well (https://developer.apple.com/library/mac/#documentation/Carbon/Reference/QuartzEventServicesRef/Reference/reference.html check CGEventKeyboardGetUnicodeString)
PyQuery is a nice companion to mechanize if you like jQuery style selectors.
What was the reasoning for adding flask support as opposed to any other framework? e.g. bottle, web2py etc.
As far as fetching the data goes, check out requests. It's vastly superior to urllib/urllib2. Way more "pythonic". Good documentation, too. As for scraping the data, I'm with dustinmm80. BeautifulSoup has never disappointed me.
Check out udacity.com, the CS101 course is to build a web scraping bot.
The kind of web bot matters. If you want to 'fight above your weight class' then BeautifulSoup and the like are great tools. I suspect, however, that you'll come to a point where the tools aren't meant for what you are trying to do. So from a self taught amateur who might have posted a similar question several months ago, here's where I would start: xpath - this is really starting with HTML because you spend most of your time inspecting the target code and then building your bot and xpath from what you see. At the heart of xpath is regex. Xpath with help you target the tags that contain the information you are looking for and regex picks up where xpath leaves off. regex - whatever your bot aims to do, it needs to process the data you feed it. You will not be able to predict the content your bot encounters but you can use regex to clean it up or target the parts that matter to your logic (or both). Given your background, I think you need to spend a good amount of time with regex. It will become second nature and is incredibly powerful. REST - this is non-trivial (not hard though) in that you will eventually want to work with APIs. Census data, for example, has an API. Rather than scraping content from a site (you'll eventually encounter terms of use issues), it is usually easier to work with an API. This is really straightforward. I'd recommend requests for it's simplicity. It is built on top of urllib3 (you can still find value in urllib and urllib2) and supports asynchronous requests, oauth, etc. If you find that you want your bot to POST as well as request, this is a great tool. My last bit of advice would be to use virtualenv. You are probably going to spend a good amount of time tinkering with different tools and modules. Some will work well, others will not. Rather than leaving your environment a pigsty, use virtualenv and save yourself the grief. Not really going to help your web bot but it is a good new(ish)-to-python starting point. EDIT: Links Requests - [http://docs.python-requests.org/en/latest/index.html](http://docs.python-requests.org/en/latest/index.html) Xpath syntax - [http://www.w3schools.com/xpath/xpath_syntax.asp](http://www.w3schools.com/xpath/xpath_syntax.asp) Primer on virtualenv - [http://iamzed.com/2009/05/07/a-primer-on-virtualenv/](http://iamzed.com/2009/05/07/a-primer-on-virtualenv/) virtualenv with different versions of Python - [http://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv](http://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv)
Alternatively lxml.html can be used (http://lxml.de/lxmlhtml.html ). If you can install it use it cause BeautifulSoup is very slow ...
I'm the author, just a heads up that imports are logging, but running is backed up with one small bug I'll get fixed tonight. Sorry for the delay.
Agreed. I've always slightly preferred BeautifulSoup's syntax, but lxml's HTML/XML parsing engine is much faster, and the syntax is a bit less object-oriented but is still very simple and easy to use.
Scrapy may be overkill, depending on what kind of information he's trying to gather. If he's just trying to pull things from a few URLs, requests would be much more suited to the task.
requests and lxml (specifically lxml.html) are my bread and butter for web scraping and anything involving web clients. If you could post more about the information you're trying to collect, we could probably give more tailored advice.
Another Michigan-based Pyramid developer? I thought I was the only one. PM me your contact info if you're interested in connecting. Edit: Ah, I found you. Mark Ramm is the guy who actually got me to take a look at Python when I was just starting to pick-up Ruby. Never went back.
Wow the responses are awesome. I'll look into this when I have a moment. About the purpose: I mostly want to do it for fun but I thought that for practice I scrounge Google Scholar for some stats (publications/citations per department). 
No, it doesn't currently work offline. It's something that could happen with a mobile client down the road, especially since it can work off a sqlite database, but nothing currently enables offline viewing. In looking at Bookmarked.us I can't really tell a ton. I can't see any link to docs/the source. I'm gussing it's a simpler model overall. Bookie is a shared user service, so I can see other bookmarks, it does readability-like parsing of page content and provides fulltext search on that as well as titles/descriptions, and we have a chrome extension along with the bookmarklet. 
Thanks for the kind words. This has been a pure hobby/learning experience so it's nice to be able to take the time and try to learn to keep the standards you'd like to have in your code. 
Awesome! I went to Mark's RoR weekend tutorial years ago and it didn't click. He did a follow up with Turbogears a bit later and that got me hooked into Python. It took me a few years, but moved from PHP in the day job to Python and never looked back. Love doing Python, though as you can see with Bookie, I probably do as much JS as Python these days. If you're in the area make sure to check out the Detroit-ish CoffeeHouseCoders and hit me up on twitter (@mitechie) as we put together gatherings pretty frequently. Love to see other local Python guys/gals.
A general note about making a web scraper: please read up on [robots.txt](http://en.wikipedia.org/wiki/Robots_exclusion_standard) and obey the preferences of site owners!
Ah, yea I missed you wrote Bookmarked.us. Thanks for the info, I'll have to check it out. I guess Bookie is social bookmarking. It's not really that social yet, but it's got room to be. The idea that it's open source and you can run your own instance let's you have some control over the social side. It's been brought up that implementing stuff like pubsubhubub would be cool to allow some federation one day. All the news with App.net got me thinking a little bit as well. Who knows...it's taken enough time to get this much working. Imports are handled by a backend queue to allow them to stack up. I've got a bug in there at the moment where the files don't match up right. I manuall tweaked yours and started the import. I hit an error: timestamp out of range for platform time_t I'll have to look into and see what's up. The importer is built to detect either Delicious .htm or google bookmarks.html so I bet I've got some time format assumption that's breaking. As for the future, I've tried to keep a list of things on the near future list on the trello board. https://trello.com/board/bookie/4f18c1ac96c79ec27105f228 The big things I want to do is get some more stats into the system with charting, a firefox extension, and nice readable view where you can tag things !toread and then get the parsed readable view of the pages in a nice carousel view that's easy to run through.
Actually Im on lesson 13 right now. Maybe I should catch up tonight with you and try the 30 days challenge or experiment.
I think that page could be more useful if there was a yellow or orange status showing projects that have active development for python 3 support ([eg. Django](https://bitbucket.org/vinay.sajip/django/)) as opposed to those that aren't anywhere close.
I don't have any problems with flask, I was just curious as to why they picked flask. If they picked it because they thought it was the "best", then I would like to understand the reasoning. This may help me (and others) decide what framework to use in the future.
JetBrains tends to be very responsive to users. I expect they received more requests for Flask support than other frameworks. 
I had some fucked up site where no parser except BeautifulSoup worked... but that one was really broken. It had multiple headers, html and body tags nested, sometimes without the closing ones.
See plumbum.readthedocs.org/en/latest/cli.html
Firefox Sync is an open source API. I wonder if it's possible to append a feature to Bookie to connect Firefox Sync with Bookie ?
Of course, but that looks ugly. I don't get the aversion to Metaclasses in this example - its pretty much the same code but with the methods defined in a metaclass. 
Haha, I had the same exact bug with Bookmarked at one point. Let me guess, you're just trimming the last four digits before converting into a datetime object? :D
And we crushed the Whoosh fulltext index. A large import looks to have caused me to try to disobey the 'only one thread gets access' rule. I've reset the fulltext index so saving and such will work again. In the mean time search/filter is limited because of the lack of fulltext results. We'll build them back up.
We picked Flask because it was a highly requested feature and it could be implemented with a fairly small amount of effort. JetBrains does not have any official opinion on whether it's better or worse than other web frameworks. :)
This how that situation is handled in Bookmarked: if child['lastModified'] &gt; 9999999999999: # Chop off the microseconds to make it 13 digits child['lastModified'] = int(child['lastModified']/1000) Google bookmarks.html format only uses 10 digits whereas Delicious uses 16 digits. The microseconds are a bit silly so I just chop them off by dividing by 1000. The code in question is here: https://github.com/liftoff/GateOne/blob/master/gateone/plugins/bookmarks/bookmarks.py#L54 Originally I used BeautifulSoup like you but I later switched to html5lib for portability (it's pure Python) and Python 3 support. Feel free to copy &amp; paste that code if you ever decide to drop BeautifulSoup. I have no problem granting you a license but you're using the GPLv3 anyway so it shouldn't be necessary. Good luck with your project. Like another poster said, the code is nice and clean and wow am I am impressed with your test coverage!
Thanks for the time fix. I'll work on updating that. I agree, microseconds on when you bookmarked something is a bit insane. As for Beautiful soup; in breadability I use lxml and will probably head that route at some point. BS doesn't do much, but I'm sure faster importer times will be a good thing. Thanks for the kind words. There aren't as many tests as I'd like, as the traffic/new users have pointed out by breaking a few things the last 24hrs, but it's something I definitely try to keep up. Glad it's noticed/appreciated by other devs.
 camelot seems as great python gui db development tool: http://www.python-camelot.com/ 
The first thing you need to do is figure out your architecture for when it comes to going through all the links that you discover. 1. Will your program be only single threaded? (Prepare to wait awhile...) 2. How will you store graph data to show which pages lead to others? 3. Will you crawl every *resource* or just HTML pages? Crawling is no simple thing. After you figure this out, I would worry about what you actually find on the pages. But maybe your objective is to "scrape" rather than "crawl"?
Yes but do you use enough custom ruby functions with compass for it to be worth the effort?
Custom functions, the watcher app, the sprite splitting, etc. Edit: Not to mention that compass plugins can add their own ruby code so you'd have to port those you want to use too.
You may want to update your README mentioning the external software dependencies e.g. pdftk. Alternatively you may want to check if pdftk is in the $PATH directories (I know thats not foolproof but just being nicer :))
requests is a great library. I use it frequently with BeautifulSoup to scrape websites.
http://www.youtube.com/watch?v=cSEKnsWcK9I
Ah, thank you for that. I might just switch to using that.
Sorry sorry sorry! It's fixed :/