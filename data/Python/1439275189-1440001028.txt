I personally wouldn't call it clean. It uses inspect module to get locals of the caller which is as implicit as it gets.
Doesn't the first PEP have a whole section describing the differences between f-strings and the format method that discusses why the format method was used (simplicity with translation strings) and why it's different (not being for translation strings at all)?
&gt; TIL I've been doing Matlab wrong for over 2 years. I didn't know the end keyword behaved that way, chock it up to never being formally taught Matlab. I thought it was a magic keyword that didn't have any numerical meaning. Honestly I wasn't taught it, either. I found it while experimenting with the MATLAB syntax to see what it could and couldn't do. &gt; If you're a lay person (read: anybody who doesn't have a computer science degree) and all you need to do is store sequential data then to you they will be functionally equivalent. I don't have a CS degree. Pretty much everything I know about programming is self-taught. That doesn't mean I don't realize that there is a difference between integers and floats, or a difference between lists and arrays. Even in MATLAB you have to understand this, regular arrays and cell arrays are in many ways even more different than lists and numpy arrays. It isn't a difficult concept, either. People have no problem understanding that, although they are both containers, buckets and plastic bags have different properties and are useful for different tasks. The "everything is an matrix" rule is a limitation of the MATLAB language. Don't complain that other languages don't restrict themselves like MATLAB does. It is like coming from a house that only allows plastic bags and then complaining that buckets don't fit in the fridge. Of course they don't they aren't meant to. &gt; For example, in Matlab I can have a 2D array myarr with shape (2,2) and a 1D array indices with data [1, 2, 3, 4]. myarr(indices) will unwrap myarr row by column, even though that type of indexing scheme makes absolutely no sense. (Apparently Matlab reshapes the result to indices as well, so if indices is a column vector myarr(indices) will be too.) In Numpy indices cannot be bigger than the array it's addressing, so the Matlab example here gives an IndexError. I am not clear exactly what this has to do with your previous point. MATLAB lets you "resize" arrays (or, rather, copy an array to a new-size array) because it has no truly resizable data structures. It is, again, a limitation of the MATLAB language. As is common with MATLAB, rather than coming up with a proper solution they just tacked on a workaround. This approach makes it much harder to find bugs since calculation errors in your indexing will often result in the operation seemingly working fine. Python, on the other hand, has real resizable data structures. So it doesn't need this workaround. It can keep things explicit and thus make errors easier to catch. If you want to resize something, use something that can be resized. If you want to use something that can't be resized, then don't try to resize it. The issue with linear indexing is also due to a limitation of the MATLAB language. numpy has "views", which are different ways of looking at the same piece of data. So `arr.ravel()` is a flattened view of `arr`, it takes essentially no additional memory and takes close to no processing power. So if you want to do a flattened index of an array, you can just do something like`np.empty((2,2)).ravel()[3]` for close to no cost, and you can do things like `arr.ravel()[3] = 5`. This keeps things explicit and thus reduces the potential for bugs. MATLAB, however, doesn't have views. Flattening an array always results in a copy, which is both expensive and means you can't assign values to the original array through the flattened version. So, again, rather than coming up with a proper solution, they made a workaround: MATLAB doesn't distinguish between linear and 2D indexes. This, again, can lead to very subtle bugs since mistakes in your indexing, or outright indexing the wrong variable, can still work. And when you combine this with the automatic growing of arrays then you add a ton of additional potential bugs.
You can for example use Autolist: http://tools.wmflabs.org/autolist/autolist1.html?props=297,%20298,%20299&amp;q=CLAIM[31%3A6256] This gets all the pages that are p31 (instance of) country (6256). And then it shows the values of p297, p298 and p299, which are the different country codes. I also has a button to donwload the data as a CSV.
All of that looks absolutely unspeakably horrible. Why not just use `format` or `%` and explicitly state the values you want, instead of trying to make things "easy" via magic? By the look of things, you don't even save typing. So you have the worst of all worlds: its just as hard to write, and harder to read and maintain, as the obvious way with explicit arguments. 
Cool! So what command did you use to install these things? Does Windows use yum or apt-get or something similar? *wink* Of course I know you didn't install those tools with just a few commands. You had to work hard to get them: you needed to know they exist, go out and find them, download them, run the installer, possibly reboot once or twice after each installation, all the things that Linux people don't have to do. That doesn't mean it can't be done: given the time and effort, you can, and have, made your Windows system just as good a development system as Linux is out of the box. Which is my point exactly.
Well, let's see you take a default Windows system and get to the point of being able to install numpy from source. How long did that take you?
Am I the only one finding it *extremely* creepy how a women-only workshop is being coached by 100% men? And no I don't mean sexist or anything. I mean *insanely creepy*. I wonder who's in charge of actually coming up with these programs ...
It takes a few minutes to download and setup at most, not the weeks and days like you are insinuating. It probably takes me the same amount of time as using yum or apt-get, it takes second to google "git windows" and find the the right installer, it isn't an arduous process and it certainly isn't a valid complaint. Sorry but you are talking utter tripe.
Knowing some basic sorting algorithms doesn't hurt. However, you will almost never *need* to know the details of a sort. If you're using databases, for example, understanding indexing and how to design a good query is far more important. 
Maybe it helps to see it how its implemented. A class and its method are actually not much more than * a data object which just holds the state (aka the variables) more like a struct * functions that take such a data object and work on them which is easily implemented. Think of class MyClass: state = True def reset_state(self): self.state = False This is could be understood as class MyClass: state = True def reset_state(myClass_object): myClass_object.state = False Mind the indent! Calling the "method" is easy as this: m = myClass() reset_state(m) m.state &gt;&gt;&gt; False With the class notation and the indenting of the functions under it to become methods, you get a nicer way of calling the function/method. Which is totally equivalent. m = myClass() m.reset_state() m.state &gt;&gt;&gt; False Also the *self* is just a convention. You could totally go from class MyClass: state = True def reset_state(myClass_object): myClass_object.state = False to a class'ed version of it class MyClass: state = True def reset_state(myClass_object): myClass_object.state = False Mind the *myClass_object* instead of *self*! By the way this is pretty much like *go* (golang) does its OO. **UPDATE** To make my point a bit more clearer. m = myClass() m.reset_state() is the same as this m = myClass() MyClass.reset_state(m) You can think of the methods of an object are functions under the namespace of the class.
I'm not OP, but why would I have to learn algorithms like [these](http://danishmujeeb.com/blog/2014/01/basic-sorting-algorithms-implemented-in-python)? Couldn't I just use the built-in sort function?
Hopefully in release candidate 2 you'll be able to create a [fully static](http://bugs.python.org/issue24769) build of Python that actually functions. I was sad this bug wasn't fixed in time.
I don't know. I personnaly use ***vim*** or ***emacs***. My advice is that you give it a shot then make your own opinion about it 
I never use Komodo IDE with Python, but I've tried it with Perl, it's been 6 years and I'm sure it's a lot better. My favourite one is PyCharm, I'm not sure that the community edition is enough for you.
Also, you cannot star a specific sub-project, only the whole heap.
They claimed they added me to the bug, but they didn't. And it wasn't marked as a release blocker. So I had no idea about it.
ImageMagick has a CLI for scripting. Previously I had python dump png files to disk, then wrote a batch script for IM to combine them. It wasn't too much work, but not nearly as elegant as this solution.
I've been TAing intro CS for a year, and Komodo *Edit* (not IDE) is our recommended editor for Python - it's free. It lacks debugging (among [other features](http://komodoide.com/komodo-edit/)). The issue of which editor to use during learning is annoying: the environment that's best for you is something only you can come up with, after you've been using the language for a while. &lt;-- Paradox, by the way, since this doesn't let us figure out what you should be starting out with. If you are working with fairly small projects, try using Komodo Edit? For bigger projects, my friends have used PyCharm, which though is free for students. What kind of stuff are you interested in working on? Maybe we can work out better ideas!
You realize I think it sucks too, right? Hence my appreciation for 498.
This is extremly interesting. I'll look into this method later today. Thanks for the input!
For reference: https://github.com/numpy/numpy/issues/4464
I don't have an exact answer for you, but I know SQLAlchemy has some level of polymorphism: [http://docs.sqlalchemy.org/en/rel_1_0/orm/inheritance.html](http://docs.sqlalchemy.org/en/rel_1_0/orm/inheritance.html) Hope it helps.
Both Vim and Emacs can have IDE like features for Python via plugins (including git integration, project file management, symbols list, jump to symbol definition, debugging, refactoring, et cetera). The learning curve is steeper. Edit: by the way, you can write Vim plugins in Python!
hi @mufularo, i have updated my post with the following. hope it will clear up the confusion. &gt;update: some of my friends expressed their confusion regarding the word used "Deadly". To make things clear a bit, i have used the word NOT to express that this coding bad-practices harm human or any other life-form. Rather, i used the word to express the power of these to diminish the productivity of a Python programmer or his fellow teammate(s) who will work on the same code btw, thanks a lot that you have read my post. though i appreciate your opinion, mostly i disagree with. All my described "sins" are brought out in context of mid~large codebase that people other than you will use/read. or, maybe your self will comeback 6 months later. those are cases that will hurt. but you one-shot scripts, short codes our out of my discussion context. may be i failed to make it clear. Even Django's one-shot wonder exception like "from settings import *" cannot make a strong case for wildcard import. but, thanks again. I have still a long way to go to become a true "jedi" in Python.
From what I can tell PyCharm already supports them. I use type hints all over the place and get smarter autocomplete than without.
Note the difference to `str.format` when arguments interpolation is *not* intended: class C(object): def __str__(self): print('Missiles launched !') return 'oops' c = C() print 'Your name ? ', name = raw_input() greet = 'Hello ' + name print greet &gt; Your name ? David &gt; Hello David &gt; Your name ? {c} A*hole &gt; Missiles launched ! &gt; Hello oops Not saying this can be easily abused but it requires additional attention which side effects can happen with strings, without formatting is explicitly called upon them.
So I upgraded to Python 3.4 and reinstalled all of the requirements, but in the end, removing the `fx` dependency seemed to do the trick. One new issue though: it seems that the new window the game opens in isn't configured correctly. It doesn't change the title bar on OSX and it won't take focus, and thus won't accept any keyboard input.
You are correct. Vim is a text editor, not an IDE. Some make it act very similar to an IDE through ample use of plugins. Some embrace the Unix philosophy and think of their terminal as their IDE, and vim is just one aspect which communicates nicely with terminal processes. Some look forward to Neovim because it will allow further integration with other processes that do IDE-like things. But on it's own, it is not an IDE. Emacs, on the other hand, can totally be an IDE if you want it to be. (Or an operating system). Disclaimer: I've used both. But now I use vim. I recommend people try them sometime, and if they like them that's great! If not, then use whatever you prefer.
I don't make the decisions, I'm just a lowly undergrad :( We teach debugging through print statements, and writing code with careful pre- and post-conditions. In the second course in the CS sequence(should they choose to take it), debugging Java in Eclipse comes up. I say "comes up" and "taught" because this is something I don't think is really, formally taught at any point, I (for example) have had to learn it as I go. A little bit when I took the Java, and then a lot more when I was doing my first systems class in C. There was one discussion on debugging in a discussion group for my Java class, I think that was the only time it was taught.
Well that sucks. It sounds like this is a known issue in certain versions of Pygame for OSX; where'd you get your Pygame from? Unless it's that this is almost certainly a library bug; I have no idea what might cause it and I doubt I can fix it. You might just have to install WINE and try the Windows version.
:( Maybe I'll try wine. I just installed pygame via pip and installed the deps manually via brew. 
Pardon me for turning into a gushing fan, but I gotta say that although I loved all the talks I got to hear at Pycon in Montreal, your "eschew the extraneous else" was probably the one thing that I've incorporated into my programming immediately and persistently. I know most Pycon talks these days are based on a specific theme or subject, but I would love to see you fill up an hour at some future Pycon with fifteen four-minute segments on Pythonic programming techniques to help all us plebs 'clean up our code'. It would be glorious. You'd have to leave 30 minutes at the end so all the pedants in the audience could take the mike and whine about how a rule doesn't fit within a certain contrived edge case, of course, but sip your water and ignore them. Giving people a set of rule-based guidelines that should be followed when possible and broken when necessary is much preferable to not having any guidelines at all, especially to those of us relatively new to Python and programming in general. Thanks again for all your work on behalf of the python community. EDIT: removed the second 'I gotta say' because it was really bothering me. Hopefully all of your can learn from my cautionary tale of writing half a comment, getting distracted for 15 minutes, and then coming back and quickly typing out the remainder without closely proofreading the output. 
They *can* have IDE-like features, but lets drop the pretenses here and be honest, it usually involves spending *quite* a few hours of hacking together various plugins you pull from the emacs wiki or other dubious sources that then don't have any capabilities of working together and that break sooner rather than later, since they are neither auto-updated nor maintained by the core team. Often they also work in terribly inconsistent manners or clash, e.g. emacs' `python-mode` and `lua-mode` don't remotely work the same, meaning they are configured differently and controlled by different keystrokes etc etc. If an IDE is what you want, just use an IDE. Neither vim nor emacs will make you very happy in that case. -- vim user of 3 years, emacs user of 5 years (switched from vim to emacs about 5 years ago)
... Pygame's on pip now? Huh. I'd suggest getting it straight from the Pygame repo but uhh... apparently they only support Windows now. Huh. I assume you're not using the Apple-preinstalled Python distro? Some things I saw seem to suggest that has issues. You'd also have issues with the version of Pygcurse that's on pip anyway so yeah, maybe just try it with WINE. :P
I don't have good experiences with Emacs' plugins, that's true, but my current Vim setting, which has 34 plugins, is rock solid and thanks to Vundle installing and removing plugins is as easy as [adding a line to my .vimrc](https://github.com/juanjux/My-Vim-dir/blob/master/.vimrc) and running :PluginInstall or updated (with git, from github) with :PluginUpdate. It's true that you've to hack and try plugins, but I actually enjoy it (most Vim users do, I think, like most smartphone users enjoy playing with apps on a phone). And once you have your golden configuration, you don't have to do it anymore if you don't want, specially if you sync your Vim dotfiles to some place like github or gitlab like I do; when I'm on a new server at work or an Amazon EC2 instance I just git clone my .vim directory from github, add Vundle (also with git), do a :PluginInstall and voila, I've my IDE there, working in text mode trough SSH. This takes no more than 2 minutes. There is nothing that an IDE can offer me of value that my supercharged Vim can't. I sometimes use an IDE for a time, learn to use some new cool feature it has and then go back to Vim and add one or two plugins that implement those features. There is almost always some plugin for every feature you can't think of. The Vim plugin-writing community is vibrant, specially on the last few years. Bonus points for Vim's Python (and Ruby, Lua, etc) scriptability, so you don't have your plugins in Java or some other language you don't like. At work I've some Python plugins to do deploys, run tests from the current buffer list, send an email to the current buffer pointing to our internal gitlab repo, etc. They're really easy to write with zero boilerplate code or build system, unlike plugins for other IDEs. I'm not saying that this is going to be easier than with an IDE because it's not, specially for new users. But if you're experienced in Vim and prefer to edit code with it you don't need to use an IDE. -- vim user of 19 years, used emacs for a year, then returned to Vim
[Absolutely.](https://www.youtube.com/watch?v=JVVMMULwR4s&amp;t=4m53s) It's only a couple of minutes so it won't take long to watch :)
Stay silent and you stay part of the problem. At least as a TA you are in the position of being able to speak with the profs and they hopefully won't dismiss you out of hand. Debugging with a proper tool is often glossed over as is version control. And people are amazed at the amount of technical debt they earn themselves by not using the right tools properly from the get go. 
So you want an IDE with an interpeter, but dont want one of the better python IDEs out there, PyCharm. I've never used PTVS but if you really dont want an IDE then what about ipython?
I didn't say most. You seemed to have missed the point. The point is, SMP was available and growing. The threading trend was well known and established by major players; even in the Unix world. The trend was obvious that threading support was absolutely required and the need would grow. Saying it wasn't supported or whatever because of minority resistance because their knuckles were dragging is revisionism. There is no excuse for python to not have first class threading support except for Guido's personal biases. Which was observed again during 3.x's early days. 
&gt; There is nothing that an IDE can offer me of value that my supercharged Vim can't. I doubt that, but since I don't have your config, it'd be hard for me to come up with any specific examples. Usually the biggest lack of features in editors as opposed to IDEs is in - integration with UI builders -- e.g. in qtcreator I can visually inspect what my .qml file is going to look like, and change it visually. Most IDEs offer this in some way or other - source code parsing -- e.g. qtcreator or visual studio can tell me all classes that inherit from the class I'm in right now, they allow me to re-factor a class to a different name (re-naming the class at all the call-sites in the process), tell me include files or imports that I'm not using, or (e.g. in the case of resharper) let me do more advanced refactoring operations such as "turn method call foo(someObj, optionalValue) into foo(someObj, optionalValue, true) but only when optionalValue is of a type that inherits from class X" - Integration with the build-system -- IDE understands your .cmake or whatnot files and can act intelligently based on the content, e.g. to figure out which files depend on which, what needs to be re-build when something changes, offer you shortcuts to build the different targets (e.g. release &amp; debug mode), etc etc - integration with compilers &amp; static analysis tools, to immediately tell you when something is wrong and offer fixes (beyond just "you misspelled this method name", which is easy enough to get in any editor) &gt; It's true that you've to hack and try plugins If what you want is an IDE, you probably want things to just work (and work well together) and start being productive hacking. An IDE is, to a large part, just something where the developers have already taken the time to put together all those plugins for you, to make them integrate &amp; work together, and they maintain them. You can create your own IDE inside emacs or vim, but the maintainer of that IDE will be *you*. &gt; There is almost always some plugin for every feature you can't think of. Sure there is, and 90% of the time it will be unmaintained, only work in an older version of your editor, not fit well together with some of your other plugins (because nobody had the high-level view of what workflow you want in mind), does not quite do what you want, etc etc. vim was the biggest offender in this arena IME, but at least they finally got a package manager and rudimentary python scripting support (if your vim is compiled with it) (this was probably very necessary to prevent their plugin ecosystem from just straight-up dying out completely... nobody wanted to write anything in vimscript) Of course on the downside they added a bunch of other languages as well, so now your editor instance has to run a bunch of different interpreters that all can't really interact very well... Sure, you don't *have* to use an IDE or one of the "modern text-editors" for anything, I usually don't... but there is really no justification to recommending it, since there are usually better options. The only cases where I would still recommend vim or emacs is for sysadmins where being able to remotely edit files through SSH (but even then, other editors like atom and I think sublime and visual studio code can just run the server remotely and tunnel through ssh...), that need the capability to edit many different languages/file-formats much more than good support for one particular language (but then, most IDEs also support syntax highlighting &amp; indent for a plethora of languages... and sometimes even do it better than emacs or vim) or that want customizability beyond what other tools can offer (but most IDEs and "modern editors" like sublime are pretty extensible as well)
Ok, that's weird : you link is exactly the same as the one in the title, but one is working and the other not...
By PEP501, `string.Template.safe_substitute` is used for interpolation of expressions results. For non-strings, object's `__str__` method is used for conversion.
Nothing against PyCharm specifically, I just don't want to use a full-fledged IDE. I'd like to find something light like a text editor, but still have easy access to an interpreter and ability to select a few lines and send it into one. 
I think the 'drawbacks' section of the docs does a pretty good job of summarizing the obvious pitfalls caused by utilizing this import: http://python-future.org/unicode_literals.html#drawbacks
I see that the PEP notes that it's provisional. This means that its functionality is completely up for re-jigging and change, or even possibly removal, if only people care to argue about getting it changed. Up until 3.6. So if anyone cares about getting this functionality "better" than what is currently written down, please be aware that it's still within your power to make it so!
I think doing things on one line is super valuable, actually -- for the same reason you think it isn't. It makes things readable and intuitive sometimes. I think I've heard Hettinger say that in python we strive make each line of code perform a sentence of description. So that's probably a good metric -- if you need more than one sentence to describe what you're doing, you should probably use more than one line. Sometimes I get carried away though and put more on one line than I should.
Worry not, I know everything about melpa. Doesn't mean any particular package you want is actually on there, that it is maintained, that it works well, ... Most package managers (be it for editors like vim or emacs, or languages like CPAN for perl) are mainly graveyards of unmaintained code that is bitrotting away. &gt; I clone my configuration and I'm done As do I. However, once you've used emacs or vim for a bit longer, you will have accumulated a bit more of a configuration, and you will notice that the "being done" step shifts more into "add a bunch of conditional branches that disable features and packages that don't work with some particular emacs version present on some particular system I had to work with at some point". I have used my emacs config across RHEL5, RHEL6, RHEL7, debian (at least 3-or-so different versions), ubuntu (probably like 4 different versions), archlinux, mint, manjaro, gentoo, windows 7, OSX (I think? I'm not entirely sure if I bothered or just used an unconfigured emacs...) and probably some others I forgot. Yeah, it quickly stops being that easy. 
&gt; I just don't want to use a full-fledged IDE ? You use Visual Studio which is a massive IDE. Is it just you don't want one on your Mac?
We've just successfully finished the merge of the two projects... you can now find the new django-based Wooey here: https://github.com/wooey/Wooey Took a little longer than expected, as always!
I see the author faced a legal challenge due to the original name. It's just a warning to me that we have to be careful when naming stuff, even if it's a free &amp; open source program. But yeah, well done. Wharfee looks cool.
Exactly. It's turning programming into a religion.
Okay, well you said let's be honest, and then you were pretty dishonest about having to get packages from dubious sources and wikis when you seemingly know that they can be retrieved very easily from within emacs, and that every package most anybody uses is available in elpa, melpa, or marmalade. You also said that they were mostly unmaintained which I believe is probably an indication that something frustrated you along the way. When shall I expect that to start getting difficult? I think I'm at about 22 years now, and it just isn't that hard. Your distro hopping is cool and all, but it just doesn't make what your saying true. Of course it's is perfectly fine for you to feel that way, but I hate for somebody interested enough to get information to get misinformation. 
Spyder has the best REPL integration I've seen of any IDE. The plugin that handles this for Sublime Text has become abaondonware unfortunately, so Sublime isn't really an option. 
Yes, I didn't expect the legal hiccup at all. :) Lesson learned. I think it turned out for the best, but definitely keep this in mind when naming your project!
I can't say enough good things about Python Prompt Toolkit. It is one amazing project. The same author created ptpython, and it's wonderful as well.
I am on my phone, so this will be a necessarily brief comment, but I suggest you check out sympy for symbolic manipulation (which is what you are trying to do here). http://www.sympy.org
Spyder aims to be a blend of RStudio and the matlab editor/ide. It is unfortunately far from polished, and while I did get remote kernels working on OSX, I am able to duplicate a hard crash with it on Windows. Spyder 3 is in the works and looking at their github, lots of nice UI features are coming. Another ide to try would be rodeo, if had a large announcement a few months ago, but from their github it appears development has halted (although when I tried it out it worked well, just wish it had a dark theme so I don't get sunburnt from my monitor). Rodeo does run as a web server and you interact through a web browser. 
Go to any random page on the emacs wiki (unfortunately the "go to random page" functionality seems broken, so instead just search for something, I guess) and pick out a few results, then check if you can find those on melpa et al. Already failed for the first thing I searched for. Now go to the melpa package list, and check when packages were last updated. You'll see plenty of stuff that was last updated 2009, 2011, 2013. Now open some random projects and check out how many commits they have... plenty of them have had like 1-10 commits 3 years ago, meaning they are essentially abandoned and unmaintained. Now how many of those do you think have been tested on windows, linux and OSX? 1%? 2%? It's not that I don't think melpa et al don't help, but if you think it's easy to re-create a set of well-working IDE features withhin emacs or vim similar to what IDEs like qtcreator, visual studio et al offer you out-of-the-box that will reliably work across different platforms and distros, you are deluding yourself. Also, note that even if every package on melpa was meticulously tested &amp; maintained, that still wouldn't address the main issue I raised in my original post -- that making all of them work together in a coherent fashion is a lot of work. You will have to work pretty hard for features that you can just get out-of-the-box on all platforms with IDEs such as qtcreator or visual studio code, and in many cases you will not be able to replicate some of the features at all. There are plenty of features in those that I would like to have in my emacs, but it's virtually impossible. Hence my original statement is unbiased and true: if you are expecting something like an IDE, vim and emacs will not satisfy your needs.
I'd recommend you never use numpy matrices. Use array. Matrices just break in interesting ways and half the functions you'll pass in a matrix and get back an array. &gt; ,b,c,d are not explicitly specified, just some constants - and I've hit a brick wall. Use sympy for that. Be careful about the size because it's often faster to just invert a matrix (or better yet solve it) instead of writing out the equations. That of course depends on sparseness and things like symmetry.
The link you gave is the implementation of the algo in python, not the algo itself. The algos are described in the wikipedia links. You have to learn them, to demonstrate your skill of learning algos. If you can demonstrate that on some other way, then you do not need them. Until you will, then you will look it up on the net. The algos for sorting are ideal for teaching-demonstration purposes. The problem is easy to grasp, no domain or any specialized knowledge required. The result is easy to measure. The speed, memory usage, stability and implementation specific differences can be huge. It is easy to demonstrate [wtfs](https://en.wikipedia.org/wiki/Bogosort). 
If the bas.parent_id is unique (meaning bar.id and foo.id don't have any common values), you can setup two joins from Table C/Table A and Table C/Table B and then union the results.
Too many duplicates. The right column hat 21 entries of which four were for Wharfee and another four for "How to build a website application using Python".
Misunderstanding or shallow grasp of current state is the main reason of future disasters. That's a general rule, repeatedly manifested in history but people are incorrigible. As already mentioned it has nothing to do with blind religion or rabid conservatism. It's much more about wisdom and collected experience. The fence should be removed only if proposer fully understands reasons why it was placed where it is or there is nobody or no written records which can explain its existence and purpose. Otherwise there is a high probability the old mistakes would repeat again … 
You're right about splitting the repo into smaller parts. I'll do it soon. By the way, are you still getting 500s on Pocket's API because that's odd since I never once got these. EDIT: I've split this particular script into a new repo: https://github.com/dufferzafar/pocketmon/
Hello everyone, I just wanted to share a blog we are creating for spanish readers. Its content is centered in general around web developing, but we make an emphasis on python and flask. I hope the [ES] in front of the title is the right way to share this here, I looked for a spanish python channel but didn't find any.
&gt; Reddit is written in Python is or was ? 
Added guido as a twitter stream :-)
Funny, I was thinking this would be a good fix for the Unicode whackamole in a project. I got some hopeful feedback on learnpython, but I'm second guessing it now. Especially because of that import bug.
Why did you decide to go with scraping the data sources instead of using the APIs provided by Stack Exchange, reddit, Twitter or Github?
&gt; PEP 485, math.isclose(), a function for testing approximate equality Does anyone know whether they actually implemented this correctly for complex numbers in the end? Edit: It [looks like it does](https://github.com/PythonCHB/close_pep/blob/master/is_close.py) now.
here's the doc on the REPL in PTVS: https://github.com/Microsoft/PTVS/wiki/Interactive-REPL you get a regular REPL with editing support, as as well an "IPython" mode where you can get graphics inline in the REPL: https://github.com/Microsoft/PTVS/wiki/Using-IPython-with-PTVS 
Sorry if it sounded harsh but just trying to point you in the correct, as in Python, direction. What other languages do you know, if any?
I definitely understand what you mean. We're currently looking for more coaches, and we're hoping to find some female coaches as well.
Yeah, even typing the above I knew "just be consistent" was the right answer. As for the other points, those are my precise feelings for preferring the alternative. But I think that's sort of the point, that the distinctions are within the margin of error and not really that important :)
So, is the daemon listening on a port?
Thanks! Starting to give it a try :) Mind sharing some phone-oriented usage that are worth knowing ? Or is it mainly for unix emulation irrespectively of the device ? 
yes, yes it is , i think it works by pining the server and then seeing if i get a reply...
Interesting, could you describe your motivation and how much of the Flask way you're intending to imitate? To me this seems more similar to Bottle but micro-frameworks are all pretty similar. I'm also working on something using the asyncio library (though not on top of something like aiohttp) and find it interesting to see others work.
One of my issues with it is the naming. I know it's not hard, but now in my head I have to remember when to use tuple, and when to use Tuple, for example. I sort of understand *why* this is happening, but was there no syntactic way to reuse the same object instead of having to replicate them like this?
The thing I'm doing most often atm is `ssh`ing into my laptop while I'm having a poo. It means I can look at files and whatever on my computer, or if I need to refer to something (a Python program I've had a sudden thought about, for example), I can. Occasionally I'll want to do just fuck about with some data when I'm bored. Having a Python interpreter in your pocket is really fun. Sometimes even useful! Other than that, knowing I have the ability to actually do stuff easily with files if I need to is very useful.
Print statements are okay but if you're going to teach debugging that way, it would be better to get them accustomed to some sort of logging library. I learned to debug in eclipse and print statements in college, neither of which i've really used extensively since entering the work force. You simply get tossed 1GB log file and told to figure out what the problem was and fix it. It would be good for universities to introduce this skill as debugging a log file (or multiple if the system is distributed which it typically is) with multiple threads all printing is an acquired skill for sure. It's not particularly difficult once you get accustomed to it but it needn't be a skill you have to pick up on the job.
Is that "normally" the case? It's probably not true if id is a simple "unique serial", is it? But of course if it is the key, this is the right answer.
I hope you aren't demotivated now. Cheer up. Ask your questions in /r/learnpython or just come by from time to time.
Depends on the systems involved. Are you writing to SSDs, or slow 5400RPM Sata drives? Where would you send the network logs? What speed network? 
It does use Git, but its very limited.
.. but they're not, though. That's exactly what I mean about shoe-horning. We've had `list` for so many versions, and we still do (there's still a `&lt;class 'list'&gt;`). Now somehow that's a `List[T]`, because reasons? Why can't they be what they are: callable types?
Ok, this link is not part of the error, it comes from your data. Here you are using the link as key for the dictionary `counter`, however the item by that name does not exist yet. Here is a minimal script that will make you understand the error : a = {} a["badabadam"] += 3 You need to initialize the value of `counter[item.path]` before incrementing it. It does not start from 0, it does not exist at all.
Most people not used to vim will most likely prefer the nano editor.
If it was truly an intermediate book, then Chapter One wouldn't be leading off with 'How to install Python' and continue into basic programming elements. Fluent Python is more of an intermediate book than this.
AWS is still metal.
Is there any chance that [PEP 0485](https://www.python.org/dev/peps/pep-0485/) will be expanded upon to have an operator for isclose()? (e.g. `~=`)
I disagree. *You* use that to help you. However, indexing is not the same as sorting.
Nothing has been proposed yet. You could try floating it in python-ideas. I'm not too keen on the idea, myself.
Jeez you don't have to be a dick. Maybe he's just starting and is researching the available options.
It would be really convenient to have, but the more I think about it, the more it has potentially confusing results. If it's implemented as a binary operator using the default tolerances, it hides the fact that these tolerances are arbitrary (and simply won't work with the common use case of comparing to zero, since that requires providing an absolute tolerance). I guess that's what I get for getting excited and writing before I think.
supervisord isn't supported on WebFaction however. There's no guarantee it will stay running.
It does seem to be slightly more similar to Bottle, but probably to early to tell. Would be great to see those BASE_DIR and TEMPLATES variables defaulted away. Chances are they are usually going to be that default and there isn't much point in writing that into every application. Not a huge fan of the way response works. I prefer a more explicit "this is a JSON response" or "this is an HTML response". Flask is really nice about this. You just return a string normally or return jsonify({}). Pretty explicit. Your response method allows you to set the content type, but if you pass a dict it's set as a JSON content anyways despite what you told it to be anyways. I was going to say that Bottle is a bit of another way to do it in that you're expected to set the response content type in your method, but they seem to have added an auto JSON thing.
I've always broken up the data into chunks which become arguments to the parallelized function. Joblib also provides a shared memory mechanism but I've never had to use it. Have you had bad luck with it? I'm sure this is a product of my lack of experience, but I've found that every time I've run into a bottleneck, it's either already embarrassingly parallel, or it can easily be reformulated into an embarrassingly parallel form. I do suspect that in almost all cases it's easier to write your code in a functional or actor-based style than it is to use shared write-access memory and have to think about locks. If a counter example comes to your mind, I'd love to learn about it!
So I've heard. Not a big fan of the UI though. I'm a sucker for eye candy due to my graphic design background. One of the reasons I was attracted to Atom initially. Komodo's aesthetics and general placements of elements seems to suit me best.
yes that is exactly why the error was caused, I saw an example online of someone doing it this way and thought I'd give it a try and alas the results were this, before I did use a conditional to check which did work and what I ultimately reverted back to Just thought this random link was super weird.. like with Angular when it throws an exception itll generate a link to see the official docs on the error, I was kind of expecting the same concept here (newish to python) lol Guess by what you mean that one of my keys is this weird url.. catching me off guard in all kinds of ways because this is not expected data from the files im parsing.. 
If I needed an IDE that ran on multiple platforms, AND supported multiple languages, Komodo is hard to beat. If I could get by with an IDE that ran on Windows only, I would probably use PTVS, even though I think it's a shame that they killed off the Visual Studio Shell version (because it was a much lighter weight option than the full multi gigabyte install of VS Community) If I was looking for a multiplatform IDE, Python ONLY IDE, I guess I would go PyCharm, but I have never ever used it. IF Microsoft (or someone else) take the PTVS work and jam it into VS Code - OMG AMAZING As far as I'm concerned, people who don't use debuggers, or use print line debugging, are attempting to enter into a running race by hopping on one leg. Yes you can do it, but it's a pain in the ass. Being able to attach to a running process, either a local one, or a remote one, and set a breakpoint, and instantly hit it, and see all the context of the values in every variable etc, and be able to modify the variable values, thats a level of power you are never going to get from going print(some_value) , and hoping you see the value you expect (or don't!)
I am currently using Terminal Emulator in Android. I have some questions regarding Termux: What version of python does it use, 2 or 3? Can i even use pip/virtualenv there? Is it compatible with Hacker's Keyboard? Does it support having multiple terminals like with Terminal Emulator?
Ya I hard good things about VS Code but it seems limited at the moment.
It's a Mathmatica clone in the browser, so like [this](http://nbviewer.ipython.org/github/barbagroup/AeroPython/blob/master/lessons/11_Lesson11_vortexSourcePanelMethod.ipynb)
If you don't know about IPython notebook and you have any interest in using Python to solve problems or express ideas then you should spend some time looking at videos on youtube. For example: https://www.youtube.com/watch?v=2LwENOMNyOY 
iPython long ago was a command line only tool. As of yesterday, iPython was both a command line tool and a browser clone of Mathmatica. That page you saw is still iPython though even though they're rebranding it to be Jupyter. Ju-pyt-er is a combination backend framework for Julia, Python, and R all in the same window. iPython is Python only and going forward is back to being a command line only tool.
In which case, `f""` is right out.
nowadays, the hype around IPython is no longer about REPL shell like BPython or IDLE, it's about the Notebook and Jupyter (the execution core). Think something like your school text book, but interactive. You can swap variables, add your own functions, play with concepts, etc. on a Web interface powered by Python.
Sidescrolling is not so common I think, seems like bad practice? I figured that twitter is not as interesting of a source as Github, Reddit, SO. After I had Twitter already expanded at the top by default, I realised it seemed too important. But I guess by allowing people to expand/collapse columns could be very interesting. 
It is mostly meant for people to check their own repo. Consider having a hook for every commit that would warn you. Not having the tools to check yourself whether you made a mistake while anyone can build a way to extract this information should be more scary to you! That's what I believe...
Cool :) 
Any reason not to use syslog standard? This uses udp and you won't eat the wait time per ack of rcp
I am not aware of this. can you explain more or give a link about syslog/udp?
Ahhh IDLE, I've used it but didn't know it was an IPython project. Notebook looks cool, not so much from a developer standpoint. Would probably work great for studies.
Seems nifty. Does it aim for an interpreter for testing &amp; dev or for actual interactive programs to be used others?
Both. I use it as a UI for some projects at work (used by others), and as a fancy REPL for development. 
IDLE has nothing to do with IPython, it's the default Python IDE. 
So would the MemoryHandler be faster?
&gt; As of yesterday, iPython was both a command line tool and a browser clone of Mathmatica. Nope. IPython is a command line tool. Period. The 'browser clone of Mathematica' is called IPython Notebook and is just a front-end making use of the IPython backend. Don't say IPython is synonym to the notebook, it makes stuff really confusing.
the stackoverflow stream show duplicates
Oops... Thinking of PAGE. I completely forgot IDLE existed... went pyCharm and never looked back.
Yeah, IDLE's essentially a simple IDE for beginners so that they don't do too much too fast. 
Great work as always from this project. I read this announcement while waiting for one of my notebooks to churn through a couple of gigabytes of eye tracking data. Jupyter has made these analyses much, much easier. When I first took over this project these analyses were done in Matlab and were so inscrutable that I ended up rewriting them multiple times over just to have some kind of reassurance that they were doing what they were supposed to. Now with Jupyter I have nice readable tables and graphs alongside the code so I can do sanity checks on my data just by scrolling through, along with neat little interactive widgets that let me pick which subsets I want to look at more closely. A real lifesaver for anyone in the sciences who does this kind of analysis day in day out.
Jeez I am confused. Please, ELI5 in one sentence `ipython` vs `jupyter`? P. S. /u/chanGGyu, oh boy, I hate name `jupyter` also, but probably it makes more sense to people who are not using python for notebooks.
&gt; Think something like your school text book, but intractable My school textbook already *is* intractable, thanks. I think you probably meant 'interactive' (the more obvious guess would be 'interactable', but AFAIK that is not a word) 
This is about a thing called IPython. Its version number is not related to Python's. IPython 4 can use Python 2 or 3. There is no Python 4.
The general idea is for it to be a Matlab/Octave alike environment for interactive data-mangling and scientific work in Python. IPython and it's Notebook (now Jupyter) are only a shell and Mathematica-like notebook UI, but there are distributions like Canopy and Anaconda which are complete environments for scientific Python work.
Write your own application. Think up an application and then get stuck in, it really is the best way to learn. A lot of people struggle about what project to do, but just make anything up, really anything will do. My first project was a microwave oven, it had a power value and a timer, and you could put food in it, like a chicken or cup of water. Pretty soon, you will hit issues, typically the project will become a big long function of conditional statements and loops, you then need to think about chopping it up and using classes or more functions. If you want inspiration just look around you house, or at your car, or your job / school and come up with an idea, it don't need to a best seller. One last point, if you need help use /r/learnpython or stackoverflow.com (stackoverflow is a very quick resource and lots of people jump to answer as they want to build up a reputation). 
Cool but many duplicates show up.
My idea isn't set on one tool, it's a big bunch of tools designed and developed based on what I think is needed. So what you're saying is that I could either make an extension or a browser? that doesn't sound like a good idea at all.
IPython Notebook is much more descriptive than Jupyter though.
Well, the only programming language browser knows is JS, and you can't do a thing about it. So if HTML is parsed by some browser you can only translate Python to JS. Else, if HTML is parsed by your app exclusively you can do anything with it, but it makes your app a browser. Maybe some smarter guys could find other ways, let's see.
Sure, "Onsite Technology", and "Outdoor X" were a couple of its DBA's.
Not really. It makes no sense that my notebook which could be running Julia, R or any one of a multitude of languages is called IPython. 
As /u/disinformationtheory says, it can be used for both. One example of embedding IPython on something else is IPyDB, which opens up a full REPL when you hit a breakpoint. 
I liked droidedit last time I used it, but now I just teamviewer in to my PC running visual studio, if I absolutely have to. Coding on a tablet is awful. D: 
I thoroughly enjoyed http://lorenabarba.com/blog/cfd-python-12-steps-to-navier-stokes/ Essentially taking through 12 IPython notebooks to build you up to a finite-difference implementation of the navier-stokes equations. She also briefly introduces Numba, which is a JIT compiler for Python, so you get some speed up. I haven't actually read Numerical Recipes for C, so sorry if this is off base.
The problem is that IPython Notebook has a strong "python" connotation even though it's absolutely not just for Python anymore, a notebook can use Haskell or Julia or R or JS kernels. Which is why the core was renamed, and the original Improved Python shell remains.
*Numerical Recipes* is more about how how the algorithm are implemented. You can find a lot of details about integration methods (how to implement a Runge Kutta integrator, etc.), interpolation, (pseudo)random number generation, sorting algorithm… whatever you can think about that is useful for numerical computation. The thing is, if you want to do numerical computation in Python, either it's just to learn (and then any C algo can be translated in Python), or you really want to use that for science/engineering/… and in this case, all the heavy lifting is done under the hood by Numpy and Scipy. Behind these two packages, there are lots of stuff actually coded in Fortran and C, and I guess some things are coming from the Numerical Recipes.
Althought not just a text editor i use this. [QPython](http://qpython.com/)
It really shines when you want to do debugging. Just stick: import IPython ; IPython.embed() In your code and you'll be able to inspect variables and run commands straight from the console.
I can recommend my own package [PyQtConfig](https://github.com/mfitzp/pyqtconfig) which implements a "manager" you can attach to widgets and use to get/set values, e.g. from pyqtconfig import ConfigManager config = ConfigManager() config.set_defaults({ 'number': 13, 'text': 'hello', 'array': ['1','2'], 'active': True, }) config.get('number') 13 config.set('number', 42) config.get('number') 42 You can attach the manager to widgets by defining a "handler". The widget will then be kept automatically in sync with the manager. This also has the added benefit of standardising the function name used to retrieve/set values. lineEdit = QtGui.QLineEdit() config.add_handler('text', lineEdit) There are two default managers available - the `dict`-backed `QConfigManager` for temporary stores or a `QSettings` backed `QSettingsManager` if you want persistent settings between application runs. Take a look with some more examples [here](https://github.com/mfitzp/pyqtconfig).
No iPython changelog linked from the post? Lame. [Here it is](http://ipython.readthedocs.org/en/stable/whatsnew/version4.html).
I am unreasonably excited that this new release fixes an odd bug that showed up in iPython 3 -- case-sensitive file and directory sorting in the Jupyter "Dashboard" view.
So many of these have been added to my own playlist. Cheers for sharing
It might be current for C programing languages, but it is 20 years old and ignores many current data type and algorithms. And is much less readable than python. I don't want to reinvent any wheels, just trying to find a resource to understand stuff.
&gt; What exactly is IPython? IPython is a project with two main things: - ipython, an alternative repl for Python. It adds easier running of shell commands, easier extension via 'magic' commands, and more detailed recording of your session, among other stuff. - The ipython kernel for Jupyter, which adds Python language support to the Jupyter notebook (and provides a model for communication between processes in parallel apps). - IPython Parallel / ipcluster, a thing for writing parallel programs in Python that has seen pretty narrow adoption. Being phased out is - The IPython Notebook, a Mathematica/Maple-like interface for running Python code. (There is a browser frontend and a desktop app frontend.) This product received a *lot* of attention and praise. This is being replaced by the Jupyter notebook. (There are minor products that are part of the project I didn't mention, but that's the main overview.) -------------------- The Jupyter Notebook is the replacement/new name for the IPython notebook which exists largely because - The IPython notebook was so well-loved that people wanted to use it from Julia, R, and other languages. Jupyter is a language-neutral name and spinning off into many repos allows easier separation between language-specific features and general features. - The IPython notebook was so well-loved that it had the potential to get funding, and has indeed gotten a non-trivial amount. Jupyter is, in some ways, a less confusing, more compelling brand to pitch.
Most flash systems now a days will be significantly faster than gigabit Ethernet. A number of products available today have 0.5-1 GB/s write speed and some coming out towards the end of the year will operate at 2-3 GB/s. Where as gigabit Ethernet is around 0.07 GB/s.
Well, if we're talking about quality code, then map and filter are out of the equation most of the time (reduce can be useful, though). So should be any but the simplest comprehensions and generator expressions. Quality code also means at least basic refactoring of ad hoc / temporary solutions into readable and documented ones. You don't want to go back to your old code wondering what, exactly, did you want to achieve, and it's even worse when it's someone elses's code. Point 2 explicitly stated "Thou shalt use list comprehensions and generators where possible.", which is a really, really bad advice. I'd change it to following a style guide (preferably PEP8, but most importantly staying consistent with conventions of the code you're working with).
So there is no real native way of somehow providing a user of the web app a tool such as the screencapture+edit as well as others without them installing anything? Thanks a ton for your input and your extra research. I really appreciate it.
I'm just glad that the numbering is past 3. It gets confusing telling people - "my project needs IPython 3. You can use Python 2.7, Python 3.3, ..." I spend more time than I'd like supporting this sort of thing - people will insist they are in IPython 3, when they are running IPython 2.4, Python 3.4. It's a confusing name, IMO, as it implies it is an implementation of Python. 
Well, I guess it depends. Do you really write 30 ~ 70 line scripts in an IDE? I'd rather use ST3 for that, because it's so light. Also, using the shell has a certain charm to it. 
I just skimmed some sample chapters about numerical integration on the homepage. This book is fantastic! I just want to point out: If you are only USING this algorithms, it is much better to use them from a library (numpy, scipy, gsl) . A lot of edge and special cases are often already covered and otherwise very difficult to implement yourself. Plus the libraries are often heavily performance tuned.
Unrelated to your issue, rather than doing `mkvirtualenv test[3456789...]`, you should try `mktmpenv --python=/usr/bin/python3`. It gives you a randomly named virtualenv that gets deleted when you deactivate it. (If you exit your shell without deactivating, it sticks around, but you can still remove it by deactivating later.) So handy. 
So much truth in there. Using the SciPy stack is really like resting on the shoulders of giants.
Can I still choose a virtual environment after creating the project?
Take a look at pyenv. There is also a virtualenv(wrapper) plugin for pyenv. 
I have the same problem, but for now `ipython notebook` still works.
Does this allow for stepping through lines? If you are really doing debugging I highly suggest `import ipdb; ipdb.set_trace()`.
I almost never miss colons, but when I do, I see the error, I correct it, done. Tightening bolts with bare hands do have benefits, the results can be just as good as using some IDE, it just depends on your skillset. It's just like using Windows Explorer / Finder vs using shell. It depends on your skillset. One isn't particularly better than the other. Just like tightening bolts with your bare hands, it's slower, more painful, and the results can be just as good, however, the people who have specialized themselves will deliver something better than they ever could with machinery. It's just a tool to get the job done. Saying the results aren't as good is incorrect. 
I was thinking of a "snap to next column" side scroll, not a side scroll by small, arbitrary amounts. That could be okay. Okcupid uses that for images, and facebook kind of does.
Not really. What are you trying to achieve? 
It's probably explained somewhere, but what if you want to have an endpoint support multiple verbs? Do you have to add multiple decorators, one for each? (i.e. GET/DELETE/PUT)
I actually think I missed putting this into the read-me, so thanks for asking (I'll try to add it in soon). If you want to add multiple endpoints you can use the hug.call decorator and pass in a list of desired endpoints: @hug.call(['POST', 'GET'], ('url1', 'url2')) def my_api_call(): return "Hello" Notice, you can also put in multiple URL routes in a single Hug decorator. By Default, if you use hug.call without specifying a method, all the basic HTTP methods will be routed to it.
Hey there, I'm the lead Komodo developer. Happy to answer some questions. Obviously I'd be biased in answering your main question, so I'll leave that to the others. Keep in mind everyone has a bias to some degree, and at the end of the day your choice of IDE is as much subjective as it is objective. You can find skins, addons, color schemes, etc on our website, [they're called Packages](http://komodoide.com/packages/). With the latest version of Komodo you can install them right from inside Komodo. We don't have a huge offering yet like eg. Sublime does, our community is still small but it's very passionate. If you are interested in contributing it's ideal because our devs participate actively in our community and because it's still so small there are many opportunities to contribute. We are working hard on improving both our community as well as our package offering. As for price, /u/malbz already said that there is a $99 version which should last you between 1 and 2 years before a new version is released. Well it lasts you a lifetime technically, but only for the version that you bought. I also want to point out that Komodo licenses can be installed on as many computers as you like, as long as you are the only one using them.
It pains me when someone uses the term "gold standard" in regards to software products, languages or frameworks. I don't believe there is any such thing as a "gold standard" in this context. It all depends on what your needs and preferences are.
I'd urge you to try it again, Komodo 9.0 and its subsequent minor releases have had some major performance improvements. You may be noticing slowdowns due to old settings, addons or macros. Might be a good idea to start with a fresh profile.
&gt; It's more actively developed Don't mean to be responding to every post here, but I can't help but point out that we are working on Komodo at an immense rate. I don't think any one competitor could say they are being more actively developed. 
Miguel Grinberg once gave [a great talk](https://www.youtube.com/watch?v=pZYRC8IbCwk) about REST APIs using Flask. He is heavily relying on decorators and it's probably what I would call "radically simple". Also Flask is quite mature, easy to extend and there are a lot of nice extensions already available (like i.e. Flask-SQLAlchemy). Don't get me wrong. It's really nice of you to write a software and make it open source, but your title is somehow implying hug is something radically new, which in my opinion it is not.
Show me an API built with Flask in 3 lines that automatically validates input, creates documentation, and provides both the Python and external facing API? I stand by my statement. Hug is built to be easy to extend and can leverage all existing Falcon extensions
Cool but what's the difference between iPython 3 vs iPython 4? 
As always, feedback is most important so don't hesitate to provide feedback
There are always exceptions, though. [Brainfuck](https://en.wikipedia.org/wiki/Brainfuck) is arguably learnable in a few weeks.
unfortunately I don't think Leanpub supports such at the moment
Did the code intel get any major improvements in 9?
Thanks for the suggestion, I wasn't aware of that.
Ipython notebooks have pretty good [documentation](http://ipython.org/ipython-doc/dev/notebook/)
Pyenv is for managing which version of Python (2.7,3.4, etc) currently being used... not dependency isolation/installation ala virtualenv &amp; pip.
Except several of them.
I suppose you could just completely disregard what I just said and re-state your original assertion. I won't engage any further.
We have made several enhancements and fixes, but no major changes were made. We do have some very interesting plans for codeintel on our roadmap but nothing I can delve into at this time. In terms of performance improvements regarding codeintel we'll soon be adding the option to exclude folders (eg. vendor folders) from being indexed, that ought to help with some large scale projects.
The one thing I wish Flask had is the versioning feature that HUG apparently has. Would be super cool to be able to just put the version # in the route decorator and have it just work like magic. Does anyone know of anything in Flask that supports versioning of this kind? Note: I am a Flask guy myself.
I work on a large project with many developers and we use [buildout](http://www.buildout.org/en/latest/) for dependency management; it feels a bit outdated but not sure if pip &amp; virtualenv provide the functionality we need from a package manager. I hear good things about Conda but have not checked it out. http://www.continuum.io/blog/conda
It's people like you that makes me love reddit! I can't believe I got a hit on my first post to reddit, cool. Anyway, I am jailbroken and have a mobile terminal and Python installed on my phone already. I'm pretty new to Python so don't hate me for asking but where would I write a new Python script in the mobile terminal, and how would I store and retrieve my .py files. Pythonista has been my main hitter for coding on the mobile and I don't have any experience coding on the mobile terminal. Explain like I'm 5, that's how I feel right now. 
So, you call "IPython notebook" as `jupyter notebook` from the command line now if I read correctly. What about the default file ending conventions? For example, you'd still append an `.ipynb` for Jupyter notebooks with IPython kernel? What about R and Julia kernels?
I'm pretty happy with it. All of my python versions are then managed by pyenv and it avoids the confusion of pyenv and virtualenv maintaining different pythons.
Conda and PyRun are the alternatives.
Basically just lots of internal restructuring
Just wanted to let you know that I went down the observer pattern path here and I got it working perfectly for my needs. Your post helped, even though I didn't use your code, it helped me wrap my head around the concept. Thanks a bunch! :)
Since today: Jupyter: infrastructure, protocol, and tools to manage kernels, notebooks, shells, ... IPython: the python kernel for Jupyter
So, some feedback without buying your book: I've been reading the table of contents of your book and..why is intermediate python? I just can see some non-basic stuff over chapter 10 and 12 but that's pretty much a 5% of the book. As a novice in python (only took MITx 600.1) I would not pay the $20 for your book as I can see it cannot help me any further. What I will learn from your book that you consider intermediate? Should you delete from your book the first 7-8 chapters as are dedicated to 'first-steps' with python? **Update 20/08/2015:** As I stated before the table of contents looks like a basic python course, but after I went through the content is much more advanced. I personally would edit the table of contents somehow to make it clear the intermediate level (maybe little description of each chapter?), might help you get new customers. edit: clarification and update
Holy fucking shit it worked!!!! Yo thanks a million! I really appreciate everything. Life saver for real! Happy coding! 
absolutely, pip and virtualenv are the standard. Even IDEs like PyCharm have built-in support for it. Don't waste time looking for alternatives.
And it uses aiohttp. Sweet. Thanks for the URL, OP.
No new user features? Only internal reorg http://ipython.readthedocs.org/en/stable/whatsnew/version4.html
It's only a minor change, but I contributed [pprint][pp] support for deque, Counter, OrderedDict, and defaultdict from the collections module. Glad to see it released! [pp]: http://ipython.readthedocs.org/en/stable/api/generated/IPython.lib.pretty.html?highlight=pprint#IPython.lib.pretty.pprint
I like the idea of this, for super simple apis. But how does it scale as code increases? I am currently using multiple backends of flask, so I can supply v1 and v2 of an apy, just specifying a url_prefix for each backend. Then each sub directory has their app.py, which has a create_app function that creates a new backend to be added to the app in &lt;project&gt;/wsgi.py. But underneath it all, it is all classes instead of these one functions which have the extra logic in them for figuring out if it is post/put/get/delete/etc... Is there an example in Hug that I am missing that gives me that functionality for when things start getting more complicated?
I've found it the best combination for the smallish things I muck about with at home (Not more than a few hundred or thousands of lines of code). However "being that guy", I am a Windows user and find that you have to be careful that it doesn't install anything window specific if you are using a python distribution like ActivePython.
Reminds me of ruby's [sinatra](http://www.sinatrarb.com/).
I'm sorry but could you tell me what your book has to offer that I couldn't get anywhere else for free? Or why I should buy YOUR book instead of any other? 
Since this release, the docs on the notebook itself are now [here](http://jupyter-notebook.readthedocs.org/en/latest/).
We have [an issue open](https://github.com/jupyter/jupyter/issues/15) for the Windows issue. For now, you should be able to use `python -m notebook`.
Yes, but I got around it by changing my environment variable WHEREDOIASKQUESTIONS from [Python](www.reddit/r/Python/comments) to [Windows10](www.reddit/r/Windows10/comments)
pretty neat. I will play with this and see if I can make a small project with it. Thanks!
Again it depends. There are image manipulation tools such as Sumo paint that run within the browser, but is mostly written in flash. I direct approach with python is not going to yield excellent results as you would expect. My suggestion would be to work with the browser technology and where you lack in features you might have to implement in python as part of your back-end. 
cool down, man. he wrote a book on Python &amp; don't pushing you to buy. And you, supposedly, didn't read it. Then, why you are angry ??? Or, just frustrated ? Would it not nice to show some communal respect ? 
Use interactive session to check your code: 19 % 4 != 300 / 10 / 10 returns False. False and False = False, so bool_three = False good luck on your journey with python! and remember - use interactive session as much as possible :)
I don't think the moral of the story relates to XP, but rather to choosing to rest mission-critical dependencies on proprietary, closed-source hardware/software and on failing to pay technical debt. 
what am I looking at
I'm glad you linked that. It's 2015, people should be colorizing their console programs (at least until better terminals are invented). I will definitely be using `green`.
Hi Timothy - Looks like we were thinking in similar directions :-) https://github.com/crowdwave/serve_swagger We've both gone Python 3 only and both used Falcon. No doubt yours is faster - my routing table algorithm is clunky. Am I correct in understanding that Hug defines its own API documentation specification? I chose to use Swagger rather than redefine. When I get time I'll be interested to see how you've done it. 
If you want a link to the twitter account I used it on, here it is. https://twitter.com/beefbot9000
Looks powerful. [Official site](https://www.odoo.com/)
This looks pretty useful actually, I'll check this out tonight in better detail. I'm assuming no issues using this with PySide rather than PyQt?
I would say it's great, except for the silent passing of an active exception that is stopping this script from being able to run. After not passing the exception, and fixing the error, it does seem to do its job very well. Definitely don't pass a general exception, otherwise, neat little script that does its job. 
You know, I might actually start that project. I can't find any flask extension, but still, [it's not terribly hard or ugly to do it in flask alone](http://cbron.github.io/blog/2014/07/03/versioning-a-flask-restful-api/). Seems like it just takes good modular code, and a clean design.
Guido is the author of Python itself, so the answer for the third question is "all of them". 
If you learned how to code, you can learn how to play chess. Cheating is what spoiled children do when they don't get their way.
&gt;but most of it doesn't work for reasons uknown Switching to Python won't fix this.
Its more of we're in the process of of getting rid of crap code and someone said PHP is a mess and we began discussing a switch. After a bit of research we found that there wouldnt be any benefit to switch to another language and that the original reasons for why PHP is bad were kind of dumb
Absolutely love it. Buying a print when I get paid for sure.
I was curious about 'cmder' from your imgur, so I downloaded it, extracted the folder and get api-ms-win-crt-runtime-l1-1-0.dll is missing from your computer. Try reinstalling the program to fix the problem. Quickly surfing the web shows that DLL is found in Visual C++ Redistributable for Visual Studio 2015. I'm not sure why they feel you can run that system from a USB stick if you need Visual C++ Redistributable for Visual Studio 2015 to be installed on the target machine. Lost interest, gonna ssh into my linux box and keep working, no more yaks today.
Python developers are relatively rare compared to PHP devs, so it's (probably) not as easy to replace you if you use Python :P
At least I'm impressed. Awesome work, 1.0 in _two years_ from first commit.
I'm not meaning to be mean, but isn't that an example of obvious and straight SQLAlchemy use? It's like a "Fast way to see list's content: print(list)"
Thanks a lot, that clears it all up.
It's an idea for a project that revolved entirely around having tools to do certain things very well within the browser. Maybe I can make it happen with JS, but if I can't do it with python somehow, I can't do it right now. So it's not something I should start working on right now. 
thought of using the HTML5 canvas and an API for client server interaction? 
Nice idea but I don't like the result. It's hard to read and the "syntax" highlighting seems random, or maybe not consistent enough to work nicely with each line and its meaning. Also, the letters of this font look a little bit off to me.
Asking of everyone to be nice *because you are new here* is basically cheating. Embrace the comunity feedback, however painful that is.
`conda` is `pip` but better in most cases. `pip` will install things off PyPi though. For executables/things you need to build, use `conda`, otherwise `pip` is fine.
Also have a look at [pip-tools](https://github.com/nvie/pip-tools). I recently [blogged](https://koed00.github.io/managed-environments-with-piptools/) about it.
Yeah you right about that, but my first post has been successful so it's all good. 
Absolutely nothing at all. What I meant is that I love the combination of the notebook and qtconsole. You can run the console with the same kernel, meaning that you don't have to create a new cell and run it just to perform a simple one-line command. The advantage of the qtconsole over the terminal-based IPython console is that you can have inline matplotlib figures, which is awesome!
OK, maybe I should specify any *useful* languages.
Which is exactly why the source is there. I (or you or anyone) could make a v2 that's better in multiple aspects, but this is the best I could come up with when I did it 2 years ago. If you have suggestion on how to improve the choice of fonts, colors, and design in general, I'm all ears :)
They are pretty interchangeable, and will be able to get the hang of conversions with practise. The PyQt bits of your code won't be very Pythonic e.g. with `value()` and `setValue()` but that's learning-any-API thing. I recommend keeping to PEP8 for your Python code (names_with_underscores) so the PyQt (camelCase) stands out. As a general rule - - `exec` and any other functions that are reserved words in Python get an underscore, so `exec_()` - For namespaces (and everything else) the C++ `::` becomes `.` If you have some specific PyQt code you would like help with let me know.
I really like that you included the source for that very reason.
I managed to find out how to change my environment variables, and set the path to C:\Python34\python.exe, but CMD doesnt recoqnize it. 
You search tweets only for the keyword "RT to win" twts = api.search(q="RT to win") And not for all the keywords you have defined 
I agree... Don't blame the tool
What about the "There should be one obvious way ... unless you're Dutch" I haven't kept to up to date with Guido's decisions.
No problem :) ...an entirely new OS is a bit of overkill to install a package. To be fair to the other answers it *used to* be as bad as they're saying... but Christoph Gohlke's packages combined with the new wheel (`.whl`) format have turned setting up a Python environment on Windows into a one-coffee job.
&gt; Which is exactly why the source is there. Yep, indeed, should have given you credit for doing this. &gt; If you have suggestion on how to improve the choice of fonts, colors, and design in general, I'm all ears :) Unfortunately I'm not a designer nor do I have any talent in this general area. So I can't really "convert" my nagging into constructive criticism, sorry.
Of course, it's not about coding it's about understanding the science/maths behind it.
Ahh, that makes sense. Thanks.
My adwise is to keep an open mind. They way you phrased your question suggests that you have decided that python is "less good" before you even learned to write stuff in it. This to me seems a bit arrogant. With a bit of work on your part you will find that one of the reasons python is popular is that it supports multiple programming paradigms well. 
Thanks. I know it's important to keep an open mind but it's terribly hard to overcome your own prejudices. I look to Peter Norvig (or was it Guy Steele? anyone it's not important, they're both geniuses) who writes that it takes 10 years to learn programming and he considers himself a beginner to Java even though he obviously knows much more about programming than 99.99% of us. Python intrigues me not because of any technical reason (nothing i haven't seen before or seen done better) but because of cultural reasons. Why people celebrate it when all I can see are the many glaring flaws it continues to contain. 
Way to sound extremely condescending there pal. You are a hipster of programming. Just because something is outside the norm doesn't make them superior. 
It's not out of the norm though. Guido was a newbie to language design and I've seen better languages designed by the worlds best language designers, experts in their field with decades of experience and wisdom on language creation and implementation. 
I don't have any experience in PHP except all code I've come across in it looks horrible and unmaintainable (especially compared to python), and there's a bunch of articles like this that makes me want to stay far, far away from it: http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/ Python is super enjoyable to program in because there is very little bullshit in it ( compared to most languages) and it's very rare that you're fighting the language. I'd say it's worth switching just because you're either gonna learn a bunch of python or a bunch of PHP in the coming years, and career wise I think you're going to enjoy your life a lot more focusing on python compared to PHP. A huge number of real projects are hell to maintain and work on and PHP seems to almost encourage bad coding practices, which definitely does not help in avoiding these projects.
I'm aware of this -- It searches for "RT to win" using twitter's search, and then if any of the tweets it found during search contain those keywords from the list it retweets them.
But, won't the search only get the tweets containing "RT to win" and not the tweets containing "retweet to win" ?
:))))))))))))))
I just "fixed" it. Let me know if/how it works please. I can't really test it at the moment, i'm at the dentist's office.
No passwords? I wrote a script a while ago that would email me if certain items on Newegg went on sale. I hated having to save my gmail password into the document.
I'm using Conda at work. It's main draw right now is that it has an identical development/deployment model between the Windows machine we use for development, and our Linux servers. Furthermore, the Anaconda distribution works nicely "out of the box", even on Windows. 
The `:P` usually indicates some form of joking. Of course I wasn't serious.
Is this built on top of the Python 3 email libraries? If there's one area that has radically changed between Python 2 and 3 it is the email libraries which are much more powerful (if somewhat arcane) than ever before. The Python 3 email libraries are the best kept secret of Python 3.
Agreed. The poster is not "simple," as the rules would suggest.
Thank you so much! What is interactive session? I am very very noobish haha. But I love Python so far!
It uses the `email` package which is available in both Python 2 and Python 3 (`yagmail` can be used in both). Not sure if it refers to the same package?
Thanks for the thoughtful reply. And I appreciate the info on the python changes between v2 and v3. I agree with what you say about Scheme. I'd never persue a project in Scheme, nothing against the language, it's just not 'real world' enough for me. That includes libraries, documentation, language features, etc. Haskell i loved until i discovered Lisp and then i never wanted to go back from my dynamic paradise. I could never make anything concrete in Haskell, but it was in a way my first language, we used it at university. I hated it and eventually i grew to like it but aside from simple problems and exercises I could never figure out how to make a real world app with it. Things have changed in the last decade though and Haskell has more library support and books but i'm not really interested in revisiting it again. Coming back to what I miss - the freedom I felt in CL. It was in my mind the perfect language. If you wanted to tinker and optimise code, you could do that. Lower level code if you need to worry about it, you can inspect the assembly code for a function and golf it down to reduce memory or cpu usage. It's so easy and fun I loved it. For higher level stuff you could use the basic lisp language which has evolved from decades of programming towards a useful general purpose language. With Lisp you can compete with C or Fortran in speed or when it comes tolanguage power; create new syntax to add new features. Pretty awesome. However i'd never use CL again, the community sucks, arrogance abounds and it's a very unpleasant language to use when the libraries are undocumented, half-assed or broken and unmaintained. A lot of these problems would be fixed if it ever became popular but that ship has sailed. There is clojure but i hate it even though it's a nice language, i miss the power of CL which it will never have. Java I used professionally and I still think it's a great language for building apps especially with the amazing tooling around it. Libraries are common too. It's a good choice. I just don't wanna write java code as my go-to language. 
Doesn't look Zen at all. Thanks for sharing the source though.
True but suppose you knew another language much worse than Python, say R or Matlab (i dont know if they're objectively worse but for arguments sake), you would then be aware about ways in which Python was superior (if it was). Similarly, a lot of people who use Python don't know or care about there being better languages out there. They dont know what they're missing out on. They can't see why it's not such a good language (relative to great languages). And yet im sure people have made the transition down to Python, i wanna hear from those guys. 
As I tried to point out, the idea is not so much that Python is a "better" language, more that it is a "do-it-all" language. And even if I'm interested in learning Lisp (at least for my emacs-fu), I would not use that as a "problem solving" language if I can't do as much in Lisp as in Python. People that are more into CS than me can probably tell the "design flaws" you're referring to (could you outline them, just so that you don't sound pretentious?), and I really believe Python is not the "best written" language. Even so, for me, it is Python is "better" in the sense that it can solve more problems. By the way, just saying that a language is "better" than another sounds a bit obnoxious. If you could detail the "flaws" of Python (and if you say GIL: yes, we know, but it's an implementation thing), and explain what you mean by "good", that would be really kind.
"Hello, I have already seen what it's like to transition from C/Java/… to Python, does anyone did something like a transition from Haskell, Lisp or Scheme to Python? These language are fundamentally different, so I'm interested." sounds a lot better to me.
Woah, lots of *very* different things. There are some I can't address (functional programming, concurrency), since I'm really not a CS guy, but let's try for the other ones. &gt; powerful full featured IDE Is it really a *language* issue? I don't use any IDE (I just stick with Emacs + elpy, which is *really* good), but have you tried something like PyCharm? People keep saying it's awesome. Even if it's not an IDE, have you heard of the IPython notebooks? It makes you change your coding habits. &gt; portable libraries for X (GUI, sound, etc) For sound I don't know, but the portability issue comes from the fact that Python is not compiled. Even though it's not that much of a problem with Linux (and that's probably a community thing, since Linux users are more likely to spawn a terminal than Windows/Mac users), I agree that it can be difficult to ship code for Windows. Out of curiosity, is it much better in any Lisp flavour, or in Haskell? &gt; Personally the one thing which turns me off python code is the the underscores. (...) Such a noob thing. You're just being a jerk now. It's not a "noob" thing, it's more about taste I guess. You just need the double underscores when you try to redefine some class stuff (init, len, str methods and all that). I don't find it specifically ugly, and I think it's a nice enough way to protect class users to overload methods by mistake, and still does not need to go through all the pain of public/private things. And if you want to just discuss how **you** find Python uglier than Lisp, maybe you should have started with that. &gt; no language standard specification What do you mean exactly? There is a "style" guide, and the documentations usually tells you the "pythonic" way to do this or that. Maybe there is no "strong" standard, but that's probably because there is no need for something that would mostly be used by compilers?
One benefit *would* be * Our devs know Python better, or prefer working in Python Except that's clearly not the case from the context given in your post. Another might be * We get to learn Python, which is something we want to do And that's up to you. I understand and agree with the folks that say "if you write bad PHP, you'll probably write bad Python", but at the same time, if you're at the stage of development as a programmer that you're writing bad code, Python can provide a decent environment to figure that out and start improving. 
You want to set the path to the *folder* containing the Python.exe. So in your case add: `C:\Python34\` to the path. Windows uses the `PATH` variable as a list of folders to search through when to enter a program at the command prompt. So they way you have set it above when you enter: python It will try and find it in a *folder* named C:\Python34\python.exe ...giving the full path... C:\Python34\python.exe\python.exe ...which doesn't exist.
Yes it's a language issue. CL can give you SLIME or Lispworks or Allegro - all amazing IDEs. Java has Eclipse, netbeans or IDEA which are again very powerful environments. C++ has visual studio. The Python guys don't know what they're missing out on but even the C guys have enjoyed gdb for years and yet python guys don't know what a good environment for debugging looks like. I could go on about tooling but lets stop there. Portability is super nice if you can swing it. JVM does it right, no reason why Python couldn't do it just as well, except, for well, the whole Python being managed by that guy way over his head, Guido the ignorant who insists on controlling the language so tightly and never wanting to relinquish his hold on the language despite being out of his depth with the novice mistakes that continue to haunt Python to this day. A language spec is important. C has one, C++ has one, Java has one, CL has one, these things matter. Especially when you're trying to fit this one awfully brittle language (Python) into multiple holes (CPython, jython, ironpython, etc) where there is no specification to ensure these different implementations which address all the weaknesses of the reference implementation all behave the same way. It's a mess. 
Sounds like a good project for you to work on :P
 if "follow" in (i.text) or "Follow" in (i.text) or "FOLLOW" in (i.text): Why not if "follow" in i.text.lower(): And also this: relevant = False for x in keywords: if x in i.text: relevant = True Is the same as this: relevant = any(k in i.text for k in keywords) So you could just change to: if not any(k in i.text for k in keywords): continue Then remove the `if relevant == True:` line and de-indent the rest of the method. I was bored so I updated with some other optimizations here: https://gist.github.com/timster/b32d9715be1b4f9a79f3
I don't need any more projects to work on. I'm full to the brim. Thanks for offering it to me though.
I would be interested in that project, perhaps work on it with you? :) Feel free to MSG me if you are interested.
&gt;The language just isn't cut out to be a proper language that can be compiled down to efficient code that runs fast and doesn't use a lot of memory. Yes, but that's true of any dynamic language, be it python, javascript, lisp, or lua. When you have strong metaprogramming capabilities, you lose speed. &gt;no language standard specification Technically, CPython is the spec, but no this is a fair issue. &gt;lack of functional programming primitives (eg tail calls) So, those are an interpreter feature. Just because CPython lacks those doesn't mean that they can never exist (and the reason for them not existing, debugging, is a valid one) &gt;concurrency primitives Yeh, though this is constantly improving &gt;powerful full featured IDE PyCharm? What doesn't it do? &gt;portable libraries for X (GUI, sound, etc) PyQt and PyWx? &gt;Personally the one thing which turns me off python code is the the underscores. Who decided it was a good idea to put them everywhere you need to define a new class. Such a noob thing. Look to C/C++ for the "source" of that style, but you should be familiar with using underscores for things that someone "probably shouldn't care about" coming from haskell. They're what you use to throw a value away.
I saw an old thread where Mike bayer was suggesting the count method. Definitely from a long time ago when SQLA was in its infancy. I know it makes sense on the DB level, wanted to speed test as a sanity check.
Call me naive, but when wanting to add "custom headers" an option for yagmail, I didn't find a single header I want to manually add! Do not forget: in yagmail the default is HTML emails, and standard encoding of text is utf8. There should be no reason NOT to use utf8 these days. Multipart is being addressed by the wrapper: text goes into the HTML part, images get placed in between, and attachments are also added. The thing is that I haven't found a case yet that I would like to see differently at this point, so I'm curious if someone would like to test my headers and see if there is something clearly wrong (but I've heard no complaints yet). Thanks for your concern, and when I have some extra time I will certainly look and see what I can do with Email 6 (https://docs.python.org/3.5/library/email.html). Also, I guess most of that stuff is important when *parsing* an email; yagmail is just *sending* them.
Stack traces going back the lines of code are all I need, personally. Pylint works wonders, Python 3.5 will now allow us static type hints. Lisp is TERRIBLE to work with (and I use emacs and have written A LOT of emacs lisp). Why do you want Python? Because it is readable, and that is way more important than you'd think. Rather than demanding things be done a certain way (by one of your "superior" languages), you might start by wondering how would someone do X in Python? You might be surprised by the inferior Python.
You can write a bunch of code to turn any framework into any other framework in Python since it's a highly dynamic language. In fact you can create a Flask interface for Django and a Django interface for flask. It's kinda a moot point, and has nothing to do with whether or not the merits of each framework is good and if they should exist. 
&gt;Yes, but that's true of any dynamic language, be it python, javascript, lisp, or lua. When you have strong metaprogramming capabilities, you lose speed. This is simply not true. See CL, Lua or Julia, for some examples of languages with superior high level features while at the same time being blazingly fast. 
- Flask doesn't support automatic version handling - Flask doesn't support annotation type validation - Flask doesn't support automatic documentation - Flask is much slower: http://klen.github.io/py-frameworks-bench/ Hug is based on Falcon, and does not add much per-request overhead. - Flask is NOT an API framework, it includes things like template rendering which are not helpful and potentially harmful if making an API.
You used your personal twitter account? Interesting...
Implicitly turning file paths into attachments is still a bad idea. 
Holy crap -- this is great! Thank you so much! Do you mind if I incorporate some of the changes you made into my program? I'll give you credit.
`range(start, end)` has `start` inclusive, and `end` is exclusive. To print from 1 to 3 (inclusive), do `range(1, 4)`.
I do not fear mistakes in this. It is already very explicit to use a delimited fully working file path string as an object in a list. All problems will be avoided when people do not use a list (e.g. "This filepath /home/ won't be accidentally added"). `['I', 'would', 'never', 'use', 'such', 'a', 'sentence', 'with', '/file/path']`. But people are allowed their own amount of magic :) If you want a very nice explicit correct mail sender, you can also use my friend's [mailthon](https://github.com/eugene-eeo/mailthon).
You could create an application-specific password: https://support.google.com/accounts/answer/185833?hl=en
The issue of [inline vs attachment vs link vs text image](http://www.reddit.com/r/Python/comments/384tcu/finally_it_is_now_easy_to_send_emails_in_python/crsrpfl) was brought up in the last thread. Has this been addressed yet?
this is great! sorry if im a noob, but how and where do i implement this code???
Gee man, no need to call everyone a retard -- maybe if you were nice someone would help.
Yea. I agree. PHP is a mess. I just get annoyed when people think using something else is automatically going make their code readable and maintanable. It's personal issue I have with my business partner.
yagmail doesn't do links anymore (until someone would raise an issue on github really wanting it). I didn't see anyone interested yet. 
Store it in a database or whatever. If you want it really quick and dirty you can store it as an environment variable then just do: password = os.environ['gmailpassword']
The default are now attachments. If a valid local path is given as argument in contents, e.g. `'/home/myfile.png'`, it will be sent as an attachment; in line (not pun intended) with all other file types (all attachable paths will be attached). 
if you've already written an app in PHP you should keep it. throwing out 6 months of work and putting yourself on a learning curve for a language and ecosystem you don't know yet is not going to do you any good for actually completing your project. keep Python in mind for your next project. its a very nice language.
If you want only text, you can use `yagmail.raw('/home/myfile.png')`. But then again, I'd still advise to just type some text around it, "You will want to visit the file /home/myfile.png on your computer" will avoid having to use `raw`. 
for asynchronous web crawling, [`grequests`](https://github.com/kennethreitz/grequests) is my favourite lib.
**Exclusive ranges** do have some benefits: For one thing each item in `range(0, n)` is a valid index for lists of length `n`. Also `range(0, n)` has a length of `n`, not `n+1` which an inclusive range would.
sure, but flawed tools require more extraordinary care to avoid collateral damage caused by the flawed tools. just because you _can_ be careful and disciplined and avoid the problems doesn't excuse the flaws in the tools. if you use better tools you can focus your discipline and care on more productive things than working around the flaws in your tools. 
The point is that they aren't the same thing so they shouldn't be provided as the same thing.
Excuse me, but what are you specifically referring to?
Or maybe you have to admit that you have no idea what you're talking about. Python does have a lot of tools, there are debuggers, profilers, I don't know for vim but emacs has great python modes, and so on. So if you could stop being so condescending all the time, and just take half an hour to "update" your ideas about python, you wouldn't piss off half of /r/python.
That'll happen if you're retweeting too quickly or following too quickly. If you want an example of safely avoiding this, check out [this](https://github.com/kurozael/twitter-contest-bot). By adding a pause, and doing it slowly, you'll make sure that you're not marked as a spam bot.
I haven't read this in the comments so I feel the need to quote an [article about the migration from Java to Python](http://dirtsimple.org/2004/12/python-is-not-java.html). Yes, this thread is about migrating from PHP to Python, but I guess there are quite some similarities: &gt; This is only the tip of the iceberg for Java-&gt;Python mindset migration, and about all I can get into right now without delving into an application's specifics. Essentially, if you've been using Java for a while and are new to Python, **do not trust your instincts**. Your instincts are tuned to Java, not Python. Take a step back, and above all, **stop writing so much code**. *tl;dr: You won't create clean/idiomatic code if you switch directly from PHP to Python. You will most probably write PHP code in python.*
you are the man
better than listing mostly things that have nothing to do with the language design itself.
What features specifically? I've never had intellij do something that pycharm couldn't also do, but I'm not a poweruser
In every case that's due to jitting. Pypy exists. And can be as fast as c or java. 
So you can have a mail inbox server right?The code is pretty clean ,very clean
I'm not a graphic designer but I think this one is more Zen: http://i.imgur.com/FBF2EaT.png Also: http://bettermotherfuckingwebsite.com ;)
Nope, CL is compiled to machine code. Another example of a dynamic language with an efficient implementation is Factor, also compiled to machine code. PyPy is irrelevant until Guido goes away. The guy doesn't even bother trying the various implementations and until Python gets a specification with conforming implementations, only hte reference one matters, which just happens to be the worst implementation both in performance and features. Ugh.
when you made the twitter app, what did you put as your website?
I started logging and there are a default number of 3 retry attempts with decaying wait times. Simplistic, but indeed I agree with you that it is important. Unsent emails are not tried when the application is stopped. Handling this nicely I certainly had on my mind, but surprisingly after many users, you're the first to address it. I like the idea of resending even if application has been stopped. Perhaps you like to be involved in brainstorming / thinking of implementation / actually implementing? 
Do you have any documentation for it? I'm curious.
If i were you i'd move the number into your bot account. you can always move it back to your personal one when you're done.
Isn't that exactly what you did? You extended Falcon to be Hug. Other people extend Flask. We did at our company but we did not make it open source. What you did is not radically new and surely won't revolutionize the way people create APIs today. I would really love to see some advanced API examples including the standard features implemented in Hug. Those "Hello World!" examples really don't allow people to decide whether they should go with Hug or not. But no offense, thanks for going the open source way.
bruhhh i got get u in DM with this solid advice
You claimed it was the developer writing shitty code and trying to blame the language for their short comings. You then dismissed an article clearly explaining how and why it is definitely the language's fault for being a bipolar inconsistent pile of WAT!? There is definitely still some developer fault in the mix, but the majority of the fuckhattery falls squarely on the shoulders of the language in this case. Just because you CAN produce maintainable code doesn't mean the language isn't fucked fundamentally. I CAN make a masterpiece on the bathroom walls using my own feces. Doesn't mean that I should. And I definitely could make a better masterpiece in less time with another medium.
I have looked at the specific components, and it seems MIT is the most appropriate. Previously it was GPL, but I have now changed the LICENSE in the repo. In `pip`, it will be updated in the next build.
Homie, PHP is gonna leave you messed up, crippled and lamed. You gonna be left behind, sir. It is easy to write php code and it feels great because you are writing code and not slacking. But what kind of code? Echoing on every step? Same old while loop to retrieve all the results from your last query? If you are using like zend framework, yii, codeignater or whatever stay with php it does not matter. Sir? Sir? I'm going to write few words now: orm, view, rest, json, route, migrations, background jobs, packet manager. Did any of these formed any images in your head? Do you know the context any of these words would be used? Did you ever worked on something that you would be able to describe with the said words? Yes? Great! No? PHP IS MESSING YOU UP! Have you ever thought "well I'm writing shit right now, better knowledge up by reading some book or spend time researching something specific that would help me up to write better code"? Yes? Great! No? AWFUL JUST AWFUL, MAN! GOD DAMN. Next. You don't rewrite php projects in python. You rewrite php projects in python using django or flask. You gonna use framework. And framework will add overhead to your rewriting task. A lot of overhead. PHP has left you lamed and you know nothing about best practices. Even more. These frameworks will give you tools to solve problems that you have never thought existed. If you switch you will find yourself in a world of pain, boy. Huge pain but temporary. If you gonna stay with php you gonna live a happy and wonderful life in a world blessed with ignorance. Choose wisely, boy. 
I don't see the option to revoke/renew my API key. That would limit the usability quite a bit. (I'm using the sandbox domain)
Legacy email systems can have any kinds of trouble with email standards. And it is really hard to get customers to change their email systems just for your project. So "these days" you still need legacy compatibility. I know from painful experience ...
There is this one: https://github.com/Matt-Deacalion/The-Zen-of-Python-Poster
Email is a really layered standard. It's a trap!
&gt; Note that when contents is a list, it will consider each item and check if it is a local file. If it is, it will attach it with the right MIME type. Awesome! What if I want my email to be just "/path/to/a/file.mp3"? As in this file also exists on the disk but i want the body of the email to be this actual text and not the file attached?
Good question, I don't know. I use the SMTP server directly, but try sending them a ticket, I don't think they wouldn't have some way to roll your key.
How can hug receive a PUT request with a JSON body?
I think (hope) it might be due to the limited sandbox domain. I have added an mx record for my domain and will give that one a go as soon as it has propagated.
Sql server is end user software. Threading was in fact common to some extent in most Microsoft software. You seem to be trying hard to move the time period back an additional decade. Even then, you are woefully ignoring the obvious trend...which was entirely the point. You're also purposely being obtuse and avoiding what's actually being stated. Nothing you've provided contradicts nor counters anything I've stated. 
Have you considered that maybe using some tools to help you write better php/python might help? You may want to look at the jetbrains catalog of ides and see if they can help you.
C'mon man, you gotta post it already! I have a great interest in anything that uses automagic data extraction.
Thanks! I'm definitely going to be working on plotting and statistics soon. Also, thinking about numba or cython to see if I can speed things up. But that is later, when I'm trying to optimize things.
Do you have a link to any documentation/blog posts on these changes? I've spent a lot of the last few years fighting with the nasty nitty gritty of email in Python - encodings, multipart messages, unicode-aware headers and so on. Anything that can make that simpler sounds good to me.
If you enable 2-step verification on your Gmail account, you gain the ability to generate "application-specific passwords" which are essentially API keys that get you into the account without having to enter a two-factor code. We save API keys in config files in production all the time; it's safe if the keys are unique per application and you revoke them when you're done. I use Mandrill for automated mail instead of my Gmail account because it's less picky about things like verifying sending domains. It also will provide you API keys to authenticate with (which you can revoke), and you get something like 10k emails a month for free, which I never use with my simple monitoring/alerting scripts.
Thanks for the suggestion. I proceeded as follows: 1. I bound the VPS chat server to the private IP and port 8080. And initiated it. Tried to connect as a client to the public IP of the VPS. The connection failed. 2. I reversed the roles of the VPS and my machine. Using ifconfig on linux, i found the local address of my machine and bound the server to this address and port 8080. Then, using Google, found the IP of my machine. Using this IP tried to connect to my machine from VPS as a client. The connection failed again. 
I'm not entirely convinced making collate a decorator is necessary.
I like conda slightly better than pip /virtualend but it doesn't make that big of a difference. 
&gt; security vulnerabilities There's no security problems here, because `i""` interpolation would only be allowed for string literals, and if you can write `i"${reveal_secret()}"` you can also write `reveal_secret()`. This is like saying that `rm` is a source of security vulnerabilities.
Nice and simple, I thought this would be a great opportunity to try [property-based testing](https://hypothesis.readthedocs.org/en/latest/quickstart.html). Floats are used for the internal representation, introduces some error into every calculation. The error is absolutely tiny for most numbers but means we can't use normal equality checks. When converting to/from hyperinflated currencies I can imagine the error becoming significant. from hypothesis import given from hypothesis.strategies import floats @given(floats()) def test_convert_forward_back(self, amount): from_currency = 'EUR' to_currency = 'USD' acceptable_margin = 0.0000000001 converted_amount = self.cc.convert(amount, from_currency, to_currency) converted_back = self.cc.convert(converted_amount, to_currency, from_currency) difference = abs(amount - converted_back) self.assertLess(difference, acceptable_margin) Consider using [decimal](https://docs.python.org/2/library/decimal.html)?
the test is ^[\[link\]](https://github.com/kootenpv/yagmail/blob/master/yagmail/yagmail.py#L188-L189): if isinstance(contents, str): contents = [contents] so yea … it would be one element in a list, and yes, it tries to add the file. It doesn't even have to be an absolute filename. It doesn't even require to have any slashes in it's name, it's just a simple `os.path.isfile(…)` test ^[\[link\]](https://github.com/kootenpv/yagmail/blob/master/yagmail/yagmail.py#L320) that tests what kind of "content" it is …
That's part of the beauty - what a great way to provide your own handler function...
You'd be a great Python preacher if a Python church would exist. Hell, I'd be on every of yours sermons, surely.
A few other possible DigitalOcean projects: - Create your own VPN to protect your privacy while online (guide [here](https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-14-04)) - Run a Twitterbot (you can use TweePy). Here's [one I created](https://twitter.com/technocracy_new) - Create your own mail server using PostFix. Kind of a headache, but you'll learn a ton about how email works behind the scenes.
Really nice. :)
Look's like your getting data from a .csv? How are you updating that? Did you know the ECB has an official API?
Found his blog at http://www.bitdance.com/blog/. I'll take a look.
post the program on pastebin
Great news! cryptography is a quality package.
I could throw some dev work your way if you're willing to earn bitcoin. It would be building on some existing web-scraping scripts, so you wouldn't have to start from scratch, and would make my life a lot easier. PM me if you like.
Very cool that the geosynchronous/stationary belt is very visible :) 
[I see what you did there.](http://cdn2.mommyish.com/wp-content/uploads/2014/10/i-see-what-you-did-there.gif)
Thanks - this is great!
kivy's user group on google is more active than it's reddit page. Asking there will get quick answers to any questions. I developed an app in kivy, as a resume filler since i didn't study CS, and i definitely wanted to use python. Answer for me this though -- what's the advantage to you for not writing in swift and java. 
Thanks, just put it up on r/space.
Post your source!
a) I don't think it's spam. b) I do respond to people on issues/questions related to submission. c) on the right sidebar on /r/Python importpython newsletter is listed as one of the resources.
Just posted it to /r/space and /r/dataisbeautiful, thanks for the /r/interestingasfuck suggestion!
Good idea! Though I have basically zero experience with GitHub. Maybe sometime in the next few days. Stay tuned.
Not what you've asked for, but I've tried it using the [Anaconda distribution](http://continuum.io/downloads) and it works just fine. See: http://pastebin.com/gGv5XMW4
point noted, I think nltk could help with preprocessing data and then hopefully I can move the analysis to R where I am more comfortable. 
I don't even... I'm just gunna ignore your Visual Studio-ness and suggest this: http://zetcode.com/gui/pyqt4/
&gt; conda create -n scrapytest python=2 I'm getting the same error after the last line of code. No connection could be made because the target machine actively refused it 
Nonsense, what you're describing is a type error. If you've given your function the signature `Int -&gt; Int -&gt; Font` then you're not letting the type system do the work it should (in an ML/OCaml/Haskell Hindley-Milner-esque world). Better to define a data constructor: datatype Point = Point of Int * Int Now you give your function the signature `Point -&gt; Font` and the type system prevents you from making that mistake. In the best world, all errors are type errors. (However, I love python so please don't lump me in to the Haskal++ hipster mentality at the top of this thread.)
Does it support TLS?
Sorry, the version I uploaded is just for real-time viewing in a figure, to make the gif I just got Python to save each figure to a png file, then I took the lazy route and used an online gif maker. :P The txt and zip are what is downloaded from tle.info. So obviously there won't be a gif in the output, but are you saying that you don't see the figure at all? It should be drawing and updating a figure once per second in a new window.
How about [Kivy](http://kivy.org)? 
Kivy can be quite good for most apps. As another poster said, one of the largest downsides is the loading and installation times (both related to pythons larger size), but startup is not truly frustrating (first install can take a bit). I'd like to get around to building a non-static loading screen in java (something like the continuous looping loading animations used by google in their latest apps) we can display while python gets started up and everything. In terms of performance: Kivy's default graphics are really built from a GUI approach and not a real-time rendering approach, this means they try to save battery and processing time by only redrawing what has changed every frame. This can actually be a real overhead issue if you are attempting to change everything every frame, and is fairly unnecessary. I built [KivEnt](http://kivent.org/) in order to make it easier to do more intensive real-time graphics, and we are picking up more and more performance every few months. We are at least 100 times faster than the same rendering done with pure Kivy instructions, and a lot more flexible as well.
Got it, something was wrong with the proxy in my internet settings. Was able to fix and install
Yes, it is the default. Since another person mentioned, you can now also use `yagmail.SMTP_SSL` since the latest version.
Thanks :)
Printing out file paths line by line still makes it a single string (newline separated), so no harm is done.
Reply-to mostly makes sense when you are actually able to parse an email and reply to it in a package. `yagmail` can't parse emails (yet, probably never), so it is not like it could really reply. As for the others, I'll have to reconsider ;) I specifically really like "X-Mailgun-Deliver-By" :) So yea, I'll throw the option headers back in like a dictionary, then it is up to anyone to do wtf they want with it. Thanks for bringing it up with some examples!
If you do it like that, it will just be text. The way to make it an attachment is like this: `['Now go to this path:', '/path/to/some/file', 'And then... yada yada']`. Not so easy to do that "by mistake", right? 
Since recent versions you will have `yagmail.raw('/path/to/a/file.mp3')` :)
Are we just talking about headers here, or what do you exactly mean with legacy in this context? I personally would make sure yagmail would always work with python 2 and 3, so if I would add email 6 to python 3+ then I would make sure it is just an improvement to python 3, but not break anything for 2.
WTF is sniply and why post such a weird embedded link on /r/python. Also the article is a garbage list from what looks like a content spam website.
Sounds great, and really like the way to go! 
Also a nice solution.
Don't we all ;)? I'll post it on reddit when I do (2-4 weeks, I'd say)! Stay tuned...
Bullshit. Sometimes someone asks for the location of a specific file, and in response they just send the path, without any further explanations, which might be the location of a shared folder, or something similar, that is more or less equal on all systems. You **cannot** know in advance, as a developer of a library, what kind of texts will be sent by users. Especially if the content of the email is written by *untrusted* users. Your library does not provide any facilities to securely package untrusted data. And you also **cannot** know in advance, what kind of filenames are in the filesystem of the person using your library. In essence: Every developer, that uses your library has to check first, whether the content provided by the users, just so happens to be the name of a file in the filesystem. If it is a file, they have to abort it or prepend it with garbage, effectively changing the contents of the email (which can have legal consequences). If they don't want HTML to be sent, they have to actually clean it first, again changing the content of the email. *I discourage anyone to use this library in the current state.*
I've used match.start and match.end lots of times. Not exactly sure what for, but you know, having the indices can be very useful.
check this too: https://github.com/aosabook/500lines/blob/master/crawler/crawler.markdown
I don't see how anyone would send a reply with `yagmail` though (thus causing a single file reply, which then makes more sense). I envision it more for automated mail sending, not to reply to your best friend. Anyway, FWIW: I just decided that I will in fact make no more magic standard (thus removing this case), by having to also `yagmail.attach`. Even though I doubt it will cause any harm in the current state, you guys convinced me that it is better to give people a safety guarantee. I guess I was just overdoing it with wanting to make it damn easy to send complex emails. What's left is that mimetype will be automatically guessed when using `yagmail.attach`, so that should be still nice. I'll do it over the days, and post the big impact (breaking) update. I guess it will be time for macro version 1.
Your post was just so you could have this reply, right?
KivEnt is built for 2d games! If you plan on having less than 100-200 game objects total I think you would be fine with starting with Kivy. If you want a game with significantly more things going on, KivEnt will be a real help in terms of performance. In addition, KivEnt uses an Entity-Component architecture similar to Unity (but not exactly the same), this organization of data and game logic has become fairly standard as it allows you to better reuse the game logic you do build and forces better separation of concerns. If you aren't familiar with thinking in terms of entities, components, and processors it may be a bit slower to get started, and you may want to dive right in with just tackling getting a Kivy game going which will have a more familiar organization. 
Yes, the data is loaded from a static csv file. Using the ECB API would be too slow for my own usage of the library. I do update the package with the latest ECB data, but not daily though. A script is included in the source to update the data if needed.
Thanks for you nice comment ;) I never considered decimal indeed, I just wanted to keep things as simple as possible, and floats seemed the way to go. I wouldn't mind switching if some compelling arguments outweigh the additional complexity ;).
How does it compare to pycrypto?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/vim] [Python folding in VIM : Python (x-post from /r/python)](https://np.reddit.com/r/vim/comments/3gyclq/python_folding_in_vim_python_xpost_from_rpython/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Is there a reason that you recommend PyQt4 instead of the newer PyQt5? I Haven't worked with them yet, but I plan on starting GUI programming soon as well.
Maybe I'm missing something, but with Python's whitespace syntax, isn't `set foldmethod=indent` all you need regarding folding?
Yes, it is also linked to inside the PyQt4 tutorial. I wanted to ask if there is a specific reason to use the old version (like bugs, annoying API changes maybe).
&gt; Is there any resource for Python GUI programming for Visual Studio that I'm missing? If you already have "Python Tools for VS", then no, there's nothing else afaik. VS2015 is a pretty new platform, Python on Windows always seems to lag a bit (Py 3.4. is still compiled with VS 2010...). If you want to keep cross-platform compatibility, I would recommend Qt. If you stay in the framework as much as you can, supporting this or that OS is just a recompile away. There is a learning curve for the more advanced stuff (trees and tables), but simple forms can be put together very quickly with Designer and then compiled to python; you then subclass it in your application code and you're away. There are a lot of tutorials out there. Qt support for Python comes in two versions: PyQt, which is the more mature binding but you either pay a license or have to release your code as GPL; and PySide, a newer version originally developed by Nokia, which you can use for free anywhere but is lagging now that Nokia is dead. PySide aimed for close compatibility with PyQt, so in many cases the two can be swapped out effortlessly (or they are with Qt4, not sure with 5). I've never been a fan of GTK bindings myself, but that's also an option. They tend to look much less native on Windows though, IMHO.
The most important thing is libraries. Seriously you can find everything you can think and you may need in the future. The second most important thing is code readability. At uni they introduced us web dev with PHP and the fact that I had to use HTML(you can avoid that btw) + PHP and having to type the $ sign numerous times made me sick. Then I found Python more of my taste and stuck with it. PHP is a good tool but it doesn't suit me. If you feel Python go for it. You must be aware that changing from PHP-&gt;Python itself can't fix broken code if you use the same techniques. 
Great! :)
PyCrypto's API is pretty awful and not particularly pythonic
Assuming that you are creating some kind of server or api consider Hug or Flask. To get your service daemonized you should look at the awesome power of Supervisor which is so much easier to work with than writing init scripts. 
D-Bus if you're on Linux. It's basically *the* IPC mechanism at this point. 
Very cool. This was fun to play around with. I can't say I love your coding style, but that's ok... it works. :) I was messing around, and after a few tweaks I [got this](http://i.imgur.com/GE02dOw.png). For some reason matplotlib starts really chugging if you don't clear the figure each pass... so that's the reason most of the tracks start turning into dotted lines. Still, it's fun to see how things move. :)
Oh! will look into it. 
Did *you* read the article? It clearly says we'll do this in steps. You at least saw the *Part 1* in the title, didn't you?
Visual Studio is a great IDE for developing Python code. However, you can't use the Visual Studio .NET GUI development tools unless you want to develop an IronPython application. If you want to switch over to IronPython then you can write Python code and use the .NET GUI elements. Personally, IronPython hurts my head. I just can't get my mind to mesh .NET and Python together. When I make Python GUI's I either use wxPython and the xrced GUI layout tool, or I use PyQt and the QtDesigner GUI layout tools. xrced and QtDesign are both GUI tools for laying out your GUI and setting up options, callbacks and event handlers. They will generate the layout files and the Python interface files. The Python interface file can be imported into your application code and the event handler methods can be over-ridden with you application logic. You can still develop and debug all the Python code in Visual Studio. 
I moved to Python 3 and since wxPython doesn't have Python 3 support I moved to PyQt. When I used to use wxPython I liked the xrced GUI layout tool. I've never tried wxFormBuilder. 
I didn't know about this, that is pretty cool! 
So, the centre of the circle is your position? The edge of the circle is the horizon all around your position? Can somebody explain why some sat's move and others are stationary please? Also, why is there a distinct curve of stationary sat's along the bottom and why sat's cluster around the edge of your horizon?
This plot represents my entire sky. The center is straight up, 0 degrees is due north, 90 is east, 180 is south, and 270 is west. I made it so that if you were to lay a real-time version of this on the ground in front of you, the current satellite distribution would be mirrored in the sky. So yes, the edge of the circle is my horizon. Each satellite's speed from my perspective on the ground is based mainly on their orbital altitude (farther = slower), but also on their angle measured up from my horizon. That's why the ones around the edge are relatively slow, since they are farther away from me. Most of the satellites in this gif are actually moving, but their angular velocity relative to me may be super slow. So slow, in fact, that in three minutes you wouldn't see it change. The only ones that are truly stationary in this view are the geostationary ones, which you can see in the arc across the lower half of this circle. I'm guessing that if I where to make a much faster time lapse, that would be much more obvious. The only way for a satellite to be geostationary is for it to be at the equator, and at an altitude that results in an orbital period that matches the length of one day here on the ground. That's why there's a distinct ring. As far as why they cluster around my horizon... imagine that you are standing inches away from a wall that is peppered with evenly-distributed dots, and that extends in all directions away from you. If you had superhuman vision, there would be a lot more dots per viewing angle at a spot far away from you on the wall than if you were looking at the spot right in front of you. Hopefully that's more helpful than it is confusing! 
Flask is okay if you are making a traditional web site. If your goal is an api then go with Hug
I don't really know what to tell you; I've never encountered a problem like that, and I've always found that pip just works. And I can't reproduce the problem you're mentioning with pdfmerge; in a fresh virtualenv with current pip, I get this: $ pip install pdfmerge Collecting pdfmerge Downloading pdfmerge-0.0.7.tar.gz Collecting coverage&gt;=3.6 (from pdfmerge) Collecting nose&gt;=1.2.1 (from pdfmerge) Using cached nose-1.3.7-py2-none-any.whl Collecting pep8&gt;=1.4.4 (from pdfmerge) Using cached pep8-1.6.2-py2.py3-none-any.whl Collecting pylint&gt;=1.2.1 (from pdfmerge) Downloading pylint-1.4.4-py2.py3-none-any.whl (428kB) 100% |████████████████████████████████| 430kB 822kB/s Collecting PyPDF2&gt;=1.21 (from pdfmerge) Downloading PyPDF2-1.25.1.tar.gz (194kB) 100% |████████████████████████████████| 196kB 1.3MB/s Collecting logilab-common&gt;=0.53.0 (from pylint&gt;=1.2.1-&gt;pdfmerge) Downloading logilab-common-1.0.2.tar.gz (190kB) 100% |████████████████████████████████| 192kB 2.5MB/s Collecting six (from pylint&gt;=1.2.1-&gt;pdfmerge) Using cached six-1.9.0-py2.py3-none-any.whl Collecting astroid&gt;=1.3.6 (from pylint&gt;=1.2.1-&gt;pdfmerge) Downloading astroid-1.3.8-py2.py3-none-any.whl (183kB) 100% |████████████████████████████████| 184kB 906kB/s Requirement already satisfied (use --upgrade to upgrade): setuptools in ./lib/python2.7/site-packages (from logilab-common&gt;=0.53.0-&gt;pylint&gt;=1.2.1-&gt;pdfmerge) Building wheels for collected packages: pdfmerge, PyPDF2, logilab-common Running setup.py bdist_wheel for pdfmerge Stored in directory: (redacted) Running setup.py bdist_wheel for PyPDF2 Stored in directory: (redacted) Running setup.py bdist_wheel for logilab-common Stored in directory: (redacted) Successfully built pdfmerge PyPDF2 logilab-common Installing collected packages: coverage, nose, pep8, six, logilab-common, astroid, pylint, PyPDF2, pdfmerge Successfully installed PyPDF2-1.25.1 astroid-1.3.8 coverage-3.7.1 logilab-common-1.0.2 nose-1.3.7 pdfmerge-0.0.7 pep8-1.6.2 pylint-1.4.4 six-1.9.0 And `pdfmerge` works without errors afterward.
My apologies for the length, haha. I have a physics degree, so I couldn't help but go into detail. ;)
What version of pip are you using? Not sure on the answer, but maybe it needs an upgrade?
Cool! I used PyEphem for plotting sun and moon altitudes over time, and getting daily moon phases, for my last project. It is powerful. Not totally airtight, but it is a great project and it does great as long as you stick to basic body methods (i.e. body.compute(observer)) - I had a few issues with the observer methods. I like your radial chart. Maybe add in some more colors/markers to liven it up and discriminate somehow among the satellites, but the animation looks really cool.
This is definitely worth trying. Ive had installation issues in the past due to running VERY old versions of pip, and the errors are never obvious. 
Many of the complaints I hear like yours about PHP are similar to those of JavaScript. The thing is that in both languages while both are esoteric are pretty powerful through their flexibility. You can essentially write them how you like and that is refreshing after being stuck in a C# / Java background. There is quite a decent ecosystem these days around PHP and it isn't like the bad old days of the past and plenty of experienced programmers are choosing it for projects.
Just a tip: I had a phobia of publishing code, working with git using github etc so if you are in the same position, [just do it](https://www.youtube.com/watch?v=nuHfVn_cfHU), you'll learn most of these stuff by working on them. If you want to learn git just start your next small-medium project using git from the beginning, even basic version control is a lot better than no version control.
Indeed, Javascript sucks for similar reasons as PHP. It isn't about being esoteric or flexible. The language design just sucks. Languages like Python and Ruby are *more* flexible and have far fewer language design errors. The kind of thing I'm talking about is stuff like this, in Javascript: var list = [1,2,5,6]; if(3 in list){ alert("yes"); }else{ alert("no"); } There is just no excuse for things like this.
You could also check out "PyRO", which stands for "Python Remote Objects". It's basically an RPC (Remote Procedure Call) framework, that allows you to call remote methods and stuff. Using this, you could have a client program create a proxy object attached to an object in the daemon, and then just call methods on the proxy object as if it were a local object, and print results to stdout, etc. https://pythonhosted.org/Pyro4/
What sort of use is this for? 
this, 100x This! It seems rather obvious that OP is not using or familiar with tools like virtualenv which are an absolute must for any serious python dev.
So sick, so simple. I like this a lot, I'm going to prototype with it. 
Have you considered pyhash to do all that work instead? It's quite impressive
I'm not sure i buy that it's not apparent that variables are contained within the string. the f litteral &amp; curly brackets make it clear enough to me I'm sure your favorite editor will also soon highlight them inside the string.
Instead using a `UnixStreamServer` you could go for `TCPServer` to expose the API on a network socket.
I made a pull request with some style changes, what do you think?
/r/amateurradio would be all over this too.
You can't sort a dict. Also please use /r/learnpython for these kinds of questions. However, if you really really want to sort your dict you could do something like this: from collections import OrderedDict mydict = OrderedDict(sorted(mydict.items(), key=lambda kv: kv[1]['total']))
Progress is being made on packaging python 3 for mobile, the actual packaging of python 3 is not the largest technical hurdle here, but it requires some other work to be completed first. In addition, all Kivy examples, and most any Kivy app that takes a little bit of care works seamlessly on py2 and py3 so it should not be a big deal.
What OS will your software be running on: Linux, z/OS, or something else like TPF? I have no experience with IBM iron myself, but I expect you would have the most luck with Linux. I think the most recent [Python port for z/OS is 2.4.1](http://www.teaser.fr/~jymengant/mvspython/mvsPythonPort.html), and I've not heard of a Python version for for TPF, VSE, or CMS.
Well, according to [the "Other Platforms" download page on python.org](https://www.python.org/download/other/), there's a port of Python 2.4.1 to z/OS...
I'm pretty sure the OS is going to be z/OS. I'll call to make sure. I suppose 2.4.1 isn't horrible and that would at least allow me to do this job. Thank you!
Thank you so that makes it doable!
It's not sexy... 
This StackOverflow post has the basic explanation and approach you'll need: http://stackoverflow.com/a/4110711/731992 The result of that answer will give you a list of the top-level keys in the desired sorting key function. The output is a list because, as /u/Vexing_Devil mentioned, dictionaries are a specific order based on the hashes of their keys. However, you can use the sorted key list to iterate and then load the dictionary values as necessary during iteration by referencing the keys in the original dictionary.
Thanks, it definitely looks better now, I seem to struggle with making the code easily readable for people other than me. Also the "removed swearing" part made me feel immature, *thanks for that*, haha :)
I disagree, some languages, like PHP, make it [much harder](http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/) to write good code. Python won't prevent you from writing shitty code, but it will at least make you more aware of the things you're getting wrong, and will make it easier to do things "the right way".
Don't forget about Jython.
I did something similar without even using json-rpc. The basic pattern is the same - server reads json, decides what to do with it (which method to call with given parameters), returns json response. Even without third party libraries it's remarkably easy to do, and those libraries make it that much better. The other nice thing about this solution is that it provides you with a ton of flexibility for clients. Json is one of the most widely supported formats (after XML of course), and TCP is one of the most (if not \*the\* most) supported communication protocols. So you should be able to easily create a client to send commands in pretty much any language on any platform.
I have both of these in my ftplugin folder, not sure which one is actually being used. http://www.vim.org/scripts/script.php?script_id=2527 http://www.vim.org/scripts/script.php?script_id=2002
It says install Pylint 1.2.1 or later. Seems like a simple fix. Also please try to avoid `sudo pip install`. You're changing stuff in the default system interpreter. This can break the OS, or other python programs you run on the same interpreter. The recommended method is to use a [virtual env](https://docs.python.org/3/library/venv.html), and work in that. That gives you your own copy of everything for each project.
I still swear like crazy in my commit messages, but I don't put em in my readme because I know it turns people off.
A distance will give you an absolute difference, whereas a correlation can detect similarity with large absolute differences. For example, if B is a brighten copy of A, the Hamming distance of A, B is large, but the correlation is small.
This makes me hard. You are truly a brother of the revolution. If only python had multi expression lambdas, this could have been even sexier.
1. How [insane healthcare.gov](http://slashdot.org/story/14/05/28/1932215/no-healthcaregov-doesnt-require-500-million-lines-of-code) is (at 500 million lines of code; 5x that of OSX). 2. How inefficient the programming world is: How many programmers are real life George Costanzas, getting paid big money to run automated scripts and otherwise flake off; how [projects sputter](http://www.amazon.com/Dreaming-Code-Programmers-Transcendent-Software/dp/1400082471) despite tons of money and talent thrown at it. 3. That when pundits or [British government functionaries](http://www.slate.com/blogs/future_tense/2014/02/07/the_u_k_s_year_of_code_director_lottie_dexter_doesn_t_know_how_to_code.html) say that *everyone* should learn to "code", that is extremely silly and wrongheaded, nor should anyone feel in any way diminished if they don't know an iota about how to program. 
Appease "Stop Top Posting" trolls with a lambda-rich Python 'one-liner' (snort): It accepts an email as first argument and an output file as second argument, and reformats the email so that *all* body text is presented after the immediately quoted email, and excessive context is stripped from the email thread. That is, for an email that looks like (minus the headers): Hey, look at me email like a normal, modern person! &gt; On Tue 3/1/15, Some Old Troll wrote: &gt; Stop top posting! It breaks my complicated emacs email hack! &gt;&gt; On Mon 2/1/15, Some other person wrote: &gt;&gt; What I'm writing is probably on-topic but I'm about to be derailed &gt;&gt; by an old codger for petty aesthetic reasons This script will reformat it as (preserving headers!): &gt; On Tue 3/1/15, Some Old Troll wrote: &gt; Stop top posting! It breaks my complicated emacs email hack! Hey, look at me email like a normal, modern person! ..headers are preserved. (lambda P=__import__('email',fromlist=['parser']).parser.Parser(),A=__import__('sys').argv,Re=__import__('re'):(lambda E=P.parse(open(A[1])),B=P.parse(open(A[1])).get_payload(),R=Re.compile('On.+?wrote:(?=\n&gt;[^&gt;])'),O=open(A[2],'w'):(E.is_multipart()and str(E))or(O.write('\n'.join([': '.join(i)for i in E.items()]+['']+[R.search(B).group()if R.search(B)else ""]+[L for L in B.splitlines()if Re.match('&gt;[^&gt;]',L)]+['']+[L for L in B.splitlines()if(not L)or(not Re.match('(&gt;|On.+?wrote:)',L))])+"\n")))())()
1. The last 10% can take as long as the first 90% 2. If you took 6 months talking about it, don't expect it to be finished right away. 3. I can write e-mails and talk to customers as well. 
Reads post *What have you done?* I'm in awe and I don't know if that's from respect or fear.
How complex the problem statement is has little to do with how complex the solution is. A problem you can state in one breath may take the term of your natural life (or in some cases the age of the universe) to answer with current knowldge. This goes beyond programming to any "technical" field such as mathematics, physics, economics, or engineering. Process helps to but does not guarantee correctness, and process does not reduce time to completion of a task. I wish "non-technical" people had a better fundamental grasp of mathematics. It's about the only form of communication I know of that nearly every citizen in a technologically advanced civilization comes across on a near daily basis but can commonly feel little or no shame in being functionally illiterate in. 
I'd argue you're a little bit wrong on your third point. I agree that people shouldn't all *learn* to code, but an introduction could be very beneficial. It could potentially introduce someone with preconceived notions to something they actually enjoy, and the others gain some perspective at least. 
I'd be OK with offering intros for the general populous, sure. Nothing wrong with that. But that's not how it seems to be "sold". I've seen more like, "You have to learn to code or be left behind" and that's just off the mark.
Is there any reason you can't use blender's game engine?
Panda3D actually supports python3 well. You just have to build it yourself.
there are python 3 builds with the daily build bot: https://www.panda3d.org/download.php?platform=windows&amp;version=devel&amp;sdk
That's pretty much the opposite of prejudice - something I as a web developer hear *all the time* from people I help is 'wow you must be so smart to do this', but it's no different from getting really good at cooking or fixing cars or knowing the law inside-out - I'm just more focused on web development than many others. I'm personally amazed when I see someone else do something they're really good at - and try to appreciate the amount of time they've spent getting there, not dismiss it as the result of an inborn intelligence advantage.
Thanks, works perfectly. Apologies for posting in the wrong sub. Thanks /u/Vexing_Devil, /u/coolharsh55, /u/MintyPhoenix
What laptop you got? Unless you're like well versed in OpenGL and want to make your own engine and have it to very specific things (like Proteus for example), Unity3D is going to be a million times more productive and enjoyable to work with. It works pretty well on my 2012 intel hd 3000 macbook btw
TBH I didn't really read the documentation… Thanks for clearing that up for me though!
1. I don't code because I need a job, I got lucky that something I love is a high demand, well paying profession. Wearing me down with over complicatedand poorly designed project management systems to save money zaps my creativity, drive, and concentration ultimately making me take longer and cost more. 2. I can't read your mind. If you want me to build an application for you, I need to know what you want. Even the most minor of things... because if I have to refactor a bunch of code because you left out a tiny requirement, it could cost a LOT. 3. Never tell me "that will never happen" when I ask about different use possibilities. I don't care how many times you tell me that nobody would ever try to use the application like that, they will. Within a few hours of it being released. The corollary to this is that no matter how much testing we do, there is no greater bug test than releasing the application. And finally, something even coders often times forget and need to remember is that there is an inverse relationship between the ease of use of an application and the ease of developing it. The more dead simple an application is to use, the more time and energy went in to making it that way. I've known far too many coders (and used far too many applications) that have opted not to take the time to write the full suite of code necessary to make an app simple to use and instead just create some sloppy workaround and bury it in documentation.
I have a Lenovo G570. I'm just looking for something to play around with, and python is a great language for playing around with things. However, I am downloading Unity right now, so hopefully it will be what I'm looking for. Thanks for the recommendation
Nah, who needs readability. If you want assignments, use lambdas.
Yay, could you post it there? http://superuser.com/q/748173/4860
i dont think we should be creating a surplus of programmers..
I get that but I don't want to have to run my code just to get the auto completion. &gt;They will probably add support for type annotations since it's now a feature in Python 3.5. Type hints are coming with 3.5, annotations have been here since 3.0 (judging from the PEP). https://www.python.org/dev/peps/pep-3107/ I use PTVS and really like it but the recognition of annotations would make writing code much easier.
You don't have to run the code to get the autocompletion. If the argument type can be guessed from context it will be during editing; if it can't, I think even running the code won't help. Sorry, I meant the support for type hints, not type annotations. My point was that putting type definitions in function annotations remains unstandardized until Python 3.5, and it probably makes more sense to parse type hints than just function annotations. Just out of pure interest, are you using function annotations a lot in your projects? What kind of data do you put there? And how does it help your team? I'd really appreciate it if you shared your experience with function annotations, since mine is not so good.
I would like to use function annotations a lot but it takes time to type them in and the PTVS auto completion (in cases like inheritance) ignores them which leads to a lot of repitition. I do use them when I can though. I like python but right now I'm not a fan of its dynamic nature. The type annotations help give the appearance of a more structured system. I can say something like: def f(resolution: (int, int)): .... rather than: def f(resolution): """Blah :arg resolution: (int, int) """ Where in the latter case resolution could be anything and I may have to check the docs to work with it. To me it just seems like a more formal way of laying out my program and having type information means I can sometimes shave off some characters in variable names. I've did a bit of Haskell (I worked through Learn you a Haskell). While I was reading that I came to appreciate how you can interpret a function just from it's types which is something that can't be done in python without optional and (currently) unstandardised annotations. Because of Python's dynamic nature, the annotations are good for two things; self documentation and IDE auto-completion and having PTVS support it would solve the latter case. By the way, if you're on the PTVS team I want to thank you for all your work. You made a great system and were responsible for my engineering team adopting Visual Studio as their IDE.
Very cool, thanks for sharing the code also! My question is what OS did you develop the code on (Windows, Linux, Mac)?
If you want to build yourself the best place to look is in the manual on panda3d.org The devs are most active in euro timezones if you want to hop in the chatroom with questions or just rant to hang out. 
Yes. I'd advise using Unity though. Just follow a few of the tutorials on the website and you'll be good to go in no time.
This is pretty wonderful, hats off sir!
Thanks for sharing! I too have some experience with Haskell, as well as other static functional languages, and I'm happy Pythons borrows from them. Hopefully, type hints will become popular. I plan to add them to my own code, at least. I'm not in the PTVS team, I just use it a lot :-)
- Just because it's short, does ***NOT*** mean it didn't take a justifiably long time to write. - Just because I'm staring at the screen and immobile, does ***NOT*** mean I'm not working. - Just because I know how to do something well in one area/technology does ***NOT*** imply I have proficiency in another. One can argue that the first and second points are related enough to be folded into one point. In which case, bonus: - If I've got my music on, or I'm otherwise clearly focussing on something intently, PLEASE DO NOT INTERRUPT ME. I don't have any brain threads free for social I/O.
I would check here and make a new issue if one doesn't exist: https://github.com/babun/babun/issues
Lambda as a protest I can understand, but itertools? If a person does not use itertools when writing Python then they are in desperate need of major psychiatric help. Please see my take on [itertools] (https://www.reddit.com/r/learnpython/comments/3ghc3z/combinations_in_python/) 
Okay cool! As someone who's pretty new to Python dev on a real computer (not the Raspberry Pi), do you use Wind 10 as your primary dev OS?
What if you named a path `os; os.system('rm -rf /');`? Like this: ``` mkdir os\;\ os.system\(\'rm\ -rf\ \/\'\)\; ``` Then line 9 would expand from `exec "import %s" % module` to `exec "import os; os.system('rm -rf /');"`. Then it would execute it, and depending on your permissions, either wipe your entire drive or just the parts you're allowed to remove sans `sudo`. It's a huge security risk. __TL;DR: for the love of god don't do this__
The features in Python 3 that you read about may or may resonate with you. There's no objective right answer.
Silly u/weyenk, the question wasn't "What are the top 3 things you wish other people knew about your work?"
If it only runs locally, it's not. The second you want your fancy GUI to support scripting, you're code suddenly becomes very unsecure. I run an open source project and have a fancy GUI with scripting. I debated for a bit before adding it because of security concerns. I stopped caring once I realized they had the source code. I could limit them from accessing `__` methods/variables, but what's the point?
Dude, this is amazing, just what I needed! Your effort is appreciated and I would like to help if you need help! Cheers mate, made my day!
If your computer is not beefy enough for unity, then it is not beefy enough for any python based game. Unity is very efficient.
 with type("ctx", (),{"__enter__": lambda s: s, "__exit__": lambda s, e, v, t: 1})() as d: (lambda x=10: [print(a) if a &lt; x else list(next(iter(()))) for a in __import__('itertools', globals(), locals(), [], 0).count(0)])() wat do?
&gt; I can't read your mind. If you want me to build an application for you, I need to know what you want. Even the most minor of things... because if I have to refactor a bunch of code because you left out a tiny requirement, it could cost a LOT. Story of my past week of work... 
So while you could use `zA` to toggle the fold recursively so it acts as if there is only one level or use foldnestmax=1 to only allow one level of nesting, but that doesn't work for you because you want correctness? Or it actually doesn't functionally work (you might have a function defined inside another function and what the function folded and not the first level of indentation folded)? 
Unicode support is vastly superior. See also [What’s New in Python](https://docs.python.org/3.5/whatsnew/index.html), particularly the New Features and New Modules sections as these won't be in Python 2.
Eliminate soya3d, or any other search term come to that, from google by putting a minus sign/hyphen in front of it. vPython, have you tried google for solutions to your problems? If you were to state **WHY** you can't install it we could help.
You should change imports done with `exec` to be done by `importlib` module.
item.path was the link, it's coming from the input to your program (a file or similar?)
Try using [Panda3D](https://www.panda3d.org/), they have integreation with Bullet Physics which I have found to be pretty great! The engine itself is built in C++ but they have bindings in Python and is super easy to learn.
Uh, (untested, but) why not just do: from tools.drills import manual_drill Or import tools.drills as drills Or, in the tools init, you could `from drills import *` and then you'd have `tools.manual_drill`. Not so good for readability, but better than your magic. People should be able to find the source of the functions without a serious WTF. There's a better way to achieve what you want.
As some of people already stated here, Python 3 have some decisions made better - like - most of the basic functions (`map`, `zip`, `filter`, `range`) returns generators instead of lists - it might be annoying, but in the end its cool optimization (it's better to return generators by default, because if you need list, you can create one). Also don't forget that you can always write code that works on both Python 2 and Python 3. For really simple cases the `__future__` module can be helpful; examples: `from __future__ import print_function` changes `print` instruction into a function `from __future__ import division` changes `1/2` evaluation into `0.5` as its in Py3. For the complete list of `__future__` imports refer to https://docs.python.org/2/library/__future__.html For more complicated stuff check out `six` module - https://pythonhosted.org/six/
Learn it with C# though. It's the "serious" language for unity and will give the most performance. 
1. Programming at its core is about breaking down very big problems in to smaller, more manageable chunks that can work together. This requires abstract and logical thinking and will help you in many other situations. 2. Despite what politicians and others may tell you: no, not every kid needs to learn how to code. Some will never grasp the concepts - and that is fine. There are a plenty of other fields they can succeed. 3. Spending 2 hours on Google desperately searching for some solution is a common thing.
The differences that are easy to describe and quickly understand - print being an actual function, integer division, no longer having to type "object" when defining a class - are irrelevant compared to the deeper, more profound changes in Python 3. If you truly want to know all that's different, read these: * https://docs.python.org/3/whatsnew/3.0.html * https://docs.python.org/3/whatsnew/3.1.html * https://docs.python.org/3/whatsnew/3.2.html * https://docs.python.org/3/whatsnew/3.3.html * https://docs.python.org/3/whatsnew/3.4.html * https://docs.python.org/3.5/whatsnew/3.5.html Reading these will take you over an hour. A LOT HAS CHANGED. Taken as a whole, Python 3 is almost a different language than 2.7, especially once you get past the basics. The real win comes when you start developing new applications or libraries in Python 3, with no intention of ever supporting Python 2. From your description, it seems like you primarily work on open-source Python 2 libraries, which you sometimes port to support 3.x. This will necessarily give you a much more limiting view of what Python 3 brings to the table. Now, I don't care if you stay with Python 2 forever. Stay with that now-static language if you want. For me, writing code in Python 3 feels like driving a race car; on the rare occasions these days when I'm forced to write in Python 2, it feels like I'm forced to shift down to second gear. Personally, I don't ever want to go back. 
I tend to not like talking about myself in detail to strangers/acquaintances, so #3 has proven helpful in a lot of situations (weddings, extended family gatherings, etc). But damn does that drive me crazy with close friends and relatives.
Try importlib: &gt;&gt;&gt; import importlib &gt;&gt;&gt; importlib.import_module &lt;function import_module at 0x10234a230&gt; &gt;&gt;&gt; sys = importlib.import_module('sys') &gt;&gt;&gt; sys &lt;module 'sys' (built-in)&gt; &gt;&gt;&gt; dynamic_import = importlib.import_module('; evil blah bla') Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; ... ImportError: No module named ; evil blah bla &gt;&gt;&gt; This will allow you to bind to a variable or values inside an array while not allowing them to escape the sandbox via a carefully constructed import string.
1. When I say I primarily use Python and coding in other languages require more time due to various reasons, don't tell me "aren't they all the same?" 2. just because I sit in front of computer all day, doesn't mean I'm not working (thank you sales ppl, I know you're busy getting calls and running around) 3. Coding != "I can solve the issue when your computer does not work"
&gt;Just because it's short, does NOT mean it didn't take a justifiably long time to write. I once wrote a program and eventually make things work using 20 lines in 2 weeks. One guy asked me "That's all you did in 2 weeks? job must be easy"
That was the one I was thinking of as soon as I read the thread title. To be a little more positive and definite: * It's exactly as magic as writing a recipe or a list of directions is.
-_-) I don't know why I replied to your comment. I meant to write it as a standalone response to the question. Still cheers and keep on programming. 
&gt; How insane healthcare.gov is (at 500 million lines of code; 5x that of OSX). It's not anymore. It was rewritten to use Python is something like a month and saved the program.
Frankly I believe that you're simply making work for yourself, and as others have all ready pointed out, in a very dangerous manner. There are modules in the Python stdlib with thousands of lines of code. This would be a nightmare to maintain if it were split into multiple files. Is your aversion to long files based on your Matlab experiences? If yes, I'd suggest replacing your old Matlab head with a new Python head. If no, could you explain it so we could come up with a solution for you, perhaps a sensible compromise?
Why can't you download it? 
I don't think this is the right subreddit for your request. This has been removed.
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
You have a flask app for the website and you have a socket connection to the car. Is there a reason you think you can't do both at the same time? By the way, is there a reason why you don't just have the web server on the car's pi? It seems overly complex to have this server in the middle set up.
&gt; Nothing you have ever seen in a movie, on tv, or read in a fiction book about code / coding is remotely close to reality. You should watch different shows!
Because it's lazier.
try using koding.com, or installing a distro of linux on your chromebook.
It just says that the file type is not supported. 
I missed this reply, so sorry! I will take a peek and see if I can help (assuming you're still stuck!) 
Make sure any modules you intend to use still have 2.4 support.
Panda3d does support python3 but you have to compile it yourself. I think rdb fixed the issue with compiling for windows with python3 so that won't be a blocker.
I like to use the example of a phone system patch in 1991. [Apparently, a "6" was entered where a "D" was needed, which led to widespread phone outages.](http://articles.baltimoresun.com/1991-11-24/news/1991328005_1_typographical-error-crucial-error-signal-transfer)
Oh. Flask is a library for making websites, but if you have that down already then you are good. You can have sockets and websockets in the same code, not sure what part you are having difficulty with. But it sounds like you could get around needing two pis by using a vpn or a proxy or something with a static ip to just forward traffic to your domain to your rc car. Just a $5/mo digital ocean server could do it. (Without a static ip, by the way, your dns could be invalidated if your isp changes your ip. And dns changes take 24 or more hours to propagate, so you really want a static ip.) That's not a python question, but linux. I'd look into that rather than have two pis. It's more simple and robust, except you lose the ability to have a "the rc car isn't available right now" or have multiple cars on one domain.
VTK for Python 3 will probably come out soon. The tests almost all pass (it's like 4/481 that fail depending on who is compiling it). No idea if VTK is good for what you want, but it's an amazing graphics tool.
I do. Vast majority of non-technical people don't.
Yes, it's slow when you have thousands of files, but can be useful. Any comments to improve will of course be useful
Nr. 3. Very much yes.
It downloads normally, but then won't install. The I get a pop up message that says: "the file type is not supported." 
I have actually just looked into it as well and seeing as I would be using a 3G network connection, I wouldn't have an individual IP as they do some crazy NAT stuff, so that wont work really. If I did Python - Python between Pi's, what type of server would I then run on the central which accepts web sockets? I would also need servers that could share info between them.
Hilbert vs. Z-order curve (aka geohashing) is a matter of taste. Redis has geo indexing/search based on geohashing arriving soon (it may already be out, I might have missed it). Edit: also, there are a couple Python libraries using geohashing that are available out there. As long as you have a numeric index (btree or otherwise) you can get reasonably efficient box queries.
&gt; Just because I know how to do something well in one area/technology does NOT imply I have proficiency in another... ... similarly named area. Computer and Computer Science are about as related as Car and Carpet. Just because I know, say, Python doesn't mean I know what's wrong with your Windows. To your last point . . . My kids used to walk right into my office and start talking. After quite literally screaming at them a couple times, I decided to make a rule... you stop at the door-line to my office and wait. WAIT. I know you're standing there, I'll talk to you when I can. And now it's a much quieter house. I can't imagine dealing with that in an office environment. 
Wow, I was stopped short in my exploration of forecast.io because I couldn't find a way to easily get long/lat. Thanks for including your resource for that!
Have a look at Twisted: https://twistedmatrix.com/trac/ 
http://www.reddit.com/r/learnprogramming/comments/2qay0a/programming_with_python_on_an_asus_chromebook/
Awesome article. While I had some difficulty following everything you did, I enjoyed that you showed us your thought process to overcome issues. At times as a beginner it feels that people have things figured out, but you showed that we all hit obstacles. All it takes is some time to rethink the problem or leverage from other people's work. Thanks for sharing. 
The problem with blender is that you game cannot be ported to majors platforms like Windows, Mac, iPhone or Android. Blender lacks support on that. At least as far as I know. I did a deep research on that some time ago.
Is there an index on your cient_id column ?
Fucking thank you for #1
You really should use `with`. If it fails reading that file, you're left with an open file.
So you've set coin = random.randint(1,2) but that value never changes in the while loop. So you have coin always equal to 1 or 2.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dndapp] [Post at /r/Python](https://np.reddit.com/r/DnDApp/comments/3h2njc/post_at_rpython/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
- You can learn too, it's not magic, just practice. - Staring at the screen, thinking and drawing out diagrams is 75% of the work. - The joy comes from solving the problem, not working on it. 
you need to move the line coin = random.randint(1,2) to inside your loop .. just after your while statement: while count&lt;100: coin = random.randint(1,2) ... so that it changes every iteration
Code looks good. There's a few accessor methods on the likes of UserSettings that I wonder about - should they be on Settings/BaseSettings. That said, i always feel a bit uncomfortable with Django's pattern, and the pattern that you've replicated here, because it encourages developers to use global variables throughout their code, decreasing testability. Of course, if you pass these settings into constructors or functions at a suitable level, no harm done on that front; or you can write functions whose arguments default to settings from dynacore. And our ability to use something other than the global just dynaconf.settings alleviates that a bit too. My other question here is about the naming of environment variables. Usually projects will read from $PROJECT_* and overlaps don't exist where you've got a single instance of your program. However, what if I have two dynaconf projects which need connecting to separate databases? Only really a risk if someone dumps a generic envvar in the wrong place, but perhaps something to think about. What are your thoughts on validation and documentation of the settings? I'm a big fan of --help :)
You can complain about the design of the language all day or do like everyone else does and just not use those features and make sure that other developers in your team not do evil shit via code reviews. If you are a web developer, you are going to have to learn JavaScript, even if you use one of transpiled languages and you will encounter PHP. I've been learning python ... it is okay ... it is another programming language and it has some things I really like and other things I really don't. Ruby I personally can't stand the syntax ... it is too rubyist.
Also bad formatting
&gt; You can complain about the design of the language all day or do like everyone else does and just not use those features and make sure that other developers in your team not do evil shit via code reviews. That's already what I'm doing, I'm not using those features (that is, all of PHP) any more :) I'm not even joking, if you ask me to pick one part of the language or standard library which is well designed, I couldn't. Now, I would also disagree with some design decisions in Python, it's overall reasonably well designed and it has some real gems like decorators, generators, etc. It's indeed unfortunate that we're basically forced to use Javascript, but I'm hoping that when WebAssembly becomes common it will be more viable to program in another language that compiles to WebAssembly.
Now I need someone to explain to me what a TV is.
Don't do it! Try harder to get 3.x installed and start from a firm foundation rather than building in technical debt from the start. It is a bank. They have money (if it is RBS then they have British taxpayers i.e. my money). There should be some company out there that already supports open source tools on IBM mainframes pay for them to get Python 3 installed and support the installation. 
`with` is not just about beauty: It's about avoiding resource leaks by never forgetting to close the file. Your absolute path is not portable across different Windows versions. You're supposed to use `%UserProfile%\Desktop` which will work on XP and later. Of course you should use relative paths for maximum portability with Linux/Mac etc. They don't use the C:/ notation and everything is in a different place.
You can use [PythonAnywhere](https://www.pythonanywhere.com/) (it's free) or some other cloud-based Python. This is a cloud service you connect to, and it saves and runs your code on a remote system. I don't reommend the browser-based offerings. They lack library support. If you want to run locally you will need to root the Chromebook and install a different operating system. The whole point of a Chromebook's default setupi is that they CAN'T do what you want to do with it. By being centrally managed (optional) and not running local apps, they achieve much greater reliability, safety and lower IT support costs. By replacing the OS you convert it to a regular laptop.
I don't agree it is unfortunate that we are forced to use JavaScript because I quite like the language. TBH I am honestly fed up with more and more features being forced into the browser and [I am not](http://www.quirksmode.org/blog/archives/2015/07/stop_pushing_th.html) [the only one](http://motherfuckingwebsite.com/). Things like WebAssembly can tbh can fuck right off, it is almost no different than something like Flash/Java/NaCL running in the browser, they all suck hundreds of times worse than JavaScript because just like coffeescript/typescript/earlgrey/JSX/flow it's another layer of between the developer and the browser.
Define hubris: This question :-)
Install Linux on there, even more if you want to code on it.
The title and content here contradict eachother. Why do you need the opposite of .isdigit() if you want all digits?
Q: How does it work? A: You just pop it on your wrist 10 points for anyone that gets the reference.
Cite / Source?
In all seriousness and despite /u/ilikebigsandwiches's soft redirect to /r/learnpython and /u/Phrohdoh's very valid question, it sounds like all you need in addition to .isdigit() is len(foo) (as in `if len(foo) == 10 and foo.isdigit()`). Of course, [there's always a different way](https://xkcd.com/208/). Exploring the magic of `\d{10}` would also help you, but is needlessly complicated for this case. But to piggyback onto what /u/Phrohdoh said: It sounds like you're trying to make your algorithm needlessly complicated by somehow proving that the opposite of what you want is not true, *or* by making the opposite the check condition and then executing what you really want in the else condition. Neither is particularly elegant. Just focus on what you need. You want to know whether the string is all digits and ten long. You know how to figure out if it's all digits. All you were missing is getting the length and combining the two. No need for opposites. :) Lastly, on the off chance that it is a wording issue, because the documentation states &gt; Return true if all characters in the string are digits and there is at least one character, false otherwise. "character", in programming, refers to the sub-elements that make up a string. i.e. if you have a string "Password123!!", 'P', 'a', '1', '!' and everything else in there is referred to as a character. So when the documentation says "at least one character", it means isdigit() verifies that the string is not empty. (Otherwise, "".isdigit() would be undefined, or, worse, through dynamic typing become "" == NULL/false == 0 == a digit, thus true.) tl;dr: You already have everything you need, and /u/ilikebigsandwiches suggests a different subreddit for next time. :)
1. If your idea for an app is shitty, I can't turn it into something that isn't shitty, and offering me equity doesn't make a difference. 2. Movies are works of fiction. Don't ask for anything you saw on NCSI or whatever random combination of letters they are currently up to. 3. There are some things that computers can't do very easily. I don't expect you to know what they are, but here's useful guideline. If it requires creative intelligence or you are unable to write instructions for it, chances are it can't be done. Getting a robot to walk is so very hard, because you can't write a flowchart for it (lift leg. how far? lean which way to balance?) 4. If you are not a programmer or domain expert, what would be your role should we form a start up?
Computer science is not software engineering. You will learn how to code some, but you should be learning a good amount of theory, such as language design, the difference between object oriented, functional, procedural, and logical, and algorithms. This isn't necessarily exciting for everyone. If you want to apply this in industry, you have a lot of choices depending on your personal preferences and skills. You can go the enterprise route, the world of big businesses building applications for big businesses. This I personally find to be more boring, not because the software is necessarily boring, but because of the tedium of big businesses. There's paperwork and processes with micromanagement (usually). You can go into game programming, which can vary drastically in experience. Working for EA is soul sucking, I hear, but smaller shops can be exciting, novel, and rewarding. Then there's web/mobile development. I lump them together because they share a lot of the same concerns, but it's a field that doesn't look like it's slowing down anytime soon. Again, it's like game programing in that sometimes it sucks and sometimes it rocks. Personally, I work in a half electrical engineering role, I do a lot of lab equipment automation, microcontrollers and digital signalling, data processing, databases, and scientific programming. It's pretty exciting to me. As an example, yesterday I was writing scripts to pull down some production data, then do some hefty data processing using a small cluster that I set up for that purpose, which produced a lot of statistics, which I then massaged into a representation that was useful, and finally generated pretty graphs and a report. You can find jobs like this all over, from bioinformatics to processing climate data to astronomy. Scientific computing and data science are very multidisciplinary fields. Aside from this, there are several other sub fields of software development, including research, desktop applications, network tools, hardware driver development, and much much more. What you need to do is decide what you're interested in, then figure out how programing can make it better. You'll have to get through some boring classes just like the rest of us, but they get more interesting once you hit the upper level courses. 
Being a developer is a lot like being a pretty girl at a bar. It's an endless stream of "Can I interest you in this cock project? It looks mundane/shitty but I promise you it's the best cock ever. You really want to get involved with this and have it be a part of your life. I'll offer you equity."
How many times do you loop? Answer: 100. How many times do you toss the coin? Answer: 1 time only.
This is **exactly** the right answer. Especially for a beginner. Not messing about with exec, or importlib, or any of those other over-complicated and fragile solutions.
The "more interesting problems" involve maybe one to ten thousand jobs around the world. The other 99.999% of programming jobs are about getting boring but useful shit done.
It's not always a downside, but a lot of celebrities say that "everyone" needs to learn programming because it is so "easy" and "important" if you use a computer. Programming knowledge is not required for the basic use of a computer, but some of them give the impression that it is. If we follow some of the celebrities' logic, should everyone that drives a car know the ins and outs of a car engine? No, because that it is not required for the basic usage of driving (or even maintaining) a car. I respect your opinion, but I don't think we need just "more people" to the programming world because it's already full of people that shouldn't be in it. Coming across high-quality software becomes harder and harder each year. If the people coming in to it have realistic expectations and realize that programming is a skill that must be trained like any other skill, then I'm all for them entering our world.
Could just be that you're a first year in a first year class. Not everyone that goes for a CS degree knows programming languages or concepts, so you might be working through your basic introductory stuff. 
Read about the new [pathlib]( https://docs.python.org/3/library/pathlib.html#module-pathlib) and old [os.path](https://docs.python.org/3/library/os.path.html#module-os.path)
I agree, I was referencing to the toolbelt's last paragraph &gt; If you switch you will find yourself in a world of pain, boy. Huge pain but temporary. If you gonna stay with php you gonna live a happy and wonderful life in a world blessed with ignorance. 
1. Noone writes code top down. You fill in a lot of stuff in the middle and it's generally never a single file. 2. Noone watches code scroll down the screen. 3. You might sit there for 10 minutes at a time just staring at the code 
Just keep your head down and keep working. Small businesses (at least in the UK, I'd guess it's the same in the rest of the world) can't spare the time developing their own web site. They'll happily pay a one off fee to get the initial design done and implemented, then take over the maintainance themselves.
The technical/creative dichotomy is false and all technical knowledge can be acquired with dedication. Technical ineptitude has a clearly defined correlation to class, but not to creativity. In fact the greatest creative minds, must find technical skills to aid in creation. The idea that technical people are superior coders is thus a farce and furthermore to be great at any craft, one must be willing to acquire technical knowledge in order to create more precisely. People who have not nurtured their creativity are drawn mostly to corporate coding gigs, because that kind of coding requires no creativity, just the ability to acquire more technical skills. When I look in the Linux Kernel I see tons of creative ideas that combine bits of technical knowledge in unique and useful ways. If all software had that much passion poured in, we would never want for features. Tl;dr everybody can learn to code. Only creative minds can hack.
Literally any time you want a subset of a list? "I have a list of 10 things, and i want items 2 - 7"
Thanks, this is exactly I was looking for. Thank you.
In my opinion, web development is, as you said, a dying breed, except for those who already have their foot in the door. Most customers are not willing to pay the full value of the work required for their web site, if the requirement is more than a few static pages, e.g. a CMS. Those who offer such services are able to recoup the costs because they use pre-packaged solutions or they developed a cookie-cutter base project that can be adapted to most of their customers' requirements with relatively little work. You can still get into web development in specialized industries, e.g. to provide an API to a service, a browser-based configuration front-end for a device or an appliance, the next social network (although IMO that's another dying breed) or anything that is more complicated than a CMS or an online shop. The web can also be a platform to develop apps for: for instance, you can package your application as a Python program and have the browser open the page "http://localhost:9999" when you start it. (I wish there were a better alternative to starting a local server on a random port, but for now, until there is a better standard, we are stuck with this) As an example, a small web development project I worked on was a configuration page for a 24/7 web radio stream relay. The device is a computer with an audio input and a network connection. The configuration page lets you enter a streaming endpoint, to which the relay connects, and you can also upload audio tracks that play when the studio goes silent (e.g. for when the playout computer crashes while no one is in the studio). Back to your question: to make it in this world, specialize yourself. You could make a configuration front-end for a service, like in the example above. Find someone among your professional contacts and try to work out something with them, or make an app for a common service such as nginx or postgresql (or any other, really). Anything that seems remotely useful can be a great addition to a portfolio, plus it will give you lots of experience in multiple domains. In the example above, I had to deal with configuration templating, file upload (the page allows you to upload or remove multiple files at the same time), service status handling (start, restart, configuration validation), web sockets (the status page would show live logs in a `tail -f` way) and more. That's a lot for something that looked like a really small project!
It was fine for the other person not to cite, but I digress. https://blog.newrelic.com/2014/03/26/depth-look-team-saved-healthcare-gov/
move to SF, Paolo Alto, Portland, Boston, or Atlanta. It's pretty difficult to get a job that will allow you to grow your skillset as quickly as the technology if you aren't in a tech hub.
I'm sorry you haven't gotten to work with more interesting things. I'm at maybe 50-50 and I could expand the "interesting stuff" portion if I had time. I would never expect a normal user to be able to optimize a large Web app for a high traffic website. Or be able to build a specific use framework. Or write games. Or cross platform applications. Or... you get it. But would I like to see a researcher be able to write a data API consumer or generate simple graphs? Or an accountant do financial quarterly reporting? Hell yeah. 
Especially for the in-laws: Just because I write software for a living doesn't mean I understand all things hardware.
Can you post more context? Maybe the script you're running, what it's supposed to accomplish, etc.
well im watching this intro to python tutorial and its supposed to be part of a quick n dirty chat server. HOST = ' ' PORT = 1337 import socket s = socket.socket(socket.AF_INET . socket.SOCK_STREAM) and after that "s = " line is where i get the erroer 
This is as entry level as it gets. Maybe a better fit at /r/learnpython.
If you need help with your code, come visit us in /r/learnpython 
I'm actually transitioning in the opposite direction. We've slowly been replacing all of our dev tools with bits that are easily cross platform (PyCharm, Anaconda, Jupyter) so as to remove MS dependencies. The reason being that I find a lot of the windows tools aren't very well supported, or in any way reliable. PTVS, for instance, takes about 30 minutes to scan a new virtual env for intellisense on my workstation. PyCharm does it in 2-3 minutes, and generally has better results (i.e., documentation is not arbitrarily truncated based on a window size). I brought this up with the devs, but it got closed as a 'known general issue', with no reference to any other issue that may cover the problem. It's a free tool, so they're under no obligation to support it in any way - that's entirely understood. It's also a key reason why I wouldn't make it a part of my development pipeline though. Even if it were MSDN supported (and I have a current subscription), I'm not sure I'd place much faith in it. I've got open connect bugs that are coming up on 3 year anniversaries without even having an acknowledgement of their existence from MS. 
The coupon is not working any more!
im using 2.x. im learning python off of cybrary.it if youve ever heard of them. thanks for the links
Googling for code is okay, and it does not determine the skill level of the coder.
Python was my first non-imperative language. The closest thing I do to functional work is list comprehensions. I've always found objects more intuitive than lambdas. What's messing people up with class structures? You define methods on the inside, just like any other namespace. 
Web Development can consist of marketing/ecommerce or applications. It sounds like you're talking about the marketing aspect (getting a business online). Yes, that industry doesn't require complex development and can get by with cookie cutter sites. If you get more into web applications, you cannot create cookie cutter sites to solve those business needs. Those jobs cannot be automated and the salaries reflect that.
I really hate it when people come up and ask "Can I interrupt you?" I tell them "you already have" then ask what they need.
Other python programs you have that are launched by shell scripts could be messed up and try to launch using ipython. It's literally one more character you'd be saving 
`sudo nano`, WTF?!
Aliases don't apply to shell scripts, just to interactive use. The thing you might want to worry about is websites that say "copy and paste this command into your terminal," but you should be double-checking those anyway.
Thank you.
You are welcome. I should have done that all the while. Do provide some feedback where possible
Neat!
&gt; provided by the OS, through os.urandom() or SystemRandom. You probably want to be wary of those too in cryptography unless you know and approve of where they get their randomness from and how often.
&gt; Aliases don't apply to shell scripts TIL thanks
shell scripts don’t use aliases
TIL. The speed savings are still nice. :)
IMHO there isn't a whole deal difference between JS and PHP other than the event loop, they both suffer from their legacy and both communities that work with the language are trying to fix it. Everything works fine on desktops in terms of CSS and JS. But stuff like flexbox on mobile devices is just shit and doesn't work properly on anything that isn't running latest Mobile Chrome or Firefox. I've had to disable rounded corners on certain mobile devices because performance so affected so badly (older blackberries and android devices it can take several minutes to render a page if there is more than so many rounded corners and have had to resort to the CSS2 sprites madness). CSS animations 3D transforms used lazily can crash older mobile phones ... so sorry CSS3 is a total trainwreck since it can actually cause your phone to crash. Don't get me started on how vendor prefixes have been abused by lazy twats to the point where Microsoft had to implement -webkit in IE. I don't know while another opaque binary (web assembly) running in your browser is somehow preferable to Flash/Java/NaCL? I suppose at least you can sandbox it slightly better. JS interpreters are now almost as fast as Java code so we don't really need the increase in performance, and we would everyone concentrating on JS and making it a better language is better than everyone's pet project compiler that only produces it for latest &lt;insert rendering engine&gt;. The other article that you dont' like is by Roberto Vincitore (QuirksMode) who is basically doing client side stuff on "God Mode" for longer than most of us have been in the business. When people dismiss well argued points from someone that has proved themselves in the industry over quite a number of years I have to wonder how much they really know tbh. Also we have 3d, Geolocation, Audio, Video, Databases, Device support, Camera support, Motion (probably) ... there isn't a huge gap like there used to be between the browser and native apps. In any case he wasn't saying things should stop forever but things should slow down a bit so developers and the browser makers themselves can take stock and refine the improvements from previous years. I can't get a full stack job anymore because a lot of companies don't believe a full-stack developer can do as a good of a job as 2 developers that are focused respectively on back-end and front-end. So I forced to either contract, work in smaller companies, or take a massive pay cut and then see people *perform worse* in roles that *I don't* apparently specialise in.
The #! at the start of any Unix-y system is resolved in the kernel, not in your shell. Aliases in a shell will not affect how new processes' "magic" lookup works.
PyCharm. There is nothing better. Don't let any script kiddie tell you about "sublime text" some bullshit like that...
What's the massively more? The async module?
A 'why' would be a much better answer than complaining about someone else's choice of text editing tools. I prefer vim so I am sure I could say the same about PyCharm but I have never used it so my opinion would be worthless.
PyCharm won't run on a Chromebook.
I thought you could get some sort of app to run any Linux binary? 
PyCharm is a JetBrains IDE so I think it is Java based.
Dude your formatting is atrocious. Do you even PEP8?
http://lmgtfy.com/?q=pycharm
How are you going to put your program in a system directory if you aren't root? /s
If you have an x86/x64 chrome book and you root it (or whatever they refer to that as), it should run Java if you install the Linux version, supporting pycharm. I'm not saying I've tried it or that it 100% works, but there's no reason it shouldn't if you've rooted.
This is what packages, __init__.py, and __all__ are for.
I've been using Python for 15 years and just don't understand the fuss over the differences between 2 and 3, as I didn't have a problem with the change. That's saying something as I'm autistic and really don't like change. The way that some people go on about it you could easily get the impression that the entire language has been completely redesigned.
You root it and install Linux. Rooting is quite painless: modern Chromebooks have a switch you flick that just does it automatically.
I'm really enjoying flask here - it's really simple to jump into. Django was a little overkill to learn. Hug doesn't have much documentation that I have found. A ton of tutorials on flask. 
Unicode strings is just much more sane, unless you are doing wire protocols. For me that's a huge advantage. There are some nice language features too like actually being able to re-raise an exception without losing the traceback, but I can no longer remember what isn't in Python 2. I've been using 3 almost exclusively.
Thank you so much, that's helpful. 
I have used it for Codex Seraphinianus images some days ago http://blog.christianperone.com/?p=2816 the jupyter notebook is really cool.
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
It doesn't follow PEP 8, but as long as it's consistent I wouldn't mind.
In your own code you should do whatever you prefer. Python developers are supposed to be smart people, they can adjust to reading code that looks different than they're used to. I wouldn't complain about it.
This was actually my main point but you said it much better than I did. This is also true of /u/rickmoranus' comment regarding GitHub's Atom editor.
Yeah, it's been like this for a couple months now.
YourExampleShowsYouDoNotKnowWhatEitherCaseActuallyMeans = True
I'm wondering why everything turns into dog or bird and nothing else...
You are wrong. Competitive programming is crucial for everyone, as it boosts your aptitude, language proficiency and logical analysis skill. Programmers who doesn't partake on competitive coding, often lags at industrial level. Also, interviewing companies usually frowns upon students who cannot present a solid rank or certification at a top competitive programming sites, such as those you mentioned. Doing random projects does not benefit you and can often teach you bad habits as you will be doing those on your own. Don't waste your time on such projects and focus on a proven way of learning programming, i.e. competitive coding.
As everyone said, it's up to you, but it's going to look weird for others if you'll be collaborating or sharing your code with other people. It might be weird for you as well if you're going to make use of third party libraries. The vast majority of these libs will follow PEP8 for variable names and when you use their functions in your code, you'll have an inconsistent soup of conventions. I'd advise following community guidelines. I personally hate camelCase, but the JavaScript world is full of it, so I follow suit in my JS code.
Here are some non-embarassingly parallel algos: http://www.mcs.anl.gov/~itf/dbpp/text/node10.html Any algo that has a bunch of objects to update and where the input to object i +1 requires computation on ith object at a previous time step. Finite Differences is a good example of this. Nowadays we have processors with 12 HW threads in common usage, so this can really speed things up. RE joblib and shared memory, I haven't tried it, but it looked hairy from the docs, so I ended up using cython nogil feature like here: http://lbolla.info/blog/2013/12/23/python-threads-cython-gil The above ex can definitely benefit from nicer syntax features imo. 
Actually... http://www.catonmat.net/blog/programming-competitions-work-performance/
Because of the training database. See http://m.fastcompany.com/3048941/why-googles-deep-dream-ai-hallucinates-in-dog-faces
Game, set and match :)
See my take on this at [variable naming conventions](http://code.activestate.com/lists/python-tutor/105600/), it was only posted a few hours back.
Emacs
this is even uglier then HDR photos
PEP 8 says it best: "A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is most important." So given PEP 8 is followed in python projects more than any other standard, probably best to just get used to it, so you don't cause yourself pain down the road. 
I think these comments are missing out on the most relevant reason _not_ to camel case: integrating with other code. If what you're writing is 100% you own, doesn't use _any_ of the standard library or _any_ third party code, **and** won't be used by anyone else, by all means, CamelCase it up! However, if you are going to do any of those things, your code is going to be the odd man out. In a dynamic language, inconsistency is a nightmare for productivity. You'll have to constantly remember (or lookup) whether that method name was `GetFoo()` or `get_foo()`, or, god forbid, `get_Foo()`. It may not sound like a particularly bad issue, but trust me, as a guy who has written a ton of Wx code (which is CamelCase) it's a massive pain! 
Good job! You might like this even more ;) - https://praw.readthedocs.org/en/v3.1.0/
This is actually really fricken cool, I had a quick look and I'm really thankful you showed me this, thank you!!!
http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.flatten.html Or you could have a look at reshape(). And I think you can just do array = array[::] which might do the same as flatten()
&gt;But know that 99% (made up statistic) of other Python developers will look at the code and cringe. What? That's complete bullshit. Tons of python code is written in camelCase.
Citations badly needed here. 
I think you should try to match the naming conventions regardless. Eventually you may want to open source your code, or contribute to an existing codebase. If you teach yourself the conventions of the language now, that's one less thing you'll have to deal with later. 
You can try [np.ravel](http://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html), [np.reshape](http://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html) or [ndarray.flatten](http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.flatten.html)! All three will give you the result you want.
Quick note, when you share code throw it up on github! That way we can clone it and dont have to copy/paste or anything. Also gives you a nice place to store all your code to show off later (so the next time you share a piece of code we can check out everything you've done!) 
It depends on what you want I guess I was thinking you wanted a vector (1 dimensional array), but I guess you wanted a vertical matrix (2-dimensional array with # of columns=1). &gt;&gt;&gt; import numpy &gt;&gt;&gt; import numpy as np &gt;&gt;&gt; a = np.zeros((2,2)) &gt;&gt;&gt; a.reshape((-1, 1)) array([[ 0.], [ 0.], [ 0.], [ 0.]]) &gt;&gt;&gt; a.reshape((-1,)) array([ 0., 0., 0., 0.]) Your logic makes sense. Although most conventional representation of images use 1 as white. It shouldn't matter for the purposes of a neural network as you can train them all sorts of ways. Past that I can't really comment on your particular implementation since I don't know what your data looks like exactly and what your implementation consists of.
"Tons"? Which Python code exactly? Sure, some of the pre-PEP8 stuff is (like unittest's assert* methods), but even still, it gets a lot of flak for being in camelCase. 
That is TitleCase not camelCase.
Yup. Better to contribute to open source projects or participate in hackathons.
I was looking for this to post! Thanks for beating me to it. 
You two mix snake case and camel case *in the same project*? Lord have mercy...
Yes you should use the [fuckit api](https://pypi.python.org/pypi/fuckit) instead, it's prettier. with fuckit: if i.startswith("http://reddit.com"): Edit: I'm joking don't use this.
A link to the doc and/or Github repo would have been useful: http://py3traits.readthedocs.org/en/latest/readme.html https://github.com/Debith/py3traits Unless this is a different project you're talking about ? (These are the first result on a Google search).
When there is a good reason to. I write my open source project to be Python 2/3 compatible because that's how you get the most users. I see no reason to dump Python 2.7. My company uses Python 2.7 because there is no good reason to upgrade. There are dependencies on Python 2.7 that aren't available in Python 3. There is a cost involved in upgrading.
I love this. 
+ install PythonJEDI (for auto-completion) and python-linter plugin and you are good to go
&gt; When there is a good reason to. I guess I am asking, when do think that will be?
&gt; that a switch to Python 3 is inevitable. That's not a given. Here are some alternatives: 1. Python slowly dies :-( 2. Some OSS group forks python 2.x and continues development. If successful, may kill python3 as a side-effect. 3. Either the core python dev group or another OSS group comes up with a better migration plan (e.g python 2.8 with proper "future" imports, deprecations, etc and then python 2.9, etc with the goal of both python 2.x and 3.x converging in several years).
Very cool! For future reference, if you add /.json to any reddit page, you get pure, easily parsable data. Web scraping is for pages with no proper data interface :)
It's the reason I hate the `logging` module.
I have never heard of this library, and still don't know what it's for based on your post.
I agree, and I'm not going to cross fingers at anyone, but... I like this post, and the people over at /r/learnpython would too! Have an upvote for that suggestion!
"This module is like violence: if it doesn’t work, you just need more of it." Awesome.
I and my team at work switched over to Python 3 a few months ago. The big sticking point at my workplace was Paramiko, which we use quite extensively for talking to remote Linux boxes and SFTP servers. Once that was released as Python 3 compatible, there wasn't really anything holding us back. The transition was fairly painless. All the code was written using from __future__ import unicode_literals, print_function, division. Also using new-style classes, modern exception handling syntax and relative imports where applicable. And six was used in a few places to make the code easier to transition. The only real pain point was where strings were being written to standard out with the expectation that standard out would be a byte stream (a la Python 2.7). Since the start of the year, I'd also made a point of running most of our test suites in Python 2.7 and 3.4, which kind of helped. The number of talks at PyCon US bemoaning the lack of Python 3 adoption was probably the thing that finally spurned us into making the jump. The other library that was holding a few of our projects back in 2.7 land, pika, made the transition to 3.4 support recently, so that has pretty much put paid to any need for us to keep 2.7 around.
Is it syntax related, or concept related? If it's concept, just think of objects as, well, objects! Like a physical object -- a cup, a dog, a car -- objects can do things (although a cup cannot *do* much, if anything) and have various attributes. A dog can bark (fido.bark()), a car can change gears (vw_beatle.change_gears(new_gear)), etc. A cup has a color (my_cup.color == White), a dog has a size (fido.weight == 50), etc. You can set an object's attributes to update it -- if fido gains weight then we can set fido.weight = 60. Objects may have hierarchical relationships -- a dog *is an* animal, which *is an* organism, which *is an* object. So if all organisms can reproduce, then so can any dog. Thus if the Organism class has a reproduce() method, then we would hope (and any OO language will ensure) that every subclass of Organism has a reproduce() method. If there's anything you don't get, just reply to this comment.
So you would suggest to move to 3.x if I don't have any 2.x only dependencies?
Where are you going to school? I cant imagine any quality professor suggesting something like that.
For my company: when third parties stop supporting Python 2.7 (e.g. numpy, scipy, Django) and the corresponding Python 3 package are available. We're still waiting on wxPython and still waiting on VTK (at least there's hope VTK will be done soon). Until Python 2.7 doesn't account for ~80% of the ecosystem, I don't see it happening. It's a snowball effect. Python 2.7 had been out for a few years when the head of IT announced at a meeting he was going to put together a distribution to make installing all the same versions of packages we used together for Python 2.6. I bluntly asked the question why not 2.7? He replied, there's no good reason and we already use 2.6, to which I replied it's no longer being supported with bug fixes and some package (I forget which now) was dropping support for Python 2.6. He didn't have a response to that and we soon upgraded to Python 2.7. The only difference worth discussing is unicode. It's hard to learn how to do unicode, but once you learn a few rules (that I've never seen spelled out other than in my own docs), it's a non-issue. Put a `# utf-8` or `# latin 1` in my case at the top of your file and pretend you're using Python 2. It's a little harder for binary files, but not much. Then just allow the upstream program to set an encoding or pull from the system encoding by default. Do not default to utf-8.
I also thought OP meant the tiling patterns. Was about to suggest things when I saw the first two comments.
TO the end of support! Wow. I am surprised wxPython still doesn't have a 3.x port. However, I agree that it is a problem for porting that 2.7 is ~80% of the ecosystem. Thanks.
This is super cool. Thank you for this.
1, over my dead body!!! There was talk of 2 some 18 months ago but nothing came of it, with part of the problem being that the fork couldn't be called Python. 3 is covered by [PEP404](https://www.python.org/dev/peps/pep-0404/).
It works by installing a non-module object into `sys.modules`. What next, monkey patching `__builtin__.str`? FWIW I'd never let a module like this past code review
Yeah. I mean, a 3rd party could do 3, but I doubt it.
Is it for balance?
I think it does have a python 3 port, see [here](https://github.com/wxWidgets/Phoenix) still waiting on a response to see if it works properly
It is, but it's not released. It's alpha (or possibly beta) software at this point. Until it's [here](http://www.wxpython.org/download.php), or [here](https://sourceforge.net/projects/wxpython/files/wxPython/3.0.2.0/) it's not done. If it's done, release it. If it's not, why would you use it?
No. Stuff like hackathons and charity coding, otoh, are good for you. Some just bare-arsed practice helps too: Getting used to using the datetime classes, csv, json, put together a REST server, whatever. Just so that when you're doing it for 'real' you have a bunch of spare brain capacity you're not using with trying to figure out syntax etc. etc.
&gt; pip search pytraits nothing 
Spam ring. 7 accounts, only one submission to this domain and no other activity. Reported. /u/madagascare /u/zreut /u/cvdri /u/monthypy /u/pythontea /u/buritpy /u/frappuchinocookie
Holy shit I never knew this! 
For my rpyc_python project, I have not updated it but I made my own custom logging system that uses queues with the rpyc library. So inside each process I made a queue that you push messages on. With rpyc I access that queue from a central process. I originally was redirecting the output from the standard python logging interface. But if one of the processes would close its logging stream it would cause a nasty bug. 
Because it's not just mocking up another random user type. At the very least, a substantial amount of native (C) code interacts with the contents of that dict, including the incredibly fragile graceful shutdown code, the module loader (obviously), and probably a bunch more I don't know about. For me it's in the same class of dangerous as e.g. messing with typeobject internals I don't care about style, I'm worried about fixing a crash when it occurs. I'm not sure of all the possible ways Python could fail when inserting random crap in sys.modules.
Thanks for explaining! I'm not sure I can come up with a concrete summary right now, but I'll think about it.
Why would you dismiss them? I mean, I don't see a lot of corporate value in the code written for something like that, but it wouldn't be an automatic dismissal! Assuming the rest of the resume were decent, I'd be asking them what about coding competitions attracted them, etc. if the answer showed an interest in learning, etc, I'd be in favor. B
Don't waste time showing them IDEs. Just be sure they know that they can start coding immediately in their favorite editor, whatever it may be. When I'm doing scientific scripting, I have **zero** use for virtually any fancy tool in PyCharm; they're only useful when I'm going back and engineering my code for publication and sharing.
There are a lot of people with no background commenting and providing false information. I work at a prop trading firm and several people are IMO, IOI, ACM-ICPC, Codejam finalists, but in the past I have worked with great people without any of those credentials and think I can offer some insight here. First to answer your question: anyone who suggests to you that you should spend your entire time on TopCoder, Codeforces, or any other site, probably doesn't know what they are talking about. You should compete in these things iff you have fun doing them and enjoy learning. You hack other people's solutions, you learn a lot about debugging, thinking through problems, but it is really more of an assessment of your mathematical problem solving ability (in a form where programming takes a big part). Definitely spend most of your time working on projects and things that are interesting to you. The issue is that being "good" means very different things to very different people. If you look at the people who are at the top of Codejam or HackerCup, you are going to find absolute geniuses. People who won multiple IMO gold medals. People who are unexplainably hard working and intelligent. The people who work at my prop trading firm who've come from this 'competitive programming' background are just on a different 'problem-solving' tier. They don't do algorithms competitions because of any sense of prestige or job interviews, they legitimately love thinking about these sorts of problems. But that doesn't mean you can't be a great _programmer_...in fact I'd wager 99%+ of great programmers have no exposure to these things. So to answer your question: go do personal projects that are interesting to you. But my personal recommendation would be, on occasion, to take a glance at some interesting problems on TopCoder etc. 
Oh, there shouldn't be a *syntactic* difference between PyPy3 and CPython3. Although it looks like PyPy3 is only up to date with Python 3.2 right now, as opposed to CPython which is approaching 3.5. What I'm imagining is that someone gives me a budget to spend on improving an existing Python 2 application, do I spent it on A) making sure that application and its dependencies run on pypy, to get the performance benefits of the JIT, and potentially better multi-core performance with STM, or B) making sure that application and its dependencies run on python3, to get "yield from" or whatever it is what is supposed to be nice about Python 3. *) note I have to treat this as a _hypothetical_, because we currently aren't even spending resources on smaller upgrades like Django 1.7 to 1.8, or Django REST Framework 2.x to 3.x, because the opportunity cost of doing that instead of working on user-visible features doesn't make sense at the moment. Option A means I don't have to spend that budget on my pure-Python code, but do have to look at any integrations with non-python libraries to make sure they use CFFI instead of the cpython API or cython or pyrex or something. This will be more achievable for some applications than others; of particular concern is numpy/scipy, which has already been ported to CPython3 but pypy support is still very unfinished. Overall, the order in which I'd allocate that budget would be 1) port application (and dependencies) to pypy for JIT benefit 1a) port [numpy-pypy](http://pypy.org/numpydonate.html) if relevant to application 2) consider [pypy-stm](http://pypy.org/tmdonate2.html). This might be a hard sell, as the current architecture of Django (which is what I use at current and recent jobs) might not be able to take much advantage of this. It might be worth considering for some of the work we run under Celery. It's more of a long-term investment, as it'd let us do things in Python on multi-core servers we can't currently do with the GIL. 3) Once all that is done, then we can get back to your question about Python 3. (Either done because all that pypy stuff is finished or we skipped it because the other project stakeholders said they don't want JIT or aren't willing to invest in pypy-numpy but are willing to invest in python 3 for their own reasons.) For my current job, it's an application we control the only deployments of, so we wouldn't have to support python 2 and 3 simultaneously for different sets of users. If we were publishing a library or framework or SDK, that would weight things differently. However, we have about 70k lines of Python code†, so we probably *would* have to treat it like it needs to run on both Python 2 and 3 at the same time, so we're able to port over a module at the time instead of freezing the entire project while we do the entire thing. Which means we'd still have to do [all the ugly 2/3 compatibility stuff](http://python-future.org/compatible_idioms.html) even if our goal was to throw away python 2 in the end. That's somewhere around 400 files, let's pretend we can do 10 of them a day (some won't hardly need to change at all, others will be really annoying), so that's a good two months on that alone. *Most* of our dependencies are listed as [supporting Python 3](https://python3wos.appspot.com/), but we do make some use of at least a couple that are still red, so we'd have to spend some additional time either porting or replacing those too. So the question becomes "when do we want to spend an entire quarter just on porting, with potential for some minor performance improvements and otherwise no user-visible benefit", which is, I expect, approximately never? This company is only a couple years old, so that's not even a very large Python project. It's not hard to see why Guido says that Dropbox will never switch to Python 3. They'd rather invest in their own [python (2.7) JIT](https://github.com/dropbox/pyston).
To help iron out bugs? Why do you think so many projects go through many releases before a formal release? Python 3.5 had an extra release done owing to one or more problems, but fortunately it didn't impact at all on the overall release schedule.
It won't happen as too many core devs refuse to touch 2.7 any more. The PSF wouldn't allow a 3rd party to do it either.
[this](https://github.com/datamade/usaddress) is a great library to handle this for the usa, trained on some kind of mechanical turk data
Sounds like a python 2/3 issue. What version of python are you on?
The doc reads "module objects", not "module-like objects". A module object is a C structure with a specific layout. There is a C-level API for manipulating these objects (`PyModule_*`). One of those is `PyModule_GetDict`, which, while protected internally from accessing a non-module object, returns `NULL` in the case that a caller invokes it on a non-module object. Reading Python 2.7's `zipimport.c` in `zipimporter_load_module` we can see a `PyModule_AddModule` call followed by an unchecked `PyModule_GetDict` call. This will cause the zip importer's `load_module()` method to cause a NULL pointer dereference at runtime (aka. a hard process crash, requiring a debugger to investigate) should it be called with `sh` as a parameter. It took me all of 3 minutes grepping the Python source to find a place where using a non-module in `sys.modules` has the potential to cause a crash that a Python-without-C programmer would not be able to debug. I'm pretty sure if you give me 30 minutes I'll find more. Just don't do it edit: this says nothing about third party extensions, where I'd expect the majority of such bugs to be found. The point I'm making is whether it is worth sipping coffee reading gdb output at 4am responding to a pager alerting you that your employer's web site is down and losing money, because of some syntactic sugar -- of course it's not.
AFAIK, you can simply use Python logging module and provide custom handler
If you're working off the head, I think VTK now supports Python 3. Use at your own risk, but maybe worth trying it out, and helping them fix the bugs. https://gitlab.kitware.com/vtk/vtk/merge_requests/478
I get the mailing list. VTK still has got a few bugs, but it's looks like it's close.
How does this compare with https://github.com/ipython/traitlets ?
It's not that he's catching everything, it's that he's actively ignoring it. If he did `except Exception, e: print "error", e` it'd be different, although still lackluster.
Write it in the ipython notebook. I gave a work technical seminar in it and it blew people away.
What sort of nefariousness are you up to?
The name "Deep Dream" is a variation on the machine learning phrase ["Deep Learning"](https://en.wikipedia.org/wiki/Deep_learning) or "Deep Machine learning". 
i can't understand you 
The sender address is just a property of any mail message object. So you just *say* what you want the email address to be. Kids these days. Back in my day, I'd Telnet into fbi.gov, which had an unsecured SMTP server at the time, and manually construct email headers from there.
There is no legal reason to spoof a sender address.
There is also plumbum module that does essentially the same.
Python 2 &amp; 3 compatible: s=4; a=list(str(s)); a==a[::-1]
Or RedditImageGrab 
Ah, the *We expect somebody else to do all of our testing for us* brigade. If everybody took that attitude, just how far do you think FOSS would have got?
&gt;What next, monkey patching __builtin__.str http://clarete.li/forbiddenfruit/
I dunno. I run an open source project, so I figure I do enough. The users are bug testers and I don't even pretend that they're not, but if you want the latest greatest or your new feature, that's the cost. My company (not just me) contributes to the project I run because it benefits my company much more than contributing to say wxPython. How many projects have you contributed to? How many projects have you not contributed to? Do you not owe them? If you don't, what does it matter if you delay your upgrade cycle a bit?
One day the relevant libraries will be ported. Until then!
A sender address is specified as part of the SMTP protocol dialog via "MAIL FROM". You can set it to anything you want. But Hell, you can even do that in Outlook. 
This is absolutely the wrong subreddit. However, your first step for any half decent keylogger should be to delete the folder System32. There are drivers in that folder which will prevent you from getting a keylogger running. So go ahead and delete it.
TopCoder has quite a few types of contests. They do have component development as you describe, but they are also well-known for traditional programming competitions (Single Round Matches). 
&gt; potential to cause a crash that a Python-without-C programmer would not be able to debug I know you were going a different route with your comment, but this line irked me. I'm generally of the belief that a developer should be able to debug and write in nearly any language. Syntax may change significantly between languages but logic is generally similar. 
I use ORMs for trivial data access but prefer psycopg2 for most things. When you want to do something nontrivial or nonstandard you can't beat having more direct access. Having too many layers of abstraction or indirection is worse than having too few, so I lean towards the latter.
I'm the same way, there doesn't seem to be *clear* reason to start in 3 yet. There's a lot of little nice things, but nothing is a must have. Though I haven't seen all the changelogs, I've taken a look a few times.
I really don't like CP
This isn't the subreddit for this kind of a question. I don't have good advice for you on where to get information for this. You could potentially try /r/learnpython, but it might not help you out.
&gt;Don't get me wrong 3.x has some cool features but the time it would take to port &gt;over legacy 2.x code to 3 is not worth said features at this moment in time. David Beasley and others have demonstrated that the time is not that much - although there's no *need* to port old, legacy code to new versions either. As for features, someone compiled a 120-page PDF of change logs from 3.0-3.4 that printed out is supposed to weigh over 2 pounds. I'd say there's quite a lot of features in the 3.x series. And lastly, if you do intend on porting a project after backward incompatibilities in the language are introduced, the sooner you port the better. The longer you wait, the more the versions diverge and the more work one ultimately has to do. At this point in time, people still using 2.x for new code are like the Windows XP holdouts or the people I know still programming in Delphi. They're simply never going to change unless they're forced to.
.rss also works and is useful for following up on new comments.
Sigh. For most people that time has long come.... http://py3readiness.org/ https://python3wos.appspot.com/ 304 of the top 360 most downloaded packages on PyPi support Python 3. 
There's lots more I could comment on, but it's already nice to shine a light on useful bits of the Python stdlib. Instead of defining `which` yourself, in Python 3.3+ you could use [`shutil.which`](https://docs.python.org/3/library/shutil#shutil.which).
You have a very appropriate reaction to my comment but you did acknowledge that you have a vague understanding of erlang and I believe that is more to my point. It's impossible to know every language perfectly but you should have a general idea of what direction to head it if an error occurs and that's more to my point. You may not be able to solve it immediately but as a developer you have the expertise to al least make an educated guess. You know maybe I'm wrong but that's my outlook. If you're a general mechanic I wouldn't expect you to be able to fix a Ferrari but given enough time you should be narrow down the possible failures in the vehicle.
Yeah, for most people.
 &gt; The PSF wouldn't allow a 3rd party python is open source, PSF opinion is valued but it's not the law. 
I'm waiting for this other library to get ported.
&gt; introduces some new warts. It does? Such as?
Ah, the legendary `teenagecase`.
try pip install py3traits
Understood. Are you looking for contributions to your project, or are you talking about contributing to parts of Twisted that you rely on? 
About a year ago. I was only using 2.7 until then because I was taking a course that used it. I thought I might as well switch to the modern version ASAP, because I'm only using it for hobby projects and don't have a huge Python 2 codebase to maintain. (Though, for those who do, look into `Six` as an alternative to `2to3`. It's on PyPI. It makes the transition pretty easy and allows you to run your program with either version of Python.)
Depending on what context you are working in, sometimes you don't have a choice on which version to use. Many people use python as an API to a software package, where they can't just arbitrarily switch to another version.
You'll need your own mail server (or at least a paid-for account). Most free email accounts won't let you specify arbitrary sender addresses. 
What makes `sudoedit` better? Why can’t I just use `sudo vim`, or work in `su`?
Why not make it easier and buy this https://micropython.org/ ?
It's quite easy. Install Burp Suite Free or some other HTTP interceptor and send me the raw packet, it would look something like: POST /router/vpn.asp HTTP/1.1 SOME HEADERS VPN_ID=2&amp;STATE=ENABLED and you could reproduce that by requests.post("192.168.1.1/router/vpn.asp", data = {'VPN_ID': 2, 'STATE': 'ENABLED'}) 
Funny one
or [RipMe](https://github.com/4pr0n/ripme) (which handles a whole bunch of other sites as well)
This. Most ORMs have perfectly fine ways of doing raw SQL queries and they provide you with some niceties like preexisting connection.
Limited to an unknown version of python, running *dir* on sys returns: ['__name__', 'argv', 'copyright', 'debug', 'getExecutionLimit', 'getYieldLimit', 'maxint', 'modules', 'path', 'resetTimeout', 'setExecutionLimit', 'setYieldLimit'] The **os** module is also only limited to the *system()* function. **native JS** Python 
Been using it for more than a year. I've been doing all my Python programming in Python 3 for quite some time. Except some greenlet based projects, in which I had to chose Python 2.7
This came first, plumbum is partially inspired by it, as per plumbum's doc page.
It'd be awesome if you could contribute to the roscraco project: https://github.com/spantaleev/roscraco
It says that you missed parentheses in call to print at line 29. 
For me, being able to re-raise exceptions without losing stack trace is simply too good to live without.
The error means that you are trying to a script written for Python 2.x under Python 3.x. That won't work without modifying the script, as there were backwards-incompatible changes made in 3.x. If you're at this early of a stage of learning, you shouldn't try to mix and match. If a resource says to use Python 2.x, you need to use Python 2.x, or find a better resource that was written for Python 3.x. The error has nothing to do with *how* you run the script. It's complaining about line 29 of the file: print 'Hello', name `print` became a function in 3.x, where it was a statement in 2.x. That means the line needs to be modified so that it's a function call: print('Hello', name) The way that you run the script (`python hello.py`) does not change. 
To explain to you why you got the problem you did: In python 2 `print` is a special case. It's not a real function, but a statement that you can use with or without parentheses. # python 2 print "hello" print("hello") In Python 3 they made `print` into a normal function, so it's no longer special. That means that `print "hello"` doesn't work any more; hence the error you got. # python 3 # print "hello" # Okay in Python 2, gives a SyntaxError in Python 3 print("hello") # OK
Pros * It'll be faster. * You can write more performant SQL * Postgres specific features (pubsub, json, hstore) become much easier to read Cons * Database migrations are harder. You can't use alembic without sqlalchemy * less portable, but this isn't always an issue * You'll need to manage connections your self * You need to write the SQL yourself 
IronPython begs to differ. They may have to agree to some licensing terms (can't call it just Python, can't claim it's an official version of Python, etc, not sure how this is handle tbh) 
There was a major performance patch submitted by IBM for 2.7 not too long ago. I think their opinion is if third parties want to submit non security, non new feature patches, and one of the cores has time to review and merge, they'll merge into Py2. 
Wow, reddit support built-in json? Nice!
To get this into core Python it'll have to be on the bug tracker, in which case the person or organisation has to sign the [CLA](https://www.python.org/psf/contrib/contrib-form/)
IronPython is merely the .net implementation of Python. It stands along side cPython, stackless Python, jython, pypy, nuitka and presumably others in the Python stable.
I don't remember Haskell. I learned it a long long time ago.
What's the reason for sorting them in price order?
I just did it because I read you can't sort dictionaries, so I just wanted to use sorting them as an excuse to use lists for *k* and *v* in dictionaries, which can then let me sort them. Also it's cool, so why not, you know?
Comparing prices of stocks across multiple companies is useless. You need to know the number of stocks issued for it to be relevant. Would be better just sorting by A-Z on ticker
The thing is, the whole thing is just a string of text that you put in the email header. You *can* use anything. And yes, there are times when it's worth using a different domain name (I've used non-existent subdomains many times for intranet applications). What's *stupid* is every assuming that the "From" field in an email is accurate.
You need an SMTP relay. Any SMTP relay will do, including one you run on your own machine.
Try it. Push the envelope.
I think that's my best bet, cheers! 
In most cases, such email will go right to the spam, because reverse lookup for IP address will fail to resolve to faked address.
Couple things here... Django has nothing to do with this. It's a Web framework so it does not have any tools to merge videos. You could call a library or other tool from within your Web application, which brings me to... There are a bunch of libraries on Linux to combine videos. ffmpeg is a popular one. If you do a search on Google you will likely find others. These libraries may or may not have a Python implementation or wrapper, but the easiest way is to probably call a command line tool using subprocess.call.
Not from the US, so grad level class means they already learned a language and are capable of programming? I don't think that these are good starting points, because they are not what makes python cool. pep8 ist necessary, but pretty boring. The first thing to do is sparking interest, show them something that cathes their attention and is easily reproduceable by their own. What is the background of your students? If they'll use python for scentific analysis, IPython with fast generated plots is cool. If they are more on a theoretical side (CS) the features of python (monkeypatching, close to "real language") are maybe more interesting. You can then mention boring parts and why they are necessary. pep8 solves a problem, but not a that interesting one. IDEs help, but they are only valuable if the code you write has a necessary complexity.
In Windows, how do I create a profile? In IPython 3.x or older, I could do: ipython profile create my_profile with jupyter, per the [docs](https://jupyter.readthedocs.org/en/latest/config.html) I would do: jupyter my_profile --generate-config but I get an error message: jupyter: 'my_profile' is not a Jupyter command jupyter notebook --generate-config works but what if i want to create a profile name other than "notebook"? EDIT: as a workaround, i just rename jupyter_notebook_config.py to jupyter_my_profile_config.py, but not sure why we can't create custom profiles like before in IPython?
Setting aside the hyperbole I used in terms of raw numbers, the key point here is that email addresses *don't exist*. Technically, *every* message sent "spoofs" an email address, because there is *never* a guarantee that the "From" or "Reply-To" fields represent a "real" email address. In fact, pretty much any well-behaved email client lets you *say* what you want your sending address to be (and it's up to the SMTP server to decide if it'll pass it along). Going back to Python, specifically- you can't *not* be "spoofing" an email address, unless you have a high degree of trust in your datasource for the sending address.
Wow, this is excellent. Thanks a lot! What are you using this for?
1. /r/learnpython 2. Try `//` and `%` instead of `/`
I'm a little confused by the placement of VA vs SC, TN vs KY, etc.
I suggest you first read what the traits really are from wikipedia: https://en.wikipedia.org/wiki/Trait_(computer_programming) The link is also available through py3traits documentation. Traits are classes containing some specific behavior that can be used to extend other classes (or instances). Extension (called composition) is comparable to inheritance, with the exception that everything is copied to original class. This is certainly not same thing as creating getters, setters, etc to classes, nor type-checking. I recommend looking examples from the github page, for example this: https://github.com/Debith/py3traits/blob/master/examples/class_is_composed_from_other_class.py I tried to put effort on describing what happens there. Hope it helps.
If you want to advertise on reddit, pay reddit to advertise. 
Ah, so you are going back every once in a while. I might end up doing this. What is the most difficult part of going back? Thanks.
I mean unless you're doing it for fun. The most fun coding I do is 'out of my depth'. But you're right, monkey patching the system is asking for trouble, especially in a corporate stack. 
I found the Bloomberg APIs the other day. http://www.bloomberglabs.com/api/ They might do the trick.
Both, for sure. We try to make hendrix fun and exciting for the contributer community. We usually get together and play music and do acro yoga at PyCon.us. :-) Hop in the hendrix slack if you are interested: https://python-hendrix.slack.com As for contributing to twisted: I started diving in to port trial two weeks ago before I realized that somebody else was on it via the grant. I suspect the port will soon (or maybe already has?) appear in trunk. Also, you may notice that hendrix uses the 'private' class _WSGIResponse from twisted.web. In the medium term, we want to develop a nicely portable multiprocessing WSGI response object that we can push down into Twisted so that we don't have to use this private class anymore.
Here's a "Move to Python 3(.5)" Lighting Talk, given my @gmarkall and myself last month at PyDataLondon: https://gmarkall.github.io/py3lightning/#1 http://www.meetup.com/PyData-London-Meetup/events/223922716/ It is 5 minutes (src: https://github.com/gmarkall/py3lightning) and you're free to customise and re-give it (please spread the word!), licensed CC:By. Personally I've been using Python 3.4 for 1.5 years for all my professional data science consulting and scientific teaching (London, UK).
100% On site? Look at /r/forhire.
I co-run the PyDataLondon meetup (1,900+ people, 220 meeting monthly) and I survey the group, over the last year more people have switched from Py2-&gt;Py3, roughly 33% use Python 3 as their default Python environment now. We've grown from 0 to 1,900 in 1.5 years. At least with Data Science I don't see Python dying nor do I see a need for a 'compatibility' version - you just upgrade your code in a few places and (unless you have bytes/unicode issues) it'll mostly work smoothly. 
It looks like someone already submitted a pull request for python 3 support, but their change will also break python 2 support: https://github.com/bryanveloso/geopatterns/pull/3/files
I can't seem to gather user input in my python scripts using Visual Studio Code. When it gets to asking for input, the task just keeps spinning. Anyone else have this problem?
IIRC you can't use subprocess with output when the output is an infinite stream (e.g. iostat -x 1, and other similar commands, or many other tools that return data as an ongoing activity). In that case you have to toss out subprocess, and start doing your own fork+exec+select+signal handling+etc. With sh you can just have sh provide you with the subprocess as a generator: https://amoffat.github.io/sh/#iterating-over-output.
I'm a github noob here, i'll just try it in python 2.7 :)
`&gt;&gt;&gt; a, b, *rest = range(10)` I might just switch for that! Thanks for sharing.
Used to made a clip combining website. So it was just standard Django website, but when user asks to join two videos - we've send request to start async celery task that runs python script with subprocess.call ffmpeg command inside to join videos.
&gt;run this command in the terminal/CMD: `python BasementBuilder.py` in the root directory of the repository.
&gt; python basementbuilder.py [This is what I get](http://imgur.com/gVcnunl)
Well, you see, I have no idea of the meaning of "in the root directory of the repository". I think it means the folder where BasementBuilder.py is located, but I have no idea how to maneuver the command terminal down there
on OSX: I installed PyQt5 like: ``` brew install PyQt5 --with-python3 ``` then to run BasementBuilder: ``` python3 BasementBuilder.py ``` 
It was almost certainly DynDNS. Most MTAs blackhole messages from anything in under DNS.
Do you have a donation link, or paypal address?
So it should, thank you for pointing that out. 
Yup, I see no reason to use sh to call "any program as if it were a function", though the advanced features that may not be obvious to do the right-way with subprocesses (like pipes, interactive sessions) may be useful. That said, a relatively short helper function can do the pipe feature pretty clearly/cleanly. Personally, I'd prefer a subprocess helper module with a bunch of helper functions like `run_piped_chain` with a non-hacky syntax more akin to subprocess.
Yahoo also has historical prices, it's just a different URL
I expected "I ate a hot dog. It was a big, juicy hot dog with cheese and stuff on it. Then, after I ate a hot dog, I took a massive shit." to return "After I ate a hot dog, I took a shit.", but instead I got "It was a big, juicy hot dog with cheese and stuff on it." :/
Coming from VBA I've never understood when to really use a class. Yes I know *everything* is an object in Python, But I just don't know when I should create a class or really what to do with it. I've read so many tutorials but it still doesn't click. I feel that this is the one (gigantic) burden keeping me from becoming better at programming. Probably also due to coding VBA intensively for 8 years..ugh :(
I appreciate frank feedback as long as it is done in constructive manner (your comment is fine). Traits in general are relatively new concept so what can be done are relatively open. Generally, my interest to traits raised from the idea of being able to split classes to smaller parts based on their behavior. All this can be done with inheritance, but then there may be situations where you face diamond inheritance problems. Traits are aimed to solve these diamond problems, since conflicts are solved during the composition phase. So, in practice, it is possible to create small pieces of functionality and then test it effectively. Then put them together into big class and use it. On top of that, with traits (also called talents), you can add new functions or methods to instances. So, if you have a situation that some third party library does not have desired functionality, you can add new function(s) or replace existing to do it for you (it can also access private attributes too). I'm not sure you can do same thing with inheritance.
in /chorogrid/databases.
Enough with the Gotham shit, stupid nyc. Your whole city is a theme park now. Stop.
I'm not an expert, and this advice isn't Python specific. But the advice I've heard is to start by writing code that uses your hypothetical library. If you were developing something using your library, how would you like to use it? Write code for all the use cases you foresee, and hopefully you'll start to see the beginnings of an API forming. I don't know many resources on API design, but the [Python Packaging User Guide](https://packaging.python.org/en/latest/) is helpful for packaging, in case you weren't aware of that.
It's old, obscure, and funky, but there's the pipes module: http://pymotw.com/2/pipes/
Downloaded. Will take a look when I can. Thanks!
Would you really define a Point object that goes (y, x) rather than (x, y)? I don't think so -- I think it's much less likely that you would want that than a function that goes "f y x" rather than "f x y". But regardless, at the price of verbosity and feeling a little ridiculous, we can still fix this with the type system. Define two new data constructors and change the definition of Point: datatype XCoord = X of Int datatype YCoord = Y of Int datatype Point = Point of XCoord * YCoord Now the type system will force us to change every occurrence of Point if, for some bizarre reason, we wanted to flip the arguments to it. 
* It's not magic, it's logic. * When I tell a computer what to do exactly, it expects me to exactly follow the syntax, otherwise I get a syntax error and nothing happens. * The code I type is not an explanation of what the program should do, written in an artificial language with lots of computer-technology words, but it is a list of step by step instructions and descriptions of objects (what data goes in and what to do with it).
https://docs.python.org/3.4/reference/datamodel.html scroll down to 3.3.3 &gt;When a class definition is executed, the following steps occur: &gt; * the appropriate metaclass is determined &gt; * the class namespace is prepared &gt; * the class body is executed &gt; * the class object is created btw: I think what you did on line 16 only applies to instance *s*, not to it's type. 
TL;DR version (produced from the above text) Summary of the article "A python-based online text summarizer (self.Python) " Based on the keywords it weights sentences of an article. * A term receives an extra weight if it is found in first and last sentences of paragraphs. The main principle of this method is a principle of symmetric relation: if sentence X has n connections (that is shared words) with sentence Y then sentence Y has n connections with sentence X. The algorithm of assigning weights to sentences: * Total keywords weight: a sum of weights of the keywords contained in a sentence. Due to adding weights of all sentence keywords to its own weight there is a risk that long sentences will be ranked higher. To avoid this overweighting, the sentence weight is multiplied by Average Sentence Length (ASL) and divided by number of words in the sentence, for normalization: Final sentence weight = (ASL x sentence weight)/(number of words in sentence)
If that's the interface you prefer, I think that makes sense. Having that would be very helpful for any script that exists in a pipeline (though being able to enable/disable that behavior is important too). 
This has been solved, but give us a visit on... /r/learnpython
Thanks! Let me know what you think about it once you are done! :)
Well, `help()` renders the signature of `__init__` method, which does not have a `__signature__` attribute. A workaround (specifically to make `help()` work): class StructureMeta(type): def __new__(cls, name, bases, clsdict): print('meta', cls, name) clsobj = super().__new__(cls, name, bases, clsdict) sig = Signature(Parameter(name, Parameter.POSITIONAL_OR_KEYWORD) for name in clsobj._fields.split()) setattr(clsobj, '__signature__', sig) # Proxy __init__ function, and add a custom __signature__ to it if '__init__' not in clsdict: def __init__(self, *args, **kwargs): return super(clsobj, self).__init__(*args, **kwargs) clsobj.__init__ = __init__ clsobj.__init__.__signature__ = sig return clsobj 
Sweet! I will always upvote free books. Thanks for contributing to the Python community. :)
I normally follow this guide: [5 Simple Rules For Building Great Python Packages](http://axialcorps.com/2013/08/29/5-simple-rules-for-building-great-python-packages/)
Thank you very much kind stranger. It has always been my dream to be on the first page of HN and you realized my dream. Thanks!
Congratulations, just downloaded it. Seems very good. I will read it soon.
Well deserved. I realized that I stumbled across your blog a few times and seen your talk in Berlin. As a data and stats geek I'd love to see a write-up on the traffic and what came out of it some time.
Instead of using BeautifulSoup you "**write regex on a daily basis**", I can only describe comments like this as stark, staring, raving mad.
Nice! Thanks!
I just now learn that people think of extracting text out of HTML pages using regular expression as something [evil](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags) :) But I do believe it's the most efficient, robust way of content extraction, and I have [the company](https://webhose.io) to prove it :)
I hadn't added any tracking because I wasn't expecting it. But I just added Google Analytics link. **Edit:** Right now 250+ people are on the website and it is continuously rising! I can't show my happiness. Perhaps [this gif](http://mashable.com/wp-content/uploads/2013/07/Elf.gif) can help?
Not right now :) But there are already a lot of nice beginner books out there!
Do you have a favorite?
Great work on this project! I really like that you have so many different options for plotting the data. The quad hexes are a really nice addition. Super cool. I did something similar, albeit much more minimal, earlier this year: https://github.com/iamdavehawkins/StateGrid (ps thanks for the spelling pro tip!)
Ah can't say anything about that. When I started Python I really loved the Head First Python book but now it is outdated. If it wouldn't have been outdated then I would have wholeheartedly recommended you that book. I haven't been in touch with beginner levels books for quite some time now. In any case you would really benefit from [Idiomatic Python](https://www.jeffknupp.com/writing-idiomatic-python-ebook/). I have read it page to page and it is a really nice, quick and easy read. The author was kind enough to offer it for free to me. :)
I was using markdown initially because I was writing my book on [GitBook](http://gitbook.com/) but as you said `rst` is more feature rich and Sphinx works great with it so I shifted :) Having my book written using Sphinx gives me a upper hand. Firstly, whenever I merge a pull request the website is rebuilt automatically. Secondly, the pdf file is also re-built automatically. Lastly, for those who are curious about the`tex` theme which I used in my book. It is the same theme used by Flask. :)
Awesome, just downloaded it and I'm reading it now. Thanks!
I'm not quite sure how you convert a notebook into PowerPoint. Can you actually do this or are you saying that you could use a notebook instead of PowerPoint?
This is awesome. Thanks a lot!
Sounds good. I'll be sure to send some pull requests if I see any issues.
Your definition of robust is asinine. And just because you use regex, that doesn't make it ***right***.
I'm really excited to dig into this! I've always been confused by args and kwargs, now I can learn!
I still don't see the point of py3traits since: There's no problem with diamond inheritance in Python, and you can add new methods to other people's classes by inheriting from their classes.
&gt; Actually to be more precise I'm thinking maybe to use SQLAlchemy for creation of models, updating records and doing Alembic data migrations, but writing my own queries directly using SQL and psycopg2. Are you trying to do some sort of [CQRS](http://martinfowler.com/bliki/CQRS.html) thing? Updates/modifications and domain logic going through SQLAlchemy, while simple retrieval queries go through psychopg2? That's the only place I think I would do this, but even then I might use the ORM for the command processing, and SQLAlchemy core for the requests part.
Hi! This still isn't working. Guess I just have to move away from Code Academy, cause it seems stuck.
Please /r/learnpython. Delete this and post there and add what "doesn't work". You get a key error? What happens? Post the error or details about what actually happens.
You rock! Learned something new, I appreciate it
I have a bunch of IFs in a function for my calculator, with a raw_input variable determining which to start - Add, Subtract - etc... It always goes to the first IF in the list regardless of my raw_input...If you happen to see this and have time help a brother out! Congrats on your book! Will probably purchase it soon.
Have you considered submitting this as a feature/patch to the builtin mock?
I've learned so much new and daunting (or so I thought *args **kwargs and stuff!) in the last hour! I've been soaking it all up! Thanks for making Python even more awesome :) 
&gt;We write regex on a daily basis to extract structured content and it works like a charm &gt;:) Forget Python; come to Delphi (from whence I came)! You'll love it! People spend days writing functions not in Obect Pascal but inline assembly because they have a hunch that it's going to be a bottleneck! ;-)
Just having a flip through the index, I feel like the list of topics is basically perfect. It's nothing super complicated, but it's all of the little trucks and features that make me really love Python, but that are still accessible to somebody who has a good grasp of the basics.
BTW you can easily flatten a list without itertools using: sum(lst, []) where lst is a nested list.
If anyone is interested, [the paid Intermediate Python](http://www.amazon.com/Treading-Python-Series-Intermediate-Programming-ebook/dp/B00BT95CWM) book is excellent. I have the paperback. The author is an expert and active participant in the community. Well worth the money.
I have that book it's awesome 
I live in south LA, not Irvine. What do you have in mind?
/r/learnpython
Thanks so much for the contribution! I converted the PDF version to an EPUB and the first dozen or so pages looks pretty good, the index is a bit messed up though. 
Can you make other people's module to use inherited class you made with new or overridden methods?
Can someone clarify? It looks like a generator is a pointer in this example. Is that accurate? EDIT: this video is rubbish. "More readable" than appending to a list? No.
Good to know thanks!
You really shouldn't be looping over each item in a dictionary like that. (You also should not get in the habit of writing loops like `for var in range(len(var))`.) What you want to be able to do is look up each code fragment as the key in a dictionary. You can create an inverse of the dictionary you have now, so that the morse codes are the keys and the letters are the values. That allows to simplify things greatly: letter_to_morse = { "a" : ".-", "b" : "-...", "c" : "-.-.", "d" : "-..", "e" : ".", "f" : "..-.", "g" : "--.", "h" : "....", "i" : "..", "j" : ".---", "k" : "-.-", "l" : ".-..", "m" : "--", "n" : "-.", "o" : "---", "p" : ".--.", "q" : "--.-", "r" : ".-.", "s" : "...", "t" : "-", "u" : "..-", "v" : "...-", "w" : ".--", "x" : "-..-", "y" : "-.--", "z" : "--..", " " : "/" } morse_to_letter = {morse: letter for letter, morse in letter_to_morse.items()} def decode_morse(morse_code): return ''.join(morse_to_letter[code] for code in morse_code.split()) def encode_morse(text): return ' '.join(letter_to_morse[letter] for letter in text) Also, you've got a typo in your 'y' code, it should be '-.--' not '-..--'. 
Pathetic. Sorry. [This is how it should be done.](http://www.dabeaz.com/generators-uk/GeneratorsUK.pdf)
I don't understand the question. As I already explained, the way that you run the script does not change. The script needs to be adapted to work under Python 3. 
If it's a short script just edit it to correct the problems. Longer modules and complete packages can be modified using the 2to3.py script which is under your-path-to-python\tools\scripts.
Hey guys! All those of you who are going to use this book can really help me and motivate me by letting me know how this book supplements your day to day learning and if you are a Teacher, Assistant Professor or something of that sort then kindly let me know if you would be willing to offer this book to your students or not. :) You already have my email address or if you want to tweet about it then you can do so at @yasoobkhalid. Moreover, I really can't thank this community enough. This community has helped me a LOT over the years. If you see my Reddit profile then you can easily guess that this is the only community (/r/python) where I spend most of my time. **Note:** I am currently working on making the epub version more user friendly and it would be online in a couple of minutes. Cheers!
That's basically test driven development. Just write some tests which reflect how you want to use the api.
When we look [at the source code](https://github.com/jmcarp/robobrowser/blob/master/robobrowser/browser.py#L67) *RoboBrowser.\_init_* indeed does not have *headers* keyword argument. As far as I can see, you must use *session* argument, which is [requests' session object](http://docs.python-requests.org/en/latest/user/advanced/#session-objects): s = requests.Session() s.headers['User-Agent'] = 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:39.0) Gecko/20100101 Firefox/39.0' r = robobrowser.RoboBrowser(session=s) r.open('http://www.whatsmyua.info/') In [102]: re.search(r'(&lt;textarea.*?&gt;)(.*)(&lt;/textarea&gt;)', str(r.response.content)).group(2) Out[102]: 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:39.0) Gecko/20100101 Firefox/39.0' 
So once this 10 minute intro has you interested, here is the 3 hour deep dive with David Beazley https://youtu.be/5-qadlG7tWo
I have updated the epub. You can download it from [here](http://readthedocs.org/projects/intermediatepythongithubio/downloads/epub/latest/) Cheers!
I have updated the epub. You can download it from [here](http://readthedocs.org/projects/intermediatepythongithubio/downloads/epub/latest/)! Cheers!
Ah, that might be a good point. You should illustrate this in your documentation under a section called "motivation".
WePay or DevPay
Thanks, I do that
thanks a lot I really appreciate your hard work and everybody loves good books for free... Thanks! once again
the generator is a function, ie a piece of code ... so if you print it you get a memory position! But your not suppose to go around printing iterators, the usual way is to loop over them to get items. The vid from /u/thelindsay as some great examples, I recommend you take a look if you would like to change your point of view regarding the usefulness of generators. edit: fix some stuff
As well as there's a lot of people on advocacy that shouldn't be there, on health, and so on. I got what you mean. Sure, it's hard to find good software but imo that's a matter of education and teach how to write good code. But what we could say about programming to other people? Be too realistic would scare them, be too much optimistic would bring people that shouldn't came. I never saw that many celebrities talking that about programming. Maybe you're talking about that video where Mark Zuckerberg, Will.I.am, Bill Gates and some other people talk about programming. Probably you know that video. But anyways, programming is a field that's growing exponentially. There is tons of places to apply. And it's always good to learn something even if you will not use it to work, for example, someone who learn some programming language could use it to write little scripts to automatize everyday tasks. Learn a little of mechanics would help you to fix your car eventually.
Thank you very much for pointing the line and for a great reference. Made me understand more deeply. I have hard time getting around the reference.
In the case of a Point maybe not (although I've seen many systems with "row, column" which is the same really), but the general point still stands. &gt; But regardless, at the price of verbosity and feeling a little ridiculous, we can still fix this with the type system "can" maybe. Does this actually happen though with the way the language is designed and the prevalent culture of usage? No. And that's ultimately what matters.
Fantastic job! Cleared up so many things for me, and now you've got me going back through my code to improve some things! This book should be a permanent link in the sidebar. 
Yes, it only works for one level of nesting, which is what you need 9/10 times.
I know that crazy_func is valid, I'm assuming that there is a single return statement. Like I noted, I'm not solving the halting problem. I want to do this because I want to lazily evaluate my function. That means my wrapper needs to return something, and that something needs to be the correct arity for the unpacking operation. A human can look at a,b = foo() and answer my question immediately, so the information content to make the decision is there. Perhaps the right thing is to just have my_decorator take in the expected number of outputs, but it feels like I should be able to infer that bit of information.
That evaluates foo immediately. The tuple returned needs to have the correct number of elements for unpacking to work though, so unless I force the caller to not use unpacking syntax (and make them handle the exception of that don't).
I understand your reasoning, but I am to lazy to deal with this each and every time, when there is easy to use library, which do exactly the same thing in one line of code.
That worked thank you. I looked at a github for Robo and swear I saw headers as a keyword must have been a old fork'd version or something ops. Thank you!
There's actually two syntaxes for decorator. I think the two special functions needed are __init__ and __call__. So that the actual decorating is different to what occurs when the now decorated function is called. Can you give some more pseudo-code of how you expect this to behave? EDIT-1: Or is it that you want a function that always returns the expected number of values for an unpack? EDIT-2: A second reading says that edit-1 is correct. But why do you want to do this? All you do is move your code breaking when unpacking to breaking when reading an unpacked value. In which case aren't you better off defensively programming around the unpacking than the reading of unpacked values and thus ignore decorating the function you are calling?
Okay. Nice. So it will be super hacky.
Useful if the moon ever breaks into several pieces.
Wolfenstein was the first commercial game to use this technique. Carmack used assembly language and unrolled the loops to do the drawing. Of course, this is before the widespread advent of graphics interfaces like OpenGL. Unrolled loops ran faster back then because of the architecture of the CPU. These days you would be quicker to draw using OpenGL and textures. Pyglet, SDL, and pygame give you access to OpenGL, so the choice of framework won't matter much. It'll come down to how quickly you can figure out what to draw more so than drawing it. The videos you linked are of ray casting. Ray tracing is a method for global illumination whereas the Ray casting that you linked are about figuring out what is visible. There are other ways that are better suited to modern hardware for figuring out the "potentially visible set" than Ray casting. Doom, for example, used BSP trees (which stands for binary space partitioning). Other methods to check out for indoor scenes include portals. The thing to know about modern computers is that the graphics card is so fast at drawing that you'll often spend more time figuring out what to draw than actually drawing it. For this ray casting is not the most efficient. Assuming you wanted to do ray casting anyway for the exercise, I'd separate the background (walls and floor) from the foreground (plants and tables). Figure out which polygons are visible for each by ray casting and adding any intercepted object (wall, plant, etc) to a pvs. Then, render the floor as one big poly, render the walls in the pvs as polys, then render the foreground objects as "billboard" polys. When I say polys, you'll probably be dealing with rectangles and unless you do it yourself, the driver will divide them up into triangles. Triangles are easier for the hardware to work with and everything gets split up into triangles in the end. Two triangles make a rectangle. For my personal preference I'd probably use pyglet. Please excuse phone autocorrects.
True, some people could use programming to write simple scripts to simply automate some task of theirs. I agree that it would be very useful for them. As for the car example, simple maintenance of the car (like changing a tire, filing up gas, filing up windshield wiper fluid, etc) would be similar to computer maintenance such as a user scanning the computer for viruses, reformatting, deleting files to make more space, changing "dead" hardware, etc. On the other hand, programming would be similar to a person tinkering with their car's engine. In other words, it's not necessary to learn the ins and outs of an engine to drive, nor to maintain the rest of the car. Likewise, it's also not necessary to know how to program to use or maintain a computer. Sure it "helps," but again it's not "necessary" like some celebrities have claimed. As long as people go into programming with realistic expectations (that it should be used to solve problems -- and not to learn it because some celebrity said it was "necessary" to use a computer) then I'd have nothing bad to say about that :)
Thanks for the comprehensive answer. My main question was more in the direction which library one would use to output graphics. OpenGL seems quite daunting at first glance but I haven't been able to find an alternative yet. This is frustrating since my requirements aren't really that high. I think I'll have to get into it anyways and at least it will be useful for future projects. As for the raycasting, my intention is to render hyperbolic geometry (after some initial testing with euclidean stuff of course) and raycasting seems like an easy approach. 
Build some sample payouts for different sized tournaments, ie. 100, 1000, 5000, 10000 etc. and use a curve fitting function to get the formula for the line of best fit. (I found the sum of 2 power functions works best - one for 1st - 20th one for 21st to the end). You will also have to use a rounding function to map the payouts to buckets and even numbers if this is what you want.
Nice, very elegant solution and I feel is very pythonic.
Really digging this :)
I wasn't trying to criticize it, I was merely trying to give an example. Sorry, I actually think it is a useful service, I think a web plugin where you could read a news story in summarized form, and click on each sentence to expand the area between them (so clicking on the line Based on the keywords it weights sentences of an article. it would expand to show the elided text between that and the next sentence.) And there could be a link "Read Full" which would expand the entire article. I think the summarized version of the article produced actually is pretty good (a human could do better, because to summarize you would rewrite sentences but it is readable and covers the main points).
Have you looked at other Python raycasters to see how they do it? http://www.pygame.org/project-Rayforge-337-.html That seems to run pretty fast. I have a generic Dell i5 with integrated graphics and runs pretty smooth. They are using the line() functions. If you posted your code people could make more suggestions.
I guess a better question would be how would I make a "custom map" ~ is it with the `map path` column (the `m` values?)
Even if there is a single `return`, it still may not work. This is identical to my original function in what it returns: def crazy_func(twoout): if twoout: a = 1, 2 else: a = 1, 2, 3 return a This is obvious in this toy example, but it can be far from clear even to a human in real-life code. 
I looked through the examples on pygame but apparently I forgot to look for raycasting programs there. This one is really neat and it shows me that I can use pygame for what I have in mind. I'll look into what they are doing better than me. Thanks alot! 
Right but it IS clear from the difference between a,b =crazy_func() vs, a,b,c=crazy_func()
 import numpy as np import matplotlib.pyplot as plt light = np.array([1.0,1.0,2.0]); light /= np.sqrt((light**2).sum()) X,Y = np.meshgrid(np.linspace(-3,3,600),np.linspace(-2,2,400)) n = np.array([X,Y,np.sqrt(np.clip(1 - X**2 - Y**2,0,1))]) n[:,n[2] == 0] = 0 plt.imshow(np.tensordot(light,n,(0,0))**2,cmap = plt.get_cmap('gray'))
Could you explain your morse_to_letter object? Is it like a list comprehension in a dictionary?
&gt; the usual way is to loop over them to get items. Just like you have to with pointers, except the pointer arithmetic is done for you. Nope, not convinced that generators are useful.
&gt; Testing at alpha = 0.05 means your statistical test has a probability of 0.05 of yielding a false positive, so if you run 26 statistical tests, then the expected number of false positives is 26*0.05 = 1.3. Your overall point is good, but this is totally wrong. This is a common mistake called the prosecutor's fallacy. P = 0.05 is a threshold describing that the probability that you would find a result as extreme as *or more extreme* than your threshold is 0.05. It does not mean you have a 5% chance of false positive. If your p-value for a given test is 0.0012, it means that you have a 0.12% chance of finding a result as extreme or more extreme than yours by chance alone, not a 5% chance. Not sure if this is behind a paywall: http://www.nature.com/nmeth/journal/v10/n11/full/nmeth.2698.html
Thank you for pointing out this mistake. I'm the author of this blog post, and I have corrected that statement. If you find any more mistakes, please let me know, and I'll do my best to correct them in a timely manner. Also, if you any other general comments or feedback, I am happy to hear them.
Would [Extended Iterable Unpacking](https://www.python.org/dev/peps/pep-3132/) be of use to you? It is included with all versions of Python 3 and can be supported in Python 2 with [Python-Future pasteurize](http://python-future.org/automatic_conversion.html).
It's a dict comprehension, a way of building a dict from a series of pairs. [EXPR for VAR in ITERABLE] # list comprehension {EXPR:EXPR for VAR in ITERABLE} # dict comprehension {EXPR for VAR in ITERABLE} # set comprehension (EXPR for VAR in ITERABLE) # generator expression 
I'm not sure if you know Python and don't know how to approach this or if you don't know Python, but the steps would be to loop over all submissions in your subreddit and insert the link into a database. If link in database: reply to the submission and delete the submission. Python example: import praw database = [] r = praw.Reddit("Image remover") subreddit = r.get_subreddit("pics") r.login(username, password) # Or OAuth for submission in subreddit.get_new(limit = 1000): if submission.id in database: submission.reply("Already posted") submission.delete() else: database.append(submission.id) This doesn't save the database though, and I'd recommend to use a real database like SQLite3.
You want to process millions of objects each of which takes up a large amount of memory. Do you put them in a list and wait until Python throws a MemoryError, or use a generator to process them one at a time?
I wouldn't say I know Python. I've got a couple books on learning it, but haven't started yet as I'm learning Ruby on Code Academy right now. I can look at it and it makes sense but I can't really write it. Thanks for the help! EDIT: The Bot i'm using is actually [this one](https://github.com/brianherman/karmamodbot/blob/master/config.yaml.example), I probably should've mentioned that. 
Appreciate the feedback. So this link has been a helpful start (http://www.fulltilt.com/poker/tournaments/payouts), but I want to scale it up to 25000 users. Is the best way to do it in Excel or something first and then work off of that?
Just a suggestion: Instead of using Python from the terminal, you can use IDLE. On Ubuntu you should only have to type in "idle" (or "idle3") in the terminal to open up a graphical representation of the Python shell. This also assumes you have the tk GUI toolkit installed. I find it much easier and productive to work in IDLE (as opposed to using Python in the terminal).
Pycharm is available on Linux. Just need to install java 7
Generators are not pointers. They do not require that the sequence that they are producing values from *actually* exists in memory. They are a specification of how to produce values, one at a time, so that only the memory of a single entry in the sequence needs to be consumed instead of the sequence as a whole. Suppose you want (for whatever reason) to sum up the first billion integers (and you didn't know about Gauss's formula). In Python 2, a simple but inefficient approach would be to use `range` to create a list of the billion natural numbers starting from zero, then feed them to `sum`: &gt;&gt;&gt; sum(range(1000000000)) 499999999500000000 If you execute that code, you will see your memory usage shoot up, because, again, Python allocates a list of a billion numbers. Now, try the same under Python 3, where `range` is in fact a *generator*. Your memory usage won't increase noticeably, at all. This is because Python does *not* allocate memory for a billion integers. Rather, it consumes integers from the generator as it needs them. There are plenty of cases where you have a collection of things, but you only need to operate on one thing at a time. In that case, you can save memory and time spent in allocating memory by lazily producing each entry, one at a time, using a generator. And because of how generators are designed, your code can often be ignorant of whether you have given it an actual sequence in memory, or a generator. A good example of where generators are useful in practice is `pathlib.Path.iterdir`, which lazily generates the files in a directory instead of returning a list or set of them.
Have to agree with this, although my favourite bit about ipython is the `%paste` command, it's just magic (terrible pun intentional :)
 python -mpip install pyserial
Again, you guys suck at explaining what is a generator. You dont even know that range() generates the list before usage. Horribly inefficient, but xrange() only generates values as you need them. If you use range() in a loop, you are doing it wrong.
Sure, generators aren't a panacea -- there are some cases where actually allocating the memory results in better performance. But the claim isn't that generators should be used *everywhere*, *every time*. The claim is that generators are useful tools to have at your disposal, which is made evident by `xrange`. They have their place.
My charter was not revoked, I gave it up due to ill health as I couldn't afford the annual fees. I do not have a job owing to my health. I have contributed to core (C) Python. You on the other hand keep mentioning pointers which indicates you clearly no nothing about Python. If you have no understanding of the basics of a language, it is obviously a waste of time trying to explain an advanced concept such as generators. I'll ask again, how does jython and ironpython implement generators when by definition they do not have pointers?
Unfortunately Chrome extensions have to be written in Javascript, it might be possible to use a Python to Javascript converter.
Why not just pass the number of return values of the decorated function to the decorator? @my_decorator(3) def foo(): return 1, 2, 3 a, b, c = foo() b.do_something() #or a.do_something, or c.do_something Use the passed number of return values to control how many values are returned when the decorated function is called. Attempting the hacky versions is bound to fail. First, unpacking in Python is not based upon the number of return values. It is simply an application of the iterable protocol. #Return a single value def foo(): return "abc" #strings implement iterable #return ['a', 'b', 'c'] #a single array is returned a, b, c = foo() #unpack single return value into 3 foo returned a single value, and hacky introspection based approaches will tell you it returns a single value, but that value implements iterable and so can be unpacked. A function that has "multiple return values" really just returns a single tuple which is then iterated. Second, suppose you figure out how many values to return, using this decorator is going to make thinking about your code a pain. @my_decorator(3) def bar(): #Do something that takes forever return 1, 2, 3 a, b, c = bar() #returns immediately #The rest of the code assumes that a, b and c are known and #can be used without having to do the something that takes #forever, because that something appears to have been done #with the call to bar. In my opinion, a better option would be to follow the example of concurrent.futures and have the decorated function return a single value, then do the unpacking when you're ready to get the result: @my_decorator def foo(): return 1, 2, 3 f = foo() #Do other things a, b, c = f.result() #or f.get() or just f() 
Of what use is a spec that has on virtually every page something along the lines of "this behaviour is undefined" as does C? Python is certainly not brittle, being strongly typed sees to that. CPython is the standard implementation and this claptrap about "all of the weaknesses" indicates that you know squat. PEPs are written to discuss changes so that **EVERY** python implementation gets a chance to see what is proposed. You appear to be so obsessed with language purity that you forget that to many businesses time is money, and that's where Python shines.
You guys can donate me if you want to by buying the donation version of Intermediate Python from [@gumroad](https://gumroad.com/l/intermediate_python) :) It is only for $10 but if you want to pay less then kindly let me know (pm) and I can give you a custom link. Cheers!
You're welcome: https://python-pptx.readthedocs.org/en/latest/
Yes! There's a seperate folder called "modules". Would I just drop all the files from the pyserial library in there?
 def swap(A, i, j): A[i], A[j] = A[j], A[i] Why would you make a one line function?
This is great to read [this has to be my favorite](https://www.reddit.com/r/SubredditSimulator/comments/3hcjbi/oh_man_computer_oh_jeez/), does the karma affect how the bots act? Like positive feedback for the bots? edit:I can't speel..
Would be interesting to integrate; I see you are using Markov chains (which I just read a little about) why not use the seq2seq model Google uses for their chatbot? Or https://pypi.python.org/pypi/ChatterBot/0.1.1? Not that I am an expert on this, just wondering if you had a reason for using one over the other. 
Neat visualization style. Looks sharp. Remember kids, unpickling files runs arbitrary code. Don't unpickle anything that you wouldn't be fine running without reading.
Lol this is great
http://scrapy.org/
Awesome thanks!
and...?
One slight snag with your argument, Python doesn't even **HAVE** pointers. I will now ask for the third and final time, how are jython and ironpython implemented if the implementation languages do not have pointers? As for calling me I liar, I suggest you google for "breamoreboy site:bugs.python.org" and observe how many hits you get. I make it 14,700. Please do not bother to apologise, I would not believe it was intended as such.
That's just wrong
Wait, sorry for being stupid, but what does this actually do? Creates random posts in the subreddit? Some sort of artificial intelligence?
Can you open python in another terminal? * Hit WinKey + R, type `cmd` and hit enter * Type `python -c "import serial; print serial.__file__"` That's where your serial module is located. If its not in Maya's modules folder, it won't find them I assume.
do i have to have a Finally block in this situation then, or is what I have fine in that it won't stop without finishing the list because my loop is on the outside 
You don't have to have a finally block unless you're trying to do something else after the try/except block. If you hit an exception in the current loop, it'll just print, and skip to the next iteration. Edit: also here's a good [explanation between pass and continue.](https://stackoverflow.com/questions/9483979/is-there-a-different-between-continue-and-pass-in-a-for-loop-in-python) 
Your result appears to be a single list of dictionary objects, not tuples. Listing each entry in the result list shows: {'directory': 'Cake - Fashion Nugget', 'last-modified': '2015-01-01T21:18:55Z'} {'directory': 'Cake - Motorcade of Generosity', 'last-modified': '2015-01-01T21:18:55Z'} {'directory': 'Cake - B-Sides and Rarities', 'last-modified': '2015-01-01T21:18:55Z'} {'directory': 'Cake - Prolonging the Magic', 'last-modified': '2015-01-01T21:18:55Z'} {'last-modified': '2015-05-04T14:40:25Z', 'file': 'artist.gif', 'size': '38740'} {'directory': 'Cake - Comfort Eagle', 'last-modified': '2015-01-01T21:18:55Z'} {'directory': 'Cake - Pressure Chief', 'last-modified': '2015-01-01T21:18:55Z'} As such, i[2] fails because there is no entry in the dictionaries with a key value of 2. Most result entries have the keys 'directory' and 'last-modified'. If you want to collect and display the directory values from the result, try the following: res_list = [] for i in result: if 'directory' in i: res_list.append(i['directory']) for item in res_list: print item You need to check whether the entry has a 'directory' key, otherwise you'd get a KeyError (as you're already getting) when hitting the {'last-modified': '2015-05-04T14:40:25Z', 'file': 'artist.gif', 'size': '38740'} item in the result. Hope that helps.
All those services get their data from a service provided by google. I forget what it's called. Maybe ask in /r/frugal.
I'm someone who like to just make things because it would be cool if they existed. I love seeing other people doing the same thing, it's really motivating. Reddit is a dope place when you move past all of the people and stick around the people doing fun stuff. The sub and the program are dope, thanks for sharing! 
/r/learnpython ... But you need to give it a try first. We can help if you are stuck somewhere, but we will not write code for you.
Thanks for the input! I really appreciate it. But now, I'm getting duplicate results, and I'm a bit unsure as to why: Cake - Fashion Nugget Cake - Fashion Nugget Cake - Motorcade of Generosity Cake - Fashion Nugget Cake - Motorcade of Generosity Cake - B-Sides and Rarities Cake - Fashion Nugget Cake - Motorcade of Generosity Cake - B-Sides and Rarities Cake - Prolonging the Magic Cake - Fashion Nugget Cake - Motorcade of Generosity Cake - B-Sides and Rarities Cake - Prolonging the Magic Cake - Comfort Eagle Cake - Fashion Nugget Cake - Motorcade of Generosity Cake - B-Sides and Rarities Cake - Prolonging the Magic Cake - Comfort Eagle Cake - Pressure Chief
Is it dope, though?
Are you getting duplicates in the actual result list from client.listfiles('/Cake') ? Please check that first. If so, then it's best to use a set instead of a list for your res_list so that it only contains unique values. e.g. res_list = set() for i in result: if 'directory' in i: res_list.add(i['directory']) for item in sorted(list(res_list)): print item If there aren't duplicates in the result from listfiles, please post a new link to your updated code; there may be multiple calls occurring or a problem with your looping. 
Cool! I personally use [Pyler](https://github.com/kivy/plyer), as its cross-platform, but this is cool. Thanks!
you missed a space it should be: python -m pip install pyserial
I did try. For at least an hour and was still confused. I'm not asking for code.
I think it's called ITA Matrix
I posted this on stackoverflow, but thought I'd ask you guys here as well. Interestingly, when I had virtualenvwrapper installed on Yosemite and upgraded to the El Capitan beta, I had no issues. Now that I've wiped my machine, I am completely unable to install it. Luckily I can get by without virtualenvwrapper, but it is nice to have.
Thanks; can you post an updated sample output after the above change was made?
It's the same output: http://pastebin.com/8tp1etg6
That did no format as I expected.....how does one fix that
Thanks I haven't heard of that one but it looks like it has some cool features. Particularly the mobile support and text to speech across the platforms. Seems like quite an initiative. 
Allow me to format, as well as add the rest of my code, give me a moment...
This question belongs to r/LearnPython.
It appears to be an indentation problem in your code as the for item in ... shouldn't be within the for i in result loop. You can see it more clearly in the [raw](https://raw.githubusercontent.com/bluesnogbox/Twitch-Chat-Bot/testing/test.py) for item in sorted(list(res_list)): print(item) should be dedented.
Nice, this looks kind of like sh: https://amoffat.github.io/sh/ EDIT: I actually read the whole thing and it was inspired by that project.
Oh, didn't know that was there
Wow. Now I feel dumb. I really appreciate all the help. I got it to work for returning results in chat. Unfortunately, i don't have any error handling yet. I also have to make it so that it isn't case sensitive and it escapes white spaces, but I will try to tackle that tomorrow. Thank you again.
And that's why there's an `operator._not` but no functions corresponding to `and` and `or` — you can't implement them as functions.
Rosetta code has a few [sorting algorithms](http://rosettacode.org/wiki/Sorting_Algorithms) not mentioned there - most will have code in Python.
`print` statements. Its totally awkward and off putting seeing the old `print " "` syntax in Python 2.x code. But being able to use gevent, greenlet is also a positive when going back to Python 2.7
Sure you can, albeit a little clunkily - `any(c() for c in (a,b))`.
If it's all in \_\_init__.py, it shouldn't really be in a package, it should be in its own file.
"The dea that the CF would be able to avoid all those regulations just because they are terrified that a black teen was killed by Worf..."
The downside of `gi` is that it can't be used from within a virtual environment. I would suggest the use of `pgi` which can be installed with pip into a venv and works with anything from cpython 2.7, 3.4 to pypy. A short example: from pgi.repository import Notify Notify.init('Hello World') n = Notify.Notification.new("Hello world", "This is an example notification.", "dialog-information") n.show() https://pypi.python.org/pypi/pgi/ https://github.com/lazka/pgi
The Following out put is as follows: Please enter your project Deadline (dd/mm/yyyy)12/12/2020 2020-12-12 Number of Days Left: 1942 days, 0:00:00 Number of Weeks Left: 277 days, 10:17:08.571428 Press any key to continue... How do i get rid of the days, 10:17:08.571428 behind the value 277. As this is the value for the number of weeks remaining till deadline. How can i format this value ?
There's WingIDE. You could use a text editor like atom or sublime and install the python syntax library or install vim.
Wow those Python snippets vary wildly on their conventions...
You should try. It may work out.
Thanks a lot. I'll take a look :)
Well it sounds like its just an additional feature to the existing library and could exist without changing the signature. Obviously, it's up to you.
I can't tell you how to make it, but I believe Selenium is able to log into a site give you the HTML.
For the http part (http requests), you should take a look at [Requests](http://docs.python-requests.org/en/latest/), a python module used to interact with http servers (with a really simple API). Extracting links from web pages can be done using [BeautifulSoup](http://www.crummy.com/software/BeautifulSoup/) or [Python's built'in HTML Parser](https://docs.python.org/3/library/html.parser.html). For the rest it's simple algorithms.
Well the guidelinesvsay idiomatic Python but don't say Pep-8. Pep-8 would outlaw the use of showing command line sessions but that is idiomatic Python especially for small examples. Wanting to show Python off at its best *against other languages* does include showing the use of the REPL as so many languages don't have it, or don't regularly use the one they have. 
Saw your question here, and posted an answer to your SO post. Reiterating what I posted there, you can manually install the dependencies for virtualenvrwrapper that don't exist on a stock 10.11 install, then install the other necessary packages with the "--no-deps" option, which installs a package but not its dependencies. This sequence worked for me: sudo pip install pbr sudo pip install --no-deps stevedore sudo pip install --no-deps virtualenvwrapper
How can the "stuff" in x not be relevant if you're trying to catch an IOError when processing it? There's no need to write a Python for loop like that. for wtf in x: try: if wtf.all() etc. 
The comparison against PHP isn't really valid, because PHP has no namespacing or modules at all, the entire standard library is dumped into one giant namespace. If you were going to compare apples with apples you'd have to count all the classes and functions in the Python standard library, and there could easily be six thousand of those. In the case of `pow()`, there are actually two different versions. The built-in `pow()` is just the textual representation of the `**` operator. There is also `math.pow()`, but that version always converts its arguments to floating point and always does floating point exponentiation, whereas the built-in `pow()` will do integer exponentiation if both arguments are integers (and the second one is positive.) There is a significant difference when it comes to precision, since integers have arbitrary precision where floats do not: &gt;&gt;&gt; math.pow(11, 256) 3.94936615902245e+266 &gt;&gt;&gt; pow(11, 256) 39493661590224498882206621834432062846065248714413840135415454163920651483588757794715744003358217256972650817935152314730928422727527984020050112689467408141233544760908565140964340432305536167754781707800906637231589098292660968442787631597897702091497027774786561 The built-in one also allows for efficient modular exponentiation when using integers. Anyway, to the broader question: Ideally you want as few built-ins as possible, and they should all be things that have broad applicability (i.e. they aren't specific to some domain, like parsing email headers or working with PNG files) or things that are used so often that it would be cumbersome to have to import something every time. I don't think there's a hard and fast rule, but the bar is very high to adding any new built-ins, as once added they can't be easily removed without breaking backwards compatibility. (A notable example of that was that the 3.x transition was used to demote `reduce()` from a built-in to a member of the `functools` module. I think this was done on the grounds that somebody thought it was important to de-emphasize its use, but you'd have to dig into the history to find the details of the argument.) 
5+6 = 11 and 1+1 = 2
I feel like you could slip that into a discussion somewhere and no one would even notice. 
It's not dope. It's dank and filled with dank maymays.
[Kivy](http://kivy.org/#home) can do this. It also has a special window provider for the raspberry pi so that it can run in the terminal without X.
didn't knew that thanks for the info haven't used maketrans() for a long time
Listened to the first episode, excited to see the rest get released. This is a major area that needs to be addressed in coding classes, if not in 101...certainly in 201. Way more relevant than some of the other topics that get discussed. 
+1 for DRAM. I spent much of my last week looking at a few options for parameter calibration for an external software - failed to compile QUESO, installed Dakota but couldn't get QUESO/DRAM to work, was baffled by the documentation of bumps, and pip install bayesian-inference didn't work either. After all that, PyMC is a dream. You've probably seen the MATLAB codes for DRAM (http://helios.fmi.fi/~lainema/dram/). The conversion of that code Python would be pretty straightforward, but I haven't looked much into the PyMC architecture to see how it would fit in.
Wow, shimmy gets my award for patience and persistence. I would not spend this amount of time on my own code. As a side-note, I usually make version 1.0 dead simple, like get data and print it without format. Then I add, as a function/class, a tiny bit more. If it does not work, I throw it out and try another approach. At each step, I have something that works. I have to do this because I make so many dumb moves. Best regards
Undoubtedly, but the damage was pretty considerable for a while. The core devs were pushing 3 and most users were pushing back saying that package support just wasn't there. It's enough of an example that I really doubt many other languages will attempt something similar any time soon.
I listened to the first episode, looking forward for more. I am a testing rookie but would really love to learn. Will also checkout your ebook. Thank you for your efforts to educate others!!
Nah, /u/circlejerk_SS is a computer-generated /r/circlejerk And is best bot.
Interesting. So you mainly use 3, but go back to 2 when needed. Good to know.
Piping/chaining commands and being able to return asynchronous futures. The latter provides a much stronger interface to background task management than shell scripting ever allows.
Piping. Linux/Unix are built around A) Many small programs that do one thing really well that B) Input and output plain text (as opposed to binary) and C) Can redirect the output of one program to a file, or even the input of another program (called piping). In plumbum, it appears that piping has been implemented with '|', like it is in a shell.
Thank you! This makes a good deal of sense and I can see why it would be useful. 
thank you so much, this is the first time I actually got help on Reddit and not a nasty mean answer 
Cried with laughter at this a few days back! I'm so happy you posted it here so I can say thank you in person.
Wow, you are dense. No way in hell have you contributed to python. If you did you would know that most of it is written in C. Does C have pointers? Its clear you dont even know what a pointer is.
Just out of curiosity why? According to [PYTHON 3 WALL OF SUPERPOWERS] greenlet supports Python 3.