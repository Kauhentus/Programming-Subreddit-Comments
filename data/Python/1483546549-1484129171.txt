What are you trying to say exactly?
:)
Not at the moment (that I know of). The paper's authors give some hints on how they did it in that blog post linked above, but I haven't seen any public implementations that include text. 
Sort of. [There are some important differences](http://dask.pydata.org/en/latest/spark.html).
Thanks a lot :)
Stop worrying about scaling on day 0
endpoint/user/home used to provide the newsfeed, but facebook removed it in 2015. There is currently no option provided by facebook to receive the newsfeed. 
It could be an encoding problem. It's difficult to discern without looking at the code or watching it run &amp; compare in a debugger. Do you have a snippet of code demonstrating the undesirable behaviour? In general I would recommend using https://docs.python.org/3.6/library/netrc.html or https://docs.python.org/3/library/configparser.html instead of inventing a pickle-based credential-storage format. I frequently find myself wanting to touch such files from not-python, usually from a text editor. And the binary pickle format doesn't lend itself well to hand-editing. If you're only storing strings, the automagical class marshalling isn't useful either.
Your text boils down to: * Spaces in part of the pathname, possibly only the Volume, during which Something doesn't work in Anaconda, without specifying what version or what doesn't work or how to reproduce it. * Spaces in part of the pathname, possibly only the Volume, during which Something doesn't work with a virtualenv, without specifying what tools you're using to manipulate it, what doesn't work or how to reproduce it. * Renamed Volume, post which Something doesn't work chrome/email/word/calendar. Attempting to rationalize all three at the same time isn't healthy. And probably require very different knowledge/experience/people anyway. Im going to answer the first with "Maybe read the Anaconda logs" and the last with "Then don't rename it, or ask in /r/apple". I'm going to assume you wanted to talk about the middle one - virtualenvs not working. &gt; Any idea why this might be happening? No, and ignore *why* for a bit. I don't know *what* "this" is. What do you mean by "it is buggy because of spaces"? Please state the exact tools, commands and output demonstrating the undesirable behavior.
We use dodgy a fair bit over here in Ireland as well. It's a very handy term.
Thank you for your input. Unfortunately the code is for my employer, and they would not be cool with me sharing it. :( But, I think you're right about it being an encoding problem. Thanks again!
I hadn't learned of fabfile. Looks great. I'll try implementing it, and when I do, I'll update this post. Thanks!
I suspect you could make a new short snippet (like 6 lines) which pickles something and unpickes it and compares before/after. And if that snippet doesn't work either you would be able to share it (did X, got Y, expected Z) and/or gain enlightenment directly (ooooooh~!). And if it does work then you have a working example, and then your next step is to identify where your employer's code differs.
so you're shitty programmers but you're gonna ask for money anyway.
You may want to check out [MomentJS](http://momentjs.com/) for sane date-handing in JS. 
I will echo what others have said in this thread: Don't worry about scalability before it's a problem. It most likely won't be a problem. I actually tried Hug out just yesterday. I like it's simplicity as well. I also enjoy the way it self-documents. However, implementing OAuth with hug might prove to be more trouble than it's worth. I would recommend sticking with a proven solution such as flask.
Seems like a self advertisement post
It's the Tinder app's auth URL, not mine.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Ahh okay. Fair enough. Just checking :)
after creating an environment using virtualEnv called "my_env" i did "source my_env/bin/activate" and then i did "pip list" and got the following. (I replaced my first name with "first" and last name with "last"). It appears that it is trying to find the directory "/Volumes/Macintosh", while the Directory is actually "/Volumes/Macintosh HDD/...." (my_env) First-MBP:Intro_to_Data_Analysis FirstLast$ pip list -bash: /Volumes/Macintosh HDD/Users/First_Last/Desktop/Data_Analyst_Degree/Intro_to_Data_Analysis/my_env/bin/pip: "/Volumes/Macintosh: bad interpreter: No such file or directory
It's also used in the US, but rarely. That said, I don't think it's so rare that I would second guess it if someone said "dodgy" in normal conversation. 
Makes sense to a us speaker but isn't common to say really. It wouldn't stick out to me at all though if somebody did say it.
&gt; What, in ELI5 terms, makes them fundamentally different in that Python 3 is not just a continuation of Python 2? Strings are now Unicode and not just bytes. This sounds like not much but dealing with international data is much more easier and smoother, especially because many APIs and modern techologies will work with unicode by default. The real hussle lies in python2 where you have to worry about different codecs. Wait for the moment after your codes runs fine for months and some user paste this '🂱' into some entry fields ;) (In my case it was a 💘 😂). Think about the fact that many user loves to use their phones to browse and use the web, and with it the so much loved emojis will come. 🙈 Another reason is that python3 now goes the iterator/generator route. And don't forget the new and handy std libs like `pathlib` and `asyncio` ...
I guess sketch or sketchy would the the US equivalent, but that often has race/class implications to it that I'm not sure dodgy comes with (at least over here)
To be (marginally) fair to the company, the intent of that line might be more along the lines of, "If you show up drunk and take a nap halfway through the day, we reserve the right to not pay you." A lot of contracts have things in them that more or less completely leave payment up to the whim of the employer, which does suck, but they rarely pull those triggers. It's reputational, as much as anything. Who wants to be the company that doesn't pay its people?
 Have you considered sharing the code? I'd like to be more active in the market, but there's just not enough hours in the day to do the analysis that is covered by your project.
lol wow, I had no idea that he's still doubling down on this shit: https://learnpythonthehardway.org/book/nopython3.html &gt;Before getting into the main technical reasons I would like to discuss the one most important social reason for why you should not use Python 3 as a beginner: &gt;THERE IS A HIGH PROBABILITY THAT PYTHON 3 IS SUCH A FAILURE IT WILL KILL PYTHON.
Well I do think teaching and programming are related. I stole the farming idea from Mythical Man Month, where it's expressed that program systems are complex in that they're tightly linked to one another. Programs aren't built in parallel, and the design of a program may depend on the design of another program. It's interesting that this is the same in learning. Your ideas of one technique affect your ideas in another. This is especially true in math and programming, so it's interesting that there is a connection. Regardless of the connection, the point of Mythical Man Month is recognizing the complexity and adapting your management strategy to the complexity. It's been 40 years since people started talking about this and it's still true today yet it seems people just haven't gotten it yet.
OH MY GOD, THANK YOU!! It's so much easier to read these! **EDIT:** &gt; Python 3.6 (code freeze in September **2017** Either you meant "2016", or [Guido is using his time machine again](https://www.python.org/doc/humor/#forseen-consequences).
You're welcome!! Subscribe to the email list if you want updates, and do let me know of other talks you're interested in. Also, thank you - fixed!
You can use PyCharms to "deploy" code via SFTP/ssh. Should be able to do what you want to do. I run pycharms on windows then use the Deployment (Automatic deployment updates the remote any time a change is saved) to push the code to a Linux VM I use for testing.
Hey, I'm new to writing projects so I wrote functions with '_' just for good practice. Selenium is required to load the newsfeed by scrolling down. I don't think requests has that capability of dynamically loading a page. Also, mechanize wasn't ported to python 3, so I didn't use that.
Because the .git folder is huge and he forget you can download the source as zip?
Make sure you plan out the project, Focus on a number of features to prevent feature creep, make sure you have the discipline to complete the project
I know it's off topic, but is there a way to write python modules in go yet?
why store credentials pickled and not in a simple, plain text format (eg ini: https://docs.python.org/3/library/configparser.html)? 
Yeah, seems interesting but honestly I'm not sure how well this pans out for people outside of Google. Golang is obviously huge in google, and I think this makes a lot of sense for them. For everyone else, I'm not sure anyone was dying for a python2.7 -&gt; go translator that also adds restrictions to your python code. Realistically, how many go shops are out there? I've heard and seen a couple, but seems pretty rare. You might have the ex-googler startups but beyond that, not sure it's so popular. Also, for performance issues most of us are fine writing binary extensions in C/C++/Rust. If you're looking for true parallelism, you can build it in another more popular language and import it. If you legitimately have real-time requirements grumpy might be nice and an easy solution, but I can't think of an obvious time I'd have ever considered needing this. Does celery or some task framework solve my problem, with multi-processing? Then I'll use that. Do I truly need something to be parallel or have the highest performance possible? I'll write an extension. With multi-processing and extensions you can already solve most problems you might have with cpython. A lot of people outside of Google just don't like golang either. I'm not sure how many python shops would really want to translate their code and run it in a separate runtime with a not-so-popular language. Personally, if I wanted to run python code in a different runtime I'm not very familiar with, I would go with jython or ironpython if I for some reason was in a windows environment. Go would be my last choice. Ditching the ability to use c extensions isn't good either. If I really had some problem that Python couldn't solve on its own, I'd seriously consider C or Rust python extensions long before making a switch to something like this. I want something where I can use a modern python version and easily deploy to all my servers as they are. This doesn't seem to fit that bill for me personally. C/Rust extensions are a great solution when Python can't cut it. You can minimize it to a very small module and just import it in and run in your standard CPython environment. There's not much to it and it's portable to almost any linux environment. Seems to me like google is open-sourcing another tool that solves google specific problems, which isn't bad but just doesn't sound very helpful to most of us.
Quoting the author of Grumpy on Hacker News: &gt; The idea is to continue to write code in Python. (...) That said, there is the possibility of rewriting bits and pieces in Go (e.g. performance critical stuff) and then call into it from Python. Sort of a hybrid approach. Also: &gt; I'd like to support 3.x at some point. However: &gt; We do iteratively rewrite components as well. We are pursuing multiple strategies.
Why do we need this again?
Instead of not finishing, don't not finish. 
haha I wonder if it's something that got incorporated into the Aussie vernacular that was originally popularised by Irish migrants.
That's horrible!
Whoops! Thanks so much for the correction - I just fixed it!
Exactly! I thought back to how long it too me to get my head around OOP after I'd been programming for a while and couldn't imagine how you'd teach beginners it in one day.
I use this in my regular workflow. I primarily work with larger instances on EC2 for machine learning related work and have PyCharm "deploy" my code so I can run it via ssh terminal.
Absolutely. The naming convention is a bit weird (what's a class and what's a function? Or is that a class being called?) But it's much better than raw CV.
Hey /u/caseym. It's funny you ask this today, as I [just posted today](https://www.reddit.com/r/Python/comments/5lzroh/releasing_my_first_project_and_id_love_to_have/) about finally finishing a project. This is the first one I've gotten around to releasing, so I totally get the struggle. The biggest thing I can recommend is to release early and iterate. List the items that are absolutely crucial for your initial beta or 1.0 release, and ignore everything else. This is important for two reasons: 1. The scope doesn't seem nearly as daunting because you're working on smaller things at a time 2. Releasing the project is exciting enough that it's easy to keep working on it after that I like to use Trello for this. In fact, [here's the Trello board I've used for the last few months](http://imgur.com/a/y8KC8) while working on my project. This is the way I've broken it down: * **To-Do - Someday**: These are the items that would be nice to have, but aren't crucial to your beta or even your version 1.0 release. I like to put random ideas in this section, too, so that I don't forget them. * **To-Do - v1.0**: These are items that can wait until your version 1.0 release. Stuff that would be nice to have, and you feel like it's important to be in the initial stable release, but isn't so crucial that it must be done immediately. * **To-Do - Beta**: This is your immediate to-do list, and **the only list that matters until you clear it out**. Once you clear out the items in this list, you archive the list and move on to version 1.0. If you can get the beta released and announced to the world then you will likely feel such a rush that you won't have any problem starting on v1.0. :) * **Doing**: What you're working on right this second * **Done**: Things you've accomplished. I like to keep this around to see how many cards I've finished. *(I also have a final lane called "Bugs/Issues", but only because I find it easy to group them all together)* If you're like me and you find yourself moving items from Someday/v1.0 into your Beta lane all the time, then literally move those lists into a different Trello board so that you don't see them and aren't as tempted. I hope this helps!
I see, I meant it in the sense that I am not trying to promote a business or service relevant to the article and I bring up my position to illustrate that fact.
You will need to loop over the values and use a test like `isdigit()` to determine what to do with the element. Post this on /r/learnpython, and include what your output should be from that input, and the version of python you are using. 
You might want to have a look at /r/learnpython. if you try to cast a string (which is not a number, e.g. 'Dave') to int, it will throw a ValueError try: int("Dave") except ValueError: print("Not a string") else: print("A string") You could also check whether every character is a number (I would recommend the above option though) import string print("1" in string.digits) # True print("t" in string.digits) # False Edit: I actually forgot the easiest one: `'x'.isdigit()`
thank you very much for your suggestion. i will delete this thread shortly.
I thought Raymond Hettinger brags that David Beasley practically has people coding their own operating system in about two days? I think the author is underestimating Python. 
It's Python... it can be done.
Yes; I don't even plan on voting for him.
I can't think of any kind of C extension tooling that would fix Python's parallelism problem. While this does compile Python into Go, the resultant Go program contains a Python runtime complete with runtime Object (as in CPython). In this sense, I don't think there should be any concern about it not being a runtime in itself.
In the spirit of debate, I offer this in refutation of OP's objections: https://youtu.be/NfngrdLv9ZQ?t=5m4s 
This is only true for certain workloads--namely those which are good candidates for parallelization. This is unoptimized.
Noob users bitched at us to switch to 3 for the last 5 years. They were wrong that entire time, 3.X was slower and offered no meaningful improvements until 3.6 (or maybe 3.5). Let's hope enough of their credibility remains, and that 3.X gets a few more practical improvements before the 2.7 EOL
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
You mean something like https://github.com/go-python/gopy ?
Congratulations on having the strength and foresight to say no! I do corporate Python training for a living. That curriculum does not look like a course/workshop. It looks like a seminar, mostly because those concepts are fairly high-level. Seminars are not meant to be hands-on: they explain a community and set of tools without trying to teach real skills. They're useful for clients who are hoping to pique interest in Python within their team/company. Even if this was meant to be a seminar, the curriculum is a little bizarre. It seems to lack a clear audience: it looks like it's half sales-pitch and half workshop. When reshaping the curriculum, make sure you get a good grasp of the client's business goal and the root problem that caused them to seek outside help. Without knowing the goal, you might end up offering the wrong solution to their problem (whether course, seminar, or something else). Feel free to PM me.
If you are wanting a library for the actual data generation this is one I have used before. it's easy to use and has a huge array of locales and formats. https://github.com/lk-geimfari/elizabeth
Thanks a lot for your kind words, I completely agree - the people this kind of thing is targeted at is completely wrong. If they'd told me that it was a quick intro for experienced developers then it wouldn't have been too bad, but people who don't even know what a programming language is are just going to be wasting their time and money at a thing like this.
What are the main advantages of Lintly over landscape.io and codacy and quantifiedcode?
Thanks. I signed up for a Trello account and have combined some of the other ideas here to get me started.
Wow perfect timing! This is fantastic advice. I created a Trello account and have set up my lists similar to yours. I think this is going to be huge in keeping me focused. [Here](http://imgur.com/a/s0e6k) is my Trello board.
That's nifty but it misses the essential punchlines. Here's [wikipedia's](https://en.wikipedia.org/wiki/Fast_inverse_square_root#Algorithm) description: &gt; The algorithm computes 1/√x by performing the following steps: &gt; &gt; 0. Alias the argument x to an integer, as a way to compute an approximation of log2(x) &gt; 0. Use this approximation to compute an approximation of log2(1/√x) &gt; 0. Alias back to a float, as a way to compute an approximation of the base-2 exponential &gt; 0. Refine the approximation using a single iteration of the Newton's method. None of the logic or math behind those approximations was touched in that slideshow. Still, very pretty. 
If they want more than a cursory, "this is the nature of oop" then it's pretty unreasonable. Generally speaking corporate training involves a method of education, exercise, questions in that order, then onto the next round until the day is finished. Having been in corporate training many times over my career I can say without a doubt that even with cursory levels of information that list is too much. Realistically, in an eight hour day with people who have never programmed before and late learners (students late in their career) expectation of getting past, "This is what python is and we're going to get Hello World working" is a bit ambitious. 
I'm not sure if this is actually more revealing. For example, the float-alias does compute a scaled version of `log2` (log2(x) + 127) &lt;&lt; 23, see https://github.com/leegao/float-hacks), but that does not explain why the bias of `0x5f3759df` will offset the added error, at all. The point of this slide is to give some intuition on why this bias works.
Hey /u/rochacbruno. That's a good question. Lintly is very much an MVP right now. I wanted to get it out there, get some people using it for public repos, and iterate on it often. The features I'm really trying to focus on are... * Strong support for pull request linting * Provide solid documentation for any code violation (soon I am going to open source the flake8 rule explanations/examples that I wrote up) * Support the linters programmers already use (and have config files for) * Support the big 3 Git services (GitHub, Bitbucket, and GitLab) In relation to those three sites, here's what I'm thinking: For landscape.io there are a few advantages. Landscape currently lints Python-only, where Lintly is about to get JavaScript and CSS/SCSS linting support. Also, while I haven't figured out a price for private repos (I'd really like to a few users linting public repos for a while), I expect that Lintly will be quite a bit cheaper. Codacy is, frankly, great. All I can hope to do at this point is focus on those 3 areas I mentioned about and have a really solid, simple app. QuantifiedCode is also great, but also Python only, and if I'm not mistaken they are planning on shutting their doors soon (they might have changed course on that, though). Hope that clears things up!
That's great. :) Good luck!
Think of it like TypeScript-&gt;ES6 transpilation -- you don't have to use Go to write Go apps, but instead Go-based Python. Error handling will have to be Go-like though, so handling return values instead of raised exceptions.
Wait so, Go calls Python which calls...Go? Or am I misunderstanding this
What's wrong with spawning a million processes? I thought threads were evil.
Some people prefer preemptive to cooperative multitasking. I'll happily take the performance hit.
Commenting on Reddit doesn't bump the thread...
&gt;I can't think of any kind of C extension tooling that would fix Python's &gt;parallelism problem. The only parallelism problem Python has is convincing people it doesn't have a parallelism problem. As Guido has stated, Python has been used on 64K core supercomputers. There is no parallelism problem. 
Thanks! you got it.
PS a good way to stay abreast is to subscribe to the mailing list ;)
Don't use objects! https://docs.scipy.org/doc/numpy/user/basics.rec.html
http://elliothallmark.com/2016/07/27/sliding-windows-on-numpy-arrays/
Currency/Money is not a data structure, in your example.
It looks interesting, good work!
Haha, it's alright! I think it's a good idea you have here, even if it didn't end up being exactly where you wanted it. I often end up writing a ton of code, only to delete it after a while because it never quite gets where I want it, but in the process of writing the code I find a better solution. It's *really* hard to write something truly good.
No problem /u/ardtus, glad you liked it! :)
Not sure how it actually works, but maybe exceptions can be faked on Go with Panic()/Recover()
&gt; as processes that communicate via atomic message queues. you mean, like Go's channels? Without the serialization overhead because it's all under the same address space. =)
ignoring the fact that goroutines actually run native code so are by nature significantly faster - they are also backed by an implicitly multithreaded event loop that takes care of multiplexing goroutines across all CPU cores - so they can actually do heavy CPU stuff and not starve everyone because they are also preemptively scheduled. Also you don't need to sprinkle 'async/await' everywhere in your code to benefit from it all, you can just use channels and the 'go' keyword. There is literally nothing about python 3's asyncio that is better than what Go has.
Thank you for the heads up, seriously. Would you mind sending me a screenshot? This is what it *should* look like: http://imgur.com/a/ZuhZa. I'll fix landscape now.
I really liked the idea of erlang (and now Elixir) but have been turned off by the syntax. It looks like Go will get me similar kinds of features while having much nicer syntax. I should get around to writing some, and Grumpy looks like a nice component of the Go ecosystem. I hope it progresses well.
The OP was chastising me elsewhere for suggesting that performant parallelism was difficult in Python, so either he's trolling elaborately or he's naive. At any rate, I'm familiar with the nuance around Python's parallelism; I was paraphrasing. To your point, it would be nice if Python were able to parallelize nicely.
It just then becomes a serialization and IPC overhead problem.
nice interface
No problem [Here's what I see](https://imgur.com/a/QAbgb) I'm on a Galaxy Note 5 using Chrome. 
Looks like it is a bootstrap layout using jQuery
Yup, /u/binary_savior is right, it's Bootstrap 3 with jQuery. Haven't played around with SPAs to be honest, I guess I'm a bit old school :) I bought a Bootstrap theme btw and modified it, I'm terrible with design/graphics stuff...
Thanks! :)
Here you go :) http://mrh.io/wesley-george-limits-orm/
You just described how I feel about Go and Rust - I already like Go because of it's simplicity and power (it's like a nicer C) that you can learn over dinner. On the other hand there's Rust that is very promising, can totally replace C and C++ and is growing by the day - yet I feel like the syntax is horrible, reminescent of the mess that C++ is. I've decided yesterday to try to look past my bias and force myself to learn (and who knows, love) Rust too, since I think it will be a good complement to Go's weaknesses - allows me to write low-level code like C with the nice parts of generics and OOP without having to touch C++.
Grumpy's runtime library implements a Python call stack, complete with exceptions. It would probably require a lot of abuse (if it's even possible) to support Python's exception/traceback APIs using Go's native call stack (I.e., not building a call stack atop Go's).
I guess I should have specified C based Python libraries.
For me, the allure is writing performant functions in a safe language. Further Go's scientific computing story is evolving quickly, and grumpy lets you call into Go without even writing bindings (though they would probably be convenient for marshaling between Python and Go types). Still, grumpy has a long road ahead, and it's probably slower even than CPython for sequential execution.
I don't mind Rust's syntax, but I have a hard time understanding how things like closures work and how functions are passed. It seems like everything needs a RefCell, and I don't know when or why. Even coming from C++, the memory model (while safe) still places a lot of demands on the programmer which aren't required in Go--I can do a LOT of optimizing in Go before something becomes easier to write in Rust, and at that point the Rust code to outperform the optimized Go version is still nontrivial...
Cool. Post it to /r/golang when you've got results!
So is it a runtime or is it transpiler? Or are they not sure what they created?
I think I bought this one from https://themeforest.net/. Another one I've used for other projects is https://wrapbootstrap.com/. Also, here's a nice-looking open-sourced one: https://github.com/puikinsh/gentelella
&gt; IMHO big players would get better results investing in better tooling for the C-based extension infrastructure for CPython, or building bridges between Python runtimes and things like Rust and Go I wish IronPython hadn't been abandoned by Microsoft for Python 3. I know, it's MS/.net only but it was still a nice thing for those of us working with Python on Windows. (There is an open source [IronPython 3 project](https://github.com/IronLanguages/ironpython3) but it's not very active.)
I like it. Thanks for putting this together. I noticed you have quite a few social site options when creating an account which I like but you do not validate or enforce the domain association. For example I can put a twitter link in the facebook text box and then on my profile, the logo's don't match up. Petty/not significant and the onus should be on the person filling out their profile to ensure it's correct but that would be a minimalist integrity check or at the very least when displaying the icons for the public profile, it could match them up to the URL in case of copy / paste errors. I also didn't see a Bitbucket option. That's a pretty common git option these days too.
Large companies are not properly paying their freelancers all the time. Have fun spending all your working time fighting a giant HR and legal team.
Why post this here?
Huge?! Its 236KB. So you gain 236KB in harddrive space but lose the ability to make and track changes to the code.
GIS- dude here- respect man looks great
Neat! I've created similar Python scripts using the turtle module: https://github.com/asweigart/art-of-turtle-programming/tree/master/fractals/hilbert_curve
Thanks man!
I'd love to see this reach modern Python. Meanwhile, it's an interesting way to revive dead projects (eg anything not already running *any* flavour of modern python). Some of those dead py2-only projects on PyPI remain quite interesting, and could still be useful if ported to a living language.. Even if that language isn't Python. :) This does make me want a Python-&gt;Unsafe Rust transpiler too, but I guess that's just being spoilt when I could be embedding an entire Python runtime in my Rust projects anyway :P
GitHub repo - https://github.com/google/grumpy 
It sounds like you should be using a virtualenv. You have said you do not want to. So my question is: why?
No C-extensions = useless for scientific and high performance computing. Given how they sort of mention this off-hand makes me feel like they are very much 'web-python' people who have little appreciation of some of Python's major use cases. 
No matter how quickly Go's scientific stack evolves it's still going to be well behind Python's stack which is also evolving rapidly and has been for 20+ years in physics, climate science, GIS, etc - and most of that is built on CPython C-extensions. (And as a bonus issue, many large projects are committed to dropping python2 support within the next couple of years).
I like to have several projects going at a time and procrastinate by working on one of them when I feel I should work on another. It's a weird way to work but I get a lot of things done :P
It's a project to get rid of legacy 2.7 code by removing Python all together. So it wouldn't make sense to implement Python 3 support. 
It's the go runtime plus a subset of the Python standard library plus a transpiler. 
Not everything is solvable by the thing you use. Ever heard of fresh python installation? That's why. Try installing the fresh thing if there's something colliding in registry without mangling already working installation just to see if there isn't something corrupted in includes or in dlls. What if a file got into an installation and corrupted it (name collision with a package, different headers, etc). Will you remove the whole installation just to check? I thought so.
Besides this being the wrong sub, why do you post here directly after you submit to stackoverflow? People who want to solve random problems are already on stackoverflow, or on /r/learnpython. This is for news and community stuff and such. Do you see many double posted questions here? How is the response? Now if your had some sort of obscure issue you didn't get any response on elsewhere after a while then maybe you could post here, but instantly spamming your impatience is not cool. 
Automate stuff: backups, repetitive configs on dedicated equipment, do stuff at certain hours while I sleep, etc. :D
Making a script that checks if files in certain directories have been updated during the night. I thee haven't updated, the scripts should send me an email specifying which files haven't been updated.
Instead of posting jobs manually, are you planning to automate it? 
I'd like to see a more complex example of using Cython, including custom classes and exceptions. It's pretty obvious how to cythonize small computing-related functions, but not so obvious for more complex types.
its just an introduction like the title say
&gt; SQLAlchemy is a lower-level SQL python package, allowing a comfortable code-based medium between an ORM and raw queries. Is there a higher level SQL python package then?
The Django ORM?
You need the paid version for this though. Community Edition doesn't have remote deployment. Thats how I convinced my employer to get me a license. It is a very useful feature.
Neat. Sourcecode is on github. Pulse shows little recent activity but the dev does take pull requests.
Virtualenv are a bad idea, but the ecosystem has been engineered to work with them. Many other languages (like Java) do not require virtualenv as they don't have a concept of a system-wide interpreter. This is a much better design. I do support independent research, so go ahead if you want to discover. However if you just want to ship your project fast so you can get paid, then practicality beats purity and the virtualenv gets you paid on time.
Well Go is a Turing complete language, so I understand them not choosing Python3 /s
&gt; There is no parallelism problem. Although I think a lot of people worry too much about the GIL, it's not correct to say there is *no* parallelism problem. If you're doing something embarrassingly parallel, then of course you can get away with multiple processes or C/Cython extensions that sidestep the GIL. But there are plenty of use cases where multithreading is more ideal than multiprocessing. Having to resort to forking another process just to get true parallelism is a lot more work than being able to start up another thread. 
What do I need to learn to be able to write programming tools like libraries?
When will people stop trying to download the internet...
Absolutely fantastic info! Thanks!
Interesting question, but it shouldn't be hard to do: Compare paths of current dir (e.g.) and each other: - the ones that have the exactly same path and same name are the closest (the same, really). Lets say distance=0 - those with same path but different name, distance=1 - all the rest: check how many levels you have to go up/down until you find common path (each level rises distance by 1) and - if needed - count the levels down from common path and distance++ for each. When I say level, you can find a level splitting the path by '\' ou '/' (depending on OS). That should work just fine.
Should be using aiohttp if you want pythonic
Good question -- I actually liked the sound of Let's Encrypt and looked into it, but it still seemed kinda beta-ish at the time, and I think I had to install something to make it happen, so I ended up just going with the manual option so I could have control (and learn more in the process :-).
On my hard drive. Or do you mean the directory? I assume Downloads.
No problem. - Main Site (all posts): http://feeds.feedburner.com/mrhio - All Talk Notes: http://feeds.feedburner.com/TalkNotesMrhio - PyCon Talk Notes Only: http://feeds.feedburner.com/PyconMrhio
learn to read the sidebar
Lock contention, presumably.
https://en.wikipedia.org/wiki/Wikipedia:Database_download
Hey I'm using React for my front end and its freaking awesome.
I mean, that's what everyone said about its web story. Maybe you're right, this isn't my domain.
It's only 58GB (uncompressed) for all current revisions of articles in English. Now, if you want all revisions and all metadata, they say that's terabytes of data. But chances are OP only wants current revisions.
Using the [networkx](https://networkx.github.io) library will probably simplify your life.
I just looked this up too. Link for reference: https://en.wikipedia.org/wiki/Wikipedia:Size_of_Wikipedia#Size_of_the_English_Wikipedia_database
Does Kiwix update automatically?
There are several sync options, I suggest to go over the explanation in their web site, it is very well documented.
Sounds like OSPF, which is an implementation of Graph Theory. Which bit? It's been years so I'm guessing, but ... Euler paths? You'd want to set a weight of 1 on each path here and just look at hops. 
If I have path 'A-B-C' and path 'A-B-D', the weight of edge should be 1, or 2? And how exactly do I get the closest path for a new path by cpunting these weights?
I built this late at night when I was half asleep and just wanted to get this working, hence no proper error messages. Once I get time, I'll revamp the module and probably abandon a webdriver and only use http requests to get the data. &gt; totally stealing some ideas from you Go on bro, the entire pillar of tech is built upon copying and improving. I myself learnt most of python through seeing other people's code. :P You should definitely checkout [ageitgey's](https://github.com/ageitgey/show-facebook-computer-vision-tags) project, which is a chrome extension that does exactly this. If you'd like to make an extension focusing on the meme part of it, fork his repo and build on! Definitely post it here.
Not to seem dense, but googling "Kiwix sync" or "Kiwix automatic updates" just comes up with a bunch of feature requests. Could you show me where you see this option?
 for n in range(2, x): if x % n == 0: return False return True Consider the level of indentation of that return True. Easiest way to spot stuff like that is to pepper the code with print statements eg a print(n) would show that only n = 2 is evaluated.
Notice "return True" is aligned to "for" in the second case but is inside it in the first case. 
The `return True` in your first version is inside the loop. That means that at most you'll only ever run through one iteration of the loop before returning, which means you're only checking for whether the number is divisible by 2. In your second example, `return True` is outside of the loop and only runs once the loop has finished. 
This kind of question probably should be asked in r/learnpython. The issue is here: for n in range(2, x): if x % n == 0: return False return True The *return True* statement is inside the for: loop. This means that the loop will only ever run once, with n==2. this function will return True for any x that is not divided by 2. 
read the sidebar
If performance is not critical you could also try a regex based approach. First search for a complete match, then start introducing wildcards.
This is simple and useful, thanks. What I really want is a more global way of doing annotations that sit in the plot area but don't overlap and cover the smallest amount of visual information in the plot area. Maplotlib's legend does have `loc='best'`, but something more extensive would be great. I suppose since this is Python I should just roll my own!
Have you looked into APIs available by job boards to pull jobs in an automated way?
Probably the bad reviews part makes this easy by having artificial reviews put in place so they don't have to pay you, which would explain how most people had negative reviews 
Maybe this should've been build against Sanic instead of Flask and so offer something new (tight and fast async web framework with optional batteries provided). Now you just made a Django variant (fat and sync with batteries included). And being Flask it is for opinionated people who probably already have picked their preferred batteries (facets) etc. 
There is also /r/remotepython. Maybe share there too.
imo, automate scraping, allow for a flag as irrelevant or flag as spam option, then if the listing accumulates enough flags it is removed from the list. offload your manual work onto users.
Where did you find the cafe stock image and/or where can I find more like it? Looks great btw.
Good work, but as others have said you should automate this with a review before posting option.
Thank you! That is extremely helpful!
&gt; But overall, I think that it would have been better for the community if Google put their horsepower behind CPython to make it run faster. [About that..](https://www.python.org/dev/peps/pep-3146/)
Good write-up. I was working on my recent side project in Django, but I was missing the flexibility that Flask offers. I have currently decided to use almost the same stack you're using except I'm tacking on Marshmallow for schema generation and validation. I'll also be switching React out for Vue. Out of curiosity, did you end up using any tools specifically for creating the api?
I mainly use it to build web applications. I also tend to prototype other things with it.
&gt; But matplotlib can be a HUGE pita to install because it has so many dependancies That is exactly my point. A simple copy/paste on /Lib is probably going to fuck something up. If you're lucky it will explode immediately the first time you try to use the lib. If you're unlucky it will explode 3 months from now when you call `someRandomObscureFunction()` and everything dies in a fire. At that point it becomes WAY harder to track down the issue. Reinstall now or reinstall later. Up to you. &gt; VS2010 im looking at you http://download.microsoft.com/download/1/E/5/1E5F1C0A-0D5B-426A-A603-1798B951DDAE/VS2010Express1.iso You're welcome. &gt; What about for packages that are un-pippable? Install them however you installed them originally? http://www.lfd.uci.edu/~gohlke/pythonlibs/ is a great resource since you're stuck in Windows.
If you're curious on how to set up a basic confirmation email, check out this post I wrote -&gt; [Handling Email Confirmation During Registration in Flask](https://realpython.com/blog/python/handling-email-confirmation-in-flask/). You could set up your own mail server, but there's no need since there's a number of services out there that solve this problem - like: 1. [SendGrid](https://sendgrid.com/) 1. [Mailgun](http://www.mailgun.com/) 1. [Amazon SES](https://aws.amazon.com/ses/) When determining whether to build or buy, you just need to figure out the problem you are trying to solve. There's no need to reinvent the wheel with transactional emails unless your product is trying to make those services better. For more, check out [Transactional Email: The 7 Best Services to Send 1000s of Emails Daily](https://zapier.com/learn/ultimate-guide-to-email-marketing-apps/best-transactional-email-sending-services/). 
If you feel Anaconda has too much stuff, you can also just download Miniconda and then "conda install scikit-learn" to grab only the necessary dependencies.
HTTP is used as an example in the post. The point in this post is that by properly defining an interface to a remote service it doesn't matter which transport / serialization format / etc you are using.
Thanks
Thanks for this! The link for Randal Olson's example isn't working for me. I'm assuming [this](http://www.randalolson.com/2014/06/28/how-to-make-beautiful-data-visualizations-in-python-with-matplotlib/) is it.
Error 99999.
Is that all of the frames of the backtrace you get back from gdb? Where is malloc getting called from?
[environment file](https://pixeldra.in/u/zHNp_5)
No, please see the updated post. The code I'm working on is [pysvmlight](https://bitbucket.org/wcauchois/pysvmlight/).
Do you have the hand as a list? Lists have a `count` method. &gt;&gt;&gt; hand = [ "a ten", "a five", "a five", "a six"] &gt;&gt;&gt; hand.count('a five') 2 Strings have a `count` method too. Then you need to call `remove` for each one found: &gt;&gt;&gt; for _ in range(hand.count('a five')): ... hand.remove('a five') ... &gt;&gt;&gt; hand ['a ten', 'a six'] If you have more questions like this it's better to post them on /r/learnpython
Django has some of the best, comprehensive documentation there is and the official tutorials available on the project's [website](https://docs.djangoproject.com/en/1.10/) are pretty straightforward for learning the basics to the framework.
Ahh, perfect. Thank you! I will post anything else to the other sub in the future. 
Reading description I was a bit skeptical. However, it actually looks awesome! Great work
This should be a post in /r/learnpython but here's my thought on the matter. Use a dictionary over a list where the keys are the current cards in your hand and the value is an integer that shows how many of that card is in your hand. Also get rid of the prefixes ("a"/"an") in your strings. The issue with using `.remove()` to remove 4 instances of an element in a list is that `.remove()` will only remove the first time it encounters its argument. The trick is to build a new list/dictionary that has all of the cards that theres not 4 copies of. Dictionary Example: CurHand = {'ten':2,'eight':4,'king':3} #iterate through the dictionary and only add back cards (to the empty dictionary) if its number of copies &lt; 4 def check4Kind(hand): newHand = {} for key, value in hand.iteritems(): if value &lt; 4: newHand[key] = value return newHand #We overwrite it when we check it which makes it appear that cards with 4 of a kind are removed CurHand = check4Kind_dictVer(CurHand) #CurHand == {'ten':2,'king':3} If you want to do it with a list: CurHand = ['ten','ten','eight','eight','eight','eight','king','king','king'] def Check4Kind_ListVer(hand): newHand = [] #iterate through all cards in the hand for card in hand: #If the number of that if hand.count(card) &lt; 4: newHand.append(card) return newHand CurHand = Check4Kind_ListVer(CurHand2) #CurHand == ['ten','ten','king','king','king'] 
I'm actually on a Mac, and about to run through the Django tutorials myself. See the voting example: https://docs.djangoproject.com/en/1.10/intro/tutorial01/ First, you have to set up your ENV and dependencies. 
Do the PyBay talks next. Nice work. (I usually watch the YT videos at 1.25 or 1.5 speed, but that still takes time - these are nice summaries.)
Ok thankyou
[Sometimes asking for stuff works!](https://www.reddit.com/r/Python/comments/5ehlfo/pycharm_20163_released/dacixay/?context=3) I'm hoping the remaining SSH improvements make it on to the road map soon. Props to /u/extra_short_giraffes and /u/pauleveritt for being awesome and involved with the community.
I think it would fit better in Seaborn, but either way it's nice code.
Two things for me, 1. Would be nice if instead of a channels.txt file that the user has to manually add to, the program uses the exported subscriptions xml file that you get from the [subscription manager](https://www.youtube.com/subscription_manager) And here's some code that you can use in process_file that I made. with open(subscription_feed, mode='r', encoding="utf8") as readfile: root = etree.parse(readfile).getroot() for child in root[0][0]: channels[child.attrib['title']] = urlparse(child.attrib['xmlUrl']).query[11:] 2. Would be nice to have the option to add all the found videos to the Watch Later playlist. [This API](https://developers.google.com/youtube/v3/docs/#Playlists) seems to allow it. But this is more of a personal functionality thing. If you don't want to do it, I'll probably fork the project as that's the use case I want. Edit: More Things 3. Using from youtube_api import * to import datetime is obtuse. 4. Using the last modified time as your last checked time is bad as the user can't easily change the date they want to check last. This also allows you to test it more easily imo. Edit: Some working code added
on windows use conda installer to avoid recompiling anything
conda installer is even a better resource 
Thank you :)
I'm just using PostgreSQL's full text search and the module that was recently added in Django 1.10 so I can use the ORM with it. Right now it's pretty basic, I select which fields to search and add rankings to them which is mainly based on how often the keywords appear in the document, how close they are together in the document etc. I plan to do some tweaks this week to add weighting. https://docs.djangoproject.com/en/1.10/ref/contrib/postgres/search/
That sounds like a good case for a web interface. I would use Flask or similar to create a simple website. For just learning I'd keep it simple at first with the built in templating and POST requests. To make a more modern design would require Javascript knowledge as well (my personal go to for light responsive sites is Flask/bottle with REST APIs using SQLAlchemy with Angualr + Bootstrap frontend)
Thanks for the suggestion! I've actually thought about x-posting there but it seems the subreddit is mainly for posting individual listings so I just posted a few links that go to my site for now. :)
Thanks man! I actually tracked my hours and logged around 85 hours of development total from setting up the project all the way to production deployment. The deployment part I already have automated with Ansible so that saved me a lot of time, I actually have my playbooks open-sourced: https://github.com/jcalazan/ansible-django-stack If it gets traction, I plan to contact companies showing them traffic stats and see if they'd be interested in premium postings. I'm currently hosting everything on 1 DigitalOcean VPS for $5/month (512MB RAM, 1 vCPU).
I do plan to involve automation and looked at a few APIs, but haven't done much research on this to be honest. I know at least Indeed and Angelist have public APIs.
/r/learnpython jesus
To get down the basics of how to host a template and send information from the browser to the backend shouldn't take you more than an hour. To fully build your program I would imagine it's shorter than learning the ins and outs of TKinter IMO, but it is a commitment compared to just making a text based program. For your needs, I honestly think if you just go through the [tutoral](http://flask.pocoo.org/docs/0.12/tutorial/) they provide, you can just adapt it to your content. 
I think that is beyond my capabilities, but if you have any suggestions on how to proceed would be great to hear.
Keep us posted if you do that. Very interested in seeing how that works.
i literally LOL'd at this. also, enjoyed reading the article. burnout is a sneaky little shit. 
your impression is right on ( pyotherside not suited / intended for larger projects ) the separation between the python and QML layer is a feature not a bug IMO. if your logic in QML is not pretty much trivial, you're not writing declarative code. this is involves some changes in how to structure your API, but once it sinks in its pretty amazing. i found qml + python amazing to work with. wrt a reference project, a [buttleofx](https://github.com/buttleofx/ButtleOFX) provided some interesting components. the [livecoding](https://github.com/buttleofx/QuickMamba/tree/master/example/instantCoding) was amazingly useful ( hit f5, reloads your UI ). on that note, [qmllive](https://github.com/Pelagicore/qmllive) has been a major time saver; you'll see instant changes in the QML code your writing. have fun, cranking out great looking apps in QML is easy &amp; enjoyable 
&gt; Eu falo inglês. FTFY.
login with GitHub account would be a great feature.
Sorry for the vagueness. I've not messed with any coding in the last decade, with only a semester of C++ prior to that. I want/need to learn Python as I have finally made way into the field of GIS and would like to start automating things for my employer. Simple things even, loading layer files from our SDE server located geodatabase, and learn to use the tools within our software in an automated fashion to speed up the workflow. I've attempted to learn in the past as mentioned and have little luck at all with any sort of retention. Granted I spend a month or 2 on it, realize I'm making no progress, and focus back on something else. 
I like it very much. Small style tip: Classes in Python are normally named `BankAccount` instead of `Bank_Account`. edit: Also, no space around `=` while defining params. edit 2: Do you mind if I help you with the naming and style and English in a few weeks?
How is this different than the current ssh method? Would it use key exchange like github. 
Delegation is the big one there from my experience. It's easy to convince yourself that you're the best person to do stuff, so you've got to be the one to do it. Truth is, you're not that special, others could do it,. Even if you *are* the best person to do it, you simply cannot do everything and it's attempting that that will burn you out sooner or later. Learn to delegate stuff and let others handle it. Even if you're still sure you could do it better.
I had a similar cycle of tutorials, resources, and never quite getting it. Then a few years ago I took the MITX 6.01 [Introduction to Computer Science and Programming Using Python](https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-9) It was a temptation to skip over the early parts that I was already familiar with, and to waffle on the harder exercises later in the course. But by then I was desperate to get my head around Python and so I ground through, following the course as presented. In the end, it paid off; it was the course that truly broke me through to the sunny uplit lands. Well, not quite that dramatic, but it was literally the turning point. So many courses and tutorials don't teach you the underlying computer science basics, which this course does. It's not a Python course, per se, or a CS course, but a mix of both. It really builds a solid foundation of what you'll later use, but that may only be clear in retrospect. After taking the course, then keep working on interesting problems. CODE EVERY DAY!
I'm not sure if I totally agree with that. As much as speed is preferred over something a bit slower, having Flask already decked out with some great features makes life easier for people like me (or projects that are a bit simpler avoiding overhead and complications). I love that something like this is out in the wild!
I added it to my to do list, thanks!
I believe the best thing to do is to come up with a project that is interesting to you. If you are interested in the goal you are trying to achieve then you will be dedicated to working on it. You will learn and remember a lot along the way.
It depends on what you already know! Of course, Python knowledge is required. If you're looking for help with tooling (setting up the library for distribution, testing, docs etc.), I can't recommend [Cookiecutter](https://github.com/audreyr/cookiecutter-pypackage). Otherwise in terms of actual library design, my advice would be to look into the libraries that you use and think about what makes them effective/ineffective.
Nice and simple. I like it.
I love you. Thank you for your effort. 
I totally agree there's nothing python3's asyncio has over go. But if they have comparable performance, why bother to use go? As to async/await vs go/channel, I don't think one is clearly over the other. Just different paradigm. I personally think async/await is a little easier to understand. Cpu intensive task are usually done by C extension in python, or cython. I doubt go can have performance edge here. Developing might be a little easier with go. In summary, the whole thing is just another choice. I can't see it as "much better" in any of the circumstances, it's just youtube's choice going forward with their legacy python 2 code. But I like the fact we have one more option.
Two-factor needs to run a script on the server to ask some question of the person trying to log in, like the number currently on their timer token, or what they just got in SMS.
I'd still stick with plain old python3 -m venv. 
you guys spelt what wrong
Not two factor like with the authentication app on my phone, I'm talking about uploading my public key to github and using my private key to authenticate... and if that is this what this new feature is.
I second this approach, some people 'just get' programming, But many people really need to know the 'why' of programming before they can fully grasp the 'how'. If you can start leaning the basics of computer science( except pointer math, f that) you can usually break the wall and start running. 
PyCharm does support key auth in the way you've described. However it requires you to enter your private key's password into PyCharm itself. That is not a secure way to go about it. This change will be adding support for a key agent (ssh-add in linux, pageant in Windows, etc...) to handle the private key portion externally using trusted, audited tools.
I still need to do research into setting up a PEP 503 simple repo, but I have used a local directory before (via [--find-links](https://pip.pypa.io/en/stable/reference/pip_wheel/#find-links)). If this is just an internal thing, the simplest thing to do may be to just dump all of the package archives into a network-shared folder and add: -f file:///path/to/directory to your requirements.txt file. I haven't tried this before, but if you have a simple http server with directory browsing, I think --find-links can parse that as well.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
https://www.continuum.io/anaconda-repository
conda is a package/environment manager. You can store anything on anaconda repo, not just conda packages or python packages. You can even store pypi packages and point pip to your internal mirror (https://docs.continuum.io/anaconda-repository/admin/mirrors-pypi-repository). Some other examples are r (http://conda.pydata.org/docs/r-with-conda.html) and binaries (postgresql for example https://anaconda.org/conda-forge/postgresql)
Edited my comment. I (and presumably others) was just struck by your arrogant tone I guess. I'm sure its a fine library.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
IMO the way to go is to learn how to setup an existing SMTP (sendmail, postfix, email, etc) service to receive your mail, then use Python to retrieve mail from the mailbox you set up, or have the mail system run your script. Many SMTP daemons have the ability to execute arbitrary commands or send a copy of a message to a socket at delivery time. Trying to write something to actually be a legit SMTP service is going to be very involved. If you have full control of what send the mails, maybe skipping the email part is better. HTTP or raw TCP socket may be better suited to your needs.
This is great! Just took a brief look and it's exactly the sort of thing I've done myself over the years, but not as good as this. Nice work.
My question is what's your hypothesis? You can collect any data you want, but what are you looking for in your analysis? If you think there are shills, you risk torturing the data until you find them. You should have some idea, in advance, of what you're looking for, and that will inform what data you need to collect. 
You want devpi. Multiple virtual repos, with pull/push behavior and optional 'immutable' (a given version is only allowed to be pushed once) repos for those whit that sort of production need, along with a flexible plugin system for auth hooking. It also has transparent caching pypi mirror support, on top of all this.
nice 
I thought the idea of Sanic was to be Flask-like but fast and fully asyncio based. There is no extra complexity or overhead besides being newer technology. I don't see why you would want to build new framework or applications on old slow technology if newer stuff is coming over the horizon right now.
Doesn't really have much to do with python. Of course it can be done. You have to think of the algorithm first. In other words, assume you have all the data that you can gather. What are you going to do with it step by step? The implementation in terms of data gathering is fairly simple.
There are python libs to retrieve mail using imap of pop3 (though I would stay away from pop3) but there are easier options. I would use the good old procmail and set up a recipe that pipes all mail through your python app. 
I posted here because I was thinking it it was the most appropriate sub (I'm not a programmer beyond HTML). But as someone else pointed out there is an API call that can do this, but still beyond my current level of knowledge. It was more a question in theory than practice. Now I give it a thought on implementation.
I read this like someone was going to charm a handsome agent with flowing brown locks
that part is to be worked out later, but I'm sure it could be figured out where at the very least you could work on getting a list of user names that are suspect to keep track of ... but that leads to the very real chance of 1960's level red scare today. So yea, it's a fine line to balance.
That is now the plan, I just wanted to know it was possible before going to the next step of writing out criteria in detail that would need to be evaluated. 
Seems good. Now if only there was a fix for [this 4 years old syntax highlighting issue](https://youtrack.jetbrains.com/issue/PY-8246).
Maybe scrape Wikileaks?
Should be in the "What's everyone working on this week?" [thread](https://www.reddit.com/r/Python/comments/5ma22s/finding_girlfriends_social_media_habit/), or the "how do you use python to automate stuff" that comes up every so often. &gt; "Dear reddit. This week I made a script to automate me creeping and plotting on my girls social media profile."
Reading this made me finally admit to myself that that's what I'm going through too.
SimulateMe! teaspoonasaurous
As someone that didn't delegate enough and burnt out, I can confirm this. As Kenneth says, it sneaks up on you too.
I would point out this doesn't work in Python 3.x. For those that want to make it work in Python 3.x, replace positions.iteritems() with positions.items. Also, instead of hard-coding or manually typing all the column names, I would do: y = df.columns.drop(['Year']) 
I created a small POC to run remote function calls based on docker and I am improving it right now (fixing some bugs/enhancements)
I have a whole pile of unused 700K floppy disks sitting in the cupboard doing nothing, so I thought I'd make a backup of the internet.
Hey, I am new to python also and would love some project ideas. I know the very basics but haven't been able to think of anything that I could develop that would be useful yet. 
&gt; Wouldn't it be great if there was a github repo No. For fucks sake, github != the internet. Not everything needs to be concentrated in the hands of one company.
This will not work if the series are of different lengths :-(
Hm, that's a good move as well. Doesn't solve the Dyn outage situation, but fixes the internal packaging situation.
My mate has a boat. He pays USD $10 per megabyte for internet. Wikipedia on USB sticks would be useful to him. With the size of modern web pages being what they are (google is 800KB uncompressed) it costs, literally, several dollars just to google something.
Scipy wouldn't work?
Thanks :)
 SimulateMe! jaiminr
Sorry, I didn't keep using VScode, I switched to Spacemacs with live code for Python.
Psync is linux only?
Don't get me wrong, I really like PyCharm and also appreciate that you guys are responsive here. I've just tried out semantic highlighting and it's a step in the right direction but still, coloring local variables and method calls is something that would make code so much more readable. 
I'm currently adding python support for package drone, so in the near future that can be an option.
I use Python to automate away overhead (like end of shift reports and sharing scripts) and to glue stuff together. Now if only I could stop trying to write stuff in BASH before giving up and being able to quickly bang it out in Python and just use Python from the beginning. :P
What am does package drone support? Could be a one package install for us 
The only arrogant tone was in the message you edited, imho. If you do not use GitHub on your phone do not comment GitHub links. It's easy.
I would just ignore anything that didn't come from the email addresses I specify. I wish I controlled the systems sending the emails but I don't, would love to avoid email altogether
Imho even better!
Right, but this particular project makes it more like Django, being batteries included and all. I would just use Django if I needed everything.
Thanks. Once I did that and ran the file in PyCharm, i get this output: 1 16088+San+Pedro+Ave.+San+Antonio,+TX+78232 list index out of range 2 10811+Town+Center+Dr+San+Antonio,+TX+78251 list index out of range 3 25615+N.+US+Hwy+281+San+Antonio,+TX+78258 list index out of range 4 8230+N.+Loop+1604+W.+San+Antonio,+TX+78249 list index out of range Process finished with exit code 0
Could you upload the code to pastebin? It's better to read it that way
How do you collect the geo coordinates? Can you use lat long ? Most smartphone photos these days come with lat long.
You did change the key right?
Yes, Pycharm should work fine
What you could try is to print(jsonresponse) and check what part of the response is different from the written code
&gt; when you look at the list of what's possible for the next version, and time available, it's humbling. Sounds like our dev calendar at work! "We need you to move this mountain. Here are two people for your team. The only tools we could find were these plastic spoons. Good luck and godspeed!" I have it on semi-good authority that the other tickets will be considered for later in the year or possibly early next year. Still a long wait, but at least it is in discussion now! 
Thanks for the link. Didn't know that Google worked on CPython! It seems that the real issue was not that it was rejected; instead, not enough people inside Google found it valuable enough to justify any further spending/development on it. This is sad. It seems that people who worked on Unladen Swallow were the founding members of Go.
The real problem (as I see it) with the script you've inherited is Exception handling. It's capturing any exception and suppressing what you need to know - what line is specifically causing the issue and what it might be. 2 options (that I can think of, being not super-advanced): 1) Remove the try/except block and let it just give you an exception. That will at least let you know which line in the block is tripping up (either line 17 or 18 is my guess). 2) Run through the Pycharm debugger. Option 2 is better I think. If you're going to be working with Python on even a sporadic basis, it will really save you time and effort. 
It's certainly possible to burn out because you code too much, like on OSS projects. But I would assert that it's even more frequent in companies. Programmers are sometimes pushed to their limits by their employers, without any real recognition in return. An employer will almost never tell you to work less. He might say: "Oh, you worked very hard. But we really need this before next week. Have a good weekend." Over a long time, this almost certainly leads to burnout. P.S.: Why wasn't it posted to /r/programming instead? This isn't specific to Python.
This is really cool, didn't know about the Requests library. Thanks for sharing.
It's an alright idea but I feel like this is the wrong approach. With this tool I now have yet another dependency in my projects. Dependencies are bad because they add at least one more layer of abstraction and, even worse, a potential point of failure. Of course the usefulness of a dependency sometimes outweighs these risks and obviously it's every developer's responsibility to choose wisely. I think this tool would do a fine enough job if it just generated and printed a command that you can put in your *Makefile* or *fabfile.py* because those are multi-purpose tools which are already well established and understood by the majority of developers.
/r/learnpython
Yeah, the first two are more personal things. Which is why I forked your development haha. Other things, settings should be placed in a separate file. This means that the API Key should be placed somewhere else like in a JSON, YAML, or XML file. But this isn't too major an issue.
It is definitely a more personal pursuit. I am doing it for learning purposes more than anything. I have never used powershell for debugging, but it looks like python can provide at least the same functions, if not more. Does that answer your question?
I actually thought about putting it on the first line in channels file, that would be easier to use. I might be updating the code soon and I'll try to incorporate your remarks. Thanks :)
Good luck with it.
How would it be different from Rstudio? Rstudio is installed on server and accessible from web browser. 
thanks for the suggestions. I will check with pep8 and the other tools mentioned by PeridexisErrant. But I guess the naming of some classes and methods needs some improvement as well. So feel free to come back and work with me on this. 
noob to python question. Why better? Arguably more readable and clear, or would it be quicker / less prone to error/ some other reason ? 
For this I've just collected the geo coordinates manually from places we visited along the way. Taking the geo coordinates from the pictures is a great idea!
Thanks! What libraries have you been using to perform these kind of tasks?
Awesome, thanks for the tip! Will try it and report back when I get some free time again.
Edit: I'm the dumb, totally missed example log message And that does display in slack just fine, so I am not sure where issue is either, sorry :( I would still try sending just a known good string, like 'test' in the loop to just double check it's not the message itself. Only other thought is that SlackChannelHandler might not be threading / multiprocessing safe (depending on what WSGI server you use with Flask) Original: What is the content of `message`, could it possibly be something slack can't handle? Just wanted to say I don't see anything obvious wrong with it off the bat, especially if the log line above it is working and no exceptions are occurring. 
I thought about it without any solution in mind, but this is exactly the input i needed. Will add!
Good point!
True!
it's tough when there just aren't enough hands; that shop was drowning in technical debt and terrible management.
Also this might also be a great solution for anyone trying to work with Python and R in the same environment: https://github.com/mkuhn/dict *dict* provides dictionaries with arbitrary keys and values for R. Other solutions in R, such as named lists, the hash package, or environments only let you use strings and, partially, numbers as keys. However, it is not possible to use vectors like c(1,2,3) or c("A", "B") as keys. This package provides efficient implementations of standard Python-style dictionaries and a defaultdict for numeric vectors.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/bioinformatics] [\[X-Post \/r\/Python\] For data science: Check out the Feather package. Feather is a language agnostic format for data frames in Python and R.](https://np.reddit.com/r/bioinformatics/comments/5mga17/xpost_rpython_for_data_science_check_out_the/) - [/r/statistics] [\[X-Post \/r\/Python\] For data science: Check out the Feather package. Feather is a language agnostic format for data frames in Python and R.](https://np.reddit.com/r/statistics/comments/5mls43/xpost_rpython_for_data_science_check_out_the/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
What is `SlackChannelHandler`? Google fails me here, so I assume you wrote this handler by yourself. Could you paste the code?
I got bored and went ahead and modified your code. Here is my [version](http://nbviewer.jupyter.org/gist/anonymous/fa33e0eb28ca8948e63504e942d90c03) that works where the series are of different lengths.
Define "worked"? As in, doesn't log anything to stdout? Causes an exception? etc
Turns out the logger was silently disabled because its name didn't match the module.
The error is `list index out of range`, which is happening at `jsonResponse["results"][0]`. You're trying to access list position 0 of an empty list. It looks to me like your API key is bad. Trying the first address with a good key gets this, which wouldn't result in any errors. ``` { "results" : [ { "address_components" : [ { "long_name" : "16088", "short_name" : "16088", "types" : [ "street_number" ] }, { "long_name" : "San Pedro Avenue", "short_name" : "San Pedro Ave", "types" : [ "route" ] }, { "long_name" : "Uptown", "short_name" : "Uptown", "types" : [ "neighborhood", "political" ] }, { "long_name" : "San Antonio", "short_name" : "San Antonio", "types" : [ "locality", "political" ] }, { "long_name" : "Bexar County", "short_name" : "Bexar County", "types" : [ "administrative_area_level_2", "political" ] }, { "long_name" : "Texas", "short_name" : "TX", "types" : [ "administrative_area_level_1", "political" ] }, { "long_name" : "United States", "short_name" : "US", "types" : [ "country", "political" ] }, { "long_name" : "78232", "short_name" : "78232", "types" : [ "postal_code" ] } ], "formatted_address" : "16088 San Pedro Ave, San Antonio, TX 78232, USA", "geometry" : { "bounds" : { "northeast" : { "lat" : 29.58818449999999, "lng" : -98.47324859999999 }, "southwest" : { "lat" : 29.5872476, "lng" : -98.47393869999999 } }, "location" : { "lat" : 29.587716, "lng" : -98.4735937 }, "location_type" : "ROOFTOP", "viewport" : { "northeast" : { "lat" : 29.58906503029149, "lng" : -98.47224466970849 }, "southwest" : { "lat" : 29.58636706970849, "lng" : -98.47494263029149 } } }, "place_id" : "ChIJ2-8dVQ2KXIYRNOqgKlpA4Ts", "types" : [ "premise" ] } ], "status" : "OK" } ``` ----- But with a bad key: ``` { "error_message" : "The provided API key is invalid.", "results" : [], "status" : "REQUEST_DENIED" } ``` which would definitely result in the error you're seeing. You might want to check for `jsonResponse["status"] == "OK"` before looking into results. But that doesn't actually solve the problem, just lets you report on it.
I don't doubt it, but as you said it should be a huge red flag. Potentially to the degree of assuming one can always delegate and job hunting being the automatic reaction to being told you can't. 
Very glad you figured it you! Yeah, I actually [wrote a blog post about it a few weeks ago](http://www.codecalamity.com/?p=40), and mention that I like configuring loggers through code directly so weird stuff like that doesn't happen. (Even have written a [standard setup I put on PyPI](http://reusables.readthedocs.io/en/develop/log.html#reusables.log.get_logger) so I don't have to worry about it anymore). 
&gt; have not heard any professor speak of hyperparameters You might be due for a refund. [Even simply searching for "hyperparameter" in Google Scholar](https://scholar.google.com/scholar?q=hyperparameter) yields 40k results, it's a well-established term.
It's true, unfortunately this is for production code so logging has to be adjusted without going through a whole deployment process. 
Only has stats for RB, QB, and WR at the moment but I'll be adding the rest
In most cases you're probably right. However logger is used in different places in this file. (every file has a `logger = logging.getLogger(__name__)` at the top) The things that are being logged to slack are not the same things that get put in the access/info logs. It's acting as a live feed of what team leaders are doing to our saltstack managed servers. It's easier to treat slack as a logger, even though for this case it doesn't have to be, because it can be adjusted via logging config without redeploying code. logger = logging.getLogger(__name__) slack_handler = SlackChannelHandler(token=os.getenv('SLACK_TOKEN'), channel=os.getenv('SLACK_CHANNEL')) class BaseView(FlaskView): """ Base view for routes registered in this application. """ def __init__(self): self.app = current_app self.cls_name = self.__class__.__name__ def before_request(self, name): request.view = request.endpoint request.view_class = self class TrackedView(BaseView): """ Changes that happen in this view are tracked and sent to an external slack channel as well as a separate logfile. """ LOGGERS = {} def __init__(self): super(TrackedView, self).__init__() self._track_messages = Queue() def after_request(self, name, response): if self._track_messages.empty(): return response log_name = '%s:%s' % (self.cls_name, name) if log_name not in self.LOGGERS: log = logging.getLogger('slack.' + log_name) log.addHandler(slack_handler) self.LOGGERS[log_name] = log else: log = self.LOGGERS[log_name] uname = current_user.get_id() uname = 'Anonymous??' if not uname else uname log = CurrentUserAdapter(log, {'username': uname}) while not self._track_messages.empty(): message, level = self._track_messages.get() log.log(level, message) return response def track(self, message, level=logging.INFO): self._track_messages.put((message, level)) 
Thanks oh I'm sorry I had both subs open but posted to wrong one. Will close this one out soon then. Fro some reason I can't run sudo. I'm ssh'ing into my box as non-root, then I have to run su command. I forget what command I ran. I should probably just blow away the box and start over.
You should post this in r/machinelearning
&gt; how to attach handlers to a universal prefix Loggers "inherit" levels and handlers from their parents, so to attach handlers and set levels for a common prefix, as long as that prefix is delineated with a dot, then it works as designed. If you set a level and add handlers to logger 'foo', then that level and handlers will apply to things logged to loggers with names 'foo.bar', 'foo.baz', 'foo.bar.baz' etc. You don't need to specifically apply them to every logger in the hierarchy below 'foo'. If you apply them at the root logger, they will apply to all loggers in the system. This is a pretty basic feature of logging; it's been there from day one and is reasonably well documented, so have I misunderstood what you're asking? &gt; I've come to find out anything not explicitly defined in logging.json will also get disabled as soon as the configuration is loaded. That happens when you haven't specified `disable_existing_loggers: False` in your logging configuration, which is documented [in this section](https://docs.python.org/2.7/library/logging.config.html#dictionary-schema-details). &gt; because it constantly surprises with it's weird configuration and behavior patterns The two things you've mentioned you had trouble with are addressed in the documentation, so if you feel particular parts of it need clarifying, then you can log an issue on the Python bug tracker with specific suggestions. (I maintain the logging package and its documentation.) The bit about disabling existing loggers says &gt; _disable_existing_loggers_ - whether any existing loggers are to be disabled ... If absent, this parameter defaults to True. That's in a section of the documentation entitled `Configuration dictionary schema | Dictionary Schema Details`. Not sure how to make it clearer - one would assume that part of the documentation would be given a once-over by anyone using the dictConfig API (even if not initially, then when things don't work as you'd expect). Because logging in general is not a completely trivial topic, there's a lot of information to get across to a wide range of audiences from casual script writers to those writing more complex apps for enterprises and such. One size doesn't fit all, unfortunately.
I'd be more than happy to. Ask me whatever you'd like.
Great idea! I'll take a look at robocopy. It'd be great if you could raise an issue so I can keep it tracked or, better yet, send a PR! Thanks!
That's pretty cool. Thanks for this. What do you think of the current demand for remote Python developers?
&gt; I maintain the logging package and its documentation. How do you mimic this pattern with dictConfig: `logging.getLogger('').addHandler(..)` ... it's not `root`, `""`, or `()` - I don't think it's possible.
 def hangman(word,max_guesses): print("This is hangman") letters_guessed = [] display_str = "" display = [] for i in word: display.append("_ ") display_str = display_str + "_ " print(display_str) result = False wrong_count = 0 while result == False: guess = str(input("Enter a letter :")) if guess in letters_guessed: print("you already guessed that letter") break if guess not in word and guess not in letters_guessed: letters_guessed.append(guess) if guess in word: print("\n") print("\n") index = [] print("Nice") for i in range(len(word)): if word[i] == guess: index.append(i+1) for number in index: display[number-1] = guess new_str = "" for i in display: new_str = new_str + i + " " print(new_str) if new_str == word: print("you win.") return new_letters_guessed = "" for i in letters_guessed: new_letters_guessed += i print("The letters you have guessed wrong are: ", new_letters_guessed) elif guess not in word: print("\n") print("\n") wrong_count += 1 print("nope u fucking idiot") print("\n") new_letters_guessed = "" for i in letters_guessed: new_letters_guessed += (i +" ") print("The letters you have guessed wrong are: ", new_letters_guessed) print("\n") print("You have " + str(max_guesses - wrong_count) + " guesses left.") if wrong_count == max_guesses: print("You have lost u retard") return 
That's a pretty vague question so I'll give you a vague answer: I spent every inch of space on my resume and cover letter hyping up any skill I had that I thought was transferable (problem solving, working in a team, learning new skills, etc.). I was also.. liberal with the truth. Don't flat out lie because you'll get caught, but if omitting something makes you a better candidate, leave it out. If you have more specific questions feel free to ask.
+1 for conda! Do it now, thank us later 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Not in the slightest. Its just another implementation to the language. And so is the recent python3 project that is underway to remove the GIL from within the Cpython implementation. ( in a way that doesn't compromise performance).
Slightly off topic, but what's the deal with programming fonts that have pseudographics not 100% line height? AMA request for anyone who uses them and is OK with tmux/vim/whatever windows having dashed edges. OP, I used to use Consolas specifically because it seems to be one of the very few fonts that get it right. 
The web happened. Around the time the project faded away, the new hotness was the web application. Web browsers with standardized features started becoming a thing. Ruby on Rails had just come out and Apple was shipping it with OSX 10.5. TurboGears had just come out and it was being used at NASA! Nobody cared about desktop GUIs anymore. It was all about the web. Eclipse had PyDev, and Eclipse was far more suited to this kind of programming, since it had some support through plugins for HTML, CSS, and JavaScript. In 2010 PyCharm came out and flipped the whole scene over. Nowadays you use a lightweight editor like Vim, that other editor, Sublime, Atom, Visual Studio Code, etc., or use use an IDE like PyCharm or maybe still Eclipse. I hear normal Visual Studio has really good Python support, too. If you *still* want to do desktop GUI work with Python, I recommend Kivy. It's pretty sanely put together, and it has mobile app support.
Problem is I'm on a very restrictive system to external resources, so if it's not standard in python 3.4 library or in the anaconda libraries, it's a pain in the but to get on the system. 
You're always going to have a single point of failure in traditional applications like web browsers. But if it's a custom client-server app you have some flexibility. Simply spawn 4 or more servers, and have your client pick one randomly. If it can't connect to one, try another one. At that point the big issues is data-integrity and race conditions. Storing all your data in a proper database would go a long way towards making that safe, making it so that you don't have to have those server processes communicate with one another, instead they all just query the database. Trying to keep state synchronized between your different server processes is an excersize in madness. So instead of trying to keep the data synchronized ourself, we throw it in a DB. Random Connection +------+ +---&gt; |Server+-------+ | +------+ v | +------+ +------+ +--------+ |Client| |Server+-&gt; |Database| +------+ +------+ +--------+ 
&gt;Wouldn't there be performance impact in speed with the db middleman. That depends a lot on the work load. What you're describing sounds a lot like a task-queue. There's a pretty great python task queue called celery. If you're interested in rolling your own, a message-queue server like rabbitMQ could make your life a lot easier.
Bleh. Well it seems to me like you're always going to have reliability problems, because you can't rely on known-to-be reliable software. So what you need to do is minimize the amount of code that's in the critical path. Build a small server and ensure that it's as reliable as possible. What I'd do, is I'd have 3 different classes of processes. A listener, a processor, and a core. All your core does is spawns new listeners and processors, and maintains a list of "queue" objects. You need some centralized thing to manage stuff unless you want to implement some kind of custom data-locking mechanism. The most intuitive seems to be to use python multiprocessing an the Queue class. Launching something from that core could be as simple as from multiprocessing import Process, Queue import time q1 = Queue() q2 = Queue() def counter(q, sleepTime): counter=0 while True: q.put(counter) counter = counter+1 time.sleep(sleepTime) if counter == 10: raise Exception('Crash for demonstration purposes') p1 = Process(target=dnsFeed, args=(q1,1)) p1.start() p2 = Process(target=dnsFeed, args=(q2,2)) p2.start() while True: if q1.empty() and q2.empty(): time.sleep(0.5) if not q1.empty(): print("q1 says: "+str(q1.get())) if not q2.empty(): print("q2 says: "+str(q2.get())) In this examples the queues act like a thread-safe data type, to handle all our locking and the like.
That's my favorite too!
[Inconsolata](http://levien.com/type/myfonts/inconsolata.html)
Came here to post this Source sans pro is super clean too for everything else.
Ubuntu Mono is my favorite regardless of the platform. I've tried others, but I'm too used to Ubuntu's fonts at this point.
I did all my reports for college in the Ubuntu font if they didn't specify ~~Times~~ another one. I find it to be very easy on the eyes.
DejaVu Sans Mono. Its quite pleasant, and my friends have an excuse for Initial D memes.
How does this compare to simply dumping your data frame to disk in one language and reading it into another? I imagine you need to have some substantially sized data before you notice a significant difference - unless I'm missing something more that this does.
+1 for FiraCode. I've been using it for about a year and a half, and the ligatures are amazing. They're so clean that it just *works*.
Source Code Pro or Gohufont
This guy is super cringy, but gives a good overall demonstration of the basics of Q learning. TBH I think that the demonstration is too high level to understand what is really happening, but that may just be me.
Ooh, thanks for this!
Thanks. So for Crawlera it looks like it is made to download entire pages. Can you still integrate it with Python? You would just send your requests through the crawlera server? PS sorry for my interrogative tone. I am just curious.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I like hack. https://github.com/chrissimpkins/Hack/blob/master/README.md
Fixedsys with the color scheme of Turbo C++ 3.0. I'm old school :P
IBM PS/2 thin4 : http://int10h.org/oldschool-pc-fonts/fontlist/#ibmps2_isa Stumbled on it when fiddling around with DOS font changing interrupts (or might've been ansi.sys codes) and loved it on a then-13" display. Recently found it again and have been using since.
I recently switched from Source Code Pro to [Iosevka](https://be5invis.github.io/Iosevka/).
RemindMe! 1 week
I will be messaging you on [**2017-01-14 08:47:17 UTC**](http://www.wolframalpha.com/input/?i=2017-01-14 08:47:17 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Python/comments/5mif4u/what_font_do_you_use_for_development/dc42k8p) [**6 OTHERS CLICKED THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Python/comments/5mif4u/what_font_do_you_use_for_development/dc42k8p]%0A%0ARemindMe! 1 week) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dc42khu) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
+1 the most readable and clean font, in my opinion, though it also depends on preference. 
3.3 was good and 3.4 was as good as 2.7 and 3.5+are just awesome. As a noob python developer, I'm glad I know legacy python as good as I know python. 
No problemo. Yeah, use Crawlera like a proxy to d/l pages, then use lxml/bs4 or whatever to extract stuff.
Very nice.
Another vote for source code pro 
[PragmataPro](http://www.fsd.it/shop/fonts/pragmatapro/)
It renders perfectly on Linux Mint &lt;3
Questions like these don't belong here but in the /r/learnpython subreddit.
Hehe, two years ago I started writing a GTK GUI for the notebook itself so you wouldn't need a browser running. At that time ipython 3 came out and then 4 and now it's jupyter so the project just stalled because I didn't have time to work on it. Maybe I'll get back to it.
Trying to understand how multithreading, multiprocessing and queues work in Python and write a blog about it.
yeap, "k" is wacky but its a very readable font, issue causing stuff like I and l or o and 0 are easily distinguishable, and it has that bit of own feel that makes it not boring
Ansible?
Maybe in really missing the boat on this, but what exactly is the use case for ligatures? Looking at the go code I'm not immediately seeing how this font improves the readability. I think aesthetically the font is great. I love the way it looks. I didn't realize that there were people designing fonts out there like this, or never thought about it.
I would use Fira Code if it wasn't for the `==` ligature that just looks like a *slightly* wider `=`, which throws readability out of the window.
I'd really love to try this one, but $200 is way too much for a font I might be sick of in a few months 
-misc-fixed-medium-r-semicondensed--13-120-75-75-c-60-iso8859-1
I like Ubuntu Sans-Serif. I use it for normal documents. It's a very modern, unique and pleasant font. But unfortunately I Ubuntu Mono is not my favorite. I prefer Inconsolata.
Also using Fira Code / Fira Mono and I love it. If I'd ever create a monospace font, it would look like Fira.
Wow, this looks great!
Got it! Sorry about that , I'm new here
This looks awesome. I like that I can actually tweak and regenerate the font
Piker. If you ain't programming in wingdings or dingbats, go home.
Consolas
Tewi
It's not only possible, it's documented. The section I linked to above also says (just under the bit where it says `loggers - ...`, which I assume you're familiar with): &gt; `root` - this will be the configuration for the root logger. Processing of the configuration will be as for any logger, except that the propagate setting will not be applicable. That seems pretty clear to me - if it's not clear to you, then tell me how to make it clearer. Did you follow the link I posted? Whether it's logging or something else, if you don't read the documentation, you might have a bad time, and maybe not just because of "weird configuration and behavior patterns". ;-) 
I am very bad at spotting the differences, but switching forth and back a few times, I think I will give it a try. I really like the dotted zeroes, so it's Office Code Pro D for me :D
The `==` isn't an issue in practice. However, I don't use languages where assignments are expressions (that are valid in e.g. an if statement) without a linter or compiler option preventing bug-prone usage
What's wrong with virtual box?
"Python is, at the very least, turning complete." and is python turning completely to the left, or to the right ? are square wheels turning incomplete ?
I use typehint on a project for autocompletion in PyCharm. I've methods that are called by a framework that look like this: "def my_func(request): ..." I use typehint to get avalaible methods and attributes.
[https://github.com/powerline/fonts](https://github.com/powerline/fonts)
I dual boot windows 10 with Ubuntu. Works fine for me. One for developing one for gaming.
Now switch to qt.
&gt;Even though I've never used a mac, I'm convinced Mac OS is a way better unix-y dev environment than Windows will be for the foreseeable future. Or...you know just use Linux, unless you want to explore iOS development then obviously buy into Mac. Not being a dick, just don't want you wasting pennies. Have you looked into the Mac minies? It's not exactly portable, but it's half the cost and seems fairly decent for a dev machine.
This, but did not realise I had custom font on when using Atom.
Back when I was in college, that's what Courier New was for. You could bump your page count up by 10% by just making that change.
I started using this monospace font called Hack. I always used source pro but I liked this in my editor for some reason.
And... I'm feeling stupid for asking that =/
U fkn wot mate?
It's probably strange but I friggin love the question mark in Consolas. I've even gone so far as to customize other monospaced fonts just to bring over Consolas's question mark.
Why can't pycharm simply use the python from within the windows subsystem? It's capable of even using python on a remote server so it's not as if it is tighly integrated.
Hi aphoenix, Thank you for letting me know. I assume /r/LearnPython is a board where I can expect to learn python, and while I appreciate your trying to keep boards on topic, I challenge the assertion that my topic is not on topic. What's the difference between my posting this and my posting "Hey guys, look at this new IDE that came out to help us with python!"? The point of this topic is to share a tool I've created and should people wish to give me ideas for how to improve it, I welcome that. I'm not asking for help with python, I'm not asking to learn python. I'm not asking to teach python. I'm simply saying "Here's something that I think can be helpful. Is that rightfully so?" With that in mind I understand if it still doesn't make sense on /r/Python since you have your rules in place and obviously you have stuck by them far longer than me, so which subreddit deals with Projects and news to support python that I can post this in?
1. Inconsolata-g 2. Pragmata Pro 3. Menlo
I saw this font and likes it alot
Wow. That's a gorgeous font.
Some of the letters are distinguishable but that depends on font size too. If the size is too small i and l start to blend together. Haven't tried it for myself though.
Remind me! 2 days
I got WSL working about a week ago on the Surface Pro and for the most part it works great. However, I do a ton of development that involves TCP/IP and network interfaces and I've noticed some of the features are not implemented yet.
It doesn't matter where the tool is installed. It is clearly intended to have a *.psync* in your project. A project doesn't only consist of application code, all infrastructure code is also part of the project. Infrastructure code is how you build and deploy an application and run tests for it. Now, if you have a *.psync* file in your project and you're using *psync* to "deploy" your code somewhere then you depend on it. If you decide to not use *psync* anymore then the *.psync* file should be removed and it's not a dependency anymore. This becomes more obvious when you're working in a team. To be most efficient, especially when onboarding new team members, it is strongly desirable to have a streamlined development and deployment workflow. It'd be madness to let everyone have their own way of building an application, running tests for it, and deploy it. That's why you decide for one single workflow that everyone uses. If you decide to use *psync* in your workflow then from then on it's a dependency of the project. Coming back to my original point, with a dependency like this you add another layer of abstraction that all team members have to understand, this is cognitive overhead that doesn't need to be there. Adding a dependency is also always risky because you don't know for how long it'll be actively maintained. This is especially relevant for wrapper tools because it's absolutely vital that they are kept up-to-date with the tool they are wrapping. (/u/lazywei, this response is for you as well)
LibreOffice was responsible for all of my reports too. My uni's printer system didn't have a Linux client and only supported MS Office file types, PDF, and a few random others. Fortunately, they had a secondary method of printing that involved emailing a print server, so I was able to make do with my glorious half of my computer 9 times out of 10 by exporting the PDF and emailing it. I was planning to teach myself LaTeX and using only that for my final year of college, but I got busy and never really figured it out. Now I don't have a reason to write papers anymore, so my motivation to learn it is gone.
Not disagreeing, but according to its ligature documentation Fira Sans will convert `=&gt;` to `⇒`, it's `&gt;=` which is converted to a `≥`. Converting `=&gt;` to `≥` would "break" Haskell since that's the sigil between a typeclass constraint and a type in signatures.
My taste changes every few months. Currently I'm using [Iosevka](https://github.com/be5invis/Iosevka) which I see as a less distracting version of Inconsolata.
I'll second Input mono. The website allows you to build in some character specific preferences, such as how you want the zero glyph to appear. The font is very clear and easy to read. No matter what fine you use, I've found that switching to a font with very distinctive glyphs has reduced the number of typo bugs in my python and shell scripts. 
No biggie, could have been an other ligature, hopefully it's one they've since removed (looking at the changelog they do seem to do that regularly).
that's specific 
Use docker!
If you want a pixel font I recommend terminus font
This has been my default for over two years now. Great don't, would recommend!
Wingdings.
I loved this so much that it's my default Ubuntu system font. So much easier on the eyes.
Go to the [ Lxml ](http://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml) heading on the page. Click the link that matches your python version to download the wheel. For example I'm using a Python 3.5.2 64-bit so I choose the lxml‑3.7.1‑cp35‑cp35m‑win_amd64.whl link. It sounds like you may have tried this and it wasn't working for you, he's got some advice: &gt; If downloads fail reload this page, enable JavaScript, disable download managers, disable proxies, clear cache, and use Firefox. Once you've downloaded the file, then you can use pip to install it. Open up a command window. If you're using a virtualenv, make sure you activate it; but if you don't know what a "virtualenv" is or if your not using one, then don't worry about it. Run pip install with the path to the file you just downloaded (below is my example) pip install C:\Users\emlos\Downloads\lxml‑3.7.1‑cp35‑cp35m‑win_amd64.whl Once pip is done, you can check it worked by opening a python interactive session and doing &gt;&gt;&gt;import lxml I would keep a copy of the wheel somewhere on my machine. Gohlke has been doing this for a while, but you never know when that page might disappear or become unavailable; and you may need to re-install python and lxml someday.
It's worth noting that 'hack' is actually just a very slightly modified version of DejaVu Sans Mono. Check out [this image](https://camo.githubusercontent.com/96faf2459547b2aab1d5d8855887e0acd8232155/687474703a2f2f692e696d6775722e636f6d2f3853714c366d542e676966) to get a sense of the difference (the red square indicates hack). DejaVu is generally available on most any Linux system out of the box, which is convenient. Personally, I also happen to prefer DejaVu, so it's worth checking out. On a related note, Apple's 'menlo' is also just a modified DejaVu Sans Mono.
I use VScode
Honestly I find it just doesn't quite fit my taste when I use it as a system font. I use Arch/Xfce and I have the Ubuntu font set as my system font and Fantasque-Sans-Mono for my terminal/vim etc. But if it works for you then that's awesome!
I'm not really sure what it is about the font but for some reason I love it as a programming/terminal font... I have tried quite a few fonts across a long period of time and I always find myself coming back to it.
tl;dr `dev-requirements.in` or `prod-requirements.in`
That's why I wrote Fira Code.
&gt; Check out this image to get a sense of the difference (the red square indicates hack). Wow, didn't know that. It's pretty clear they just tweaked *i* and balanced spacing for thinner glyphs (brackets, *r*...). Everything else is exactly the same.
I thought this would get me to give in to windows 10 but when I was writing a really long python script and it forced restarted for a update I nearly punched a hole through my monitor.
For those who use vim powerline: https://github.com/powerline/fonts/tree/master/SourceCodePro
Source Code Pro in Pycharm and Inconsolata-G outside the IDE. (Theres seems to be a problem with user fonts in Pycharm, they become non monospaced).
&gt; I like how it's compressed horizontally I'm the opposite, I can't work with this sort of font, they strain the eye and the brain. Maybe I'm just too old.
I like it but it is ruined with a Retina screen.
For python, anaconda makes more sense.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Cython or Numba may also be useful for speeding up and multithreading
[You shouldn't need that anymore](https://github.com/adobe-fonts/source-code-pro/issues/43).
One big difference is that Python 2 life support will be switched off in 2020.
Also try [inconsolata-g](http://leonardo-m.livejournal.com/77079.html) which fixes the bad stuff in inconsolata and inconsolata-dz [Fixes](http://www.fantascienza.net/leonardo/ar/inconsolatag/two_inconsolata_20090213.png)
Why not pychess? Or am I mistaken about what that library is for? A guy on r/chess recently made an annotation/evaluation. If you search over there I'm sure you can find it. I never got it to work though.
Read this at work so couldn't comment. Really interesting how such a simple algorithm can be used to deliver some real value. What other methods other than regression could you have used? 
I use WSL a lot and it's close to a perfect unix environment for most needs. There are a few issues here and there but no huge dealbreakers for me. I use python on both Windows and in WSL. Mostly just to quick test if my code is going to work cross platform without needing to spin up my VM every time. 
that style of letter i ... is there a name for it typography? .... one looks like regular serif ...what's the other one?
I'm using multiprocessing not multithreading
I'm not sure. I primarily use Python, and I just started using R. I intend to use Python to process my data and R-shiny to visualize it. So I'm going to use feather as a medium to read/write data in between the two. Is there a better way of doing this?
Just ran my ansible deployments with Jinja 2.9.1. So far so good. It's great to see Jinja back on regular release track. Personally I feel more confident about software that's released often - even if at risk of an occasional regression. 
What is this a TL;DR of? Separating development and production dependencies is something else entirely. My point was about avoiding or at least carefully choosing dependencies no matter what they are for.
can you send me the book I am a bit late
My daily driver: https://github.com/be5invis/Iosevka
I see. I do that some as well, but I'm also dealing with a lot of biological data that you can get from [NCBI's](https://www.ncbi.nlm.nih.gov/) website. So I'm dealing with various sized data files in different formats, but there are hundreds of them. This just seemed like a streamlined way of directly interpreting the data without having to make my own class and methods.
[Inconsolata](https://www.fontsquirrel.com/fonts/Inconsolata)
Well i have played around a bit with it and i think it is kinda useless. Everything works as expected and it allows me to use git and some console things that i'm used to in linux. Just one important thing: Python Development works just fine in the windows command prompt. At least in my experience. For C, C++ i actually enjoy many great console based tools (cmake, g, g++, git, .. ). Which is nice to have in the WSL but to be honest if i do windows development i don't want to rely on linux tools, that would just make things more complicated for other people that might use my code. Some people recommended installing linux and dualboot. It will work, but as long as i don't work with hardware i enjoy working with VirtualBox on a Linux VM. I just don't like rebooting for trying something in linux and a VM is only a double click away and you can just switch between windows and Linux on the fly. It's free and takes like 5 Minutes to set up a Linux VM, maybe 15 if you do it for the first time. It's basically a supercharged WSL. That's kinda why i think the WSL is almost useless if you have a vm. The only thing that's nice is that WSL can access all your Windows files without problems.
Doesn't pro come with Hyper-V? Anybody use that for a Linux environment?
Me too. Everywhere. 
You don't have to import lxml as BeautifulSoup does so on its own when the parser is specified. For something like this the default parser `html.parser` will probably do fine and not require users to have lxml (Which when installing requires a compiler unless installed via wheel/exe) bs4 is supposed to load `html.parser` automatically if it can't find lxml but this sometimes causes strange behavior, I found that doing a try/except was the best method. 
Just wanted to share this now that it's being used a bit in production. It's a Qt style signal/slot system using just Python with no external dependency. Hopefully useful for someone else too. Also my first Python package available on pypi.
This is for fun, but I'm also using it to generate passwords for my online accounts. The script uses hashlib's pbkdf2 function - I wasn't familiar with passlib before your comment. I quickly looked through the passlib documentation and didn't see anything that does exactly what I am trying to do. It's possible that I missed something. 
how about pypy? Cython require me to re-write the code right? pypy should work out of the box if i understood correctly
I didn't realize I didn't need to import it but I did see the default was the html.parser. I had some trouble getting that to work right so I opted for lxml. Thanks I'll fix that 
hmm, 1, L, l, I and i look reasonably different. 0 has a dot in it and looks different to o and O. Very nice
Yeah there are some weird inconsistencies between the different parsers. Sometimes one just works better over the other. ¯\\_(ツ)_/¯
Noto Mono or Source Code Pro
Yeah that's another good option. There are a lot more I didn't list and they all have their strengths and weaknesses
I think you should just dual boot win/linux. Youll have the same unix tools default in your linux distro. And you can use the windows partition to do your windows preferred activities. I think its a good option. Cause macs are just so $$$$$ to get just for programing. When any pc/laptop could run a distro that will do it no problem. 
I also have virtualenv working fine for Windows dev. Set up easy_install script first to get virtualenv
I program on Windows / Python almost exclusively and as long at you use conda distribution of Python, you really won't have any problems. What do you need that's *nix dependent?
Are you referring to Giltectomy project ? Last time I checked, Gilectomy did a poor job scaling to multi-core .
As I'm learning machine learning I'm trying to apply it to real world data, so I'm not an expert. However, as I understand, because I was looking for a numerical prediction, regressions are what I should use. I could have also come at this problem from a different angle, and manually identified a couple of customers as cyclical and used dimension reduction and some classification algorithms in order to figure out what the best predictor of a customer being cyclical is. That would be helpful because as a business, you want a constant money flow rather than huge highs and lows, so being able to know exactly the determiner of cyclicality could help us prevent it or turn cyclical customers into constant ones. I might have to try this.
My fav, I use it for for terminal and sublime. So compact, too.
Really really nice work! Keep improving it! There is a kind of similar product here: https://mycroft.ai
This project comes with the standard disclaimer &gt;Purely experimental project. Designed for learning purposes not production use. It is perfectly fine to learn about crypto this way.
Thanks for all the help it's all working now !
How would it be different than the QT Console?
This is my personal password manager, ppm, https://kootenpv.github.io/ppm . I'm hosting it for myself and others as a static page :) Been using it for some time now.
Since you like to be "declarative" (or *functional*), you might be interested in some of the functions of the [itertools](https://docs.python.org/3/library/itertools.html) module, especially [itertools.accumulate](https://docs.python.org/3/library/itertools.html#itertools.accumulate): import itertools import os path = "/home/szborows/code/the-best-project-in-the-world" result = [os.sep + item for item in itertools.accumulate(path.split('/'), os.path.join)] print(result) print(result[1:-1]) Gives ['/', '/home', '/home/szborows', '/home/szborows/code', '/home/szborows/code/the-best-project-in-the-world'] ['/home', '/home/szborows', '/home/szborows/code'] The `os.sep + item` part is just for prepending the '/' again, there are probably more ways to do it. Edit: If you're fine with a small helper function, the following works too: import itertools import os def curry(f): def wrapper(*args): return f(args) return wrapper path = "/home/szborows/code/the-best-project-in-the-world" result = list(itertools.accumulate(path.split('/'), curry(os.sep.join))) print(result[1:-1]) gives ['/home', '/home/szborows', '/home/szborows/code']
wow. clever usage of accumulate. +1
It's the whole notebook
Indeed, thanks for pointing this out, seems to be very similar. Seems they are making their own STT and TTS which is very nice we could integrate them into Kalliope. But I am not sure they can handle multiple languages yet.
Please try to embrace pep8 ... this feels dirty for new code unnecessarily.
By the way, you mentioned using multiprocessing for batch downloading, but I highly recommend using concurrent.futures instead.
 from pathlib import Path mypath = Path('/a/b/c/d') print(mypath.parents)
I use [gohu](http://font.gohu.org/) as well. Most people tell me it's awful, but that doesn't seem true at all. ;)
Consolas is great and does alot right. The MS type faces are very good in general. I wish they came installed on Linux distros by default.
dejavu sans mono *does* have a dot in the zero: https://upload.wikimedia.org/wikipedia/commons/3/3e/DejaVu_specimen.svg
I've tried just about everything listed in this thread, and I keep returning back to Monaco. Just love this font
Because it doesn't have any sort of meaning, hear me out. It *is* None. It's nothing, there's is nothing that defines it. It is a singularity. So to iterate over nothing would produce... what? It's the same concept as dividing by zero, it's undefined. Once you start defining behavior for None then it's not None anymore, it's defined to be something. Why is this important? Well, if an object is iterable then generally you can also slice it. So what would `None[:]` return? Empty list? Then you've created something out of nothing. It's obviously a really pedantic and philosophical answer but it's honestly the one that I consider most strong with regards to None. 
I would say that `None[:]` should return the empty list; its meaning is "a list containing all the elements from the beginning of nothing to the end of nothing". You haven't created something out of nothing; you've created a list (with the `[:]` syntax) and filled it with nothing. You're right, though, that it's a very philosophical concept and really just sort of an aesthetic decision. 
&lt;pedantry&gt; But you have created something, you created a list. That it's an empty list is not really important, it isn't nothing any more. None[:] is None is False &lt;/pedantry&gt;
That is not [Windows Subsystem for Linux](https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux) at all
Source Code Pro fans who are interested in seeing what ligature support will do for them might want to try [Hasklig](https://github.com/i-tu/Hasklig). It's back to being my favorite - a little more open vertical space than Hack; almost indistinguishable from Source Code Pro. Old school fans might want to try [Glass TTY](http://christfollower.me/misc/glasstty/index.html) Forgot to mention that [Codeface](https://github.com/chrissimpkins/codeface) is a useful place to compare and find new coding fonts.
Which parts of pep8? The majority is compliant as far as I and my linters can tell. The big divergence for me is keeping more in qt naming conventions which include camel case instead of snake case. 
It does, it seems
No problem, I only use this font both in IntelliJ and Visual Code because it's already supported. I hope that other editors are supported soon.
Why can't you use `(4).lower()` or `[].astimezone(UTC)`? 
Followed a TensorFlow machine learning tutorial - need to write the results to a file while also displaying them in the console. Currently my code is writing the first set of results to a file and then failing to write anything else. And nothing is being written to the console.
Do you have a value *1* in the headers you're setting? It is an int, but that's not allowed. It has to be a string.
Good call and thanks for sharing this nice and neat code. Definitely, multithreading may sometime cause GIL issues. I will take this as consideration:) 
https://www.jetbrains.com/help/pycharm/2016.3/configuring-remote-interpreters-via-wsl.html#d35979e195
tewi. Clean and simple. 
Use an ORM so your CRUD becomes simply altering attributes.
Good software isn't defined by its release frequency. Keep doing what you're doing. So many benefit from your work.
I'm not asking that it get made retroactively in all Python versions, just that it'd get made for a future version, like 3.7. You can't break what you don't have any code written in! It's not really fair to say my suggestion would break existing code, because of course it would. It seems like folks are confusing the philosophical conversation with the practical conversation. I'm arguing the practical point, that there's no *practical* difference, and there are countless situations in Python code that have to work around what amounts to a philosophical problem, that could easily be solved if None was just iterable. Python *already* makes the truthy/falsey shortcut of considering None and [] to both be False, my suggestion is an extension of that. 
The default argument case *is* the issue! It's a pointless hack that could be avoided if we made None behave like we treat it anyway, iterable. You can philosophize all you want, but as far as I can tell, it would *only* serve to make Python code simpler, and have zero negative side effects.
But clearly (4).lower() means ₄ and the empty list timezone means local time normalized to high noon on a sundial. /s
None means some thing else, it means there is nothing, not even an empty list. If I ask you to give me a bag and you give me an empty bag, then that is different from if you don't give me anything. Looking through the contents of nothing if meaningless. If you want empty list behaviour, use an empty list. 
It looks like Jinja 2.9 broke the hack that webassets was using to create an ASSET_URL variable: https://github.com/miracle2k/webassets/blob/c129e40beb05721bc2921b5085c23f3897464a36/src/webassets/ext/jinja2.py#L87-L155
I see you are familiar with JavaScript.
Please provide examples if you're not discussing the mutable default value issue
What? Examples of trying to loop over None? The issue comes up when the default argument of a function is a mutable iterable, but it's not the root of the problem. The problem is a superset of the mutable default problem.
If you treat it like a list for iteration and then try to append to it, what happens? If you expect a list, check for a list. If you want magic, try Perl or PHP.
Heh, you'd think that, but "magic" abounds in Python. This extra bit of magic wouldn't be out of place at all.
Any problems you're running into? It should be working with 3.6 without problems. Edit: might have a look at their documentation, the installation section (https://pillow.readthedocs.io/en/latest/installation.html) specifies that Pillow 4.0 should support python 3.6
[Here are the Pillow docs](https://pillow.readthedocs.io/en/) in case you need further help.
A list is something. If it is empty, it is still something. Think of it like this: an empty list is like a deflated balloon. It -can- hold something, but right now it doesnt. The container still exists. So what is None? None is not a balloon without air. None is the representation of the balloon not even existing. I know its an abstract concept, and humans invented zero well after counting so it's probably not something inherently ingrained in us. 
Wrong place to ask. Try /r/forhire.
Well okay, but *that* is just another quirk of Python, that None is returned for any functions that don't specify a return value. The issue is not that None is iterable, the issue is that get_failing_students is returning None, when it shouldn't. This is just saying, "A broken program will behave brokenly." In this specific case, it would have done the wrong thing, but I'm sure we can come up with cases where it would do the right thing.
&gt; the issue is that get_failing_students is returning None, when it shouldn't. What would you like it to return instead?
Well, uh... like, some kind of representation of nothing, that we could iterate over 0 times. :P But I guess technically it should return failing_students.
Definitely an option, but is a little surprising, right? It just feels... like you're having to work around something, rather than work with it.
You can see exactly what it does [in the source](https://github.com/pallets/werkzeug/blob/master/werkzeug/utils.py#L253) - it's pretty simple. Basically, all Unicode is normalized, path separators are removed and whitespace is replaced with underscores. If you're generating random filenames yourself, you don't need `secure_filename` as long as the filenames are just UUIDs or anything else that you know can be represented on the filesystem.
I can make one. PM me.
It's not surprising if you're familiar with tuples in other languages.
So you're saying you'd be totally unfazed if you saw: def get_all_foos(bing, bong=()): You'd know bong was supposed to be iterable, and the default value is a tuple rather than a list because tuples are immutable, and that'll better pass some linters?
Thanks!
That's a chained comparison, I'm happy to say that `None is not False`.
Yes, I write that all the time. 
Well, we over in #python agreed it was unintuitive! You don't really expect specifically a tuple in bong, so the code isn't self-documenting.
I left a comment in their webassets issue tracker about why I think this is. https://github.com/miracle2k/webassets/issues/477
PEP 7389: If a function returns control without a nonempty return statement, return a random object from the local namespace. 
No. Because if you do an operation like this, you're obviously expecting the object *not* to be `None`. The more operations you allow for an object which should mean ‘look out, this variable isn't allocated and this is probably because if exceptional behaviour’, the further you defer your bugs and the harder it will be to find them. 
I know, and I actually wanted to say that but couldn't remember which language it was. Definitely not one I use often. Which one? (Also, Go has this really weird readability-breaking concept that you can have a naked `return` which then returns some ‘answer variables’ defined in the function's signature.)
Throw an exception then. Other languages do that too if you try to pull a return value out of a procedure that doesn't return anything.
I need someone to create a Jinja2 templates and route functions for an Inventory management system developed in Flask as backend. I will communicate detailed via emails. I am looking for a person who can do this in under $350 and within 10 days. Your work will not be to develop entire back-end but to create view/route functions that can send/receive data to/from UI that you will create based on given templates. Waiting response
Ruby and Rust behave like that. 
Ruby would be an example.
I love the idea - although it's a shame the python version wasn't written in CFFI but instead Cython. As a result it won't be anywhere near as fast as doing it yourself, and won't be compatible with pypy. But it's still a work in progress i guess so that might change
This is fantastic, what a great tale :) 
Wow this looks awesome. Will definitely try this out. Do you have a recommendation for a specific type of microphone that works well?
It works on 3.6, I started using it recently,
I'd suggest using grequests instead. It's API is similar to requests, and its uses gevent.
No, it's actually a subset. You only cover the case where you want a mutable iterable. What if I try to call any of the other methods of the type I expected as the parameter? `__iter__` now works but what if I call `None.update(...)` or `None.items()` or even `None.my_custom_types_method()`? Seems like I still need the sentinel check so you did not "solve" the default value problem, just a tiny subset.
In that case I would suggest a shallow clone. That way you're not only saving HDD space but also the amount of data transferred *and* you retain all the Git goodness.
Raspberry PI 3 support??
Coffeescript does this too. 
Cheap, lazy answer: Yes, all of the above. It depends on the project, your needs/requirements, and whatever works best with what is already in place or will be in place in the future. There is no one single answer. No best solution. If there was then a lot of us would be out of a job! For me all of those approaches would be 'natural' so long as they made sense in the context of the requirements. More importantly the approach needs to be CONSISTENT across the entire project. 
I'd accept the zero-length tuple as a default argument, but None may also be suitable depending on the body of the function. Either way, it might be nice to clarify with a type hint: def get_foos(bing, bong: Optional[Iterable]=None) -&gt; Iterable[FooType]: Starting such a function with "bong = bong or []" is a common idiom to avoid the mutable argument problem. (as long as you don't expect to pass in and modify an empty list...) 
r/learnpython
Um no shit. I have the subsystem on my windows 10. Then u switched to a dual boot because it sucks. 
If you fancy something a bit different, I love monofur for development.
In addition to what everyone else has said, haskell does this too. 
/r/learnpython
good call CPU utilization can go higher, and the program runs faster.
Currently sends everything you say straight to Google, though. Can't wait for them to finish they'd own STT back end...I like my rights too much.
You don't need to manually adjust PATH with recent versions of Python, just check "Add Python to PATH" in the installer.
Very interesting! Thanks for the response.
Actually the reason it is for Python 2 is that the point of the project was to migrate their Python 2 code to Go. Thus all their Python mindshare is Python 3 now, which they've been starting new projects in.
This is a little misleading. There's only one kind of assignment in python; there's no such thing as 'assignment by creation'. The expression on the right hand side of an assignment can create a new object before the assignment happens or it can use an existing one, but this has nothing to do with the assignment itself. http://nedbatchelder.com/text/names1.html
do I have to reinstall to get to the installer again?
Self hosted TTS/SST options?
That is the easiest option, probably. 
For the video it's a standard and low cost microphone headset. But it's recommended to use an octopus microphone for prod (conference microphone).
Are you using vs2015 or vs2017
That's mentioned in the article along with how it differs from Cython.
Neither. The OP is actually using VS Code. It's a lot lighter than Visual Studio and more of an Atom or Sublime Text competitor.
I've never really looked into it, but what is CPython?
The original implementation of Python which is written in C.
CPython is an (the default) implementation of the Python language. The specification of Python (keywords, syntax, etc) is the "language", ie your code. But what's running your code is the interpreter (CPython, PyPy, etc.). Different implementations have different trade-offs but they all meet the Python spec. This is a very brief explanation, but you can read all about this stuff if you do a bit of googling.
Interesting. One could also use heapsort instead for much stronger guarantees. O(n) for initial heapify step and then O(log n) for taking out each element "lazily" For an advantage make use of built in `heapq` module
I was talking about an assignment statement, and not just assignment. An assignment statement looks like `x = expr`. Depending on `expr`, two things might happen when you execute the statement. A new object may get created or not. Based on this, it is possible to classify assignment statements into two types. Mutability is also an important concern. It is key to understanding the case with the tuple and the list in the article.
boosts??
How does it differ from [blinker](https://github.com/jek/blinker)? Or [smokesignal](https://github.com/shaunduncan/smokesignal/)?
Currently it calls the slots in the same thread but I was thinking of adding options to launch in secondary threads and call back to the main thread. If you're using qt anyway, I wouldn't recommend using this because there's a lot that qt does that isn't easy to implement in python without making some assumptions that I've not found a clean way to do yet. (getting sender, threads etc..) This was more for non qt modules and packages where you may want to keep a familiar interface. 
While I see what you mean, and actually based on that explanation I agree that `NoneType` shouldn't be silceable or iterable because that would require it to have methods, I think you misunderstand what undefined behavior is. I would suggest watching this [excellent talk](https://www.youtube.com/watch?v=yG1OZ69H_-o) on UB from CPPCon, but if you don't want to, the tl;dr is that undefined behavior occurs when a programmer violates an API contract, not "when the language is too loose with what is legal". For instance, if you have a function which takes an entry point onto a graph (a node) and returns another node, and requires that the graph be acyclic, and someone passed it an entry point onto a cyclic graph, THAT behavior is undefined, not because "the language is too loose with what's legal", but because the programmer violated an API contract.
To be honest I was not aware of those. Smokesignal seems to be more oriented around django like syntax while blinker is more similar. A few differences I can see from perusing their code (I might be wrong) * my library supports all 4 callable types (lambdas, partials, functions and methods) * pysignal supports class level signals which means that subclasses are always forced to have that signal rather than leave it to them calling super. That way you can make consistent interfaces. * pysignal uses a more qt like naming scheme * it also supports named signals in case people prefer that (ie signal factory) I don't have some of the convenience methods that the two libraries you mentioned have and may add them in a future version. 
If it matters, feather is much faster to load in both languages than reading a text file.
Great, this led to a 0.12.1 release of webassets that fixed this issue. Thanks!
&gt; Microsoft boosts Java by turning it into C#. MS created C# because Sun said "fuck you" to their Java implementation. &gt; Turn a popular established well-documented/supported/loved language into something that serves the needs only of the mega-corporation, softening the outrage with a lot of not-convincing "community" astroturfed enthusiasm publications. Jesus, calm down, they just want to move from Python 2.7 to Go, not slaughter Python ecosystem. 
If you are IO-bound -- which you are when talking about network and file operations -- then the GIL really doesn't come into play. Multiprocessing also doesn't suffer GIL issues because they run in their own interpreter space.
One slight problem: you're checking to make sure that both players don't hit HH HT at the same time, but you're not starting over when they do. I don't know if that makes a difference, but it might. Also, isn't this expected? It's saying that the "HH" player wins 40% of the time, and the "HT" player wins 60% of the time, which is what the article suggests will happen.
In Python 3, print became a function. This means that you need to include parenthesis now. print("Hello World")
 url.rstrip('/') Would also remove the trailing slash.
Yeah, it's certainly not perfect. If you need platform-specific features like that, then look elsewhere. For most "windows and buttons" applications, though, it's more than adequate.
Sorry i didn't see that. Sorry for wasting your time. 
Partial quicksort? I think the problem "Get the M smallest items from a list of N items" can be solved even more efficiently for small M. Just allocate a max-binary-heap of size M and insert items into it. Finding the right place to insert/replace an item is O(log M), so the whole algorithm is O(N log M), but if N is large and M is small, the 'log M' part will be constant (a single comparison) for most items. It's also very cache efficient if M fits into CPU caches, and the input can be streamed (does not have to fit into memory). 
I'm not.
CPython is the "default" python runtime. If you download python from python.org, you have CPython. There are also different runtimes and compilers like Jython (Python under JVM), Cython (Python with a C compiler), and Iron Python (Python under Microsoft CLR)
Yes. You missed the details and the point; you sound more angry than clued.
Yes. You missed the details and the point; you sound more angry than clued.
/r/learnpython
well, https://www.google.com/search?q=java+oracle&amp;tbs=cdr%3A1%2Ccd_min%3A1%2F9%2F2017%2Ccd_max%3A11%2F1%2F2016&amp;tbm=nws Microsoft on the other hand, maintaining multiple .net systems, actively supporting the community's Mono Project P Much just doing work to do the opposite of java in terms of corporate activities
I think you can just use the basic Python libraries, then it's compiled into get Go.
&gt; It sounds a lot more like what Facebook did with HHVM. Pypy is "what facebook did with HHVM".
It translates Python code to Go, currently only support a subset of the standard library (and possibly constructs), you can't use any library relying on the C API (and probably ctypes or cffi) but you can use Go libraries.
Some great fonts in here, but I can't believe I haven't seen mention of the also-beautiful [mononoki](https://madmalik.github.io/mononoki/).
MATLAB's big strength is handling matrix/vector operations, is there something similar in Python?
Yep, there's a popular library called NumPy that handles linear algebra and the like. I use Python all the time as a graduate student, from running simulations to automating experiments.
You posted in the wrong sub
Mildly amusing, but unfortunately, sorting is the sort of problem that's highly resistant to a lazy approach. This "works", but at the cost of being quadratic. Perhaps more importantly, you can't really emit the first value of the result until you have somehow scanned the entire input. (With something like quicksort, though, you could start emitting values before the entire list has been sorted, which might give a slight boost in concurrency.)
K thanks
Almost certainly not 
That doesn't sound right. It's not a Python interpreter in Golang, it's a Python to Golang transpiler. And it's written in Python.
Honestly sounds like you're just trying to frame negatives as positives. With java you have eclipse, netbeans and intellij all with great variety and number of plugins and generally the IDE/tooling ecosystem is superior to that of C#, yet you mention supporting Mono as a positive. To me, full visual studio features on linux is the baseline not bonus.
Oops, yeah you're right. Totally spaced!
This is a nice little recipe post. However, nothing about this is 'advanced'. At work, we wrap all of our standard plot modifications into a function. It looks something like: def brand_plot(plot): ''' pass plot into this function to automatically adjust plotting parameters to match corporate template do this before modifying any other plotting paramaters, as they may be overwritten ''' # switch to standard fonts ... # insert standard border ... # draw logo and standard title block ... # etc. We then share a 'branding.py' with everyone that they import when they're plotting. It ensures that all of our plots have a uniform, 'corporate branding' appearance. Keeps the presentations professional when dealing with clients, and makes our plots look similar to those being produced by other departments (like drafting, or GIS).
It coincidentally works in the one case that you have a single argument, which I wouldn't really call working. If you need python2, it's much better to simply import the python3 print function: from __future__ import print_function
I was hardly aiming to do a complete in-depth comprehensive comparison between the two, with my total of like, 2 points. my personal concerns are the leaderships of the two languages, Oracle seemingly sees Java as a mechanism of acquiring money via suing. Microsoft seemingly is trying to act to heal the damage that they have caused. So I feel more comfortable with Microsoft's Governance than Oracle's, which is reasonable, as far as I can tell. - - - Also IntelliJ exists for .Net, right? in the form of Rider?
Not any more. He left in 2012: https://plus.google.com/115212051037621986145/posts/hNV7PxgFg2J
As Guido pointed out in a Keynote a few years ago, threading was never intended for parallelism. https://youtu.be/EBRMq2Ioxsc?t=33m50s
System Tray isn't a platform-specific feature. Every Desktop system have a system tray. It's like saying that vibrating is a platform-specific. When every mobile have vibrating. Anyway, as you say, if the Kivy modules cover your app requirements, is a good option. But you must check it before choosing it for Desktop if you don't want surprises after one month of coding.
&gt; System Tray isn't a platform-specific feature. Every Desktop system have a system tray. That's comletely false. Maybe the two that 99% of desktop users use do, but to say that *every* desktop system has a system tray is false. &gt; It's like saying that vibrating is a platform-specific. When every mobile have vibrating. No, not quite. &gt; Anyway, as you say, if the Kivy modules cover your app requirements, is a good option. But you must check it before choosing it for Desktop if you don't want surprises after one month of coding. Your pre-project exploration should have figured that out. If you get any surprises about the foundation library that you're using, that's your own fault.
If you need a default argument for a function parameter that expects an iterable, use `()`. It's a singleton the same way None is, so any two empty tuples will always be `is` (byref) equivalent and it's therefore just as efficient as `None`, but much more meaningful.
But I would consider this self-documenting: def get_all_foos(bing, list_of_bongs=None) 
https://youtu.be/EBRMq2Ioxsc?t=34m38s 
David Beasley has them processing gzipped log files by the end of the day!
 &gt; Google replaces Python by turning it into Go FTFY
Exactly, to your first point. It *is* unintuitive to make a default value of something a tuple when it should be a list, but we can't make it a list because lists are mutable, and will carry over from execution to execution of the function. If we were able to set it to None, now have to handle the exception-inducing case that our own default value produces. It's absurd.
&gt;We already have Pypi, Jython, IronPython etc [PyPI](https://pypi.python.org/pypi) is the Python Package Index, what pip uses to download packages. I think you meant PyPy.
Hey, I have substantially edited the article. Would love to know your opinion on the edited version and whether it makes more technical sense.
This looks like a good application. The dashboards looks usable and I like the layout. I am most interested in how it integrates with other applications like nagios. The site also has some cool posts on saltstack, ansible etc...
&gt; MS created C# because Sun said "fuck you" to their Java implementation. MS created C# because MS says "fuck you" to established standards.
I am using kivy myself http://kivy.org
Let's make Python a strongly-typed language then. And while we're at it, let's remove the [billion dollar mistake](http://lambda-the-ultimate.org/node/3186) (None) from the language too. If what we want from Python is safety, that is. It's not unreasonable to ask a scripting language to do something reasonable (in this case, a simple no-op) instead of raising an exception which might possibly abort the program. Perl and Javascript are even more forgiving. It's neither good nor bad, just a language design choice, which might save you a lot of frustration some day. (Just like strict typing might save you a lot of frustration someday). But while we're discussing the possibility, an iterable None would reasonably mean that None[:] should return None.
 &gt; google uses python all across their products. Yep, but maybe they are considering moving those products to Go. The article mentions several important limitations (like lack of support for C extensions). It seems that they are writing something good enough for them. 
You have installed python 3.x buy you are learning python 2.x
is there already a bug filed for that already?
All major should support such setup. Example: https://www.openshift.com/
which still is not the stdlib
No, it doesn't. https://pybenchmarks.org/u64q/benchmark.php?test=all&amp;lang=python3&amp;lang2=grumpy&amp;data=u64q
If you know the number of values you need ahead of time, you can use [`heapq.nsmallest`](https://docs.python.org/3/library/heapq.html#heapq.nsmallest) to get them directly. I'm not sure how much faster it would be than your iterative heapsort, but I'd guess it would be a little better for the smallest `n` values (since it only keeps `n` items in the heap) and maybe a little worse for larger ones (since it does repeated heap inserts rather than a single `heapify`).
You will have race conditions with multiprocessing as well. Further, multiprocessing is flaky and slow in Python, much worse than threading in other languages. Threads are performant partially because they have access to the same address space, but to do this correctly you need locks (there are exceptions, but they carry their own caveats). I don't know about the links you posted, but threads are widely used, and rightly so.
I don't think you understood the article. This is a project to literally turn Python code into Go code (transpile it). MS created C# as a competitor to Java, Go isn't really a competitor to Python. Why would google care if you run Go vs Python? It has nothing to do with their business model. This is just a tool they created for internal use that someone decided to open source.
Optical Engineer/lens designer here! My office is split between a large MATLAB user base and a small but growing group that uses Python. Python is very handy for optics in ways that MATLAB only get to with multiple toolboxes (Image processing, image aquisition, machine vision, parallel processing, etc). Since you have to purchase seats for the toolboxes, it gets expensive to have everyone using at the same time. Python - just PIP whichever you need for the problem you're solving. Areas the tools get used: * MTF and RER processing to test the optics we build to see if they are in focus * If you are a Zemax user for your lens design, there are now direct bindings for Python included with OpticStudio. The older PyZDDE module lets you do the same through the older DDE server system. I use this almost daily for everything from bulk analyzing Monte Carlo tolerance runs, lens athermalizing calculations, to creating surface mapping functions to translate FEA models into something that is readable by Zemax (or CodeV for that matter) to estimate aberrations due to surface deformations. * Radiometric anything... spectral distribution calculations, radiometric transfer, irradiance distributions. Radiometry can get messy very quickly, so having python scripts to track each step is very handy. If you are looking for simple optics projects, good ideas to try: * Build your own raytracer. Start with a simple Paraxial YNU system and work up. * Create a surface Aberration generator/mapper using Numpy. Learn how to take that map you create and convert it between Seidels and Zernike polynomials. Then save that code, you may find you get a lot of use out of that in the future. * An optics equation solver. There are a lot of equations that are used to calculate the most basic things in optics (ex. paraxial properties, laser divergence, coherence length, diffraction patterns, optical bandwidth, rate equations, scatter functions and so on). Pick a course you've taken, or use the Geometric Optics Field Guide and code those equations up as functions. 
Hello fellow Optician! I understood every word of your post!! How often does that happen :P? Thanks for the great info. Would you be willing to share any of your work? I'm still in the process of understand the general organisation of Python Inteface, having familiar material would help alot.
...I blame auto-correct.
My wife showed me the Tumblr (I know, bear with me) post linked to in that Gist, and I decided to make a Python script out of it. You say how much of your day was good, bad, or other and it uses those values to create an RGB value. Greener colors are happier days, bluer colors are more sad days, and more red colors belong to other feelings. Then it will update a 20x20 square on the grid for that day with your color. Black areas are days that have not been recorded. What do you guys think?
You're going to have to elaborate on multiprocessing being "flaky and slow" in Python; that's not my experience and I'm not sure what attributes of Python would render it so. &gt;I don't know about the links you posted, but threads are widely used, and &gt;rightly so. "Threads are evil" derives from a research paper from U of C Berkeley 10 years ago.... https://www2.eecs.berkeley.edu/Pubs/TechRpts/2006/EECS-2006-1.pdf They're widely used because they're often the only solution a programmer knows and, as Mark Summerfield noted, most languages don't offer any alternatives. We've seen functional languages with immutable state rise up on the one hand and message passing (such as Erlang) on the other to offer alternatives to the many problems inherent in multithreaded programming. 
Pyserial should work just fine like normal.
He wasnt asking for stdlib only stuff, but asking why there is no such thing in stdlib. But our little conversation is getting unnecessarily offtrack.
For "Ultra simple settings management" it sure looks complicated.
Wouldn't it be great if it was more feasible to replace CPython with PyPy. Too bad PyPy doesn't support all modules. 
&gt; I would consider myself a power user when it comes to computers Oh, well in that case [LFS](http://www.linuxfromscratch.org/lfs/) But more seriously... &gt; I don't know much about linux and &gt; looking for an advanced linux distro really are mutually incompatible unless you want to spend A LOT of time upfront (and run the very real risk of getting fed up or overwhelmed and giving up). I recommend starting with something simple like Ubuntu, since it defaults to a new-user-friendly environment, and you will find a lot of support for it when things invariably do go wrong. Then, once and only once you are 100% comfortable with installing/using/maintaining an easy distro move onto better and greater things (Arch or Gentoo would be my two go to suggestions, depending primarily on your level of patience waiting for things to compile).
&gt; But (to the best of my knowledge) cython can't do anything about the GIL http://cython.readthedocs.io/en/latest/src/userguide/external_C_code.html#nogil &gt;Code in the body of the statement must not manipulate Python objects in any way, and must not call anything that manipulates Python objects without first re-acquiring the GIL. Cython currently does not check this. Limitations, but the python-&gt;go transpiler has its own. Regardless, C is going to be much faster than golang. Each is good in its own right. If you worked at a place with a significant golang codebase, this transpiler is awesome. If you're a pure python shop and you need to increase performance in a critical area, cython, pypy, or just writing an external cpython C/C++/Rust module are all good solutions.
PyPy has pretty damn good support these days. Still, I think the main problem is a lot of good libraries are C extensions to Cpython and none of those will work likely ever. I really wish we had a better reference implementation of python. Python is awesome, but the main arguments against it are performance and the GIL and that's just due to CPython being the reference interpreter. I'm not claiming it's an easy problem to solve, but I feel like we could be in a much better spot. 
I strongly recommend [Hypothesis](https://hypothesis.readthedocs.io) - test properties and invariant, not specific examples. This library is more persistently devious than either of us, and can also simplify a failing example to the point that my bugs are often trivially obvious.
Tk is probalbly one of the sanest GUI: you create a layout, put your callback and then wait for events to come. Plus: it is the most portable GUI so far.
Sure, but in all other ways than printing nicely, the sequence given by `mypath.parents` is a drop-in replacement for a list of equivalent strings - especially if you happen to already be on 3.6 which has the fspath protocol (PEP 519) so `os.path` functions work on pathlib objects. 
This is was py3 did to us.
This is excellent
&gt; Hello fellow Optician! I understood every word of your post!! How often does that happen :P? Hey now there is a big world out there of talented people. &gt; &gt; Thanks for the great info. Would you be willing to share any of your work? I'm still in the process of understand the general organisation of Python Inteface, having familiar material would help alot. Python is a very good language for an engineer but sometimes it would benefit you to learn more than one language. You didn't mention your preferred platform (Mac OS, Windows, Linux) so what that other language might be is somewhat variable. I'd certainly consider C++ but the long term play may very well be Apple Swift language. Swift is very new but it encompasses many concepts from Python and other modern languages into an interesting platform. I see it as a good long term play for the Mac OS and Linux worlds. Swift has many of the advantages of Python but few of the limitations.
Also, if you want a simple web front-end, I'd look into Flask rather than Django. Not a knock on Django at all but Flask is lighter weight and (generally) easier to get up and running quickly. If, like me, you suck at front-end, just use Bootstrap CSS and you'll end up with something that looks decent.
Python2
[Here](https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html) is a discussion of NumPy for MATLAB users. If you obtain NumPy via the [Anaconda distribution of Python](https://www.continuum.io/downloads), it is compiled with [MKL optimizations](https://en.wikipedia.org/wiki/Math_Kernel_Library), which speeds things up considerably. I strongly recommend using Python/NumPy over MATLAB. MATLAB simply will not be able survive, given the [fantastic job](http://numba.pydata.org/) that Continuum Analytics is doing to make sure that MATLAB dies. [Here](http://www.labri.fr/perso/nrougier/from-python-to-numpy/) is an awesome resource for learning NumPy. Notice how all of these great tools are free? :)
My second project in python was contributing to a non sequential optical raytracer. I was thinking about going back (6 years later) and redoing the algorithms in numba. Python is a great tool.
What does Dropbox do besides cloud storage? The only interesting thing I can think of would be building and scaling distributed systems and I would think a lot of that is done already. You only redo your entire server architecture so many times before you learn the best way.
Flask is cool because it is compact yet extensible! 
Or, simply set up a bridged network instead of NAT and treat it like any other device on the network.
That is correct! You don't annotate the `self` argument as it's trivially the type of the class, but in the comment syntax you list a tuple of arguments - hence `()`, the empty tuple. And `__init__` returns `None`. With the inline style, it would look like this: def __init__(self) -&gt; None: Which seems obvious to me!
 class BitVector: def __init__(self): self.value = 0 def set(self, index): self.value |= 1 &lt;&lt; index def unset(self, index): self.value &amp;= ~(1 &lt;&lt; index) def get(self, index): return (self.value &gt;&gt; index) &amp; 0b01 def __repr__(self): return format(self.value, 'b')
I was never aware how Python grew. Were the core developers not radical enough when starting the development of Python3? Do we need a Python New Generation?
Good. The standard library is where good code goes to die. The requirements on stability are too stringent.
And it's enough for many never to pick C# over Java.
Why not link to the actual post? 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
You're a rude dude.
There's only one negative in there. A nonempty return statement is one with at least one return value, such as `return 5` or `return firstpart, separator, secondpart`, as opposed to a naked `return`, which can be useful for terminating a procedure/routine in a branch (and for all intents and purposes is equivalent to `return None`). 
They could run your code it if is was hosted in an IPython notebook server and Jupyter is easier to set up than a normal web server like Django.
If someone wants n highest/lowest out of a list why are they sorting to begin with. Set up n variables and traverse the data once filling the n variables with values that overtake the existing ones. Done.
That's a huge “fuck you Guido” from them :)
Zope and Plone provide a lot of synergy with python programming through the web and support for webdav, xmlrpc, rss, etc built in.
@pvkooten Ok. Perhaps it is the documentation that gives the impression? I can consider improving it.
I'd imagine it being as easy as solving the traveling salesman problem. 
Where they are also rewriting a lot of Python in Go :(
Wow, that goes right to the top of my reading list.
I'm slightly annoyed by the implication that the GIL exists because of C/C++ extensions; that's not true at all.
Good point, seems like they want to migrate from Python 2 to Go, while being active with Python3 Edit: typo 
&gt; (With something like quicksort, though, you could start emitting values before the entire list has been sorted, which might give a slight boost in concurrency.) Half of quicksort's time is spent in the first partition pass, which can't be parallelized without adding some sort of merge. Without that merge, parallel quicksort can gain at best a 12.5% speed increase, assuming best case, and without overhead. A merge would probably be O(n), so it would double the time required for the first pass. If I were to parallelize, I'd use mergesort for the outer passes. This is how databases do it (although they may use heapsort for the inner passes).
Because you might want to have that dynamic. Or hundreds. And you don't want to do that by hand now do you?
You mean from a Python script? This looks promising: https://github.com/prasmussen/gdrive/. 
I'm only just starting to watch this, and I am not entirely familiar myself. A lot of the time I see people saying "python is leaky and needs to be rewritten" or "python 3 is horrible, python 2 for life" - the person stating that actually has very little expertise and no reason to say that other than getting exposure. Not sure if tbis talk falls into the same category though.
I think the real power in this is a simple use case. It's how I've been using it at least. Essentially, I defined a simpler wrapper. Instead of the default annotation, I use: def inherit_doc(function): try: from custom_inherit import doc_inherit, parent return doc_inherit(function, parent) except ImportError: return lambda x: x # If unavailable, just return the function This allows for the simplest possible use case: "I added a super() here, and I just want the docstring to pull over" Edit: simplified code
What does it mean to say a language has "leaky internals" ?
I added iterator class BitVector: def __init__(self, value=0): self.value = value self._length = value.bit_length() def __getitem__(self, index): return bool((self.value &gt;&gt; index) &amp; 0b01) def __setitem__(self, index, value): if not value in {0, 1}: raise ValueError(f"There's no such thing as {value}") if value: self.value |= 1 &lt;&lt; index else: self.value &amp;= ~(1 &lt;&lt; index) self._length = max(self._length, index+1) def __len__(self): 'Mostly advisory' return self._length def __repr__(self): return f"{type(self).__name__}(0b{self.value: _b})" def __str__(self): return '0b' + format(self.value, '_b') def __iter__(self): return (self[x] for x in range(len(self)))
It exposes the way it internally works to the API, instead of having some kind of abstraction layer in between. It's fine until you want to change how the internals work, because it would break lots of user code.
Not a python solution, but have you considered just compressing your files? 
how can we change subtitle language 
&gt; If you don't comment your code at the time of writing, you won't be able to tell what a function is doing after a few weeks (or possibly days) Shit, it only takes me minutes. The animations are amazing. What a clear way to demonstrate a subject.
Same, my work desktop is Windows, but the servers I develop for are Ubuntu. &lt;3 Python for ease of cross platform. :)
I don't know what that means, can you elaborate?
That's exactly what my benchmarks are about, just with 10 items.
It is actually a good question too. Im not sure where the negativity comes from. 
Wish they would have mentioned some of the alternatives, such as Pendulum for Arrow and PonyORM for Peewee.
Lol what? There's literally a `nogil` keyword in Cython. If you want to use golang nobody is stopping you, but I'm just going to say that if you are really after speed, there are ways of achieving it in Python. Uvloop + aiohttp for example, is a stack that matches golang in speed, and uses Cython to achieve such a thing.
Got it. Thanks. Will improve the documentation.
I'm trying to make a point that google should show a serious benchmark.
I would have expected better benchmarks from Google. Not something that involves extra overhead like recursion. 
Try to change the clothes pattern for a shirt for example on a model. No idea where to start, to be honest.
Sorry, thanks for the explanation (Refcounting is a form of garbage collection.) I guess I meant whatever is used in Go.
It's a bit of a meaningless statement without comparing to numba, Cython, etc though.
No. The interpreter is the slow part. Which is why cython and numba can create such dramatic speedups. Probably beating this google thing in most cases by a lot. Besides, go has a GC. 
 @jit(nogil=True) Oh you ;) But really there are plenty of solutions far better that limited transformation of python code to go. Seems like some people at google are not exactly pragmatic. Edit: Probably it would be way harder to pull this off in the real world however.
If the point is to make Python go faster this benchmark is just as serious as the ones google supplied (that is: not very). The amount of complexity introduced isn't relevant for most use cases anyway. What matters is how easy it is to add orders of magnitude speedups to the hot spots of your code. With numba it's much easier and the results better. Saying "those two lines are actually" is pretty bogus too. All Python lines are built on mountains, as are go lines. 
Thanks for your comment. I'm glad that you put it that drastically. I'd actually agree that my article is mostly garbage. What I would add, however, is that that google's benchmark is about as useful as the one I'm showing. (And grumpy is also many lines of code). I don't understand why google is showing such useless numbers. I wanted to make a point that it is very easy to show numbers which are just as useless as the ones google has shown favoring the other implementation.
&gt; is just as serious as the ones google supplied (that is: not very). That's exactly my point! I think google's benchmark is not showing anything useful.
No need to use low-level concepts like addresses for this. It's just like my brother and my son's uncle are different names for the same identity. An object has a distinct identity. Two names may refer to the same object. When an object is immutable identities become much less significant because you cannot really tell the difference between equal and identical objects without using the "is" operator or the id() function. Te numeric value of the result of the id() function is the address of objects on some (but not all) Python implementations.
Sorry, I was probably overreading into the article. Thank you for the clarification. This is the part that I had read: &gt; While Grumpy compiles Python code to a static binary via the Go toolchain, that's not the chief reason for its touted speed.... According to Google, Grumpy speeds Python code by doing away with some CPython legacy baggage. The largest is a deliberate lack of support for C extension modules.... Because it doesn't support C extensions, Grumpy doesn't have CPython's Global Interpreter Lock, which is commonly cited as a roadblock to running Python concurrent workloads smoothly. Grumpy also uses Go's garbage collection mechanisms to manage memory under the hood, instead of CPython's.
If it makes you feel better, I could add some check for whether it is run within a Python interpreter or not. Depending on whether it is, it could use the numba jit or not. The code would be identical then. I tried this actually initially. But since I couldn't catch an exception on "import numba" within grumpy, the grumpy version refused to work at all.
In rereading it, my post comes across as a little bit harsh, perhaps even hostile. Please don't take it as such. I only wanted to stretch, that benchmarking should be above all, precise, and by introducing those two lines, you have violated any assumptions that would allow it to have any precision in it. I do agree completely with you however, on that yes you can do a lot of things to speed up an implementation, including, even, adding external factors (running it on a faster platform, adding specialized libraries, etc). But that doesn't invalidate the strategic importance or vision of a new implementation. On the other hand, a new implementation might be able to afford a new architecture that may allow for better optimization in the future at least.
If I were you, I would make a simple change that, imo, makes the article's conclusion way more sound. Do *not* remove the numba version of the benchmark. Just run the same benchmark that you run on grumpy on python. Evaluate these results, and if then grumpy comes out as slower, then all is good. If it comes out as faster, then by all means go ahead and comment that there are other ways to make python faster for the majority of the people, one of which is running numba, and then present just how much faster numba is than grumpy atm.
&gt; If anyone tells you it's easy, it ain't. I have this thumb of rule that if something seems easy, but a lot of highly paid smart people does a "poor" job at it *(seen from outside perspective)* it's probably very complicated to actually do.
&gt; Turn a popular established well-documented/supported/loved language Wait, I thought you were talking about Java
I think [CPython](https://www.python.org) is the only python interpreter available on *nix based systems traditionally. On Windows, there was that other thing called "Active Python" once which is no longer popular today, don't know what happened to that implementation.
I updated the post and added a pure python threading and a python multiprocessing version. Have a look.
Thanks for taking the time to update the article! It is already looking much better. I just have one or two recommendations to make it even better: Add a python version of the code without numba, so that python multithreaded with and without numba is shown (so that somebody can take the code as is and rerun the experiment, making it more easily reproducible). Also, if possible, add the raw numbers that the new benchmarks produced in the two columns that introduce the numbers between python-numba and grumpy as well. With that said, I now retract anything bad I said about the article. Thanks for being a good sport and not being offended by my earlier remarks, and not only that but taking the time to reiterate on it based on them.
Yeah, I guess... I mean, english is not my mother tongue, and when I wrote the original reply, I was at a loss for words and just came up with the first one that seemed context related. Reading it back made me realize it didn't sound as I thought it did originally. If I were to write it again, I would do it more slowly, and try to put it more eloquently that in my opinion the benchmarking methodology was flawed.
Hi, the python version without numba is already there. It's the Py-threading line. I also added the remaining raw numbers. Thanks for the feedback.
It is a different implementation. It's a source to source compiler (what other people call a "transpiler"), which is what most programming languages today do (including C and C++, `cc1` and `cc1plus`, which are the C and C++ gcc compilers, produce target-dependent assembly, a form of source code, `javac` produces java bytecode, a form of source code, etc). What you compile to, is irrelevant, as long as the original semantics of the source code are being preserved in the target code, and you have a way to further reduce or interpret the target code. The fact that the original python implementation is interpreted doesn't mean that any other python implementation has to be.* Python, **the language**, is strictly a specification of a syntax and a semantic model. You don't necessarily need to implement the specification as an interpreter, vm or otherwise fat runtime. Now if the language's semantic model itself makes some things difficult to implement in the classic source-to-source compilation model, then that's another question. [*]: In fact, there was a (now abandoned, afaik), [GCC frontend for python](https://gcc.gnu.org/wiki/PythonFrontEnd) that did exactly that, source-to-source compilation.
I tend to agree with you that it's a more correct intellectual approach; but it also makes it more complex by design. What you describe is basically [what 3scale did](https://github.com/solso/api-aggregator). My wish here was to make something much simpler that just works, that doesn't need any administration and that only depends on Flask. It surely has drawbacks, but I feel it's good enough. What are your concerns about safety and scalability?
Why even a VM for developing? You could create a persitent boot stick and run the OS from it. With USB3 it is fast enough, linux distros are in general not so demanding than windows is. You need two sticks, on normal Boot/Installation Stick you can download the image for it easily. After that jump into the system and install the real OS on the other stick. Done. You have a real OS on it and after every reboot you can switch between the different systems via boot manager F11 for the most BIOS versions. After this you will have a portable OS that will work on almost every pc you have access to. Just as an idea ;)
&gt; 2 lines are actually thousands of lines under the cover So what? grumpy itself is a ton of code, it's not like it works by magic. Both implementations use a bunch of code hiding somewhere to make things go faster. Why does it matter that in once case that code is part of the implementation and in the other that code is in a library? I think this point is actually really important, because 'Python' isn't just python code, it's an entire ecosystem of tools and libraries without which it would be pretty useless. In fact, grumpy throws away a huge amount of that ecosystem by not supporting C-extensions, making it vastly slower for a huge number of use cases (e.g all of scientific computing). And yes at the end of the day these benchmarks are a bit silly. But it doesn't change the fact that CPython has great tools that let you run certain types of tasks hundreds of times faster, and the existence of these tools is what makes Python great as much as the language itself.
Another option is to use RDP. You can rent a well-sized EC2 instance just for the day, shouldn't be more than a couple of $, much less if you take a spot offer.
i checked the code and a saw that thing but is it really that simple?
I'm seriously doubting it would be tough to pull off. I mean, they have to change the workflow to suit the extra compilation + tests + deploy steps. How much does this hinder their work in comparison to : a) contribute to Pypy / pypy3 with the resources of google b) alias python to pypy on servers 
Bottle, because it's small and simple, comes with a good built-in template library, has full support for all kinds backends and plugins, and requires no install as it's a one-file-module. 
FYI: the behavior of _doc_merger is exactly what the default style "parent" does!
I've seen Sanic recommended in a bunch of places, but it looks really new. Is anyone using this in production? What has your experience been vs say Tornado. I'm just wondering if it's just a cool new toy or its been battle tested.
They don't want to make their Python faster. They want to import their Go library (so they can develop in Go onward), and also keep their Py2 legacy code. Pypy solves speed problem, not legacy code problem
It's a cool new toy with dank memes and it *goes fast*. Don't use it if you want something battle tested and with wide support for all sorts of things.
Oh, u know it. 
Python *is* strongly typed. That's why you can't iterate on None. 
Does it work on Windows?
&gt; Python sure has its limitations but they haven't convincingly shown that they've run into them. They directly write in the article that multi-threading is their reason. It is virtually non-existant in Python, but builtin in Go. Isn't that a pretty good argument?
In the situation you presented the time complexity is O(n) ("A common need when working with data, is to find the top 10 in a larger list"). Even if you had this function of n situation it would still be O(n*logm) due to the avenue of keeping the comparison (result) list sorted. As to wanting a function of n of the list sorted, this is a separate problem from getting a static slice out of a list. It's a way of saying "I want y% of this list sorted" so yes you want to either partially sort or fully sort then.
I have only been using python(3) for about a year and a half, but I think this post and the comments here highlight what I dislike about python. There are so many ways to do one thing, and you can make python so incredibly slow, or actually really fast. Usually the fast ways implement some awesome library. But unless you really dig into it, you may not know about that awesome library or function in that library, thus easily making your code _slow_, since the "easy, native way" is slow. Unfortunately.
That's totally possible with Python. In fact, you can probably avoid all the manual SQL-wrangling if you use an ORM library like [Peewee](http://docs.peewee-orm.com/en/latest/).
Thanks! I'll need to use SQL in some way or another, as it's a tool I've learned in a previous class. It looks like Peewee has support for SQL, and SQL Lite, which is great. In terms of building the GUI search function, how hard do you think that would be for a Python beginner? I'm assuming my best bet would be to use TkInter. 
They're flaky because a process will sometimes mysteriously be killed or stall indefinitely. They are slow because all communication between processes must be serialized on the sender and deserialized on the receiver, because processes don't support a shared memory space. Further, as I mentioned elsewhere, each process requires its own interpreter, which takes 5MB, so you won't be scaling these processes. I don't dispute that there are people out there who think threads are evil, I dispute that this belief is widely held, or that this belief isn't widely held because no one knows about processes. Experienced developers still prefer threads to processes. Processes are not a secret; they're lesser used because they are more memory intensive and intercommunication is horribly slow.
If by "SQL Lite" you mean "SQLite", that's not a language, it's a small database library that's sort of like a light version of MySQL. If you don't want an ORM and want to execute SQL directly, use [PyMySQL](https://github.com/PyMySQL/PyMySQL). For the GUI, you can use Tkinter, or you can build a web app with a simple framework like [Flask](http://flask.pocoo.org/).
Also for CPython you may want to add a `__slots__ = ('value', '_length')` directive to limit instance overhead over the base PyInt.
I wasn't trying to imply that a general form proof of the traveling salesman problem was easy. I'm quite sure that it's very closely related to the P=NP problem that still has a $1 million bounty unclaimed.
imho you'll end up with a much nicer looking GUI if you use a simple flask structure and know enough css styling to make it look nifty
not with the same sort of GUI interaction as Excel, but it's fairly easy to read in that scale of data and resample/analyze using the pandas module, then export post analyses data back into a csv or excel format
Thank you!
&gt; I'm seriously doubting it would be tough to pull off. I am not familiar with inner workings of numba. Reason for my statement was `nogil=True`. We just can not ignore gil if we are using standard python stuff that can not be jit'ed to pure machine code. Any call to python runtime must have a gil lock. Now numba may or may not sprinkle gil locks/unlocks in appropriate places. No matter what happens such code would still be way slower than code in example which is simple enough to compile to pure machine code. I suppose this is a good example why microbenchmarks can not be trusted.
It's not like the core devs want the GIL. It is a hard thing to remove and mostly doesn't matter. In fact many people like the safety.
&gt; Python sure has its limitations but they haven't convincingly shown that they've run into them. I'm finding, more and more, that this is 100% of people who worry about Python's limitations.
So Google has seen major performance improvements from using Grumpy. For their specific needs. In their own, specific environment. My take is that it doesn't really matter if we're able to get the same performance gains as theirs; after all, they made the tool primarily for themselves, right?
That's why I wrote rewrite of a subset, and it has to be in a strategically good moment - now is certainly not it. That's why I think Python 3 was a missed opportunity - it broke compatibility (albeit less so since around 3.4), but still didn't fix this issue. I don't think you need a GIL for safety, there's lots of research readily available on how to do lock free multithreading, IMO this could be done without the programmer noticing much. Start by making dict, list, tuple and set operations thread safe and remove silly unneeded things like global addresses to c-types like shown in OP's link. Based on that it would be pretty simple to make all Python objects inheriting from `object` thread safe as well, they're just dicts with some wrapping and syntax sugar.
To ask questions and learn about doing new things, I suggest that you post under /r/learnpython. It's the right place to do it. Thanks!
Sure, the crucial thing is only that you prepend the `f` in front of the string: name = "Phil" print(f"My name is {name}")
&gt; blem, shame the designers didn't think of that. How about Swift then? Should be interoperable since it has Obj-C (and thus C) bindings. Does it have Nim's type unions though? (I think those are kinda im Julia
look into pandas rolling_mean function
It looks like it is just iterating over the requested routes and executing them one by one. Have you actually tested this solves your latency issue? Instead of 3 individual requests that never have to wait for each other and might get executed in parallel by the server you now have a flow with 2 buffers and a serial execution in the __generate() step. All this to save 2x HTTP overhead. Is that a good trade? Note the app is eating the response headers, so no max-age, expires, etags or cookies or whatever (eg: your Flask views are now more limited and have to coordinate with the wrapper).
If I'm not mistaken, it was quite "simply" the original CPython source code compiled for Windows, with useful specific extensions (to interact with the Windows API), a nice installer, support from the editor, etc. In other words, it was a different Python *distribution*, but not a different *interpreter*.
A bag file is a recording of a run using ROS (Robot Operating System), and you can play it back in realtime (or faster or slower) in order to analyze the data or try out different strategies without having to use the robot itself. Can you update the README without bumping the version?
The `nogil` keyword is only really of any use when you're calling into an external C library that knows nothing of python or similar, since anything withhin the `nogil` block has to be compilable to PURE C with no python objects or anything withhin it. So that is extremely restricting and not generally useful. You couldn't e.g. just take some random python someone wrote, compile it with cython and then insert `nogil` keywords to speed up anything. And even if your code has some parts that you can `nogil`, it's very difficult to know if you're gonna get a speed boost out of it (`nogil`ing individual small blocks of code is *probably* next to pointless (or could even hurt due to increased lock flickering?), there'd only be a point if you could `nogil` a long-running loop, i/o operation etc) The google project OTOH could in principle just be applied to some pre-written python code to speed it up without any such limitations. So I definitely see the point if you're in a situation where you have a large python codebase that uses threads, does not use the CPython C API and you need a speed boost.
Interesting post on a similar topic: https://www.ibm.com/developerworks/community/blogs/jfp/entry/Python_Meets_Julia_Micro_Performance?lang=en
thank you! 
Thanks for the suggestion, This was mainly made because I was having this problem(Going to the website, finding correct sub according to ripper , unzipping it ).So i wrote a small code for the above task andI I thought it would be nice to share the code in Reedit for the people who hate this problem or task. As your suggestion, I Optimised the code little bit. Please check the link: https://github.com/basilpbabu/Subtitle-Downloading-Python-Script
The graph shows that they scale (sort of) linearly with the number of added threads which is the best possible outcome. It doesn't matter what the (toy) problem is, Python can't do that, and that IS their problem.
Both your points are entirely true. :) As is, Flask-Aggregator is only useful if latency is a real issue and response time is not, and that more than N requests are sent at the same time, where N is maximum number of concurrent requests on user's client. If we have an application that answer in 5 ms but that it's reached in 200 ms, and that user's client limits to 6 concurrent requests (what Chrome does), then 15 GET requests will take 605 ms without aggregation and 275 ms with. So yeah, that's only interesting in extreme cases. But as of today, Flask-Aggregate is really a PoC/MVP that just asks to be worked on! Adding some asynchronous support is the obvious next step, and an easy improvement that will make the aggregation useful on much more use-cases. Edit: By the way, thanks a lot for your remarks, it's great to be challenged and that's one of the thing I really expected from posting that here. I've updated the README to reflect this discussion.
Basically, as fa as I get it, I suppose their situation is : - have millions of codebase you don't want to rewrite - need cheap threading in production - need quick development cycle outside of production - notice that threads are really cheap in Go - choose to transcode and compile in production, keep existing codebase and dev cycle in develop. Getting rid of VM basically makes the threads quite cheap. That probably don't include optimizations like nuitka tries to include, or some JIT such as pypy. basically they can serve many, many requests from their webservices in python where before, they could just serve many. 
Not if it introduces minefields of brokenness throughout the code. Maybe look at pendulum? Otherwise the std lib is mostly ok I think. Except for the time zone handling which there are libs to handle. 
Write a backend in python, maybe flask is the easiest to start with.
Qt is decades old. It's not going anywhere. 
Keep on going :) , nice little project to learn yourself more python
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Each thread can run it's own redundant computation. That exactly suits the purpose of this benchmark. All it needs is some cpu-bound computation.
So what you dislike about Python is that you can get better results if you're experienced with it? What languages does that *not* apply to?
Reminds me of a blog post that compared (compiled) Delphi code to PHP, Perl and Python. In one of the tests PHP beat Python. The Delphi blogger contended that this "wasn't fair" since the PHP code what utilizing a standard library written in C so it was "really" C code being run and that to be "fair" the PHP example would need to implement the standard library function from scratch in PHP! He was then asked if the Delphi compiler was written in Delphi or C. :-) 
just specify "parent" as the style, instead of _doc_merger
I'm working on learning python so I can change roles in my current job :) I took VB and Java in college so it's just learning how it's different so far.i haven't programmed in a couple years so it's also learning how an indentation can change everything! So far I like python though, I'm excited!
&gt;[*]: In fact, there was a (now abandoned, afaik), GCC frontend for python that did exactly that, source-to-source compilation. Thank you for linking this. It's really interesting. I think I may try and toy around with it.
I'm sure it is, learning how to write the language takes some time and practice, that's not my main point though, since I did not find that too hard to accomplish (I'm NOT saying that I'm perfect and write the most awesome code) but knowing when and where to use an external library, knowing about just that library and so on. I will check out that book tip though, thanks!
There really is a package for everything with Python. Rather specific, but I can see it being useful to a few people.
Of course it is speculation, they wouldn't admit it, but think about it. They aren't embracing Python 3 in their new projects. Ticket about Python 3 support, was closed with update in documentation that only Python 2.7 is supported. They only seem to target a subset of Python functionality and they want to use it for running YouTube code. The "pythonic" way of doing things is to make all tedious tasks be done by a python, and essentially python code should look more like a business logic. This approach is why I was able for example to encode and stream video in Python (all heavy lifting was done in C in GStreamer). If their goal wasn't to move their codebase to Go, they would most likely present code to build Python modules in Go.
I have to admit, it makes sense.
I think this is aimed less at Google and more at the discontent that is stirred up when people interpret people publicizing their performance gains. Google and grumpy are not the problem, people getting into yet another fit about the "horrible" performance of Python, however, can be counterproductive.
&gt; There are so many ways to do one thing, and you can make python so incredibly slow, or actually really fast. This is opposite to my experience. Usually in Python there is one right way to do things. Of course, like any Turing complete language, you can probably find extremely inefficient ways to do an arbitrary task, but the "Pythonic" way is usually fairly straightforward and as efficient as reasonably possible.
If you are looking for critique, post this on /r/learnpython. Make sure to post the code as text, not as an image. 
I don't think so, but it's not urgent - but could be useful extra info next time you do a release.
I've written a post called "Stepping from Matlab to Python": http://scottsievert.com/blog/2015/09/01/matlab-to-python/ There is a package called `pylab` meant to emulate Matlab. If you use `from pylab import *` (I don't recommend it), you can do from pylab import * x = linspace(0, 1) y = 2 * sin(x) fig = figure() # the figure object plot(x, y) show() Matplotlib does have different styles; see https://tonysyu.github.io/raw_content/matplotlib-style-gallery/gallery.html for previews. Use `plt.style.use('bmh')` to use style `bmh`. This will change the line width, axes, the colors, etc. If you want, you can customize all the parameters in this yourself: http://matplotlib.org/users/style_sheets.html
Wait, you want to just grab the material to study automatically? When you say learn the material, who exactly is doing the learning?
I believe you have referred to "list_of_num" as "listValues" in the latter half of the code.
Do you have to have 3.6? pyinstaller works with 3.5. 
Have you tried this ? http://nuitka.net/ I am not sure if it supports 3.6 yet, but it does support 3.5. 
&gt; python to javascript &gt; written in java [So you're looking to do Python to Javascript to Java?](https://qph.ec.quoracdn.net/main-qimg-504a26ed8b7cefd1f29b992db733f592-c?convert_to_webp=true) 
Loool come back in 20 years
Sounds like you want to check if an element is in a given list. If so use the 'in' keyword for example: if a in list: print(True) 
Great link, thanks for sharing
There is the cryptography library for general cryptography or passlib for passwords.
Don't give him a fish, give him a fishing rod. /u/chicken007assassin, you need to find a way to see what your program outputs before it "closes". In many cases, yours included, error message will be very helpful. In the future, don't post here, post to /r/learnpython.
**Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=all) of all time!** \#1: [Python 201 Book is Free for 48 hours](https://np.reddit.com/r/learnpython/comments/5814lw/python_201_book_is_free_for_48_hours/) \#2: [Python 101 Book FREE for 48 hours!](https://np.reddit.com/r/learnpython/comments/5bmaz0/python_101_book_free_for_48_hours/) \#3: [Beginner's Python cheat sheets](https://np.reddit.com/r/learnpython/comments/4atn5f/beginners_python_cheat_sheets/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/)
Could you give an example of something that you'd like to do in Matlab but you think wouldn't be possible (or would be really convoluted) to do in Python? My intuition is that you can do anything in python you'd want to do in matlab. Many examples have a different syntax because matplotlib prefers to use object-oriented syntax rather than calling lots of functions, but both are available.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Learning OpenGL stuff. Ultimately trying to make a lighttable spin-off. At this moment I'm reading this: https://open.gl/drawing 
Should include Enforce - I'm using it now to enforce python 3.5 type hints at runtime and it's pretty damn cool.
Not really sure anymore, I think I was ill-informed. I actually really like the object-oriented approach, seems really consistent and natural. Still learning. Maybe I will just totally overhaul to python. Are different matplotlib options fairly stable at this point?
that comic is a tad exaggerated but... yeah basically
If you're just making plots to analyze data, matplotlib can certainly provide that sort of support. It may not be the same as MATLAB, but the functionality is there. However, for professional-grade plots, or another option, I would suggest you check out [LaTeX with pgfplots](http://pgfplots.sourceforge.net/gallery.html). LaTeX is a typesetting programming language, and can provide you what you're looking for and then some. It's not as great if you're still trying to do data analysis or review data, but it's output is exceptional. 
&gt; both meat ...?
Ham and hamster meat. [Bonus Video](https://www.youtube.com/watch?v=7tScAyNaRdQ)
Well I agree with the sentiment of this post. The only thing this shows is that Python can be more than 100 time faster than grump when doing Fibonacci math.
I save my matplotlib figures as pgf for use in LaTeX. Works very well.
Seaborn (a python module built on top of matplotlib and pandas) has some nice built-in style tools. It's straightforward and plays nicely with matplotlib. http://seaborn.pydata.org/examples/index.html
Should we use: if NorwegianBlue is None: or if NorwegianBlue == None: ? :-)
Bless your kind soul. 
Ding!
Yep!
I work largely in Python and have some experience in Matlab, though I haven't used it in a day to day scenario for years. While I would hate to have to go to back to working on a large project in Matlab, I have to say you're likely going to be disappointed with Matplotlib. While it's a very impressive piece of software, it's on a different level than the plotting functionality of Matlab. Matplotlib is powerful and versatile, but compared to Matlab: 1. Performance is an issue. Interactive plots will become laggy with even moderately complicated plots. 2. Related to above, 3D plots are effectively useless. My understanding is that there is no actual 3D acceleration used in mplot3d. You can plot some simple 3D line/scatter plots or basic surfaces, but anything remotely involved will screech to a halt. I use pyqtgraph for my 3D plotting now and it's awesome but it's even less user friendly than matplotlib. 3. Doing anything more complicated than the common things everyone expects you to do will get really hairy really fast. If you want to be able to customize things beyond just line widths, colors, etc., and actually have full control over your plots, you're going to have to become intimately familiar with some undocumented APIs. While learning and using Python will likely be very useful for you long term, and getting a basic understanding of matplotlib will also come in handy, the moment you hit a wall where you think "oh, I just need to figure out how to move this label over here" or "I need to create this plot that isn't covered in the user guide", you're probably better off saving your data and loading it into Matlab instead.
If you want interactive web plots but don't want to upload your data to a cloud service, you can also look at Bokeh: http://bokeh.pydata.org. For debugging Python, if you find some of the open-source options too difficult/annoying to use, it's also worth checking out commercial IDEs like PyCharm and Python Tools for Visual Studio, both of which do have free/community versions, and which have excellent debuggers. 
Most of my colleagues use Matlab, I teach Matlab, but for my work, I mostly use Python. There is no discussion whatsoever: Matplotlib is WAY more capable and flexible than Matlab plotting. You mention that Matlab figures, axes, and plots have manipulateable handles. I'm Matplotlib, literally every single plot object from figures, axes, and plots, down to individual ticks, lines, spines, labels, legend parts, polygons, or points is an object that can be changed, observed, replaced, and extended. In numerous occasions I have created plots for my research and later my colleagues asked "how did you do that", because such plots would simply not have been possible in Matlab. Not every toolbox has a great equivalence in Python, just like not every Python package has a decent counterpart in Matlab, but when it comes to plotting, there is no discussion. Matplotlib stands heads and shoulders above Matlab's plotting. Just watch out for one ideological difference: Matplotlib tries, above all, to be as precise as possible. Its goal is plots for publication. Für that, it sacrifices plotting performance. Thus, interactive plots and "animations" (plots that are updated more that 10 times per second) are hard to do. On the flip side, plots look much cleaner (no aliasing, always correct vectorized output, all backends look identical). Für more cool scientific stuff that is impossible in Matlab, have a look at pandas, scikit-learn, ipython and dask. In my experience, it takes a proficient Matlab user two to three weeks to become productive in Python. I have observed (and taught) this in dozens of people ranging from undergrads to postdocs. 
I like this one. I actually mentioned it in my post.
Really glad to hear it!
In the situation where you're looking for the top 1 (highest), the time complexity is indeed *O(n)*, as jou can replace the current highest item with a newly found higher one in *O(1)*. However, if you need to find the top *m* out of *n* items, you will need to iterate the list of already found items to know which one to evict. The best case (an already sorted list) is still *O(n)*, but the typical case will require you to iterate the inner list. If you keep the top m in heap format, you may be able to do this in *O(n log(m))*, but I don't believe *O(n)* is possible. Feel free to prove me wrong with an implementation. Keep in mind that unrolling a loop (as you suggest in your initial comment) does not make it "not a loop", it just turns it into a fixed size loop; the same amount of work is being done.
Matplotlib has a very similar plotting objects structure to matlabs plotting tools. It is, after all, intended to duplicate this aspect of matlab. In terms of functionality in plotting there is very little difference. Where python really excels is customizability. Once you get under the hood it is possible to build really excellent plotting tools in python with a minimum of hassle. Matlab remains fairly rigid in that you can only really do what they have built for you. Additionally, If you are willing to step outside of the ridged plotting conventions that matlab seems to be conditioning into its users there are a number of plotting libraries customized for particular data types that are truly beautiful. Seaborn, and plotly come to mind but there are many others. And finally to your earlier point about speed in matlab: matlab is by and large a wrapper around C and Fortran libraries that are open source. Almost all of these libraries also have python wrappers. They are just not included in the standard set of libraries because most of them only do one thing (for instance calculating the inverse of a matrix). If you do a little digging (because of course mathworks make it tricky to find) you can usually figure out who's code they are using. Sometimes it isn't even the best option out there (for example their FFT implementation benchmarks 3rd or 4th depending on who you ask). As to simple matrix algebra, almost all of the speed up comes from using the intel math kernel library which contains optimizations of various operations for specific processors. You can configure numpy to use the MKL too.
Plotly has an offline mode that doesn't require you to upload anything to the cloud. The python code will generate an html file that will work if you host the plotly.js file yourself. I've used both bokeh and plotly and find plotly to be much better.
Ah, I only skimmed it.
&gt; What's wrong with working at Dropbox? Condoleezza Rice and rewriting Python 2, mostly.
Nice, thanks for your advice. After reading stuff in this thread, pretty sure I will attempt a full transition to Python and matplotlib this semester.
Yes, importing seaborn enables its default style. The power of seaborn lies in its statistical plots though.
That is not needed since your compiled JS is calling the API's, not whatever your compile-to-JS language. The API's you use are still JS. TypeScript .d.ts files are jsut for type checking, they aren't used at runtime. The python equivalent of .d.ts are the stubs for type annotation.
I don't know what's wrong with your setup. But I think the fact that numba is much slower points towards some distribution problem. Can you try anaconda python? Numba should work pretty well with ist.
Now you can do plt.style.use('seaborn-darkgrid') without importing seaborn. Other seaborn styles are available as well, see print(plt.style.available)
this is truly fascinating. thanks for posting
This is not the [infamous dataset](http://www.vox.com/2016/5/12/11666116/70000-okcupid-users-data-release) that was released in May 2016, which contained usernames and was ethically questionable. See the first paragraph of the linked [notebook](http://nbviewer.jupyter.org/github/lalelale/profiles_analysis/blob/master/profiles.ipynb#Introduction). Also, the referenced [paper](http://ww2.amstat.org/publications/jse/v23n2/kim.pdf) by Kim et al. explains how they acquired the data and how they got permission to release it. Also, this is not an institutional research project, but just a fun diversion to improve my pandas and graphing skills.
When presented like this, it is off-topic.
It still appears this data set was initially obtained in violation of the terms of service and thus in violation of the expectations of the human subjects whose data is used. No amount of retroactive third-party permission can erase that or overcome the fundamental ethical problem of how that data was obtained. The only thing it should be used for is a way to conveniently detect whose career in research is in need of ending.
His concern is that the tools developed by Continuum Analytics will not be maintained if the company is bankrupted. 
Am I the only one that finds functional languages utterly unreadable and ugly? Notable example, Haskell
Anything can be difficult to read until you learn to do it properly. Languages to me are beautiful if they provide elegant solutions to problems. 
Depends on what you want to do... There is no one solution for all problems.
Oh you didn't notice yourself? Multiple other charts have them too btw.
Interesting. Thanks for the context.
Your code is simple enough that this should really just be a module. Making a package and splitting your code across multiple files only makes it harder to read.
I suppose it is what you are familiar with. I'm sure I used to think that about moadl logic, then studied it and came to like the syntax.
Thanks! Feel free to post this elsewhere. Also, I think the [plots for categorical variables](http://nbviewer.jupyter.org/github/lalelale/profiles_analysis/blob/master/profiles.ipynb#Discussion-on-the-generated-plots) are really interesting, but they are too many to upload them to imgur.
I'm fine with Haskell until all the crazy symbols come out. Maybe I didn't spend enough time with it. 
I have been using nose for a while now and I admit I've never used pytest. Will have a look at it but can you tell me why is it better?
To me pytest is to unittest what python is to C#/java. Pytest is dirt simple to set up and get started with, you can still do everything unittest can do, and it's intuitive (yay for standard asserts)
Mine is probably the simplest on here this week. I got tired of having to log into devices to check 1 or 2 things all day. So I wrote a script that takes to arguments. 1. The device I want. And 2. The command I want ran. And it delivers me the output. Stupid simple but I'm proud of it. 
Here's a [good explanation](https://packaging.python.org/requirements/) and comparison on the two. Think of `setup.py` for an end-user installation from PyPI (for instance), vs. `requirements.txt` for dev/test (i.e. another developer trying to setup the environment to run the app, usually in a virtual env). EDIT: More info.
Maybe you don't want to install the package, but still be able to run it (to work on it, etc).
The nonsmoker results were interesting... Can you explain why that happened? Did you only have one nonsmoker?
If using `setup.py develop` to install the package for dev/test in the virtualenv, is there any need to have a requirements.txt file anymore?
* `.` is function composition, so `(f . g) x` is the same as `f (g x)`. * `&amp;` is reversed application, so `x &amp; f` is the same as `f x`. This is useful mainly for style purposes, often it can be nice to list what you're operating on first, followed by the operator (think OOP style with attribute lookup). * `&lt;$&gt;` is an alias for `fmap`, which applies a function over the contents of a `Functor`. `Functor` is just a fancy math word that usually translates as "container", but it has to meet certain properties. In particular, doing `fmap f` (or `f &lt;$&gt;`) has to preserve the structure of the container, so it's not good for balanced binary trees, unique sets, or pretty much any sorted structure. It does work on regular old lists, `Map`s, any monad (by definition), optionals, and other structures where you can operate on the data inside without breaking the invariants of the structure itself. * `&lt;&gt;` is the `Monoid` operator. A `Monoid` is defined in mathematics as a set of values along with a binary operation that has an identity element and is associative. String and list concatenation is monoidal, addition on integers with identity 0 is monoidal, multiplication on integers with identity 1 is monoidal, as is function composition where the function returns the same type as it consumes (any `f :: a -&gt; a`, think builder pattern in OOP), along with many other. * `&gt;&gt;` is the sequencing operator to me. It takes one action, performs it, then performs the next action. So `action1 &gt;&gt; action2` literally just says "do `action1`, then do `action2`". * `&gt;&gt;=` is the more general version of `&gt;&gt;`. It lets you use the result of one action to influence the next action. The first argument is just an action, while the second argument is a function taking the result of the first action, and it returns a new action. With types: (&gt;&gt;=) :: action res1 -&gt; (res1 -&gt; action res2) -&gt; action res2 (&gt;&gt;) :: action res1 -&gt; action res2 -&gt; action res2 As an example: getLine &gt;&gt;= putStrLn is a simple console echo. I guess I should have mentioned the `$` operator as well. It is literally a do-nothing operator, the only interesting thing about it is that it has the lowest precedence possible, allowing it to be used for reducing parentheses: f1 (f2 (f3 (f4 (f5 x)))) Is the same as f1 $ f2 $ f3 $ f4 $ f5 x Although I personally prefer f1 . f2 . f3 . f4 . f5 $ x Since you mentioned it, the `&lt;*&gt;` is the operator associated with the `Applicative` typeclass. This typeclass sits between `Functor` and `Monad`. It's a little less intuitive than the types on either side of it, but it's very useful for certain domains. In particular, it shows up a lot in parsers. `&lt;*&gt;` is frequently used in conjunction with `&lt;$&gt;`. A common use case is if you have actions for getting different fields for a data structure, you can very easily write it as data Customer = Customer { name :: String , age :: Int , purchaseHistory :: PurchaseHistory } getCustomerName :: IO String getCustomerAge :: IO Int getCustomerPurchaseHistory :: IO PurchaseHistory getCustomer = Customer &lt;$&gt; getCustomerName &lt;*&gt; getCustomerAge &lt;*&gt; getCustomerPurchaseHistory Instead of using the monadic form: getCustomer = do name &lt;- getCustomerName age &lt;- getCustomerAge purchHist &lt;- getCustomerPurchaseHistory return (Customer name age purchHist) If you have a lot of fields this can save a lot of typing.
Tried nose2 awhile back - nice effort but it was kinda immature at the time, and I started using pytest and never looked back. I still make use of `unittest.mock` along with `pytest`, but as a framework `unittest` is pretty poor. My generic advice to anyone wanting to start using pytest: - don't make your tests in a class unless you have a really good reason to - if your reason for making tests in a class is "I want shared code for multiple tests (i.e. setup / teardown)", you probably should be using [fixtures](http://doc.pytest.org/en/latest/fixture.html) instead - there's nothing wrong with tests in a class, but I still suggest breaking away from that mold if only to change your way of thinking - if you want to test that one piece of code can correctly handle multiple conditions, use [parameterized tests](http://doc.pytest.org/en/latest/fixture.html#parametrizing-fixtures) rather than creating 10 test cases (if it seems to make sense in the context) The thing that really held me back was that I found I was trying to put code that needed to be reused in setups and teardowns. That pattern doesn't seem to scale well for larger projects
It's common for people, like me, too install using `pip install package --no-deps`. This might because you're testing against a custom build of a dependency or you're paranoid about what subdependencies are going to do (except for me since wheels are handicapped on linux) 
And this is why I hate OSX. Apple wants to create a walled garden but all that happens is that it ends up infested with weeds. And as an aside, the OpenSSL that they ship is so privileged root can't muck with it. Which in one hand is nice because unwitting end users can't break stuff, but in the other I can't do anything about it either 
It doesn't matter if it's top 1 or top 10 or top 100, it's a static amount of work per n meaning it doesn't impact the complexity, it's only a linear multiplier for n. It'll impact performance but I'm gonna say it right now that finding 10 items from an arbitrarily large list it's gonna be cheaper to set up a result list than try to sort or partially sort any part of the arbitrarily large list. As I said earlier I'm commenting on the premise you gave. The m is a factor of n situation is different in the sense that the requirement is not to just get a top 10 but instead the hard requirement is to get a list partially or fully sorted. Edit: I'm not saying your article is bad or anything, but with the premise you give in it noobs are gonna read it and think they're gonna need partial sorting just to get 10 specific items from a collection.
I think I may have worked this out. I needed to have the type signature in the @jit decorator: @jit("int32(int32)",nogil=True) Now it runs like the dickens: 1 0.094211101532 2 0.182185173035 3 0.163334131241 4 0.190953969955 Did you have that in your test code and maybe not include it in the source you posted? Or maybe we have different numbas with different type inference capabilities? Since this is python 2 code, Im running from my anaconda2 installation. Maybe the numba's are different between anaconda 2 and 3?
&gt; as written, I am happy to report that our business is going quite well, and that our product and consulting revenues ha Great! Thanks for your input here and all the great open source projects! 
&gt; or you're paranoid about what subdependencies are going to do I am suprised to see this concern buried so deep in the comments. It was the first thing that should be mentioned in the article after mentioning "requiremts.txt", pip etc. - it's convenient alright, but for a reason. I wish we had something like "trusted pypi" that would be managed in a similar way to linux distros as opposed to "anyone can upload anything".
If I install Python 3.4, should it work after that, or do I have to go through messing with the registry again?
Is it just me or is `py.test` the real pythonic way to do testing in Python? I really think it should be included in the standard library and preferred to `unittest` which is reminiscent of ugly Java-inspired testing.
It has a very similar fixture called `monkey_patch`. Edit: it's similar to `mock.patch`, I still use lots of `mock.Mock(spec=...)` in my fixtures.
Do I need the `local` flag if I'm inside a virtualenv?
I checked the install of all users option during the install. So it should be system-wide.
Maybe it is my local area, Rochester NY, but there are a lot of people involved in optics here. With Windows you are at once all set and also screwed. It has been said for example that Python is weakest on Windows. I'm not sure I agree with that so realize I'm repeating an opinion there. The big problem with Windows is that new technologies don't crop up on the platform anymore or if they do they lag mainline development. In any event You should consider installing Visual Studio to get access to MicroSofts development tools. In the end as stated above you will likely find benefit in knowing more than one language. WE do have to keep in mind though that you are an optics engineer and not a developer per say, this means you need to consider a tool to get the majority of your work done in. I really think Python is a good choice at the moment, who knows what will be the in thing in 5-10 years.
I am on Windows 7 still
I was going to suggest installing NLTK in [Bash on Ubuntu on Windows](https://msdn.microsoft.com/en-us/commandline/wsl/about), but that's a Windows 10 only thing.
Meh. Used pytest in some projects, still coming back to nose. So easy to set up and run. 
Uhh. I'm not sure if this is a troll post, but if you really have questions about snakes and not programming languages, try /r/snakes.
Everyone should take a look at pip-tools for generating requirements.txt. It lets you specify your 1st-level dependencies in a requirements.in file, generate a requirements.txt from that which has all dependencies at locked versions, then force your local environment to match requirements.txt exactly (uninstalling extraneous packages). This means when you remove a package from your 1st-level dependencies, you don't have to hunt down all the packages that were in your requirements.txt just because they were dependencies.
(Django's not a great example, as pip only pulled it down, so I'm going to use Flask instead). Personally I like using a `freeze` because it makes running the code the most repeatable. 'I need Flask' is something you might put in your `setup.py`. 'When I last ran the tests I ran them with Flask version 0.12, itsdangerous version 0.24, click version 6.7...' is the stuff of `requirements.txt`. That way if you abandon the project project and I come across your code in 2 years I have a good chance of getting it working. If you just said 'Flask==0.12' in your `requirements.txt` and I did a `pip install -r requirements.txt` then maybe I get `click` version 7, which was never tested and doesn't work.
Thanks for the reply! Still very new to the world of Python so this is great info. 
Wow, thanks, I'm glad to know I'm not the first with that idea :D.
Agreed, but OP is just stepping out of MATLAB. They'll climb on to better plotting tools in Python as they get comfortable. Matplotlib is a touch of the familiar while they get up to speed with OOP and Python's various other benefits. Eventually, matplotlib will be the anti-Pythonic drag, and OP will go find things like Pyplot or Pyqtgraph.
Converting back end services written in Chalice to Zappa.
I have a linux package manager. Circumventing tools that install without it are not for me, thanks. So "every Project should have" might be a bit too much.
Adding to what kenmacd said, also see kurashu89's comment: https://www.reddit.com/r/Python/comments/5n4jz7/what_every_python_project_should_have/dc8rvbg/ You usually want to track the dependencies of your installed packages, because there is no guarantee that future versions of dependencies don't contain compatibility-breaking features, or that they don't introduce bugs.
Seconding the recommendation of pip-tools. It only takes a couple minutes to learn how to use it.
You are correct. The API does not change. But I started using it myself and it's awesome. Much, much prettier.
It's a normal and good practice to maintain your Python projects using virtualenv. I'm sympathetic to just wanting to use the distro packages, but I think that approach has several disadvantages. I also no longer install most packages globally using pip. It clutters up my install with packages that aren't relevant for most programs. For this reason I also avoid using the distro package manager. It anchors you to packages that have only been added to the distro. There are many that don't make sense as distro packages that you will want to use for projects. Writing those substitutes from scratch, or manually installing them, is a waste of time. Your time is your most valuable resource. Use it to do cool things. It anchors you to versions of those packages, and they can often lag significantly behind, even if you use recent versions of your distro. Sometimes maintainers of distro packages disappear. Without virtualenv, all of your projects must use the same set of packages. It's also easier to rollback a package in a virtualenv than messing with system-wide Python packages. You may not even notice that an update broke a project until it has been several updates. 
No it does because the sub system sucks and he should dual boot instead. 
Any good guides, tutorials on setup.py? I am not a total noob, I have [a small desktop application for linux](https://github.com/DoTheEvo/ANGRYsearch) and people asked me for setup.py for it I kinda cant be bothered to learn about it and keep pushing it back, but I am guessing I finally should get to it I thought its for when your project is a module or something, something thats used in others people code, instead of being just some desktop app 
But you also get that if you put the requirements in the setup.py, I think.
Still working on my Django project ('social media platform' for movie reviews). I'm almost at the point where I am feature complete for a 1.0 release and can start working on the front-end!
Oh shit, why would pip freeze put global libraries, thankfully I don't think I've ever installed a global package.
Exactly. Matplotlib is a really low-level plotting interface which can be tedious at best. Seaborn is an excellent wrapper that bridges the usability gap between the rest of the scientific Python stack and Matplotlib.
Ohhhh good catch. Didn't know the no dep argument was available for pip installs.
NeoVim with Deoplete, Deoplete-Jedi, Nerdtree, gitv, neomake ... etc ... you can see this here: https://gitlab.com/snippets/25691
You do, but you don't often list all your dependencies dependencies in the setup.py. You only list what you use, and in a more general way. This makes the package easy to install, but makes it more risky that you'll hit some incompatibility. In your setup.py you list that you use Flask, and Flask lists that it uses Jinja2, but you don't list Jinja2, and you probably don't list that Flask has to be 0.12. Me and everyone else can then install the package, and use it. Maybe a few years goes by and now when I clone and setup the package it doesn't run. I get some error. Well without a requirements.txt I have to guess at what version of the dependencies everything works at. Maybe Jinja2 2.9.4 is broken in some odd way, but 2.9.3 is okay. Or maybe it's something else entirely. With a requirements.txt I can set up my environment to match your environment, then I can upgrade packages and quickly figure out what broke. Then I update requirements.txt and I add a `&lt;=` to setup.py.
Unittest is also dirt simple to set up, can you be a bit more specific? 
My university has the domain blocked for some reason, what does the article say?
**Edited because /u/masklinn showed me unittest's cli tool** **Edit 2: unittest ain't so bad** Sure. For pytest I used it once and never had to google anything about the basics ever again. Back when I used unittest I always had to crack open google to see how to set up the classes. This only applies to basic testing but that low barrier to entry is extremely important! For example, here's the most basic test in unittest which you run by running `unittest` from command line: import unittest import foo class TestMyStuff(unittest.TestCase): def test_stuff(self): self.assertEqual(foo.bar(), True) And here it is in pytest which you can run by running the command `pytest` import foo def test_foo_bar(): assert foo.bar() == True
While I can see how that can be an issue as an _edge case_, if you're installing a package from a specific commit, isn't that something of a release management failure by the maintainer?
How does testing relate to setup.py? Do you mean that when you get a new module from pip you like to run the tests?
What are the advantages of nose over pytest? I've never used nose. **edit**: A super quick check makes it seem very similar to pytest. I like that you can write normal test functions that don't involve subclassing, and you can use assert. 
Note that unittest now has a discovery cli so the main section is unnecessary. 
I've started planning for a school project. We just finished our HTML/CSS/JS frontend (I made a game/engine from scratch partly via a youtube tutorial in JS [Defend the Castle - js game](http://mccordgh.github.io/project_NSS_game)), and have moved on to Python. I'm trying to figure out the potential and what I should be using the backend for vs the frontend. There are python game engines, but I could also use a JS third party engine with a lot of the data load on python, and the js client mostly for rendering. Any suggestions are very welcome.
It'll output global libraries if you create a virtualenv with global libraries (which doesn't happen by default anymore).
How are you installing it? I just tried `python -m pip install nltk` and it installed just fine. I'm running Windows 10 64bit and python 3.5.2 32 bit.
I don't know. I spent years using nose. I can integrate it really fast with my projects. Works well with CIs. Has plethora of useful plugins. It works. I see no reason to upgrade.
Do you need Java or JavaScript?
That's not clear in your OP. [SO has some suggestions](https://stackoverflow.com/questions/30155551/python-in-browser-how-to-choose-between-brython-pypy-js-skulpt-and-transcrypt)?
You are using Python2. Python2 uses integer division if dividing two ints, so `9/5` retuns `1`. Use `9.0/5` instead to avoid integer division.
You're welcome. You can see an example of its use in the analyses.py file in the same directory.
crazy symbols is why i failed computer engineering.
you want to prefix your code with 4 spaces on reddit to have code formatting: C = raw_input('Enter the temperature in Celsius:') Print C F = float(C) * (9/5) + 32 Print F
FYI Model Mommy / Factory Boy / similar accomplish something very different from what pytest fixtures do. The two are neither mutual exclusive nor do they overlap in purpose. For example: @pytest.fixture(scope='session', autouse=True) def drop_and_reload_database(): db.create_db() yield db.drop_db() The above code is the equivalent of an entire-test-suite's setup and teardown. Everything before "yield" runs before the first test, then after yield gets run after the last test. Obviously Model Mummy doesn't do this sort of thing. Personally, I use Factory Boy (similar to Model Mummy), but I do not often use Factory Boy with fixtures. There are, however, some use cases where they could work very well together. For example, the following code would test that you can process an order with a bunch of wacky usernames. It uses both Factory Boy AND pytest fixtures: class User(db.Model): username = Column(String) class UserFactory(SQLAlchemyModelFactory): username = factory.Faker('username') @pytest.fixture(params[-1, 0, 1000000, 983.0, "Jack Daniels", None]) def user(request): return UserFactory(username=request.param) def test_can_process_order_with_wacky_usernames(user): order = Order() order.created_by = user order.process() assert order.processed_by == user output of the test suite is something like this: tests/test_process_orders.py::test_can_process_order_with_wacky_usernames[-1] PASSED tests/test_process_orders.py::test_can_process_order_with_wacky_usernames[0] PASSED tests/test_process_orders.py::test_can_process_order_with_wacky_usernames[1000000] PASSED tests/test_process_orders.py::test_can_process_order_with_wacky_usernames[983.0] PASSED tests/test_process_orders.py::test_can_process_order_with_wacky_usernames[Jack Daniels] PASSED tests/test_process_orders.py::test_can_process_order_with_wacky_usernames[None] PASSED 
In fairness oop isn't useful for things like solving Project Euler problems or doing math and data science. Especially in python where it'll make your code slower since you could probably use numpy instead. But if you are building a desktop application or a business one then it makes sense.
&gt; Apple is just pathetically inept here. They're shipping a forked version of openssl 0.9.8 So, is it just the version number that you have a problem with, here? They're maintaining their own SSL code based on an older version of a popular library... that seems entirely acceptable. What, exactly, is python.org getting out of this TLS version push? Is Apple's OpenSSL fork still obeying old features (like allowing SSL mode from TLS)? Or are we really just unhappy with the version numbering, here? I'm just trying to figure out how much of this is a result of pattern-matching and how much is real functionality. 
Yep! It's a little magic, but I like it. I name all my test files/functions like that already. **edit:** that is, it looks in `test*.py` files for `test*()` functions
/r/learnpython
Had months of headache at my last place as someone had pinned some pytest requirements at random versions and let others float. It coloured my view on it. But maybe I should give it another chance. Edit: Actually pytest components, not pytest requirements. If pytest was a single package that wouldn't have happened. /tryingtoaccountfordownvotes
Nice explanation of the benefits of fixtures over a model factory!
&gt; It's a normal and good practice to maintain your Python projects using virtualenv. Projects that you're *writing* or using? If I'm installing software, it should be a package. You shouldn't be able to tell that it's written in python, the installation should just be `pacman -S &lt;package name&gt;` or your package manager of choice. Software that it depends on should also be packages, generally with the name `python-&lt;name&gt;`. So markdown is `python-markdown`, and any application that requires python markdown will simply add a dependency for `python-markdown`. Your package manager can also require specific versions of packages, too, so if you're trying to upgrade something the package manager will warn you. I don't think you can have multiple versions of the same package installed, but any cases where you need an older version (Backwards incompatible changes) should have a new package name.
What every Python project should have Posted on Mon 09 January 2017 in Python Over the past few years, the Python programming language gained a huge popularity boost and its community grew faster than ever. With this growth, a lot of tools appeared that help the community keep things organized and accessible. In this article I am going to provide a short list of items every Python project should have in order to be accessible and maintainable. requirements.txt Firstly, the requirements.txt file is crucial for the sanity of those who want to install your project. It is basically a text file which contains the dependencies to be installed via pip, one per line. It is that simple. And that powerful. You can also have multiple requirements.txt files that serve different purposes. For example, you can have a requirements.txt that have general dependencies listed that your project need to run, a requirements_dev.txt where you have listed some dependencies that enable some debugging mechanisms and a requirements_docs.txt that has listed some requirements that are used when generating the documentation (such as Sphinx and the desired theme). setup.py A setup.py file is crucial for your project if you want to be installable via pip. It is easy to write, very configurable and takes care of a lot of things such as importing, project metadata, updating the sources, installing the dependencies, and much more. You can check the setuptools documentation for more information on this. A proper structure The project structure is crucial. With a well organized structure, it will e easier to organize things, locate certain source files and encourages other people to contribute. The root project directory should have a structure similar to root/ docs/ tests/ mymodule/ scripts/ requirements.txt setup.py README LICENSE Of course, this is not the only way to organize your project, but this certainly is the most used template. Tests Unit testing is crucial for your project. It allows you to be confident in the stability of your code. I recommend the unittest module for this job as it is built in and is flexible enough to get the job done right. There are also other libraries that can be used for testing your project, such as test.py or nose. Documentation If you develop a project, I am sure that you don't write it just for yourself. Other people must know how to use your project properly. And even if you write the project only for yourself (although beats the purpose of open source), after a while of not developing it and when you come back to it, you will surely not remember anything that is going on in your code (or API). So, in order to achieve a reusable code base, you should: design a sane API that is easy to use and remember the same sane API should be flexible enough to allow easy configurations document the most relevant use-cases don't try to fit all cases. It should fit only the most usual 80% of cases. In order to properly document your code, you should use a tool specialized for that job, such as Sphinx or mkdocs, so that you can generate nice-looking documentation with proper reference links by writing in a popular markup language designed just for that (rst or markdown). Conclusion After you familiarize yourself with the topics described above, you will surely be able to produce nice structured projects and libraries that comply to the community standards. And don't forget to ALWAYS use PEP-8!
It's really a model factory using fixtures! Both And, not either / or
Why not both? You could use this in your `setup.py`: install_requires = open('requirements.txt').read().split('\n'),
Thanks!
pytest has a built-in fixture called `monkeypatch` which works similar to patch in `unittest.mock` Personally I have only occasionally found it to work better than patch. I love using `unittest.mock.MagicMock` as a stub too - pytest doesn't really have a concept of a stub. for example: from unittest.mock import MagicMock def test_that_my_sql_query_was_built_correctly(): stub = MagicMock() run_database_query(connection=stub) assert stub.execute.call_count == 1 assert stub.execute.call_args[0][0].startswith('SELECT ') assert stub.execute.call_args[0][0].endswith('LIMIT 100')
Not sure I 100% agree since unitest is in the standard library and if I'm trying to keep my requirements/imports low then it will be the better choice though I suspect that would be more of an edge case.... 
shared with /r/OkCupid! more responses for you here: https://www.reddit.com/r/OkCupid/comments/5n7nj4/analysis_of_a_public_okcupid_profile_dataset/ so many interesting stereotypes to confirm, disprove, discover in those categorical plots. as someone in the new thread asked for another reason, this is just the bay area right? http://nbviewer.jupyter.org/github/lalelale/profiles_analysis/blob/master/plots/plot_location_witty_programmers_non%20witty_programmers.svg
Haskell is so fundamentally different from OO languages like Python that at first, yes, Haskell code looks utterly confusing. But when you learn the concepts behind it and get some practice, Haskell is even more readable than Python and become beautiful in its austerity.
It's real and it's very useful, alongside from \_\_future__ import print_function.
Apple aren't maintaining their fork of OpenSSL at all. They haven't ported any new features into the system OpenSSL since they migrated their own apps to their in-house library. The consensus in the SSL community is that if you want to reliably assure clients of whom they're talking to without leaking secrets, you need to push TLS 1.2 ASAP. Apple support TLS 1.2 in their proprietary library, but not in their fork of OpenSSL, so it's impossible to write a secure client using the system OpenSSL. 
&gt; I consistently find the documentation to be both confusing and not in sync with the way the applications on my system work. can you give example?
Hm interesting, whats your take on R with data management?
examples: - ^[1] [hitchhiker's quickstart](http://the-hitchhikers-guide-to-packaging.readthedocs.io/en/latest/quickstart.html#describe-your-project)(this is the most simple and what is use for small project) - ^[1] [hitchhiker's package creation guide](http://the-hitchhikers-guide-to-packaging.readthedocs.io/en/latest/creation.html#arranging-your-file-and-directory-structure) - [python setup script](https://docs.python.org/3.5/distutils/setupscript.html) - [pypi setup](https://pythonhosted.org/an_example_pypi_project/setuptools.html) - [packaging python](https://packaging.python.org/distributing/#setup-py) e: - [1]as mentioned u/aragilar, that this guide is out of date
the fact you are getting downvoted is very sad. Fuck the children here.
Thanks. Wonderful community, will have a look at these questions.
Think I initially did that in case someone put spaces between package and version(`pypackage &gt;= 0.1`), however, that doesn't seem supported but there's nothing specifically denouncing it but I'm also too lazy to test so here we are...
If you already know how to code I wouldn't recommend that book.. it's pretty great but better suited for beginners looking to learn their first programming language imo 
The `src` project structure -- myproj/src/myproj -- tends to confuse people, I seem to always forget the `package_dir` mapping so I end up cargo culting my own setups. 
&gt; What happens if you're stuck using a package that has a security vulnerability because your package manager is behind? Then my package manager really should fix it's shit. A security vuln is important, and using a language specific tool to manage packages just because it might make it more updated is a terrible fix. What happens if you're stuck using a version of sshd that has a security vulnerability, because your package manager is behind?
Compile a non fucked version from source if I have to. I won't argue to convince you that your way is bad because I doubt we'll get anywhere, I just don't understand your reasoning. 
Such a nice and useful comment :)
Refactoring, mostly. But because I'm still quite the beginner, and because therefore my original code is such a hacky mess, the potential for improvement is vast. It's a slog for sure but it can be satisfying when things look/read better, work well and are now covered by tests. Plus I feel like I'm learning by doing it, so I'll keep on slogging on as long as that lasts.
pytest and nose are pretty similar. nose started off as a clone of pytest that was easier to install.
I just started playing with it. I like it and it'll probably my go to choice for stuff like this in the future. The downside is templatized paths make either vim or one of my plugins very unhappy. Atom seems to work but I don't really like it. It also pisses off the Stash/Butbucket server at work too, so the file system viewer doesn't load there. Not sure what's up with that. 
^^^^Gross. This doesn't make any differentiation between what packages your package depends on and which are sub dependencies. When you are developing a project you should be specifying only your own direct dependencies and you should be specifying them using the some semvar comparators. When you use pip freeze you end up with a project which is too tightly coupled to your specific environment; to that end I've always made the differentiation that requirements.txt is used when trying to rubber stamp out a deployment whereas when you are actually developing something for general distribution you should just specify your various requirements in your setup.py.
Nice, I still thought that was default behavior.
I have created this simple bot, just thought to share : &gt;
Yeah, this is good news for Py3. The list of excuses for sticking with 2 is now one item shorter.
Sure, it would be pretty easy to subclass [`concurrent.futures.Executor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor). I *think* to get much benefit you'd also need to create an async version of the `Future` object, or else your async functions might only execute serially. Can you outline a motivating scenario? I haven't done enough async to understand why this would be useful.
What's the usecase for this? 
@jupake Are you running 2 web servers in the same process or do plan to use Tornado like a proxy (similar to Gunicorn)? We need more details
setup.py should express the dependencies, but should not care about specific versions of those dependencies (beyond expressing incompatibilities with major releases that change the APIs). requirements.txt is for a specific deployment of a python project and can specify all of the exact versions installed. For example, a Python project may require "SQLAlchemy &gt;= 0.8" in it's setup.py. When that project is installed, it will grab the latest release of SQLAlchemy (1.1.14). Later, you may want to re-install that package into a production environment. At this point in time, SQLAlchemy may be at a version 1.2 or later. However, you've used 1.1.14 in dev or testing, so you use requirements.txt to install that specific version of the package. 
It's mentioned, it's just buried somewhere in the comments :) I have to figure out a way to parse all this great data!
Me too. I can't really tell if I love a font until I use it for several weeks, but I can't possibly do it with this. There is this: https://s9w.github.io/font_compare/ But still, doesn't really let me truly try it out for long periods.
So glad to hear it! Love what Continuum is doing. Numba is a total game changer.
I strongly suggest you check out Pyramid or Flask to throw up a quick web interface. With pyramid you probably wouldn't need to go past the single file application stuff: https://trypyramid.com/
Thanks for the info! I think I shouldn't have said "on the screen". What I mean to say is, only capture the source code for HTML that has been loaded already (i.e., already seen by the user). For example, say I wanted produce some kind of browser extension where a user can visit a twitter page, and the extension captures all link tiles that have been (and currently are) visible to the user and changes their font color (just an example). I don't want to capture the titles of *all* links that Huffington post has ever tweeted, just the ones a user has browsed at some point in the current session. I hope this makes sense. Basically just capture the HTML that is currently loaded at any given time.
If anyone is curious to see the difference between `nose` and `pytest` in action, I maintain a Python template that supports both. Check out the appropriate branch (`python3-nose`, `python3-pytest`) in the demo project: https://github.com/jacebrowning/template-python-demo
&gt; So, is it just the version number that you have a problem with, here? I don't care what they choose to call it. The part I care about is that they are shipping ancient code that only supports an ancient standard (TLS 1.0) which was been shown to be problematic from a security standpoint. TLS 1.2 is not exactly a new thing; it was first standardized in 2008. The fact that Apple doesn't support it is simply laughable, and doubly pathetic because they could easily support it by simply shipping the latest version of openssl. Whatever code they have, if any, that somehow still requires the 0.9.8 branch needs to be ported. The rest of the software world did this years ago. 
No, Subscene and open subtitles are holding the largest subtitle collection. So, I think Subscene is only needed for this purpose. If you want Spanish subtitles from Subscene, Change the 23rd line of code from "english" to "spanish". It will fetch Spanish subs from subscene.com
Python using Pandas and maybe sqlalchemy is all you need for data management. I have no idea why anyone would want to use R for data management/munging. R has its strengths in stats/predictive modeling, but that's about it. I hate R's syntax and would never take a job having to use it on a daily basis. To each his own. 
Does %gui qt help? It's supposed to create a Qt event loop that plays nice with the IPython message passing event loop or something. Note this creates a QApplication so your code will need to use QApplication.instance() (you can use a try block if you want to use the same code with/without a preexisting QApplication). I've used this with Jupyter Notebook to create plot windows that persist while being able to run other cells, etc.
Why not use tweepy if you are targeting twitter? 
and...you code ?
I hear the "nose is no longer maintained" comment a lot, typically in the sense of "nose is no longer maintained" --&gt; "the package is no good" In my current projects, nose works just fine for me. If I already have the code in place that gives me sufficient test coverage, I am not sure why I should re-invent the wheel and port everything over to pytest unless there is a serious bug with nose that I am not aware of. The next time I start a new project, I will take another look at py.test, but for existing code, I will keep using nose because I didn't see any obvious disadvantages based on my use cases so far.
Maybe just me but a "requirements" document should explain the intended capability, against which acceptance tests should be written, while a "dependencies" document should lay out additional environmental needs of the software.
Kivy hands down, it is pythonic, easy, and beautiful
pipfile looks promising. It's still a work in progress last I looked, but I hope they pull it off.
Kivy is anything but beautiful. At least, not without spending some time creating your own theme.
My issue would be collecting coverage stats across multiple interpreters and Travis's container architecture. Detox might work but I've never messed with it. 
Smells like homework. Whether it is or not, this is probably better suited for r/learnpython Feel free to PM me when it's been posted there and I'll help
I haven't done enough async either yet :-), just wondering from reading up on async, that async web downloading is more verbose than ThreadPoolExecutor-based downloading, and wondering if an async-based downloading could be more concise if we were using a standardized concurrent.futures-style of programming.
hodor
Would be good if you can share the free titles here on reddit as weel.
I was thinking of using Flask for serving the main page html and stuff and using tornado for websocket connections due to its asynchronous capabilities. I have an existing application that is flask/gunicorn, so Im comparing this proposed architectural style to that. How I usually design things is to have flask handle the incoming requests, but then to call into Service objects which do the real work and speak to the backend systems. The idea I had was to have flask serve the main webpage and have tornado handle the async websocket communication with the server. But all requests, both websocket and http, speaking to the same internal service objects to do the real work. It would save me from having to split the service objects out into its own library while prototyping. @notoriousno I was think of having them in the same process and using tornado's WSGIHandler, but having flask still block the whole process would make this a no go. This would mean a long running query could hamper the websocket calls. All of this would have sat behind haproxy. 
Yeah, so am I. You're now a dependency for at least one project! ([py2p](https://dev-docs.p2p.today))
SimulateMe! mrcleverpig 
So, you do see it going to become a norm in the future right?
thanks man. Appreciated !
If you really think everyone who uses 2.7 does it because they hate 3, you're terribly misguided. There are massive 2.7 codebases out there that are not going anywhere. My previous employer had so much 2.7 code, they were considering backporting security fixes onto 2.7 after 2020, because maintaining a fork of CPython is cheaper than converting all of the code in the company to 3.3.
&gt; few cases Few? If you go over some real-life libarary, lets say Django, how many arguments do you think _can_ be typed? I'd bet that way less than 10%.
Personally I think that the way that Python used to represent types is backwards from the core Python philosophy... Let me try to explain: For typing, Python went with the approach used in Java, which requires types to actually subclass a class, whereas I think it should've gone with some approach which would enable actual duck typing (where it'd check for types but don't actually require that the passed object is an implementation of that type -- i.e.: many times, when dealing with streams I want some object that has the 'write' method, but does not really subclass the stream nor need to have all those other unrelated methods from the stream -- see typing.IO). Also, the way used to describe types is pretty verbose and a bit weird (i.e.: List[str] instead of list(str) or [str]). To finish, it annoys me a bit that I have to actually import the definition of a token to use it considering this slows down the startup of Python programs quite a bit (see: https://files.bemusement.org/talks/OSDC2008-FastPython and http://pydev.blogspot.com/2016/11/python-import-world-anti-pattern.html). Sure, it is nice that code-completion is improved by it, but then, docstrings would also serve that purpose -- and for actual type safety, I'd say that proper unit-testing is way more important (and doesn't clutter up my code). Note that I think that having the expected signature of what's expected in a method is still nice, so that I know which methods/attributes are needed for objects passed for some method, but the actual way this was implemented in Python is not (it should've gone with some approach closer to Go which actually accepts duck typing -- see: https://medium.com/@matryer/golang-advent-calendar-day-one-duck-typing-a513aaed544d for what I mean -- java typing is just too annoying, and the workaround in Python is that too many things will be just "Any", in which case there's no real type safety anyways and the gains even from programs which use it will be pretty marginal or if they are actually able to have a type safety where most things are properly typed will be pretty annoying to work with and verbose, as in Java).