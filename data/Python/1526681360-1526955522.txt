Exactly, entirely inexcusably 
Yeah I guess it was in 3 -- but also long ago. :-) It's almost 10 years old now...
That's what linters, pull requests, etc are for. I don't disagree that code should be good enough to be self commenting, but that is also a bit of a running joke quite honestly. Commenting beyond a mere docstring is essential for good code. Make your code clean, AND make your comments clean. Neither is a substitute for the other.
There is aslight difference between maintaining U+1F4A9 and porting something to a completely new language. For starters, the ones porting to a new language have all the leeway that you really wish you had. And if you think you have it hard, consider the fact that I'm still supporting pre-ANSI C code running on SCO OpenServer. 
People could learn to just ignore trails and people who are rude instead of getting the nanny to discipline them. Reddit is becoming the polar opposite of 4chan's anarchic dumpster fire, namely, a top down, over moderated playground. Stop calling for more moderation and instead call for people pull up their big boy pants and ignore the trolls.
I can recommend Pipenv. It handles virtualenv and pip for you. It also has [advantages](https://github.com/pypa/pipenv/blob/master/docs/basics.rst) compared to using requirements.txt.
IMHO auto-magic pentesting is bullshit. Unless you actually read the modules and understand exactly what they are doing you have no idea what it's going to do to a production system. If you write your exploits yourself, you do. &gt; I'd be surprised if pentesters have another python tool that can replace all of its functionality. All the pentesters I've hired to wreck my company's stuff write their own tools. We get reports with PoCs, most of which are written in Python. I can buy Nexpose from Rapid7 if I just want to check for known vulnerabilities. Doesn't really require a penetration tester. Metasploit is great for easy-mode campaigns where you're just exploiting things that Rapid7 wrote modules for, but most of the time that doesn't get you terribly far. All of the IDS vendors have network signatures for Metasploit and it's a good way to get caught. &gt; Does pupy include anything like msfvenom? yes, pupy has a payload generator. Or you could do it yourself. &gt; Can you easily pivot from a compromised machine and exploit other machines through it? yes, that's the entire point of a post-exploitation toolkit. But, again, you don't generally just want to do that auto-magically because you'll get caught or break something. 
Hi there, this post has been removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
This is an awesome resource. Thanks for sharing
Removed as this is aimed at beginners 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, this post has been removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
I guess the question is whether the calling code knows how to deal with a `NotImplemented`.
\&gt; Restrictions are placed on the Python features that provide the ability to delete or inject scope elements and the ability to \*mutate the structure of objects and classes at run time.\* I dont need to do this often, but I sure do find it handy when I need to do it. Still, like you said, if i could give that up for C\-like performance for the cases that need it, that would be awesome too. 
If it were me, I'd just code up a quick autoit script to click play. I'm sure there's better solutions, but my way would be super quick for me.
With a bit of keysmash, banging my head reading docs, and lots of coffee, I figured it out. Wrote a whole ssh based api on fabric for full communication to the GPU rigs. Thanks to everybody for the help!
did you read the fucking article?
That’s a good point
If you get a decent text editor or IDE, a lot of the indent stuff is taken care of for you.
Subreddits aren’t democracies. If the mods start banning people or posts/comments that are incompatible with some set of rules, then the rules matter. Otherwise, no. It’s common for people to ignore the sidebar, I have no hope they’ll read an aspirational abstract set of standards and somehow morph into considerate, thoughtful people. I don’t want to see /r/Python ruined by bullies - *or* by pedantic rule-worshippers who use procedure to suppress ideas they disagree with (e.g., Wikipedia).
It seems to me like the distinction is between code that is deliberately left ambiguous versus code that is incomplete. The former can return this odd truthy-value, while the letter should still throw exceptions.
I honestly can't believe Devault's behavior in that one thread. Not only is he petty to comical lengths but is actually wrong. He seems to be trying to say it's "incomplete" but insists on using the word "outdated" for some reason. He even links to the definition but still doesn't get it.
virtualenv --python=/usr/bin/python2.6 &lt;path/to/new/virtualenv/&gt; Yes, could have different versions, you should have it in the server machine, but easily you can have a virtualenv with 2.6 and other with 3.x https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv 
I use pythonz. https://github.com/saghul/pythonz 
&gt; Statements like "I know the path is 'correct'" without stating why you know the path is correct don't help us understand the problem. in my op: "then I tried to set my desired file (on the desktop) as the file location (which i got by dragging it into the terminal window)" When i said "i'm clearly formatting it incorrectly" I meant that I'm probably not writing it in properly (i.e. starting the folder path off with ~/blah/blah versus C://Users/blah/blah ) anyways, I appreciate your help and thank you for your time. 
I've not used Spyder, but I'm gonna guess all will be fine. Python files are just text. You can open them with any text editor. Even Windows Notepad. The editors have nothing to do with the program actually running. Python does that. Idle can *launch* a program, as can other IDEs, but they aren't actually running it... They're just calling Python and handing it the script.
Thank you so much! I was hoping to take this experience to (start to) learn how to use python, but I guess that's for another time. These links have helped me get 95% of the way there! I'm about to jump back in to the site to see if i find a solution, and now I'm officially totally in the wrong sub for THIS question but here's where I'm at: I made a column for each category that I wanted things to fall into, and made a named range for the keywords that i want to 'flag' it in each category. the thing is, each case can fall into multiple categories. so at this point, i COULD just go down the list and write them in myself, but i wanted to see if there was a clever way to have the 'true' readouts (from all the column/categorys that i've just made) output to the same cell? and don't worry if you've got no more magic links for me this time, i still greatly appreciate your help and thank you for your time! 
Should be fixed now!
&gt; PoCs I don't disagree with anything you said, but I'd also add that a lot of programmers talk about "picking up" a new language like it is nothing. It's not that it's wrong or they are lying, but you can't just "pick up" the jillions of tiny specific behaviors that characterize the cpython implementation, and you can't just simply directly translate all code from one language to another, as they do possess different features. This is especially true if the code you writing particularly reflective code. If you think you are "just picking up" a language, you may be getting work done, but you are likely not following some untold number of conventions and idioms, and the code could be better.
i appreciate your help! another user posted the same site/link and this is exactly what i ended up doing. &gt;but you'll need to already be familiar with python. lol, yep. I was hoping this task would help me learn how to use python... i tend to only learn new (and/or fairly specialized) skills only when I need them. It usually works out for me but (shockingly) i can't just learn enough programming in an hour or two of googling to get this done. 
All the pillow documentation uses 'from PIL import Image', if it has been removed their docs are seriously out of date.
~~Benevolent~~ Belligerent Dictator for Life? Maybe I'm not involved enough in the community to know, but I never heard about Guido raging like that. Seems out of character and unprovoked.
I actually just figured it out. I was tying to import Pillow itself and not the Image module. Thanks for the help though I was really losing my mind there for a second. 
LOL... yeah, I've gone back through some of my old Perl and muttered WTF was I thinking here?... but damn if it didn't work well for 10+ years.
Let me guess, mission critical service that could cost the company millions if if drops? Hopefully they pay you at least the medium sized bucks.
 sys.stderr.write("blah") Other than that, that's the way.
Interesting stuff, thanks for sharing! 
I've used tornado and twisted/Klein in my work. Django Channels is also a viable from what I hear. These are all async frameworks that have the strongest backing.
Just run this Python -m pdb yourscript.py That starts the Python debugger. You should read up on it, it's much better than debugging by print statements.
I heard Laurel on both of the samples there, but on the White House video I did hear Yanny
Ok. Thanks for letting me know 
Can't you just: raise WhateverException("Details about the exception and what happened ")
I've used nginx with gunicorn.
The scripting appñies to the full range of AWS offerings. I'm a 10 year rhce/mcse and my focus has been AWS architecture and automation w Python
Yes, whatever makes more sense in the context.
You can use the [Python Requires](https://packaging.python.org/tutorials/distributing-packages/#python-requires) in your setup.py
that's also what I thought at a glance.
You're trying to set 4 different values in an array with that is 3 members long.
Please can you explain a little better
You can use `locals()` and `globals()` but I basically never do. When I write matlab like code, I'm usually writing data analysis code in either ipython or an ipython notebook, so it's easy to rerun a line or print a variable and there isn't really an "after code runs" stage, just waiting for me to put in the next bit.
What you showed is similar to the output of a debugger. It might be termed the "watch" feature in some debuggers. A debugger offers much more than what you showed in your screenshot though. It'll let you run your program line-by-line and see the variables' values at each step, or stop execution when a condition is met. The pdb module is built into Python but is a command line tool. You can find GUI versions integrated with Visual Studio Code and PyCharm. See https://github.com/spiside/pdb-tutorial for a guide to the built-in pdb debugger.
that's also what I thought based on the title\n
Do you want to record some audio and stop, or are you trying to access the audio system on a long-term basis and reacting to certain events?
Last commit was over a year ago. It sucks that the author is MIA and nobody else appears to be maintaining the repo/site.
You should find what you want to do, at least a rough idea, then look into what it takes to pull it off and then divide it into manageable pieces you can take on. I don't know about you, but for me that's much more powerful than someone telling me what to do because for some subjective reason they thought it was a good idea. Maybe there is something you imagine could be automated in your life or at work, maybe some useful data could be automatically gathered and you could then later work with that data or build something that uses it, maybe there's some problem you feel like could possibly be solved with python in general. Maybe you just want to play around to get out of the "creative block" and mess around with something trivial. Ultimately I think you need to answer this question yourself for the answer to be effective.
Get either Spyder or Pycharm if you want to see the variables from an IDE. You can enter an interactive session immediately after you run a script with the `-i` flag. `&gt;python -i script.py`
If a sequence's size is 3, its indices are 0, 1, and 2. If 3 was an index, the sequence would be at least size 4.
Well, all keywords by default are highlighted. In case you want them to be appearing in a regular font you could try putting them in a comment or a docstring or a simple markdown should help you too. 
Hey, (co-)author here. Unfortunately real life has been a bit too busy lately. I do however still very much intend to get the v2 branch out real soon now(tm).
Doesn't f-string formatting work the same way as regular formatting?
what do you \*mean\* making 100k queries over a 50ms WAN will take over an hour!? I thought you said we had plenty of bandwidth! Are you \*sure\* it's not the firewall? I'm pretty sure the last time this happened, it was the firewall.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/nyctech] [PyGotham Call for Proposals](https://www.reddit.com/r/nyctech/comments/8kjduh/pygotham_call_for_proposals/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I still use environments when I want to try a different version of something. But I use the `--user` area like a big, messy default environment. I understand the arguments for using environments all the time, but this works pretty well. And it means that I'm often casually testing changes in one project even when I'm working on another.
Thanks, glad it’s well-received! Will have more coming soon. 
We don't talk about those
Nice ! I have the same kind of problem with my pde solver `triflow` which use theano for the core computation. Nice to see that you plan to keep theano alive ! I like this software. I will look further inside theano code, see if I could have the level to help you in this t'as. 
Well now I feel silly for not noticing that...the extension was wrong. Thanks a bunch! :\)
You could use a lambda function in the key argument of the sorting function you’re using 
Use the [`sorted`](https://docs.python.org/3/library/functions.html?highlight=sorted#sorted) built-in function (as the other use has mentioned), utilizing its `key` argument. Also check out this subreddit's sidebar and r/learnpython 
All the particles have the same propertys, can all eat, move, etc blue=regenerating is like a plant like state, you cannot move or eat(red) while regenerating, dna mutates in 90% of offspring so a very high mutation rate, I made this using Sigmoid feed forward neurons where the topology of the neural net is changed due to dna mutations, these larticles can: speak and listen to eachother, see 2 squares ahead of them(in colours) sense all adjecent squares, split, set memory, rotate and move. In my personal simulation they can do more(body language, remembering and learning) but im figuring all this out as i go along. 1000 larticles are placed at the starts with completely random generated dna and it just takes off from there. The size of the grid is changeable and ofcourse big == epic.
Thank you, I'm also really fond of looking at it thats why I chose to share the code.
Thinks. Can I answer a question? How to change code font in JupyterLab?
Nice
you need to set your project's python interpreter to the interpreter in the virtualenv you used to install cx 1. open the action menu: ctrl-shift-A 2. type 'python interpreter' 3. select the one for 'Settings -&gt; Project interpreter' 4. locate the interpreter alternatively, create a new interpreter 
If there are any problems running this code on your pc please tell me.
Firstly this is the wrong subreddit. You're looking for /r/learnpython Anyways, how did you install it? Did you use pip and sudo to install it system wide? Then it should just appear. Did you use pip and install it in a virtualenv? Then you need to add the path of the python environment to pycharm. Are you talking about a Windows environment? Then I can't help. 
This is one of the things that feel weird to me, after using Ruby for a few years. There's no relation between module names and class names. When I was starting I named a few things with hyphens - because they're easier to type - but I remember having issues when packaging the application. It must have been some n00b mistake I was making because, these days, I manage several packages named 'company-something' or 'appname-pluginname'. I haven't seen periods used much. I see hyphens and underscores a lot. Long story short: +1 for hyphens.
Could you explain why choosing hyphen over underscore? Just for its popularity? Thanks:)
Kenneth Reitz already posted this, and subsequently deleted it again. Reposting it is likely going to get the same responses once more. So if Kenneth deleted his post because he didn't like the reception the post got, I'm pretty sure you are about to cause him some grief. So consider whether it's real necessary. 
So when your project has the name `company-something`, its user should use `import company.something as something` to import it? I just don't like the inconsistancy that much. 
Okay, I'm personally extremely annoyed with Kenneth right now so take this comment with a grain of "hes mad lol". Non edit edit: holy fuck he made /r/positivepython what kind of kindergarten bullcrap is this. I think he's gone off the deep end. This is a fucking joke. He's treating this as if 240k+ people are personally annoyed and dislike *him*. So the fuck what if we have issues with pipenv? He *authored* it. He *promotes* it. He *advocates the incomplete Pipfile standard*. Oh, and he himself said pipenv was not for libraries in one of his talks so that part of this letter is a complete 180. But I guess that's what you can expect from someone who has that has [second prioritized value](https://www.kennethreitz.org/values). The way that he is treating the /r/python community is a joke. It's as if we are not allowed to have criticism. If you don't want feedback, don't be the author and advocate of a *broken* standard and treat it as if it is a godsend at the same time. It doesn't take much to fix in my opinion. But it is still currently *broken*. And moreso, don't pull [this crap](https://np.reddit.com/r/Python/comments/8jfmv8/kenneth_reitz_pipenv_the_future_of_python/dz5p8sd/?context=9). It is extremely childish and makes the community around the pipenv extremely unwelcoming. And don't pull [this crap](https://www.reddit.com/r/Python/comments/8jd6aq/why_is_pipenv_the_recommended_packaging_tool_by/dyzamlk/) either, it is plaim and simply nonsense and full of partial truths. And I don't even use poetry and I'm defending that subset of the community.
Dictionaries are quite useful and mainly as I use them as the OR for Selenium Python projects. It's nicely covering various facts and the use of dictionaries in Python.
Oh, I was not aware it already has been posted (which was surprising). Well, I'm a little bit embarassed now and don't know what to do... I just share the link for those who, like me, might have missed the article, but I do not wish to add fuel to the flames.
Personally I say keep it up. It's a letter to this community and was voted on less than 150 times. Arguably, a very small percent of this community saw it. Yet for better or worse, words, or rather essays in this case, have consequences.
&gt;The way that he is treating the [r/python](https://www.reddit.com/r/python) community is a joke not a hyperbole at all
As someone who just delighted in the drama while feeling bad for everyone involved(guilty pleasures), this seems like a good response?
Here's a sneak peek of /r/positivepython using the [top posts](https://np.reddit.com/r/positivepython/top/?sort=top&amp;t=all) of all time! \#1: [A quick thought on being nice](https://np.reddit.com/r/positivepython/comments/8kdpo9/a_quick_thought_on_being_nice/) \#2: [EdgeDB — Awesome new Python–inspired (and written) Database!](https://edgedb.com) | [2 comments](https://np.reddit.com/r/positivepython/comments/8kdo9n/edgedb_awesome_new_pythoninspired_and_written/) \#3: [DjangoCon US CFP is open until June 3. We ❤️ positivity and you!](https://2018.djangocon.us/news/cfp-open/) | [0 comments](https://np.reddit.com/r/positivepython/comments/8kfu2v/djangocon_us_cfp_is_open_until_june_3_we/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
&gt; And moreso, don't pull this crap. It is extremely childish and makes the community around the pipenv extremely unwelcoming. &gt; &gt; And don't pull this crap either, it is plaim and simply nonsense and full of partial truths. And I don't even use poetry and I'm defending that subset of the community. A large enough amount of developer are too lazy to find out answers to questions which probably have been answered many many times so I can understand why he is frustrated.. The best way he could have handled the situation would probably be to just not reply at all which is in my experience can be tricky for some people with bipolar disorder to do....
It really seems like he has skin made of wet paper. He simply "doesn't have the bandwidth" to deal with any criticism of his work, for all he touches is gold and crafted in the likeness of God. I think he snapped, and now wants to form an echo chamber where he can punish people for not saying nice things about him and his work. /r/positivepython was likely made so that he can have the power to control conversations, as well as possibly give himself a desperately needed ego boost after meanie dumbie heads on the internet complained about his work. This is hilarious and is now way for a professional to act, much less in such a publicly visible way. 
There is a fallacy in thinking that people who are good at one thing automatically are good at everything. 
&gt; Do you really spend so much time creating and activating virtual environments, compared to the time spent actually developing inside it Activating virtualenvs are a routine, everytime I login via ssh remotely or boot my machine. Do a `pipenv shell` in the project directory or `pew workon &lt;name of virtualenv&gt;` from anywhere. &gt; that the convenience of creation is a major selling point? That is also something I really need when I want to debug on a clean environment, or try some new obscure package. But hey, to do all that you just need `pew`, `pipenv` is not mandatory - and `pipenv` relies on `pew`.
People weren't criticising him, they were criticising pipenv. He's only getting flak because he can't take the criticism
If pipenv was just Kenneth's personal project I wouldn't give a crap, but it's now a project endorsed and owned by PyPA, and I don't understand how they let this happen. It was obvious to a lot of people that pipenv was not production ready, yet it was pushed as the official tool on [packaging.python.org](https://packaging.python.org/tutorials/managing-dependencies/). Code reviews/PRs were not enforced, so commits [like these](https://github.com/pypa/pipenv/commits/master?after=0760cf0a9cb065330bfe7fbaee978999ae7c39e3+600) were getting pushed directly to master, so now other people will be stuck maintaining code written in what Kenneth describes as &gt; That was a manic period of mine (again, bipolar). I was working on Pipenv for 20+ hours a day for over 4 weeks. Luckily it's still fairly easy to switch back from pipenv to plain pip ( and I hope it stays that way...), so I don't think there's going to be any huge legacy project issues in the future - but since pipenv is pypa's official tool, who's to say they won't modify pypi.org in ways that adds important features but only work with pipenv?
Any specialised subject has more knowledge available that can fit into one human. Don't let it worry you. No-one knows everything. 
Yes, but the community is also unwelcoming when we upvote a bunch of personal attacks and drama. This entire argument: ![xkcd: misinterpretation](https://imgs.xkcd.com/comics/misinterpretation.png) There's a big difference between criticism and constructive criticism. Tearing something to shreds is not constructive. It doesn't matter that you're talking about software and not the author directly. If someone has invested a lot of time into something, you can't blame them for taking it personally. So what if pipenv is "broken"? Python dependency management has been broken forever. Please give maintainers the benefit of the doubt that they're working to make it better.
Like I said - if you activate virtualenvs like 10 times everyday and on multiple machines, it is useful to have a one line command. But to everyone his own.
While constructive criticism is always preferable to gratuitous negativity, the line between the two is blurry and one who expose oneself to fame should be ready to handle haters. Any attempt at solving the problem at the source will lead to censorship and eventually the lack of healthy criticism.
Let me re-state the question, and give you an example why your answer above is not relevant first: [awj@localhost ~] $ workon Scrawler (Scrawler) [awj@localhost Scrawler] $ As you can see, pipenv isn't the only virtual environment that has a one line activation. Forget that. What I ask about is the creation that you put emphasis on at the top of the thread. Do you really spend so much time futzing around with your virtual environments, that the potential difference of a line or two at venv creation is a make-break deal for you? 
I think everyone involved needs a timeout from social media.
Dude, I was a virtualenvwrapper user I know it exists. Thank you for nothing. And I answered your second question already above. I am not promoting anything here. Use whatever workflow you like. I will use mine.
[removed]
I'm not telling you what to do. I'm just asking why the creation thing is such a big deal for everyone that use pipenv. If you are unable to answer that, then fine with me. Have a good weekend and all that.
Well you created a virtualenv by say the builtin venv standard module..., wouldnt it be nice to be able to equally effortlessly activate it, delete it and keep track of it? I can't answer for other people. :) Nice weekend for you too.
Okey this robot is hilarious.
/u/kennethreitz could make all this go away in one step: ask to remove the "promotional material" about pipenv in the official documentation. That's it, done. Whoever wants to use pipenv will use pipenv, whoever wants to use pip will use pip, and nobody will give him any aggro anymore. All this drama is blowback from a social-engineering hack (getting an unproven, non-stdlib package recommended in official docs thanks to his popularity and PSF position) that has spun out of his hands. He can put the genie back in the bottle at any time by admitting he fucked up, and following his own rule that "180° is encouraged". Do the honourable thing, Kenneth: take your foot off the pedal for a minute, pull those docs. People will go back to appreciating you for your code, rather than hating you for your marketing "mad skillz".
Yes? [awj@localhost ~] $ . tmp/floppo/bin/activate (floppo) [awj@localhost ~] $ (floppo) [awj@localhost ~] $ deactivate [awj@localhost ~] $ Maybe stay out of the sun for the rest of the weekend :) 
&gt; If you need some incentive, think about having to use urllib again. It would be easier if it wasn't so blatantly clear that Reitz has a modus operandi that leverages other people's work for his own gain. He keeps writing these little glue libs that are supposed to make other libs "for humans", as he's successfully done with Requests -- but he's doing it in places where such need is questionable, and he's increasingly leveraging his personal popularity rather than actual merits of his code. With Pipenv he simply tried too hard too quickly, pushing evangelism into official docs. I don't care if it has been done by others: a project owner's responsibilities include telling people "we are not ready for this sort of jump". He failed in this area and now he's making excuses for it that are borderline childish, for someone so well-versed in the ways of the OSS world. If the problem is his condition, then maybe his condition should disqualify him from positions of such responsibility. 
Kenneth, if you read this. I have been told I have the same illness as you, by multiple doctors over a span of 15-20 years. I also take stimulants, as you have so openly discussed on your blog. I am also about the same age as you, and I am a musician and will incessantly work on projects related to my creative endeavors or programming endeavors, much like yourself. So; I hope you hear this advice like I’m a brother. You are flying close to the sun, man. I understand much of your argument, not that it matters too much. By now, you are one of the most well-known Python developers and have an incredible amount of influence in the community. You must not let your episodes cloud your judgement, and you must install as many safeguards as possible to mitigate. Stimulants are a dangerous combination for bipolar patients, and you know all that caffeine, vyvanse, and a good programming flow-state can throw you into an episode. If I were you I might even take a step back from open source and just focus on my own life and hobbies besides programming. But I know it feels good to be the king, I know it does, man. Just take it easy. Find a fun girl/guy/dolphin to do things with. I wish the best of luck to you man, take care of yourself.
Keep it up. I had missed it the first time and I think it's important. It's time to clear the air a bit.
Easy man. You didn’t build pipenv for yourself, it’s for the community as a whole. Take a break for a few days from all this crap if it’s stressing you out. Nobody’s going to die if pipenv doesn’t see any updates for a while.
Thanks for the tutorial, this is very useful.
Unexpected wholesomeness. 👍 Nice words.
70.10.10.0 is not an IP address, it's a subnet. Do you need a module for manipulating subnets? Python already have one, `ipaddress`.
wat.
What the world needs right now is another opinion on this subject, so here goes ;\). I believe most of the commenters, save for a few truly spiteful, have been at least trying to discuss merits of pipenv. No harm there, right? Maybe \*demanding\* that Kenneth responds personally to your gripes with his library is asking a bit too much \- I can understand that, nobody has the kind of time to discuss pros and cons of any solution with a subreddit of 243k users. I myself have a few bones to pick with pipenv, but that's fine, nobody is forcing me to use it, so I don't, right? Yet. Because it has become the official tool on [packaging.python.org](https://packaging.python.org), as u/raziel2p mentioned. This makes, or should make, it the go\-to way for most of the python devs &amp; enthusiasts out there. Let me point out that I completely agree with Kenneth on this single thing \- python packaging is a complex world spiked with corner cases. I agree that it's impossible to satisfy every backward compatibility issue while trying to do something innovative at the same time. But maybe pipenv becomes standard too soon, while it's still too immature for many. We appreciate all the effort that has gone into it over the last 1.5 year. I understand we can still use pip &amp; virtualenv, and [setup.py](https://setup.py). But I believe pipenv team should be open to discussion. This would not be the case if the solution was optional, or a hobby project. Much like Python itself has been open, for the better or worse, with PEPs \- when your library/tool/language becomes the official, you have to be prepared to clarify some things, improve others. You will certainly polarize community with your decisions and it is on you to convince them it is the right way to do things, otherwise they will leave. Or feel disappointed, their voice unheard. \*You certainly have to be open for discussion\*. This is where things get tricky, u/kennethreitz. Hope you don't take this the wrong way \- as being too familiar, or preachy, or an attack. This is more like an open letter. You have become famous for your contributions to Python ecosystem, and I'll risk saying, much like Armin \- rightly so. Because of the attention you are getting and your recognizability, I don't think anybody in their right mind would try to task you with interacting with everybody that talks to/at you. Including this post ;\) Maybe what the community needs is a dialogue. Assertion that we won't have to live through another "Python2/3 schisma". Hosting an \_AMA about pipenv\_ with pipenv dev team would be a great way to talk to people. As you point out in your journal, you understand the importance of delegation. Since this affects the whole community, people have been rather desperately trying to reach out to you. I agree that some have crossed the line, but others I view as concerned, above anything else. I hope we can discuss \_pipenv\_ as a community and Python enthusiasts that we are. It's not about turning \_pipenv\_ into something else, something it's not. It's about talking out concerns and convincing people to help you change the landscape, so that we can all enjoy it. Because one thing we can all agree on, is Python's package management can get abysmal sometimes. Cheers,Jimmy
I agree 100% with the first two things you say, but really hope more people would edit every Wikipedia article they come across when it has incomplete information. It is a much better experience than making a PR (don't have to wait for someone to merge it, if it's decent content it stays there and so on) and you help lots of people
I don't believe there's any strict convention regarding package naming really. That said dot notation is most often used for submodules so unless you intend to utilize ([actual namespace packages](https://packaging.python.org/guides/packaging-namespace-packages/)), it probably better to not have periods in the name as it may lead to confusion and bugs. As for hyphen versus underscore, I much prefer underscore since it is more consistent with the `imports`. Hyphens are nicer for command line scripts however (no shift needed -&gt; faster to invoke, consistent with other cli tools on average).
It's a shame `NotImplemented` and `NotImplementedError` are named so similarly, because their function is so different. `NotImplementedError` generally means "the programmer made a mistake, abort!", while `NotImplemented` means "I don't know how to answer this, please ask the other object".
Why do you talk about activation when they're talking about creation?
[removed]
It depends what you mean by 'complain'. It should always be OK to politely point out where docs are unclear or inconsistent. It's not OK to dump on someone because you think they should have done their docs better, nor to expect someone else to fix what you've pointed out, even if they agree that there's a problem. Popular projects can also get too many issues opened to keep up with. That doesn't make it OK to be mean to people, but it's hard not to give short, blunt answers at times.
For maximum clarity, I would do it like the following: import sys if sys.version_info &lt; (3, 6): raise Requires36("INSERT PROGRAMNAME HERE requires Python 3.6 or later. The current version is " + sys.version) That way this is from your program and not somewhere else, and there is no problem if the output is redirected. The "halting" bit doesn't need to be stated IMO, it's pretty clear. On the other hand, showing the current version could be useful for users having multiple python versions installed.
I can't accept that. Living with blurry lines is what humanity does. We can criticise and downvote gratuitous negativity while allowing sensible criticism.
As a student you should try to identfy local businesses that have it related student jobs. Preferably at it related companies, but just as well at companies that have an IT department. There will be some, you'd be surprised how few students actively search for that. I've just "lost" my student who, when she joined the company, could do nothing (she applied for a hardware job to make some money, I asked her to try programming instead and alas, after finishing studies, she's too good to keep...) - so if a student came along with solid Python basics and a good working ethics I'd try to fit him/her in. Anyway, that's how I got my job as well... 
You should do some logging to find out what is happening, and head over to /r/learnpython if you can't figure it out. 
Good to know why that is so. Thanks.
So I'm genuinely confused. I use pipenv. I like pipenv. It automates a lot of my workflow with pip and virtualenv that I used to have to do by hand. Yes it doesn't solve the "packaging problem" but it does make my life better. I've heard people say its not "production ready", but in my experience its been fast and stable. Are people hating on pipenv because they've used the tool and actually had problems with it or are they projecting their dislike of Kenneth and the PyPA?
You can do those on a separate branch or in a PR which you rebase once you're done experimenting. But you're right, it's a bad example, I will edit the post and give a better example, such as https://github.com/pypa/pipenv/commits/master?after=7e596306f49f59baf13ed177cf8c31d533b27a07+664.
Thanks for replying with the details! I figured it was some rule-based game and it didn’t look deterministic, but didn’t know until you posted your response.
&gt; Obviously I misread the question :) I did answer once about why I need creation of virtualenv to be convenient. I must have missed that. Would you care to point out where you answered that question? While it wasn't the one I asked, it's also interesting to see why the pipenv users are creating so many environments, that ease of creation becomes an issue for them, as opposed to the rest of demographic. [awj@localhost ~] $ python3 -m venv ~/tmp/floppo [awj@localhost ~] $ . ~/tmp/floppo/bin/activate (floppo) [awj@localhost ~] $ The only line of code pipenv will save you is the activation aqfter creation. I am genuinely curious as to why that is such a big deal?
If you have two things to do, its perfectly rational to prefer using one tool to do them rather than two.
I use pip-compile from pip-tools
&gt; If you have two things to do, its perfectly rational to prefer using one tool to do them rather than two. Yep, that's how the famous [PHP double claw hammer](https://blog.codinghorror.com/content/images/uploads/2012/06/6a0120a85dcdae970b017742d249d5970d-800wi.jpg) came to be. Apart from that, I'd like to hear what made you think that was a good reply to the question: Do pipenv users create virtual environments so much more often, that the difference of invoking one or two commands to create an virtual environment is a make/break deal? 
I think you're missing the point. pipenv combines the capabilities of what used to be multiple tools in my workflow: pip, venv, virtualenvwrapper. I like simplicity so I prefer a tool that does more.
Hi, here are some links that contain tutorials about tkinter: * [Create a GUI using tkinter](https://datatofish.com/how-to-create-a-gui-in-python/) * [Create message boxes](https://datatofish.com/message-box-python/) * [Create a simple tkinter GUI through which you can import CSV files with variable names](https://datatofish.com/import-into-python-a-csv-file-that-has-a-variable-name/) * [Use a batch file to launch a tkinter GUI](https://datatofish.com/batch-python-script/)
&gt; Do pipenv users create virtual environments so much more often, that the difference of invoking one or two commands to create an virtual environment is a make/break deal? I don't use pipenv just because it manages my virtual envs. But I do like that it does so.
In a large, very active project it can be hard to give a complete code review when rejecting a PR. Brett’s keynote at Pycon this year addressed this. One takeaway is your PR is kind of an unrequested puppy to the maintainer: they say yes, it’s their problem now. We need more empathy and better communication on both sides but it’s unfair to expect every PR to be a detailed CR with the intent of getting it merged. 
This seems way to sensitive. If you have any sort of celebrity in the online world, you're going to get hate. You gotta just let the negative comments roll off your back. 
As long as we don't entirely silence it I'm okay with that.
Thank you, will check them out
Can we know the name of this person? Because that’s a huge fail of leadership (picking an immature tool in a very contentious field and blessing it as The Way Forward for everyone) and someone should carry some responsibility for it — and/or the responsibility for not making a correction after the problems emerged. Be it the BDFL or anyone else, it should be made clear that this is a mistake that should not have happened. It’s not the first time decisions CPython are made in haste and then regretted. The project leadership should learn some lessons from its own history. 
I had no idea this drama was happening. I started hearing about pipenv on pythonbytes, I think, and I mostly ignored it because I like using pip and virtualenv, and the problems with that workflow that pipenv is trying to solve just doesn't apply to me. I LIKE manually updating library requirements for my own projects. It gives me an opportunity to read about what has changed in each. Okay so this came out of nowhere and I don't have much of a stake in it at all. But now that I've read about this episode, it really strikes me as another symptom of a problem that I have been noticing over the past few years. There are a lot of toxic personalities rising to the top of the Python community. Kenneth is just the latest of a series of people I've run into that have really ruined the social experience of python for me. There are people who are addicted to power, and the open nature of Python means there isn't a structure in place to weed them out. Old-timers like me may remember that the same thing happened to NetBSD many years ago. The project was started by 4 main developers, who began to attract a large following. The community started to fracture as big personalities started to clash. One group (the foundation, full of power-seekers) eventually took over and the project has been downhill ever since. These days it has all but disappeared.
This whole post comes off as incredibly self righteous.
[removed]
It seems to me that Guido has always been strongly opposed to making changes to Python (either to the semantics of the language itself or, as in this case, just the internals of CPython) for purely performance reasons. For example, his reaction to [Skython](https://lwn.net/Articles/640177/), presented at the Python Language Summit 3 years ago: "[PyInTheSkyThon](https://twitter.com/gvanrossum/status/585807462319710208)". Or, his opinion on [Nuitka](http://nuitka.net/): "[completely misguided](http://web.archive.org/web/20160809144957/https://ep2013.europython.eu/conference/talks/nuitka-the-python-compiler#comment-1468)".
Www.tkdocs.com is the best resource I've found - it gives a lot of explanation about how and why everything works, and gives example code in many different languages, including python. Really great, invaluable. 
But no web framework was ever blessed by the official python docs or included in stdlib. So people could simply ignore the whole thing and live in peace. But pipenv is now marked as *The Way*. I *cannot* ignore it even if I wanted to -- someone would come up at some point and ask "why are we doing nonstandard things? The docs say to use pipenv" and they would be perfectly correct. It's a de-facto *moral imposition* of a specific choice on all projects, in a field where agreement is really hard to reach. Kenneth Reitz is good as marketing and very clearly knows this mechanic. This is why he reached out in the first place: he knows this blessing will help the project by corralling users towards it. He's basically trying to win the argument by bypassing debate altogether. That's something that has never happened for any web framework, afaik.
&gt;With Reitz being a PSF board member I didn't know this until today. This makes the early (way, way too early) adoption of pipenv make more sense. It also makes me pretty angry. Marketing your software is one thing. Using a position of power within a community to push your own personal project by making it the 'approved' standard is pretty damn questionable.
But can you see any errors in the code , and what is logging ? Do you mean to run it ?
Dense user. Happy weekend
*&gt; That's a bit of a stone too far.* Why? The whole flamewar would stop immediately, if somebody, *anybody*, would admit that this blessing was premature and unfair towards alternative approaches. Pull that doc now and save everyone any more aggravation, including to Kenneth Reitz. Rewrite in a more open, transparent and *participative* manner, and *then* maybe republish it. Easy as pie. I understand you're all volunteers, but this is not the local parish. A lot of money, blood and tears go into Python these days; leaders should respect that a bit more, especially after a decade dealing with the Py3 migration -- which, in many ways, made mistakes very very similar to this one, by overreaching and then refusing for too long to correct until eventually forced to do so (`'u'` etc). 
I can acknowledge and appreciate his contributions and still be appalled by his behavior and the (seemingly) untoward promotion of a personal project. Lots of cool software has been written by folks with character concerns. This is the OSS community; you don't get to 'take your ball and go home' when people aren't nice. People are not the tools they build and visa-versa. 
&gt;one should be allowed to complai about poor documentation without having the burden to correct it Yes! YES! Especially when it's so easy to create a new issue to fix the docs and put it into the backlog. It's not hard to acknowledge a problem without immediately fixing it. 
Until now, I was a bit on the fence on this whole pipenv thing (the way it patches vendored packages seemingly without any regards for future merges with upstream is *scary*), but too many of the comments in this thread and the other deleted one hit the spot: avoid pipenv, it's not going to end well. It's going to fragment the community and leave tons of early adopters in the dust, left to maintain a mess.
Tons of people use it in production. We're doing the best that we can to ship bugfixes without causing regressions, but they're hard to test for. Please, if you want to contribute, help us write more tests! We have quite a few. PyPi's recommendation is perfectly appropriate in my opinion, and moving the project over to PyPA was a good move. All these comments make me want to move it back into my personal namespace, though. I'm considering it. 
I've had a few off weeks. I addressed that in the post. 
I'd like to offer myself to hangout sessions to anyone that wants to get any context into myself, the history of any recommendations that have been made, my board membership, etc, or just say hi: https://hangouts.google.com/hangouts/_/kennethreitz.org/pipenv I'll try to keep the window open throughout the day. Hope that's helpful. 
In other posts, /u/jonwayne said it was up to *you* being proactive. You say it was up to *them* being proactive. Passing the buck won't change the fact that it was a misstep people like me are reacting to. Do we want to correct the mistake, or keep the flame alive? &gt; This isn't a power play. It's a good recommendation. Well, you would say this, wouldn't you? :) As the saying goes, everyone has an opinion. Acknowledging other points of view would make everyone more relaxed. I honestly don't understand why it's so hard to make this little step back. Nobody is saying the project has no value, simply that it's premature to bless it as *the* way. Drop the doc and live in peace, why is it so hard?
Are you afraid of hearing what people are going to say in an environment you can't kick them out of? Have a good session with the sycophants. 
.0 addresses are so rarely used in real life, I assumed OP wanted a subnet as an input. His question is honestly not very clear. To me, at least.
It's a good tool. Much much less complex than pipenv and solves the big bulk of the dependency problems (deterministic builds and being able to specify compatibility ranges).
So what? Now I should use the tool, because author is butthurt? I criticized pipenv in the past (not the author, in fact initially I did not even know who wrote it), because the functionality it provides is already available. In the talk on PyCon the author was also disingenuous about it. He never mentioned the correct usage which is listing dependencies in `setup.py` and use output of `pip freeze` as a way to pin versions for production. He must know about it, because in order to place a package in PyPi that's the way to do it. If you take offense at criticism of your app, maybe it isn't the problem with the people you write the open letter to, maybe the problem is with you? If you can't take criticism, stop shoving it down our throats (i.e. listing it as standard by PyPa). Just because you wrote `requests`, doesn't make you immune to creating a turd. Same with Armin he created many good packages, but I just don't see value in `click`. It barely reduces number of lines compared to `argsparse`, it is an extra dependency (with few dependencies of its own) and is fussy about how Unicode is used. He doesn't seem to cry about it, doesn't make the `click` listed as the standard way to parse arguments, doesn't write open letters when people criticized it. People who find `click` valuable will use it, people who don't, don't.
Upon reflection, this is a hasty comment. The psf and the python packaging Authority or two separate things, I think. So, this was probably not a fair assumption. My apologies
What about the library isn't sufficient for your needs? It would be hard to recommend a library without knowing this.
In general - I find interesting problems and try to come up with solutions to them. If it ends up being good, I add it to my Github and maintain it. If you’re looking for something to do that lets you practice python, while simultaneously giving you a platform to show off the development of your skills for future reference, try making a Django powered website. If web development is not your thing, maybe try to join Kaggle and work on some interesting data science problems. There are also sites like Code Fights that send you different coding exercises daily that you can work on to keep you sharp. If you expose your self to different problems, and are ok with the “I have no idea what I’m doing” feeling...you’ll pick things up along the way, learn, and get better. Don’t get discouraged - like anything else, put in the time and effort and it will pay off. Good luck!
Yeah so essentially the user would press a hot key and the last X seconds of audio would be saved.
This tutorial is very useful for beginners, I am a tester but learning Python quickly.
This is not going to help. You keep making personal what should be a technical issue of process. The fact of the matter is that, in a very contentious area, a choice was made with no meaningful consultation of the ecosystem at large. A tool that was immature, by your own admission, was picked and officially blessed. You and the rest of PyPA cannot even keep your story straight on how it happened, but it doesn't really matter anyway. This should not have happened, not like this. You should be free to build tools and people should be free to adopt them *or not*, without undue pressure from the Python project. If the project as a whole thinks this or that library is *the way*, they should have the courage to ship it into stdlib through a PEP. This is what happened even with somewhat-debatable choices like `ElementTree` and `multiprocessing`. Not doing it with something as critical as the packaging tool, and trying to bypass the process, was a big mistake, on technical and political grounds. It was very disrespectful of the community at large. No amount of *moral suasion* will change that. Just admit to the mistake, have the doc pulled, and let's all move on; or resign to the fact that some people will keep complaining about the way your tool was imposed on the ecosystem. *Tertium non datur.*
hello sir, you have to give environment path after installing python if you are using windows os. C:\Users\NetworkForce\Anaconda3 C:\Users\NetworkForce\Anaconda3\Scripts after then i will open anaconda terminal and setting e environment. activate Environmentname // activate deep_learning install beaultifulSoup and requests from terminal pip install beautifulsoup4 pip install requests then run the .Py scripts
I work for a large world-wide corporation and the .0 is definitely used.
He comes off far _worse_ in the thread that caused this. This post is borderline lucid and welcoming compared to his rude, shitty posts in the other thread (well, threads, since he also injected himself into a conversation about a different packaging tool and acted like a grade A jerk).
after run .py script you have to run it from terminal cd desktop NetworkForce.py www.reddit.com link.txt
&gt; issues like this have made me realize that I need to vote for and support Donald Trump wtf. is this what a russian bot looks like?
That had to be his Google interview. Their recruiting pipeline is pretty daft with regard to languages and when/why they should or shouldn't matter.
the whole thing is written in python?
Not entirely what you're looking for perhaps, but I have this software FM-synthesizer and sample mixer code https://github.com/irmen/synthesizer Part of the code allows you to program drum loops (examples are included) and another part of the code is the software synthesizer and keyboard GUI
Thanks that's exactly what I wanted to know.
I can only submit one link, the rest is in the video description, links to everything etc. and if you know how to make a program on windows pc, thats not an .exe, pls share the knowledge sir
Hello, I just checked out the project and have to say I think it is very interesting and I could learn a lot for it! Thank you for posting this. To other people looking for the Python source, this repo contains it: [Living Particles](https://github.com/radijsdude/Living-Particles)
`from os import path` or `from pathlib import Path`
I don't think it was premature or unfair. We already did write it in an open, transparent, and participative way. As linked in my OP, all the discussions around pipenv happened on GitHub and on our mailing list. There was even a trial period where we explicitly marked it experimental, and we held it back from replacing the old tutorial because of a serious windows issue that the pipenv team fixed very quickly. All this happened in the open and anyone is allowed to participate- you just didn't. If you want the pipenv tutorial to be removed it won't happen by yelling at people on Reddit. File an issue on GitHub or start the discussion in distutils-sig, but be prepared to thoroughly prove your case as we did not make this decision lightly. Also, please be prepared to follow our code of conduct.
Hi, is that all the code you have? Because you are missing many components necessary for a basic Pygame. If you have any questions you can PM me, I can help you get started with the basics :)
That's nothing new for him, honestly. "For humans"
I believe Komodo is an IDE ? (Never used it myself) and Anaconda is a package manager. I use Anaconda myself and it’s a very useful tool, especially for scientific computing. I recommend the ‘Miniconda’ version, which comes without all the unnecessary built in libraries. It’s very easy to install whatever you need so it just saves disc space
Thanks for the input! What’s an IDE? 
I love pipenv! Get better and continue to do what you love!
Someone here mentioned there are two kinds of people: 1. Ones that want to understand things exactly as they work 2. There are also people who only care about the end result, everything else can be magic It seems that pipenv targets the second group. I (and I guess you as well) belong to first, I prefer that because typically that approach is easier to automate and debug when things don't right.
It's a sat solver for sure. I've been reading about golangs new vgo proposal, which uses a method for determining import requirements and even if I can't speak to how will it will work yet, it has taught me a lot about the problem itself, I recommend reading the series of blog posts about vgo for that reason.
And with Nick c being part of the pipenv project. Shady is right ...
Pipenv is a great productivity tool imo, had a look at it after seeing the pycon stream and will definitely be using it. I rarely bothered creating virtualenvs before now because of all the different tools and config you need to keep track of and update. It's not that I couldn't use them, it just took too much focus away from other things. You should keep pushing to add your features back into pip, people just need time to adapt to new things. :) 
Finally some good news from this mess.
Integrated Development Environment. It's like a text editor specifically designed for programming, with lots of features like debugging, syntax highlighting, refactoring tools, etc. Some text editors (Sublime Text, Atom, Visual Studio Code) can get several of those features with extensions or plugins, so the separation is not that clear these days, but you get the idea...
&gt; It would be easier if it weren't so blatantly clear that Reitz has a modus operandi that leverages other people's work for his own gain. That dove-tails well with what I've realized KR is really after-- marketing and self-promotion. I think his motivation is less 'making great software' than it is 'making himself known.'
Lack of library support is a deal breaker for Pipfile for me. I’m sick of half backed python packaging - every fucking time I think I “have” it down, something else breaks/comes up. Official support for Pipfile is too early and inappropriate unless something changes.
No. To blame all of this on bipolar disorder is nothing but a cop out. He had no reason to speak lies and partial truths. He had no reason to shut out all means of conversation-- it is not only not healthy to do but also gives a horrible look. I understand his frustrations, but he's been doing this kind of thing for a while now. I highly doubt that he has been under the power of one of his episodes during all those times. Being bipolar is no longer an excuse. "I'm bipolar, sorry I was mean/over excited/upsetting/whatever" "I'm bipolar, sorry I was not open to conversation" See the difference? The first is apologizing for the emotional tone. The second is apologizing for the intent of the response. Even if it is "hard" to respond, which he claims that "we aren't worth the mental bandwidth", well, he isn't worth the effort to join his community if this is how he keeps the gate.
I tried it yesterday and I really like it, but I wish the tool wouldn't require me to create requirements.in file. I declare my dependencies in setup.py, I know that I can pass that as an argument, but there is also scenario where setup.py is not available. I use requirements.txt to control what should be installed on every machine (BTW pip-sync looks awesome that it is capable of keeping only the requirements installed) so in CI pipeline I plan to use pip-compile to generate it for devint. (Then the file is promoted to qa, staging and prod after passing all checks). At that point the package is already in artifactory and I don't have setup.py on hand. So I have to generate requests.in file with just that single package, it would be much nicer if I could just pass the package name as an argument.
Python has a logging module you can use to log what is happening in your script. Read up here: https://docs.python.org/3/howto/logging.html This free online book will help you with PyGame https://inventwithpython.com/pygame/
Komodo is just a text editor / IDE and Anaconda is a package manager. 
&gt; We already did write it in an open, transparent, and participative way. There was no PEP. It's not a stdlib module. I didn't see any real announcement, the doc just appeared. And still, it is now an official standard. I honestly don't care that other technicalities of PyPA do not go through the PEP process; this is way more important than an SSL certificate change. &gt; All this happened in the open and anyone is allowed to participate For major changes like this, I rely on the PEP process to alert me. I honestly cannot follow every nook and cranny of the ecosystem, I rely on developers to declare "we are going to do this" *in the place where it is supposed to happen*. Github is simply not a replacement for the standard PEP process. &gt; If you want the pipenv tutorial to be removed it won't happen by yelling at people on Reddit. Refusing that there is a problem is not a way to solve problems. Nobody is yelling, almost all the criticism I've seen in these threads (and certainly all of mine) was rationally and calmly stated. Disagreeing is not "yelling". People have signalled a problem, and you are going to ignore it -- fine, I understand. At the same time, please understand that this issue *will* keep coming up. There was a mistake in how a change of this magnitude was handled, whether you admit it or not, because otherwise these threads wouldn't exist. &gt; please be prepared to follow our code of conduct. The passive-aggressiveness in this sentence, completely out of the blue, is depressing.
What I think might people causing people to respond a little more vigorously than necessary to Kenneth's "letter" is many are realizing just how marketing-focused he really is. He explicitly says he is actively trying to market himself. One person quoted put it best: "If only these people didn't advertise themselves as the next best thing to sliced bread." Just look for references to "for humans" in this thread and you can see that people take issue to this. People in the open-source community have a strong aversion to marketeering and self-promotion. Kenneth even said himself that he created projects to accumulate stars on Github. Open source was founded on the concept of breaking away with all that is wrong with closed source heavily marketed software that relies on being pushed rather than winning on its technical merits. Technically superior products might not be winning based on their merits because their author isn't stumping them as hard as possible on every subreddit, twitter account, facebook page, instagram, conference and local meeting up they can.
As a complete "basic" python user, I find all this drama sad and I was not used to it at /r/python. I wish things would remain on a technical level. Considerations about one's illness or "social climbing" doesn't help.
This is insanity. None of this matters. What matters are two things: * you not being able to take criticism on not yourself but rather the packages and standards you author and advocate * you confusing criticism of those packages with criticism of you, which will eventually make people criticize you for your actions, and think less of you due to them, like I now do Software is not a positivity circlejerk. And none of us are blind to the crap that you are doing in regards to how you act in your communities.
On the other hand, PRs are (at least for my work dependencies) usually free work in the form of: - here’s this bugfix for a terribly obnoxious edge case - here’s a feature we have in production at $Company Yes, it may be an unwanted puppy, but it’s an unwanted puppy with vaccines and usually a seal of quality.
This is very helpful! I wasnt aware of the ipaddress module in python, and that is obviously what im looking for. Thank you so much and ill probably ask you why nothing is working after i have tried and failed :D
At best, he will take the criticism that this thread brings to heart, and maybe, just maybe, better the way that he acts.
I was fairly unclear, yes. Sorry about that. The IP i provided was just an example and didnt really consider the fact that it could cause confusion. The question was mainly just how i can manipulate an IP address. i wasnt aware of the ipaddress module and im hoping this will solve all my problems.
The ending really hits it, more so than the excuses. This is stuff that comes with being a public figure, unfortunately, and trying to fight trolls only makes them stronger. Also, many of the posts linked, while being negative, were totally fair and detailed criticisms. They pointed out exact reasons why they were unhappy. I understand it can be hard dealing with mental health issues, but if you cannot deal with criticism, maybe being a public figure isnt a good idea. 
There was absolutely nothing appropriate about it. Youre a psf board member, pypa members sre contributing authors to pipenv, were endorsed so prematurely when the thing was barely functional, are outright lying when you say bullshit like you had no say in the promotion iin the docs. Its just too many coincidences anand your community response is piss poor. Youre reposting your same article after deleting the first bc it didnt go your way? Fuck you.
About as self righteous as quoting yourself &gt; Be cordial or be on your way. —Kenneth Reitz https://github.com/pypa/pipenv/blob/master/docs/dev/contributing.rst
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [pypa/pipenv/.../**contributing.rst** (master → 7e59630)](https://github.com/pypa/pipenv/blob/7e596306f49f59baf13ed177cf8c31d533b27a07/docs/dev/contributing.rst) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dz8t06l.)
Apparently I am unaware of these issues you speak of, mind linking them in some fashion? I'm curious to what level of relevance they have (I'm sure they are relevant, I just don't know to how much of this crap they encompass).
Kr:. I'm tired of the feedback. Time to repost my letter and host a hangout!
He reposted it? And yup. The hangout is [pointless](https://www.reddit.com/r/Python/comments/8kjv8x/a_letter_to_rpython_kenneth_reitzs_journal/dz8rku7/) and will become nothing but a positivity circlejerk. This is nothing but shameful and fucking sad at this point.
You may have seen that in this and other threads, people have discussed the difference between constructive criticism and plain hate. Ending your message with the words "Fuck you" is an obvious sign that your message is the latter. Feel free to disagree, but not like that.
&gt;Tons of people use it in production. who? and for what applications?
* open source is not just software, it is community. Having a venemous snake keep the gate is harmful * I am fine with the promotion. I am not fine with the promotion as being complete and the new godsend standard when it had blatantly clear fundamental problems * the package is *objectively* broken. People can see the issues of it. Having issues is fine. Not wanting to fix them is fine. Not wanting to discuss them isn't. * One, not his lockfile. Two no one had any personal attacks against ken until he was rude, childish, caught lying, or some combination of the above. Three, the amount of criticism is exaggerated. This is a community of 250k. He at max got 250 pieces of feedback. Less because a lot of it is similar. But the majority was constructive or positive, and the actual negative comments (like the Pipenv is garbage) *were heavily downvoted*.
Hmm sounds like a pretty easy request
Right bc it makes all the content of the odd mmeajingless right? Of course not. No deleted to be a hit concillistory before I saw your message, but stop pretending my oist was trolling bc I said fuck you. Yes deserves to be scolded st this point.
It may have started as Kenneth's project, but someone else committed that quote: https://github.com/pypa/pipenv/commit/968223448a9b1bf3bb1234519f7c6fa0692033cd
No. 'Celebrities' are people too. Constructive criticism is fine, but hatred is not OK just because there's a lot of it.
Wait, so this is technically the third time this has been posted?
I do open source. I often close tickets 6 month later that say fixed this a while ago. Part of that is starting on one ticket, fixing one bug, finding another, and getting stuck and then coming back and not remembering bug #2. Seriously though, how often do you forget to respond to email? I have 100+ open source related emails per month. I read the issue, but if I don't have anything to add to it, there is no point in me responding. Even I reproduced your bug is something, but if you both agree the behavior is wrong and are clear on what the answer is, it's a waste of time to respond to it. I'll just fix the thing and hopefully mention it in the ticket. If you don't get a response, speak up. Also, if you don't care to respond to questions of hey I think I fixed x, try it out, at some point I'll close it.
I *suspected* it from the title! I was pretty sure when I saw the video itself. I'm pretty certain given all this grouptalk. But it could still be a totally different algorithm/model/core idea than Conway's. I still haven't watched more than a few seconds of the clip. :/
Read this subreddit's sidebar -- lots of information pertaining to your question. Then visit r/learnpython and read their sidebar and wiki. Consider books as well.
I have not denied there are issues. I have simply stated that these issues have not been brought to our attention in our channels of discussion. Since you are advocating for removal, I would encourage you to bring them up. I will happily ferry the discussion from there. You can clearly see through the discussion that happened on GitHub about pipenv's shortcomings on Windows that we do take this seriously. It's just beyond Reddit threads I haven't seen any actionable negative feedback on the packaging documentation - quite contrarily, I've seen positive feedback. Please note that I don't work on poetry, pipenv, or pip directly which is one of the benefits of me being the primary maintainer of packaging.python.org - I can be mostly impartial. What was added was at the request of the rest of the PyPA and was written and tested by me- in the open, on GitHub, in a PR on a repository that anyone can participate in. There is no secret cabal or process happening here, and both myself and our Nick Coghlan, our PSF Packaging WG member, do not believe that a PEP is necessary here. If you disagree, please bring your suggestion for process to distutils-sig- we would legitimately love to hear it. Also my note about the code of conduct was directed to anyone who might read this. This is a public forum and I am not speaking exclusively to you.
I dig pipenv. I’m using it for every project and I’ll be adding it into existing code whenever it is realistic to do so. I don’t get the hate. It was frustrating for a while that it took like 10 mins to install a module, but that seems to not be an issue anymore. So anyhow, keep rocking it. 
&gt; it’s an unwanted puppy with vaccines and usually a seal of quality. ... some pull requests are like that. By no means all of them. And it can take time and effort to figure out which are which.
I've got ADHD, Kenneth! I know it's not the same, but thank you for being forward with your own struggles! Thank you for requests! I had no idea how HTTP worked until I started using it. You changed my life for the better. It's also a nice reminder that the people behind the software are just that, people. Love or hate the software, there's no need for ill treatment.
Oh I knew about everything except for this being posted twice. Wonder what the *original* original thread said.
Try looking at a simple project that you like and try to reprogram it yourself. it takes hundrets of hours, but you will also learn a lot.
[www.reddit.com/r/Python/comments/8kdfd6/kenneth\_reitz\_a\_letter\_to\_rpython\_with\_some\_notes/](https://www.reddit.com/r/Python/comments/8kdfd6/kenneth_reitz_a_letter_to_rpython_with_some_notes/)
and btw,[ fluent python](http://shop.oreilly.com/product/0636920032519.do) is a very neat book.
Not the op but I asked this a while back. At the time there was no mention on PYPI about it. https://github.com/pypa/pipenv/issues/1089
best practice is logging and debugging the code with a proper debugger. also, try to comment your code. it will make it way easier for another person to understand what you wanted to do.
Unfortunately, the only answer is good unit tests and CI (like Travis). There really is no other automated defense other that those two. 
By coincidence, I just saw [this tweet](https://twitter.com/aprilwensel/status/997612665122902016). No, we don't have to 'just get used to it'.
try to use a virtualenv, use it in pycharm \(or let it be created by it\) and install it from within pycharm. this usally works for me. btw, I have found myself with a lot of issues using anything newer then the python version 3.5.3. It's worth a shot, if you are struggeling for hours to get it running.
I saw that. What about the other thread you said he posted?
You also called him a liar, said his words were bullshit, and jumped on an apparent contradiction when he suggested people talk to him. The "Fuck you" was the most obvious signal to point to, but the same tone ran through your whole message. And no, he doesn't "deserve to be scolded". You're not his mum!
The speaker seemed to think he was the first to have these ideas. It's quite insulting to present like that. If you've been considering something for 20 years and someone goes on stage and brags about having that same idea...
That's a good start. But it's not hard to submit a PR which is going to be a maintenance burden but passes all the tests, especially if that's adding a new feature. I think you're saying that there's no technical solution to make this easy. If so, I agree!
Place words in a collection, import [`random`](https://docs.python.org/3.6/library/random.html), place collection as argument to [`random.choice`](https://docs.python.org/3.6/library/random.html#random.choice), get a random word.
Yall realize kenneth isnt pypa nor he had anything to do with it becoming the standard on the site.
Sorry if it's a silly question, but how do I make "word" become a collection? 
You *place* a word in a collection (although, technically speaking, a "word" is a collection of characters), like a `list`. You probably want r/learnpython -- better place for questions sich as this.
My original comment: This guy needs to look at his own personal motivation for seeking "fame" (his word not mine) in the python community. The extent to which your ego, your identity, is bound up in being python-famous, is the extent to which you have made yourself dependent on the community's opinion of you. This dependence may lead to approval seeking posts like the one linked. Kenneth's reply: &gt; I didn't seek fame, I sought to provide inherent value. One comes with the other, and is a natural byproduct. My response: &gt; Bullshit. Your own post describes the way you marketed yourself and how you sought this reputation out: &gt; &gt; &gt; first off, my fame, while certainly categorized under “cult of personality” is not necessarily accidental. It’s called marketing. I worked very hard at becoming well known within the Python community, and toiled away at it for years. &gt; &gt; And now you say "I didn't seek fame"? You can't have it both ways bro.
Synackaon, I think you probably are being constructive. Best I can tell hollow or inflammatory. The dude talking about caffeine and health either. But a large portion of posters are like this &gt; Just because you wrote requests, doesn't make you immune to creating a turd. Same with Armin he created many good packages, but I just don't see value in This is not constructive. Calling someone's work a turd is exactly why people get mad at other famous trolls. The problem being, the culture on reddit and it programming loves this behavior, up votes it, and makes it the thing the Ken's or even outsiders like me of the world see. 
&gt; list Yeah, sorry, I'm in a hurry so I didn't notice that subreddit. https://imgur.com/a/dwFEBdN I tried to make a list out of the words but when I ran the random command, it picked LETTERS randomly from the words.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/fXRNtkD.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dz8wfe4) 
I love you too, KR. Many people like me have been earning good because of your work. You have changed lives of many developers. Ignore those who did nothing good for others and good at finger pointing and fingering their own ignorance. God bless you and may you get healthy soon. 
I love you both
What's the point of posting something to reddit and then complaining about feedback? Everyone has an opinion, and like with any subject, you will never get always the same kind of response. Python is a community project and people shouldn't make it about themselves. Jeez, think about how many people complained about Python 3 when it was released and yet I can't remember any of the python 3 developers whining about it. Instead with the community and listening to feedback they made it better. PS: If the majority of the feedback is negative and about a similar point, I say there is probably a kernel of truth behind it. So if the majority of users complains about that an "work in progress" tool is recommended over established ones, maybe as the initiator of the recommendation and promoter of the tool, I would want to reflect on it and do something more productive than complaining that people complain!? Solutions would be to unrecommend the pipenv tool for now in the official python docs and try with the community's help to fix issues in pipenv. Also all this shutting out negative feedback train is a bad attitude. If you only want to hear positive things about the tools you develop, you would never learn anything that will make you a better programmer. If you never listen to people who point out things that are wrong with your tools, you miss out on a lot of advice that can be channeled into making improvements.
I can't understand your English so unless you can run the commands I told you or formulate your problem into understandable English I won't be able to help.
From his letter: &gt; first off, my fame, while certainly categorized under “cult of personality” is not necessarily accidental. It’s called marketing. I worked very hard at becoming well known within the Python community, and toiled away at it for years. His reputation, which is deeply connected with his sense of self-worth, is being threatened. He must feel like he's fighting for his life. Nothing else would explain the amazing amount of approval seeking he's been doing. I hope he can let go of this obsession with being python-famous. It literally helps nobody.
I must have miscommunicated. I am only aware of these two posts to his blog.
I can't read this. Can you format it properly so that it's valid code? I mean if you can't be bothered to paste it properly, can I be bothered to read it?
/u/kennethreitz as a fellow engineer with their own mental health issues (anxiety, PTSD, and depression), please stop using it as an excuse for how anything goes. It is part of who we are and what we do in our lives. Also, instead of noting when you have problems (e.g., a manic episode), rely on your mental health practitioner and support groups, don't just stay in it.
Among these various threads, both him and PyPA people have passed the buck in terms of who decided what and why.
I personally try to avoid it, especially in production code where the most important thing is readability so other devs can understand what I’m doing. I use *args, **kwargs in small utility functions like trying to find keys in nested dictionaries and in that case it’s invaluable. But I find that most of the time it’s not necessary
&gt; the package is objectively broken. People can see the issues of it. Having issues is fine. Not wanting to fix them is fine. Not wanting to discuss them isn't. How is it objectively broken? ELI5 I've not used it and have no idea. I find this hard to believe considering its used successfully. &gt; open source is not just software, it is community. Having a venemous snake keep the gate is harmful Wrong. Open source specifically fixes this problem. Bad gatekeeper = new project. The problem here is that people want Ken to fix this rather than fix it themselves. He has no obligation to change his direction because his users or some vocal users want him to. That's not being childish it's having a direction and consistency. If people on his team want to make a new alternative. they can. If this board he is on want to select a different tool to put in their guide, they can. If you want to make alternatives you can. Open source is a meritocracy in a way. Anyone can take the code and change it and make a better version. BUT it has to be better. Otherwise you're just wanting to make someone else do what you want. He can if he wants, but if he likes his solution he can stick with it. 
&gt;And of course that the contents of the braces is an arbitrary Python expression makes it risky as hell to inject half\-trusted stuff from Transifex or whatnot \(f\-strings are already problematic on that point as they allow basically arbitrary attribute access\). I'm not sure that's a valid concern. It's impossible to take a `str` variable and evaluate it as an f\-string \(as of Python 3.6\) . f\-strings are a parse\-time feature in Python 3, they can't be evaluated at runtime.
The links on the sidebar are there because a lot of people think they're good.
People use the for humans meme so frequently on projects that it's original intent and meaning have been obscured, leaving only a meta-meaning -- which is no meaning at all. When I see it today, I only see the other person trying too hard to signify that they are "in". It is the opposite of some people's tendency to obscure things in jargon, but they both derive from the same underlying impulse. There's also a whiff of self-deprecation implied, "X is difficult, so here's something for humans". But of course in order for a project to be useful, the maintainer must have a command of the subject, so it comes off as a show of false modesty. When a new project comes out describing itself as X for humans, it somehow implies that any other libraries existing in the X space before were somehow not for humans. Since for humans is meant to connote sympathy for the developer, this label implies that other packages were not developer-friendly. In other words, it's a bit of a backhanded dig at other libraries for having bad APIs. The audience for any Python project is always going to be a developer somewhere. To call your project For Humans is just a pretentious way of saying that you see your project as having a superior API to other projects in the same space. Let the library speak for itself. Let others be the judge of it's quality.
Oh sorry, thought you mean he made a post, deleted it, did it again, deleted again, and now someone else made this post.
Work on a real project, like LibreOffice: https://www.reddit.com/r/Python/comments/8htykb/helping_libreoffice_in_python/
The alternate would be to write out every kwarg in the function definition. This ends up violating the DRY (don't repeat yourself) principle - if the method that you're 'wrapping' has its arguments change or new arguments added, now you have to make sure to update your method as well. Bugs will occur when these things get out of sync. Better, would be some built-in way to specify exactly 'which' method(s) the kwargs get passed to. Maybe with some sort of type hint. Then code inspection tools and documentation tools could use that. Does mypy support anything like this? One nice feature that Roxygen2 (tool for auto-generating man pages in R) supports is the ability to basically import parameters from another function using a statement like: #' @inheritParams foo 
is there a link to the video? Id like to check it out. 
Python has a poem called the zen of python which has a line that suggests that explicit is better than implicit. So the pythonic way is to never use packed arguments or parameters. However... There are specific instances where using the argument and parameter expansion makes sense. And these instances show up more often in library code than in application code (which could be the same repo and code base). A couple examples include when you are wrapping another library (often written in another language), when your are writing dunder methods, and when you are writing metaclasses. If the use case you see doesn’t fit in one of those categories above or is something similar to those categories, then likely the implementation you see is just laziness.
I don't know of one.
I see your point about something inside docblock and I like it! About DRY - as I can understand it has been stated numeriously times that DRY is the new singleton (most popular are stackoverflow questions-discussions), since sometimes it goes to insane code just to follow DRY. Don't do DRY if it breaks readability to the point of "read whole codebase to find where the hell this method is used" It would not hurt write every method for I dunno, using another object inside your object (via composition - repeat write just methods you allow to use externally), but writing: // pseudo magic function __calling_method(string name, ...args) // If this is not here try to call another object inside here // with this method is... IMO batshit crazy and is like coding rush when you name variables named a, b, c, d just because your memory allows you to remember them at this one time. And then you leave them like this. Because you are a programmer. You can afford it, you write messages to the machine, why should it be readable? It's rocket science after all! Thanks!
You are a nice and clever person.
Well, Python is a thoroughly dynamic language; trying to get some meaningful semantic autocompletion for it is problematic one way or another: to truly figure out what completions would make sense, you would have to actually run the code. So avoiding this one relatively benign feature (one of the saner parts of Python, actually) for the sake of playing nice with IDEs, when at the same time imports have side effects, methods can be added to objects on the fly, classes can override core language features like member access, calling, subscripting, or even equality, entirely, is kind of silly. If you want a heavily IDE-driven workflow, I suggest looking into something like Java or C#. But the good news is that Python is perfectly manageable without those features; a lightweight IDE or just a powerful programmer's text editor are fine. As to when `*args` and `**kwargs` are appropriate: well, they fit a very specific niche, namely when you need a function that can take a variable number of arguments. You could of course just have it take a list, tuple, or dict, but sometimes the variadic syntax makes more sense. For example, if you want to write a function like `printf` in C, you would be able to name the first argument (the formatting string), but everything after that depends on that string. Passing those extra args as a list looks kind of ugly: `printf("Hello, %s!", [name])`. Another use case is when you go the other way around: sometimes, you want to construct function calls on the fly, and with the `*args` syntax, it is possible to store argument lists as tuples and pass them into functions that expect them as separate parameters. As far as "how does one cope" goes: just like with intellisense, it's a matter of arranging your tools such that looking things up is easy. For example, I use a keyboard-driven tiling window manager that allows me to rapidly switch between dozens of full-screened applications, so quickly switching to a REPL session or a web browser is convenient and low-threshold. I also have convenient clipboard shortcuts and other tricks, so I can, for example, send documentation directly to the clipboard using keybindings, or I can issue documentation lookups directly from the text editor and have it copy the output right into my source code.
Yup and he created and merged the pull request https://github.com/pypa/pipenv/pull/2205
One implementation I saw had homemade polymorphism in 1 method. If passed class - it will use it. If passed *args and **kwargs, it will create class and pass arguments inside. Again, I did not read all codebase, there may be case for this. But it really looks like either laziness or quick patching for quick releases or something
Seeing you mentioning that there is a difference between packaging a library and an application makes me wonder if you guys are qualified to call yourself an authority on packaging. Setuptools and pip have everything you need to properly package an application, what desperately is needed is to actually document what's available, because the documentation is quite bad. Some areas (especially around compiling code, pkg_resources (to access data), extending setuptools are in bad shape. There is a way to figure things out by looking at source code, but it shouldn't be there. Endorsed pipenv is solving issues that could otherwise be solved by just a better documentation. Pipenv is also opinionated how things are done, some people (especially ones using it for hobby projects) might like it and don't care what kind of magic it does behind the scenes, but there are also people that have need to know exactly how things work so they can adapt the tools to their CI/CD.
I don't understand the need for pipenv in the first place. Conda is quite good.
Dude, we love you. A bunch of babbling idiots need to rage - who cares. Pipenv is great. It's a huge improvement over virtualenv and pip's weirdly disjoint relationship before. Take care of yourself and thank you so much.
Such a disgusting response from a self entitled, uncaring individual that you come across as. Along with the whole rucking lot of you that upvoted him. People with disorders are not to be insulted (nor pitied) by some word smything, gun toting hooligans whose first amendment mentality think it gives them the right to 'go off' on whomever they wish, however they wish. People like Kenneth are the Sheldons of the world. But the world is not full of Sheldons. So not that many people have developed the skill set or have the decent courtesies with which to respond or interact with them. One has a choice wrt how to respond to a Sheldon's lack of inter personal skills. Act a fool or adjust. People like you who jump all over an individual like this, disgust me. 
You're asking about 5 different things, each of which has a very different answer. And each of which has been answered dozens of times before. Take a look at StackOverflow and google your questions with as specific terms with respect to your application as you can. If you ask generic questions, you'll only get generic answers.
Thanks for the answer! Language as JavaScript and PHP did consider using some standards to keep workflow, ecosystem and codebases sane. JavaScript devs know that overriding default language objects is very bad practice. Also many other rules which just denies access to doing crazy stuff there. So now, being as I understand the most dynamic language (well, not most MOST, but you get what I'm trying to say) - JavaScript, is kinda nice and not doing any crazy magic. And everyone lives. And it prospers. As for monkey patching - everyone knows how that one is bad. I see many extension repositories in Python which are telling right from the front door: hey, monkey patching, no big deal. Sometimes I don't get why Python got type hints. Is there some association I don't know about? Like PHP-FIG in PHP? Which I don't know, rewrite libraries with types etc, or maybe they comment or send PRs. Maybe there is Python code analyzer that is telling how adequate code is in terms of magic and monkey patching? I know there is mypy, but well first start of mypy - sqlalchemy - out of the way to the ignore-modules list. :/
Ease of use often trumps purity... Here's another example. Check out the [api](https://docs.python.org/3/library/functions.html#print) for the `print` function: print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False) It could have been: print(objects, sep=' ', end='\n', file=sys.stdout, flush=False) But then this would have been far more complicated: print('Hello, World') print('Hello', 'World') 
##r/DataIsBeautiful --------------------------------------------- ^(For mobile and non-RES users) ^| [^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| ^(-1 to Remove) ^| [^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/853qg2/ignore_list/)
Here's one: https://github.com/pypa/pipenv/issues/1044 I've filed more, but from my work GitHub account, I'd need to go on work VPN to find them... maybe I'll do that Monday.
Uncaring? Sometimes. Self entitled? Maybe. A dick? Definitely. I am not insulting him due to bipolar disorder...nor insulting him at all. His behavior is that of a fucking child and needs to be checked.
You need to shut up right now. You are talking out of your arse. You have no idea what kind of pathetic nonsense you are spreading. Stop it.
I appreciate any and all suggestions, as I can log them for later when I'm ready to learn something new. As of this moment, I'm still learning to set up a virtualenv \(and I'm really into doing things one, dead\-easy way\(it's the ADD\)\) and I've written one little Python program that I'm trying to make into an app. 
This is a potential sign of your asking questions which, although is not bad that you are asking but it shows you have overdriven your headlights. First take a step back and need to slow down, look at a map of your project, look at your processes, your design ideas or how you want this to look. If none of what I just said makes sense then you are likely "very green" and need to to a lot of research into stackoverflow and be prepared to spend days, weeks even to analyze your situation. Then try something.
Talk python to me complete bundle. It all depends if you want a full stack developer, a front end, back end, or scientific computing this is like saying how do I become the best mechanic. Do you want gasoline engines do you want diesel engines do you want car engines truck engines what be more specific
&gt;for anyone that wants to get any context into myself, the history of any recommendations that have been made, my board membership, etc, or just say hi: [u/kennethreitz](https://www.reddit.com/u/kennethreitz) look, in general the discussion is not about you but about pipenv ... until you started that letter and tried to make it personal. We are here to discuss things around Python and in this context to specifically improve packaging. Why can't you see that with a few exceptions people were commenting on pipenv and how they would like to see some change and improvements for this package before it becomes the official recommendation. I think I speak for the majority here that we would like everyone to be doing well and be a positive part of the python community and to improve things together. This sometimes involves negative feedback as well if things \(like software\) are not good enough. By pointing out issues, we know what to work on, and what features would be nice for the majority of users. Please stop making it about you but bring the discussion back to pipenv. Letters like this don't accomplish anything but making people believe that you see yourself as so important and above the community and that the communities feedback is not welcome because you want to do your own thing and make decisions on behalf of the Python community by suggesting what's \(what tool\) is best for everyone
Thanks for the excellent suggestions! We currently have an antiquated JCL compare report that takes in two fixed width files, compares them, then outputs a compare report for records match, mismatched, missing in one file vs. the other (deletes), and present in one files vs. the other (inserts). I took MySQL and created a bunch of scripts with the purpose of iterating through the files one by one after dumping them into staging/load tables initially. The issue is that for every layout, I have to create a new script, which can get quite labor intensive when I have other things to do. The end goal is to have OPs service themselves so I can focus on my own job. The kind of data I would be comparing are fixed width (non-delimited) files, and piped or comma delimited files, width and without headers. The challenge is that they almost always be unsorted, which will mean a simple like-like compare won't work. It may require reading the files in memory, which limits file size. I currently work around this by using batch INSERTs and literally dozens of JOINs on the conditions I custom set for every script, but that gets tedious. 
I mainly use them in internal use, but sometime it allows really nice api. And if you have a library with liberal use of wrapping function like matplotlib, it make maintenance far easier, but make IDE suggestion less useful. You have to carefully think about where you put the ruler..
Depression is not a disorder?
i assume you were at the talk then?
No.
Stick with conga and it is a great tool to keep dependencies in order.
That would have been awesome. But unfortunately while you can do `pip install conda`, it wont work without at least a miniconda installation. Also conda doesnt work so well with normal virtualenvs, at least that was the case few months ago.
Right. I use Miniconda and have been much happier with it than pyvenv. I was frustrated to find that python.org download ships a broken (old certs) standard library as of a month ago. Conca isn't perfect, but over the last couple years they've fixed the issues that bugged me.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I have removed this post as it is aimed at beginners
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Alternatively if you’re running synchronously (as their sample) you can simply catch (or suppress) it. I favor these options (unless you’re running multiprocessing, usually) because it reads more clearly what happens and you can ensure any exit cleans up any necessary resources. Catching: try: while True: print(‘Simulating work...’) time.sleep(5) except KeyboardInterrupt: pass finally: print(‘cleaning up some resources before exit’) or if you just don’t care about it: important contextlib with contextlib.suppress(KeyboardInterrupt): while True: print(‘Simulating Work’) time.sleep(5)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I've seen some teams at our company use aiohttp, but mostly we use tornado for python async web servers. Some of the most crucial parts of our (not small) business run on it, if that's what you are asking.
1. Which is why they are, as I noted, mostly useless for i18n purposes. But one could imagine doing translations via import hooks or static package builds which would allow for that mistake. 2. As for the parenthesised bit I meant formar-strings, they're the ones which allow arbitrary attribute access (but not arbitrary expressions) and I'd already stated f-strings were useless, I bungled the label is all.
Thx for Feedback buddy. You are absolutely right. Gon' add it to the Post. :) 
The best thing to do is ignore all the jealous idiots on Reddit. This is sad.
It looks useful in this case of course. If method I mentioned would like use new_instance.add_parts(*args) it will be justified. Unfortunately, there was just the case of some kind of polymorphism. Maybe even 2 devs argued: one wanted to pass instance, another wanted to have some kind of factory function
There are a number of technical issues at various levels. But the worst problem in my opinion is that of workflow-- it advocates the Pipfile standard, a still incomplete and partially broken standard, yet *pip can't even fucking use it yet*. This makes the standard virtually garbage for whoever writes packages meant to be distributed Open source is not "you disagree with me so I'll do it better". That is the opposite of open source. This isn't a fucking competition. *Wrong*. OSS is a standard of software and the community around it. Doing these hard forks do nothing but bitterly divide the community unless the division is made solely for progress. And unfortunately a division already occurred because pipenv is broken. What happens when poetry is made? Kenneth got salty against the entire poetry subset and pissed on them calling them haters and lying about some important community aspects of a pipenv and poetry merger to make himself look better. The problem here is not the fact that people want Kenneth to fix things. Disregarding the fact that the burden of fixing officially advocated bullshit should never be put on the user, him deciding not to fix these things is not childish! His decision to plain and simply shut down discussion on these issues *fucking is*. I don't care if you say "I don't want to do X". But saying "I am tired of feedback" and "I don't have the mental bandwidth for this" is plain childish and narcissistic. I have no problems with the software itself beside the fact that it's buggy. Thats fixable. I have problems with the "my way or the highway" community Kenneth fostered. And it is clear to me now he is a childish, vindicitive, narcisstic person who wants a positivity circlejerk where he is the center of it all, while blaming all of his misdoings on his mental health. This is nothing but shameful and I have lost *all* the respect I had for the man. And nothing short of a public apology, taking down officialese recommendations from PyPA docs (he can easily request it if not do it, they would happily oblige) to stop this bullshit marketing, and promise that he will no longer shut down discussions of his software when he doesn't like something. And of course, keep up with the promise. But he is an ass who wants nothing but glory. So this will never occur.
Not cool dude.
This is more disgusting than what I've seen. Especially the whole lock + "you guys don't take a hint".
Oh jesus cut this bullcrap. Mental health issues aren't a fucking card people can play when they act like vindictive, narcissistic, assholes. This behavior pattern from Kenneth is long and many have it. I am not insulting his disorder nor is his disorder the cause of him acting like a piece of human garbage. Comparing this to political argumentative debate is idiotic. It is completely irrelevant. You are comparing apples and oranges. Are you seriously playing the Stephen Hawking and Big Bang Theory cards? Stephen hawking wasn't a narcissistic asshole. Sheldon is a *fucking tv character*. Go back to fantasy land where those arguments matter.
I think this is a good time to point out one of the keynotes at PyCon this year that talks about these kinds of issues: https://youtu.be/tzFWz5fiVKU?t=48m56s Regardless of your opinions on pipenv, on Kenneth, or on this whole situation, the fact that Kenneth has been made to feel this way after PyCon itself, which is supposed to be a very inspiring and uplifting time for maintainers, is not good. The way that the community is treating him now and before is unacceptable, and some of you need to be ashamed of yourselves. We are all humans. Let's stay civil.
You don't need any of those indentations here
Much, much faster overall too. Pipenv takes minutes to complete tasks such as install, update and lock. Piptools takes seconds on the same project. I'll be rolling out piptools to production tomorrow morning.
Kenneth has built some kick ass software. But I do see this perspective and almost wish I hadn't read Kenneth's retort to r/python for the simple fact that it did have a self-serving tone. I guess the good of it is that we're all on the same page now. Looking forward to not seeing these personally oriented posts bubble up in the near future. Regardless of all the politics of this - keep up the good work Kenneth. You're an inspiration to many. 
r/learnpython
Did you just fart? As we say around these parts, That' s just another 'a' hole heard from. Any whoo. We've got you good and properly pegged. Have another swig of mannish water and be gon with yer.
I told you once, and I'm going to repeat myself: You have no clue what you're talking about. You piss me off to the point where I literally consider whether I can still be a human, if I wish for you to experience on your own mind what I have experienced. You need to stuff your stupid misconceptions about what a depression is, and you need to do it fast. 
Does your interface need to be interactive? if not, use something like gooey If it is, you got a problem ... and it will need some thought. We'd need more information.
No. We haven't been following PEP 423 at all (I assume this is what you're asking). I might actually look into it as we're thinking of open-sourcing some of our more generic utilities. You might want to add [The Import System](https://docs.python.org/3/reference/import.html) to your reading list. If you're still interested after that, there's also PEP 420 (Implicit Namespace Packages).
I did not say anything like that, I don't know Kenneth.. I just said that I recognise a similar kind of behaviour based on other people I know. Some people can go in to extreme mood state and out of it again within a few hours.. I will not write anything more on this topic because I don't know enough about it.
This whole situation is reminiscent of MyPy driving the PEPs that approved type annotations and variable typing. The spec was bad, but was blessed, and now it's standardized.
Bullshit yo: &gt; It’s called marketing. I worked very hard at becoming well known within the Python community, and toiled away at it for years. You manufactured the need for pipenv and then drummed up official support. Bullshit.
Exactly, it is very interesting, and the author has one of a kind reputation.
Have you actually ever used the stdlib in Py3? Your example is nonsensical and downright wrong. I personally keep my venvs in the same folder as my project, opportunely `.gitignore`d. So for me it's like: cd ~/myproject python -m venv venv ./venv/bin/activate.sh pip install --upgrade pip #totally optional, but nice to have pip install -r requirements.txt Pipenv forces me to keep the venv elsewhere. It also means deployments are now a pain, as i have to make sure pipenv is installed at the os level before I can get anything done -- whereas before I just needed the stdlib (except on Debian, where venv was butchered away for some inscrutable reason; but that's another story). It's a lot of fumbling for no real gain, at least in my case.
The timing of posting this is a bit ... odd. You can of course pretend to not understand why I find it odd, and that will be a good indication of what's really odd right now. 
The fact that it’s an executable isn’t a problem per se, it’s just generally a bad practice to download and run an .exe except from a trusted source. A trusted source might be a company website served over https with a signed and trusted certificate. Generally a random developer like you or me is not a source to be trusted and folks shouldn’t download executables from us and run them blindly. The solution is generally to distribute your source code along with instructions for users to build it themselves. This way they can audit the code before building if they so choose. Of course, this solution puts a lot of work on your users, so both options are usually offered: give users the source and build instructions as well as an executable download option and let them choose for themselves. Hopefully this explains what the commenter meant. It’s not _necessarily_ something you need to worry about, though you will surely have folks that aren’t comfortable trying out this project without an option to build from source. And in general we want more people aware of the risks of untrusted executables so encouraging them to run them without explaining the risks is something to avoid.
Drama is commonplace in OSS and python is no exception; but usually it is confined to the mailing lists as debates are thrashed out during the PEP process. On this subject there was no such process, so the argument has bubbled out elsewhere. It doesn't help that the main developer has done his utmost to personalise the argument.
Yes, that tkdocs option to select the specific programming language you want to view the tutorial in is great. I've not seen that done anywhere else.
Absolutely but his behavior patterns like this are consistent across many months, according to some, many years. The blame for his actions throughout this time cannot be simply washed away with "hey guys cut me some slack, I'm bipolar". It lessens the importance of mental health issues, is a cop out, and promotes bad behavior.
Been using ZODB for years which imho doesn’t get either enough credit or airplay. Transactions, ACID, atomicity, content centric and over 15 years of use. ODBMS are paused to make inroads as people get mauled by mongo or Cassandra taking off yet being fragile. 
It’s not the official tool. It’s a recommendation for one particular use case. On top of that, It has absolutely zero bearing on stuff that is distributed on PyPI, it only effects projects that opt into using it. It does not produce packages, Pipfile has nothing to do with producing packages. If you or a project you use doesn’t personally use it (and by use, I don’t mean install from PyPI) then it will never affect you. 
Valuable post! I know this sort of thing is a lot of work and, although I suppose you do it professionally, it is still very generous of you to post so much work. I thank you as will probably some of my students. Great example by the way.
What exactly have changed since "Pipenv is the recommended ..."? Also, which mailing list should we follow in order to keep tabs on the changes to Python packaging and distribtion? 
use a python editor to figure out the problems while writing code, &amp;&amp; read all the comments of this post
&gt; There are a number of technical issues at various levels. But the worst problem in my opinion is that of workflow-- it advocates the Pipfile standard, a still incomplete and partially broken standard, yet pip can't even fucking use it yet. This makes the standard virtually garbage for whoever writes packages meant to be distributed &gt; &gt; ELI5. Super 5. I do not use python to make distributable software. I have used PIP obviously but what is so broken.How does using this package screw with PIP? What is bad about the standard? &gt; &gt; Open source is not "you disagree with me so I'll do it better". &gt; &gt; &gt; &gt; That is the opposite of open source. &gt; &gt; &gt; &gt; This isn't a fucking competition. &gt; &gt; &gt; &gt; Wrong. OSS is a standard of software and the community around it. Doing these hard forks do nothing but bitterly divide the community unless the division is made solely for progress. &gt; This is not true. Where does the GPL set forth group and project management standards? Open source does not imply that. Some groups in the open source world do put together standards for their organizations and some are very inclusive and supportive but not all are. And that's fine. Ken did give you the code, and if you don't like how he runs the ship, out compete him. He is under zero obligation to do what you like. &gt; The problem here is not the fact that people want Kenneth to fix things. Disregarding the fact that the burden of fixing officially advocated bullshit should never be put on the user, him deciding not to fix these things is not childish! &gt; How is that childish? He can simply say at any time, I do not want to do what you want me to do. If you want that do it yourself. It's open source, he is not under contract to update the software the way one or even a thousand users want. &gt; This is nothing but shameful and I have lost all the respect I had for the man. I'm sorry you feel that way I guess? I think you're stressing out over something that's probably not bothering this guy. &gt; But he is an ass who wants nothing but glory. So this will never occur. I mean he's a human being he can have whatever drives he wants. If he wants glory in the python world and it motivates him to share code... that's fine. It's not perfect but i mean what's better? Have you worked with any closed source interpreted languages? They're worse. 
Why won't the prints work?
You know what I’m not sure why I wrote that. I think I was thinking of the print line, -&gt; print(line, end=“ “) change from python 2 to python 3. 
Nothing has changed other than a slight rewording to try and make it clearer. The PyPA does not have "official" tools. Official implies that there is a singular tool that you should use and any other tool is somehow wrong. The packaging.python.org docs, which are produced by the PyPA, recommends some tools for certain situations and pipenv is one of those recommendations. However they are just that, a recommendation, if your situation doesn't fit into that situation closely enough then maybe it won't work for you, and you're free to choose another tool that maybe works better for you. A lot of effort has been, and continues to be put into making our toolchain as pluggable as possible, by defining documented standards rather than official tools, so that as long as a tool implements the standard, then everything works together. In this case pipenv is really just an installer, so it consumes standards like Wheel files, et, that has an opinionated workflow, however since it's just an installer, if you don't want to use it, don't. The wheels and sdists that exist on PyPI can be installed by any other installer (for example, pip) and you can use a tool that works with your workflow better.
&gt;PyCon itself, which is supposed to be a very inspiring and uplifting time for maintainers, is not good. I agree with that, but if you bring up this point, then you also have to acknowledge that Kenneth was, as a maintainer, not very nice to users who wanted to help with pipenv and submitted constructive feedback/asked constructive questions on GitHub. If you are snarky to the community, then it can happen that the response by the community is snarky as well. I don't think that the community had any malicious intend making Kenneth feeling bad. It was just honest feedback in terms of what the community things about having pipenv recommended to the Python community while it's apparently not ready for that. What happened then, based on the criticism of pipenv, was that Kenneth chose to feel bad instead of just acknowledging that pipenv wasn't ready and listening to the community and involving the community in addressing issues with pipenv. PS I think that Kenneth's libraries are good although the marketing seems a bit arrogant. To me the "for humans TM" tag suggests that other libraries are inferior and seems to be for marketing purposes with I find inappropriate for open source since we don't want to "sell" something here
A 500 internal server error only indicates that *some* exception occurred—it doesn't necessarily mean the import itself isn't working. One of those libraries may not have the proper dependency installed, etc. When this happens, is there a large stack trace of the error printed in the terminal? That will be helpful in figuring it out.
&gt; It was obvious to a lot of people that pipenv was not production ready, yet it was pushed as the official tool on packaging.python.org. I mentioned it above, but just to reiterate, pipenv is not "the official tool". The PyPA and packaging.python.org does not have any "official" tools. Official implies this is the one singular blessed way to do something, and anything else is off the beaten path. What packaging.python.org does have is recommendations for users in certain situations. Typically these are new users who are unsure which tools are the best fit for them, before they even understand Python well enough to make a fully informed decision. If that recommendation doesn't work for you, then it is 100% supported to use something else, and it always will be. A lot of effort has been taken over the years to formally standardize the formats and APIs at play here (wheels, sdists, the simple API, etc) so that the tool chain is pluggable. That's not going away, particularly not because one tool was added to the docs as a recommendation for one specific use case.
For a tool that isn't official, it sure has had a lot of very enthusiastic proponents, who have been ready to tell me that it's the only proper way of creating virtual environments. They have even been able to point to a page on packaging.python.org, where it was listed as such. But now that this misunderstanding have been cleared, I'm sure we can all wind down. But still: What is the actual channel to subscribe to, if I want to keep tabs on packaging, virtual environments and associated code. The best candidate seem to be the distutil-sig mailing list. However, that isn't really full of the deliberations that according to /u/ivosaurus and /u/jonwayne have been made before pushing pipenv to the official status that it don't have. I think that a lot of the discord that have been played out over the last days could have been avoided entirely, had there been a clear communication channel. So please, what do we need to subscribe to? 
I usually follow the subreddit without commenting, because I come here primarily for the Python news. It's a bit unfortunate that a discussion about a technical topic seems to have gotten so personal. I think it's natural that there are conflicting opinions about the utility of a tool, and I think that discussions should be stopped if it starts to get personal since some people have a thicker skin than others dealing with that. For the community here, I think we should aim to not to get too personal if this causes reactions like this, and for people who do take criticism too seriously, it would be healthy to not generalize a small number of comments that may have been too negative to the whole community. 
&gt; For a tool that isn't official, it sure has had a lot of very enthusiastic proponents, who have been ready to tell me that it's the only proper way of creating virtual environments. Unfortunately, often times fans of a tool can be overly zealous far beyond what the authors intend. Another similiar situation is that pip users and conda users often find themselves arguing and fighting over which tool is the "correct" one, while the authors of both tools have a pretty decent relationship and are perfectly fine with each other, and don't see our tools as competing as much as having a small overlap with also large areas with no overlap. We can't control what users of the tools decide to do or advocate, the best we can do is try to be as clear as possible. If there are places we can be clearer, we'd certainly like to hear about that. 
Pimples are a disorder, but we're not talking about Kenneth's pimples here. And if the use of the word 'mental' is a sought after clarification on my part, then I willingly do so. Bipolar is now understood as ... and is being treated as schizophrenia. When a person who suffers from bipolar disorders ends up being really sick, they end up in the schizophrenia ward in a pysch hospital. Not the same for someone suffering from severe depression. The medical profession isn't busily build psych wards for the clinically depressed. No one on this side is making any judgement with respect to which is worst. And just because one has the opinion that they are the same, doesn't factually make them so. Persons with either illness find it difficult to make appropriate behavioural decisions. And while there are similarities, there are striking differences. Noo ne suffering from depression wants to be treated as a schizophrenic and no one who is schizoid or bipolar wants to be treated as depressed. To say that there are similarities is true. What is also true is the saying that they are completely different. Both in terms of symptoms, treatment, decision making abilities and behaviour. And while I don't buy the logic that a person with severe depression - can exercise control over their behaviour and thus - bipolars and schizoids should do and can do also.... doesn't make me any less caring or understanding. And if you knew my life story you would understand why I say and believe these things that I have said to be factual. 
You should never put conda on LD_LIBRARY_PATH as doing that will interfere with your distro at the 'which DSOs get loaded by your distro executables level' and that completely ignores binary compatibility issues. LD_LIBRARY_PATH is considered harmful by many people. The only valid use case for it outside of libcs that do not support RPATH ORIGIN or an equivalent is for software developers to temporarily test new versions of (compatible) libraries during development, by setting it on the exact command line that they launch their executable from.
As the "official tool" phrase have been removed, I think a lot of the stress will dissipate. 
&gt;There's a big difference between criticism and constructive criticism. Isn't that like saying there's a big difference between colors and blue? Maybe you mean between destructive criticism and constructive criticism.
Literally the *only* system libraries the Anaconda Distribution links to is the X11 stack (for reasons of wanting people's expensive hardware to be exploited fully, conda-forge provide their own X11 if you want that option, but please don't mix Anaconda Distribution with conda-forge *in the same environment*). The X11 stack is used by a very small minority of our packages (ok some important ones like matplotlib but you can set the TK backend if you wish) and we make sure that Anaconda Distribution's X11 stack works from CentOS6 upwards. Your criticisms all seem to be very out of date as these are all the things that our team has fixed in the last 8 months. In order to ensure that undeclared system libraries never leak into our builds (and for many other reasons besides around security, performance and modern C/C++ language features) we provide our own toolchains that *do not even look* in /usr, ever. Of course if you decide to use your own compilers then we're not in charge of that. I'd recommend you look at some modern conda-build 3 recipes to see how things should be done. One of my favourites is XGBoost since it covers generating the core C++ program and DSO, an R and a Python package both of which share the same core DSO all from a single recipe which works on all 3 main OSes: https://github.com/AnacondaRecipes/xgboost-feedstock/blob/master/recipe/meta.yaml I do recall when I first started working at Anaconda that you ran into some problems on IRKernel due to a change that we were forced to make in our solver. I wonder if you wouldn't consider looking at AD again? I hope you like the improvements made since.
&gt; Transactions, ACID, atomicity That's like saying atm machine 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [AnacondaRecipes/xgboost-feedstock/.../**meta.yaml** (master → 72f4152)](https://github.com/AnacondaRecipes/xgboost-feedstock/blob/72f4152fe7fd42af5967f722777866de5a422c15/recipe/meta.yaml) ---- 
Well, pipenv.org apparently no longer advertises itself as the officially recommended python packaging tool from python.org: https://web.archive.org/web/20180228194710/https://docs.pipenv.org/ https://docs.pipenv.org/
And then you go and post this ... https://twitter.com/dstufft/status/997973816444891139
Right, slight rewording https://github.com/pypa/pipenv/pull/2194
The biggest bad in my opinion? The standard is incomplete and unfinished yet advocated now. Because of this it is being touted around like a godsend in dependency management, but it avoids the new pyproject.toml standard and, worst of all, *pip* does not support *Pipfiles*. That is a fundamental flaw. There are other bugs with pipenv itself, but as I mentioned many times I am fine with all of that. I am simply not fine with how he acts about his package. I can fully understand not implementing a Pipfile layer into pip until the standard is finalized. As well as understand that Kenneth has no control over this. But it is being treated and advocated for as if it is already complete. People can not install dependencies from packages being distributed with Pipfiles, because only pipenv can read Pipfiles. Basically, a global standard was made for a global tool and system. Yet this global system and tool do not support this standard yet, only a separate tool does. I shouldn't be forced to use pipenv to install libraries that only create Pipfiles, because while the library may be created with pipenv, it doesn't mean the dependent requires it. Some dependents *cannot* work with virtual environments because they either act on the system outside the dependent's scope or are made as packaged tools in debian style binaries or some other form of windows binary. And currently only pipenv is advocating the unfinished pipfile standard at full force. GPL != OSS. GPL is a licensing standard for some open source software. OSS is both a definition for libraries and software, as well as the community around these pieces of software. And the way Kenneth is fostering them is shit, and he is doing it only to be "python famous". Please reread the section that you quoted in regards to childishness. I said him not wanting to fix things *isn't* childish, not that it is. Rather the way he shuts down the discussion of fixing things or implementing features is. It is more than fine to say he doesn't want to do something or thinks it is out of scope. But according to him he does not want feedback at all unless he explicitly asks for it. This isn't how this fucking works. He will get feedback on the software he puts out and advocates. It's like saying people shouldn't bring up issues that Edge drains the battery faster on avergae on laptops even though Microsoft advocates it as better on battery life. Are we just supposed to be sheep and not talk about the issue? Kenneth is not our lord and savior yet this is how he acts, he has put himself in that position ever since making requests. Requests is a great tool. So is pipenv. But Kenneth is under nothing but a position of childish, vindictive narcissism. He can have whatever drives he wants. But the drives he has have led him astray from fostering a welcoming tool and community, and he makes tweets shitting on all those that bring this up on his twitter, where his followers are blind sheep. I'd bet if any one of them saw the way he actually acts on github or on reddit, they would all drop support for him in an instant. Instead he only tweets the threads where people are being "mean" to him, hiding all criticism of the packages and standards he advocates, never showing the fact that he is extremely dickish both here and on github. Some closed source languages communities can be worse. That's *why* OSS exists as more than a software standard. But Kenneth is doing nothing but again, being a childish, vindictive, narcissistic dick who blames all his misdoings on his mental health, even though all this does is promote horrible behavior, provide a cop out for him, and lessens the value of the view of mental health issues as a whole. Him constantly playing the bipolar card is fucking disgusting, because it isn't a card for consistent, systematic, long term behavior. Also, perfectly fine to blame his "every change turns to a release" manic episode. But it does *not* excuse any of the slew of problems that brings up in terms of code quality and maintenance, as well as the end user having to debug every little thing. There are extremely easy steps to avoid this, but he chose to never put them into place, because again, he is a childish, vindictive, narcissistic dick who blames all his misdoings on his mental health, which is nothing more than a shitty cop out.
If you are about to ask a question, please consider r/learnpython
thanks guys for all of your help !
Can you elaborate on the spec being bad? I haven't really followed the type annotation matter as much as I should have. I mean I like the concept, but do not know why it is a bad spec (besides the whole var: type notation for variables which will cause another wart when debugging single item dict initialization).
Bullshit. pipenv is touted like [an official option still, having an entire section header dedicated to it](https://packaging.python.org/tutorials/managing-dependencies/) while other tools have nothing more but mentions at the end.
Same question here, the official API libraries work well for me, why use this one?
It has a section because it's packaging.python.org's recommendation for people who are trying to manage application dependencies. The guide is not going to document every tool, particularly not ones that it thinks fits into overall narrative about how the packaging landscape does and should work. The guide then goes out of it's way to mention that if pipenv doesn't work for you, here are some other tools that maybe do. This pretty explicitly states that you're not required to use it, and it is just as valid to use another tool. This is a guide that is focused primarily on beginners, or people who don't yet know enough about what they're trying to do to make a fully informed decision, or to even know on what axis they personally want to make a decision on. So it tries to recommend a reasonable solution to the problem as the "if you have no idea what you want, try this out" solution. If the only solution you're willing to accept is one that has every tool in existence documented equally or zero tools documented equally, then I'm sorry but you're not going to get any satisfaction. The guide is going to continue to make recommendations based upon the contributor's to the guide's best ideas as to what fits into that problem space best. And by all means, if you think pipenv is the *wrong* recommendation to make, feel free to suggest a different one. I would suggest if you're going to do that, to go through the discussion on the issue tracker for packaging.python.org for when pipenv originally got recommended, so that you understand why it was recommended, then make your proposal for what you think better fits into that problem space.
come on... his tweet is incredibly vague, and you wouldn't know that it's discussing /r/python, or more specifically, this thread.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
If I'm attempting to get people to raid a thread, I'm not very good at it, since I didn't mention the thread, or what it was about, or anything about it besides it was on Reddit, and when asked what thread I didn't respond. One person even thought I was talking about Net Neutrality threads. Y'all aren't important enough in my day for me to bother trying to rile people up. I'll attempt to explain the situation, you can decide to continue to be angry or not. I hope that you'll see that the thing you're angry at isn't worth being angry over, but if you don't, then it doesn't bother me, go forth and be angry.
I like useful signatures, so I avoid *(kw)args unless I have a situation with unknown (kw)args. In that case I still name all the known ones.
It can absolutely not be used to document every tool, but the manner in which the page is presented provides bias torwards pipenv rather than other tools which are just as good, beginner or not. I am not saying that every tool needs to he documented, but that the ones that *are* documented be documented equally. As in, the tools in the mention should be rearranged such that they are sorted either by initial release date or simply alphabetically, and should have equal documentation weight. Whether it be a bulleted list, table, sections for each, or whatever the documenter chooses. I don't have "better" recommendations because that isn't my point. All tools that are added (and not every tool need to be added) should be represented equally. That is all. But in the current document pipenv is placed first with it's own section while everything else is in a "more advanced / see also" header. This objectively provides bias torwards pipenv and against everything else, making them seem explicitly more difficult, when they are not necessarily. There are cons to pipenv that are simply not mentioned, and without those cons, and equal representation of all the listed tools, it puts people into a psychological trap. I love the tool and concept. I hate the community fostered around it and the "I don't give a shit gtfo" nature of the author. Yet pipenv is still given positive bias, and I feel like the bias is given merely because Kenneth is a man of Python fame, as he himself calls it, since requests, and is currently a PSF board member with PyPA members contributing to his project. The bias is clear, and denying it isn't helping anything.
The combination of his tweet and Kenneth's about his letter and google hangout make it clear.
Pycharm debugger not working on my system (win 10). I get the same issue reported [here](https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000014004-Pycharm-debugger-not-working).
It is incredibly clear what you are talking about, as Kenneth explicitly mentioned this sub and his letter and google hangout. It is very reasonable to know people who follow a PSF member will also follow a PyPA member. Whether or not you knew you added fuel to the fire, you did.
I'm getting a better idea of what you're after, but it would still help to know something about the content of your data. At least a typical set of field names and which fields are used for comparison. I understand if its specific to the nature of your company and possibly sensitive, but please try to give me a generic idea of what your columns are, what columns would be compared on, which ones differ between files, etc. Or try to come up with a comparable example so we have something a little more specific to talk about. But I can picture one kind of app for a start. With Tkinter and the TTK library, you can use a TTK notebook to make a tab\-based app. The first type of tab would allow you to open a source file and try to detect its type \(fixed, delimited\). It could show the data in a TTK treeview, and allow you to overlay edit controls where someone could type in field names or pick from dropdowns, then select which the comparison columns and the sort columns would be. Then open another such tab and set up another file. The schemas could be saved as a text or JSON files to be reused for another input file. The program could have a menu or tool bar with options like "open file A", "open file B", "compare","generate report", etc. "save comparison profile", "load profile", and so on. Clicking "compare" would open a third tab to show the comparison results. In this treeview, rows could have background colors to show matching data, changed data, unique on left or right, similar to file comparison programs like BeyondCompare. Then click "generate" to output a PDF file or a web page. There certainly would be a lot of steps to creating an app like this, but I have done many of these types of things in apps over the years \(many in Delphi in the old days, and newer ones in Python\) and know that Python and its set of tools could do it. One first feasibility test you could do would be to create a simple Tkinter app with just a treeview and see if you can load one of your huge data files into it. It would test if its practical to try to do this, and would give you a taste of working with Tkinter and TTK to see if you even like that approach. They are a much maligned but very powerful GUI platform which takes a little getting used to like any of them do.
My Grandfather smoked his whole life. I was about 10 years old when my mother said to him, 'If you ever want to see your grandchildren graduate, you have to stop immediately.'. Tears welled up in his eyes when he realized what exactly was at stake. He gave it up immediately. Three years later he died of lung cancer. It was really sad and destroyed me. My mother said to me- 'Don't ever smoke. Please don't put your family through what your Grandfather put us through." I agreed. At 28, I have never touched a cigarette. I must say, I feel a very slight sense of regret for never having done it, because your post gave me cancer anyway.
Can some one sum it up for us, less knowledgeable of Python inner circle? Just a readers digest version :))
Automatic ATM Machine 
&gt; It can absolutely not be used to document every tool, but the manner in which the page is presented provides bias torwards pipenv rather than other tools which are just as good, beginner or not. Oh sure, there are a lot of reasonably good tools out there, but one of the worst things you can do to a beginner is out of the gate require them to make a decision about what tool they want to use, when they don't yet have the context to understand the nuances of why one tool may work better or worse for them. Often times the real answer is *any* of these tools will work perfectly fine for you. Since this is beginner focused documentation, we have to make a choice to let them move on and do the thing they're actually trying to do. That's just good documentation practices (and many documents do this! See for example every document that suggests you ``pip install`` something, instead of the myriad of other ways you could install their project). This document has a bias yes, it is purposeful and deliberate in order to aid the target audience. It then attempts to apply some counterweight to that bias by presenting alternatives that the user may wish to explore instead, if this guide didn't satisfy their needs. Regardless of what tool is recommended there, it's not likely going to end up in a position where people reading it are asked to make a choice about which tool they want to learn. &gt; I feel like the bias is given merely because Kenneth is a man of Python fame, as he himself calls it, since requests, and is currently a PSF board member with PyPA members contributing to his project. I can certainly say it is not because he is "famous" nor because he is a PSF board member. The PyPA member thing is a bit more complex-- pipenv is under the PyPA umbrella so quite literally everyone who maintains it is a PyPA member, but in reality it's more that the fact he has PyPA members contributing to it (before it was a PyPA project) and the reason it was included as the recommendation in the docs are for both the same reason-- some PyPA members felt it was a tool that solved that use case well, so they advocated for making it the recommendation and started contributing to it. As I mentioned above, the bias is entirely because in order to present a good, beginner focused documentation we need to help the beginner by making some choices for them while they get their bearings and are able or want to make those choices for themselves, and the guide currently has decided pipenv is the right choice for a general recommendation for that use case.
&gt; The PSF and the PyPA are two separate things Is that completely true? The PyPA pages, i.e. https://www.pypa.io/en/latest/future, include a request for donations to the PSF so they have some relationship.
you’re talking as if you think you knew what bipolar is, but you apparently don’t. mania doesn’t work that way. for most people it’s pretty much impossible to know you’re in an episode once you are.
i don’t, but that doesn’t prevent conda\-installed things from seeing and trying to use my system libraries – and failing if they expect an incompatible version
Is copypasta carcinogenic? Asking for a friend.
Yes, but you can't treat long term, systematic, childish, vindictive, narcissistic behavior as all occuring due to an episode every single time. Medicine exists. He takes it and claims it helps. To not seek medical help over his medicine is not working properly after the first time is fine. Second, third, fourth. But this happens way too often with Kenneth and to always brush it off as an episode does no one any good.
&gt;Your criticisms all seem to be very out of date as these are all the things that our team has fixed in the last 8 months. i didn’t know there were substantial changes in that timeframe. if you fixed all this from happening, i apologize!
wow, that techalchemy guy was acting like an asshole… kenneth’s reply was very classy though!
Tldr people have criticism of pipenv. Kenneth is taking it all personally and blaming mental health issues for all his misdoings and the way he acts in his communities, which is a cop out. People realize this bullshit and discuss here. It really is worth it to read the entire letter and this reddit thread before making a decision, because there is always some evil on all sides.
&gt; Oh sure, there are a lot of reasonably good tools out there, but one of the worst things you can do to a beginner is out of the gate require them to make a decision about what tool they want to use, when they don't yet have the context to understand the nuances of why one tool may work better or worse for them. Often times the real answer is *any* of these tools will work perfectly fine for you. Bullshit. We are grown ups. Explain the tools listed and we will easily make decisions. Beginner or not we deserve the full truth. As for the rest: There is no counterweight to the bias, or rather no meaningful counterweight. Beginners and those experienced alike are all to fall in the psychological trap that comes from the way the document is shown. Btw, didn't say he is famous because of PSF, I said he was famous since making requests. These are his own words, not mine. You're literally admitting to the bias and trying to justify that the bias is necessary, just and good. Sorry, that's never the case, especially with how the pipenv community is treated is peasants to the King Kenneth and his Maintainer knights. Not saying it is the right or wrong choice. But again with the way the bias presented, it is clearly nothing but marketing and "you're my friend so we'll put this up bro". A tool advocating an unfortunately incomplete standard should never have positive bias given to it.
I fixed that, from my reply above: &gt; though I should state that setting it will not break the correct execution of Anaconda Distribution in the future as conda-build 3 now prohibits `DT_RUNPATH` preferring the un-cooptable and transitive `DT_RPATH` That is Linux-specific of course but we also fixed it on macOS through carefully setting the `LC_DYLIB_LOAD` commands. On Windows all we have is `PATH`. `conda-build 3` audits and prevents any packages from being released to `AD` that load undeclared (see X11 stuff above) libs from `/usr`. It also prevents undeclared DSOs from transitive dependencies from being used in any package incase an update to the transitive dependency drops that DSO.
Yet another person loses my respect for their childish responses to criticism in one week. Have a good day, then.
Right but *what* decisions exactly. Again-- I'm practically blind to the spec, not to mention the bad parts in it.
Take your upvote. We need a new r/PythonDadJokes channel.
[Bye](https://i.imgur.com/3c4fxxC.gifv)
For about a year now, conda and virtualenv play nicely together, so long as, when you're using both together, you 'conda install virtualenv' rather than 'pip install virtualenv'. See [https://github.com/conda\-forge/staged\-recipes/issues/1139](https://github.com/conda-forge/staged-recipes/issues/1139), and [https://github.com/conda\-forge/staged\-recipes/pull/2394](https://github.com/conda-forge/staged-recipes/pull/2394) for the patches that made it work.
so why is this posted here? 
PIP stands for PIP Installs Packages ( am i doing this right? )
there are 2 links, complain when you can read pls
SO many people complaining about a stupid .exe :p yes this is 2018 windows programs get compiled to .exe :p the innocent dont know what a python is so we compile it for them, its not that difficult.. bad .exe are restricted because they change settings and stuff unless you run them as admin which is not needed in this case.. 2018 ppl complaining about .exe but downloading cracked .exe games...
Idk is copypasta carcinogenic? Asking for a friend.
You need kwargs whenever you use multiple inheritance. 
&gt; Although practicality beats purity. It's this line that I'm referring to, and it wins every time. $ python &gt;&gt;&gt; import this [PEP 20](https://www.python.org/dev/peps/pep-0020/): * Beautiful is better than ugly. * Explicit is better than implicit. * Simple is better than complex. * Complex is better than complicated. * Flat is better than nested. * Sparse is better than dense. * Readability counts. * Special cases aren't special enough to break the rules. * Although practicality beats purity. * Errors should never pass silently. * Unless explicitly silenced. * In the face of ambiguity, refuse the temptation to guess. * There should be one-- and preferably only one --obvious way to do it. * Although that way may not be obvious at first unless you're Dutch. * Now is better than never. * Although never is often better than *right* now. * If the implementation is hard to explain, it's a bad idea. * If the implementation is easy to explain, it may be a good idea. * Namespaces are one honking great idea -- let's do more of those! 
Not entirely true? [https://docs.python.org/2/library/simplehttpserver.html](https://docs.python.org/2/library/simplehttpserver.html) and [https://docs.python.org/3.6/library/http.server.html?highlight=http&amp;#37;20server#module\-http.server](https://docs.python.org/3.6/library/http.server.html?highlight=http%20server#module-http.server)
Apparantly I need to ask for your email, password and browser cookies before its ok to opensource .exes , this will be considered in the next patch..
Apparantly I need to ask for your email, password and browser cookies before its ok to opensource .exes , this will be considered in the next patch..
That's nary the point. This behavior isn't a one or few time thing. It is consistent and he has been made aware of such many, many times.
You might be interested in Birdseye: [https://github.com/alexmojaki/birdseye](https://github.com/alexmojaki/birdseye)
https://www.reddit.com/r/Python/comments/8kjv8x/comment/dz9dyv7?st=JHE8RGMP&amp;sh=085677f3
Just finished similar project. At first I tried placing a small magnet on the chain with sensor physically mounted on the opener. Bad idea \- the magnet kept falling. Ended up with this: [https://www.amazon.com/gp/product/B00V57QGRI/ref=oh\_aui\_detailpage\_o05\_s00?ie=UTF8&amp;psc=1](https://www.amazon.com/gp/product/B00V57QGRI/ref=oh_aui_detailpage_o05_s00?ie=UTF8&amp;psc=1). A bit expensive but very reliable and looks great. It also solved the open / close issues as the sensor is "on" when the door is 2" or less from the floor \- really closed. 
&gt; The one problem that I don't think PyPA has addressed, in any way, is the quite apparent lack of professionalism in the management of Pipenv. I don't use Pipenv, or Poetry, etc... I'm content for now with pew and pip. But I understand that Pipenv is an effort to pull the requirements of Python packaging ("aims to bring the best of all packaging worlds") under the purview of a single tool (correct me if I'm wrong). &gt; &gt; And people that have been at the forefront of adoption, who have presented real world use-cases, who have delved into the source of issues, are getting completely dismissed and ignored. This drama has spilled out into the greater Python social-verse, but from what I have seen, it has existed from some time on the Pipenv issue tracker. For better or worse, the PyPA is basically just a loose collective of tools that have something to do with packaging in Python and who asked to be a PyPA project. We really only have one rule, that projects have to adopt and follow our CoC, everything else is up to the individual project. I'm not actually a user or contributor to pipenv, so I've had no reason to participate in the issue tracker, etc there-- however knowing the folks involved I suspect there may be some miscommunication going on. That being said! If folks feel like there is a good reason, whatever that reason is, for a different project to be recommended instead of pipenv (or really not just for pipenv, that goes for any of the tools that are currently recommended) I would suggest either opening an issue on the [packaging.python.org github repository](https://github.com/pypa/python-packaging-user-guide) or if you don't feel comfortable doing that for any reason, you can email me at donald@python.org and I can connect you with the right people and/or filter your suggestions through. As I mentioned elsewhere, I highly suggest doing the research on the discussion on why the existing tool is currently being recommended, to make sure you're understanding why it is before advocating for a change. The cool thing about software and documentation is it all mutable, so if we come up with a better way of doing something, we can change it.
I would stab myself with a fork if I had to use UML again. Gah 
Oh, thanks! We won't disappoint. :-)
As I previously mentioned, so are pimples a disorder. The 'disorder' that is up for discussion is the one commonly known as bipolar or schizophrenia as it is now called. And the concluding sentence that you left out of your fact check which states "certain disorders", is the clue to what was being referred to.
And it is the #2 post on my front page... :/
bad humor belongs in /r/funny or alternatively /r/ProgrammerHumor 
&gt; Selenium may also protect the body against contaminants such as mercury, cadmium, and silver, help speed the elimination of cancer cells, and slow tumor growth. NOT TODAY, SATAN
&gt; but yeah it'd be cool to have a "cargo" Just so you know, this is what Poetry aims to be. Disclaimer: I am the author of Poetry :-)
What frameworks do you use?
Fair 
Ubelt is a library of utility and helper functions that I found useful when working on my thesis project. For my work, this package has been (almost) as indispensable as numpy. I've been a Python programmer for about 10 years, and this is my first attempt at really advertising one of my Python packages. I've been developing the code in ubelt for 3-4 years, and only in the last year have I really taken the time to separate out (what I consider) the good parts, test them, and organize them all into a single package. I encourage people to take a look, see if there is anything that seem useful, and give it a try. Currently ubelt is on version 0.2.0. I think the API is mostly ready for a 1.0 release, but before I do that, I'd like some feedback from the opensource community. Comments, issues, and PRs are welcome. 
Just replying here because this is the most recent comment and it happens to link mine: You wanna know what's really sad? Kenneth took all of this criticism and took it personally once again, shoving commits to master of pipenv, changing the readme to say the package / tool is horrendous. This is the work of a childish brat. In old to most recent order, * https://github.com/pypa/pipenv/commit/6d77e4a0551528d5d72d81e8a15da4722ad82f26 * https://github.com/pypa/pipenv/commit/1c956d37e6ad20babdb5021610b2ed2c9c4203f2 * https://github.com/pypa/pipenv/commit/e3c72e167d21b921bd3bd89d4217b04628919bb2 * https://github.com/pypa/pipenv/commit/5e8ed12cfd50760a836171ffe5420c36940ed020 * https://github.com/pypa/pipenv/commit/fe78628903948013e8687d1a3be9fd4da2b6bd3d * before finally changing it to be nice again https://github.com/pypa/pipenv/commit/47debed9a1c2a3649bef4d59a3f1cf01bf059522 This is simply sad, and he took what was expressed today and it is evident everything expressed was thrown out of his mind except what fits his narrative.
r/programmerhumor
Now zoom in and enhance "Pip" 
you’re a pussy 
I have done a chat app in JavaScript. Basically what I did was creating a publish-subscribe service using MQTT protocol. The solution was an overkill tbh. I’ve seen people use socketio for simpler chat apps. 
There is a new tool that does that called Poetry which might be worth a look. https://github.com/sdispater/poetry
Seriously. You admit here that communication has been lacking. You know that the frustration comes from that lack of communication. And then you have to go and ridicule people over *you* lack of communication. What a nice example of how to behave. 
Try looking at long polling. [Here's an example with Ajax.](http://blog.oddbit.com/2013/11/23/long-polling-with-ja/)
With +784 lines of code that is no longer virtualenv. Rather conda's fork of virtualenv, installable only using conda. A chicken and egg dilemma :) Another concern I have is while *conda*'s source code is fully open source, *miniconda* is not. Yes [a bash script is available (~56 MB with thousands of lines of encrypted lines!) ](https://conda.io/miniconda.html), but I can not find a source code which generates it. So miniconda is just free as in free beer.
There is a difference between agreeing our communication channels are not where they should be, and secretly plotting to have twitter followers raid a Reddit thread by making the vaguest possible comment about it. 
I think mostly the turn off of ZODB is very very specific vendor-lockin, (python object serialization that requires a zope library) whereas the other ones use a more generic/standard serialization schema that is implementable on many platforms. In terms of what datastores are now supposed to be for a blockchain/CAP theorem distributed ledger world, ACID isn't a thing anymore. From the OLAP side, I only ever care about the agreed-upon serialized history so I can (re)create the reporting narrative. With Time-of-Use EAFP patterns, as long as the object is "in memory" and locked, I only ever need my dbms to write the event log and that is really what a product like Mongo and/or Cassandra is really meant to provide. It's really interesting to see how ERP systems almost exclusively operate completely at a document transaction level (because at the end of the day we're all still 19th century bankers) but it's really still doing relational under the hood. One German vendor of such products is learning over the last few years that architecture can only go so far.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_redwolf-rw] [ML](https://www.reddit.com/r/u_RedWolf-RW/comments/8kqvft/ml/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://www.reddit.com/r/u_RedWolf-RW/comments/8kqvft/ml/) - Previous text "ML" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Could you please try and keep track of who said what? Blaming me for what others are saying isn't a good example of mad communication skills.
I'm on it.
Actually we are on the thread where I express concern about the difference between what you say here and on Twitter.
I think people just are not seeing the source code in the other repo because they don't expect there to be two repos for the source and binaries. It would make more sense to have the binaries be github "releases" in the source repo. https://help.github.com/articles/creating-releases/
I was thinking of user sockets I don't know if it will scale when app gets larger
&gt; Explain the tools listed and we will easily make decisions. Beginner or not we deserve the full truth. If your beginner's guide consists of "here are three dozen things which all do different variations of this task, be a grown-up and go research them and pick one yourself", it's not going to succeed very well. To go back to the web-framework analogy I've used in another of these threads: even in the old days when people used to argue endlessly about whether swappable components were the most vital thing for a web framework, the popular swappable frameworks still had recommended default component choices to let you hit the ground running. They didn't just say "here are all the ORMs and all the template languages and all the form libraries ever written, be a grown-up and go pick one of each".
There is another way to handle them. Let me see if I can find it
&gt; You must actually execute setup.py to determine package dependencies. This is close to, but not *quite* true. While it is incredibly *common* to use `install_requires` in `setup.py`, it is also possible to set it in the `[options]` section of a `setup.cfg` file, and it will be picked up correctly by `setup.py` (the full order of operations is: arguments passed explicitly on command line override arguments specified in `setup.py` which override options in `setup.cfg`). From there, you can use things like the `configparser` module in the Python standard library to inspect the dependencies.
I've done something kinda similar to scrape Facebook pages without their API and what I did was just get the page via http and then parse it with beautiful soup and find what I was interested in, then I used CSS tags and htms attributes to get it automatically If you are interested I can post the script's GitHub link
Except these frameworks let people know that there are other options and have equal representation documentation wise. The documentation for PyPA does not, and only briefly mentions these alternatives.
https://github.com/MorenK1/telegram-facebook-bot Also if you get some good results please contact me, I would be quite interested in something like it
Although that way may not be obvious at first unless you're using a dutch oven
&gt; have equal representation documentation wise I think you should actually check on that before making that assertion.
PIL allowed a bare `import Image`, the library's submodules would be available as top-level libraries. That's what Pillow does not support anymore. 
Yeah. This. Destructive: "Your software sucks and nobody should use it. Decisions A,B,C were bad decisions. The software made me angry." Constructive: "I think the software should have functionality X,Y,Z for it to get wider adoption. By endorsing this now, new users will struggle with [thing]. I ran into behaviour A and I expected behaviour B. I found that this other tool works better for such and such workflow."
That’s not a web framework, that’s a basic utility webserver. I’m not 100% sure about dates but i believe it predates django, flask, cherrypy, turbogears, mod_python and any other web framework you’ve ever heard of.
I have. Of the tools mentioned, their documentation is given in equal weight.
gah :) Sorry, got my packages mixed up. Replace tornado with twisted.
Please post questions like this in /r/learnpython.
Which one of the old ones you recommend?
Interesting. Is this your original model?
Except the majority of the criticism against pipenv *was* presented in the constructive way. And Kenneth's response was "I don't want your feedback", even to the constructive people.
And for other people who are curious about what this approach is called, it is [Cellular Automata](https://en.wikipedia.org/wiki/Cellular_automaton). This was really hyped up in the 1980s as a potential precursor to AI, just like what machine learning is for us today. I am curious what model this simulation uses though.
**Cellular automaton** A cellular automaton (pl. cellular automata, abbrev. CA) is a discrete model studied in computer science, mathematics, physics, complexity science, theoretical biology and microstructure modeling. Cellular automata are also called cellular spaces, tessellation automata, homogeneous structures, cellular structures, tessellation structures, and iterative arrays. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Username checks out. 
&gt; source That patch to virtualenv does nothing more than copy any necessary shared libraries referenced by the main Python executable. It does *not* IMHO qualify it as a fork. We will patch such bugs where-ever we find them and will submit them upstream when we think they'll be well received (in this case I made a call that it wouldn't be and they code in question is in active development and use in conda-build 3 so that stuff isn't the latest and greatest either). For full disclosure, now-a-days (since AD5) that patch does nothing since our Python interpreters are statically linked so there's no DSO to be copied. &gt; Another concern I have is while conda's source code is fully open source, miniconda is not. Yes a bash script is available (~56 MB with thousands of lines of encrypted lines!) That 56MB of encrypted files are .bz2, not exactly the most cutting edge of encryption. Miniconda is enitrely open source. &gt; but I can not find a source code which generates it. Maybe you didn't look very well? Here you go: https://github.com/conda/constructor &gt; So miniconda is just free as in free beer. Incorrect.
Six and more.itertools 
I put it up that way so my not programming friends wouldnt need a manual to download the .exe , i was glad that github made it so easy to do it xd
Looks like there's a bit of a language barrier
Bold rarely looks good for code, IMHO. But this is bikeshedding to the extreme, so I don't really want to care about it either way.
This was the very first program that worked, i think i tested it 3 times for a few minutes and then decided to tape it before i crashed everything or ruined the program with some stupid rebalances( and i olmost became homeless). The github .py code is a week after the first succesfull test, to make it readable and accesible for other friends/people I made a second vid with my personal version, this version i made into .exe , not .py cause there is like really good stuff in my version that im not yet ready to share, and not everything is enabled in the .exe :p
That takes me back... I was obsessed with CA and related concepts as a teenager. Writing different CA and ALife implementations was a large part of my "10K hours" programming.
Thanks, I was ready to roll my eyes thinking "oh great, yet another 'revolutionary' database".
Like we needed another db... 
You can use of lots of example of languages with sane design for this argument. Just not JS. JS has terrible scoping, automatic ";" insertion, no namespace or imports that works everywhere, a schizophreniac this, no unified looping API, an anorexic stdlib, heterogenous error handling, best guess automatic type casting, one object to do every things (array/object/mapping/sets...), etc. The language is so badly design that the most popular projects in JS are tools to not write in JS (JSX, TypeScript, Cofeescript, babel, etc). Also the first thing you do when learning JS is learning the things you should avoid in the language. One of the most famous book on JS is __dedicated__ to that (JS, the good parts). So please, use Ruby, Lisp, Rust, Nim, haskell, whatever to compare to Python. But not something that only exists because of an accidental monopoly of the most popular plateform of the planet. Also: *args and **kwargs are basically used where you would use arguments or apply in JS, but in a clearer way.
All that sounds pretty awesome! I'll stop spreading my FUD 😉
Text classification with sklearn \(naive bayes\) and NLTK: [https://towardsdatascience.com/machine\-learning\-nlp\-text\-classification\-using\-scikit\-learn\-python\-and\-nltk\-c52b92a7c73a](https://towardsdatascience.com/machine-learning-nlp-text-classification-using-scikit-learn-python-and-nltk-c52b92a7c73a) Text classification with Keras \(CNN\): [https://richliao.github.io/supervised/classification/2016/11/26/textclassifier\-convolutional/](https://richliao.github.io/supervised/classification/2016/11/26/textclassifier-convolutional/) A more difficult but good intro to dealing with a real dataset: [https://cloud.google.com/blog/big\-data/2017/10/intro\-to\-text\-classification\-with\-keras\-automatically\-tagging\-stack\-overflow\-posts](https://cloud.google.com/blog/big-data/2017/10/intro-to-text-classification-with-keras-automatically-tagging-stack-overflow-posts) Using recurrent neural networks \(RNN\): [https://machinelearningmastery.com/sequence\-classification\-lstm\-recurrent\-neural\-networks\-python\-keras/](https://machinelearningmastery.com/sequence-classification-lstm-recurrent-neural-networks-python-keras/)
Hey, thanks so much! 
I have been a critic of Kenneth lately, although never disrespectfully, as I use massively requests and pipenv. I even had for some cold disagrements over github with him during the last past years. But this letter has a high level of maturity, and given the work he did, the pressure he is under and the reaction to it, I have just hats to tip to the guy right now. (But damn it, pipenv still recreates virtualenv everytime I'm not in the proper directory. I'm must have 50 half aborted venv in my .local dir now)
When you are in an episode, you will never find the will to solve the problem. And when you are on a high, you don't feel the need to solve anything. By definition a manic can hardly solve stuff by themself. Source: got a friends of mine I get out of psychatric hospital or top of bridges once in a while.
Thanks for that comment. I find many fault in pipenv, but being aggressive is not a solution.
Conda is a worthy addition to scientific Python stack, no doubt about it. May I suggest a few things: * Please write a one page write up on how to generate the miniconda installer, so people know about it, and find it. Writing docs are quite important if you want people to know about it. * Something technical: I just used constructor. Noticed that you import `ruamel_yaml`. This package is now renamed as `ruamel.yaml`.
You would use it if you have a lot of graph like data.
The TimerIt context manager looks really handy! 
Dynamic schemas just lead to an implicit schema (by how the code uses it) that is defined nowhere and leads to a billion bugs down the line when changes to that implicit schema happen. Plus you have to write a shit load of `if attribute` checks all over the place. Thanks but no thanks.
It is a known limitation, and not considered a bug. See (here)[https://bugs.python.org/issue20622] for more information.
&gt; Please write a one page write up on how to generate the miniconda I will not do this. I do software packaging, not development. &gt; Something technical: I just used constructor. Noticed that you import ruamel_yaml. This package is now renamed as ruamel.yaml If you want to bootstrap a new custom `Miniconda-a-like` then you need to do it from `Miniconda`. We've renamed some packages like `raumel_yaml`, mostly for historical reasons but I don't know the full details. Either way, I will also not be looking to address this any time soon.
just set the PYTHONPATH, or append it to sys.path
I personally down-voted you for the out-of-date information :-) Not sure that's good reddit etiquette though, happy to remove my downvote if you prefer.
Genuine question, this new db flaunts the following features in its readme: &gt;EdgeDB features: &gt; &gt; strict, strongly typed schema; powerful and expressive query language; built-in support for schema migrations; native GraphQL support; PostgreSQL as the foundation. Got a currently existing database alternative that also offers these features? 
Can someone ELI5 what the use-case for this is? I'm not a database guy, I've only used SQLite a few times, that's it. I read the markdown and everything here but what I didn't see was a real-world use-case.
I try to automate working on multiple projects by having a "workon" script that can be called with the name of the project as an argument. It then cds to the project folder, pulls from repo, activates the conda environment, and starts pycharm in the current folder. It is a pity that I could not find a way to inform pycharm from the command line to use the current environment interpreter automatically so that i can debug from within pycharm as you have described. Instead I need to do it manually. 
I think I'm having this same issue, how I found this post. Doing work on a corporate computer and having issues even getting pip to work. Could this proxy thing be a factor? 
`more.itertools` looks interesting, there is certainly some overlap in these libraries that might be better consolidated there. This library uses `six` and I believe the functionality between it and `ubelt` is almost entirely orthogonal. That being said I do notice that I have PY2 / PY3 defined in `util_platform`, and they probably should be using the `six` variant and not exposed on the top-level API. Lastly, where do you see 2.6 support? That is definitely not supported (I'm tempted to even drop 2.7 support). 
Are you going to [write a GUI interface with Visual Basic](https://youtu.be/hkDD03yeLnU) to do it?
Probably human checks
The is Reddit. Reddit is not a service that is provided in any way by the PSF, so the PSF has no jurisdiction whatsoever here. The moderation team of the subreddit are responsible for moderating the sub to the standard they have decided upon. 
If you were super keen on keeping up on what exactly is happening on the bleeding edge of packaging AFAIK you'd do best going to #pypa and #pypa-dev on Freenode IRC
&gt; It's built on top of an RDBMS (forcing me to use Postgres) so I don't know why I would pick this over SQLAlchemy which can already do everything and queries are written using basic Python object reference semantics Glad SQLAlchemy works for you! Not all SQL queries are possible to express with Python objects though, so sometimes you have to write SQL. &gt; Yes SQLA polymorphism is a bit kludgy, but IMO that is an acceptable price to pay for maintaining full underlying schema reflection support. EdgeDB is fully introspectable and our Python driver will expose schema types as Python classes so that you can build queries with them. &gt; does it even tablefunc to generate a connectby() query which is the mainstay of hierarchical RDBMS schema traversal? There's nothing special about connectby; it's trivial to implement it with recursive queries, which EdgeQL will support soon. &gt; Finally, sorry it's 2018 and fixed schemas are silly, especially in a hierarchical document db world. The only schema you need are defining key connectivities and you can probably do this just by walking the MRO. Not everybody likes schemaless DBs or has an adequate use case for them.
Selenium 
Would love to go, but already have something else... Hoping there will be a #3 :)
* strict, strongly typed schema - any relational database other than SQLite * powerful and expressive query language - any relational database * built-in support for schema migrations - any relational database other than SQLite * native GraphQL support - Probably not native, [heres](https://www.graphile.org/postgraphile/) an extension for Postgresql * PostgreSQL as the foundation - Postgresql (as well as Amazon Redshift)
Check [this](https://stackoverflow.com/a/37219624/5645906) out. I think it may be a solution.
Actually, I have seen many reasonably specific complaints stated. For instance from those who had used pipenv, found a bug and was subsequently turned off by a flippant answer to their bug report. But yes, we're just the mad people from Reddit, so why care about the substance. It's much more comfortable to have a way to ridicule everyone :( 
&gt; * built-in support for schema migrations; &gt; * native GraphQL support; I just want to say that having both of these features have piqued my interest in this project. Ever since my team and I have found graphql we have been in love with it. I am glad to see others in the python community have embraced it like we have. 
&gt; built-in support for schema migrations - any relational database other than SQLite How is this implemented in those relational databases? I've only worked with mariadb and postgres and had to use tools like alembic to manage migrations for me.
Have you tried building a [virtual environment](https://virtualenv.pypa.io/en/stable/userguide/) and installing stuff there instead? 
Have a look at [Kivy](https://kivy.org/), it's supposed to be a cross\-platform GUI framework.
Yes, very. PyQt is great, and you have tons of other options too. 
Here's how pip does vendoring: https://github.com/pypa/pip/blob/master/src/pip/_internal/download.py#L15
Ha, I don't really care. It was an honest mistake since conda used to be like that, but I should have updated my knowledge before bashing it
I made an automated anime+sub ripper for a specific site a while back. I leveraged calls to youtube-dl for ripping, handbrake CLI for optimizing size/quality, and mkvmerge to shove the subs into the file along with some code to font the ASS subs how I like them. YTDL is pretty versatile and may work for your purposes. It downloads from a lot more than just YouTube. I’m not adverse to sharing my source code in private.
/r/learnpython
just run the editor with the same pythonpath set, it'll work just like virtualenvs
PyQt is GPL, true, but Qt and PySide are LGPL, meaning they can be used for free in commercial projects, as long as any modifications you make to Qt itself are released as LGPL. 
Yeah, my first thought was to use virtualenv to create a project or personal sandbox essentially so you can use whatever version of python and associated libraries you need
&gt; drop python26 compat at least Do not do this. Plenty of people are stuck on 2.6 for reasons they have no control over.
Agreed. But none of what you said directly answered any of my questions or helped me understand why a Code of Conduct asking people to be respectful, open and considerate is not practically enforceable in this subreddit.
setup.py always has the final say, it can configure and override whatever came from setup.cfg. Also most packages don't even have setup.cfg
Enforcing a CoC from an external party on Reddit isn't practical, because the standards of subreddits is to be in charge themselves. If you want to implement a specific moderation policy, you will need to get the [moderation team](https://www.reddit.com/message/compose?to=%2Fr%2FPython) in on it. 
It would be nice if the TL; DR was kept to raw facts and description, devoid of opinions and interpretations unless clearly labeled as such. Ijs
What do you mean by "name"?
omfg
Tkinter 
I'm not well versed in python on windows, but I think this might help or at least explain things better. When you run `import module_name` python looks to see if it can find the module in any path in your "python path" so all you really need to do is make sure you own something in your python path. To start, take a look at python -m site # shows you full list of paths python -m site --user-site # shoes you paths you should own because of the error you're getting, my guess is that you don't own anything on your python path. If you want to go about manipulating your python path manually (and permanently), take a look at https://stackoverflow.com/questions/3402168/permanently-add-a-directory-to-pythonpath but a more flexible solution is using something like virtualenv which creates a shell script to change your enviroment and even includes the following lines VIRTUAL_ENV="/home/ME/.virtualenvs/PROJECT" export VIRTUAL_ENV _OLD_VIRTUAL_PATH="$PATH" PATH="$VIRTUAL_ENV/bin:$PATH" export PATH if installing virtualenv isn't working because you don't have write permissions to ANY file in your python path. You can follow along with their "use locally from source" instructions which should let you run python virtualenv.py MY_PROJECT_NAME and then you can find the path it was installed in and run `./activate`. If worst comes to worst, you can always download the packages you want to install and make sure the "package" part of them is on your current path. Most packages will download like "xxx/xxx/thing_you_want.py" so you'll have to move the inner directory into the folder where you're running python.
https://www.tutorialspoint.com/How-to-get-a-variable-name-as-a-string-in-Python
 &gt;&gt;&gt; x = {'a': 1, 'b': 2} &gt;&gt;&gt; y = x['a'] &gt;&gt;&gt; print(y) 1
Well, I'm sorry you can do it automatically, but it depence on JetBrains and the features it provides
For what goal? You might be better off using time.now(). import time init_time = time.now() delta_time = time.now() - init_time You may just want to slightly decrease your 60 second delay to slightly less than 60s to account for overhead
I happily use pyqt in my work and have never felt that any major thing is missing, it is usually more than I need and it keeps pace with the development of Qt
I’m building a scheduler that does triggers something at a fixed time (Eg. 0500) I’m basically doing a If...else loop. The Waiting... is the Else part of the loop. I’m just thinking of just getting it to sleep and wake every 1 second instead of 60. The only reason I’m going 60 is to save some energy (by using less processing power?) and not have it continually stay alive every second but what is the difference between 60s and 1s? I could possibly go advanced and do it with Treading.Timer I guess but time slippage is gonna be there.
This is not a task for a python, this is a task for your OS. On Windows, there's a built in task scheduler, which is kinda awful but that's just how it is. In Linux/Ubuntu, you can use cron to do the same things. You can run cron via terminal and a simple text editor
The scheduler has to be user programmable so I guess I’m stuck with Python....
To create a quick an dirty GUI to play around: yes. To create a serious app that need to be reliable, maintained, etc.: no. 
And that's when your support group and doctors need to be stepping in to help, or you reach out after you realized what happened.
Can you give an example? Is there a specific library you're still stuck using because it hasn't been ported to 2.7 or 3?
Will give this a try! Thank you!
I find it easier to use html to activate a python program. Honestly if you take to the time to do so, do it!
No, not a library. Operational systems that are upgraded every decade or so (which really isn't that unreasonable). 2.6.6 is what they have and that's what I need to write against. Don't drop support for *anything* merely on a whim. Only when there's no other way to move forward.
Uhm... Okay... 2 more questions (likely my last) which I can only request you to answer directly. I read this as you saying that PSF's Code of Conduct can't be enforced because it's not a Code of Conduct by Reddit. Is that correct? If not, please take the time to explain to me where I went wrong on this. Also, are you saying there's no need to ensure that people stay respectful, open and considerate to others within this community and behaving otherwise is acceptable?
&gt; PyQT is not free when used commercial &gt; PyQt is GPL, true Wha?
I thought wxWidgets was exactly the solution to this. wxPython uses them and [looks fine to me](https://wxpython.org/pages/screenshots/index.html).
Use python to mod the crontab file?
It is GPL (2 or 3), so as long as your application license is compatible with GPL you're ok. 
Yes, just install them and set PYTHONPATH.
"Commercial" is a slightly wrong word here. PyQt can't be used in proprietary applications without a separate licensing agreement with Riverbank, thanks to GPL's virality. 
What I see going on through this whole conversation is mostly you (and a few others) beating down on someone with a mental disorder, and it seems to me you haven't taken into account that said person may not even be in control of their actions/response. And then you insert your opinion based on your interpretation (that what he's saying/doing is a "cop out" and what followed) into a TLDR, which unfairly colors the discussion for anyone else reading said TLDR. Now I'm not saying that KR can't do better in his interactions. But I'm also not saying he can. I'll leave that judgement to someone with expert knowledge of his disorder and familiarity with his condition. I've worked with people with mental disorders before so I know not to draw conclusions when I don't know what really is going below the surface. You may not have, and that's fine. Just saying is it would be nice to see more objectivity, especially in cases like this. For all you know your contributions to the discussion have only served to make his state of mind worse off. Also as someone who rarely visits Reddit (and this whole thing moved me so much that I ended up commenting), it is disturbing to see one person beating down on another and demanding something that may not be in that person's capabilities. IMO it's basically like a bully telling a small child with no lunch money to give that it's time they be beaten into a pulp for not having any lunch money. Put another way, you don't put a one legged person in a race with the fastest person alive and say they should keep up. Just my 2¢.
I feel like I have answered the same question numerous times. I find it highly inappropriate to let some external agency decide what is and what isn't in /r/Python. If you see something you think should change in the subreddit, go to the moderators. I do not decide on the moderation policy here. 
python 2.6 is end of life since 2013 - its 2018 now - would you use a car that was left to rot for half a decade? if you are on python 2.6 then duke it out with your vendor
I keep reading that modern tkinter can look native, but I’m yet to come across a tutorial on that. Do you know of one?
Im moving, so all my stuff is packed but I can explain it. I use an mqtt javascript program to call out to the different raspberry pis in my house. I use html and css to make it "pretty" only because im more comfortable with those languages
I recently came across toga (https://toga.readthedocs.io) which looks very promising. So yeah, Python can be good for creating GUI applications.
I've been saying this about "for humans" [for years](https://twitter.com/jmoiron/status/225688761403576320), but you've described my feelings as completely as I've seen them. I was inclined to give Kenneth the benefit of the doubt (I've seen this from young, talented, frustrated developers often; "why is X so unnecessarily difficult?"), but the desperate posturing of his [turgid written voice](http://blog.leica-camera.com/2013/09/05/kenneth-reitz-exploring-the-material-world-in-an-electronic-universe/) has convinced me that the egotistic reading of "for humans" is the right one. I've seen nothing since (including this letter) to persuade me otherwise.
Replying just to say I know a lot of businesses that still use 26 for legacy reasons, and they're probably never going to switch. I agree with /u/ThePidesOfMarch, keep backwards compatibility until there's no choice moving forward.
Thank you, jftuga, for voting on GitHubPermalinkBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
I still don't feel like you've answered any of the questions I asked. So, I guess our frequencies aren't matching here. None the less, thanks!
[This](https://i.imgur.com/pbkeOc7.png) is an app I made some months ago using Tkinter. [Here](https://gist.github.com/agentphantom/d1d2564e10ad83378efd0ab833d59dba) is the source code. Tkinter by itself doesn't have the modern look, you need to do this to achieve that effect: import tkinter as tk import tkinter.ttk as ttk ttk overrides tkinter default look. If you have any questions feel free to ask me.
&gt; The question here is an important one, but I am so disappointed with how negative this discussion has become. This is not the Python community that I'm proud to be a part of. We have to do better. Please don't concern troll, this kind of naked emotional manipulation is unworthy. 
I work on 5 to 10 different projects on a daily basis. Being able to switch, update, create and recreate virtualenvs quickly and conveniently is of paramount importance to me.
There are plenty of Python type checkers out there. Facebook has just freed a powerful one.
Chameleon
Whoops, sorry
Not really. An ideal GUI toolkit will have declarative markup, two way data binding, and will work across all platforms without jumping through a lot of hoops. The only GUI toolkit available to python users I can think of that ticks all those boxes is a web browser.
I agree with your first two sentences.
The way I solved this was to write a Cython module that used Linux real-time timers. You can program them to call a C callback function on a hard real time interval which drops a message into a queue, which can be consumed by Python code. Or you can use signals, it has a bunch of options. It still won't be 100% deterministic hard real time; don't trust it to insert the control rods. But should be fine for any non-safety function.
Oh well, I guess they only focused on the Windows side of things.
I tried that on Linux (GTK) and macOS and it looks nowhere close to native. 🤔 That’s why I asked if there’s a good tutorial on how to make good-looking apps using tkinter. I understand it’s possible. Just looking for a good reference.
Quite clever use of lshift. I wish Python let you define custom operators.
I did use Python for a news reader early on in my studies. I would say that while PyQt is good, you should look towards C or Java. Other library that can help in GUI is tkinter, but I found it too basic. 
Presented a solution looking for guidance; no context why the UI must be baked-in to the application. Therefore... I choose Buzz Light-year! Step 1: Build a fantastic web UI with Django and any popular JavaScript web framework Step 2: Use a browser to access the fantastic web UI. Step 3: profit! And/or build a (mobile) app to make it look like an application. 
wxWidgets is solution number one...it provides a cross platform GUI lib and it does a good job of making the widgets _look_ right, but the widgets and the overall UI don't _behave_ right. By t hat I mean that if the app is totally self-contained it works ok, but if the app is expected to act like native apps on the platform or interact with the platform, it falls short I think you're better off writing your core logic in Python but abstracting your UI logic anf then writing your UI logic to use a native lib/interface
It can as long as you release the source.
Thanks a lot for your good search skills.
Thanks for letting me know. I also researched about the same, but unfortunately I didn't have a macOS computer at hand to test the results. On the Tkinter docs from Python they said some improvements to the look and feel were added but didn't further elaborate on them. Since it looks ok on Windows I thought it would look fine in other OS. I also have a [wxPython](https://github.com/PhantomInsights/forhirehelper) codebase. This should look fine on macOS and Linux. If you wish you can try running it. You would only require to install one library: pip3 install wxpython --upgrade
It’s possible (see Kivy), but it’ll be easier and you’ll get better results if you learn and use the native tool chain instead.
By native you mean Java and kotlin right? 
Wxpython also does all those things
I like wxPython. It works great in all three of the major platforms. Qt for Python / PySide2 is also a good choice. If you require mobile than you will want to look at Kivy or Toga
How exactly do you combine another languages GUI with Python? If that were the case, I'd use C# before anything else. 
That issue is essentially solved with the release of PySide2, which under LGPL and almost completely API compatible with PyQt.
My first Python app was a Tkinter app and it worked great. 
Ah, yes. I forgot how unrealiable and unmaintained the official Dropbox client is.
Yes it is, but with some notes: you must know how to made a native bootstrap app to run your python code. Personally I'm using wxPython for my app made of python/c++ and go. But I would recommed to look at PySite/PyQt (and don't forget to check their licenses). p.s. an app I made is: [Django dev web unit](https://www.ddwu.com/en/) 
What OS? It's worth discussing how the OS splits CPU time. Even though Python has the GIL, it's still has to run in a single thread on an operating system with potentially hundreds of other threads. Here's how it works with Windows: &gt; After the sleep interval has passed, the thread is ready to run. If you specify 0 milliseconds, the thread will relinquish the remainder of its time slice but remain ready. *Note that a ready thread is not guaranteed to run immediately. Consequently, the thread may not run until some time after the sleep interval elapses.* For more information, see Scheduling Priorities. https://msdn.microsoft.com/en-us/library/windows/desktop/ms686298.aspx Also, &gt; The system treats all threads with the same priority as equal. The system assigns time slices in a round-robin fashion to all threads with the highest priority. If none of these threads are ready to run, the system assigns time slices in a round-robin fashion to all threads with the next highest priority. If a higher-priority thread becomes available to run, the system ceases to execute the lower-priority thread (without allowing it to finish using its time slice), and assigns a full time slice to the higher-priority thread. https://msdn.microsoft.com/en-us/library/windows/desktop/ms685100(v=vs.85).aspx This is Windows, though. It will differ based on operating systems. This isn't language specific, either. The Python docs say it as well: &gt; Also, the suspension time may be longer than requested by an arbitrary amount because of the scheduling of other activity in the system. https://docs.python.org/3/library/time.html#time.sleep
Isn't that the territory of Oracle vs Google re the JDK? 
Please post in our job sticky
Oh. I didn't combine languages. I made a news reader entirely in Python. First I used tkinter, then I moved onto PyQt. What I meant was, if you want to make a GUI application, C++ is better. Else, you can make one with Python, but it feels underhwelming (imo).
I for one would love to see a source translation of Java's Swing to Python, but then there's a license question as you don't get to choose new licenses for such things.
TKinter is decent
I do this for internal production apps at work. It works great, basically bottlepy exe running a localhost server interacting with a sqlserver db that's available on an internal network only. Throw some JavaScript in there and use gevent to make some websocket goodness to make the non techies feel like things are happening so fast.
Packard can generate for you uml diagram.
&gt; you end up with something that doesn’t really work or act like a native app on any platform. I'm not a Windows user, so this is just from glancing at other people's screens. Almost every application I see uses their own UI elements instead of the default theme. So I just said "Fuck it" and went with GTK+. Atleast it looks native on Linux and chose a decent theme for other platforms. I've had no complaints.
It doesn't just require you to release the source, it requires you to license \*your\* software under the GPL, too. So, if you don't want to use the GPL license, you can't release your software that uses PyQt, either.
No. This is a hollow Medium "article" stuffed with Udemy referral links. This is low rent SPAM.
My company uses it exclusively. We don't have any other 3rd party HTTP client libraries available to us. I really like `aiohttp`.
Is that not true with every language? 
When will the python drive be available?
&gt; I want to know if python is a good language for creating GUI applications. It could be depending on your needs. For example, [MusicBrainz Picard](https://picard.musicbrainz.org/static/img/picard_demo_500.png) is an open source cross-platform application, made with Python 3.5+ and PyQt and works great in Windows (looks pretty good, the icons may be a bit weird). Another example is Deluge, a open source, cross-platform BitTorrent client. It's made with Python 2.7 and GTK2 (I think), both pretty much "deprecated" and the GTK2 interface looks very old. But the application works fine (and it has for a long time). So you can do it, applications can be relatively *fast and efficient* (don't know exactly what you mean by that). The main issue is if you want it to look native. I think Qt looks the best in Windows, but not 100% native look.
Assume you had an environment where you never needed to serialize objects to disk - you could pass them via RPC or some other serialized messaging system to other parts of your program, and that you lock objects on write. Keeping in mind that we're in r/python, how would you architect your classes in the face of inheritance and composition? At any point in your program you can either inherit the class and extend it, but also you can take any instance and just `setattr` on it. Are you really going to only ever use `__slots__`? If the answer is no, then you're by definition schemaless. In the context of an ORM, the ORM may itself be constrained by the RDBMS but there is nothing that prevents someone from implementing "live" migrations via DDL statements depending on how much referential integrity is actually used in the DBMS and how the implementer wants to deal with that. The issue I have with something like EdgeDB is, for the lack of a better term, a bastardization. It tries to abstract bits of the RDBMS to make it supposedly easier to integrate with Python (except that you have to learn yet another expression language), but at the same time, the state you're leaving the RDBMS in is pushed down so far so that it's possible its schema has no relation (pun-unintentional) to the one you described in the program. I'm not sure that really solves the problem of "one schema to bind them all" and doesn't really give you an advantage over existing ORMs. Why would you need `if attribute` everywhere? Just catch or not catch a resulting exception. I think you're the second or third person in pythonic circles I've encountered in the last week or so who didn't quite get the idea of duck typing and EAFP. I'm not sure if there is surge of coders new to Python that are coming from the Java/C# world or something. I'm going to chalk it up to university graduation season.
Read docs. Docs say use virtualenv, or the new pipenv that was just announced at pycon.
You may also want to look into Flutter.
FWIW, if the last thing you learnt was oop, you're a long way from being considered a medium level python programmer in most organizations.
Check out this brilliant talk by Patrick Harrison. Got me started on my nlp stuff https://youtu.be/6zm9NC9uRkk
‘print(days[0])’
I KNEW it was something like that! Thank you so much, for some reason I thought it would read the list without specification as it was the only list, but hey this is programming. Thank you for such a quick response, you're awesome
[Godot](https://godotengine.org/) is an open source engine that's generally comparable to Unity in terms of features, and uses a very Python-like scripting language. You can also use Python proper through a plugin.
fyi, you can drop most of the if statements and just do something like if 1 &lt;= number &lt;= 7: print(days[number - 1]) else: print("bad input")
Ah, yes, should have known better than answering "is Python good for X" in the negative in a Python circle jerk sub.
&gt; widgets look right, It looks native. I'd argue that doesn't mean better though. Is this really a bad looking (window)[file:///C:/NASA/m4/formats/git/pyNastran/docs/html_docs/_build/html/_images/legend.png]? Most people can't even tell or when asked say it looks nicer. There are still themes for Windows 7 vs. 10 vs Mac vs. Linux, so they look native-ish. &gt; it provides a cross platform GUI lib ish. WxWidgets is not nearly as cross platform as Qt. Qt goes out of their way to be cross-platform. &gt; but the widgets and the overall UI don't behave right. Totally agree. It takes way more code with wx to make something intuitive.
Along with others' suggestions for using virtual environments, consider also using [anaconda environments](https://conda.io/docs/user-guide/tasks/manage-environments.html).
There are actually 6 active bindings that I know of. PyQt (which is close to PyQt4), PyQt4, PyQt4v2, PyQt5, PySide, and PySide2. PyQt makes the distinction, so I will too. Thankfully, there is qtpy, which is developed by the people who make Spyder that unifies all of them.
You might want to check out this excellent module: https://apscheduler.readthedocs.io/en/latest/
If it's good enough for Pinterest and Instagram, it's probably good enough for me.
This did the trick! Thank you!
Wow man this looks VERRY SIMILAR to unity this is pretty cool
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Are GUIs made with PyQt/PySide as fast as JavaFX GUIs ? 
&gt; present a lot of visual data very fast--like a CAD app That's actually not nearly as hard as you think. It's just a bag of triangles at the end of the day and with VTK, you can render with multithreads as well as create decimated models that are automatically shown when things get too intense. The real time is spent loading and building the mesh, which happens once. Thankfully that's a binary parser and a vectorized mesh creation step. If you have an ASCII file, then you should probably have a bit of C++, but even then, it's not that bad. &gt; data volume visualizer Same deal. Ironically, what really slows 3D renderers down is a lot of lines. They don't occlude (cover) anything, so you have to render them all. Then you have to draw them in the right order, so you get the right color at each pixel. With solids, you just render the surface, find all the faces that see the camera, and draw that subset.
Is it fast ?
I have used python and PyQt to make several GUI applications. I think it is very capable of creating nice GUI's . There are a lot of tutorials out there that explain how to do just about everything with PyQt and the StackOverflow community is pretty large as well. I have also used JavaFx quite a bit. I think that PyQt is easier to pick up and run with quickly and is probably a bit more robust as far as out of the box features. I prefer JavaFX for large complex projects and PyQt and python for smaller or quick projects. [Here is a project](https://github.com/MalloyDelacroix/DownloaderForReddit) on GitHub that I developed to download content from reddit using python and PyQt5. You can see what the GUI created with PyQt5 looks like as well as the code used to make it.
The static typing is what I found the most jarring. It's not something you can't work around - as someone said, there are enough linters and type checkers for silly typos etc. But the crux of it is that Python is way too expressive in a setting where you don't want fancy shenanigans and you want things to be as stable as possible. I know the reasons why our company chose Python for writing a desktop app, and they make sense on their own: * the rest of the codebase was Python - when you have around 6 million lines of code in (mostly) one language, it's good to keep things consistent in that regard. But at a more careful look (and after the initial versions), we realised that we were invoking the bulk of the codebase though HTTP anyway and so on. * it's easier to find / train people in Python than C++, and even harder to look for Qt specialists. But all the docs are C++, and any binding won't ever shake the design of the APIs with C++ in mind. When things got rough people had to know about pointers and memory management and look at the C++ source directly. * rapid prototyping is something that Python excels at - but I believe Qt is so well designed it would have been comparably quick There are other issues as well: * Both PySide and PyQt are solid bindings, but they lack the maturity that Qt itself has. We found and had to work around tricky bugs quite often. * The initial allure of not caring about memory and so on that Python provides most often held - but things can go *really* wrong when you have three mechanisms that can trip on each other: Python GC, Qt parenting, C++ destructors. We weren't investigating segfaults that often, but when we did it left us wondering why we weren't writing C++ directly. * As I said, one can use the (stellar) C++ docs, the bindings did a great job mapping those; but when you ran into issues, it was much harder to look for help. Interestingly enough, performance was *not* an issue. The bindings wrap the C++ objects effectively; besides, the code that is performance critical you probably wrap with Cython or something. And you probably don't care about marginal UI performance loss unless you're doing something like a graphics app. 
I would like to see this subreddit enforce existing policies before adopting new ones. Even though there is /r/learnpython there's still a majority of question posts dominating the front page. 
sorry about that, thanks for understanding though, in the future i will use LearnPython
Faster, in my experience, and yes, you can. 
Perfect. Thank You.
Also, you might want to actually use QML if you care about performance - it's GPU accelerated, and will be really fast and lightweight on any device modern enough to support OpenGL 3.
LGPL isn't really that hard to understand. 
Ok I note it. Can I make design GUi with PySide ? 
Make sure to look at version 4 aka phoenix 
Kivys thing is that it works on Android and doesn't use default widgets. Makes it great for full screen media apps, less so if you want a normal looking app.
To clarify, it's a cross-platform graphics/drawing toolkit, not reeeeally a "GUI" framework in the usual usage.
Toga is also part of a much bigger suite, https://pybee.org/.
What do you mean by "design GUI"?
Fluent Python.
Xamarin will give you c# on windows. Could use javafx too. Or electron. Or apple special sauce.
thanks for the tip! i knew there was some way around going about that, I didn't know that you could reference a variable when youre pulling from a list
Java has a good native look ui toolkit in the standard library - javafx
I really haven't used it enough to be able to say good or bad things about it. But I can say that it's interesting.
Fluent Python or Advanced Python 
It can but is slow as fuck and lacks a lot of standard widgets like non-bullshit pivot tables
Humm, I'm not sure what you mean by that. Can you elaborate?
By "design GUI" I mean a GUI which looks modern and good not a GUI with which you have the feeling that you work on windows XP
According to [this](https://docs.python.org/2/library/ttk.html) doc. You only require to import it as: import ttk
Qt will do its best to look native on all operating systems by default, so it'll use Windows 10 style controls on Windows 10, etc. You can also use a custom style - there's multiple options built in, and some third party open source style plugins available. Origin, Spotify, the AMD Radeon Settings app, OBS Studio, Telegram and many other apps use Qt, and you can see how different they all are. 
The production of this show must have an IT department. Someone please just ask a nerd if your 1337 speak needs a tweak!
Ok thank you, but everything you say about PyQt is also true for PySide, right ?
Yes. 
PyQt is good if you already know Qt well. There is not much document on it. For cross platform GUI apps, you'd better go with Java.
At what point does your code become a derivative of the LGPL library you linked to?
pip has a `--user` switch. So `pip install --user numpy` will install numpy for your user--not globally. Similarly `pip list` will show global (root/OS packages) and `pip list --user` will show your local packages for your user. But as others have said virtual environments are a really, really good option. You should only install packages globally or in your user space if they are ones you want to use very often regardless of the environment. 
If you're that worried, you can just get a startup license for free, and if you're making enough money to be ineligible for a startup license, you can probably afford $500 for a proper commercial license. 
python isn't, in any reasonable sense, even an option at all for android development, much less a good option. if you want to develop apps, you need to learn the android ecosystem. once you have a fair understanding, you might consider, depending on your needs, a cross-platform framework like react native or flutter if you want to do games, look at unity
Shit. PySide is not maintained since 2009
PySide has been picked up by the Qt Company, and PySide2, supporting Python 3 and Qt 5, will be coming out very soon as "Qt for Python".
I agree with your solution, but I wanted to refine your statement that: &gt; the call to sleep has some overhead It's not exactly that. The OP's code has two issues. * the time to do everything except sleeping is non-zero * the `time.sleep(x)` function is guaranteed to take at least `x` seconds, based on OS and processor scheduling The first one is under the OP's control. Of course it takes a tiny bit of time to process the `while` loop and the `# do stuff`, so of course saying `sleep(60)` on top of that will cause some drift. The second one is under the OS's control, much more than the python implementation of the `sleep(x)`function. The function basically tells the OS, "hey, don't schedule me for work for at least the next `x` seconds." There are many threads all vying for attention and being scheduled for work by the OS at any given time. So for those x seconds, the OS can ignore your thread. The OS may be busy doing something else at that exact time the x seconds expires. Finally the other thread(s) finish and the OS sees your thread is ready. By this time it may be significantly more than x seconds of actual unscheduled sleep time. So the actual time it is free to schedule your python process back in the rotation may be later than you expect.
Has anyone tried html as the GUI and python as a mini server?
I've used Kivy to make a mobile app in python. It dies mobile and desktop, although iOS support is practically nonexistent. I would use it for student projects like guis for scientific apps. I would not use it for commercial apps targeted towards making money. 
Have a look at MIT's App inventor approach to Android development. Programming is all done with blockly; a graphical dataflow based approach to programming. Might not be as flexible as native development, but sure is a lot easier
He actually encourages copy/pasting to reduce dependencies, if you want. Most people have their own util package or something similar, that they use anyway. Using a curated collection that you can pick and choose from seems perfect for these types of functions. 
I believe both macOS and iOS can use Objective-C and Swift as their language of choice for native apps.
I have been using tkinter to build a password manager and so far I have been really enjoying it
LGPL still doesn’t work for GPL because Python runs as an interpreter. Legally that means it runs in both the same memory space and the interpreter actually modifies the code. These are both violations of LGPL despite the fairly clear intention of the Pyside licensing choice.
Yes it's good for making GUI apps\(pyside2\). Not so good when it comes to distributing your app though and if you want to hide the sourcecode, include all dependencies etc which can be a PITA.
wrecking ball for a nail
Check out requests-html if that works for your use case
I think this is a wonderful idea.
There's nothing stopping any community from using the PSF code of conduct. I don't follow your logic.
I’m still relatively new to python/ML, but I have used NLTK and scikit learn (Naive Bates, SVM) for this purpose recently as part of a machine learning class I took. If you’re interested I have the full workflow documented on my GitHub. [Text Classification](https://github.com/alipphardt/dmi-deaths-classification/blob/master/README.md) 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [alipphardt/dmi-deaths-classification/.../**README.md** (master → 676cecb)](https://github.com/alipphardt/dmi-deaths-classification/blob/676cecb008ee79fd613c39edaa6e4cf87e968c37/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dzavzkz.)
For a start maybe a thousand 
 I would survey a number of presentations from the PyCon and PyData conferences. see http://pyvideo.org/speakers.html I recommend anything by Raymond Hettinger, Alex Martelli, Brandon Rhodes, David Beazley, and of course, Guido van Rossum.
[https://twitter.com/theavalkyrie/status/998067663116029952](https://twitter.com/theavalkyrie/status/998067663116029952) 
I haven't heard about pipenv. I'll have to check it out. Does it have any benefit over virtualenv?
To claim a community needs a Code of Conduct when it defends itself from baseless attack by a childish narcissist is nothing short of insane. If there was true toxicity there would be larger issues than one man being unable to take criticism. One man couldn't take criticism of his own software, and turned it into a crime against himself. This same one man and his PyPA buddies are in a defensive social justice circlejerk around him. This is not a problem with /r/Python. This is a problem that this one man brought upon himself in his quest for glory and vindictive, childish narcissism. As a community we need to call out bad behavior. And so we did. That is all that had occurred.
Well if you want to run a thousand chat rooms, then MQTT is a great idea. The question is how do you organize your chat rooms. As a list of 1000 chat rooms? Not a good idea. A basic principal in human factors is that there should be no more than 7 items in any one category. So to manage complexity, we humans love hierarchy. MQTT provides it. You can have separate branches for customer service, for IT, and for finance, all with proper security. What exactly are you building? How would you like to organize your chat rooms? I am happy to talk to you more about this if you wish. I am clozinski on Skype. 
Java GUI's are terrible though. 
Is Qt free to use? 
Interesting, what are you writing about exactly? Any place to read it. I'm trying to figure out how to use the ListViewIndexModel on create a custom SQLAlchemy binding, but can't figure it out. Do you know where I could find any examples/resources? 
The guys behind pipenv are vendoring pip and other things, but about staying sane i'm not sure. 
I agree, I think that some of it may indeed be better off as a standalone module. ProgIter, cmd, and Timerit are the main things that come to mind. That being said there is some merit to having a set of smaller lightweight functions accessible in one place, even if an end user won't use all of them. Think of the percentage of functions in numpy, scipy, or sklearn that a single project will actually use, yet it still seems worth it to install these packages, even if you wont use all of it. I do agree that its better for packages to be focused than just a hodgepodge of random functions and the kitchen sink (I've certainly been guilty of doing that in the past). 
And I remembered wrongly. It was just a fancy way to catch errors: https://github.com/aio-libs/aiosmtpd/blob/master/aiosmtpd/main.py#L143
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [aio-libs/aiosmtpd/.../**main.py#L143** (master → 23b743b)](https://github.com/aio-libs/aiosmtpd/blob/23b743be942ffd37f9c051c1f6efe0108ffd456d/aiosmtpd/main.py#L143) ---- 
Godot all the way my friend.
I write about wxPython and other python topics on my blog here - http://www.blog.pythonlibrary.org/ I haven't used that particular widget but I think I've done something kind of like that with ObjectListView 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
[Pretty Printed](https://www.youtube.com/watch?v=QVX-etwgvJ8&amp;list=PLXmMXHVSvS-DQfOsQdXkzEZyD0Vei7PKf) should keep you busy for awhile. You don't have to get into REST if you don't want to just yet. Use the official doc to guide you around and you should be set!
JavaFX is not at all native look. 
Cool. I didn't know I can set conditional breakpoints or do an events like On Termination / On Raise.
Just use pycharm if you have enough ram. There is nice debugger and code suggestions. And it feels sharp to write code in it.
I guess I should have been a bit more specific. When it comes to wxPython I usually write up tutorials on how to use certain widgets or solve certain types of problems. For example I wrote a tutorial on using wxPython with threads. Or wxPython and SQLAlchemy
This is pretty much why you shouldn't use reload. All reload does is reimport and rebind names in that one specific module. It doesn't update or remove any existing objects so you will still see references to old objects floating around in weird places.
The creation of /r/positivepython reminds me of https://www.youtube.com/watch?v=sXQkXXBqj_U.
maybe when im done learning c# and unity ill give it a try i was just wondering what else existed i know unity has a amazing asset store 
There's a theme for it.
Yeah I posted above requests-html, but also robobrowser if you're looking for other alternatives as well Selenium works too, but I feel it's a lot of extra heft if you don't need a testing framework
Nice project. It's a lot less code than I thought it would be. Can you plot the pendulum routes for guild highliners assuming 1 parsec/week? It would help me to get home. By the way, in my timeline the named tuple has been invented :-)
Robobrowser? Haven’t gotten across that one before. So it does everything Selenium does except few things?
No problems Hmm been a while since I've done any scraping with robobrowser, but requests-html does
&gt;The PyPA does not have "official" tools Except, `pipenv` is owned on GitHub by the `pypa` organisation, and [for a very long time and until very recently the documentation said](https://github.com/pypa/pipenv/tree/v11.10.4): &gt; Pipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom). Don't tell us it wasn't official, when everyone involved with the project made very clear suggestions that it was.
Well yeah. That's literally what it is and why it was made.
Nothing to do with Python. Dynamic typing is *amazing* in any language. The absolute worst thing about C, Java, etc is the stupid paternalistic "I know better than you" static typing.
In my opinion not really. Except for a handful of use-cases, the best approach is a web-based application. If you really need a desktop app, electron is a better approach. And by it's nature, JS will be more responsive to the user. To me, the list of exceptions to web-based development is getting shorter and shorter. Sure there's video games and IDEs, and office, but users prefer to not have to install anything (even office is getting pressure from online approaches). And, when WASM hits big, even performance intensive apps could disappear from the desktop. And hey if you have a web-app based approach, your backend can still be python :). Lots of fantastic web frameworks.
Word of advice. Start figuring out how you are going to distribute your app before you even start making it. Packaging can be a huge pain in Python, and if you wait until you think you're ready with everything else, it can really bite you. Best thing is to ensure that you have a working build path early on and test it as you go along and add dependencies to your project. 
It depends on the graphical application. If you're doing something quick and simple, where there's no extended wait on your GUI, then you'll do fine. If you're chugging loads of data in the background and expecting to relay that your program is working, as well as keep other UI elements interactive: no, not in pure Python.
This looks really interesting. Thanks for sharing!
Take a look at BeeWare as well: https://pybee.org/project/using/
Not everyone uses PyCharm.
It would not be my first choice, but it is certainly possible. One of the primary things I look at when making such decisions is what are other people using? When looking around at what I use and what other significant applications are using, I do not use or see anyone building GUI based apps using python. If I were to build a cross-platform app, I would be looking at Javascript, React, and Electron. Significant apps like Slack and Microsoft's Visual Studio Code are built using technologies such as these. Python definitely has a significant place, but I find it works best behind the scenes.
Three points: 1. Newbs always think that the programming is more important than doing a decent job of documenting/presenting the product. They are wrong. 2. Newbs always think that they don't have to suffer learning how to write coherent sentences. They are wrong. 3. You made mistakes 1 &amp; 2.
Tbh web apps are really the way to go these days. Django is an awesome tool and you can create really modern apps.
You can use tkinter, it might not look the best but it’s really easy
If only Reddit had a delete button so you wouldn’t have to get downvoted...
AquaFX. Skins it to look similar to macOS but it’s still not fully native looking. 
It is available under LGPLv3, GPLv2/3, and a commercial license. It's free-as-in-beer to use the various GPL licenses. Whether or not it's free-as-in-speech depends on how you view the terms in the GPL/LGPL licenses. Depending on your use case, it may require you to also license your application under GPL/LGPL.
I find the Python documentation to be pretty good. It’s how I learned the language.
Hi there, this post has been removed as it is not directly related to the Python programming language. It might be more topical on /r/programming, /r/coding, or /r/technology. Cheers, /r/Python mods
[Pandas](https://github.com/pandas-dev/pandas) is lovely for new contributors. They have a lot of simple issues, and you probably have familiarity with the library as a data scientist.
In a couple of months. It will be part of our first alpha release.
Here's the issue list: https://github.com/pandas-dev/pandas/issues With 2,500, there must be something to help them with.
I found this book very useful if you have experience: [Python Essential Reference](https://www.goodreads.com/book/show/80444.Python_Essential_Reference). It is organized like the old K&amp;R book, an overview of the basic language followed by a discussion of a large number of modules from the standard library. It's available as an e-book.
Since Fluent Python has been mentioned I'll add that I've always found the "Cookbook" books useful when you have a background with other languages. Essentially they aren't written as start at chapter 1, read 2, 3, 4 then skip to 7--you can skim and read the areas that interest you. Al Sweigart's stuff--while probably a bit beginnerish--is definitely worth at least a perusal. Good quality and free online. Finally, [List Comprehensions: Explained Visually](http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/) is a great resource if you're having trouble getting into one of Python's most idiomatic topics. Coming from a mostly C and Java background it is what finally made things "click" for me for list comprehensions. (I've never worked much with Ruby so no idea if it has more Pythonesque idioms than Java does.)
After careful thought I have decided that everything is crap at gui except for html/CSS. I just need to find a good way to use it without electron or a AAA game engine.
Electron is super slow. I would not recommend using it for stuff. Since it’s running in chromium it chews through your ram. Also it’s JavaScript soooo
you can probably look into using pandas dataframes. 1\) read from excel your header reference file. pull the headers into a list. 2\) read\_from\_csv your input file. update the headers using the list created from your reference file 3\) write it back to a csv/excel.
works on more than just django orm models. given I haven't tried your method and I didn't see any output from it, I'm not sure how they compare beyond that. 
Ooops--forgot to add: you probably should've asked this in /r/learnpython . There are actually quite a few very accomplished and helpful python people there. And if you aren't already following it it tends to have a pretty good range of posts from utter beginners to people like yourself who are coming from different languages/paradigms. It's [sidebar](https://www.reddit.com/r/learnpython/wiki/index) as well as /r/python 's own are good resources.
I bet you money electron is faster than python. It is a memory hog though, and JS is a bit weird. Not unusable however.
The Scipy community is also very engaging and helpful in my experience.
I don’t have much experience with python ui programs. I do know that electron provides (in my experience) a much poorer user experience than real native software (c++ etc.), especially on less powerful machines. Because so many programs nowadays use electron, it is fairly common to have more than one electron app running at once, and that becomes incredibly resource intensive. Since python is not compiled it will obviously be slower than something like c but it should also be much less resource intensive than running a bunch of instances of chromium on your computer. Correct me if I’m wrong, I haven’t done much development with qt, etc. 
It's because files have a cursor position. When you ask to `read()` a file, it reads *from the current position*. After you write to a file, the cursor is left at the end of the file. You can use the `seek` function to move the cursor. Use this instead of line 4: config.seek(0) # move to the start of the file --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
the file does remain open, but what you;re seeing is that python writes into memory before writing to disk also, as you right to a file, you are perpetually at the end of the file. you would have to do a `file.seek(0)` to return to the beginning before seeing the contents
/r/learnpython
\&gt; I bet you money electron is faster than python. If you are doing hard core number crunching or the like, Javascript is much faster than pure Python. \(But both are terrible languages for that.\) If you are doing normal GUI development, you are only using Python to orchestrate objects that are implemented in C\+\+, so the actual implementation of the widgets is all native code that runs great. OTOH, with something like Electron, you are going through a browsery DOM with a bunch more layers of abstraction between you and the meat of what's actually happening. PyQt applications run much better in practice from a user perspective than something like Electron. The engineering that has been done on the JavaScript runtime isn't enough to compensate for the fact that the framework is just not a good design from an efficiency perspective. If your application grows to the point where you are doing a lot of processing in Python, and custom painting of your widgets in Python, etc., rather than just letting the native code be responsible for that stuff, then the balance may tip in favor of JS. \(But again, at that point they are both a bad choice, so being better is a small blessing.\)
I know people love to shit on electron around here, but we use it at work and it is actually pretty fast. It’s a memory hog for sure, but the productivity trade off is worth it in the sense that our product wouldn’t exist at all if we couldn’t use electron. I suspect a lot of software is this way. Yes I’d love to use something more efficient, but in the real world, developer time costs money and electron is good enough. 
I agree with what you’re saying. I myself being primarily a js developer rely on electron for nearly every native program I’ve made. Just ij my personal experience, running atom, discord, and occasions gitkraken at the same time will eat the majority of my ram. 
Eyyyyy! Always happy to see gk users in the wild. Believe me, we feel the pain. Slack + VSCode + gk (especially in dev mode) + our docker stack brings our company issued 8gb MacBooks to their knees. Right now we’re working on moving all the business logic and git interaction to a sever written in Rust so the gitkraken electron client can be a dumb head and hopefully solve a lot of our memory usage issues. Turns out managing memory when communicating between JavaScript and C (libgit) is hard. 
My flimsy little 2012 MacBook Air can’t handle a single instance of chromium, never mind three. That’s why i switched to sublime and a terminal. Glad to see a rust user in the wild! I’ve been thinking of learning it for server side stuff. Do you have any advice with it? I didn’t even know doing that was possible with gk.
Im not sure if you are asking to run it locally or for real web usage but web development is one of the biggest usages of python. Checkout Flask, Django, Pyramid, etc, excellent framework who run alot of the largest sites on the web
I don’t know about advice, but we love rust. When you first write your code it’ll give you a million compiler errors but when you solve them all your code is almost guaranteed to be be without runtime errors. It’s truly incredible. 
Great! Having very little experience with compiling languages, what would you say rust is most useful for?
Well people use it for everything. It’s a general purpose language. ¯\_(ツ)_/¯ 
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
Remember to escape the backslash*
Kivy gives you 2D (and sometimes 3D) drawing tools, but it means that a Kivy interface will look the same on every platform. Sometimes that's good, but when most people say "GUI app" they usually mean "native-looking GUI". So a thing that looks like any other iOS app or Android app or Windows app.
What open sourcw projects do you use? Contribute to those.
You should check out [Apache Airflow](https://airflow.incubator.apache.org/) - seems to be relevant to what you are looking for. 
Thank you!
Am I correct in saying that this would effectively give The Qt Company licensing access to the software you develop using Qt/PyQt? In other words, they have the right to distribute any software you've created that uses Qt/PyQt libraries?
Python has type-checking annotations, which is almost as good if you can resist the temptation to forget to use it. It doesn't have the crazy "Type system that's basically a proof of correctness" stuff I've read about in some languages like Rust.
says the dude that couldnt read.. coherent sentences for who? a whine that can't read :p decent job documenting presenting, for a loser that can only complain but can not read? :p go beat yo wife 'professional' programming maggot...
Many people mentioned Qt, which however is double licenced and is not free for commercial use.
also, in most cases it's considered good practice with wrap everything in a `with` statement instead of closing the file manually: with open('config.txt', 'r+') as file: foo = file.read() 
I still hear laurel. Anyway, your test with a different audio clip shows that the tv program was full of shit just like most mainstream tv "science" programs that are only made to push some new narrative by the sheep herders.
Hi! One good example of GUI application build in Python is fman (https://fman.io), which is a Sublime like app, with dual-pane file manager for Mac, Windows and Linux. The framework used is fbs (https://build-system.fman.io). However, you can use fbs for free only in open source projects that are licensed under the GPL.
please visit : www.blender.org for more details.
The interpreter doesn't modify the *code*. The target of the licence is the code, not its in-memory representation, or else, no *libraries* can be LGPL. Even with compiled libraries, execution *jumps into* functions and adds arguments to the call-stack. That is modifying the in-memory representation of the code. 
I've been tempted for a while to build a site that lists open source projects that are friendly for beginning contributors, but that also puts experienced contributors in touch with those beginners as mentors. "Contribute to open source projects" is super common advice, but the learning curve is so steep that I'm sure many people who would gladly contribute their time are intimidated into inactivity. 
&gt; hard core number crunching, Javascript is much faster than pure Python Really? I thought numpy is super-optimized and written in C++. 
[removed]
Electron works fine if you have 16Gb and have one or two electron applications open. If you have a budget desktop it's impossible to use.
I don't want my users to think about pythonpaths, but I do want to be able to use libraries in my plugin. Seems like time to try testing what happens.
as an addendum, concentrate on learning their workflow and adopting their standards and best practices. this can be the most unnatural part of a new working environment, especially if the deviate far from industry standards 
Numpy isn't written in pure Python. It exists because native code operations can be much faster than pure Python. That's kind of my point.
The amount of bugs that arise in dynamic languages as a result of changed attributes, incorrect types or just simply typos are a serious pita to deal with in any large system. It's a little better now that py3 has type hinting and better tooling though. As for your question, the first thing I would do is use a validation library with a defined schema, for Python it would be colander or marshmallow - both have issues, but both are infinitely better than not having a schema at all. Why you would use `if attribute`? As someone who has had to deal with production data in schema less will tell you, you can't depend on anything - and why raise an exception and break the app when a field was missing instead of set to `null`. Obviously this is the internet and you can make presumptuous comments since you have no idea what you're dealing with, so: Check how old my reddit account is and consider I've used Python in several production projects since 2.3 - have had experience with postgresql, mysql, oracle, sql server, mongodb, cassandra, cockroachdb, solr, elasticsearch, rethinkdb, firebase in *production* environments. Written production code in python, ruby, javascript, go, c, java and even (ugh) php. So those are my qualifications, what are yours. 
Even better: pandas has [`good first issue` and `Effort Low`](https://github.com/pandas-dev/pandas/issues?q=is%3Aopen+is%3Aissue+label%3A%22Effort+Low%22+label%3A%22good+first+issue%22) tags, with plenty of issues to choose from. /u/gusfacer, I'd start here :D
PyQT. Oh man, it's amazing. Especially since PyQt5 automagically converts QVariant/QString/QDateTime/etc to native python objects.
No, the command-line arguments have the final say. And if a package uses `setup.cfg` to specify its `install_requires`, rather than doing `install_requires` in `setup.py`, then `setup.py` will not need to be executed. Most people don't do this, of course, but the point is you *can* specify dependencies, today, in a static machine-readable way, if you want to.
Kivy is really nice because you can develop once and run it even on your phone.
You're right about the steps to take, but there are things you can't prevent when in an episode. And those you should let go: beating yourself up about mistakes you made while in an episode won't help anyone.
They only have limited influence over sometime who feels that way.
First: Your way to find the `currentID` is horribly inefficient. You are creating two lists of all keys and values in memory and then doing a linear scan through the values. A more efficient (and nicer to read) way: currentID = next(key for key, value in self.ids.items() where value==instance) But there are a LOT of other questionable things and red flags in this small piece of code that I highly doubt this is your main problem. Your question: You can refer to variables by their name (via `locals()` or `globals()`) but I'd strongly advice against doing that. Rethink your approach here. What do you *actually* want to do? 
First, you probably want r/learnpython. Second, you probably want a book. You can go exactly as fast as you want. Third, if you must use a video, try [this guy](https://pythonprogramming.net/introduction-to-python-programming/).
&gt; Is there anyway to make the dictionary not solve those variables, and instead carry over the variable name and use it in the for loop? No, and it's a terrible idea. You're approaching the entire thing from the wrong way, if what you're doing can even be called an approach, it makes no sense.
/r/learnpython
Buried lede: *...learning Python and KML being a few big ones...* This is incredible work for a n00b. That said, for future readers of this thread, check out [Open Street Map](https://www.openstreetmap.org/) to get cleaner data sources and have a lot (or all?) of this handled for you.
Is there anything available for multi objective or n dimensional maximisation?
Or the state GIS data warehouse 
Yes, video is best for me I will check him out and didn't know of the other group I will go there. Thank you.
This is good advice if you are joining a team. However, I've frequently had code just dumped in my lap with zero help or other team members. Heck, I've often just been asked to fix things and had to track down the source code myself. In those cases, the best thing to do is: 0. Make sure the original sources (from your POV) are under revision control. 1. Try to do something. Decide "I'm going to change this widget to green" or "this calculation needs to be metric" or whatever. Make changes somewhere you think will make that happen and see if it does. 2. Your changes, whether they work or not, will bring you in contact with other parts of the code. Watch for "subsystems" and see how they connect to each other. In a few months, you'll be an expert. In a year, you'll have a better design.
Might be worth writing this with heavy use of cython/numba to get some serious performance improvements.
IMO this is the sort of case where you need to benchmark. This would be a complex question even in C with a much higher degree of control over the implementation and hardware.
Circuitpython. It’s just so much fun. 
Asyncio will perform worse when some of your green-threads will be cpu-bound, and if you don't pause them manually other threads will be waiting. Say you serve web-requests and 1 request takes 2 second cpu-time, all other threads will be waiting while this one finishes unless you manually pause it. Best case is having a per-process async-single-thread where you manually pause(or some auto helper function) threads that take a lot of cpu-time. Example: see scylladb cpu-scheduler or redisearch threading http://redisearch.io/Threading/
Asyncio is only useful if your workload is dominated by network access time. Ex: servers, clients making a lot of request, etc. Multiprocessing will make use of several core, but process communication is expensive. You use it when your workfload is mainly CPU intensive with a work you can easily split with little communication between the workers. Threads are useful when: - file access dominated workload - lot of local socket access (db access) - avoiding blocking a GUI - like asyncio, but you use some blocking libs
Might just be adding to the general noise, for GUI, Toga seems very promising but if you're more used to webdev, pyWebView is a great alternative. There's been a lot done, it's more usable now.
&gt; At what point does your code become a derivative of the LGPL library you linked to? It doesn't - that's what sets the LGPL apart from the GPL.
&gt; I'm aware that it has an event loop, which gives the CPU to the method that's ready after waiting on IO. The conclusion could be that it will act differently in the case when there's a job which needs CPU power, i.e. it will serve the IO bound jobs also, correct? I only used it in one project myself, but it works in a way that you have a pool of tasks, and the task explicitly "give away" the CPU by calling "yield" or "await". After that, CPU is given to the next unfinished task in pool.
A simple one is ww (https://github.com/Tygs/ww). The code is very easy to get into, so fixing things even as a beginner is doable.
Learn Flask, HTML, CSS, Javascript and you still don't have the desktop app you wanted. 
It's very touch based \- the support for using a mouse isn't always the best.
I'm not really sure what you mean -- "Get the user to choose starting values." It looks like you have the user entering n. Is that not what you want?
Hi not really sure what you mean -- "Get the user to choose starting values, I'm Dad!
Also if you're looking to optimise arbitrary functions (doesn't have to mathematical functions) have a look at [gago](https://github.com/MaxHalford/gago). I know it's not Python but you can compile it to a dynamic library and import it. I'm doing exactly that for a machine learning project.
Thank you 🙏 
I think this bot needs a little tweaking.
If you are interested in this, Id recommend scikit-optimize. Additionally, I wrote a python package for N dimensional, N-objective black box function integrated with workflow software. Its useful if evaluating your objective function is (very) expensive, dynamic, or otherwise complicated and can be executed in high-throughput. Ill give GitHub link if anyone is interested 
I don't understand. Seems like I can screeencast an application and measure UI responsiveness by stepping through the video.
Fair. But because the internet is so ubiquitous, for a hobbyist like me, it’s easier to just use Flask, that way I can get the app everywhere I have internet,
Kivy is great and for web GUI REMI. Qt is also great but not free for commercial use. 
Codecademy ;) 
[pyswarms](https://github.com/ljvmiranda921/pyswarms) for n-dim optimization
Second that. Codecademy has a good interactive [Python tutorial](https://www.codecademy.com/catalog/language/python). Once you've done that start working on simple Python projects. Also worth reading up on [data types in Python](https://able.bio/SamDev14/working-with-data-types-in-python--18csnl3) and [how to structure a Python project](https://able.bio/SamDev14/how-to-structure-a-python-project--685o1o6).
I would like to get into IT Security, would you say python holds the most value?
Many thanks, I was looking for something like this. 
Take a look at Dart. It seems to be gaining a lot of momentum, and it is quite unique on its architecture. It compiles to native so it should perform on every platform.
Plus packing the app for distribution is a no brainer because Tkinter comes preinstalled in the core distribution.
Yep that’s why I choose it. Worked on Linux and MacOS. 
Do you have any experience in programming? If not, it doesn't really matter which language you choose to begin with, because you will be able to use that basic knowledge in almost any other language. Python is a good start because it has a clean syntax.
My AI company's been approached by a big bank in Asia that has a problem of people spoofing face recognitions systems. Basically, people try to fool the face recognition systems by holding up a face of the "victim" via paper printout, playing a video of the victim, etc. So my team and I came up with a face ID verification system that combines couple of AI models to combat this. This video shows just the visual confirmation.. but the AI behind the actual API combines behavioral (like CAPTCHA - a.k.a. OTP, or one time password) and other neural network models that determine validity of the speaker's face / voice. This might be a dumb question.. considering user authentication is at the core of all things financial.. but are there any use cases that you guys see this being more useful than others? One interesting I got from the audienec at a talk I gave was saving the "face signature" on public blockchain so that spoofing / ID theft would be even MORE impossible... not to mention it can be used as a form of ID for refugees and people who have no nationalities (according to NPR, there's like 60+ million displaced persons.) PS: Are you a ML engineer / data scientist working on similar? Let's collaborate: https://www.facebook.com/groups/389107754936607/ 
Why is it specifically for 2D? That's a very strange constraint to build in from the get go, especially for a genetic algorithm.
[pelican](https://github.com/getpelican/pelican/issues) static blog generator
Python for dummies : # Variables : Python, like any programming language, uses variables to store data to be used later. Variables all have a type. The most common ones are `float`, `str`, `int`, `list`, `dict`, `bool` and `NoneType`. To declare a variable in python, and initialize its value, the syntax is `my_variable = 5`. `my_variable` is the name of the variable, and 5 is its value. `my_string = "Hello World!"` initializes a variable of type `str`, for instance. # Conditionals: Variables can be used in lots of ways. One of the most common ones is to test if a variable is equal, greater than, or lower than another value. The syntax looks a bit like this: if my_variable == 5: #code to do if my_variable is equal to 5 elif my_variable &gt; 10: #else, if my_variable is greater than 10 else: #if other conditions are false All the comparisons operators are quite straightforward. `==` tests an equality, `&lt;` and `&gt;`, lesser and greater than, and you can also use `&lt;=` and `&gt;=` for lesser or equal than, and greater or equal then. Other keywords include `in` and `is`. You can also combine two or more expressions with boolean operators like `and`, `or` and `not`. Couple words on `in` and `is`. `in` tests inclusion in an *iterable* (usually a list), while `is` tests equality between references of two variables. The `#` sign denotes a comment. The rest of the line is ignored at runtime. Anything before the `#` sign is still executed though. #Loops : Python has two main types of loops : the `for` loop, and the `while` loop. The `for` loop executes instructions in its block a set number of times, while the `while` loop repeats the instructions in its block while the conditional attached to it is true. for i in range(10): print(i) `print` is a function in Python 3 that prints its argument to the console. It's as simple as that. `range` creates an iterable (but not a list) from 0 to its argument (minus 1). It can take up to 3 arguments which must be integers, start, stop and step. `range(5,8)` would be an iterable from 5 to 7, while `range(5,12,2)` would be an iterable from 5 to 11 that would look like this : `5, 7, 9, 11`. while my_variable &gt; 0: my_variable = my_variable - 1 #you can also do my_variable -= 1 print(my_variable) # Functions : Functions are really handy, they allow you to avoid rewriting the same code over and over again. To define a function, use the keyword `def`. def function(x, y, z): return x+y*z Here, function takes 3 arguments, x, y and z. Those three arguments are required for the function to execute, otherwise you'll get an error. `return` returns the value after it, and exits the function. You can assign the return value to variables obviously. `my_return = function(5,6,7)`. Here `my_return` is equal to 47. All arguments of a function are nott necessarily required though, to set an argument as optionnal, use this syntax: def function2(x, y, z=5): return x+y*z Here, z is equal to 5 unless specified otherwise when calling the function. A function can have up to 256 arguments, though it's unlikely you're ever going to hit that limit. #Final thoughts: This is just a starting guide, there are many more features to explore, and many advanced programming techniques, but that should be a nice starting point into the world of programming. Some programs you can implement to train : 1. Create a program that says "Hello, World!" to the user. 2. Create a program that asks a user for its age, then prints out wether the user is of legal age or not. (Hint: check the doc for `input()`) 3. Create a program that asks a user for a specific input, and prompts him again until the value is not the one expected. 4. Create a simple calculator. 5. Create a simple "plus or minus" game. The program selects a random number, and the user has to figure out which it is. The program says whether the guess is greater or lesser than the number. 6. Create a hangman game (that is not as hard as you'd think, take your time) Official docs : https://docs.python.org/3/ Help subreddit : /r/learnpython Stackoverflow : https://stackoverflow.com/questions/tagged/python And most importantly, check the sidebar, it has all kinds of useful information. Happy pythoning !
Waaa, I didn't even know this was a thing!
Yeah, I think what would be most helpful would be experienced contributors to major projects who walk first timers through. There are undoubtedly amenable maintainers out there who would do this, but projects have far more contributors than maintainers. There's also a pyramid argument to be made. A contributor could fix an issue themselves, or they could work with a new contributor to fix that issue, with the added benefit of all the future contributions that new contributor would make to the project in the future, plus all the contributions that will be made by the contributors mentored by that new contributer, plus all the... So you could argue that your greatest possible contribution to an open source project is the training of new contributors.
This is a good question to ask during the interview process. It tells the company you want to be productive as fast as possible. The answer might suggest to decline an offer.
&gt; So does asyncio solve those problems, The primary issue with the GIL is that it prevents a program from making efficient use of multiple CPU cores, because if you use threads which then have their CPU work distributed to multiple cores, the GIL forces the work that would otherwise complete in parallel to run only serially, each thread having to wait for another to do some CPU-bound operation. The Python interpreter however *releases* the GIL for an IO operation, like waiting on a socket, so for a program where most of the work involves waiting for data on a socket, the GIL does not impact the ability to have multiple socket operations in play concurrently. Meaning you can have requests out to 50 web servers waiting for data to come back at the same time. With classical blocking IO, such a program would have 50 threads spawned, each waiting on read(). But the program also has the option to use non-blocking IO, which means you could just as well have just one thread, 50 sockets, then you use the select() system call to find one that has data ready to give you. You might want to use non-blocking IO because you can then have an arbitrarily huge number of sockets open while not having to build up an OS-level thread for each, which incurs significant expense at higher levels - threads take up memory, time to be spawned, and there is also overhead in context-switching between them. A single thread looping through a list of 500 sockets with select() is a lot more efficient if you expect that those sockets are often going to require a lot of waiting. If the sockets OTOH are very fast and always have data available, the program can instead fall behind in its processing of the data and it becomes again a CPU-bound issue that benefits from non-GIL-saddled threads. The problem asyncio solves is that it allows you to use non-blocking IO primitives with an (arguably) nicer programming interface which abstracts away the need to loop through non-blocking sockets with select() and instead builds it into an event based system that the program can construct itself around, where these select() polls ultimately result in events being fired and different "async" tasks in the Python program waking up. However, as you've noted with asyncio, the event queue runs in only a single thread. The race between threads and asyncio then becomes who can context-switch more efficiently. This is a point of debate as different threading implementations and different versions of asyncio have been compared with varying differences. Then you have projects like uvloop that are trying to prove async-style context switches to be the fastest. However, speeding up context switching is fine but it has little to do with the GIL. If you're on asyncio on cPython, the GIL is still there and you're only in one thread anyway. If you're using threads, the GIL is still there and you're only able to utilize one core at a time. The difference between threads/asyncio only has to do with the approach to IO operations which are not impacted by the GIL in any case. multiprocessing, or using an alternative Python interpreter, remain the only ways to overcome the CPU bound limitations of the GIL. 
hire someone
I want to built it as a project to learn python 
Talk Python To Me \(mentioned in another comment\) is good, it's basically an interview format. Python Bytes is also good. One of the hosts is the one from Talk Python To Me, but it's more about Python news.
This is interesting and no doubt works very well, but elitism (aka truncation) is a terrible selection method. A lot of research has been done in this arena; it's valuable to not retread well-trod ground in this instance. [Here's](https://scholar.google.com/scholar?cluster=3734798594752628853&amp;hl=en&amp;as_sdt=0,18&amp;as_vis=1) a paper comparing various selection methods across multiple types of optimization problems, and it very clearly shows how poor truncation is long-term or with any particularly difficult problem-space, but don't trust just one paper. [Here's a good google search on the literature about it.](https://scholar.google.com/scholar?q=genetic+algorithm+selection+methods&amp;hl=en&amp;as_sdt=0&amp;as_vis=1&amp;oi=scholart)
I did not contact the moderation team. In hindsight, perhaps I should have. However, there are no guidelines about behavior on this sub at all, so what would I even be reporting? I was taken aback by some of the vitriol in the responses to /u/kennethreitz, and that led me to make this post.
The thing is, trolls add nothing to a conversation. They are completely unnecessary for a healthy and useful discussion. I think most folks do their best to ignore trolls. However, a community where trolls are allowed to run hog-wild is a community that many people will simply avoid instead of engaging with. I like the content in r/Python. I would like other people to feel free to participate here also instead of avoiding it because we don't want to make rules
Once you get a hold of the basics, Cisco Devnet has some great free video courses. There is also a lot of information out there about the netmiko library and docker and ansible. I’m trying to learn a lot of the same things. Good luck!
I do not moderate subreddits. I do, however, participate in subreddits that do have rules and are moderated by people that enforce them. In fact, I observe that these subreddits have really vibrant conversations where people disagree with each other. People are even negative and unpleasent to each other there without resorting to personal attacks. For example, ALL of the NFL subreddits that I participate in have rules about behavior that are enforced. I should hope a community built around software development can keep pace with sports fans. 
Does those ecomerce websites have apis?
His status and position doubtless had a significant effect on pipenv becoming the standard. However, I don't know that he directly used his position to push adoption. That's why apologized. I don't know, and I shouldn't accuse.
Nice posts. The second link "*using Jupyter"* is pointing to localhost should be [https://www.grahamwheeler.com/posts/using\-jupyter.html](https://www.grahamwheeler.com/posts/using-jupyter.html)
No they don't have api
Thank you for the first supportive comment in the thread!
Python is a good first language if that's your goal. Many common security tools are written in Python and it's common for automating security testing and other common activities. Depending on the domain within IT Security, you'll likely want to learn other languages after Python. For example, if you want to write memory corruption vulnerabilities, C and Assembly would be beneficial. If you want to focus on web app security, Java and/or C# would be a good idea. 
The issue here isn't the feelings of /u/kennethreitz. The issue is that folks will choose not to participate in this community because of the shit that was piled on him. I found Kenneth's behavior appalling. The whole 'maybe I should just take my software and go home' response was just silly. He didn't handle the criticism well. His apologies were empty and riddled with excuses. He needs to do better. However, some of the comments were unnecessarily mean, purposefully insulting, and filled with some baseless accusations. I don't think those responses add a lot to a conversation. I think they make people feel like having no part in the conversation or community. I wish that wasn't the case, and that's why I made the proposal.
Haha documentation 
SciPy optimize has a function called [differential\_evolution](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution).
Completely agree, I will be working on getting this working for multidimensional functions. At the time I was pretty new to the whole genetic algorithm paradigm.
And it's impossible to make a note of something that is wrong without it being mentioned as a wrong thing in a guideline? That mindset lead to more and more detailed CoC's, until it ends up in the intersectionalist hell the Node.js ecosystem has become, where the CoC is enabling political feuds to replace technical arguments. I am much more comfortable with the self policing nature of a subreddit, where every user can vote on the comments and posts. 
If I understand correctly, truncation would mean only some fraction of individuals gets selected right? In this implementation, the top fraction of individuals are guaranteed to be in the next population, however the remaining part of the next population is obtained from breeding individuals randomly.
Is this open source?
&gt; Asking for a base set of behavioral rules is neither that time consuming or that radical. No, but it creates another power imbalance. Coming right after a debate that raised the question of possible abuse of power, the suggestion of adding further checks on the "hoi polloi" sounds hollow, sorry. &gt; A lot of the conversation around this topic was neither honest nor polite. The gratuitous insults were vigorously downvoted almost instantaneously. What was left was honest criticism rooted in facts. &gt; I participate in subreddits where a baseline of decency is enforced. Including this one. I'm not sure you've noticed, but there are moderators listed on the sidebar. /r/python is hardly a trolls' nest, but it's also a place that does not particularly revere celebrity.
In the sidebar.
I've found TPTM a bit unnerving at times, the standard set of personal questions ("how did you become a developer?" etc) tend to bore me. Python Bytes is faster and more *on the ball* at all times, I think, so I prefer that. There is also "Import This", from /u/kennethreitz, but the quality can be uneven and far from Python proper at times.
I finally finished the entire chain. Right now I can trigger the GUI app to run from the local HOST on the VirtualBox VM. There are some problems in the way I am doing it, for example a lot of times, I am wrapping batch/shell scripts in python to run commands. I am not sure whether that will cause any problems in future. The goal for this week is to finish the integration test then create a demo to show what is possible. I tried looking into Jenkins, for Continuous integration/deployment, but I was'nt able to do that at that time. I have to figure out how to do this after I finish my demo. I have a new project coming up where I am trying to rebuild a excel plugin to add new functionalities. For this, I will write out the high level requirements and create the tests, so I can start coding it out, from the week after. 
Not it doesn't 
I agree :)
I always see these types of demos using photographs. How does it do with a quick video of the user?
how is this related to python and whose bots are upvoting this?
pretty cool.. I am also starting to look into this. I have dealt with something like this to automate Excel data analysis using Python (using `xlwings`). You may find that at certain times the python layer doesnt provide you all the necessary APIs to do what you need. In that case you can just use the pypiwin32 APIs. There is also a powerpoint plugin, if you need to deal with powerpoints: https://python-pptx.readthedocs.io/ which you might find helpful
Could you use this to combat counterfeiting? Could it spot a misidentified handbag, cut of meat, concert ticket, altered product photo or fake currency? 
In China a lot of the university's and businesses are using facial recognition to allow students and employees to gain access to certain areas of the facilities. I'm not sure how good their facial recognition software is but if it can be spoofed with a piece of paper you might find some more clients there.
@DataToFish, @clinkytheclown.. thanks for this. I have to write a batch script to run a python module.. For example, using the python installed in a virtualenv, I can do `C:\path\to\virtualenv\python.exe C:\path\to\pkg\subpkg\module.py` as you mentioned in your post. What I actually have to do is to run the python script as a module using something like in a batch script. This is because some relative imports will stop working because of complications with relative imports as stated here (http://stanford.edu/~chrisyeh/2017/08/08/definitive-guide-python-imports.html): #batch_script.bat `C:\path\to\virtualenv\python.exe -m pkg.subpkg.module` Further, I need to be able to run the above batch script, regardless of the current directory from which I am executing the batch script. The above command will work if I am just located right above the directory containing pkg.. but not otherwise. Right now, I am thinking the only way to do this is to have a batch script which first `cd`s into the correct directory and then runs the module something like #batch_script_mod.bat `cd C:\path\to\` `C:\path\to\virtualenv\python.exe -m pkg.subpkg.module` Is there a better way to doing this in a single command?
&gt; PyQt5 is GPL3 only. According to FSF, &gt; The GNU General Public License is a free, copyleft license for software and other kinds of works. (...) Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. https://www.gnu.org/licenses/gpl-3.0.en.html I may be missing something. 
Thanks, fixed. But I do not think that `next()` or generator expressions are advanced techniques or should not be taught to new users. List or generator comprehensions are literally the second example on the python.org start page and one of the most prominent features of python.
Can someone provide a breakdown on the exe sizes that the various gui options produce? - exe size for qt + pyside2 - exe size for kivy - exe size for tkinter - exe size for web-based gui
If they don't have documentation a good way to actually learn the codebase is to volunteer to "write some stuff down." As people are teaching you and helping you start, write down what they say and organize it. This can become a starting point for the future and it'll help you understand the process much better.
No, not unless you're doing some really compute heavy stuff like machine learning. You can learn programming on a Raspberry Pi if you want.
Talk python to me is amazing. I also like python bytes
Haha, yeah it was definitely interesting. 
Isn't it just worth it get more Ram? Given that 16GB of Ram costs $189 or so(https://www.bestbuy.com/site/computer-memory/laptop-memory/abcat0506002.c?id=abcat0506002), and probably add some more ($50) for modification.. isn't it just more cost-efficient to just add RAM to your computer, than stick to a framework that requires more development time?
Of course some comments were unnecessarily mean. But that's like saying the entire factory of apples needs to be resanitized due to a worm in one apple in one sealed basket. That's how the internet works. Not to mention the fact that an external organization should never have a hold on a subreddit. But, people, including the PyPA, are taking this post and twisting it to make it so the entire post and anything that called Kenneth out on his crap, are all evil and should be culled. I do not want this subreddit turned into a social justice safe space where the enforcers can do whatever crimes they wish while calling such out is in and of itself a crime.
Just want to mention that we use Qt for a widespread app at our company as well. I personally dont work on it, but given that people (probably much smarter than me) have looked into it and chosen Qt, I think Qt is a good bet. Qt does have a licencing issue.. so you should be careful about that.
He's probably looking for feedback so he can improve
Don't forget numpy for those array assignments
apparently they are trying to combine pip and virtualenv together with `pipenv`. Practically, packaging in python is very fragmented.. so the hope is that `pipenv` works around those issues and provides a solution that works for all those issues. Its apparently very similar to packaging in Ruby... but I haven't used it. Because its new, its probably not very well supported in other applications.. so if you are not dealing with any major issues with `pip` or `virtualenv`, just stick to `pip` and `virtualenv`. 
&gt; But that's like saying the entire factory of apples needs to be resanitized due to a worm in one apple in one sealed basket Let's work within this metaphor. It's not like saying the entire factory needs to be re-sanitized. Rather, it's like the management recognizing that a bad apple was shipped out and realizing that the factory needs to have a baseline standard of quality so that the risk of future shipments having bad apples is minimized. Of course, consumers, managers, and workers realize that sometimes bad apples are still shipped out. However, having the guideline is a way that the factory can communicate to employees and consumers that quality is of utmost importance. The Python Code of Conduct is not about creating a 'social justice safe space.' It's a pretty loose guideline that says that people should be "Open, Considerate, and Respectful." I don't think this is unreasonable.
Thanks for understanding.
I mean, they're the same thing. Think of it as keeping the top X% (elitism) or dropping bottom X% (truncation), they're the two sides to the same thing: From one generation to the next, you've said, a subsection of the population will not be changed by crossover or mutation at all in the next generation. In my experience, that's not an effective method because it homogenizes the population really quickly and it becomes difficult to introduce big enough changes to find optimal solutions for things like the [Ackley function](https://www.sfu.ca/~ssurjano/ackley.html) when a local maxima is found early.
Doesn't have enough widgets imo. Pyqt has more options. 
And this kills the AI engineer.
But....why? Is there any real benefit to authlib v oauth2client?
Hm?
Let's add "takes criticism poorly" to your laundry list of character and professional faults. Why bother writing software at all, when you are plainly more suited to something in the housekeeping or food preparation careers? Have a nice day, asshole.
[sentdex... nice...](https://www.youtube.com/user/sentdex)
Godot has a python plugin in the make. It supports both cpython and pypy. [https://github.com/touilleMan/godot\-python](https://github.com/touilleMan/godot-python)
What do you have against sample data? Don't you know that an idea is the most important part of software development? ^^^^yes, ^^^^sarcasm.
How did you get a nice-looking page on PyPI without using setup.py? Did you have to use twine?
The files size doesn't change anything. It's the library which converts to exe which determines the exe size. I used sometimes pyinstaller and on windows, the exe does something like 4-10Mo
The 'elite' points are allowed to mutate, though.
Ah, the setup.py file isn't on git. I did use twine + setuptools though.
We could use your help: https://github.com/simeon4110/microreddit 
Unfortunately, I've never written any java. Thanks though.
Python would work for the API enpoint functions. 
And this is why the subreddit has moderators. And they *do* do their jobs sufficiently. If any of those comments in that thread or otherwise were out of line, the mods would have gotten reports, and then removed them. Now, I haven't counted how many comments there are in comparison to the calcul I'm not saying the CoC is unreasonable. I'm saying those who wish to enforce this CoC, i.e, the PyPA memeber who tweeted about this thread, Kenneth, and all of their friends in the PSF and PyPA who will do nothing but defend their own behavior while taking it out on others.
[Link](http://www.talkpython.fm)
Please do!
GitHub.com/hacking materials/rocketsled
Sorry to intrude on your discussion, but do you happen to have any semi-advanced reading material on the subject? Your posts here are very interesting to me.
Ask in /r/learnpython, as per the sidebar.
Humans don't agree on what emotion a facial expression means in a lot of cases, so computers could hardly do it reliably. And you'd want an authentication system to be reliable. E.g. [here](https://arxiv.org/pdf/1708.03985.pdf)(One of the largest Facial Empotion Datasets afaik) the annotators only agreed on 60% of the emotions in the images, and [it's not universal, expressions differ across cultures](https://pdfs.semanticscholar.org/e9b4/3cd29c4761223273cfec6ee9d475a167aa69.pdf). And a computer can only ever be as good as a human where human stuff is concerned. You really wouldn't want an authentication software that's only right in &lt;60% of cases.
PyBites is also pretty good
Your documentation should be pronounced: Unit tests. It is the only type of documentation that might not be a completely lie in a few days/weeks. Just like comments. Assume those are lies too and just code so that your code explains it, as your code should never lie.
But what if you need to run Atom and Slack at the same time?! /s
Just [one](https://en.wikipedia.org/wiki/Sunway_TaihuLight) machine is known to have been able to pull that off. Almost had Visual Studio Code loaded, too, but alas it proved to be too much for the ol' gal.
**Sunway TaihuLight** The Sunway TaihuLight (Chinese: 神威·太湖之光, Shénwēi·tàihú zhī guāng) is a Chinese supercomputer which, as of March 2018, is ranked number one in the TOP500 list as the fastest supercomputer in the world, with a LINPACK benchmark rating of 93 petaflops. This is nearly three times as fast as the previous holder of the record, the Tianhe-2, which ran at 34 petaflops. As of June 2017, it is ranked as the 16th most energy-efficient supercomputer in the Green500, with an efficiency of 6.051 GFlops/watt. It was designed by the National Research Center of Parallel Computer Engineering &amp; Technology (NRCPC) and is located at the National Supercomputing Center in Wuxi in the city of Wuxi, in Jiangsu province, China. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
/u/kennethreitz is a marketing genius :x
They're two sides of the same coin, you'll probably just have to try both and decide what you like. Vue clicked with me almost right away, React didn't. I also know people who will say the opposite.
This looks like it'd be a lot of fun to play with, to be honest...
Type hints are great when you use an IDE that knows how to handle them (I like pycharm)
/r/hailcorporate
When I say workflow I mean things like project management, version control policies, continuous integration, documentation, code reviews. Things that are tangential to development but are necessary, bureaucratic requirements and cultural norms With very specific exceptions, most places don't care how you develop. My company even foots the bill for the type of computer you want, monitors, desk, and chairs, etc, within reason of course
Podcast.__init__ by Tobias Macey also deserves a mention
Fuck you and anyone else working on facial recognition software. That shit will inevitably be used for evil purposes. 
https://docs.python.org/3/library/subprocess.html
Location - NYC Requirements - SQLAlchemy experience + full stack Company - Series B stage funded crypto startup. Management team alumni are from Goldman Sachs, MIT and CFTC. And YCombinator. Early investors include Google Ventures and Lightspeed Venture Partners. 
&gt; is this what a russian bot looks like? Yes, I am exactly what a typical one looks like. A real person having a real opinion but yet written off as not existing.
"the code is the documentation"
You need to write and run an actual `.py` file. You're currently in the REPL, which doesn't give you the freedom you need to do what you want.
As per the sidebar, questions like this belong in /r/learnpython. When posting there, you are most likely to get response if you post your code as text, rather than as a screenshot. 
I don't think static typing is the problem. But yes, Python is lacking in good GUI packages.
Experiment with both. If you venture into /r/javascript, you'll find a few threads on React vs. Vue vs. Angular vs. (other frameworks). It ultimately comes down to personal preference. The backend doesn't really matter. 
I did view more code for work with Django + Angular,10 months ago; but maybe now it would be obsolete by the rapid evolution of Angular. I like more Vue, but today is still few complex do things with Vue or React, in comparassion with the old jQuery .
That's a pretty large undertaking. You'll want to probably scrape the listing pages, but that could get you caught and potentially if you do it too often and consistently, which you would want to do for this sort of thing. There was a good talk at DEFCON a few years ago about this topic, but I don't think he used Python specifically: https://www.youtube.com/watch?v=sgz5dutPF8M
I hope Kenneth Reitz is okay. I'm somewhat concerned
Looks like he’s having a mental breakdown because people criticised his work and have been mean to him
Doing some wordsmithing commit\-by\-commit is a bit odd, but seems pretty minor, and it could be an error \(e.g. I often make lots of changes with crappy commit messages, intending to squash them all down later in a merge or rebase\). This doesn't seem cataclysmic to me.
I think you missed the fact that all the commits are tongue\-in\-cheek changes indicating that nobody should use pipenv and that it's a terrible tool.
If you’re going to make a sockpuppet, don’t escape hyphens like you did in the ‘Open Letter’ thread—it makes it really obvious who you are. He’s upset and behaving childishly, but at least it’s on a branch. 
Looks like a couple of frustrated local commits that he forgot to rebase/squash before pushing. If he pushed these intentionally, than this may be unprofessional behavior but still not really harmful. The last commit 'fixes' the ranting in the previous commits. I really hope Kenneth sorts this out, but creating throwaway reddit accounts to attack him in public does not really help the cause. 
No, I noticed that and didn't think anything of it. People will sometimes put "if it breaks, you get to keep both pieces" or similar language in READMEs if a project isn't ready for wide usage. Maybe he's decided to do that.
&gt; but at least it’s on a branch Yeah, on the `master` branch...
For Python, you just need as powerful as dev computer as your target computer is. Maybe some extra memory to run those fancy Electron based IDEs.
On a branch called `master`.
Calling it "absolute worst available today" is way beyond the "this is alpha quality" type of message.
They were pushed separately. If they weren’t, they wouldn’t have the ❌ from CI (it appears only on the last commit in a push batch)
The end user doesn't differentiate. Fact is that electron apps run faster than python+Qt. I'll believe the reverse when I see a python editor that's quicker than Atom for similar levels of functionality.
Y'all, let's be kind and supportive of people in general, whether we like their software or not, but especially let's be supportive when the person in question has done a lot for the Python community and needs our support. I don't see how this post could be considered supportive. If you have concerns, dragging something out into Reddit is not the proper forum to air your concerns.
I don't think commits are the right place to 'rant', especially when they are pushed to the documentation of a tool recommended to manage library dependencies by PyPA.
You might want to check out Anaconda
Replace atom with vim.
Spot on. IMO, this judgemental BS is far more damaging to the community than any of the linked commits. Learn to be gracious. The Python community is better than this.
I'm curious: what *would* be the proper forum?
This is what I discovered to work, and what I think your post can be simplified down to (but correct me if I'm wrong) You have one python thread (due to the GIL) that handles the async portion. That is, switching between sockets and saying "this one is ready for work". The IO portion covers pushing the work outside of the GIL (which could be to another python interpreter process).
Hmm, is this related to the behaviour I've seen lately where my mobile Reddit client auto\-escapes hyphens since they overhauled Reddit's styling? In that case, it will affect a lot of people.
I am really glad that this is the highest rated comment.
Looks like a joke...
This came off much harsher than I meant it. I am concerned and curious about what is going on but this post is not helping. Deleted.
Can you tell me what the other questionable things may be? I'm not displaying the entire 4000 line script, which may be the reason why some things looks like they aren't correct. My main goal here is that I have a ini file that needs to have these variables put into it(generalReturnCamp, and generalChaseAssist). However the ID of the UI input is returnToCamp_general and chaseAssist_general. The input of both of those ID's return true or false, but I need it to be 1 or 0 instead. Hence why I have the `if value:` statement. But I have 100's of these input's so I basically need to be able to loop these so I can save time and lines. These ID's and global variables have to be tied to each other somehow to work in the loop. I need a if else statement to be made for roughly 311 ID's. Because they are all individual use inputs and represent different variables that are generated within the .ini file.
I did NOT want this to turn into a personal attack. His behavior is concerning, but this post came off sounding harsh and personal so I've deleted it.
That doesn't really answer the question. Also, running `python -m ensurepip` is most likely the short route to actually get pip installed. 
It *is* installed (assuming you’re on a modern release), and available as `py -m pip`. Using the `py` launcher is the best route on Windows, but you can always add the Scripts directory to `%PATH%` (will also make scripts from installed packages accessible) ^(And no, you don’t need Anaconda.)
You can run `python -m ensurepip` to get it, if it somehow didn't come with your copy of Python. Might be `pip` ends up in a different location than the `python` executable, though, so worth poking around to see if it really truly isn't there, rather than just relying on a "command not found" as proof it isn't there.
Except there is. Official installers from python.org, as well as source compilations, come with pip pre-installed ^(-ish) via the `ensurepip` module. Linux distributions typically remove `ensurepip` or split `pip` out into a separate package, but that’s another story.
if we make a COC to protect /u/kennethreitz it should also protect /u/zedshaw simply b/c I think he has good points on a variety of things. And zope and pyramid and /u/ianbicking \(the creator of virtualenv and pip, suspiciously not attributed to in dear kenneth's monumental talk on the official future of python packaging\) and buildout \(suspiciously absent from dear kenneth's monumental talk on the official future of python packaging\) we must protect those who have little regard for their personal brand as well as the marketing minded folks in our community b/c they truly are humans too. 
Not really a Python question, but it very much depends on what you're doing. You definitely don't need one to learn. And if you're using Linux, you're can get pretty far with a single core Intel or AMD and 1 or 2 GBs of RAM. 
No, not really, but it entirely depends on what it is needed for. If it needs to be running 24/7, fast etc. Then buy a Linux VPS, and Run it off there (I need this for only 1 of my bots, but that's another story). 99/100 times, a very basic, low end i3 core laptop could do any task required
I can make you one, just send a pm with details. I charge 20$/hr, or can quote a price beforehand once all details have been given
Online (e.g. code academy) has the best tutorials. If you get stuck at any point, pm me
Vue was my choice (mostly because of Facebook), it's incrementally adoptable, so you can just drop a component here and there within your Django templates before going full SPA, and a breeze to learn. Highly recommend [this Vue course](https://www.udemy.com/vuejs-2-the-complete-guide/learn/v4/overview) on Udemy to get started. To be fair I haven't tried React but at this point I don't really see a need to unless I had to work on someone else's project.
Google newsgroups dataset. If you have any problems, or want me to create a solution for you, I can, as well as any task you may be given during the time as a student :)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
🤦‍♂️ this isn't a bot
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I hate articles that start off talking about something semi-obscure without first defining it. It's sort of defined later in the middle of it (under "Special Property"), but without first defining you get confused -- is alternating (1,2) a Kolakoski sequence? Then you get a sentence "An index, k, into the, (expanding), sequence will step, or index through each item of the sequence 's' at its own rate. We will arrange that the k'th item of s states how many times the last item of sshould appear at the end of s." that just doesn't sense if you didn't know what the author was trying to say. https://en.wikipedia.org/wiki/Kolakoski_sequence#Definition_of_the_classic_Kolakoski_sequence
If I could upvote multiple times I would. I love the 'panel format' episodes \(they need to do it more often \**hint*\*\) in particular. Hearing guests' enthusiasm about their project or the glee in their voice when they talk about how python does this cool thing for them ...that's makes me want to keep at it
Same with Vue. It's awesome.
Oh, I see. Yeah, that's a difference I hadn't thought of. That makes it slightly better. Thanks for listening to me! Good luck with the project.
I am oddly aroused by both of those podcast names.
Listened to a couple of the Talk Python To Me podcasts today while I hiked and they were really good. Definitely worth listening to. 
My personal experience tells me it is great for small projects, but I cannot tell for large scale commercial projects 
Im making my first GUI right now and im using tkinter, I dont see anyone here mentioning it though. Is it not a good option for python gui?
 If you're doing machine learning or crunching large data sets, then maybe size matters. For everything else it probably doesn't. 
The reply was posted by a Reddit user literally identifying itself as bot in the username. The post history seems to confirm. I don't think it's going to be dissuaded from making spelling corrections because of the suggestion that it might be jerk-like behavior.
It’s not about my ram, it’s about the users ram. Not everyone can afford $200 of ram. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
This post is better suited for /r/learnpython and /r/learnprogramming 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I get the reference but... Uh... When the random number (why?) is 1, it doesn't really do the dialogue...
It's a random number for when the villain eventually decides to give in.
Yes, I'm pointing out that there's a chance "What is this?" and "You cannot do this forever" won't even trigger. Plus, rewinding time isn't recursion, it's iteration :)
&gt;Because you should never mess with your system-wide packages. Given how small some systems are, I think this advice is over-sold. I don't want all the extra bloat of wrapping a lot of environment management crap on a Raspberry Pi, for example. The whole Pi **is** my docker/venv/capsule/pip world. If I want a different setup I would throw together a whole different Pi SD card image. 
[Python Bytea](https://pythonbytes.fm) is the only one I'll listen to every episode.
At least use --user to install stuff. Installing to the system python is a good way to bork your system since parts of the OS use it and you might accidentally install an incompatible version. 
Linux distros typically remove the pip modules from the system python and force installation through a separate package. It's kind of annoying but I understand why. 
Good God you weren't kidding... n=n+1 and then pass n to the function? Just pass n+1!
Good point. I forgot to add this part. 1. Authlib AssertionSession and gspread are both using requests, you don't have to use another http library 2. Authib will automatically refresh access token, while oauth2client in gspread can't. (but oauth2client itself can) 3. Unlike oauth2client, you know exactly what's going on in Authlib, it is a white box Besides, it is an alternative. And here is a tip on how to use it.
 import random class Scene(object): def __init__(self, first_line): self._first_line = first_line def play(self): print(self._first_line) class RandomDeath(object): def play(self): print("*dies randomly*") end_phase = random.randint(5, 10) scenes = { 0: Scene("Dormammu! I've come to bargain!"), 1: Scene("What is this?"), 2: Scene("You... what is happening?"), 3: Scene("You cannot do this forever."), end_phase - 1: Scene("You will never win."), end_phase: Scene("Make this stop!"), } for i in range(0, end_phase + 1): scene = scenes.get(i, RandomDeath()) scene.play() 
I ended up discovering this the hard way. I was doing an interpreter (in python for pascal code) for a class and I spent a good bunch of time wondering why I was having weird results with math operations. Turns out -- wasnt exactly what I thought it was.
I've broken an install before but being careless. You get complacent and run a command you shouldn't and whoops. 🤷‍♂️
I don't know why but people who do things like "n = n + 1" instead of "n += 1" make my eyes bleed. And yeah, just pass n+1 to the function.
lambda x: f(x)
Yup, exactly why I hate this idea. The people who wish for CoCs will never be happy until they are the ones to enforce it. Adding a CoC is just a door for them to complain "they are being mean" until they do enforce it. Hence why in the tweet chain linked in this thread they want the subreddit to become PSF official. And when they do enforce it, they will take any callouts of their bullshit and claim "you are against our code of conduct".
Invalid python?
Are you using windows and the 2.7.15 launcher? I've also [had this issue](https://www.reddit.com/r/learnpython/comments/8kq87q/py_2715_64_bit_all_users_on_windows_not/), no idea why.
Out of curiosity, are you trying to compress vertex cache into bone transforms / skin weights?
Nah it's just useless
I had a similar thing happen to be recently where I took over a large project. Is pep8 that hard to follow? Just had a flake8 and isort in your git hook. It just hurts me to look at it. 
I need some eyebleach after reading this code... or maybe just bleach.
Crossposted from /r/learnpython, but someone else just made a post with a similar if not the same issue which makes me think there's something wrong with the 2.7.15 installer.
1, 3, why not requests-oauth, for 2, maybe same, haven't checked. Authlib seems potentially heavy. And sure, not saying this isn't useful. I just like "whys".
Just seeing any procedural code before functions is scary 99% of the time 
r/badcode
It reads, or attempts to read, the whole body before routing. This is bad because it shouldn't need the body for routing, the user should choose when to read the body, and it's open to abuse by malicious actors who purposefully send the body in small enough chunks over a long enough period that the handler is effectively dead. If you use it behind a buffering web server, say nginx, you'll avoid the worst of the last one but not the other two. 
A great addition would be parallelizing the code in some way. The evaluation of the fitness function can take quite a bit of time, so there can be a lot of value gained from taking advantage of all the cores available on a machine and distributing member evaluations between them. One easy way to implement this would be adding a dependency on [joblib](https://github.com/joblib/joblib), which provides a simple interface for dividing up function executions between processors. If creates workers for functions passed in a list and divides those up between them and then collects the answers at the end. It is very easy to use. You could also implement this yourself using Python's built-in [multiprocessing library](https://docs.python.org/3/library/multiprocessing.html), but that requires a bit more overhead in terms of learning the tools and how to use them. Both of those options only work for shared-memory environments. They won't scale beyond a single machine. If you are interested in extending support to computing clusters, then think about using the message passing interface (MPI), which can be used in Python via [mpi4py](http://mpi4py.scipy.org/docs/usrman/index.html) which is a widely tool in HPC for scaling Python applications over hundreds to thousands of computing nodes. However, this has an even higher learning curve, as it requires some understanding of MPI ([MPICH](https://www.mpich.org/) or [OpenMPI](https://www.open-mpi.org/)). A final option would be considering a Master/Slave framework where information is sent between workers and master in a server/client fashion. A few final notes: - If you implement a shared-memory solution, try avoid re-building workers if you can. These workers would be expensive to build after each generation, so you might only see pay-offs in speed once the fitness function execution times greatly exceed worker creation times. Sub-processes in python can send messages to each other via objects that can be pickled. See the multiprocessing library documentation for options. - If you implement a distributed-memory solution (which can also work on a single machine), workers can be created once and you can get linear speed-ups in terms of number of processors you use, regardless of fitness function evaluation. However, you have to be careful what information you send from one process to the next. This is because communication between machines is very expensive. If a population member has millions of parameters, sending it between all the nodes is very costly in time. There are ways [now to only send fitness and seed information](https://arxiv.org/abs/1712.06567), while letting each processes re-generate members rather than trying to send the whole member.
The English isn't great, but it's far from unintelligible. I'd recommend submitting PRs to help clean it up
Good just Dormammu won't put up with this a 1000 times as it would reach ax recursion limit. This would be a good exercise to learn some basic concepts of `asyncio` as you can kick off the loop and keep putting another task on the event loop (time loop?) until randomly Dormammu could give up and the run_until_complete would finally complete.
I like the idea, good job on getting this going! It seems like there's no reason to pass a parameter to the function. It could just be empty. I still like it though. 
So many people are shitting on this code. Yeah, it's ugly, but it's a beginner's code. Recursion is difficult to grasp for people new to programming so I say kudos to you for trying to implement something that uses it. Plus, when people focus so much on the ugliness of the code they're missing the best part. There is a 0.99% chance when this code is run that instead of doing what it's meant to do, it actually loops infinitely until it crashes due to a `RecursionError`. Which would take 2hr 12min 52sec ~ for it to reach.
In other languages it can even be atomic!