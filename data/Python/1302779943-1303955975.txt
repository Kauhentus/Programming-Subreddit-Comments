I agree and I have done that in the past, but using it kinda defeats the purpose of a learning experience, which is what I´m aiming for. SQLite bit me in the ass though. I had 4 processes writing to the same database and 4 processes reading from it every 30 seconds. Things would lock up from time to time.
How about BytesIO?
Ah, indeed. If learning is the goal then, well, other than learning SQLite, you won't learn much. And concurrent writes are not among SQLite's design goals. It does use a single write lock for the whole DB.
From Wikipedia: &gt; PyPy consists of a standard interpreter and a translator. &gt; &gt; The interpreter implements the full Python language in a restricted subset, called RPython (Restricted Python). Unlike standard Python, RPython is statically typed, to allow efficient compilation. &gt; &gt; The translator is a tool chain that analyzes RPython code and translates it to a lower-level language, such as C, Java bytecode or Common Intermediate Language.
Architecture design document answers a lot of your questions: http://codespeak.net/pypy/trunk/pypy/doc/architecture.html Also the "Differences between pypy and cpython": http://codespeak.net/pypy/trunk/pypy/doc/cpython_differences.html
pypy's not terribly complicated. the first thing you should understand is, that pypy is a name for two things, basically. first, there is the framework that allows you to write a language in RPython (which is basically Python with a few additional restrictions, like global variables must be constant, variables must never change their type, ...) and pypy will generate an interpreter for you (optionally including a JIT, sandboxing and/or the 'stackless transformation'). The other part is a python implementation. that is: all functionality of python and the standard library are re-written or modified to be RPython. What pypy (the translation framework) then does is it takes the RPython code and type-annotates every function. That means, that for every constellation of input types it finds (like the function frobnozzle was once called with an int and a float and twice with two ints and then another time with an int ant a long int or whatnot), it will figure out what exactly happens. Then the result is translated to C code and assembled into a binary, or into .net bytecode or into jvm bytecode. The result is a python interpreter that has any of the extra features you chose before translating, like the jit they're probably most famous for. Reading your question again, it seems I kind of missed the point, as you already knew of the interpreter and translator distinction, but I suppose I've given an okay overview over what's up.
You might find bitprophet's FakeFile he uses in the testing suite for Fabric useful: https://github.com/bitprophet/fabric/blob/master/tests/fake_filesystem.py
I found this article linked on this subreddit a couple days ago clarifying: http://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html
Easy: They did actually write PyPy in Python (RPython, really), and it did run on CPython at first. This made it 1000 times slower than CPython. Afterwards, they wrote an RPython-&gt;C compiler, which compiled PyPy (and itself) to C. So, you have an RPython-&gt;C compiler that can compile itself.
Package \`vanity\` has been downloaded 0 times! Hang on, that's impossible!?! ;)
PyPI only updates stats every 24 hours or so, so you have to wait a little while longer before it will report on itself :-) Wait… actually it should say: "No downloads. Are you sure `vanity` exists?" File a bug? https://github.com/aclark4life/vanity 
That's not *exactly* what's going on, but close enough. The language definition and the runtime are separate code-bases. Their tool chain makes it possible to pick and choose say garbage-collector, JIT compiler, language and make an interpreter binary with that combination. You could for example swap in/out different JIT compilers, garbage collectors, etc. without having to change the language.
More like scaling web sites coded in python.
No worries, I didn't actually run the code, just joking around a bit. :)
Heh ok that makes me feel better. Good one! :-)
PyPy the Python interpreter and toolchain was written in RPython, which is a subset of Python with some restrictions. This runs on Python (CPython initially, but hold on). This is how the interpreter can be tested, but it's very very slow. PyPy includes a tool to transform RPython programs to C programs (other targets exist too). The tool is also written in Python. This tool has features so that it can actually turn an interpreter for a language such as Python into a version of this interpreter with special features, such as a JIT, to make it faster. The JIT is generated as well. Initially the developers only had CPython to run their toolchain on. Now however they have the PyPy interpreter itself. PyPy is self hosting now, so can lift itself by its own bootstraps. If you start out with a binary PyPy interpreter (that you'd need to download or create from source using CPython) you can build a newer version of PyPy. Since PyPy has a JIT, this actually runs significantly faster than if you use CPython for the same job (and generating a Python interpreter can take a long time). 
I don't know if this will help you or confuse you more. But the general idea is described here: http://en.wikipedia.org/wiki/Bootstrapping_%28compilers%29#The_chicken_and_egg_problem And some further info: http://en.wikipedia.org/wiki/Self-hosting http://en.wikipedia.org/wiki/Meta-circular_evaluator 
Yes, I saw that and didn't quite understand what it meant, thus my questions.
&gt;this actually runs significantly faster than if you use CPython for the same job For some tasks. Every time I see a benchmark for PyPy, they always include that disclaimer.
I have nothing to contribute myself, but I don't see any way to contribute tutorials.
AFAIK, for now the author is accepting submissions by email, but later he will add contribution tools
It sounds like he's talking specifically about it being faster at building PyPy.
&gt; like the function frobnozzle was once called with an int and a float and twice with two ints and then another time with an int ant a long int or whatnot Wouldn't that imply that during the RPython -&gt; whatever platform translation process, the interpreter written in RPython would actually have to be *run*? And wouldn't it that also require to run the interpreter with real-world inputs, i.e. let the RPython-written interpreter interpret some real-world code? How else would you know what types are passed to all the functions?
I haven't tried this myself, but what about pipes? Initialize one and fork a process whose sole purpose is to write the output of the pipe to file. If the parent process dies, finish writing and close the file. 
Submission of tutorials is now explained on the website. Thanks!
Well, it specifically is faster for building PyPy. :)
http://stackoverflow.com/questions/81584/what-ide-to-use-for-python
Very nice interface. Would be super cool if there was collaborative editing. I know most of the time I'm trying to teach someone a concept it helps to see what they're typing. I know it's non-trivial to add something like collabedit's editor, but that coupled with a live interpreter and instructions could make this a killer way to learn python.
For some reason I read that as "lemonparty.org needs your help in writing tutorials!".
Unsure of if this helps, but your thoughts reminded me of a project I came across a bit ago: https://github.com/benhodgson/basin
What branch of python is the tutorial covering?
Why would you do this? The base is only a representation used when printing out the number, the underlying arithmetic is exactly the same, whether it works with binary or something else.
Why would you do this? The base is only a representation used when printing out the number, the underlying arithmetic is exactly the same, whether it works with binary or something else.
So the 'numbers' (representation of index) roll over when they get to a certain number.
This is more useful than i originally thought. I can use this. When the number gets over the number of characters in the set, it rolls over. so basin.encode(string.uppercase,17575) gives ZZZ Thanks a lot, this is perfect.
the translation process interprets the pypy interpreter in special way thats building a flowgraph, that flowgraph is then transformed in several iterations, until a backend can write out the code (c, java, .net)
these days pypy is twice as fast a cpython at translating pypy
It sounds like what you want to do has something to do with modulo math. Its fairly straightforward to take an integer and get the digits in any base simply by alternating between digit = x % base and x = x / base until x==0. If you only are caring about a particular digit you probably just want to do something like (x/ (base ** digit#)) % base instead of using a library or anything so heavyweight.
&gt; StringIO adds formatting codes No it doesn't You are probably being confused about the difference between str() and repr() &gt;&gt;&gt; s = "Hello'world" &gt;&gt;&gt; repr(s) '"Hello\'world"' &gt;&gt;&gt; s "Hello'world" &gt;&gt;&gt; `"\n"` **is** a newline. Now, if you saw `"\\n"` that would be a different story
You haven't answered why you want to do this.
so all those links to tutorials are empty?
`.update()` updates in place and returns None
Yes, but I don't think that makes it easier for the submitter :p
It's closer to three times on my old machine. May it rest in peace.
Yes, in general, across the space of "all Python programs", we're only usually faster, not universally faster. That said we consider any well-behaved program (i.e. one that doesn't monkey patch classes in the middle of their hot loop, call `sys._getframe()` just for funsies, or generally be crazy) that isn't faster on PyPy to be a bug, so let us know. We have enough benchmarks where we smoke CPython, we want ones that we have to work for it :)
I'm using/contributing to CubicWeb. The great points imho: * the selection/adaptation mechanism that help match result sets (query results) to views/forms/controller/whatever, and also data operations to hooks; AFAIK there is nothing like that in the other frameworks I've been looking at (the big ones in python land) * RQL, the data manipulation language; vastly simplifies data handling even compared to sqlachemy (also is not tied to an sql backend) It is basically a pleasure to work with. Overall I feel the other frameworks, even the so-called "full-stack" ones force the developer to think about way too many low-level details (all intro tutorials seem concerned about "routes" ... why would you think about that, at least when starting an app ?) :) Yes it of course not perfect but it's also one good and rewarding reason to contribute.
too bad its a django job ;-)
I don't get it...how is redirecting to file:///etc/passwd a security issue? Can't python scripts just open file:///etc/passwd directly anyways? It's not like the urllib sends the data to the server that redirected it.
A 'brute force' type script.
Not sure about this specifically but it looks like you can have a site with an iframe to your password file, and then submit it 
Wouldn't be too hard. You could either make a custom class with all the [usual magic methods](http://docs.python.org/reference/datamodel.html#emulating-numeric-types), or you could subclass float and customise \_\_str\_\_/\_\_repr\_\_ (screw with the appearance of the number, not the value)! PS. An easy way to map your symbols to decimal would be to maintain an indexed container (string, list, tuple, etc) of your symbols - eg, `my_symbols="0123456789abcdefgh"`, then convert decimal to your base with `my_symbols[decimal_to_convert % len(my_symbols)]`. Since this only handles the least significant figure, you could use a recursive generator to handle numbers greater than your base. I'll let you figure out fractions and negatives ;)
Maybe you're better off generating certain permutations of a specified character set, instead of couching it in base-n terms.
Depends on the machine. It's only 23% faster (2085 s vs. 2689 s) than CPython 2.7 on the computer in front of me.
The size of the file only matters if you need to read the whole thing into memory at once. I don't think you need to. You just want to open the original file read-only, open a new file write-only, loop over lines in the original file, and write modified lines to the new file. The easiest way is probably with the csv module. You could just use regular expressions or low-level string manipulation, but csv knows about things like escaping your column separator character.
the rpython code is run with cpython (for instance) or a finished pypy interpreter, that part is true. but it uses a special object space to do the type annotation, where an "everything" type is put in, that is able to record what exactly happens to it. i'm afraid this is where my knowledge of pypy-internals ends, but the infos are somewhere to be found on the website, i just don't remember where ;) if all else fails, you can drop by the pypy IRC channel
I am South African, speaking Afrikaans. I have been dreaming of going back to the mother land for a long time now and I am quite good with Python. I wonder if there is a way at all?
I'd like to see this take off. Thanks for doing this.
I have a text file that reads: line1 line2 And the following python snippet: f = open('text.txt') fake = StringIO.StringIO() fake.write(f.read()) fake.getvalue() And this returns: 'line 1\nline 2\n' Since I could see the "\n", it was actually printed out "\\\n".
That's why he needs help.
It's very easy. def symb(n): """Returns the symbol you want to use when n is less than your base"""" # Do anything you want here return "0123456789ABCD..."[n] def int2basen(i, base, s=symb): bf = "" while i &gt; 0: bf = s(i % base) + bf i = i / base return bf Try: s = lambda i: "oh- one- two- three- four- five- six- seven- eight- nine-" int2basen(8674309, 10, s) 
Not me, but now thats all I can see!
I am just starting to learn python so i have really nothing to contribute, however i would love to see this take off!
Saved this thread, I'll try to come back to it in my offtime and donate a little work.
You are in fact being confused about the difference between str and repr. Since you didn't actually print the string, repr was used. 
Wow, that worked too. Thanks for adding to my toolkit.
If you want to post some code to help me understand how to implement this using StringIO, it'll probably be more helpful than just telling me I'm confused.
Using blamarvt's [post](http://www.reddit.com/r/Python/comments/gq2by/implementing_basen/c1pf0uy) i can do it really well, and i understand it.
Pretty clear. What I don't understand -- and didn't find covered on the PyPy pages either -- what this "special way" means in detail: How can you know do type annotations + inference neither using static analysis nor actually running the code to be analyzed?
here is what sys.version had to say about it. &gt;2.5.2 (r252:60911, May 12 2010, 14:18:27) &gt;[GCC 4.3.1]
+1 to using the csv module. If you're stuff in in CSV format (or TSV) you can quickly parse each row of your infile to a dictionary. Then just check if the dict value is empty for the column you need, and replace it with a '.' If it's not a CSV file then something like this (untested) with open('infile.txt', 'r') as infile: with open('outfile.txt', 'w') as outfile: for line in infile: cols = line.strip().split(",") if cols[3] == '': cols[3] = '.' outfile.write("%s\n" % ",".join(cols)) Of course change the ',' to whatever you want to split columns on, and change 3 to whatever column you need.
What about the tutorials will make it different to the standard tutorial on python.org? If it's going to add something substantial, I'd be more than happy to spare some weekends to make live video tutorials/youtube videos, exams, problems and other nice stuff after my exams.
Is your interface secure? I'm a novice at Python but I was able to import os and get some functional information about your environment...didn't really try to do anything malicious, but have you thought about those who will?
I would be nice to report that a computation timed out. There seems to be a 30 second limit before a process is killed, but no notice is given.
What is "expected output" for? Isn't the expected output defined by the code block? If the idea is that the code block would contain incomplete code which the person would then complete and the 'expected output' would validate that the code were correct, I would caution that this is a very difficult thing to do. I participated in building programming contest software and automated verification was a very difficult task to do right and required that problems be written in excruciating detail so that the output format was completely described or you write a very complex regular expression that can recognize correct output. Alternatively you can do it TopCoder style where you write a function that returns an int or an array of ints which have unambiguous correctness - but that is not friendly at all to people new to Python. How do you, in the text, refer to other lessons? What about anchor points of other lessons? For example the lesson on list comprehensions would likely need to refer back to the lesson on lists. Either way, I think for getting this off the ground, a sandbox for would-be lesson authors would have substantial value. It really feels that writing lessons is something most appropriate to a wiki-style authoring tool where lesson-writers can collaboratively build the lessons.
Sadly, it's not :( The file starts out as an edf and is converted to asc, from which point it is translated into .out and then .obj. Thank you for the input, though! I do appreciate it :)
What you really want is the cartesian product of all elements in a 95 element list with itself repeated some number of times. There is a method in ``itertools`` conveniently named ``product`` that does exactly this. import itertools mylist = ['a','b','$','0'] for x in itertools.product(mylist, repeat=3): print ''.join(x) Will print all combinations of mylist that are exactly 3 items long and the method by which it works is a lot more clear.
Just because you don't understand it...
You don't have a problem, you are just confused about a fundamental python feature. &gt;&gt;&gt; s='hello\nworld' &gt;&gt;&gt; s 'hello\nworld' &gt;&gt;&gt; print repr(s) 'hello\nworld' &gt;&gt;&gt; print s hello world &gt;&gt;&gt; &gt;&gt;&gt; len(s) 11 &gt;&gt;&gt; len("helloworld") 10 &gt;&gt;&gt; s="\n" &gt;&gt;&gt; s '\n' &gt;&gt;&gt; len(s) 1 
I read that as well. I miss my grandpa.
Challenge accepted!
I have no idea (and I imagine others might not, either) about those file formats--are they text fies? And, if so, what do they look like?
i think the only situations that this is dangerous in are ones where you're doing something stupid let's say you're reading in their page and then printing it out, their page is a redirect to /etc/passwd (or whatever), then you end up printing out /etc/passwd even with the low chance of exposure, a pretty common sense fix that i doubt will break anything written by a sane person though
Let's take Imgur as a hypothetical example, suppose Imgur is written in Python, remember the function where you can upload an image with an URL? You somehow tell imgur to urllib grab file:///etc/passwd, and then somehow made Image generate http://i.imgur.com/xxxx.jpg with actuall /etc/passwd content in it. Also it's fun to mess with crawlers written in Python by 302 it to /dev/zero
That explains why I clicked on them and nothing happened. Thank you.
don't assume things, I even developed apps for it.
Sigh, if you care to reread my original post, the problem was that the only the only parser that worked (that I knew about at the time) needed a file type and wouldn't take a string type. StringIO was a module that was designed to do this but I couldn't get it to work because I didn't know how to get it it to print the string without the "\n" and other escape characters. If you have a working example **THAT USES STRINGIO** module, that would help my original problem. If not, all this about str vs. repr (although interesting), has zero value to my original problem.
&gt;you can build a newer version of PyPy. Since PyPy has a JIT, this actually runs significantly faster than if you use CPython for the same job OK, but correct me if I'm wrong here, but why would you even want to build PyPy with CPython? Wouldn't you only care about how fast PyPy and CPython could run your Python code? Or let me rephrase this - are you saying that the benefit with PyPy is that you can modify your Python interpreter much more easily with PyPy than you can with CPython because with PyPy, you can do it in regular old Python code (RPython) as opposed to hacking CPython in C? Now, it also seems that a goal of PyPy is to be an all purpose Python environment (interpreter) which is faster than CPython. I also understand that it's not universally faster than CPython yet. But let's say, I'm some developer and I need to write a script/app in Python, some utility script for example. If I'm using PyPy, can I write my script's code in regular Python or do I have to use RPython?
&gt; I didn't know how to get it it to print the string without the "\n" and other escape characters. I just told you why that was. It has nothing to do with StringIO. &gt;&gt;&gt; s='hello\nworld' &gt;&gt;&gt; s 'hello\nworld' &gt;&gt;&gt; print s hello world 
How exactly does your bit of code help me pass a string type as a file?
Well before PyPy was translated for the first time you needed to use CPython to translate it, after all what other Python interpreter would you use! When you use PyPy you have an interpreter that like CPython executes normal Python code, just faster. RPython is purely an implementation detail, "we write RPython so you don't have to" in the same way as the Jython guys "write Java so you don't have to" etc.
Oh thank god, a non-silverlight python interpreter in the browser. Yay.
Am I missing something here? This site is broken
I'm not talking about it's technical merit, but why people use twitter..
i am not a web programmer, could someone please explain what: &gt; TUTORIAL HTML TEXT WITH P AND CODE BLOCKS means, and if it is simple give a brief example
I just wanted to make sure I wasn't losing my mind.
That's because it seems to be a Google App Engine app. In App Engine, processes started on the server to answer requests can't last more than 30 seconds. 
Well, 2.7 or 3.x would have been nice.
What format is the Python program going to be parsing? Edit: it'd be helpful if you gave an example of what your input looks like, what you are searching for, and what you would replace it with.
how do we know which ones need submissions?
You don't need a new "base system". Integers are stored "in binary" internally and represented in base 10. What you're interested in is just the representation. The arithmetic stays the same. What you're looking for is called "arbitrary base conversion". There are a few recipes for that on ActiveState and I'm sure someone's written a Python package to do just that. In any case, the workflow will probably be like this: * you keep an integer around, which you do your maths with * you pass the integer and the character set of the base to a base converter * you do something with the resulting string (e.g. print it or display it) In order to have a base of 95, you would need a character set of 95 characters (numeric, lower alpha and upper alpha add up to 62; no idea where you want to get the other 33 from). For something as you describe in your example, you'd use a base of 26 and represent the "digits" with lowercase alphabetic characters (e.g. `string.ascii_lowercase`).
the special way is interpreting functions with the flowgraph objectspace instead of the normal python objectspace its done in iterations, types are inferred and propagated back
windows or os x?
It's easier from Schengen countries, of course, but it may be possible. I've sent you a message with more details.
It's AppEngine (I recognize that release and build string)
A few things. First: nice. Second: Comparing the users solution to an answer is going to start getting very complicated with more sophisticated solutions. You may want to change the format to show on the right the theory and just have the user fill out the code on the left. Last is that since you are using the Python logo and trademark you might want to put a 'not affiliated' disclaimer in the footer, this is just to be safe on not step on any toes.
symb() doesnt work if n is larger than the length of the string.
95 is string.pritable minus \t\n\r\x0b\x0c
Of course, I put symb as an example, but you need to provide your own.
That is a really really clever idea. My python-fu is not sufficently good to write tutorials I am afraid but I will watch with interest.
AppEngine anyone?
It's a google application site so you are limited in what you can do. Mind you I did get the cwd, a list of files and read all of them so if I were a jerk I can no make an exact copy of his site. I don't think anyone will harm Google's infrastructure but if I had to guess I would assume they could ruin his application quickly (ie does google let you write to deployed files through the application?). I won't attempt to ruin it for him because I like what he is doing for the community but I think he should put some logic in there to catch certain commands.
I like your site and will probably contribute when I get time but you really should put some checks to stop people from running anything Google allows and getting the contents of your deployed application. I was able to to read all your files. It will only take one person to be a twat and attempt to write over them (assuming Google allows that) and I would hate to see your positive contribution to the community get crapped on by a bunch of children.
I buy all my 90s tight jeans on vinyl.
What the other poster said: you'd want to use CPython to translate PyPy because a faster PyPy interpreter didn't exist yet. There are several benefits to PyPy, a few would be: PyPy can deliver a faster Python interpreter, and the PyPy interpreter is probably more hackable as its being written in RPython. And they don't have to write a JIT for a language by hand as they generate it automatically - of course they do need to maintain the JIT generator. :) You can use PyPy's python interpreter, and for pure python 2 code it should be drop-in compatible. The main area of compatibility trouble at this point is C extensions, as those don't port over readily to PyPy yet (some work is being done in that area). RPython is only for those who want to work on the PyPy interpreter (or interpreters for other languages). 
Ubuntu
I'd love to contribute, but I'm not sure what you expect in a lesson. Should I give a block of text for the actual lesson, and then some broken code that needs to be fixed using notions from the lesson?
learnpython.org looks too much like lemonparty.org
 some_function(StringIO.StringIO("some string"))
Site is throwing a lot of JavaScript errors, I'd love to send it to a friend TypeError: Result of expression 'tutorial_data[chapter]' [undefined] is not an object.
Great module, but this has been around since forever. I used this in freshman physics back when I was an undergrad five years ago.
This isn't bulletproof, but I'd try handling the SIGTERM signal using python's [`signal`](http://docs.python.org/library/signal.html) module ([PyMOTW article](http://www.doughellmann.com/PyMOTW/signal/)), and doing some cleanup before exiting. You'd still get errors on SIGKILL, but that's kind of the point of SIGKILL anyway. 
How is the data formatted? Is it Ascii, UNICODE, or ??? ? I suggest using VIM, SED, or EMACS search and replace.
Hi! The data I'm working with is Ascii. I'll reply to someone else's question with an example of how the data looks I think I will try EMACS - I'll report back if it works!
Sure! They're all Ascii text files that are basically many, many, many rows that look like this (&lt;tab&gt;=actual tab, not string): Werjxb &lt;tab&gt; 1 &lt;tab&gt; 2 &lt;tab&gt; Word &lt;tab&gt; 1 &lt;tab&gt; 0 &lt;tab&gt; 1 &lt;tab&gt; 0 &lt;tab&gt; 4 &lt;tab&gt; -455.38 &lt;tab&gt; 388.99 &lt;tab&gt; 1 &lt;tab&gt; . &lt;tab&gt; . &lt;tab&gt; Word &lt;tab&gt; 3999 &lt;tab&gt; 292323 &lt;tab&gt; . &lt;tab&gt; . &lt;tab&gt; 1 &lt;tab&gt; 0 &lt;tab&gt; 1 &lt;tab&gt; 0 &lt;tab&gt; The problem is that some of those '.' are missing, so all the tabs get messed up/the script won't translate one of the Ascii files into an Excel file. I'm thinking I need some sort of Find-and-Replace technique to put those periods back in to make it work.
Yes indeed! They are Ascii text files.
I wouldn't even bother with Python, then--sed should be able to do it absurdly easily--something to the effect of: sed -i "/\t\t/\t.\t/" FILENAME (Obviously, you may need to modify this.)
The expected output literally referrs to stdout output. So a code block could be something which prints out an empty array, and the task would be to fill the array. The expected output should be the array representation with the correct values. About the authoring tool, please describe how such a collaboration tool should work. Thanks!
people use it because it became popular, same reason the use facebook and used MSN, ICQ and a whole lot of crap. you don't have a point, stop trying to look mysterious. "..."
I love sed; especially when combined with find and xargs. Edit 1600 files in a few seconds? Sure why not. Sometimes people forget that using the shell can be a much easier option.
 #!/usr/bin/env python3 print("Hello world") Go read [Learn Python the Hard Way](http://learnpythonthehardway.org/index), type in all of the examples, and do all of the exercises. When you finish you'll know Python.
[diveintopython](http://diveintopython.org/) is the best place to start. ([direct link to the online version](http://diveintopython.org/toc/index.html)) Then it depends on what you want to use python for, if you're interested in web development, try a few web frameworks, if you're interested in game development there's pygame, and so on... Come back after you've gone through diveintopython :)
is python interpreted or does it need a compiler?
it's interpreted
google "python tutorial"
And MSN and ICQ were quite useful before their more modern counterparts replaced them. I'm just saying something quite simple: just because *you* don't like something ("X is shit, any mention of X I will automatically dismiss as WTF"), e.g. Twitter, does not mean other people could not and have not found uses for it (in this case, an outlet to showcase someone's wit and humour). Again, just because you don't understand it... 
anything else i should know?
Go to the website and go through its many tutorials and documentation.
There are a lot of people learning Python on my social learning website here, if you're interested: http://curiousreef.com/class/mit-opencourseware-600-introduction/
The first time you run a python program it is automatically compiled to byte code (.pyc files) and then interpreted. So it's kind of a both, interpreted and compiled. This information could have been easily found with google or from the official python documentation. I know the documentation on python homepage can be a little tedious at first, but you really should read it, as it answers all the basic questions. It also corrects many common misunderstandings about the language.
Dive Into Python is both old and rather misleading, it's definitely not the thing to recommend, especially to new programmers.
Unnecessary. I'd downvote this twice if I could.
 &gt;&gt;&gt; is python interpreted or does it need a compiler? True
okay, didn't realize it wasn't updated :) (in my day i found it rather useful)
 Watch google's intro to python lectures, they are fantastic: http://code.google.com/edu/languages/google-python-class/ And watch python osmosis, because it's great too http://www.youtube.com/user/ryanmshea Between the two you should be great
i did some 'tests'. It appears he's disabled write-mode on open files.
&gt; So a code block could be something which prints out an empty array, and the task would be to fill the array. The expected output should be the array representation with the correct values. Exactly how should I print the filled array? ``print my_array``? What about ``print ",".join(my_array)``? Or maybe ``for x in my_array: print x``? Possibly ``print '[' + ', '.join([str(x) for x in my_array]) +']'`` which will give the right output if all your array values are numbers, but fail for strings. This problem is deceptively difficult. &gt; About the authoring tool, please describe how such a collaboration tool should work. Take your favorite wiki software and make the lessons be pages from the wiki. Everything else is taken care of for you. The wiki software already has a facility to revert changes, hold discussions, maintain consistent look of pages and reference anchors in other pages.
that's why there is http://diveintopython3.org/
Unless it removes the GIL and allows the use of more than one core then it won't make much of a difference.
Thank you. I was going to write something similar to this this weekend to integrate movie reviews into [What's New On Netflix](http://whatsnewonnetflix.com). I'll likely use this as a starting point instead, and I'll try to contribute any additional functionality I end up writing.
No problem. Sounds good to me, man.
Agree -&gt; Python Osmosis Python 101 and 102 on blip.tv are good if you're new to programming 
You can't put put values into StringIO or get its value by calling a string. Would you care to try again?
If you say so chief. I give up, your mind is too closed.
You should just post questions in this thread :D
Can I just say you totally missed a golden naming opportunity here to call this API "[Killer Tomatoes](http://en.wikipedia.org/wiki/Attack_of_the_Killer_Tomatoes)"? 
Hm, I hadn't even considered that! Thank you
Haha, damn. Too true.
If you tried solving the problem with my original constraints: * Need to pass a string type as a file type * Need to pass the string in a manner that the parser would understand You'd find that, although your technical analysis correct, does nothing to resolve my problem. If you still think my "mind is too closed" is too closed", try coming up with a workable solution that functions under the above constraints. Then I'll be willing to listen.
&gt; * Need to pass a string type as a file type some_function(StringIO.StringIO("some string")) &gt; * Need to pass the string in a manner that the parser would understand some_function(StringIO.StringIO("some string"))
read this: http://learnpythonthehardway.org/
bullshit. Twitter hasn't replaced anything, the fact that people use it does not mean it has a use on its own in fact it means that people will bother to adapt whatever they think it's "cool" just to be part of it. do you know that in Africa Yahoo mail is the most popular webmail client? and it is crap, same as MSN and yet both were quite popular so what's the point? people do what others do and it has nothing to do with the merit of the product itself (which is none in this case). again: stop assuming things, you don't know what my understanding is.
The proof is in the pudding. Show me **working** code and I'll believe you. As it is, the code you provided does not work: Import StringIO print(StringIO.StringIO("foo")) &lt;StringIO.StringIO instance at 0x7ef45c2c&gt; 
Can this be of any use in the real world? Judging by the examples I'd say the shell command versions are much better.
I think this is a great suggestion! Then you could always PM users that tend to work well with your learning style?
This particular script seems cumbersome, but I have made a similar script once that is easier to use. It is helpful to get things done if you are proficient in python but not in, say, awk. 
Turtles all the way down.
Aha. So I suppose it would have to be: temp = target.copy(); temp.update(original); original = temp Nowhere near as elegant.
I would agree. Plus if you are that good at Python scripting why not write the code you need? Keep a template or snippet file around to make it fast and easy. Frankly I don't see a lot of value in some of these old UNIX tools anyways. Some of them are very difficult to remember how to use effectively. In the end I most programmers would be better served learning a good scripting language such as Python or Ruby. 
This article and announcement really confused me. Google has many APIs across a broad spectrum of products. What exactly are they referring to? In answer to my question, I found this: http://api-python-client-doc.appspot.com/ So it appears this covers a random handful of some of their products.
They were up on blip.tv within days of the conference ending mate - this is Will importing newly OGG-encoded versions to Miro Community (for better category/searching, the ability to annotate, etc). 
What do you expect to happen when you pass a file type to print?
Excuse my ignorance, but what can you do with this?
And *you* succeeded very well. At least the Haskell and GNU Smalltalk language implementations were wrapping GMP, so it didn't seem reasonable that C or C++ or other languages which don't have a representation for arbitrary precision numbers should be unable to use that same library. And for language implementations that do have a representation for arbitrary precision numbers we have the opportunity to see how that performs compared to calling out to a native library (and see what that code would look like). And the measurements can be used to make the obvious (once someone forces you to look at it) point that a Python program that mostly calls a native library like GMP performs very much like a C program that mostly calls a native library.
"Google APIs Python Library goes to Beta" And then stays there for the next 5-8 years.
&gt; a brilliant hack occurred to me: use ctypes to call libc's write() function *Really pure* Python!
From the docs: &gt; The Google API Client for Python is a small flexible client library for accessing the following Google APIs: Google Buzz API Google Latitude API Google Moderator API Google Diacritize API Google Translate V2 API Google Custom Search API Google Search API for Shopping Google URL Shortener API Google Prediction API 
Bad example. Try this out: import StringIO f = open('text.txt') fake = StringIO() fake.write (f.read()) h = open(fake()) Now if you want to show me a actual working example of using StringIO to read text with newlines, special characters and have it print it out without "\n" or escape characters, I'm all ears.
No problem. As much as I love Python (and believe me, I do) there are sometimes easier ways to do things--and (Li|U)nix is full of 'em.
&gt; h = open(fake()) What on earth did you expect this to do? fake is a StringIO object. it acts like a file. It is not a function. it does not need to be opened. &gt;&gt;&gt; def some_function(f): ... print 'file contains:' ... print f.read() ... &gt;&gt;&gt; some_function(open('/etc/resolv.conf')) file contains: # Generated by NetworkManager domain lan search lan nameserver 192.168.5.1 &gt;&gt;&gt; import StringIO &gt;&gt;&gt; some_function(StringIO.StringIO("Hello\nWorld")) file contains: Hello World &gt;&gt;&gt; &gt; print it out without "\n" or escape characters I've told you 4 times now that StringIO has absolutely nothing to do with escape characters and you are confused about the difference between str and repr. &gt;&gt;&gt; s=open("/etc/resolv.conf").read() &gt;&gt;&gt; s '# Generated by NetworkManager\ndomain lan\nsearch lan\nnameserver 192.168.5.1\n' &gt;&gt;&gt; print s # Generated by NetworkManager domain lan search lan nameserver 192.168.5.1 
I would be embarassed if my python code looked like that. It looks like it was obfuscated by a Java programmer. See below for example from the site: FLOW = OAuth2WebServerFlow( client_id='433807057907.apps.googleusercontent.com', client_secret='jigtZpMApkRxncxikFpR+SFg', scope='https://www.googleapis.com/auth/moderator', user_agent='moderator-cmdline-sample/1.0') gflags.DEFINE_enum('logging_level', 'ERROR', ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], 'Set the level of logging detail.') def main(argv): try: argv = FLAGS(argv) except gflags.FlagsError, e: print '%s\\nUsage: %s ARGS\\n%s' % (e, argv[0], FLAGS) sys.exit(1)
&gt; I've told you 4 times now that StringIO has absolutely nothing to do with escape characters and you are confused about the difference between str and repr. When the only methods StringIO uses to print its content is repr, it doesn't matter whether I'm confused or not. FFS, are you trying to help me or win an argument? Here's what it boils down to: **Show me a working example where StringIO prints multiline text without "\n".**
w00t. Looks like we might the awesome eflo to talk about making smart technological decisions in the storm of staring a company.
How many times do I have to show you this: &gt;&gt;&gt; x="hello\nworld" &gt;&gt;&gt; x 'hello\nworld' &gt;&gt;&gt; print x hello world &gt;&gt;&gt; This is a basic python feature and has absolutely nothing to do with StringIO. Stop pretending it is not relevant to your problem and actually make an attempt to understand it. This has nothing to do with winning an argument, this is about you failing to understand one of the most basic features of the python shell. &gt; Show me a working example where StringIO prints multiline text without "\n". StringIO does not 'print' anything. StringIO is a string that pretends to be a file. I showed you an example where a StringIO object contains a newline and is printed without issue two posts up. Again, this 'issue' that you have invented has absolutely nothing to do with StringIO.
Blog post about the script [here](https://ubuntuincident.wordpress.com/2011/04/06/wallpaper-downloader-and-rotator-for-gnome/).
&gt; I showed you an example where a StringIO object contains a newline and is printed without issue two posts up. In what universe does this actually work? You can't put values into an StringIO instance by calling a string. Do you even know how to read and write values out of StringIO instance? import StringIO some_function(StringIO.StringIO("Hello\nWorld")) This is one of those times where a simple **working** example would clear everything and I've asked numerous times for some working code that involves StringIO to demonstrate what you say. However, you've always come back with string operations as proof, which doesn't do me a lick of good. Seriously, because of the constraints of the problem and StringIO, your point may be technically correct but not relevant to me. If I'm wrong: **Show me a working example where StringIO prints multiline text without "\n".**
I think this would be useful for a group where most users are only marginally familiar with python but quite familiar with bash/awk and there is a significant amount of bash processing. But on average, it's just as easy to write a standard python script which can behave exactly the same way. Things like this tend to crop up when the mentality of the programmers are not embracing pythonic programming.
Will be a late answer, sorry but well.. okay then, i think i'll be removing the payment options at this stage. Though I don't think it's unethical to ask for money for unfinished software at all but maybe, giving it a second thought, it was just bad taste. Thanks for the heads up. nb. no, thantik is not shilling at all. 
Yep, payment stuff is gone.
&gt; In what universe does this actually work? I pasted it right from the shell. &gt; You can't put values into an StringIO instance by calling a string. I'm not calling a string. Calling a string would be "string"() I am calling the StringIO constructor with a string as an argument. How the bytes get into the StringIO instance are irrelevant. &gt; This is one of those times where a simple working example I gave you a working example. Apparently in your universe it does not work. &gt; Show me a working example where StringIO prints multiline text without "\n". StringIO **does not print anything**. I gave you an example where multiline text was put into a StringIO object, read back out, and then printed. here is another example that shows once again that StringIO is irrelevant to the 'problem' of multiline text &gt;&gt;&gt; import StringIO &gt;&gt;&gt; s="hello\nworld" &gt;&gt;&gt; s 'hello\nworld' &gt;&gt;&gt; print s hello world &gt;&gt;&gt; StringIO.StringIO(s).read() 'hello\nworld' &gt;&gt;&gt; print StringIO.StringIO(s).read() hello world &gt;&gt;&gt; 
Thanks for that. I wish you'd provided this about 8-9 replies before though.
&gt;dicList is a class attribute. &gt; &gt; class IContainer: &gt; def __init__(self): &gt; self.dicList = {} Dunno if you saw that yet 
pip install xxx pip freeze &gt; requirements.txt Check requirements.txt into repo.
probably because of this http://xkcd.com/353/
Python is *not* fast.
I'm in a similar boat and I've been learning using MIT OCW program. Specifically [6.189, a Gentle into to Programming using Python](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-189-a-gentle-introduction-to-programming-using-python-january-iap-2010/) It's been great so far. Pretty simple overview of the language. Following that I might do 6.01, which has video lectures, etc. But some of the other ones in this sound interesting too. Pretty awesome the opportunities we have for learning new things these days.
what is a "console handler" ?
Was it really so sudden? I don't know why everyone is saying Python has 'corporate backing' from Google. I've never seen them evangelize or promote it the way eg. Sun did with Java. They have Python in their code base so it's in their own interest to hire the best Python coders but I don't see as to how they have a vested interest in anyone else using it. I guess one might argue it helps you get a job there if you know Python and that's de facto backing, but that means that C++, Java and Javascript have 'Google corporate backing' which doesn't seem right.
Don't know why this is downvoted, historically it's not particularly fast even for an interpreted scripting language compared to Perl or especially Lua and LuaJIT.
Well it is one of the two languages available to use on their app engine, and the fact that it's one of their primary "approved" languages lends Python credibility, but I agree they haven't really *promoted* Python.
Overnight success takes 10 years on average.
Django happened in 2005
For me it was Jython then Django that hooked me around 2005
Don't know why you were downvoted either. But it belongs in that class of languages that you just don't use if speed is a big deal. Compared to (say) Ruby, however, it's a fast as hell. And much easier to maintain than perl. Lua rules. That we ended up with Javascript as the scripting language of choice is a sad testament to the politics that run the IT industry.
You missed all the other qualifiers... &gt; Python is an OOP interpreted cross platform fast language. Can you name any OOP interpreted cross platform languages that are faster?
I'm sorry, but I gave up on Lua the moment I realized arrays start with an index of 1.
[Wow, two people in one thread? If your in /r/pics you should have seen this, but just in case.](http://i.imgur.com/rPsIg.jpg)
Pffp, like I care. It's not like you can buy beer with them or anything. OTOH, if you can buy beer with them please clue me in.
That's okay as long as you never complain about anyone else giving up on Python the moment they realize whitespace is significant.
The update is diveintopython3.
Scientific perspective: 10-11 years ago, I needed to replace IDL with a non-proprietary scripting language. Choices (at the time, if I remember) were PDL (perl based) and Python+Numeric. Hadn't done much matlab at the time, so Octave wasn't for me. When I also discovered wxPython, the balance started tipping... then there was VTK and the interface between Python+Numeric and C was piss easy compared to IDL, even without using SWIG. That's what sold it to me. Not sure at which point Python became *really* popular, but for some tasks, v1.5-1.6 (around 2000) were already very neat and polished.
This is why I keep an interactive Python shell open at all times. There are times when it's easier to do something along these lines in Python than bash, but doing it as a series of command line arguments is crazy. Just make a convenience function to let you write and read the clipboard. For example, on my computer, if you do `cb.formatlines("&gt; {count}. {line}")` it will change each line of text to begin with "&gt; 1. " "&gt; 2. " etc.
Does Lua count as OOP?
Starting with an index of 1 makes more sense. It's only because other popular languages start with zero that we think it's normal, but it's totally bizarre. Especially now that we're not doing crazy pointer arithmetic like C does. 
Because is so sweet and awesome? But seriously now, gtfo with posts like this, it only makes me sad that my job is with PHP. Where i live it seems that people don't even know that Python exists. 
With Cython, numpy and pypy, I would say python is as fast as you need it to be. 
Somebody else who's programmed IDL! Hi.
Java is bytecode-interpreted in much the same way as Python is, and Java is much faster than Python. In any case, "interpreted" is not a language feature. "Dynamic" is a language feature, and it makes Python implementations slow.
You dont care? Thats a downvote.
&gt; Starting with an index of 1 makes more sense. No it doesn't. Starting index with 0 makes things easier if you look at from mathematical perspective. It's not because C does.
&gt; Can you name any OOP interpreted cross platform languages that are faster? I'm sure that wasn't the intent of the comment. The post was saying that Python is an interpreted, OOP and fast language and naming them as plus points in favour of the language. My entire point was to ensure people don't end up misunderstanding things. Python is a fast language? Faster than *what* exactly? Also, speed isn't an attribute of the language but its implementation. It just so happens that for conveniences sake we end up clubbing together the language and its famous/default implementation.
I would love to see some example on what you can do with the hooks. If it's close to being able to implement ome of the recipes that are provided with buildout, I'd be interested in switching. 
The fuck? How does "the first element of the array is at position zero" make more sense than it being at 1?
... and PV-Wave too :-) I was unfortunate enough to have to interface C code with IDL (sparse matrix solvers if I remember). Even without going full-monty (ugly call function instead of an IDL function name), that took a lot of time. In comparison, the only "difficulty" with the python/numeric/numarray/numpy is to remember to call import_array(). How cool is that for an interface? :-)
I'd like to know this also. Matlab starts at 1 which I've found to make a lot of sense, even though I pushed back at first.
There's a good explanation of the mathematical reasons here: http://stackoverflow.com/questions/393462/defend-zero-based-arrays/394502#394502
Turtles all the way down.
+1 for sweet and awesome -1 for gtfo
* Their API libraries consistently supported Python * Their open source libraries usually include Python scripts for management, even when they are not Python libraries (e.g., Closure Compiler) * App Engine started with Python I'm sure Google helped a lot to increase Python popularity, but there're other factors of course.
Although made for their webapp framework, it is not heavily tied and the core of ProtoRPC can be used by other frameworks. For this, two modules that are very webapp-specific must be re-implemented: forms.py and service_handlers.py. Just FYI. :)
Personally, I think it's something that will always start an argument in programmer's circles and that there will always be reasons for both sides to stick with 0 or 1. I was citing Matlab as a language where one-based numbering works, albeit it might not fit with everybody's style.
it is because the new generation did look for something better, something not complex, something easy, something suitable for both web and desktop than the popular ones. this is why both python and ruby is so popular.
I'm not looking for karma, i'm looking for Python. And my intent wasn't to offend anybody, it was just me being jealous on those who get to use it at work too. 
whitespace isn't significant.... identation is (I say it because a lot of people quit complaining hen they learn this)
Also, Guido van Rossum is employed by Google to basically maintain the Python language. That's some serious sponsorship right there :)
" if the TIOBE rankings quantify anything meaningful." short answer: no they don't, no they won't ever be meaningful 
I prefer the way Maven does in Java world: define a dependency descriptor and let Maven manage it. I don't think it's a good manner to store libs in a VCS. 
Lisp: The fast (compiled) dynamic programming language.
&gt; "Dynamic" is a language feature, and it makes Python implementations slow. Except for [PyPy](http://pypy.org/features.html).
Here's [Dijkstra's definitive paper](http://userweb.cs.utexas.edu/~EWD/ewd08xx/EWD831.PDF) on this. Edit: corrected the spelling of his name. I thought it was wrong but was on my iphone and didn't check... it was hard enough to cut and paste the link to the PDF :)
Quoting from PEP 3148: Motivation """Python currently has powerful primitives to construct multi-threaded and multi-process applications but parallelizing simple operations requires a lot of work i.e. explicitly launching processes/threads, constructing a work/results queue, and waiting for completion or some other termination condition (e.g. failure, timeout). It is also difficult to design an application with a global process/thread limit when each component invents its own parallel execution strategy.""" There's also: """We hope to either add, or move existing, concurrency-related libraries to this in the future. A prime example is the multiprocessing.Pool work, as well as other "addons" included in that module, which work across thread and process boundaries.""" Currently multiprocessing handles the threading API and then some. A goal is to move the "and then some" to futures so they can be shared across both threading and multiprocessing, and perhaps have an API which also works with Stackless/threadlets/Deferreds. 
Ask Malcolm Gladwell.
Yeah, I inherited an old ugly bloated program, and rewrote it in python in 2 weeks(Python was still new to me) with some new features, and my boss made me go back to IDL, which took me much longer. That's when I stopped liking my job. When I found out the license cost over $2k I almost shit bricks; matlab is better imo and doesn't cost that much iirc. I can't imagine having to delve into C interfaces with IDL, and I am glad IDL is no longer a part of my job. It's the only language I know that isn't on my resume.
Other than a tipping point in general is there anything in particular you'd like to ask him?
For me it was it's integration into all the 3D software I use at work. Maya and Motion Builder.
who the fuck is Malcolm Gladwell.....
Python has not suddenly gotten popular. It has however been *gradually* getting more popular. Especially among those new to programming. And, as long as we're posting landmarks, one in 2000 was ESR's ["Why Python?"](http://www.linuxjournal.com/article/3882). 
"How to think like a computer scientist" was the first CS book I read (I was in highschool). This is what got me started on hacking, in general.
When was this comic published? 
Arch Linux AUR package in progress (unofficial packages).
Java people jumping off the Oracle ship?
Python's popularity owes a lot to the particular way in which Perl developed and, eventually, stopped doing so. Perl had tremendous critical mass amongst systems administrators for years, but after many, many years of dealing with its syntactic oddities most folks in the Unix community were tired of it. Many of them were more than happy to sacrifice a little execution speed to gain the kind of readable, maintainable codebase that Perl never seemed to allow.
Yeah, I don't really remember "suddenly" happening. I discovered Python in '98, and it's been gradually getting more popular ever since. I think many factors were involved, as Python tends to be good for a wide range of programming tasks and has a large collection of libraries. The curve's probably not entirely linear though - growth's been picking up. 
and after a line continuation. i'm with you, when someone says that python sucks because of the indention thing, i think of all the asinine ways other languages break up blocks.
you've linked to their channel, not a specific video.
Doesn't seem that sudden to me - excepting for the last few years. The year ROR came out it seemed like Ruby came out of left field was was getting ALL of the attention for a while. And now it seems to have dropped considerably.
[Here's the actual video](http://www.youtube.com/watch?v=URFdxfcTZgU)
Turtles all the way down.
What API libraries did they have in 2005 when the question asserts Python took of? App Engine certainly didn't appear until years after that. Their open source libraries include Python scripts because they use Python. Google using them is certainly an *endorsement* of Python, but I wouldn't call it corporate backing.
&gt; App Engine certainly didn't appear until years after that. You can see from the Tiobe's "Long term trends" graphic that a big boost happened in 2008, when App Engine was released. App Engine attracted attention to Python in other developer circles ("Hm, this is a language I should learn one day"). But again, there are other factors. &gt; Google using them is certainly an endorsement of Python, but I wouldn't call it corporate backing. Google sponsors Python since 2004. Microsoft, since 2006. I'd call this corporate backing. http://www.python.org/psf/members/#sponsor-members
Doh, no shame in being schooled by Dijkstra I guess :\
PyPy seems to have disappeared from [The Computer Language Benchmarks Game](http://shootout.alioth.debian.org/) (which is a terrible way to compare language speed anyway), but I'm pretty sure it's still much slower than Java. Don't get me wrong - I love Python, intensely dislike Java/the JVM, and have high hopes for PyPy but it's not there yet (and I'll be surprised if it ever surpasses Java performance).
anyone got a tl;dr (or tl;dw?) for me?
This is almost as old as /r/Python
The PyPy folks have been having some discussions lately with the shootout folks about samples which are highly optimized for the CPython implementation and assume quite a few of its implementation quirks.
Ugh, don't let Djikstra throw your good sense out the window. The man was a brilliant as computer scientist but knew jacksquat when it came to computer programming. Computer science is a branch of mathematics--Platonic, eternal, perfect. Computer programming design means creating a human interface--empirical, imprecise, fuzzy, subject to revision. Once you look past the math and his pretty handwriting, Dijkstra's explanation of why indexes should start from 0 is asinine. He think it should because of how we might write &lt;= in math. What does that have to do with an array? Why should that change the fact that the first item in the array should be item #1? The only reason for arrays to start with 0 now that we don't do pointer arithmetic is that it's a tradition programmers already used to. There's no other good reason for it, but people will swear to their graves that Djikstra's ghost told them otherwise.
How about: 1. A Python baby weight tracker. 2. A Python "when does mum need a treat" generator. 3. A Python "It's my turn to change the nappies" reminder. 4. A Python "Breast may well be best, but stick a rough bull clip on your nipple and pull it off quickly" sympathy reminder. 5. ... Congrats on the baby :-) 
There is a lack of good open source software for little kids. I remember as a kid playing an awesome (text based graphics) "game" where you had to do things like move a character around a grid, eating numbers (the math equation at the bottom like "4x3=?" and there would be a 12 in one of the grid squares next to you, player on the right used the arrow keys, player on the left used asdw to move around the grid). We played that thing obsessively (and incidentally drilled our multiplication tables to a degree we wouldn't have otherwise done). There's a million simple variations on this (you could easily extend this type of trivia/move the character game to include state capitals, countries, any type of fact/etc.). Build a little game engine, people can produce region/content specific lists of questions and answers and voila. 
Who the heck cares what a baby python weighs? And when would a python treat your mum? Who changes a python's nappies? And I'm not sure I even want to think about a python's breasts...
Eric Idle is funny. And he thinks he should check out Alexis Texas.
make a game for your kid man, I think that'd be a great place to start for inspirado. He/She is going to love it, and hey; when you bring home a wicked new mathblaster home for dinner, your wife pretty much has to present you anal. EDIT: http://inventwithpython.com/chapters/
Work on Python itself, we can always use the help.
Reimplement RAR compression (or any other compression) in pure python.
That's not a bad idea... I'll start looking into it.
consider yourself lucky, I wish I'm getting paid to code Python
3 years ago: http://www.reddit.com/submit?url=http%3A%2F%2Fxkcd.com%2F353%2F
what's a toolchain ?
define moderator, event please
Moderator is any user that is in charge of an event. They can be an admin, or just a trusted user. The idea is that these people will be responsible reporters of the results. Event is any competitive activity you want to track, and any league thereof. The terminology is admittedly a bit strange, but that's what I decided on, since I couldn't come up with anything else that would encompass everything I wanted it to be. "League" might be too formal, and anything less formal is hard to define. For example, one event might be my competition with my next-door neighbor in chess, and another event might be a 5K race my neighborhood high school holds every month.
I second that. 6 months is probably too young to do much, but kids can manipulate a mouse surprisingly well at 2-years old. Most software for kids is pretty bad. Loads of stupid menus before they get into the game. No wonder my 4-yo daughter prefers my iphone to the computer.
Python has been promoted by Reddit for almost as long as its existence. Surely that helps.
help some project you like migrate to Python 3, that's useful and you'll learn a lot
:-) Touché 
&gt; Who the heck cares what a baby python weighs? Daddy python?
[Flatland](http://discorporate.us/projects/flatland/) is a project with much potential but that needs some work. * [Some brainstorming on things needed](http://piratepad.net/flat-out-wrong) * [Up to date documentation](http://flatland.readthedocs.org/en/latest/) * [Repository on Bitbucket](https://bitbucket.org/jek/flatland/)
If you're bundling actual installs, that can lead to portability issues. Bundling packages might be fine in some situations.
Some observations: If you look at the code swarm activity here: http://vimeo.com/1093745 you'll see an explosion of development activity in the summer of 2000, which I think may be due to ESR's article Why Python? (http://www.linuxjournal.com/article/3882) which was published in late April 2000. Later that year version 2.0 was released drawing further attention to the project. We then saw the rise of some important network, component and web frameworks, namely Twsited in 2002, Zope 3 in 2004 and TurboGears / Django in 2005. Coincidentally, the failures of Enterprise Java and the complexities of J2EE/EJB development came to a head around this time, along with the insanity of Perl, sent people looking for light-weight alternatives, both internally (Spring) and externally (Django/Rails).
So a common and irritating trend amongst job boards is people posting things like, "Hey I have a million dollar idea and great business skills. I need a top notch ninja programmers and we'll go in 50-50!" Of course the coder does all the work and the business guy does who knows what. Maybe you can track down one of those guys. Anyhow, lacking any ideas I'm willing to post publicly, I say join an open source project and work with some more senior developers. Might make some connections, learn better coding habits, and get some inspiration on the way. As for how to join one, you'll have to google it. I'm not really sure offhand. I'm sure they'd love the help though!
You are always welcome to contribute to Celery: http://celeryproject.org :) We need help with documentation, tests, and closing bugs, and it's a very rewarding and fun project to work on.
Hm, just tools, often chained together, though I'm not sure whether that's the case with PyPy. So I'm talking about PyPy the interpreter and the tools surrounding it, such as the translator that can turn RPython into C. 
[Plone](http://plone.org) is a leading Python-based CMS with an awesome community of Python developers and plenty of work to do. However, I would caution that inspiration and creativity have to come from you. I suspect you may be "trying too hard" in your "free time" to code. In which case, I'd suggest taking a step back to re-evaluate your general interests. Don't rush to code something, let it come to you. You may be surprised at what you become inclined to do when you focus on "doing nothing". Good luck!
Since I don't have a LJ account: Re. the discussion on "new []": This seems strange. I agree with the commenter above that "new f" makes more sense, where f is a callable. The "new" keyword then indicates the default value should be obtained on every call by invoking the callable. It feels more "pythonic" than having "new" indicate that the following expression should be evaluated on every call - and it achieves everything you want.
I still much prefer figg's suggestion of a decorator (although figg's decorator is way too complex imo). Python already has way too many keywords, and `new` is especially terrible (how many java/C++/C# devs are going to use it everywhere thinking they need it to create new instances?). Also calling `new` on an instance (`[]` is an instance of `list`) is nonsensical, I agree with you and the commenter here.
Take the [Python Challenge](http://www.pythonchallenge.com/), or [play with another language](http://rubylearning.com/blog/2009/09/24/rpcfn-shift-subtitle-1/).
Hey, I'm in the same boat as you are and had a couple of questions. 1. You said you're a junior dev, and have been working with Python for 7 months...what all have you been doing in Python to get to this point? 2. I'm currently working on a project for school using Python, but I'm only beginning out as well and need a lot more practice. So, do you recommend any projects or what not that you've done in the last 7 months that would be of help to get a better understanding of the language? 3. Any other resources you would recommend? Thanks in advance! 
[and this](http://xkcd.com/413/)
Thats funny, I need someone to discuss and/or help me code a personal project am doing with wxpython and of course python.. 
Asyncore/asynchat - nope. Also I suck at formatting messages here.
[This little tip](http://stackoverflow.com/questions/2026447/is-it-possible-to-tell-a-python-script-to-stop-at-some-point-and-give-you-the-han) is very useful.
Doesn't it have a pip install? (if no, why not?)
IPython is a saint
I've been working with python off and on for a while longer than that. I did some computational numerical work in my Physics program. It was language of choice so I chose to use python (most my classmates used java :( ). I also worked on a fair amount of scientific workflow applications and implemented those in ruby on rails. The project I initially spent the most time on in python was stable orbit http://code.google.com/p/stableorbit/ This was during school about 2 years ago. I haven't touched this codebase in a long time and my buddy Colin put a lot of work into it. I've just been working with python in industry for about 7 months now. I think the best way to pick up python or any language is to have an asshole senior dev that will be very candid about your coding skills. Pick a project with well defined goals and seek out the tools necessary to accomplish this. As you implement functionality they can comment on your code base and push you towards better practices. 
Yes, I agree as well with the keywords (and `new` is particularly bad, but it was beside the point). In any case, I think there is no real problem to be solved here. All languages have common pitfalls, and Python's parse-time evaluation of default arguments is more of a feature than a bug imo.
You're iterating over the char in a string then within the iteration replacing all those char in the string. Don't you want to rebuilt the string instead and return that? note: I haven't read the code, this just strikes me as odd. *edit* untwisted explains it better.
Thanks for the suggestions, I appreciate it!
You are iterating over each character one by one, and then you are replacing every occurrence of that particular character with its crypto character. With the string "ABCDABCD" on the first iteration of your loop you will change **BOTH** of the As in the string (lets pretend the shift is only by -1). You will now have "ZBCDZBCD". Now the program continues on to the Bs, does the same thing, etc. Eventually it gets to the Z again and rotates that yet AGAIN, and replaces both the *first* and current Z. You now have "YABCYABC". Keep in mind which variable it is that you want to be modifying here. Rather than doing a string.replace on ciphertext you could perhaps use concatenation in conjunction with your iterator variable to create a new string from an empty string. For example, perform your if tests, but instead of string.replace try newstring += ord(char) - shift [and then + the additional 26 if needed). As a side note, if you have learned the modulo operation there is a much cleaner way to do this. Modulo is performed using the % symbol and will divide a number and return its remainder. Also keep in mind that you can get a letter's lexicographical position in the alphabet by taking the ord() of that letter minus the ord('a'). For example: lett = ord('b') - ord('a') Lett will contain the value 1. Using this trick and modulo would allow you to perform the encryption without the if statements.
I think this code is closer to what you wanted def decrypt(ciphertext, shift): """ Decrypts some ciphertext encrypted with the Caesar cipher. Uses the shift to do the decryption. """ result_chars = [] ciphertext = ciphertext.upper() # upper case only low, high = ord('A'), ord('Z') # could be defined as constants, in case you call this method a lot for char in ciphertext: ascii_int = ord(char) # i find this more readable if you do the conversion once # only rotate A-Z if not low &lt;= ascii_int &lt;= high: result_chars.append(char) else: new_ascii_int = ascii_int + shift # but wait ... are we still in the alphabet? while new_ascii_int &gt; high: new_ascii_int -= 26 # magic number while new_ascii_int &lt; low: new_ascii_int += 26 result_chars.append(chr(new_ascii_int)) return ''.join(result_chars) Note it has a few obvious hang-ups - like it forces everything into capitalization and is far from optimized. Hopefully it's more readable though. Your biggest problem is you replacing **all text** in your initial string (ciphertext) for each substitution. If you only did this one for each distinct character in the string it'd still work, but you're iterating across it which means a lot of the time you're going to **replace a given character more than one time**.
no one wanted to sing, to i fixed it :)
Just to add to untwisted's comment, the string type in Python is an iterator: so you can just go "for char in cypherstring: &lt;suite&gt;". I was confused when I read your method as to why you weren't iterating---decided that probably the calling function was doing the iterating. I'll just say this; not intending to be rude: It looks like your thinking is confounding the notion of the value of a character, i.e., whether it is an "a", "b", "c", etc., with the notion of the position of the character in the string. Also this: Python has no character type. Characters are just strings of length of one. Also---and I can't quite recollect the details---sometimes when manipulating strings and assigning them the list or tuple type, they surprise me be exploding when I wasn't expecting it, like this: Python 2.6.2 (r262:71600, Apr 16 2009, 09:17:39) [GCC 4.0.1 (Apple Computer, Inc. build 5250)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; s = "string" &gt;&gt;&gt; t = () &gt;&gt;&gt; print s string &gt;&gt;&gt; for ch in s: ... print ch ... s t r i n g &gt;&gt;&gt; t = s &gt;&gt;&gt; print tuple(t) ('s', 't', 'r', 'i', 'n', 'g') &gt;&gt;&gt; I apologize for such a patronizing-sounding comment. It's not intended that way. This is just something that's surprised me from time to time, and I thought it might be relevant. 
Are you french?
Using the API severely limits the amount of results you can get. If you want to get the complete result set you need to scrape the web page. There are a few python libraries for this out there.
They were in fact iterating over the characters with the line: for char in ciphertext: But their indentation was wrong and it blended with the paragraph text rather than looking like code. In regards to the comment about position in the string and the ord value of the character, if that was directed at me, then I may not have made myself clear enough. Lets assume we want to encrypt a single letter, 'e'. By doing something like this: letter = ord('e') - ord('a') You can obtain a value from 0 - 25, which represents e's position in the alphabet. Now lets assume that our cypher shifts values by 5. Now we can do: letter += 5 This will obtain the encrypted value of the character. Using this method though we run into some trouble. The first problem we need to overcome is ensuring that we do not go beyond the bounds of the alphabet. This is a pretty simple fix, we can just % by 26. letter = letter % 26 Now we can be sure that we've rotated around the alphabet correctly (for example, z becomes e), but we still need to ensure that we will get a correct character back when we use the chr() function. The ASCII value of j (e + 5) is most certainly not 9, so we have to add ord('a') back on as such: letter += ord('a') Now we have a value that when passed to the chr() function will return a letter from a-z. Hope this clears things up :)
Having bytearrays support bitwise operators is something worth discussing. The rest I don't think I support, and introducing a new keyword for something that has a trivial (and really, not altogether inelegant) solution is something I certainly do not, especially not in such a clear afterthought-y way.
I like ipython but for some reason its debugger often lets me down; often I cannot go up in the call stack, whereas with python -m pdb I can. Debugging list comprehensions or generator expressions is also awkward, but that goes for pdb as well.
Yeah – my aim was for a lightweight script that would be pipe-able to other stuff on the command line, which I feel like this achieves.
Just so you know, as there so often is, there's a subreddit especially for those learning python: [/r/learnpython/](http://www.reddit.com/r/learnpython/)
Is this a wishlist that other people are supposed to act on or does Bram Cohen plan to bring these things to `python-ideas`?
Could you elaborate how can that be a (useful) feature? If I understood correctly, this brings side-effects to functions in a non-obvious way, I fail to see the usefulness in that.
I don't understand why there needs to be a keyword, doesn't everyone agree that having the same value for the default argument among different calls is just wrong? So just leave out the new keyword and change the semantics so that a deep copy is made of default arguments with every call.
It's not a feature, it's a bug that can be put to good use. When static variables is what you want it's much better to explicitly declare them as such.
also, i just realized that the filename is helloworld.py (i used a skeleton to start working out an idea, and from there, i guess i just stuck with it...)
Thanks for the tutorial, but I still prefer [bpython](http://bpython-interpreter.org) over iPython. Try it too!
&gt; it's a bug I'll settle for "design mistake".
It is simply too late. Breaking backwards compatibility in such a subtle way is even worse.
Essentially it is a succint way of attaching (persistent) properties to the function object itself. I can't argue very much for its usefulness over more explicit ways though.
since python is awesome, you can simply do if 0 &lt; deg &lt; 100: print('liquid') I would however do the following: if deg &lt; 1: print('solideous') elif deg &gt; 99: print('gaseous') else: print('liquideous') also be careful, in your example, the value 1 would go through since its not smaller or greater than 1.
Note: while dec.lower() == 'celcius':
I don't see the problem, just loudly announce that this feature is going to change, then change it, and everyone who has misused this feature in their code base can fix their shameful code. Perhaps the proper way to fix it is with getattr and setattr, perhaps in a decorator.
that's returning every value as gaseous. 
deg is a string, you need to convert it to an int or a float. deg = float(raw_input()) 
My wishlist: * Concurrency. * JIT.
i had to do the same project for an intro lab this year, here's how i did it: import string ch = raw_input("Please type a message: ") shift = int(raw_input("Enter the shift amount: ")) final = "" for x in ch: if x in string.letters: intch = ord(x) - ord("a") outch = chr((intch + shift) %26 +ord("a")) final = final + outch else: final = final + x print final
Your wishes have already come true.
I probably don't understand the desired use case, but I think that ordered dictionaries solve the last problem there.
Just posted this, &gt; This is a syntax change rather than a feature change and if it results in some ambiguity then I'd appreciate it if someone could explain why, but with if/for/while(etc) blocks I don't understand why they don't ditch the trailing ":" character and instead use whitespace, e.g. &gt; &gt; if True: &gt; pass &gt; &gt; becomes simply, &gt; &gt; if True &gt; pass &gt; &gt; The : doesn't seem to add anything for the compiler, and in the rare case that you want to do it on the same line then you could use ";" which is more consistant anyway (you can already put multiple lines of Python on a single line with ";"). E.g. &gt; &gt; if True; pass &gt; &gt; So is there anything wrong about this approach? I'm not so much interested in whether it's impractical to change legacy code (I agree but that could be said of many syntactic changes) and I was more wondering whether there are reasons why Python shouldn't have had that syntax since day one. ...but now livejournal isn't letting me post again and I found my answer: http://docs.python.org/faq/design.html#why-are-colons-required-for-the-if-while-def-class-statements It's not for the compiler, it's purely for a readability reasons (which I disagree with, but at least I've got my answer)
Sure. What matters is our consensus that it's highly unPythonic.
py ideas Default arguments in Python - the RETURN https://groups.google.com/d/topic/python-ideas/ks8_VZGahRA/discussion
What are those libraries called?
What people fail to understand is what a mess deepcopying is. It's all very well with [], but what if you have x=open("blah"), or x=MyCustomObject()? The current default semantics are perhaps non-intuitive at first, but you just have to understand reference by object.
&gt; Yes, but that would involve extensive changes to my whole codebase for what should be a single call. Sounds like he's kinda lazy. ;)
I used this the last time I needed to: http://www.catonmat.net/blog/python-library-for-google-search/
PyPy implements tracing JIT.
&gt; What people fail to understand is what a mess deepcopying is. This proposal has nothing to do with copying objects but with references that belong to the function instead of references generated for the call site. What programmers intend to specify is what happens at the call site, when an argument has not been passed e.g. passing an empty dict instead, not static binding of objects to the function which are accessible at the call and which is likely not an empty dict. The semantics is weird but I guess it keeps the implementation a little simpler. 
I'm not sure I understand the significance of a year-old blog post that omits the most recent release.
I think you meant: deg = input() unless you decide to switch to python 3: deg = float(input()) 
&gt; everyone who has misused this feature in their code base can fix their shameful code Following language semantics isn't shameful. Besides, there will be tons of others who unintentionally rely on this design choice, and these are the backwards compatibility bugs that will be hard to find. &gt; Perhaps the proper way to fix it is with getattr and setattr Can you explain how?
If you create a function in a loop for example, eagerly binding variables is useful. funcs = [] funcs_useless = [] for x in range(10): funcs.append(lambda a=x: a) funcs_useless.append(lambda: x) for i, f in enumerate(funcs): print f(), funcs_useless[i]()
creative syntax play.
Try using it [without the ORM](http://www.sqlalchemy.org/docs/core/tutorial.html) part.
Ok, now let's rewrite it in pure C and see how much will it be faster. I mean, by showing something like this you can make damage to some young programmers, because they'd start thinking "oh my god, how slow is that".
Speed of development vs speed of execution. In most cases Python is fast enough, even with the overhead of SQLAlchemy. Inserting 1000 rows in a database is not going to be a routine happening in most use-cases, and if you do need to do it and do it fast then using the sqlite3 module or SQLAlchemy without the ORM is the way to go.
Only semi-tongue-in-cheeck: http://dirtsimple.org/2004/12/python-is-not-java.html :-)
Terrible, useless, confusing. A simple if is better
The benchmark code is not equivalent at all, so that's just another misleading benchmark on the internet. The first thing I notice when reading the code is that the pure sqlite3 version of the code does no escaping, and the deletion is just a "DELETE FROM USERS" while the sqlalchemy code does full sql-injection escaping and deletes row by row instead of a single _delete all_ command.
In other words, the benchmark was specifically crafted to make sqlalchemy look bad, and the author is not familiar with either sqlite3 or sqlalchemy methods.
Ugh, asyncore/asynchat!!!
Thats completely 100% wrong. Read the code, skip to the bottom around line 115 to see how it measures deleting. SQlite deletes row by row, it loops through a list of pre-created SQL statements (prepared @ line 96) which are in the format of "DELETE FROM users WHERE id = [ID]", this is not the same as issuing a DELETE FROM users statement to delete all rows. And in any case the sql-injection escaping is handled by the dbapi module not by sqlalchemy by using formatters in the statements and adding the values as extra arguments. I don't do this out of pure laziness in the code, and it will hardly effect the outcome at all.
Then I will be expecting your more balanced benchmark any minute now :').
Oh science! Java programmers! Please learn a different language first, to get all the Java out of your system, take it out on a language much more deserving of being shat on, PHP, for example. Here are a few guidelines that generally always apply: * No setters and getters, no, not for any reason * NO XML AT ALL EVER * Fix your casing, neverWriteAnythingLikeThisEver * Don't use multiple files unless you need too, and no, "this file already contains a class" IS NOT A VALID REASON!
No, a little more to the east.
Post has been updated to include the latest releases.
Of the indentation thing, here's a good way to sell it to others: In programming, it's a sin to duplicate code or intention in more than one place, because eventually, you or someone else will go to change things and not change every place, and disaster happens. Python's designers realized that code blocks with braces and indentation are two ways of expressing the same idea, and it's a bad idea to allow that. It violates the Don't Repeat Yourself principle. If it's possible to have code that looks one way and runs another way, it's a bug in the language. if foo: if bar: f() else: g()
Exactly. This is not pythonic at all. There is a reason python only has a limited set of language features; we wouldn't want to end up like C++, would we? Though if Guido takes away `lambda`, I'm going to throw a fit. 
Read guido's tutorial. Also, one of the things that made me a better python programmer was to learn some Haskell. By being constrained to do things in a functional manner, I learned new ways of doing things, which apply perfectly well to python. I would probably never have learned those without Haskell, because since python doesn't force you to do things this way, you can keep writing Java-style code in python.
&gt; there is a reason python only has a limited set of language features One of the few things that disappoints me about python is the "one right way" mentality. As a developer I would rather be treated like an adult that can choose between equally good language features.
I am more of a C++ programmer then Java (tbh, I can't stand the language). Why is writingVariablesLikeThis is a problem though? :)
&gt;Fix your casing, neverWriteAnythingLikeThisEver exceptWhenWritingTwistedCode. (yeah, I don't like it either, but consistency ftw)
Because there's no commonly used style guidelines that use it (may as well just write everything in ROT13 while you're at it). Or more importantly, it's a bitch to read, and Python is about simplicity. Write your eye poison in other languages, thank you.
while dec.lower().replace('celcius', 'celsius') == 'celsius': ?
To the author... would you please add web2py dal benchmark as a comaprison. From a python shell: import sys sys.path.append('path/to/web2py') from gluon.dal import DAL, Field db=DAL('sqlite://test.sqlite') db.define_table('users', Field('id'), Field('username'), Field('email') Field('password','password'), Field('password_salt'),migrate=True) db.users.insert(username ="bob", email = "bob@bob.com") db(db.users.username=="bob").select() db((db.users.username=="bob")&amp;(email=="bob@bob.com")).select() db.users.drop() EDIT: fixed a couple of typos.
it is not a problem, it's just a Python coding style's convention. see PEP8.
You are comparing strings to numbers. Use Python 3 and you get a nice error message instead of a logic bug.
Now: Lambda is Pythonic. After he takes it out: Lambda was never Pythonic. 
If you're using an ORM for synchronous operations like that, then you're typically going to lose more time to network latency than to ORM overhead, so the ease of use and correctness benefits are worth it. Also, there are flaws in the timing code - the overall time should be measured, not lots of small measurements taken, because in the latter case errors due to timer precision are multiplied. Plus the interleaving of operations between the 2 methods means you're going to get some interesting cache behaviour going on. A better method would be to have 2 totally separate scripts, run them each several times, and take the quickest run for each for comparison. Oh, and in the insertion script you pre-process the string for the SQLite code outside of the timing loop - this is something SQLAlchemy does for you and therefore should be measured inside the timing.
&gt; NameError: name 'db' is not defined
also on the indent thing, make sure you set your editor to use spaces and not tabs. 4 spaces is the preferred indent, from [PEP 8](http://www.python.org/dev/peps/pep-0008/) really, just read through that style guide to get a sense of what well-formed python should look like.
Open interactive interpreter. import this
Yes. But it'll be two different sets of people making those arguments.
This is spot on. If someone goes researching SQLAlchemy benchmarks and sees this, they're going to be concerned. A more "real-world" benchmark would be a better measurement: Set up a small web application, use SQLAlchemy and go through the process of adding, modifying and deleting a record. Now, swap the backend out for sqlite3 and do the same. In general, someone using SQLAlchemy is not going to be doing mass adds, changes, or deletes. Sure, within their application it may occur, but I bet it's not going to occur with such frequency that these benchmarks shown are going to come into play.
I'm going to the countryside over Easter. I'm thinking doing myself some python studying. What ~~do I really need~~ should I have to get started? 
Yes, I would like to see this benchmark too. db needs to be instantiated right?
To clarify, it's really a generic WSGI host.
I just got started with IDLE, should find it on the Python website :)
 import types instance = C() instance.bar = types.MethodType(foo, instance, instance.__class__) Very complicated. This is much simpler (and consistent with C.foo=foo): instance.__class__.foo=foo
Not me - I've worked with several languages that had many redundant features - and maintenance of other people's code was a nightmare every time.
[How to Code Like a Pythonista](http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html) is a must-read. I also second the advice about PEP8. Since you can already program, it might drive you nuts, but you could give [Learn Python the Hard Way](http://learnpythonthehardway.org/index) a try for a consistent, structured approach. It was inspired by guitar teaching methods, so if you've played an instrument, the structure is probably familiar. 
Check out ipython. Its an interactive shell, but its nicer than the stock shell, and its definitely helped me. Also, Bpython is similar, but I have never used it. 
One thing that is important to note is the version of python you are utilizing. Python is currently in a state of flux with regards to language constructs and syntax. The bulk of the development work is being done on python 3.3 (the next release for python). Python 3.x broke compatability with python 2.x. Python 3.x is most assuredly the future of python, but likely it won't be adapted for mass use until the 3rd party libraries and apps are compatible. And that's probably 2013 / 2014 time frame. Python 2.x is still heavily utilized by a majority of the 3rd party tools and libraries. Specifically, the latest best compatibility version is going to be 2.6, though I suspect this year it will roll over to 2.7. If you are just learning right now, and you need to use it in a production environment within the next couple of years, I'd suggest learning 2.6 and 2.7. If you are simply learning for learning's sake, I'd go for python 3.2.
+1. Read PEP 8 through a few times, it will help a lot, especially if you ever talk to or work with other Python developers. It will help when reading other peoples code, which you should also do a lot. Go to Github, search for Python projects, read the code, enjoy.
About resources . . . A couple years ago I compiled a list for my computer club. Copy-pasted here. Maybe some of them will be useful. [Official Python Tutorial - version 2.X](http://docs.python.org/tutorial/) - Clear, thorough, but very dense. Not recommended for a beginning programmer. [Dive Into Python](http://diveintopython.org/toc/index.html) - A highly regarded book which is freely available online. This is the Python reference recommended in UPenn's CIS 120. [Introduction to Computer Science and Programming](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/) - This is the new first year programming course at MIT. The material is freely available online under OpenCourseWare. Included are video lectures, assignments, and a pdf of the textbook, "How to think like a Computer Scientist: Learning with Python". This is a good introduction to Computer Science and Python, but it is a full semester course, and it takes a long time to go through all the material. Not recommended for someone looking for a quick and dirty intro. [Introduction to Computer Science: Programming Paradigms](http://see.stanford.edu/see/courseInfo.aspx?coll=2d712634-2bf1-4b55-9a3a-ca9d470755ee) - Stanford, not to be outdone my MIT, has their "Engineering Everywhere". One of the courses offered is taught by a brilliant lecturer named Jerry Cain. Lectures 24 through 26 deal with Python. There are two very interesting assignments included on the course page. Highly recommended. [Google's Python Class](http://code.google.com/edu/languages/google-python-class/set-up.html) - A two-day introduction to Python for Google employees. The course is broken into 7 segments, with video lectures, notes, and assignments. Highly recommended.
Try and use Virtualenv and setuptools or pip. Basically, it's package management for python, and it is a glorious thing. Virtualenv sets up a Virtual Environment for each project you're working on. For example, you're working on a website (using flask) and a number cruncher (using numpy). You could do three things: 1. Make 2 folders, and bring in the libraries manually (like .jars). This is fine, but not very elegant. You also have to worry about bringing in dependencies. 2. Make 2 folders, and use setuptools/pip to install the libraries globally. This is great, but it pollutes the site-packages directory. It also means you have less control over which version of a library a program will use. 3. Make 2 virtualenvs, install using setuptools/pip. This way, libraries stay local to the project, dependencies are worked out for you, you can specify the version of python you want, etc. Also (another big plus): virtualenvs can be made portable. You can hand it off to a friend, and it can have all the libraries, code, and even the version of python needed to run it. Here's an example of starting a [flask](http://flask.pocoo.org/docs/installation/#virtualenv) project using virtualenv. The cheese-shop [or pypi](http://pypi.python.org/pypi) is one of my favourite things about python. There are 2500 mature/stable packages available (http://pypi.python.org/pypi?:action=browse&amp;c=5). If you want to do something in python, it's likely someone has written something to help you. For example, I needed to work on some [marc](http://en.wikipedia.org/wiki/MARC_standards) data, which is just awful. A quick search at the cheese-shop led me to [pymarc](http://pypi.python.org/pypi/pymarc/). One virtualenv, one pip install pymarc, and I was ready to work. Good luck! 
sorry: it is missing a db=DAL('sqlite://test.sqlite')
This got me the other day (C++ programmer who dabbles frequently in python) class CMyClass : # data l_mylist = [] # is an alias until instantiated # somewhere, i.e. acts like # c++'s static member # ctor def __init__() : # l_mylist = [] # comment this back in # to have the list act like # an instance member # instead of a static member # do stuff with member data def addItem(item) : l_mylist.append() 
I've been looking for something like this. Wonder what version of python they are using. And I guess you can't use any 3rd party libraries or anything unfortunately. But it's still pretty cool to be able to code on the ipod.
Just tried it out. A sys.version gives me: 2.7.1 (r271:86832, Mar 29 2011, 20:25:20) [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] Its very basic... You can't even save your scripts... But better than nothing ;)
You won’t be able to go back. Java will burn your eyes to look at.
wow..can't save anything? that's kinda shitty. Maybe in the next version. :)
Ah ok, i am french and i have the same feeling.
Call semantics are different to Java/C++ and there are some best practices (aka pythonic): * http://www.markus-gattol.name/ws/python.html#call_by_sharing * http://www.markus-gattol.name/ws/python.html#pythonic
Just for clarity, this is what it should look like. Also, there are no private variables, and everything is an object. class CMyClass (object): def __init__ (self): self.l_mylist = list() def additem(self,item): self.l_mylist.append(item)
imho it's better to enforce restrictions at the company policy level rather than at the language capability level. Languages should provide possibilities; corporations should provide guidelines and restrictions for maintainability in their own style. That said, I do find Python to be a beautiful and quite full-featured language. But sometimes Ruby's flexibility makes me jealous.
I thought apple had rules about apps not running code?
Some modules are there (math, re, datetime, etc). Others like os, urllib, pprint and warnings are not.
I recommend getting this book. http://www.qtrac.eu/py3book.html Python Osmosis for a quick language tour. http://python.sourcequench.org/ Download them and play them back on VLC at 1.33x-2x speed. Check out blip.tv and python for past Pycon presentations. Overview of different modules. http://www.doughellmann.com/PyMOTW/ 
There's also a [free android](http://code.google.com/p/android-scripting/) version of Python, if anyone's interested (you need to download the interpreter separately using the application's menu, though).
I find that it's hard for organizations to enforce restrictions in a language - but perhaps that's just because the language designers have never tried? For my project I'd like to allow our libraries unrestricted access to all features. But in our glue-code (that's often maintained by more junior developers or new-to-python developers) I'd like to restrict the features to just the essential &amp; obvious ones. Sets, list comprehensions, with - it's all stuff that unnecessarily adds to the python learning curve. Most of the rest of the code any non-python programmer can look at and immediately read.
These rules changed around mid-late 2010. Apple now allows arbitrary interpreter, but forbids downloading code unless it's javascript code run via Webkit. Since a Python console would not be downloading code...
So then python updates would have to be distributed through the app store. The app couldn't download the latest release itself... Not that bag of a limitation I suppose. But what about 3rd party libraries? 
i think you would enjoy perl :)
I've had that installed pretty much since it came out - first on my HTC Magic, now on my Desire Z (thank goodness for physical keyboards!)
Thanks, I see how it can be useful in this case but still, to me it looks very unintuitive and like an awkward hack. Btw it also works like this, which looks even more ridiculous: funcs = [] for x in range(10): funcs.append(lambda x=x: x) # as opposed to this # funcs.append(lambda: x) for f in enumerate(funcs): print f()
&gt; So then python updates would have to be distributed through the app store. The app couldn't download the latest release itself... Not that bag of a limitation I suppose. I do not think there would be any reason for the interpreter to update itself. &gt; But what about 3rd party libraries? Nope, it's executable code, can't download it. The interpreter app has to bundle them all.
&gt; This is much simpler [...] Yes, and it also completely misses the point of the article. Your suggestion adds a new method to the class of the instance (and therefore also to all other instances of that class and its subclasses): the point of the article was to show how to add a method to just one single instance, without affecting its class or any other instances. Your "simpler" suggestion completely fails in that department. (The original article also falsely claims that Class.foo = foo turns foo into an unbound method; bollox: functions are turned into methods during attribute lookup.) 
It's not the "one right way", for fuck's sake! It's the "one __obvious__ way"!11one If you can invent a way to represent ADT in Python and switch on them, go on, do it! Your proposal will not be shot down because it allows for, like, unexpected ways of expressing stuff!
Funny. I truly, deeply hate that Python has gone the route of language specific package management. A gigantic mistake in the making. I want to use a single OS-provided tool to perform all package management.
&gt; I mean, by showing something like this you can make damage to some young programmers, because they'd start thinking "oh my god, how slow is that". This seems more than a little hyperbolic. Essentially all benchmarks are flawed (i.e. overspecialized or biased) but understanding the performance impact of abstraction is far from useless. I'd prefer if more libraries would take it seriously and perform their own benchmarking.
Yes, we get a lot of people not making that distinction. Credit to Ken that his original title is not quite as pro-Django :)
I think in general dynamic languages tend to support those kinds of things...not sure.
&gt;No setters and getters, no, not for any reason False. Well, you don't actually right setters and getters; you use python properties which are the same thing except you _think_ you're not using setters and getters.
Is this a port of CPython, or a custom interpreter?
So you have to re-type your programs every time you start it up?!
Yeah, I tried playing with that on my Nexus One without a physical keyboard, and I almost lost hold of what little sanity I still possess.
Acknoledgements say: PyPad contains software made available by Python Software Foundation and others. So i assume it is a port of CPython...
I haven't seen any code that looks like that, I think you mean: class CMyclass(Object): def __init__(self): self.l_mylist = list() def add_item(self, item): self.l_mylist.append(item)
Okay. Isn't there also a port of Python in Cydia?
 help('modules') --- Traceback (most recent call last): File "&lt;string&gt;", line 1, in &lt;module&gt; NameError: name 'help' is not defined 
presumably you could copy and paste from a notepad or something. Dropbox support would be a BIG win I think.
Take a look at [this presentation](http://blip.tv/file/4881525) from PyCon 2011. It covers how pip and virtualenv work, which requires explaining how import works.
This would be the ideal, of course. Virtualenv and pip solve this particular problem very well, though, especially on OSs which don't have the best package management tools built in. (mac [getting better with macports!], windows, solaris). For now, they're a good set of tools to know about. 
and how's that working out ?
There are several levels of beauty in this post!
Anything that would allow you to download scripts from the internet would run afoul of Apple's rules.
Try [/r/programmingchallenges](http://www.reddit.com/r/programmingchallenges).
It costs money to put a Python interpreter on the Iphone? What the *fuck*?
I know, this is bullshit. I live off foodstamps because I don't charge for any of my work.
Maybe you should charge for your work? Just sayin'...
^ this. I use ipython all time. The interactive console that comes with python is good, but ipython takes it to a new level. [Linky](http://ipython.scipy.org/moin/), or use pip/easy_install. 
In case you hadn't noticed, Python is free and open source. Putting it up on the Iphone market requires negligible work; in fact, charging for it is nothing more than shamelessly taking advantage of the work that others have done to develop the language and its interpreter.
&gt;Putting it up on the Iphone market requires negligible work Why haven't you or someone else done it for free then?
If the people who developed the open source software did not want other people profiting off said other people's additions to the project then they can stipulate that in the license. If you want this for free then spend your own time and release it. No one is stopping you.
Random thoughts: 1) learn the standard library. An excellent resource is Doug Hellman's [Python Module Of the Week](http://www.doughellmann.com/PyMOTW/) series of blog posts (and now a book - "The Python Standard Library by Example). 2) Check out [PyPI](http://pypi.python.org/pypi) - the repository of 3rd party python libraries. 3) Install [pip](http://www.pip-installer.org/en/latest/index.html) - you can use this to search and install PyPI packages from the command line. Or install [virtualenv](http://www.virtualenv.org/en/latest/), which includes pip. There is also easy_install which does a similar job to pip, but is older and not as good. 4) if there are Java libraries that you have to use because there are no Python equivalents (or you just miss them) then check out [Jython](http://www.jython.org/) - an implementation of Python in Java for the JVM. You can use Java libraries from Jython as if they were Python libraries. 
I can't speak for anyone else, but I don't use iOS.
Then how can you safely assert the work was negligible? Considering there are a number of missing modules, it apparently wasn't that negligible.
Any decent editor will autoindent your code for you. The downside to using indentation for structure is that it's much easier to mess stuff up when refactoring or otherwise cut-and-pasting code. I used to love the idea of indentation for structure, but now that I've been using Python as one of my primary languages for a few years, I could take it or leave it.
Insert gets slower because inserted objects are kept in the sqlalchemy session. Expunge them and it won't happen.
hi, As a javascript, java, flex, php dude I found, http://learnpythonthehardway.org/to be a very very very good starting point, the other things I would recommend are : 1 - using IDLE, 2 - reading the docs, 3 - playing with python Another good book I read (although it focuses more on python3) is Head First Python (http://oreilly.com/catalog/0636920003434) Cheers :)
This is bad news, there has to be somthing that we can do about it. Usualy all the people i know, if they've learned some PHP as this is the new VisualBasic these days then God forbid they even look at something else. They don't even want to know that something else exists.
is that 1_mylist or I_mylist ?
Refactoring is when I find it saves me and (insertion only) autoindent doesn't help. In other languages, I could miss a brace or add something to a braceless condition or loop, and it would look right, but run wrong.
Another reason to read the docs. Slots is provided to build lightweight objects. If you do not have millions of small objects ( records ), that you must access simultaneously, well, then do not use that. 
from that URL &gt; It is apparently popular in certain circles to use `__slots__` ... That makes it sound as if `__slots__` is something rather arcane when in fact it's not. It's quite clear when to use it and when not plus how inheritance semantics work when you have a multi-inheritance scenario with the possibility of a diamond-shaped inheritance chain. * http://www.markus-gattol.name/ws/python.html#__slots__ * http://www.markus-gattol.name/ws/python.html#inheritance 
Didn't know that was there. Thanks.
Point one out
He made a site in PHP and it was fun and easy therefore all coding is fun and easy.
I made one, my very first open source code ever! https://github.com/michaelgrosner/Abrasion
try google code jam problem archive: http://code.google.com/codejam/contests.html
doh! you're absolutely right, thanks for the correction :)
I'm confused, what, apart from whitespace, is the difference?
Bah! You're right. maybe it also has a plain text editor, so you're *probably* just going to use it to save/write text documents, which happen to execute if you change the filename.
also changed additem to add_item due to it being easier to read. In retrospect, shouldn't use l_ to begin with either, if you like haskell so much, maybe you shouldn't use it instead of Python.
Here's an example of a question that I had while working on this. How do you represent the 64-bit number N in little-endian format. Say the number is 0x01234567L. My first try I used ordered the bytes like this: 0x67, 0x45, 0x23, 0x01, 0x00, 0x00, 0x00, 0x00. But that isn't right. 
No thanks. I'd much rather manage python modules without having to learn the quirks of whatever OS I'm deploying on. Not to mention that if the OS is Windows or Mac OS X there *IS NO* default package manager. 
In Python 3.2 you have [some new int methods](http://docs.python.org/py3k/library/stdtypes.html#int.from_bytes) that may help. In older versions, I use variations of this crude code for my BE&lt;-&gt;LE conversion needs: _MULTS_OF_8 = [x * 8 for x in range(16)] def reverse(value): """Given the `value` byte string, returns an integer with the endianness reversed. Example: assert reverse('\xEF\xBE\xAD\xDE') == 0xDEADBEEF """ result = 0 for i, c in enumerate(value): v = ord(c) result = int(result + (v * (2**_MULTS_OF_8[i]))) return result def be2int(data): """Convert a big-endian binary number, in the form of a string of arbitrary length, to a native python int. """ v = 0 for i in map(ord, data): v = v &lt;&lt; 8 | i return v def le2int(data): """Convert a little-endian binary number, in the form of a string of arbitrary length, to a native python int. """ v = 0 data = map(ord, data) data.reverse() for i in data: v = v &lt;&lt; 8 | i return v def int2be(num, digits = 1): """Convert a native python int to a big-endian number, in the form of a binary string. """ zeroes = '\0' * digits if num == 0: return zeroes result = [] while num: result.append(chr(num % 256)) num /= 256 result.reverse() result = ''.join(result) if len(result) &lt; digits: result = zeroes[: digits - len(result)] + result return result def int2le(num, digits = 1): """Convert a native python int to a little-endian number, in the form of a binary string. """ zeroes = '\0' * digits if num == 0: return zeroes result = [] while num: result.append(chr(num % 256)) num /= 256 result = ''.join(result) if len(result) &lt; digits: result = result + zeroes[: digits - len(result)] return result 
&gt;But that isn't right. That looks OK to me. What was the problem you had there?
Alternate title: "Another reason to avoid using multiple inheritance in your Python classes".
that's all a matter of opinion ;)
I'm going to have to try it again. I was doing something very much like what riffito posted: def num_to_little_end(num): result = [] while num: result.append(chr(num &amp; 0xff)) num &gt;&gt;= 8 return ''.join(num) The sad thing is, I thought this might be a cool programming-interview problem for potential new hires. TIL I wouldn't hire myself. 
&gt;The sad thing is, I thought this might be a cool programming-interview problem for potential new hires. TIL I wouldn't hire myself. I wouldn't sweat it. If this is important for a position, the candidate should understand endianness and know where it comes up and why it is important. Actually being able to slice and dice the bits wouldn't mean much if I was the interviewer -- getting it right on a computer can be hard enough; doing it on a whiteboard is impossible. IMO programming interview problems shouldn't focus on actual implementation, but on understanding of the concepts. If a programmer can explain it in pseudocode or by drawing arrays on the board, awesome. Of course, this presumes that the interview problem makes sense for the position. I'd personally wager that most Python programmers don't often do low-level bit twiddling, making this a less-appealing question than others. ED: and your function works fine for me -- it just outputs in a funny way. :)
Agreed, the author clearly doesn't understand the situations where slots are useful. 
Very good points. On the surface, this looked trivial, much like the [FizzBuzz](http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html) problem. Once I got in there and had to start thinking about bits, I quickly realized it isn't *entirely* trivial. But I'm stubborn and will keep messing with this until I get it right. Last night I searched for other implementations. Of the 3 that I was able to execute, only one actually worked correctly. 
that's actually not true. Your session can have as much in it as you'd like and a flush only looks at what's been flagged as "changed" or "new". There are three exceptions to this: - you're on an ancient version, before 0.5.3 or thereabouts where there was a bug in this regard - you're using "mutable" attributes, which all throughout the 0.6 docs the user is *urged* to please not use this deprecated feature, 0.7 turns them off across the board - there's a rare edge case where if you have a many-to-one relationship without a corresponding one-to-many backref, you have passive_updates=False and you change the primary key of the object that's the target of the m2o, there is a limited scan of the session to find potential parents.
I've finished integrating the wiki. Thanks for the idea! I hope that the concept would work for basic tutorials... That's the best I could think of.
I'll have to give this a shot - my python is rusty and it sounds like a fun challange. I didn't know about /r/programmingchallenges either, so double bonus. Kudos on taking the initiative on something cool and sharing, nonetheless.
awsome thanks. Some notes. You have a ton of white space. PEP8 says 4 spaces should be used a s a tab. I think you are using 8. Also there is little reason to include BS, but it's ok to do so. Good work otherwise
You can check your result against the correct hash from the hashlib: import hashlib m = hashlib.md5() m.update("Reddit") print "md5 hash of Reddit is " + m.hexdigest() And you should see md5 hash of Reddit is b632c55a33530d1433e29ffc09ba1151 
There are 2 keys to solving this with code that looks almost exactly like the pseudo code: remember that python ints can grow beyond a regular u32 (so you need to artificially limit them in certain cases), and use the struct module to take care of endianness for you. I'd originally forgotten/ignored the former, and it still took all of 20 min to write the solution. http://dl.dropbox.com/u/16486235/mymd5.py
Pretty well actually - the physical keyboard still isn't the same as having a full QWERTY keyboard, but it works pretty well for if I want to use SL4A to write a quick Python or Perl script, and it works well for ConnectBot if I want to use SSH.
What quirks does a language specific package manager protect against that a language agnostic package manager doesn't? As for your second point, I understand the sentiment but don't want to be punished for other peoples choice of an inferior OS. ;-P
Weird. I've never encountered the problems you describe in other languages in practice (and my editor will complain of the braces don't match), but for me, refactoring Python is always a bit of a pain. What editor do you use? (I use emacs)
Very nice! I didn't know about struct, so thank you for that. When I was working on this, I was surprised that Python didn't have any built in support for rotating bits. BTW, nice code. Killer comments and simple style. I think your functioning source code is clearer than the pseudo code of wikipedia.
here's what I had come up with: https://gist.github.com/41073391106ac9f73625 very similar, I ended up stealing your solution to the integer growth issue since I need coffee. :D also, completely unoptimized, but it works....
Well, having multiple versions of the language for one. Also, it's sometimesreasonable to have multiple versions of a library installed simultaneously, which most packages don't cope very well with. Also, in some languages it's important to have certain actions run when a new module is installed or updated, such as recompiling of modules that depend on it. 
My first click got me to a 500 error page with a robot that was partially dis-assembled that I assumed was an image related to this post.
I have to wonder how useful python graphics programming is. *nix = comes with python, but users dont mind a command line or digging into technical details. openGL = graphics = windows, setting up python not for the average window user.
Thanks! I blame it on the fact that I spent the first 5 years of my career hacking in python (and still use it on an almost-daily basis for tools to make my life easier, etc).
Nice! FWIW, I think the way you build up the message to be hashed is probably a little clearer than mine. I'd also forgotten about the count for non-string elements in a struct format... succinctness ftw!
Almost always, vim.
Oh thank you, sir or madam! I love working with regex, once I remember all the ins and outs of it and a python specific tester to boot will help me loads!
Thank you, it'll be useful. Bookmarked :)
I'm not sure I follow your logic, it's useful for me.
OpenGL is used plenty by Linux and especially OS X developers, and Python is really easy to set up on Windows. What are you talking about? EDIT: Ah, you're saying that the average Windows *consumer* can't set up Python. This is true, but [they don't have to](http://www.py2exe.org/).
&gt;What are you talking about? He doesn't know.
Mind you, webapp should be able to run in any CGI environment not just app engine.
I've been battling [Project Euler](http://projecteuler.net/) in Python.
I really don't like his paraphrase definition of a botnet. I've been around on IRC for for ages (I mean, as far back as the early 90s) and ran much more productive botnets. However, I do like the experiment. I've often played around with bots to monitor and or control servers. I've recently been working on some python-based XMPP bots for monitoring purposes (I am tying them in with nagios alerts). I'm also hoping to setup a sort of personal assistant XMPP bot that takes commands over chat and sends me notifications. 
You know Python works without a command line, right?
thanks. I try to be clear before clever, usually. There are some nice bits in yours as well -- I like the way you build up the chunks list and then iterate over it. I'd probably do something similar, but using a generator expression. Also, I realize doing 'if 0 &lt;= i &lt;= 15' in mine is pretty stupid. I was perhaps a bit blindly copying the pseudocode at that point. I'm kind of curious about seeing what kind of optimizations I can make, now... 
Thanks for taking the time to implement this. Like todesschaf, I have to say your code is very easy to read. Even in small bits of code, there is a great deal for somebody like me to learn from. Just for grins, check out the reference code for [RFC 1321](http://www.ietf.org/rfc/rfc1321.txt). Compare the quantity and readability of the C reference implementation vs your Python implementation. If Rivest were publishing this RFC today, I wonder if he would use C or something like Python? 
&gt; Thanks for taking the time to implement this. No problem. Sometimes these little side-trips are fun. And I usually learn something too, or at least reaffirm existing knowledge. &gt; If Rivest were publishing this RFC today, I wonder if he would use C or something like Python? For an algorithm like this that involves a lot of bit-twiddling, I'd say he'd probably stick with C. One of the things I don't like about mine and todesschaf's implementations is that there is too much code dedicated to skirting around python's high-levelness. These obscure the algorithm slightly, and also affect performance. Just to give you an idea, my implementation md5('test') is 180x slower than the one provided in hashlib (which is written in C, based on the RFC you linked). 
Wrote a program that I ran when getting up from my desk, if you hit any key without first executing the secret key combo then it would lock the computer, take a picture of the person (webcam) and email it to me. Got people all the time trying to fuck with my computer lol Added code to [github](https://github.com/monstrado/lolock), I made this code when I first started with Python so don't be too mean to me :D. I've been super busy so I didn't get a chance to clean it up as much I wanted. 
Possibility of source?
yeah, I have it around. I'll clean it up and put it on github/bitbucket as soon as I can. 
sweet, would like the link when ready!
I built a ghetto version of Google street view (using about $800 worth of hardware) that uses Python for the collection and analysis. I also recently wrote a program that syncs two directories of images where the destination cannot be seen from the source. Unfortunately, both are for work, and cannot be shared.
Nice, what OS?
Wrote a middleware program for connecting simulations that share data over udp/tcp. The middleware program allows for dissimilar packet formats/data structures on either end to avoid complex interactions between large scale multiple computer simulations. Packet format translation happens in realtime and can be reconfigured on the fly. It's nice when you have a lot of software modules that communicate with another and don't want to have to recompile dozens or more programs when you change the packet format in just one of them, or when you add a new module to replace an old one and it has a different format. Another project is an GUI for controlling multiple flight simulation pilot stations from a single location. This one uses wxPython. We allow an operator to change aircraft type, weather, fuel, position, time, date, pause, unpause, etc., etc. all from one central location. We tie it together with custom flight simulation dynamics codes and x-plane for the visuals.
YouTube.
It was windows, I usually write everything for Linux but my work laptop is windows :(
Built a small program that loops through a rna-seq expression dataset and finds promoters that meet certain criteria across multiple environmental conditions. Useful data for engineering biological gene expression. I'm just starting out though on bioinformatics though...so it's nothing much yet.
No source?
I wrote a command line batch job dispatcher last week - same syntax as gnu `parallel`, but runs the commands on a list of hosts with some minimal load balancing. I really didn't want to write this, tried [these](http://stackoverflow.com/questions/5636458/python-library-for-job-scheduling-ssh) [questions](http://serverfault.com/questions/259240/parallel-execution-of-different-commands-on-multiple-hosts/259463#259463) to find existing solutions, but couldn't find quite what I wanted. So I hacked one out with Python! (please let me know if you do know of a good tool for this)
Wow, apparently gnu parallel does this - why was that so hard for me to find? But my tool has more robust and dynamic host selection.
I half-our hacked a script once that did in a few seconds what a colleague needed a whole day for. I had to merge parts of some images into one, for tens of different items. Imagine the *horror* of doing something boring all day... So, I told my boss that good programmers are lazy. 
I only get server errors. It seems, that the problem is, that the regular expression is passed as a GET parameter and the server responds with "Bad Request" on complex regular expressions. Otherwise, cool tool. You may also want to check out http://gskinner.com/RegExr/
Or maybe you could just lock your computer when you're afk, like a sane person. ;) Cool idea, man.
Are you using paramiko to run the commands on the remote systems? Or are you writing to a queue that the remote machines poll? Just curious, I ended up writing something very similar to interface with our machine database using paramiko. For parallelism, did you use multiprocessing, threading, or forks?
This is certifiably un-cool because it could probably have been addressed more elegantly, but it got me out of an extremely stressful spot under a tight deadline. We had to do a bunch of admin screens for essential tables with basic CRUD and validation on a Java Enterprise 5 (with JPA/TopLink Essentials and JSF) system, and I needed about 15 of those done in two days. So, I picked one of them that had been done reasonably well by hand by one of our programmers and refactored that into a Cheetah template, then created some data with the screens' file names, titles, variable names, JPA class names, etc. in it, and then created a driver program that would generate all the pages in a pretty much workable state. The rest was mere adjustments. Of course, when I handed it off, I explained how to maintain the templates, run the Python driver, etc., but he opted to manually maintain the source for the individual screens instead, so now the driver and templates are essentially useless. :( tl;dr=I generated about 30K lines of mind-numbing, soul crushing Java code with just less than 3K lines of Python. And yes, good programmers **are** lazy. 
Not so glamorous but I wrote a command line test harness. It was completely cross platform and kind of worked like an Ant/JUnit/Expect hybrid. It was cool, I wrote a little macro language for creating tests that allowed non-programmers to use the tool easily. It ended up being a hit, everyone from QA and the Dev team loved it. It actually turned out a lot better than I expected it would. I don't have a copy of the source anymore but I've considered open sourcing it.
Wrote a pdf generator around report lab, with highly varied options. Handles multiple output items per page, as well as multipage, numerous input sources, etc. Essentially a plugin architecture configured via ini files. Probably the coolest bit was writing an output plugin based around templates. I used xml for the syntax to save writing a parser, but it was a full custom backend that would build a python class on the file and load it. 
Indeed. I can't remember the number of times I've tried to write an optimized xor_bytes() function - or the amazing stackoverflow thread where they tried to write one optimized for maximum performance. It definitely violates the principle of least surprise, when I've got something representing a series of bits, and can't perform the most *basic* bitwise operations. His other suggestion, some native methods to do bytes &lt;-&gt; int might be useful as well, but there's so many details and options requried - at a minimum, you'd have to have int_to_bytes(value, bytecount, endian='system', unsigned=True), and I'm sure I missed a few options there - most of which are handled acceptably by struct.
Will this be recorded? 
Birthdays: Send an email (happy birthday etc...) as many times as the age of the person. Girls: Find all the girls (approximately) in the first year in my college. We use a linux server, so: ls /home (get usernames) id username (so we keep only those in the last year (different group)) finger username name is less similar with username than the surname All Greek girl names end with η or α.
Wish I could get an invite
You might want to check out [BioPython](http://www.biopython.org) and [/r/bioinformatics](http://www.reddit.com/r/bioinformatics) if you haven't already :)
Wrote a search engine that indexes FTP, SSH, VoIP, HTTP(S) and lets people find those computers by geography, hostname, etc.: http://www.shodanhq.com
Have you tried installing pyTTS from source? If it works on Python 2.anything, it 99.999% should work on 2.7.
hello dear sir, give me the codez pleeeease !
Already watching bioinformatics, but I'll check out biopython. Thanks :D
Try its pure-Python replacement: http://pypi.python.org/pypi/pyttsx
I dunno how to do this? I'm pretty n00bish at Python this is my second month learning it lol
awesome! yeah got it running thanks!
Link?
Cool - I didn't know about this one. Just got it working on the mac - nice. I've used pyTTS before and glad that there is a cross platform option available.
Monitored a big ass ERP system. Started using metrics instead of hunches and cargo cult operations to handle and understand the problems that occurred whenever our work load went up
Dear god that is awesome. 
I gave up on programming when I started learning C++ and Java. Decided never to be a computer scientist...until I used Python. 
What are the ethical implications of scraping pages that have been disallowed by robots.txt?
You can scrape it, but you can't index it.
show me a graphics intensive, popular on windows app written mostly in python or shut the fuck up You cant, because my point is valid.
&gt; Screen scraping is the art of programatically extracting data from websites. It most certainly is not, and anybody who says so is a cheat and a liar. Screen scraping is taking data off a *screen*.
You have to hire someone in the Third World to parse it, since you're not allowed to use a robot. It's a union/labor thing.
&gt; "Another reason to avoid using multiple inheritance." FTFY.
Interesting but it seems like you're probably better off just buying an SSH client like Prompt then logging into your home box.
EVE Online, Toontown Online, Pirates of the Caribbean Online. There's no need to be so brash.
You could make a search engine indexing only pages disallowed by robots.txt, with the tagline "the content that they don't want you to see".
Easy man... the article was pretty useful, except for this minor flaw.
Nice article, I would add two things: * Look at [lxml](http://lxml.de/) instead of BeautifulSoup. Takes a bit to get used to (and is not pure python), but the author of BS does not seem to be that interested in maintaining the project, while lxml gives you an entire suite (with xslt, xpath, data-binding, etc.) and is a lot faster. * Look at [redis](http://simonwillison.net/static/2010/redis-tutorial/) (and the python bindings) for storing your results. It is a breeze to set-up and work with. I have a micro EC2-instance running with a redis-server holding the scraper results &amp; tasks. I can easily parallelize the scraping and run queries/do further cleaning, etc. in the mean time. E.g. I just ran a small script pulling the addresses from the scraped data (Belgian companies), geo-coding them &amp; updating the scraped records. Plotting on coordinates gives [this](http://i.imgur.com/EzH1H.png) result (for those not familiar with Belgium, that is a pretty accurate ouline of the borders &amp; major population centers). 
The Waambulance is on the way.
I'm a total python noob, but recently did a program that calculates base station distances and stats for telco base station handovers for a friend. Data source was a bunch of csv files provided by them. basically reduced some menial calculations that require lots of lookups and cross referencing between files and took months to 4 seconds. Felt like a pro at that particular moment :) 
Am I just being stupid or is that blog post from the future? &gt; Apr 30, 2011 By Paul Barry Anyway, yes, we know there is Python scripting on Android, but it's worthless for anything other than hello world or spam-sending SMSes. It's stupid to expect people to use a command-line in a desktop application, it's lunacy to expect it from a mobile phone application.
Really nice article. Thanks for sharing
You're right. It's from the future.
There is a bug in the get_file_checksum() example. Can anyone spot it?
Best laugh of the day! As an aside, this app is a good idea but unfortunately has a few issues. One of course being Apples proision against the download of executable code. Another is the use of old python instead of 3.2. Ultimately the success or failure of this app will revolve around getting all the basic modules to work, being able to save scripts locally and Apple loosening up. It isn't usable for me right now but I might buy in the future just to support development. In a nut shell the app needs Python 3.2, the ability to save scripts and more modules. That might actually make useful. 
I find [pyquery](http://packages.python.org/pyquery/) to be a much better way of parsing html.
don't see anything wrong with this function.
Writing a daemon is not particularly more difficult, you just have a main loop (eg a while loop) that runs continually. Take care that it includes a sleep statement so that it doesn't consume 100% CPU all the time, and remove all data structures or elements thereof that you don't need, so as not to consume too much memory. I haven't written GUI programs before either, but they say wxpython is good, look into their tutorials.
Yeah unfortunately it's no perfect because as you said you can't download code but I think it will still be a useful tool and I'm not too fussed about 3.2 support. I'm still on 2.7 myself because to be honest I think there's still just enough code out there I want to use that hasn't been ported to Python 3 yet which is annoying. I think everyone should have moved on by now.
There are none. % which wget wget: aliased to wget -erobots=off
Are you referring to the fact that 'size' is unused, or that the file isn't being opened in 'rb' mode?
For the gui (if you really need one!), use TKinter. http://www.pythonware.com/library/tkinter/introduction/ It's built-in to python and it's really simple to use. As for persistant data, I find that the easiest way is saving everything to a regular python dictionary or list and then save it/read it from disk by using the pickle module: http://docs.python.org/library/pickle.html Example use: import pickle myList = [1, 2, 3] fileName = "persistantsavefile.txt" #to write: pickle.dump(myList, open(filename, "w")) #to read: loadedList = pickle.load(open(filename))
All the advice this person gives is good advice if you want to not tax the remote server (something I never care about). It's also good advice if you want to make your scraper a lot quicker (something I care about if the script will run on a frequent basis, or it has to be fast).
I went with what I felt was the simplest solution since I was in a hurry: forking with Popen(['/usr/bin/ssh', etc.]) and polling these processes. My goal was not to rely on anything running on the remote machines besides sshd, so no polling of a local job queue. I'm curious, what would the benefits of paramiko have been? Cross platform compatibility for the client I suppose would be one.
I would so like to go. Buut it's almost 1000kms and a bit pricey for a student. I hope that videos will be public.
I'm a developer of invesalius' 3 http://svn.softwarepublico.gov.br/trac/invesalius
I agree, but it should be pointed out though that this isn't "Screen Scraping" and this is "Web Scraping". Small word change yes; but it's important so that when I'm looking for Screen Scraping tutorials I don't get this completely unrelated article about Web Scraping as my #1 result. But, either way, fun article :D
&gt; Anyway, yes, we know there is Python scripting on Android, but it's worthless for anything other than hello world or spam-sending SMSes. Watching what one of my colleagues is doing with it (small embedded db app, as a client for a bigger desktop app) I would be inclined to disagree.
If you want to pick up python and have little programming knowledge then I would suggest starting with [LPTHW](http://learnpythonthehardway.org/index), once you finish you will understand the language pretty well. As far as automating basic tasks, you can do this in Python but you should also become pretty familiar with [BASH scripting](http://bash.cyberciti.biz/guide/Main_Page). If you end up going back into IT doing system administration, I would suggest playing around with [Fabric](http://docs.fabfile.org/en/1.0.1/index.html) which allows you to do some pretty cool stuff in terms of automation with server management/deployment in python. If you end up wanting to learn how to make web interfaces for things then I would recommend learning a micro-framework such as [Flask](http://flask.pocoo.org/) and then moving onto a larger framework ([Pyramid](http://pylonsproject.org/), or [Django](http://www.djangoproject.com/)). Good luck! **Edit**: Fixed broken/incorrect links.
firstly, *high five* to my Gamma World brother :) for the gui, as Ran4 mentioned Tkinter is included in the standard python library and it is fairly straightforward. i really like [wxPython](http://www.wxpython.org), it's pretty simple and there is a wealth of tutorial code on their site. if you are going to have a small amount of data and don't really need to search or sort it database style, then you could use a human readable format like json or yaml to write out your data structures. you can go directly from a python dictionary or list to json and dump it to a file with a few lines of code. definitely bookmark the main docs page [docs.python.org](http://docs.python.org). good luck and have fun :)
A sinus scroller ([example](http://www.youtube.com/watch?v=JP8SK6gwiKc)). Had been looking at those all of the 90's but never made one. Python and Pygame to the rescue :)
TKinter might be ok, but PyQt would be worth considering, too. It is cross-platform, and looks more native on an OS than TKinter. If this is just for a "I want to try learning Python," learning project, Tkinter might be good enough, though.
I think you meant Flask, not Flash. Here is the link: http://flask.pocoo.org/
There's an overwhelming number of GUI toolkits out there. Everyone has his or her favorite. I also suggest Qt because it's a popular cross-platform system with both GPL and commercial licensing (and also LGPL if you use PySide instead of PyQt4 [API 2](http://www.pyside.org/docs/pseps/psep-0101.html#abstract)). Here's a a list of [PyQt tutorials](http://diotavelli.net/PyQtWiki/Tutorials).
I must say that I am not too fond of this article. The trouble is that an unsuspecting coder looking for some advice on crypto might find this and actually use the code snipplets as they are presented here. This article doesn't discuss the trouble with unsalted hashed passwords and it doesn't discuss the speed of the MD5 algorithm that works against it for password hashing safety. In short: if you use this code on your system, you have a big security problem. PHP and Javascript suffer from having a lot of bad example code floating around on the net, almost up to the point that any code you find for PHP and Javascript now is suspect. With python it used to be better, people were more carefull with what they put online. Let's all try to keep up the code quality in the python community. 
Haha yes. Thanks, fixed it 
&gt; I'm a jack of all as far as IT goes You you absolutely want to learn Python. I have a similar skillset in that I do server/network admin work as well as development. Python can be used to do things I used to do with BASH or AWK. Stuff like Fabric is also full of awesome for managing multiple servers via SSH. I've also written Windows services in Python, if you're more into the MS end of of things. It's just a very versatile tool to have in your bag of tricks as an IT generalist.
&gt; interact with another program (not via API) and make some key clicks, in this case selecting talent points in league of legends, but pretty much using it as a bot Try using [sikuli](http://sikuli.org/), which uses Jython (the Java implementation of Python).
Oh damn, I was about to recommend this and couldn't find it in my saved reddit pages and thought I lost that name forever!
I learned Python on stage, at a Python convention, in front of 2-300 Python enthusiasts in about 1 hour. It's probably one of the most intuitive languages that I know, yet I still manage to discover something new about it, which makes it more useful, on almost a weekly basis. I'd look into the "Learning Python" and "Programming Python" books by Mark Lutz; they may be targeted lower than you need and are certainly monstrosity sized books, but if you REALLY want to learn all about Python, reading cover to cover will get you just about everything there is with the exception of a few specialized libraries.
If you're on Windows, automation is pretty easy with [AutoHotKey](http://www.autohotkey.com). There's also a cross-platform .NET version called [IronAHK](http://github.com/polyethene/IronAHK). It's not a great language, but it gets the job done. Implementing the same level of functionality with Python would require a lot of tedious programming with the Win32 API. That said, I would support a project that aimed to create an equivalent to AutoHotKey for Python on Windows.
Ha! I know what you mean. I spent quite a bit of time re-finding after forgetting the name.
[obligatory xkcd](http://xkcd.com/353/). This is, quite honestly, only a slight exaggeration. 
If he wants to make robots (web monkeys) maybe mechanize is the way to go?
i like the idea of being able to be multiplatform. But autohotkey is cool.
I think the page has been updated. When I first read it the function's read loop was based on "range(size/chunk_size number)". This would leave the last partial chunk of the file unread.
Want something a little more beefy? http://pygame.renpy.org/ PyGame subset for Android.
Not coolest by a wide shot, but for our secret santa at work, I wrote a web app that served as a command-line terminal. The receiver had to guess answers/hack his way in to get the prize ... https://github.com/arekzb/csisanta
Applied Cryptography is 750 big, multi-column pages. This is like a three page blog post, how much information can you fit in that much space? This post is more about how to actually get pycrypto off the ground and running, rather than a thorough explanation of modern cryptography. There is a place for everything, and everything need not be massively deep. I, for one, sure as fuck don't want to have to read 300 pages of material to figure out how to get three lines of code running. Take it for what it is: a brief introduction to pycrypto and some basic cryptographic concepts, with short, working examples. From that angle, it looks good.
I wrote a small app that "maps out Github" - using their API it basically iterates through every project, fork, user and contributor it can find and maps out the links between them. I'm trying to get it to render into a nice large network graph that anyone can view, but i'm having issues with that.
these "Windows services" are .py scripts ?
I would say Python is so easy if you can't get it then you probably should pass on programming. Try learn python the hard way and Python essential reference 4th edition is a good reference book to have once you've picked up programming.
wow I like the design......saving it...
ok...but what is "Gamma World" and "D&amp;D" ?
I'm not a student and don't mind the price as such. I'm just not sure my schedule will permit it and if I factor in the cost of hotels it may be more than I was hoping for. That said if it could lead to a job where I was doing more python and less java then the cost including hotel would be more than worth it.
This is from a function where I needed to do the memoization by hand without a decorator, because some of the arguments where not immutable and I didn't want to index the memoization dictionary with them. try: dic = getattr(getprob, "memoize_dic") except: dic = {}; setattr(getprob, "memoize_dic", dic) if (e,j) in dic: return dic[e,j] Maybe this also works with "getprob.memoiz_dic", haven't tried it.
Python is great, but what you described already exists. I haven't tried it (yet), but [here it is.](http://autolol.codeplex.com/)
Deep copying looks like a bad idea, what about silently wrapping default arguments in a lambda without an argument, and silently evaluating this at every function call when a default argument is not specified.
No, he wants to test his code by having dictionaries return their items in various arbitrary orders. I don't get why he thinks this requires a language change though. Just make a new dictionary class that wraps a normal dictionary and uses a second dictionary with random integers as keys to provide the ordering, i.e. two dicts with key -&gt; number -&gt; value.
[the json module](http://docs.python.org/library/json.html) is also a good choice for data storage, and the json it produces can be easily read and written by libraries in other languages. I tend to use web UIs with [the cgi module](http://docs.python.org/library/cgi.html) but that of course requires a webserver to run the application in.
I'm a unix monkey and got sick and tired of hitting bash limitations. Read a couple python books and within a month have replaced nearly all of my maintenance scripts. I never felt I'd get much out of it because I could do nearly everything in the shell, but I must admit that it's opened up a whole new world. Don't hesitate. Do it. Do it, now. 
TL;DR: [AutoIt](http://www.autoitscript.com/site/autoit/).
Based on the [css](http://ep2011.europython.eu/static/0bd5177a92c8/p5/s/base.css) they're using, it looks like it's built using MovableType. [Wikipedia](http://en.wikipedia.org/wiki/Movable_Type): &gt; Movable Type is written in Perl Oh the irony. 
&gt; Maybe this also works with "getprob.memoiz_dic", haven't tried it. Yes, it works. No need for getattr/setattr. I very commonly do things like: def afunction(some, arguments, here=withdefault): afunction.number_of_calls += 1 return "I have been called %d times" % afunction.number_of_calls afunction.number_of_calls = 0
As an employer, if you're learning Python, please please please learn how to use a debugger early. It pains me to see print-statement-debug programmers. Yes, it can work in a pinch, and it's easy... but it's also inefficient and doesn't give you nearly the versatility that a real debugger does. From experience, it can be a difficult trait to overcome if not learned early on. (We use Python nearly exclusively for a large mutli-office medical records system -- aka, very large project.)
Check out AutoIT and AutoHotKey
Honestly, if you already have programming knowledge, you want to start with [Learn Python in 10 Minutes](http://www.korokithakis.net/tutorials/python/).
http://greenteapress.com/thinkpython/thinkpython.html Free PDF, HTML, print copy also for sale. I used it to learn Python (and programming in general, for that matter), and I've done all kinds of crap with no further reading, Android games, GUI apps for Windows and Mac, web apps, database stuff, some networking experiments. I've looked at dozens of other python books, none of them grabbed me the same way. My two cents is that you should go with Think Python, but then, your book is only $14, you may as well buy it, you'll surely get $14 worth of knowledge out of it even if it sucks. (I confess, I haven't read the book you linked, but after having tried many books with frustration, and finding Think Python both easily understandable and not-too-boring, I always feel compelled to recommend it.)
Did you preview my book and see if it offers a similar foundation to Think Python? Reading them both may be redundant.
Python isn't hard; you can pick it up to intermediate level in a week or two, if that's all you're doing...
Thanks, that's good news, I have refactored my code.
1. Not hard 2. Anything
Florence. This is relatively close to Serbia. Hmm, I might even go :D
I believe you could also do this with java's robot class.
It has a quote from Guido, that's a good sign. It says it uses quite a bit of computer graphics, which sounds fun. Think Python has a chapter with some turtle graphics like logo, which was fun. It's like chapter 3, so it starts you off with something visual and gratifying, rather than a bunch of numbers. Here's what you could do, buy the $14 book, and if you like Think Python, read the parts you find relevant in PDF form or whatever. Or, if you don't understand part of the $14 book, you could check the relevant chapter in Think Python. That'd probably be a good strategy. I can help you out with noob questions, too, if you come up with any.
This was my cs101 book. I think its a really nice intro to programming although I have heard people say that it is better used in a class room setting where you can have someone explain things to you. Its hard for me to tell. By the time you know a language it can be hard to go back and tell what would be a good introduction to the language. That being said the one thing about the book is that it does not cover python as a whole. It is more focused on being an intro to computer science. I still look at it from time to time.
http://djangocon.eu/ ain't too shabby either.
I am far (very far) from a Python pro. I am not completely new to programming, that is, I know what a function, variables, etc. are. The other day I **started** learning python for the first time ever. The very next day I coded a simple script that entered a specific directory, selected all the images in the directory, converted them to pdf (using convert from imagemagick), deleted those images, left the directory, entered another directory, did all the same, and stopped once it reached a directory I told it to. Python is fantastic. 
Same here. And I may only be posting this because I'm on Bacon Reader and can't save links... 
Yes. I've used py2exe for several in-house applications and it works well.
Are there any critical issues to watch out for with it? I'll be doing more research into this as the time I'll actually be converting the code draws nearer, but I figure that it won't hurt to ask if there are any massive gotcha's from using py2exe.
I'm a print-debugger. What tool do you suggest I learn instead?
I think aclark's advice is spot on. If you're not feeling inspired you're probably burnt out, take a step back, it'll come to you. On a side note, larfburger, I followed much the same route as you. BS in physics, first job was coding python (with a young family to tend with after work) and i never coded outside of work. I love coding, I just do 98% of it at work. Good luck!
I'm confused why you think this is special. I think it is nonsensical.
your link still points to fabric docs
Py2exe is a pretty good choice. Truth is, it installs a version of Python around the app and makes it look like an exe. It isn't a true exe, but most users won't know or care. The performance isn't quite as good as a true C++ native compiled app, but it's still pretty good. I wrote a book chapter about using py2exe and other related tools (distutils and NSIS) It got cut from the book, so I was allowed to release it for free: http://aharrisbooks.net/pythonGame/Appendix_C.pdf I hope this helps. Of course, you'll need a Windows machine for testing. I'm almost totally in Linux now, so I rarely use it myself anymore, but it can be helpful. If I remember, there are some issues about fonts. Check the chapter, and I believe I recommend never using system fonts, but always including fonts explicitly in your exe package. Hope this helps....
I was working with an older version from a few years ago, so things might have changed. The most difficult thing is that the documentation was scant if you run into a problem. I think I was trying to get it to work with pygtk and I had a hard time because of that.
At minimum, pdb. Depending on your environment there are a slew of other debugger tools available. If you're developing web applications, werkzeug is awesome (in browser debugging; tools available for most frameworks). If you're using an IDE, learn that, too. Print statement debugging does have its place, but so do other tools. The more tools you know and are proficient with, the less time you'll spend analyzing stupid problems.
Map our all the major weather events in the US and display them on a googlemap with their associated metadata. The filtering and display stuff was all javascript though.
pdb is probably the most important. It's the standard python debugger. It lets you step through your code, examine variables, change them, and execute one-liners.
Meh. The Pycon site was just as good.
I made some slides for my class (with plenty of downloadable examples and an audio walkthrough of every program) Here's the series on GUIs with Tkinter: http://www.cs.iupui.edu/~aharris/230/python/GUI-TK/gui.html and here's the section on data: http://www.cs.iupui.edu/~aharris/230/python/data/data.html Take a look at saving arrays of classes with pickle. It's a super-easy way to do basic data management. If you want something more sophisticated, I have examples of connecting to an SQLite database as well. 
And I've certainly spent way too much time analyzing stupid problems. Thanks for the suggestions - I'll check them out.
Not an exaggeration!
Well this is embarrassing 
I find Python really easy in most ways, but I also always run into things I find bizarre, and almost everyone completely disagrees with me. I imagine most or all of you probably will as well. I find it weird to have to put `self` as the first argument in every method of a class I ever write. I've been told explicit is better than implicit, but after a year of daily use, I don't think I've ever had to use the self argument in a way that's different than Actionscript's `this`, which was implicit. I'd like to see an example of why it's helpful, but I bet if I was shown it, I'd say "Okay, but I'm never going to do that," yet I still have to put self in what amounts to thousands of methods now, for no benefit to me. It feels like a tax benefiting people somewhere else who use that functionality. In a year, it's still not something I "never notice anymore" as I've often been told, and it still always annoys me, and I still constantly forget to type it until the error messages remind me again. I've had a lot of confusion over what's treated referentially. I've tried to delete things and instead simply deleted a reference to them. There's a huge amount of copy online trying to set this all straight for confused people. A simple example - one of so many - is what happens if you make an element of 2 separate lists a reference to the other list. Python recognizes this and will show an ellipsis when you print either list out to show that it's an infinite reference loop. But what happens when you delete that element? Does it delete the other list, or does it simply delete the element, and what does it mean to delete an element? Does it become None? I feel like I'm very often looking this kind of thing up, or having to test snippets to see how they'll work. I haven't felt that way in any other language I've used (about 25 now over the last 2 decades). In one arena in which I work, I use a widget set that lets me put a command on a button. The button is not known to Python, and though I can access it and do things like change its command through Python, I can only tell the widget set which button I mean with a string name, optionally with a full path (i.e. 'windowName|layoutName|controlName'). If the button is to be part of the UI built by and later accessing a class, I have to jump through some pretty ugly hoops, like stuffing the call to the (string referenced) button into a lambda. I've found another weird bit here wherein I couldn't make a lambda inside of a function inside of a class method, and it was really hard to track down why, but the only solution that I could find - with the help of 3 senior programmers - was to create a function creation method inside the class and call out to it from the method to build the function I needed, which just all felt awful to me. Yeah, a lot of the fault of this is on the crappy widget system, but in several other languages I've loved, this wouldn't have been any kind of issue. This is just an area in which Python feels weird and murky to me. Probably 10 times now I've run into things like [this](http://love-python.blogspot.com/2008/02/reverse-string-in-python.html). I love the [::] notation, but it's a sugar, and it's bothered me that there isn't a non-sugar string reverse, like there's a simple .reverse() method for lists. I can get by just fine without it, but with so many little weirdnesses like this in Python, I often find myself scratching my head and wondering what is with this language, and it's huge constituency of aggressive apologists who are always rushing in to yell about how things like how a sugar with no non-sugar counterpart makes perfect sense, instead of simply saying "Yeah, that is a little weird," so I can feel mildly normal again. I don't think I've ever found anyone in a Python forum agreeing with any negative assessment of anything - large or small - in Python. You are not allowed to dissent! All that said (and it's probably less than half of the things I've found weird or annoying), I am really enjoying Python. It's given me a great deal more power than a lot of my previous languages (along with all the weird things), and it's opened the doors on a lot of ideas that I had trouble completing in them. I've also found that it's *deceptively* simplr, and the more I learn, the more I start to feel that things that have annoyed or puzzled me about the language are really trivial, compared with the rather huge things of which it's capable. I'm keeping my mind open and just learning what I can, though I'm starting to feel that even after a year and dozens of applications, tools, utilities, etc., I'm not even halfway to learning the real power of the language.
There is cx_Freeze ( http://cx-freeze.sourceforge.net/ ). I haven't used it but keep it bookmarked to try it 'real soon'....
The site is built in django using pinax. The CSS is custom made by our great designer that helped us through the years with the various PyCon Italy designs, we change it every year.
This looks quite tasty. I shall definitely check it out; thank you!
Once you learn it you can eat small rodents...
According to the Conference presenters, it's [written using Django](http://imgur.com/WwyME).
You absolutely can write windows services in Python. I have.
&gt;If I remember, there are some issues about fonts I went through all kinds of shenanigans trying to get fonts in my PyGame2Exe'd game, and still haven't succeeded. I'll be checking out that chapter once I have some free time, thanks for the link!
I love the Wing IDE for a lot of reasons, including it's excellent visual debugger.
No, you kill them with the Holy Handgrenade. "Four is right out."
Been meaning to do debugging the right way... Can you give me an example where you would naively think print debugging is good, but pdb will work much better?
Print statement debugging (or better, using the actual logging package) is OK if you're just tracing the overall flow of a program that isn't already set up to debug the flow you're looking at. This would be the types of messages that "Loaded database data" ... "Calling main application loop" ... etc. More for understanding application flow. Real debuggers are simply fantastic for examining what exactly is happening at a particular break point in a program. Debuggers (pdb and otherwise) let you introspect what the local and global variables are at any point in a program, and let you move up the stack trace to introspect callers, too. Let's say you're trying to figure out why a commit to a database backend is failing. You aren't even certain what part of your program is calling the database commit. You insert a breakpoint right before the line that fails. When the breakpoint is capture, you can see exactly what query was being committed via local variable. That's a help. You can then see what method called the commit, and so forth up the method chain/stack trace to figure out the ultimate point in code responsible for the failure, and the local variables at that point in "time". Debugging with print statements **would** work. However, it would require multiple iterations of the code -- and a far deeper understanding of where you should look next.
Sweet explanation, thank you!
Have been using cx_Freeze recently to package some Matplotlib + PyQt applications. Simple and works perfectly with Python 2.7.
Here's another vote for ['How to Think Like a Computer Scientist'](http://greenteapress.com/thinkpython/thinkpython.html). I'm using it right now with the [MIT OCW 6.189](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-189-a-gentle-introduction-to-programming-using-python-january-iap-2010/), which is like pre CS101 using Python as a base and this book to go along with it. Both are great. The course gives good direction, reading assignments, exercise, and small projects to do. Has been great so far and the book is top notch. Plus it's free!
why secret key combo? you can send photo only if anyone touchs any key and don't unlock it in 30s(to avoid catching yourself)
Oh nice. It was pretty messy last years, information was very fractured. Can't afford the trip to Florence unfortunately so I can't go this year. :(
any mirror? the link doesnt work..
Your going to need to put alot of imports in your scripts that you didnt think you needed, just be aware :)
No pinax here. Just Django, love and some custom apps.
Thank you! Just as long as I do not have to import the ability to import, I shall not break any keyboards!
That'd be pretty embarrassing if it wasn't. lol
I've used [PyInstaller](http://www.pyinstaller.org/) with some success. One advantage is that you can build executables for Linux, Windows and Mac OS X with a single tool. Example: The [logview](http://code.google.com/p/logview/downloads/list) application, which is a Qt-based viewer for logging events from the standard library logging package. Although I had to do a little extra work to build the .dmg on Mac OS X, PyInstaller got me to the point where I had a working app folder. Generally, the user doesn't need to have Python installed in order to use a PyInstaller-built application. AFAIK py2exe is Windows-only - you mentioned that you work on Linux, but are your users Windows-only?
One thing to watch out for: py2exe won't work with modules installed as zipped eggs. The solution is to re-install eggs with the zipsafe=False flag set. A second gotcha is that py2exe packs python code into zipped library. Some packages won't run this (usually because they do dynamic stuff with the PYTHONPATH on import which breaks when the library is in a zip-archive). For individual packages its usually possible to hack round these problems but if you are using a large number of third-party packages, it can be a bigger problem.
I've started and stopped with Python several times over the past few years -- usually wanting to pick up Django. This week I had a project at work that involved querying a web service and parsing XML and I knew Python would be a good tool for the job. I just started using it. It's that easy. The documentation is really good, and when you search google for help you don't find crap like you can with some other languages. I'm sure my script is wrong in a bunch of ways, but it's getting the job done, and I'll get better with time. The XKCD cartoon is apt with regard to Python -- there is something blissful about it.
Yes, there is a better way to do it. You want to use the dictionary known_actions to dynamically dispatch other methods. Create a method called power_on (or whatever you want), assign is to known_actions['power'], and then call it in determine_action. e.g. known_actions[action_type]().
and here is untested sample code for good measure: class MyCoolClass: def __init__(self): self.known_actions = {'power_on': self.power_on, 'power_off': self.power_off} def power_on(self, action, target): # do power on stuff # you might want to put these in a separate class # so this class can handle of machines that require # different instructions pass def power_off(self): # do power off stuff pass def determine_action(self, message): # Note that the split function splits on " " # (and "\n", "\t", "\r", and "\f") by default so you # don't need to pass it explicitly though it doesn't # hurt action_type, action, target = message.split() try: self.known_actions[action_type](action, target) except KeyError: print 'incorrect action type %s' % action_type EDIT: Thanks Peaker for pointing out my mistake. As he or she says, if you don't need to use known_actions anywhere else, you can just put the dictionary in determine_action.
See this excellent pdb tutorial, written for beginners: [the Python debugger](https://pythonconquerstheuniverse.wordpress.com/category/the-python-debugger/). Alternatives: [ipdb](http://pypi.python.org/pypi/ipdb) (pdb + syntax highlighting), [winpdb](http://winpdb.org/) (cross-platform GUI debugger).
I didn't know you could call dictionaries like that! And the methods-as-variables thing is very tidy.
No dictionaries were called. Python lets you do arbitrary expression chains, so you can fetch a callable object in any way you wish and then call it. Try, for instance, passing functions as parameters and returning new functions you define inside the function. It works exactly like any other object, with some additional semantics on calling.
Your Fabric and Flask links are swapped.
 import pdb; pdb.set_trace()
if you are using 3rd party packages (like PIL, wxPython...) you find a lot of information for dealing with them on the www.py2exe.org wiki.
Comments/improvements/testing welcome.
Yes I can do this but I actually find it somewhat rewarding / convenient to just come back and hit the special key to shut the program down instead of triggering it, waiting 1 second for it to lock my machine and then doing the whole unlock song and dance (ctrl+alt+del, type password). 
If you're using a class, and want to call a function like self.power_on(), you could use self.\_\_getattribute\_\_("power_on")() although the dictionary method is more flexible 
His example refers to "self" where it is not defined, and will not work. He should have placed "known_actions" below the definitions of power_on and power_off, and then used "power_on" and "power_off" without the self. That means the dictionary will contain ordinary functions rather than bound (or unbound) methods, so when you call them, you're going to have to give the self explicitly. Another alternative is defining the dictionary within the "determine_action" method, and then "self" is in scope so you can use the syntax ryankask has used. BTW: Your original eval() on the contents of an SMS pretty much surely means someone could pwn your machine.
If your site gives me a horizontal scrollbar, you fucked up. This one did.
The css refers to "The League of Moveable Type". [The League of Moveable Type](http://www.theleagueofmoveabletype.com/) != [MovableType](http://www.movabletype.org/)
Ah thanks for that. I didn't know. 
&gt;BTW: Your original eval() on the contents of an SMS pretty much surely means someone could pwn your machine. Yes, and I realise even with sender filtering it's not 100%. It's a cool idea and it solves a problem for me - it will reduce my power bill.
Wouldn't it preferable to use `getattr(self, 'power_on')()`
Ah I didn't know about that, does it work the same way for new and old style classes?
Python is ideal for automation and scripting! To put this in perspective I'm a technician not a full time programmer. Given that I've replaced a bunch of Windows scripts and C++ code with python scripts that run every day at work. To put it mildly the whole system is now much easier to maintain. While I haven't personally done large apps in python it can be done. I have used python scripting to aid in the development of some C based programs though. Python is very speedy to work with and frankly can easily replace a lot of old UNIX tools for software development. As to your personal project based on the little info we have I would have to say Python will be fine. The worst that could happen is that the app would be noticeably slow. With modern hardware this is seldom a problem. Your biggest issue is deciding between the old 2.x series and Python 3.2 and beyond. Unless you absolutely require an old library I'd suggest going the 3.2 route. 3.2 in my mind is a vast improvement over the old series. One last suggestion, don't think you have got python programming nailed after a couple of weeks. There is a lot of capability there. 
or self.\_\_dict\_\_["power_on"]()
Thanks so much. I have been searching for months on how to build python into a windows exe. Py2exe doesn't work with PyQt (without a sip installation, which I also am unable to compile for windows) and this worked flawlessly, no hassle.
Can't you just use a lambda? def determine_action(self,message): action_type, action, target = message.split(" ") known_actions = {'power': (lambda : actions.power(action,target))} known_actions[action_type]()
This is pretty much exactly how I do things. I've got a system the relies on a set of rules where each category defines a callback that should be run. So I end up with: getattr(obj,callback_func)()
I didn't mention AutoIt... AutoHotKey is a fork of AutoIt v2 released under GPL. AutoIt 3 has, arguably, developed into a better language, albeit closed source, but in my opinion AHK has a more vibrant, helpful community and has promising forks such as IronAHK.
 action_type, params = message.split(" ", 1) f = getattr(actions, action_type) # or look up function some other way # handle unknown action_type f(*params)
I had an issue with tcl/tk (via tkinter): I wanted the result to be as clean as possible, which means telling py2exe "`bundle_files = 2`", and it then produces a distribution containing only 3 files: the launcher executable, `python.dll` and `library.zip` (with all your stuff and dependencies inside). Problem is, tkinter obviously can't instantiate tcl/tk when its dlls are inside a zip file, and py2exe doesn't do anything about that by itself. So I had to subclass its exe_builder, and say "`self.dlls_in_exedir += ['tcl85.dll', 'tk85.dll']`" in `plat_prepare()`, and that was it. In other words: no, I haven't seen anything like "massive gotchas" and strongly recommend py2exe over less widely used alternatives.
I've used [shedskin](http://shed-skin.blogspot.com/) for a few internal applications, and I'd be interested to see what [Nuitka](http://kayhayen24x7.homelinux.org/blog/nuitka-a-python-compiler/what-is-nuitka/) could give me. I've also used shedskin + cygwin for two windows utilities, but I mostly deal with CLI utilities, so your mileage may vary.
Fair enough. I was too lazy to click the link otherwise I would've never known. Good to hear they're still working on AutoIt v2.
Thank you! Organizing information on europython website is harder than one would expect, so we are happy if you noticed an improvement after the redesign and platform change
Sorry, this was a demo for claird. I suggested he post PYTHON!URL mailing list items on reddit. 
€100 for 5 days including lunches and coffee breaks. I don't think you will find conferences of this level that costs much less.
Looks like it does: Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) [GCC 4.4.5] on linux2 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; class bar: ... foo = True ... &gt;&gt;&gt; class foo(object): ... bar = True ... &gt;&gt;&gt; getattr(bar(), 'foo') True &gt;&gt;&gt; getattr(foo(), 'bar') True 
Good times, I'll remember this in the future 
I agree.
I use cx_freeze with python 2.5, 2.6 and 2.7 with no issues. I have about 400 installations and haven't had a single exe incompatibility issue on xp, vista and win 7. Here is the setup.py i use: import sys from cx_Freeze import setup, Executable base = None if sys.platform == "win32": base = "Win32GUI" setup( name = "FFXIVLogParser", version = "3.0", description = "FFXIV Log Parser", executables = [Executable("logparse.py", base = base, compress = True, icon="icon.ico")]) This script runs both as a console app and a wxPython app if you do not pass parameters and both work great without extra windows or anything strange. The script I convert is here: http://www.ffxivbattle.com/logparse.py To build I just run: python setup.py build EDIT: Fixed formatting.. for shame on me.. :)
I remember I had issues with this too (and music), in the end I had to copy a DLL file over from one of Pygame's directories to package directly in. That fixed it IIRC.
Maybe this clears things up: try: self.known_actions[action_type](action, target) is functionally equivalent to: try: fn = self.known_actions[action_type] fn(action, target)
Not only would I say that's preferable, it's the only suggestion in this thread that works reliably. \_\_getattribute\_\_ is new-style classes only, and \_\_dict\_\_ doesn't exist in classes that use \_\_slots\_\_. There are probably more situations where they don't work, but getattr() is specifically designed for this purpose.
&gt; self I like this. It allows you to run methods bound and unbound. For example: def mutate(thing): thing.a_property *= 5 class Thing: a_property = 5 thing = Thing() # unbound mutate(thing) # bind it Thing.mutate = mutate # bound thing.mutate() When you bind a method to a class, the first argument becomes the explicit "self". It doesn't have to be named self though. &gt; references Basic garbage collection at work here. To get rid of an object, all you have to do is delete all references to it. "del" removes an entry from a sequence. It doesn't replace it with None. The key/value pair is gone. x = Thing() a = [x,2,3] del a[0] a == [2,3] x # that Thing still exists because x still points to it &gt; functions I'm not sure what you're talking about. This works fine for me. &gt;&gt;&gt; class Foo(object): ... @classmethod ... def bar(cls): ... def baz(): ... return lambda x:x ... return baz() ... &gt;&gt;&gt; Foo.bar()(5) 5 &gt; reversing strings ''.join(list(reversed("hello"))) How often do you find yourself reversing strings anyway? 
Py2exe has a problem with setting an icon for the .exe. I don't remember exactly what it was, but it wouldn't show the icon on Vista/7, may have been something to do with multiple-resolution icons. PyInstaller didn't have the same problem. Other that that, I find they both work equally well.
If creating the exe is more or less a one-time thing, you can use [Resource Hacker](http://angusj.com/resourcehacker/) to replace the icon.
This is great. We should only have those kind of exercises in school. When it's funny, you want to solve it.
I've been successful setting the .exe icon with the following setup.py code: setup( windows=[{"script" : "program.py", "icon_resources": [(1, "program_icon.ico")]}], options=..., data_files=... ) And setting it as the in-program upper-left icon (wxWidgets): if sys.platform == "win32": ib = wx.IconBundle() ib.AddIconFromFile("program_icon.ico", wx.BITMAP_TYPE_ANY) self.SetIcons(ib) this is inside of a class subclassing from wx.Frame.
Learning the syntax of a language is the easy part, and Python has pretty intuitive syntax, with few surprises. The harder part is learning all the libraries that make life easier (and keep you from reinventing the wheel).
Fuck, I'm writing that code right now for my thesis! I'm using threading by the way. It's the first thing I tried, and it worked no problem.
What are all the parts - software, hardware, network - that you'd need to have this work? I can't tell how this is useful or what's needed to get it going.
This is interesting. Could you provide more detail? source? CSV files sounds like you did some kind of database system. I've been meaning to do something like this.
Original creator of ircutils here, I haven't uploaded it to the Python cheeseshop yet, as I'm still delegating with a few problems that it has. Pip will work once it's done, however.
You should really also look at http://learnpythonthehardway.org
* Linux or Windows machine that's always powered on. Probably connected via Ethernet as WOL doesn't seem to work too well over WiFi. * Target machine you want to wake up (on the same network) * 3G/GSM dongle that exposes virtual serial ports (i.e. most of them) * A spare SIM card * Another phone that can send text messages, or a way of sending text messages (web service, email) So machine A is turned on, machine B is powered off. Dongle in machine A receives text message, sends WOL packet to machine B. You could also make machine A reply with the current external IP address so you could SSH in. 
you don't need ctrl+alt+del at all someone: press any key, cannot type password, get captured; you: press any key, type password, unlock it
Awesome. I've been meaning to start solving ODEs with Python. I'm tired of Matlab...
Sorry if I'm not answering the question that was asked, but: if all you're looking for is storage, you might just want to set up a shared NFS mount that everyone can read and write to. You won't get the more Dropbox-y features (shortlinks, photo albums, etc.) but if you're looking for basic shared file storage, there's no sense in reinventing the wheel.
They really need to change the name of winpdb.
There was a discussion of [this article](http://mysite.science.uottawa.ca/rsmith43/Zombies.pdf) (PDF warning!) [on /r/math](http://www.reddit.com/r/math/comments/fupwp/were_fucked/) a month ago, in which the authors also model the outbreak of a zombie infection. I recall that it was pretty interesting :)
An (S)FTP server.
a network share and a script that rsyncs that share to a local mirror when it is available
Here are some ideas how to create it using git-annex (there are many other ways to store it other than S3 that is mentioned in the first example) http://kitenet.net/~joey/blog/entry/new_git-annex_use_cases/
Did you forget plt.show() at the end?
I recently bookmarked this: &lt;http://www.mayrhofer.eu.org/dvcs-autosync&gt; I did not come around to test it though.
http://allmydata.org/
Why Python? If there was a Dropbox like service written in another language, would you reject it? Did you ask in /r/technology?
Store it inside a truecrypt container on Dropbox. 
FTP is horrendous and insecure. Edit: Original post only said FTP. Of course SFTP is an alternative, but I don't think it's perfect for this use.
I was about to post this exact same link. I didn't test it though.
I agree, see [SFTP](https://secure.wikimedia.org/wikipedia/en/wiki/SSH_File_Transfer_Protocol).
This one isn't written in python, but it's an open source Dropbox clone: https://github.com/philcryer/lipsync
it doesn't any have anything on classes unless i missed it. has anyone seen a really good tutorial on classes?
If you're doing this with Windows boxes, it would have to be a network share via Samba or FTP right?
These have been around for quite a while. Not sure it deserves a repost. Unless something has changed?
This is a pretty decent intro to python. It doesn't do any of the OOP stuff, but if you want to get started coding something useful quick, this is an excellent start.
Not written mostly in python. As I understand at least 2 of those, they use it as a scripting element, so....
Lawsuit ahoi!
Or SSH/SFTP via [ExpanDrive](http://expandrive.com) (it's worth the fee IMO).
You already gave it: SFTP. Not to be confused with FTPS, which is just silly.
Class as in a 'school' :) 
Holy cow, they have Bitcoin donation!
Parsing HTML != Screen Scraping
I think it's too late, now it's a well-known name. But sure, its name is very misleading. When you write about it, you always have to add that it's cross-platform.
I actually started doing the LPTHW series and I will also suggest this. I have picked up a few things that I haven't been forced to learn from a book. The examples are good, and if you do the extra credit you will learn stuff (if your honest about it). I'm about half way done and have learned more that way than any other attempt I have made. Certain things now just make sense for whatever the reason. Btw, my back ground is strictly IT, I can do very basic bash but I like python as a whole and dabble in it as I have time.
would be nice if you could target dalvik instead of the python vm
Reposted so much. Someone should just make a master list and link it on the sidebar because these repost are getting ridiculous.
1. Forget CGI, discover WSGI 2. Have a look at ep.io, appengine et al 3. ??? Profit.
I can't believe no one has said this yet: A DAV Server, allows for mounting on just about any OS, you can implement your own auth schemes and well, apache + mod_dav is pretty rock solid.
If all you want to do is show something off temporarily (not deploy it), you can check out https://showoff.io It's a simple script that opens up a tunnel so that requests for a specific generated domain name proxy through to your local development server. It's free for a 5 minute show and it's a dollar for a day pass.
plt.ion() is at the beginning, which puts the program in interactive mode. All plots show without using plt.show()
Yup thats the paper that I got the model from.
Same with "Should I learn Python?", "What's the best way to learn Python?", and "What IDE should I use?"
Finally, someone who understands me!
Sounds neat but [the screenshots](http://svn.softwarepublico.gov.br/trac/invesalius/wiki/InVesalius/Screenshots) didn't load. Perhaps due to a dropbox bandwidth restriction: "[This account's public links are generating too much traffic and have been temporarily disabled!](http://dl.dropbox.com/u/4053278/invesalius_trac/screenshots/invesalius3_mcds1_bone.png)"
Is this article correct about the licenses? Doesn't Qt itself have restrictions on making closed source projects, you have to purchase a commercial license. edit: spelling
http://www.sparkleshare.org/ It's a free as in freedom Dropbox replacement. It's still under heavy development though.
The only restriction to QT is that you need to follow the lgpl. &gt;This version of Qt is appropriate for the development of Qt applications (proprietary or open source) provided you can comply with the terms and conditions contained in the GNU LGPL version 2.1. From [http://qt.nokia.com/products/licensing/](http://qt.nokia.com/products/licensing/)
I don't think there's any ??? in this process.
I suspect you are not writing unit tests for your code. For long functions or classes, I almost immediately notice that I haven't written enough tests to have coverage or confidence in the results. I also can't stand code which is difficult to set up or call, and that would cause me to refactor sooner than later. If refactoring is a challenge, you can use a good IDE like PyCharm, PyDev (or even Komodo with a BicycleRepairMan macro) to help automate it.
If the code works, it's not worse. Remember, you're not here to write code, you're here to write programs. Don't deliberately write bad code when you already have a good idea of what good code will look like, but your main goals should be getting the functionality you need. Remember the YAGNI and "code for today" principles, too. Of course, taking that to the extreme means you end up being unable to write complex programs because your code is too awful to extend. So you need to refactor into something cleaner. But it's better to go from working ugly code to working clean code than it is to go from perfect code that is unfinished to... more perfect code that is still unfinished. Which is what happens if you get bogged down with trying to make everything perfect from the start. Get a feature working. Verify the results. Refactor your code while testing that the refactoring works. Repeat.
*Pyside or PyQt* They miss out the, imo, the one key difference between PySide and PyQt: PyQt uses a lot of unnecessary Qt string features. QStringlist, QLatinstring, QString.... I moved a fairly large program to PySide and being able to use standard python string features like "%s and %s" % ("spam", "eggs") instead of the long-winded Qt process: QString("%1 and %2").args("spam").args("eggs") I used to think the whole QString vs str was a non-issue. I strongly believe it isn't now. 
I like Python because I can write shit code, this is normally what I do, code up what is essentially a draft, mess around with it until I get it how I like and then re-code it from scratch with lots of effort put into documentation and clarity. With slower-to-write languages, you generally just stick with the "draft", if you later realize that you should have done something differently, it's going to suck.
I seriously wish Google would also release videos that talk about Python 3.
Would you write a triply nested `std::map` in C++? Probably not. Don't do that in Python either. Just because you can type 100 WPM of Python code doesn't mean you have to. You still need to think about your containers, your algorithms, and everything else that you'd have to in any language.
You should probably be a little more disciplined when writing your code, this book will help with strategies on writing good code: http://amzn.com/0132350882. The author discusses Java, but the same techniques apply to python. Obtaining the mythical 100% code coverage with unit test are a good goal, but writing easy to understand, small functions that are as atomic as possible will let you code your "stream of thought" by segmenting each idea into smaller ones that you can name, keep track of, and test. Don't forget to refactor while you still know what your code means; make it work, make it right, make it readable.
Not being snarky: Why are you writing Python at all? What would you have done in C++ instead of that triplely-nested dictionary? I suspect you'll find that you're writing the easy problems in C++ and the ugly ones in Python because it's not impossible in Python. There are just as many ugly solutions in C++, but you never attempted those because you're not nuts.
With no disrespect, this is sort of the perl train of thought: It's better to easily pump out code that gets the job done when you have a lot of random scripting jobs that need to get done.
git is not particularly good with large binary data
rsync?
This. I was able to take something from 300 line draft to 50 line rewrite.
I find myself asking "if this were a library, would this be pythonic?" a lot, and fixing my code so that it is. In many cases this just involves turning things like that triple-nested dict into a few classes and moving all the globals and hard coded parameters into the __init__ function.
I have a math background and I like python because I can almost write in the same language as a mathematical proof. It has been a real boon to capitalize on the all my earlier training.
Why would you bother going through the extra step of using showoff.io instead of just linking them to your ip? A domain is 5 bucks a year anyway, or 1.37 cents a day, if you don't want to link them to your IP. You can get fairly robust hosting for a few dollars a month, too. Free and 5 dollars a month are almost the same thing.
A "." has been left in the URL. [fixed link](http://amzn.com/0132350882)
PyQt actually provides two different APIs. API 1 is the version with QStrings, QVariants etc, and API2 is doing automatic conversions like you described PySide. PyQt on Python 2.x defaults to API 1 and defaults to API 2 on Python 3.
I'd love to see proof of this, genuinely curious
At the moment, python for android can't provide the traditional user interface widgets that most apps do, but you can still use web views (which is what the gmail interface uses), so you can still do some neat stuff. Also, the other day I got web2py to run on android. I know the utility is questionable, but I still think its cool.
Unit tests with near 100% code coverage are mandatory for dynamic languages. For me anyways. I never found the saying, "Untested code is broken" to be true until I started writing python.
done that
why ? what's the big deal (with Google's video) ? there's a lot of video about py3 from other sources.
you accidentally the link
Link correctly: [http://amzn.com/0132350882](http://amzn.com/0132350882). Thanks, anyway.
Do you have any links for the OOP stuff? I'm pretty confident in coding Python but I always get a bit lost when I want to do OOP.
Somehow this reminds me of r/firstworldproblems...
I guess I need to get more into the habit of rewriting. That is something that will be hard for me to get used to but it is probably for the best.
This is my metric as well. If I'm finding it difficult to write tests for my code, or if they require too much mocking or setup, then the code is probably not good. 
hell yes. hard-to-test code seems to be quite similar to badly-designed code, and the pain of having to test it will drive you to make it saner.
only time i write triple list comprehensions is for one-time bits of code, or a magical report on a dataset that is only needed rarely. if someone needs to maintain and modify the code, damn, its gunna look way better.
Iterate, iterate, iterate, iterate. There's nothing wrong with writing a crappy first draft, as long as it works. One advantage to python is that it's readable and compact. This makes it easier to realize that your triply nested dictionaries were probably a bad idea. It's easy (for me, anyway) to get lost in a C++ codebase. Readable code is easier to refactor. In my opinion, anyway, even crappy python is more readable than good C++ (I'm biased, though). Regardless of language, though, I think it's good to get a rough version of something that works and then work towards getting a version that you're not embarrassed by. I'm primarily a researcher (geophysics), and not an engineer or a computer scientist, though, so perhaps I'm not the best person to comment here... 
I am also a physicist, not a computer scientist. Most of my code normally starts out as just train of thought and I don't think it will grow into some thing I will need to use over and over, or improve and expand. So I have python scripts that expand to become larger programs over time. I guess I need to learn to iterate. And get over my resistance to redo something that already works.
try reading the Zen of Python and the python style guide. That helped me in many occasions.
You might want to check out [webdav](http://savannah.nongnu.org/projects/davfs2)
What's the issue with string conversion? The following works fine. import sys import PyQt4.QtGui as QtGui app = QtGui.QApplication(sys.argv) label = QtGui.QLabel("%s conversion %s" % ("String", "works ...")) label.show() app.exec_() 
Multiprocessing actually uses a lot of the same semantics for locks, joining threads, etc. as the Threading module, so it's an easy drop-in replacement. I'm a big fan of multiprocessing.Pool, as it's super simple to implement, like so: from multiprocessing import Pool import paramiko from getpass import getpass password = getpass() p = Pool(5) def ssh(host): ssh = paramiko.SSHClient() ssh.connect(host, username='herp', password=password) in, out, err = ssh.exec_command('uptime') print out.read() ssh.close() p.map(ssh, ["list","of","hosts","go","here","derp"]) edit: It's this simple to do threaded SSH in pure python. I'm pretty sure the code above is fine, but it's not actually tested. If you're interested, I can provide a more extensive and tested example but the above should work with minimal edits needed if any.
For the most part, both paramiko and calling out to /usr/bin/ssh are equivalent. I liked using paramiko because it's a pure python library*, and offers a nice programmatic interface to SSH and SFTP. Since you have access to all the exceptions, you can take different actions based on not having a remote key, or having the wrong password, or if the command isn't found. * paramiko requires PyCrypto, which is C 
You can use the new API for PyQt. For Python 3, it is enabled by default. For Python 2.x, I do the following: import sip API_NAMES = ["QDate", "QDateTime", "QString", "QTextStream", "QTime", "QUrl", "QVariant"] API_VERSION = 2 for name in API_NAMES: sip.setapi(name, API_VERSION) from PyQt4.QtCore import * from PyQt4.QtGui import * from PyQt4.QtSvg import * from PyQt4.QtCore import pyqtSignal as Signal from PyQt4.QtCore import pyqtSlot as Slot 
Either I have an old version of scipy or something else's the matter, but it doesn't work for me without plt.show().
Some relevant points in PEP 20, and a famous mantra: * Readability counts. &gt; Programmers spend more their time reading someone else's code than reading or writing their own. * Although practicality beats purity. * Now is better than never. * Although never is often better than *right* now.
If you were now to do a qlabel.text() would a str be returned
I can't see it either.
There was crash in the comments queue server of reddit which caused all this.
These are how I learned Python. I can't recommended them enough.
You know, if we had all moved on to 3 when it came out you wouldn't all be worried about how long it takes the documentation to load. Just saying.
Yes, for the new API it does the conversion automatically. (Default for Python 3) Old style API would require a manual conversion: print unicode(label.text()) If you don't have strict rules (like converting every QString immediatly) you can get into trouble having Python and QStrings around in your app, though.
Used cx_Freeze for PyQt and cocos2d applications without problems and it created binaries for windows and linux. Takes some proper configuration in the setup.py but then it works like a charm.
Yep. No better feeling than [negative KLOC](http://folklore.org/StoryView.py?project=Macintosh&amp;story=Negative_2000_Lines_Of_Code.txt&amp;topic=Management&amp;sortOrder=Sort%20by%20Date&amp;detail=medium). If you don't need it, [cut it out](http://www.rcramer.com/fun/econobox/). 
I wanted to learn PyGame so I made this, figured I'd learn some version control at the same time and share my code.
All I use is: (require 'project-local-variables) And when you want to open project -- you just open .emacs-project file, which is something like: (rope-open-project (file-name-directory load-file-name)) (fuzzy-find-project-root (file-name-directory load-file-name)) It just does what you need (runs your lisp code). In our git/hg/bzr world with millions of clones the heavy "create me a project" just does not work. And I just created my own small "clone" script that clones and copies .emacs-project files (and some other local configs).
Mate, please indent all code samples with four spaces to avoid ugly messes like that. You can wrap inline code with backticks to make them look `like this`.
Code, test, refactor. Don't just code without testing or refactoring. Python let's you be more productive, but you still have to maintain your code and improve it. If in doubt, ask yourself _What Would Guido Do?_.
Cute.
I'm a fan of reversi, can't wait till I get home and give it a spin :)
reversi.py:101 should read if self.board[x][y] == 0: Other than that, seems to work okay from an initial glance.
Ah, that's what I used to do and was a pita as I use the text in the QWidgets a lot (treeviews, tableviews, etc). I haven't even started with python3 yet (on my TODO) but it's good to know PyQt has auto conversion so my program could use PyQt and PySide without hacks.
It will be useful, thanks. Don't you want to put it on github?
If Vorhees is pickling objects and then writing to JSON, it's not really all that different from the built-in [shelve](http://docs.python.org/library/shelve.html) module. If you want a purely human readable JSON store, [simplejson](https://github.com/simplejson/simplejson) provides that. Although, certainly, passing the pickling through the base64 encoder is something that neither of the above two provide (AFAIK).
This is nice, let's have some more! I'll second the commenters on your blog--since you're publishing this for public consumption, a lot of people will find reading your code more comfortable if it's PEP-8 compliant.
Thanks, it's fixed now.
Respect. Always glad to see code-snippet and small-gem blogs. Makes the world more interesting.
I've been prototyping a location based app using Python for Android - it calls my server (on a linux box, running bottle.py) and provides GPS and other details from the phone and then displays the response. It is great for testing location ideas whilst on the commute train.
I'm getting a 404 on that link. Was it Code Complete by any chance? My favorite software development book.
Take the period off the end of the link. [link fixed](http://amzn.com/0132350882)
Coolio. Some pedantic changes you might want to consider... Try changing the following line: empty_tiles = len([0 for tile in all_tiles if tile == 0]) to this: empty_tiles = sum(1 for tile in all_tiles if tile == 0) And the same for other similar bits of code. Alternatively, try it in one pass: tile_counts = defaultdict(int) for tile in all_tiles: tile_counts[tile] += 1 empty_tiles = tile_counts[0] # etc... You might want to abstract the board a bit more. Your code looks perfectly functional, but with a little abstraction and syntactical sugar it can more self documenting and robust. Something along these lines: &gt;&gt;&gt; board = ReversiBoard() &gt;&gt;&gt; board.get(2, 3) White &gt;&gt;&gt; board.set(2, 3, Black) &gt;&gt;&gt; board.flip(2, 3) &gt;&gt;&gt; board.count(White) 1 &gt;&gt;&gt; for tile in board: print tile White @ (2, 3) 
Cool. Haven't read it.
Well that would have been a stupid strategy. Now, on the other hand, is a pretty good time for many projects to start moving over, and working on porting dependencies. Some should still hold off for a while.
502 means your comment successfully posted.
Thanks for this, I've been working with python a lot and learned from some talented friends, but I'd never been introduced to this. I love picking up little nuggets like this that I know are going to vastly improve my effectiveness.
First comment pretty much nailed it.
Not a big deal, but your class naming convention is unusual. From [PEP8](http://www.python.org/dev/peps/pep-0008/): &gt; Class Names &gt; &gt; Almost without exception, class names use the CapWords convention. &gt; Classes for internal use have a leading underscore in addition. I tested on Python 2.7 and it mostly works. One thing that's weird is that when I try to exit the window it stays open. I do see &gt; &lt;Event(12-Quit {})&gt; printed in the terminal but that's it.
I have a problem with naming the file .TXT and not .JSON, or at least .JS
I nice. I've also written a Reversi game using Python. (It uses the drawing primitives instead of images, so it fits into one file.) http://inventwithpython.com/blog/2011/01/03/code-comments-tutorial-flippy/ The source: http://inventwithpython.com/flippy_plain.py It's from a blog series of simple Pygame games with the source code heavily commented: http://inventwithpython.com/blog/category/code-comments/
I have no clue if this will work but try to see if there is a 64bit version of python available for your system. good luck :D
There is a 64bit version of Python and pywin32 but the result is the same. I have actually just figured out a fix using compatibility mode (set the installer to use WinXP SP2) however that isn't really the way I want to fix this issue. The latest pywin32 should install without needing to be run in compatibility mode. 
I agree - there are many times where private stuff would be infinitely useful, and the best we have is name-mangling?
Did the install self-elevate with a UAC prompt? Otherwise you may have to run the install as Administrator from the right-click context menu. Make sure to first uninstall any previous install. If the above fails you could try an alternate build. Christoph Gohlke has both 32-bit and 64-bit builds available for Python 2.6, 2.7, 3.1 and 3.2: http://www.lfd.uci.edu/~gohlke/pythonlibs
I haven't seen that error before, but I've needed to use an administrator console while installing python libraries before.
[Orriginal post](http://www.reddit.com/r/Python/comments/gocaw/ask_python_releasing_another_microweb_frame_work/) Sadly I do not have a killer [T-shirt](http://www.reddit.com/r/Python/comments/gocaw/ask_python_releasing_another_microweb_frame_work/c1p4v8o) design yet
I think this is a good idea and I may have to start my own little blog to keep you on your toes.
UAC is disabled and the installer ran as administrator. Running it under XP SP2 compatibility mode installs it correctly so I guess I will just have to make do with that and raise it as a bug or something.
What is it "proper" private methods would be infinitely useful for?
House rules. :)
:D
thanks for sharing! I suppose I should finish/release my own now... haha
I never understood why people seem to have such a problem with the fact that in Python non-public attributes are not language enforced but a convention. Using single or double underscores works and I have never had a use case where I needed to have something enforced by Python (other languages ... ,yes, but that's a different story). Despite having a dynamic type system, Python is strongly typed, thus forbidding operations that are not well-defined like, for example, adding a number to a string. That's all I want Python to do, nothing more because otherwise, if I need `private`, I might just do Java which does allow me to do language enforced privacy (note how I don't confuse *non-public* and *private*, that's because there actually is no *private* in Python, there's just non-public attributes which work just like they should, by people following a convention that's clear and straight forward). Imo Python is fine as is, no need to add/remove/change something with regards to existing conventions: http://goo.gl/rLsAG
I'll re-read PEP8 and alter things accordingly in my next game. The event thing is a leftover from when I was still trying to work out which events were which. On the Mac you get something saying when the window gets focus each time too, I'll strip it out.
Mine also ends if you can't make a move, how many pieces are you meant to have?
Awesome, I'll give it a read. I made this to help learn PyGame so seeing it done differently will be awesome.
Pedantic can be good, I'm personally a fan of your first rather than 2nd method (though I am aware it's slower). The abstraction is something I want to go after in my next project, I made this one knowing full well it'd be hard to use the code in any other projects but didn't care as it was about learning how PyGame works, I'm sure there are much better ways of doing some of the things I've done (as you've already shown).
See also http://babbledrive.appspot.com/ The search on it is blazingly fast. Only thing I don't like about it is the lack of a ToC on the pages.
&gt; there are many times where private stuff would be infinitely useful Such as?
Ahhh, mine allows for that. It only declares an end if someone can't move.
It's just an example, you can call your Vorhees file whatever you like. 
Please no more C extensions :(
Does it work in Python 3?
What is your design goal? The unique selling point? Why should people choose your framework instead of [Bottle](http://bottlepy.org/), Flask, web.py, itty, tipfy or other micro frameworks? Oh, and welcome to the club :)
I guess Socialite will never be updated again.
First, you're looping over instructionList, but changing it at each iteration which is a serious bug. The second problem is that you never assign the result of your ord() calculation to anything useful. The 'bit' variable changes, but it cannot change the list at all. The following code should work: for entry in instructionList: instructions = [] for bit in entry: instructions.append(ord(bit) - 48) print instructions
entry is a list of string, but bit is a copy of the character string, hence within the for loop, reassigning bit merely reassigns bit to be another value. Since bit doesn't actually point back into the list, the list itself is unaffected. Why not use: [map(lambda x: ord(x)-48,line) for line in instruction_file] The [x for x in iterable] loops over the iterable object and deposits each element into x. Since x in this case is a string (line), and strings are iterable(list("abc") = ["a","b","c"]), then we can map the ord function onto each line. Since we have an extra \n at the end, we can just del lst[-1][-1]
 with open('instructionfile.txt') as instruction_file: src = (line.strip() for line in instruction_file) src = ([int(bit) for bit in line] for line in src) print list(src) Untested, and it's late here.
When you're working on a random character generator (for D20 Modern for example) and you don't want people running parts of it (say, the ability generator) after you've run certain other parts (the class selector).
Wow! Thanks a ton, it makes sense that I can't just assign bit to be the new value. I gather entries in lists are not able to be directly assigned and it would require me using counters (even on day two I know how unpythonic this is) to know the index so I could set them?
I'm currently teaching myself Python as I go, I'm in the library with Michael Dawson's "Python Programming for the Absolute Beginner" and that map function thing was shown to me by a friend but I didn't understand it fully yet. I'll have to come back to this post later once I turn my project in and optimize. Much appreciated leegao!
Like I mentioned before, I'm really new to Python and that syntax is wayyyy over my head haha, I'll have to pick it apart later when the deadline has passed. Thanks for posting!
Pythonic way: for index, item in enumerate(collection): print index, item
ord(int(bit)) - 48 should do the trick :) the int() command changes bit to an integer
This kind of debugging is new for me too, I was using "print" all the time :) I wrote a [blog post](https://pythonadventures.wordpress.com/2011/04/24/debugging-in-python/) where I sum up these symbolic debuggers.
For starters: don't use ord(bit) - 48. Just use int(bit) instructionset = [] for line in open('instructionfile.txt'): instruction = [] for character in line.strip(): instruction.append(int(character)) instructionset.append(instruction) Alternatively: instructionset = [] for line in open('instructionfile.txt'): instruction = [int(character) for character in line.strip()] instructionset.append(instruction) Alternatively: instructionset = [] for line in open('instructionfile.txt'): instruction = map(int, line.strip()) instructionset.append(instruction) Alternatively: instructionset = [map(int, line.strip()) for line in open('instructionfile.txt')] 
Slightly confusing for someone new to python don'cha think? He's going to get a list of generators...
Just install ActivePython as it already includes PyWin32 [among others](http://code.activestate.com/pypm/).
Awesome! The second alternative worked for me when I unindented the 4th line.
I was about to comment asking how the heck he convinced Python to accept that (I've been on a Lisp kick recently, so it didn't seem like unreasonable syntax). Glad to see it's just a bug :) 
Woah, careful with that — the code I wrote does work, and if you unindent the fourth line it won't work (it will only append the last instruction line to the instructionset) Instead of altering the code I wrote, try and understand what's going on in the examples— I did it multiple ways to demonstrate different approaches in python. If there's anything you didn't understand I'd be happy to try and explain. In case it's not clear, you end up with a list called "instructionset" which contains a number of further lists — each of those is a list of binary figures, representing a line from your input file.
I tried it and it wrote 32 copies of each instruction to instructionset. The code below works class InstructionMemory(): '''This is a list of the 32-bit instructions that the Program Counter will access.''' def __init__(self): '''Open the file containing the instructions''' print 'Opening the file and reading in instructions to instruction memory' instructionset = [] '''All these following shenanigans are for turning those pesky chars into usable 0's and 1's''' for line in open('instructionfile.txt'): instruction = [] for character in line.strip(): '''this is needed because all but the last instruction will have the 33rd character '/n' ''' instruction.append(int(character)) instructionset.append(instruction) &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; for instruction in instructionset: print 'The instruction located at index:',instructionset.index(instruction),'is', instruction self.instructionList = instructionset
Oh, I used the first one, not the second sorry!
You'll notice you haven't unindented anything here. (this code is exactly the same as my example above). ;)
Oh haha, I used the ~~second one~~ **I have no idea anymore** and turned it into the first one through trying to debug. Sorry, my brain is fried. Due friday in addition to finals tomorrow, now have a working ALU and IR though!
Looks really nice. I get [this error](http://dpaste.de/UNcw/) while trying to install from pypi. I didn't find the source code anywhere, nor a place to submit bug reports. Should I recommend github? Great work anyway, this will go great with my [itty](http://github.com/toastdriven/itty/)+[mongoengine](http://github.com/hmarr/mongoengine/)+[pystache](http://github.com/defunkt/pystache) project!. 
It looks like CherryPy
To add to Chun's comment... Python methods (such as enumerate()) can have multiple return items in the form of a tuple (like a list, but can't be modified). Normally a tuple is assigned like the following: coordinates = (1.2, 3.4, 5.6) But Python lets you dispense with the () to make things simpler: coordinates = 1.2, 3.4, 5.6 Python also does automatic "unpacking" for tuples like so: x, y = (1, 2) So x would be assigned 1 and y assigned 2; which is what is happening with the enumerate() method call in the for loop Chun showed. enumerate() returns a tuple, and it is being unpacked into the index and item variables. Sidenote: this allows you to do value swapping in one line: a, b = b, a as opposed to C-like languages: temp = a a = b b = temp
Sometimes it's the shitty real world complexity shining through your code. The world can be a messy, messy place
Here is a blog post on how to do it: http://sontek.net/convert-a-string-to-an-integer-in-python
The purpose of Marie is simply to make WSGI development as easy as possible. Of course this is the goal of all frameworks, so what sets Marie apart? Marie isn't designed with the kitchen sink in mind, it takes care of a few common problems in a very powerful way. Most frameworks have but one way of routing functions, but Marie takes it to a new level. First of all Marie is very forgiving. If you have a function exposed to /blog and you visit /blog/gibberish Marie will still run the function exposed to /blog. This is handy for cheating SEO URLs "/items/ca3e439f/name_of_item_to_sell". Marie will also has two forms of exposing a URL: unauthorized and authorized. A developer can create two different functions for the same URL. Depending on the authorization state of the user will depend on which function is run. There is even a third type of function that can be exposed, but it is exposed internally. This gives developers the ability to stop a function from running and the request all over again with a different function without needing a redirect. Marie also uses a method I like to call environ overloading. Basically all of the information you may need is thrown into the environ. While you are developing and and throw an error, Marie will show the environ showing you all the request information on one screen (as well as the traceback). It also means that you can read and write information from the same location. Marie is also designed to be very fast. It's about 3-7% faster in my totally unbiased benchmark against Bottle which itself is very fast. I also chose to use Redis as my sessions database. Usually the first thing that people do to speed up their website is to cache their data in memory, so I cut to the chase. Using Redis of course is totally optional. Marie also cuts some of the messy work out of using Mako templates. By simply adding template='file location' to your marie.expose() to add templates to your app. Edit: Oh and thanks, glad to be here. Edit2: I suppose its also important to note that Marie has no hard dependencies outside the standard library.
Thanks, I've fixed the website and I'll change the README soon.
Some of the syntax was inspired by CherryPy. The simplicity was inspired by Bottle. The design was inspired by constant use.
As of right now no, but I plan on modifying it to work with both versions.
You're welcome, I hope you find it useful.
On the contrary. Now I can work on it as my day job! (though it is JavaScript and not Python...)
Thanks very much, BioGeek! It's was a pleasure working on those design tweaks with you.
What else would you suggest? Python has no declaration. When reading Java or C# code, do you see immediatly which variables are private? The Python way is actually much better then using a declaration!
If there's one thing with Python I never had issues with it's the convention for private names. Maybe I was lucky enough to skip Java after my first 1000 lines of code.
Here's my microframework: https://gist.github.com/883817
Documentation as PDF? Sigh
At least it's way better than *no* documentation.
what design ?
true that
Cool! The internet is awesome
That thing that people that aren't smart enough to disable subreddit styles see.
exactly ;)
Why not? 
Or you can jailbreak and have a [full-blown Python](http://imgur.com/FMLDg?full) (albeit a slightly older version) with the standard library modules and filesystem support.
congrats man!
As others have pointed out, your major mistake is that you don't use `int()` to convert the ASCII digits to integers. If you're using Python 2.6 or later, there's no reason not to use the `with` statement instead of closing the file explicitly, either. Further, there's no reason to create a lists of strings, iterate over it and convert each string to a list and iterate over that. You can already iterate over strings and unless you are doing major computations inside that loop, there's no real advantage to reading the entire file rather than processing it a step at a time (`with` already covers for failure). If you can assume that all lines end with a newline, the following can do the trick more neatly: with open('instructionfile.txt', 'r') as in_file: for line in in_file: bits = [int(bit) for bit in line[:-1]] print bits Or if you want to inline it: with open('instructionfile.txt', 'r') as in_file: print [[int(bit) for bit in line[:-1]] for line in in_file] You should generally avoid nesting list comprehensions too deeply, though.
Yes, but why do you need to enforce that in code? Who says you're smart enough to foresee all possible use cases for your code (it _is_ reusable, right?)?
gj dude
I'll have a look at that when I get home, I thought there may be an issue with it scanning for changes but I couldn't nail it down.
why does reddit say there are 3 comments but I do not see any (except this fourth)?
disable whosawhatit?!
Maybe he can suggest to use a proper Markdown library such as Upskirt or Discount. The advantages are twofold: speed (written in C) and not tripping up over things like Wikipedia links with parentheses in the URL.
reddit is pretty annoying that way. thanks for the great work on web2py mdi, I really enjoy using it. :)
Docs in html would be very useful.
They're not portable to other Python implementations.
It's broken on just about every submission that I can see, no idea why.
I've added some unit tests (one for each direction and one for the top left corner). But I can't find the bug. Could you give me a board matrix to use to reproduce the bug?
[Python Imaging Library (PIL)](http://www.pythonware.com/products/pil/). The documentation dealing with [the image module](http://www.pythonware.com/library/pil/handbook/image.htm) should get you started quickly. If there are problems, answer to most questions should come up when googling, since PIL is quite popular in the Python community as far as I know.
Wow, that was quick, thanks!
There's always libpng.
I know I know [/shame] I wrote the docs up quick in Word so a PDF was the quickest way. I'm working on porting them to Sphinx soon.
Well, there is [IronClad](http://code.google.com/p/ironclad/) for IronPython on Windows. Is there anything like that in the works for Jython? I guess the plan is to port the core of IronClad to other systems at some point. Either way, instead of C, I think it's better, and easier, to use Cython to extend CPython.
your microframework is [webob](http://pythonpaste.org/webob/do-it-yourself.html)
What code do you have written so far?
here is what i have so far for finding an exact match. Hope this formats correctly. input("You will enter two strings.\nWe will determine if the second is anywhere to be\nfound in the first.\nPress enter to continue.") stringA = input("Please enter the first string.(String A)") stringB = input("Please enter the second string.(String B)") alen = len(stringA) blen = len(stringB) print("String A is",alen,"characters long.") print("String B is",blen,"characters long.") input("We will determine if string B is anywhere in string A. Press enter to continue.") for i in range(alen+1): for j in range(i+1, alen+1): if stringB == stringA[i:j]: print("WE FOUND",stringB,"IN STRING A STARTING AT POSITION",i,"OF STRING A!")
Well, the entire thing is in a Character class. You just make an instance of the class, run the generator, **bam** new character. Make another instance **bam** another character. So, no, there aren't exactly a whole lot of uses for the code, and yes, if they decide to run any part of it after it isn't supposed to be run it WILL break the rules. *Do note that I couldn't find a good way to make skill rank selection random, so I did give up, balete the code, and no longer have it with me*
 import re http://docs.python.org/library/re.html
One of Python's strongest elements is its ability to use optimized C code extensions. 
I don't use Java or C#, so I couldn't speak for them - but in C++, yes, you can. Something like: class Whatever { private: int Something_Or_Other; public: void Do_Something_Awesome (void); }
*C*Pythons.
Sure, and they can be loaded under PyPy as well, but both methods carry considerable overhead.
[Reddit uses Discount.](http://blog.reddit.com/2010/02/reddit-has-new-rendering-engine.html)
Part of the problem I imagine you're having is that python gives you some nice conveniences that obscure what is actually going on. stringB == stringA[i:j] does string comparison for you, and makes the code concise. But of course what's actually happening here is that each character in B is sequentially compared to A (starting from i of course). If you wrote out code that did those comparisons explicitly, it might be more apparent what you need to do. Think of solving just part of the problem first. If it was just the first character that might be wrong, or the second, or the kth, you could skip that comparison. Hopefully this gets you on the right track without doing your homework for you.
BTW, lines starting with 4 spaces are treated like code.
Although true, Jython and IronPython are already crippled implementations. Saying "no more C extensions" just because a Jython user refuses to translate the C code to Java is subverting the ownership of the problem, Jython was MADE so that users didn't have to write extensions in C, so it's their responsibility to write optimized code in Java, not developers responsibility to refuse to optimize because there exists somewhere a group of incomparable users. CPython is still the main Python tree, optimized code makes sense in C. If a Jython user wrote a good extension in Java, its the CPython community's responsibility to make a similar one in C... he's not a CPython user... the same goes the other way around. Don't chose a branch of a language, ignoring its downfalls and then complain about the downfalls that are written explicitly explaining why not everyone uses it.
Hmm, it won't install on my system so I guess I'll have to try the lpng.
thanks
Regular expressions, while the appropriate tool, are just going to confuse the heck out of someone trying to learn how to compare strings.
Neither they, not PyPy, are crippled implementations, nothing about the Python language spec says anything about the CPython C-API.
That's very odd it doesn't install. Do you mind if I ask what platform/version/architecture you're using?
They're crippled because they made a design choice that intentionally prevents existing extensions from working. Using an alternate implementation, then complaining about people using the FAST features of another implementation is stupid. I'm not going to continue arguing why I wouldn't do something beneficial in my implementation because it won't work in yours...
That's right, existing extensions don't work. To make them work would require all of these implementations to be slower and worse than they are, and give up things like a decent GC, or threading model.
stop being such a .*
I found the problem, it's not correctly scanning the diagonals (though sometimes it does which is why it didn't reproduce for me). I've fixed it and found some bugs in the tests. Cheers :)
SO REWRITE THE EXTENSION. Jython was made so that they could write extensions in Java, not C, so don't complain when extensions don't work...
For the record, I don't give a flying fuck about Jython in particular. My primary interest is PyPy.
Every time I fix something I push the update to the github (article link), feel free to go for it. If you want to use this in any future coursework you are more than welcome to.
Then why do you care? PyPy believes in C API alongside the RPython back end, here is their current C Extension support: https://bitbucket.org/pypy/compatibility/wiki/c-api
I'm intimately familiar with PyPy's C extension support, I helped implement it. It carrier a significant performance overhead and in general should not be used for speedups, only compatibility if absolutely necessary.
If you are on windows make sure you grab their exe installers. Also, where did you install Python from (python.org, ActiveState, etc) and is it 32-bit?
Ditto, and I wrote Java for years. Not once have I thought, "Man, really wish I could stop people from touching this variable", but many times I have thought "Thank the BDFL I can access this libraries internals to apply it to my unique situation". When we're writing a library, there is no way to predict everything it's going to be used. Don't cripple your fellow developer because of your lack of imagination. Give her a gentle warning instead.
Python 2.7.1 (r271:86832, Nov 27 2010, 17:19:03) [MSC v.1500 64 bit (AMD64)] on win32 I ran the installer and it doesn't see any of my Python installations. I ran the register script and it claims it was already in the registry, which regedit confirmed. Ok, I uninstalled 64bit and went back to 32bit. Now it installs. 
Along those lines, the first problem doesn't need an explicit nested loop since Python handles the character by character comparison, i.e.: for i in range(len(string_a) - len(string_b) + 1): if string_b == string_a[i:i+len(string_b)]: print("Match at {0}".format(i)) break Rolling your own requires a per-character comparison. Don't forget the edge cases -- literally -- where string_a starts with string_b[1:] or ends with string_b[:-1].