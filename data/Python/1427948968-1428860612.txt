You can compile python 3 support right now from source. I'm not sure how complete the python 3 api is as I haven't tested it personally.
…yeah, that's not exactly uncommon. Wait for everything to be compatible before upgrading.
Django and Pillow releases on the same day. I'm glad they're not jokes!
Made her think she had a virus
Be sure to file issues at the project(s) that are causing problems. Or, if possible, find the cause and send in a patch. 
yep thats one of the next steps for sure :)
Released or unchained?
&gt; django-mptt What do you use it for out of interest?
I use it for a threaded comments app.....similar to [this blog post](http://martinfitzpatrick.name/article/django-threaded-comments/).
Just as a side does it not get annoying when you come back to it? I know for me (definition of amateur!) i know it often remember the general structure and form of the code and the shape it has on the page. Doesnt this mess with that? or do you just get used to it? I can see its useful when sharing code / working with others though :) 
Wow! I've added a link to it under a new 'But Wait - there's More' category, and I'll mine it for the best links to add. Thanks!
It's hard to read. It only becomes annoying if you allow it to upset you.
&gt;a number of people were hurt or offended by the post Can anyone explain how the post could be construed as hurtful or offensive?
Works great! I could merge almost all proposed changes. The solutions that weren't so great could be improved by slightly rewriting the affevted sections (e.g. usimg shorter variable names or temporary variables) https://github.com/bottlepy/bottle/commit/bda4962c42cfd7f098ffbbec33633b4df1b8dc01
How do you read the code review? ^_-
Thanks, I'm aware of all of that, just probing to see how active this community is and whether it might be a good resource. 
&gt; Released or unchained? Wrong character. You might have gone with, "Released or dropped?". But "Released" really would be the right word in either context. :-)
Click the links in article, they lead to solutions of specific task along with Guido's comments
Ah, I didn't see that the word "review" was underlined. Not super usability :(
Cool! Glad I found Chekio
Do people actually use formatter on Python code ???
Thanks a lot for this, I was searching for a comments solution for a project and ended up using [django-contrib-comments] (https://github.com/django/django-contrib-comments) , however this seems like a better option
Yes, just like any other system.
These are good tricks. A word of warning, though, to newbies: 6. Remove duplicates from a list Sets only work on hashable objects, so your list of lists won't work immediately. You may need to do a list of sets, for example.
I prefer `list(reversed(li))` for the first one, personally. Good stuff overall.
Also, if order is important, you need another solution.
Congratulations Peter. Looks like an excellent product. [Here is a link](http://peterhudec.github.io/authomatic/) to the official docs.
&gt; Not super usability :( Da fock?
I added a one-liner to re-order the results based on first occurrence to the page.
if you want to duplicate the list... if you just want to reverse a list, simply `li.reverse()`
I agree. The slice syntax is clever, but much less obvious.
I work in Python daily and didn't know about a couple of these, thanks! haha
Huh, that's kinda nice
 our_unique_list = list(set(our_list)) OP, thank you for posting this web page. that list set thing is... beautiful, so much easier than the way I was accomplishing the same before.
Very cool post :)
Apparently not yet. The linked-to post says: &gt; We should be ready to try another soft release candidate.
Unleashed?
Anyway, see you tomorrow :) !
Thanks! See you soon!
idk man, this is what i do list1, uniquelistsorted= [1,1,1,2,3,3], [] [uniquelistsorted.append(x) for x in list1 if x not in uniquelistsorted] print uniquelistsorted 
That code was GENIUS.
Ah, okay! Then I'll leave the laptop at home this time. In any case, I'm psyched for tomorrow! Thanks!
django-cms is in the process of moving away from mptt due to its reliability issues. In [version 3.1](https://django-cms.readthedocs.org/en/develop/upgrade/3.1.html) they'll be switching to django-treebeard.
Assuming that print statement is on a line by itself.. print("Welcome",myName,"!" needs to be print("Welcome",myName,"!") 
That's not at all esoteric. Avoiding mutation unless you need the performance is good practice.
The slice syntax is almost twice as fast, so it's a good idiom to know. In [7] &gt; items = list(range(10000)) In [8] &gt; %timeit items[::-1] 10000 loops, best of 3: 33.2 µs per loop In [9] &gt; %timeit list(reversed(items)) 10000 loops, best of 3: 53.8 µs per loop
[2.8.1 out already](https://pypi.python.org/pypi/Pillow/2.8.1)
First off, as metaphorm mentioned, you would be much better served by going to r/learnpython with issues like this. That being said, my first reaction was; Yikes, so many errors is so few lines! 1) In Python, multiple statements on a single line need to separated by a ';' (see your first line). 2) As Wtfox pointed out, your first print statement is missing a closing ')'. 3) You CList is not a list but a dictionary. 4) I would drop the use of 'Class' as part of a variable name. 'class' is a Python keyword. 5) You cannot test with 'if' or 'elif' and have them followed by empty lines. 6) The way you are using the print function to print the user's name leaves a space before the '!' (but you have not had a chance to see that yet). 7) Python variable names are usually words_separated_by_underscore. Read the following rewrite of your code very carefully. Attention to detail is important! print("Welcome to Dungeons and Dragons!!!") my_name = input("What is your name: ") print("Welcome",my_name + "!") type_list = ['Warrior', 'Mage', 'Rogue'] print(type_list) my_type = input("Choose a type: ") if my_type == "Warrior": pass elif my_type == "Mage": pass elif my_type == "Rogue": pass else: print("That is not an option") An more Pythonic solution would be: print("Welcome to Dungeons and Dragons!!!") myName = input("What is your name: ") print("Welcome {0}!".format(myName)) type_list = ['Warrior', 'Mage', 'Rogue'] print(type_list) my_type = input("Choose a type: ") if my_type not in type_list: print("That is not an option")
Hah, this is awesome. Now I hope Guido never sees any of mine, cuz they're all awful
Python autoindent works in vim, but not reindent. At least, not without some kind of plugin. It's possible this has been fixed since I last tried. I'd be interested to see your settings.
This will be my first time at PyCon (or any technical conference for that matter). Always up for beer, shoot me a note.
This code doesn't run as written. And is using list comprehensions only for their side effects pythonic?
you realize your code doesnt do jack shit right? items= [1,1,1,2,3,3] item_set = set(items) unique_items = [item for item in items if item in item_set] print unique_items which prints [1, 1, 1, 2, 3, 3] the point is to remove duplicates so your code accomplishes nothing. It's funny people will upvote without actually checking your answer. 
Number 4 is somewhat horrifying. Why on earth would anyone ever want to DO that. 
Wow, I feel dumb. Edited my comment with a unique function that actually works and is still O(n).
Here's a slightly more verbose way: from collections import OrderedDict d = OrderedDict() for x in whatever_list: if x not in d: d[x] = 1 unique_elts = [x for x in d.keys()] Actually, now that I think about it, we don't need the `if` check in each iteration: from collections import OrderedDict d = OrderedDict() for x in whatever_list: d[x] = 1 unique_elts = [x for x in d.keys()] Or: from collections import OrderedDict [x for x in OrderedDict([(x,1) for x in whatever_list]).keys()]
Nice
I want to know how there are 141 clicks/sec in the last hour, with all the other averages at 1. Still, good work!
Well, maybe I have never run into the problem then. Regardless, I have the following in my after/indent/python.vim file set textwidth=158 " lines longer than 158 columns will be broken set shiftwidth=2 " operation &gt;&gt; indents 2 columns; &lt;&lt; unindents 2 columns set tabstop=2 " a hard TAB displays as 2 columns set expandtab " insert spaces when hitting TABs set softtabstop=2 " insert/delete 2 spaces when hitting a TAB/BACKSPACE set shiftround " round indent to multiple of 'shiftwidth' set autoindent " align the new line indent with the previous line set smartindent I also use the syntactic and vim-indent-guides plugins. Maybe this works for you?
even slightly simpler list(OrderedDict((x,1) for x in whatever_list))
Will this reindent 4 space code to 2 space code? I no longer have vim installed (becuase it couldn't convert 2 space code to 4 space code; I see you have it the other way, so I asked about that direction).
I thought MINIX was supposed to be super robust?
/u/GrahamDumpleton is one of my developer heroes
Will be there with a number of my coworkers, planning on hitting the bars a number of the nights. Last year did the same thing and it's pretty easy to get involved in a convo with another bunch of python people if you overhear them. People are generally pretty open to other python nerds if you ask if you can join them. 
__Sunder: to let other coders know you really don't want them to overwrite what you are doing in a subclass.
&gt;NOTE: Currently, packages for Windows can only be generated with Python 2.7. Python 3.3+ support is on the way... Until this line is removed from your programming guide, you're just wasting my time.
It'll be my first time too! It's gonna be awesome. I've got tix to a Canadians game and I'm stoked for the tutorials. 
Glad you had let everyone know that. 
Well, (as much as I hate to say it) I would think that javascript would be a more appropriate tool, at least for a portion of the code. This is because javascript runs in the browser, so it can easily see when and what page you are going to, as well as how long you were on the page (I have never used it, but guessing you could use the `unload` handler to tell when you went away from a page?). Depending on how you want to do it, you could have the javascript send the data to a python receiver, which would store it, and then be responsible for giving statistics. However, I would say that any code that needs to track browser actions is probably best suited for JS in general and not python. You could store all of the data in the browser's local storage, and then just go to a page rendered by JS showing the data, so it would probably be easiest to just handle all of this in a language that runs in the browser IMO.
I'll be there! You (anyone) can find me at the IPython tutorial, in the poster session, or around at any point of the conference. Besides IPython, you can see stuff that I've worked on [on Github](https://github.com/takluyver/), and a few things [on Bitbucket](https://bitbucket.org/takluyver/).
After my comment I had a look at the FAQ and documentation and also came to this conclusion. In my opinion the wording is indeed misleading, so thanks for clearing up this issue. Really have to take a look at this lib next week, seems super useful.
Ever since the prohibition on friendly and good-natured joking, I refuse PyCon.
I am sure I have seen it drop to under 50, and there are people with flairs in the 40's. Great work by the way. Since the number is a decimal with 2 digits after the point, why not just strip the decimal point and do an int compare. In the output just add the decimal point.
Cause you are such and important person and going place with Python 3.3 that Python 2.7 can't touch. And "prints" without paranthesis must really put a dent in your profits. 
I would just ignore him as a troll. Great work, thanks for sharing the news. Looks really exiting! 
What does Python 3 give you that Python 2 doesn't?
Thanks for this!
Yep, the more I look into it the more I agree with you. This seems like a job for a chrome extension (in fact, several exist already that pretty much do this).
Github Link : https://t.co/8AWYa0NYBn
Never a good idea to change the domain specific parts of someone's code unless you're a domain expert! :-) You need "class" not "type" in the user prompt as it's a domain-specific term ("character class") so I'd use maybe `char_class` or `my_char_class` as the identifier. "Enter type" is just plain wrong and won't be understood by a Dungeons and Dragons player. BTW op, I don't remember mages in D&amp;D. Called them "magic users" in the early edtion and then "wizards". Have they changed it again? edit: typo
&gt;Sex/gender based jokes are usually exclusionary, is it really that unreasonable or difficult to just not make jokes like that? How so? Also, sex/gender jokes offend some men too. And they don't offend all women, which means they're intrinsically *not* exclusionary. In fact, I fail to see how *any* joke is exclusionary. Because humor is so innately subjective. And I don't see how you can box it in as you are. &gt; I'm a woman. I've experienced a lot of sex-based discrimination in the tech industry. Maybe you have, and maybe you haven't. In any case, as a man, i've experienced my fair share of discrimination as well. I've also seen women treated a lot more gently than men in their respective positions in tech are. So there's two sides to that sword. &gt;I know most people don't mean harm by it, but the fact remains that it does cause harm and does exclude people. Everything you say is offensive to SOMEONE. The vocal majority does not get to win by default. Most men and women in tech are actually quite egalitarian. In fact, I've been at tech events where people have said something that bothered me. But I just get over it and go on with the rest of the conference. Unless they're actively preventing me from attending a lecture or what have you, it's none of my business. You simply cannot police private conversations. And if people don't like that, then tough. All that said, i've been on the receiving end of sexism and all sorts of other harassment before. And let me add, I've been the one male or one of the few males on all or mostly female staff before. And let me assure you that women joke about sex and/or gender just as much as men do. Obviously we all agree that sexism is bad. But crass joking hardly qualifies as sexism. And it's outrageous to even make that claim. 
I did not look at the data stream, I just saw the float cast and from the button display I assumed it was XX.XX format. If you add a tenth to the bot, then it will result in more posts. Might be an idea if you would like to add more activity.
In order to use qt you need to distribute the qt libraries as well. They are not installed by default. This is a big difference when coming from .NET on windows only. 
&gt; sex/gender jokes offend some men too. Yes. That doesn't make them OK, though. &gt; they don't offend all women, which means they're intrinsically not exclusionary That doesn't follow. You can exclude people without excluding entire categories of people. &gt; Maybe you have, and maybe you haven't. In the absence of evidence to the contrary, please can we believe what people say about their own experiences? It's hardly a surprising claim that a woman in has encountered sexism in tech, anyway. &gt; i've experienced my fair share of discrimination Since you've been on the wrong side of some discrimination, I hope this makes you better able to empathise with others who might be on the receiving end. If you're suggesting that people should just grin and bear it because that's what you did, I don't think that's appropriate. &gt; I've also seen women treated a lot more gently than men Two points here. Firstly, the fact that some women may be treated nicely does not make it OK for *anyone* to treat other women less well. This is about individuals, not some sort of men vs. women scoreboard. Secondly, what looks to you like 'gentle' treatment could look patronising to someone else. Maybe a woman doesn't get asked to do a hard technical task - but then maybe she doesn't get the opportunity to learn, or to demonstrate her knowledege. This is just an example, it's probably not what you had in mind, but 'gentle' treatment isn't necessarily a good thing. &gt; Everything you say is offensive to SOMEONE This is a well worn strawman. I can say plenty of things that aren't offensive to anyone, and that's what I hope to do at a technical conference. Of course, I might offend someone through ignorance or carelessness. If I do, I hope I won't be judged too harshly, but I'd still try not to do it again. &gt; crass joking hardly qualifies as sexism Crass joking could still make people feel uncomfortable and out of place. It doesn't belong at a conference. I'm pretty sure you're referring to the 'Donglegate' incident from a couple of years ago. I happen to agree that that was blown way out of proportion (against both parties involved), but that was mostly the internet's doing, not the conference itself. And that doesn't mean that sex/gender based jokes at conferences are OK.
Yeah, I'm not too sure about that, it'd working perfectly locally but the same code on the server seems to play differently, I've probably made a mistake somewhere, I'll check it in the morning
This will be my 4th year in a row. Tweet me (@_kmwhite) if you want to grab a beer. 👍
Right, kivy supports python3 just fine, this other tool you use and depend on to provide essential features you could have implemented yourselves does not. You're totally off the hook then.
Your post is ironic, at the very least. I'm being called a jerk for providing this project with feedback? I'm being dissuaded from providing said feedback unless I'm a programmer, and I'm on a high horse you say? You should read my post again, that single line from which you made such in depth assumptions about my character and start questioning your own.
I had no trouble seeing it, but have you noticed that the trend these days has started being the opposite? Just look around on this page, for instance. How many of the clickable links in the sidebar or underneath the comment are underlined? I don't see any actually.
Nice! I was thinking to do it some times ago, as i wanted to have the same on a non-kivy project. Glad to see it inspired you too :)
Same here!
If I've learned anything, it's that `websocket-client` has an annoying API.
look at nuikta http://nuitka.net/pages/overview.html it can and does package py3 apps, even pyinstaller now has experimental support. https://github.com/pyinstaller/pyinstaller/tree/python3
You can freeze your python apps to make then distributable. I use py2exe with Windows and I believe cx_freeze works with linux and Mac. PyQt is a great GUI framework, but due to the licensing you are supposed to open-source your code if you want to distribute their binaries, or pay for a license. So I use Pyside. http://www.devilsan.com/blog/choosing-between-pyside-or-pyqt-license-consideration I've built an app with various libraries and distribute it inside my company with relative ease.
Does that work well when you subclass (in your example) EventHandler? That's always been my problem with descriptors (and static/class functions/objects in general), it gets ugly when you have several layers of inheritance between the class you're using and the class on which it was declared (though I might be missing something obvious).
It's the same problem you run into trying to deploy any software on multiple platforms. Finding frameworks that are installed everywhere by default is pretty much impossible. What if I wanted to distribute a VB app on Linux? It's certainly possible, but my users would need to install mono first. 
Lyst are throwing a not-so-secret get together for core contributors, PyCon, PyLadies and Django Girls organisers at Apt 200 on the 8th of April @8PM. Any PyCon attendees in the area are welcome to come along. 
Python can do these things, but honestly you've described some of the weakest spots. Creating and distributing executables to people without Python installed has always been a huge pain. Creating GUIs is OK, you can use PyQt with Qt Creator for a decent experience, but it won't be as nice as with .NET. For reading/writing files and doing data analysis, Python is amazing though. For a taste, check out the dreamy [pandas](http://pandas.pydata.org/) library.
Wow, fantastic work. I don't have children, but if I did, I'd be all over playing with that!
This is the first time that I am not going to attend in about 5 years. Last year, I really felt that the quality of the talks at the conference had decreased drastically from the previous four years. I'm guessing that it was due to the location and the distance from more dense tech centers. I am looking forward to it being in Portland and will be going. Hope you have fun.
I agree with everything you say. My post was mostly for OP.
You'll receive a much better response with those of us on /r/learnpython. I suggest you repost there!
Excellent work and writeup. Your code seems clean, concise, and well commented, so I'll probably check out the repo.
Or even slightly simpler: list(OrderedDict.fromkeys(whatever_list)) :)
Sorry. I know this sub is about Python but this hit a nerve and felt compelled to write a response. I'm all for technology but babies don't need sleep training. It's the parents that need training and realistic expectations, Initially babies will not sleep for more than 45-90 minutes but after the first couple of weeks they will often sleep for 1.5-2.25 hours at a time. As time goes on the sleep times will increase but don't believe the "experts" that say after 3-4 months a baby can sleep a straight 8-12 hours. Yes you can force a baby to get into this habit but it is unnatural for them to sleep that long without waking up as they need to be feed. How much of an impact all this waken up has on you depends on the decisions you make. In the beginning if you allow your child to sleep in your bed and breast feed the baby you will have a much better experience than those who choose not to. Yes you will have to wake up often but the baby will just latch on and be feed in a few minutes and you and your baby will go back to sleep without fuss. On the other hand you could have a night of getting out of bed often trying to calm down the kid, warming up a bottle of formula, feeding the baby, burping the baby, getting back the baby to sleep, and then finally getting back to sleep yourself. Plus you have to deal with all the side effects that come with the formula such as colic, gas, and all that spiting up. I'm male, so I obviously can't breast feed my babies but I have seen the difference in what my wife has to go through vs what happens when I have to warm a bottle of breast milk to feed the baby. It's just way easier when it's just available on tap and the babies give far less trouble. Often I have been envy of my wife having that capability as it really makes things easier but of course I don't have to deal with pumping and a host of other things she has to deal with. Obviously from the statements above I feel everyone should breastfeed their babies. When you do so you will have a much easier time and it is also much better for the baby. But I realize that it is not possible for everyone to do so. But way more people can choose this route, than choose to do so today, and for those who chose not to it does come with a price. My wife and I have had to occasionally supplement breast milk with formula at times when she was not able to pump enough, which often arose through work life balance issues. So I have first hand experience of what it's like to have a child fully on breast milk vs a combination of breast milk and formula. When on formula, they are often cry more, are moody, gain weight faster, sleep more often, and harder to get back to sleep during the night as they become fully awake while waiting for the formula to be ready. The sleep more often part may sound good but when it comes with a reduction in their rate of learning that is noticeable it makes you think twice about the decisions and priorities one makes while raising your children. Too many people want to believe there is no difference between breast milk and formula but that is total BS. Breast feeding is not only better for the baby as it improves brain development and antibodies that keep the babies healthier, it is cheaper, far more convenient to feed your baby, less disruptive to your own sleep, and far less frustrating to raise the baby as they are easier to deal with than formula feed babies. 
TL;DR: People have differing parenting techniques and beliefs and this guy doesn't agree with OP. 
Thank you, this is an amazing list, with many I did not know. number 5 blew me away.
I think you can safely infer my opinion of that design decision from my previous post.
After that series on decorators, he's one of mine, too.
Glad you have all the answers bud. You should write a book. 
I always put the library on PyPI myself
Ok, so how do I loop the input? Like, say, that the input is not in type_list, what is the most efficient way to loop it back to giving a an input for my_type? Also, I don't know why Reddit posted my code that way. The first line is actually three lines. Not sure why it posted it as one. I do appreciate the help. Thanks! :D
Well, the idea is that the client class would create it's own registry. You couldn't use a single one owned by the base class to manage all subclasses, though each subclass could use one of the same name. At that point, you could use `super (owner).registry` to lookup functions registered by the base class.
@michaelherman Off-topic, but I found your first Real Python book to be extremely helpful as an introductory resource and have recommended it to others looking to learn from scratch, with the caveat that it was written for Python 2.7 (at least the version I had access to). Seeing this link and being reminded of your site, I'm thinking about springing for your web development courses...but first I'd like to know whether those are also written for a 2.7 audience. Thanks 
… after a failed initial contact with the original author, I hope. Else you contribute to the jungle and confusion.
I'll have to budget for it next year then!
really? It's the only one I've ever used, so I don't know about the greener grass. Is there something better? even for other languages
My point was not about legal issues, but the fracturing of the package space.
please take your agenda somewhere else. The project is interesting and the guy took the time to explain everything.
Cython 0.22 introduced a breaking change where (as I remember) method overrides couldn't have a different exception handling behaviour to the original declaration. Since kivy used this in quite a few places the compilation was broken, but the simple fix (adding the same exception handling everywhere) isn't ideal because it adds slow python overhead to all the cython methods that don't need it I think this was reported to the cython devs as a bug, but I'm not sure what the response was or if it will be fixed or declared correct behaviour. Either way it's likely that we will move to the intermediate option of 'except -1' everywhere. I think the reason we haven't already is largely being unclear on whether it's a bug in cython or not and whether there is any better option, but I haven't followed this closely and some of the other devs would know more. Edit: You should get a specific message about what versions are supported if you have an incompatible one, is that how you found out that 0.21.2 works? If you didn't get the message, that might be a bug.
Thanks for the comment. So, I just updated the second course, which is now mostly Python 3 compatible. From the [FAQ](https://realpython.com/questions/#faq): *Are the courses geared towards Python 2.x or 3.x? Short answer: Both. Long answer: It varies by course. The first course covers Python 2.7x and 3.4x. How do we do this? Well, since there are very few differences between the two syntaxes in the early learning stage, we provide handy notes to alert users when there’s a syntactical difference between the versions. As of now about 70% of the second course is compatible with Python 2.7x and 3.4x. It’s very easy to take the remaining examples and provided code snippets and convert them to Python 3. Finally, course three begins with detailing how to upgrade from 2 to 3 and then utilizes Python 3 throughout the remainder of the course.*
That is awesome. I didn't know about the fromkeys function. I love it. This might be my favorite solution to the original problem that I have ever seen.
I've done this using a fork on Github for open source code, and using an internal git host at work for closed code. 
I am not an expert here but think taking a look at Naive Bayes classification would be a good approach. This post is a pretty good intro - http://blog.yhathq.com/posts/naive-bayes-in-python.html
You can see previous discussion of this [here](http://www.reddit.com/r/Python/comments/30e9ys/flit_simplified_packaging_for_simple_python/) and [here](http://www.reddit.com/r/Python/comments/30ovku/simplified_packaging_of_python_modules/). I'm glad that there's enough interest that it got posted three times ;-)
I think the header value may also need to be a dict. Try replacing the header line with: header = {'Content-type': 'application/vnd.com.citrix.netscaler.login+json'} 
I have to disagree: it's more about how to learn a language by breaking things down and deliberately repeating exercises in order to commit what you've learned to longer-term memory. What it shows about python or sql can be applied to any language. And SQLAlchemy is just a python-specific abstraction layer over the top of SQL, for when that might make sense (like, not when performance counts, not when writing adhocs, not for reports, etc, etc).
You're correct; the `requests` library expects a dictionary for `headers`: http://docs.python-requests.org/en/latest/user/quickstart/#custom-headers
Congrats! You've won parent of the year! This award entitles you to a free year of telling everyone else how to raise their children!
Holy shit that last one.
Cool I will try this and get back to you guys. 
One unexpected benefit to my last project using an ORM was that it shielded me from a lot of DB-specific datatype/conversion issues. When migrating from MySQL to Postgres I hardly had to change any of the ORM stuff, but had to rewrite pretty much everywhere I'd used raw SQL. 
Trust me, I have made just as many mistakes parenting as anyone else does and I'm sure I will make plenty more of them in the future. It just turned out not having a phobia about breast feeding worked out well.
Nice article, thanks for the link helps to understand the maths. I've been playing with infer.net library (MS also provides a python wrapper on Ironpython ) for those interested in Bayers theorem applications... Here a nice video introductory about probabilistic programming ... http://research.microsoft.com/en-us/um/cambridge/projects/infernet/
Alright thanks for the feedback so far. I get a bit worried by these replies I must admit. I have a VM installed (Windows7) so I might still have to rely on that for easy distribution of exe's, because one of the comments was that GUI's and distribution was one of the weakest points. That is a worry. I'd like to work with something as easy as VB but with a new language syntax (Python) if that makes sense. I'm still trying to figure out what's better or different between VB and Python though. Do I need to change coding environment? I'm quite a noob in this field but how does file management work cross platform? I guess Mac and Linux don't work with drive letters such as C: and D: but is that difference easy to overcome? And can Python handle all platform scenarios? Can I for instance build a Windows exe from a Mac? To be honest, manority of the users will still be using Windows, so I might stick to that development platform on the VM. 
Where might I acquire one of these?
I made a custom shirt at [CustomInk.com](http://www.customink.com/designs/sf2pycon/mus0-0029-0dnn/retrieve). [This was the initial idea](http://i.imgur.com/2juNxsK.png), but due to color limitations, I reduced it to [this pixelated version](http://i.imgur.com/M11LO4b.png).
Or Ctrl+K, D in PTVS.
She did. After we talked, it was a contract all legal and everything. I even reported it on my taxes (and got to deduct some stuff over it as well)
Honestly I think the pixilated version is more fitting. Both are fantastic! Great job
the orm piece in sqlalchemy is just one part of the library. I've yet to need a query that can't be done by sqla's query object. http://docs.sqlalchemy.org/en/latest/orm/query.html#the-query-object which is more than I can say for django's orm which I would regularly have to drop down to raw sql to do anything other than the basic stuff. 
Can I use this for printing if you don't mind ?
Only if I get one BILLION DOLLARS in royalties. I'm just playing, sure! If enough people like it I might make one of those charity things.
That makes a lot of sense.
Cherrypy seems nice enough as well, for the simple things I've made. 
You can't modify the license. That's the point of the MIT license ("ML"). ML requires any distribution of ML-licensed code to include ML. Modifying the text of ML makes it no longer ML, which means you aren't including ML, which means you're violating ML. Accordingly, you can't state anything to that effect in ML. Is it possible you meant "How do I include a notice in my software that some of the code is mine"? If so, just add something in a README with whatever detail you want. There's no formal way necessitated by ML to identify specifically which code is yours. You could put "some code (c) Alexander." You could identify specifically which functions were written/modified by you. You could include a diff file between the final product and the ML code you started with. You could specify nothing. Contrary to popular belief, in the US the very moment you fix something copyrightable in a tangible form, it is copyrighted.^1 No notice is necessary; no registration is necessary. ML does not require you to identify which code in a project is yours, nor does it restrict you from doing so provided you include a copy of ML with any code that includes ML-licensed code. (Note: I'm assuming you live in the US. I don't know anything about software license laws in other countries.) ^1 [17 U.S.C. § 102](https://www.law.cornell.edu/uscode/text/17/102) "Copyright protection subsists . . . in original works of authorship fixed in any tangible medium of expression . . . from which they can be perceived, reproduced, or otherwise communicated . . . ." There's nothing there about "accompanied by registration or a copyright notice." It's actually kind of a bullshit provision of US law that means it's basically impossible to intentionally put something in the public domain. That's why the Creative Commons has a public domain license (a license that frees content to mimic the public domain as closely as possible)
If you're talking applicability of software licenses abroad, there's a lot of law I lack mastery of to answer your question in general terms like I did above. But basically the way it would work in the US is: 1. take ML code 2. add your code 3. write new license 4. distribute new project with both the MIT license and your new license Don't think about the licenses as having one for part of the code and one for another part. Instead, think about your license as imposing ML restrictions (by including, say, a text file containing ML) and then any additional ones you want. You cannot impose fewer restrictions than ML does. Think about all personal rights that could be attached to use of software/code. ML subtracts a subset of those rights from the rights granted (e.g., it subtracts the right to share the code with no license). Your license will subtract no more, or more, but cannot add any ML has subtracted (e.g., you can subtract the right to use your code in any project protected by patents, meaning now the end user has two restrictions (can't distribute without ML; can't use code in patent project) but you cannot add back in permission to distribute without ML. This is why GPL people hate the MIT license. Because it lets Microsoft take ML code, add it to Windows, and impose the Microsoft Windows license on it, restricting the code further than it was before. The GPL does not prevent this because it forbids additional restrictions being placed on the code. Microsoft Windows is actually a great example of how to use MIT-licensed code (well, IIRC BSD-licensed code, actually, but they're very similar) and differently-licensed code in the same project.
As an aside, you should be aware that it's possible you could be illegally using the code. There are US export restrictions on certain types of software (most famously, having certain types of encryption algorithms). If you're using some of that ML code, it's possible you have no license to use that code, but this is far outside the bounds of my expertise. Now, even if you are, would anyone ever show up and enforce such a rule? Almost assuredly not. There's a difference between the law in theory and the law in practice.
I'd go with ssh rather than an online repl.
I work in a windows environment and develop data analysis applications with PyQt/PySide, numpy, pandas, matplotlib, and pyqtgraph. I use py2exe or cx_freeze to create an executable, then Inno (NSIS is also popular) to package everything into an installer. While it's not the popular trendy thing all the python folks are taking about (like web apps), and the workarounds can get messy, I've found there are enough people like me (and you) that I've always found a solution for my workflow. Don't be discouraged - where there are weaker points in the python ecosystem, the community of python enthusiasts and developers is one of it's greatest strengths, and we're here for you. I don't know how many times people have said they came for the syntax and stayed for the community. Back to installers... I've also read about folks just bundling everything with an installer and having the installer make a shortcut to the bundled python interpreter with the entry point script as the argument. Python offers enough flexibility in how the interpreter can be used that there are lots of creative options. Also... have you looked into IronPython and Microsoft's PTVS (Python Tools for Visual Studio)? If it meets your needs you might can enjoy some python language goodness within your .NET workflow. While I'm thinking about it, you should know about Anaconda from Continuum Analytics, which is a fantastic distribution of python, thanks to the conda package manager, and for scientific and engineering analysis packages. It's the recommended way to install many packages in the scipy/pydata stack according to many, especially on Windows. Being a VB.NET guy, you might like PTVS, but other IDEs include PyCharm, WingIDE, Spyder, and then there's many popular moddable text editors spanning from Sublime Text to vim. Googling anything python will turn up no shortage of results, but polling the community is always valuable since the state of the art is constantly changing. I though Microsoft open sourcing .NET stuff was going to make mono better and more cross platform and whatnot? I know stuff takes time, but is .NET expected to be more cross platform in coming years? Making new technology choices is a hard one, so best of luck with that decision! It sounds like python could meet your needs, especially with help from the community here, on Stack Overflow, mailing lists, forums, blogs, and all across the internet.
I generally agree with ssh. But I know sourcelair has python support. Haven't used it in a while so I don't know where they stand, but worth a look, I suppose.
[koding.com](https://www.koding.com)?
Wow! That is so cool.
the python course in coursera is using this http://www.codeskulptor.org/ maybe its open or free to use.
Can I get this image on a dongle?
Pretty cool. I can't wait to get this going on my raspberry pi. I have been waiting for the random functions to be added to nopython mode for a long time. If anyone is interested, il write a post on how to install numba on the raspberry pi.
I like that idea, but I've never done something like this. Would this be an easy thing to get going?
It's just floating point errors. Operations on fractional numbers are not 100% precise. If you need them to be, use the (slow) Decimal class instead. 
I am going! My company is sending me by my self and I am certainly down for a beer. PM me of you want. I am staying at Le Westin. 
Well, if users are going to be connected by wireless, you probably want to use [mosh](https://chrome.google.com/webstore/detail/mosh/ooiklbnjmhbcgemelgfhaeaocllobloj) instead. SSH can be a serious pain under packetloss. You need a server they are connecting to, and create a user for each student (so that they have separate home directories). Mosh doesn't support x-forwarding, so it's command line only tools (I'd recommend Ipython and VIM). It would be easy for me to get going and use but your mileage may vary. Definitely try it and get it working well before the class start date.
Not really. Standard 1: different color and underlined. 2: different color. and then a distant 3rd is just underlined and then of course 4: only different on hover. The last one obviously sucks worst :P
I'd ask if you could have one of the chromebooks overnight the day before to get used to using it yourself. Open up a text editor. Copy and paste some things into whatever shell/ide your using. Check that turtle, requests, and any other libraries you'd like to have on hand work.
As long as you abide by the terms of the license - which in MIT's case is just a matter of including the original license text - you can do whatever you choose. In your license, state that this project is under the XYZ license, and it includes portions of that project which is under the MIT license. For instance, Skype uses a number of 3rd-party packages like cURL, and in Skype Windows installation directory there is `third-party_attributions.txt`, which contains all the other licenses. However, it would make most sense to just continue with MIT - keeps it simple.
Interesting project, but it looks like you're forgetting to square the signal after you normalize it and before you smooth it?
Yes, just reuse the MIT for your code too. It's the least amount of legal complexity.
Very, very nice. Can it be edited to use American Apparel or better base shirt?
try asking on /r/learnpython - subreddit better suited to help. 
Yep, [and I have done so](http://www.customink.com/designs/pydoukenaa/pjr0-00a2-az54/hotlink?pc=HL-76683&amp;cm_mmc=hotlink-_-4-_-Body_txt-_-viewbutton). This one is about $10 more.
I apologize if I sounded like a dick. Sounds like the teacher is not teaching the class very well.
Not offended. 
Ah, the `abs()` must be happening somewhere else. Squaring shouldn't make a difference then, but no harm in adding it. 
I am fairly new to Python, and most of my experience is in VB, so this probably isn't the Pythonic way to do it, but I would: * Create a list of indicators to the beginning of an URL (http, https, www, etc.) * Loop through the list, searching the string for each. * When found, assign the index found at to a variable * Search for the next bit of whitespace (since an URL will not contain whitespace) * Store that index * Slice the string from beginning to beginning of URL, then end of URL to end. EDIT: Formatting.
I'm fairly certain that in the past the tickets were not transferable so you are likely out of luck. They generally sell out so you need to buy them early. There are also many [other PyCons](http://www.pycon.org/) at various locations, such as [EuroPython](https://ep2015.europython.eu/en/).
I'm sorry, Anirak: I'm afraid I'm going to have to dock you on your reading comprehension.
One of my RHEL boxes still runs 2.5. I can't wait for it to explode so I can justify replacing it.
Why not upgrade now?
I'm curious what you think of Nick's response. If it's too long for a reddit comment, I'd welcome another blog post, too :-)
Because it works and replacing it would take up my time.
I'm not the best person to ask as I don't pay Redhat for support (and in fact in my experience most of the support you need is in wrangling with their licensing) but I fully support any move from 2 to 3 and if someone wants to drop free support for 2.6, that's both within their rights and fine with me.
because conda is awesome! It is the one no-hassle install solution for Linux/Windows/Mac. (I've tried it on Windows and OSX, don't have a Linux box) On my Mac I've tried and failed miserably to build matplotlib. Conda just works, and it comes with support for virtual environments in case you want to set up a Python install with particular versions of packages for testing or compatibility or whatever.
No, I mean it works. As in fully, without being on life support and without needing preventive maintenance. As much as that ancient system irritates me, it's simply not efficient for me to upgrade it today. So, I want it to have a sudden and unexpected calamity. edit: Typos.
Awesome! Will do the same. Thanks. edit: crap. too late for shipping. oh well nice to have around too :) 
ubuntu should come pre-installed with python 3 if I remember correctly. Just open up your terminal and type in python3. If you're looking for a gui, I think IDLE is available in the ubuntu software center.
Also your post is misformatted so I'm not entirely sure which kind of situation you are referring to.
How do you mean? You want to find foreign talent to work with? Or to talk Python with? Or to do code reviews for you? Not quite sure what you're after.
yes, on debian/ubuntu it's like that and i can choose via shebang which one i want. I'd like to use 3 but things like this makes me wonder if i shouldn't support 2 also. There are scripts to handle conversions both ways which come in handy also. I supplied two scripts for the time being.
Curious: How many attendees are expected/they have capacity for? Kinda weird for me it sells out.
Thanks! 
&gt; Because people keep supporting 2.x versions. Hence this post. Yes. As i said in another reply, supporting 2.7 upto 2020 doesn't really help either i think. &gt; I'd do it on 3 and run 3to2 on it later, but opinions on this vary. I did it the other way around (since it had to be used on 2.7) but i wanted it to be usable on 3 also. The script wasn't large so most of it was ok with both. One part however used urllib/urllib2 which made me supply both versions. I guess i'll have to maintain both for a while then.
thank you for the explanation :) for vector class, it belongs to "Mathutils" from blender
Why do you have a lambda there? `for chunk in iter(fh.read(8192),'')` is fine. Estimtes are never right and most projects over-run. These days there is certainly pressure to move on. Ultimately you are free to choose whichever version you want. Is Mercurial actually slower or is it just that it needs to be optimised in a different way for Python 3?
if it's not preinstalled, or pre-packaged, give a try to the anaconda python distribution.
Aside from what others have posted about the python3 command, a lot of Linux runs on python 2. For example yum on CentOS/RHEL depends on python so if you just upgrade your system's python it'll break that. So in order for many distributions to ship with python 3 by default, they need to update their tools from 2.x to 3. 
&gt; Why do you have a lambda there? for chunk in iter(fh.read(8192),'') is fine. without it i got an error on 2.7 (it should be callable i believe), i didn't get that either so i used lambda. &gt; Is Mercurial actually slower or is it just that it needs to be optimised in a different way for Python 3? I think it's because how they handle data and the way 3 uses unicode but i'm not sure, i haven't really looked into it. I thought it was a weird remark to make for them; http://mercurial.selenic.com/wiki/SupportedPythonVersions e: with open("sometestfile","rb") as fh: ... for chunk in iter(fh.read(8192), ''): ... print chunk ... Traceback (most recent call last): File "&lt;stdin&gt;", line 2, in &lt;module&gt; TypeError: iter(v, w): v must be callable 
Why not use Python instead of SQL\*Plus to query the original database? That way you'll be able to cleanly iterate through the results.
thank you for writing this, it helps me. And no, the speed difference isn't really important to _me_ but to others it is. I've used c extensions in the past and although i like it the other way around these days (but with scheme) i don't have a problem using that again if speed is of concern. I think the scripts i personally need to do are all i/o or network bound. I like the comment of asyncio, i read about it but didn't look into it much yet. I'll do that.
 for chunk in iter(fh.read(8192),''): This works in Python 3.
The anaconda version is pretty good. 2.7 tho, I think.
it doesn't over here: Python 3.4.2 (default, Oct 8 2014, 10:45:20) [GCC 4.9.1] on linux Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; with open("sometestfile","rb") as fh: ... for chunk in iter(fh.read(8192), ''): ... print(chunk) ... Traceback (most recent call last): File "&lt;stdin&gt;", line 2, in &lt;module&gt; TypeError: iter(v, w): v must be callable 
nope http://continuum.io/downloads#py34
You could run a server on the local network from your laptop, or bring in a desktop. Server should definately be ethernet connected. And you said you mostly do windows, so I dunno if you have a linux machine you could do this on. 
Probably, as this is the means that Python uses to allow a single source file to be both a program in its own right and a loadable module to other programs - This might not be the use of a main method in other languages. For an example see http://rosettacode.org/wiki/Executable_library#Python
Ocilib is a pain in the ass to install on RHEL based Linux and requires a lot of set up. Oracle db doesn't have great documentation.
A regular expression replacement would be better. And regular expressions have been prewritten on the internet to match any links. Replace with "" and that's it
They shouldn't need to update their core tools to allow newer versions of a programming language. Every half recent linux box I tried accept `python` for the default version and allow changing it as well as `python2` and `python3` commands for choosing a specific one. If core tools of a distribution depend on python 2 they should use `python2` in the shebang and not prevent the user from choosing python 3 as his default. There are no problems running newer versions side by side with older ones that way.
&gt; Open Source projects should not feel compelled to support older versions of software which are only supported commercially. Do you feel that way? How come? If you've dropped 2.6 support, then you're done. The only pressure an OSS developer working for free should experience in the area of compatibility is that of whether their package will lose relevance to a competitor because it does not target a wide enough set of target platforms. &gt; Red Hat itself needs to consider ways it can continue to offer its support services, without them becoming burdensome to the open source community. One way they do that is by hiring lots of said Python programmers to help with the task of backporting and releasing (disclaimer, including myself). Red Hat puts tons of money into the Python community. I am enormously happy that I get to work full time on a wide variety of software of which 100% of it is open source; anyone can literally watch me do my job all day. I don't know of very many other companies (Mozilla comes to mind) which try to make this model work, but IMO the very tiny minority of companies that's committed to pure OSS business models are enormously valuable to not just the community but really the entire world. &gt; Lastly, Red Hat customers who wish they could use newer versions of software, should consider either compiling it themselves, complaining to whoever procured RHEL for them, or complaining to Red Hat itself, but please don't demand support from already overburdened volunteers. Absolutely, this post should really have focused on those users who are inappropriately pressuring upstream authors when they should be talking to their software vendor. 
Or better use partial. from functools import partial with open('filename', 'rb') as f_obj: for chunk in iter(partial(f_obj.read, 8192), ''): # Do stuff with chunk 
sudo apt-get install python3 will do the job :)
http://www.codeskulptor.org/ Rice University uses this for their Coursera course in Python. Once you save you have a url to go back to your saved code. The VizMode tool is useful for debugging.
If you wanted to be super explicit about exit status, you could also do: if __name__ == "__main__": sys.exit(main(sys.argv)) (And obviously also adopt C-style exit status codes in the body of main().) Edit: in light of downvotes, from the horse's mouth: https://www.artima.com/weblogs/viewpost.jsp?thread=4829
Well, I can't modify the license for the third-party's code I'm using, but I can create a new one (GPL or Apache or my own) for this project, correct? Meaning, my new project will use GPL and a part of the project uses a third-party code which is under MIT.
This seems like an odd way of thinking about upgrades. Sure, upgrading now is an expense without any immediate pay-off, but waiting until something goes wrong seems like taking on a larger less well-known risk. For example, if there is a security issue with some library that is no longer supported you may end up having to do an emergency upgrade with cascading compatibility issues. If you are on a more recent version, with currently supported libraries, security fixes are less likely to generate other compatibility problems. OTOH, you know your own environment best, and perhaps this reasoning doesn't apply in your case.
2.7.6 and 3.4.0, to be specific. If you want newer/fresher, then Anaconda is a pretty easy route.
I think you make many valid points.
I don't know what your code does, but problems like your urllib one are sometimes solved with additional libraries. [Requests](http://docs.python-requests.org/en/latest/) is very common for http work.
On Windows there are no expectations. It will have whatever Python version the user has installed. When the user double clicks a Python script it will use whatever interpreter is setup for that by the operating system's file associations. You can put a trap into your code that halts with an error if the version is wrong, or explicity state the interpreter in some custom launcher. On Linux it will almost always have 2.x installed and it's very common to also have 3.x. However with the exception of Arch, it will default to 2. You can use `#!/usr/bin/env python` or `#!/usr/bin/env python3` shebangs on a modern Linux.
You can have multiple interpreters installed and you should not mess with the system intepreter unless you are the distro's package manager. [venv](https://docs.python.org/3/library/venv.html) will allow you use custom intepreters and different libraries for each of your projects. Your distro may have its version of this too.
&gt; On Windows there are no expectations. It will have whatever Python version the user has installed. &gt; &gt; When the user double clicks a Python script it will use whatever interpreter is setup for that by the operating system's file associations. You can put a trap into your code that halts with an error if the version is wrong, or explicity state the interpreter in some custom launcher. I see. So euhm.. how does something like mercurial on windows work then when we want python 3? This is what i was afraid of and hoped would be better handled. 
&gt; I don't want to use additional libraries when it's not needed (say for inspecting/downloading html) I understand. However, not everything in the standard library is actually good and I am of the opinion that requests is more common than urllib in the python community.
Next April 1 Red Hat has to announce they're moving to a rolling release model. :-)
I don't know that much about accessing DBs with Python but is pyjdbc an option? Surely Oracle has a JDBC adapter?
Go works right out of the box, even though network code links against libc.
Sometimes management won't allow it because they (in many cases) only think of short term priorities. In their minds there may be more important things to work on right now.
This is a remarkably fair answer. 
Given the frequency of this pattern, it's surprising that Python didn't take a design change in the early era to just auto detect the present of 'main' and interject the "`if __name__ == '__main__': sys.exit(main(sys.argv))`" itself.
Not sure why anyone would downvote you for this. This is clearly the correct answer, and the most portable one too.
In order to solve the equations you'd have to isolate the variable. I'm too lazy to do the logarithms now but in python you can do... THE_CONSTANT = 19.3333 def y(x): # here is our function y of x. Yours will have the fancy log stuff # this one is just a simple polynomial y = x + x*x + x*x*x / THE_CONSTANT - 1423.084/x return y for x in range(0,100): #here is our input of different x's in a y = f(x) print y(x)
Sorry to hear about that. Can I ask what is your professional job? Well I've at least gotten interviews in the past because of my experience with C++ and Matlab. If Python is the only software you have experience with, I'm guessing you need to learn more languages/software such as C++, Matlab, etc.
only as much as the task you are taking on. so for a payroll system, you need basic arithmetic, for a physics simulation, lots. for a messaging app almost none at all. 
The problem the author is pointing out is that users of RHEL expect that the software they download/install will continue to work on their distribution of choice. This means they file bug reports against open source projects because it doesn't work on Python 2.6.
The responses here are pretty much spot on. I'd like to add boolean algebra (operations on true/false values) to this mix.
Python has nowhere near the reach that COBOL had in it's heyday.
I've deployed Python to windows and my recommendation is to use pyinstaller or something like it. It's a PITA on the windows side to have a user install python and all the required libs you'll need. With pyinstaller you can bundle everything up into a single binary and the end user doesn't even need python installed for your app to run. I also recommend using PyQt as it'll allow you to do GUI work and handle things like saving user preferences or configs in platform neutral ways. It also works really well for Mac. 
Create a vagrant dev environment targeting the same platform as your Oracle machines and install the version of python you want in a virtual environment on the dev box. Then use pyinstaller to bundle your app and python up into a single binary. That'll let you deploy your application to that server and pretty much any box with that version of libc and newer. 
Don't mess with System Python and end up re-installing Ubuntu. Use [pyenv](https://github.com/yyuu/pyenv) for managing different Python versions. It WILL really help you save some hair. [Here](http://davebehnke.com/python-pyenv-ubuntu.html) is the tutorial if you are looking how to install pyenv and use it. 
I've had the same experience with Go. Wrote a MySQL app in Go on a newer Ubuntu box, compiled it and ran it on an RHEL4 machine that didn't even have MySQL libs on it. Deployment in Go is fantastic. I just wish it had more people writing libraries for it.
It allows you to use the `main` function as a setuptools entry point, for one. (which is pretty much calling your script from another script, so I guess technically you're right)
5+ years of experience and you're not getting many responses either? Sounds like I'm better off just applying for different roles, so much for all the articles I've read saying there's a huge shortage of data scientists
Do you guys know which one of the talk will be made available in video ?
One of the best things about Python (imo) is that it makes very easy to reutilize code. Why would you want to lose that just to save a bunch of lines?
I'm taking 2.7 to the grave with me. 
Use six.moves
Well, don't let me convince you to give up :P I have gotten quite a few job offers, they're just not quite what I wanted; but definitely not the Data Scientist ones. There's something out there for you, and me, just gotta keep looking.
If I'm reading this correctly, the author implies that Red Hat's behavior is toxic to the community because users expect supported software from non-paid developers. But do these users exists? The post should have links to mailing list archives and bugtrackers where people complain to prove the point. And even if they are out there, they are misunderstanding what Red Hat provides and they should be educated.
The argument you're making is language-agnostic, though. If they had written it in C, it would be still be being pointlessly slow, it would just be performing that pointlessly slow task many times faster than the Python implementation. In a sense, it's because Python makes it so easy to just \*snap* implement things that they have the luxury of complaining.
&gt; But I have written a Python script to keep track of which shirt I've worn to which site, so that Site A doesn't always see me in the red shirt, lol. Python is telling me how to dress. Why not invert the script? So that to Site A you will eventually become "Red shirt guy" and to Site B you'll become "Blue shirt guy". And then one day, preferably April 1st, you switch shirts and watch the world burn. Directed by M. Night- (sorry, overused meme)
They are not ambiguous at all. The point of declaration is to inform the compiler how to interpret the bits at a given memory address. In python, this information is carried around with the instantiated information. 
I have experience with C++, MATLAB (have taught college courses on MATLAB actually) and R. Actually, you've kinda convinced me that maybe I need to re-do my resume. Something isn't tracking.
[This](http://stackoverflow.com/questions/306313/pythons-is-operator-behaves-unexpectedly-with-integers) is about as close to a reference as I can find... But one reason that the ints might hash to them selves for i &lt;= 256 is because python creates cached versions of those objects at compile time. I'm on mobile at the moment, otherwise I would test, but what happens if you try `hash(257)`??
All ints hash to themselves (or their lower 32 bits anyway). The reason is explained in the source that I linked.
Yeah we looked at getting a py27 install under /opt as well as bundling a virtualenv with every app. It wasn't on the group that actually did the looking but they decided not to bother.
Python is gaining traction as best I can tell. Years ago people I worked with sneered at me for investing in what they saw as a dead end language, but now they have all had to learn it or become dependent on the rest of us. And now SAP uses python for user defined transforms &amp; custom functions. It'll take forever to undo that. 
Thanks, and fixed!
If I run this from kde environment it works fine. But from gnome it breaks. 
Awesome! I'll stop by.
This is almost but not quite true, as `hash(-1)` is `-2`. I'm sure there's a good reason for this, but I don't know what it is: &gt;&gt;&gt; hash(1) 1 &gt;&gt;&gt; hash(257) 257 &gt;&gt;&gt; hash(0) 0 &gt;&gt;&gt; hash(-1) -2 &gt;&gt;&gt; hash(-2) -2 &gt;&gt;&gt; hash(-3) -3
Ah, yes, that was actually covered in the OP more or less. Internally, that is on the C API level, Python uses -1 to signal an error from a hash function. Interestingly enough, that means that all hash functions implemented in C do if (x == -1) x = -2; before returning, and all hash functions implemented in Python are wrapped using `slot_tp_hash` which does that as well.
Looks neat! Could you give some concrete examples of what this would be useful for? It looks like having to import the WebDriver class from this library instead of Selenium's library could cause problems with other Selenium-related tools. Wouldn't it be better, perhaps, to supply a function which wraps an existing WebDriver instance?
Check out http://lxml.de/tutorial.html#the-e-factory
Variable declaration is not "implicit" - there *is no* variable declaration. There is only assignment. The only thing that's different the first time you assign to a name vs. every other time, is that there isn't a previously-assigned value for that name to stop naming. Special cases aren't special enough.
I think the answer to that question is pretty easy to answer. When the cost of moving a COBOL code base to something else is less expensive then moving forward with some other language. I spent time at a large regional bank in the mid west that operates on a COBOL code base and when you start to look at the actual cost of transitioning to a new language the cost is pretty darn high. (For non technology companies its a pretty tough sell replacing something that is working for them, even more so when most of your Sr. Development staff skill set revolves around on particular set of technology.) ... Modern COBOL isn't that bad.(I'm aware they saying modern COBOL is a oxymoron.) 
Not surprising at all. To do so would be about the exact opposite of "explicit is better than implicit" and "special cases aren't special enough" (and maybe more).
The biggest benefit I see is the ability to sync the cookie jar between Selenium and requests. Eg. maybe you want to hit a bunch of JSON endpoints behind a single page app using requests but before you can do that you need to submit a login form and get a session cookie, you could use this to login and get the session started then use requests to page through a bunch of restful resources or something.
Or type assertions for that matter?
Python was never more alive than right now, and PyPy is just around the corner.
Thank you, it's very similar.
To quote from [here](http://www.reddit.com/r/selenium/comments/31ikg4/selenium_requests_a_python_module_that_integrates/): &gt; Some stuff is just much easier or faster if you can use the WebDriver to make low-level HTTP requests. There are some caveats, but nearly everything should work just fine. For example: there are many sites that make it very hard to authenticate properly without JavaScript support or block you entirely from doing so. One could simply spawn a WebDriver, require the user to log in and then do the rest of the work with the request method now. Also as mentioned, downloading files with a Selenium WebDriver is usually not possible without some rather complex JavaScript magic (and even then I don't know how reliably it works). Selenium is most commonly used to test web applications as far as I know, but there's also a huge application for web scraping and the like. Seeing as some websites are heavily reliant on JavaScript, and some even go so far as to block everything that doesn't act and look like a real browser, the use-cases are manifold in this area. The "heavy-lifting" for JavaScript parts can be done with the Selenium WebDriver instance and the things that can be easier (and possibly faster) done with simple HTTP requests (downloads, custom POST-requests, possibly scraping with different parsing libraries, etc.) can be accomplished by using the newly added request-method. I'll look into providing a method that allows patching arbitrary WebDriver instances, although I am not aware where such an issue could crop up. One could always manually import the RequestMixin from the seleniumrequests.request module itself and then create a class that inherits from the class one wants to use and the RequestMixin. I hope this answered your questions!
IANAL, but I'd guess: Copyright X-Y old_author Copyright Z-W new_author (you)
If you absolutely MUST have it on one line why; why; why
Being able to count to ten might help, but only if asked in the interview, after that you can fake it. Have your wife help you with the hard stuff. What? No wife, ask Reddit.
You don't need to add either just use: math.eval('1.2 * (2 + 4.5)');
Why do you need to make it recursive? If it is for a homework, what have you tried so far? Also, [r/learnpython](http://www.reddit.com/r/learnpython).
I would like to see those numbers that you speak of. Source please. 
If you're so uncomfortable with recursion, then why use it? Any recursive function can be replicated with a loop and a stack, since that's what the interpreter turns it into anyways.
True. But I give it the 'n' and it's supposed to solve for x. And it would give me the same answer just different ways. In this example I found out I needed to make it get the x's and n's on their own side first then it has no problems outputting what I want
sorry I accidentally overwrote my message, fixed
"HBase" is a very weird name for a class. I understand what you're doing and why you chose it, but ysk that [HBase is already a thing](http://hbase.apache.org/) and seeing that particular name in code with that specific capitalization will cause a lot of people to make an automatic (albeit incorrect) association. It's strange and distracting.
Hey, I got a detailed replay at stack exchange that solve this. Perhaps this is relevant to your case as well... 
`ClassNameBase` is just a common name for metaclass. I changed it to `hBase`, I think now it's less distracting.
&gt; Source please. If you're serious, no I don't have sources.
I'm a data scientist working at an Enterprise company in a very new (~18 months old) "Big Data" division that's treated as a start-up within the company. While this has led to culture clashes, I'm certain that our IT folks will support (or at least tolerate) Python in the long term.
There were also a lot fewer programming languages around when COBOL was in its heyday. 
I work at a large financial services company. There are internal apprenticeship programs available for folks to be taught COBOL from prettymuch the ground up, on the job. So, no, COBOL isn't going away any time soon.
Full text search makes all the difference especially when out of the blue you end up doing something a little exotic in a query and you want to find how that worked again in a working example. The only other thing that wordpress brings to such a site that you don't seem to have in your flask version but that I think you will see a need for eventually is user access control at the level of individual posts... not having everyone have access to everything but rather being able to limit access to queries for various clients to certain people.
Huh. Other than needing to fiddle with proxies, I've never seen `pip install matplotlib` fail on OS X. I'll definitely agree that Anaconda is a great idea for Windows, as installing any package that isn't pure Python via `pip` on Windows is a massive pain.
sonic.boom()
What's wrong with `[].append(Point(x + random.random(), y + random.random()))`? (Aside from being as useless as the other thingies, since the both the list and the `Point` get collected.)
Have you seen [mako](http://www.makotemplates.org/) templates? It's not the same thing at all...but it is along the lines of wanting to generate HTML while at the same time taking advantage of python syntax.
you said &gt; So I've been searching for answers and asking pythonists this questions but I'm getting ambiguous answers like "because python variables are just names, not pointers" "because there's no declaration, just assignment". Even if those were true, I don't think that's the reason why it should have an implicit behavior. what about any of those statements do you think is not true? all of those responses are true and are good attempts to explain what Python "variables" actually are, and why they do not need to be declared/initialized ahead of time as in a statically typed language. is there something specific about those responses that you are not understanding and would like to learn more about?
That's pretty much what I was getting at ... It's still much cheaper to teach someone COBOL rather then replace/re-engineer Infustructure and train replace an entire development team. While I love Python, Golang, and elixrlang (to a lesser extent); I understand the reality around the cost of such an under taking. COBOL in my option will be around for some years to come at least in the part of the world I work in. 
See this description of [_cache variables in the Python FAQ](https://docs.python.org/3.3/faq/design.html#why-are-default-values-shared-between-objects). It's not as explicit as creating a self._hash which is attached to the object, but it's concise if you understand why it works. edit: nevermind, you're right. Because random would be different for each instance.
&gt; The key must be immutable, and (if a container, such as a tuple) may only contain other immutable objects. As you discuss later, that's not true: they must be hashable, and user-created classes are both hashable and mutable.
 &gt;Porting takes time. It's not trivial for some codebases. People don't want to spend time porting to 3 if 2.7 works. That really isn't a good enough excuse. People with these opinions should be left to support themselves, seriously it makes about as much sense as a COBOL programmer building web solutions in COBOL because it works. &gt;Do you have dependancies (libraries) that have not yet been ported to 3? In this case use 2.7. If you don't, I see no reason to stick with 2 unless your host doesn't support 3. You could always write it to run on both versions - in this case, support 2.7 and 3.3 upwards. It's too much work to get stuff like 2.5 or 3.1 working. I can understand the maintenance of old code up to a point but the world moves forward and if you don't upgrade your code base, you shouldn't expect the rest of the world to support your bad decisions. I just find it perplexing that in the C/C++ world there is none of this massive inertia code bases have and do get upgraded over time to support the latests standards and techniques. At least you don't hear a constant whining about the latest standards. 
As far as I understand, the requirement for the hash function to produce values uniformly distributed across the range of its possible values has no meaning of its own, but is only required to allow us to take hash modulo table size for the first probe and hope that it would be uniformly distributed over that range as well. Even when we have to deal with collisions we do it in more complicated ways and don't make use of that requirement. It's needed only for that first probe. Now, Java for example performs a complex perturbation on the user-supplied hash for that, with the idea that it's better to have that code for producing good uniformly distributed values from merely pseudo-unique hashes in one place than in a million. But if you always shuffle your hashes then you get the chance of collision for _random_ uniform distribution, which is noticeable. Which is noticeably worse than ideal. Python guys say that it's better to have _better than random_ results for common use cases such as consecutive integers, then have the collision resolution deal with bad cases.
I think historically what kills languages has nothing to do with the language's internal dynamic, it's the arrival of its replacement. I'm using Go a lot these days but I don't see it as a Python replacement, they have very different strengths and goals. What will replace python? Ruby had a good shot but I don't think it brought anything new enough. You need something the old guard have been waiting for, but which comes with the uses and conveniences they expect. I think what makes Python special is the interpreter, the well scoped dynamic core, and the brevity. I demand these in my Python killer. Some ideas that would help sell me on it: * Good, first class, optional type-strictness/checking like being planned for Python but with built-in rather than hackish syntax. The default should still be Dynamic. * Good, first class concurrency and parallelism (Go or Rust "channels" between green threads?) (Not a confusing hack on top of coroutines like yield-from/asyncio) * Optional (cross-)"compilation" via attaching scripts to statically (cross-)compiled interpreters, like Neko or the srlua hack but with "batteries included". * Perhaps a well-defined subset of strictly typed functions could be compiled to machine code to allow inline high-performance code as a buy-in? I'm imagining code like Go but indented rather than bracketed, and types imported from a compilable-types module. Any function consisting entirely of such types gets detected and compiled. * First class privacy modules in core libs. Post-snowden Python, people. Think PyNaCl plus a secure/erasable memory primitive, you're immediately 90% of the way. * First class, 'Pythonic' GUI support. * First-class support for Android app compilation. These are non-exhaustive. Just imagine what would make you jump ship from developing in Python to some other language, and assume that language is as beginner-friendly. If enough people are like you, that is your Python Killer.
Have you tried applying for Business Intelligence, Analytics or Data analysis positions?
And, actually, it seems to be the default if you subclass from `object`.
General python advice: packages are good, implicit relative imports **are not**
Mostly library support. I'm not skilled enough to port over libraries. As soon as I can I'm going to start changing them.
Where do you mean? I've tried to keep things as explicit as possible. 
&gt; This is pretty good idea. Thank you :) &gt; To date I have tried doing the same thing with IPython notebooks, where I can also demonstrate the expected results of the query - but I hadn't yet tackled indexing and searching those notebooks. Yeah these things are small but quite non-trivial
&gt; Full text search makes all the difference especially when out of the blue you end up doing something a little exotic in a query and you want to find how that worked again in a working example. +1 for this. Definitely an upcoming feature. Our choice of mongo might pay off well there :) &gt; The only other thing that wordpress brings to such a site that you don't seem to have in your flask version but that I think you will see a need for eventually is user access control at the level of individual posts... not having everyone have access to everything but rather being able to limit access to queries for various clients to certain people. Yes definitely. This is a first version just to get people used to the whole idea of the application. Access control is most certainly a required feature. Thanks for the great suggestions :) Will add them to a roadmap
Read the file line by line. For each line, split it by ":".
The only thing about this post that took time out of your day is you commenting.
https://github.com/LogicSoftInd/LSQ/blob/master/config.py.sample#L4 It's better to have an empty default secret key. That way flask will refuse to use the session unless you actively set one. Having a default secret key will result in some people (due to laziness and/or lack of knowledge) using that default key, which in the worst case (pickle-based session serialization) opens a remote code execution hole.
There's a [DSL](https://github.com/dropbox/pyxl) from Dropbox that provides inline HTML support in Python, and also [this library](https://github.com/Knio/dominate), that provides a pretty cool DOM api. It's nice having more alternatives, but saying there's nothing like that is inaccurate. 
You'll probably want to fix this: &gt; Dictionaries are fairly easy to use, ~~one~~once you get used to the rules of the road:
Yes, I understand now. Thank you for the help.
So every forum in the world is now /r/learnpython, then? Every single place, everywhere, is for noobs and for noobs only? For people who are too lazy or stupid to learn programming on their own, or to look for appropriate places to find help?
I figured since it uses the python language this sub would be a great place to find people who know python
I completely agree. Everybody needs to not talk to each other about anything and if they ever have any questions or want to make a team they should be ridiculed because they aren't as great as /u/son_of_dawn /s
Fair enough. Hadn't thought of it that way. Thanks for this. Will quickly make that change :) Cheers!
Thanks; fixed!
Nothing great really. Just _better_ to use is all. Quick and fast. 
Find the index of the colon, add one, take that slice to the end: line[ line.index( ':' ) + 1 : ] If you want to remove the space: line[ line.index( ':' ) + 1 : ].lstrip() 
Okay, *how* is it better to use? I don't see it yet so I'm challenging you ;)
Great :) You know what would probably be even better? Using Flask's `app.config`: http://flask.pocoo.org/docs/0.10/config/#configuring-from-files You can add whatever custom keys you want in there, and it lets you load settings from various sources
Ah. So this is what that is called :) So, in a bunch of other projects we follow this approach. It makes a lot of sense to follow. The reason that we decided not to take that approach here is to just keep it simple. Definitely if we start building on this, then it will follow the simple-packages approach. Thanks for pointing this out. Didn't know this concept was so well documented. We followed it in our other projects by reading others' code :) Cheers.
Haha. Allright, I'll play :) Firstly, we've not even been a Git house till now. We're running SVN for all our products internally and I don't know of anything like GitLab for SVN. Secondly, we're using this as an opportunity to build a discipline in the organization. Internal tools can ease out a _lot_ of process hassles provided people actually follow them properly. This is one step towards that. 
Yes we've seen this. It all boils down to simplicity. we just went with a `config.py.sample` file since it took us to where we wanted sooner. With that said, we'll keep this in mind for when we start expanding the project :) Thanks!
The sidebar doesn't say anything about getting a team together.
You could be more helpful than telling him to read the rules. 
It looks great! Two suggestions: 1. Make it installable as a Python module via `pip` (which means setting up a `setup.py`). 2. Use the `entry_points` argument of `setup` in `setup.py` to create an exectuable for you--say `py-pg`--that calls all of your main stuff. I was about to do a quick pull request to get this done, and then I realized that you have a hg repo, not a git repo, and I have absolutely no experience with mercurial... EDIT: Now that I'm trying it out, I was thrown for a loop at the login screen. Even after entering the login info, I kept getting told "Please select a database", even though I selected a database from the database drop-down. Could this message be changed to something like `"Database {{db.name}} selected"` if a database is already selected? 
Don't bother with him, he's just being an ass because it wasn't his idea
Where is math.eval() from? I don't see it in the Python docs. 
I would love to get involved! I have intermediate python skills and am trying to get involved with a project. This sounds like a great idea!
&gt; And I'm sure if this was against the rules then a mod would remove it. No, because the mods of this subreddit have all but abandomned it, and on multiple occasions stated they don't remove things against the rules, letting the "community" handle it by voting. And now look at the front page.
Sweet. I'm at work now but I'll make a kahoot.it or something so I can share th map editor after I get off in a few hours. Basically all the tiles are 32×32 but you can make bigger ones (as long as they are praportional) for buildings or trees and stuff so if you want to get started on your tiles' art that would be great. Also, I just made th editor yesterday so it still can be improved alot if you want to help with that. I'll set up a dropbox and maybe a skype group or something so everyone can collaborate after I get off work. Thanks! 
Ite
That actually gives you two globals - `G.spam` is class scoped, not instance scoped, so is still globally accessible.
You actually cannot edit a file. Only start a new one or append to an existing one (or, through effort, change characters but not insert or delete). You need to read in the file and then write everything except what you "delete" to a new one.
If you are a developer/sysadmin/dba on a locked down workstation there's something fundamentally wrong and you should be looking for a better job...
CustomInk doesn't allow you to print copyrighted material. Luckily, the implementations of the Street Fighters character are original designs inspired by the Capcom design. IANAL, but I figure it is okay; much like if I were to make a text shirt that said "&gt;&gt;&gt;import antigravity", while it is an XKCD comic, it is permissible for printing. Again, not a lawyer, nor am I trying to make a T-shirt company. Just a guy that had a cool idea that I wanted to make and share
So then you just made it up? EDIT: are you related to Sabrina Rubin Erderly by any chance? 
Nope, still missing :(
Also see [TheDom](https://github.com/timothycrosley/thedom) by Timothy Crosley as well as the HTML generation within [Nagare](http://nagare.org).
This is beautiful to read. As a beginner thank you for the comments and the ease of understanding through intuitive naming. 
&gt;what real advantages does it have over e.g. pgAdmin III?... 1. This is something that is aimed more at working with queries rather than as a complete administration tool. So it is much lighter on the system than a full blown administrative tool like pgAdmin. I have bad experiences with installed systems that they lose my queries when they crash. What happens to your queries in pgAdmin when it crash (or accidentally close a tab)? Here the data will be safe in the browsers LocalStorage, with all executed queries will be saved automatically. Basically this is supposed to make the development/tweaking of queries more pleasant and hassle free, rather than to be a complete administrative tool. 2. I suppose It is a bit easy to add on features that you want. This being python and JS... Originally (the PHP version) this tool had a feature where the query history can be saved to a remote database, (possible on a different location from the database being worked on), rather than to local storage. That would enable collaborative work on a query, so you can just bookmark your queries and someone else can review them and all that stuff...But it was abandoned because I thought that was a bit weird for people who may want to try this out. That would have been a distinguishing feature.. &gt;Also, during a quick look at your code I spotted if len(params) == 0: - it's much more pythonic to use if not params: to check if it's an empty list... Yes. I was a bit new to Python when I ported this from PHP. So I basically converted the PHP statements to their Python equivalents...I think one can structure the whole thing a bit more nicer than it is now..I haven't spent too much time on it as the original version didn't gather much interest when I posted on reddit...So basically I stopped working on porting it as soon as I got all the features working. 
I would not say that this is a 'help' post in the vein of learning that would cater to /r/learnpython, I think this fits because it is just a general Python post. I agree that I think this post should be for news and discussion about Python, not necessarily ads, but my views do not align with the mods, and posts like this stay.
That's what I was gonna say. Not sure if it totally fits, but I've been using it as an online IDE of late while doing learnpythonthehardway
Please use /r/learnpython
I'm glad I've finally found someone with the same issue. Hopefully this can help us both figure out what the cause is. You said it only suddenly started happening. Is there any programs you've installed or other changes you've made to your system at around the same time?
&gt; that's probably what was said about Python 3 five years ago. No, not even close. Maybe according to fanboys on Youtube or something, but the core developers have always envisioned that the transition from 2 to 3 would take *at least* a decade. We're now half way through that decade, and the word from core developers like Nick Coghlan is that for the first time they now recommend that Python 3 be used for new projects in preference to Python 2. Prior to this, if you used 3.x, you were an early adaptor :-) The core devs will support Python 2.7 until 2020, and Red Hat will offer commercial support until 2023, so 2.7 will be around for a long time. But Red Hat, Debian and Ubuntu are all looking at moving their system pythons to 3.x, which means that users will have 3.x installed by default instead of 2.x. That will accelerate the move to 3 significantly, because it will change the default "do nothing" option to 3 and make 2 the option that requires extra effort. 
Which libraries? Many of the big libraries are already ported or forked to 3.x. There are some exceptions, but chances are good that if you haven't checked out the 3.x situation for a while, you may be surprised just how many libraries have 3.x support.
PyPy has been ready for production for a few years now. It does lack support for a few things that *some* people find essential, like C extensions, so it's not ready for everyone, but if your code is long-running pure Python, give it a go.
to my knowledge its simply eval() not math.eval no need to import anything or invoke another module name 
i want it to be a really laid back project where anybody can add in whatever they want. its probably going to be going on for a while. if you want to help out please go here http://www.reddit.com/r/Stepwn/comments/31kzgl/community_rpg/ 
the more the merrier! http://www.reddit.com/r/Stepwn/comments/31kzgl/community_rpg/
Dawn is the *start*, not the end. We say "the dawn of an era" for when it starts. The end is normally referred to as the twilight. Given the pace at which people and organisations change programming languages, I would say that (short of the core developers all abandoning Python and leaving it completely unmaintained) Python couldn't fade away in anything less than a decade even if people stopped using it for new projects today. [Depending on how you measure it](http://import-that.dreamwidth.org/1388.html), Python's popularity is doing fine, and rising. I don't see a mass abandonment of Python anytime soon. Even if Python loses popularity, there is a long tail of programming languages: Lisp, Perl, Cobol, Ada, and dozens of other languages will continue to used for decades after they have ceased to be "cool" or popular.
Its unclear what you are having trouble with but it sounds to me like you are simply not understanding the mathematics at hand. solving an equation like X^10 = 10 is not going to give you only one solution. In general a polynomial equation ax^n +bx^n-1 +cx^n-2 ..... = 0 will have at most a number of solutions equal to the highest power in its terms, n in this case. There's no 'most likely' answer. There are many solutions to that equation, some are real numbers and some are imaginary numbers - they all exactly solve the equation and none of them is in any way a more likely solution, they are exact solutions (within reason of decimal approximation). There is also not a 'simplest' answer unless you have some very specific meaning for what you call 'simplest' Generally you can't take to numeric solutions to an equation and say one is 'simpler' than the other in a mathematical sense. "How do i go about typing an equation into a prompt and it giving me an answer no matter how wierd? " xsqrt(x) = 15 " check out /r/learnpython and /r/learnprogramming as it seems like you are struggling with the basics of function definition look into the built in 'math' module in python. It should contain all the basic mathematics you are needing however if you find yourself needing more complex equation solvers perhaps look into scipy and numpy - but I'd say you really need to start with the basics and learn about defining functions, making basic loops, etc before you get into more complex modules
Problem with SQLite is that it blocks the entire DB during reads/writes which isn't something that we want. 
Hmmm, I don't think you can say that you have no license to use the code. I think it would be more accurate to say that you have a licence, but the person who gave you the copy of the software may have broken the law.
I already have my own wrappers that do a few of the things mentioned. If I have some time I'll poke through and make some pull requests later this week.
Flat pages? Use requests. Pages with JavaScript? Use Selenium. I've never used Scrapy because it's never been needed, you can get all your web data with the above two libraries EZPZ. 
I'm sorry, which logo? I might not have gotten the context :P
Great point. Nope nothing in this binds it to SQL apart from the fact that on every individual page, the syntax highlighting that is applied to the code is SQL. 
Not necessarily. If the person had no authority to export the code, he might have had no authority to license the code (this is where you pay the big bucks to an international trade/IP attorney), and thus your copy is unlicensed and therefore an infringing copy that cannot be legally used.
I think it's a bit hard to downvote a guy who started the conversation with footnoted text. It implies he is, at worst, only half a know-nothing asshole.
However, let's not pretend that is a unique go feature or something. Any reasonable compiled language allows for static linking. I do agree that binary deployment is where it's at.
I am not a lawyer and this is not legal advice. That depends on who you are, where you are, what you are doing, and many other factors. "I'm a 19 year old uni student using this code for my own personal use. Sometimes I copy and paste lines of code from it into my own personal projects." You're probably safe, unless you submit those projects to the university as your own work, in which case you are far more likely to be expelled for plagiarism than sued for copyright infringement. "I'm the head of a medium-sized corporation with world-wide sales of 5 million units a month. We've been told three times that we're in violation of the licence, and just ignored it." Yes, you can expect to be sued. 
Congrats on your first public project, keep up the good work.
Why use scrapy? I think it is a simple enough job for BeautifulSoup. I just tried the following on python3: def open_url(url): # use time.sleep here maybe for 2 seconds if not url.startswith("http"): url = "http://" + url return urllib.request.urlopen(url).read() This function opens the url. Now to actually parse the content for weather type. def parse_soup_for_weather(soup_): if not isinstance(soup_, BeautifulSoup): soup_ = BeautifulSoup(soup_) weather_list = [] # find table with class wet-boew-zebra table = soup.find('table', {'class':'wet-boew-zebra'}) # find all tr in the table ignoring the first empty one tr = table.find_all('tr')[1:] for row in tr[1:]: #again ignoring the first td = row.find_all('td')[-1] # the weather type is the last td weather_list.append(td.text) return weather_list When I tried: &gt;&gt;&gt; html = url_open('http://climate.weather.gc.ca/climateData/hourlydata_e.html?timeframe=1&amp;Prov=&amp;StationID=889&amp;cmdB1=Go&amp;Year=2000&amp;Month=10&amp;Day=15') &gt;&gt;&gt; weathers = parse_soup_for_weather(html) ['Mainly Clear', 'Mainly Clear', 'Mostly Cloudy', 'Mostly Cloudy', 'Mostly Cloudy', 'Mostly Cloudy', 'Mostly Cloudy', 'Cloudy', 'Cloudy', 'Cloudy', 'Cloudy', 'Cloudy', 'Cloudy', 'Mostly Cloudy', 'Cloudy', 'Cloudy', 'Cloudy', 'Cloudy', 'Rain', 'Rain', 'Rain', 'Rain', 'Rain', 'Rain'] 
[I think he means this...](https://avatars1.githubusercontent.com/u/9535665)
I use Python 2.7. Will this be an issue?
Every one of my jobs has been 2.7. I still have to educate employees who need to work on 2.7 code.
yeap, it does. this is one of the few places where it matters significantly. I recommend using python3. If not, I will test it on python 2.7 when I get my next break. 
Also, if you want to know why it matters, please read this link: http://lucumr.pocoo.org/2014/1/5/unicode-in-2-and-3/
Below in this thread mentioned library which doing that &amp;ndash; [pyxl](https://github.com/dropbox/pyxl).
Thanks, added link to it in post.
It's not surprising in the least. I don't think the majority of the subscribers here are actually programmers.
AH. Yes it was designed in 1986 when we started off :) And it was done by hand since there wasn't no Adobe Illustrator back then
Because I have some hope that people will eventually grow out of being useless and learn to read sidebars and find the appropriate place to ask questions. And the moderators sure as hell aren't taking care of the subreddit anymore.
Does it make me a dork that it bothers me that your plugboard is randomized instead of being swappable?
thankfully you're not
For new programmers, they should certainly use Python 3. While they will have to learn 2.7 eventually, a lot of the newer work will be in 3. Now, if they're experienced, know about typing, etc...then learn whatever the heck you need to. But for new people, I just don't see the point in starting with anything other than current.
The simple answer is - these days it doesn't really matter what you choose to make a heavy load site in. The key is your choice of Load Balancing/Clustering/Distribution Technologies. So is Python a good programming language to make a social network site in?....absolutely it is. 
Extract last column with Scrapy: import scrapy class WeatherItem(scrapy.Item): weather = scrapy.Field() class WeatherSpider(scrapy.Spider): name = 'weather' start_urls = ['http://climate.weather.gc.ca/climateData/hourlydata_e.html?timeframe=1&amp;Prov=&amp;StationID=889&amp;cmdB1=Go&amp;Year=2000&amp;Month=10&amp;Day=15'] def parse(self, response): for weather in response.css('table.wet-boew-zebra tr td:last-child::text'): yield WeatherItem(weather=weather.extract()) Save it to weather.py file and the run 'scrapy runspider weather.py -o weather.csv' to get data as a CSV file. With the upcoming Scrapy 1.0 (or with Scrapy installed from master branch) it is even simpler - no need to define WeatherItem: import scrapy class WeatherSpider(scrapy.Spider): name = 'weather' start_urls = ['http://climate.weather.gc.ca/climateData/hourlydata_e.html?timeframe=1&amp;Prov=&amp;StationID=889&amp;cmdB1=Go&amp;Year=2000&amp;Month=10&amp;Day=15'] def parse(self, response): for weather in response.css('table.wet-boew-zebra tr td:last-child::text'): yield {'weather': weather.extract()} The advantage of using XPath or CSS selectors over BeautifulSoup is that they are of similar power and simplicity, but by learning BeautifulSoup you'll learn an API of a specific library, while by learning CSS or XPath selectors you'll get a transferrable knowledge: CSS selectors are useful in frontend web development, and XPath is a "standard" way to query XML files. There are cases when requests+lxml/beautifulsoup is better though: Scrapy can be harder to install, and it is harder to use Scrapy as a library (mainly because of its async downloading and reliance on Twisted). The advantage over requests + beautifulsoup/lxml + json/csv from stdlib is that it is less code and more features. For example, you get asynchronous downloading, HTTP caching, various export formats, request throttling for free. I agree that the docs can be cryptic and it is easy to get lost; we are working on it. Check e.g. the updated overview page: http://doc.scrapy.org/en/master/intro/overview.html. Hope it makes more sense now.
You don't know anything about using the blowfish-compat cipher in Python too do you? I've been struggling with it for the past few days
installing a oracle instaclient then installing cx_oracle tends to be rather straightforward
The other reason ints hash to themselves is to allow other number types to hash to the same value. Ints, Floats, Decimals and Fractions all hash equal if they compare equal, allowing d[1] == d[1.0] == d[Decimal('1')] == d[Fraction(5,5)].
In fact, the first and most thorough stumbling block is going to be social inertia. If nobody uses your social network, your choice of programming language matters exactly zero, and the same goes for load balancing, hosting, clustering, etc. You don't need a lot of fancy tech when your user count is 1.
A social network is just a website with a certain purpose. Python is reasonably good for websites. It'll be fine.
heil bloody hitler this is awesome, good work
Yes. Ass, M. (2015). On the total number of extant computer programs by means of statistical deduction. _Journal of Flatulence, 4_(2), 399-417.
In the case of the MIT licence, *everyone* is able to distribute the software. The MIT licence starts off with: &gt; Permission is hereby granted, free of charge, to **any person obtaining a copy of this software** ... [emphasis added] There is no clause that says "....except in North Korea or Iran". Nor does it put restrictions on how you gain a copy of the software. The licence doesn't put any restriction on who is able to distribute the software (that's the whole point of the MIT licence!) only that when they distribute it, they include a copy of the licence. If I steal your computer, and consequently get a copy of the software, I can be charged with the theft of your computer, but I can't be sued for using the software without a licence. (Or at least not successfully.) IANAL, and it is conceivable that there are other relevant laws which I am not aware of which change the situation. But the MIT licence itself is pretty straightforward and simple and doesn't need a lawyer to interpret. It tells you: if you have a copy of this, you can relicence it to anyone you like, and distribute it to anyone you like. If you do so, you may be in violation of some other law, but you are not in violation of the licence terms. 
Pros: - **Easy to pick up**, so if you ever need to hire more programmers, you can focus on hiring "great developers" instead of "language-X-developers with Y years of experience". - **Large ecosystem**, so plenty of relatively high-quality libraries available for everything and the kitchensink. There's also a huge community that you can rely on for help. - Decent tools for **integrating with libraries written in other languages** available: there is a sane subprocess API, good networking libraries, and a decent enough FFI, so even when there is no library for what you need, or writing it in pure Python doesn't perform well, not all is lost. - Mostly **cross-platform**; Python runs equally well on all sorts of Unix flavors, Windows, OS X, you name it. - **General-purpose**; unlike, for example, PHP, Python is not biased towards any particular area of programming, so it won't get in your way when you need to move functionality between, say, a desktop application, a web application, and a shell script. - A **dynamic and interpreted** execution model means that you'll get extremely short change-run-verify cycles, and you can pump out experimental prototypes very quickly. The language is very malleable, which in the right hands can be a powerful productivity tool. Cons: - **Easy to pick up**. Python's design is optimized for the shallow end of the learning curve, and sometimes, this is done at the expense of advanced users. I could go on a page-long rant here, but in a nutshell, at some point you'll start running into weird edge cases that are the result of making things easier to "understand" for beginning programmers, and more convenient for intermediate ones. It also means that not all the people who will apply for a Python job will be great programmers, but then, the situation is probably a lot more dire for PHP or Java. - **Large ecosystem** means there is a bit of fragmentation, and some valid and necessary changes to the language take a long time to push through. Just look up the whole Python 2 vs. 3 situation to get an impression of the potential fallout - Python 3 is objectively better and "more correct" in many ways, but years after its introduction, people still use Python 2 a lot. - **General-purpose** means that, unlike PHP or node.js, "web stuff" isn't builtin, you need to use libraries to get that functionality. Personally, I consider it a good thing, because it means I can pick whatever library is best suited for the task at hand instead of having to settle for the way things are, but it does require a bit more effort before you have a "hello world" web application up. - **Dynamic and interpreted** means that there is an impact on codebase scalability. In a statically-typed compiled language that defaults to not sharing things between modules, we get some pretty strong compile-time guarantees for free, and while we can often opt out, the default is to be safe rather than sorry. The same guarantees can be had in Python, but you have to put in some extra effort to get them, in the form of automated tests, conventions, being religious about keeping things neat, consistent and modular, and a certain amount of manual auditing. Because these things matter more as your codebase grows, Python is somewhat more useful when you need to move fast with a relatively small codebase, and can become a bit of a burden once the codebase solidifies and grows. - **Performance**. Python's performance is adequate for most things, but it's not competing in the "almost as fast as C" league. All that dynamic stuff comes at a cost, and that cost is usually worth it, but if you need top-notch performance, Python is not your friend. However, in almost all cases, you can offload the heavy lifting to C (or some other high-performance language), expose a useful interface, and drive that low-level code with Python scripts. This is pretty much exactly what libraries like numpy do. One particularly nasty issue is the GIL (Global Interpreter Lock), which basically means that Python's ability to exploit parallelism to improve performance is severly crippled. Bottom line; for a social network site, Python is probably one of the best candidates; the downsides I listed are valid concerns but they are all either irrelevant for this kind of project, or they can be addressed well enough to not be a major concern.
&gt; Thread pool library for Humans. Fuck this 'for humans' naming thing has to die 
 * pyThreadpool terrible not pythonic name * why not use ```from multiprocessing.pool import ThreadPool``` * why not use ```import concurrent.futures.ThreadPoolExecutor``` * ```class thread_job``` is not PEP8 * most of the code is not pep8 * actually this whole thing is a just a thing wrapper around a list of running threads * http://stackoverflow.com/a/7257510 is a smaller nicer implementation of the same thing
Great article! Keep them coming!!! If anyone needs a very basic web server, there are also built in modules for Python that can host files in the current directory (Python 2) python -m SimpleHTTPServer 8000 (Python 3) python -m http.server 8000
Maybe I should reformulate: I thought the whole point of MINIX was to be super robust. Apparently the project either failed, or I failed to understand the project. Which is it?
Yes lets all hide Python 2 training resources as that is some how going to get the masses over to Python 3. Wishful thinking but it's not going to happen. When I teach someone python I will teach them either Python 3 or Python 2 depending on whether or not they have commercial needs. If they do, I teach them Python 2 but also mention the differences with Python 3. Otherwise I do the reverse. IMO doing it any other way is doing them a disservice. For those who are determined to see Python 3 gain in popularity I would recommend you concentrate your efforts on building a truly killer feature to add to the language. Only with a killer feature will the conversion process happen at a fast rate. Otherwise at best were in for a very slow conversion rate or at worst a realization that it's not happening. Here are 2 example features that would surely get people to switch. Add true support for multicores or add a JIT. That's how you convince people to make the switch.
Ah, I see that in the original now -- thanks. And here is the relevant part of the Python doc which shows that -1 returned means error: https://docs.python.org/3.4/c-api/object.html#c.PyObject_Hash
As of now, no
Python 2.6 came out 7 years ago. Python 2.7 came out 5 years ago. That's 2 years before they even offered a minor version upgrade. Python 2.6 was EOL'd by the maintainers a year and a half ago. That's a 5.5 year run. 5.5 years of free support is not "childish" or "for kiddies" who are "playing". To say that is ridiculously offensive, and I'm not even a CPython dev. That's 3.5 years of free support when they've ALREADY given you a newer, better version—again for free—that they **CONTINUE** to support, while also continuing to offer new and better versions. The problem is decidedly **NOT** that RedHat is making anybody look bad, it's that RedHat's customers have this skewed sense of entitlement: they pay RedHat to provide them extended support for 1 piece of tech, then expect to get extended support **FOR FREE** from the countless other FOSS projects they're using. While I personally detest RedHat systems and would not willingly choose to use one without being well compensated for doing so, I can recognize that they *are* offering a service that is valuable to many people, especially those with legitimate constraints that make it difficult to upgrade as frequently as they might wish. Further, I think they actually do a lot of good for the community. That said, I think it's fair to recognize that RedHat's customers *do* in fact go around asking other projects to do for free what they happily pay RedHat to do, and I hope somebody can find a way to set expectations for them so they stop doing that.
I apologize for the error, I checked and I am using python 2.7.3.
Edited the code for better comment syntax, thanks to tilkau for pointing that out to me :) http://paste.ubuntu.com/10749995/
Let's start a new "… for nerds" trend. After all, threading is clearly for nerds only – humans would flee in horror.
&gt; When I'm looking at your tool and especially its roadmap, it really looks like you're using company time and money to reinvent the wheel. This really isn't done on company time. One of us just took some time out _outside_ of company hours to make this tool to help out with internal processes. So IMO that isn't really the problem. &gt; GitLab and to some degree also Gogs already have all the features that you've planned for your tool. You're obviously ready to introduce a new tool and a new VCS anyway. So why not just use one of those? GitLab also opens the door for some other possibilities like code review based on a pull/merge request based workflow. +1. 100% Agree with you. But our code has been in SVN since quite some time. It will take a **good** while for the existing developers to transition from SVN to GIT. We are a very small dev team and hence can't set aside measurable time to make this transition. So this will be an ongoing process and not something that we can _jump_ to. We are slowly transitioning towards Git with a PR based model for code reviews but it doesn't look like it'll come anytime in the near future. &gt; I don't mean to make your tool look bad or anything and I'm sure you learned a lot. I'm just critically looking at the situation. In the end you know what's best. Not at all. Your feedback and your openness is highly appreciated. Thanks a lot for being frank :) 
The corner I'm addressing here is people's and distro's inertia. ;) Compare to Python3, which is gaining real ground since maybe last year – same thing.
very good read, thanks
Yeah, I only added the source right after I posted it and saw it with 0 points. Didn't want it to get buried.
Brilliant blog!
That's pretty cool, are you basically tracking shapes that move?
Easily. You could use: - "Requests" (or urllib2) to fetch the forum pages - "Beautiful soup" (or simply regex) for extracting the need information (usernames I imagine) - "Random" to choose a random username from the pool you just got. With the right tools it's &lt;20 lines 
&gt; One of us just took some time out outside of company hours That screams of an even bigger shortcoming. Rather than adapt and use readily available tools, some poor dev had to sacrifice his personal time. That is worse than it being done on company time.
Go is not really a treat for python, as awesome as it is (and it is) it's not a scripting language, it doesn't have generics or objects in the traditional sense (no inheritance). The design decisions made in Go also makes it a massive pain to write things like GUI application (it's also not too pleasant in python). If anything the growing domain of javascript (even if its terrible) is more of a treat - it's not always the good languages that win. There is no silver bullet language - I also find the Rust vs Go fight quite ridicules (Go vs Erlang and Rust vs C++ would make more sense)
can you make it so that you can pull the information based on forum post, like you ignore the thread creator post (ID#1) and take all replies after to be the entrants? Naturally I'll be doing some filtering for dupes by set processing.
&gt; No but this would mean only one person can use the site at a time. Only of you don't follow these three simple rules: 1) Start transaction 2) Do something 3) End transaction (commit / rollback) If any site / app using any database limits blocks on a single user, you have a problem other than the database.
Article on it could be very interesting.
Nice work! This is the kind of glue that test harnesses often need. Also Requests is pretty much the most awesome module ever.
*EDITED*
This looks really cool, I wanted to play around with stuff like this using a Raspberry PI and a camera, any chance of you posting the code? :D
This is wonderful. I am new to python programming this is definitely a great help. I am not sure how do I write the result in a csv file as I see that we have imported the CSV module initially but not called further. (I am using my own API and AUTH codes)
This example is included in OpenCV and is based on *Visual Object Tracking using Adaptive Correlation Filters*. The source code for the example can be found here: [https://github.com/Itseez/opencv/blob/master/samples/python2/mosse.py](https://github.com/Itseez/opencv/blob/master/samples/python2/mosse.py) If there is enough interest I could detail the inner-workings of the algorithm on the [PyImageSearch](http://www.pyimagesearch.com) blog. UPDATE: Wow, that's a lot of upvotes! I'll be sure to cover it!
Was that a video of the game, or was it running in an emulator?
As fellow user [zionsrogue](http://www.reddit.com/user/zionsrogue) stated: this is literally just an example from OpenCV, so you can play with this code by yourself. :) All what you need is numpy, scipy, and, well, opencv :) In OpenCV examples just look for "MOSSE tracking example", and tinker it for your needs. Sorry for my english.
My english won't let me post any somewhat large text. :) I just tried to show that programming, and especially computer vision could be very fun, if you apply it to topics which interests you the most.
So basically, it could be described as "video", yes.
&gt; My english won't let me post any somewhat large text. :) Sounds okay, so far. I'm sure people will be able to understand it. But if you're worried you can always ask somebody who speaks English natively to check it for mistakes and correct it.
You can always start with opencv-python doc: https://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_tutorials.html I hope you will love computer vision :)
I created it a few days ago. So there are some known bugs.
The plugboard swaps A -&gt; Z and Z -&gt; A, not A -&gt; Z -&gt; X -&gt; A. It also can never do A -&gt; A. It's may do that, but it wasn't obvious.
is it possible to only extract their ID (contained in their reply)
&gt;You can't shield programmers from learning the important differences between integers and floats. (I'm going to respond to your reply only, the other one on this issue is basically the same) I never said you should. I clearly said they need to learn about types. But for a 100%, brand-spanking-new programmer, it's important that things are intuitive at the very beginning. It can be the difference between them coming out of their first programming class saying "Wow, that was pretty interesting, can't wait to learn more!" and "Wow, this is dumb, computers can't even divide two numbers without a bunch of crazy rules." And then that attitude then carries over for the rest of their learning experience. First impressions. You will of course teach them the difference between ints and floats. And strings, and lists, and everything else. When the time is right. Not when they are still at the level of trying to do basic math.
Of course... What's your code like thus far?
Will you make the source code available?
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
&gt; That screams of an even bigger shortcoming. Rather than adapt and use readily available tools, some poor dev had to sacrifice his personal time. That is worse than it being done on company time. Well I beg to differ in that case, I've already highlighted the reason why we can't adapt and use readily available tools. This was not something that was _planned_. It started off as an exercise to learn some concepts and eventually turned into this. I don't see that as a bad thing since no effort is a wasted effort. We all did learn something from this. 
Yeah! Helps tell you what commit is for what. Even [Atom](http://github.com/atom/atom) uses it. 
I've actually been doing a fair bit with Python and Android lately (currently working on a library and framework to build an app using native UI elements via JNI), so I've had a look at many of these, are here's my thoughts: 1. Kivy. The most mature solution and really the only one I'd consider using. If you're writing a game, it's definitely a viable solution. Less so for a standard application as it reimplements all its UI widgets so they won't all behave as expected to the user and it isn't possible to get all your desired platform integration. They look like Android 4.0 widgets, but aren't the native ones. Anyone who's used Swing applications on Linux will know how offputting attempts to ape the native UI but instead end up in uncanny valley territory this can be. Running on Android 2.3? pseudo-Holo. 5.0? pseudo-Holo. iOS? pseudo-Holo. Windows? pseudo-Holo. You get the idea. 2. SL4A: Not a real solution for apps. People need to install SL4A, then install your code into SL4A. 3. PGS4A: Use Kivy 4. PYMOB: I have never heard of this one. Does it actually exist? Site looks sketchy as hell, no info on availability. 5. PySide. It's Qt. On Android. It's a great technical achievement, but... [the framework is not built for mobile devices](http://www.alex-elliott.co.uk/blog/2014/09/qt-on-android-with-necessitas/). However, improvements [seem to be ongoing](http://wiki.qt.io/File:Expyside1.png) so that's more of a "not now" than "never". Another thing to keep in mind is that most of these are using the one port of Python 2.7.2 that originated from PGS4A. There are attempts to make trunk compile on Android on the [mobile-sig](https://mail.python.org/pipermail/mobile-sig/) which are looking to be making pretty good progress, so that might change. tl;dr: Writing a game? Use Kivy, it's great. Writing an app? None of these are capable of making an app that functions and integrates as well as using the Java framework directly.
&gt; I saw virtualenvwrapper, but I think it was too complicated Create a virtualenv $ mkvirtualenv myvenv (myvenv) $ Deactivate (myvenv) $ deactivate Activate existing virtualenv (autocompletes with tab) $ workon myvenv Delete virtualenv $ rmvirtualenv myvenv
Well yes but math.eval() insinuates that there is some sort of safe evaluation of math. eval() has no such protection. 
What kind of visualizations did you want to make that matplotlib or seaborn couldn't do for you? There's also bokeh for interactive plots.
&gt; WSGI for short, pronounced “wizgy”. hmmmm 
interested. 
Word
Dude, your English is not a problem at all. I am not a native, and I understand it perfectly. Also kudos on posting this here. It's truly motivating for me personally as a learner.
I would if I had the time. :-)
Really? I thought I stumbled into /r/programmingcirclejerk for a second.
But we shouldn't be adding to the problem. Learning older versions should be something that is done when needed.
Yet there is still a need for those resources, and I still appreciate links to good ones because they help me and others do our jobs.
&gt; two mutually-incompatible versions What? It's not hard to wrote code that runs 2.6-&gt;3.4, and it's a great way to learn the minor differences between the versions.
GTA5 hasn't been released on PC yet... 
The game is running on a console.
More important probably than the language is to use a graph database.
It's pretty good. The pace is slow but it's not bad. I'd say the first episode the starts out too slow but it picks up.
Pedants. Pronounced "pee-dance", of course.
Had to jump in the way back machine to dig this one back out. Wanted to thank you for the kind words. Changed up my role at work and it has been a noticeable improvement. I'm still old and bitter but slightly less crotchety according to an informal poll (of myself... just now...) I've also stopped all personal projects outside of work. Overload and burn out on top of overload and burn out seemed like a poor life choice. I decided this would be the year my yard would only look like crap instead of looking like an epic shit fest. Have to keep my expectations in check and all that... Nice to change gears entirely for a bit though.
The rule isn't just about homework; it's about questions that are fairly simple to answer with a bit of guidance. 
Thumbs up for `multiprocessing.pool.ThreadPool`. The docs barely exist but it works like a champ.
Please do what kuenx if you can. It would be a sad thing for man kind if this kind of creativeness didn't spread to help out mankind.
Does every package need to reimplement functools and itertools?
Actually, one of the main motivations behind soupy is to better allow you to use functools/itertools with BeautfiulSoup. The main problem with BeautifulSoup is that it returns inconsistent types, making it difficult to chain operators together (you have to do a lot of type checking at each step of the query to make sure BS didn't return None or a string instead of a tag). Since soupy data wrappers return predictable types, building more complex expressions with functools/itertools/more_itertools/toolz/soupy methods is much more feasible.
Oh, that makes a lot of sense. But what is the point of the `each` and `filter` methods? How do they differ from `map` and `filter`?
Demo? 
Glad to see pillow updating! For a few months I was thinking i'd have to switch to OpenCV just to resize and title jpegs.
Python can spit out html and make web pages (like php) among many many other things. I believe reddit is written in python. The html is just the output of logic and database queries. Look into [django](https://www.djangoproject.com/start/overview/) maybe. edit: for instance, I wrote a python script that parsed through GIS data, organized it, put it into javascript structures, and then spat out [this html/javascript](http://alternative-schools.org/ElliotHallmark/wp-content/uploads/2014/05/austin_zoning.html) as a last step.
Thank you. This is great. 
/r/learnpython You have a right side and a left side. right(x)-left(x) = 0. Plug values into your two functions and hone in on zero.
It's in the repository's description. https://mul.re
 I've never cared much mkproject, it messes up my project directory structure so I just use setvirtualenvproject. Sometimes I don't want the root of the project as the place I land in with workon so I set the project directory to what I am focusing on at that time. I haven't use hooks yet. Haven't needed to. 
Agreed, /r/learnpython is the best place for this. That said, if you're talking about a system of linear equations, then you're essentially doing linear algebra (in particular, row reduction of a matrix).
https://github.com/cranklin/Instagram-Bot/issues/9
I do use a mix of `mkproject` and `setvirtualpenvproject` depending on the situation. Mostly the latter indeed.
That's not an equation! Do you mean `x+5y=8 -x+2y-1`? Also, for two variables, you'd need two sets of equations. The solution to this one equation is a line (`y=(-2x+7)/3`). If you want to solve arbitrary systems of equations (are they always linear?) you'll have to get much fancier than what I proposed and I'd reckon it's out of your league.
I'm not the OP but what I understood, he's not only tracking the shape but adapting the filter as the object moves. Without adapting the filter you couldn't track a car like he does when it turns
Yeah, but the use of SQLAlchemy prevents it to be a true active record implementation. And what I want to achieve with Eloquent is to have a code more readable and simpler. For instance, I personally prefer having something like: User.where('name', 'John').or_where( User.where('votes', '&gt;', 100).where('title', '!=', 'admin') ).get() Rather than something like: User.all().filter( or_(User.name == 'John', and_(User.votes &gt; 100, User.title != 'admin'))) But that's just a matter of personal preferences, and that's the reason why I started Eloquent.
I'm of the opinion that anyone who actually wants to code in python should know how to work in both environments, or they're really just pretending. You'd be doing yourself and your employers a disservice NOT to. For instance, any code you write in 2.7 should be written to be forward compatible anywhere possible, or you may just be making life harder for someone else or yourself somewhere down the road. Even if that product will never be converted, it's still worth getting in the habit of writing code that will also work in Python3. All my personal projects are written to be compatible with both 2.7 and 3.4, and it rarely requires any more than just coding for 3.4.
I'm sorry, but this is definitely a solution looking for a problem. There's absolutely nothing wrong with beautiful soup as it is. 
I use BeautifulSoup all the time, and its definitely my favorite API for searching through web documents. But I'm *constantly* tripping over the datatypes it returns. Depending on the context, find() can return a tag (what you want 99% of the time), None, a string subclass, an integer (if you chained two finds together and thought the first one returned a tag when it actually returned a NavigableString), or raise an AttributeError (if you chained two finds together and thought the first one returned a tag when it actually returned None). So you can either add lots of type checking in your code, or wrap BS in something that normalizes its behavior. I've gone down the first path a lot; now I'm trying the second path.
That's an interesting project. It's not quite an apples to apples comparison with Moya Context. Although there is some overlap.
Because when you use a pun for a name you think it's hilarious for 10 minutes and then regret it forever
Hl3 confirmed 
Hi, if you don't want to use any module like numpy you'll probably need to implement Gaussian elimination by yourself. Here's a nice page where you can get some inspiration: http://userpages.umbc.edu/~rcampbel/Computers/Python/linalg.html
Upvote. This is interesting topic. Maybe not directly about programming, but still. Nassim Nicolas Taleb in "Antifragile" describes a theory that if something lasted for, say, 40 years, it means it is likely to last for another 40. So, if programming is around for about 65 years, I suppose I can make living out of it till I die. 
So... where is the blog post? Also can you make a section on how to make this work on an Android phone? Thanks ;)
also Violent Python: A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers is really good its what im reading right now
Thanks for this. I had a look at this but must have missed this. Interesting. I'm about to install mechanise now which looks horrible to install 
No worries, I'll be waiting :)
Black Hat Python (same author as Grey Hat Python) is worth a read too. I am less so a fan of Violent Python, some of the code samples in it were... Questionable. I recall putting the book down after seeing a lot of calls to os.system in code samples to run Metasploit when it would have been fare more effective to use the msgpack based RPC system to do automation of Metasploit (and would have taught the reader a LOT more useful things).
It's like django-guardian, but you don't have to use Django.
I personally think this would fit better on /r/learnpython. 
Thanks!
Thanks! Yeah just open issues if you have any trouble: https://github.com/python-pillow/Pillow/issues
I don't use virtualenvwrapper or activate/deactivate/workon. I tried it out once because another developer convinced me it was 'best practice' and ended up spending an hour chasing down a bug that was caused by me *accidentally* being in a different virtualenv and not realizing it. The 'bug' was pretty subtle and caused by having a slightly different set of packages installed. It was a pretty infuriating issue to waste time on. I had another issue later on, as well, where I had a script that ran 'workon' before running python. Except workon didn't work, so it ran system python causing another slew of obscure issues caused by slightly different versions of packages being installed. Instead of these, I put it in a directory at the root of my project called venv and invoke with: ./venv/bin/python blahblah.py There's *zero* chance of accidentally invoking the wrong python on the wrong app if I do that. Either I get an easy to diagnose "no such file or directory" if I'm in the wrong directory, or I get the right python running the right program. No chance of accidentally invoking system python either.
Picture
I would argue that VP is probably trying to show a new user how this works on the system level in a pure python implementation as opposed to using another layer of abstraction that might require another chapter of explanation. Not that your method isn't better or more practical, but it's good to know what's actually happening in the background, so you know how your tools are working as opposed to just what they're doing. 
Yes, with Python you can create things, yes. These things are desktop applications, web applications (such as Reddit, Instagram, or Pinterest, which were written in Python), or other projects. It's a regular ol' computer programming language.
You should check out zc.buildout. Similar to the way you're working, but everything is sandboxed to the project directory. Eg, ~/coolapp will have a ./bin directory which contains a `python` "executable", and you'd invoke your app with: cd ~/coolapp ./bin/python init.py You **always** do it this way, so there's no way to work in another venv accidentally. If there's a problem, you can blow away the `bin` and `eggs` dirs and re-buildout your env. You can also open up a context-aware REPL with `./bin/python`. Tis nice. I like it, anyway. I've been using Python and venv since it was created, and I *still* have the switching problems. I've created bash scripts and whatnot to do automatic switching for me, but even those have problems sometimes. Buildout just works for me. I rarely have a problem with it. Works well for distributed teams too.
I missed your post a few days ago, but I think the "do not make dongle jokes" item belongs in the "serious" section... (sadly, I might add)
This might be a job for /r/learnpython, but from the looks of it, you never call `CreatePaymentReceipt`.
Awesome. Really looking forward to it. I'm building an app now and using flask, will see how these two work together.
This is so freggin cool -- awesome stuff
That's awesome! We don't support returning raw HTML + rendering it (Unless you return an HTML file) -&gt; https://api.blockspring.com/pkpp1233/parallel-coordinates... ...but maybe we should revisit that feature!
For day trading, that sounds like a job. I'd be happy to help and am very familiar with numpy/scipy/pandas, but it's work.
[Hyperlink](http://i.imgur.com/PoH9urJ)
So at some level you are assuming the types and names of your columns to save a few lines of code, which would actually provide a form of self-documenting reference, as well as IDE completion. There have been efforts in Python frameworks such as Django to remove 'magic' from features and be more explicit. Can you explain your reasoning for wanting to go against such efforts?
And now, for bonus, [Django support](http://hypothesis.readthedocs.org/en/latest/extras.html#hypothesis-django)!
duuuh, "G" is shorthand for "Global" and why I do not ever do it (except in the very depths of the night in a place nobody can see).
I agree. But while developing, you require problem solving skills, good knowledge of software development. But good knowledge of the programming language and its features will definitely help you in the long run. Knowledge building is complex. You cannot get all from one source.
It doesn't matter, but please go with 3.
I'll be there if anyone wants a Treehouse sticker or to just say 'hi'.
Bump. Can anyone help?
It is generically for any package or binary, not just python, so it has a broader use case. Sometimes you don't care to recompile each time, as well. They are working on parallel/distributed processing in scientific computing environments, possibly using docker or other containers.
i actually pitched py2exe this morning as a possible solution for our windows deploys. i need to experiment with it a bit but that seems like a good path to go in. Freeze sounds super interesting, I hadn't heard of that one. If that works the way I hope, that could be pretty sweet. The only problem I can think of is that the build process would be fairly solidified towards Linux. Which, I think actually makes sense, since that app would have to be written with that deployment in mind, but a few of my coworkers are unwilling to sacrifice generic-ness. PyInstaller is definitely a step where I'd want to go, but it seems a little young... Either way, I'm going to play around with both, thanks for posting the links!!!
This is a presentation on generators: http://www.dabeaz.com/generators-uk/ Go through the presentation slides. They will show you how to use python generators to parse through logs.
It's just how the ActiveRecord pattern works. I find it easier to get started with and that is something I like in Ruby On Rails for instance. Since it is based on conventions, it allows you to focus on the features of the application you are building rather than defining your models which are just an intermediate layer to the database anyway. Regarding the autocompletion and self-documenting reference, I kinda agree. But if you want you can always add doc strings documenting the available attributes. I know that Eloquent will not suit everyone's needs, and that's fine. But I know it will suit mine and possibly others' and that's why I started it. 
You take a look at the sources and you know it's a joke.
https://github.com/spotify/dh-virtualenv at least for the Linux targets. If you stick close to the usual Python tools (e.g. don't start to do your own dependency resolution), these things are just thin facades, so just use the most appropriate one, and several of them. Automated builds do the rest.
I just use `cd`. ;) ![autoenv](http://i.imgur.com/4arI6aM.png)
Generally once you hit a certain point you are better off just directly reading the documentation. If you are interested in performing specific tasks instead of just language syntax the books will just be repeating the docs anyways.
The [Read The Docs theme](https://github.com/snide/sphinx_rtd_theme) is a really nice
&gt; PyInstaller is definitely a step where I'd want to go, but it seems a little young... Huh? It's at least over 9 years old: http://trac.pyinstaller.org/timeline?from=2005-10-20&amp;daysback=30&amp;authors=
Try Pyramid. It contains everything what you need. You can select your preferred template engine, database library (sqlalchemy is the best I think), send any headers and response like json/string/template. You can separate your views by method POST/PUT/DELETE/GET.
&gt; weird *awesome. 
That's almost what I need, but unfortunately the bulk of our clients use Conda, which doesn't seem to be compatible with virtualenv/pip. building out pip dependencies will be easy peasy, but I need a solution that will play nicely with conda binaries.
This is actually a really good book and provides nice clear examples.
As a developer who took exactly this path to learning Python I can recommend against it. I should have gone straight to classes, even if they were used just as a way to organise a group of static methods.
It's a fucking language. Jesus. Fuck off with this shit.
So what you're implying is that people who don't like what you like are immature?
There's also Learn Python the Hard Way, which is how I was first exposed to python. Classes are a pretty difficult concept to explain and understand. Basically, before there were classes there were structs. Structs are structured memory, meaning that they can store related data. Take a point on an x y plane: struct Point { int x; int y; } Why is this useful? Well you can make entirely new data types this way, and a function could, for instance, take a value of type Point. Classes build upon this concept and allow you to store not only data, but code as well (functions or methods). Also, just like Point {2, 3}, Point {5, 8} are two different values of type Point, classes are like blueprints that you can make instances of. And since they contain both code and data, the code itself can change (I.e. The behavior can change) across instances of a class. Sorry for being so verbose, and I hope I helped a little. 
No, I just drew an image
Well, I agree, although when you're working on corporate knowledgebases — they will naturally insist on having their design and in this case you're better off building the theme upon the vanilla Sphinx. Or, perhaps, the Bootstrap variant.
Shut up. Just shut up. You had me at 'Hello World!'
Interesting. . . was Python your first programming language?
 &gt; I'm planning on adding some tests, but I'm not sure how to test some of this since it will yield different values depending on what's hot on reddit at the time. Great time to learn about Mock! There's also a library [responses](https://github.com/getsentry/responses) which does similar things. &gt; Right now it is used so: python Arachnid.py You configure its behavior by editing config.py - you supply it with subreddits you wish to get links from and a target filetype. It crawls out from those links to the depth specified in config.py and downloads all urls that match the file type. It would be cool to add some sort of filtering by keyword as well, like you suggested. I'm planning on making it concurrent as well as making it smarter about which links it chooses to follow. After that I would like to add more producers (Hacker news would be the next) and a better cli interface. Ah I see :) &gt; How would you design this program, if you were starting from scratch? First off if I was you I'd learn about setup.py, I wrote about it [here](http://www.ericcarmichael.com/writing-my-first-python-package.html). You could just have people `pip install arachnid` or some such! I'm not sure this really needs to be architected too much, a few functions for filtering, grabbing, and interpreting things? If you wanted this to not only filter Reddit but other social media, I'd make different "backends." Something like this: class ABackend(object): def search(self, query, filters=None, *args, **kwargs): ... Where each backend handles everything else, you pass keywords into query and filters could be anything you want.. maybe a dictionary of filters (lat/lon/max distance maybe?), or you could just make those specific keyword arguments to that backend... EDIT: Also it should probably take arguments from the command line not a config file.
curtsies and urwid are your closest match. diagram is also a close match. i authored a library named blessed which is more of a thin wrapper around curses (and is a fork of blessings, providing keyboard support and much more, trying very hard to get it merged upstream for a few years now).
C++ propaganda detected
It's a common symptom of open source projects that are completely controlled by a single corporate entity. They depend on support contracts, so they deliberately put out poor documentation, or even no documentation at all. In the case of OpenFOAM, the rights holder even went as far as threatening a community documentation effort with suit to protect their revenue stream. As far as I know Odoo hasn't gone to that extreme. Also, I'm looking for an Odoo developer in Austin...
Does getting a handy from PHP during the day count as cheating?
Get familiar with other software/technologies related to the field. Tableau, Hadoop, NoSQL, AWS Redshift, etc. The book "Data Analysis for Python" written by the Pandas library author is helpful too. Knowing a bit of all that at a junior level will put you well enough ahead of the game. Good luck. EDIT: Totally misread the question. What the other guy said. 
What's up with all of the bad reviews on Amazon about this book? I wanted to buy it, but people were saying the code and tools used were outdated. Any truth to this?
I hit this point on something recently. It's an 'eh' feeling.
Boot2docker works for Windows, but is still just a wrapper around a minimal vm.
Most programming doesn't require anything above middle school mathematics. That is, programming itself is more about logic and syntax than it is about maths. It's only an issue when you are writing code for something that is mathematical in nature. So unless you plan to do work on Artificial Intelligence, Graphics, Physics, Scientific Computing, Simulation, Analytics or some other such area you have nothing to worry about.
Ruby makes my head hurt. 
It's actually really sad to compare a programming language to a woman. What's even worse is that people in this sub upvoted this. Poor attitude.
#Writer of the answer here: I wrote that answer in about an hour, one day when I was staying home from work in Seattle. Glad to see it's still making people happy! PS - Check out http://OfferLetter.io - It's a startup I launched after leaving Twitter. We provide career and negotiation advice to help engineers make the best career decisions on the best terms possible. If you've ever wondered if your salary / equity package is fair in terms of data, there's always Offer Drive - (http://OfferLetter.io/drive.html) - donate your comp info, get back access to a statistical pool that shows where you stand. Cheers, and happy Python'ing! ^_^
I don't see why it's getting all the hate in the comments. It's cute. Then again, I also will compare natural languages to people with distinct personalities in my head, so maybe I'm just the oddball here. Nevertheless, I don't think it's sad or a reflection of a poor attitude. For the record, I'm a woman.
You being a woman doesn't change the fact it's rather sad to me. He would have compared Python to a man with strong muscles and I would have disliked it just as well. I mean &gt; She hears what those other, older languages like Java and C++ say, and she thinks she's not stable or mature enough. She hears what those shallow, beauty-obsessed languages like Ruby say, and she thinks she's not pretty enough. But she's trying really hard, you know? She hits the gym every day, trying to come up with new and better ways of JIT'ing and optimizing. She's experimenting with new platforms and compilation techniques all the time. She wants you to love her more, because she cares. You don't find that wrong at all?
You nerds are trying so hard to be normal that you won't even laugh at a joke. Lighten up
Eeyuck! Anyone else feel weirdly disgusted whilst reading that? It's just a great programming language.
too much Latter Day Saints?
Personally, I don't find it obviously wrong. Just weird, like naming your car and then talking about it like it's a person. (or heck, even talking about your pet like it's a person.). A few sentences of that is funny. Multiple paragraphs of that inspires concern about a person's mental state.
Agreed, Backtesting losses all its cross-validation when one uses a feature vector that is trained on the testing set. Even if you remove all mention of stocks in the test set from the sentiment training data, you will still get leakage from sector based news. In other words, if you learn that stock X will go down if blogs say Y, then you use that metric in your backtest you will be cheating.
Cafeeine is a drug, I like caffeine, so yeah.
Do you have a copy of your dissertation I could read - if you don't mind of course? A couple of years ago I built an algorithm to use stocktwits.com to get investor sentiment but never really took it further. Would be interesting to read your thoughts
I only want to print lines that contain specific words, and the script should terminate if an other specific phrase is found. I just tried out your code and it works just fine, thank you really very much for your help. I think now I got all I need.
&gt; If you are about to ask a question, please consider r/learnpython. Homework-style questions will be removed, and you'll be encouraged to post there instead. That being said you should also post the actual question.
No. If you have to resort to this, change your career path. This is not for you. 
This isn't my field so can you explain? What are they actually doing here? Naively I would expect that if you train using historical data, and you don't peek at the next day's results, it should still be good? 
Really need more code, but you appear to be setting `self.jumping` to `False` when it shouldn't be. I'm assuming `self.jumping` is set `True` when you press Space. So now it goes into the `update()` function. If you're on the ground (line 16), which you will be, it then goes to line 21 and sets `self.jumping` to `False`. (Why? You just pressed jump!). Then we go line 30 which alters your Y position (performs 1 iteration of jumping) but `self.jumping` is `False` so it won't do it again on the next loop. You need to double press Jump.
If i understand you right you should do something like this with my_file as open("path_to_log_file") result_list = [] for line in my_file: if phrase_you_search_for in line: result_list.append(line) if phrase_that_terminates in line: break Lines: 1: Opens your file through a context manager, that manages cleaning the file up afterwards. You need to indent after it for all the code that uses the file. 3: Simply iterate over all the lines in the file. 4 and 6: Check the line for the phrase you need with the "in" keyword 7: Exit the for loop via break if you find the phrase that you want to terminate at. To print it into another file you can use a contextmanager again but use open("file_path", "w") to open the file in write mode. This will always make a blank file and overwrite anything written previously. If you want to append to an existing file you use open("file_path", "a") 
Really glad to see a good Python podcast! Michael Kennedy is really doing a good job IMO. 
This is great stuff! 
 [2*x for x in [1,2,3]] ?
But Python aged like Jennifer Aniston and Java aged like fruit left outside in the sun. 
commenting so i can return later 
I'm going to assume you are going to spend a lot of time pulling information from data bases (using sql or from .csv files) and establishing points of order, relisting and structuring data and possibly developing important reports with the data. I have a friend working as a data analyst in a hospital and this ( i figure as much as he is allowed to due to confidentiality) is commonly what he posts about his job on the facebpoop. I hope this helps.
I'm already done with my script now, looks very similiar to yours too. Thanks anyway!!
The only "fact" that I even stated was related to OpenFOAM, and [it is most definitely true.](http://www.cfd-online.com/Forums/openfoam/69068-foam-documentation-project-shut-down.html) If you don't think companies tend to take actions that negatively impact non-revenue generating users, you're incredibly naive. Even so, I never even outright stated that Odoo is doing this, only presented it as a possibility.
There is an obvious lack of information to be able to help you: - in what state are your kidneys? - do you exercise? do you drink? smoke? - any known genetic issues running in the family?
What's the assignment?
The data they used to train the model is the same that they ran the model on. Think Pavlov's dog, but slightly extended. When I ring a bell you get a treat. When I hit this drum you get smacked on the nose. You learn the signs pretty quickly. Same here with this data: they knew what were good/bad indicators for this exact dataset, trained their model with it, and SURPRISE! it performed well. A better method is to train on one dataset and test on a completely different one. This is akin to learning that I use a bell for treats and a drum for punishment, then having to go to the next house over and try to guess if you are about to get a treat or a whack in the face. It may work, it may not. TL;DR - Training on your test data is only a good idea if you want to predict only what your test data is going to do. Since you HAVE the test data you KNOW what it is going to do. This makes it a Bad Idea and is the reason these people are full of shit. 
&gt; . my "dream" programming language would combine the best of both See PERL.
Man that's awesome. Any chance some of this stuff might get backported to CPython?
The simple answer is "run the script on your server". It won't stop running until you tell it to stop or the machine loses power or reboots or whatever. A more robust solution is to use a process supervisor (supervisord, systemd, whatever is appropriate for your OS) to start, restart, and terminate your process. Depending on the tool you're using (systemd lets you build complex dependency chains of processes: Process X will start automatically if Process Y tries to access it, and Process Z will always start on boot, and Process A starts automatically after Process B finishes start, etc etc etc), you can configure the process to run on startup, after a certain runlevel is reached, or whatever you like.
So ruby is readying from left to right while in python you read from the inside out? I guess it's a matter of preference, but I find reading left to right much easier then Python's nested expressions. ---- Also, what if you're attempting to chain together commands? In python, this is my attempt to join together the resulting list and create a string: &gt;&gt;&gt; (' ').join([x * 2 for x in [1,2,3]]) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: sequence item 0: expected str instance, int found Here it is in ruby: [1, 2, 3 ].map { |x| x*2 }.join(' ')
This is an article from 2013 exaggerating this blog post: http://techblog.netflix.com/2013/03/python-at-netflix.html
I think this is the wrong attitude to have. If you run Linux, you're trusting some random internet dudes to maintain a stable API in their packages. You can easily do `aptitude update &amp;&amp; aptitude upgrade`. At some point, you'll want to upgrade a package because it offers feature X or has patch Y. You'd still be SOL if the API was broken in the upgrade regardless of if you upgraded just that or upgraded all of them.
As much as i manage installing packages by pip, i then also expect to have some meaning to manage the updates and the removal with it, don't really get the hate, but that's it.
&gt; The best software is the one that works, not the latest version. The best software is also the one that gets updated, and sooner or later you are going to do it.
I appreciate the responses everyone. So I should be putting a good amount of time into learning SQL then. 
&gt;(Python created in 1991, Java in 1995). Actually Python and Java are practically the same age. Python was started in December of 1989 while Java was started in June of 1991. Python 1.0 was released in January 1994 while Java was released sometime in 1995. Java had very ambitious goals and had relatively more features in its initial release than Python's. **Not that this actually means anything about the quality of either language.** I like both and each has its strengths. EDIT: I consider any language with 20 years or more development pretty mature regardless of the exact date of or the features found within its initial release.
This is a different situation. You're talking about curated updates from your distro's central repo. That's not going to break you if your distro does it job properly (unless it's Arch, hyukhyuk). I have no fear updating Ubuntu from core repos. With PIP, in Linux terms, you're dealing with independant 3rd party PPAs. There's zero guarantees there. Even if they are competent and mean well, they simply aren't going to test their stuff against all of the random stuff you might have.
In case that's not clear: this is a "hack" that prioritizes I/O threads to improve responsiveness of multithreaded I/O-bound programs (e.g. http servers that spawn a new thread for each connection). It doesn't improve performance of CPU-bound tasks, nor does it allow to run multiple threads in parallel like PyPy with STM does.
Python is also reading from left to right. The full syntax of a comprehension is EXPR for FOREXPR.... if EXPR For example `[x*2 for x in [1,2,3,4,5,6] if (x % 2) == 0]` `[4, 8, 12]` It performs the equivalent of map() and filter() in one step. Another example: `[ x * y for x in [1,2,3] for y in [4,5,6] if ((x+y) % 2) == 0]` `[5, 8, 12, 15]` I do understand the 'inside out' argument, since you're putting the loop(s) after the value assignment. But filtering cannot be clearly included otherwise. It's the same ordering as a SQL `SELECT` command. 
you can always "conda install pip" and "pip install" away! If the directive is 'get this done ASAP', then Anaconda Server is likely a reasonable answer. One tool in that product is cas-installer, which, as far as I can tell, would hit all of your use cases: http://docs.continuum.io/anaconda-server/command-line/cas-installer.html#cas-installer Disclaimer: I am a Continuum employee.
I've used [Google App Engine](https://cloud.google.com/appengine/docs) to run python code in the "cloud". It was pretty easy for simple scripts. I'd warn that if your site got significant traffic/was computing intensive you may run out of the free plan very fast.
CPython (mainline) *is* 3.x.
and the clojure at netflix from the same year. https://speakerdeck.com/daveray/clojure-at-netflix netflix uses the right tool for the job. 
＞If you are about to ask a question, please consider r/learnpython. Homework-style questions will be removed, and you'll be encouraged to post there instead.
Ah, thank you! I looked for r/pythonhelp etc. but I couldn't find anything, don't know how I missed r/learnpython...
You don't say :) However something tells me that the original developer of this code is working on 2.x and wrote the patch for 2.7 for a reason.
You may have some function calls in your iterator code...that could be slowing it down? Only a guess.
Maybe PHP gets it's [tips from her](https://www.youtube.com/watch?v=0hm7pp_JFOs).
Right you are. I completely missed that \^\^ sorry for the confusion. It didn't seem like any of the discussed techniques were exclusive to Python 2; in my OP I meant could they be ported to new versions of python.
Yes. Stay the *** away from PHP. I say this as someone with 9 years professional PHP experience and have written a lot of php code on the side until very recently. People will say PHP has improved a lot. But that is just a false impression. What is happening is that, PHP is adding a lot of new features from other languages. But what is hopelessly wrong with the language remains same. I think developing web applications in Django or Flask is pretty straightforward, provided you stick to doing things the documented way. So forget PHP, just remove it completely from your consideration. I will say this one more time. *Do not spend time on PHP. *. If you ever find yourself in a situation where you absolutely must use PHP, hire someone else to do it. Just do not get exposed to that shit, no, not in fucking 2015. 
'PHP hosting is more common and cheaper' What does this even mean? Hosting is hosting, what service changes their price by what language your app code is written in?
Yes, you can, with the caveat that non-pure-python modules need special recipes to work on android or ios (though many have recipes included in the build tools). Also, kivy has no cross-platform webview, and the platform specific ones are quite experimental, so don't bank on displaying a web page that way.
You could run that line into an alias: pip list --outdated | cut -d ' ' -f1 | xargs -n1 pip install -U
It's that, at least at one time (and this may no longer be as true, I don't know), the services that provide running Python/Django on their hosts cost more. see: http://community.sitepoint.com/t/is-python-impractical-for-web-development/5190/4
/r/learnpython please
it's so unbelievably easy these days to spin your own, that paying for hosting like this is silly.
All valid points, but it doesn't change the fact that they validated on training data and started tooting their horn. The claims don't pass the smell test and scream cherry picking and misrepresentation of their methods and reasonably expected future outcomes.
Don't bother with hosting sites. You need to look at PaaS. Most of them support python.
You can't force people to migrate that way. The corporate world is on 2.x and will stay there for a long time.
Looks great. You should be really proud of this. 
I was about to post essentially the same thing as Lord Goatcheese, so ditto. What courses/workflow did you use to get started in python?
The hell I can! I will find a security hole in 2.x and write malware that uses it to lock down the computer and play Justin Bieber music until a flash drive with Python 3.x is inserted. 
For instance digital ocean. You tell them what server you wanna run, they spin it up and give you the ip address. What you do with it is your choice put whatever webserver on it you want, whatever software, whatever language. You have a machine hosted somewhere in their server rooms to do what you want with. No reason to lock up your tools with somebody's service these days.
Thanks. I worked through a little bit of all three of these: the **tutorial in the python documentation**, **python the hard way**, and **code academy**. I had already taken two classes in Java at school, plus I read a php book a few years ago, so I already had the basics of programming down. I mostly just needed to familiarize myself with the python way of doing things. Lots of new concepts(Generators, new data structures, etc). After that, I did the django tutorial and then jumped into the project. I think the hardest thing wasn't the actual programming but the configuring, layout, and deployment. Also, [codingbat.com](http://codingbat.com/python) is really good to test basic knowledge. I didn't come across it until after I started the project but it definitely helped me become more familiar with python. 
For more for "Specifics", what is the front end using? Could you expand more on your statement about PHP deployment? I just asked about this very issue today. Also, how long did this take you from start to finish? Looks good!
Very nice! Congrats
Look up shared hosting vs paas and decide for yourself. I'll never go back to the old way.
Thanks for the info; I'm in a similar situation. I use python and several other languages daily for work, but it's all piecemeal, I'm trying to formalize my knowledge so I can do more than just edit/hack someone else's code.
Nope MS Econ, but I've been doing front end web dev since the mid 90s (when I was in middle school).
That's pretty interesting. I'm finishing my BA in Econ this semester. 
That's what I've been finding out more and more! Part of the problem comes from a complete inexperience with Conda on my side. All of my development in the past has been done just with pip . The more and more I play with Conda the more I think its put together fairly sane. I'll definitely hit up their google group. Thanks!
That's awesome! A big part of my problem comes from my total lack of experience with Conda, and I've been having some trouble figuring out what the Anaconda distro of Python does differently. As best as I can tell, the biggest difference is that it alters sys.path to include its packages. Is that correct? Thanks so much!
I came here to say Violent python. Great book! http://www.amazon.com/dp/1597499579/?tag=googhydr-20&amp;hvadid=58008478523&amp;hvpos=1t1&amp;hvexid=&amp;hvnetw=g&amp;hvrand=8144878401955922307&amp;hvpone=35.12&amp;hvptwo=&amp;hvqmt=b&amp;hvdev=c&amp;ref=pd_sl_4yb597ieut_b 
IO vs CPU bounded-ness is a given. So is finding Python 2.7 &gt;= Python 3 in performance... I would like to know how PyPy performs with this hack.
Take a look at bootstrap. I used it for some little projects that I did after teaching myself python.
Dead like FreeBSD
Thanks for the recommendation. I plan to give it a try on my next project. I had heard of bootstrap when I started but I didn't look into it enough to understand why I needed it until recently. 
I don't, actually. In that case, agree to disagree? I also would find a comparison to a guy amusing. Like sure, that doesn't sound like an ideal woman, but it sounds like an accurate representation of how Python would act were it a woman. To each their own. :)
I'm now adding a copy of python 3 to my flash drive just to ensure I'm not collateral damage when your plan is put into effect. 
&gt;30% more requests per second. That's what I can achieve by giving my 4 year old nephew sugar.
Last year was rather quick, I'd say a month or two. EDIT: You can follow http://pyvideo.org/ to be informed.
It seems to not be explained clearly, but conda in the python world just removes the compilation step, which can make things more consistent across platforms and can save a little time. I just look at conda envs like a more generic virtualenv, which can have, but doesn't have to have, python, pip, and conda. So my logic is, try to install via conda, and if that doesn't work, try pip. I wish they added some feedback in that process somewhere on the next best step if conda install isn't available. There is a good talk by Travis Oliphant at pydata last year that covers everything. The thing they don't advertise much, and I'm not sure why, is the "bundle" command, which can be used to capture an environment. That said, I think it comes down to your use case. With the py2exe or cx_freeze approach, I think you have a completely new python environment contained in there. If they are working in a local python install that already exists, why not make the packages available to them in some alternative way, like an isolated network folder, git server, etc. You can install with pip or conda from a local hard drive, network share, or full package server.
You should probably try to look at your problem from a different angle. What you *seem* to want is to check if the last command was processed more than 30s ago (which is far simpler: just store the timestamp of the last command).
Confirmed by Netcraft.
Holy freaking fast! Nice work... the database searches are super fast.
... or which-ever tool the project-lead believes in.
I'm wondering if they confused Python with Pascal. 
Netflix employee here. Agreed. 
Scripts will probably be able to run, but you might have trouble installing supervisor with will make sure that the script always runs. 
In PHP every variable starts with $. My theory is that the original guy who wrote the interpreter/language couldn't figure out how to properly parse and handle variable names so he cheated by making every variable start with $. I don't like PHP.
Yeah, really any purpose built search engine is fast as hell. I use Xapain, solr, and ElasticSearch often.
Also us pythonistas tired of language religious wars. *Written while IM-ing someone about migrating from 2 to 3* :-)
Bootstrap or my new favorite [materialize](www.materializecss.com) framework are what we use at work for layout and CSS. I just wish something would replace JavaScript for the web. Switching between python and JS is just so...jarring. 
You can save posts with the 'save' link.
Pardona me interruption guys. I'd be interested in the paper as well. It sounds like you guys might be able to help me. I'm a formally trained math and physics dude who learned how to code in college and ever since getting an adult job has started investing and doing some little bits of swing trading. I spend all day at work writing python code doing data analysis and data sciency type stuff and one day I realized I should probably write my own algos using simple technical analysis like moving and exponential averages, RSI, etc. Do these technical models exist or do the more experienced (profitable?) people have much more complex models integrating external factors like twitter sentiment? My basic idea was to get as much historical daily time series data as possible for a certain stock (maybe SPY for starters) and then set up a little system to backtest an algorithm of choice. IS that a reasonable starting point?
Perl developer for the last 8 years. No one does.
2.7 is EOL. When the patches stop, you'd rather fork it than port to 3?
one of our ftp server still use python 2.3. My superior(s) rejected the idea to upgrade. It goes something like 'Why should you waste one of your team even for an hour to fix something that unbroken.' 
I thought they were migrating to Node.js or something.
If you REALLY want to use Django but don't want to use their templating system than you can just ignore it. Look into Django Rest Frame work for your back end code and make a front end in what ever JS framework you happen to like or want to play around with. 
Also knowing and working with multiple languages will make you a better programmer. Regardless of it's other qualities, python and the pythonic way definitely left their positive mark on my coding style.
You need an editor which has block select and indent whole block with some key (eg. tab). I think even the IDLE supports this. You may want to look into PyCharm and /r/learnpython.
All my text disappeared and now there's just a tab there.
On these situations it's considered standard to post - at a minimum - what you've tried so far and exactly what errors that produced. 
on python there is the cx_Oracle library, which provides a direct python interface with real result rows
I use Sublime Text, a hotkey is to select all and hit Command+] (Command+[ unindents, as well)
In no particular order: * If it's already in a function, just write a different function that calls it in the loop. Renaming the inner function to some obviously-a-helper-function-name works, then just write the outer function with the name of the old one. (This is kind of a hack, though.) * Most editors allow you to tab a block of selected lines. In software development, learning your editor is almost as important as learning your language. It's no less important than knowing how to write it when composing an essay. * Hundreds of lines, you say? This should probably be in a few functions. Try to break it up into a few logical components and wrap them in functions. * If they share a lot of state, it may make sense for those functions to be methods on a class that represents that state. * No matter what, though, you're going to have to be able to indent and de-indent your code. Every viable solution to this starts there--though it often ends up with the code broken up into more manageable chunks. 
For the list of installed packages, why not just use `pip freeze`? 
While there is Selenium to control browsers I don't think it's capable of controlling input to canvas. Plus you can't read anything out of the browser. My best guess would be to write a browser extension that controls the page and proxies everything you need to Python. tl/dr: You can't unless you invest tons of work.
Should have done this on Python 3.4.
This is great, kudos! Companies easily pay a thousand bucks to have a site like this made. 
I think I may be out of the loop on a joke....
Same here. The problem is when you've gotten used to dynamic tricks, and then come back to Java. *"These are all so alike. Ah! I'll just make this accept a function as a param... oh."*
yup, some editors recognize this, some dont.
&gt;I'll just make this accept a function as a param... oh Java 8 has a function type, lambdas and method references.
Used vim for years. TIL. Thanks. Was previously using Ctrl-V I &lt;tab&gt; &lt;esc&gt;
&gt; Java is going to be more performant simply because it's compiled Python is "compiled" in (almost) the same way Java is, both execute bytecode in a virtual machine. Java will be faster *in some circumstances* mostly where CPython invokes the GIL, or where there's underlying implementation differences favouring the Java one (e.g. machine code executed via JNI being timed against pure Python executed in CPython with the GIL in a very locky use case). 
While I haven't used the dropbox api, it sounds like you just need to implement syncing. There is a way in Python to watch a local file for changes, whenever the file changes, upload the new file to dropbox. The same works for syncing the file from dropbox. Every n seconds, check the modification date, if the file was modified since your last check, bring it down. There are obviously a few nasty edge cases here, but that should get you started.
The relevant codebase is running on Java 6 because it's a huge fucking monster and doesn't work properly on java 7. Such is life.
Indeed. 2.7 is alive and well. 2.x is still running the internet but canonical development of CPython is all happening in 3.x and 2.x gets only bugfixes and security updates. I'm one of those rogues that thinks that 2.x should get whatever boost people are willing to give it.
Link?
On mac programs that follow the mac conventions it's cmd+] for adding an indent. But in your case you probably first need to learn to use functions!
How does this book compare to Python Cookbook: http://www.amazon.com/Python-Cookbook-Third-David-Beazley/dp/1449340377/ref=pd_sim_b_5?ie=UTF8&amp;refRID=1GW88G6X15N3DRCMAAHV thinking about getting one of these two can't decide which :-) 
&gt; But in your case you probably first need to learn to use functions! This was unnecessary. I've actually been coding since I was 11 and use a bunch of different editors with a bunch of different behaviours. I was pointing out that /u/nipplepoker is calling OP a noob while making the noob assumption that their editor will behave like that and even that OP is using Windows. Neither of which are a given.
Take a look at matplotlib, and the prettier version, seaborn.
Sounds like the package may not work in windows. I think leveldb uses C code that needs compilation and is failing. You might need to try cygwin or just use a Linux virtual box or aws instance. Or try to customly compile the code in windows but that sounds painful...
Oh ok thank you! I will use learn python in the future.
&gt; There is no point in multithreading CPU. why ? 
I am a contractor and using Python reduces our turnaround time from days and weeks down to hours. I took this (https://www.e-education.psu.edu/geog485/node/91) class at Penn State and it got me started. My team did not reduce staffing, but it could have. Instead, we kept everyone on and now we spend our time getting more work done. Edit: formatting
Try this -&gt; https://github.com/ldx/DBdownload
I don't get it.. so Morepath is a modern web framework that JUST got support for server side templating? And it's not even templates that can be used on both server AND client? Welcome to 1990.
Hi There, What's your goal? Are you looking to just learn the Python syntax/Primitives and start building projects? After you learn the syntax, which direction are you looking to go in? Computation science, stats, web development?
Hi! I am a teacher/[author](https://realpython.com/)/mentor and I have mentored those looking to learn Python in the GIS context. Email me if you'd like more info - michael at realpython dot com. Cheers!
I am already an experienced Python Dev. Not trying to learn from beginning. Trying to improve my python skills. Fill any knowledge gaps and write better python. Also, a book that serves as a good reference. 
I want that app
I'm a big fan of [The Hacker's Guide to Python](https://julien.danjou.info/books/the-hacker-guide-to-python). Also, if you're interested in leveling-up your web development skills, check out [Real Python](https://realpython.com). 
Hah! I don't have anything against metaphors and I do have a sense of humour, trust me. I just feel strongly against those kinds of metaphors because they simply carry something wrong in my book. At least, that one went against some of my values. It's just a projection of truly wrong clichés that can't be considered as "harmless humour" to me.
I have the cookbook and I would recommend it for that. I don't have the other book. In my case my choice to buy the cookbook was made by watching Beazley at cons and on youtube: he does some really, really nice talks about deep python magic. So basically his book was an auto-buy for me. (You can google him very easily).
My present "best language in the world" is actually C++ and Python. Basically what I can't do properly in Python I do in C++. The strengths and weaknesses of both languages when put onto a chart of language properties as a single language makes for pretty much a perfect language. Speed of development, check. Running speed, check Multi platform, check Lots of programmers available, check Library availability, check. 
Yes, apparently, my college website's security is a bit lax, I just need to enter a registration number and I am provided with all of the above details with their associated name, so I think I am in the legal area. 
We were long overdue for this months 'me too!!' web framework post.
I wonder if they missed the article where Netflix is moving to mostly Python internally...
Sometimes you can really feel similarities, specially in sentences where he says "kind of like..." or "a kind of...". It just feels like he's talking to me when I read the book! Maybe thats just me =). Definitely a good read, all sorts of good material there. I am not done with effective python yet, but so far the style of the book is different than the cookbook. From my point of view, the each have value and try to teach a different set of skill. The cookbook is one of my favorite Python books out there - I reference it often too.
The Effective series are really good quality books for intermediate level developers. If you want to shore up any gaps in your Python knowledge and just write all around higher quality code it's a great choice. If your a beginner it's probably not the best choice.
As long as you monkey-patch before you do anything else (so you can be sure that everything that should be patched, is actually patched), then there are not likely to be any issues. You just have to be aware of how things will work differently. I once had a problem with a library that monkey-patched socket with a *setTimeout* method, before the stdlib added the *settimeout* method, but that is not something you see very often. The real distinction between greenlet-based libraries and asyncio is implicit vs. explicit concurrency. I have said before, monkey-patching is a red herring.
[Image](http://imgs.xkcd.com/comics/up_goer_five.png) **Title:** Up Goer Five **Title-text:** Another thing that is a bad problem is if you're flying toward space and the parts start to fall off your space car in the wrong order. If that happens, it means you won't go to space today, or maybe ever. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/1133#Explanation) **Stats:** This comic has been referenced 178 times, representing 0.3007% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cq6m4ny)
&gt; I have a heap of data I'd like to maintain directly from my datastore to Dropbox, without the inconvenience of having a /Dropbox folder on my PC You know their client will let you rename/move/replace the /dropbox folder and tell it to only sync certain subsets of its content? At least, it does on Linux. I don't know how the win/mac/whateveryouuse client does it but I'd surprised if the Linux client had features the Windows one didn't.
My biggest problem with asyncio is that it heavily violates this part of the Zen of Python: &gt; There should be one-- and preferably only one --obvious way to do it. - `asyncio.async`, `loop.create_task`, and `asyncio.Task` all create *and schedule* a task to run in the current loop. The latter is especially bad, in my mind- I feel like object constructors shouldn't have such a significant side effect. - `asyncio.wait`, `asyncio.gather`, and `asyncio.as_completed` all provide a way to wait for multiple coroutines to run concurrently. They each do slightly different things (`wait` allows you to wait for a single coroutine, `gather` is designed to wait for all of them, and `as_completed` generates individual futures), but they all have their problems. `wait` requires at least 1 coroutine for basically no reason at all, while `gather` takes `*args` instead of `list_of_coroutines` and returns a big fat list of all the results. `as_completed` requires you to loop over the return value and `yield from` each individual Future. - There doesn't seem to be any overriding logic dictating which functions/coroutines are methods of `loop` and which are just part of `asyncio`. For instance, we have `asyncio.sleep` but `loop.time`; `loop.create_server` but `asyncio.start_server`; etc. Every method seems to require a loop (all the `async.*` methods take a `loop=` kwarg), and yet `asyncio.get_event_loop()` always does "the right thing" in the given context. It seems to me that at the very least they should have mirrored interfaces, where any time you can do `loop.coro()` you can also do `asyncio.coro(loop=loop)`. It has other weird documentation problems, too: - Literally nowhere in the [documentation](https://docs.python.org/3/library/asyncio-task.html#asyncio.Future) for `Future` does it say that you can `yield from` a future. I wasted a lot of time before I realized this. Don't get me wrong, I love asyncio. Love love love it. `websockets` and `aiohttp` are fine modules, and have basically completely supplanted my use of older, blocking network libraries. It just seems like a bit of a mess, design-wise. Like was evolved, rather than designed, and was never cleaned up for consistency.
Thanks! didnt know about /r/gisscripts , subscribed!
I bet this was just a case bad programming and could be achieved with any other programming language.
No it was a case of doing GIS with no programming. There are some things that you just can't do without programming. Yes there were improvements he could have made to his workflow but he could never have gotten it under a full day without some programming.
[Image](http://imgs.xkcd.com/comics/like_im_five.png) **Title:** Like I'm Five **Title-text:** 'Am I taking care of you? I have a thesis to write!' 'My parents are at their house; you visited last--' 'No, no, explain like you're five.' [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/1364#Explanation) **Stats:** This comic has been referenced 75 times, representing 0.1267% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cq6nz3z)
Seriously are we really going to argue this? yes there are different functionalities in different IDEs. ctrl is substituted for cmd in macs. and yes I am wrong. it could be command+]? but how can you learn programming without figuring this out; knowing basic computer skills? its unfeasible.
You're not wrong, but this had some decent content so I'm not going to complain.
What do you use to send text remotely to your phone using python? :)
Server side templates aren't a necessity to build web applications anymore. That is why we could wait to introduce them instead of making them the center. Making the same templates work on client and server and allowing a switch is more easy to do with JS and rather more policy than I'd like in core Morepath. But could be built on top if you want to try. But you really invite a more snarky answer: It is true, you don't seem to get it.
Should people stop creating web frameworks with Python or only stop talking about them, what do you think?
The GIL is a mutex that prevents multiple threads from using the interpreter at the same time. So in theory you see no speedup. In practice, the mutex isn't particuarly good and your program runs a lot slower than you would assume. Like, brokenly slow. This guy explains it better than I do. https://www.youtube.com/watch?v=Obt-vMVdM8s (It's a Beasley talk from a Pycon). In that video he disables a CPU core and it speeds up his program, coz ... GIL.
Visual mode isn't needed: gg&gt;G
There's an SMTP -&gt; SMS gateway for my cell provider
I created all the events I'm going by hand in Calendar. I could've saved at least 30 minutes OF MY LIFE.
Sitting in the Django In Depth tutorial right now. Excited about attending my first PyCon!
Could you elaborate?
For webapp business logic, most often speed is not your primary concern. And for many, many, many use cases, code that you *need* to run fast will be something already written in a compiled language that you can call into with python. If you believe this article, [Netflix is switching from Java to Python](http://www.infoworld.com/article/2613828/python/why-netflix-is-embracing-python-over-java.html) for parts of their infrastructure. Parts of Youtube are also written in Python. Slow is only relative. You'll still render pages in milliseconds even with data fetching with it. What's more important is that Python is easy to read, write, understand, work with, and use. So that means you actually get your app *working* fast and clear. Try asking this question: C is practically the fastest language around. Why does *no-one* write web-apps with C, if it's so fast?
true... the excel thing is a huge barrier. .. I'm just responding to OP. I've literally done GIS consulting work using python and I definitely charged 155 an hour for my time, and the clients were definitely happy =) if anyone in management is technical they will understand what makes python so great. it's easy to write and read python and it has such a huge set of libraries you can always find what you need. 
Should definitely switch to qcWeb, which by pre-computing all possible responses, will return program output before your key-up event fires.
We're using MapInfo in our flagship application, but also to build smaller applications that integrate various systems with our application. While Python won't replace our C++ application using MapInfo as its map engine anytime soon, I've found that it is very useful as a replacement for compiled MapBasic applications! Here's the situation with MapBasic: * Feature rich scripting supporting PostGIS, Oracle Spatial, a full graphical map engine with layers, spatial SQL language, Excel exports, FME via Universal Translator, etc. * For our customers, MapInfo Runtime is used instead. Cheaper but still allows scripting. BUT... That's where the fun ends! * Runs like an old BASIC dialect with SQL and GIS extensions, that hasn't seen updates in 10 years. * To distribute your scripts to end users, you need to compile the scripts first. * Compiled scripts _always_ require at least the same version of what compiled them on the target machine. This means trouble since we must either update customers even to run scripts which doesn't really use any new features (even worse when scripts are shipped across customers running various versions), or run an old version to compile with for "backwards compatibility". So silly. Python? * Supports COM via pywin32, which is something MapInfo also supports for scripting (same language sent to as strings to its COM interface). * So we suddenly no longer need to compile our scripts. * If there's an update or change on the end user system, this implies we can immediately react and fix it on-site. * Much more powerful underlying system, also thanks to the massive set of Python libraries. * We can for example, from within the very same script, tell MapInfo do open a PostGIS database table, run an SQL join with our application, import the information into our layers, and if there's an error, send a mail to us to warn thanks to Python's simple mail support. **tl;dr** I think the most useful part of Python is the combination with GIS tools for system integrations. A GIS tool is specialized at what it does, while Python can handle "everything else". That can be seriously powerful. Relying on a GIS tool alone often risks resorting to limited ways of interacting with the outer world. They (understandably) after all are just interested in working with and _within_ the realms of the GIS data itself. Conversely, Python works very well as a "glue".
"A programming language is low level when its programs require attention to the irrelevant." -- Alan Perlis (Developer of ALGOL) Webapps are large structures. They are relatively complex. There are layers and layers of abstraction when building a webapp. You have the abstraction provided by templating, when building a webapp, I don't need to individually create every page, I can use a template language to build modular components of a page (like on reddit, a "sidebar", a "post", a "title", a "comment box" etc.) and write them once and then glue them together. Further, I don't care how things are stored, right like, is my post hierarchy a tree, a recursive hashmap structure, a single hashmap, I don't really care as long as my library can represent recursively nested comments in some manner. Then there are layers below that, things like routing and the server layer, I don't care how a request to `mysite.com/page/100` maps to the function `site.handlers.pageHandler.unauthorized(100)`, as long as it does and that function returns the correct data. Then there's a whole layer of like routing and networking magic, how my HTML gets headers added to it, is sent over the wire, and handshakes and networking and all that jazz. When you're dealing with a web framework, you're already abstracting away a huge number of things, the entire underlying network structure, likely the entire way your webserver handles requests, and hwo the pages are actually built and sent to the user. You've got layers of abstraction piled upon layers. In C and C++, you can still do all of that abstraction (which to be clear, slows things down, one of the tradeoffs of abstraction is often the loss of speed), but at the same time you're manually allocating and deallocating memory, you're dealing directly with things that are now absolutely irrelevant because any gains you can make or lose through the bonuses of C or C++ you'll lose from the abstraction layers that make it possible to build a large scale web application.
Yeah, they do a great job at Penn State. 
Being fairly new myself, I guess just writing the neccessary data to files in order to save and reading from said files to load the data would work. For python 2.7 https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files If you happen to use a different version of python there might be slight differences, just scroll up and change the version in the drop-down menu. EDIT: More on that topic https://docs.python.org/2/library/persistence.html
One option would be to read and write these values to a file so that you can reference them any time you run the program. The [docs](https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files) provide a good explanation for how to do this
Wow, I have my own collection for some of this stuff such as the debugging, but it's great to see it as a project. Thanks for sharing, I'll definitely be following this. Are you looking for contributors as well?
The GIL is not a common gotcha.
I'm going to get a copy of your book at the Pyladies auction. If it isn't signed can you sign it for me? :-) I'm also going to buy a copy of Two Scoops of Django at the auction and make the authors sign it. Everyone has been recommending it to me.
Got in mid day Wednesday. Been great! Looking forward to the rest!
My Delphi using colleagues would give two answers: 1) "Because it's interpreted which means it's slow!" 2) Are you lazy? Can't you just write all of those libraries yourself? Aren't you a programmer? :-) (Seriously, this is the kind of stuff I got when I tried to show them how awesome Python is)
Numberphile enigma video https://youtu.be/G2_Q9FoD-oQ
Thanks! I guess it is just that careful consideration and quick comments do not always go well together.
Why not teach yourself in your own time? If your management don't get it perhaps your new found skills will be more appreciated in a new higher payer job? I would recommend to try the following steps below which I have copied and pasted from a previous post answering a similar question to yourself. Also try r/gis Try the Penn State University GIS Programming and Automation open learning course: https://www.e-education.psu.edu/geog485/node/17 The onto this text book. http://esripress.esri.com/display/index.cfm?fuseaction=display&amp;websiteID=224&amp;moduleID=0 This book might be a bit more relevant to what you are looking for. http://esripress.esri.com/display/index.cfm?fuseaction=display&amp;websiteID=256&amp;moduleID=0 
Maybe it is because i am using the default browser, but either way, this page does not display properly on my phone.
Python 3 compatibility is mostly there, but could be better. I'm planning on setting up CI tonight, then I'll probably start running through and tweaking things. Could be done this week, if there was sufficient demand.
No surprise it is hosted by the same guy who overcharges the community for DjangoCon. 
Take the chance and add a coverage report. I'd like to see the numbers, since the tests directory looks a little underpopulated. ;)
I use it to automate monotonous tasks like publishing services that our web apps consume, manage schema changes, etc. I recently wrote a script that iterates through our ArcGIS servers' directories, finds mxds, creates service definition drafts, edits the xml in the drafts to set feature access capabilities, stages service definitions, then publishes services to multiple servers. This freed up a lot of time and can cut down on the number of ArcGIS desktop licences required since you don't need to use them to publish services by hand on each server if the one you run the script on has connections set up to the others. 
the perfect way http://www.nostarch.com/pythonforkids you can preview the book if you want http://it-ebooks.info/book/2226/
Thank you [for this](https://github.com/mahmoud/boltons/blob/master/boltons/easterutils.py).
Just to second the request for Python 3 compatibility. I think that's pretty common nowadays. I use it almost exclusively for all of my new projects now.
[The documentation's sample snippets](https://www.dropbox.com/developers/core/start/python) look like they have all you need to get started. Fetch an access token, then do something like: client = dropbox.client.DropboxClient(access_token) with open(filename, 'rb') as f: client.put_file('/myfile.txt', f) not much more to it.
all you need is the instaclient, install is trivial
this is genius. you might soon be getting some pull requests from me.
Hello! I'm (obviously?) the author of this tutorial and I'd love to hear your feedback on what's good, what's bad, and what (if anything) you'd like to see as the project progresses... Cheers!
"*Two* types of PriorityQueue" Has science gone too far?!
well that didnt post nicely at all...
Pip install boltons? Import everything from future
Ricky? 
print 'help'
&gt; 3. When a variable is assigned inside a function python assumes it's defined inside Why is the solution not provided? For the record, you can fix this with global: i = [1, 2 ,3] def modify_i(): global i i = i + [4, 5]
So why make it open sourced in the first place! that i don't get! Thanks for the good insight btw
That is a reasonable starting point. Models for the markets can be as simple as you want or as complex as you want....its really all about how you approach the market.
I just remember the "I'd fork that" guy who got fired because of that psycho lady who was trolling for a representative of the phallic economy. Avoid these shows like the plague. Their focus is entirely political now.
Here's a good video from Pycon2014 on that topic: Alex Gaynor: Fast Python, Slow Python - PyCon 2014: http://youtu.be/7eeEf_rAJds
 br main placed: .equate 0; local variable #2d main: subsp 2,i ; allocate local #placed stro start,d ; cout what was your score? deci placed,s ; cin placed aslx ldx placed,s cpx 5,i ; if greater than 5 brgt default ; wrong entry cpx 0,i ; if less than 0 brlt default; wrong entry br placejt,x placejt: .addrss case1 ;1 .addrss case2;2 .addrss case3;3 .addrss case3;4 .addrss case4;5 case1: stro first,d ; first place br endcase; case2: stro second,d; 2nd place br endcase; case3: stro notwin,d; 3,4 or 5th place br endcase; case4: stro nope,d; did not place br endcase; default: stro def,d ; number larger than 5 endcase: charo '\n',i; end line addsp 2,i; dealocate #placed stop start: .ascii " What did you place? 1, 2, 3, 4, or 5:\x00" ; first: .ascii " You're First! Congrats! \x00" ; second: .ascii " Second place? well done! \x00" ; notwin: .ascii " You did not place first, or second. \x00" ; nope: .ascii " It looks as though you didn't even compete! \x00" ; def: .ascii " please use numbers 1-5 \x00" .end
1) /r/learnpython 2) post your error 3) that isn't how you define a function: http://www.tutorialspoint.com/python/python_functions.htm and cross is not built in: http://stackoverflow.com/questions/1984799/cross-product-of-2-different-vectors-in-python
That wasn't the cons fault, last time I checked, that was a combination of a crazy person, and a bad employer. She was also let go after the incident, so clearly there was something else going on, perhaps she was also acting badly at the workplace. 
serpy will just serialize to a dict, but there are multiple ways to then convert the dict to XML: http://stackoverflow.com/questions/1019895/serialize-python-dictionary-to-xml
hmmm. I can't get this to work. I can install through pip but I get this when I try to run rtv &gt;Traceback (most recent call last): &gt;File "/usr/local/bin/rtv", line 5, in &lt;module&gt; from pkg_resources import load_entry_point &gt;File "/usr/lib/python2.7/dist-packages/pkg_resources.py", line 2711, in &lt;module&gt; parse_requirements(__requires__), Environment() &gt;File "/usr/lib/python2.7/dist-packages/pkg_resources.py", line 588, in resolve raise VersionConflict(dist,req) # XXX put more info here pkg_resources.VersionConflict: (requests 0.8.2 (/usr/lib/python2.7/dist-packages), Requirement.parse('requests&gt;=2.3.0')) 
It simply means that they have no way to measure productivity or ease of maintenance or readability or ..., but they feel compelled to add some number and execution time is easy to state ([deceptively](http://benchmarksgame.alioth.debian.org/dont-jump-to-conclusions.html) easy). Benchmarks written in different languages may have wildly different susceptibility to attacks, for example a simple C string is assigned a maximum size but rarely checked leading to buffer overflow errors - python strings automatically adjus their size; Some languages rely on complex IDE's and code generation and find it difficult to write small maintainable code for a given problem Some languages are hard to program in, taking more effort to learn and become productive in than Python It's more than speed quoted in a benchmark.
&gt;Pip install boltons? Don't do that, or you'll get a [mustache like this](http://assets.nydailynews.com/polopoly_fs/1.1621958!/img/httpImage/image.jpg_gen/derivatives/article_970/par2005042148981.jpg).
Am I not allowed to post questions in this subreddit?
No, read the sidebar edit: and please delete this thread to prevent other new users from seeing it and thinking this is a place to post questions.
Sooner or later business realizes that his is a divider of data and skills. Data is data, some may be useful for spatial calculations but usually these are just an aspect of the business. Learning python gives you the ability to provide a wide range of data analytics, and incorporates gis rather than treat it as a stand alone practice.
So, depending on how in depth you are going to go with your tracking, your best 2 choices are write to a file or use an sql database. 1) write to a file - If you are just going to have basic info you can throw everything into a custom formatted file or something like xml or yaml (I would only use yaml if you will need to edit the file by hand, it more human friendly, but slower) 2) use sql database - I whole heartedly recommend SQLITE3 for python. It's super lightweight, really easy to learn basic commands, highly scalable, and AMAZINGLY FAST! If you are like me (and most programmers) as soon as you get 'done' with your program, you are going to go back and tweak it and add more features/have it report even more. It's way easier to do that with databases. You can always add more columns or tables and it's so easy to cross reference data.
&gt;my college website's security is a bit lax... I think I am in the legal area. That does not compute. If you don't have permission them having crap security does not mean you can just do it, it will almost certainly be considered hacking if someone takes issue with it. Their response might well be "meh" when you publish your visualisation, it really might, but it could also be quite severe. By severe I mean up to and including expulsion and police charges for hacking. Never underestimate the power of people who don't understand technology to whip themselves up into a witch hunting hysteria over "hacking". For example, one the original coders of Reddit [Aaron Swartz](http://en.wikipedia.org/wiki/Aaron_Swartz) used the MIT network to "just" download a lot of academic journal articles and got the book thrown at him by a careerist prosecutor hoping to get him to plea bargain. Because the prosecutor was being nasty even with extremely powerful law professor friends he was almost certainly going to face time in prison and he decided that, probably given the kind of things that happen in prison, he'd rather die and killed himself. I'd suggest you find some other data to visualise, there's plenty out there.
If this is the program holding back full Python 3 compatibility...
Check out https://twitter.com/plotlygraphs or https://twitter.com/cartodb .
I have problems understands how cardinalize works and when to use it. (disclaimer: i work java and play python)
I like everything, except the name. I despise the Boltons!
import urllib2 from bs4 import BeautifulSoup import re import time url = urllib2.urlopen("https://www.quora.com/XYZ/answers") html_page = url.read() soup = BeautifulSoup(html_page) #page = soup.findAll('div',{'class':'section'}) #print page total_links = [] for links in soup.findAll('a',{'class':'question_link'},href=True): print links["href"] time.sleep(1)
Not really. Not really to all your points.
You convinced me. Truly.
Thanks for the explanation.
 import urllib2 from bs4 import BeautifulSoup import re import time url = urllib2.urlopen("https://www.quora.com/XYZ/answers")html_page = url.read() soup = BeautifulSoup(html_page) page = soup.findAll('div',{'class':'section'}) print page total_links = [] for links in soup.findAll('a',{'class':'question_link'},href=True): print links["href"] time.sleep(1) 
Are the moderators awake???
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp; best of luck!
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp; best of luck!
I guess it's so you don't have to write stuff like "1 error(s) occured", so it would would return "1 error" and "2 errors" for cardinalize("error",1) and cardinalize("error",2), respectively. It's used for this case in unit_len. Very cool. But it might not work with other languages than english where pluralization isn't as straight forward. OP, if you read this, perhaps you should include an example where count is actually 1.
It's a tradeoff between the cost of developpement and the cost of execution. In the web, cost of execution is lower than the human cost : it's cheaper to buy a new server than hire a guy. Your bottleneck is usually the network and database, not you web app code. However, if you want to send a satellite in space with a computer, the power source and weigth you can count on is an issue, and execution time is important. Things where execution time is not that important : - scripting; - sys admin; - web pages generation; - glue code; - data cleaning and extraction; - machine learning logic; - UI logic code. Pretty much everything that uses a compiles lib under the hood anyway, or can be cached, or have a network bottlenet. Things where it's important: - machine learning engine; - image/sound manipulation; - graphic rendering (UI rendering, video rendering, game engines); - data processing and analysis; - web page serving; - embedded devices. Pretty much everything with a lot of data to calculate in a short time. Most of the time, these are complementary. For machine learning, you will use a low level compiled lib for the learning process (lot of things to do fast), but the logic you put this data in is written in a high level language (lot of smart things to do by a human). For the web, a server and a database are going to be written in a low level languages, because they need to be fast. Your page rendering will most of the time be faster than the network, and you will cache slow results anyway. You servers and database won't change, but your web site code will change often, and need to be easy to modify. These are general rules, proper measurements apply for every case. Remember that "slow" means microsecs VS nanosecs. It's still so fast you can't wrap your head around it. So the question you must ask yourself is : can I get the features and the ergonomy of my program with Python ? If yes, don't bother using a harder language. Very often, the answer is yes. But more often than not, you WILL use several of them, even without knowing. If you use Apache, Nginx, MySQL, PostGres or Mongo, you are using a C program to handle the data for your Python program. It's a synergy, not a competition. Use the right tool for the right job. Plus you can always start with Python, and convert to C the slow parts later. So starting with Python is generally a good idea. 
Did one of the videos just disapear? The one about eureka moments?
I'm sitting at your breakfast table!
There is some neat stuff in there, but it doesn't seem to me like the scope of this project is well-defined. E.g. [brownie](https://github.com/dasich/brownie), a similar project, got discontinued because of that.
I don't understand. Is sending requests and then scraping data illegal without permission? As long as I don't take the site down and misuse the data, will it be still considered "hacking"?
After submitting this it's occurred to me that IPython is probably built on some other 'spawn a webserver' package, and that what I'm looking for is probably there... so I'm poking around in that direction now... EDIT: Downvote? really? anyway... So this is what i've found so far... this seems to be the earliest point at which Tornado starts trying to handle an incoming connection: def add_accept_handler(sock, callback, io_loop=None): [... truncated ...] def accept_handler(fd, events): for i in xrange(_DEFAULT_BACKLOG): try: connection, address = sock.accept() [... truncated ...] From there, I found python's socket.py, and that points to _socket.pyd (or '.so' on linux), where it's all compiled code. That reference also take the form: connection, address = sock.accept() So it doesn't look like preventing the handshake is an option. I'll just have to hope filtering the address higher up (`tornado.tcpserver.TCPServer._handle_connection` is what defines `callback` seen above) is good enough. And apparently, no, this isn't something that anyone does :P Whatever, this is a 'check the block to appease policy' thing, rather than part of some comprehensive security plan.
&gt; but at the same time you're manually allocating and deallocating memory, I'd just like to throw out there that, in modern C++, you aren't actually doing this. The standard library has all the memory management primitives you need, up to and including reference-counted storage. The one thing it doesn't have is true garbage collection, with cyclic reference detection, but I've always believed that if you have cyclic references something is wrong with your design. Object lifetime is important.
Was he ejected from the con? My memory doesn't work very well anymore.
https://www.youtube.com/watch?v=ADgS_vMGgzY
You appear to be saying that webapps aren't done in C because the necessary abstraction slows it down, but that's true of all languages. It's also not true that C++ is always slower than C or that abstraction always slows you. Similarly, memory allocation isn't done in modern C++. Raw pointers are not idiomatic and we've got a whole bunch of new techniques and language constructs designed to eliminate them and increase memory safety. I personally think webabbs aren't done in C or C++ because the people writing webapps are already using something else, and it's really not that hard to learn PHP, Python or Java, and that the ecosystem is more developed. When you go to learn webapp devleopment you have to learn a lot of extra stuff like security, and all the resources and tools are already present, in other languages. (EDIT: Plus the ICU unicode libaries are a major pain in the arse).
Would like to write some python to parse the stream live for stats etc.
The only common "webby back end" language that's significantly faster than Python is Java (and perhaps C#, but if you do that you're going to be happier on Windows servers). You're welcome to use it if you wish. There's nothing wrong with it, and there's a big ecosystem to support it. Python's clearly "fast enough" for a lot of major websites and it's easy to learn and write. When you're new you probably don't know what your site needs yet, and Python's very good at rapid development. I hear a lot of HFT (high frequency trading - bots that trade shares) people saying they like Python as they can invent and implement a new trading strategy quicker than they can with Java. Plus, it's easy for them to recruit the analysists they need as a lot Python is used in the scientific community. The agility Python gives you is quite valuable when you're a new site and you dont really know what the site will look like in 3 months time. And, as others have said, most of your webapp time is also waiting on your database so processing the user's request is going to be similar in any language.
&gt;You appear to be saying that webapps aren't done in C because the necessary abstraction slows it down, but that's true of all languages. It's also not true that C++ is always slower than C or that abstraction always slows you. No, I'm saying that when coding a webapp in C, you're working from both ends simultaneously, one side that is heavily abstracted and allows you to ignore a huge number of things that you don't really care about, and another side that requires you to pay attention to some things (namely memory management, but there are others, like safety checks and such that you need to do in C/C++ that other languages will just handle), that you *really just don't give a shit about*^TM given the other layers of abstraction that you are already working with. Like, if I've already abstracted away the way that I access individual files on my filesystem (read: routing tables and such), there is no reason that I should care about the way in which I'm allocating memory for some object, because even if I do it completely wrong, larger performance gains can be found elsewhere. &gt;I personally think webabbs aren't done in C or C++ because the people writing webapps are already using something else, and it's really not that hard to learn PHP, Python or Java, and that the ecosystem is more developed. When you go to learn webapp devleopment you have to learn a lot of extra stuff like security, and all the resources and tools are already present, in other languages. I could similarly make this argument for something like embedded systems programming, or HPC, or something of that nature with the languages reversed, at which point you'd likely respond that there are aspects of C that make it better for those things (namely compilation and performance), but why doesn't that argument apply to this situation as well, that there are aspects of the languages themselves, not just their ecosystems, that make them better for web?
I would say personally it is better to do this at a lower level than Python itself whatever the web server it is, thereby avoiding any security issues that may arise at the higher levels. iptables can do what you want, theres some good information at this address http://unix.stackexchange.com/questions/145929/how-to-ensure-ssh-port-is-only-open-to-a-specific-ip-address which is related to SSH but just change the port from 22 to whatever your server is running on (usually 80) 
You should use the following flag/confg: ``` --ip=&lt;Unicode&gt; (NotebookApp.ip) Default: 'localhost' The IP address the notebook server will listen on. ``` see `ipython notebook --help-all` for the list of options.
Ordered your book. Looking forward to reading it: http://www.amazon.com/Effective-Python-Specific-Software-Development/dp/0134034287/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1428579177&amp;sr=1-1&amp;keywords=effective+python Thanks everyone for your input. 
This stuff is really cool. More code samples might help understand how some of these things are used. For example, I've been trying to figure out how to use the TracebackInfo and ContextualTracebackInfo classes. They both take "frames" but I don't see how I can get the required frames list.
python3 is love
[That answer really is beautiful](http://stackoverflow.com/a/29489919/1581394).
Awesome project, but I keep seeing [this face](https://pbs.twimg.com/profile_images/1925071290/MBfbprofilesmall.gif) in my head. You should make him your mascot.
Do you have SSH installed on the machine? If so, the simplest solution is to tell the IPython notebook to listen only on localhost, then tunnel traffic from your workstation to the server over SSH. That way the IPython server isn't listening on the external network at all, so you don't need them to open ports for you. You should also enable password authentication and HTTPS as other people with SSH access to the server could hypothetically connect as well if you don't. Barring that, iptables firewall rules are a much better solution than doing something in IPython. Even if you could filter by client IP in IPython, the server is still in a sense "exposed" to external traffic (packets from unwanted clients still reach the server). However, with an iptables rule, packets from unauthorized IP addresses shouldn't ever even reach the IPython server.
firewall :)
That would be very convenient but while from_current is a method on ExceptionInfo, it's not a method on TracebackInfo. Your link points to from_current on the ExceptionInfo class. 
I'd say Effective Python is better. Both are very good but cookbook has a lot of information that is already known to an intermediate programmer and is in that regard too much text too read. With effective python I feel it is vice versa and it is too short.
right answer, obviously... but for *reasons* not the answer I need right now :)
Can you ELI5 how this works?
pyenv and virtualenv are fairly well-maintained software. it doesn't look like modules has had a release in 4 years. Is it still a live project?
Oh right! So the trouble with TracebackInfo is that it can be used to represent both an exception Traceback and a non-exception stack trace. So from_current would be ambiguous. As a compromise I made it such that .from_frame() and .from_traceback() can both be called without arguments (leaving frame and tb None, respectively), effectively making from_current_frame() and from_current_traceback(). While this is [in the docs](https://boltons.readthedocs.org/en/latest/tbutils.html#boltons.tbutils.TracebackInfo.from_frame), it is perhaps understated. I can add this explanation to the docs. Also, I just spotted two typos in tbutil's docs, so I'll fix those, too. Good lookin out!
There's another post that said these talks were live captioned... Would that mean there will be hardcoded transcripts for these talks on youtube?
Just found out that Two Scoops of Django isnt in the auction. Authors arent here either. :(
Here's the commit with the clarification: https://github.com/mahmoud/boltons/commit/8ddc15603838cda9d0dd9ba6eb4d0604d52b4f79
Also check out [websockets](https://github.com/aaugustin/websockets), a websocket library for Python 3.4's asyncio.
**For Anyone Trying to install cx_Oracle on RHEL Linux:** http://ubuntugeeknerd.blogspot.com/2013/08/how-to-install-oxoracle-in-rhel-64-bit.html this is the greatest thing in the entire world
all tracks, all the time :)
Already found this on /r/coolgithubprojects I believe and checked it out. It is really useful and pretty much exactly what I needed. I haven't done any stress tests on it yet but either way I'm really glad this exists. I don't know if you are the author or not but if you are, major thanks and good job. If not, keep sharing good stuff like this :D
It looks like your dependencies are out of date. Try this &gt; pip install -U requests &gt; pip install -U praw I'm not sure why pip did not automatically update them for you 
LOL. I thought it was someone asking for homework help. My bad.
I own and have read Python Cookbook 2nd Edition pretty much cover to cover. It is, in one word, excellent. 2nd Edn. being good does not guarantee 3rd being good, of course, but it is likely, given the model for the book's production (multiple recipe authors, assuming model for 3 is same as 2 here), and the authors/editors. I need to check out 3rd Edition myself. David Beazley's Python Essential Reference is also very good (I have 2nd Edition, IIRC). 
Here are some beginner steps that I think will give you a solid understanding: 1. Go through the codecademy.com python 2. Get the realpython.com books (The 60 bucks are well worth it! Actually I think those guys should be charging more for the value you get out of them). 3.Python for data analysis.
Nice to see some development on fast marshalling in Python! If you use Python 3, there's also [lima](https://lima.readthedocs.org) (disclaimer: I'm the author), which also tries to be very fast - inserting it into serpy's benchmarks even gives lima a slight edge over serpy.
Morepath is a joy to use. Thanks for the great work!
pyenv is the Python world version of rvm. It's fantastic and I highly recommend it over manually managing your virtualenvs.
It's not supposed to be hard, it's meant to show that you have a very basic understanding of the language and it's constructs/syntax and the ability to wield them. The interesting thing is that (apparently) lots of 'programmers' who where turning up for job interviews where failing it badly.
It isn't supposed to be hard, but help show some very basic problem solving skills. Here is one of the blog posts that helped make fizzbuzz famous: http://blog.codinghorror.com/why-cant-programmers-program/
Ahh, so it's more of a tool to trim out those who really shouldn't have applied in the first place... That makes sense. If your applying for a job and are suposed to know Python, it makes sense to see that they know the basic syntax of how Python works before moving on. Thanks!
No problem and sorry to hear! I hope things get better.
I actually understood that. Good work explaining it!
I agree with your first point about "working from both ends": you are indeed doing this, but I think that's just really just sitting on top of "missing a framework to do these things". This still leaves the question of why no-one has implemented such a framework: because it's less effort to learn a different language that already offers it, than to make the tools. I don't agree with the second point. Languages don't have performance. Their runtimes do. There's no reason why someone cant make a Python compiler (in fact there are some: they just don't fully work yet) so again it comes down to not the language itself, but its ecosystem. And the question is again, why has no-one made those tools? Again the answer is that it's less effort to learn a different language tha already offers it, than it is to develop those tools. Of course, you can ask why those languages already have those tools, isn't it because they are more suited to it? And this is partly true but I don't see it as the major reason. Those technical differences are surmountable given sufficient time and effort, and once surmounted, it's not going to be a factor.
Thank you for using NetworkX - I had never heard of it.
Then you're no longer working in python, you're working in a language derived from, but syntactically independent from, modern python. (such as cython, which I mentioned)
They're already being posted. Check for Pycon2015 on YouTube. 
Python 3 compatibility has been added as of boltons 0.6! It's already on PyPI, so give it a shot and let me know what you think.
boltons 0.6 (released earlier today) has Python 3 support across all modules. ;)
&gt; boltons 0.6 (released earlier today) has Python 3 support across all modules. ;) Eventually is today, give it a shot!
Well, I'm not sure why one would discontinue something while it still performed it's job? Boltons have been in limited distribution since PyCon 2013, and I see no issue with it being supported for many PyCon's to come.
Penus pull request already accepted, and Python 3 compatibility added (boltons 0.6 released earlier today). Here is some relevant code: import sys C = sys.version_info[0] C==3 # True
Yes, where I work, the recruiters actually have entry-level candidates send in their solution of FizzBuzz within 30-60 minutes after a phone interview. It really is a case of weeding out those that have no skills whatsoever, because even with the ability to find a solution online, we still get responses that are absolutely awful. &gt; So what are tests like this actually used for, and what other kind of test can I expect to have an employer ask me to complete? In response to this, fully expect employers to ask you questions during an interview where you will have to write some basic algorithms on a whiteboard in a short amount of time. They usually aren't too difficult, and rarely (should) an employer expect the most elegant solution. Usually, these test whether or not you know how to use common programming structures.
It is a **mature** project. I have been using it for over fifteen years now we may upgrade versions but in that time I have never had a bug that needed fixing, despite our continuous use, (although other sites do use the tool and may well have submitted there own bugs, our site uses modules extensively and I would know of any local issues). The software works well.
Hey man! I'm about to go to bed but wanted to comment so I'd remember to look this up tomorrow after work. I haven't read into it, but is the tutorial/guide for specific operating systems?
So just a cursory look, this doesn't really deal with these just primary posts? 
Definitely not meant to be hard, and being able to do it doesn't mean anyone is qualified - it's just a starting point to weed out people who are copy and pasters rather than thinkers and problem solvers who actually learn the problem space. The goal is fairly straight forward: 1. Can you read directions. E.g. are your printing the number except in those special cases? 2. Can you think through a problem (regardless of code, can you think and demonstrate the thought? Code is simply a manifestation of that problem being solved) 3. Can you formulate some basic code to demonstrate the thought. I'm always floored when people who are given a simple task ahead of an interview come in without a working solution in interviews I've done. Some cases are understandable, but they are few with the lead time we give.
Including the questions and answers.
You should use logging instead, it's highly configurable. In addition to that you can also use `pdb`, `ipdb`, or any of the other python debuggers out there (`pdb` comes built-in). You could instead do something like import logging log = logging.getLogger('myapp') log.addHandler(logging.StreamHandler()) # stderr by default log.handlers[0].setLevel(logging.INFO) # Only info and higher get reported The logging library also supports very rich configuration from a file or a dictionary, which makes it very easy to use JSON as your configuration. Check out the official docs for some of the best documentation I've seen for the Python ecosystem. Once you have your logger you can write code like log.info('Running alpha/beta computation') alpha, beta = calculateAlphaBeta() log.debug('alpha: {}'.format(alpha)) log.debug('beta: {}'.format(beta)) Now whenever you run the program it'll only print `Running alpha/beta computation`, but if you change it to `log.handlers[0].setLevel(logging.DEBUG)` you'll see the other messages too. Since logging can (and should) be configured with values defined outside your source code you can just change the logging level within a file without touching your source code. It also supports many other handlers, and you can write custom ones too. I use it at work to output detailed logs from different components to different files with different logging levels, in addition to the console, with all sorts of information about where in the program it came from, such as line number, thread ID, calling function, etc. There's built-in handlers like `TimedRotatingFileHandler` which will automatically roll over to a new log file after a specified period of time, and many others that are very useful. You should really use logging over print statements in code, they're much easier to deal with. As for `pdb`, you can programmatically set break points, and it has an interface similar to `gdb` for setting watches, running commands, navigating up and down the current call stack, and more. Do yourself a favor and learn how to use a real debugger, it'll save you a lot of headache and print statements.
Nice write up Stephan. As someone who writes code in a scientific environment, I've been following your Xray project with some interest. Pandas isn't the most useful thing when handling large and multidimensional datasets. I've been using Numpy structured arrays which are excellent but have more rigid constraints. Just thought I'd pop in and let you know that I appreciate all the great work on XRay and the excellent documentation for a relatively young project. Hopefully I'll find the time to get around to learning my way around Pandas and XRay. Cheers
It depends where you interview. A lot of times you just chat about problems you've solved before.
Doesn't 3.x have that improved GIL that doesn't thrash as much? 
If python is like dating a pretty woman, C++ is like BDSM with Cthulu...
Seriously, wtf, that's just some wizard code right there. 
Good explaining. 
I haven't been subject to a fizz buzz interview, but no, I don't think it's supposed to be difficult. At the risk of puffing myself up as a competent programmer, if you're finding yourself actively wondering what the big deal is about fizz buzz...congrats, you're already more competent than the people it's supposed to weed out. Your answer may be clumsy, especially if your answer is supposed to track a language you're not super familiar with. But if you can't pseudocode your way out of the problem...something is really wrong. IIRC, the main opportunity to miss a good opportunity to simplify the problem revolves around failing to recognize the mod15 condition. But, whatever, for the range of the problem that's not exactly a performance hit. 
I find it annoying that logging still doesn't support `{}` style formatting inline. You can do, `log.debug('whatever %s', whatever)` but not `log.debug('whatever {}', whatever` without a lot of boilerplate. pdb is da'shit, my code always ends up littered with `import pdb; pdb.set_trace()`, definitely preferred way to inspect variables. There's also the [`q` module](https://pypi.python.org/pypi/q), which is designed especially for tracing, but using non-builtin modules for this sort of thing seems overkill, but it is designed for the type of debugging op seems to prefer.
If you're just learning now, you really should learn python3, not python2. Python3 has been around for over six years.
Tornado is brilliant and well supported indeed. There is also [ws4py](https://github.com/Lawouach/WebSocket-for-Python). Simpler and sometimes just enough.
I've never been a fan of setting breakpoints on the command-line, just seems awkward. (I haven't used gdb very much for C/C++ stuff though, maybe it gets less awkward when you do it more?) yeah ipdb is nice, but not nice enough that I've seen the need to use it/install it in all of my venvs, VMs etc. Also I use py.test, so the `--pdb` option for falling into a pdb terminal (there's a `pytest-ipdb` extension with a similar `--ipdb` flag) &gt; Which is why I have a plugin for my editor that lets me hit CTRL+B and it inserts a line with import ipdb; ipdb.set_trace() and colors it red, and hitting it again deletes any such line under the cursor. It's cheap breakpoints, but it gets the job done. smart, I should do that, maybe share the vimscript on github, heck there probably already is one, I've just been too lazy to google it. There's also a flake8 extension (`flake8-debugger` I think?) that checks for debug calls that you can integrate into your tests. 
I think you're still confsing the language with its ~~runtime~~ implementation. I can build a C interpreter. It's still C. I don't see why those changes would cease to be Python. They add stuff to languages all the time. It;s also possible you might be able to get away with just adding specific things in comments about promises you're making to the interpreter, in which case your code will still go through a regular interpreter. I'd have to look into it.
isn't this rather about algorithms?
Appreciate the explanation, this made it clear to me.
And the slides are available here: http://pydataparis.joinux.org/slides-videos.html
This might help: https://gist.github.com/wolever/3af3a75cac4358e3b54d It generates a bottom-up class hierarchy as a dot graph, using the given classes' `__bases__` property. (This isn't my code, it's /u/wolever's.)
Why do you require shared? [DigitalOcean](https://www.digitalocean.com/pricing/) does very good value VPSs for less than that price. 
Try [Amazon EC2](http://aws.amazon.com/ec2/). My linux instance has Python3, at least I think it does.
I bought this book from o'reilly and it's very well done. Totally different approach though. I'd say this is definitely a more traditional technical approach, while teaching TDD at the same time, while hellowebapp is more of a layman- designer level approach. I own both and like both. 
Also note that translations of the apps are in other branches. For now, we got a french translation. More apps need to be added : - models - forms - auth - admin - custom template tags/filters - custom commands - pluggable app - cache - migrations After that, I think it will be complete and will need only more translations.
I highly recommend https://www.linode.com/ no reason to get shared hosting. 
Wait... Penus pull? They named whatever this is *penis pull*?!?
How much python / webdev experience should one have before giving this a go 
You can do this with any uml tool that supports python. Also, pycharm professional can as well. 
Most important, its a *framework independent* fork of Flask-SQLAlchemy. 
Before this tutorial neither had I to be honest! Though so far it's proving to be pretty awesome for this kind of work... I'm currently putting together the next tutorial which covers grabbing the tube line data and displaying it - hopefully it'll ramp up nicely into the more intermediate side of NetworkX :)
They all work with django 1.8. The basic API didn't change (thankfully). 
Wayback repo of site is here - http://web.archive.org/web/*/http://www.stackless.com/
I am loving django. Wrote a server and sql database to keep track of monthly spending. Took a couple of days instead of the weeks it took me to write a similar server in spring. 
Because a leading zero means the number is octal. &gt;&gt;&gt; 010 8 
I've reported the error to [the mailing list](http://news.gmane.org/gmane.comp.python.stackless)
&gt;I think you're still confsing the language with its runtime implementation. I can build a C interpreter. It's still C. Not at all, please stop belittling me. Lets talk about things that define a language, in other words the things that make it *different* than any other programming language, they're syntax and semantics. A LISP has very simple syntax (wikipedia says expression ::= atom | list atom ::= number | symbol number ::= [+-]?['0'-'9']+ symbol ::= ['A'-'Z''a'-'z'].* list ::= '(' expression* ')' defines a LISP), I've implemented one, and if we ignore macro-language, then that's a more or less valid definition. Then we have semantics, that is, how the language acts, or in other words what a given syntax translates to in actions on the computer. So for example, in java I can write `int[] myArr = new int[3];` and in C I can say`int myArr[3];`. These are syntactically and semantically similar, but not exactly the same. Most of the syntactic differences are obvious, so here are the semantic ones: in java, the array is heap allocated and can be dynamically sized (not resized, but sized, ie. `new int[size];` is valid). In C, they are stack allocated, meaning space for the array is stored in the binary itself (you can try this, write a C program that allocates an array of 1000 ints, it'll be a few KB even though the source is a line or two), and as a result you cannot dynamically instantiate an array. So first thing I'll say is that any change that is both significantly different in syntax and semantics is a different language (it can also be a different language if its completely different in one or the other, ie. coffeescript is different than javascript, Clojure is different than Java). Typescript is syntactically different than javascript, and also semantically different (given that it can provide you pseudo-compile time errors). So now let's talk about why certain choices in syntax/semantics (language design) will put relative ceilings on program execution speed. Lets use a simple example: if I want to add an array of integers in C, this is what the machine does is rather simple (this in a mix of low and high level pseudocode): arr = {1,2,3,4} int accum = 0 for i in length(arr): accum += MEMORY[arr]+i*sizeof(int) Hell, a smart compiler would modify the above to this: int accum = 10 //or if we're assuming the array is unknown, but its length is: int accum = (int) (MEMORY[arr]+0*sizeof(int)) + (int) (MEMORY[arr]+1*sizeof(int))... //unrolling the loop in python this is a little different, in python everything is done via ducktyping and "interfaces", if you say that you can do "+=" on an object, python assumes that that object implements the += method. your array of integers is actually an array of references to integer objects, these objects are rather large, because python doesn't necessarily know that they are simple integers vs. some complex subclass of integer that you have that also maybe does logging, your += function could create a new file and connect to the internet for all the interpreter knows. arr ={int(1), int(2), int(3), int(4)} //where int(x) here instantiates an integer //object, the array contains references to the integer objects in memory accum = int(0) //once again, accum is a reference to an integer object for i in length(arr): //this might also be more complex, but we'll ignore it currentObj = MEMORY[arr]+i*sizeof(intObjPtr) //currentObj now points to the int we care about clazz = type(accum) //get the object representing the type of accum, in this case method = clazz.__radd__ //this is the function that will be actually called on the two objects //all the system knows about this method is that it modifies its first //argument and returns null, and it doesn't know those for sure, they're just from the interface method(accum, currentObj) def clazz.__radd__(obj1, obj2): obj1val = obj1[intVal] //we're going to assume that in this case because of the interface //intVal is a known offset in memory from the pointer to obj1, in reality //this might not be known obj2val = obj2[intVal] obj1[intval] = BINARY_ADD(obj1val, obj2val) //where BINARY_ADD is a low level function that acts similarly to what "+" does in C all of those pointer jumps can't be easily optimized, can't be optimized out (because of side effects) and you have multiple function calls and other jumps to arbitrary places within this code, as opposed to something that can be entirely stored in cache, traversed linearly, and won't have any issues with branch mispredicts. JITting helps a lot (its why java can run as fast as C for certain non-numerical, relatively complex, but also iterative programs), but even then, the bytecode you produce in the lower level language will be more complex because there's more stuff to do. There are upsides to this (dynamic things, python gets reflection and such naturally and with almost no performance loss, whereas Java gets slower when you use reflection because it can't JIT or GC as effectively, and C/C++ have no way to do anything similar to reflection), but raw performance isn't one.
Does anyone here know how he got away with unpacking into an empty list? He meant to type "_" but it worked anyway.
API is [Clarifai](http://clarifai.com), database is [ConceptNet](http://conceptnet5.media.mit.edu/), and my code is [on GitHub](https://github.com/rossgoodwin/photosynthesis). I wish the text was more grammatical, so I'm working on that at the moment. Here's [my favorite document it has generated](http://word.camera/i/7KZPPaqdP).
That API is so damn cool. I wanna try that at a hackathon.
You are aware that python is also compiled, correct 
&gt; You are aware that python is also compiled, correct I can evaluate simple Python and C programs like "a=2+2;" in my head, without using a computer. `a` is 4. Was that compiled or interpreted? Languages are separate from their implementation.
I'm not sure if you're familiar with it, but there is a JIT for python, called [PyPy](http://pypy.org/). As for performance it varies greatly. From slower than CPython, to [near C speed](http://stackoverflow.com/questions/6964392/speed-comparison-with-project-euler-c-vs-python-vs-erlang-vs-haskell), depending on what you're doing *(and your language skills, I assume)*.
Why not just use cmd.exe? I use PythonXY and use both the python repl and Ipython with cmd.exe zero problems. Also &gt;" I open up Powershell, type in "python", and then type "python ex05.py" Sounds like you are opening the python REPL and then invoking python to execute a script, just type "python &lt;scriptname.py&gt;" when you go into powershell rather than "python python &lt;scriptname.py&gt;" 
I don't think what you're looking for exists in straight Python. Cython, e.g., has a facility like this. A lot of what you give up with the typing comes back to you with improved simplicity. For example, what need do you have for a dependency injection framework? Injecting a dependency is as simple as an optional parameter when everything's a function... Yes, you lose some of that bugfinding ability you get from types - but compared to strongly-typed languages, you save so much time that you can afford to spend more time on proper tests. And honestly, I was surprised when I moved from C++ to Python how rarely I had type issues, and how quick they were to track down... 
You can also SSH in but perhaps not for free accounts.
Type-hinting in python (e.g. mypy, Python 3.5) is still only for IDEs. It has no use in the language. If you want real static typing, use numpy arrays.
Zed Shaw, the author of LPTHW, strictly states that you MUST use Powershell, even though there are better alternatives. I think I'm having trouble explaining my situation, but here's what I am doing. &gt; open Powershell &gt; type in "Python" &gt; enter &gt; Information about Python 2.7.8 appears &gt; I try to do LPTHW exercise (example opening ex11.py file) &gt; type in "python ex11.py" &gt; Syntax error 
Wait, you are trying to type "python ex11.py" inside the Python interpreter? If so, then that is your problem. If you want to run a script interactively do "python -i ex11.py" from the PowerShell command line. Usually you just invoke a script non-interactively by giving the script filename as the argument to the interpreter. Anything you do next to those three "&gt;&gt;&gt;" arrows is Python syntax. Python does not have a "python" statement as such for running scripts.
&gt;I thought this was implementation specific behaviour and I've looked in the C11 draft (N1570) to make sure. The words 'stack' and 'heap' do not appear in that document. Therefore, C doesn't require that you have a stack. Again, you're confusing the implementation (how your compiler does it) with the language (the grammar). ANSI C does describe a difference, C99 made it so that only static and externed arrays couldn't be variable length, and C11 may have removed those restrictions, I'm not sure. The standard is the standard and is implementation independent. &gt;The remainder of what you say appears correct but it's not relevant to the issue. The issue being that languages don't have a speed. Their implementations do. A C intepreter is still a valid C implementation and would break all your arguments that start "C is compiled and is therefore faster..." implementation is irrelevant if you still have to do more things. Adding integers in C will always be faster than in python, because in C your doing one thing (a binary add), whereas in python you're figuring out what those objects actually are, introspecting in to them, and then after all that's done, doing a binary add. No implementation of the language will change the fact that you have to physically, even with perfect optimization do more stuff in python than in C.
Python is strongly typed.
There is nothing to stop you doing a type check decorator that takes a list of types. Eg. @typecheck(return=int,[str,str]) But that will slow the code.
Is there a from future import... that can force py2 to use py3 syntax?
Have you considered Azure ? It has 10 sites for free, you can get SQL for about $5/mo ... 
I have this book and it feels really clumsy. It looks amateur (the font/ layout) and the Python code is really un-Pythonic. I don't know how well the author really knows his subject, but those factors make me suspicious. It would also benefit from an editor who could cut out some of the purple prose.
Of course, gcc will build faster code than cpython. For future use, it's probably going to hold true but I can't say how static analysis or future implementations will work (if you can pin down the times at compilation time, a lot of things get solved; then you could also build alternaive bytecode or assembler instead of python bytecode, for example Jython - which is a Python interpreter that runs on the JVM; or Nuitka which is a Python to C transpiler; none of those will give you C-speed on their own, of course). Plus, languages change over time - what if you added type annotations or something? Most likely, though, people aren't going to spend that much developer time working on increasing the speed of Python, when it's frankly just easier to change language. That was related my original point on why people don't do web in C++. It's easier to change language than it is to develop the C++ ecosystem in that direction. Similarly it;s easier to just switch to Java/Rust etc than it is to go all out building a faster Python. Rust would be my preference.
The `0o` prefix works under 2.6 and later; it was backported as part of the plan to have a coordinated 2.6/3.0 release. What changed in 3.x was that all integers with a leading zero are now rejected, even if they could be interpreted as a valid octal literal. There's no `__future__` import to get that behavior under 2.x.
open PowerShell, use **cd** command to go into the folder where you think the file ex05.py is located. type **ls** command to see if ex05.py is in there. if it is try command **python ex05.py** however, if you are not *fluid* in using powershell i suggest returning to [apendix](http://learnpythonthehardway.org/book/appendixa.html).
&gt;strictly states that you MUST use Powershell You do not have to use PowerShell ever(: Need a better shell use [cmder](http://gooseberrycreative.com/cmder/) 
unityped ftfy
&gt; use numpy arrays Care to show an example of how numpy brings "true static typing" to Python?
That is very cool. It sort of looks like the ramblings of a scizophrenic, but that's awesome. Haha
Very classy response. :-)
That was delightfully Dada-ist.
Well, a better example would be: @typecheck(return_type=int, arg_types=(str, str)) or @typecheck((str, str), return_type=int) Return is a keyword so it can't be used as a kwarg or variable name in general, and the other positional argument can't come after a kwarg, even if the decorator was defined with it as a kwarg. But if they both were, you could have @typecheck(int, (str, str)) But you couldn't specify the kwarg key in the first param and not in the second.... but you can specify the second and not the first, as in `@typecheck(int, arg_types=(str, str))`, but not `@typecheck(return_type=int, (str, str))`, if the definition is `def typecheck(return_type=None, arg_types=None)`. I always thought the kwarg and positional arg ordering rules are a bit goofy, but then again it's never been a problem. Maybe it's just strange that it allows you to specify kwarg values in the function call without their kwarg key, or silently use them as kwargs. The weirdest behavior I think is this: &gt;&gt;&gt; def f(x, foo=10, bar=20): ... print(x, foo, bar) &gt;&gt;&gt; f('a', 'b') a b 20 &gt;&gt;&gt; f('a', 'b', foo='c') TypeError: f() got multiple values for argument 'foo' So, position obviously matters here with the keyword arguments. It works well in APIs I think, but it's still a bit strange, specifically the rules of when order does and doesn't matter. 
 def foo( bar ): I want `bar` to be of type `Duck` and my code should refuse to run if I try to pass anything else.
You are right of course amd expressed yourself much better than me. I have to be honest, i kept my post brief as i was on my phone.
If you need more values for math.atan(), just take the principle value and add or subtract integer multiples of math.pi(). If you need more precision then have a look at the Decimal module.
Another mention of Webfaction: no problems, shared hosting that feels like you can do whatever you want. It's inexpensive and perfect for my personal sites, web apps, projects.
I don't really buy that - see [this](https://www.reddit.com/r/Python/comments/329n3g/static_typing_in_python/cq9fo13).
Wow. I wanted to try out spark and just found out it still doesn't work on python 3 almost midways through 2015. Hope they get it working soon! I'm disappointed I have to download and learn python 2 just to use spark.
Variables themselves don't have types, yes, but that's not required for a strongly typed language. It's often easiest to describe weakly-typed languages and languages that *aren't* weakly typed than it is to define strong vs weak. There's a fascinating [discussion on Stack Overflow](http://stackoverflow.com/questions/11328920/is-python-strongly-typed) on the very issue. Also see [another one](http://stackoverflow.com/questions/964910/is-javascript-an-untyped-language) about whether or not a language can be "untyped". And if you're looking for a language with weak typing, look no further than Javascript, where even the behaviour of operations with different primitive types doesn't require explicit casting. E.g. `x = "1" + 2` gives a type error in Python but doesn't in Javascript.
What you are calling kwargs I now think of as 'optional positionals'. The real keyword args would be: def myfunc(**kwargs): print(kwargs.get('mykwarg', 'No args!')) ..where the position doesn't matter. Though it's not nearly as clear as your example, and requires more documentation when reading the code. Without documentation (or reading the source) you wouldn't know what this function is expecting at all. Anyway, the term 'optional positional' was what I was getting at. I would still use your example over any of the others.
This is quite amusing! PS: You may want to disable the indexing on your ``/static`` directory: http://word.camera/static/img
I use Dreamhost for my python deployment. It's pretty cheap ($7/month). By default it has python 2.7 installed, but it's not too hard to install your own version in a virtualenv.
I agree. I just meant the `**kwargs` positions, I had forgot about swapping (`x=0, y=0`) because I don't do that very much. I guess the term 'optional positional' only holds without the keys (or with keys in the correct order). Anyway, I like the flexibility and I use `**kwargs` but I always make sure to document what they are (even just "Keyword Arguments: ..see: that_api_function()").
I was mostly curious if I'd have to do that manually like you're saying via addition of integer values of pi or if there were some function that would return a value from atan that was correct, rather than one that would need to be corrected. /u/fullyarticulated was thankfully able to point me in the direction of one math.atan2(y,x) that apparently does just that, so it returns better results than math.atan(y/x).
You won't miss it.
I meant math on paper. If you have an inverse trig and any of of trig function (so your output is not an angle), you can express it as a fairly simple algebraic expression.
"Zed Shaw, the author of LPTHW, strictly states that you MUST use Powershell" What part of python can't be executed without Powershell? Or rather: What does LPTHW do that makes it dependent on Powershell?
I don't know off the top of my head, but I'm fairly certain you can't expression addition inside algebraic functions without using the algebraic functions. If one could, would make some of the math quite a bit easier, but I'd need some way of expressing something to the effect of x = cos( arctan(Θ) + n ) edit: asked wolfram alpha, and found there are two alternate versions of [cos( arctan(x) + n )](http://puu.sh/haGZb/3e96f5f8b3.png) I'll try out the first one to see if it works, but I'm not going to bother with the second one.
http://word.camera/static/img/0a5c54d3-7d4a-45ca-b8f8-835d5fb8b559.jpeg http://word.camera/static/img/5bd9620c-ee1d-4639-bbec-a2bcf8d32407.jpeg 
Sorry that I didn't immediately check the module's own documentation when looking at online documentation is so much more user-friendly. Besides, atan2 doesn't well convey exactly what it does, and only now after knowing its purpose could I see the reason behind the name.
I didn't mean to imply dir and help are the only or best way. I often use dir when I don't know what possibilities are in a module and help to see what those things with promising names do.
No problem. In help, you can use `/` to search. `n` to see the next hit, `N` to see the previous. Of course, q quits.
Yikes! Thank you so much.
Did that ValueError turn up statically or at run-time?
Especially when some text editor colour schemes highlight `self` like a keyword.
There is no statically in cPython (well arguably you can get warnings with myPy and an IDE, which are often smart enough to also catch errors in numpy arrays). Numpy arrays are really just C arrays, so they are statically typed, in the same way that C is statically typed, its just that you can't detect those errors "statically" in python, because there is no pre-runtime check possible, its like asking why javac allows itself to be run on syntactically invalid code.
According to the ticket it seems to be on its way! https://issues.apache.org/jira/browse/SPARK-4897 Here's the pull request https://github.com/apache/spark/pull/5173
I haven't gotten too far in the book, but the author said that it will come in handy later. I'm quite tired of it myself, but now I can resume my progress to find out. 
Very common. Ever since FORTRAN.
This makes me happy, I don't know why!
They added comments only for the variables, the rest is not by comment. After Python 3, people are really not cool with introducing incompatibilities again :)
Well, the short answer is that namespaces keep us safe. The longer answer is that unlike Brownie and other tool libraries, boltons has virtually every module independent from other modules, letting you pick and choose what your application needs. So every developer can exercise their own preferred level of discretion. Finally, curation is key. If you'll note the Pull Requests, I'm hardly just accepting everything at first blush. ;)
The definition I usually see is that in weak typing the type of a value may change depending on context (i.e. type coercion). Php and javascript are examples of weakly typed language in this definition. 
Ah, finally my love for python and craft beer come together at long last
Oh, also, I've been using a library called [`fuzzywuzzy`](https://github.com/seatgeek/fuzzywuzzy) for fuzzy string comparisons. You might be able to work that in so if someone spells "Chores" it would actually find "Coors" or whatever. I'm^sorry^I^don't^drink^beer
`int` has base 10 as default, so `Bar == 50`. If you use `int("050", 0)` it tries to guess the base, and you get `40` in Python 2 and it raises a `ValueError` in Python 3.
There are plenty of approaches to this already in pypi, and plenty of ways to DIY it. As others have said, you can also get used to the pretty awful Python 3.5 syntax and use the development channel for the feature as soon as it's out (already maybe?). I had this problem with a crappy API I had to use for work which kept sending inconsistent values in highly nested JSON, and had to bang together a type-checking decorator that would help me find problems *early* and refactor code to accomodate. I was going to post it, but looking back at it I was pretty horrified, so [I re-wrote it entirely instead](https://gist.github.com/cathalgarvey/84e816cec87ee96a82ef). The new version also has a nice feature where you can define strict functions as belonging to "sets" of strictness which can be disabled separately; some functions you may want to remain strict always (like gatekeeper functions to stupid APIs) while others you may want to disable strictness for performance reasons once you're pretty sure they're working as intended. This may not help but I'll probably use it myself anyway until I migrate to the 3.5 syntax (ugh).
Alternatively, use Python's annotation syntax, [as I did here](https://gist.github.com/cathalgarvey/84e816cec87ee96a82ef): from strict import strict @strict def foo(bar: str, baz: int)-&gt;str: return bar * baz
To avoid this behaviour, define an anonymous catch-all arg which will soak up positional args that would otherwise overflow into keywords. This creates a keyword-only set of arguments: &gt;&gt;&gt; def f(x, *, foo=10, bar=20): ... print(x, foo, bar) &gt;&gt;&gt; f('a') a 10 20 &gt;&gt;&gt; f('a', foo='b') a b 20 &gt;&gt;&gt; f('a', 'b') TypeError: f() takes 1 positional argument but 2 were given &gt;&gt;&gt; f('a', foo='b')
Check this out https://realpython.com/blog/python/face-recognition-with-python/
Looking at the source, every entry is structured like this: `&lt;P&gt;&lt;B&gt;Abaci&lt;/B&gt; (&lt;I&gt;pl. &lt;/I&gt;) of Abacus&lt;/P&gt;`. [This page](http://doc.scrapy.org/en/0.22/intro/overview.html) shows how you might write xpath expressions to get the text contained in different elements using selectors. [Here](http://doc.scrapy.org/en/0.22/topics/selectors.html) is the rest of the documentation. That should be enough hints. I never used scrapy before. Only `lxml`. To get the contents of the page using lxml, I would use `iterfind()` to get all the `&lt;p&gt;` elements. Then, for each of those elements `e`, you can get the contents by using `e.text`. You can get the entry name with `e.find('B').text`. Looking at scrapy's documentation, the approach should be very similar there. You could write a dictionary comprehension to store the contents of the page in a really elegant way.
Do you just want help in getting the URLs of the images? Or image processing? Or downloading images? I don't understand what the question is... 
&gt;Especially for PHP (as being a script-language), typehinting enables tools like PHP-DI.. You will have to unlearn a lot of PHP "best practices", like (DI), which is not relevant in a language like Python. Have you gained a good understanding of how modules in Python work? Eg, you can swap a symbol in a module on the fly in Python. So you don't have to depend on a container to mock something's dependencies. Look into pythons mock library to see how this is used. You will see that a lot of boilerplate you had to write in Php is totally unnecessary in Python. Modules also allows more sensible separation of code than php's One Class/File/Component rule.. Also, If you want type checking for object attributes, you can use something known as Descriptors in Python.
http://www.brewerydb.com/developers
Sorry about that. I will edit my post. I already have the URLS of the images. My question is: how would I download the images to my hard drive ?, I am just looking for a way to automate this task using python.
Why are you embedding Django? Pip is included in Python now (2.7 or 3.4+) so you would not need to actually install anything to use virtualenvs or install Django globally.
I believe urllib.urlretrieve() will do the job. http://stackoverflow.com/a/3042786/2981552
This is what I was looking for, thanks a lot!!!!
You don't always need to use a class or id to extract data, all you need is a unique way to find the relevant data. To get all of the words in the dictionary you can simply use: words = response.xpath('//p/b/text()').extract() To get all of the definitions you can use: definitions = response.xpath('//p/text()') Unfortunately this gives twice as many items along with unwanted parentheses that need to be dealt with. To remove the unwanted data you can do the following. definitions = [d[2:] for d in response.xpath('//p/text()').extract()[1::2]] The `[1::2]` selects only every second item in the list starting with the second item. The `d[2:]` removes the ') ' that is present before each definition. To get the word type you can do the following: word_types = response.xpath('//p/i/text()') This unfortunately has a shorter length than the words and definitions list which means that they can't be easily zipped together. To extract the same number of types as you have words and definitions you can do the following: word_types = [t[3:-4].replace('&amp;amp;', '&amp;') for t in response.xpath('//p/i').extract()] Once you have these 3 lists and they are all the same length you can join them together using `zip(words, word_types, definitions)` and then you should have all of the data extracted from the page. This approach only words because the page is consistent with it's layout the whole way through. This is not always the case and sometimes you will have to resort to using something like this: dictionary = [] for elem in response.xpath('//p'): word = ''.join(elem.xpath('./b/text()').extract()) word_type = ''.join(elem.xpath('./i/text()').extract()) definition = ''.join(elem.xpath('./text()').extract())[4:] dictionary.append((word, word_type, definition)) The first option is preferable if you can use it as it is much faster than the second one.
&gt; Numpy arrays are really just C arrays, so they are statically typed &gt; its just that you can't detect those errors "statically" in python Hahaha OK :). FYI, static typing is a very well defined property, which involves detecting type errors statically.
&gt;I can't see any problem by adding optional type hinting to the langauge.. How many languages have you designed/implemented lately...I mean no offence, but If you are new to Python, at least use it for a while (like 3 or 4 years), before proposing additions to the language. I say this as another PHP user who switched to Python recently. 
Use the request module though for easier http handling http://stackoverflow.com/questions/13137817/how-to-download-image-using-requests
Ok, thanks 
This. Scraping without researching alternatives or trying to work something out with a vendor first is pretty short sighted and can get you and anyone making similar requests like this banned: search = mechanize.Browser() search.set_handle_robots(False) search.addheaders = [("User-agent", 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8 GTB7.1 (.NET CLR 3.5.30729)')] You could argue it would be stupid to ban such a wide range of user agents. Based on experience however it's never safe to assume a business will make the most logical decision when they want something stopped.
/r/learnpython and its [wiki](http://www.reddit.com/r/learnpython/wiki/index) is a great resource for getting yourself set up
&gt; Morally speaking, if you can read it directly, there should be no reason you can't read it by having the computer go to the webpage for you in my opinion. It's not about morals it's about what the business in question does or does not want, you don't really have a say in the matter. Scraping a website is distinctly different (you're not 'rendering' the page/you make requests faster/etc) from loading the page in a browser so from the business's perspective they're often not treated the same. When a business elects to not have an API it's either because they don't want to pay for building and maintaining it or they believe it will hurt their revenue stream. As you say however stopping someone is often not an easy task. Larger businesses, such as Google, put up captchas or have traffic analysis to catch non-standard use cases. Smaller business, usually, just IP ban or ban individual user agents which of course can impact traffic from legitimate users too so it's a lose-lose situation that can get out of hand quickly.
Banning user agents/IPs/whatever is amateur hour. Proxies are cheap. The goal is to make the developer of the scraper give up by making his life a hell of constant maintenance. Scrapers are brittle by nature. Rename a couple css classes in your source and then sit back and enjoy the developer's screams of anger as his script breaks yet *again*. 
Tools like that are often written in python.
You'll have nothing to worry about. If you find you're running into performance issues, just read up on [compiling Python](https://docs.python.org/2/library/py_compile.html) for a good performance boost.
Tell that to the developers of the `pandas.DataFrame`...
Anaconda by Continuum IO is pretty low barrier to entry for new Python users on Windows.
I have no idea what that will entail really, but I imagine you'll be using some graphics libraries that use native extensions and you won't have speed problems. But as they say, use the right tool for the job. It may be that c# makes it easier for you to accomplish your goal in some way. Do some research into the kind of libraries you'll need and have fun! 
Thank you, pythonanywhere looks pretty interesting so I'll have to check it out. Until someone streamlines the process I think I'll stick to PHP for now.
Thank you, I'll check that out 
What you're saying is mostly correct for current implementations. I've never had a problem with that. 20 years ago we were all told Java could never be as fast as C as it has an additional layer of separation from the metal (the JVM). Now we know there are some situations where the JVM is quicker because they spent millions tweaking the JVM (athough usually its slightly slower). We also know that we can build a CPU based on a hardware JVM (just that no-one's really spent the money to develop a good one) in which case both can have exactly the same separation from the metal. I can't make any predictions about the speed of X vs Y 20 years down the road because I don't know how they'll change, or what will get invented. I don't understand why you are unable to decouple the specification of a language from its implementation. Really major thing slowing dynamic languages is the fact that we can't yet do static type checking. This isn't a theoretically impossible problem (like the halting problem) and if that is solved, everything changes. Would it be the same language? Remember that a modern C compiler in full standards compliant mode won't build old C code. The language has changed such that parts of old code are now errors. Technically modern and old C are different languages, but we still regard old C as being C. I know "C programmers" not "c99 programmers".
Another thing to note: if you absolutely need C/C++ performance, then you don't have to stop using python. The Boost::Python library lets you write Python modules in C++ that you can import into the interpreter.
But what the business wants has (or should have) nothing to do with it. They have created a server which listens for and replies to http requests. Whether that http request was directly caused by some user going to www.example.com or by someone typing scraper.scrape() is none of the website's business. Of course, it's up to the scraper to be a responsible and reasonable user, limiting his requests to something reasonable so as to not disproportionately impact the website.
This video is doing _so_ much more than just installing flask. He's installing apache, writing a simple flask app, installing random updates on the machine (!), setting up a virtual environment, installing flask to that environment, and configuring apache to interact with flask. Most of the video is concerned with getting flask running on a production quality webserver. If you just want to get coding quickly on a development server then you only actually need the "install flask" and "write a simple flask app" steps; `pip install Flask` to install, `python -m FlaskApp` to run.
Terribly written as the text and images are quite confusing, but the equations are nice enough.
True. It still helps though.