Is it me or is there an error in the spelling of the enum. In the definition its WeekDays, but all later references in the code are for Weekdays. Is this an error or how enumerations will work?
Thanks! 
You are correct it's an error. Good catch! I've fixed it now. Thanks.
Yes ;)
yeah, ruby used to be nice a simple and now she tries to do everything for everyone any way they like it.
If anyone has any questions about PyCon I'm around to try to answer them. I serve as the co-chair of the program committee, and also as a director of the PSF.
zeromq (the transport lib their based on) just established ["perfect forward security"](http://hintjens.com/blog:48) Should help.
Pip + Virtualenv works for my deployments but packaging is a ugly mole on the face of python.
Even when all the policies are in place, the eval() depends on the security of the underlying Python implementation. As an example, there are many reported bugs that cause Python to segfault, and some can be triggered from code that doesn't touch builtins, doesn't use any double-underscore attributes, doesn't even use any globals, and only uses standard data types. Here's one I came up with which crashes Python 3.3, based on the bug reported in http://bugs.python.org/issue16856 : "{0!r}".format({[[f() for i in "*"*1000] for f in [lambda x=[()]: x.append((x.pop(),)) or x]][0][0][0]:1}) This doesn't work on 2.x, but I'm certain that others do exist. Granted, a segfault is more a denial of service attack than anything that allows intrusion, but it is a rather unintended consequence. As always, you have to understand if the security risk is acceptable.
Any ideas on schedules... or more so what time things start on the Friday. Im curious if I would have to take the day off as I live in Ottawa or if I can just head there after work.
I'm waiting for 2015. Don't want to deal with another visa process.
If it's anything like past PyCons, Friday is a full day. You want to take the day off work, and try to arrive pretty early to avoid missing stuff.
oh that is awesome, thanks for the link! zeromq's (previous) lack of any encryption or authentication was a huge blocker for me
Source: http://rgruet.free.fr/#QuickRef 
Huh. I've been using enum34 but I didn't know about that functional API. That's cool as hell.
I run a small team of programmers - what kinds of things would they learn at Pycon? Good place to recruit developers? 
This is why I consider DSL to be a big con. They're all subject to Greenspun's tenth rule. Those who fail to heed that limitation end up with huge headaches everytime they run into a corner case. This is the reason why my work place still uses RPM and a home grown distributed configuration scheme to manage thousands of server instances with hundreds of vastly different configurations. Writing one giant all-inclusive blob of python for our use case was easier then making our use-case fit a tool, any tool.
I don't know about you guys, but for me, a *quick reference* is not 35+ pages.
Yes. It changed a few years ago. I think you can also get an enhanced driver's license (depending on your state) which is good for several North American countries. Just get a regular passport book. You only have to pay for it once every 10 years.
It will be in Montreal again in 2015. The convention is held 2 years in a row at each location.
First look? hasn't the PEP been pretty solid for a while? (I suppose it's new to plenty of people though)
About enum values: &gt; These values aren't really meant to mean or represent anything, especially since enumeration members don't support comparison. This sentence lead me to believe that the values are *always arbitrary*, as long as they're unique, but later in the article you are actually using the values in a meaningful way. I think you could be more clear about the existence of values in enumerations, because I am still confused about their purpose.
It's actually pretty useful if you need a quick reminder. I like it.
Maybe. But, in my experience, a quick cheat sheet can be printed and looked at with a quick glance. For everything else, there's Google or the official doc.
&gt; This is not a one off script, it's part of a much larger application, kicking off a command line script is something I would rather avoid (for usability sake). Scrapy is actually supposed to run as a daemon. Maybe you should rethink your architecture. It might be a good idea to keep things separate.
I've done sftp (scp) using paramiko, but not with pyCurl. I know cURL will support sftp ssh/ssl encryption, so pyCurl _should_ if it properly implements all of cURL's features. The encryption support for the authentication handshake and encryption of file transfer packets after the handshake is the security that either module will use. EDIT: dug up my paramiko code... class sftp(): paramiko.util.log_to_file('/var/log/paramiko.log') def put(self, thefile): host = "server.com" #hard-coded password = "password" #hard-coded username = "username" #hard-coded remotepath = '/home/username/' #hard-coded localpath = thefile ssh = paramiko.SSHClient() ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) ssh.connect(host, username = username, password = password) ftp = ssh.open_sftp() ftp.put(localpath, os.path.join(remotepath, os.path.split(localpath)[1])) ftp.close() EDIT2: Googling for examples of pyCurl syntax for secure file transfers is underwhelming at first glance, but it looks like when you create a pycurl object, you can do setopt() on that object to set up it's parameters. This might be how you set up your authentication stuff...?: c = pycurl.Curl() c.setopt(pycurl.URL, "http://www.python.org/") c.setopt(pycurl.HTTPHEADER, ["Accept:"])
Even Apple diehards wouldn't begin queuing up this early....
Forgive me, but what problems do enums solve that can't be solved with, say a list of tuples or a dictionary? I'm certainly not against having enums in python 3, but could somebody please explain what the point is?
I have no clue about PyCurl. I have been using paramiko successfully for a long time and in a secure way.
It is often good to have constants that refer back to a name. Say you have several modes your app can be in. The modes are signified by a numeric constant. This looks good in your code since you are using appropriate variable names for your constants. Outside your code however, a user only sees the numeric values, which are meaningless. With enums, he would be able to say value.name, and see what the constant meant.
This was a good suggestion! I checked with Firefox and Chrome, and both browsers show only a single GET request for the HTML (plus some for images). It's very odd. I'm starting to wonder if there are some cookies involved.
Yeah, I'm not holding my breath over them and kind of think the two syntaxes given in the above example are somewhat ugly (manually specifying enumeration in first syntax, having a space separated string in the second), though the PEP says any sequence of names or 2-tuples, or dictionary would work, like `Animals = Enum('Animals', ['ant', 'bee', 'cat', 'dog'])`. IMO, `Enum`s seem a better fit for a statically typed language like Java/C++/haskell where you deal with a somewhat cumbersome/annoying type system so it can catch many errors for you. With duck typing, you don't really expect that type of error to be caught. Granted, enumerating variables is still a common pattern and this is arguably cleaner than the simplest way you can do it currently: In [1]: from collections import OrderedDict In [2]: weekday_tuple = ('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat') In [3]: weekday_dict = OrderedDict([(v,i) for (i,v) in enumerate(weekday_tuple)]) In [4]: weekday_dict['Mon'] Out[4]: 1 In [5]: weekday_tuple[1] #alternatively: weekday_dict.values()[1] Out[5]: 'Mon' 
Amazing but this should be totally unsurprising. IPython is a fantastic platform for all kinds of automation, teaching and research. It's surprisingly astute of Microsoft to recognize this. Well done to the IPython team and whoever made the case for this at MS. P.S. MS stop messing with tablets and get back to making proper operating systems.
What's the difference between "Command Prompt" and "Powershell?"
Got it, so it's basically a convenience. I have nothing against conveniences =)
This sounds like the kind of thing I would use a namedtuple for...
A lot! http://stackoverflow.com/questions/496234/what-tutorial-do-you-recommend-for-learning-powershell
&gt; Completely inaccurate fanboyism. Were you claiming his post was this, or was this a pre-emptive warning of what we were about to read? Edit: i see the Microsoft fanboys swarmed the thread. How cute.
python fanbois are downvoting you so here is a +1 because you seem like you speak from professional experience.
Good guy Microsoft. Well done.
The very basic tldr is that command prompt is a very limited shell for interacting with win32 binaries. Each binary accepts input in it's own way and is reponsible for that. Powershell is a .net environment. Each cmdlet accepts parameters in the same way with standard types. Output is always in the form of .net objects that can be piped into other cmdlets for manipulation. Lots more features, but that's a tldr. Windows command interface sucks, I agree. powershell is another beast.
I don't think I see why the shell is important to get that. It seems like it could be done just as well in any old shell with the old pipes and for instance pipe json objects through the chain (rather than just line-formatted text)? (I thought once of making some tools to do just that, to grep for objects containing some fields etc, mimicing typical unix commands but on json objects rather than lines of text. Did not get past idea stage. Would not be surprised if there is already something like that?)
No it's quite different. You're piping .net objects, with all their properties and attributes. Think of an object oriented programming language, where you instantiate an object from a class and then do things with it. In powershell, your cmdlets instantiate objects which you can then do things with using just the pipe character to other cmdlets.
So in essence, PowerShell is a lot more along the lines of an IDLE+cmd love child? :) 
&gt;I don't think I see why the shell is important to get that. Because you're dealing with objects rather than text, even if you right your code to handle get-data-on -users -verbose | filterfor -username "bob" | filterfor -created "2013" | output You're still limited to the string that get-data-on outputed, $bobs=(get-data-on -everything | filterfor -username "bob" | filterfor -created "2013" ) foreach($bob in $bobs){ if($bob.class == $windows.user){ $bob.suspend() } elif($bob.class == $windows.contact) { $bob.delete() } elif($bob.class == $windows.elf ) { $bob.do_elfy_function() } } If you don't understand why passing the objects is cool, then just trust that the people who invented C++, Objective-C, Smalltalk, Java and C# knew what they were talking about.
No worries, its always a risk when you market something here that the unforseen issues are going to be found quickly &amp; thrown in your face :) Thanks for the free tool, it's a brilliant way to get people started with Python and I hope it works out for you guys at Jetbrains as they move from hobbyist to professional and need the license. IDEA was a godsend and I can thoroughly recommend Jetbrains support. 
One's the command prompt; the other's a ripoff of Linux. ;-)
PowerShell is too slow and clunky. I've tried numerous times, made a good number of scripts but I always revert back to other tools. 
Are you able to create both situations from a browser, or does your browser always show the WoS links?
Sure it's really useful if you're a .net shop... but just like the python shell, it's language-centric. Just sayin' :)
I'd love to hear an actual explanation of this. 
I can't, actually. I always get the WoS links at work on the university network, but don't get them at home (even when connected to the university VPN).
It's not a pain to use on windows. Install it and you're pretty much done. You only need to mess with PATH variables if you're trying to use the default CMD prompt. (Don't)
Is there such a demo or something similar available as a video?
Feel good about supporting good software!
Hey! Sorry to spam your topic. I noticed on the features page that you mentioned that PyCharm supports Cython. It doesn't seem to have proper syntax highlighting or anything for it out of the box -- anything special I need to do?
You could use wordpress for a lot of apps. If you want to learn django, you need to start small. 
I'm not implying causation here, just noting that there were IMO other important things to work on for 3.4 than pandering to the whims of a few lazy Pascal programmers. The new enum type can provide, in some circumstances, neater syntax than using namedtuple, but since its custom-built for exactly that scenario while namedtuple is a generic solution, I'd like to hope so. My issue is that it goes against PEP20 and bloats Python with an unnecessary new type, setting a dangerous precedent where anyone with some special niche requirement from some other language can demand we bloat Python even more with their peculiar need which is equally already covered in the stdlib by some other means. A namedtuple is immutable, as tuples are the standard immutable container. An enum is... let me go look up the documentation from some place that has internet access. (repeat for every superfluous type) 
Again, I can't say I disagree with the general sentiment. I'm honestly just hoping this is an exception, and not the start of a trend. Better yet, I'm hoping I discover some very useful niche for enum that I hadn't thought of before.
Their is no $ tail -f Most people say use: "get-content -Wait", but it doesn't work in my experience (doesn't poll the file handle correctly, so updates don't get pushed) ... 
Friday is a full conference day, it'll start in the morning.
You can install the XCode Command Line Utils without needing to install the entire XCode suite. You are correct that you need a developer account (which is free) to access the download.
Hmm, sounds to me like the university purchases a group subscription to Web of Science and authentication is done by IP address. My guess (and you could try calling network services to confirm) is that their VPN IP addresses are in a different range than the Univ network. VPNs often connect to a separate range of IPs. Maybe the Univ neglected / didn't purchase a license for addresses that are assigned to off-site connections (e.g., VPNs).
The way I always explain python and dynamic programming to fellow developers is "almost everything you think should work works." I discovered python during a high school internship almost 10 years ago. She's perfect for one-off tasks even when you've just met her. But python scales. I now make very good money writing python applications for a huge financial services joint, and let me tell ya, life is good. If I ever find myself working primarily with .NET or Java again, it'd be like moving back in with my parents.
What? namedtuple and enum's serve different purposes.
Not anymore in Mavericks, if you are prompted for the need of it OS X will download it all on it's own and install it with no user interaction now.
Which is absolutely no hinderance to using the most awesome scripting language together with the most-professionally-used OS.
free as in $$$, but you still have to sign a shitty EULA.
on windows i always install git bash. then add /c/python and /c/python/scripts to the path. it provides a proper shell and the basic unix tools (ssh). also git is pretty usefull.
What would be some small simple projects you recommend? 
Thanks! 
&gt; OS X is almost as bad because you need to sign up to be an apple developer and install a massive IDE just to get one. The [Apple Command Line Developer Tools](https://developer.apple.com/downloads/index.action) are **less than 100 MB**, and signing up is free. @/u/RiotingPacifist/, they're all pretty much open-source so just download the code and compile them on your own if you don't want to agree to that EULA.
Me too... not seeing how enums relate to namedtuples in any logical way.
For the latest OS X versions. And they only got contributed after Kenneth Reitz spent 2 years maintaining a hack to do roughly the same thing that turned out to be widely popular... And signing up still involves submitting to Apple's EULA, just to have a godamn compiler on your system. Yay. &gt; so just download the code and compile them on your own So I'll just use the compiler already on my system... oh wait.
&gt; their shell is fucking shit. While I agree with you, there are readily available and widely used alternatives. 
Hmm, I'm surprised they're interpreted as attacks. Perhaps there is a more constructive approach to phrasing what I'm saying? Not singling out SQLalchemy in particular (which is an amazing piece of work, FWIW), but the entire 100kLOC+ of bytecode stack as a whole Thanks for the feedback!
etatarkin gave me exactly what I asked for in the post above. What I'm doing would not work well with a daemonized process. The use case here isn't a typical "crawl website and find content" process, it's more of a "I pass in a single string parameter, the crawler does it's thing, runs some statistical analysis on various data points, and spits out a string result. One thing in, one thing out, nothing gets stored to disk. 
Well, I was referring to a blog app since you mentioned it could be done with WordPress. Usually a good idea to start with the Poll app that's on the official Django documentation and then move onto a blog or something like that where you can move past what the Poll app gives you. I did the Poll app and am now developing a pretty complex site and it's not been easy. I'm attempting to run before I truly knew how to walk so I'm struggling at times. This video is pretty good for a Django primer: http://www.youtube.com/watch?v=zTNA0MtZwso Also, search for more on Youtube. I find that I learn better by actually watching someone develop a site rather than reading and trying to apply it myself and filling whatever blanks I have. Above all, if you're not comfortable with Python, you're going to have a bad time with Django. I watched a couple videos on Python and then tried to jump into Django and that didn't work out well. So, I started over, and I read this book: http://www.amazon.com/Python-In-Day-basics-ebook/dp/B00C2STEIC and I also went through about 30 chapters of "Python the Hard Way" online. Then, I started with Django again. I still struggle with django at times, but no where near what I would have without learning more Python. Everything you write in Django is Python code, so if you don't know Python, it's a long road ahead. I hope that helps.
Powershell is anything but awful. It may be slow, but try using Python to manage active directory, or any other aspect of Windows. Powershell can do big tasks in one short line. Python can't.
&gt; It's amazing how many powershell apologists there are in /r/python . You're like a self hating breed. Ugh, enough with the pretentiousness. I was wrong about Python - I don't have a lot of experience with it and I'm mainly going off what I've read from others when it comes to Windows management. Powershell is a tool a use quite frequently and it's been very useful and easy to learn. I'll look into the AD library and I'll see what it's like. I may move from Powershell altogether. I mean, is it as simple as get-adusers | export-csv in Python to get a list of users? Properly formatted?
What a poor decision. I hope that's only for the development build
That is my experience as well. Sockets have trouble with redirects, but not an HTTP lib like requests. If however the redirection problem still exists - you might wanna look into spynner - it's a webkit based headless browser that's pretty easy to set up. The only downside when compared to requests is that it will have a larger overhead.
&gt; P.S. MS stop messing with tablets and get back to making proper operating systems. When did they make proper operating systems?
You have 1 month old pull request and you haven't commented on it till now. I guess you should first try to accept patches from people who are willing to do it. [source](https://github.com/alexames/DeltaBot/pull/16)
I believe I mentioned NOT to use the default shell. Get some cygwin.
&gt; A) their shell is fucking shit. I can use python, I can't use the ecosystems around python that make it even funkier Try PowerShell. It's a marked improvement over the default shell in Windows. http://www.tylerbutler.com/2012/05/how-to-install-python-pip-and-virtualenv-on-windows-with-powershell/
Yep use requests. Also check out scrapy.
Where'd the support go for IronPython and IronRuby? I'd make more Windows Phone apps if the IronPython, IronRuby, or even F# templates for mobile apps were available in Visual Studio by default.
I'm thinking about making a pvm – a python version of the rvm – which will provide the same nice CLI interface of rvm but use virtualenv and whatever other tools already exiswt.
Extremely interesting write up. Thanks for this. What are your thoughts on tech such as [OpenResty](http://openresty.org/). Obviously it's not working on the DB side of the stack but it seems like another fruitful approach to achieving decent perf.
Yes, we're fairly sure that Microsoft wouldn't have touched IPython if it was GPLed.
I may be american, but I fully support using non-english names. For too long programming has been an "english only" profession, and there are millions of would-be developers out there whose progress is stunted by the language barrier. I also want to use mathematical symbols in my function names.
oh yeah, save space with θ, Σ, and γ. Would be nice to redefine lambda as λ. `sq = λ(x): x*x`
You must be a functional programmer. I've actually tried doing that in Haskell before, but the problem I ran in to was that the Windows command line doesn't support unicode characters and it can't load modules with them. Ubuntu has no problem with them though.
http://en.wikipedia.org/wiki/HTTP_302#Example in other words, look for the location header
No they don't. An enum maps a context-sensitive item to a sensible name, so you can (using PEP 435's own example) says stuff like color.red instead of using '0xff0000', making the code more comprehensible. At no point will the enum be changed, therefore it is immutable. Python already has a type for immutable things, it's called tuple. You can map sensible names to tuples using the namedtuple factory. Therefore, namedtuple does exactly what enum does, except: a) it already exists &amp; is battle-tested, unlike this new implementation b) it inherently advises the programmer the object is immutable, since tuples are immutable. WTF is an enum? Have to go look it up. Repeat for every other superfluous type similarly bloating Python in the future. c) THERE SHOULD BE ONE, AND PREFERABLY ONLY ONE, OBVIOUS WAY TO DO IT immutable object - tuple. existing labelling factory - namedtuple Obvious way to create a labelled, immutable object? namedtuple. QED. 
Lambda is the easiest. Switch to Greek keyboard. Hit "L". You might want programmers who don't do English if they are working on a problem that most first-worlders don't have a need for. Most of your programmers working on a Chinese almanac might be more comfortable in Chinese. With English, they end up with a whole bunch of almost meaningless single character variables.
As a counter to your first point, consider if major computer science had started in eastern countries rather than in the US and UK. Would it be the other way around? How about all the Indian programmers out there? There's a lot of them, and there's going to be more and more coming. English is the defacto language only because we got there first, not because it's better for it. Soon there will be huge communities of developers who don't know a word of english, but they'll be just as competent as you or I at writing code. I don't think it's fair to tell them "you have to learn english to be a successful programmer" while westerners get a free pass. Besides, I've worked with code written in everything from French to Chinese (today, in fact) to Icelandic. As for your second point, you should stop using an editor that doesn't have something akin to snippets or completions. Already when I write LaTeX in Sublime Text, I use the Unicode Math plugin that allows me to insert symbols directly into my source very easily. The point is not to save keystrokes, but to save space on the screen. If I see a statement like `x = Σ [1..n]`, I know exactly what it's doing, even if the equivalent is only 2 extra characters. However, in a complex equation, mathematical symbols could greatly reduce the clutter of code. They should not be used for every function or variable name, only those that it makes sense for. One of the motivations I have for this is that as a Haskeller, I see many cases where a library designer chooses a strange operator to represent something that has a widely used symbol that exists in the unicode set. Additionally, opening up the unicode character set to compiler developers would give us more options for bracketing other than [], {}, (), '', "", and &lt;&gt;, would give us the ability to use the ≡ operator to mean equivalence, which is often different from equality, and the ≠ for not equal. These are just a few examples of what we can do with unicode. Don't dismiss it just because you don't have a button for it yet. Also, I'm pretty sure I'd used ∫ for an integral.
Did you try using `chcp 65001` to make it use utf8?
That's probably not what you meant. It's like saying 'I hate using C as a compiled language' -- well, there ain't any OTHER way to use it. I suspect you meant a 'shell scripting language'
1) As a counter to your first point... your non-existent fantasy world has no bearing on the real world and its real problems. Its a straw man argument. 2) I use an editor that supports both snippets and completions, so your point is invalid. 3) Feel free to edit your post to show the limits on that integral. I picked on integral deliberately because other symbols like lambda and sum are contrived examples where you're just doing replacement of a word with the symbol. Try expressing Simpson's Rule. The other problem is that it relies on unicode code points existing in the font, use a different font especially a font made before the standard was changed, and now the code is completely unreadable / unusable. The Python interpreter would also now need to specifically track changes in the unicode standards and deal with the backwards-compatibility issues. 
I was unaware of this feature. I'll have to give it a try sometime.
1) So you disagree that there has been a boom in developers from non-english speaking countries like India? How about the last decade or more of outsourcing? And now there are adequate resources online for these people to learn programming. I see more and more posts on here, stackoverflow, udacity, and other websites where they say something along the lines of "sorry my english is not good". I also have worked with developers in Poland, China, Japan, France, and Brazil, many of whom already use unicode characters to name classes, variables, and functions with names that they understand. Additionally, if you examine the [wikipedia page on non-english programming languages](http://en.wikipedia.org/wiki/Non-English-based_programming_languages), you'll see that there are numerous attempts to internationalize programming already. I would like to know exactly _how_ my world is a "non-existent fantasy world", rather than you just claiming it without evidence. 2) Ok, so you do use an editor that has the features to solve the problem you were complaining about. So do you still think you would google for a specific unicode symbol every time you needed it? Or would you, like many people already do, set up your editor to allow you to insert these symbols with just a few keystrokes? 3) Did I say that every single mathematical formula can be represented as unicode? No, I did not. I merely pointed out some examples that are easy to follow, rather than bringing up algebraic combinators that exist in mathematics beyond calculus, which you seem so focused on. There is also a difference between typesetting and writing a formula; if I wanted to typeset it, I would use LaTeX. Just as you might hand-write out an equation in a single line, you can also write it out in a single line of code. Arguing that because you can't express limits as subscripts and superscripts on your integral means that using unicode characters is inherently flawed is rather silly logic. How about the thousands of other symbols that could be useful? Besides, the majority of code is not crunching number, it's perform tasks like text parsing, communicating with a server, or interacting with a GUI. I firmly believe that with the introduction of more available characters, we will be able to find more succinct and intuitive ways of solving these problems. Most modern operating systems already ship with unicode fonts. Most code editors already default to unicode encoding. As for Python, you should check out this [PEP](http://www.python.org/dev/peps/pep-3131/) which went into effect in Python 3.0, allowing people to use an extended unicode range to name identifiers. Looks like they already do that and have been for some years now without apparent issue. Considering that the [Rosetta Code](http://rosettacode.org/wiki/Unicode_variable_names) page for languages that support unicode identifiers lists 34 languages, including C, C#, Common Lisp, Go, Haskell, Java, LOLCODE, Lua, Mathematica, Perl, PHP, Python, Ruby, Scala, and Tcl, it doesn't seem to be a particularly difficult problem to solve, either. Edit: I also forgot to mention the quite obvious "from __future__ import unicode_literals" that is recommended for all those using Python 2, especially if you are expecting to switch to Python 3 anytime soon. This line actually solved a problem a coworker of mine was experiencing last week because his Chinese and Spanish translations were not getting displayed properly in wxPython. 
Web drivers can be easier to use for quick hacks, depends on the integration. Selenium might be useful for you
Hi! OpenResty looks fun, but I'd be more inclined to try and push a functional webserver into the Python process than push the Python process into a functional web server :) Not really sure what a good solution for that looks like yet, but if enough functionality can be squeezed out of an in-process solution, I'd prefer that route. For the Raspberry Pi example I've used https://github.com/jonashaag/bjoern, and generally this feels reasonable. However trying to use "just Bjoern" in a real app would probably be a mistake, e.g. there is no functionality for handling process hangs, restarts, logs and such, and static file serving isn't well catered for.
Can you point to some interesting examples of code with symbols that go beyond ASCII? 
I did not know Scala supports Unicode. I'm taking a Coursera course in it. Hope it won't crash the autograder!
Off topic but, Niklaus Wirth: "If you call me by name, it is Neeklaws Veert, but if you call me by value, it is Nickle's Worth"
I don't know... he talked about how Python is always fast enough for him and Python running on a 64000 core supercomputer at PyCon 2011. 
Thanks for the tips! Im decent with python..went through the whole codecademy amd a few other tutorials along with youtube as well. I wrote basic programs. Ive only made command line looking programs though, how would i go forward to uploading my program to my site? Usually only php and html/css shows up. Thanks again!
Not specifically Python oriented, but I know Vim supports what it calls "conceal" functionality, which is along the lines of what you've mentioned here, but with the added benefit of keeping things standard. See [vim-cute-python](https://github.com/ehamberg/vim-cute-python) for an example. Might be worth checking if your preferred editor supports something similar. If it's more a matter of saving keystrokes, I expect there's also a way to expand symbols to their keywords as well, but it's not something I've looked into for myself.
&gt;Python running on a 64000 core supercomputer Hope python is only being used as glue, would be terrible otherwise
There's plethora of ways to write unicode characters without switching keyboard layouts. To give an example there's 3-rd and 5-th level layouts and compose sequences…
Why? (serious question) 
[GIL](http://en.wikipedia.org/wiki/Global_Interpreter_Lock) with CPython comes to mind.
As someone whose native language isn't English but German, I strongly disagree. English is the language people communicate in, not just in computer science but in every global context. Programming especially is fundamentally all about communication. As long as programming is an English-only profession, we can gurantee that every programmer is able to communicate with every other programmer. This is truly amazing and we should do our best to keep it that way, in fact if we could make it so that every human could communicate with every other human in english, that would be even better.
The last part was the best, but you have to watch the whole thing to see it.
Compose sequences need to be learnt though, and might take as many keypresses as just typing the full word. 
Sum is a lot clearer than sigma to people without a maths background or who haven't done maths in a long time. Also, in my opinion sigma is not the most legible character when it's the same size as other characters. While skimming if I see a sigma that's the same height as other letters, I could misread it as E or Z. It's fine in formulas where it's normally written significantly larger than letters, but the last thing editors want to implement are characters that are two lines high. 
&gt; I may be american, but I fully support using non-english names. Yeah, well, as a non-native English speaker with a lot of experience with "localized" code (in my own language) I hate it with a passion. I also dislike it when people like you, who have never had that experience and will not be affected by people using non-English variable names, encourage them, supposedly on my behalf, because it makes you feel all warm and multicultural inside.
From a quick google search [catdoc](http://vitus.wagner.pp.ru/software/catdoc/) from ["python convert microsoft office docs to plain text on linux"](http://stackoverflow.com/questions/685533/python-convert-microsoft-office-docs-to-plain-text-on-linux) catdoc $INPUT_FILE | grep -c "YOUR_NAME_HERE" | python add_to_ calendar.py where add_to_calendar.py looks something like import sys input = sys.stdin.read() try: occurrences = int(input) if occurrences &gt; 3: add_to_calendar except: print "not today" for a pure python solution look into the open office uno module.
Theta, sigma, and y? This is exactly why unicode in code is a bad idea.
You need a web host that supports python and django installs. Web Faction is a popular one. That's what I'm going to use although I have yet to sign up. I'm still developing things locally at the moment. 
oic thanks, so the usual stuff like hostgator doesn't work eh?
That could work, but one of the issues is the format is not always the same. Sometimes the times are on to the right of the name and sometimes they are to the left. I'll add an example of what I'm talking about.
With the first solution I'm only looking at how many lines your name appears in. It would be even better to do this catdoc $INPUT_FILE | sed -e 's/\s\+/\n/g' | grep -c "NAME" which would tell you how many time your name appears in the file (regardless of location in the document)
Umm... I don't think so but I'll be honest I haven't looked at Host Gator real seriously. You may be a able to install python and django. 
I just uploaded an example pdf of the schedule. they are generally sent out as .doc or .docx files.
I've done this before: converting a pile of Word documents. The first stage was to use LibreOffice command-line interface via `subprocess` to convert the document to HTML (as outlined in an [ask.libreoffice answer](http://ask.libreoffice.org/en/question/2641/convert-to-command-line-parameter/)). Note that this doesn't involve running the big GUI version. Then I parsed the HTML via [BeautifulSoup](http://www.crummy.com/software/BeautifulSoup/) which deal quite well with the resulting mess.
Another option could be to use LibreOffice to convert from the .doc to LO's document format, which is a zip of XML files. From there you could use python to read from the zip, lxml to parse the files, and some clever xpath expressions to find your name near the dates you need. Might be a bit long-winded tho. Depends how much the format changes; if you simply need to count instances of your name, other options would be easier. But if you need to know that in column A is your name and column B is the date, N rows down, my solution would give you a bit more flexibility.
One can come up with some euristic that would allow the script to determine which time corresponds to which entry. Suppose each line contains 'CALL' substring that is always encountered earlier in the line than time and crew names. So you can do text.split('CALL') and regexp time and crew names out of each inidivdual line indpendently.
I apologize if I've offended you, but I've seen programming languages that use languages other than English entirely, so it's something that people other than you feel strongly about, and it's not something that makes me "feel multicultural". I rather think it would be a good idea for people to at least learn in their own language, since this works well in fields other than computer science. I wouldn't imagine math being taught in English just because there are a lot of papers written in it. In fact math is a quite multicultural field where many students are required to learn a second language in order to read original texts. 
You are making me painfully realize how little I really know about programming!
Having seen the example pdf and your request "In this instance i'd like to know how to pull the brief time (BRF) for all instances of JACKSON." I think the best plan would be to run catdoc on one of the doc (or docx files) and see how the document is formatted (I asssume it is a table but I don't know this) if it is a nicely formatted table I would run catdoc on the file then in python iterate over each row of the table looking for your name and if you find your name extract the brief time from the row. highlevel code catdoc $FILE | python extract_times.py extract_times.py import sys rows = parseInput(sys.stdin.read()) for row in rows: #arbitrarily guest that name is in the 5th column, time is in 1st column if nameMatches(row[5], NAME): appendToSchedule(row[1])
In mathematics, which is arguably even more about communication than programming, students have to learn a second language, such as French or German, in order to read the original texts. Not everything is done in English. And I personally feel that while a single global language would be convenient, it would also be a lot less interesting (but this is merely an opinion). 
Every instance of an enum is just a single value. Every instance of a named tuple is a whole collection.
If it's a .docx file, it's just XML. The OOXML format is documented, it's not that hard parsing it if all you have to do is look for a name and some text. http://www.schemacentral.com/sc/ooxml/s-wml.xsd.html
http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html ([reddit link](https://pay.reddit.com/r/Python/comments/uny12/eval_really_is_dangerous/)) https://wiki.openstack.org/wiki/Docker
HEURISTICS PLZ
Fork this repo https://github.com/thekarangoel/Projects and try to write a few of the programs in that list ;)
unicode in code is fine, but in this specific case it is a cute abuse. Chinese function names for a Chinese codebase, totally fine. Using λ for the word lambda is lame. I have to cut and paste it wherever I need the usage. Ug.
Why not use an external keyboard configured to Greek ? Maybe one hand on the local english keyboard and another on the Greek one. Easy as Π.
Enumerations are union types while namedtuple's are product types. If you think enumerations are just for creating "labeled immutable objects", then perhaps you should do a little more reading on what exactly they are. It can be difficult to see the distinction in Python. I would recommend examining the differences between union types and product types in a statically typed language. (In C, that would be `union` and `struct`, respectively.) Then try to transfer your knowledge back to Python. I mean really, sit down and think for a moment. Do you think that the core Python developers would add a new feature that is *exactly like some other feature*, but call it something else? Don't you think there is a chance that you're wrong and they are actually two different things serving two different purposes?
This is an interesting problem. If it were me I'd take the following approach: 1. Install Mutt and googlecl (or some other methods of reading email and adding tasks on the command line). 2. write a script with [awk](http://www.cyberciti.biz/faq/bash-scripting-using-awk/) to parse the data as needed (grep and sed are okay too but I prefer awk because it can combine sed, grep, and cut all in one line) 3. set up a cron job to execute the script as needed. I think getting the email and adding tasks are going to be the most difficult things to pull off here - writing a script should be pretty easy but let me know if you want assistance. One side note, there is no need for `cat sched.doc|grep $name`; just use `grep $name sched.doc`. I think that would otherwise be filed under "useless use of cat".
I am sure you can cut some corners to get those 4 1/2 minutes of your life back.
Meanwhile in the threads: \&gt;hey bro i was using that \&gt;no i was stfu \&gt;guise i had that first \&gt;NO SRSLY I had that \&gt;wait what were we even talking about \&gt;*Supercomputer has stopped responding*
Using the API is not scraping IMHO... Other than that, nice article.
Why do tabs speed your navigation even one bit?! When writing code, I use the tab _key_ - but it inserts spaces in my code, not tabs. When navigating, I use alt-left and alt-right (option-left and option-right), which moves by _word,_ not by character, or command-left and command right, which move to the beginning or ending of the line. These work in all my editors, and even in this comment box it seems. If you are moving through documents by hitting the naked left and right keys a lot, you are doing it wrong. :-)
http://en.m.wikipedia.org/wiki/Antiword
Docx is also a zip of XML files.
Install 3.x from Python.org then configure as needed. 
Use MacPorts or Homebrew. MacPorts always installs tons of stuff, but works very well. It has a tendency of wanting you to use `port` instead of pip. Also, by default it installs in `opt`, which is not in your default PATH. This can lead to occasional head-scratching. Homebrew used to be painful for Python since it did not handle parallel installations of 2 and 3 well. This is fixed now, and most python-specific packages have install options for choosing the desired version (e.g. PyQt). By default, it installs to `usr`, but wants to chown it to your user account. This is weird, but I find it preferable to installing to `opt`. Since the Mac still lacks any concept of uninstallers, do yourself a favor and refrain from installing Python without a package manager. I use homebrew with Python 2 and 3. It works very well. Some packages (pyqt), I have homebrew install and I symlink them to virtual environments. For PyQt, this is easier than installing it using pip. Also, I like to use fish instead of bash or zsh. As for compatibility with PyCharm, I have no idea. I'm more of an Emacs person myself.
Ugh ports is so dirty. I quit that shit a few years back, never again. Definitely use homebrew over macports. 
Maybe [Vagrant](http://www.vagrantup.com/) could be an interesting option for what you want to do?
http://youtu.be/EBRMq2Ioxsc?t=34m41s Why would Python have a problem with 64K CPUs?
&gt;In that scale, electricity usage becomes a real concern and software efficiency &gt;becomes important to reduce costs. I would think if you could afford a 64K core supercomputer, you could afford the electricity bill. That would be like owning a Ferrari and then complaining about the gas mileage.
Yes, by installing via homebrew you are simply installing the newest version of Python. And by installing Python, pip is included by the homebrew package. I've never used PyCharm, but Sublime Text has treated me well for Python development. Especially using the linters. Get homebrew configured, then run: brew install python You may need to manually link the module as homebrew usually doesn't link things that will replace system-level things. This is step #1 of installing OS X for me.
I agree, Vagrant with VirtualBox could be cool but seems overkill...
I disagree. A supercomputer/data center may be a core component of the company that owns it and of course they will try to cut expenses. Ex.: http://www.google.com/about/datacenters/
Homebrew. Pip. Venv. Sublime Text 2
I'm also a Linux user who uses OSX for work. I created pythonz to help with compiling different Python versions which I later use with virtualenv. Maybe it will also help you: https://github.com/saghul/pythonz
Textmate with all of the python and Django plugins/context checkers that I could find, with an install of 2.7 for work. Yes textmate costs money, but it's amazing. 
if you like vi, vim is great. PyCharm is great if you need an IDE. Textmate is probably the best editor, but if you like working in terminals, then vim. I tend to switch between them (vim for small fast changes, textmate for longer things, PyCharm for IDE bells and whistles) However you did things on linux, you can do on a mac. I've avoided the package managers because they seem to install EVERYTHING, and I don't need to convert my mac into linux. Download a tarball, configure, sudo make install has always worked for me (after getting xcode for the compilers). 
Sublime makes novices like me feel like a total badass
https://github.com/e000/py-4chan
How do you make sublime work well with virtualenv? 
I'm stuck using Eclipse with PyDev right now, but my favourite setup ever was Pida with IPython. Failing that, vim and ipython. Or just vim. Whatever. It makes no real difference if you use virtualenv. Also pycharm and sublimetext are cool.
While probably not the answer you're looking for, I usually just have a terminal open where I execute files from. [This](http://osxdaily.com/2011/12/07/open-a-selected-finder-folder-in-a-new-terminal-window/) makes doing so easy, and I usually want a prompt up to perform other misc. cleanups or calling scripts anyways. If you really want to build it from ST, you'll need to create a sublime-project file to have ST use the Python executable from virtual environment. Sample file structure for doing something like this is described [here](http://salimfadhley.wordpress.com/2013/06/15/using-sublimetext2-with-virtualenv/).
[Anaconda](http://continuum.io) works fine with PyCharm on Mountain Lion. I'd also recommend installing homebrew in any case to get "other stuff" (like alfred, the_silver_searcher, iterm2, tmux, and any interoperable software like Redis, Mongodb, Postgresql, etc.). 
If you do Sublime Text 2, but you'll want the "package control" and "Code Intel" plugins at the very minimum.
He already mentioned he's using PyCharm. If he likes the vim style commands he can install the vim plugin, otherwise, I'd really recommend *against* using vim. PyCharm has all the bells and whistles already installed for navigating trees, refactoring, etc. Yes, you can install all those addons for vim, but then you're just trying to patch together an IDE out of vim anyway, so why not just go for a proper dedicated IDE for the task at hand?
&gt; If you think enumerations are just for creating "labeled immutable objects", then perhaps you should do a little more reading on what exactly they are. Lets do that shall we? http://en.wikipedia.org/wiki/Enumerated_type The opening sentence: *In computer programming, an enumerated type (also called enumeration or enum, or factor in the R programming language, and a categorical variable in statistics) is a data type consisting of a set of named values called elements, members or enumerators of the type. The enumerator names are usually identifiers that behave as constants in the language.* A set of named values which are constants. labelled = named constant = immutable QED &gt; Do you think that the core Python developers would add a new feature that is exactly like some other feature, but call it something else? Absolutely. List comprehensions are essentially an alternative expression of nested for loops. str v. unicode. StringIO v. cStringIO. pickle v. cPickle. anydbm v. dumbdbm v. gdbm v. dbm. argparse v optparse. thread v. threading v. multiprocessing. HTMLParser v htmlib, urllib v. urllib2, shall I go on? Also, note that I did not say enums are exactly like namedtuple, only that the extra keyword and type are unnecessary as it can already be expressed using namedtuple. 
1) of course not, and btw India speaks English, and are a former English colony. India have had more resources to learn programming for a long time because they don't care for copyright law and photocopy books willy nilly, making them easily accessible to anyone. Some people are quite polite and say "sorry my english isn't very good" because they encounter racist pricks who distract others from the issue at hand with taunting. Their english is usually much better than many native speakers. 2) wow, so my editor magically makes keys appear on my keyboard! Wonderful! Pass me your crack pipe bro! 3) Its not the lack of unicode fonts, its the *shifting standard*. If you had any experience in the matter you'd know what I'm talking about. How do you expect to maintain code into the future when what's written in the file is Ξ today but 𓏖 tomorrow? 
SublimePythonIDE -or- Anaconda Either of those support virtualenvs. The first I use - you have to edit the build opts for it but it works well.
Second that toolchain. I've been very happy with each and Sublime was worth every cent. I've never used PyCharm, so I wont claim that's a bad option. /u/mrbubbles02 is right though, there's not a plug-and-play solution to using virtualenv.
In addition to dev tools (/u/themycenaean described my toolchain), there are tools I can no longer live without: [Cinch &amp; SizeUp](http://www.irradiatedsoftware.com/) for keyboard and mouse gesture window tiling (I prefer keyboard based). [Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en) extension for mouseless browsing in Chrome. Holy hell, I have no idea how I worked without this. 
The gitgutter plugin for Sublime 2 is indispensable if you're git based. It's one of those things you don't think you need until you have it.
Instead of Homebrew I would opt for a VM with the same OS as the server you are deploying to. (e.g. ubuntu in case of EC2). obviously virtualenv and pip and all the shenanigans. If you are not a fan of VirtualBox, some of my friends use vagrant, that could be interesting to try out.
I would add virtualenvwrapper to that too.
Lot's of people use rEFInd to dual boot Ubuntu and OSX where I work
Could convert it to a flat XML odtx then use lxml to parse that
If you use [Anaconda](http://continuum.io/downloads), you create and manage Python 2 and Python 3 environments using the [conda](http://docs.continuum.io/conda/) packaging tool. Conda also allows you to build your own packages. And if you really want you can use pip on top of that.
The first sentence of your post almost made me tear up. I'm so proud of your work-place.
SublimePythonIDe and Anaconda(sublime) are for ST3 only. 
linux ;)
you're ALWAYS so angry....so how do you explain that hmm?????
homebrew, Venv,pip, vim with bundle 
For years, I would always be installing multiple interpreters, database servers, all manner of supporting (and occasionally conflicting) libraries onto my workstation. But now that I'm at a point where my laptops and workstations have 8gb of ram or more (and plenty of processing power), running a virtual machine (or 3) for each development project becomes exceedingly ideal. For my MacBook, I use PyCharm + VirtualBox + Vagrant. Basically, in my project directory I have a file called "Vagrantfile". This takes a base virtualbox image and fires it up. You can ssh into this this VM, and PyCharm has a number of hooks for Vagrant and Remote Interpreters. You may have to fiddle with PyCharm's remote path mappings a bit to get everything working. The contents of your project directory (the same directory containing the Vagrantfile) are mounted within the VM as /vagrant. Now within the VM you can install any version of python you want, as well as web servers (nginx/apache), database servers (mysql/postgresql), or any other supporting software (redis/rabbitmq). At the end of your programming session, you can suspend the VM to disk and leave it right where you left off. If you are sharing your work with others, there's another part of using Vagrant that comes in handy. You can make your exact development environment reproducible. Start with the base VM and record a shell script (or puppet manifest like I like to do) that installs and configures all the applications you use. Vagrant will call this when creating the VM. You can test your script by constantly destroying the vm `vagrant destroy` and bringing it back up `vagrant up`. For example, I have a script that takes the base image, installs python3, pip3, various pip-based packages, mysql, creates a mysql database owned by a specific username/password, copies an apache config file into place, then restarts apache. This script is checked in with the code repository as well and is called by Vagrant. If you get to the point where your VM will come up and be able to run your python code in one `vagrant up`, then anyone else should be able to check out your code, run vagrant up, and begin developing using the same environment you do (yes, there are drawbacks to this, but it makes it much easier for everyone to collaborate on the code). By doing this, you don't have to focus as much on documenting the necessary development environment. In fact, your shell script/puppet manifest becomes a sort of living documentation for people needing to go from "base install" to "meets requirements". Since Virtualbox/vagrant are cross-platform, even Windows users can join in on the fun. Vagrant may seem a bit daunting at first, but it's rather easy. Check out a copy of your code somewhere and change into it. # add Ubuntu Precise 64 box, boot it, login vagrant box add precise64 http://files.vagrantup.com/precise64.box vagrant init precise64 vagrant up vagrant ssh # now go to /vagrant, which has all your files cd /vagrant python myprogram.py You can use your IDE on your workstation to edit the files like you normally do, and then execute it from inside the VM. Test that out a bit, then look at IDE integration. PyCharm as support for remote python interpreters. It can get the information for your vagrant remote interpreter from the Vagrantfile itself. Here's a nice guide that I found helpful when setting up my stuff. It's written for Windows and Chef, but I found all the pointers useful on my MacBook as well (as Vagrant and PyCharm are all cross platform). http://www.run80.net/pycharm-vagrant-django-and-windows-for-a-newbie/257 
I use Vagrant as well, with using XForward-ing and X11 to edit with an Emacs instance running on the Vagrant VM.
OsX. PyCharm.
1) English is an official language of India. Native speakers everywhere struggle with it, because education systems are poor worldwide. I don't think you even have a point here, you're just being argumentative. 2) You're welcome (?) 3) I don't have anything against unicode, and I've been saving files as UTF-8 for longer than you've been alive. But there's a huge difference between saving a file that's equally ASCII and UTF-8 because you're only using the identical code points, and introducing compatibility problems by using specific code points to represent a concept e.g. Σ() instead of sum() when the sigma character could be U+0c3c, U+03a3, U+2211, ... and any one of them could be deprecated at any point. You're right, you can specify a unicode "version" (e.g. UTF-8 versus UTF-16) but you cannot select "UTF-8 as it existed for this programmer in Algeria on September 7th, 2004 when he used the code points as implemented in the Monaco font on Windows XP" When you're using just code points that have never changed because they're the same as ASCII, of course it seems "stable and secure" - but then you're programming in english which defeats your argument. 
PyCharm has support for Virtualenv built in. You can create a virtualenv as part of setting up which interpreter to use for a project. Also, you can search and install packages within a virtualenv as part of the project configuration. 
Looks more like an introductory description to me than a book review. Nevertheless, I'm now curious about the book.
Yep, this is ideal. Editing environment local, whatever suits, and the deployment environment always available to be refreshed from scratch in Vagrant. Preferably built via Chef so that it's easy to replicate it anywhere.
Not that its relevant, and sorry to spoil your conspiracy theory, but no. Never have, probably never will. And my current employer is not associated with them either. They just happen to make an excellent product which answers all the requirements requested by the OP, and was a glaring omission from the suggestions when I joined the thread. FWIW Enthought Canopy is also another option, I just don't have experience with its current version on OS X. The OP is a professional developer, not some hobbyist with ample time on their hands to waste manually pulling in all the individual bits &amp; pieces for the "learning experience" or rabid adherence to some philosophy like "all corporations are evil and we must shun every product ever made by anyone unless its an individual who is making no money from it *and* they made it GPL - but v3 not the evil v2" (while talking about software they're installing on an Apple Macbook) 
MacPorts always has the craziest dependency chains. For some reason, almost every time I installed something with MacPorts, I'd have to recompile a new version of Perl along the way. Or like that time I wanted to download one version of Python and it installed the documentation (!!!) for the *next* version of Python; I think it was 2.6 listed the documentation for 2.7 as a dependency. That's not even possible! Crazy stuff like that happened all the time, and I was constantly finding myself with things being broken, duplicates and version discrepancies, and a completely polluted filesystem.
Theoretically, it keeps stuff in /opt, but in my experiences, not all packages that get installed do
I'm not very big on conspiracies, I just tried to make some sense out of what you were writing. Astroturfing would've explained it nicely. I have no problems with corporations doing business. In fact, I like Anaconda, it's what I use on Windows. Maybe the commercial python developer world is so much different from my little rabid-hobbyist-with-ample-time-to-waste-and-learning-experience-in-quotes (gee, how many insults can you fit in one sentence? Way to go!) one; then I would understand the last two bullet points. Still, the first three are completely nonsensical, especially since you seem to have experience with package managers on OS X.
Yes, we already read the OP has them. Well, some of us did, anyway. Others just blindly blat out "SUMBITCH TEXT TOO" at every opportunity. 
Do you seriously expect me to accept that as an honest assessment of enumerated types? Literally, the next sentence: &gt; A variable that has been declared as having an enumerated type can be assigned any of the enumerators as a value. ... &gt; Also, note that I did not say enums are exactly like namedtuple, only that the extra keyword and type are unnecessary as it can already be expressed using namedtuple. What the fucking fuck? Look at the comment I responded to! &gt; namedtuple does ***exactly*** what enum does I'll never understand why people have to be so fucking vociferous. I can't believe I have to do this, but here's some code: &gt;&gt;&gt; from enum import Enum &gt;&gt;&gt; from collections import namedtuple &gt;&gt;&gt; EColors = Enum('EColors', 'red blue green') &gt;&gt;&gt; NColors = namedtuple('NColors', 'red blue green') &gt;&gt;&gt; type(EColors.red) &lt;enum 'EColors'&gt; &gt;&gt;&gt; obj = NColors(1, 2, 3) &gt;&gt;&gt; type(obj.red) &lt;type 'int'&gt; &gt; only that the extra keyword and type are unnecessary as it can already be expressed using namedtuple. That's very slippery of you! So now Enums are merely *expressible* as namedtuples, and that's why they shouldn't exist? Well, by that logic, anything more than the lambda calculus is unnecessary since anything can be expressed with it. &gt; Absolutely. List comprehensions are essentially an alternative expression of nested for loops. str v. unicode. StringIO v. cStringIO. pickle v. cPickle. anydbm v. dumbdbm v. gdbm v. dbm. argparse v optparse. thread v. threading v. multiprocessing. HTMLParser v htmlib, urllib v. urllib2, shall I go on? None of those things are exactly like the other. You can't have it both ways. Are enumerations exactly like namedtuples? No? Then don't fucking say they are. Do enumerations have a purpose other than "immutable named constant"? Yes! Just so we're clear: I'm undecided about whether enumerations should have been added. But that doesn't mean I go around spewing bullshit about what they are. QED. (Yeah, that's cute eh? Get off your damn high horse.)
&gt; Get off your damn high horse After you. 
These instructions for installing the various scientific python packages are a good example of how homebrew and pip work together: http://www.lowindata.com/2013/installing-scientific-python-on-mac-os-x/ for example, you use homebrew to install gfortran, then pip to install scipy. 
To each their own obviously but here's what I roll with: Homebrew, iTerm2 (w/ solarized light theme), Tmux (You'll need this patch http://robots.thoughtbot.com/post/19398560514/how-to-copy-and-paste-with-tmux-on-mac-os-x), Powerline, oh-my-zsh, SPF13 (https://github.com/spf13/spf13-vim) with a brew compiled VIm. If you have any trouble with anything feel free to message me.
&gt; patch together an IDE out of vim anyway [...] a proper dedicated IDE for the task at hand? What do you mean? What's vim lacking? Heck, it has one of the nice git integrations I've seen and a pretty useful diffing tool. 
This is partly true. Homebrew actually installs it stuff to /usr/local/Cellar and then symlinks them in /usr/local. It checks for conflicts before doing this and gives you options to choose which version you'd like to be there. In my personal experience, it's very rare I run into conflicts and when I have it's been because I've attempted to install multiple versions of something (say, python 2.6 and python 2.7 both using homebrew).
You can use either. Sometimes the dependencies are so complicated that using brew or port is just more convenient than pip. But pip and brew/port don't conflict, so that's no problem. Most of the time, there are a few dependencies that are easy enough to install, and then pip works fine. As for PyCharm vs Emacs vs Sublime Text vs Vim. I tried them all. For several months each. Emacs is my choice. I built my Emacs just the way I like it. It is a fusion of all my favorite work flows, where my note taking system lives right next to my publishing system, my REPL, my shell, and my revision control. No IDE can ever reach that kind of integration. 
This is a good setup, but having used both Sublime Text 2 and PyCharm, my own personal preference is towards PyCharm. For example, code completion is much better (it just works), it has good integration with Django, knows what a Virtual Env is (and can create new ones), and has a console runner. I'm the kind of person who likes the IDE to do as much for me as it can with as little pain on my part as possible. Sublime Text 2 can do some of these things, but requires a lot of fiddling with to get it there.
A fair critique. One negative is that a lot of supplementary materials that are presupposed by the book's form are not provided in the content.
That's the sort of thing you put in a review. :)
I think a lot of potential asides and supplementary exercises would be ancillary. imo, the book was better without them, since they could be easily found elsewhere, but this point should indeed be included in a review. Will do next time. Still highly recommend the book though. Edit: Judging from his website, it seems like the author is still putting these materials together. Maybe I'll contact him. 
I started off with fink back in the day, but I never had issues with ports. I guess I am the only one here who likes ports. I gave homebrew a shot once but was disappointed with a poor library of programs available compared to ports. With that said for python modules I use pip.
Vagrant is the way to go. The pretty bits of OSX working on a proper linux box.
Testing if argparse is parsing arguments correctly is already handled by the [upstream unit tests](http://hg.python.org/cpython/file/d6e35146ae53/Lib/test/test_argparse.py). Testing that `ping` does what it should when given certain arguments looks more like [functional testing](http://en.wikipedia.org/wiki/Functional_test) than [unit testing](http://en.wikipedia.org/wiki/Unit_testing), since if AWS or your server is having network issues, you will fail the test, even though the code is right. For a simple script, it's probably fine to have unit tests and functional tests intermixed, but for something more complex you'd want to use mock objects in the unit tests, and unit test during development, then do functional testing as part of your integration/deployment process.
&gt;&gt; a company producing tons of big data, demonstrates how AdRoll uses Python to squeeze every bit of performance out of a single high-end server &gt;Guido is probably reading this like: "That-... it's not supposed to do that" Why is there so much hatred for optimizing python code for speed? To quote from the zen of python: "Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity."
cool stuff, had an issue on windows though - seems to be related to events.key in the cube_interactive module which is showing up as alt+u instead of u. I'm a python newbie however, am using python 2.7
Homebrew, pip, virtualenv + virtualenvwrapper, pycharm. You're set.
This is true. I like to test the input to my CLI app as well though, because it's easy to get them wrong and end up with a broken interface. The approach I talk about in the post lends itself well to TDD, where you define an array of arrays - all the use cases you want to support. Then in your unit tests you can loop through that array and pass each item to parser.parse_args and work on your logic until the tests pass. I think for many CLI apps, it's best to test at more of a functional level because if AWS is down, your app is broken, at least for the moment. Your unit tests can all pass with mocks, but your app is still broken. So I don't know how useful mocked-out unit tests would be.
I use vim as both my default diff and my default pager, plus I have `set editing-mode vi` in my `~/.inputrc`.
I like sublime text over pycharm, but both are very nice. I like brew over ports. I had a lot of trouble getting rid of the stuff from ports when I wanted to clean it up; brew just works better for me. I would add a recommendation that you put all your source code onto a case-sensitive filesystem. By default, OSX is case-preserving, but case-insensitive. This can lead to problems where your code and your filesystem have mismatched case; you won't discover the bug until you're deployed under linux. 1. Use Disk Utility to create a new sparse disk image (Mac OSX extended, case-sensitive, journaled) 2. Mount the disk image, and write your code there 3. Optionally configure it to auto-mount when you reboot (System Preferences &gt; Login Items &gt; +, then add the .dmg) 4. Optionally put a symlink to the DMG in your home directory, to save some typing. 
I wasn't aware every Chinese person was a programmer.
[Tox](https://pypi.python.org/pypi/tox) is a really good tool to have in the chain as it handles virtualenvs, installs stuff, even your own as long as you serve a local pypi. Since it requires you to create all packaging scripts you get to the habit of doing it always. You can rig tox to run in a loop, so that if you just do a *soft* restart, code changes are picked up, or if you do *hard* restart it'll install everything added to the environment, too.
I never even considered doing it any other way as I was learning programming, and I was just a kid at the time. Granted, not everyone starts out like that, but at some point it just has to feel like a massive inconvenience to switch languages back and forth. The negatives far outweigh the positives. 
How does the create_parser() function return a parser object without any return statements?
&gt;I typically code with 240 columns. Oh my lord. As someone stuck maintaining this sort of shit, fuck you.
If you are developing in a Mac, chances are you want to utilize some of the OSX features, or that you like how it looks and behaves. So I'll assume you don't want to use VIM, EMACS or any other system agnostic tool. I'll also not recommend Sublime Text, Text Mate or any other tool to replace your IDE of choice. Since you are using PyCharm and virtual envs for each Project, I'll assume you want to have a few different Python versions. You should get them via Homebrew (it's a little bit cleaner than MacPorts - and try not to install both, It will mess up your system). You may then install everything for each env using PyCharm's tools. I believe PyCharm is an awesome tool, I've been using it for years and can't recommend enough. I will strongly suggest that you get iTerm2. I myself use it with zsh with oh-my-zsh and powerline, but since you could just install bash completions and be happy. The iTerm2 will make your life easy and it looks and behave almost like the OSX Terminal. I don't recommend going full VirtualBox/Vagrant if you want to still feel like using OSX, but otherwise go for it - they are well worthy. Also, you will mostly definitively want to install XCode Command Line Tools. Seriously, most of the weird problems you may face in OSX development can be solved by just installing it.
My native language is far from English and yet I disagree. Stick to English.
you may also want to look into Selenium web drivers
I generally think that if it can't be typed easily in a repeatable way on a standard keyboard then it's probably a bad idea. You also run into the problem of different unicode characters which get rendered the same on screen. How does a developer know which of the many different characters which look like "é" is supposed to be correct? 
It sounds like you haven't used it in awhile. Maybe you should give it another go. It can't pollute your filesystem because it's all in /opt/local and never installs outside of it. If you don't want its contents mixing into a manual compile/build you're doing, fix your PATH before you make - this is Compiling 101. It also has binary packages for just about everything in the catalog so who cares if it includes one, two, or even ten dependencies you didn't think it should - they all download and install instantly anyways. It also has port variants at install time that can often eliminate those dependencies you didn't want in the default install. It also has a post-install cleanup script where it will scan the /opt contents and discover left over files and broken dependencies and automatically correct it. Of the two, while MacPorts does seem to go overboard with default build options - it's currently a metric fuckton faster installing than Homebrew since Homebrew always has to compile. And I find Homebrew's desire to install into /usr/local *much* more of a filesystem pollutant than MacPorts. 
Building it from ST isn't that important, but the thing is that no venv = no packages to step through if I want to debug things, etc. 
But gui vim doesn't fit inside a tmux page. 
When was that? I've only found this missing from homebrew a couple of times (about the same as the AUR, which has shittons of packages), and it's really easy to add a new one. 
Few years back, what do you get when you do 'brew search | wc -l' ? &gt; port list | wc -l 17644
No. Why should there be? Your problem it's that you're confusing yourself by calling the first argument to the class method `self`. That implies an instance, but the value is not an instance, it's a class, which is why the convention for a class method is to call the argument `cls`. That makes it much more obvious that the only things you can do with it are class things, like instantiating an instance, not instance things like setting instance values.
Um, I have no idea what cls is! How do I use it?
`@classmethod` allows you to create what in other languages would be called "static methods." This means that the method is associated with the *type*, not an instance of the type. This is often used to namespace utility functions that don't operate on data stored in an instance. In Python, these should generally just be functions namespaced in a module, not on a class. e.g. in Java: public class Foo { public static void main(String[] args) { if (Math.abs(-3) == 3) { // true System.out.println("It's true"); } } } But in Python, `abs()` is just a function in the math module: import math math.abs(-3) == 3 # true However, there are cases where classmethods make sense. Your use as a factory seems OK, though really I'd prefer the clarity of just having people do `Foo(2, 2)` explicitly. Who can tell exactly what `same()` does without reading the source or the docs? In your examples, some confusion is caused by your use of `self` as the first argument to a classmethod. The canonical name for this argument is `cls`, to indicate that it's a reference to the type, i.e. the class itself, not to an instance of that class. If you have a classmethod like this: class Foo(object): @classmethod def bar(cls, x): cls.x = x Then, these two statements are exactly the same: Foo.bar(3) Foo.x = 3 It's also the same as this: class Foo(object): x = 3 These are very different from setting the property x of an instance of Foo, i.e.: f = Foo() f.x = 4 If you make x a property of the type, not an instance, then its value will be shared amongst all instances! # same Foo as the first example a = Foo() b = Foo() Foo.bar(3) print a.x # 3 print b.x # 3 Foo.bar(4) print a.x # 4 print b.x # 4 print Foo.x # 4 That's not what you mean. In your first block of code, your `same()` classmethod correctly creates an instance of the class with the correct instance variables set, then returns that instance. Your second block of code instead sets properties on the type, not on an instance. You could do this instead to make it more explicit: class Baz(object): @classmethod def same(cls, a): inst = cls() inst.a = a inst.b = a return inst 
Thanks mate! Is your last bit of code good practice or is there a better way of doing it?
I usually run the following to help out with my day: 1. [ControlPlane](http://www.controlplaneapp.com/) for context-aware automation 1. [AccessMenuBarApps](http://www.ortisoft.de/en/accessmenubarapps/) to access application icons in the menubar, hidden by MenuBarItems like "File", "Edit", etc 1. [Divvy](http://mizage.com/divvy/) for rapid window resizing/placement 1. I use terminal but am trying out [iTerm2](http://www.iterm2.com/#/section/home) as well, due to a recommendation from a good source 1. MacPorts, homebrew and pip to handle various installations 1. [TotalFinder](http://totalfinder.binaryage.com/) for tabbed finder windows 1. [MenuMeters](http://www.ragingmenace.com/software/menumeters/) for useful notifications on the menubar 1. [Growl](http://growl.info/) and [Hardware Growler](http://growl.info/documentation/hardwaregrowler.php) for info popups 1. [Geek Tool](http://projects.tynsoe.org/en/geektool/) as a conky-meets-cron (plus some event driven stuff) tool 1. [Airfoil](http://www.rogueamoeba.com/airfoil/) if you have a wireless audio setup 1. [Jack](http://www.jackosx.com/) and [SoundSource](https://www.macupdate.com/app/mac/11334/soundsource) for audio upmixing and quick-switching **EDIT**: All that was for my setup with Lion (10.7). I have since upgraded to Mavericks (I skipped Mountain Lion entirely) and have made some changes: 1. Scrap Total Finder, Mavericks does tabbed Finder windows 1. Scrap AccessMenuBarApplications (takes too much memory), and switch over to [Bartender](http://www.macbartender.com/) 1. [LineIn](http://www.rogueamoeba.com/freebies/) to play the Line-In input through speakers 1. Scrap Growl in favor of the built-in notifications system 1. Scrap SoundSource in favor of Audio Switcher [https://www.macupdate.com/app/mac/26433/audio-switcher](https://www.macupdate.com/app/mac/26433/audio-switcher) due to compatibility issues
No, your use of the constructor was fine. I just broke it out to make it clear what you were doing. However, I did add a bit in an edit at the top – in particular I'd prefer just doing `Foo(2,2)`, which is very obviously setting `a` and `b` to the same value, rather than making up a factory method called `same()` to do it. For more complex setup, maybe, but it's not really possible to understand what code using `f = Foo.same(2)` is doing without reading the docs, while `f = Foo(2,2)` is immediately clear. Imagine some kind of `Point()` class for graphing. What's more familiar and clear? p = Point.same(4) or p = Point(4,4) 
Yeah, I was just using same as a placeholder. Thanks!
That's one of the many reasons not to use Finder.
A lot less (2.4k), but doesn't macports package a bunch of stuff that's already packaged, like Python/Perl/Ruby/etc. modules? I don't really care how many things are in the packaging system; I just care if the things I want are in it.
I've seen a few posts about setting up various Python-coding environments, and when I stumbled on this blog post today when trying to remember ropemacs, I was happy to have discovered it and thought I might share it here for those who are (or want to be?) emacs users. I've always loved emacs but, of course, this is not meant as a slight on anything else anyone might use.
I don't really see why people need an IDE. I just have a terminal window open to run the program, and that's it.
That's just it, things I was looking for weren't in it. Maybe it's the type of work I do, I do a lot of DevOps type integration work. And in a pinch I often need a one off package. Number one selling point of a package system like Brew and Ports to me is to have a large enough library so I don't have to waste time compiling stuff myself.
&gt;Lines with a leading hashtag are comments. Goddammit. 
Don't use classmethods unless you need them, and if you don't understand them, you don't need them. Java needs static methods because it is deliberately crippled. Python does not.
I just quickly skimmed over it. Seems quite readable. You could use *way* less comments as the code is mostly self-explanatory. Really, remove 95% of them.
Actually, unless there's circular referencing going on, the `15` value isn't garbage collected, but reference-counted, which means that it will be freed immediately. However, that doesn't mean that its value will be overwritten before being freed. It's very likely that this value will stay in memory for a while. EDIT: "freed immediately", if there's no other binding to that `15` value, of course.
"cls" is actually an arbitrary symbol name, some people write it "klass" instead (because "class" is a reserved word). I prefer cls. Where the first argument in an instance method declaration is an instance ("self"), the first argument to a class method is the class. Unfortunately you can still call the first arg "self" if you wish and it will not complain... You could also call it 'tater_tots', but it will always be a reference to the class and never an instance. You use class methods for: - mainly for alternate constructors besides `__init__` - any other method for the class that must interact with the class itself For example, in the alternate constructor scenario, maybe you have a Person class which can create person instances, but you also want a class method which creates two people who are friends: class Person(object): def __init__(self, name='', friends=[]): self.name = name self.friends = friends self._id = uuid() @classmethod def instantiate_as_friends(cls, p1_name='', p2_name=''): p1 = cls(name=p1_name) p2 = cls(name=p2_name) p1.friends.append(p2._id) p2.firends.append(p1._id) return (p1, p2) So you could create a person with bob = Person(name='bob') and you could create a set of friends with bill, alice = Person.instantiate_as_friends(p1_name='bill', p2_name='alice') Notice that in the class method instantiate_as_friends(), 'cls' receives a reference to the class, in this case Person, and so in the line &gt; p1 = cls(name=p1_name) What is happening is p1 = Person(name=p1_name) If you can grock that, you realize the first arg for class methods isn't self (a reference to the instance), it's cls (a reference to the class). Hopefully that not only answers what cls is, it should clear up most confusion about what class methods are / are for. ---- Edit: Thanks ! me, generous_gilder = Person.instantiate_as_friends(p1_name="Yours Truly", p2_name="Kind Sir or Madam") 
In security is what you want, you need absolute control of when and how memory is allocated. Python, as awesome as the language is, does not give you this control. Because Python is garbage collected it will decide when it should clean up a variable. The most secure thing you can do is to write an extension in C which should: * give you complete control over memory allocation and access * ~~obfuscate the sensitive source code (keep in mind, nothing can save you from an expert reverse engineer)~~ (See replies below. From a security engineering perspective, this is a pretty useless pointer when time should be spent elsewhere) That said, Python provides a fair amount of access to the internals so you still have to be mindful of the code you're writing but del won't clean things up like you expect. There's actually some good info on what del does [in the docs](http://docs.python.org/2/reference/datamodel.html#object.__del__).
&gt; and the interpreter feels like it When there is no circular reference involved, the reference counter correctly reaches 0 when the last binding of a value goes out of scope, and the value is freed immediately, not when the interpreter feels like it.
I'm going to provide feedback for your code but I entirely disagree what you're trying to do. My opinion is you should be extending existing code instead of rolling your own. At the very least **someone else's library should be parsing and reading the files**. Sorry, I'm being a bit of a pain here: * use new style classes * add a setup.py * follow PEP8 names and style guidelines * don't include words in a function that just reexplain what it does (def addKeyValuePair( self, key, value ) -&gt; def add(self, key, value)) * do not allow method calls to change the class state (parseSettingsFile) * rewrite the tests to use unittest instead of nose since you're not using anything special from nose * if you want other people to use this, please use 4 spaces instead of tabs * add some internal assertions such as "assert isfile(settingsFile)" so you can catch problems early and fail early * do not use readlines(), iterate over the file stream (can't wait to throw a multi-GB file at this) * use variables to store results from things like "var.strip().lower()" instead of doing it within an if statement since you're doing it multiple times * never expect that input from a user will be exactly as you expect it so be careful with things like '"if '=' in curLine" 
tl;dr: del removes the *reference* (i.e., the variable). If the object is referenced somewhere else (barring weakrefs), it will **not** be removed from memory. For instance: a = Foo() b = a del a In the above instance, the `Foo` instance is still in memory.
For any beginners wondering whether or not they should bother learning about `yield` and generators, I put it to you that generators are one of the coolest Python features ... ever.
That is only the case for CPython where reference counting is used. It is not the case for other Python implementations which use a more traditional garbage collection system such as pypy. Either way, the actual memory isn't reset to any default value anyway and the original value can still exist in part in memory while ever it sits in memory free lists and isn't reallocated and overwritten by a new value.
Phantom is your friend!
If the information is too sensitive to trust to the garbage collector, it's too sensitive to trust to any part of the computer.
Selenium is able to execute javascript, you should be able to get the contents with it, you just have to wait until the javascript has finished running.
Thanks! This is definitely something I haven't tried yet. Time to get myself a javascript hat...
I tried this approach, but I wasn't able to get it to work for me. That may be my complete lack of javascript skills though... Any other hints? I'll check it out again.
If I would have to guess, you did not wait until the javascript has finished. Browser automation and javascript is a big mess of race conditions, you have to explicitly tell Selenium to wait, before you access the contents of the DOM. To make matters worse, there is no such thing as "wait until js finishes", you can do 2 things: 1. Wait X seconds, for everything to settle, this is brittle, because if the network is slow your script will fail, but good as a quick solution 2. Find an element that is rendered with javascript, and wait until that element is present in the DOM. I'm not familiar with Python's Selenium lib (only worked with the PHP one), but it should have some kind of waitUntil() method that accepts a callback, and waits until it returns true. In the callback, check for the presence of a javascript rendered element.
This tutorial is in a serious need of an update. Emacs now has a built in color theme engine and package management.
Try using "h5dump -H" and compare the headers of the 2 files. I've never heard of those file formats and have never used VisIt (heard of it thought), but when you want to start with the basics this should help. It should be easy to compare data types and shapes. I could also be wrong, but I think you want to store your array as (n,6) so that the number of particles is the fastest changing dimension (but this all depends on how VisIt reads it and how the proprietary files looked).
Go from this: def main(): parser = create_parser() args = parser.parse_args() ping(args.tags, args.region, args.ami) if __name__ == '__main__': main() To this: def main(args): parser = create_parser() params = parser.parse_args(args) ping(params.tags, params.region, params.ami) if __name__ == '__main__': main(sys.argv[1:]) # Ignore script name (not necessary with argparse, but just for form) Then in your unit tests: def test_foo_bar_baz(): sys.stdout = StringIO() myscript.main(['foo', 'bar', 'baz']) expected = '...' actual = sys.stdout.getvalue() assert actual == expected, actual Optimally, use mock module, and patch sys.stdout.
&gt; obfuscate the sensitive source code (keep in mind, nothing can save you from an expert reverse engineer) While I agree with most of your post, security through obscurity does not work, and I don't think it should be encouraged as it will lead to a false sense of security. It doesn't take an expert reverse engineer to figure out what the code is doing. Any script kiddie with access to ``objdump`` and a basic familiarity with assembly language can figure it out. And as you point out, the correct solution is handling the data securely *in memory*.
I would think data centers would not be employing single 64K core supercomputers, while large research institutions would.
`x = 2` When is `2` freed in CPython?
Never, because it's one of those often-used-int optimizations, like `15` is. But if it was an int &gt; 100, it would be freed as soon as `x` goes out of scope, unless the same value is bound elsewhere before that happens.
Good catch. I took the code from an app I wrote an generalized it; missed this line. Thank you, the post is now updated.
I get where you're going with this, but this solution seems less clear to me. Using StringIO and sys.stdout is harder to read, in my opinion. I know the level of abstraction you use depends on your team though; the approach I used in the post fits the teams I've worked on.
Syntax highlighting please.
Good point and I probably should have made that more clear by just talking about the in memory setup. Reply edited above. I've found obfuscation does work in certain scenarios depending on what someone's motivations are for wanting to look at your code. But, you're absolutely right that at best it's only going to slow someone down and possibly not even to a degree which would be useful.
&gt;2) I can find-and-replace variables or function names throughout the whole module I'm working on (pretty powerful). You can do this out of the box with emacs. See for instance [here](http://stackoverflow.com/questions/270930/using-emacs-to-recursively-find-and-replace-in-text-files-not-already-open). Auto complete, documentation and things like that are nice to have more built in. Of course you can always fire up an eshell or xterm, or your favorite emacs built-in shell and use that for a python interpreter. I agree that Ipython is much nicer. I'm wondering if Jedi isn't a better choice for autocompletion at this point though. 
sure, its fine. Why not use the built in one? http://docs.python.org/2/library/configparser.html
As someone who recently started a game using libgdx this is exciting. I would much rather write my game in Python than I would in Java. Do you know of any major hangups one would run into using Python and libgdx instead of just using Java?
Awesome. Look forward to the enum feature. On a side note: "PEP 445, a new C API for implementing custom memory allocators" Cool! Explosives *and* fire to play with!
&gt; Using StringIO and sys.stdout is harder to read, in my opinion. Right, I'd recommend using the [mock](http://www.voidspace.org.uk/python/mock/) library and patching `sys.stdout` in practice. The example was just for brevity. I also use a suite of integration tests with test files and golden output to compare against, but this isn't suited to unit testing IMO.
really cool, but i have to say the screenshot listed on the cheeseshop looks like its from a 1980's film where they emphasize hacking or some other thing
Most elegant, I would say.
That stack overflow post is pretty cool. It uses regex? I was wondering if below the surface the ropemacs find-and-replace was also regex oriented because if there's no greater magic than that I could also do it with Linux tools.
Future world problems... (w.r.t. a few decades ago)
Sure, you definitely don't need a text editor or an ide to do a find and replace of a phrase in a directory. You just need sed and something like find . -name '*' | xarags sed w/e or maybe exec, there's lot of stuff on superuser and stackoverflow about doing this sort of thing. 
Read the SO answer this whole thing was yanked from: http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained
Blogspam, the original [SO answer](http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained) is about ten times easier to read.
I feel like you can probably just use jythonc to elimnate the need for jython.jar to be included. I don't think performance would see a difference, unless the code generated by jythonc is really inefficient.
You're better off just changing the value of x and then deleting if you want. Then again, you probably shouldn't be using Python to develop sensitive code. It's quite easy to decompile.
You probably want a `list` of enemies. What you will do is have it say, instead of: if Target == 'BadGuy1' or Target == 'badguy1' or Target == '1': You would be doing something like: target_number = int(Target) - 1 if enemies[target_number].health &lt;= 0: print("he dead dood.") [...] else: [...] Note that if you do `int(Target)` it means they need to put in just the number of the baddie, or you'll need something more sophisticated to handle the 'BadGuy1' sort of input. To start your list you just do something like: enemies = [] enemies.append(Enemy([...])) Hope that helps.
Actually, `@staticmethod` is the equivalent of static methods in Java or other languages. In Python, a class method can be considered the same thing as a static method, but the first parameter passed to the method is the class object itself, and so you can interact with other class-level attributes and methods; oftentimes the constructor. To do the namespacing you're talking about, you would use a static method. That also lets you completely omit any `self` or `cls` in the function signature; you can write it identical to a normal function. Static methods are generally recommended against in Python (you should usually just use a module instead). Class methods are useful, though, for providing "alternate constructor methods" instead of typical constructor overloading as is done in Java. So you can have `Person()` or a class method `Person.from_record(record)` as two different ways of constructing a new `Person` object.
I used Emacs for 25 years. I tried PyCharm and it took me away. I still use Emacs as a layer about the shell and for quick editing tasks. But PyCharm is aptly named and well worth every penny. 
Where's tulip?
Yeah, given that there's essentially zero reason to use staticmethods, I wanted to avoid the confusion of the discussion. The "overloaded constructor" pattern is exactly what the OP's attempting here with his `same()` factory method, though, as I mentioned, I'd avoid such a technique unless the setup needed were truly complicated enough to warrant the opacity of an alternate constructor. 
Guido's hoping to add it in before the final release of 3.4 . Whether it gets in before the deadline or not remains to be seen. (A PEP hasn't even been drafted yet)
&gt; It's quite easy to decompile. It's an interpreted script. Unless you're packing the .pyc/pyo files without the source code, it's not compiled. And the only thing the pyc files do is save space, by removing useless stuff/docstrings, and running marshal on it. (iirc)
When/if you the the chance, please post the performance results.
pyc files are "compiled" byte code in the form of code objects. Docstrings have to be included in a pyc or you be able to see call the __ doc __ method. I assumed that the OP would use something like pyInstaller. You can still extract the source code. Dropbox's source code has actually been decompiled. http://asfws12.files.wordpress.com/2012/11/dropbox-asfws-version.pdf
Maybe you should switch to Windows
If you don't mind dependencies, checkout the library pandas, specifically the function read_csv
If you already have the cvs open just use readlines() then iterate over the list that is returned. split that list by ',' and iterate over the new element list appending each element to an array. That's probably the simplest way to go about it. 
Oh, you're right. I forgot.
the answer is here http://docs.python.org/2/library/csv.html 
Love it. One minor suggestion, though. The docstring to the *fermat* function should really say something like "This docstring is too small to explain how I tested the function" :):)
does answer #2 on [this](http://stackoverflow.com/questions/6483489/change-the-color-of-all-pixels-with-another-color) page get you want you want?
I'm new to all this so sadly no, i'm only a beginner in programming, was wondering if someone could write me a program and explain the program itself. But thank you very much for trying to help me out, but i feel that still doesn't help me at all :( If it makes any difference i'm using JES 4.3 Jython environment for students
Quick question: Are you indian?
I've found [jedi](http://tkf.github.io/emacs-jedi/) to be better than pure auto-complete, as jedi understands the underlying objects and python semantics. In my experience auto-complete will just present anything that it can find in recent buffers regardless of context.
No sir, German
my remarks in the comments below. def watermark(): for px in getPixels(picture): # I don't know what getPixels returns, are you sure it's a list? is picture a global variable? where does it come from? red=getRed(px) green=getGreen(px) blue=getBlue(px) newRed=(((((x8)(y4)0.1)%(scale+1))+oldRed)/(255+scale))*255 #oldRed is not defined, but a variable with name red is. Use either red or rename red above to oldRed newGreen=(((((x6)(y1)0.1)%(scale+1))+oldGreen)/(255+scale))*255 #oldGreen is not defined, but a variable with name green is. Use either green or rename green above to oldGreen newBlue=(((((x7)(y3)0.1)% (scale+1))+oldBlue)/(255+scale))*255 #oldBlue is not defined, but a variable with name blue is. Use either blue or rename blue above to oldBlue setColor(px,makeColor) # makeColor is a function or a variable? in any case it's not clear what this should be for this pixel, if it's a function you should pass arguments to it? if it's a variable, you should create it first from the above variables? PS: prefix your code with 4 spaces to make reddit treat it as code, which is a whole lot more readable :)
Go easy on the guy. That's the 5th sentence in a 5-sentence description. Ain't nobody got time for that.
A scripting language is generally one which configures the operating system or an application, and calls on parts of the OS and other applications to perform tasks. In other words, as Wikipedia says: &gt; A scripting language or script language is a programming language that supports the writing of scripts, programs written for a special runtime environment that can interpret and automate the execution of tasks which could alternatively be executed one-by-one by a human operator. Python as a scripting language, therefore, tends to suck, as very few OS-/application-specific tools have Python APIs. Therefore, you often have to roll your own using low-level libraries, and it generally looks rather ugly. Personally, even if Python had Pythonic APIs to everything under the sun, I'd still prefer Powershell over it. Powershell's syntax, tools and object model maps better to Windows and most Windows applications, IMHO. (Plus, built-in - as in language-supported - remote execution is amazingly useful.) OTOH, Python as a programming language, or as a language for doing brand new things, rather than scripting existing processes, is awesome.
Single dispatch.. *are you fucking kidding me*? EDIT: The line of thinking is: is this *really* necessary? Why are we adding yet more stuff to the language?
Bump any help is greatly appreciated
So, pudb [`install_requires`](https://github.com/inducer/pudb/blob/master/setup.py#L25) [`urwid`](https://pypi.python.org/pypi/urwid), which utilizes [`ncurses`](https://en.wikipedia.org/wiki/Ncurses), which works over telnet and rlogin.
What is the problem?
I took the advice of barowski and tried to fix my code, i'm still getting errors but i feel i'm getting close http://i.imgur.com/wGWMScJ.png
You make a good point about Python not being just a scripting language. However, Powershell is still a *shell* scripting language. It's like a cutdown version of the original [Bourne Shell](http://en.wikipedia.org/wiki/Bourne_shell), with a cutdown version of [ssh](http://en.wikipedia.org/wiki/Secure_Shell) also built-in. When you talk about using Python as a 'scripting language', what you actually describe is using it as a '*shell* scripting language'. The world of scripting is vastly bigger than the world of what you describe, shell scripting. The problem I was originally trying to point out was the apples vs oranges comparison of Powershell (Shell scripting language) vs Python (general purpose language). Or shovel vs hand, to get a little more metaphorical.
I havent made anything substantial, but ill definitely look into it!
Maybe you should explain before you make unrationalized thoughts
Horizon is the dashboard component of the openstack, which is built on top of Django. Horizon interacts with different modules like cinder, through APIs, fetches data, and shows it in the tables. Horizon is Django, but it needs to interact with other components to display data and perform other operations. 
So my error was X so i'm guessing i need to declare the variable in the code somewhere, i'm starting to get the hang of this
&gt; When you talk about using Python as a 'scripting language', what you actually describe is using it as a 'shell scripting language'. No, because that is not how the term "scripting language" is defined. A scripting language is, seriously, a language which is usually used to configure and manage other systems. The use of "scripting language" to refer to languages like Python, Javascript, and similar, is incorrect. While with the correct bindings they can be used to write scripts, they are not designed with this in mind, with most of the features in these languages being designed to make developing full-fledged programs easier. The correct term for them is "interpreted language". A shell scripting language is simply a scripting language which is designed to be used with, and is usually interacted with via, an interactive shell. Powershell falls into this category, but Lua, while being a scripting language - it is usually used for configuring larger programs - does not. &gt; It's like a cutdown version of the original Bourne Shell, with a cutdown version of ssh also built-in. I believe this is incorrect. It isn't cutdown in the slightest. It has many features that bash does not have - an object-oriented focus, functional-style constructs like Foreach-Object, and remote execution built into the operating system and language - that make sense in a Windows environment, while removing much of the process management stuff that does not make sense. Specifically, in a Windows environment, most system and application management is performed by sending requests to already-running services, and receiving objects in response. This isn't a new thing; that's how Windows has worked since the Win95 days. Powershell is designed for that. In a Linux environment, most system and application management is performed by managing text files, and running processes or sending signals to processes to read and process those text files. Bash is designed for that. Mapping bash onto Windows would feel as unnatural as mapping Powershell onto Linux. They both deal with entirely different abstractions.
IOW, when the interpreter feels like it. 
No. *You* control when `x` goes out of scope, not the interpreter.
`oldRed` is defined *inside* the `def watermark` function and does not exist at the outside scope when you use it in the `setColor` But looking at the code, I think you just need to indent the three comment lines and the three `setColor` calls to line up with the rest of the `for` body. tl;dr: Indenting is wrong. 
I did that, do you mean something like this? http://i.imgur.com/ajyZi6u.png It seems to start the code, but when i typed in pickAFile() file"Address of file" picture="address of file" i got that error Thanks for the fast reply
D'oh, looks like the urwid module dependency requires a unix-like OS to run. Does anyone know any similar visual debuggers for python that can run on windows?
Is this what you meant about indent the comments and everything else? http://i.imgur.com/jcqRo5R.png
It is the way of life. It is easy to add things. It is very hard to know what to do without.... 
Yep, that indenting looks good. That'll fix your first problem. Next problem is in your formula. You use variables 'x' and 'y', but you don't have an 'x' or 'y'. Without seeing the rest of the program, I'm not sure where you intend to provide them from. Edit: and 'scale' too p.s. You're not rude nor stupid, just somebody who is learning. S'ok. 
Well my question provides me of 3 lines, those 3 lines include 'x' and 'y' and scale, so what your saying now is i have to find a code to include 'x' and 'y' and scale, my god just when i thought i was learning :(
That worked my friend, now i just need to do something with the scale :), i wish i knew as much as some of the people on the python reddit as for what it says: The variable ‘scale’ always has the value 255. The variable ‘oldBlue’'oldred''oldgreen' should contain the current pixel’s original blue value.
Or any machine, really. Creating and destroying objects is *slow as balls*, compared to composing generators where everything can often be done in cache.
&gt; *The variable ‘scale’ always has the value 255* you could just put this before the `for` and after the `def`: SCALE = 255 # constant Interesting, however...where it's used in the formula `... % scale + 1` turns into: ... % 255 + 1 which is the same as: ... % 256 which is a magic number related to the possible values of `byte`. And since you're dealing with bytes in pixels ends up being....no scaling at all. (ie. for bytes, 256 is much the same as 0) 
Ok heres my second attempt to fix the bottom part of my code and so far been unlucky. http://i.imgur.com/op7xlm3.png
Indenting looks good to me. And you're correct about the setColor. First argument should be the pixel (as the error message hints) P.S. It's considered "proper" python form to use ALL CAPS for constants (actually that convention is common across most languages). It serves as a visual reminder that you intend to use that as a constant and not a variable, so maybe say: `SCALE = 255` instead of `scale = 255` 
I still seem to be getting this error, i change scale to SCALE like you suggested http://i.imgur.com/GtOao4u.png I don't know what it means by that error, it says it's the right type? was i not suppose to use setColor
I'm guessing you're using PIL (Python Image Library) and I'm not overly familiar with that, but... ``setColor()`` takes two arguments, a Pixel and a Color. In your screenshot you pass it a Pixel and a *number*. newRed, etc., are numbers you calculated. You'll need to take your newRed, etc. and turn it back into a Color. My guess is, it'll be something like: newColor = Color(newRed, newGreen, newBlue) setColor(px, newColor) 
This. The CSV format can get hairy quickly. I'd only attempt to parse if manually (file.readline().split(',')) if the data is very simple and you know there will be no commas in the data. Bonus: The csv module in also easily handles other delimiters, so for example you can use it for tab-delimited data using the same methods. 
Yeah that's my main problem apart from being a complete noob with programming, the error messages get me all confused, so if setColor wont let me use newRed etc, i need to get another code for that, so i'm guessing judging by my code, i have everything defined, ie i have my scale, my code to get a newred, i just need to define how to change all the pixels to the new red value i think i just confused myself again could i private message you the end product? so you can see what i'm suppose to achieve
Ok, i changed it all to newColor=Color(newRed, newGreen, newBlue) instead of setColor i'll let you know the results 
Okay but I'm talking about much larger numbers. I'm dealing with giant random numbers for cryptography.
&gt; [...] looks like the urwid module dependency requires a unix-like OS to run. * MingW, Cygwin, and GnuWin32 all support [n]curses * http://excess.org/urwid/docs/manual/displaymodules.html * https://bitbucket.org/devin.jeanpierre/urwid &gt; Does anyone know any similar visual debuggers for python that can run on windows? * http://stackoverflow.com/questions/16473278/python-visual-debugger/16474706#16474706 * http://redd.it/1drv59#c9tfxgd
Powershell is for Windows admins, SQL Server DBAs and positions of that ilk. It's useful for management and some automation, but not much else without effort. I use it for servers and database servers at work, but it's limited to those functions unless you want to spend a lot of time customizing your own modules in VS and C#. Python can be used as a programming language and a scripting language, plus it's cross platform. It works well on Windows for automation, data processing and as a general programming language. Plus you get all sorts of cool toys like IronPython, IPython and huge majority of libraries that work on Windows. (There's some stuff that's Linux/OS X only).
haha, i guess i just took it out because i saw error &gt; remove error, Easy way out fail :(
HOLY MOTHER OF GOD, IT WORKED, i actually feel like i understand whats going on now newColor=Color(newRed, newGreen, newBlue) setColor(px,newColor) so basically what i had wrong that you were trying to explain was, setColor only sets a color to a value ie:(220) so with newColor that sets everything to my code and setColor(px,newColor) {being px (all pixels????) and newColor (specified dthat as newRed,newGreen,newBlue) If thats a somewhat understand of programming i'll take it, you sir just gave me hope. If i wasn't a poor uni student i'd pay you
See now, didn't I tell you that the "lightbulb" moment is kinda fun? From how your described your confusion, sounds like you're still learning some fundamentals about what variable types are and such things. Don't worry, that is like learning the difference between screws, nails and staples. And slotted versus phillip screws, etc. It'll come pretty easy with practice. And it doesn't help that graphics programming has a bunch of non-obvious weirdness. ie. you'd have to know that a "pixel" is really a combination of several properties that are themselves composites of more basic numbers/values. Many libraries gloss over the specifics of "color" to make it easier for the programmer, but that can obscure what's really going on and confuse students. 
Raspberry Pi is a very attractive reason to learn python. They are so versatile and cheap!
That error could not be more clear. Read anything on variable scope. 
QWebView from PySide or PyQt.
Basically the interpreter is telling you that it cannot find the definition of setColor. If it is in another file, you need to import the function from that file. You also have the indentation issue mentioned by the others. You will have the same errors with getPixels and getRed... etc. They are methods that are not accessible. Maybe is picture.getPixels() and px.getRed() if they are defined in the object that you received. Also, setColor in the way it is used makes no sense to me. How would you be able to discern that it is supposed to set red or green? why would you need the old value in a setter? Maybe it should also be something like setRed, setGreen... and this looks like they belong to a pixel object. like.... px.setRed(newRed) 
I've used staticmethods to factor out private and/or utility methods that are very specific to the purpose of the class, but don't require any access to the class itself. I'm torn as to whether that's an appropriate use case, because it could be argued that such functions shouldn't be part of the class to begin with.
Yeah, functions in modules. I'd avoid using classes just for namespacing in Python. 
That's because ports has multiple versions of several packages (e.g., Python, Perl, Ruby), many packages are split (e.g., the documentation package is separate), and it includes packages already installed by OS X. A direct port/formula count doesn't really do either system justice.
Why not just edit the files directly? Vagrant maps your local file system tree into its VM.
I wonder why OP can't get SE to do the same
See these alternatives too: abiword --to=txt myfile.doc abiword --to=txt --to-name=output.txt myfile.doc
Thanks a bunch! Getting the csv open was pretty straightforward, unfortunately my brain told me there were 283758191038471 ways to do what I wanted and each one seemed excessively complicated for my problem and probably too bloated.
See I've read that and that's why I feel stupid for not seeing the obvious answer. Python is my first programming experience and I've only just started learning it, so I feel kind of incapable and helpless when I get lost so easily over things that should be easy.
That does seem sick, is that normal in python that quoting does not disturb the split function?
You can not say blogspam. Most people who follow my blog don't know about yield. And I have given the source at the end of the post and have even told in the beginning that the post is from SO.
Ahh ok, I'm not too familiar with the jython project, thanks.
can anyone summarize what is new (and what is good about it?)
This is an implementation detail. It's not guranteed when a value is freed or if it is freed by the interpreter at all.
I'm not sure why it's bothering you that data still hangs out in memory for a short time after you're done with it? If your attacker has gotten so far that they can look at the memory on your machine, you have already lost - indeed, they will have seen that number 15 _before_ you deleted it. You should be making completely sure that everything runs in memory, and that that memory is never saved to disk (which is non-trivial - you can turn off core dumps, but what about virtual memory?) and not worry about the few microseconds between `del` going off and the memory actually being freed and reused.
Mainly, because my Emacs instance calls out to system libraries, e.g. flake8. It may be a somewhat crazy constraint, but I try to insulate myself as much as possible from having to compile anything on Mac OS X. I'm much more comfortable with yum and other tools, and would rather depend on the GNU/Linux stack for day to day work.
&gt; 50 Mgs Say what?
How are you running the python programs? Double-clicking on the file or running from the terminal. It's been a long while since i used windows, but i do think it has problems with running programs from network drives, so the problem is probably not python-specific.
It looks like this doesn't use the traditional `.ini` file format; this is more like a list of constant names and values.
What exactly is your problem? Are you able to print the values on the CSV? Can you add them to a list? Are you having trouble creating the values from the list? for example i would first add all the values from the CSV to a list you can use the read line, or use a delimiter to separate values as othrs suggested earlier.. then do something like this..... #makes a list of list values that have the element next to it csv_list = ['blah', 'blah1', 'blah2', 'blah3','blah4','blah5'] result_list= [] for x in range(0, len(csv_list)-1): a = [csv_list[x],csv_list[x+1]] result_list.append(a) print result_list #prints [['blah', 'blah1'], ['blah1', 'blah2'], ['blah2', 'blah3'], ['blah3', 'blah4'], ['blah4', 'blah5']] Im not sure if this is what you want to accomplish when you say'read the first element store into variable a read the second element store into variable b etc. For each element' do you want a different variable for each element in the list? 
I'm really happy to see Pythonic libraries like TextBlob. It's sort of like "Natural language processing for humans". NLTK is nice, but it's hard for beginners to just take off with it and make something useful without first dealing with a lot of boilerplate. I know the term gets overused, but I really think we need more "X for humans." Or at least, "X for simple and idiomatic Python development."
Like others said, its loading the content dynamically. I looked at the network traffic using chrome and found an xml request that you could call directly to get the data you can't seem to find( warning, its long ): http://locator.safeway.com/ajax?&amp;xml_request=%3Crequest%3E%3Cappkey%3EC8EBB30E-9CDD-11E0-9770-6DB40E5AF53B%3C%2Fappkey%3E%3Cgeoip%3E1%3C%2Fgeoip%3E%3Cformdata+id%3D%22locatorsearch%22%3E%3Cdataview%3Estore_default%3C%2Fdataview%3E%3Cgeolocs%3E%3Cgeoloc%3E%3Caddressline%3E%3C%2Faddressline%3E%3Clongitude%3E%3C%2Flongitude%3E%3Clatitude%3E%3C%2Flatitude%3E%3C%2Fgeoloc%3E%3C%2Fgeolocs%3E%3Csearchradius%3E10%7C25%7C50%7C100%7C250%3C%2Fsearchradius%3E%3Cwhere%3E%3Cor%3E%3Cbakery%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fbakery%3E%3Cdeli%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fdeli%3E%3Cfloral%3E%3Ceq%3E%3C%2Feq%3E%3C%2Ffloral%3E%3Cliquor%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fliquor%3E%3Cmeat%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fmeat%3E%3Cpharmacy%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fpharmacy%3E%3Cproduce%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fproduce%3E%3Cjamba%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fjamba%3E%3Cseafood%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fseafood%3E%3Cstarbucks%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fstarbucks%3E%3Cvideo%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fvideo%3E%3Cfuelstation%3E%3Ceq%3E%3C%2Feq%3E%3C%2Ffuelstation%3E%3Cdryclean%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fdryclean%3E%3Csushi_bar%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fsushi_bar%3E%3Colive_bar%3E%3Ceq%3E%3C%2Feq%3E%3C%2Folive_bar%3E%3Cdigital%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fdigital%3E%3Cdvdplay_kiosk%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fdvdplay_kiosk%3E%3Ccoinmaster%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fcoinmaster%3E%3Chr_24paypump%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fhr_24paypump%3E%3Cwifi%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fwifi%3E%3Cbank%3E%3Ceq%3E%3C%2Feq%3E%3C%2Fbank%3E%3C%2For%3E%3Cclosed%3E%3Cdistinctfrom%3E1%3C%2Fdistinctfrom%3E%3C%2Fclosed%3E%3Cfuelparticipating%3E%3Cdistinctfrom%3E1%3C%2Fdistinctfrom%3E%3C%2Ffuelparticipating%3E%3Cbrandid%3E%3Cdistinctfrom%3E0%3C%2Fdistinctfrom%3E%3C%2Fbrandid%3E%3C%2Fwhere%3E%3C%2Fformdata%3E%3C%2Frequest%3E
Been there, done that. You can do this by COPYING the file to the network drive after you locally WRITE the file. Don't ever try to WRITE the file to a network drive. Edit: You COULD also have a permission issue. And also keep in mind that operating system calls can be problematic when using network drives because the network drive may be running linux (python's os module works slightly differently for different linux).
You got that in Chrome? What did you use to find the xml request? This request looks like a list of store locations.
You right click anywhere in the window and select "inspect element", then there is a "Network" tab in the new window. Open that and reload the webpage. It will list everything that is downloaded in realtime. There's alot so I sorted it by Type and looked for xml or json data.
sounds like a permissions problem 
/r/jobs exists for general stuff (you'll want a better description) and there's 3 job boards on the right sidebar. Your local city might also have a jobs board. Both have been great for me in all sorts of hirings.
This job actually sounds pretty cool. 
I sorta wanted to start here because, well, I waste so much of my time on reddit, I thought I should try to get something out of it! :-D
I don't really see any gains over ConfigParser however.
Nitpick: if not value.find('%BASEDIR%') == -1: value = value.replace('%BASEDIR%', self.baseDirectory) What's the point of first checking if the string contains "%BASEDIR%" (iterating over the whole string) to see if you should call replace (iterating over the whole string)? Might as well just do value = value.replace('%BASEDIR%', self.baseDirectory)
Where exactly is this position?
* Telecommute/work from home.
I think you are over-thinking the whole problem. Why don't you just manage your requests yourself? Just have something like a bag (a dict, a set, an array, etc) of ongoing outbound requests. Before doing a new outbound request, you check if it is not already in your bag. If it is in your bag, you wait until it is not. Than you add it in your bag and remove it when you are done. If you want to be fancy, you can include a list of callbacks when your outbound request is done and call them for potential other waiting threads for that request. You might need to use some kind of critical region whenever you read or write in that bag.
Probably OT for this group, but have to say that's one of the best/most honest job postings I've seen. Love that you include downsides as well as upsides...
Oh, that totally would help so much. Is that just an easy thing to implement? 
Hey, Sounds like a fun gig. Half time == 20 hours a week? I assume you're also looking for someone who needs a job as well. I was thinking that I could do this on the weekends + after normal working hours. I use python to prototype some of my ideas after work anyways. I just think it would be amazing to work with a team on some problems in python (self-taught). Thanks for your responses
I had no idea `map` and `filter` were being replaced by `imap` and `ifilter`. This makes me feel warm and fuzzy inside. 
I'll also add that blog posts like these go a long way towards "humanizing" a library, as it were. I hope OP keeps 'em coming!
Agreed, this seems like the most sensible solution. Assuming this is being done with gevent greenlets, you could do something like this: p = Pool() def send_request(url): do_something(url) def search_pool(url): for job in p: if url in job.args: return job return None # no job found url = receive_request().url running_job = search_pool(url) if running_job: # tie this receive request to that job, which is being made to the same URL else: p.add(gevent.spawn(send_request, url)) You could do the same with threads or multiprocessing; the code would look very similar. Alternatively if you're going to have a lot of concurrent requests, most of the time, and expect to do frequent lookups, you could instead have a secondary dict that maps `{url: job}` for each URL, and then add each job to that dict in addition to the pool. That would be way more efficient for lookups. Depending on how up-to-date you need the responses to be and what kind of requesting you expect to see, this could also be both simpler and overall a lot faster if you simply cache the responses. This is most useful if you expect that the same URLs will probably be requested over and over as time goes on. Things might be somewhat slow if there are simultaneous requests made for the same URL before the cache has any entries, but any further requests, simultaneous or not, will hit the cache.
This would make much more sense!
Yeah, and you could use futures to simplify callback management and thread management drastically.
making a claim about something have a huge number of LOC is definitely an attack. Moreover, it's disingenuous to conflate codebase size with speed (especially b/c I'm guessing a good portion are tests). That said, SQLAlchemy can be slow. There, I said it.
On a separate note, have you tried using [Cython](http://cython.org/) at all? It can be a nice middle-ground between C code and Python code, particularly if you are either using loops or can statically type ahead of time. It's nearly the same as Python syntax, but also lets you access the Python C-ABI directly.
In a sense, the difference isn't actually that big. I always prefer functions to classes (if for no other reason than they are simpler). But classes really are just a big dict of functions and properties with special requirements for the first arguments and some special lookup syntax.
So is this a generator? Or are you supposed to use it as a dep?
Why not use the imgur API instead of regexes? http://api.imgur.com/ Why not use BeautifulSoup instead of regexes? Please for the love of all things decent use anything other than regexes!
I agree. Your shared drive is probably telling windows to not execute the file. You may be able to tick the executable option in the properties window. What file server are you using?
Thanks, I was initially going down that path but was hoping to avoid the locking stuff myself. It sounds like even with it, it's probably the way to go. Appreciate the feedback and sanity check guys!
Even if you also delted b, the data would still be there and just marked "unused". It may or may not be overwritten sometime later.
I just skimmed over the post but a few things jumped out at me: * __Don't use regex to parse HTML.__ * Use `argparse` to parse command line options. I imagine your code will break depending on whether someone does `python yourscript.py cats 100` or `./yourscript.py cats 100` * Why use `list(frozenset([]))` instead of `list(set([]))` ?
I often come across articles whereby folks rely on solr, pylucene, elasticsearch, etc. for indexing and searching. They are all great tools but I've found they can be too much of a dependency for smaller tasks. I've come across [Whoosh](http://pythonhosted.org/Whoosh/) sometime ago and it's been a great ride. The big thing for me is that it's not a server, it's a Python library and the index is held on disk (by default) which makes it so easy to deploy and work with. I really love it and I thought some folks round here might not know about it.
I appreciate it personally. I'm not subscribed to /r/jobs, so it's nice to find work that I would be interested in here on /r/python. :)
Could [sikuli](http://www.sikuli.org/) help?
https://github.com/kennethreitz/grequests Requests library built on gevent for async IO. The imap() function will yield the first successful response to your code.
Yes, Whoosh is very good. Kudos to Matt Chaput, its author. And shame on http://en.wikipedia.org/wiki/User:RHaworth , the wikinazi that deleted the Wikipedia page I created about it last year ( see: http://en.wikipedia.org/w/index.php?title=Special%3ALog&amp;type=delete&amp;user=&amp;page=whoosh&amp;year=&amp;month=-1&amp;tagfilter= ).
Yep, I can also recommend it!
I thought the *second* best answer on SO was much easier to comprehend 
Is there a way to run it as a server? I'm just wondering how to deploy it in a multiple web server scenario.
Is ExactTarget's stuff popular? Why was this posted here? Even then, you approached this with excessive hostility, making it really hard to accept your points. I'm sure code like this is live everywhere. At least you linked to specific bits of code, but man, you came off as a bit of a dick.
Love whoosh. [Here is module](https://github.com/mdipierro/web2py-haystack) for web2py that makes it easier to use Whoosh (and Solr) with the web2py Database Abstraction Layer (with or without web2py)
I saw a talk on Whoosh at last PyCon, and I've since implemented it in production. Works great! Ah, and here is the talk: [http://pyvideo.org/video/1788/whoosh-the-open-source-python-search-library](http://pyvideo.org/video/1788/whoosh-the-open-source-python-search-library)
I just discovered that the Haystack wrapper doesn't expose any Faceting features of Whoosh: if facets is not None: warnings.warn("Whoosh does not handle faceting.", Warning, stacklevel=2) So that was a little disappointing. Now I have to re-work a search page...
Some of the code simply isn't valid (returning from \_\_init__), so I guess it can't be live everywhere as it literally would not function.
Ain't that a coincidence? I was just studying this library while looking to make an internal search engine for my company's knowledgebase. Awesome to hear that it's a quality library.
Come back to me after sinking 5 hours of your morning into trying to understand a badly designed api, horrible client libraries to try to do a simple task. Someone needed to call them on it. Granted I probably was a complete dick but this just isn't even close to acceptable code from a company, especially one such as this. 
Sloooooooow. But it doesn't matter as long as your index isn't that big.
It's indeed slower but if your index is well designed and not absolutely massive, it's not really a big penalty either. I'm just stating this because your comment might make some people believe it's indeed really slow. I never had any issue from that side (but only small to medium projects).
Fun fact: reddit uses parts of whoosh to parse and restructure search queries before sending them off to the backend search system.
all through the docs there are claims of it being fast. Can someone point me to the details on this? For example. If I index all my mp3s (32359 of them atm) will that be slower than es? If so, how slow? Or is it tolerable. it's just weird that the docs is littered with claims of it being fast but no obvious elaborations on the claims. 
I honestly never found a proper benchmark and I can't tell if it exists. I think, as a library, it doesn't **feel** slow but I never tried on anything complex either (a database of around 600,000 json records).
Used it in a [small weekend project](https://github.com/jbaiter/hocrviewer) a few weeks back, loved it, very simple to use, good performance for the task.
well, I'm going to see how it holds up under the weight of my mighty music collection. :) 
This is just gevent-websocket.
What is with the Kickstarter? If you are going to self publish just do it via iBooks or one of the other digital services. If the book is good enough that would put cash in hand to have a paper copy printed. 
I've been using it in my blog for the last three years and I'm very happy with it.
From personal experience writing and using logs in complicated systems, I'd add the following: * All log lines need a time stamp, ideally millisecond or better precision. This will let you diagnose things like high-latency, slow DB calls, etc. * If the app is multi-threaded or otherwise parallel, every log line needs a thread/process/whatever ID Should be pretty obvious why... This way you can use grep or whatever to extract a single thread from a log file. * A unique ID for a transaction/request/object context is awesome. ID can even by multilevel like connection_id:request_id. As simple as a counter or a primary key. Again, this lets you easily extract a single context from a log and it avoids confusing two unrelated requests and going down a rabbit hole.
Writing a book takes quite a lot of time to do it right. I want to use my time wisely and not spend months writing a book that no one wants. From the comments I'm reading, there is a pent up demand for this kind of book. I could only know that by putting it up on Kickstarter to gauge the demand. Just asking people if you're interested in a book on Dataflow and Reactive Programming Systems is very different than asking if you are willing to spend $10 or $12 on the book. -Matt Carkci (Author) 
I have no problem with funding the book through Kickstarter, but why are you announcing this here? I don't see Python listed on your page, rather C# for the code samples. This seems to belong in /r/programming instead.
While it may be a good suggestion, it doesn't attempt to answer the OP's question.
Does Whoosh do partial word searches (find 'heating' when the query is 'heat')? I'm still trying to get that kind of search with Django/Haystack/ElasticSearch
how about combine server-sent-events into one module with this to do real time communication?
Notability can't be defined.
One reason I love Python is that its relatively new and takes the commonly accepted design principles and applies them to their tools. This logging module is great!
or ws4py -&gt; https://ws4py.readthedocs.org
Yes, so do I. It's so easy to get it running with Haystack.
Do you mean [N-grams](http://whoosh.readthedocs.org/en/latest/ngrams.html)?
Actually this is a task that any decent search engine should do when indexing: it's called [stemming](http://en.wikipedia.org/wiki/Stemming). And yes, Whoosh can do that.
Python is older than Java by a few years. But yes, it is a language for which you can still discover new and interesting things from time to time.
elasticsearch does stemming. haystack is probably not letting you use it. 
Not sure why he's recommending logger.error('msg', exc_info=True) when you have logger.exception('msg'), but otherwise a great article.
Correct. I can't seem to get the ngram search to work with Haystack/ElasticSearch, I may give it a try with Woosh.
Cool. Please do report :)
He did mention later that _"You can also call logger.exception(msg, *args)"_. Perhaps author wanted to show how to log traceback with any level message.
For what its worth, python programmer here who spends a lot of time splitting firewood, and it took a second before the title of this post clicked. 
You will get lots of friendly help over a r/learnpython as well. 
There's a ticket implementing it. Don't think it does the full range of facet types, and testing+haystack+whoosh seems to be a bit of a moving target at the moment, so I dunno if its merge-quality.
Isn't that what the logging config file is for? Or are you talking about configuring things dynamically, while things are running?
&gt;You can configure your logging system in Python code, but it is not flexible. I don't get this. It seems to me that it's *more* flexible to be using a Python file instead of a JSON or YAML file. It's not like we're writing C where a config change would require recompiling. I use Pelican for my blog, and I love that the configuration file is a Python file.
Well... Huh. I've never thought about loading _different_ configs, depending on what I'm trying to do. What I was thinking about was, like, a tiny script for doing my particular stuff with our libraries, with logging already initialized and configured, and then configuring the particular console logger, to show me what I'm interested in.
Awesome! My roommate and I usually have real heavy music going on at high volume. We generally can't hear if someone's at the door. So piezo sensor + RPi/BB Black/Arduino + Python (osxnotify) : Win Thanks a lot for this wonderful library
Haystack supports Whoosh out of the box, though I don't think it is recommended for production.
so... did you sign up for the QA?
Yes, whoosh can do it 
I've done a bit with logging and been frustrated when messages didn't show up. Now I know what I was doing wrong! Glad to have read it just for the disable_existing_loggers info.
compared to the rest of the crap that's posted in this subreddit. I appreciate knowing about this, vs someones github repo where they learend to use request to scrape imgur for cat pics. If data flow/reactive can be done in python, I think the selling point would possibly be a way around the GIL that gets everyons panties in a bunch. I guess you would know for sure, but it seems the book you are going to write is about patterns which in theory could be written in python(or anything) if someone desires. So there is some relevancy in my opinion as a programmer who programs should be interested in learning new ways to solve problems regardless of language implementation. 
I couldn't have said it better myself. You can learn dataflow without looking at any code at all... it is a computational model... but many find it easier to learn with code samples. I wanted to use a language that is general enough that anyone can understand it. Many of our backers have expressed interest in porting the sample code to their favorite language. So I expect we will have code samples in all major programming languages. -Matt Carkci
I like the Python logging module though I thought it did miss a console printing part to it. I created mine ([If anyone is interested](https://github.com/Diastro/Zeek/blob/master/src/modules/logger.py)) which basically just prints out to the console (based on the level)
I do something like this. First, a process uses the [watchdog](https://pypi.python.org/pypi/watchdog) module to watch the code and docs directories for changes. When the docs directory changes, I run a `subprocess.call` command to build the docs. When a file in the code directory changes, I run doctests on the changed file if it's a python file, and then run unit tests with [nose](http://nose.readthedocs.org/en/latest/) and the coverage module. subprocess.call(r'nosetests --with-cov --cov MyPackage --cov-report html --cov-config .coveragerc') This process runs in a terminal that is visible as I develop. I could also get it to spit out coverage info right there in the terminal, but I find that obscures the "are all unit/doc tests passing" info. Instead, I get a nice pretty HTML report of my code coverage, which is pinned as a tab in Firefox. There's also a Jenkins process that watches for repo commits, and runs unit/integration tests, but with the XML output that Jenkins plugins like.
That is what [StreamHandler](http://docs.python.org/2/library/logging.handlers.html#streamhandler) does.
To avoid any extra latency from logging operations, how do I log by sending multicast UDP packets to a syslog server ?
Broader language support is the next big milestone (I need help): https://github.com/sloria/TextBlob/issues/26
More info?
Ah, it's an API you have to use, got it, that would explain the animosity. Here I was thinking it was just some startups API you were ragging on.
When I'm done writing code and look it over I feel like I have way too many try-except blocks, logging statements, and if statements trying to make sure the program isn't broken. Would anyone be able to comment on this... Is this normal? Am I being overly cautious? Is my code just poorly designed? EDIT: Also, I typically don't use any catch-alls. I always have a directed thing that I'm trying to prevent and could see possibly happening.
I really needed this, and I didn't even know I needed it. Thanks.
It'd be wise not to ever rely on, or expect, this behavior to ever do anything. Interning is an implementation-specific detail. CPython does it, but as far as I'm aware pypy doesn't, for example.
&gt; In tests.py if you only include specific modules or methods then they are the only ones that will be counted. Instead you should include everything from every file: from utils.api import * from utils.data import * from utils.decorators import * from utils.encoding import * from utils.files import * from utils.serializers import * from utils.time import * from utils.titlecase import * That's a really good/obvious idea. I can do that.
It sounds like you don't need better logging, but a better way to view logs. Let everything log at the most verbosity possible, and grep or use a powerful viewer to get only the logs from the processes you care about at the verbosity you care about. I hate being in the situation where I want more verbose logging but knowing that I need to change a configuration setting and restart my process to get it. It should always be spitting out a low log level, even if my monitoring is only watching WARNING and above.
Yes, but the question was "in CPython", not "in Python".
There's also mechanize, easier to understand/throw something together than scrapy (though scrapy is a good option)
The hierarchical nature of well-implemented loggers is also really handy. If you have some packages `foo.bar`, `foo.baz`, and `foo.qux`, you can silence the entire `foo` logger, and that will also block logs from the subpackages.
[splinter](http://splinter.cobrateam.info/) is a really nice wrapper around selenium that'll let you specify your actions in code (and is usually used for web-app integration testing). If you install the [chrome driver](http://splinter.cobrateam.info/docs/drivers/chrome.html), then it'll just use your existing installation of chrome too. Your code would probably end up looking like something like this: from splinter import Browser with Browser() as browser: browser.visit(url) browser.fill('textbox', 'your text here') browser.find_by_name('Submit').click() copied_text = browser.find_by_id('results')[0].text 
No, the exception info is already attached. Using `exception` instead of `error` is moderately cleaner, but you absolutely do not need to capture and store the exception manually (i.e. with `as`). Doing so will make your logs unnecessarily verbose.
FWIW, 3.4.0a3 on my mac gets no such error.
how is this different from [falcon](https://github.com/rjpower/falcon/)? (this is an actual question, they both seem to do JIT for code with an appropriate decorator)
That sounds great if it works as advertised.
Logging statements are good. Keep those. If they're too verbose, just set the level to DEBUG and log away; unless you're literally logging every single line of code, no sane person will begrudge you for overly verbose debugging logs. As for the rest... try to write your functions so that you can describe their behavior without using the word "and." Keep everything within a function at the same level of abstraction. You call a function when you need an unrelated task performed. You wrap that function in a `try`/`except` block if you think that task might not actually make sense to perform right now, and (here's the money sentence) *if it doesn't make sense, you have an alternative planned*. It's sometimes common to re-raise a different exception. That's fine, but you need to make sure (A) allowing the caller to see the original exception would not be semantically reasonable and (B) the alternative exception *is* semantically reasonable. Basically, you should expose exceptions to the caller if and only if the caller was directly responsible for them (e.g. if the caller gives you something that's "supposed" to be iterable, you can *and should* just iterate over it and let them deal with the resulting `TypeError` if one is raised. They did pass an incorrect type to your function, after all, and you certainly don't know what to do about that.)
On windows you can even use **tail** / grep / etc on log files, if you install git-bash.
You'd use module `logging`: http://docs.python.org/3/howto/logging-cookbook.html#logging-cookbook
Hmm cool, I will need to check this out.
This looks good, but I want to keep it within python for smoother integration into a computational pipeline later, I would like to parse some text using python then use that as input to the webpage.
I too can speak to the difficulty that exists in working with ET and their APIs!!!
twill maybe?
We use it internally at our compnay for all of our browser-based testing. eg: filling out forms, simple javascript interactions, etc. Hasn't let us down yet (though our test coverage isn't great either haha).
BeautifulSoup will allow you to parse the page once you have the HTML, but you'll still going to need a way to get the data from the web, and post the data back to the server. (I heavily recommend [requests](http://docs.python-requests.org/en/latest/) if you're going to go this route)
&gt; Serving WebSockets in Python was really difficult. Was it? I believe [Tornado](http://www.tornadoweb.org/en/stable/websocket.html) or [ws4py](https://github.com/Lawouach/WebSocket-for-Python) aren't that hard. They just don't have people saying: &gt; I’m going to use the shit out of this. Is that a bad thing...
+1 for selenium on this one
I'm not sure. Even if I load the website myself and then manually save it to disk, it doesn't reopen with all of the info on it (if that makes sens). In other words, I can't even save the data I want manually.
That was impressive! And the code is not too long either. A very smart idea to try to use the GPU and image processing for this problem. I'm surprised it worked with the microphone recorded version, as with cheap microphones the frequency response is no where near perfect - but I guess it would just act as a sort of 'non-linear' down sampler. Does anybody know how programs like 'Shazam' solve the same problem?
selenium is super easy import selenium driver = webdriver.Firefox() url = 'google.com' driver.get(url) driver.find_element_by_name('query') # this works for id's, names, etc driver.send_keys('Whatever your tryna type') button = driver.find_element_by_name('button') button.click() i didnt test that but they have good docs too if you dont like selenium, theres also twill and phantomjs that you could try. I didnt like those tho. BeautifulSoup allows you to parse the information from a webpage, its definately the best for web scraping
It seems to me like you do not need to render the page. Are You sure that sending a post request to server not enough for you?
you actually just need a directory, so basicaly you can use anything you can mount. you can also use a custom storage - i've even seen a redis-storage somewhere on the internet
probably the whoosh.qparser and/or related modules
used it on a collection of about ~1.000.000 documents. it was pretty snappy but i think if you've got that times 10x-100x you could be better of with something more powerful
If you use `logging`, simply set the formatter to the pattern you need. Everything is available on [the standard log record](http://docs.python.org/2/library/logging.html#logrecord-attributes). [%(asctime)s] [%(funcName)s:%(lineno)d] %(message)s should be pretty close to what you want
It's a great project but I think it's one of the single-developer-project whereby features are slow to be added. I hope this thread has given it a little more exposure, it deserves it.
There are such viewers available, e.g. [logview](https://code.google.com/p/logview/).
Depending on your exact latency requirements, if you don't need a fully asynchronous solution, you might be able to use `SysLogHandler`, which uses UDP - for multicast you could subclass it, override `__init__.py` and set the appropriate multicast options on `self.socket` which is set by calling the superclass `__init__.py`.
&gt; syslog Here it is: http://docs.python.org/2/library/logging.handlers.html#sysloghandler This config should work logging: version: 1 formatters: syslog: format: '%(name)s: [%(process)d] [%(levelname)s] %(message)s' handlers: syslog: class: logging.handlers.SysLogHandler level: INFO formatter: syslog root: level: INFO handlers: - syslog 
&gt; The logging.config facilities allow different verbosities to be set for different loggers The problem is, I want to have different verbosities for different loggers _on a per-handler level_. For example, file handler logs everything at debug level, stdout stream handler logs only this and this logger at debug, the rest at info, except that logger which it logs at warning. I think it's possible to do with a custom filter, but I wonder why it's not done already in the standard library.
&gt; All log lines need a time stamp, ideally millisecond or better precision. You need slower function calls or fewer log messages. How do you process large log files? I'm assuming you don't just open them up in TextPad. Also, my understanding was that the time module isn't even accurate to the millisecond.
There is also [Pythran](https://github.com/serge-sans-paille/pythran). It would be nice to have a performance comparison of these frameworks.
True dat.
Sounds more like a networking issue really, what kind of environment is this in, home/corporate/etc. Have you tried different URLs or HTTPS (If HTTPS works could be a filtering issue)?
You could use http://redis.io/commands/setnx on a key based on the URL. Check your cache for a result, if no cache result, sue setnx, grab the data, insert into cache, delete the setnx lock.
I'm not comfortable enough to help a great library like TextBlob, but as I get more experience this will be the first thing I look at. Awesome work you're doing there.
It's worth noting that the author could cut his code in half by using [Requests](http://docs.python-requests.org/en/latest/).
You can [set verbosities on handlers](http://docs.python.org/2/library/logging.html#logging.Handler.setLevel) as well as loggers, and have been able to from the beginning. Filters are for when simple threshold levels aren't enough. The stdlib code handles the most common use cases, but other cases can be provided for using conventional extensibility mechanisms.
&gt; You can set verbosities on handlers But I have only two handlers attached to the root logger, like it is supposed to be. The point is to be able to set verbosity for a pair (handler, logger), so to speak. I know that it's doable via a filter, but I'm surprised that apparently it's not a common use case actually.
&gt; How do you process large log files? With GNU (starting from grep) or IPython. &gt; that the time module isn't even accurate to the millisecond On unixes it is. Even then it is still not the best way to do timing, but often good enough.
If you are open to not using python, consider phantomjs and casperjs 
Python 2.7 is pretty popular, 3 is new but gaining popularity as well. The Codecademy tutorials aren't bad. They don't cover some of the more advanced topics, like deltas or passing functions as parameters, bit they give you the basics. I hear really good things about Udemy as well. Also, StackOverflow.com has a several users asking this question, as well as the Python LinkedIn Groups, I suggest you check out those as well. But just stick to python for now instead of jython or cpython until you've learned the basics.
To learn Python, I recommend Zed Shaw's [Learn Python the Hard Way](http://learnpythonthehardway.org/). After working through that, you should have a fairly good grasp of the language. Then, look into [PyGame](http://www.pygame.org/docs/), it should help you a lot with your goal. It offers a not too complex API for doing things like drawing to the screen, handling user input or dealing with sound, i.e. stuff that you will absolutely have to deal with if you're planning to write any kind of graphical game. Katie Cunningham had a [nice series of blog posts about writing a 2D rogue-like with PyGame](http://therealkatie.net/blog/tags/pygame/) last year. It's not really a tutorial, but records her experiences with the library and coming up with the architecture, you can learn loads from that, especially if you're a beginner. You should be able to adopt a lot of it for your RPG. After that, you can take a look at the code of some of the [many RPGs created with PyGame](http://pygame.seul.org/tags/rpg) to get even more inspiration for your architecture and code. Concerning the different "versions" of Python, the commonly used versions are Python 2.x and Python 3.x. I generally recommend using Python 3, but some libraries still only support Python 2, so you will have to decide on a case-to-case basis what to use. However, the Zed Shaw book still uses Python 2, so you might want to start out with that :-) The differences between the two are not *that* huge, you should be able to adjust within a day or so after reading the changes. Concerning the other "versions" you listed, CPython is the default *implementation* of Python (written in C), i.e. the Virtual Machine that runs your code. There are some others like Jython (Java), IronPython (C#) or PyPy (Python... don't ask ;-) ). You will generally use CPython, as that is the most widely used implementation. Cython on the other hand, is a library that helps you to write external modules for Python with C.
This. You don't even need Python. Just inspect the request that is sent after submitting and use `curl`.
Or the new Selenium/webdriver built-in phantomjs integration
I feel I'm the only one in this community who doesn't like requests. I keep finding pernicious bugs with it. For instance, if you use it in a generator to stream content from a request and the connection dies, it doesn't clean up properly. You have to call close on the underlying socket but that's not done and it's not exposed to you. Not to mention, while the built in api (urllib, urllib2, etc.) is wicked funky, it doesn't actually take much more code to use than Requests. And, due to several weird cases with Requests, I've had the privilege of writing several snippets in both. 
Try [twill](http://twill.idyll.org/) if you don't have to deal with JavaScript web page.
I use selenium and python at work and I have done scripts from simple form submits to complicated pages with lots of javascript interaction where I had to fire javascript via selenium , get back results etc.. Selenium is a great tool.
[sikuli](http://www.sikuli.org/) may be the way to go. I had issues installing v1.0.1 on my mac so try out v1.0
I could definitely be a better citizen, thanks for reminding me. It's nice to see a project that is responsive to user feedback.
The entire source-code actually has less than 70 lines of code, [see line 15](https://github.com/kennethreitz/flask-sockets/blob/master/flask_sockets.py#L15) where it imports the GeventWebSocketWorker as the worker for the gunicorn, so yes, there is an async worker with gevent going on here. 
Brilliant website, though the fact that it's necessary is kind of a measure of how much the design of CBVs in Django is a fail
Lukasa, let me ask you a question. Why does Requests not raise an exception on 4xx errors? I had a convo with Kenneth about this a while ago and he was pretty adamant that it should not and if you disagree you don't know http. Well, every library I've used from jquery to the python built ins throws errors on 4xx codes. Having to call raise_for_status after every call is rather unfriendly, isn't it? 
Perhaps a small delay in between downloads so imgur doesn't freak out about a bot stealing all its bandwidth?
The short pithy answer is that 4XX errors are not exceptional. =) The longer, more accurate answer is that 4XX errors are _often_ not exceptional. HTTP status codes are intended to be acted upon. For example, plenty of APIs can and will return 4XX codes during normal operation (GitHub does, for instance). We've judged that throwing exceptions in these cases would be aggressively user hostile. As an example, if you throw an exception upon receipt of the response, you lose access to the response object unless you attach it to the exception object. That's definitely do-able, but it makes the API nasty: you now have to say that requests.get returns a Response object except on 4XX, when RequestsException.response has the response object. So, instead, we allow you to choose. If you want to throw an exception on 4XX you can, by calling `raise_for_status`. You can additionally log many many things about the exception before you throw it, as you have the response and request objects in hand. If you want to treat 4XX like any other status code, then you can handle it just like you normally would, instead of needing one path for 2XX and one path for 4XX. Does that seem clear?
That's ok, it's an easy thing to forget to do. I just like to remind people that they can get a bug in Requests fixed _way_ faster than a bug in the standard library just by opening the issue. =)
Also, check out /r/learnpython
Crystal clear, thanks for the explanation! I don't agree, but your explanation was clear. IMO, exception handling is there so you don't have to do status checking in your normal code flow. I can't imagine GitHub returning a 4xx status code and having the body of the request be usable as if it returned a 200. Sure, it contains *something*, but it probably contains something to do with why it couldn't do what you wanted it to do. (But I don't use GitHub's api so I don't know. I'm just speculating. If it returned a 4xx that contained usable data as in a 200 status, I'd think that's weird) Your alternative about attaching the request object to the exception seems reasonable to me and not nasty. But I understand. Different strokes for different folks. Thanks for taking the time to explain it. 
I recommend this course. https://www.udacity.com/course/cs101 Not directly for games but for python. Covers all the basic, pretty entertaining, skip the intermediate things between the lessons if you don't like them.
This is totally from my own experience: I found myself using Pandas pivot's [stack()/untack()](http://pandas.pydata.org/pandas-docs/stable/reshaping.html) methods for dataframe reshaping quite often, and I have seen several people asked for it on Stackoverflow. It would be nice if you could include it in your cheatsheet. 
I can't recommend www.codeacademy.com enough! Unlike Learn Python the Hard Way, you actually will learn about the syntax of the code and how to begin learning to program as opposed to just typing in code and trying to figure out what it is doing.
to be honest, I do not understand why some people downvote it. You might like it, you might not, it might be useful it might be useless, but one way or another, this is someones hard work. This is always *much* more interesting than reading someone's opinion on a subject.
The main way to use returned tuples is like so: x,y = player.get_future_position() So when you return it as a tuple, the order remains the same. Returning as a dictionary means you lose the order, making the above code not work. In fact, there's no easy way to assign the return values to new values using dictionaries. If there is, give it a try. I like readability, and I like the idea, but namedtuples might be better for you as they maintain order (iirc), allowing the above code to work.
Interesting project, still trying to understand how it's different from Numba though, which I thought also supported NumPy arrays. I did try using Numba in a real project recently though and it choked on some straightforward NumPy code. Might be worth seeing if this fares any better. BTW why is it necessary for Parakeet to do its own optimization? I thought optimization was built into LLVM (I'm a bit ignorant about most of these things)? 
Once you've got your Python-fu down, you might want to check out libtcod. Guy wrote it a while back so he could do a roguelike game, and has been supporting and extending it ever since. It has the ability to do tile-based games in addition to the more old-school text games. http://doryen.eptalys.net/libtcod/
Thanks. I guess my main thing which I'm still not clear on is what is the expected or recommended way to combine conda and pip (or rather, PyPi hosted) packages, since several methods appear to be possible. Is it to use pip separately or is it to use a conda command to create a conda package and use that? If the former, since conda doesn't use virtualenv (unless I'm mis-reading), it seems my pip packages need to be installed globally, is that right? If the latter, with conda, your site mentions creating [skeleton recipes](http://docs.continuum.io/conda/commands/skeleton.html) from packages on PyPi. A recipe is defined [here](http://docs.continuum.io/conda/build.html) but I can't find out what a skeleton recipe is. Sorry for all the questions, I'm not trying to be difficult I am just having a hard time understanding how it all fits together and I might not be the only one. I've also just read your discussions [here](https://github.com/ContinuumIO/conda/issues/224) and [here](https://github.com/ContinuumIO/conda/issues/72) GitHub but that didn't clarify things for me. Thanks
CodeAcademy is great for the earlier stuff but it really starts getting less useful and even downright annoying in the later chapters- testing the user on things CodeAcademy never taught, bugging out and refusing to accept standard solutions to problems, and not providing the user with the same level of guidance/help that makes the earlier levels so useful. These days I recommend CodeAcademy as a supplement to something else, like Learn Python The Hard Way, Python for Absolute Beginners, the MIT python course, etc.
namedtuples, thanks! I forgot that they existed. That solves the readability issue quite nicely I think; I wonder if there's a reason they don't appear to be used in SciPy as much as they could be. That leaves the issue of flexibility in changing the API. I think I wasn't very clear above, sorry: I precisely wish to lose the order in which values are returned as I feel that it isn't very clear. After all, if I told you only that *get_future_position()* returned a Point, how do you know which of the below you should use? &gt;&gt;&gt; x, y = player.get_future_position() &gt;&gt;&gt; y, x = player.get_future_position() In this case, we're lucky, because the convention worldwide is to use (x, y) and so we can reasonably assume the first. However, as a contrived example, suppose that you one day decided to enable support for 3 dimensions, and so instead of return x, y you'd have return x, y, z Because you had used tuples instead of dictionaries, this would be a violation of the API contract, you'd throw ValueError since there were now too many values to unpack, even if they didn't care about the z and never would. If however you had used a dictionary, and their code would then look like... &gt;&gt;&gt; pos = player.get_future_position() &gt;&gt;&gt; x, y = [pos[c] for c in ['x', 'y']] then their code would continue to work. This is targeted more towards the scipy-stack and using Python for crunching numbers interactively, since that's usually when the API may return more than you care about. Thoughts? Side-note: I find the list comprehension readable, but it could be better if we could do &gt;&gt;&gt; x, y = [pos[c] for c in ['x', 'y'] with player.get_future_position() as pos] or something similar; as it is there's no way to tell Python that we want to just call *player.get_future_position()* once at the beginning and use it for all subsequent loop iterations.
LLVM does low-level optimizations that don't really work very well for a dynamic language like python. You get good assembler code, but you need to feed it something already optimized (as the unladen swallow team learned the hard way)
I second this. Its a really good course. I took it, and now I am doing a full python project in it.
This comment listed the best resources I can think of. I just want to add to OP, whether your intention is to learn Python, or to write the game. While python is an awesome language, and pygame makes it an even more awesome language to write games, depending on the kind of games you want to write, you should look into other options, for example, if you want to be able to run your games on different platforms, you could look into monogame or cocos2d-x. That aside, if what you want is to learn the concepts and techniques of programming to develop a game, I can't think of a better language to use other than Python. :)
&gt; LLVM does low-level optimizations that don't really work very well for a dynamic language But numeric code tends to be fairly static though, right? Not knowing much in this area, it sounds like it would be better to focus on improving LLVM's support for this sort of stuff? How do PyPy's optimizations fit in? Can LLVM and other projects benefit from them?
I'm glad all these projects exist, but I really can't wait for one of them to mature enough to be a solid replacement for CPython/NumPy. For years we've been teased with PyPy, Numba, etc.
I took a look at the Xapian code to see how faceting is laid in there, to see if this is something that could be done in an afternoon. B/c this is for a customer, and b/c I don't want to go back to a Xapian install, I'm trying to find some hours to take a stab at it. Fingers crossed.
[James Bergstra](https://github.com/jaberg), [Olivier Grisel](https://github.com/ogrisel) and some other folks have actually started doing this: http://numfocus.github.io/python-benchmarks/
Before you teach yourself python, you should also consider other alternatives which will actually make it a lot easier to achieve your end goal. For instance, I've heard good things about RPGMaker which may be a lot easier. I guess it just depends on what goal you want to achieve. Do you want to learn python? Great. Continue on your way. But if you are more interested in making a game you should consider other venues since it will make it much easier. It's not worth learning an entire language if there is something else easier out there that will give you the same end product. 
Ha, thanks fijal. Now I will pay you back by writing an inflammatory and poorly researched blog post about PyPy :-)
learn python, get started with writing your rpg from scratch, then pick up Unity
I would say it doesn't work well for *arbitrary* Python, though we can draw a line around a subset of the language and selectively specialize those bits and get great performance. Numeric Python adapts particularly well for use with LLVM. It's important in these discussions when a lot of the questions are of the form "How does X compare to Y?" to realize that different groups are working under different assumptions about how much of the Python language they work with.
Learn Python the Hard Way is a great starting point, and after that I would move on to learning about PyGame. The [Invent with Python](http://inventwithpython.com/) series does a good job of explaining both Python and PyGame. If you have programming experience in other languages you could probably skip Learn Python the Hard Way and go straight to the first or even the second book of the Invent with Python series, but Learn Python the Hard Way does a much better job of teaching the fundamentals of programming along with the Python language.
CodeAcademy is great but there is a full Python course starting on October 7 at Coursera that is specifically about interactive game programming. To quote: "The primary method for learning the course material will be to work through multiple "mini-projects" in Python. To make this class enjoyable, these projects will include building fun games such as Pong, Blackjack, and Asteroids." More info and the signup page are ***[here](https://www.coursera.org/course/interactivepython)***
It is a really great tool, very easy to get the hang of. A simple example would be: from selenium import webdriver #start it up br = webdriver.Firefox() br.implicitly_wait(15) # wait's for the page to get done loading before it does anything with it br.get('http://yourwebsite.com') #To fill out a form search = br.find_element_by_name('nameOfField') search.send_keys(yourInfoHere) #to press a button based on the value (what it says) search = br.find_element_by_xpath('//input[@value="Submit"]') search.click() #get restults search = br.find_element_by_name('nameOfField') result = str(search.text) granted it may not be the best way to do it, it is something I just put together. 
To install a package from PyPI (or in fact *anything*, e.g. using configure; make; make install) you have basically two options: * just install it (using pip, setup.py install, make, ...) into the conda environment you're using * create a conda package (using `conda build`) and install that The first way is the quick and dirty way, which should be sufficient, unless you want to properly deploy your entire set of packages to another syste. The second way allows you to put the conda package on binstar (or some other binary repo) and therefore makes deployment easier. 
&gt;Interesting project, still trying to understand how it's different from Numba though, which I thought also supported NumPy arrays. I did try using Numba in a real project recently though and it choked on some straightforward NumPy code. Might be worth seeing if this fares any better. The most prominent difference is that Parakeet will refuse to compile code if it can't be made fast. Numba, on the other hand, sometimes stealthily slides from its "nopython" mode into its "object layer" which keeps everything boxed up as a PyObject and calls Python's C API. This latter approach is more akin to what [Nuitka](http://nuitka.net/) does and can only get, at best, a 2X-3X performance improvement. The whole point of Parakeet is to enable applications in Python that have to be orders of magnitude faster than CPython. So, the most relevant comparison is to Numba's "nopython" mode. Currently, Parakeet supports a larger subset of Python/NumPy than Numba's nopython mode. Furthermore, the *way* I'm implementing NumPy functions has a distinctive quality: I'm sticking data parallel operators anywhere and everywhere I can get away with. Array broadcasting and NumPy library routines are a rich source of implicit parallelism and I'm hoping to put that to good use in future OpenMP and CUDA backends. &gt;BTW why is it necessary for Parakeet to do its own optimization? I thought optimization was built into LLVM (I'm a bit ignorant about most of these things)? Ha, "LLVM all the things". It doesn't really work that way-- there's a huge semantic gap between Python's abstractions and LLVM (which is a little bit lower-level than C). There are lots of obvious optimizations in a higher-level program representation that become tricky or potentially unsound in the world of pointers and loops. This is why Unladen Swallow never worked out and why Numba has gone from direct AST-&gt;LLVM translation into a multi-stage SSA representation. edit: It's also worth pointing out that I'm moving away from LLVM to a C backend and eventually OpenMP and CUDA. 
&gt; But numeric code tends to be fairly static though, right? It is...once you've massaged and contorted Python code to actually look "numeric". For example, consider a simple NumPy expression like "x[::2, 1:-1] * 3". We're creating two slice objects, putting them into a tuple, calling \_\_getitem\_\_ on x, and lastly calling \_\_mul\_\_ on the result. There's a lot of high-level semantics that have to be swept away before you can turn this code in the "static"/"numeric" code you think you see. &gt;Not knowing much in this area, it sounds like it would be better to focus on improving LLVM's support for this sort of stuff? LLVM's support for low-level optimizations is already pretty good. There's just no magic hammer you can bang on high-level code which makes low-level forms drop out. You have to choose how to implement the high-level semantics or make some compromises on where to diverge from the original meaning of the program. 
python/pygame is excellent for a 2d top down rpg 
That helps, thanks. I looked at your (?) recent talk and noticed Numba was still faster in the cases where it worked. Since they aren't relying on LLVM as much now, I assume the performance difference is due to some other optimization that they're doing? With all the projects out there that seem to be doing similar things and re-implementing NumPy (PyPy/NumPyPy, Numba, Parakeet, etc.), is it possible to abstract the optimization so that each project shares that layer of code?
I believe Conda environments work for installing packages with pip as well. (Someone correct me if I'm wrong).
Check out Kivy for building the game. Cross platform pythonic gui building. 
&gt; I looked at your (?) recent talk and noticed Numba was still faster in the cases where it worked. Since they aren't relying on LLVM as much now, I assume the performance difference is due to some other optimization that they're doing? The detailed performance differences between the projects are, I think, ephemeral and subject to change with every release. Previously I was running less aggressive optimization in LLVM than the Numba folks. Faster compile times, no vectorization. Now I'm moving away from LLVM altogether and generating pure C code which gets compiled by gcc. Sometimes faster than Numba, other times not. I think the structural/solid performance improvements will come once I get OpenMP and CUDA backends running. &gt;With all the projects out there that seem to be doing similar things and re-implementing NumPy (PyPy/NumPyPy, Numba, Parakeet, etc.), is it possible to abstract the optimization so that each project shares that layer of code? Most of the projects (don't forget about Pythran!) got together at [SciPy](http://technicaldiscovery.blogspot.com/2013/07/thoughts-after-scipy-2013-and-specific.html) and talked about making "common graph representations". I think we ended up influencing each other's designs but the amount of plumbing needed to actually get interoperability between compilers seems daunting. 
The trouble is that NumPy is very large and intimately wedded to a low-level view of the Python interpreter. Parakeet is always going to be restricted to a Python/NumPy subset that the programmer needs to be aware of (which isn't terrible, I find it much easier than coding in Cython). In the long run, my hopes are actually on [Blaze](http://blaze.pydata.org/) replacing NumPy altogether with a cleaner library that works on both CPython and PyPy. I'm worried that they might be drifting off into architecture astronautics when what we really need is just lazy array expression trees that get JIT compiled when forced. 
I'd stick a mention of .groups attribute of a groupby obj. super useful to pull that dict sometimes.
You won't get there. You'll get started on python and you'll love it. Then you'll start looking for jobs that use python and you'll find one. Then start getting paid lots of money and you'll never get around to writing that little 2D game. I started writing a MUD in python 5 years ago. :(
I agree that "Invent with Python" is probably a better followup to LPtHW. They're great books for beginners.
1. Note that is is CodeCademy, not CodeAcademy. 2. CodeCademy is pretty mediocre. It's "easier" and more fun at first but it makes you think you are learning when you aren't actually learning much.
If you poke around the results of the [7DRL](http://7drl.org/) you will find lots of example code. Many of the python entries will use libtcod and you can learn so much by reading others' code.
Ah, good one; thanks!
Is it still pythonic considering the KV language? Honestly don't look into Kivy while learning Python. The tutorials are shit, the documentation is inconsistent- sometimes only showing pure python examples, other times only showing KV examples, sometimes showing both- and the KV language itself makes it difficult to grasp for python beginners. I like Kivy- I use it to build my apps- but I can't recommend it to a python beginner.
Link is missing ...
Doing LPTHW at the reading code section, this is super interesting to review. Can't wait to run it when I'm a little further on. 
Like /u/p3n15h34d guessed, whoosh.qparser is used to read a search query in using Lucene-style syntax. The resulting parse tree is then turned into a string query that Amazon CloudSearch can understand (reddit's backend search is cloudsearch). The code that does all that is a python module named "[l2cs](https://github.com/kemitche/l2cs)".
[Precisely](https://github.com/kemitche/l2cs)
I recommend never not reading a single tutorial just because you think it won't apply to you. Yes, look for the pieces you need to make a complete game, but give everything a chance to be incorporated. You never know, you may find them useful one day. As a programmer, the more you know is always better. On the most basic level a 2d game is just a I/O game with a layer of graphics over top of it. If you can already make a text game, you just need to learn the graphics aspect and essentially put it "over top" of the rest of the code. If not, you need to learn the basics (depending on your prior knowledge of code) and syntax. String manipulation is always important, as are lists and dictionaries. Learn class structure and passing variables and you will be well on your way. Pygame is a great graphics library for python.
Good cheat sheet, thank YOU
4 spaces before the first char for code format
I think the KV language has solid readability, but that could just be me. Personally I would never underestimate a beginner. If it clicks for him its a great option, if not at least he knows of the option and has the experience of trying.
Thanks! very interesting.
No need to kill somebody's dream. We're making a python game for a school project right now.
Good question. I've frequently had to consider this when writing functions that have multiple return values. Personally I'd say use tuples for up to, say, four return values, and dictionaries otherwise. Libraries like SciPy seem to do a similar thing. namedtuples seem like a good idea too, but I always forget about them (and they're slightly less convenient to use than dictionaries).
[Pexpect](http://pexpect.readthedocs.org/en/latest/) is a pure Python library to control interactive subprocesses in a virtual terminal. This allows more control than just piping input and output. I'm the maintainer of the pexpect-u fork, but I decided I hadn't focused enough on backwards compatibility with that. Jeff Quast and I had just started a new fork of Pexpect to add Python 3 support, when the original author, Noah, gave us permission to use the name. So here is the first beta of Pexpect 3.0, with support for Python 3 and unicode. We've tried our best to preserve backwards compatibility for existing users of pexpect. So please do try it out and let us know about any problems.
Thousands of log messages, nice to know what method logged what
http://dabapps.com/blog/fixing-djangos-generic-class-based-views/ 
Here is a solution I found on S.O. that seems like a reasonable compromise mydict = {'raw':'data', 'code': 500} raw, code = [mydict.get(k) for k in ['raw','code']] This lets you get the info you need while still allowing for the API to be "dictionary flexible". http://stackoverflow.com/questions/4357851/creating-or-assigning-variables-from-a-dictionary-in-python or, from a different SO post you have these two options which look cleaner (but the second has some overhead when you import operator) foo, bar = map(d.get, ('foo', 'bar')) foo, bar = itemgetter('foo', 'bar')(d) http://stackoverflow.com/questions/17755178/elegant-way-to-unpack-limited-dict-values-into-local-variables-in-python
Not yet. I won't have time right away. But it's definitely "on the radar" due to feature regression.
it is the soliditer class in that file. I have tested it fairly extensively and it should work on python 2 and 3. I don't know how many times I've been given a piece of data and not known whether it is an iterator, list, xrange... whatever. I've wanted to do things do it like look ahead by 10 indexes, but there was never a convienient way to do that. Well, now there is!
Why must you put it on scribd?
Something seems not quite right about the `import _NUMPY_` bit. Your `try...except` section works on a different variable than you declared right above it. Am I missing something? It seems like it should be: _NUMPY_ = true try: import numpy as np except ImportError: _NUMPY_ = false I'd even consider putting the `_NUMPY_ = true` inside the `try:` block, but I'm not sure if that's really preferable. Opinions? Also, there's a lot of instances where `betteriter` is misspelled as `beteriter`, mostly in the comments, but also once in the definition of `flatten`.
You cannot return a value from `__init__`, use `__new__` instead. Or better, just alias it to range on py3
You're kind of butchering the basic structure of python command line scripts. Typically you put all of your argparse logic after if(__name__="__main__"): and define all the rest of your logic inside a main function. Something like if __name__=='__main__': #argparse magic main(**args) As is your script would be impossible to use inside another script, since on import it would expect command line arguments and throw an error. 
1. I'd put links to the packages 2. put a less basic description of each function. p =Panel(data,items,major_axis,minor_axis) # creates a Panel is kind of obvious. Series I can guess. What's a Panel and how is it different from a DataFrame?
It's not really about being readable it's about being consistent and maintaining performance (this especially true for scipy). I've done quite a bit of API development myself and here's why I tend to see or use tuples: * they can't be written to once instanced * lower memory overhead and higher performance * easier to serialize and shares more in common structure wise with other languages * can be quickly reduced using a set, filter, etc * iteration over output doesn't require me to run another function From an API and documentation standpoint they're often just as easy to read if not more so (as /u/danredux points out): &gt;&gt;&gt; start, end = (0, 1) &gt;&gt;&gt; start 0 &gt;&gt;&gt; data = {"start": 0, "end": 1} &gt;&gt;&gt; data["start"] 0 A dictionary won't save you from breaking things either if you're accessing it by the name of a key. If I decided to remove "t-value" or rename it, I will break your consumption of my data and with a dictionary it would be much easier for me to do so. Also if I'm producing a tuple I know how you'll be expecting the data and there's a very limited number of ways you can parse it too. I think dictionaries do work for some things such a database rows, descriptions of objects, or collections of attributes but in many cases they don't make a lot of sense.
IMO it's one of the coolest things about Python 3.x. Sadly very few of the things I work with have been ported yet and/or cannot be ported because there's not enough time to do so.
Docs can be found at: https://pynsive.readthedocs.org/en/latest/
Fail fast is usually the right approach. Actual exception handling should be kept to a minimum where you can be sure that the way you handle the exception resolves it completely (like catching socket.error in network code). Otherwise, all you do is swallow errors and eventually fail in an impossible to diagnose way.
Once other people use your code, they will not know where the log message is.
[An Introduction to Interactive Programming in Python](https://www.coursera.org/course/interactivepython) starts next monday. It teaches Python through games and is really fun
If OP's intention is solely to make a 2D RPG, Python3+Pygame is perfectly sufficient. For someone without prior experience with programming (possibly not the case), OpenGL wrangling of any sort might be a bit too finicky anyway. 
mechanize is a mature library. I used it way back in 2003/4. 
The whole point of my post was to show simple it is in Python to make your own HTTP request using the socket module. That's all.
Thanks! I forgot about map and itemgetter, seems cleaner than a comprehension if you're getting your dictionary from a function call.
True enough on renaming the key, and thanks for taking the time to list the advantages of tuples. After reading the comments from everyone, I think I can see why many API developers chose to go with tuples now. With that said, what are your thoughts on namedtuples? It seems to be the best of both worlds, and I see some things like sys.version_info being ported to use namedtuples instead of plain tuples. Is there a reason as an API developer that you would choose not to use namedtuples in favor of tuples? As a side note, you hit the nail on the head for my use case of Python, which is what inspired the question. I've pretty much only been poking databases and crunching numbers for the past year or so, hahas. Thanks for reminding me of the other use cases out there where doing so wouldn't be as sensible as I thought it would be.
This will have some of what you're looking for...group interview wit Guido and the guys from the early days. http://radiofreepython.com/episodes/1/ But Guido has also been pretty open about details in various interviews, talks, and his own Python history blog posts. I hope you find what you are looking for. :)
The port to python3 is fantastic. Will test this soon with our ssh log pulls.
Pretty cool. A small example for each would be awesome. Also, no scribd.
&gt; To learn Python, I recommend Zed Shaw's Learn Python the Hard Way[1] . After working through that, you should have a fairly good grasp of the language. I made it through several lessons of LPTHW, but at a point fairly early on (I'll have to look up when it was exactly), I hit a wall. I could not figure out how to get past a certain problem, and there is nothing to turn to for help: no guide, no FAQ, no forum, nada. It's been basically abandoned by the creator at this point. 
 #!/bin/sh set -e mkdir python-0.9.1 cd python-0.9.1 for i in 0.10 4.47 0.11 4.31 4.32 4.33 4.34 4.35 4.36 4.37 4.38 4.39 4.40 4.41 4.42 4.43 4.44 4.48 4.45 4.49 4.46 ; do wget http://ftp.fi.netbsd.org/pub/archive/alt.sources/volume91/Feb/91022$i.gz -O - | gunzip | awk '/: This is a shell archive/,EOF' | sh done cd .. tar --mtime="19 Feb 91 17:35:26 GMT" --owner=0 --group=0 -zcf python-0.9.1.tar.gz python-0.9.1/ 
 from itertools import * ಠ_ಠ Edit: oh, you did it so you could replace itertools with it. still...
not being required to login to see what it's about would be nice.
[It certainly can](https://en.wikipedia.org/wiki/Wikipedia:Note). Again, often it's a matter of an article never making *any* claims as to why the subject matters. When presented with a deletion request, the author will say "oh, but x, y, and z companies use it, and there are these news articles, and..." which is all stuff that should go **in** the article for protection against deletion. It's not a matter of a subject being notable as much as the article *asserting* notability.
haha thanks
I might disagree with you all I want and you might disagree with me all you want. The point is that someone's work, a bit by definition, is almost always interesting to look at, as is all kind of original research that brings something to the topic. JITs for Python are hard and a lot of details how to approach the numeric speed is up to discussion, I for one welcome a new contender.
I'd prefer to use setuptools' functionalities. [Using optional packages](http://pythonhosted.org/setuptools/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies) [Loading distribution plugins](http://pythonhosted.org/setuptools/pkg_resources.html#locating-plugins)
Does this mean we can build a cms with at runtime installable plugins in the form of uploaded zip files now? Or does something like this already exist?
For interest's sake, what's the equivalent of something like Salt/Chef/Puppet in an all-Windows environment? I sometimes have about 20 Windows servers I have to run a certain command on and it's a rare enough occurrence I have just been using remote desktop and running a shortcut on the desktop of each of them, tedious as it may be. Recently I've had to do it more frequently so have been looking for a way to automate it but these three solutions don't seem to work well (or at all) on all-Windows environments.
Good for you! Just wondering is wexpect somewhere in the ancestry of this pexpect? A few years ago I started using pexpect, but the lack of pty on Windows moved me to wexpect, which was maintained as part of Sage. Then there were some other problems with wexpect, some still related to Windows I think, and the maintainer helped to fix them. Unfortunately I don't have the development environment now to reproduce any of those problems. But I think all the fixes got put into this file from 2010: http://sage.math.washington.edu/home/goreckc/sage/wexpect/wexpect.py
I read the first chapters and I didn't really like the attitude of "do everything as I say without questions" and "If you are not of my same opinion then you are an idiot, go learn LISP" I didn't even like the snark remarks at Python 3 and at people having any doubts at all. Don't know why everyone always recommend that... Edit: for OP, on a more positive note, this course is starting in 4 days on coursera https://www.coursera.org/course/interactivepython and it teaches how to make simple games in Python
from all the places on the internet, you host it on scribd? fuck that
 SENTIMEX for YouTube comments v0.1 Crawling... |--------------&gt;| (349 of 350 threads) Analyzing... |--------------&gt;| Current sentiment (with 61% confidence): Mankind deserves to, and will, off itself.
Good to know, thanks.
[here](http://yellowsplash.wordpress.com/2009/10/23/fast-antialiased-circles-and-ellipses-from-xiaolin-wus-concepts/)
Well damn. Thank you!
always nice to see somebody practicing the old ways :-)
I'm a lone developer for a small business who sometimes has to do sysadmin stuff. I pretty much suck at the sysadmin stuff. I'm slightly paralyzed by how much of that world I don't know. I keep thinking "I should learn Chef/Puppet", but I spend 90% of my time coding in Python, so then I think "I should learn Salt." But Salt just seems so new, would it be irresponsible to set up this company on a package that's on v0.17? If I ever left, or if they hired a contractor or full-timer to help me, would they have an easy time finding someone who's already fluent in Chef/Puppet admin, because it's tried and true? In terms of building my own resume and directing my own career, would it be better to learn Chef/Puppet or Salt?
This is a thankless problem. Just look at YouTube comments and see for yourself why.
Learn Powershell 
There is no way to do it without learning about HTML and CSS Bottle or Flask as web framework http://bottlepy.org/docs/dev/ http://flask.pocoo.org/docs/quickstart/ Bootstrap as an easy way to create good-looking web pages http://getbootstrap.com/getting-started/ W3School to learn about HTML and CSS http://www.w3schools.com/
I help hire for several systems teams. If somebody has strong experience in one of the major configuration management systems, I'm happy. If they came to work on my team, they'd be dealing with puppet and a legacy cfengine2 implementation and would be expected to come up to speed on both. Having both the understanding of what configuration management does for an organization is key, as is the discipline to consistently employ configuration management in those roles.
I can't offer any suggestions, but I've often thought it would be great to have something as easy to use as Tk that generates a web app. Then again, I've often had the less optimistic thought that the state-of-the-art web frameworks are an overcomplicated way to generate a less-useable interface than Tk in 1998. 
Although I would agree with you that writing it in Python is far more flexible than JSON or YAML, I do have a general antagonistic sentiment to using Python as a configuration language (for reasons including those discussed here: http://taint.org/2011/02/18/001527a.html)
Yeah I really didn't want to use Scribd, but couldn't find any other decent options for embedded PDF hosting. Can anyone suggest anything better? 
Good call, thanks!
Totally right about the links, what an oversight. And I like your point about detailing it further. Thank you.
Can someone please provide some other options? What can be used instead of Scribd for embedded PDF hosting? I didn't come across anything better in my search.
Not really. Some comments might on the outside seem very aggressive, biased, but they pack good empirical power. It's not that different from *any* argument you see in real life. I was looking along the lines of even how many women comment per video, how many men comment, maybe even ascertain the political leanings of people listening to such videos. e.g. the comments of this video reveal an educated old probably conservative-white audience*, which is more likely to believe in God than not, have an easy, peaceful life and none of the bile you'll associate with other videos. https://www.youtube.com/watch?v=MbrBQwRmd2I *I google-searched the symphony and hit upon a such blogger which confirmed my initial feeling. So if my brain can work this out, I'm sure sentiment analysis or word analysis which already try something similar *would* work. In any case, no harm in trying. It *can* be done.
You could also just [download it from python.org](http://www.python.org/download/releases/early/Python-0.9.1.tar.gz). (It's listed under "ancient" in the release list on the left hand column of the web site.) 
im not sure why youre getting down voted. this is the correct answer.
Thank you for the kind words. We got a short write up that everyone may want to read (http://geekswithblogs.net/theArchitectsNapkin/archive/2013/10/03/interesting-book-about-messaging-wants-your-support.aspx) -Matt Carkci
I created a project recently that can help you. Give a look at https://github.com/aivuk/formcreator You can create web interfaces to command line programs with code as simple as: man = Form("man") man += Boolean("Apropos mode?", cmd_opt="-k") man += Text("What manual page?") app = MainApp("Man interface", [man]) app.run() And you can insert rich text and images using Markdown. 
Learn the basics of using the Flask framework in Python, you'll also need to learn a little about HTML, specifically forms, cookies and GET vs POST. Probably not in that order.
Any config management system is a win. While chef/puppet are more popular, salts no fly by night operation. It will become more common, especially in the Windows world, where the other players aren't that interested in. Then real key is documentation. Start a wiki and keep it accurate and up to date about both your process, and the reason for your process. If those notes are accurate, most any sysadmin can step in and make it work, whatever it is. As someone who has stepped into many a place with odd ball products and no documentation, you will be be lauded for this, whatever suite you choose. 
Possibly because he referenced w3schools which, as far as I understand (not a webdesigner myself), is mostly universally hated.
In addition, he'll run into the extra complication that he now needs to do some trickery with XHRs/websockets/somesuch to make the text interaction/logging appear in realtime, assuming he doesn't want to downgrade to "click the 'run' button and wait for the output until everything is done"
Try [Gate One Web Terminal Emulator](http://liftoffsoftware.com/Products/GateOne). Written in Python and Tornado.
Pynsive will eventually target situations where code may be stored in various locations in addition to zip and egg files. However, in the meantime, ivosaurus made an excellent comment regarding this functionality in setuptools -&gt; http://www.reddit.com/r/Python/comments/1nmgv4/pynsive_dead_simple_plugins_via_pep302/cck3qn9
Relying on generic automated code evaluation isn't very good. What you actually want are unit tests, which is automated code evaluation tailored to your project.
Conda doesn't *use* virtualenv, but it creates it's own OS-level environments so it gives you equivalent (but better for extension modules and system libraries) behavior. You can use pip to install anything into *any* conda environment that you create. conda create -n "myenv" python=2.7 would give you a "basic" python environment. Then, you could change your path to make sure you are running that python environment, or execute # source active myenv Then just pip install away into this new environment. You won't have the benefit of being able to *quickly* get these packages available into other conda environments (you will have to pip install again into new conda environments). You don't take advantage of conda's cacheing mechanism. Eventually *all* pip packages will be available as full conda packages, but for now it's just many of them. 
You could use [shellinabox](https://code.google.com/p/shellinabox/) to do this with your existing curses program, making it available in the web browser. That is its own kind of sexy.
NLTK should definitely help, but for that you'd need a huge corpus of youtube comments tagged with their sentiment. I don't think such a thing exists (yet). Maybe try /r/LanguageTechnology, the folks there might help too.
Should be able to. Check out the Youtube API [here.](https://developers.google.com/youtube/1.0/developers_guide_python) Then, you'll need a sentiment analysis program, probably [NLTK.](http://nltk.org/) You can probably get a good idea about how to do this by checking out the Twitter sentiment analysis stuff, it's a bit more common, but pretty similar to this, so it gives you a good base to start with.
* [There are `web_display` and `html_fragment` display modules for urwid](http://excess.org/urwid/docs/manual/displaymodules.html) From http://excess.org/urwid/wiki/HowYouCanHelp: &gt; Adopt the web_display module - something modern and websocket-y would be awesome WSGI + WebSockets might be useful. * /r/IPython notebook also has streaming output for e.g. `!wget example.com`
A much better resource would be Quirksmode or MDN.
While I agree, look at the good section of youtube. The Nujabes or Post-Rock music videos, or the videos of soldiers returning from Iraq and surprising their kin. Those are the good youtube comment sections, they're rare but they're there :)
Use [backticks](http://en.wikipedia.org/wiki/Grave_accent) to have inline code (`if __name__=='__main__':`).
http://stevedore.readthedocs.org/en/latest/ &gt; Python makes loading code dynamically easy, allowing you to configure and extend your application by discovering and loading extensions (“plugins”) at runtime. Many applications implement their own library for doing this, using __import__ or importlib. stevedore avoids creating yet another extension mechanism by building on top of setuptools entry points. The code for managing entry points tends to be repetitive, though, so stevedore provides manager classes for implementing common patterns for using dynamically loaded extensions.
[PEP 302: New Import Hooks (2002)](http://www.python.org/dev/peps/pep-0302/)
&gt; perhaps to things like checksum verification. * https://github.com/pypa/pip/issues/1035#issuecomment-20656810
I don't suppose this is directly helpful, but does anyone know if you could port curses to run in a html canvas element? This has probably already been done, or is really hard requiring web sockets to simulate something something posix state management.
http://www.reddit.com/r/compsci/comments/1gpdb9/nlp_how_can_i_get_the_computer_to_understand_the/camicro
Never seen sikuli before, looks really cool. Going to have to mess around with it.
You could try setting up something like: http://rundeck.org/ It kinda is designed for exactly what you're describing...
It looks like that's another fork of pexpect from some time ago (it says it's version 2.3). Thanks for the link - after 3.0, I'll look at whether it makes sense to integrate those changes, or whether that's too drastic for vanilla pexpect.
It is certainly possible, yes, but I imagine it'll be a lot more difficult than, say, analyzing product reviews on Newegg for sentiment analysis. Youtube comments are often highly sarcastic or joking, contain heavy amounts of slang, and tend to have incorrect grammar and spelling. Trying to account for all of these things in a way that you can assess the sentiment of any arbitrary Youtube comment would probably be quite tough. Something like NLTK alone would not be good enough; you'd get a lot of false positives and false negatives. Plus, more broadly speaking, I'm not sure I see the point. In most cases you would probably see the comment sentiment distribution fall fairly close to the Like - Dislike distribution next to each video. The Like meter is already an explicit sentiment scale. If you're just looking for word analysis, you could maybe create word clouds/word graphs for each video, and maybe do some analysis on those. That would probably be a more interesting project.
You could try, it's tough though, we looked at doing it on Twitter but it was a nightmare with sarcasm, quoting people they disagreed with in different contexts, etc.
+1 for bootstrap, that shit is a life saver for those of us who have zero artistic ability and hate css
https://en.wikipedia.org/wiki/Python * https://en.wikipedia.org/wiki/History_of_Python#References * http://docs.python.org/3/license.html#history-of-the-software * http://www.python.org/dev/peps/ * http://www.python.org/doc/versions/ * http://hg.python.org/cpython/tags * http://www.python.org/download/releases/ * https://www.youtube.com/watch?v=ugqu10JV7dk
I'm totally with you. We're all working on hard problems and understanding competing approaches and mentalities is essential for knowing where your own stuff fits in. And more broadly, I would way rather read informed posts about novel work like PyPy (and Numba, and anything else that requires some thought to construct) than linkbait opinion pieces. Speaking of informed posts, have you guys written anything about the new NumPy-oriented loop optimizations going into PyPy? 
Now THAT is pretty frickin cool. I just played a quick session of NetHack in their test terminal in my Firefox tab; and without plugins! NEAT!
Thanks for the advice. To say I'm relying on CodeEval's point algorithm to test the speed of my program is a bit backward though. I am trying to see if the point discrepancy between programs written in C++ and Python is justifiable under CodeEval's current calculation scheme while I complete their exercises. According to the feedback I got over there though, yep. We Python folks just have to eat lower scores for the time being.
It's is using the function Popen from Python subprocess library. All arguments passed to the program are escaped, not being possible to pass something like "; rm -rf /". Read the docs: http://docs.python.org/2/library/subprocess.html And see the difference between using or not the argument shell=True. In formcreator all the commands are being called with the default shell=False.
We were aware of stevedore but the documentation and implementation were deemed a little too complex considering the ability to hook into the sys.meta_path via custom finder and loader objects (PEP 302).
Pynsive utilizes this PEP to perform its work.
/r/learnpython/
Great! Welcome to an awesome community and a great language. You are going to want to checkout /r/learnpython. This subreddit is more dedicated to the "big" things in the python community, such as a major version release of a well known library, rather than learning Python. You'll probably especially find [/r/learnpythons wiki](http://www.reddit.com/r/learnpython/wiki/index) useful :)
There is a pretty good collection of learning resources here: http://www.reddit.com/r/learnpython/wiki/index Also try searching that sub for other suggestions, the topic "where do I start" comes up pretty often.
I'd go for: try: import numpy as np except ImportError: _NUMPY_ = False else: _NUMPY_ = True
Before you start, make two lists. On one note what features you absolutely need. On the other what you want. Now throw out the second list and find a suitable OSS project that you can adapt to your needs. Google "python Dropbox clone".
http://labs.bittorrent.com/experiments/sync.html
If you have to ask these questions you are probably way better off using one of the numerous pre-existing solutions out there.
Example of one which supports permissions?
Maybe check out http://git-annex.branchable.com/ ?
I love PyCharm, and I also used Sublime 2. IMHO PyCharm is better for Python developers, it has multiple usefull features like debugger, pep8 syntax checker and integration with CVS (eg. git/svn) is pretty well, but you have to pay for it :)
just google "a byte of python", you should be done with it within 3 days then come back....
Best * editor for * systems =&gt; vim with a few plugins depending on what you're doing.
Best editor in the universe: emacs. 
i switched from sublime2 to pycharm2.7 before my current project and would not go back. i used to say, "you should not use auto format with python, make it nice by hand, that builds character!", or "i know my code so well, i don't need inspection and all that fancy auto import and stuff". speed was also a big pro for sublime. nothing worse, that a slow ide. this time, as the code base grew and others started contributing i began to depend on inspection to guide me more and more. missing imports, stupid syntax errors, not remembering the exact name of that one exception or where to import it from became a thing of the past. at first you'll probably spend some time customizing inspection or formatting rules. i still like to use giggle to read commits and git gui to create mine over the ide integration. also rebasing/merging/etc is more fun on the commandline. but the debugger definitely beats "import ipdb; ipdb.set_trace()" and now pycharm3 also has a full featured shell integrated. i need the django integration, so i prefer the pro version, but there is also the free pycharm3 community edition!
There's a free community version of pycharm, it got released like at most 3 weeks ago.
I've just started trying out the community version of pycharm, and it just makes more sense to use that over sublime text (which I absolutely love). ST just seems more fit for quick editing for files, web development and general text editing. The main reason why I choose pycharm over ST2 is you can set up st2 to support python very well, but you need to install all kinds of third-party plugins and you don't know exactly which ones you need, some plugins aren't complete enough or just a bit too buggy/incomplete etc etc etc. Pycharm simply comes with every basic plugin (and some more advanced stuff) you would need, as well as some features you simply wouldn't see too quickly in ST2 such as project management, debugging, proper console (sublimerepl is far too buggy) and virtualenv management. overall: ST is fantastic for python, pycharm is just a little bit more polished for python only. My conclusion: I just got both, if I need to quickly edit something, ST is the go-to program. If I need to work on some project, pycharm is the go-to program.
owncloud is worth looking into for starters.
vim is great for Python, if [properly configured](https://plus.google.com/106932871315106234720/posts/f7RVisgVZsx) But seriously, PyCharm (IMHO the best Python IDE) just released a [Free Version](http://www.jetbrains.com/pycharm/).
Eclipse + Pydev
I'm a Sublime Text man myself, but I appreciate vim as well. I just haven't put as much time into learning it as I have ST2
As an emacs loyalist I must agree. But OP: learning vim or emacs will be time very well spent. Are there better editors out there specifically for python? Probably. Are there better editors out there for everything? Probably not. Learn one of these and you'll be content for the rest of your text editing life.
virtualenv will let you install python libraries 'locally' without having to install them in the global system directories.
eclipse is an ide, not a text editor
This is exactly why I want to learn vim but I just haven't been able to get myself to sit down and learn it. Any good resources for someone who's never used it (or at least only started it up and gotten frustrating trying to figure out how to close it)?
Anytime. I haven't used namedtuples much myself to be honest but that's mainly because I have to work with some highly outdated systems that would be incredibly difficult to update. That said I do see their utility in them but I still think that for things like REST apis/non-Python consumers and where performance is a big issue plain tuples would probably still be preferred. For just about everything else, namedtuples are probably a good solution so long as the API developer is careful not to rename attributes or change the number of items stored between micro (and sometimes minor) releases.
You should checkout [ipython notebook](http://ipython.org/notebook.html) - i use it everyday
You may enjoy [this read on the subject](http://delvarworld.github.io/blog/2013/03/16/just-use-sublime-text/). I'm a 10-year Vim user and I cried when I read it.
Are there any Linux users groups or hackerspaces in your area? I learned the basics by going over it with someone in person. That way I could get immediate feedback on how to do things more efficiently. I'd bet you could find someone to teach you in exchange for some beer.
Pretty much! For web related stuff the other thing to consider is binding to some port &gt; 1024, otherwise you'll need root access. If you *must* install to a real site-packages directory for some reason there's always the option to compile Python into an area that won't need root access to write to ....but that's just generally a bad idea since that would give anyone and anything the ability to mess with the Python base installation. This is one of the many reasons virtualenv exists.
I just wish I could use all the stuff I have in my vimrc, but I'll settle for not having to use the rat so much.
/r/Seattle used to do a programming meetup every once in a while.. Might be able to get in on that.
The team would be using windows. 
I like geany.
I wrote mine 8-9 months ago but I remember having to do additional filtering for watchdog events, and catching rename's was problematic ( requiring some sort of fast CRC finger printing to catch, I used a gnu32 md5sum.exe file to speed this process up ). There was one other caveat with empty folders not showing up, similar to how git works. Also, having a time weighted in-process stack can help ( it's normal for a file to be touched/updated repeatedly, so starting a timer to say "this file needs to be synced" and waiting for 1 minute of pause or timing out at 5 minutes and sending what has changed ) will keep things fairly up to date but not flood the network and client's CPU while sending.
I don't have access to my VPS ATM and the site mentions a LDAP / Active Directory Want to manage ownCloud users from a directory? Now ownCloud enables admins to manage users and groups from their LDAP or AD instance. Does this mean I can give users permissions?
I'm a Kate user myself. With the proper setup, it is very good for editing Python.
So is PyCharm
[Leo](http://leoeditor.com/). (Full disclosure: I'm a Leo dev.)
I chose PyCharm (apple) because it makes my life easier, my code more consistent, and development for large projects quite a bit faster. My orange is vim, because when I do need something light and fast it's often on the other end of an angry server in some far away place that won't let me do remote debugging. I've never used Sublime, but when i compared them myself a while back I chose PyCharm because it fit my needs better than other tools did. I could give you more specifics but past experience tells me that it's not going to help advocate in either direction. For every way that I "do things faster" in PyCharm I could think of at least ten other ways that are even faster given the right situation or the right person at the controls. **TL;DR:** Try them both out on real work, feature lists are only telling you how it can be used and not how you'll use it.
You don't have to wait until everything is done. You can send output back to the browser and let it display dynamically without XHRs/websockets. 
Alright, thanks! I'll be indefinitely borrowing =P some talking points, both for and against namedtuple use, in trying to convince some library maintainers in the near future. Back to lurking on Reddit for me.
Fair enough. Though I wonder how much of that inference came from contextual clues like profile pictures. Simply by looking at the text I couldn't tell very much. Except perhaps that these people speak more articulately than the average YouTube commenter
If you are just starting with webdev - w3schools isn't too bad for quick introduction to html/css/javascript/etc.
I prefer an editor I can run at the same time as my code and a browser without running out of memory.
WHAAAAAAAT a free version of PyCharm. Need some new pants now.
They are really different things. Sublime is NOT an IDE.
I got the [O'Reilly guide](http://shop.oreilly.com/product/9780596529833.do) when I was learning. It is well worth reading.
A couple resources I've found helpful: This guy has a series of video tutorials on Bash scripting, where he also provides tips on using vim at the same time, almost as an aside: http://www.youtube.com/watch?v=Djgrtlv4cng And here is an interactive online vim tutorial: http://www.openvim.com/tutorial.html
*snif* I don't care, I still love my vim 
&gt;...started it up and gotten frustrating trying to figure out how to close it... Here's the hilarious part. Type `vim` into your shell, and it opens with the following splash screen: VIM - Vi IMproved version 7.2.330 by Bram Moolenaar et al. Vim is open source and freely distributable Become a registered Vim user! type :help register&lt;Enter&gt; for information type :q&lt;Enter&gt; to exit type :help&lt;Enter&gt; or &lt;F1&gt; for on-line help type :help version7&lt;Enter&gt; for version info Running in Vi compatible mode type :set nocp&lt;Enter&gt; for Vim defaults type :help cp-default&lt;Enter&gt; for info on this Zoom and enhance on that center region: type :q&lt;Enter&gt; to exit type :help&lt;Enter&gt; or &lt;F1&gt; for on-line help How to exit Vim? It's the very first thing it showed you how to do. :q&lt;Enter&gt; Let's go one step further with it's second suggestion :help&lt;Enter&gt; *help.txt* For Vim version 7.2. Last change: 2008 Jul 21 VIM - main help file k Move around: Use the cursor keys, or "h" to go left, h l "j" to go down, "k" to go up, "l" to go right. j Close this window: Use ":q&lt;Enter&gt;". Get out of Vim: Use ":qa!&lt;Enter&gt;" (careful, all changes are lost!). The first thing `help` says is how to move around (so now you can move around the first page of help. The second thing is says is how to quit. The next paragraph explains how to jump around in help, and gives you an example you can try, which takes you to the end of the page, where it tells you how to get back to where you were. Now you know how to move around by row and column (Vim's version of arrow key usage), and how to follow hyperlinks, and even just regular words, which might work if Vim's help has an entry on them, and how to follow your trail back, and quit. Move down one page and you'll see this: *doc-file-list* *Q_ct* BASIC: |quickref| Overview of the most common commands you will use |tutor| 30 minutes training course for beginners |copying| About copyrights |iccf| Helping poor children in Uganda |sponsor| Sponsor Vim development, become a registered Vim user |www| Vim on the World Wide Web |bugs| Where to send bug reports Zoom and enhance! |quickref| Overview of the most common commands you will use |tutor| 30 minutes training course for beginners You know how to jump into these sections, because the previous page told you how. It goes on and on like this. For those who don't give up, Vim actually does a good job guiding you through topics. It's not *quite* as friendly as online guides and such, but if any of us actually read things that were presented to us, we'd learn a lot. No one reads, though. And I mean anything. Ever. No one will ever see this line, where I call everyone a butthead.
Agreed. I don't just work in Python. I work in Python, text files, JSON files, crap I drag in from the web, piped shell output, and even ASCII art. Vim is there through it all, kicking ASCII and taking names.
&gt; (or at least only started it up and gotten frustrating trying to figure out how to close it)? That's how I started. I knew I could hit ctrl-z (shell will stop the foreground process) and then "kill %1" to get out of the annoying beepy thing, but it always niggled me that the annoying beepy thing would clearly have some kind of clean exit-now functionality, so I did whatever people did before Google and found out it was :q! So for the next few months, whenever I accidentally got into the annoying beepy thing, :q! quickly got me out. But everywhere I went, the annoying beepy thing was always there. Then it dawned on me. Everywhere I went, the annoying beepy thing was there. And the more I read about how it worked, the more it became clear to me that this was the most sensible editor ever created. (a)ppend (i)nsert (d)elete (c)hange (esc)ape (from "work" to "thinking") :read :write :quit Once you're familiar with these, you can move onto optimising your editing, by using ... movement descriptions ... to quickly explain to vi what you need done; e.g. (b)eginning of the word (e)nd of the word (f)orwards (inclusive) (t)owards (exclusive) { previous paragraph (think scope denotation in C) } next paragraph then combine them ciw = change inner word d{ = delete the previous paragraph ct5 = change everything up to the next occurrence of the number 5 7dw = delete the next 7 words ... and so on. Then you can move onto (m)arkers, and in Vim - (v)isual mode, macros, and so forth. If you have Vim (which is probably the most common implementation now) then you also have built-in :help and 'vimtutor' The only other advice I have is don't apply other people's configurations or plugins until you actually need them, and know what they do. I ran for years without any kind of .exrc (for traditional vi) or .vimrc. When you know you want something all the time and it annoys you to constantly type it, then its time to think about putting e.g. "filetype plugin indent on" and "syntax on" into your ~/.vimrc 
Also get the package manager and you can get some python linter packages. You can get packages that auto highlight PEP8 issues or you can get a PEP8 Auto Formatter which will auto correct your code for PEP8. 
Beeware http://pybee.org/ was released in this year's DjangoCon by Russel Keith McGee. I haven't used it but it looks promising. It's got built in debugging and testing features as well.
Personally, I prefer to use a single editor for all my work (PHP, HTML, CSS, JS, Python etc), and for that, Sublime really works perfectly. It's not an IDE, but once you set it up with the relevant plugins you want, I've found you really don't need a full blown IDE. 
I like vim, I like gedit, I like emacs, I like WingIDE, but lately, I really like Spyder - http://code.google.com/p/spyderlib/ 
Vim mode in Sublime is top notch. I occasionally use PyCharm, but usually Sublime.
I think it is worth noting that in some cases fonts in swing apps are rather ugly on some distros. I don't know just where the issue lies. For example I have a 32 bit laptop running Fedora. I use KDE and swing apps look fine. Same software on a 64 bit machine, swing fonts are horrific when I use the on board intel video. Nvidia card - and it's fine. There are some variables that can be used to set java options that are supposed to improve the situation but I've found they don't always work.
PyDev? My condolences, mate
I don't know about PHP, and frankly I'd rather not know, but the rest of your list is handled beautifully by PyCharm along with a *lot* of other languages.
I use gedit, honestly, I don't think python needs a full-fledged IDE as much as most languages. YMMV though.
I'm very surprised nobody has mentioned [ActiveState Komodo Edit](http://www.activestate.com/komodo-edit). Great tool.
Oh, derp. Yeah, that's the right approach.
Vim (with plugins like ctrlp/neocomplete/tagbar/etc. of course) 
Laughed so hard.. .TL;DR Just use Sublime!
So, vim with plugins is like batman with prepare?
This was posted on /r/vim a little bit ago. One of the users wrote a rebuttal. http://vpaste.net/fA7rH http://www.reddit.com/r/vim/comments/1aq1lx/just_use_sublime_text/c8zpcej
I don't believe so, AD is an admin gig as far as I know
PyCharm Community Edition was released only a few weeks ago.
best way to learn vim is to type emacs at the prompt /sarcasm
Wow, awesome. I'm guessing this will be much better than my Visual Studio 2012 + Python plugin setup.
`vimtutor` http://vim-adventures.com/ http://www.openvim.com/tutorial.html
What do you use?
Thought so, thanks. Really surprised these popular SCM tools don't run in an all-Windows environment. I wonder if there's a technical reason or if the benefit of adding Windows support isn't worth it considering most servers are Linux based.
Sublime. To be fair, there may be advantages to PyDev, especially for a larger codebase, but for projects of the size I work with, trying to conform them to the eclipse dogma felt like overkill.
I work in a few languages every day, and it works nicely. Well, once I got it built out just the way I wanted, that is. But that's either a feature or a failing, depending on the user. I like being able to kick between android, python, web, and c projects, with their associated utility plugins, while my remote mantis integration, vcs stuff, etc. all persists. It seemed like NetBeans was heading in that direction, once upon a time, but eclipse is the only IDE I know of that does everything I need.
jedi-vim makes a huge difference, if you're using Vim and Python I highly recommend it. It's not bulletproof, but it's pretty darn good. EDIT: To be clear, your G+ link recommends jedi-vim as well, I'm just concurring.
whoa whoa whoa. You can't expect people to read the splash page and/or man pages.
Bravo. Great writeup. Personally, I use Vim for practically all text editing. But I use PyCharm for my main full time codebase, which is huge and old. Pycharm pulls me away from Vim because it's amazing at handling stupid big projects. IdeaVim makes the transition pain-free.
Nice job. As an Emacs user that sometimes uses SublimeText (mainly at work), vim (ssh), tried PyCharm : if you want some nice features (multi-cursors, go to file) on Windows, give a try to sublime. If you try talking about that blog post titled "Just use sublime text", then fuck you, I'm with the Vim guys.
TL;DR assumes he/she does not read what I wrote and uses it as a suggestion. Everything above that is how I arrived at my own answer with experience in similar tools and knowledge of my own development needs. My point was that if I said "I use PyCharm because I have to deal with large projects through a remote debugger" it has just about as much context as "PyCharm is the best for large projects". "What's the best editor" or "Why did you choose X to edit code" is posted quite often on this subreddit and he/she is much more likely to arrive at an unbiased answer that suits their needs by simply trying it out.
You said two contradictory things. "You should try both things out and not look at feature lists" and "I didn't bother trying two things out and just looked at feature lists." tl;dr Each of the suits on a deck of cards represents the four major pillars of the economy in the middle ages: heart represented the Church, spades represented the military, clubs represented agriculture, and diamonds represented the merchant class. :/
nano 
Hmmm: http://delvarworld.github.io/blog/2013/03/16/just-use-sublime-text/
So mere existence of a subject - like with a piece of art - is not sufficient if the deleting wikipedian doesn't deem it worthy enough to be judged by this standard? That's not objective, that's subjective. The objectivity here is complete fake and applied after the fact.
I'm pretty sure these are standalone tools designed to be used alongside an editor like Vim or ST2; basically providing all the "other bits" of a regular IDE. &gt; BeeWare is a collection of projects that can be used to help develop, debug and launch Python software. Each tool follows the Unix philosophy of doing one thing well. Unlike a traditional IDE, each tool is self contained and can be used on its own.
Kwrite's pretty cool. Gedit's fine too if you're on gnome.
You're missing the point I think. If hand you hand me two bowls of cereal and ask me what I think tastes better, but I know I don't like things with extra sugar, I'll tell you I like the one with less sugar. If you then ask me which you would like I'll say you have to try it because I can't tell you from the ingredient list. 
Oh yeah, I love kate! It's my favorite on systems that have it.
I often use Geany as my default text editor. I've coded a lot in it, but I never stay long and tend to end up in either vim or sublime.
You may want to look at kdev-python (KDevelop plugin with Python support): lots of features, VCS integration (and a GitHub plugin in the development version) and a very responsive developer (I've been pestering him a lot ;). Also, it's fully featured, no open core or "extra versions" for money.
True. The first time I tried to use Vim I had to reset the computer to get out of it. My comment is poking as much fun at myself as anyone else.
thanks, will check it out.
Shortcut: `$ vimtutor`
To be fair, when you're a noob you're most likely trying to open a file with it the first time so the splash page isn't going to show up. Also, as someone who falls somewhere between amateur and competent with the Linux CLI as a whole I find man pages *much* more useful now than I did as a beginner when I was learning. Practical examples of real-world use cases helped me understand more than reading man pages ever could. man pages are more like technical manuals. They're highly useful and laid out well, but they're not the best resource for someone diving head first into Linux.
vim. Definitely vim.
vimtutor. Takes 30 minutes or so to learn vim.
Sublime Text 2 is preferred by ~30% of the technologists I work with doing Python development. It's a very solid product.
why? what was your problem with PyCharm? I alwas found working with Eclipse a real PITA because installing any plugin/extension could fuck up *everthing*. 
I don't know if you can remember PIDA - it was a really nice IDE-Like editor that integrated VIM and Emacs. Sadly it's not developed anymore, but in my opinion it had the potential to become the best Python Editor with IDE-features.
Pycharm pycharm pycharm Seriously, use Pycharm. They just released an open source community version!
Wow, almost everything in that blog post is horrendously wrong. Some rebuttals (like you needed any): &gt;Vim is not a more efficient editor for regular text editing. Bullshit. My coworkers literally can't tell what I'm doing, because things happen continuously, and much too quickly for them to follow along. Gary Bernhardt is extremely fast in it, and in one of his Destroy All Software videos he actually opened a ruby file in Vim while talking, made a change to a line in it, saved, and quit again before it had a chance to display on the screen. It showed for about 1 frame of video. He laughed and said "Sorry, let me do that again so you can actually see what I'm doing." My go-to video of his speed is [this one](http://blog.extracheese.org/2010/11/screencast-custom-vim-refactorings.html). I work this way quite often, and I even do all my patch-adding and committing with this kind of speed, care of Tim Pope's fugitive plugin. &gt;It’s not going to make you type faster. That's actually not true. Because normal mode is this whole other reason to know things like how to type `3` without looking, so I can do things like `d3w`, or `v3j`, and because I've been spurned onward by my ever-increasing speed, I've gotten *much* better at typing, and I make *far* fewer typos, which is a big part of net typing speed. Also, because of things like the dot command that redoes things, and the intelligent way in which Vim remembers actions you've done (e.g. that typing `A` appends after the last character, and once done, the dot will redo a post-last-character append of the same thing), you end up typing much less. Oh, and there are so many things I don't need to do in Vim, like arrow down to the next open line (that's just `}`), or work my way back to the first non-whitespace character on the screen so I can type something right before it (that's just `I`), or hunt for the end of the 3rd word so I can put a closing parenthesis after it. I use Tim Pope's surround.vim plugin, and just do `ys3wb`, and I've typed both the open and the closed parentheses. That's *fast*. I'm shockingly faster than anyone else around me who isn't using Vim. I've drawn crowds. &gt;For the first 1-2 years of your Vim usage you will be much less efficient than your current editor... That didn't happen for me. I was faster in a week. The exact same pattern held true for a guy at work who I got into Vim after he saw me ripping through code one too many times. It took about a week or two, but then I asked "Still missing Notepad++?" He said "Oh jeeze, no. I'm so much faster already in Vim, and I don't even know anything yet. You've ruined me for any other editor." It happens much faster than fear-mongering write-ups like this one purport. &gt;...no one talks about what happens once you finally get hjkl in your brain... I admit, I resisted my first try. A year or two later when I switched to Linux, I decided to keep an open mind and try it again. Everyone online was talking it up. This time, hjkl seemed pretty natural. I took to them in one day. My coworker apprentice took to them in just a few days. This article is way off. &gt;The answer is months of frustration... Actually, I've since fairly early on said that Vim is like a never-ending Christmas present. I would ask in a group about some issue, and find this gorgeous little way to solve the problem. I'm 6 years in, and it's *still* paying me for the investment. I keep finding more things to love. I don't know when it'll finally run out. Recently I realized I had huge power over JSON files right in Vim, and all through text - Vim has no idea about JSON, but the powers it does give me let me insert entries all over in one shot, collapse things, and even merge separate files together, and use keys stored as values in one to look up values under those keys in another, and use all of it to generate a 3rd file that was a kind of flattened version of what we needed, and it took me as much time to figure it out as it took to type about half of this paragraph. It's very intuitive to me now. &gt;...knowing some cool tricks that you use in 1% of your daily workflow. I have some of these, and when I do use them, they're the best thing available, and they save me *hours* of labor. But I also use *a lot* of things - even the rare stuff - because I love them, and they're helpful and fun. You don't get to be a karate master bitching about how difficult training is. This guy has the entirely wrong attitude. Vim is a joy to use, at once a puzzle and a huge reward factory. &gt;The argument that Vim is more efficient is dubious and untestable. Unless you're using it every day and constantly yelling "How the fuck am I doing all of this? I'm some kind of god!" I don't need some scientist to tell me that I have become the typist equivalent of a cheetah. It's in everything I do, every day, all day long. &gt;Most novice programmers can click on a character on screen faster than an expert Vimmer can type... Bull. Shit. This guy must be a troll, or he lives some sad existence where he's never been around an actual Vim expert. He's missing out. Who exactly is he trying to kid? I've worked with literally hundreds of programmers, and not a single one comes anywhere close with their mouse to the speed I have in Vim. It's agonizing to watch anyone - literally anyone - dragging the cursor around to click on something. There are *many* ways to move in Vim. Some are more optimal. He's picking some worst-case scenarios, but even those I could do much faster than he's claiming, because Vim has trained me to be a typing ninja. He gives an example of `20jFp;` - that's less than 1 second for me to type - I'd be done before you started moving the mouse - but I wouldn't guess like that, with `20j`, and I wouldn't even use relative line numbers for it. I'd key off of features of the file - something that comes as second nature now - to e.g. `3}` to the blank line right below the line I want to change, `k` up onto the line, and let's say I want to change the stuff in the single-quotes near the end of the line (I'd be at the beginning of the line at this point) - I'd just `ci'` and start typing. All of that would happen without any real thought, and in under 1 second, *easily*. &gt;The point of a mouse is to make arbitrary on screen jumps efficient... Actually, it was to make it easy, not necessarily efficient. Early adverts mention things like ["freely and naturally"](http://www.vintagecomputing.com/wp-content/images/retroscan/msmouse_large.jpg), but that's not necessarily efficient. Mouse movement is natural - it mimics pointing with a finger. I'll take typing at a sustained 90WPM over drawing letters with a more natural mouse movement any day. I'll also take jumping to the top (`H`), bottom (`L`), and middle (`M`) of the screen in one key press, hopping to the open-paren I can see ahead of me (`f(`), and selecting the paragraph I'm in (`vip`) nearly instantaneously any day. You have fun finding edge cases, and I'll have fun *most* of the time leaping around to places instantly. Oh, and ALL edge cases are eradicated with the [EasyMotion](http://www.vim.org/scripts/script.php?script_id=3526) plugin, which makes hopping onto any single character on even a 24", vertical monitor (160 lines in Vim for me - have fun with your mouse!) the work of usually 4 key presses, sometimes 5, and when you get good with them, you'll always do them in 1 second or less time, faster than you can grab the mouse. &gt;The Vim plugin community has some deep and odd flaws. Granted. &gt;Consider that Vim has been around since 1991. I have. I've also considered that it was a clone of vi, a visual mode for ex, both of which have been around since 1976, the latter of which being a port of ed, which came to life in 1971, with ed being a redo of QED, which sprang to life sometime in the mid/late 60s. That's quite a legacy, and things that were around in the 60s, like `:g` - which is where we got the hugely useful `grep` from - are *still* unique to Vim, and insanely powerful/useful. &gt;Pathogen, the first widely used, known, and celebrated path manager making plugin management possible, was released in 2008! The same year as Sublime Text! What's the point? Things *were* a bit crappy. Now they're not. Are you arguing that Vim's past tarnishes its present? I could argue that Sublime helped no one for the overwhelming majority of Vim's life (especially factoring in it's 40+ year legacy, helping people get their shit done). &gt;Try uninstalling a plugin that you copied into 10 folders a few months ago. This is how I know OP can't *nix. Download the plugin again and uncompress it to `badplug`, now: sudo apt-get install fdupes fdupes --recurse .vim badplug | less | grep ^.vim There's your list of files, scattered throughout the `.vim` directory; use whichever way you like to remove them (xargs, for loop, etc). Then you can remove any empty directories, which is just another one-liner. If you're on Windows, I feel bad for you, son. &gt;It’s probably the most customizable editor ever... I would think emacs wins that contest. &gt;Even pathogen and vundle are limited compared to Sublime Text’s Package Control plugin. Every Vim plugin I've heard of in 6 years is on github. Here's my process for trying out a plugin: vimp (alias - takes me to my ~/.vim/bundle directory) git clone &lt;middle-click&gt; (after clicking once in the URL box on github) That's it. Then I try it out for awhile. If I like it, I click the URL box again on github, `vimp`, then `git submodule add &lt;middle-click&gt; bundle/name`. I actually type `git sub&lt;Tab&gt;`, and something like `b&lt;Tab&gt;na&lt;Tab&gt;` for the bundle/name part. That converts it from a clone to a submodule. Then I `git push`. All together that's 16 key presses (including enters) and a middle click to try out a plugin, and maybe 20 key presses and a middle click to turn it into a submodule, and 9 more to push it so I can grab it from anywhere. Who needs plugins?
&gt; Komodo Edit I agree. It got everything from syntax checking to autocompleting to every possible view and customization, but — unlike Sublime Text — is free and open.
vimscript? you can also write python plugins for vim. but i still prefer kate, where you can do the same, and also have vim bindings if you want, but also have a minimap and other GUI features that are simply impossible in vim. also plugins can access and modify all of the GUI (using PyQt), so you aren't restricted by a tiny API like in ST.
Hands down PyCharm is the best. Also cool (in descending order): Sublime (with the proper plugins), PyDev (if you're into the whole Eclipse thing, I'm not), NinjaIDE.
kate all the way. nice stuff coming (recent addition of the minimap), very hackable using python plugins. i wrote the ipython plugin and the jedi autocompletion plugin. (the latter is better than pyplete)
Sublime Text.
interesting! python-scriptable IDE sounds amazing. two questions: 1. why are the buttons in the toolbar so ugly? you use PyQt, they should be beautiful! 2. are the plugins required to be bilingual Python2&amp;3? If not, how's fragmentation?
http://lxml.de/ http://www.crummy.com/software/BeautifulSoup/ works fine too, arguably with a nicer API; it can wrap over lxml. I don't think you need a book or a guide to do XML parsing, just a good library with good documentation.
autocompletion like [jedi](http://jedi.jedidjah.ch/en/latest/) is just nice, not necessary :)
MOAR! I'm just not done rebutting yet :) &gt;There is an effort being made to auto-convert Vim scripts to Github projects which may be promising, or may be a disaster. I had to check the date on the article - it's from a few months ago? I have 57 plugins. They're *all* from github, no problems. I've never heard of a plugin for Vim that *isn't* on github. I don't know what OP is talking about here. &gt;Ah, Vimscript. It’s bad. Can't argue that. And yet, I have 57 plugins, and a couple dozen of them kick ass, despite the awfulness of VimL. &gt;Most experienced Vimmers I know don’t know any Vimscript. I'm really the only one I know, and I've written more than 1000 lines of it in my .vimrc, and a few plugins, like one that dispatches visual selection or the entire buffer through Outlook (Win 7 at work) to anyone I've added to an email dictionary with 1 keypress (i.e. I want to email this to Andy, so I hit `,E` to pop up my list of names, each of which is prefixed by a letter, with Andy's being `(a)`, so I then hit `a`, and the email pops up with the attachment, and the message "sent from Vim" with a subject explaining what I'm sending. I took 3 hours to write, 5 of those 3 hours being fighting with Outlook, which is a nightmare. And how would they? The documentation on it is terrible, and made much worse by the fact that it’s near impossible to look up help on it. :h script (opens 2446 lines of help on vim scripting) Yeah, I'm a wizard. [Also](http://learnvimscriptthehardway.stevelosh.com/). &gt;Side note: all of Vim’s help is equally poorly accessible. :h That opens up a long page with lots of subsections and 1-line descriptions, one of them being: |usr_41.txt| Write a Vim script Hop into there (it's the thing I got to with `:h script`), and you find in the contents listing at the top: |41.6| Using functions |41.7| Defining a function &gt;But even Vimmers don’t want to learn Vimscript. Again, granted. It's a shitty language. &gt;Vim is missing an incredible amount of core functionality for modern editing. Things like ctag integration. $ sudo apt-get install ctags $ echo 'au BufWritePost *.py silent! !ctags -R *.py' &gt;~/.vim/.vimrc There you go. Ctags integration. Every time you save, it'll update, and I save pretty much every time I exit insert mode (which I could also automate with a single line, if I even noticed that I did it, which I never do). Now you can do &lt;C-}&gt; on keywords and such, just as you do in Vim's help. (that mapping is one of the first things in `:h`, btw) &gt;Let’s use Vimgrep! Oh wait, that sucks. Wait... how so? I've used it many times, and it does what I expect, quickly. &gt;Oh, there’s CtrlP this is much nicer! CtrlP works well for me, but I'm not a big fan of fuzzy file search. I'm of the very strong opinion that programmers created huge, hierarchical messes for themselves, and complect constantly. I'm more the master of my domain, and nothing is more than 2 levels deep, all broken out into proper levels of abstraction for single source of truth and reusability. When I've been on messy projects, I've fought hard to clean them up, and accomplished the task. For difficult things, I make mappings. I have a list where `\` precedes files I want easy access to (todo (`\t`), e.g.), and `\\` precedes directories (`\\d` - docs folder; `\\v` - `.vim` folder, etc (have about 15 of them)). I can add these mappings literally in seconds for one-off needs, so I don't fret too much. Also, opening everything up and using good powers of buffer hopping/management, etc., gives me a lot of power. Fuzzy search is not my go-to choice for almost anything. &gt;Finding the right Vim plugins is like being in an exclusive club. I don't know what this means. In my first year I asked if there was a way to hop up and down in bisected half jumps, as my screen was so tall (vertical, 24", 160+ lines of Vim). Immediately I was pointed to `bisect.vim`, which worked beautifully. That's my typical experience when asking for help solving problems. &gt;The remap overwrites comma... No it doesn't. It shares space with it on a tree. Hit comma and wait a second, and it'll perform the original usage, because you didn't finish off any leader mappings before the timeout. If what you type next won't resolve to a leader mapping, it'll instantly do the reverse hop and perform whatever you pressed next. I've taken advantage of this for many things, and it's become part of my muscle memory. &gt;Do you know what the suggested way to work well with multiple files in Vim is? It’s the arglist. I've almost never heard that suggested. I've often heard of using buffers, though. I use both, but buffers much more. &gt;Vim is designed to run in a terminal. Yay! &gt;That’s why it’s explicitly linked to only monospaced font for the GUI. Hooray! &gt;A terminal can’t draw a UI. Woo hoo!!! &gt;I’m on a server, I’m editing a file probably as a hotfix for something, I don’t need a beautiful editor to do that. I just need to edit text. I'm going to level with OP. GUIs are collosal bullshit. When you're doing the karate, you don't push buttons. You don't have frames and borders floating around you. You simply act. You flow in the void. There is *nothing* in my editor but the text I'm working on - not even a single, gray pixel border, and it is *glorious*, and super rare these days. It's the most distraction-free place I've ever experienced. The only thing better would be Vim inside a sensory-deprivation tank (I just drooled on my shirt). As I've stated, I work with programmers - hundreds of them over a decade - and they spend seemingly half their time mousing around menus, submenus, subsubmenus, missing, having to go back through it. I do *exactly* what I mean to, instantly, every time. It's just me and the text, my thoughts and its words, my mind to your mind... &gt;Here in the future, we have these things called GUIs. I know, and we're complete idiots because of them. I completely agree. It's a real shame. If only people knew the power that lies underneath the GUI. If only they would shed the shackles and learn to do *whatever they want*, and not rely on what a GUI dictates they can do. They would be so free, and so happy, like me. Hey, you can't bullshit me. I spent 20+ years in GUIs of every shape and size. NOTHING has compared AT ALL to my Vim experience. I'm sorry you're too bitchy to join me. &gt;Vim is hideous by design. Yeah, but we've already determined that you have a seriously fucked up sense of what's beautiful. You want bells and whistles, distractions from your true purpose. I want real, ultimate power, and I have it in Vim. &gt;We will never have a minimap (beautiful feature). I don't really see the point of these. I'm not golfing, or geo-caching. &gt;We will never have multiple cursors. I'm fine with that. This is only useful for things that happen on one screen anyway. I work in files that are 1000 lines long. I'm supposed to multiple-cursor my way across 200 lines? It's a gimmicky thing with limited usage, and it masks deeper powers, keeping you limited. Macros, regex, `g:`, combinations thereof - far more powerful for far more use cases. &gt;`:set ft=html` and then `gg=G`. Let me know what you get. In all seriousness, never, ever tell me what you get. I got this: &lt;div&gt; &lt;p&gt; &lt;span&gt;foo&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; Granted, I have this as my `equalprg` setting (`:h =`): set equalprg=tidy\ -i\ -xml\ --char-encoding\ utf8\ --wrap\ 0\ --show-errors\ 0\ 2&gt;/dev/null &gt;...why the hell do I have to configure my editor to indent common languages? I'll give you that one. Why, Vim? &gt;*To code in Vim, you have to keep Vim in your head just as much as the code that you’re editing. You have to constantly think about what you’re doing. I must be some kind of genius, then, because Vim is totally background. It just faded into the mist, and I'm one with my code. &gt;Maybe this is a good thing. Maybe it encourages efficiency and refinement of practices. In my experience, this is the case. You don't become amazing without challenging yourself, and I'm quite frankly amazing these days, at least in Vim, but I feel strongly that it's sharpened up everything. My memory is better than it's ever been. I've stopped writing todo lists and tracking things, because I just remember it all, after a lifetime of being terrible at that stuff. My mind feels sharp and refined, and I code like a demon. &gt;After four years of Vim use, 700 hand written lines in my .vimrc, and 45 plugins, I cannot in good faith recommend that someone start the Vim journey. 6 years, 1000+ lines, and 57 plugins, and I say "Go for it!" Don't be such a fucking pansy. &gt;I want my coworker to edit text and get up to speed quickly. Is telling them to use Vim the answer? It will just slow them down for months. This is not pragmatic to the technology industry. I've had it up to *here* with pragmatic in the technology industry. I've railed against such nonsense wherever I've been, and I've actually gotten people to change things, because I stood up. I'm at the top of a complete shift in how we're doing things in my corner of our business now. They gave me free reign to redo everything as I said it needed to be. Do it. Be fearless. &gt;Look kid, I love you and all, but just use Sublime Text. Despite the fact that I moved writing this post into Vim because I couldn’t stand to do it in a textarea, even though I’m mainly just typing text. I missed my Vim movements too much. Despite the fact that I will probably never stop using Vim. How did I make it this far without realizing that he himself loves Vim? &gt;Even now I want to convert this text, which I wrote in Vim at 80 columns wide, to non-fixed width text... Fixed width or *DEATH!* &gt;I’m going to go search for how to do it. I’m probably going to learn something in the process. At year 4 of Vimming. **GREAT!** No more plateaus for us! Onward and u^p^w^a^r^d^!
&gt; and upward!
You read the whole thing? Chosen One!
Thanks, RSTB. You're always looking out for me.
&gt; .vim \.vim'
This looks cool! Can you think of a simple way in which you abstract this away so one can deploy to dev etc without having to change the code?
I found a weakness. Gentlemen... we're in.
That properly configured link refers to using the omnicomplete feature in vim. I would seriously advocate not doing that and using YouCompleteMe instead. You will be much, much happier. Couple this with Syntastic and you're set. All installed and maintained through Vundle of course. I personally use a mix of vim + YCM, SublimeText 2/3, and (commercial) PyCharm 3. The refactoring support in PyCharm is so very, very nice.
I'm a SublimeText user. What does PyCharm offer that's better than what I'm currently using?
Ain't a thing you can do without an fft, son.
His personal choices aside, a lot of the critiques he raises are still very valid. They are not equally important to everyone (and may not even matter to some at all), but they are definitely valid. E.g. vimscript is one of the main reasons why I left vim after 3 years for emacs (which I've now been using for around 2 years; emacs does admittedly also share quite a few of the downfalls listed in the article, and brings some new ones of its own.) In the end, it's a matter of productivity; I'm already productive in emacs right now, and whenever I want to save something, I C-x-s. If I were to switch to sublime now, I'd lose a lot of the neat and cool features (like multiple cursors) that I really love. But whether I would recommend a beginner to start with emacs/vim, is a different matter alltogether -- because what he says about productivity tanking initially for at least a while is definitely true, I've experienced it myself (twice). I disagree with some of his points though, for instance I do not prefer the mouse for navigation 99.9% of the time, even though emacs in X11 mode gives me that option. (But sublime also gives you the option to not use the mouse, AFAIK -- I don't know whether it feels as polished.)
good script. well done
Sublime does also have the added benefit of having plugins written in python also, so if it doesn't do something you would like, you can quite easily extend it to suit your needs.
Haven't tested it yet, but if it works... great! :-) Pexpect is almost solely the reason why I still use 2.7, it's awesome.
ipython notebook is friggin awesome and I have it open right now. But it doesn't replace an editor. In my case emacs, which is open as well, but whatever editor you like. But ipython/ipython notebook is pretty indispensable as part of a full dev package. Even moreso if you are doing data analysis kind of work.
I don't know that much about ST, if ST has that feature, I'll take that part back, of course :)
NinjaIDE
[Take a look](http://www.sublimetext.com/) sometime. It also has a fairly full featured **python** plugin API to extend with.
Kate with the right plugins.
That's really clever. Very nice.
And a not very well-known, but awesome autocompletion engine for vim (also works with python): http://valloric.github.io/YouCompleteMe/
Hm, I've thought a lot about problems like this. Salt can run minions on windows, it just's that the salt master can't run on windows. Would it be possible to run a single server as a linux box for the salt-master? If not you could fire up a linux vm on a windows server (don't forget to bridge the internet) and run a salt master on that. Otherwise you can do goofy stuff like install ssh daemons on the windows servers via cygwin and then use some sort of ssh multiplexer like fabric. Or use remote ant, but you probably don't want to do that. 
You shouldn't be using class for this. Some wallpapers/images are in `png` format which your script ignores. You should be using `with` when opening files instead of `open()` (Suggestion) Add optional arguments such as custom subreddit, minimum score etc.
cool! This might make a practical interim version.
this one looks very interesting. I'll try to get the hang of it. Maybe this is the best method as a compromise between good aesthetics and code simplicity/clarity.
I got jealous of your wallpaper-changing ways &amp; added basic support for OS X :) Sent you a pull request if you're interested.
This is great but it saddens me to see make remade again.
&gt;It's smarter in IntelliJ because unlike Eclipse, it will not naively start suggesting things that start with the characters you've been typing, it will filter out things that don't make sense in the context of what you're currently working on. That sounds pretty damn nifty. I'll give it a shot. I really like SublimeText, but I tend to be pretty Darwinian when it comes to text editors. If PyCharm can flush SublimeText out of it's niche, then who am I to stop it!
Nice script. I have one little nitpick though: Line 49 will eventually cause a Runtime Error because of the recursion. Python does not have proper tail calls so the function calls will stack up and eventually break the stack size barrier. I'd simply wrap that inside a while loop.
I could definitely set up a Linux master but the effort isn't worth it in this case. As a (mainly) Windows developer I'm tempted to look into the source code of these tools to see if it can be built for Windows. The question is whether Windows support is lacking due to developer apathy or technical reasons.
Ha! Well, at least I wasn't working in eclipse at a time when PyCharm was free. Definitely have to check it out now, though.
Wow what a coincidence, I wrote one that does that for windows the day before yesterday :) It grabs one image at random from the top 100 of the month of /r/wallpapers. If you had that wallpaper before it chooses a different one. It also saves the wallpapers to a folder so with time you'll have a nice collection of wallpapers [Here's the script if anyone is interested](http://pastebin.com/b3iLGaia), you will have to change the path to somewhere of your suiting. Also, you'll have to call the script with Windows, I use Windows task scheduler to call it once a day. I apologize it's a bit ugly, I didn't expect to share it with anyone. EDIT: By the way, I learned this from [Al Sweigart's tutorial.](http://www.reddit.com/r/learnpython/comments/1ngnp0/tutorial_downloading_imgur_posts_linked_from/) This guy is super helpful, he's always contributing with fun stuff. 
Sad it has the same name as another Python module : [Pyke](http://pyke.sourceforge.net/)
fft = Fast Fourier Transform?
And then someone answers "viper-mode", and other guy says that evil-mode is better. Can wr stop this old and overused joke now?
I see nothing wrong with this. It's the better safe than sorry attitude. Sure some people might learn it well enough, but many won't. Most tutorials are way below the level, of what's thought in a good introductory CS class. They don't teach methodology, just solving a particular problem. They frequently are badly written, and teach bad habits. It's much easier to teach someone programming who hasn't seen a line of code than someone with lots of bad habits. As for online courses I have yet to see a good introductory MOOC using python. Udacity's CS101 is very basic and tedious. Books are better, but frequently people lack motivation to finish through. Compare the above methods to actually taking [UCB's CS61A](http://www-inst.eecs.berkeley.edu/~cs61a/fa13/) (the materials are online, but it's not a MOOC), and you can understand why the professor said that.
What advantages does pyke have over rake other than being written in python?
&gt; But seriously, PyCharm (IMHO the best Python IDE) just released a Free Version. free version has a subset of features only and has issues working with openjdk
So far I've professionally worked with Ant and MSBuild. Both have nothing superior on Makefiles. I don't want to compile a JAR or a DLL just because I want to do something unforseen by the build system. I'm not seeing where this is resolving dependencies or where I can call some custom shell commands to do something exotic, like restarting a web server -- _without having to extend the build system_. Make is just the best tool for this job I've seen so far. Edit: Rake actually looks pretty decent.
Vi/vim. Learn one editor that handles all languages. 
Learn an editor that handles all languages AND integrates with all UNIX command line utilities. Vi/vim Emacs is good also but tends to bring on Carpal Tunnel, eg "Emacs syndrome" because it requires so many extra key strokes and awkward reaches. See "Emacs pinky" 
Reminds me of my old Unix Haters Handbook: tons of weak arguments. Take for example, the section called "Efficiency from keeping your fingers on home row" where he insists that navigation with a mouse is better than with a keyboard. In this argument he ignores the entire carpal tunnel challenges with mice/trackballs/trackpads. Which is fine when you're 22, but by the age of 42 most programmers I know are debilitated. It's a big deal, and avoiding mice &amp; trackpads definitely helps many with it.
so sad cos Coupon code onedollaholla is disabled by the instructor
I think you may be missing his point, which is: go on using vim if you like it, but don't go on recommending it to the uninitiated. 
What about code academy. 
If SublimeText is around in 2033 (22 years!), I will be surprised. IDEs come and go. Vim and Emacs have been around for a long time. There's a reason.
Not really a coincidence. Almost every newbie does this as an exercise.
See also: paver, shovel, invoke
&gt;And it's a fine tool for editing But it isn't an editor. If someone asks for a piece of bread you don't give them a sandwich.
Paraphrasing slightly, he says, &gt; If you are new to programming, we strongly suggest you take a semester long programming course, preferably in Python. Please do not attempt to learn Python on your own. The title is incorrect. Students new to programming are *encouraged* to learn Python before joining the class, but discouraged from trying to do it on their own.
Codecademy is great if you want to get your feet wet, but... If I called Udacity's CS101 vary basic, I'm not sure what can I call codecademy lessons. Dictionaries and list slicing are listed as "advanced topics". It's precisely why the professor warned not to learn Python. You think you know it, but you don't. What you learn from that site is some syntax and some builtins. The most complex task is writing to files. Compare the [course I mentioned](http://www-inst.eecs.berkeley.edu/~cs61a/fa12/) above with [Codecademy]( http://www.codecademy.com/tracks/python).
Does it? I thought I read a PyCharm dev answer that it was no longer true about openjdk?
Is there anything I can switch to for python that's online and free that will also teach me as the professor teaches? I just started with the syntax part so my understanding is still not corrupted.
I understand the sentiment and the problems that may arise with a lackluster "intro" and subsequent plunge. However, the dude says, verbatim: &gt; Please do not attempt to learn Python on your own, either by reading a book or taking an online course or reading online tutorial material. That's not the kinda phrase you wanna be directly responsible for imo. 
To be honest, if you're getting to a CS course and don't know how to program already, you probably won't be able to learn it on your own. If you had the talent for that you would have learned it already.
That is not true. Many of my fellow CS students did not know how to program before. They still do fine...
I really doubt there's some innate talent that exists for programming beyond basic puzzle solving skills. To be good at anything, you just have to want it enough to devote as much time as you possibly can to it.
this one? http://www.reddit.com/r/programming/comments/1n1jdy/jetbrains_releases_free_edition_of_pycharm_ide/ccf8nb1
Good effort and so on but I've seen better ones. I see a bunch of not so nice things in this script: * You don't need a class at all for this. Use functions. [Watch this video.](http://www.youtube.com/watch?v=o9pEzgHorH0) * [L49](https://github.com/tom-dignan/pr0nit/blob/c3823073c15318faa5c94c503cf2b5b66979aba0/pr0nit.py#L49): as already someone said, it's not a good idea to mainloop like this. Loop after the `if __name__ == "__main__"` condition. * [L18](https://github.com/tom-dignan/pr0nit/blob/c3823073c15318faa5c94c503cf2b5b66979aba0/pr0nit.py#L18) and [L84](https://github.com/tom-dignan/pr0nit/blob/c3823073c15318faa5c94c503cf2b5b66979aba0/pr0nit.py#L84): use `os.path.join()`. * [L46](https://github.com/tom-dignan/pr0nit/blob/c3823073c15318faa5c94c503cf2b5b66979aba0/pr0nit.py#L46): why do you catch *this* exception here? Catch it where it gets thrown. Then you can just return an empty list, "iterate over it" and continue to the next loop cycle. * [L54](https://github.com/tom-dignan/pr0nit/blob/c3823073c15318faa5c94c503cf2b5b66979aba0/pr0nit.py#L54): don't use `os.system()`. Use [`subprocess`](http://docs.python.org/library/subprocess.html). * [L73](https://github.com/tom-dignan/pr0nit/blob/c3823073c15318faa5c94c503cf2b5b66979aba0/pr0nit.py#L73): Reddit's JSON response already gives information about what the post is. And since you are targeting Linux, I'd rather like to see that you check the downloaded thing with *libmagic* (there are Python bindings) or [*file* command](http://en.wikipedia.org/wiki/File_(command\)) (which uses libmagic) if you don't like external dependencies.
I have a legit question, I have just completed Codacademy and Udacity CS101 and your comment crushed my hearth :'( Should I follow the CS61A course you provided or should I just jump into coding "stuff"?
I think this is counter-productive, elitist, and dependency-suggestive. Learn Python however you'd like. If you want a compsci-level understanding of Python, read the C. Here's the source: http://hg.python.org/cpython ... http://www.reddit.com/r/compsci/comments/1hdzye/broad_knowledge_vs_specialization_how_do_you_find/#cavxnpo [EDIT] http://docs.python.org/
If you have RES, how often do you bother looking in the source for hidden messages? ^^^^^^^^^^gfixler ^^^^^^^^^^is ^^^^^^^^^^a ^^^^^^^^^^fuckface
I would work for your company, sir. You seem like a reasonable boss.
shut the fuck up
vim
Saw a post about PyCharm in some other subreddit, tried it out for a few minutes, and immediately installed it on my work machine. Huge fan so far.
Would following along with the CS61A course be worthwhile? I've been looking for a course like this but I can't afford actually going to school. I'm sick of reading online material that just glazes over concepts.
Well of course a teacher holds a biased and vested interest in, and opinion of, education by teachers in a traditional classroom. Auto-didacts are a threat to his very livelihood. My question would be, if you can successfully learn python on your own...why would you go to school? And who would want to hire someone who could not teach themselves? Why are people who teach themselves considered inferior or less prepared, less educated, than people who require significant, ongoing assistance to learn things the auto-didact would consider trivial?
Make sure to fully uninstall Canopy according to the support document below, then retry the installation. I have had no trouble with the last update on Mac OS X. https://support.enthought.com/entries/23580651-Uninstalling-Canopy 
Rake and similar aren't really designed for replacing that aspect of make - that's what scons is for. They're more for providing a common interface to commonly-run commands (test, build documentation, publish a release), without the arcane structure of makefiles and with the full power of ruby/python/etc.
Ah, so Berkeley discourages learning on your own. Got it. Good thing their faculty let us all know.
For ST3, you only need to install SublimePythonIDE to get most of what you need. I like ST for the text editor.
Fortran and COBOL are still around too. I don't know what your point is. 
I know plenty of folks who work as professional programmers, and their first contact with programming was at the university. 
This is an exaggeration. Yes some students won't be able to learn Python just by taking tutorials. Arguably those students will not be able to survive UC Berkeley computer science anyway. UC Berkeley CS is NOT EASY. Better that you learn that you don't have an aptitude for CS early. This will surface if you can't follow easy tutorials like Udacity, Codeacademy, etc. If you can learn from there, and from O'Reilly's excellent "Learning Python", you are good to go. I feel like if you can't make do with online resources for the pre-101 material, then you will have a difficult time later, when all you have is online material. The CS lecturers often SUUUUCCCCKKK. Ask anyone. Source: I have a CS degree and I graduated from UC Berkeley.
You are using classes almost everywhere. Just use methods instead. As dAnjou has mentioned just watch http://www.youtube.com/watch?v=o9pEzgHorH0 :) That's not for discouraging. I like your script BTW
Thanks for the comment. I come from a C# background and I've only dabbled a little bit in Python recently (a bit more in the past, but still primarily C#). Seeing how far it's come since I last tried it (especially with Python Tools for Visual Studio) has me really impressed. I assume die-hard Python coders look at IronPython and see tons of problems with it... but I've only scratched the surface so it looks awesome to me :)
Thisx10000. CS lecturers are mostly fucking useless. And the ones that are good often have their lectures online anyway. What you really need is an older mentor who will help you work through difficult places where you get stuck. I found mine outside of a university (an older co-worker). You can today find them easily in hacker spaces, meetups, etc. Programmers love to mentor. I am mentoring over a dozen different people at the moment, many over skype. I charge nothing. I do it as a community service. You don't need to pay 100K to a university anymore.
For a while I used to think it was really, really hard to write bad Python. IMO, small programs almost always look good because Python's syntax is so clean - you don't have issues with formatting like in other languages because it's a requirement, not a "recommended, but optional" deal like in C/C++. I've recommended Python to a lot of people, both CS majors and those wanting to get started with programming. The former came back to bite me when I ended up in a team with three people who had only done random Python tutorials and a few example programs based on my advice. I took all of my knowledge from C/C++ for granted, because these people learned Python with only a knee-deep interpretation of Java and C#, so their code was highly unorthodox and hard to read - something I thought was impossible in Python. The strange part, and the gist of this wall of text, was that each member of the team couldn't stop talking about how they felt like they had finally done something impressive (it was a game done in 6 weeks) and that 2 semesters full of run-of-the-mill Java programming was nothing compared to what they had done in a few weeks in Python. I had to understand that, while the game worked, we had missed the point of the assignment; instead of writing good code, we had written a good game. It's really hard to explain the difference between "it works" and "it works well," especially when the CS course at our university focuses entirely on solving small, insignificant problems and doesn't cover managing larger projects and the problems introduced with them over time. Python lets you do the most with least amount of knowledge. A good example of this is Cult: Awakening of the Old Ones, a highly-ambitious roguelike that was over 300% funded on Kickstarter. There was some really impressive stuff being accomplished with pure Python, so I assumed the game had been well-written, until the project was canceled, and the source was posted: [It's a 1MB .py file](https://bitbucket.org/dmhagar/empyrea-public/src/4759faba1443e6105ff6cbf9c2829735f55df593/empyrea.py?at=master) and poorly structured (as far as I can tell.) The idea that all of that stuff was accomplished in such an unusual and poorly-written format says a lot about Python. I don't think someone would be able to do the same thing with an equivalent knowledge of C/C++ or any other language.
I hadn't thought about it on Windows, didn't think it would be that easy. I've done the cliché of writing a script to measure the average colour of a section of the screen to make an ambilight type system though. 
&gt; I've professionally worked with Ant and MSBuild. Both have nothing superior on Makefiles. Ant has one, and only one advantage, which is that make assumes a 1:1 mapping between targets and dependencies. This breaks when confronted with a broken language like java where a single source file and generate multiple object files. Sure, you can do it with make, but it's awkward and clumsy and ant makes that easier. But other than that, virtually everyone that tries to redesign make does so from a position of ignorance and the end result simply doesn't work as well as make. Few people even know what make is. It's a dependency resolver. Nothing more. But it does it spectacularly well.
Programming is all about organization and logic. Puzzle solving is rarely needed.
To me, they're the same things.
SSL issue maybe?
Why is this being disseminated in video form? This is, like, a paragraph of text. Just slip it into the "Welcome to Cal!" booklet. Why would you spend time recording it?
Or, you know, he's seen hundreds of students who have never programmed before pick up "Learn Python in 21 days!" and had to spend two months fielding rudimentary questions that waste everyone's time. It might be *possible* for a minority of people who have never programmed before to pick up some decent programming skills just through an O'Reilly book and 3 hours a week of practice, but this isn't a specific message tailored to each unique snowflake in the program. This is a YouTube video.
Being inexperienced doesn't make you an idiot.
I hate that I'm going to post a link to this, because I feel like it's one of reddit's big circlejerks, but it's also honestly relevant to the thread: http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect The guy is saying that if you don't know how to program, you shouldn't try to learn on your own to prepare for his class, because you'll have no way of knowing whether you're actually learning anything or not, and you'll show up unprepared. Also, holy shit, that file is a nightmare.
Please do!! :) Edit: see you've already done that and that it got merged!! Way to go!!!
I wouldn't be sure about that. I haven't tried PTfVS, but generally visual studio is a stellar IDE
There's probably a bit of a bias in his sample too - Unless he's polling all of his students for previous experience and comparing that to how well they do, he's not going to know how many people teach themselves Python on their own and do it successfully - but he will have to interact with the students who read half the book, get bored, and then show up at his office hours with inane questions. Not to mention, there's probably a strong correlation between people who can teach themselves at home and those who know how to go troubleshoot their problems on the internet, as well as those who can't teach themselves at home and end up at office hours because they can't figure something out.
strange But I'm not sure anyone is going to help w/o more info on exactly what errors you are getting and which environment variables are being set (presumably PROXY and/or HTTPS_PROXY?), probably don't need what they are being set to though. Googling finds 2 [stackoverflow](http://stackoverflow.com/questions/11726881/how-to-set-an-http-proxy-in-python-2-7) [threads](http://stackoverflow.com/questions/14149422/using-pip-behind-a-proxy) that may or may not be helpful.
I can confirm this, we use tsocks and here is our python work-around. I did a bunch of research trying to figure out how to get it to work, only to give up and do this. #!/usr/bin/env python import os import subprocess # This script must be run in the root directory of the virtual environment to ensure the packages are installed correctly # This is because the sub command needs to source the environment for the instantiated shell VIRTUAL_ENV = os.environ.get('VIRTUAL_ENV') with open (os.path.join (VIRTUAL_ENV, 'repository', 'requirements.txt'), 'r') as file_descriptor: for package in file_descriptor.readlines(): command = '. bin/activate &amp;&amp; tsocks easy_install %s' % package print command process = subprocess.Popen (['/bin/bash', '-c', command]) out = process.communicate()[0] print out 
You don't need to spawn an external binary like *feh* to set the background. On Gnome systems (including Unity): #!/usr/bin/env python3 from gi.repository import Gio bg_settings = Gio.Settings.new("org.gnome.desktop.background") bg_settings.set_string("picture-uri", "file:///tmp/wallpaper/n2.jpg") # needs the full path URI # you can also change how the image displays bg_settings.set_string("picture-options", "centered") # one of: none, spanned, stretched, wallpaper, centered, scaled 
I think you are taking the idea the wrong way. Instead of using CPython dev tools, you use .Net tools! You can use nuget instead of pip. You bundle those modules with your project so that it is always tied to those versions and you don't have to worry about if someone has the necessary modules or has a different version because you are including it just like you would with virtualenv. Take a look again from a .Net perspective and you'll find that the dev tools are quite mature. This is coming from a Python guy who also tried to force the Python way of doing things on the .Net world. My dev life got a whole lot better when I stepped out of my comfort zone and starting to embrace the .Net dev cycle a little more thoroughly.
I just downloaded and am using Python 2 so I should be ok. I figure once I work myself through this I'll be competent enough to switch to Python 3 and fix any errors that pop up when I'm coding. 
Is it really that obscure to add a target that runs a shell command and then touches a semaphore file?
i prefer abiword.
Huh. Well, you just got me to try another python specific editor. I can never do it for long before emacs finds out. Then there is always a big fight and lots of crying and throwing things. Emacs always brings up that TECO never liked me and thought we shouldn't get together in the first place, emacs could do better than me. But then there is the makeup editing. Makeup editing is the best and makes it all worth it.
???? Why link the /r/programming post instead of the real link?
If you look at the history of tools you'll see why vi was initially so popular. Consider you've connected by 300 baud modem via a text-only console and need to edit a bunch of files. There is no mouse and no way to highlight sections of text to copy/paste, etc. Instead vi does all these things via seemingly cryptic commands. However if you look at other tools in the unix toolkit, you'll discover that that funky :%s/foo/bar/s syntax for search and replace comes from *sed*. Once you learn the syntax, you can actually get pretty proficient and doing the things you want to do to a text file. And things like having to press a button to start editing is because it has 2 modes: one for taking commands (like the search/replace above) and one for text editing. It has to start in one of them. And maybe this isn't as important today, but there are a huge variety of *nix systems, but you can almost always be guaranteed that there's a vi implementation on them. So if you're working in an environment where you have Xenix, BSD, SunOS, Solaris, Linux, etc, you know that in every one of those, you'll be able to edit files with vi and that the behaviors will be the same. Why do people use it today? For me it's just habit. I'd just as happily learn to use Emacs if I needed to... or whatever tool I'm given. Oddly, when I'm on a windows system, even though I have vim installed, I usually use Notepad++. Though if I have a large search &amp; replace to do, I open it in vim - it does that much faster for a large file than anything else I've used.
For your average beginner's code, Python 2 and 3 don't differ much, in my opinion. I would argue that getting Python 3 code to run in Python 2 and vice versa is good practice for times when porting code gets real messy. As you replied to the comment below, working yourself through is a good idea, since LPTHW is an awesome resource.
i would recommend using [pysdl2](http://pysdl2.readthedocs.org/en/latest/) directly instead of pygame
Wat. Python already had Scons. I'm confused.
Yeah, I messed around with PyCharm for a little bit and I think I still prefer Visual Studio. I especially like Visual Studio's debugging.
I've been enjoying the Python classes from Layola in iTunes U. http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/ 
[Sample result](http://i.imgur.com/CdZzhBp.png) [Click to view 3D model of sample](https://github.com/thearn/stl_tools/blob/master/examples/Lena.stl) (choose wireframe view) Thanks to the gov't shutdown, I've been left with a bit of free time on my hands. Out of that has come a project that I just uploaded to Github, which converts image files and simple text expressions to .STL files, suitable for 3D printing. The code can be imported and used like any other python library. Running the installation also generates a command-line script with the same functionality and arguments, for those who don't want to write any python code of their own. Thanks to some rendering functions from Matplotlib, this can also be used to render LaTeX expressions to high quality .png images, and then as .STL files. Please, hack on it and let me know what you think! Unfortunately I haven't been able to actually print any of the examples, since I don't have access to my lab at the moment. I'm interested in writing a robust webcam-based 3D scanner next. Most likely using [this piece of dark magic](http://opencv.org/) for the heavy lifting. 
Though the Scipy one was faster than the Numpy one last time I checked. 
It's OK if you understand the downsides. Today, Python 3 is the recommended way to go for beginner programmers and newbies to Python.
That...is a copy-paste error.
&gt;If you want a compsci-level understanding of Python, read the C. This is specifically targeted at people new to programming (i.e. people who probably have limited or no exposure to C in the first place).
&gt; I use Eclipse to edit Python files in Linux. That's fine. Eclipse has a text editor. It isn't a text editor though. &gt;So my answer is just as correct as any of the other suggestions here. No, because the question was for an editor, not an IDE. &gt;A much better response would be something like, "Eclipse + PyDev is more an IDE than merely an editor, so it maybe more than what the OP is asking for. I personally use ___ because it loads fast and has a much smaller memory footprint." No, because eclipse **is** an IDE. It isn't more of an IDE, that's what it is. How do you know what the OP was asking for? By reading his question! His question was for an editor, not for an IDE, so I'm not sure how you can come to the conclusion that the requestor doesn't want what he asked for. I don't know why you're trying to frame this as me bashing you for your choice in how you edit your code. I'm simply informing you that Eclipse is not a text editor. &gt;By the way, the OP didn't specify any constraints like "most only be a text editor" or "must have small memory footprint". The question is pretty open-ended. Uh. Did you read the title of the post? It says "Best python **editor** for Linux systems?" That's not very open ended, and is very specific. 
&gt;I don't think someone would be able to do the same thing with an equivalent knowledge of C/C++ or any other language. What, you don't think people can [do crazy scary shit with #define](http://blogs.msdn.com/b/oldnewthing/archive/2005/01/06/347666.aspx)? All languages lend themselves to writing bad code and shooting oneself in the foot, except for languages like Pascal where you can't actually get anything done anyway.
Yep, YouCompleteMe is what I use, it's way better than other autocomplete plugins I've tried, or what ST2 has to offer for example. For Python at least.
I can understand this attitude. When I was a kid, my first programming language was a form of objective C: http://en.wikipedia.org/wiki/LPC_(programming_language) While it was a great OO learning tool (weapon inherits from object (so it gets weight, volume etc), a sword is an instance of weapon), I acquired some really odd programming habits because I basically just mimic'd other peoples code without understanding it. I think it was better than not writing code at all (and at about 12 years old, that was pretty much the other option) but my odd habits had to be corrected by later teachers/professors.
Discouraging students from learning on their own seems like a very bad idea if you want to attract and retain top talent at your university.
I did not like the udacity course, and the only reason I was able to finish it was prior coding experience and heavy use of google/forums etc. I tried to get some friends/family on the Udacity CS101 course a few months ago and they have all now given up and found other resources to continue their learning. Don't get me wrong, Udacity has great courses, CS101 is just NOT one of them.
I learned Python on my own. I never had any external incentive to do so... My major did not require *any* programming at all. Guess what: My python knowledge made me fly through C (incl. Linux/Bash), PHP/SQL courses. I would encourage everyone to learn on their own what ever they like. I think they just want to prevent students to "read a book on it" beforehand and then struggle to "find" the interpreter that accepts their doc-file. 
For someone not already used to R syntax, I'm not quite sure how much more useful this is than explicitly defining a GLM. The difference in LOC is pretty similar, and you feel more at ease seeing various parameters/hyperparameters. Still it's always great to see knowledgable contributors to the PyMC codebase. I wonder why the new syntax "with Model() as model: "
Huh, you appear to be right: http://stackoverflow.com/questions/6363154/what-is-the-difference-between-numpy-fft-and-scipy-fftpack Any idea why they don't both just use [FFTW](http://www.fftw.org/)? 
Pick Vim or Emacs. Learn one. Set it up for the python features you want. And never pay for an IDE again. And check out org-mode if you try emacs. (I'm a new emacs user who converted from Vim. Just now have I let the vim key bindings go to learn emacs on its own. Still miss a bunch of vims motion controls.)
Evil is better. ;)
That article is terrible. I picked vim up from scratch in about 2 weeks. 
I'm starting to see your point actually... To continue on own analogy, which I thought was 'ok', I wouldn't show them the ingredient list because it's something they'll either already know (they handed me the cereal) or will have on hand to look at for themselves before trying it. The original question was why did I choose PyCharm over ST to which I answered I chose vim and PyCharm over ST because that's what worked for me. I contradicted myself because I wanted to say that although I knew what I needed for myself one should base their own decisions on experience and if you don't have that you should try it out. Looking back, without the analogy and the TLDR I probably could have gotten my underlying point across better...
i think your import line for imread should be from scipy.ndimage import imread right?
`imread` is available in both scipy.misc and scipy.ndimage. However, you question reminds me that this function depends on PIL being installed, which is not an official dependency of scipy. I don't think it's installed with matplotlib, either. I should add a check to `setup.py`.
Yes, all of them!
Yeah your first comment made it pretty clear that the tldr was just plain out of place but I was unsure if my thoughts on "you should just try it" were also off track within the context of this thread. No worries on the snarkiness though, your comments were still understood and this was still a good discussion :). Plus, this whole thing gave me some perspective that I hadn't had before so thanks for that.
Hm, not sure if this is the cause, but If your png is grayscale, then the line in the example where I am doing the color channel compositing would fail with an index error. Try commenting it out.
I'm confused, `easy_install` works for op, but a tsocks based solution could work for pip too I guess. (I'd also the use `subprocess.check_output` shortcut, but that's a nitpick and try to find a way around)
How is proper guidance elitist?
Patsy (the package turning R syntax into a design matrix) has many other features as well such as converting categoricals to different codings (e.g. dummy), transforms (e.g. log) and short-cuts (e.g. x*y for a main-effect of x and y and an interaction). With many predictors the model spec also gets pretty messy. The 'with model:' syntax is a way to implicitly pass the model reference to each random variable and the sampler (otherwise you would have to pass that around manually all the time). It is also an explicit way to dissociate model specification from other code.
You were right that was the case, so i tried a few files and actually got a pretty impressive result. http://www.filedropper.com/fb_4 if you wana check it out. pretty cool man good job
thanks for the reply. I'm not familiar with Patsy, but your points are valid. I would say likely more useful for someone in industry -- who is routinely applying the same standard models to incoming datasets. RE: with syntax, so far in PyMC 2, I have explictly separated model from run code (and other simulation codebases). This is done via a model factory to return the dict of random variables, which I have found to be modular enough. also, friday night brogram sesh
Typical teacher attitude; you can only learn when taught by a “certified” teacher, only available in an university.
No, but in general, when both Numpy and Scipy implement something, always choose Scipy. (e.g. matrix inversion)
I think it is the best autocompeltion engine for C++ out there (not counting the problems that arise from vim bugs or the non-multithreaded nature of vim plugins). It also works with C#/mono if you compile with the matching flag.
Most of those struggling with programming have the hardest time mentally keeping track of state.
So do I, and barely a day passes when I don't use it. This article has caused a profound change in my behavior: though I still use Vim, I have stopped recommending it to younger folks.
From what I can tell watching quite a bunch of guys trying to pick up Vim, you are rather an exception and not a rule. Good for you though, Vim is awesome.
Sublime supports auto-pep8, lint and all required things too. And, it is faster.
It would be interesting to learn why exactly these technologies optimize so differently. 
disqus and related services like it ?
What advantage is there using this than something like https://code.google.com/p/pyffmpeg/
Sounds like someone gave him the same advice about learning English.
I just showed that you can do any audio writing/reading with 10 lines of pure Python. The other Python/FFMPEG interfaces I have found (like pyffmpeg) use C bindings (with cython, ctypes...) to speak to FFMPEG, which make them a little heavy in my opinion (Edited :but they can be twice faster sometimes).
How would someone go about reading video frames directly from a webcam stream, interpreting each frame as pixel lists on the fly. (image = [[(R, G, B), (R, G, B)], [(R, G, B), (R, G, B)]] a 2x2 pivel image example) 
Try SimpleCV, it really does that very well. Its only flaw is that it relies on OpenCV, which is heavy and not always easy to install. Maybe with pygame also ? Doing that with FFMPEG will certainly be my next exploration (but it seems that the ffmpeg syntax to read a webcam is platform-dependent )
What does the input to the writing stream look like? A list of RGB three-tuples?
Actually, the input will be a string in python, of the form "RGBRGBRGBRGB..." where R,G,B are each one character (one byte) that gives a value between 0 and 255. This gives then the color of each pixel, line by line, top to bottom. If you have a numpy array, the command tostring does exactly that. Thanks for asking, I will clarify that in the blog.
Are those values zero padded? It's not clear to me how they divide up the boundaries.
My mistake. Just edited my previous answer.
What did you not like about Udacity? I haven't quite finished the course but so far I've thought it was pretty good and I don't really have prior programming experience.
I would love a bit more detail including maybe a site to test this against. I'd love to fix this up quickly.
How would you concatenate two videos?
Nice share. At some point I'm going to need a script to add an intro, an outro, and a watermark to the main video. Then it goes on YouTube (manually or scripted, either is fine since I'll need to annotate the video anyway). Good to know some tools are out there for when I do start this little task. Thanks!
I am not a researcher that specializes in this area, so I'm unaware of research that shows that mice are worse than keyboards. I'm also unaware of research that shows that wristrests work, or that posture matters. I'm not saying that research doesn't exist, only that I couldn't put my finger on it. My information has come from working with physical therapists, massage therapists that specialize in carpal tunnel or rss, talking to other users and my own experience. What I've continuously found is that a vast number of people have problems with the highly repetitive very small movements involved in mice. And quite a few people apparently have issues with their thumb on laptop trackpads. Seems that most people with these issues try out ergonomic keyboards and trackballs. Personally, I've found that mechanical keyboards have been great (least effort to type), and certain trackballs are also very low stress and don't focus movements just on the thumb. Quite a few people I've spoken with have gone this exact route and have discovered that moving more interaction to the keyboard has helped enormously. Of course, all this is in addition to paying attention to posture, exercise and positioning.
Not everyone uses GNOME... Or a DE for the matter............
Proper guidance would have been stating what qualifications are needed, not where to óbtain them. *As stated* his evidence against online/self-study is anecdotal at best and really not worthy of an academic institution. Alternatively he could have said that his personal experience with self/online taught students has been poor, and he would advise such students to be extra careful in ensuring that they live up to the require qualifications, which he would then have to state in a meaningful way, e.g. by stating some problems that a student should be able to solve before attempting his class.
worth reading