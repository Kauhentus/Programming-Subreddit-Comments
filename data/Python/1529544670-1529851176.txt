Yeah, I was unable to make an account so I googled and found a great API called Twilio that also sends SMS but can send voice calls too. Only bad thing is it cost close to a penny per message and I‚Äôm not paying anything but you get about $15 to start off with and you pay $1 a month for a number but yeah I got that API to work but I might look for another one because it cost and I don‚Äôt want to have to keep making new accounts
he is him
Hey! I am on the same boat and what I try to do is that, I try to clean data as much as I can for work voluntarily which gives me the option to play around in Python ‚Äúwhile‚Äùworking. If you have the option, you should try ‚Äúhelping‚Äù at work as well!
Udemy : "Hey, I steal your stuffs and you can't do shit about it"
Really nice thing! I also was not comfortable with Quart and it's compatibility with flask but whatever... Is VTE providing also include, parent blocks, macro and all this other things like Jinja? Best regards
I have just bought a whole bunch of courses around Python. May have spent 60 dollars on it and they cover all sorts of different aspects I will want to learn. Literally +80 hours of content. For the cost of a less than a single hour of professional instruction. Could I find this all by myself for free on the internet somehow. Sure, but it would take me hours and hours to even understand how the different frameworks, libraries and IDEs fit together, let alone learn any about using them. It‚Äôs all curated a served up in a way that‚Äôs easy to follow. Does this replace a CS degree, of course not. But to learn a marketable skill over month for the price of two personal training sessions seems like a steal. But I‚Äôd love to learn more which MOOC sites are better...
Context switches for python are &lt; 5 us so it's not the threading, but more likely whatever data processing you are doing that is holding onto the GIL. Why can't you have multiple worker processes? Can your elasticsearch run in a C-extension? Also the highest performance message queuing system for Python that I'm aware of is PyZMQ. You probably want a push/pull network pattern, but it's hard to say. https://stackoverflow.com/questions/30824819/zeromq-pattern-for-load-balancing-work-across-workers-based-on-idleness#30826550 
I mean, for-profit colleges just provide the material; it's up to the consumer to decide if it works for them.
Sorry, I was answering question 3.
Yes
Yes but beware I'm still working on it, wait the first stable release :)
Your videos are awesome Sentdex, thank you so much!
Damn, I really liked Udemy till I heard this.
I'm torn, there are good courses on Udemy. definately scope for youtube to step up and make it easier for youtubers to sell a subscription model.
Hey, AspiringGuru, just a quick heads-up: **definately** is actually spelled **definitely**. You can remember it by **-ite- not ‚Äìate-**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey [u/AspiringGuru](https://reddit.com/u/AspiringGuru), it's perfectly okay to misspell things. You should totally use spellcheck when you're writing formally, but on Reddit it's really not a big deal.. and it's not like that "tip" is going to help you remember the spelling anyway! I *actually* hope that you have a nice day. ***** I am a bot.
coursera and edx. well not really if you are looking for courses on specific skills. Coursera and Edx restrict courses to registered Universities. possibly Lynda?
There isn't one... It's just one of those "You're not wrong - you're just an asshole" things.
Who the fuck uses Udemy. You can find most of the shit you want to learn on Youtube and the rest while reading the documentation of a programming language or framework.
Just use multiprocessing instead of threading.
It's a bot turf war
teamtreehouse?
Well done mate!
Create a virtualenv to start.
Signed up, shall I expect a confirmation email?
I haven‚Äôt made that yet, haha. But don‚Äôt worry, you‚Äôre in the system :)
You should. Or point me to your github and I'll take a stab at it.
Me too 
You got it, I‚Äôm working on it now. And I‚Äôll create a repository for the program as well!
Good man! Many thanks!
^__^
&gt; While the overhead is generally negligible, bad practices and mistakes can lead to unfortunate situations. Wish instead of linking to a youtube snarky video, you would've linked to an actual source/blog etc. that would point these out. It sucks that such garbage content is being put out these days that put opinions out there without any concrete basis.
Bad bot. We don't need this kind of bot-on-bot conversation. 
Thank you, navyjeff, for voting on MisspellingIsOkay. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
This post is better suited for r/learnpython 
This post is better suited for r/learnpython 
This post is better suited for r/learnpython 
Did you compile cython code of falcon?
Yeah, I actually use them as commit categories.
In addition to other replies: there is no simple way to make push notifications from web page to mobile device.
Fucking terrible. I'm sorry that happened to you. What are your options? :/
Will it be compatible with existing flask plugin? 
Agreed. I've removed them both. Bots shouldn't be taking to each other and spamming people.
Coursera, EdX, Stanford course.... I guess you can say courses in these MOOCs are move advanced, but for the beginner level quality like Udemy's course you can find them online (for free) everywhere. 
&gt; But I‚Äôd love to learn more which MOOC sites are better... Coursera, EdX, Stanford course.... I guess you can say courses in these MOOCs are move advanced, but for the beginner level quality like Udemy's course you can find them online (for free) everywhere. You see, the sentdex's is literally an example, good quality instructions without any fee! 
You dont have to üôÇ thats the whole point
You can't say how many of them are bot and free user though (marketing purpose)
I learn git and django on udemy, I don't know what to say. 
But...But...python's where it's at.
&gt; We raised money on user growth metrics that weren't true. But how do you fake the audit record though? Doesn't the investor look at the profit?
For slack?
Damn, I've spent about 100 bucks on udemy and I agree, most courses are sub bar but some are ok to get up running with a new language or skill. 
Not for str, like I said, there's a special case in the interpreter. 
I purchased a group of tutorials once, some sort of "Learn Python in x hours" series. Within five minutes the guy had completely lost me even though it was advertised at complete beginners. I left it a 1 star review and told people to avoid. Imagine my surprise when I received an email from the creator asking me to change my vote because others have rated it highly so it's obviously good. I told him I would not reconsider because I left an honest review and felt it was worth one star. I couldn't believe the cheek of it. Also the YouTube adverts? "_____ is where it's at. You know, you should do a course on______ at udemy.com" No thanks - I got all my udemy courses via stacked skills deals and not one of them has turned out to be any good.
Has read about the Udemy plague for some time. Never bought from them before. When I want to learn programming, I go on Youtube and other MOOCs (EDX, Coursera, Udacity).
matplotlib is totally fine, Seaborn is a nice wrapper on top of it if you're doing stats, and Bokeh is pretty great too.
Great work, many thanks! Any recommended database ORM?
Lynda.com and Pluralsight...and also freecodecamp.
Then Python is best solution to do that. Good luck :) PS. Was there any question in your post?
&gt; but it is missing pip3 This doesn't necessarily mean that your Python installation doesn't have `pip`, it just doesn't have a script to call the main() function from `pip` package, which is most likely present in your installation. To verify that, try: python3 -m pip --version If it prints something about pip and Python version, you are good to go, just do whatever you intended to do with `pip3` using `python3 -m pip`. This will not, however, solve your problems with requirements for superuser privileges. In my experience, it is best to deploy everything as if you were root. Just have one single Python installed on your machine, single `site-packages` directory and so on: very simple and fewer things will go wrong. However, it sounds like you have to deploy to a machine not owned by you, so being root is not an option. I don't like the `--user` option to `pip`. What if the current user doesn't have a home directory, or it isn't writable, or I must have several users accessing the same installed packages? Well, it's a mess. Virtual environments should address this problem better, at least in theory. So, perhaps you already have `virtualenv` script installed? It is typically installed with Python. If not, you could simply download it. The `undefined symbol` problem is quite a bit more severe, and will likely prevent you from using `lxml` with this setup at all. Here's why: In this context, "symbols" are strings that are embedded in program compiled code in such a way that the program which loads those programs knows where to find definitions of functions, structures, variables etc. in the loaded program. In your particular case, the program that does the loading is `ld` - it is designed to load shared libraries. The program being loaded, or, actually a library is `lxml`. The library believes that it must be able to find a definition in all executable code loaded so far with the name `_Py_ZeroStruct`. But, this definition hasn't been loaded. The most plausible explanation for this is that `lxml` library was compiled against different version of Python, where this symbol was defined. This means that in order to get `lxml` to work you will have to do one of the following: 1. Find the version of Python it was compiled with. 2. Recompile it using Python installed on your system. Notice that simply having Python installed on your system isn't enough for this. You need to have Python headers (on Ubuntu that would come as part of `python3-dev` package.) You also would need a compiler capable of compiling the library, for example `gcc`.
For deployment you could go for virtualenv or docker. With virtualenv it is easy to keep dependencies local to each project.
hey! thanks for your fast reply, gonna check those things out
Thanks very much mate - looks like it could be a genuine option so will investigate further. Thanks again, Cheers
Step 1: Learn [scapy](https://scrapy.org/), xpath and css selectors Step 2: Configure a simple spiders to follow links and scapy with a long cache to store crawled pages some time. Step 3: Write items and configure a item pipeline Step 4: Write a custom spider for a site and rerun (Yeah, you don't hit the net because you have a cache) Step 5: Repeat step 4 many times until you get bored Step 6: You have a working system. Resolve some issues: what to do when site templates changes, monitor your systems, profile your spiders, make scapy scheduler distributed and run in cluster,... Enjoy ;-)
I use your website yes I do
There are many other ethical problems. A huge amount of marketers are immoral so everyone has just grown to accept what has become standard practice 
Senpai Sentdex, Amen!
Use a game engine to create games. Kivy is a GUI framework and not intended for games. You could try the Godot engine, it's gdscript is quite similar to python https://godotengine.org/
That's what I used a Telgram bot for before (to notify me when a website wasn't responding), but this doesn't seem like the sort of thing that needs push notifications.
No Python expert but I always here about Django talked about as a web framework for Python - https://www.djangoproject.com/ 
Most of the providers do that. Google Play, Apple iStore you name it. I'm sick of people stealing content
Yep, I have my songs stolen for years already. They are bringing revenue to some German company... I contacted them with DMCA (google play, beatport and some others) and all they did just reply "well we have counter claim from a lawyer so fuck off". I contacted a local lawyer and all they said is just "well either eat it up or sign yourself with RIAA or whatever". Here's what I'm going to do though. They stole my pre-work. Or as we can say "beta" songs. I'm going to refine them and release them again under same names so that people will see they got duped.
I'm torn, there are good courses on Udemy. Definitely scope for youtube to step up and make it easier for youtubers to sell a subscription model. 
If you only need a simple static website you could use the write command to generate a html file. 
see https://www.reddit.com/r/Python/comments/8scbgm/fast_asynchronous_and_sexy_python_web_framework
In Python 3.7 they‚Äôre introducing profiling of imports. That‚Äôll help a lot. 
But normally you use Sentry on top of logging, not "or". You add a handler so for example all errors and fatals go to Sentry. But I agree that discussion about logging could mention Sentry or similar service.
With the clarification that I am making no claim about the speed differences here but wanted to point out some issues which may dramatically effect the validity of your numbers. * You really have to run timeit with a *count* greater than *1* due to the differing costs of launching the functions and due to differing timer resolutions. There is also the risk of measuring differences between the timeit library itself. * It may help you out to look over `PEP 418`‚Äã, if you look at 3.3+ you will notice that it is using *time.perf\_counter()* while 2.7 will be using timer. On linux 2.7 is using *&lt;function time.time&gt;* and on MacOS it is using *&lt;built-in function time&gt;* for me. You can check this by running. from timeit import timeit timeit.__defaults__ * I get the feeling that your graphs are in bytes, which are an assumption of bandwidth is hiding the fact that the tests are often reporting values that beyond the timers real resolution. You may only have 10ms of resolution if you default back to an older clock. Best of luck with this pursuit, it is hard to do well.
They draws attention from the commit message at least for me
When you say voluntarily cleaning data, are you at a larger firm ? I‚Äôm not sure my company would allow that üòÇ
I'm not an expert however I would suggest you to not including the video/research paper in the github repository. 
&gt; just not HTML. Um, are you sure you want to create a website? HTML is a requirement for that somewhere...
What features do you need for your website? And why do you want to learn to do that? Answering those questions will help us giving you the right answer. 
This triggered a thought: What would it be like if your booking system reserved an hour here and there that could only be booked closer to the date, or last minute? How would you implement it?
Beautifulsoup + mongodb will do you quite nicely. * https://www.crummy.com/software/BeautifulSoup/? * https://api.mongodb.com/python/current/
Thanks for the video, there are a lot of Udemy lovers on the data science subreddits that would rage at this, because ethics are a big part of data science and the more well educated one's are absolutely against such business practices. Thanks for bringing this up and providing some proof of what is going on. 
Thanks for implementing it! I love getting canonical implementations of research algorithms out there for the community. My recommendation is along that theme. 1. Make it easier for the community to access! A github repo is a good start, but a `pip`-installable package would be better. You'll need to restructure a little, mainly hiding most of your code away in an inner directory and creating a `setup.py` with `entry_points` to allow people to run it as a script or use it as a library. 2. Python has a strong set of community standards which helps make everyone's code easy to look at, read, edit, and incorporate. These are called PEP8 and I recommend you read + use them! The simplest things to spot are stuff like using 4 spaces instead of tabs for indentation, and using `snake_case` for functions and variables instead of `camelCase`. It sounds like nitpicking but it really aids integration. 3. You can auto-generate documentation pages from your docstrings using `sphinx` and `github.io` or `readthedocs` - that'll make your documentation much more searchable, accessible, and easy to maintain than having to personally create those PNGs.
This seems more like a post for r/learnpython My general recommendation is to use pandas read csv and then use selenium for web scraping (Selenium is more beginner friendly than BS) Both are not in the default library, so you need to ‚ÄúPip install pandas‚Äù and ‚Äúpip install selenium‚Äù Additionally, you need to install a driver for your browser and selenium If you have more questions, feel free to dm me
Thank you for the indepth review. I will consider all your opinions.
Thank you. I will provide the link to research paper and remove it from repository. Basically the videos are being generated by myself. So ain't it a good option to show people about the generated videos ?
But he can't wait to see what you do with it!
As I understand these guys (Timber) offer their own "cloud-based logging system", so why would they advertise their direct competitors?
`datetime.release.date` - what? There is no such module. TBH, I don't understand at all what did you mean by this post.
A website almost by definition needs to be written in HTML. But you can make your life easier by using Python to generate some (or all) of that HTML for you. [Flask](http://flask.pocoo.org/) would allow you to use [Jinja2](http://jinja.pocoo.org/) templates to get rid of a lot of the repetitiveness of HTML and insert dynamic data into your site (like from a database). There are ways to generate HTML with Python functions (like [Yattag](http://www.yattag.org/)), but you're still working with HTML there, you're just not writing it directly.
I can see.
Plotly is really awesome and easy to use, especially for 3D. But for some features like saving private plots you have to pay. 
I suppose I mean a minimum as its part of some coursework that i get no Mark's for html on.
Go through Github repos and search for stuff like Passwords, secret keys and so on. Could also look out for some AWS success keys or Stripe/PayPal :) 
This week I'm working [Whisper](https://github.com/SavandBros/whisper), it's a real time chat application Django and using Django-Channels for websocket. Also, [GoNevis.com](https://www.gonevos.com) a blogging platform, it's in Django, Python and many other cool stuff.
If you have a resonable amount of data, [Plotly](https://plot.ly/python/) would be my go-to (in offline mode, of course), with [cufflinks](https://github.com/santosjorge/cufflinks) if the data is stored in Pandas. There is a limit to how much data Plotly can display however, so if you're working with really huge datasets, a static render from matplotib might not be as pretty, but would do the job just as well.
Wouldn't bots have to pay for those courses?
Tim is the motherfucking man. He's teaching me python!
How much python do you need to know for that course? I've been considering that course, but I know only a little python. (I do know how to code in other languages though.)
I have found this to be the best out of Lynda, plural site, udemy 
Does Zerynth do any screening of community libraries? Or can anyone publish anything? 
It is. You have it on youtube, so I would suggest linking them as well in your readme. When people fork/clone your content they're looking for code - so I suggest keeping the content as clean as possible.
Nice job on your first project! However, you should put an example or two on that webpage, a lot of people wouldn't sign up for something if they can't see a preview of what kind of messages they'll be receiving. 
Coursera for the win 
they're udemy's bots... they aren't machine learning
if you use int, i think it always rounds down? eventually machine precision is going to catch up with you and there will be an error. Try rounding properly.
Good question. I think you need to be at least intermediate in Python. They cover lots of numpy arrays and data frames, so review those as well. 
Ok! So I bought the [ML A-Z Python &amp; R Course](https://www.udemy.com/machinelearning/) 2 days ago and then this video comes out. I don't mind the 10 dollars but this specific course is good right? I am understanding the stuff and it all seems to be organized properly. Thoughts?
What an interesting project. You should consider trying Heroku if you don't want to deal apache, configuration files, etc. Also, is the project open source?
Scrapy, not scapy.
Thanks! I'll look into Heroku, here's the source code: github.com/Aperocky/wallpinger
Great thanks! I'll def take the time to check it out.
You have a misunderstanding of how type systems work. There's no universal definition of a "type error". Any error that is caught by the type system is a type error, and what errors your type system can find depends entirely on how rich it is. ML can catch a lot more errors with static checking than Java, even though they're both statically typed. Many errors encountered in Python are actually things that could easily be caught by a static type system (e.g. missing key)
I found some interesting courses on it that were legitimately from there like a good Korean course that took an interesting approach. 
From that issue: &gt; If we assume we don't want to change the representation of strings, then the problem is that string_concat(v,w) doesn't know if v will soon released, so it cannot resize it in-place even if the refcnt is 1. And if I'm understanding it correctly, the refcount is 2 when it's on the stack (i,e., you have the reference in the variable frame and a copy in the stack), so the problem is determining the reference in the variable frame is dead. Been a long time since I've worked on a stack-based VM, and even longer since I've worked on one using refcounting!
Got it. It's done. 
I've never utilized their EAP before. Is using the built-in license absolutely necessary, or does "default" mean you can use another license? Pipenv support is tasty af. 
I have seen a few courses on it that were useful but the amount of useless dump there is way too much. Other sites are much more efficient and all courses are by experts that are professors in universities so they have some credibilitiy too. 
Cross-posted at [https://stackoverflow.com/questions/50954839/why-does-concatenation-in-python-appear-to-be-getting-slower?noredirect=1#50954921](https://stackoverflow.com/questions/50954839/why-does-concatenation-in-python-appear-to-be-getting-slower?noredirect=1#50954921)
Published a tutorial about [running a batch file from Python](https://datatofish.com/batch-file-from-python/).
What projects have you done with what you learned from that course? Did you buy any other courses from that content creator?
Grider's are really the only courses that have been worth it, imo.
Ah, the old reddit hug of death
Agree for sure. I would only recommend people take the really well-known and very popular classes which are taught by the top teachers. There are a few teachers, like Colt and his python class, which are awesome and well worth the money. I think it just takes some research on the user's end. But the bad stuff is really bad. Some of it is just totally ripped off from other places or youtube videos. 
Cool! Thank you for sharing the code and keep up the good work, there's potential in this project :)
How big are data pieces? I have a singlethreaded Python program that churns through about 500 messages, total size about 20MB in about 0.05 seconds. That doesn't count network waiting times neither sending nor receiving. This is just the time it takes to read the binary payload and to call all the necessary constructors of Python objects. So, if this sounds like an acceptable throughput for you, maybe, instead of investigating options for parallelism (which are terrible in Python), you could optimize the single-threaded performance (that's at least a tangible goal).
Touches on a broader concept; it's difficult to find projects to do that are mostly original and that truly intrigue.
No and never will because they have different architectures (sync/async)... Vibora is a completely different framework, just based in Flask concepts.
looks like you left in the [secret key](https://github.com/Aperocky/wallpinger/blob/master/wallpinger/settings.py#L23) which can be quite dangerous
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Aperocky/wallpinger/.../**settings.py#L23** (master ‚Üí 4c5a6dc)](https://github.com/Aperocky/wallpinger/blob/4c5a6dc1788e88ae9e2c3dc2c67ef91e1ba0aacd/wallpinger/settings.py#L23) ---- 
Thanks! Just removed it. I just looked up what it does - luckily my project doesn't use any of its functionality yet, but I'll change it anyway.
Spamming a blog. Nothing new. Reddit should get rid from shity blogs like yours
PyCharm sometimes add this kind of docs too.
If you have a lot of data, use SQL server built-in tools such as CSV importer. As much as I like Python, the speed difference between using native importer vs Python is night and day.
Working on a big presentation on Python/Pandas. This will be my sales pitch to introduce Python and Pandas into my company as approved toolkit. Fingers crossed!
what did you do?
fig, ax = plt.subplots(figsize=(15,10)) # calculate the correlation matrix corr = df2.corr() # plot the heatmap sns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns, annot = True)
You might want to generate a new secret key anyway. It's [still available](https://github.com/Aperocky/wallpinger/blob/4c5a6dc1788e88ae9e2c3dc2c67ef91e1ba0aacd/wallpinger/settings.py#L23)
&gt; # SECURITY WARNING: don't run with debug turned on in production! &gt;DEBUG = True Really?
It might be better to have the server in Germany act as a remote proxy (perhaps with a different IP address that it's connecting to the backend with) to hide your Chinese IP a bit better.
No. 
&gt;def __init__( self, option_strings, dest, **type = NetworkValueType(), default = NetworkValueType()**, help = "supply a value or obtain from network resource" ) Are those supposed to be objects, and not references to the class? https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument https://docs.python.org/3/library/argparse.html#type &gt;type= can take any callable that takes a single string argument and returns the converted value &gt;&gt;&gt; def perfect_square(string): ... value = int(string) ... sqrt = math.sqrt(value) ... if sqrt != int(sqrt): ... msg = "%r is not a perfect square" % string ... raise argparse.ArgumentTypeError(msg) ... return value ... &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('foo', type=perfect_square) &gt;&gt;&gt; parser.parse_args(['9']) Namespace(foo=9) &gt;&gt;&gt; parser.parse_args(['7']) usage: PROG [-h] foo PROG: error: argument foo: '7' is not a perfect square
Cool project. Just curious if you've seen this already? http://greatfirewallofchina.nl/index.php
This is not production - I'm testing it out. Another reason is that static calls are not forwarded if you don't run with apache in DEBUG = False.
It doesn't seem to work for me, all website is blocked, even Baidu
Good idea. I think this is the right way to go. 
You're right, it will always be there as part of git, I'll generate a new one.
Fixed. I was originally intending to use static without --insecure tags, and probably move to a new server after this test, but I think you're right. Thanks!
It's not a huge deal--debug mode is only really useful in an attack for gathering information about the code and environment via stack traces, but all the code is available on GitHub anyway. I think Django also tries to redact any secrets. But you're right, it's always better to turn off debug mode.
Real MVP. Wish I had gold.
The [Django deployment checklist has some nice ideas](https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/#secret-key) for how to handle it. Still haven't done it to mine but that's the route I was going to try and then specify everything in the readme for how running it works.
I‚Äôm actually starting to learn python from a good friend. Just figured I‚Äôd start reading posts on here and maybe converse a little.
Cool project.
"You know, *paaaaaause* you should take this AWS certification course..."
Just wondering, what would be a reasoning why you would not want something asynchronous? 
Smaller issue, but I'd throw pycache in your .gitignore at some point
Yes, I built a sentiment analysis project that scapes tweets and determines the polarity of a tweet (if it‚Äôs negative or positive). I also purchased a chatbot and blockchain tutorial from the same creators.
About 3 days. 
Thanks. Apparently I missed some \_\_pycache\_\_
Big data is huge in industry. How about scraping a specific subreddit for data, then categorizing/manipulating the data to show it's significance? I can't think of something specific currently
Hey there - posts like this belong in our monthly job board. Please post it there.
I'll give it a try
/r/learnpython is more appropriate for this content. Consider deleting it and reposting.
WTF dude?
yeah. I know
No..just for learning sake..
Here you go: [https://en.wikipedia.org/wiki/List\_of\_unsolved\_problems\_in\_computer\_science](https://en.wikipedia.org/wiki/List_of_unsolved_problems_in_computer_science)
Looking for a Backend Developer - Co-Founder FullStack Web Architect (NodeJS, Ruby or Python + Django) WORK YOU‚ÄôLL DO Architect, Design, Implement and Maintain UrbanLife‚Äôs current backend server infrastructure \- Basic qualifications WHO WE¬¥RE LOOKING FOR? 3-6 years hands on experience building interesting and innovative web applications and microservices 1-2 years experience designing and building software systems. i.e., planning out infrastructure, cloud platform components, network details etc. Experience designing and leading engineering systems and DevOps, i.e., managing the process of building software. \- Technical Literacy: Working knowledge of git Experience with at least one of the following languages: Go, Python, Ruby or JavaScript Proficient in Data Structures, Algorithms and State Machines Multi-threading should come as second nature to you \- Preferred Qualifications (General): Below are ‚Äònice to haves‚Äô, and if you don‚Äôt have more than one or two, don‚Äôt be discouraged. Experience with more than one programming language (Python preferred) Hands on experience with Amazon Web Services Experience with the Serverless framework and serverless architecture. Experience with microservices architectures and constituent technologies Experience with containerization and container platforms. (e.g. Docker, Kubernetes, Docker EE, OpenShift, Mesosphere) Experience with Event Driven Architectures and constituent technologies Experience with high performance networking (Quic, network layer optimization) or realtime transaction protocols/methods (HTTP2, Server Sent Events, MQTT, WebSockets) Experience with distributed SQL databases (Postgres) email to: [rafael@urbanlife.life](mailto:rafael@urbanlife.life)
Good idea! I'll be adding that soon :)
Apply for jobs?
Working on a virtualized version of the machines our team works with. It has to communicate to an IoT database using MQTT, and use sockets to allow external programs to queue messages to the machine, such as shutdown requests. It's been a rough, but interesting project.
I posted the same hours ago, but still no one replied me. Sorry. I'll remove from here. Thanks btw
Some fun detail. When I ping this from Europe the date time format displayed changes to f.ex Thu, 21 Jun 2018 17:52:03.
[I recommend this icon for the project.](https://www.deseretnews.com/images/article/hires/1832586/1832586.jpg)
You are taking people's passwords here: https://mazemint.com/v1/mint/55182222-fe96-495c-95f4-07a641460175?label=hello23&amp;ok.x=20&amp;ok.y=8&amp;ok=OK Which means you have a server logging people's passwords. The OP wants to know why they would trust your website with their passwords. Given your response, it's obvious that you have not considered the security issues with your "production" ready site.
I really find it absurd to say those deep accents are neutral and easier to understand to a non-English speaking person, and this is coming from anon-English speaking person. 
Decided to start playing around with django and create a webapp.
Oops, the link I previously had was actually http://www.greatfirewallofchina.org/, which redirects to: https://www.comparitech.com/privacy-security-tools/blockedinchina/# That appears to work correctly.
`input()` returns a value only when it receives an EOF or a newline. Your whole script waits for `input()` to return something. Not related to the question, but please take a look at PEP008 for some naming conventions (capitalized names are for classes, not functions and variables e.g.). Also, using `global` variables is generally considered bad practice. Questions like these about Python are usually better asked in r/learnpython .
Couldn't call future without using global, I will post the question on r/learnpython Do you perhaps have a solution?
To the actual question, no. But you can rewrite your function: def get_future_time(): return time.time() + 3 future = get_future_time() while .....
I re-started learning Python, so pretty much working on getting the syntax in my head and finding inspiration for cool projects. Tips for faster learning are welcome :)
Check out [osmapi](https://github.com/metaodi/osmapi).
Circling back a little late... Totally appreciate your response. So I agree that pep 508 is great for native python packages. What about something different... what about something like scipy which may require something special on a Mac but not on Linux: ``` (unset LDFLAGS &amp;&amp; pip install scipy) ```
What should I add to improve this repo? It creates a digitalocean instance, runs a listener on the new instance, and generates a payload to run on a firewalled computer. I restricted it to port 22 access, however it could be tailored for use with any port.
Um, if you're concatenating 2 non-empty strings, wouldn't you need to allocate a new string anyways?
No: the optimisation was essentially: if there's only one reference to the string on the LHS, `realloc` (as in the C function) it and then append the RHS, then adjust the length to be the sum of the two. `realloc` will, more often than not, simply increase the amount of memory allocated at a given location without copying.
My first complete project was a GIS/Logistics information thing. I had a KML file of technicians and would need to find the nearest one to a customer and quote for various things. I was using google earth at the time. I built a script that pulled the coordinates from the KML for all of the techs and did a vincenty calculation against the coordinates of the customer I got from the open street maps api. With a list of customers I could pre-calculate their quote in a few seconds.
A script that would keep find a Mutual fund that was recommended most number of times. List of funds recommended was kept in a data sheet. [GitLink](https://github.com/AkshayD110/MutualFundFinderScript) 
Python, no. String concatenation, yes. My 120k, numerical heavy code benefits greatly from the dramatically reduced size of dictionaries. They can now fit into cache and that affects every single function call or class lookup in all of Python.
You can do balanced tree instead of list to keep track of either points or ranges easily enough. E.g. btree. 
One of my first small projects was a screenshot program made with tkinter where you would select an area you wanted and PIL would save an image of the area. https://github.com/Gprime5/Other/blob/master/Screenshot/clip.pyw
It seems it was this simple editor\[1\]. I recently ported it to Python 3 :-) I should now make it installable with pipsi. Also I remember that I've worked at university on a cool crypto module. Around 2004. I really started to learn Python with the book Dive Into Python \[2\] \[1\] [https://github.com/cedricbonhomme/pyEditor/graphs/contributors](https://github.com/cedricbonhomme/pyEditor/graphs/contributors) \[2\] [https://www.librarything.com/work/13003/details/42806306](https://www.librarything.com/work/13003/details/42806306)
A script to convert imgur albums to pdf files complete with image resizing to maintain aspect ratio and keeping titles and descriptions for each image.
I cannot understand why they didn't go with the `as` keyword. It'd make so much sense for me and I'd love it. if some_func() as variable: pass makes so much sense if you know with some_context_manager() as variable: pass The proposed syntax seems so unpythonic. 
 if m := re.match(p1, line): return m.group(1) elif m := re.match(p2, line): return m.group(2) elif m := re.match(p3, line): ... Yes please!
If that's really the case, it sounds like a bug. It's would be very unlike them to not document that.
I don't think that would make sense in the context of assigning value in the expression. if x as 5: vs. if x := 5:
How about giving your script a photo of the insides of your refrigerator and making it find recipes that match your food stock :). Less convenient but easier: supply an explicit list of ingredients to the script.
A few months after I started working for a city as a GIS tech, my boss says to me "You like Python, don't you?" I'd learned some ArcPy while I was unemployed, but he handed me my first big project: a script, that would run every night, take our address points and parcels, and replicate a master address database used by a lot of our departments, from permitting to water to 911. So I closed my office door, shoved everything else off my plate, and got to work. I had to understand the old master address table and figure out what each of over 80 fields represented - everything from owner's name and address to school district and tax status. Then I built a script that joined addresses to parcels, created a duplicate parcel for each address (I know this is dumb, it was part of the spec), figured out how to populate a field in one field to another by a spatial relationship, and debuted the final database about 6 weeks later. It's helped us fix \*hundreds\* of bad addresses, and since those address points go into our 911 dispatch system, this is really important. The Building Inspection folks have heard my "I'd much rather you find an address problem than a fire engine" spiel so often they can recite it back at me. But a year and a half later, it's probably my biggest accomplishment.
I whole heartedly agree with your suggestion. It is the most consistent with current python syntax.
My first functional project was a script that set up a series of individual directories for downloaded diagnostics for a product I was working with and then moved and unzipped the diagnostics in the newly-made directories. This was later expanded to compare the data in a series of local sqlite databases included in the zipped files against a postgres database.
what?
Agreed. The proposed syntax is ugly and unreadable quickly.
For the confused: https://stackoverflow.com/questions/4007289/so-what-exactly-does-from-future-import-barry-as-flufl-do/4007310
I want to upvote your comment 1000 times. Miniconda is PERFECT solution, it can be installed locally, does not require root and installs all dependencies locally. I was a bit worried when one of the packages could not be found in conda repo, but fortunately, conda has already pip installed and it can be used easily. This is such a great and simple solution, I love it, thank you once again!!!
My first large project was a security system that could encrypt files and entire folders at a time, using symmetric key encryption with PBKDF2 to derive a key from the user's password. Used Tkinter to develop the GUI and and cryptography for the encryption
https://www.python.org/dev/peps/pep-0572/#alternative-spellings Not saying I agree or disagree with him, but that's his reasoning.
Is this needed in some way?
My first non-school project was a script to scan a rather messy Excel file for all cells with an "@" and export a text file of all the e-mails. My next project was a very rudimentary first-order Markov Chain project using midis to build the chains.
One obvious reason is that \`if a as b\` would mean, \`b = a; if b\` whereas \`with a as b\` \_does not\_ mean \`b = a; with b\`
"if X as Y" is literally the first thing I tried when I needed something like this. It may not be 1-to-1 similar to "with" implementation wise (though it should be, since __enter__ functions are recommended to return self), but to a developer, it's instinctive. The really weird thing is that whenever this PEP finds its way online, literally everyone cries out for "as" syntax, and yet all the community gets are [two measly lines of a half-convincing explanation](https://www.python.org/dev/peps/pep-0572/#alternative-spellings).
I have just done my first commit of a project: Numpadz. Use your numpad as a sampler / instrument and make some wack beats. If anybody is interested, it's taken me about 4 hours today to complete in total - quite a beginner at programming but enjoyed every minute of it :) [https://github.com/jsoncz/numpadz](https://github.com/jsoncz/numpadz)
&gt; The larger issue from this PEP is "how we make decisions", Van Rossum said. There were many long responses in the threads, mostly against the feature. Overall, there was "way too much email". There were many misunderstandings, digressions, explanations, both right and wrong, and so on. Part of the problem is that there is no real way to measure the effectiveness of new language features. &gt; In the end, he had to stop reading the threads so he wouldn't "go insane". Chris Angelico, who is the author of the PEP, could not be at the summit, but Van Rossum suggested that he stop responding in the threads to try to tamp things down. He wondered how to "dig our way out" of situations like this. It got to the point where people were starting new threads in order to try to get the attention of those who had muted older threads with too many messages. I would suggest we tackle one contentious language enhancement at a time, to raise the quality of input by focusing community efforts. For example Guido (or designee) could do a presentation of an enhancement once per quarter(?), and post on YouTube. The community could have a window to respond with input, which would then get views/upvotes, perhaps using Reddit or StackOverflow? Then Guido could make a decision using a small review team built up from those who provide the best input. I feel this would mimic the way legislation is passed, which is one of the best processes we have. 
First was image cataloging script when I worked with isic cards and had to keep track of hundreds of images every day. Now is sql interfaces and just scripts to ease day to day small repeating jobs, can I call those a project? 
&gt; Since EXPR as NAME already has meaning in except and with statements (with different semantics), this would create unnecessary confusion or require special-casing (eg to forbid assignment within the headers of these statements). I'm thoroughly unconvinced the semantics are different. Perhaps, the implementation might be a bit tricky, but that's a different issue.
I created this because I loved using the numpad on youtube to trigger random samples. It has a simple bash script for generating sample packs and I have included quite a few packs already. Would love some feedback.
CPU intensive tasks... In a asynchronous model a single thread is dealing with many tasks at hand and if just a single one of them is CPU greedy it can make the other ones wait forever. A sync model usually does not have this problem thanks to CPU fair scheduling. (actually they have but in a different way and it can be mitigated with some creativity).
&gt; It's would be very unlike them to not document that. It was LTO that was no longer enabled by "--enable-optimizations": https://github.com/python/cpython/pull/1858 This is where they decide not to document the change for Python2: https://github.com/python/cpython/pull/1847#issuecomment-307500616 &gt; Also, if it's been broken for a long time and extensions don't seem to notice than the extensions need better tests. How do you test that the extensions have been built with PGO?
I tried this awhile back for shits and giggles, because why shouldn't that work in python? This is absolutely the way to do it.
just a thought: I've seen other teachers engage one of their students to handle all the forum questions. Creates a paid job for someone (friend/partner/family member/sponsored student in a poor country). Leaves the instructor free to create the next course and improve the content. Between staggering release of content (paid youtube subscribers first, then youtube channel, then udemy) there is scope to continue promotion of the existing youtube model. I know it doesn't solve any of the ethical problems outlined, but it monetizes the ecosystem for the instructors advantage. Which can seem like a bizarre form of mental gymnastics. But here's the question for any instructor : Did you start teaching on the internet to A. make money? B. teach people because you enjoy teaching? C. become aligned to any one internet platform? D. improve your own communication and presentation skills? I'm going to guess the reasons are B, D, then A with C a distant third. (A might not have even been a factor) as I write this I'm still not happy with it, but it's just an interesting idea to think through.
This post is better suited for r/learnpython 
It's already up there, should I delete this one?
This is SPAM. This link just brings the user to some low effort website containing referral links to buy the book on Amazon. There's no substance here and serves no purpose other than the potential to bring OP clicks.
I think a better example here for why it could be confusing... with 1 as b: ... This looks rather strange, imo. But I agree that semantically, I think it makes more sense to use `with` rather than `if` because `if` implies a comparison where as `with` semantically already feels like a statement expression. filtered_data = [ (x, y) for x, y in data with 1 as y if x in [1,2,3] ] However, I think the problem here is an implementation detail (with as a context manager) and not a semantic issue.
If this is not allowed. Please delete. I have what I assume would be a smaller job than most are looking for, but I am looking for someone to build me a program to purchase items from a couple golf websites before items sell out. I know there are bots out there for items like supreme, jordans etc, but I can not find one to purchase for any golfing websites. I have a document outlining some of the details of the sites and the items if anyone is interested. I do not know where to start price wise since I do not know how big of a job this is. If anyone is interested please reach out. 
My first project was to scrape data from [www.usnews.com](https://www.usnews.com) website. It was a fun project, took around 5 days to complete it. It was a great learning experience. The rankings would be exported in to a .csv file. [https://github.com/terminator172/webscraping/blob/master/MSinUS\_Rankings\_University\_Info.py](https://github.com/terminator172/webscraping/blob/master/MSinUS_Rankings_University_Info.py)
I'd be curious to see a benchmark against Django Channels 2.x which is fully async.
Use indented code blocks, as it says in the sidebar: https://daringfireball.net/projects/markdown/syntax#precode ---- I'm currently working on a Kivy mobile app (python cross platform app dev) and I'm trying to use cython to wrap some obj-c code that is being used to talk to a ios framework. Here's my .h file for obj-c bridge typedef void *strip_wrapper_t; strip_wrapper_t stripe_wrapper_init(); const char* stripe_get_token(strip_wrapper_t stripe,const char* myKey, const char* cardNumber, int expMonth, int expYear, const char* cvc); Here's my obj-c .m file #import &lt;Foundation/Foundation.h&gt; #import "Stripe/PublicHeaders/STPCardParams.h" #import "Stripe/PublicHeaders/STPAPIClient.h" #import "Stripe/PublicHeaders/STPToken.h" #import &lt;Foundation/NSError.h&gt; #import &lt;Foundation/NSString.h&gt; class StripWrapper { public: StripWrapper(); ~StripWrapper(); const char* retrieveToken(const char* myKey, const char* cardNumber, int expMonth, int expYear, const char* cvc); }; StripWrapper::StripWrapper(){} const char* StripWrapper::retrieveToken(const char* myKey, const char* cardNumber, int expMonth, int expYear, const char* cvc) { NSString* NScardNumber = [NSString stringWithUTF8String:cardNumber]; NSString* NScvc = [NSString stringWithUTF8String:cvc]; STPCardParams *cardParams = [[STPCardParams alloc] init]; cardParams.number = NScardNumber; cardParams.expMonth = expMonth; cardParams.expYear = expYear; cardParams.cvc = NScvc; __block const char* returnString; NSString *myPublishableKey = [NSString stringWithUTF8String:myKey]; STPAPIClient *sharedClient = [[STPAPIClient alloc] initWithPublishableKey:myPublishableKey]; [sharedClient createTokenWithCard:cardParams completion:^(STPToken *token,NSError *error) { if (token == nil || error != nil) { returnString = [error.localizedDescription UTF8String]; } else { returnString = [token.tokenId UTF8String]; } }]; return returnString; } // // C-like API for easier interaction with Cython // #include "stripe_ios_imp.h" strip_wrapper_t stripe_wrapper_init() { return new StripWrapper(); } const char* stripe_get_token(strip_wrapper_t stripe, const char* myKey, const char* cardNumber, int expMonth, int expYear, const char* cvc){ return ((StripWrapper *)stripe)-&gt;retrieveToken(myKey,cardNumber,expMonth,expYear,cvc); } And here's my cython .pyx file __all__ = ['StripeWrapper'] cdef extern from "stripe_ios_imp.h": ctypedef void *strip_wrapper_tstrip_wrapper_t stripe_wrapper_init() const char* stripe_get_token(strip_wrapper_t stripe,const char* myKey, const char* cardNumber, int expMonth, int expYear,const char* cvc) cdef class _Stripe: cdef strip_wrapper_t stripe def __cinit__(self): self.stripe = NULL class StripeWrapper(): def __init__(self,**kwargs): self._storage = _Stripe() def getToken(self,myKey,cardNumber,expMonth,expYear,cvc): cdef _Stripe storage = &lt;_Stripe&gt;self._storage cdef bytes myKey_bytes = myKey.encode('utf-8') cdef char* myKey_string = myKey_bytes cdef bytes cardNumber_bytes = cardNumber.encode('utf-8') cdef char* cardNumber_string = cardNumber_bytes cdef bytes cvc_bytes = cvc.encode('utf-8') cdef char* cvc_string = cvc_bytes storage.stripe = stripe_wrapper_init() cdef const char* c_string_token = stripe_get_token(storage.stripe,myKey_bytes,cardNumber_string,expMonth,expYear,cvc_string) cdef bytes c_bytes_token = c_string_token python_token = c_bytes_token.decode("utf-8") return python_token I'm pretty close to getting this all to work together, I'm just having issues formatting my variables from string to char\* so that my function can get the proper data type. Right now my stripe\_get\_token function is just returning x01 which is probably an error code. So my guess is the data I'm putting into my function isn't in the proper format. How do I get my python variables to by in the form of const char\* and int for the cython wrapped function to work properly? 
Yes, so I searched for this package in PyPi and many other packages either use old database or limited number of words set. I have used API which scraps internet and keep adding new words so in this way I return truly random word to the user.
This is why python is so amazing 
Working on it right now! Small, useless project, wrapping (to eventually coordinate) several social media apis. This is my first comment on Reddit, and it's partially motivated by wanting to see if I can pull that comment off the API. Pretty perfect that this post would have been on the first page of 'new' while I was looking for somewhere to make a meaningful comment.
I don't write python usually, but you can do it yourself very easily: import colors; def main(): html = "&lt;table style='width:100%'&gt;" html += "&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Color&lt;/th&gt;&lt;/tr&gt;" for k,v in colors.THECOLORS.items(): value_hex = "#%02x%02x%02x" % (v[0], v[1], v[2]) html += "&lt;tr&gt;&lt;td&gt;" + k + "&lt;/td&gt;&lt;td style='background:" + value_hex + "'&gt;&lt;/td&gt;&lt;/tr&gt;" html += "&lt;/table&gt;" print(html) if __name__== "__main__": main() Paste the output to index.html and you are done. I'll put up a github page in a few minutes.
Looking for an answer too!
I will like to see answers too. I will like to know what financial topics you are specifically looking at? 
OP you should make this an environment variable instead. If you're using a Linux system, chuck that into `/etc/environment` as `export DJANGO_SECRET_KEY='foobarbaz'`. That way you never have to worry about removing it again since your environment variables aren't a part of your git repository.
While I cannot provide a resource that combines both Python and Finance, I can tell you that [Pandas](https://pandas.pydata.org/) is certainly the library of choice. With that in mind, I'd recommend you to learn Pandas from the authors own book [Python for Data Analysis](https://www.amazon.com/Python-Data-Analysis-Wrangling-IPython/dp/1491957662/ref=dp_ob_title_bk) Another resource I have enjoyed in the past is [Practical Business Python](http://pbpython.com/excel-pandas-comp.html).
Build a fibbinocci tree given a height as input; calculating the value at each node was easy. Spacing it out and making a pretty tree with print statements was not easy.
Does that really matter, though? When I do with open(...) as f: then in my head, `open` returns a file that gets put into `f` - obviously to some degree that *is* what happens, since you can do f = open(...) Regardless of whether `f` is being set to the return value of the function or the return value of the context manager the function returns, it still behaves in basically the same way. I would go as far as to say that if you have a function that can be used in either way (in a with-block or on its own), but has significantly different semantics in both, then that is not a good API. It's also worth mentioning that your supposed inconsistency is already present in the language - just look at imports. import foo as bar is functionally equivalent to import foo bar = foo del foo
I tried to recreate the project using BeautifulSoup. Would need some advice/suggestion. Let me know if anyone's interested :)
I tried to recreate the project using BeautifulSoup. Would need some advice/suggestion. Let me know if anyone's interested :)
OK so web cam's have rolling shutters, so the term 'frame' is a bit ambiguous at that end. Secondly, the 'lag' will be slightly variable given that the data is re-buffered by the computer before being passed to the decoder, which will also have a variable processing time. Frame index is also generally not used in camera streams. I'm not sure you'll be able to do this as accurately as you'd think.
AFAIK, no python modules like this exist because obfuscating python source to hide a licensing module is a futile exercise (i.e. trivially reversible by an amateur). Either re-write portions of your code in some compiled language (and then use a commercial licensing product). Or sell the operation as a service (i.e. run some critical piece on a machine you control offsite so that the client never has all of the code)
I can't believe they're still moving forward with this. The initial reactions were overwhelmingly negative.
The is a python for finance book and a number of them on derivatives or trading calculation. 
Quant/Python dev for 8 years here. Python is significantly used for quantitative finance, so that should be quite easy for you to find plenty of material. What will be difficult is to sort through these things: "Finance" is a pretty large topic. One thing you can use python for is connectivity, glue, etc. Your favourite broker will almost certainly have a python API to connect to it, which would be a nice introduction to orders, positions and the dirty logistics of finance. If you like pain, try to look into the FIX format. Now, if you don't want automated systems, portfolio theory might be more of your thing: start a jupyter notebook, and implement some Markowitz portfolio optimisation. Good command of pandas will help there, and that might give you a nice template for your own pension investments While doing that, you might discover the raw power of numpy, just in time for some option pricing: do some Monte-Carlo, pdes, least-square Monte-Carlo, etc... If you're not tired yet, exploring machine learning and the like is all the rage these days...
You‚Äôre literally the only one mentioning waste. 
Sequential list, and pop the elements as they come in? Since they should come in order (mostly), it will be a cheap operation O(n) to fill, O(1) to pop, all together O(2N). Or if you know the range, just keep a tracker of min and Max, and any time there is a gap, place the missing pieces in a queue, pop them when they arrive, or request them again. 
That's because the `__enter__` method on files returns `self`. It doesn't need to do that, in order to follow the context manager protocol, it's just convenient for how files get used. Other context managers can and sometimes do work differently. You're right that `as` in `import` statements does work just like an assignment, so there's already some ambiguity in the syntax. But in an `import`, there can be no expressions embedded in the statement, while there can be in a `with`. If `foo as bar` is the spelling chosen for expression assignments, then does `with foo as bar` use the context manager protocol (calling `__enter__` on `foo` and binding `bar` to whatever is returned), or is it just an assignment using the new syntax, with the context manager protocol being invoked on the result after the assignment? Do parentheses matter (e.g. is `with (foo as bar)` different)? If `foo as bar` is only allowed in specific places (like at the end of a condition in a `while` or `if` statement), you loose out on some of the places the expression-assignments in the PEP are intended to work. For instance, you probably can't write something as concise as `while (bar := some_operation(foo)) &gt; 0`, or `if (bar := some_operation(foo)).some_method()` (where the `&gt; 0` and `.some_method()` are relevant to the truthfulness of the condition, but not part of the assignment). As Guido mentioned in his talk (that this article is summarizing), this stuff was *extensively* discussed on the Python-dev mailing list (and probably even more so on Python-ideas, which I'm not subscribed to).
Definitely avoid PowerPoint. As a recovering software engineer, seeing new technology used to work through a problem live was always the most enlightening. Pick a typical problem you encounter regularly, and if possible use some real data your team are familiar with, and work it through. Have a script for what you‚Äôll cover and how you‚Äôll slowly introduce new functions as you go. Remember you don‚Äôt need to explain what you‚Äôre doing in great depth - just give people a taste of what‚Äôs possible and let them go about discovering it by themselves. Going into too much detail absolutely kills a technical showcase like this. Joel Spolsky‚Äôs ‚ÄúYou sucks at Excel‚Äù https://www.youtube.com/watch?v=0nbkaYsR94c always stuck with me as a fantastic showcase piece. He made it all look so easy, and I‚Äôve never known anyone who uses Excel regularly and didn‚Äôt learn something new from that video.
What did you need this function for?
Give [JupyterLab](https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906) a try. Your colleagues can play with the same data during your presentation. Here is a [demo](https://jupyter.org/try).
USB cameras stream mjpeg frames, rolling shutter or CCD doesn't matter. &gt;data is re-buffered by the computer What do you mean by re-buffer? &gt;Frame index is also generally not used in camera streams Sure but knowing when the frame is ready and getting the current time and storing the frame index then incrementing for the next frame will do. issue is knowing when the frame is ready (read and decompressed/available to be read by the program). &gt; I'm not sure you'll be able to do this as accurately as you'd think. It's going to be averaged value
I don't understand why they are moving forward with this. I have yet to see someone outside of the main Cpython team actually like this. The syntax is just gross, and the scope too wide.
If you are engineering student who uses python, you definitely want to learn about numpy. You can also use it for financial stuff.
https://en.m.wikipedia.org/wiki/X11_color_names
**X11 color names** In computing, on the X Window System, X11 color names are represented in a simple text file, which maps certain strings to RGB color values. It was traditionally shipped with every X11 installation, hence the name, and is usually located in &lt;X11root&gt;/lib/X11/rgb.txt. The web colors list is descended from it but differs for certain color names. Color names are not standardized by Xlib or the X11 protocol. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Python/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Non-Mobile link: https://en.wikipedia.org/wiki/X11_color_names *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^195020
We compile python to C with cython, then compile C with a normal compiler to produce a binary that's not trivial to reverse.
But with textlocal, I think there are like 10 free text messages or something, no?
To deal with data, you can read books like [Python for Data Analysis](http://shop.oreilly.com/product/0636920023784.do) (with [code](https://github.com/wesm/pydata-book)). I am also expecting [Python for Finance: Mastering Data-Driven Finance 2nd Edition] (https://www.amazon.com/Python-Finance-Mastering-Data-Driven/dp/1492024333) (with [code](https://github.com/yhilpisch/py4fi)) to be a good book specifically for finance area. 
I like it and I'm not a core dev. Sure, `as` might've been nicer but it is what it is. I'm sure in a few years, when 3.8 is the lowest maintained version, it'll start cropping up every where. Though, I would trade this for a None coalescing operator in a heart beat. Maybe toss in proper destructuring to sweeten the pot. 
The version of Python you're using may be a factor. Check out r/learnpython 
Well, the big problem with allowing `as` in all expressions is that it would completely break `with` statements. You'd need to find some way to distinguish when your `with foo as bar` line is supposed to use the older `with` behavior (with `bar` being assigned the result of `foo.__enter__()`) and when it's using the new assignment syntax. Multiple context managers on one line would make it worse (`foo as bar, baz as quux` might be a tuple with two inline assignments). While you could limit the `as` that means assignment in some way (so that `with` statements keep their existing semantics), it's hard to see how you could do so without losing some useful stuff. For instance, if you only allow `as` at the end of an `if` or `while` condition, then you can't do `while (foo() as bar) &gt; 10:` and you'd need to go back to "loop and a half" code. While I would like the looks of `as` syntax more than a new operator if it could work, I don't think it's possible. At least, not without a major backwards-incompatible change in the context manager protocol (such as requiring `__enter__` to return `self`), which would break some real-world code, and at a minimum would require a long deprecation period before you could use the new feature. It's easier to add new syntax than to modify old syntax (unless you remain completely backwards compatible).
&gt; to produce a binary that's certainly not trivial to reverse.
Using python 3 
One comment - &gt;You really have to run timeit with a *count* greater than *1* due to the differing costs of launching the functions and due to differing timer resolutions. The count is greater than one, taking into account the way the loops are designed. It's only one for a single Python version, input size and GC setting. The loop runs through various input sizes on a logarithmic axis fairly closely spaced together - the reason for this is that any noise (due to thread switching, etc.) will tend to be cancelled when the Loess smoothing function is run in R.
Did you reassign the `print` variable to point to something other than the usual `print()` function?
Try finding diameter so did print(calculate_diameter(int))
They want user to input circumference 
&gt; python to C with cython, then compile C with a normal compiler to produce a binary that's certainly not trivial to reverse. Sure it is... It's still calling into the standard python shared library for every non-trivial function. So again, let's say you program up your license-signing functions using a python hashing function or crypto library. I know exactly where that entry point is. I don't even have to trace through the program to find it. More importantly, your typical obfuscation, and other tricks to mess with decompilers won't work (easily) because you are simply using the C as an intermediary. All of your logic is written in python. Again, you can certainly buy a commercial license manager (plenty out there that interface with C/C++), etc. But you aren't really [buying much protection](https://imgur.com/a/v0TtWYU)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/Md3jR4N.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20e1301on) 
&gt; I have the full documentation and source for that function Again, no, you don't. The function is now binary, docstrings and comments removed, source not accessible. C is not an intermediary in cython land, it's transpiled from python into C. I feel like I'm asking the wrong crowd here, so I'll delete the post. Thanks for reading, in any case.
It's a pain and I don't want to maintain it is a reasonable reason to not support it anymore. It's not malicious, but if you want to maintain it, I'm sure they'd let you. Or just use 2.7.14; it's not that different...
Also, what was the line that makes you say they were aware they weren't going to document a change. I read they weren't going to document an existing option. It's like they didn't have 100% documentation and someone documented some functions. It'd be nice to document everything, but it's not necessary.
&gt; What do you mean by re-buffer? The path is something like this: [CCD imager &gt; buffer &gt; hw encoder &gt; buffer] &gt; usb transport &gt; [buffer &gt; sw decoder] &gt; X Every step there's a buffer to ensure there is enough working data to complete the next step. Some of these may be variable depending several factors such as the hardware and driver, input frame-rate vs consumption, exposure levels (on webcams specifically as they will require multiple scans to produce a 'lit' shot.) 
You're using a Naive Bayes classifier, you have accuracy and recall. Did you partition the training set before you ran it? If you ran it all through, you may be overfitting. Actually, you are most likely overfitting.
even so, for an average what lib can be used?
Yeah, I split the data in half. Used the first half for training, the second half for testing. # Split review data into two parts for training and testing testTrainingSplitIndex = 2500 # Grab all reviews in the range of 0 to testTrainingSplitIndex # This data is used to train the classifier trainingNegativeTweets = negativeTweets[:testTrainingSplitIndex] trainingPositiveTweets = positiveTweets[:testTrainingSplitIndex] # Grab all reviews in the range of testTrainingSplitIndex to the end # This model is used to test the classifier testNegativeTweets = negativeTweets[testTrainingSplitIndex+1:] testPositiveTweets = positiveTweets[testTrainingSplitIndex+1:]
Store your intervals in a sorted dict or sorted list using the following: [http://www.grantjenks.com/docs/sortedcontainers/introduction.html](http://www.grantjenks.com/docs/sortedcontainers/introduction.html) When you insert a new interval, you can merge it with any neighbors it overlaps.
Ah the beauty of source control
I use V4L2 via opencv.
How do you separate a function like the Fibonacci sequence into a tree? On googling the term I received results about biological trees, and the Fibonacci heap. Are you implementing the Fibonacci heap or is this about something else?
Definitely use a Jupyter Notebook if you're able to swing it. I think that's a great way to present code (and to learn from). You should also check out 10 minuets to Pandas (from the Pandas documentation) for inspiration. I always (stupidly) struggle to remember how to filter/slice with Dataframes. So you might want to cover loc/iloc and slicing.
The text book below could be a good option for you. You'll start by getting stock data from an API or webscrape into a dataframe. From there you will learn how to code the math for forecasting, pricing, trading etc.. [https://www.amazon.com/Python-Finance-Analyze-Financial-Data/dp/1491945281](https://www.amazon.com/Python-Finance-Analyze-Financial-Data/dp/1491945281)
quantopian is a nice way to start applying python skills and get involved in a like minded community.
quantopian is a nice way to start applying python skills and get involved in a like minded community.
Currently all async ORMs are under development and immature. If you really need it you better stick with sync ones (SQLALchemy/Peewee for example). If you have some free time, join me and help the community :)
I'll have this in mind for the next round, thanks!
China has multiple methods of blocking, `ping` is mostly *not* blocked. You gotta check for TCP connections for real. If you are interested I can write more.
Don't think of Python as a replacement for JavaScript. It's more like a replacement for PHP. You'll still need to write CSS and JS even if you use Python for the backend. 
For my data/coding talks, I always tend to use the use the spend five minutes with slides for the introduction and then jump into a Jupyter notebook for the rest of the talk. If you jump straight into the notebook people tend to not focus in, so you give the first five or so minutes for the introduction slides
I'm actually located in China and I can attest that this is mostly accurate, when it's not accurate, ping don't work whereas website still loads, this in the case of github.com and apple.com. This probably due to the IP pointed by these domain being blocked but they're accessible from other servers via load balancing. I have yet to find a case where ping works and the website doesn't load normally.
What's the error?
I'm trying this, but I keep getting an error saying I cannot login, even though the credentials are correct.
Let me try this myself again real quick, make sure it still works as is. 
This was the first error. After this got not callable File ‚Äúpython‚Äù, line 6, in File ‚Äúpython‚Äù, line 3, in calculate_diameter TypeError: unsupported operand type(s) for /: ‚Äòtype‚Äô and ‚Äòfloat‚Äô 
Learning some Python to make my own cryptocurrency trading bot for an experiment.
Hey bro, I got it to work! What happened was that when I clicked in the email to allow secure apps to access my account, somehow, it turned off by itself. So I had to go into the settings to turn it on a 2nd time. Not sure why it turned off by itself even though I just literally turned it on 3 seconds ago. But it works!
A very simple twitter bot.It can send and delete tweets, copy someones tweets and post them on my twitter.Save tweets to a txt file or tweet the texts in a txt file.
Yep!! Literally just came to the same conclusion. I just made a burner account for my sms that my scripts use, and saved it in my phone as a contact as something that tells me what he script it‚Äôs coming from. Hella handy for some stuff at my job for alerts. Glad you figured it out though man.
Well, it's because doing: variable = some_func() if variable: pass and if some_func() as variable: pass ...are both equivalent. Or more precisely, `variable` will be bound to the same thing in both cases. But that isn't necessarily the case with: context = some_context_manager() with context: pass ...and: with some_context_manager() as context: pass For example, what if we defined `some_context_manager()` like so? class some_context_manager: def __init__(self): pass def __enter__(self): return 42 def __exit__(self, *args, **kwargs): pass In the first example, `context` would end up being bound to an object of type `some_context_manager`. In the second, `context` would be an int. It's confusing that the two syntaxes are equivalent in the "if" case but not in the "with" case -- it's actively misleading, and helps perpetuate misunderstanding of how `with ... as ...` actually behaves.
I think it is because of the second reason.
Sounds like it has to do with the calculate_diameter function then. Could you post the function and the call you're making to it?
Also check out https://leafletjs.com 
Can't this be fixed by always requiring parentheses around it to get the new behavior? Python already doesn't allow parentheses in `import`, `with` and `except` so there should be no backwards compatibility issues.
Yup this will be very handy indeed!
Trying to decide if I should turn off u/pythonHelperBot for now. I'm still working on the stack overflow side of it, and I'm not pulling the plug completely. I like when it works and it definitely has very few false positives compared to true positives, but when it's wrong, it's really wrong and I want to minimize that. 
Good idea. I'll utilize this in the production server.
Could you give me example how that's done? Problem is, it's a fill in blank type deal so couldn't add lines to it. Basically got a return an print to use. 
Thanks for everyone input 
def add(x, y): return x + y print(add(1,2)) Something like that. The function you're calling and how you're calling it
Not everybody will realize that adding parenthesis would result in that behavior though. For example, suppose somebody new to Python was working with context managers and ended up with a very long `with` statement. It's entirely possible one of the first things they'll try is adding parens around the `... as ...` bit and add a newline somewhere in the middle. Depending on exactly what kind context manager they're using, that could end up working by accident or might backfire spectacularly.
My first python project for my website is a Python 3 Flask application @ [https://www.techcoil.com/shop](https://www.techcoil.com/shop). Simple CRUD application that helps me share some products that I like with my visitors. Apart from Flask routing and Python 3, this project gave me the opportunity to try out [flask MongoEngine](http://docs.mongoengine.org/projects/flask-mongoengine/en/latest/), [Jinja](http://jinja.pocoo.org/). Not an impressive application, but gave more confidence to build more stuff with Python 3.
That's what I tried doing. I put def calculate_diameter(circumference): Stuff in between Print(calculate_diameter(int)) 
`**/__pycache__` will block all of them.
Thanks! Learned something today.
calculate_diameter isn't a standard library function, so that means it's defined somewhere in your code. Looking at that function helps to debug what's going wrong with it You're getting a "TypeError: unsupported operand type(s) for /: ‚Äòtype‚Äô and ‚Äòfloat‚Äô" error, so you're probably not passing it the right type of data
That was actually me. I had trouble changing them to the default django date representation with javascript - So I just tried to be mostly consistent - and lazy, of course.
Ok thanks. Going try mess with it more. Thanks for the help. Really appreciate it! 
&gt;nnectivity, glue, etc. Your favourite broker will almost certainly have a python API to connect to it, which would be a nice introduction to orders, positions and the dirty logistics of finance. If you like pain, try to look into the FIX format. How did you get into quantitative analysis? I have a BS in CS and I love economics but I don't have the skills to start actually doing quantitative analysis. Do the companies that you work for have positions for software devs that don't write models?
I can't imagine someone having a very long line with a single `as`.
&gt;Quant/Python dev for 8 years here. Random question, where can i find practice questions and answers for quants technical interview questions? 
I JUST started learning via codeacademy and Udacity today. I made a program asking your name, your quest, and whether or not you enjoy your quest. I probably shouldn't be posting this because it's so lame, but I'm proud of myself for learning as much as I did in about 4-5 hours.
I would lcaution initial reactions from statements like "I can't beleive...", "Obviously", "Why didn't they...", and general assertions writen as through they were complete fact even though they're mostly opinion. Understanding an arguments subjectiveness (e.g. if it has terms like ugly) and objectiveness really helps. Guido and many other core developers have decades of language design under their belt and don't make decisions rashly or without themselves listing to others. But arguments that are thrown at them as harsh fact when they are only opinion will not hold much weight. I personally have been very against the `:=` assignment operator, but telling others they are wrong based on my perception of "pythonic" isn't helpful. I've tried to break down my preconceptions and challenge myself and others with a better understanding of them. For example, instead of saying "it's unpythonic" I try and frame a question "could this lead to common patterns that very densily fit many operations in to only a few symbols? would that be good?" Anyway my two cents.
You don't need to convert to hex for this. CSS supports the `rgb()` construct for specifying colors, so you could just write as: html += "&lt;tr&gt;&lt;td&gt;" + k + "&lt;/td&gt;&lt;td style='background:rgb" + str(v) + "'&gt;&lt;/td&gt;&lt;/tr&gt;" Or, more concisely: table_row = '&lt;tr&gt;&lt;td&gt;{0}:&lt;/td&gt;&lt;td style="background:rgb{1}"&gt;{1}&lt;/td&gt;&lt;/tr&gt;' rows = [table_row.format(k, v) for k, v in THECOLORS.items()] html = '&lt;table&gt;{}&lt;/table&gt;'.format(''.join(rows))
I don't really think it matters that they behave slightly differently. The `as` keyword is already used in import and exception statements and neither of those behave the same as with contexts either. The `if x as y:` syntax looks the nicest and uses a concept and syntax already present in python.
I don't think we really need to add assignment to *all* expressions. That's just going to lead to some insanely ugly code. Just modifying control statements like if and while actually improves readability.
Neither does `import a as b` Or `except Exception as e:` They both already behave differently than `with`. They still make complete sense and no one confused them
I like it and I'm not a core dev. I don't have a polarizing opinion on the syntax, however I do dislike some of the semantics / implementation details. Specifically, the unpacking semantics, and implementation of the compiled code. To clarify on implementation, as of the last time I checked it is nothing but syntactic sugar for assigning a variable before a scope and then testing that variable, however statistically speaking a lot of code could go through a decently sized performance improvement (especially pass or else jump return functions, common in web field validation) if the variable was assigned only after the condition passed.
post the code?
Mine was a script that printed "Hello, world!" to the console.
Also known as a fibbonacci pyramid. https://goo.gl/images/ah6kLN
My university has certain days and timings for scheduling next semester and the whole process is like a battle royale. Every students gets ready to speed type all of their course numbers and get ready to submit them. Every single second matter and a lot of times, people don't get their desired classes. I decided to make a script that would automate the process for me by typing all of my classes in at the desired time using Selenium.
[removed]
Yah, reported, but still up. Mods?
&gt; The as keyword is already used in import and exception statements and neither of those behave the same as with contexts either. It is, however, impossible to confuse those contexts for each other. If we introduced "expression assignment using as", that would no longer be the case. Whenever you see the 'as' keyword within a with statement, except, or import, you now have to stop and determine whether that keyword is being used in the original context vs the new expression assignment context. I'm all for reusing concepts and syntax, but not if it introduces ambiguity and confusion to the language.
I am looking for things like portfolio construction to begin, and perhaps moving forward to trading if I am still interested at that point.
Plus they provide you with the market data to actually backtest your ideas.
Thanks for the breadth of info! I'm looking to start with portfolio construction sort of thing, and then move onto trading if I'm still interested. I'm looking more for a starting point in all this to get me going. Do you think something like [this](https://www.udemy.com/python-for-finance-and-trading-algorithms/) would be useful/do you have any specific recommendations?
I like it
Hard to tell because the formatting may be off, but it looks like `dehydrate` is nested within Meta. It won't run there. You should dedent your dehydrate method by one. 
I can honestly say I never would have thought of doing this to help me poop and laugh.
Youre right! But I also had to add class Meta: always_return_data = True in order for it to work. Than you very much!!
I wouldn't have known that without consulting the docs, but ... the method should have fired (and logged) even if you didn't get a response just from the dedent, right? 
That was not the case here. Not sure why
Huh. Well, I dunno, but glad I could be of (some) assistance!
You were of great assistance! Thank you friend, seriously :) 
No problem. It's been a LOOOONG time since I've touched Tastypie. I thought it was dead. Glad to see it's still kicking. 
&gt; I'm sure in a few years, when 3.8 is the lowest maintained version, it'll start cropping up every where. Yep. That's what I'm afraid of.
Nice idea. How fast are the requests?
OP had just fixed literally the immediately-previous line, and left that untouched. My mind was blown.
&gt;The really weird thing is that whenever this PEP finds its way online, literally everyone cries out for "as" syntax That's because most people don't have experience writing language parsers. Making "as" work as both a special form keyword AND an expression operator is ludicrous. Everyone crying out for "as" syntax should try writing a minimal Python parser as a learning exercise and then adding the "as" expression syntax and it will immediately become obvious why it is 100% a bad idea.
&gt; If we introduced "expression assignment using as" Yeah, I'm saying we shouldn't do that. We only need to add `as` to a few more control flow statements like `if` and `while`, not expressions in general. &gt; Whenever you see the 'as' keyword within a with statement, except, or import, you now have to stop and determine whether that keyword is being used in the original context vs the new expression assignment context. No, you wouldn't, the same way no one gets confused when as is used in import and exception statements. You can't mix the usages. There really aren't that many use cases for adding `as` to *all* expressions, and even if there are, they're all far less readable. Within if statements and while statements, it actually improves the flow and readability. &gt; I'm all for reusing concepts and syntax, but not if it introduces ambiguity and confusion to the language. I agree, which is why I don't think we should create any ambiguity by allowing assignment in *all* expressions. 
thanks all of you
Now I wish I had a keypad, or that we could configure your program (that would be neat). I'd suggest using linting tools such as [flake8](https://pypi.org/project/flake8/) and [pylint](https://pypi.org/project/pylint/). You could also factorize your code by using a list instead of a, b, c, ... variables. And with the use of a dictionary you could re-write the lines 79 to 140 in probably less than 10 lines. If you accept PRs I can give it a shot.
Have a look at the book 'heard on the street', it worked for me. Bare in mind though that it's definitely not about memorising answers but being able to think on your feet, however these practice questions will get you in the right frame of mind https://www.amazon.co.uk/Heard-Street-Quantitative-Questions-Interviews/dp/0994103867
What makes the syntax gross? I'm generally not in favor of one keyword being different operators in different contexts, so I like the solution.
I built an RPG game that imported txt based maps of my dorm room and campus. It was really fun!
I am working on a graphical user interface simulator for university/research.
Wow that would be really nice of you. Open source community is where it's at :)
&gt; as does Go, but the latter uses some extra syntax that he finds distasteful. Ironically, go does this really well. You can do assignments inline to handle patterns like this: if reply, err := function(); err != nil { handle error } It's readable, intuitive, and idiomatic. I thought that's what python was supposed to be?
&gt; Yeah, I'm saying we shouldn't do that. We only need to add `as` to a few more control flow statements like `if` and `while`, not expressions in general. What if I want to refactor and pull out a subexpression within the if and while statements? This is something you can currently do with impunity. With your proposal, that would no longer be universally possible: whether you can successfully refactor out a subexpression or not would depend on whether you're using the `as` operator or not. That seems inconsistent to me. Or do you mean that you want to let people use `as` only at the "top" level? E.g. doing `if re.search(pat, text) as match` is ok, but doing `while (input("&gt; ") as command) != "quit"` is not? In that case, I don't think your modified proposal would end up being useful enough to be worth adding: if you look through the motivating examples in PEP 572, many of them use assignment expressions within subexpressions. Also, what if we want to use expression assignments within list comprehensions? E.g. something like `data = [(f(x) as y, y / 5) for x in old]`? If you intentionally meant to disallow that, same comment regarding usefulness. Being able to simplify/streamline list comprehensions like that was one of the main motivations behind PEP 572. Or if you do want to allow using assignment expressions inside list comprehensions, what if we do this? with some_comprehension([(f(x) as y, y / 5) for x in old]): pass So now `as` is allowed within with statements, but only some of the time? Basically, I think while restricting assignment expressions to only certain contexts would solve some inconsistencies, it would end up introducing just as many.
Using the `:=` operator would be a huge mistake. This operator has a common meaning in languages like pascal or go, and using it in a completely new way would be unintuitive.
Great tips! Thank you very much! I‚Äôll definitely use a Jupiter notebook
I‚Äôll check that out! Thanks!
That‚Äôs a very good idea, thanks!
I didn‚Äôt know this tool, thanks a lot!
am afraid sir there is no paypal in my country and i haven't master card. #destiny_functional
MSc in 'Financial mathematics' (i.e. stochastic calculus), I started as a quant, and learned python on the job, to the point of making it my specialty. That said, there are _plenty_ of jobs on the more 'dev' side of things: I don't think I'm very typical putting the effort to learn proper and elegant coding: most quants I've worked with are happy with "good enough to work", and require devs to either implement their code for them (which I don't really recommend) or provide a smart platform to develop on. That is absolutely not unusual to have people there who are either simply 'quant litterate' or simply good developers to make sure the system is written well. Usually, to enter this field, you want to find one of the 'big churn companies' like banks or some big funds, which constantly require fresh meat developers. After a bit of experience there, you have built a bit of a resume and can move on to things that you like better (or not, if corporate career is something you're after)
It really depends on how fast the website you are scraping is. The tool adds maybe 1 additional second.
I'm not sure I understand your point about factoring out subexpressions. I don't see how that would be any different if you were using a different syntax besides `as`. Or are you assuming subexpressions wouldn't &gt; Or do you mean that you want to let people use as only at the "top" level? No, both your examples would be valid. &gt; Also, what if we want to use expression assignments within list comprehensions? I see your point here. I initially thought most of the examples not involving `if` or `while` were contrived and and actually had *worse* readability with the new assignment syntax. But your example makes sense and seems useful. &gt; So now as is allowed within with statements, but only some of the time? Well, it would be allowed all the time. There's no ambiguity in your example, and aside from being a bit busy, I don't really see a problem of allowing it inside the with statement. The example does seem a bit forced. You can always write dense code in python if you really want. For example, you can *already* use `as` on the same line with two different meanings try: pass except Exception as e: import foo as bar That's completely legal. I don't think it looks great, but I also don't think it's that confusing. And it can be easily fixed by not trying to write everything on one line. data = [(f(x) as y, y / 5) for x in old] with some_comprehension(data): pass So, I guess I concede that it makes sense to support it for expressions in general instead of just inside `if` and `while` statements. I still think the `as` syntax looks better than `:=`. 
I agree. A less-than-perfect solution is worse than what we have now. It seems to me they are searching for a solution for what isn't, actually, a problem.
I don't really have a single reference in mind. It's nice to be exposed to different perspectives and ideas, but that fiels is much less standardised that you might think, and it's always hard to know exactly whether any references teaches you something general or just the author's preferred way of doing what he understood of it. Honestly, nothing replaces practice. Which is why this comment is brought to you by Brillian... - ok, I'm kidding. But seriously, if you know your way around Python, start practicing. Go to the wikipedia page of portfolio optimisation, and implement that. Math is easy without being trivial, so you'll have to work a bit. After that, try to build nice apis, some you may want to revisit later without too much pain. Then build the next component: you'll probably need to retrieve data for your underlying. What is it anyway? Should you use the same conventions for stocks and FX? Or indices? Well, better get a feel on wikipedia, write something, ditch it because it's crap and start over. In that process, you'll end up with very specific questions, the answer of which you may find on blogs or sites that you then want to follow more closely. So do read books, or tutorials (quantopian comes to mind) or other 'gentle initiation', but take none of it for gospel and practice relentlessly. If you're at uni, find (or create) a group to study and implement that. Get some math nerds in: best case, you'll learn a lot, worst case, you'll have plenty of people teaching you all the wonderful and unexpected ways users break your code. On the purely financial side of things, 'Options, Futures and other Derivatives' by JC Hull is a bit of a reference which was strongly advised to use at uni. It's good to have, but the price of a legitimate version is hefty, so your call yo make. Hope that helps...
A simply psychology 'RGBY' Test. I'm Actually Having troubles with the updating the doughnut graph on the Tkinter Frame if anyone wants to help a newbie :D [https://github.com/Just-in-cider-711/Juco/tree/master](https://github.com/Just-in-cider-711/Juco/tree/master)
Cool
Are you Chinese?
It‚Äôs really cool project, and thanks 
It's not the password that you see in the URL, it's just a label. As explained in the tutorial, a label is a bookmark to identify a password image. Here are a few examples of labels: myfacebook, lnikedin, reddit, etc The security issues have been fully accounted for. There is no way I can discover your password for two reasons: 1. you never type it in. NEVER 2. you are anonymous. The only thing I know about you is your IP adress. I don't even know your e-mail
Check out this course "[Python for Finance](https://honest-recommendations.com/recommends/python-for-finance-investment-fundamentals-data-analytics/)". This course will guide you through everything you need to know to use Python for Finance and Algorithmic Trading! 
My main problem with that code is that its primary structure is all about error handling, and not about the function call. Reading the code, I care about "what does this do?", not "what does this do when it breaks?"
It wouldn't be an operator, it would still be a keyword on `if` and `elif` statements just like on `import, with, except` statements.
@frnkvieira great job, nice website and rich docs. How this project compare with [aiohttp](https://aiohttp.readthedocs.io/en/stable/) and why vibora should be chosen instead of that?
&gt; Your favourite broker will almost certainly have a python API Okay, I'll be the pedantic one. An API is, by definition, language agnostic. All an API is, is a set end-point that takes requests and provides responses in some defined format over a set protocol. For example, it may expect the request to come via HTTP POST with json data and sends back json as a response body, something any language can and does handle. That all said, your favorite broker may have a python SDK that provides tools to aid you in automating such requests and responses in a language specific library/module.
what do you do as a quant dev?
I'm not sure the degree of familiarity you have with China's internet policy, but the website does seem to err leniently with some blocked websites. China broadly has websites which are: 1: Easily accessible (most major Chinese websites) - loads fast 2: Kinda accessible (most websites outside of China) - takes a while (10 s?) to load 3: Never loads, i.e. "blocked" - Literally never loads, no matter what you do. 4: Openly blocked - A message comes up saying the site won't load. The project ignores #3, which is actually a huge class of websites. For example, college student unions fall under #3, and literally never load, just because they contain the word "union". The real extent of the firewall includes these sites too. Basically, be wary of adding timeouts. If a website hasn't responded in 5 minutes, it's effectively #3, and it's blocked.
I don't think you understand: No one is interested in doing work for free for you. Jog on. 
What I try to do sometimes is recreate an analysis from reputable finance media sources or current events. Sometimes, it's also nice to analyse a single stock. For example, calculating it's beta, looking up it's fundamental info on EDGAR, etc.. simply explore that data in Jupyter Lab and try to get the same numbers on Finviz or Yahoo Finance. Pandas has awesome commands built-in already, like moving averages (pandas.rolling_mean) and so on. It's a great way to explore that library as well, specially all the nifty datetime stuff it comes with (resampling and so on)
[removed]
Gj. :) The Sweden screenshot seem to have a bug in it? Is should probably say "SWE" .... Or did I miss something? 
1
I need go to the twitter then go to hackernoon. Why you don't send direct link?
sorry you are right
&gt;Openly blocked - A message comes up saying the site won't load. I'm sorry but this is never the case - There never is a message. It throws a 404 in case of web browser and timeout in case of ping. &gt;Never loads, i.e. "blocked" - Literally never loads, no matter what you do. In this case the pinger would register a timeout, i.e. 0/5 packets returned -&gt; same as blocked.
Supervisor is also cool to run your RQ workers and other continuous running stuff by simply making a new section and adding your ./manage.py commands there, possibly with some `num_procs` to spawn a bunch in parallel.
Check out Traversy Media on Youtube! He has got a lot of videos on web development/front ends/frameworks. Definitely learned a lot from him and might be worth having a look at. 
Take a look at this video: [Brandon Rhodes - Pandas From The Ground Up - PyCon 2015](https://www.youtube.com/watch?v=5JnMutdy6Fw).
&gt; None coalescing operator And btw why we can't have that?
[removed]
It isn't readable or intuitive to me. It feels like a C-like trickery, which python used to avoid.
Are you literally calling `calculate_diameter(int)` with `int` as the argument? Because `int` is a type. The error says that it doesn‚Äôt know how to divide a `type` object by a `float` object, because that doesn‚Äôt make sense. I‚Äôm guessing you have something like this maybe? def calc_dia(circ): r = circ/(2*3.1415) d = 2*r return d Because then the error makes sense: it‚Äôs happening in the line calculating `r`.
I'll respectfully disagree. An application programming interface is an interface allowing you to program your application. If you're able to provide that in a language-agnostic way, that's even better, but I don't think there's anything inherently more wrong with talking about the 'Language X' api directly usable from language X than a REST api available from any compliant http client.
What I don‚Äôt understand is when something get literally overwhelming negative response, why does the core team plug their ears and go ‚Äúlalala‚Äù instead of reconsidering the PEP? If the email is too much to read, the answer is not ‚Äúdon‚Äôt read it‚Äù, it‚Äôs to recognize that the feature is being rejected by the community. 
Can you point me to the definition of API that specifies language agnosticism?
Yep, that's why Python has exceptions, which go has shunned for some reason.
Pretty much the intersection of quant and dev: in my previous role, we were doing a lot of option pricing, so you had to specify the payoff in a nice way (to let traders/structurers do it with minimal chances of getting it wrong), then set that up as a pricing problem (essentially least-square monte-carlo in our case) and evaluate that. Every single part of this requires non-trivial amounts of development, architecturing and math. Quant devs typically sit on that line between dev and quant, where they are acutely aware of both aspects, even if they are more focused on one. Essentially, you cannot trust pure devs with quantitative software in case they get the math wrong, nor with quants, because their code is shit: so you get quant devs. Your mileage may vary.
&gt;What did you need this function for? I was making one skill for alexa which is under games category and I need pool of random words. So thought of making this.
I strongly agree with you but the problem is: WHERE WERE YOU WHEN WE DEBATED THIS FOR WEEKS ? The Python-idea mailing list is a process open to all. Literally anybody can pop in and give his or her opinion. This particular piece of syntax has triggered a very heated debate. Hundreds of mails. We would have needed the support. We would have needed the vote. Python is a community project. It's important to have the community to get involved in this. We are not Javascript. We are not Go. We are not PHP. Not only you can express yourself on the topic, but it's super important that you do. Get on board now ! [https://mail.python.org/mailman/listinfo/python-ideas](https://mail.python.org/mailman/listinfo/python-ideas)
I'm surprised no one says queries yet. The `DataFrame.query()` method gives you an excel-like syntax for filtering through data. It lets you convenient filter and split datasets by category, value ranges, etc.
Try gunicorn instead of Apache as it is simpler to setup.
I wish we did, but the last time the pep came up it died or got killed, don't remember which
Just to wade in on this. My personal issue with both: if m := re.match(p1, line): return m.group(1) elif m := re.match(p2, line): return m.group(2) and if re.match(p1, line) as m: return m.group(1) elif re.match(p2, line) as m: return m.group(2) is that it looks like `re.match(p1, line)` is evaluated once and assigned to m. From [the PEP](https://www.python.org/dev/peps/pep-0572/#exceptional-cases) it seems this ambiguity is why: y := f(x) is forbidden. As a workaround I'd suggest some form of syntax that indicates the evaluation is suspended e.g. `&lt;exp&gt;` meaning 'the result of exp'. A bit like how you can wrap a statement in a lambda and repeatedly call it `y = lambda: f(x)`. With my preferred resulting syntax being: if m from &lt;re.match(p1, line)&gt;: return m.group(1) allowing y = &lt;f(x)&gt; 
AFAIK there is no voting? Python is not a democracy, the core developers (and mostly Guido) can do basically what they'd like. My side was represented in the debate very well and I did not feel the need to add any more emails which would only spam the core developers and steal their valuable time. I did tweet about it and discussed it IRL with the community, but really, I did not have the need to write any emails... Also, I managed to live without this feature for the five or six years I've been programming in Python and if this syntax gets approved I will continue to live without it and will just not use it.
what does a quant (not dev) do? I thought that you are basically it, since you have a math MSC (i assume that they have them too) and how much of research is there at big banks / fin. companies (research into math/ statistical methods)? i've heard that Goldman Sachs has such a department.
&gt; Django does not come with a fully working login and register pages and views and nor does it put them into your application for you so you can tweak them yourself. it does: https://docs.djangoproject.com/en/2.0/topics/auth/default/#module-django.contrib.auth.views
&gt; Django does not come with a fully working login and register pages and views and nor does it put them into your application for you so you can tweak them yourself. 1. https://docs.djangoproject.com/en/2.0/topics/auth/default/#module-django.contrib.auth.views 2. https://django-registration.readthedocs.io/en/2.4.1/views.html
Please people, Python does not need to assignment operators. Are we embracing Timtowdi now?
For easier splitting take a look at sklearn train_test_split(). This allows you to do the whole thing in one line of code and has some additional parameters (shuffling, stratification). 
Btw. I am OP but posting form my phone. I really welcome you to collaborate or atleast thank you for your suggestions. My goal is to make a pi with a numpad only keyboard and make a stand alone kind of music machine.
What‚Äôs meaning the 1?
&gt; An API is, by definition, language agnostic. No it isn't.
&gt; Also, what was the line that makes you say they were aware they weren't going to document a change. I read they weren't going to document an existing option. &gt; &gt; It's like they didn't have 100% documentation and someone documented some functions. It'd be nice to document everything, but it's not necessary. You are, obviously, acting like a battered wife defending her abusive husband. Here's the obvious line I obviously linked to: *"The 2.7 backport is too much of a pain due to code skew and it already says "maybe LTO" so I'm not going to worry about it."* And here's what the saboteurs found "too much of a pain" to modify: *"If you want a release build with all optimizations active (__LTO__, PGO, etc),"* 
&gt; It's a pain and I don't want to maintain it is a reasonable reason to not support it anymore. It's not malicious, but if you want to maintain it, I'm sure they'd let you for the next 6 months. Or just use 2.7.14; it's not that different... Fuck everything about that submissive and defeatist attitude. I'm already maintaining a Python2 fork: https://github.com/naftaliharris/tauthon/ And I'm also maintaining my own Python2 Gentoo ebuild, with the necessary patches: https://github.com/stefantalpalaru/gentoo-overlay/tree/master/dev-lang/python 
Sorry! Deleted :)
I don't like the look of this syntax either, and I honestly think there are already good solutions to the use cases that are typically brought up. The case of while (a := fun()) != 'quit': ... can be rewritten as a for loop. for a in iter(fun, 'quit'): ... In more complex cases, you can write a generator. Or perhaps `iter` should be able to take a predicate function for its second argument. For if (m := re.search(pattern, string)): ... I think m = re.search(pattern, string) if m: ... is good enough if there is only one pattern. For multiple patterns, a construct like this would do: m = Matcher(string) if m.search(pattern1): return m.group(1) elif m.search(pattern2): ... In the case of comprehensions, there is the `for y in [f(x)]` hack [(x, y) for x in iterable for y in [f(x)] if y &gt; 3] which imho is no uglier than constructs involving `:=`. Finally, you can already do pseudo assignment expressions as follows: class Bag: def __call__(self, **kwargs): (key, val), = kwargs.items() setattr(self, key, val) return val bag = Bag() if bag(m = re.search(pattern, string)): print(bag.m.group(1)) Admittedly, none of these solutions are particularly elegant, but neither are any of the syntaxes for assignment expressions I have seen. 
The only time I've ever used colour names was when I was prototyping and I just wanted something not black. There are enough colours there that basically anything I wrote down worked as a colour, and that was enough. When I wanted to get to polishing, I'd pick colours myself with something like [colourco.de](https://colourco.de/). There's no reason for pygame to have a special page for it, or to have to write an overly complex colour-picker.
You don't have enough resolution on the timers, and if they don't tick, but still report forward values to stay monotonic it will cause problems. Python 3.6 Linux: * time.time() min delta: 239 ns * time.perf_counter() min delta: 67 ns * time.clock() min delta: 1000 ns Python 2.7 Linux: * time.time() min delta: 954.0 ns * time.clock() min delta: 1000.0 ns I picked a random input_len from the lowest quintile of your range and ran these tests as an example. %timeit -n1 build_fun 600 ns ¬± 327 ns per loop %timeit -n10 build_fun 115 ns ¬± 28.3 ns per loop (mean ¬± std. dev. of 7 runs, 10 loops each) %timeit -n10000 build_fun 81.8 ns ¬± 22 ns per loop %timeit -n100000 build_fun 76.8 ns ¬± 3.11 ns per loop %timeit -n10000000 build_fun 23.7 ns ¬± 3.29 ns per loop Accuracy and Precision are impacted, and while Loess smoothing may be useful for comparisons of the same system it doesn't over come the issues like the Nyquist criterion. [GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.1)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import math &gt;&gt;&gt; import time &gt;&gt;&gt; from __future__ import print_function, division &gt;&gt;&gt; LOOPS = 10 ** 6 &gt;&gt;&gt; min_dt = [abs(time.time() - time.time()) ... for _ in range(LOOPS)] &gt;&gt;&gt; min_dt = min(filter(bool, min_dt)) &gt;&gt;&gt; print("min time() delta: %s ns" % math.ceil(min_dt * 1e9)) min time() delta: 954.0 ns &gt;&gt;&gt; min_dt 9.5367431640625e-07 The *minimum* time delta on 2.7 on a mac is way to large at ~950 ns to judge ~24 ns events with single passes if you are looking for objective data. As a warning Loess also tends to break with outliers, which is exactly what you will have with sub tick yet still *semi* monotonic clocks like in this case.
Fortran or C++.
Look into the `psutil` module.
I correct myself for specific process.
As much as I *want* assignment expressions and am fine with the syntax, wtf are you on about? Open to all? Not really. It's a mailing list and is relatively complicated to just jump into right away. Not to mention that with some of the privacy scares I have I would never give out my name nor email address online anymore. Python may be a community project but we live under the BDFL model. And the BDFL has heard more than enough criticism and purely brushed it off, at one point saying he's tired of hearing one of the points over and over again (though to his credit it was answered). There also seems to be no voting at all.
You can still do that with `psutil`.
Thanks
Can you please explain then why using `as` in import assignment was just fine?
People are screaming on how it's too similar to = and will especially cause confusion to beginners. Personally I think it's an overreaction though.
Looking quickly at the source I found https://github.com/numpy/numpy/blob/master/numpy/fft/fftpack.c which suggests at least some of the fft stuff is written in C.
Why are those giant ugly if's there to build query string? https://github.com/vaibhavsingh97/random-word/blob/master/random_word/random_word.py#L53-L71 Try some [urllib.parse.urlencode](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode) Also not in python you don't need parenthesis in if-conditions like `if ('date' in params):`
But it isn't an operator, it's an expression that has a meaning and return value. In quite a few langauges the assignment operator also acts like an expression. In Python it doesn't. Doing `a = 5` *returns* None, even if a is assigned to 5. To change this behavior instead of adding an expression is far worse-- it would break compatibility.
It's probably not the FFT implementation that's slowing you down. It's the fact that you have to interface to it with a Python-level function call, which means using Python objects for all the arguments, etc. Numpy is expecting you to call it from Python, not Cython. There might be a way to call numpy functions in some kind of direct "Cython mode". I'd start by looking for that. Alternatively, link in the C library `fftw` and use *that* from Cython.
On GitHub you can see how much of which language is used in percentages. Go to https://github.com/numpy/numpy and click the colored bar under "commits" etc. .
I‚Äôve found that using pipenv in coordination with a setup.py is fantastic for Django. 
I‚Äôve found that using pipenv in coordination with a setup.py is fantastic for Django. 
&gt; it looks like `re.match(p1, line)` is evaluated once and assigned to m You're right - that's exactly what it looks like. Is that not what it's proposed to do?
I have have the corc as a input so doing user_input=int(input("what is the circ?")
However at the moment the RISE extension only works for jupyter notebook, so bear that in mind. 
Don't open images as string, images are bytes. Nowhere in this S3/image/resizing thing would you ever need to convert or write to string. So no StringIO, no get_contents_as_string(), no base64. S3 can return bytes, PIL/Pillow expects bytes. `pic.get()['Body'].read()` reads the image in memory to bytes, then pass it to a BytesIO() and that to pil.open(). Once this works you can think about efficiency, like use temporary files from `tempfile` and/or some threads/futures to do some concurrent io.
use numba for a quick and easy speedup
Indeed, though this question was specifically about the fft module, so project-wide stats are probably going to be a guess at best, when instead it's possible to go to the actually relevant source.
Don't write shitty context managers. The context manager should be conceptualized as the type it returns on enter. That is why it exists in the first place, to manage the resources associated with calling it's enter method. If someone needs the manager nee manager outside of initial setup they are doing something wrong. 
So, you can see the space of quantit finance as a triangle: you get math, dev and finance as the three 'extremes', and everyone sits at some level of balance between these three. At the extreme of dev, you have the actual IT: theae guys know literally nothing of finance, they just build processing systems for stuff. Which may or may not be financial. At the extreme 'finance', you probably have sales. They don't know the math and they don't care: what they need to know is the product, what it does, who may want it and in which circumstances, etc. They might book it into the system themselves, but they are just users. Finally, towards the math end of the triangle, you have the quants. These guys do math. Now, I don't think a lot of company use pure mathematicians, so they always ait _somewhat not_ at the very tip, like academics might. But that's their thing. People like structurers, quant devs, traders, ... Have less specialised jobs. Now, as for the math used... It depends. What I studied (and which was very fashionable pre-2008) is stochastic calculus, which is the calculus of random processes. There are many links to statistics/timeseries analysis, but it is not exactly the same thing, closer to probability theory. The main goal of this sort of math is to derive computable formulas for the expected value of complicated random variables, which you can show to be equivalent to pricing an option, under some hypotheses on the behaviour of markets. These hypotheses were not always verified, and a lot of simplifying assumptions were made, which is pointed as a cause of the 2008 crisis: essentially, the marginal distribution of each product was fine, but their propensity to all default at the same time was drastically undervalued; the market of options is back up nowadays, but the crisis put a lot of regulatory attention to thesr models, and I don't think a lot of banks still have these pure 'pen and paper' quants deriving formulas: these days, you must justify all your choices with data and reports, so most quants got more familiar with the finance aspect. Other companies or teams do market-making i.e. offer liquidity at all time, in exchange for a fee: you can think of them like the bureaux de change that offer to change your money, buying lower than they are selling. In these cases, the theoretical framework is much less clear-cut, and the maths involved tend to include a lot more statistics and TSA: you receive a fee with each transaction, your goal is mainly to minimise your costs and your risk to retain as much of that fee (called the 'spread') as you can. That means following the market, reacting quickly yo new information and managing your risk. Finally, you have some companies doing actual investing, either in their own name (proprietary trading, or prop.) or with client money (like hedge funds, investment funds etc). These guys try to find inefficiencies of the market, or predict its future value, or design profitable strategies and portfolios. How they do that is entirely up to them, and some use very quantitative methods, with a lot of time-series forecasting, machine-learning, optimisation, etc. In all these cases, the people mainly in charge if the math-y part tend to be called 'quants', and the math they do tend to revolve around probabilities and statistics, but that's not a requirement of any sort. As I said above, this field is completely non-standard, and if you find a new way of making money using prime numbers, nobody prevents you from doing that, and you'll probably call your prime numbers guy a 'quant'.
Why do you say that overlap of syntax (conflict) in `with` construct entails forbidding use of `while bar as some_operation(foo) &gt; 0`?
So your opinion is that Python shouldn't conflict with the syntax of any other moderately popular language? Do you have examples where other languages have done that and it's been a huge mistake? I ask because if I was a core developer what reason to I have to weigh your opinion over that of someone else's? There's already extremely long discussions of possible different syntax options on the python-ideas. A contradictory example to your point is Python's use of the `for` loop is contradictory to many C based langusges, it's in fact the `for-each` that some languages use. And yet this conflict in syntax has never really harmed Python even though I've read others say it's a huge mistake.
How can I show you the appropriate code if you don't explain what you are trying to do?
I'm not asking about how to code something, I'm asking about how you read this documentation. 
Multiple context managers are pretty well and truly forked already because of line length restrictions and the inability of with to continue to the next line without an ugly trailing backslash. It would be worth revisiting that construction anyways if it additionally causes tuple confusion. However I don't understand why as in a control flow block needs to impact as in other regions of code. Nobody complains that import as doesn't call a packages enter method, and nobody would want to use a context managers as in anything but a with block (only the with block guarantees you call exit).
OK, I don't really understand the problem so I'll be quiet. I hope someone else is able to help you.
I guess `import a as b` is different, it really is an assignment `b := a` Either way, I think saying that because there's already an inconsistent set of semantics for "as" doesn't mean we should be okay adding another one. And that's really what this entire post was about, I agree with Barry in that we should be focusing more on the semantics of things and how they affect the consistency of the language rather than just the superficial syntax. (Although, *personally*, I would prefer the `as` syntax.)
Instead of trying to read the source code, read the actual docs: https://kivy.org/docs/api-index.html
thanks this is what i was looking for essentially. 
Broadcasting? 
I don't believe you, I didn't see 20 stack overflow tabs open and your computer shutdown while you had a drink.
Hi! This is a question for r/learnpython ! I won't fully answer your question as you should post to the aforementioned subreddit, but I think it would be easier if you always had lists as values for your keys (e.g. {2005: \[('movie', 'director')\]} even when you only have one value. Then your task is only to find the \[n\]\[1\] for each value. This is just to get you going, there are other solutions and elegant ways to do it, but this is not the place. Good luck!
This PEP is so pointless...
Thanks for pointing me in the right direction!
Bahahahahhaha thats me you are talking about! my ram runs out due to tabs Q_Q
For the Pythoner curious about finance, there are quite a few sources on this page (with more added all the time): https://www.palmislandtraders.com/econ136/e136lit.htm
plus 10 years of C,C++,Java,Python experience?
I think we're being too esoteric. Should my 120k lined open source library still support Python 2.6? When about Python 2.7.6? There was a major change to Python in 2.7.7 that made things easier, but makes backwards compatibility harder. With vtk, I was supporting 5, 6, 7, and 8 until I found a great new feature in 7. There needs to be a reasonable set of options. It's not defeatist. It's an issue of testability and usefulness. Shoot, I've killed Python 3.4 support because it's dead, but not really.
Brilliant, will try. Thanks! 
I actually started Python 3 weeks ago, prior to that I had over 1 year of experience with Javascript.
aren't these easier to do in Excel than Jupiter notebook? 
&gt; I think we're being too esoteric. Let me put on on my robe and wizard hat. &gt; Should my 120k lined open source library still support Python 2.6? No. Asking for a recent Python2 version is fair game. Asking for Python3 or Perl6 instead, is not. &gt; It's not defeatist. It's an issue of testability and usefulness. It's an issue of Python2 being sabotaged by Python3 developers and users like you bending over and saying "thanks".
[http://financeandpython.com/](http://financeandpython.com/) is a really good website!
Quite interesting - I'll have to give this some consideration. Thanks!
If you think about it, there's (in theory) an infinite amount of variables that are driving returns. How does one narrow down this universe? If you isolate one variable, is it unlikely that it will be enough of an edge solely on its own? I'd assume you'd have to combine many alphas (what does that mean 'combine alphas'?).
Someone in /r/learnpython pointed me in the direction of using BytesIO() I was using StringIO because that is what the original gist used. I have updated my gist with a working example. I will look into threading the application, have never worked with multi-threads in python. 
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [My new book, "Cracking Codes with Python" is now available and free to read online!](https://np.reddit.com/r/learnpython/comments/7sigre/my_new_book_cracking_codes_with_python_is_now/) \#2: [I'm releasing a free code for the "Automate the Boring Stuff with Python" Udemy course](https://np.reddit.com/r/learnpython/comments/7fxork/im_releasing_a_free_code_for_the_automate_the/) \#3: [I made a python cheat sheet](https://np.reddit.com/r/learnpython/comments/82t191/i_made_a_python_cheat_sheet/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
I seem to recall there being some discussion of the fact that NumPy's FFT is much slower than, say, Matlab. It turns out, Matlab uses fftw which is probably one of, if not \*the\* fastest FFT solver. However, NumPy can‚Äôt use it because of the license. [`PyFFTW`](https://hgomersall.github.io/pyFFTW/) may be the best answer for you.
FYI, if you indent all lines of code with four spaces (or there may be another way with the new "Fancy Pants Editor", you get code: like this
Making a GUI or a web interface is a good idea imo. You could also add functionnalities like an history of viewed recipes or the possibility of saving some recipes. About your code, it's honestly not a good practice to have so many comments. Comments like this are completely useless to anyone who can read a little bit of python code and just make the code harder to read : # Initialize an empty list allRecipeURLs allRecipeURLs = [] Apart from that its pretty clean code imo. 
www.wikipython.com is a non-commercial site with no registration, no cookies, no fees, no ads and no contributions accepted - and nobody looking for a job so there is no "self promotion". Content is strictly for the benefit of the Python community with free toolbox downloads approaching 6,000. Your apology is accepted. :&gt;)
This is one of those things that I am very saddened to admit, I've started to do in Excel. It just became easier than trying to get python to do all of this for me. But I may check it out again. Two data presentation notes: * since your matrix is symmetric (by definition), you can not print the upper or lower triangle. This way, you do not distract the reader from all of the different values. * Use as diverging colormap since you know *a priori* that all values are in \[-1,1\]. Also, set `vmin=-1,vmax=1` to enforce your absolute limits on the values
&gt;But it isn't an operator, it's an expression that has a meaning and return value And what exactly is that "meaning"? Does it assign? If it doesn't, then it's an assignment. If you want it to return a value, it's still an assignment. Saving a line of code or two isn't worth it. It'll cause confusion and will probably introduce more errors (due to confusion) than whatever benefits it might bring. 
I hate to repeat myself but You folks at WikiPython should read Reddit's page on self promotion. You obviously didn't read the page or you wouldn't fixate on whether or not you're benefiting monetarily or through jobs. In fact if you'd have taken a minute to look at the page you'd see that you fit directly into this: &gt; But it's not spam! I worked hard on that, I make no money from it, it's original content! I'm not a spammer! &gt; We're not making a judgement on your quality, just your behavior on reddit. Your stuff's probably amazing and someone would be really interested in it but... &gt; If you submit mostly your own links and your presence on reddit is mostly for your self-promotion of your brand, page, blog, app, or business, you are more likely to be a spammer than you think! Read the FAQ and make sure that you really understand that. So no apology is warranted from me.
I'd assume it is related the Python's loop xonstructs in general. `as` is currently used in only two contexts-- renaming on import (which by definition can't called on import and thus are safe from having an issue) and context managers assignment to a variable for the scope of the with statement. The latter is common in terms of readability-- you'd usually see `with manager_stmt as var:` than `var = manager_stmt; with var:`. The problem is parsing wise is what if we had something like `with spline_manipulation([(f(x) as y, y / x) for x in range(1, 11)]) as var:`-- such a case would potentially be extremely difficult to parse.
Not necessarily-- there's concepts of pooling and load balancing where the context manager has to be abstract, ex with Server.pool_of([server for server in Server.production]): # stuff There's also plenty of cases where the actual type can't manage it's own resources, so you fetch something that can. Most common in cases of user choice to important flags meaning something in specification but not forced by the broker being used.
Semi related note-- who the hell says making for loops for each a huge mistake? You can do the same in plenty of languages (albeit also having the option for simple statement based loops).
https://www.python.org/dev/peps/pep-0505/ It was deferred until 3.8, so I'd say when done, voice your opinion.
But the pool is distinct from the connection context. You can say pool.connect() and the connect method can return a context manager object that borrows (and eventually returns) the connection to the pool. You don't connect to the pool, and the pool is not something you need or want to close with a with block.
No I just saw that. Gotta change the code a bit today, just got index wrong üò≠
The thing that I dislike about the PEP is that while it proposes something I support, one (as of last I checked) implementation detail is off-- this is syntactic sugar and *nothing* else. Could be made such that when doing this the variable is only assigned after the expression condition passes (which is doable). Last I checked of the source a temporary reference to pure expressions is already kept, just not stored in the "Python" way. Testing against this temporary reference and then assigning the variable to it would be both more performant and closer to how other langauges (like Java and JavaScript to name two) handle assignment in block-starting statements-- the assignment occurs after the expression is tested, rather than before.
&gt; Don't write shitty context managers. That's not how programming language design works, though -- when you add a new feature, you need to make sure it behaves as consistently as possible under all circumstances and eliminate as many edge cases as you can. For example, somebody were new to Python, they might end up writing the following by mistake. They're not aware of this new feature and add parens reflexively: with (open("foo.txt") as f): pass This ends up working by accident, great. So they carry on and some time later, write the following: with (tempfile.TemporaryDirectory() as dir_name): pass This will unexpectedly break: `tempfile.TemporaryDirectory()` defines its `__enter__` method to returns a string indicating the name of the created temporary directory. But here, `dir_name` ends up actually being assigned to the `TemporaryDirectory()` object itself. &gt; The context manager should be conceptualized as the type it returns on enter. Well, whether that's the correct thing to do or not, I don't think it's guaranteed that everybody will develop the same model. For example, most people are introduced to context managers for the first time when they want to do file IO. Their tutorial might show them something like this: f = open("foo.txt") lines = f.readlines() f.close() ...then explain the better way is to do it like this: with open("foo.txt") as f: lines = f.readlines() Based on this example, I think it's understandable that some people will go not realizing that there's a subtle distinction between the two.
&gt; and the pool is not something you need or want to close with a with block. That's the problem-- you're just not seeing the fact that this use case does exist, especially in many client libraries for cache solutions.
What if they have multiple `as` statements? Something like: with open("patient-dataset-2018-04-02_leukemia-trials.csv") as data, open("patient-dataset-2018-04-02_results.csv") as results, open("patient-database-labels.txt") as labels: pass
The meaning *is* the fact that the value is returned. Python itself hasn't done that. And some people find it a mistake bringing people from other languages like Java. Using assignment as an expression can be really useful, but Python decided that assignment is only an operation, that it shouldn't have after effects. This new syntax does the operation *and* the side effects. Such a thing would be most common in parsing internal data formats. As for confusion-- you can literally say the same about a lot of Python. For's break. Exceptions else / finally and the order of execution. The builtin array like container type being dynamically sized. The fact that `:` does type hints now as well as dictionary pairings. This argument has been beaten around the bush for a *lot* of things. And it has always failed and been negligible. Because if this will honestly confuse a specific subset of students based on prior experience, teach it last and let them decide whether or not they want to use it. No harm no fowl. Many universities are still stuck on Py 2.6 anyway (yes, 2.6, not 2.7), and there have been plenty of syntactic additions and features since then, from format strings to asynchronous versions of statements.
This should have been the standard ages ago. daemontools, runit, and s6 made this perfectly sensible a while ago, and likely so did many others neither of us have heard about. launchd and systemd (`systemd-journald`/`journalctl`) just made it the norm, even if you didn't notice. Heroku and Elastic Beanstalk work this way too. So should sane applications without special needs under Docker. Now I'm not disparaging particular logging to an external system explicitly from code (whether Sentry's raven, or other), but if you want to KISS‚Ä¶
From a language design standpoint it is much uglier to have different expression parsers based on context. I think a lot of people in this thread are underestimating how much language designers hate special cases.
`with (open("foo.txt") as f):` should do the context manager thing. `if (open("foo.txt") as f):` should do the assignment thing. I don't see why that is confusing at all. Assignment `as` should not be available inside a `with` and context manager `as` should not be available inside an `if`.
But the PEP doesn't see it that way. It is worded as adding assignment to all expressions. From the article, one nice way to use it would be to do an expensive operation only one time in a comprehension: [(expensive() -&gt; x, x/2) for x in y]
I made a Flask app, deployed on Google App Engine. It is a simple event study app for stocks. It is still in the alpha version right now, so it is still quite ugly. LOL. I need to work on the UI a bit. Nonetheless it runs. What it does? You can enter a bunch of U.S. stocks in the Assets field, for example, AAPL, KO and then you can enter the dates of your interest in the Dates field, for example 2010-01-01, 2016-11-08 and so on. Enter how many days before (10) the interested date you want to look at and how many days after for example 120, and the press Search.
Import statements are not expressions. You can't do this in an import statement so there is not ambiguity. As you can see here it is not valid to put an expression in an import statement: https://docs.python.org/2/reference/simple_stmts.html#the-import-statement
I don't know if you're aware, but you're making it really difficult to help you by being so extremely vague. It would be really helpful if you'd explain a bit better. In one of your other posts you said you did this: print(calculate_diameter(int)) In this post you are now implying that you do this: user_input=int(input("what is the circ?")) print(calculate_diameter(user_input)) Well, which is it?
&gt; it is much uglier to have different expression parsers based on context. Except python already does that for `as`. It's used in `with, except, and import` statements.
I thought pyglet was basically a dead project?
Thanks for the feedback, I pushed the latest changes by adding your feedback :)
No , in those statements "as" is a keyword, not an operator. The syntax of with looks something like with EXPR as VAR[, EXPR as VAR]*: STATEMENT* Now imagine how confusing that would be to parse if the expressions could also have "as" in them. You could certainly write a lexer to do it, but it is a complete hack. And as a general rule, if it is hard to write a lexer for it, it is hard to write valid code. See C's assignment statements for a prime example.
... why?
Okay, exactly what I thought, thanks
We already do that with other keywords if x &gt; (a if y else b) It's not a hack.
Yea this. After 2 days of coding, makes a 100 Line game...with almost no prior experience. Umm ok 
1) Write code to make money 2) ? 3) Profit!
You know what, your right. I'm worried about code like with a as b as c: pass But you can already write if a if b else c: pass However, just because we made a mistake in the past doesn't mean we need to keep making mistakes. I'll concede your point though.
I went with Saint Joseph's MBA in Business Intelligence (covering data science) and can say it opened a lot of doors. There are quite a few reputable programs out there if you really want to dive in. That said, really dive into data integration and modeling as well. Having a firm understanding of both will make preparing data for analytics all the easier.
How unethical are you willing to be?
Damn I watched this video and was getting depressed that i been learning python for the last couple of months and I am no where close to doing any of that. I feel better now that you say you had a lot more experience coding.
I was for this when it included block scoping and list comprehension fixes, but otherwise it‚Äôs just syntactic sugar for a not super painful situation. 
Why not? Programming random things gives you, at least, experience with the language. If you mean why I did a timelapse, well that's because I want to start posting videos on youtube. If you read the description you will see that I plan to make more.
I made Pong after 1 week of learning Java. (With score, menu, and "AI") I wouldn't say it's too crazy.
Maybe tell us what doesn't work. What did you expect to happen? What's happening? What are you doing to make it happen? Also, why won't you use just a single nested list? You can make it like `game_map = [[] for _ in range(10)]` and to fill every space with empty strings `[["" for _ in range(10)] for _ in range(10)]`.
Curious, have you considered [arcade](http://arcade.academy) library which is based on pyglet?
Plus no test, fuck around, mess up, delete lines and then refractor. Must've had some kind of skeleton of the structure in another window or some kind of tutorial basing it off.
 if my_money &lt; all_the_money: my_money = get_more_money() Just open up IDLE and type that on in there.
Are you working on the buy side?
I believe OP is new-- Sublime without evidence of plugins instead of PyCharm or some other more featured IDE...
Definitely use jupyter notebooks! Also after looking at pandas, I would check out [Dask](https://dask.pydata.org/en/latest/use-cases.html) library. Within this library are quite a few different technology stacks. One is Dask dataframes which are like pandas on steroids. Dask also has its own task orchestration like Airflow or Luigi that your people may be interested in.
From [the docs](https://sqlparse.readthedocs.io/en/latest/): &gt; `sqlparse` is a non-validating SQL parser for Python. It provides support for parsing, splitting and formatting SQL statements. &gt; &gt; The module is compatible with Python 2.7 and Python 3 (&gt;= 3.3) and released under the terms of the [New BSD license](https://opensource.org/licenses/BSD-3-Clause).
No. It's unreadable, bad practice, confuses types, and is a bad idea from a strong typing standpoint.
Mostly my complaints break down into two grounds: 1. Scope too wide This is honestly where the bulk of it comes from. I think that because they wanted to have assignment expressions work in a large variety of cases, they had to implement it in ways that break readability. This is especially apparent in generator comprehensions, where we now have another element that breaks left-to-right reading. If they had added it as an additional `with as`, then this would be more natural in that scope. As, IMO, would `if as` and `while as`. And while I understand that people don't want to have multiple meanings of "as", I don't actually think this is a very different meaning. Certainly it is less different than `for else`. It's almost exactly the same as the definition used in `except as`. 2. Adding an operator Most of my problems with `:=` stem from having too wide a scope. I get why it is wanted to have it separate from `==` and `=`, I just disagree. I worry that we are going to see a litany of top level `:=`, because when people think there is no difference, it encourages bad practices. And, in effect, there is no difference.
`if msg:` is fine, as far as I am concerned. It will be False if the message is empty string. I think it was Alex Martelli who first said that it was better to say sorry than to ask for permission, so generally, in Python one just does it and catches the exception, rather than "look before you leap"
But that's exactly what I'm afraid of. I actually *like* this restriction. Lack of assignment expressions prevents a *lot* of the bad habits I see in C programmers
What kind of machines?
what it does with the code is executing the while loop without getting any input from the user . it's calling some function with that while loop but it just executes it and keeps repeating . I'm a beginner so i just did it the old fashioned way.
Thank you. Just got into a bit of a tiff with my boss and thought I was losing my mind :)
Yep, python would work well for that. It‚Äôs actually pretty easy to do stuff like camera image detection and such. Here‚Äôs just [one example](https://realpython.com/face-recognition-with-python/) You can do all sorts of object/proximity detection with python.
Got it. Thanks.
I'm with you on that. `if msg` makes sense to me...`if len(msg)` on the other hand feels unclear.
Ye sure reply to me if u want in this comment, I‚Äôm also fairly new to python 
`as` is already optional in `with` and `except` blocks. Why couldn't something similar be done with `for` and `while`? The only hard part is that in a comparison `if foo()&gt;5` we might want to save the value of `foo()`. So have `if` parse as: `if EXPR [as VAR] [CMP_OPERATOR EXPR]:`
The only thing which I did was to stop the recording a few times to give me some time to think(for example the collision system), also you can see that at the end I kinda struggle to reset the players stats so I just left the code as it was(I also realized that the project wasn't as good as I would like so I decided to ended it there). No skeleton or another window(I only have one monitor) used.
Believe this is python 2 only. 
Read the sidebar. It will tell you where and how to ask for help.
The one thing to watch out for is empty string vs `None`. Generally one tests for None with `is None` but as with these things, there's a million people that will argue either way :)
Define "worth". Are you trying to get hired somewhere? Personal fulfillment in learning something new? 
You read position from a file. Is that really what you wanted? Use input() and raw_input() to read from CLI or read on how to do it from tkinter. BTW, tkinter code will never execute cause you'll enter endless while loop before it gets reached.
Working on Python Keylogger runs in the background for the local machine and network terminal machine.
Document says nothing about `def x = ...` as alternative to `x := ...`. I wonder if `def` was considered. 
In the gunicorn app script, you forgot to translate "Yeni hali" to "New version" or simply "New"
i want to make a game where there are rocks incoming from left to right and u have to avoid them while being the spaceship. the tkinter code is another program that works with the read.pos function and the command inside the while loop. if u run it yourself u will see what it does and what's the problem. without the tkinter code at the end of course . like i said that's another program related to the movement of the spaceship
Personal.
`if len(err)` is fine to use but usually is unnecessary because most of the time `if err` will give the same True/False value.
&gt; pyglet dead https://pypi.org/project/pyglet/#history
You're basically proposing that we introduce a special kind of "expression" that's only usable in some circumstances, not others. For example, suppose we had the following list comprehension: new_data = [(f(x), f(x) / 5) for x in data] We make it more efficient using an assignment expression: new_data = [(f(x) as y, y / 5) for x in data] Since doing a list comprehension is an expression, doing the following would be legal. ctx = my_custom_context([(f(x) as y, y / 5) for x in data]) with ctx as foo: pass So surely the following would also be legal, right? Well, with your proposal, it wouldn't be. with my_custom_context([(f(x) as y, y / 5) for x in data]) as foo: pass Python now effectively has two "kinds" of expressions now: ones that can be used in a "with" context and ones that can't. That seems like a huge cost to pay to me: far worse then just going with `y := f(x)` or whatever.
I'm more interested in programming interesting graphics(like cellular automata, fractals, simulations, etc) rather than making games. This was just a little experiment.
plus, you can see the code already written on the back.
&gt; While I understand True == 1 and False == 0 That's not true in Python 3. It's technically true under the hood, but it's a different data type. That change fixed some seemingly unsolvable bugs in my code. It's also bad practice. Even doing `if value == True:` is bad practice. You should use `if value is True:` or simply `if value:`. There are reasons to not use `if value:` with things that should be booleans (what happens if the value is None?), so there are reasons to break the rules.
Udemy Spam!!!
Ok, I see now how you did it (but why not just global variable instead of writing and reading from file?). I can't run it as I won't be by my machine for over 2 days, but I'll try to remember to check this thread when I'm home. 
&gt; there is the `for y in [f(x)]` hack which imho is no uglier than constructs involving `:=`. Do you know how the `:=` can replace the `for y in [f(x)]` trick in general? It's not obvious to me how to mechanically transform the one into the other. In [this example](https://www.reddit.com/r/Python/comments/8nkjy1/raytracing_using_list_comprehensions/) is used many times and (maybe after an initial shock?) it actually feels quite nice once you get used to it.
You are arguing for something completely different than I am. You are saying we can't use "as" in an assignment expression, and I'm saying that I don't want assignment EXPRESSIONS. I want assignment FLOW-CONTROL. I don't care if PEP 572 does anything for list comprehensions. I don't need `[(f(x) as y, y/5) for x in range(10)]`, and if not doing that in 572 makes it possible to use `as` inside for/while that is a tradeoff I am perfectly happy with. There are lots of other issues introduced by having any kind of temporary inside python comprehensions that I think its probably better not to open that box. 
Yup, but it looks like plain C code, which doesn't use any vectorization instructions. But I don't know if there is any merit to vectorizing this calculation: I don't really know how the algorithm works. However, the prevalence of for loops in this code give me a bad feeling about it.
I don't think there's a good mechanical transformation. If you really wanted to, you could do something silly like `if [y := f(x)]`, with a nonempty list always being true. But that's much worse than the `for` trick. In most pracical applications however, the assignment would be done the first time the value appears, which is more reasonable.
Strangely, PEP 8 says `is True` is worse than `== True`. Not sure why.
I mean, this is a thread related to discussion of PEP 572. The point I'm trying to make is that if we swap `y := f(x)` with `f(x) as y` within the PEP as many people are suggestion, it would end up introducing multiple inconsistencies with Python that make the suggested swap a complete non-starter imo. If you want to propose changing `y := f(x)` to `f(x) as y` *in addition to* weakening the scope of the PEP, then sure, I think that's a reasonable discussion to have. But in that case, I think you (and other people who want that kind of change) probably ought to have articulated exactly what additional changes you would have wanted to make to the PEP rather then expecting other people to guess. For me personally, I'm currently at a 0 for PEP 572 -- I can see how it can help simplify lots of code, but the syntax (whether you use `:=` or `as`) just looks clunky to me. If we were to shrink the scope of the PEP and kill many of its listed use cases, I'd move down to like a -0.8 -- I don't think the limited benefits are worth complicating the language.
I guarantee you that nobody advocating for `as` has any desire to use this functionality outside of a flow control statement, just look at their examples. There is a disconnect between whoever is writing these PEPs and the end users. We want to solve the problem of "iterator and a half" and that is it. The PEP author is the one introducing the broader functionality of a full expression, and then complaining that our preferred syntax is hard to parse because they increased the scope of the problem. That is just obnoxious.
Oh, sweet! Thanks! 
I won't sound vicious, but this is a consequence of missing proper support of closures, many asked for a decade ago. Just look at Ruby blocks, how this can be solved quite generally at the core of language concept. It's like CPython team can never learn from past mistakes. Instead of deliberate and though-out changes and additions, some reckless decisions are made with long-term consequences, hacked and patched around afterwards.
Depends on the program and what you are trying to learn. Are you trying to learn applied ML then you don't need to go to program. There's tons of resources, learning paths, data available online. You just to commit to a schedule and start learning by playing with data by creating models. There are many data science meetups in big cities (SF, NYC, Seattle) to meet data scientists. If you wanna learn the math behind then it becomes a bit hard just by self learning. Its not impossible though. However, very few data science programs actually go through the math behind ML, AI and Deep Learning. 
You you provide some context to this error? Does it occur just on import or is there a specific line throwing it you could add to your post?
I solved it.Basically pycharm was connected to my other version of python I think.I had to reinstall pycharm and it worked fine.
In snippet below you can see that 4-dimension iris dataset was transformed with PCA into 2-dimension. Next k-means were used to find clusters which were finally plotted. import matplotlib.pyplot as plt from sklearn import datasets from sklearn.cluster import KMeans from sklearn.decomposition import PCA iris = datasets.load_iris() data = PCA(n_components=2).fit_transform(iris.data) labels = KMeans(n_clusters=3).fit_predict(data) for label, color in zip(range(3), ['r', 'g', 'b']): plt.scatter(data[labels == label, 0], data[labels == label, 1], c=color) plt.show()
Yes, Python is the best first language to use. The /r/learnpython and /r/learnprogramming subreddits are best for questions like this, since this sub is mostly for news about Python itself. Your project might be kind of tricky. It's easy enough to set up web cams with some kind of motion sensing, but trickier (but still possible) to have some kind of facial recognition to detect a person entering the room. But you'll probably have lots of false positives: lights coming on when you aren't there or turning off while you're still in the room. But there are a ton of other ideas you can implement once you learn to program.
Check out motion. It will automatically capture any movement from the camera. You could combine this with python scripts. And yes, python is a great beginner language since it will teach you alot of OOP concepts. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/automate] [Python and Industrial Automation \/ Controls](https://www.reddit.com/r/Automate/comments/8t3p0l/python_and_industrial_automation_controls/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Site as in location. These are the packages which are needed for this particular computer
This post is better suited for r/learnpython
This post is better suited for r/learnpython
This post is better suited for r/learnpython
Maybe this specific code was a bad example. We're not talking about error handling, we're talking about assignment in expressions. For that, this syntax is very clear.
I made a Pong game too maybe after 1.5-2months into Java. But I had previous experience with different languages. 
My point is that assignment in expressions tends to bury useful information. Code like this becomes normal. 
He had to lay low u.u ... What is package manager ? CTRL+B ...
In this case you should check for the actual return value and not the boolean of the return value. The reason is that your code will break if `__len__()` of your object returns anything else than a numerical type. Also your code is implicit. You *want* to check if `len()` returns a numerical value greater than zero but you *are* checking if the return value equals `True`. So you should do something like `if len(obj) &gt; 0`. This will also raise an error if `len(obj)` doesn't return a numerical.
Fixed it. 
I've also made it to reflect the game if it's in progress. If in progress of playing, it shows how many minutes into the game it is and who is currently winning
Keep up a good work. Nice to see timelapse video. When I started, I searched developers workflow and found some timelapse. They were so interesting, and showed completed mini project in a few minutes. Like timelapse of drawing, you can watch them draw for 2 hours, or you can see finished product and really enjoy it.
You can start trying by enrolling into MIT/Python course which available through edx.org fo free. Basically after attending this course you get general idea about programming and later you should start learning data structures and algorithms.To boost up your chances of solving problems effectively. For problems Use sites like: Project euler Hackerrank Leetcode These are the only initial steps required for learning programming language.
MacOs w Visual Studio Code is the best one for me. I personally think Win10 with linux subsystem provides a better experience, but Windows let me down so many times as far as reliability, and annoyances like sudden updates, security vulnerabilities, that the thought of dealing with it makes me turn away in disgust. I've used various flavors of Linux, they are all $hit for a desktop environment, it feels like its GUI is written by some mediocre grad students. It's either ugly or buggy, or sluggish, or a combination of those. MacOS and Windows feels like it was written by professional programmers and designers, its clean, intuitive and stable, and cause of the larger user base you can solve most of the kinks with extra software. e.g. I use software, that keeps history of my clipboard, so I can past many items.
https://www.reddit.com/r/Python/comments/8shmub/beautifier_simple_library_to_clean_up_and/ If you don't mind, would you post this again in a couple of days?
You said you want web ui - you'll need to learn basic HTML and some web framework (Flask, Django,...). Then for docx generation, you can use library like python-docx. Here's a sample tutorial: https://automatetheboringstuff.com/chapter13/ I'd personally recommend you to start with docx generation with some hard-coded values, but keeping in mind you'll get rid of them. If you don't want to do it yourself (want to go the less interesting way :p), you could use something like https://www.webmerge.me/formidable-document-generator 
&gt; edx.org I'm glad i stumbled upon your reply. I just signed up for edx.org thanks to your recommendation and am eager to start learning Python. I'm just hoping I don't start mixing my syntax between PowerShell and Python. Oy Vey! 
I would definitely go with selenium. 
Thank you, I really didn't know about this feature of Github !
Okay, I'm going to test what i can do with this library then.
&gt; readable, intuitive, and idiomatic lol no
Based on the examples in the README this looks like it just oaraes URLs into parts, which is available in the stdlib. So what else does it do? Can you provide some better examples?
Probably cause they want you to use `if value:`.
this is its wording: Yes: if greeting: No: if greeting == True: Worse: if greeting is True: so I'm confused as to why they'd distinguish between the two "bad" forms, and moreover why they'd "promote" `==` over `is`
Cool! for those learning Rust I have this repo [http://github.com/rochacbruno/py2rs](http://github.com/rochacbruno/py2rs) 
The best as always 
Use command=scan, never command=scan(). Use lambda for passing arguments, or possibly .register() which might be easier to read depending on the number of arguments.
Sounds suspiciously like [Metabase](https://metabase.com/), except Metabase is written in Clojure. I love it anyway.
Bruh "AI", all it needs to the is have follow the same y coordinate as the ball, don't bring others down and go on an ego trip.
Thank for the guide. Do you know of a more complex example code than passing simple numbers and strings between the two worlds? For example creating a Python dict on the Rust side, filling it with values and passing it over to the Python side - and PyO3 takes care that memory ownership is also handed over correctly?
Months pass and I can not realize that PEP 572 is still a thing. Some weeks before this PEP, [Guido wrote](https://groups.google.com/forum/#!msg/python-ideas/-_akkOLY_BY/cyJtdWhoBwAJ) about another non-related feature: &gt; Given that two respected members of the community so strongly disagree [...] maybe in the end it's better not to add a start argument Why did he not come to the same conclusion given that **the entire community** has been fighting for months like never before? Do you remember your first steps in programming? Do you sometimes meet beginners who face an error, because they use `=` instead of `==` and vice versa? I see such mistakes often, and it is obvious that adding a third `:=` operator will not make things any better. This operator looks like `=`, it acts partially like it, but it differs in subtle ways: named variable assignments only, no in-place operator like `+=`, weird operator precedence (think to `a, b := 1, 2`). What happened to *"There should be one-- and preferably only one --obvious way to do it"* principle? What will prevent people, and particularly beginner, to loosely use `:=` in place of `=` for variable assigment, as soon as they realize that it behaves the same and don't want the overhead of thinking "when should I use one and when should I use the other"? The operator solves the problem very well, but it *leaks* **everywhere** else. I cannot imagine the mess it will be to see := inside any possible expression. Sure it works well in comprehension, but it will works also in function call when it has absolutly no use. The list comprehension example in PEP 572 is misleading. That's unfair to introduce PEP with such oriented example. The title states ["Simplifying list comprehension"](https://www.python.org/dev/peps/pep-0572/#simplifying-list-comprehensions). First, one should stop using one-letter variable names. Sure it looks nice, but this is **never** what you encounter in real code. Moreover, this is not "simplifying list comprehension", this is "simplifying an intentionally convoluted list comprehension made up to the sole purpose of the PEP". Indeed, [the former example](https://groups.google.com/forum/#!topic/python-ideas/0zUL-qeTOb8) which motivated the PEP was to avoid calling a function twice in `stuff = [[f(x), f(x)] for x in range(5)]`. But then people pointed out that there were already straightforward and readable ways to solve this, like `values = (f(x) for x in range(5)); stuff = [[v, v] for v in values]`. So the PEP had been step by step modified to still be somehow *valuable* in list comprehension. This is intellectual dishonesty. Python is easy to learn and to reason about because it has just what it takes in terms of syntax, why pushing so hard to add such syntaxic sugar that makes the language more complicated than it makes it easier to use?
The only thing I've used Python for recently was to take a PLC database and translate it into a bunch of HTML files. The idea there was to work on more English aware data/descriptions instead of German. It is better in my opinion to work on something other than the working database to get those translations right or sensible. One advantage that I did realize a bit afterwards is that you can store additional data in these files such as data on field devices, calibration info and set points. As such I kinda wish that I had used python to port the comma separated database to some sort of relational database. Also note that I did this not as a programming project out of an IT or engineering department but rather as a automation technician. It is actually a good example of the power of Python and the associated libraries. 
Your nearest hacker/maker space or code club would be a good start...
&gt; However I don't understand why as in a control flow block needs to impact as in other regions of code. The issue is that for expression assignments to be useful, they pretty much need to be allowed anywhere any normal expression is allowed. For instance, you may want to bind your name to a part of a larger expression (e.g. `while (foo() as bar) &gt; 10`, which binds the return value of `foo()`, not the Boolean result tested by the `while`). That wouldn't be possible if you take the most convenient way of limiting `as` to only being at the end of `if` and `while` conditions, so you'r back to writing "loop and a half" code. Unfortunately allowing `as` to appear "anywhere an expression is allowed" includes `with` statements (and even `except` statements, which also have `as` clauses, with yet another different meaning). If you want to forbid the `foo as bar` assignment syntax in those places (because of the ambiguity), you need to create a whole new expression type for those places. The only "almost but not not quite an expression" thing I'm aware in Python is the limited kind of expression that can be in a decorator using `@foo` syntax. That expression-like thing allows a chain of attribute lookups and one function call at the end (with any kind of arguments), but that's it, you can't have top-level operators, and you can't chain additional function calls (no `@foo().bar()`). I think the reason decorators got their own slightly weird syntax was because they needed to be parsed differently than other expressions anyway, and it was simpler to reimplement a more limited kind of expression than to allow everything. But in this situation, I don't think it would be easier to make `with` and `except` take non-assigning expressions. If you just require parentheses for the assignment version of `as`, you face the problem that `with (foo as bar)` means something different than `with foo as bar`, which is going to make everyone miserable. Doubling up on the `as`, as in `except (get_exception_types_to_catch() as ex_types) as ex:` is also horrifically ugly. Using new syntax avoids these problems, and while `:=` is not very elegant, it's better than the compromises that `as` would require.
What is `err`? If it‚Äôs a list, the name should be plural. 
My most favorite are Metabase, Superset and Redash, but for what you need Google Data Studio might be enough.
It's not listed as one of the rejected "alternative spellings" in the PEP, but there was so much discussion in the various mailing list threads that I wouldn't be surprised if it came up. It's not horrible, as adding the `def` to `x = ...` makes it so that `if x = y` is still an error (you're unlikely to type in a `def` by mistake), but I wonder if it would get ugly in a longer expression. Hmm, `[y for x in seq if (def y = some_expensive_operation(x)).predicate()]` isn't too bad. While I initially didn't like a spelling with `def`, it might work.
Sorry..... calling bullshit. 
`if EXPR [as VAL] [CMP_OP VAL]` covers everything that I want it to cover. There are only finitely many comparison operators to deal with so this is certainly parseable. I don't want to be able to bind expressions to values all over the place, just in `if/while`.
I think you're asking about "truthiness" - values that are empty or zero, like `""` (empty string), `[]` (empty list), 0 integer or 0.0 float, etc. are considered to be "falsey", but everything else is considered "truthy". You can thus write: if some_list: # can assume here that some_list has at least one element if some_int: # some_int is not zero else: # some_int IS zero if not a_dict: # looks like a_dict is empty
That wouldn't allow `if validate(expensive_calculation() as foo)`, or `if (expensive_calculation() as foo).predicate()`, or any of the uses proposed for list comprehensions (e.g. `[(expensive_calculation(x) as foo), 2/foo) for x in seq]`, and probably also `[foo for x in seq if expensive_calculation(x) as foo]` unless you also change the syntax of `if`s in comprehensions as well as normal sequences). Basically, making the assignment syntax a special case makes it either unavailable in a lot of places it might be used, or a massively complicated nest of special cases for the parser. It's not *impossible* to make it work, but it's probably impractical. A half-functional or overly complex assignment expression will probably be rejected by Guido. Adding a new operator instead of reusing `as` avoids the parsing issues, so assignment expressions can be fully functional without a lot of special casing.
I don't want it creating temporaries in generators/comprehensions. I don't want it inside function arguments. I don't want to have to try and figure out what the fuck: `[foo(x:=y, y:=bar(x:=y)) for y in range(10)]` means... I just want to avoid loop and a half.
The downvotes are pretty clear that I'm in the minority and that other people find this interesting. But... it's a video of someone typing. There is no explanation of what you're doing, just music, and it's impossible to follow what you're doing because it's so fast. I don't think it's instructive or useful in any way. I don't want to be destructive, but if you spent two days learning Pyglet and maybe another full day making this video, wouldn't your time have been better spent learning more Pyglet or writing a blog post about what you did with it? Again, I'm evidently in the minority, and you can do whatever you want with your time, but still. 
&gt; but you can't hide your years of experience coding But I don't hide/I don't have a reason to hide anything. You can see my comment which I made earlier where I say how much experience I have: &gt; I actually started Python 3 weeks ago, prior to that I had over 1 year of experience with Javascript. I agree that title is kinda poorly worded but it's pretty easy to realize that you can't learn how to make a game in 2 days with no prior experience.
&gt; I actually started Python 3, weeks ago or &gt; I actually started Python, 3 weeks ago
Thanks! For your question - I know of two different ways of returning a dictionary from rust to python. The first one is to rely on pyo3 type conversions: it will automatically convert things like HashMap to a python dict as needed. As an example: #[pyfn(m, "squares")] /// Creates a dictionary of {number: squarednumber} /// Usage: /// &gt;&gt;&gt; squares(4) /// {0: 0, 1: 1, 2: 4, 3: 9} fn squares(count: i32) -&gt; PyResult&lt;HashMap&lt;i32, i32&gt;&gt; { let mut ret = HashMap::new(); for i in 0..count { ret.insert(i, i * i); } Ok(ret) } However, this requires an extra conversion from a rust HashMap to a python dict - so it isn't really what you're asking for. Luckily PyO3 has utility classes for working with Python objects directly (things like PyDict, PyList, PyTuple etc). So we can create a python dictionary directly in rust and return it to python: #[pyfn(m, "squares2")] fn squares2(count: i32, py: Python) -&gt; PyResult&lt;PyObject&gt; { let ret = PyDict::new(py); for i in 0..count { ret.set_item(i, i * i); } Ok(ret.into()) } 
Thanks for the link! Bookmarking to read this weekend, I'm still relatively new to Rust so this will come in handy
Second variant. Glad you like it.
have you used this course before? How did you like it?
I did like it. A lot, is it supposed to be like Agar.io right? Did you put it on github?
It‚Äôs not necessarily ‚Äòtruthy‚Äô/ ‚Äòfalsey‚Äô I‚Äôm wondering about - rather whether it‚Äôs smart practice or not to do these types of checks. 
I actually made a point of writing pong during every semester. First was before functions (...yup - they had a basic drawer library for us to use), then event driven, then object oriented, then finally with GDI drawer. Was fun to watch the code shrink every time.
Some people just like watching a timelapse. I, for example, really enjoy a timelapse even if there is no explanation, for some reason it can be kinda satisfying seeing how something is coded. &gt; and it's impossible to follow what you're doing because it's so fast. You can find the source code in the description. Also I wrote something useful about pyglet. When I started out I haven't found a straightforward example of how to use the library, so I tried my best to make one, you can find it here: https://github.com/ionelaipatioaei/The-Nature-of-Code---Python/blob/master/5.Libraries/basic_pyglet.py I think you got downvoted because you just said &gt;why without giving any constructive criticism.
and how you do that
There are/were free courses online like www.coursera.com www.codeacademy.com. Do you have any programming experience also try dynamoo without python first. Imo python should be last resort there. Last year RevitGG.nl organized a couple of DynamoDays. Keep an eye on that site, they might organize more.
Came here to point out Automate the Boring Stuff. Excellent book, and worth the read!
From my first reply: ‚Äúyou need to run it from a terminal either by prefacing the command with 'python {application.py}' or by adding #!/usr/bin/env python as the first line in your program, then make it executable using chmod a+x {application.py}, then execute it using './application.py'‚Äù
The code is on github: https://github.com/ionelaipatioaei/Random-Python/tree/master/Simple%20pyglet%20game Also I don't really recommend following my example because there are things which I've could done better. For example the way I render things is pretty inefficient ...and there are a lot of bugs. Even more the project wasn't actually finished as I realized it wouldn't look the way I wanted without a major refactor. I guess is similar to agar.io, but instead of eating the other player if it is smaller than you, you press a key to attack him if it is close to you. I might try to finish it if you want. 
Having read most (maybe not all, but close) of the threads on Python-dev about the PEP, I think there were three main categories of negative reactions. 1. Bikeshedding. We can see a lot of that here too, with the longing for a spelling using `as` instead of `:=`. Basically I don't think these are going to hold much sway with Guido, and its his opinion that matters most (Python is not a democracy). As long as the various proposed spellings are all considered for parsing issues (where `as` loses out) and the one that is picked by the PEP authors doesn't make his eyes bleed, I suspect Guido's fine with whatever. Or he'll just state his own preference, if he actually has a strong one (though I suspect he'd have already done that if he was going to). 2. Rejection of some of the extraneous list comprehension stuff that was in the PEP. The early versions of PEP 572 spent a lot of words discussing issues only peripherally related to the main proposal adding the assignment expressions. It proposed a somewhat complicated way of fixing the weird behavior of comprehensions at class scope (where they sometimes can't see other class variables, due to oddities of the scoping rules). While it would be nice to fix those quirks, these complaints were pretty well justified. Fortunately (for the PEP) I think that all of that extra stuff has been separated out now, perhaps for consideration in another PEP. So the objections mostly don't apply any more. There *might* be some possibility for real criticism of the assignment operator's implementation if it breaks in comprehensions (in ways that the original proposal tried to fix), but a solution to that would be to get the second PEP ready to be accepted along side this one (while keeping the discussions mostly separate). Or you know, just accepting that some the weird corner cases in class scope (that don't come up very often) might remain broken with the new syntax, just as they have been for other kinds of code for a while. 3. Rejection of the whole idea expression assignments. I think these are the only "real" arguments against the PEP, and unfortunately, the debate over them tended to get drowned out by the high volume of other discussion (and debate over what "Python style" should be tends to turn into bikeshedding and other kinds of subjectivity pretty fast). The biggest argument (I think) is that allowing expression assignments breaks one of Python's "fundamentals", that expressions and statements should be distinct. And this might be persuasive to Guido! He hasn't accepted the PEP yet after all. But if he does, I think we'll all survive. Guido has done pretty well picking features to allow into Python (in my opinion, anyway, for what little that's worth). The language is hugely successful, and even the obscure new features I've never used (like a lot of the async stuff) are easy enough to avoid if I don't need them. While it will be possible for bad programmers to use assignment expressions to write horrible code (and for good programmers to use it for deliberately "horrible" code golf), it will also make some common, overly verbose and ugly code idioms like "loop and a half" unnecessary.
It's interesting to me to see in a condensed manner someone elses coding workflow. 
Thats actually perfect because it can help with teaching debugging which is a very important skill as well. :)
&gt; You can find the source code in the description. Yes, I know. I mean the video is unnecessary, the source code is the useful thing. You are right I guess, and I'm sorry I sounded like a jerk.
Read the sidebar.
Oh my bad. I'll post on r/learnpython. Thanks for the heads up
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [My new book, "Cracking Codes with Python" is now available and free to read online!](https://np.reddit.com/r/learnpython/comments/7sigre/my_new_book_cracking_codes_with_python_is_now/) \#2: [I'm releasing a free code for the "Automate the Boring Stuff with Python" Udemy course](https://np.reddit.com/r/learnpython/comments/7fxork/im_releasing_a_free_code_for_the_automate_the/) \#3: [I made a python cheat sheet](https://np.reddit.com/r/learnpython/comments/82t191/i_made_a_python_cheat_sheet/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
That's pretty cool, hope it will help you somehow :)
One reason is that the majority can be wrong. Python is deliberately not a democracy and the "D" in BDFL is not (only) a joke. A lot of the debate on the mailing list was about trivial stuff like the best spelling of the operator (just like you see here on Reddit). Guido would be perfectly justified in ignoring most of it. Bikeshedding can get very noisy. There *are* real concerns about whether this proposal is a good thing to add to Python (which is why it hasn't been accepted yet), but it was hard for the devs to discuss it amid the noise about other stuff (especially when the threads got long enough that people started repeating the same arguments that had been settled earlier, since they'd not bothered to read the whole thing first). It's also quite possible that this PEP "graduated" from the Python-ideas mailing list to Python-dev a bit too early, before some warts like the focus on list comprehension fixes for class scopes could be cleared up. This is the sort of thing that's being discussed now, since maybe the PEP process can be improved a bit, in order to increase the signal to noise ratio of the discussions.
That would be fair, but the exchanges I read myself were Guido dismissing legitimate concerns about cases where the expression resulted in deeply unintuitive results. And not just contrived manufactured ones. Yeah, it‚Äôs not a democracy, but it is developed for its users. If your users are (loudly) telling you something, you shouldn‚Äôt brush it off if a project is to continue to be successful. 
Where there any dependencies involved?
This is nonsense. The proposed `:=` operator is indeed an operator, perhaps even more than `=` is. It has an order of operations, and an associativity, just like other operators (especially consider `and` and `or`, which are also operators that cannot be easily customized with `__dunder__` methods). The statement `a = 5` doesn't return `None` or anything else, since it's a statement. Statements never return a value. The only possible source of confusion on this point is that an expression statements in an interactive interpreter gets the `repr` of its value printed out (if it's not `None`). But that doesn't happen in non-interactive interpreters, since expression statements don't really "return" anything either. An assignment statement doesn't return anything, nor does an `if` statement, nor does a `class` or `def` or a `while`. Now, if anything, that *could* be an argument against the PEP, since previously assignment was almost exclusively done in statements, not in expressions (though there are a *lot* of statements that can do assignment, not just ones with `=`, consider also `for`, `def`, `import`, etc., which all bind names). There are a few exceptions, like comprehensions and `lambda`s, which can bind names in local namespaces, so perhaps there's some precedent. And in any case, changing that fundamental fact of Python is the whole point of the proposal, and it tries to show how the benefits are worth the cost of the change. It sounds like you'd prefer a much more limited kind of assignment expression that is only attached to conditional statements like `if` and `while`. Though that would help in a few situations to avoid "loop and a half" style code, it is a very limited benefit, since it can't handle other common situations like `while (value := expensive()) &gt; 10:` unless you completely rewrite how the conditional expression is parsed. Language designers quite reasonably dislike special cases, so I don't think Guido or the other Python devs would ever agree to add syntax for this one. The more general approach is easier to handle from the language perspective, since all expressions will use the same rules.
From fiber import string
Cool
Why do you need a mentor? There are plenty of books written for almost any topic (software architecture, programming paradigms, pentesting, clean code, ...). You don't need a mentor to become a good developer. In fact ,if a beginner would come to me and ask me to teach him programming, then I would ask him this: What books have you read already? What tutorials and video playlists did you go through? However, once you've got a solid understanding of programming (by reading books for instance) you should find someone more experienced than you to review the code you write (join a company).
As a pyglet contributor for several years now, id say so it's certainly not dead :) Perhaps discoverability is a problem.
 pip install -U etsy
I would highly recommend sentdex, on youtube. Python Programming for Finance: http://www.youtube.com/playlist?list=PLQVvvaa0QuDcOdF96TBtRtuQksErCEBYZ If you need to go back to basics for his tutorials, he has them too. 
thanks! have you used this specific series, and if so how was it?
I don't understand what your angled bracket syntax would do. Any function call get evaluated once (unless there's actually a loop somewhere). The PEP suggests that `y := f(x)` be forbidden at top level not because the parser would be confused by it (it would be exactly like `y = f(x)`), but because *programmers* might be confused by it (and think it meant something different than the `=` version). I'm not sure I care for that special case, but maybe it's useful for new programmers just learning Python to see that assignment with `=` is still preferred in most situations.
Can you create a new branch with the issue number since this issue doesn't exist.
I have used it. In fact I have watched almost all the tutorials he shared. I specifically wanted to learn programming for fun and finance. I had zero knowledge in programming and now, I can do more than I ever thought I could :) 
Hello, and thanks for your contribution! I'm a bot set up to make sure that the project can legally accept your contribution by verifying you have signed the PSF contributor agreement (CLA). ... Thanks again to your contribution and we look forward to looking at it! 
Patch notes available?
People say you should get a mentor? I've legitimately never heard of having a coding mentor unless you're working at a company or maybe like a code academy or something. Python is pretty straightforward. You can learn it from online tutorials and asking questions on forums/reddit. Once you get to a higher level it gets a little harder to find the resources you need. But you can always find specific help for different packages and specific questions. Just not like general stuff like, 'how do I organize this program?'.
So many pull requests in that patch.
What? 
I remember a specific blog post but I can't find it right now. But you search around enough you can find some hate for people coming from more traditional for loop languages: https://forums.anandtech.com/threads/for-loops-in-python-are-retarded.2256589/ http://stupidpythonideas.blogspot.com/2016/01/for-each-loops-should-define-new.html No shortage of people to tell you the way they already know is the right way!
Hey guys, I just wanted to share my first Python project with everyone! I've created a Twitter Bot that gets a random page from The Library of Babel and searches for the top 10,000 most common english words within it. It's nothing too complicated but I thought it would be a fun and interesting project. I would love any suggestions or ideas to improve the project if you have them - I was thinking about setting up a NoSQL database to collect and analyse my findings. Let me know what you think! You can find the GitHub repo here: https://github.com/LiamEarle/BabelDictionary
lol. There are two things going on here and neither of them have to do with strings or the len function. The reason you got 17 is because you used a double precision floating point number which uses 52 bits for the mantissa which corresponds to 16 digits. Add in the decimal period you get length 17 when converted to a string. First python uses floating point numbers to represent non-integers. Floating point numbers do not have infinite precision, doing so would be impossible because it would take infinite memory. So by definition any representation of an irrational number must be an approximation. Second, the sqrt function is also an approximation. Probably newtons method but I don't really know. So that means that for functions like the square root and sin we can only approximate it, there is no way to calculate the exact number even when it is rational. But we can get arbitrarily close with the numerical approximation. I would recommend learning what a floating point number is and the limitations involved. A floating point number is just scientific notation in base 2. Floating point arithmetic is pretty interesting and it leads to a whole slew of tradeoffs.
Would it significantly decrease the processing time if you just did a `import timber` instead?
I'm interested in pyglet. I've been using another framework called LOVE that uses LUA for programming games. Does pyglet fall into the same category as LOVE? I'm still new but I have made a few simple games using LOVE and would like to use python to make games as well.
Just to add onto the other response; the error for the first attempt is just because len() doesn't work on numbers. Length of a number only makes sense when the number is a string; a number doesn't inherently have a length. 
`math` primarily deals in [floating-point arithmetic ](https://en.wikipedia.org/wiki/Floating-point_arithmetic) because of it says right in the first sentance of the documentation: &gt; &gt; This module is always available. It provides access to the mathematical functions defined by the C standard. Floating point numbers are a specific sub-set of rational numbers, design to be extremely fast to calculate on computers and cover most useful cases for required calculations. Irrational numbers aren't as easy to represent on computers because simple operations like addition or multiplication become quite tricky to resolve thier simplist form. One thing you can do is use the [decimal module](https://docs.python.org/3/library/decimal.html) which allows arbitary precision but pays for it in performance. Another thing you could do is use Symbol mathematis to have more correct abstract representations of numbers. There are actually great Python libraries for this like [SymPy](http://www.sympy.org/en/index.html) Finally though it's worth noting that while `len(str(x))` is a useful shortcut to calculate the number of digits in a integer or digits + 1 in a floating point in Python 3, it's not really what's going on. In fact `str(x)` is basically asking `x` for it's string representation, which depending on what the object `x` is could be anything. For example if you use the `Decimal` class then the string representation of 0 is "Decimal(0)" which notably means `len(str(Decimal(0)))` != 1.
wut? -bot
Wat?
I'm reading a book on python now. I was talking to somebody and they told me mentor are useful in case you don't understand something you are reading and they can help. But what you said makes perfect sense 
Ha, I guess that does make sense that len() wasn't counting the digits now that I think about how it usually works. I never really thought about floats much or how by their nature things like square roots or irrational numbers are calculated/stored. 
In spite of the other answers, I'll give it my two cents: Firstly, you are confusing irrational and real numbers. What you mean are real numbers. In Python something has a length of it consists of countable elements. Lists, tuples, dictionaries and strings are some examples. A number, integer or float does not consist of elements. If you convert a number to a string, the string will have a certain length. Print the resulting string to see how long it is.... The 17 you get is just the length of the string that python generates from a floating point number.
The two volumes of Python for Quants looked quite good: http://www.quantatrisk.com/. Disclaimer: The author sent me ebook copies a few years back, but I haven't fully read it, the content looked solid though.
The third question should be what is your favorite color
Lol I added that in shortly after posting this :)
Wow, I did not know that format was supported in Pillow yet. Cool.
_Your patch submission has been accepted!_
The blue part looks like a dude with an open mouth and a beard [like this](https://imgur.com/a/VnJF9xV)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/a0SH6WQ.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20e158yur) 
The universal first response to your first Python patch. e.g. https://github.com/python/cpython/pull/7862 
Using the skills you taught me I will make a bot to report every video on the site. Everyone do this with me. Just kidding... But this is actually ridiculous. Honestly sounds like same stuff mega upload was saying about illegal stuff on their site... Didn't turn out well for mega...
All silliness aside, I want one. 
Is this python 2 or 3?
I think this is the first strategy you should look to use before scraping a site with BeautifulSoup or Selenium. https://medium.com/@HallyouGot/a-web-scraping-technique-i-should-have-learned-a-long-time-ago-python-b39262a8247d 
Is this patch good for both 2.7 and 3.6? Is it cross compatible ?
Is it multithreaded?
&gt; What happened to "There should be one-- and preferably only one --obvious way to do it" principle? What will prevent people, and particularly beginner, to loosely use _:=_ in place of _=_ for variable assigment, as soon as they realize that it behaves the same and don't want the overhead of thinking "when should I use one and when should I use the other"? You can‚Äôt use it as a statement. 
"JavaScript nonsense" üòí
Yes, it's similar in scope to LOVE2D. I would recommend looking over the sample game in the documentation for a better idea of how things work: https://pyglet.readthedocs.io/en/pyglet-1.3-maintenance/programming_guide/examplegame.html For distributing games, pyglet works well with PyInstaller.
Sentdex just started a new tutorial series about AI by creating a [StarCraft II bot](https://youtu.be/v3LJ6VvpfgI) and I stumbled across it today. I never knew that Blizzard actually [released an open-source API](https://github.com/Blizzard/s2client-proto) for the game to make it possible to write bots, replay analyzers, etc. without violating their EULA. So now I'm learning about AI while also playing one of my favorite games.
Honestly, just Wikipedia to start. Also, its probably a good idea to post over on r/learnpython for beginner like this. 
Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year! \#1: [My new book, "Cracking Codes with Python" is now available and free to read online!](https://np.reddit.com/r/learnpython/comments/7sigre/my_new_book_cracking_codes_with_python_is_now/) \#2: [I'm releasing a free code for the "Automate the Boring Stuff with Python" Udemy course](https://np.reddit.com/r/learnpython/comments/7fxork/im_releasing_a_free_code_for_the_automate_the/) \#3: [I made a python cheat sheet](https://np.reddit.com/r/learnpython/comments/82t191/i_made_a_python_cheat_sheet/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
black panther was ok
That sounds dope. If you don't mind me asking, what kinds of things did you end up doing with the knowledge you gained?
I like the python logo so much more, now
Is it for 2 or 3?
black panther was ok
Not sure why hickle fails. In the past I've used the [pickle](https://docs.python.org/3/library/pickle.html) library to do exactly what you describe. Try that too. If that also fails, then it's not specific to hickle and likely there is something up with your NumPy vector. The failure you report for np.save suggests there is some boolean operation taking place on your vector, and [Numpy is a bit tricky on that matter](https://www.youtube.com/watch?v=q1lyEh4ivf8), so make sure your code doesn't imply any logical selections. That's the best I can do without any actual code to look at.
Thank you for the info!
What happens if it the website is using a forced captcha like registering for reddit?
Looking for something cybersecurity related to make a program out of.
any one have php mysql search engine with crawler full script ?
Flipping Cute #PythonPorn
I recently wrote a toolbox that improves the debugging efficiency of Python code.It's named `boxx`. Now it's almost finished. Welcome everyone to give more comments. I also hope that everyone will like this tool.
What hardware Do you have for macos?
That's an odd error message, it should only come up in situations where you try to do something like array[array[:, 0] &lt; 10 and array[:, 1] &lt; 10] = ... Or something like that, with `np.where` and other functions like it. Are you doing anything like that when you try to load?
Do you want to learn how floating point numbers work? Or let me put it this way, if you open a Python interpreter and type in`0.1 + 0.2` you won't get `0.3` as the result. If you're curios why, [this explains it](https://floating-point-gui.de/).
no, if you want to use 2.7 you need: from \_\_future\_\_ import sewing\_skills
Same problem here. Would be really helpful if someone answers.
Thanks /u/laith43d! üòÑ
Nice patch work.
You can do it bro! I'm trying to scrape jobs on job sites. So far I got to is putting the data in pandas dataframe. 
Yea I was doing that last week as well
Yes, Metabase, that was the one I was looking for. Thanks!
Great input! Thanks a lot!
Because it has a subtly different meaning that can hurt you in odd corner cases. `1`, `1.0` and `Decimal('1.0')` all compare equal to True but none of them `is True` - but `1 is True` *was* the case in python 2. 
I guess you want 1/(1+math.exp(-t)) instead of 1/1+(math.exp(-t)) 
seems like there's a special installer for VS. https://visualstudiomagazine.com/articles/2018/02/22/vs-code-anaconda.aspx?m=1 See this SO post for more deets: https://stackoverflow.com/questions/49205467/how-to-install-visual-studio-code-ide-using-anaconda
According to the first table, the subtraction is operator has higher precedence than addition? And integer division has higher than division, which has higher than multiplication? I think it should be clear which ones are equal and then are evaluated left to right. Why one shouldn't use True == True? One sentence should say why.
\&gt; I wanted the same data in a flashcard-like format There is a software called [Anki](https://apps.ankiweb.net) /r/Anki with [community made flashcards](https://ankiweb.net/shared/decks/cantonese) that could help you achieve that. 
Here's a sneak peek of /r/Anki using the [top posts](https://np.reddit.com/r/Anki/top/?sort=top&amp;t=year) of the year! \#1: [Anki Every Day for 5 Years Straight \[x-post\]](https://imgur.com/a/MpRyH) | [61 comments](https://np.reddit.com/r/Anki/comments/7qtgyi/anki_every_day_for_5_years_straight_xpost/) \#2: [See you in 20.2 years! Feels good!](https://i.redd.it/u8erzd330ug01.png) | [13 comments](https://np.reddit.com/r/Anki/comments/7y94lo/see_you_in_202_years_feels_good/) \#3: ["\[Anki\] has changed my life over the past couple of years. Here's a few things I found helpful:"](https://imgur.com/a/7gvpT) | [3 comments](https://np.reddit.com/r/Anki/comments/7x4yc5/anki_has_changed_my_life_over_the_past_couple_of/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Depends on you mean by representing a number. I would consider an algorithm that gives you arbitrarily many digits of a given number to be a valid representation. In this manner, you can represent (somewhat inefficiently, though) computable irrational numbers in finite memory without losing precision.
If you want it as a comment then # "\\100\myfolder\myfile" Will work just fine. If you need to define a path then you either need to excape them or use raw strings: path = "\\\\100\\myfolder\\myfile" or path = r"\100\myfolder\myfile" Also, for questions like this, go to https://stackoverflow.com/ It's a site specifically build around Q&amp;A, you can search through for similar questions to see if an answer already exists before you even ask, and it's better suited if you still need to pose the question. The /r/python subreddit is not really intended for questions and answers to basic python questions.
Great work! Thanks for sharing. :) 
Ohhh.... that is awesome! That is way easier than expected! I'm still struggling with Rust, but I have to figure out more about PyO3 - that's what I was searching for to speed up my Python code. Thanks again!
Underappreciated comment
Wot m8
I was having trouble yesterday with Bokeh- Scatter. Wouldn‚Äôt load DEFAULT_PALETTE. Found that Bokeh is deprecated and not maintained. The suggestion is to use the Holoviews library which has a Bokeh extension. So, maybe the author would not have ‚Äúbanged their head‚Äù writing this outdated tutorial had they done a simple Google search. 
This is a Udemy program, why not direct link? Post this shit in /r/learnpython. 
/r/learnenglish, then /r/learnpython. The English was a joke because if you brought something worthwhile to the sub I would not care how bad the language was butchered. 
Mixing your syntax? 
Has this been reviewed as there are far too many holes in the design for my liking?
I should correct my previous comment - in this case that you're suggesting, it would still be an error. What I'm suggesting is parentheses being required around each assignment. To make it clear: with (open('file') as data) as f: pass would be equivalent to: with open('file') as f: pass since the `data` variable is unused. This: with (open('file') as data): pass would be an error, since the `with` statement requires an `as` clause.
Python keeps messing with the string formatting.
[EAFP](https://docs.python.org/3/glossary.html#term-eafp) means easier to ask for forgiveness than permission.
Wouldn't apply in this case as `(a as b, c as d)` in any context would be an error. Only `(a as b)` is allowed.
Well, my main focus was cryptomarkets. I wrote a hft bot for both myself and client. Also I did some experiments with machine learning algorithms and financial data for microtrading. 
This project appears to be a good start with flask/reactjs https://github.com/gabrielfalcao/flask-react-bootstrap
In the first week and I've learned so much about flow control.
Starting the flask tutorials by Corey Schafer!
You can also try /r/vscode
As a beginner I like it, I dont code so much so sometimes I have to look up basic things. *bookmarked* Since the page is reaaaly long I would suggest you to make the "Index" part fixed so it stays on the screen, maybe you have to redesign it
I have a two year MSc in Applied data science from an European university. Since "Data Science" is a still a pretty vague term I find the program reflected that, it was quite broad. Most people like yourself that work in DS have either a CompSci or stats background. The master program was good at showing you the other side of coin. IE if you have a CompSci background it gave you a good grounding in stats and vice a versa for the stats guys. Plus some MSc have interesting courses in ethics etc that are always good. 
A friend and I discovered that there's a restaurant near our workplace that have a physical "facebook like counter" ( [this one ](https://www.smiirl.com/)). Since the pooling is around 10/11 seconds for each update as a fun project we are planing to create a like bot just for the fun. note: I know it's evil to do that, but it's so tempting hehehe
Depending on the library you use for the call itself (e.g. requests), you might simply set the timeout in the call(s)...
nope. changed to pickle and working now
Ah yes, I probably should have said that's not possible.. the library doesn't have that feature. 
Turtle script plz
Those loops are well constructed.
Thanks for the tip, I hadn‚Äôt heard of Holoviews before and will check it out.
Virtualenv can be anywhere, I personally have it under the project's root (not the package's, but project's) like so: My Project |--venv/ |--package/ | |-- __init__.py | |-- file.py |-- requirements.txt This is why `.gitignore` exists, you can just add `venv/` to it.
How about a decorator that runs the function in a background thread and kills it if the allotted time is up?
&gt;decorator Basically the same approach as the multitreading or am I wrong? 
You're not wrong, Walter, you're just an asshole.
But we want string, not food fiber, fiber optics, muscle fiber, that stringy stuff inside a pumpkin. This is why we need to be specific
PowerShell and Python have differences that are subtle in some cases.
Not the same thing. Also I think you might have multithreading and multiprocessing confused. Basically a decorator is a function wrapper. My proposed solution would invoke another thread, yes, but it would be entirely contained inside the decorator and the use of concurrency would be transparent outside of the decorator. The thread exists so you can count down the timeout in the "main" thread.
Thanks!
What is it that you want to do?
Nice! Maybe post to /r/learnpython as well?
Thought I was on r/CrossStitch for a moment
I use this in my code (from a github repo I maintain). ```python # Windows doesn't work with 'signal' package, so implement using multiprocessing from multiprocessing import Process, Queue def timeout(seconds, action=None): """Calls any function with timeout after 'seconds'. If a timeout occurs, 'action' will be returned or called if it is a function-like object. """ def handler(queue, func, args, kwargs): queue.put(func(*args, **kwargs)) def decorator(func): def wraps(*args, **kwargs): q = Queue() p = Process(target=handler, args=(q, func, args, kwargs)) p.start() p.join(timeout=seconds) if p.is_alive(): p.terminate() p.join() if hasattr(action, '__call__'): return action() else: return action else: return q.get() return wraps return decorator ```
I have used "stopit" as a context manager before and found it easy to use and functional. https://pypi.org/project/stopit/
This is interesting, but I can't think of any practical usage for Python SQL parser.
You might want to try the bcolz library.
https://github.com/seperman/deepdiff
I've been working on this for a bit now and decided to release it to a wider audience today. It's early days but really enjoyable to work with (I think so at least :P). Would love to get your feedback!
I'm well aware of Anki. I wanted the Glossika sentences specifically, which are (as far as I know) unavailable outside of the original format.
&gt;Basically a decorator is a function wrapper. My proposed solution would invoke another thread, yes, but it would be entirely contained inside the decorator and the use of concurrency would be transparent outside of the decorator. The thread exists so you can count down the timeout in the "main" thread. Ah interesting, and yes you you're right I always seem to mix up the two..
moreover, does an similiar page for R exist ?
Also if True == True should not be be used at all it would be nice if the examples for if/else statements did not use them.
What's the issue? Can't post a picture? Can't select a picture randomly? Can't find a picture on the internet?...? Show us code, tell what isn't working and what exactly you want. 
But you might wanna to use one (or more) later on, and then would have to import them separately again, no? For example, I might wanna frame it with wheat-woven strings and then have fiber optic lasers run through the inner patterns. I would have do two separate imports. Insane!
Yes, MacBook Pro at home.
What if the user tries adding parens around only just the last one? So `a as b, (c &lt;newline&gt; as d)` 
Cool! You'd use my\_function = timeout(my\_function) right? Sorry i'm not near a terminal at the moment. 
His example is a decorator. @decorator my_function(pass_this): ... ... return that_one_thing
Nah dood: from fiber import string,wheat,optic from light import laser
Another user has shared the code for pretty much exactly what I had in mind in my original post! Cheers to her/him. Although I would have used a thread instead of another process because I follow the belief that multiprocessing should be avoided in Python unless you are certain you want it. 
Please consider asking in /r/learnpython.
Well, damn. I‚Äôve been doing the whole laser thing wrong all this time. TIL. Thanks dood!
Have you considered using a heavily optimized library like numpy or opencv? Regarding opencv, if you can shoehorn your calculations into a form opencv has out-of-the-box support for, I've found that it's _radically_ faster than any other readily available tool in Python for calculations. 
No, because we don't know what most of those variables are, or what your actual problem is. Go to /r/learnpython and say which bits are confusing you. I recommend, however, looking at - https://en.wikipedia.org/wiki/Dot_product - https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.dot.html - https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html 
There‚Äôs no need to check if __len__() returns an integer since len() will check that anyway and raise an error if the returned value is not an integer.
Numpy's saving and loading, or using something like HDF5 with `h5py`, are much better than pickling. They'll be quicker, more secure, and you can load a subset of the data from them rather than the whole thing.
Not related to Python, but: Your time is yours and yours alone. No matter how much others try to guilt you into making the same life decisions as they have. Do what you want and don't let the expectations of others enter your mind even once. Be free! Like free software, not free beer. 
That's not guaranteed. `len()` checks if an integer is returned, but `__len__()` does not. If `__len__()` returns `True` or `False`, `len()` will interpret it as a boolean and return `1` or `0`. 
Here's one [approach](http://pbpython.com/python-word-template.html) using Word templates. This does not show how to build a HTML front end for it but this might be useful to help you get started.
Can you tell us a bit about how it may differ from \[hug\]([http://www.hug.rest/](http://www.hug.rest/))?
Yes, or with the decorator syntax, ```python @timeout(20) def my_function(*args, **kwargs): ... ```
I think it's all about preference. I personally have some my virtual environments in one folder on my machine
&gt; That username &gt; That comment &gt; This subreddit Why? This looks like the reddit version of "Cards against humanity"
Are you a roguelike? I've used \`tcod\` for a rogue. \`tcod\` will do FOV calculations for you. If I started again with a project like this, I would target the browser.
Yup! Here are some highlights of what I believe are the important differences: * hug's directives are similar to molten's dependency injection, but (from what I understand) less powerful because they aren't recursive: in molten, components that depend on other components are commonplace, * hug relies on marshmallow for schema validation, whereas molten brings its own type-annotation-aware schema functionality to the table, * hug lets you expose the same API via multiple interfaces (HTTP, CLI), whereas molten is (and always will be) focused solely on HTTP, * in molten there is a clear separation between what is a route parameter (annotated with a plain type annotation), a header (annotated with `Header`) or a query parameter (annotated with `QueryParam`) * the two have a different underlying philosophy: molten is all about being decoupled, simple (in the literal sense) and avoiding global state whereas hug seems to be more about being succinct and a little magical. I admit I've only played with hug a little bit, but I hope that's a fair comparison!
You should you a loop instead of so many if statements. I can‚Äôt see your full code, but are you using .run(token)?
What part are you having trouble with?
hey thanks, i'll look into the VS &amp; Anaconda combined distribution. Re: Adding Anaconda to my [environment](https://imgur.com/jKHhryw) I've already tried that :( idk what I'm doing wrong
It‚Äôs Python 3 Secret Sauce where you want to dive into? class Fib: '''iterator that yields numbers in the Fibonacci sequence''' def __init__(self, max): self.max = max def __iter__(self): self.a = 0 self.b = 1 return self def __next__(self): fib = self.a if fib &gt; self.max: raise StopIteration self.a, self.b = self.b, self.a + self.b return fib 
Open cv and numpy radically increase the size of Python install/ packaged exe (assuming I can even get pyinstaller to work at some point in the future, it doesn't like libtcod) 
Check those out - Scipy, Numpy, and Matplotib.
psutil.cpu_percent is for the whole system, not an individual process. For just the current script, use current_process = psutil.Process(); print(current_process.cpu_percent()). ‚Äì
Yes it's a roguelike and unfortunately libtcod's fov wasn't cutting it so I implemented shadowcasting myself from Roguebasin (and as I'm thinking of using another custom fov algorithm, going back to libtcod is not really an option) I'd target browser if I could but I need to stick to Python for the time being (I work day to day in Py and I need the added practice) 
Check Python‚Äôs Core Mentorship Program.
Which model and specs?
Did you like the program? I'm not really concern with jobs, but I'm sure it'll help. Did you feel the program enrich your mind and skillset?
ML isn't a priority for me, but it's on my things-to-learn. I enjoy stats because I love how my brain switches to math mode and solve problem in new and creative ways.
What did you like and dislike about the curriculum? I have BS in compsci.
You have set yourself some difficult constraints. I hope you find a solution.
Been out of Python for awhile, so getting back in. Doing some MC and Black Scholes option pricing. Creating payoff and break even charts with matplotlib. Thinking about working on some portfolio or econ modeling next. 
I'm a bit new to python and web scraping, is this meant to replace scrapy and other scrapers?
You can put your virtualenvs anywhere. I recommend keeping all your virtualenvs in a folder somewhere. There really isn't a logical one-to-one mapping between virtualenvs and projects - in principle you can have a couple different virtualenvs for a project, or could share a virtualenv across a couple projects. In practice, I have definitely had times where I have some sort of failure due to package version, and I want to fiddle with two different virtualenvs for the same code base. Having the virtualenvs decoupled from the project makes that easy.
I didn't get as much out of the program as others because I had read most of the textbooks beforehand and taught myself. For someone who is new to the space, the program will cover a lot - data warehousing, data cleansing, statistical modeling, etc.
Alternatively `inspect.cleandoc()` with which you don't need that initial backslash
I prefer to keep virtual environment inside the project. This way if I copy the project or symlink it elsewhere, I don't have to recreate the environment.
Try [discord.py](https://github.com/Rapptz/discord.py)
Alternatively, ( "wrap adjacent\n" "strings in parentheses" (
With megaupload, the original content creators at least had the ability to sift through the content by simply visiting it, however. In this case, it's even worse. I have to buy the courses individually to even find my infringing content in many cases. 
[THE ENVIRONMENT IS CONDA BUT IM STILL ERRORING?????](https://imgur.com/LXm2Fex)
That's pretty bad.
There's no clean way to kill a thread in Python (there's no equivalent of the `p.terminate` from /u/i_can_haz_data's post). With the threading approach you run the risk of zombie threads sticking around long after the timeout and doing stuff which could cause unexpected issues, and in any case is potentially a serious memory leak.
[odo](http://odo.pydata.org/en/latest/) is great for this type of thing. It‚Äôs incredibly fast as it uses SQL engine import utilities, and it‚Äôs very easy to use. It can also read and write to various sources and targets.
2 opening brackets? Interesting...
I have all of mine in a single directory (/usr/local/venv) and I add a symlink to the corresponding virtualenv in the project root directory. 
Oopsie
The constructs I used in my example are all valid and idiomatic python.
Because typo. Check out r/learnpython 
It should not be that difficult, after all both Cython and ctypes are parts of Python. For all the contrived benchmarks, I am however having problems finding real world applications using them. 
Me too
I personally like my virtualenv inside my project folder. Makes it easy to jump into site-packages and change something if I need to and I know I'm in the right place. For example here is a trimmed version of Show-Tree in one of my project folders. D:\pydev\pee_wee ‚îú‚îÄ‚îÄ.git ‚îÇ ‚îú‚îÄ‚îÄhooks ‚îÇ ‚îú‚îÄ‚îÄinfo ‚îÇ ‚îú‚îÄ‚îÄ... ‚îÇ ‚îî‚îÄ‚îÄ... ‚îú‚îÄ‚îÄInclude ‚îú‚îÄ‚îÄLib ‚îÇ ‚îú‚îÄ‚îÄ... ‚îÇ ‚îî‚îÄ‚îÄ... ‚îú‚îÄ‚îÄScripts ‚îÇ ‚îú‚îÄ‚îÄactivate ‚îÇ ‚îú‚îÄ‚îÄactivate.bat ‚îÇ ‚îú‚îÄ‚îÄ... ‚îÇ ‚îî‚îÄ‚îÄ... ‚îú‚îÄ‚îÄ.flake8 ‚îú‚îÄ‚îÄ.gitignore ‚îú‚îÄ‚îÄmain.py ‚îú‚îÄ‚îÄmodels.py ‚îú‚îÄ‚îÄpip-selfcheck.json ‚îú‚îÄ‚îÄpyvenv.cfg ‚îú‚îÄ‚îÄrequirements.txt ‚îú‚îÄ‚îÄ... ‚îî‚îÄ‚îÄ... Everything is based in the root folder of the project. Having .git there is no problem at all. I think your problem is that your `.gitignore` isn't set up for a virtualenv project. I suggest you go to [gitignore.io](https://www.gitignore.io/) and type in "virtualenv" and generate some boilerplate. But at the end of the day, if your method works and it's understandable to you, that's the most important.
CFFI is usually preferred these days as it's faster than ctypes. You might be able to find more benchmarks for it. The main "advantage" of ctypes is that it's part of the standard library. Cython isn't official, but it's not uncommon.
I incorporated most of the suggestions by @KlienerNull in this thread - [https://www.reddit.com/r/Python/comments/8a5k9g/i\_created\_a\_visualization\_of\_the\_newton\_raphson/](https://www.reddit.com/r/Python/comments/8a5k9g/i_created_a_visualization_of_the_newton_raphson/)
Please let me know of any other feedback :)
@KlienerNull - I incorporated most of your suggestions. Check it out now and let me know what you think :)
I'm also a noob but I'm using a course called python bible I found on udemy which is good. The instructor is engaging and enthusiastic and there are plenty of hands on projects.
you didnt say what you found? and try r/learnpython 
Thanks for the advice!
Sure - Read this subreddit's sidebar - Go to r/learnpython - Read r/learnpython's sidebar - Read r/learnpython's wiki - Hang out in r/learnpython
Didn‚Äôt know about that subreddit. Thanks!
There's a stickied [r/Python Official Job Board](https://www.reddit.com/r/Python/comments/8bx6md/rpython_official_job_board/) post at the top of this subreddit.
I Got help thank you anyway
&gt; Processing img ww3g7ut83t511... What is this?
Yeah, How do I git one?
Time to learn how the base-10 (decimal) system works and what the modulo operator is!
Check out r/learnpython
Exploring Information: Exploring Information? Is that a mistake 
Nice try
I don't like giving answers, but... a, b, c = input() Check out unpacking in python. 
That's how it is titled on Amazon so I kept it. The actual book title doesn't have it.
I use virtualenvwrapper to manage my venvs. It puts them in a hidden dir inside my home directory. They're never in the way and I can see them all at one time in case I decide to do some spring cleaning. 
If you want to start in a practical way, I recommend this https://automatetheboringstuff.com/ There's plenty of sites which give you a problem and some basic knowledge you need to know to solve it and lead you through it - I personally like HackerRank. It has python basics challenges which will teach you :) 
Another thing that will be helpful is to try and do 1 or 2 hackerrank/leetcode easy-level problems a day in Python. It‚Äôs good interview practice for when you start looking for jobs/internships, and will save you a lot of time, because 1 problem a day really adds up. Keep grinding bro, and try to have some fun with programming too :)
Use `concurrent.futures.wait()`. It has a timeout. https://docs.python.org/3/library/concurrent.futures.html Basically any time someone tells you to use `multiprocessing`, go look at `concurrent.futures` first, as if it has the pattern you're looking for, it almost always a cleaner interface.
[Self-promotion](https://www.reddit.com/wiki/selfpromotion)
[Self-promotion](https://www.reddit.com/wiki/selfpromotion)
[Self-promotion](https://www.reddit.com/wiki/selfpromotion)
[Self-promotion](https://www.reddit.com/wiki/selfpromotion)
[Self-promotion](https://www.reddit.com/wiki/selfpromotion)
[Self-promotion](https://www.reddit.com/wiki/selfpromotion)
[Self-promotion](https://www.reddit.com/wiki/selfpromotion)
[Self-promotion](https://www.reddit.com/wiki/selfpromotion)
Use your time wisely. Friday and Saturday nights are for decompressing. Every hard-hitting schedule needs a few breaks, might as well time yours to coincide with everyone else's. :) Good luck!
Thank you very much! I only had 2 days of experience doing this and this helped me a lot. 
I will check it out! 
I've started with env folder placed within the project folder. Experimenting with upper case (ENV) and dot naming (.env). After later backup issues (env folder can be really huge, especially on development machine) moved to virtualenvwrapper (holding all envs home dot folder) + .bash\_profile alias switching my terminal env and dir to the project ones. Now I'm looking into eliminating env wrapper from this scheme due to its startup footprint.
Take it one thing at a time. Tutorials often introduce commonly-used features along with ones specialized ones; if you're new, you may not be able to tell them apart. What specific things are you having trouble with? I recommend learning function syntax, loops, if statements, lists, dicts, and list comprehensions cold. Maybe NamedTuples. Skip inheritance, decorators, functools, itertools, classes etc for now.
Can I deploy this with fabric?
That's because it's this stuff isn't simple. Programming, computer science, etc is not easy. It takes a lot of learning, a lot of thinking, and a whole hell of a lot of doing. Go check out r/learnpython for your Python-specifc learning endeavors.
I'm quite fond of https://learnpythonthehardway.org/ Just start small with simple things and try to build from there. Be patient and find some resource that works for you.
Thanks I will use!
You explained the learning experience for about every language. The deeper you get the more you realize that you have only just touched the surface. Even experts of a language only hold a small portion of it. In ten years you will still be discovering new things. My advice would be to learn-as-you-go. Python and its accompanying libraries are tools. Wait till you have a problem, then search just for what you need to solve it.
If you need to install packages from PyPI into your virtual environment, you might as well use `pipenv` to wrap both the virtual environment and `pip`. `pipenv` defaults to storing all of its virtual environments under a central directory (`~/.local/share/virtualenvs/` on Linux).
Skip udemy it's crap. Programming is a massive feild take it slow, you don't need to be at the same level as most software engineers for data science work. Check our Sentdex, he's a youtuber and teaches data science with Python. Do his Python basic course to begin with. If all you do is watch and replicate his youtube tutorials then you'll do fine. Oh and remember for for data scienxe work you can get by largely with the follow Python packages: Numpy, Pandas, Scikit-Learn, Scipy, Matplotlib &amp; Tensorflow Goodluck :D
Oh and pick up a copy of Python for Data Analysis. It covers most of those Python packages I listed.
Learning takes time, there is no way around it :) Don't be discouraged though, keep working with the language at a consistent pace. I started with online tutorials (mostly via udemy) but quickly realised that although these were fine for practical demonstration of the capabilities of the language, I was missing a proper understanding of the core principles of the languages. I am currently reading [Learning Python](https://books.google.de/books/about/Learning_Python.html?id=ftA0yk1Z92wC&amp;printsec=frontcover&amp;source=kp_read_button&amp;redir_esc=y#v=onepage&amp;q&amp;f=false) and can only recommend the book as it helped clarify the concepts of the language. Not coming from a computer science background, the youtube crashcourse series on computer science was also extremely helpful for me.
The author's opinions and mannerisms leave a lot to be desired, but it's a solid resource, right up until you get to object oriented programming, the I recommend Python 3 Object Oriented Programming by Dusty Phillips
Don't get discouraged. The same thing happened to me when I began programming. I was trying to learn on my own, and couldn't solve FizzBuzz despite having spent hours pouring over materials and spending a couple of days on the problem. I was convinced programming wasn't for me. Two things changed, I began to understand math just a little better -- particularly the concept of sets and functions as mappings between sets -- and I had a task at work that absolutely sucked and could be automated. I spent weeks figuring out how to automate that process with Python, and eventually, it all started to click. My impetus was the fact that I had a task that was more miserable than the feeling of utter hopelessness and stupidity I experienced as I learned how to code. TLDR: It's not just you. You will feel stupid for a long time before the epiphanies hit, but they'll come if you give it time. Try and find a project or set of projects as a means to learn. I haven't worked through it, but I've heard good things about "Automate the Boring Stuff with Python."
Does it work for google?
Not bad 
You can‚Äôt do it overnight, especially self taught! It takes a lot of time and practice, and it sounds like you‚Äôre biting off a lot all at the same time. I recommend taking a step back. Look at some easy problems like on coding bat and see if you can solve them, if not, go back to the beginnings and practice the fundamentals a bit more, in essence go over what you know so far, from what‚Äôs insanely simple to you and work your way up until you‚Äôre unsure, then focus on learning that thing; do this for each of the guides you‚Äôve been working on. I would recommend taking your time a little more and focusing on one guide at a time, I‚Äôm sure there‚Äôs a time crunch to learn this stuff, but at the same time, programming is supposed to be fun, and it should never come with the degradation of health. And in a similar note, don‚Äôt be afraid to take a break. I recently finished the first stage of my major project, 1000+ lines, to get it working right so I could give it to others, I ended up missing a bug and spent the next 20-30 out of 48 hours fixing it, I was suuuper tired/burned out after that, so now I‚Äôm taking a couple days off. It gives your brain a chance to recharge and refocus, sometimes taking a shower or nap can help you more than staring at the screen for three hours. I‚Äôm rushed typing this, but I hope it helps, if you have any questions I‚Äôd love to help where I can
What if the problems are to hard?
Working on this coding exercise for this last step of a companies application process!
Sometimes the "easy" problems are mislabeled and they are actually "hard" or "medium" so you should try a couple and see if they are still too difficult for you. If they are still too difficult, here are the things you can try: * Work through a book focusing on CS fundamentals in your language of choice. Very good free one for Python here: https://interactivepython.org/runestone/static/pythonds/index.html * Keep trying the problems. If you don't have the solution after 30 minutes, give up and look at the answer. Then try it again the next day without looking at the answer. You will start to learn patterns and idioms for solving problems. * Work on problem solving in general. Solve riddles, brain teasers, math puzzles. You will learn heuristics for solving problem and your brain will get better at it. Here are some sites you can use: brilliant.org, Project Euler. * Don't let not being able to solve problems get you down. Keep trying, you *will* get it eventually. 
Thank you so much for your reply. I bought a few courses on Udemy. Each course is ~40 hours long, broken down into over 40 short videos. One short video alone can take me hours, once you've added in the time I've had to stop, pause, google, read, google more, take notes, and then continue to the end of the video... The basic things I want to do are collect data (using apis), sort/clean data, and analyse. I want to get into modelling data later down the line. I've bought 'Data Science from Scratch', the Python Pocketbook, and yesterday 'Learning Python the Hard Way'. It's taken me two weeks just to figure out why I can't attach my csv file in the notebook. You are completely right about the documentation. And when I go to 'look something up' - it's impossible to get the answer from Documentation, without prior programming experience. Thank you for the recommendations. I've been looking at what you recommended already. Nearly had a breakdown over 'Lambda' and 'Args' and 'Kwargs' today. I thought this was going to be much simpler as I'm not looking to 'build' anything, but rather explore data and do some analysis. I didn't realise I was really knocking on the door of computer science. 
I bought this yesterday! Thanks. Before I bought it, I came across it online and there were a few free short chapters. I really liked the way it was written, the guy injected humour into it etc. 
I like your response, do you have a set schedule when you try to some problems? I heard doing it first thing in the morning and again at night is better.
Thank you. I appreciate the advice. I agree, my approach needs to change. I think I've been getting absolutely swamped by theory, so it still feels really intangible. I need to work on my patience to get through the figuring out process. Documentation seems to be written for efficiency for the experts, and doesn't elaborate very much people like me who need more explanation/descriptive language. I have so much admiration for you guys that manage to keep your sh*t together and not flip the desk over it. 
Sometimes the hardest part of programming is forcing yourself to get started. Developing a habit makes doing anything a lot easier. You should pick any time, morning, night, whatever, just one that is easy for you, and make yourself every day spend some time at the time you picked doing programming or problems, even if it just opening up the website and looking at it for 5 minutes. Even if you aren't feeling motivated, it is easy to start because you can tell yourself "just 5 minutes", and once you open up your computer you can get into the flow and find yourself still sitting there 30 minutes later ;). And even if it doesn't happen, 5-10 minutes a day adds up, and your brain will be thinking about the problem subconsciously even when you get off and you will get some benefit from it. I suggest spending at least 20-30 minutes though.
Anything worth doing rarely comes easily. I've spent 15 years programming, and I still feel like I'm learning new things every day.
Thank you! Honestly, I'm so shocked by how kind and supportive you have all been. I agree with you about Udemy. I used it for much less technical things like SQL, Google Data Studios and Google Tag Manager so I just thought I'd manage Python in a similar fashion. Wrong! I feel very foolish now. I've done lots of reading on Numpy, Pandas, Matplotlib/Matlab, and Seaborn . I've heard of Scikit-learn, Tensorflow and Scipy and will definitely read up on these more. Thanks for the Sentdex rec - I'll check him out for sure!!!! Software Engineers are another breed of person/from some other planet. I mean this is a good way and a bad way. They are so ridiculously smart but approach the subject in a way that absolutely terrifies analysts like me! I find it impossible to keep the conversation structured and contained when talking to them, they seem to enable this already enormous subject to grow into an even bigger beast D: 
Thanks for your support, I appreciate it! I feel I have permission to scrap the Udemy course I'm struggling with (well at least one of them), now that you and another poster shared your similarly bad experiences. I have been struggling so much, only to achieve a data frame..it really became demoralised. Finding resources that are at the right pace are tricky to find. They are either super slow/easy and 'how can this ever be useful' (Udemy) or 'I don't have a PhD in Computer Science' /documentation lingo level! 
Adding on the reply above, use numpy instead of math to get vectorized operations. Much more efficient.
Hi, thank you so much for your reply. It's funny you mentioned set theory, as this is what I was working on today. I was doing an exercise that was about recommending friends to people based on their friends' network of friends. I came to the same realisation about a week ago about the math. This is the only area where I feel to have made progress. I'm learning Python, but really what I have actually learned are some bits of math! Algebra, Probability and Regression seem to be recurring themes while I'm reading around the subject. Thanks for the book rec - I'm taking notes on all these recs as I read through all the kind replies. I've heard good things about Automate the boring stuff too. You've got me wondering what on earth this awful task was! Thanks for your kind words, I do feel in a better place to keep going. With most things in life, it's easy to learn something in a short period of time with very strong focus. This is not the same and I'm just going to have to accept that fact! 
Check out the p5 library for python if you like fractals 
Do what best fits the needs of your project(s). Sometimes you have multiple projects that can all use the same library configuration. Create a central virtual environment and share it among the projects. Sometimes every project has very specific library version requirements. In that case, create a virtual environment specific to each project. Choose practicality when you must, philosophy when you can afford to. 
Thank you so much. You are so kind! Sounds like you've gone through a tough time, but well done for getting to the end of it. I never intended on learning Python to build anything. It was purely for data analysis. I want to be able to import data sets, clean it, sort it, do some statistical analysis and visualisation. I read up on how we're going from descriptive analytics to predictive/prescriptive and automation - and I want to get my head around all that. I had a little go at 'Tweepy'. The set up process was straight forward, but then I drowned, in Tweepy's documentation. I haven't reached a point where I find any of it insanely simple, but I went back to the start with the reading today. I have to keep going. I think the biggest hurdle for me, is when I try to read up on something for further explanation/or when I truly don't understand an element of it, it's really hard for me to find the answer that is written in a way that is friendly to someone with no prior experience. I'll check in and keep you updated. Thanks for your time. Hope you enjoy your break :) 
Or possibly, not using object oriented programming. Especially since OP is working toward data science, not application development.
&gt; but the subject matter gets bigger and bigger rather than me feeling closer to any clarity. It sounds a lot like you keep trying to take the next step before you've understood the one you're on. Programming is like a series of puzzles, where each puzzle heavily references the previous ones. Slow down, and stick with each bit till you've got the hang of it. Only then, move on to the next bit. If it's still too much to get your head around, leave it for the time being, and try some simpler, related stuff. Then come back and have another go. Be patient. Give it time to sink in. I have absolutely no talent for this stuff. Running into things I totally don't get is so normal, I often get suspicious if I think I have understood something new. (I usually haven't.) So I break it down and work away at the edges, and build up an understanding bit by bit. And then some weeks or months later, I come back and suddenly I *do* understand that thing I thought was level 99 black magic. Often, it's almost obvious. Because I went back and filled in the all the blanks.
Just a couple of things about this article- it uses a module that relies on an underlying speech to text library to work. This code is mostly magic as-is, I would suggest explaining what the code is doing under the hood so that it a bit more beginner oriented. Additionally I would suggest /r/learnpython as it‚Äôs a better suited sub for that
Anyone coming into this thread better pip install puns before continuing 
Thanks for the suggestion! I‚Äôll definitely check it out.
*Exploring Information*: **Exploring Information**: **EXPLORING INFORMATION**
It's meant to be used with scrapy and other scrapers! It's to prevent getting blocked by hard to scrape websites.
Yep!
I gotchu dood
It doesn't allow you to register for sites, just to get the html (similar to view page source in your browser).
Thank you for teaching me this!
This is really cool, thanks for sharing!
Acquiring complex skills takes years if not decades. Peter Norvig provides a good post on the topic: http://norvig.com/21-days.html
You need a project to work on, it seems to me that you are shooting in all directions and hitting nothing on your efforts, in my case it¬¥s been very hepful that i have a project, i don¬¥t pretend to learn everything Python has to offer, i just need my project to work good. 
Wow nice work! 
This would be way more attractive if you included some sample images and swatches in the readme!
Good Idea!
tldr; it seems like a reasonable introduction to decorators. There is nothing here for people that understand them.
collections.Counter is a data structure that is more efficient for counting occurrences than using a dict. For example it can retrieve the top n elements without scanning the whole collection to find the maximum. 
And every data professional just cringed a bit. Please be very careful with cascade deletes (to the point where I would say just don't do it). Deletes are dangerous. Cascade deletes are a bad idea 95% of the time.
Thank you, Malachite40 :) 
Thank you sir! 
One problem with having a virtualenv in your project dir that I've noticed with Tox (which will create several virtualenvs) is that if you use`pip wheel .` to build wheels of your project &amp; dependencies, it will copy everything in the project dir, including the virtualenvs, to /tmp, which can take an inordinately long time. `bdist_wheel` does not have this issue but it's also not doing deps or putting the wheel in pip's wheel dir. At least, this was true with pip 9; I haven't looked at 10 yet, except for a few minutes trying to figure out why everything suddently broke.
This is similar behaviour to the Java ORMs where cascade is managed by the ORM. I would second /u/kalrog though that cascade delete is generally a bad idea. Unless you are careful, it is very easy to delete more that what you expected.
Just learn the vocab dude. Its like learning any other language. End goals are the same re: analysis in Python, Excel, Pen/Paper. Programming languages just provided the framework for conducting/delivering the analysis. Separate knowing the language from the end goals, and you'll learn to see it as a means to an end rather than something overwhelming.
I am not interested in benchmarks, but in actual projects using it. The only one I managed to find is an abandoned libtcod real-time game called Reactor3
Temple of Torment is a shipped rogue in python
I think it would be a much better approach to make a histogram of colors, instead of just counting *exactly* the same pixels. That way you could still get useful palettes from photos or from images noised by compression artifacts.
I asked about projects using *c*ython. Also both of those are closed source. (I happen to know that Torment uses only Python, so doesn't apply) 
well i want to make a spam bot which sends message upto some limit and stops on its own
yes i am still using run token .how to use it bot.command decorator command is being executed but my bot doesnt go online
Good to know. I believe same applies to the Django ORM. According to the Django docs (**emphasis** added) &gt; Django **emulates** the behavior of the SQL constraint ON DELETE CASCADE and also deletes the object containing the ForeignKey. But as far as I can tell, there is no way to configure the Django ORM to allow the DB to handle cascading deletes, as you did with SQLAlchemy and `passive_deletes`.
Can you show full code?
like this @bot.event async def on\_message(message): if message.content.startwith('spam me') userID = [message.author.id](https://message.author.id) await bot.send\_message([message.channel](https://message.channel), "&lt;@&amp;#37;s&gt; haha " &amp;#37; (userID) and at last [bot.run](https://bot.run)('token').... so am i missing something here
Do you get the on_ready thing?
What I found worked for me was to focus on using the tools I have, and then expand them on the next project. For example, if you need to do string parsing, just try to get the results with what you know, then look at other options such as regex later. I find one of the most important things in programming is knowing what questions to ask. It's going to take time, but you'll get there! Also, don't worry about being the greatest Python developer as soon as you open up Python for the first time. Failure is often a powerful tool when learning. Just keep at it, ask questions, be open to learning, and have fun with solving problems. Knowledge and mastery will come.
Just what I need, thanks!
Python isn't particularly hard to decompile. Anyway, you've set yourself some very tight restrictions and I hope you manage to solve it, and that those restrictions don't prove a hinderance.
Yeah I'd say the same thing. Only I'd use different words. Don't compare your life to other's. People have different priorities. If your goal is to be a kickass Python developer who works on projects that changes things then your day-to-day priorities will be very different from people who are out there just to hook up with the opposite sex but have nothing else going on in their life. No satisfaction, no fulfillment, no real career to speak of. Women come and go but your self-respect and developed skill never leaves. Not to mention the lone times are usually the best times for self-development. Use it wisely. Stop comparing yourself to others. Btw. I'm 30, using Python for security and the only brick-and-mortar place I feel comfortable going to is local church.
There is an R package called paletteR that does this with kmeans clustering, and some smarts to make the results distinctive from one another: https://datascienceplus.com/how-to-use-paletter-to-automagically-build-palettes-from-pictures/ It looks like it wouldn't be *too* difficult to port to Python.
What should I do when deleting rows with FK constraints?
You might be interested in this bot another redditor created; https://github.com/JoshuaScript/palette_bot
But sends messages where? How? Sorry, you need to be more specific. 
Only out of curiosity, what alternatives exist for math visualization? Other than an offering for python, what gaps are you aiming to fill in the space in general? I feel like this would be used widely in math education. 3B1B comes to mind.
You could just mark as archived.
Those same professionals cringed from "don't do X" with attitude but without giving a solution.
Thanks, I thought the article is very good, but I miss the conclusion! What is exactly the code combination that makes it work according as expected according to you?
Of course, there is matplotlib for basic graphs plotting. 3B1B has his library for math animations, but it isn't pip installable and he isn't intending for it to be used widely. Then there is blender for object rendering with less of a focus on math. Pandas3d focuses more on games. None of these have all their source code in pure python though. 
&gt;I'm creating this repository in January 2018 and it is crazy that the best open source option for rendering 3d scenes remains POV ray. This is wrong. OpenGL exists and there are least Blender and panda3d, which are open source 3d engines that you can use with python. &gt;https://github.com/ryu577/pyray/blob/master/functions/functionalforms.py You're doing "from module import \*" so I can't see where certain functions come from. There are basically no comments. Your examples show that *you* can do something with this, not how *I* can do something I want. There seems to be no documentation. To me, this is unusable.
These renderings looks like a fit for theintergalacticjetset.tumblr.com Nice job man!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ryu577/pyray/.../**functionalforms.py** (master ‚Üí a48f931)](https://github.com/ryu577/pyray/blob/a48f931ff203c83c9e45303625def8a0500420a3/functions/functionalforms.py) ---- 
I recommend this approach too. Pick a project you want to work on. That will narrow down the things you need to know.
yea i did commonds was excuted with out any error but bot doesnt appear online
in random server where this bot is used like i am in a server and i used command spam me and it will keeping sending automatically
Mixed feeling : this is a huge and impressive work, but as previously said, the lack of good quality documentation makes it hard to use.
now problem is i used to code or program what ever it was excuted with out any error but my bot doesnt appear online
Can you post your answer then....
I think getting experience is better than trying to learn everything. A quote I like from Evan: &gt; Overconfidence in learning is really valuable. Getting that experience is gona give you the knowledge in a way that careful experience from the outside is going to keep you unsure, and lacking the experience to make that knowledge concrete and useful. ‚Äì Evan Chapliki, from an Elm Town podcast episode. This quote was in reference to an example of someone learning to drive a car. You can either 1. Learn all the fine knowledge of race car driving before learning to drive a car. Or: 2. Just drive a car. When someone explains here a trick I'm doing. That relates to an experience I had, and it contextualises it in a way that makes it a lot clearer. So my advice is try and build a project and don't worry about trying to make it perfect. 
This finds the answer in about 1.8 seconds on my laptop: import hashlib import re import string accept_re = re.compile( r'25c300[a-f0-9]{3}efc09[a-f0-9]{2}0de2[a-f0-9]{4}a769[a-f0-9]{3}a' ) input_str = 'H8{}jp$s9{}h3w9m{}f0' for c1 in string.printable: for c2 in string.printable: for c3 in string.printable: attempt = input_str.format(c1, c2, c3) result = hashlib.md5( attempt.encode('ascii') ).hexdigest() if result.startswith('25c300'): print("Found hash of {}: {}".format(attempt, result)) Notice a couple things: * Using a regex to match the hash is faster than the manual matching you're trying to do * Using `string.ascii_printable` to get the set of printable ASCII characters * Using string interpolation to build the input to md5
Why am I getting downvoted
People are far too quick to criticise - this is amazing work, well done 
`Counter` is just a subclass of `dict`. Literally all it does is initialize itself empty, then `update()` itself with the input, using an overridden implementation of `update()` to have it insert/increment the values as it processes what you give it. There's no special alternative data structure involved.
Django's ORM has to work with databases that don't have "proper" foreign keys, and also has to support generic relations that don't have a portable expression of cascading deletion at the SQL level. So it doesn't set the cascade behavior at the SQL level. You can write a `RawSQL` migration that adds the appropriate cascade behavior at the SQL level if you want.
Thanks to a contributor from here, I dropped almost a 100 lines of code refactoring, thank you @r0m1 - also now there is GIF support so you can have a little more fun bashing keys.
Very nice! I see that a few people have written comments that, to me, read as very negative. Writing code to do X can be a lot of work. Revising the code, structuring it and adding comments to make it easier to understand by others (or yourself in 6 months) is even more work. Adding documentation, a job not at all similar to writing code, is yet again more work - and can be boring if what you like to do is write code and use it. You are only one person: use your time wisely, and ignore the naysayers. Thank you for sharing. I look forward to getting a better look at your code and possibly using it to create some illustrations (mostly planes in 3 d, showing their intersections) for a linear algebra course I am going to teach.
No need to. You just go to Pygame's site and it even tells you to use 3.6
Deleted thank you
One way around this is to sell his software though.
https://youtu.be/X6vZQzJ-fUI
https://youtu.be/X6vZQzJ-fUI
Thanks mate! Will be checking it out :)
I haven't read this guide, but no matter how much I read about how it's to work in a team, it's much easier and different to actually working in a team. Write code, post it on Github / BitBucket / GitLab /... and link to it in your resume. Show your good practices and knowledge. You mentioned wanting to write an interpreter - here's a guide I found helpful: https://ruslanspivak.com/lsbasi-part1/ It teaches theory, shows how you could implement and later shows why another way of implementing it is better, not just leads you by hand and teaches nothing. 
question, why do you use `urllib` to read the file?
yeah, even a kmeans clustering would probably yied better (more representative) color palettes. Of course, ideally OP would implement Median Cut color quantization but that algo is a pain to implement by hand.
The people who criticize have never attempted to make something like this. I tried before. I **quickly** found out that I wasn't nearly as smart as I thought I was. What the OP wrote is far from trivial. And he was able to write it clearly, concisely, and with documentation.
Have a look at numpy.flatten that should sort your issue (I think that's what it's called anyway)
Try numpy.squeeze
Really cool project! The layout is a bit confusing though. audio/ contains source code, but sound/ contains wav files. Might want to nest all your source code under src/ or something to split out your code from tests, data etc.
&gt; StrongbotSpider.parse callback is not defined The error is kinda obvious, class `StrongbotSpider` doesn't have a method called `parse`. You have a **function** called `parse`, but it should be a method of `StrongbotSpider`. Also, r/learnpython is more suitable for such questions.
Didn't know that, thanks for the article .
Look into [numpy.reshape](https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.reshape.html). In this case, you'd do &gt; x = x.reshape(327, 256)
X[:,:,0]
so what i have to do?,
Add indentation, so that `parse` will be a method of class `StrongbotSpider`. Like this: https://gist.github.com/vovanz/448518cdd069f80b4d6759c5eabd81a0
ohhh you right....now for some reason im getting different things in my csv file on scrapy shell was just perfect the results now im gettings weird things
Peewee handles this a bit differently. When you specify "on_delete='cascade'" you'll get the database constraint as you'd expect. To get orm-side cascade, you just pass recursive=True to the models delete_instance() method.
This whole conversation is hilarious 
Amazing work, OP! 
I've used kmeans clustering the past for this and it does indeed yield much better results. It is rather slow however, but that's okay if you just want to run it once to get a color pallet.
How developers with with each other: Every week my team and I have a "stand up" meeting where we each talk about 1) what we accomplished, 2) what we are planning on doing next, and 3) any blockers that we've had or will have that prevent us from getting work done. We each develop features on our own branches to ensure that no one messed up someone else's work. Recently we've been working on integration so I've been physically sitting next to my coworker so we can go through code together. Standard development practices: Version control like git is a must. You can look up git workflows to find different people's opinions of how it should be done. We track progress and tasks to be done with a software called Jira which tells you what is done, what needs to be done, who is doing what, and has a lot of other nice features. Unit tests are a good practice and very underutilized imo. Documentation building: Doxygen is the most common I've seen. It will pull comments from your code and create documentation from it which you can host in the cloud. There are other types of documentation too and you can choose whichever you want. I've used RTM. It's a documentation hosting platform and it doesn't scrape code for comments. Open source: There are some good GitHub pages of beginner open source projects that you can contribute to. Some open source projects will have a list of things that need to get done, sorted by easiness. Mozilla has a great open source community.
If you list the dependencies with the install_requires keyword I setup.py the users will not have to execute the extra pip install -r requirements.txt for the package to work.
&gt; I've done lots of reading on Numpy, Pandas, Matplotlib/Matlab, and Seaborn . I've heard of Scikit-learn, Tensorflow and Scipy and will definitely read up on these more. It doesn't sound like your problem is that you haven't read enough advanced, idiosyncratic toolkits with their own specialised and unique APIs and jargon. It sounds like you're having trouble with the basics of programming. My 2¬¢ worth of advice is, skip the technical stuff like numpy and pandas until you understand the basic stuff. Do you know how to use for-loops? What's iteration? How do you use dicts? How do you read and write data to a file? Can you use Python as a calculator? If you haven't done at least [the basic Python tutorial](https://docs.python.org/3/tutorial/), the heavy-duty scientific stack is going to just confuse you. Alan Gauld spends a lot of time on the semi-official ["Python tutor" mailing list](https://mail.python.org/mailman/listinfo/tutor), check out [his tutorial](http://www.alan-g.me.uk/) too. 
Is anybody still using POVRay?
r/learnpython
&gt; Overconfidence in learning is really valuable. Not in my experience. The only thing more frustrating than trying to teach somebody too dumb, lazy or unmotivated to try, is trying to teach somebody who already knows it all. Not a Python example, but I literally had this conversation with a student the other day. Me: "What's 4 times 7?" Student: (without hesitation) 46! Me: "No, I'm afraid not. Try again." Student: (aggressively) "Yes it is!" 
x.reshape((327,-1)) 
that would give you a 1d array ie x.flatten().shape -&gt; (83712,)
Making games was my main motivation to get into programming, and Python was the main language I used to create them with! Keep up the good work my friend! :) As constructive criticism, I'd like to point out the following: 1. Your game doesn't really do much at the moment, right? 2. You have a couple of functions with an empty body, which is a syntax error. 3. You have a couple of functions that look like this: def data_setdefault(): narratorrelationshipsallowed = ("false") narratorcantalk = ("true") narratorinteractive = ("none") This has a couple of issues. First of all, `("false")` is the same as "false". Either drop the unnecessary parentheses, or if you want to create a tuple, change that to `("false",)` with the added comma. Second, why use the string `"false"` when you most likely mean the boolean `False`? Third, as they are now, those variable declarations don't really do anything, as they are limited to the unction scope. I'm not sure if you meant to set global variables there, in which case you would need to use the `global` keyword to introduce the variables (e.g. `global narratorrelationshipsallowed`). Note that using global variables is usually a bad practice, as better constructs often exists that can do the same thing.
for fuck's sake, indent your code an additional 4 spaces per line to make it look like this 
Format this crap. Nobody's going to look at it like that. 
Anything 0 to 65535. Preferably 1024 or higher 
just a single argument or range(1,1024) ?
A range.