I'd post it, but I'm on my phone at the moment and not at home, once I reach home I'll make an edit and post my version as well!
Or scrapy + splash
How do I loop this correctly if I want to hover over each URL and download the MP3 file at the other end? import requests, os, pandas from bs4 import BeautifulSoup page = requests.get("http://scriptnotes.net/page/1/size/300/").content soup = BeautifulSoup(page, 'lxml') podcastLink = (soup.select('a[href$=.mp3]')) for episode in podcastLink: resp = requests.get(episode) with open('01.mp3', 'wb') as mp3: mp3.write(resp.content)
Yes, you cannot parse HTML with regex. But that's not what someone looking to scrape data off a website needs. You just need to get at the data.
Will it let me upload binary wheels that use "x86_64" as the platform, such as those emitted by `setuptools_rust`? I wasn't able to upload my package with twine`, ended up simply [hosting binary wheels on github](https://github.com/cathalgarvey/pyqgrams)..
I agree, in lots of cases, regex can be very helpful and quicker. For the most part, it won't be necessary, but if the project you're working on has tons and tons of files to go through, regex can help.
Yes. It works.
 I am working on sending push notifications and SMS from back-end using signals (any fileld Change in db )
Wow, native Python with django support, this is awesome! 
I'm guessing the beautifulsoup alternatives are in the article but what are they and why are they better? I use beautifulsoup all the time but I've been using it for years. Am I handicapping myself? 
&gt; if the site is extremely dynamic and has lots of authentication and tokens for state being passed around, try selenium I agree. I prefer to use Selenium until I'm relatively confident that I can reliably replicate the token/authentication transfer programmatically, then I transition to hitting the backend directly with Scrapy. Selenium through a browser can be a slow memory hog as you end up downloading a lot of stuff you don't need, and I'm only able to hit the site once every 5 or 10 seconds. Scrapy with 50 concurrent connections is only using 70 or 80 megs of ram when I hit the ajax endpoint directly. 
&gt;They are for viewing and enjoying on NBA.com/Stats Isn't that what the scraper is doing?
If you need any help with HTML / CSS I am always looking for projects to work on. Can show you around if you'd like.
I was surprised from the advice, it is like "rob a store and leave visit card". There is an old jewish joke, I am not sure how it sounds right in English. Two friends in sauna one says to other: "Moshe, or keep your pants on, or take off cross from your neck". 
Really interesting. Is this work or a side project?
Few things: 1. This really wasn't super informative. It really didn't motivate when you would use this or how. 2. It didn't sufficiently address a very real scenario when the iterables are different lengths. Zip will terminate with the shortest. Programmers should be aware of that. It *is* mentioned but needs more discussion 3. With very little effort, this could be Python 3 compatible. Fix the print statements and add a note about lazy evaluation Not sure if OP is the author or not, but this could have been better. 
I use bs4 all the time. It's easy to work with.
For .Net, [ironPython](http://ironpython.net/) exists, and there's even a [version supporting python 3.x](https://github.com/IronLanguages/ironpython3). 
It might be possible to port [Codename One](http://github.com/codenameone/CodenameOne/) (my employer) to python developers thru Jython. Right now we are heavily focused on Java but this is something that can be driven by community... E.g. a Mirah port originated completely from the community and works without any change from us.
That looks really cool. The problem with an existing tool chain is that it was developed for another language... in your case, Java. The level of complexity when you say, "port through jython" makes me cringe a little. I am not 100% sure what voodoo was involved to get Kivy running with openCV on my system, but I am almost 100% sure it will not run through jython, most unfortunately. 
Now you are making a simple script awfully complicated. Just because you have a hammer doesn't mean you have to hit everything with it.
Why is your advice «live the life I wanted»? This is not about you. 
Thank you 😊 
After doing probably over 50 scraping projects at various jobs, I'd actually suggest against scrapy for most projects. It's a great general-purpose tool even for small stuff, but I've gravitated towards a leaner more unix-style approach where I simply use requests and lxml with cssselect. For shaping and transforming data, use pandas and plug into a database with a sqlalchemy engine. Most recently I had a project where we had to grab pages from actual human-generated internal LAN traffic because the target site was *extremely* strict and getting caught doing crawls could severely damage the business. We used sslsplit and piped the output to a 50-line python script that grabs data from a table using just two list comprehensions (stuff like [td.text for td in table.cssselect('td')]). Simple, readable, and the next guy who comes along doesn't need to learn a framework to figure out what's going on.
It does, you are right. I just wasn't designing this for PyPI and there is still work to be done before I would concider this there.
Sounds legit.but what about speed? .scrapy uses twisted and can spawn way to many requests.i have seen people writing their own scraping engines but that requires a lot of time 
I went to soup, scrapy, and back to soup. The second time using soup I began to see the light. But scrapy has it's own shell (if that's accurate) which is nice too.
I have seen it... Do you think it has legs? Look at the commit hx on github and the commits themselves. I am not throwing a stone, just an honest observation. 
Pandas doesn't seem too unix-y either... I mean, it sounds like you traded one complex lib for another. 
You probably downloaded Eclipse for Java development and you probably can't run it because it requires something called Java Development Kit, sometimes multiple versions. What you most likely downloaded from Java's website was Java Runtime Environment which is fine if you only want to run programs made in Java, but it won't let you develop Java programs which is why Eclipse doesn't work. Anyway, you're not here to learn Java. You don't need to install IDE for Python immediately, in fact Python comes with minimal IDE called IDLE. If you already downloaded Python and installed it then you're good to go and you can start writing your first programs there. As other people recommend, PyCharm is usually the way to go when you want a full featured IDE. I don't even know if Eclipse has a version suited for Python development. There are probably some extensions that you would have to install if you want to use Eclipse with Python.
I use [pyNastran](https://github.com/SteveDoyle2/pyNastran) to work with Nastran structural analysis files. If you've ever messed with it, you know how cryptic it can be to try and parse their bastardized scientific notation form, so `1+5` or `-1-3`, which are obviously 100000.0 and -0.001, respectively. You can even write things like `-0+5`, which is a nasty way to write 0. It'll read almost everything in, autocheck it for errors, and even has a scriptable GUI. The output results parser can read a similarly nasty 2 GB file in about 4 seconds. It's a behemoth at 100k+ lines of code, but I can do a lot in 10 lines of code.
Oh lol it's you 
If he wants to store all the data (instead of writing it out somewhere), a `dict` would most definitely be better. If there's no value associated with the key, using a `set` would be the better option as it'll consume less memory while providing the same O(1) lookup speeds.
What benefit do you gain from fragmenting your code that much? You're just shifting your problem from "I don't know where to look in this module" to "I don't know which module to look in".
FYI Codename One translates Java bytecode to C and compiles it using xcode when targeting iOS. That means it's totally native under the hood and you can bind objective-c code or native libraries to it. In a way it's more native than Xamarin since it uses Java on Android and so it's far more natural on that platform. See this to understand how Codename One works: http://stackoverflow.com/questions/10639766/how-does-codename-one-work/10646336 Or this slightly longer video which also explains the differences to tools like Xamarin: https://www.youtube.com/watch?v=EMRmo6ZRnGw
I wasn't talking about local urls 
[removed]
I have edited the article for Python3 zip and lazy evaluation. Thanks for the feedback. 
A beginner who does not yet know what's the correct place to look for answers blows your mind?
I've tryed with the gpsd option. It worked. For the first run. After whole day trying to fix this I'm done... I can't make this run another time. I've tryed few solutions that I've found on the net - and nothing... All the time I'm getting NO FIX from cgps status, meanwhile in gpsmon I'm getting sometimes data that looks pretty accurate.
another shitty duplication of readily available information. i mean this is in the python documentation with better examples and better and more accurate explanations. there is really no gap that needed to be filled by a tutorial that just explains zip. there is no demand for this because it already is covered. you provide nothing original or insightful here. you are just spamming the web with more duplicated information. it's extremely low-effort. please don't publish anything when there's no uniqueness or originality about the content (say certain advanced programming techniques that you've developed or that aren't covered well). i think you are just out to generate clicks by publishing as much low-effort content as you can. (seems to be a pattern with medium.com) please don't post shit of this type. (looking at your posting history you do that frequently) 
concurrent.futures takes 4 lines of code and 2 minutes to setup, and fully covers all my concurrency needs.
Once upon a time I did a lot of scripting with in various 3D applications including autolisp in autocad, and MEL in Maya. A mistake I keep repeating is not drinking the kool aid. I would try to fit my favorite languages into a workflow to fix a problem. Sometimes this worked, sometimes it was a disaster. I would start with using the scripting built into Inventor, which I think is VBA? Get down and dirty with Inventor's API, learn what it can do, and read the documentation. Once you have a grasp of what can be achieved, hopefully you will have some lightbulb moments and figure out where python fits in. But don't worry if you don't figure out how to make python work with Inventor, you would still be mastering another aspect of your profession.
Adding to the other reply you got... There are many problems with the official Python docs. The quite terrible idea to put the entire module on one page is an obvious example. Then the explanation of the parameters are usually hidden in some big blob of text so it's hard to find what you are looking for. The latter wouldn't be a problem if it wasn't for the former, making searching the page really bad. I've looked into fixing this a little bit but it can't be automated. Fixing it would be a gargantuan manual task. 
It's a preference thing mostly. If you're making small little scripts, especially if they're math heavy, you might like the features Jupyter Notebooks offers. If you want something no-frills, maybe try a text editor such as Atom, or even a command line one such as vim or emacs. If you're the sort that likes a full featured editor with more debugging tools and code hinting, perhaps PyCharm or something similar is for you. Try out a few options. There is no best option for everyone. To that end, an IDE will not make you better at programming, just like how owning paintbrushes does not immediately make you a good artist. Practice will help you improve, so as you write more code you'll find it comes easier. Don't give up!
&gt; The future for Python seems pretty niche honestly. The major corporate backing for Python seems to be in Machine/Deep learning and AI. Will that hurt the long term usefulness of Python as a general purpose programming language? I think this viewpoint is somewhat biased by current events, Python is tremendously popular for all sorts of things - you could just have well have made similar comments in the past about other things that were trendy at the time, but this clearly hasn't prevented the language from growing. And even if machine learning somehow comes to dominate all Python use, it's likely to happen via Python becoming even more popular, not by all the other things people use it for withering away.
Would have loved to apply for this, if I had finished my BSc... Speaking intermediate level of Japanese, have worked as a dev (.NET) for a year and am transitioning into Python... Fml.
psssst... https://github.com/python-attrs/attrs
I'd start with PyCharm. It's ready to use out of the box. When you start learning more about Python, your environment etc. you could look into moving to a text editor like Atom, Visual Studio Code or (my preference) Sublime Text 3. These are a bit trickier to use for a beginner, because you have to install 3rd party packages to make them useful. You could look into moving to vim/emacs a few years down the line.
&gt; the clusterfuck that is Python's docs Care to elaborate? I've always thought Python's documentation was very good, on the whole.
It's a multivariate linear regression. Beta contains factor sensitivities, mu (not time dependent) is the constant term and epsilon is the remaining noise.
It came from places where Jew is nationality on first place
I find Python's docs confusing. Their design is horrible and the text itself is very unfriendly. Compare Python docs for example with MDN docs or kotlin docs. 
cool lib 👍 &amp;nbsp; the point-of-use implementations are kind of verbose for my liking, but I'll def be looking into how they implemented some of those features.
You can use RegEx with BeautifulSoup to search tag content. For that, it's great. 
It seems that Python has officially become... the boring language. The safe default choice. Don't get me wrong, this is a good thing - but it is somehow also a bit disappointing. I started using Python 1.5.2 in 2000. If you don't have to use JavaScript (because it's web) or C (because it's low level) or Java/C# (because that's what your corporate masters dictate) then it's probably Python. That service/embedded device/whatever you just got? The vendor-provided API is probably in Python. 
As an amateur who's in the midst of a career change, I too would like to know about this. It's hard to get your foot in the door starting out.
I've always done this through BeautifulSoup and requests. What does scrapy offer that you can't get with the former approach?
I'm building an (yet one more) pyqt based serial plotting tool to make MCU based sensor device debugging more comfortable. Still some work to do, but it works quite better than my old myplotlib based plotter. Feel free to use and contribute :) https://github.com/ruddy17/PlottiPy 
WDYT about doing a few gigs on Fivver just to have the pressure of a 'real' client to force us to build something to a deadline and with specific requirements, not just a hobby project?
Those are the libraries I use as well. I tried scrapy once but never really used it because it's still easy to use BeautifulSoup to get all the data I've wanted. There are probably cases where scrapy is necessary, but using more top level libraries is better in my mind. Like even lxml is sometimes better than BeautifulSoup just cause it's simpler; it just depends on the situation. And actually, because there are a bunch of comments on here about which libraries people use, I'll probably write a second post about this that talks about my opinions on libraries to use. I'm sure people will have different opinions overall though.
Welcome - I too started with .NET back when it was a preview; but also was fortunate to have an introduction to Python long ago by a DB admin - and equally love the language. I started doing Django when it wasn't popular and have just incorporated Python into everything I do where possible. Consider picking up a few side projects? Perhaps even for a non-profit? With a buddy who knows Python?
This is probably more relevant to /r/cscareerquestions but you haven't told us any of your experience..how much experience as a .net developer do you have? What have you done with python those are the big things. If you have been an employed .net developer and you have built a couple Django projects on the side you're good. But even though they are all python, pen tester, data scientist and web dev are all completely different skill sets. If you want to do pen testing your skill python is almost superfluous, yeah writing a few scripts can be useful, but your knowledge of networking, Unix and windows systems, email systems, and security and your writing ability (for writing the very long technical assessments) are more important. Here your python ability could be replaced by Perl, bash or powershell. Data science, again what have you done? What type of math and statistics have you studied?
I'm not sure I understand the question, but if you're looking for a way of getting `[1, 2, 3, ..., 9]` out of your example, [this](http://stackoverflow.com/questions/2158395/flatten-an-irregular-list-of-lists) stackoverflow question can be what you are looking for. Also, /r/learnpython would be more suited for this kind of post, I think.
Great way to got yourself banned on 10FF.
It's free to use. It's a site that let's anyone offer their services for as little as $5. However you may charge up to $3,000. So it's up to you. I'm just thinking that it may be better to gain real-world experience if you've got few other options. The problem with software development is that unless you've got the skills (based on past projects) you're going to have a hard time landing your first job.
It is a very interesting question, as for me. I am an engineer in oil industry, and I mostly use [3d field layout](https://www.fieldap.com/) software for my projects. I wonder if I can use some Python and other software to help me with some needs
Python3 requests Nets you http://docs.python-requests.org/en/master/, which has an example a few lines from the top. I don't know how, but we have to make r/Python great again.
Just wanted to say I think is is pretty awesome. Thank you for making it Beckereth!
Recursion is your friend
This is a classic problem to explain why you would use recursion or test that you are comfortable with it. In the future, you want r/learnpython.
I solved this using feedparser. Link for those who are interested: https://pythonhosted.org/feedparser/common-rss-elements.html
I wrote a sample code: https://gist.github.com/odra/6d8071bdbea8b2e7197113e703126501 You can use lxml to parse html, xml based documents (which includes rss, atom etc). In this case I am just using lxml to both download and parse the rss document but you could parse it from a string as well. Project page: https://github.com/lxml/lxml
r/learnpython has [a comparison matrix](https://www.reddit.com/r/learnpython/wiki/ide) of popular options. There is no global "best", as people are looking for different things out of their editors.
KDE Connect provides great API for controlling remote devices - including sending SMS.
My GF is actually just starting learning Python and we came across the exact same question. Being more of a "powerful texteditor + console" kind of guy, I had to compile a list of usable IDEs by googling, and tried to assess the pros/cons for a beginner and pitched it all to her. In the end, all she wanted is an environment that doesn't get in the way with features she doesn't need and doesn't force her to use the console. She is now very happy with her choice http://thonny.org/ which seems to do exactly that and is explicitly designed with beginners in mind. 
It is possible that, under unique circumstances, your cheating method might actually be more efficient. Less failsafe though.
I like using spyder for ipython integration. 
That's brilliantly terrible. I love it.
You could just write a loop that, on every iteration, finds any element of your list that is a list and inserts them into the list at that spot. Just have the loop run until no elements are of type List and then exit.
You should take some of your R analysis scripts, and translate them into Python. Learn what you need as you go along. Truthfully, this is a *far* more effective way to learn than by reading a book or working through online tutorials. For instance, I have a ~1,000 line piece of Python software I developed during my dissertation. It's a scientific model designed to run in an HPC environment (it uses MPI). It's become my "hello, world" to learn new programming languages and techniques, because it's complex enough that porting it to another language requires learning some details about that language, but it's short enough that it can be done in a few days. It also has a whole bunch of test cases and analytical solutions I can reference against to check code correctness and benchmark performance. To date, I've implemented it a few times over in Python (using Cython, Numba, vanilla Python w/ MPI, etc), as well as in C++, C/CUDA (didn't quite work out so well), Fortran (originally in Fortran 90, then I explored object-oriented Fortran 2003/2008 implementations, and I even have a version which takes advantage of co-arrays!), Matlab, and Julia. I'm anticipating having access to a Cray supercomputer this summer for an unrelated project, and plan to port it to Chapel at that point, too.
I think the real tldr is don't name a module the same thing as one of your dependencies unless you full qualify it. Don't name a file math because it's dumb.
There's a list [here](http://standards-oui.ieee.org/oui.txt)
List comprehension would just iterate once, though, and with unknown depth, you'd have to iterate an arbitrary number of times. Unless you mean to use list comprehension with a recursive method...something like: def unpack(A): if isinstance(A, list): return [unpack(x) for x in A] else: return A
I cannot understand why you suggest starting with a complex IDE like PyCharm but then moving to a text editor, please explain.
Always Be Applying
Something like this will work def unpack(list_): payload = [] for item in list_: if type(item) is not list: payload.append(item) else: payload.extend(unpack(item)) return payload &gt;&gt;&gt;unpack([1, [2, 3], [4, [5, 6, 7],8], 9]) [1, 2, 3, 4, 5, 6, 7, 8, 9]
Wish I could take credit for the project, but I didn't write. Only contributed a few times. 
Awesome, another IDE to choose from. Haven't used VS since my c++ days around 2003 so this is gonna be interesting.
I would like to read a post describing the module's best use cases. 
I personally don't like the other answers as they try to guess too much (testing for iterables, but then taking another approach for strings for example). In honor of KISS: def flatten_recursive_list(l: list): for item in l: if isinstance(item, list): yield from flatten(item) else: yield item 
Automating tasks for my brother's job. Trying to get his company to hire me for a couple of months to finish everything else.
The thing I don't get here is that your employer defines, sets-up and enforces the dev workflow, except for this one little thing called the IDE... 
No. It was similar though.
Yeah I did, it still would only show the first three words - Slightly off the main topic - what would you think if I used the split() function after adding a space before each capital letter? Would it work? 
Yes that would work, but would probably be less efficient because it would lead to a new string being created for each different capital letter. There's a memory copying and garbage collection overhead for each one. From what you are suggesting, do you mean something like: caps = { c for c in test if c in string.ascii_uppercase } for c in caps: test = test.replace(c," "+c) segs = test.split() That works, but if it matters how efficient it is, always test with timeit or something similar. Readability trumps minor efficiency gains in many cases. 
This is the random intercept model, as used in what goes by several names such as mixed effects models/longitudinal models/hierarchical models/multilevel models/panel data. Also kind of a dumb grab at "hey let's put something mathy on our logo", unless pandas actually has a specific focus on multilevel models.
Just wanted to say thanks for posting this, especially with the comments/notes interspersed. I've done the tutorials and reading, I've done bits here or there, and I've read about how to approach problems like this, but I haven't really just gone for it full on. Really cool to see the thought process step by step and once I'm finished with current project, inspired to dip my toes in the Kaggle deep end.
There's no magic bullet that will do all the porting work for you. You would need to write your own **imagehash.phash** function from scratch using some sort of higher-level python GPU framework (e.g. pycuda, numba), or just nut-up and write the function yourself in C/C++ &amp; CUDA then hook it in via an interface like Cython (&lt;- This is what I do for all of my high performance GPU-based python code). P.S. It's not always a given that GPU's are faster than CPU's. You need to first figure out whether your particular problem (including all of the associated transfer and calling overhead) lends itself to GPU computing. Furthermore, getting maximum performance out of a reduction operation (which is what this sounds like) on GPU-like architecture is particularly tricky. &gt; Does the GPU even support returning a 32^2 = 1024 bit integer? AFAIK nothing (in the entire history of computing) supports a 1024-bit integer natively.
You came to the wrong site, you might want to try Upwork. :)
Seems like an awesome idea but I never never get anything to show up, everytime I get `Found no signals, are you sure 'my adapter name' supports monitor mode?` Despite me spamming websites from my phone is connected to the same wifi network as my the ubuntu laptop im running it on. But it's such a cool idea I really wish I could play around with it too :( 
Maybe there exists some ghetto work around, but if you really wanna make an iphone game you need to use learn swift.
Hello I would like to make a print statement can you please lead me to where I can find a **safe** print tutorial?
How did you do it? pytesser?
What kind of wifi chip do you have? `tshark` is known not to work with all chipsets. Sorry I don't know of a list that says which `tshark` will specifically support for using monitor mode.
Not all objects had string representations which fully describe the object.
This script is ultra-simplistic - its mainly concerned with the number of people. However, you could to monitor the MAC addresses you see and see if they are "following" you. As others mentioned, this might be tricky due to MAC address randomization in un-affiliated networks. Along these lines, though, [I made some scripts](https://github.com/schollz/find-lf) that will help you to setup a network of Raspberry Pis that use this kind of idea and [FIND](https://github.com/schollz/find) to geoposition people in an area.
?? tell me more about it
Yes.
Can you try running with the `-v` flag? You should see a bunch of mac addresses and numbers if it is working. Also try setting a longer scan time with `-s 180` to make sure it can pick up something.
Nope
I'm liking the Python support in VS 2017 better than PyCharm, but I've been using VS since there was a VS, so I'm a bit biased :)
 Not sure if it's any help but this is the full output I see me@computer:~$ howmanypeoplearearound -a wlp2s0 -s 60 -v [ ] 0% 1min 0s left/usr/bin/tshark -I -i wlp2s0 -a duration:60 -w /tmp/tshark-temp [==================================================] 100% 0s left /usr/bin/tshark -r /tmp/tshark-temp -T fields -e wlan.sa -e wlan.bssid -e radiotap.dbm_antsignal tshark: The file "/tmp/tshark-temp" doesn't exist. Found no signals, are you sure wlp2s0 supports monitor mode? 
Yeah, it looks like your card won't support it.
Yeah, I don't know why but this happened to me on my laptop. It showed monitor, but didn't work with tshark. However, plugging in the WiFi dongle TN722N worked fine.
He said *IDE* not OS. vim is the only *IDE* I know without a GUI. 
Wait, so going by that logic C is really just a glue language, and you should really be using Assembly? Or am I misunderstanding?
What have you been smoking lmao? Actual physical signals is where it's at. Everything else is too abstract.
It's a simple algorithm. Just rewrite it in numba (or c with cffi).
Uh, python supports 1024 bit integers...
Their script is not IO bound.
At 60+ fps, the last 5 frames seems not as helpful as the frame-10 and frame-20, etc. But really, the current frame plus some memory of previous output like how long has the gas pedal been down and are we currently turning.
Yes lol my bad
The website might not have a documented API, but the urls have a consistent format. Specifically, if the site makes Ajax requests to get json, that's what people here mean by API. If Ajax is involved, look at the network tab of your browser development console. Python is a fine language for this.
What kind of sys admin doesn't know how to make a for loop in some scripting language? bash, python, perl, powershell, anything? 
Continuum is going to do some bad ass shit to python in the future. I see it brewing with numba and maybe dynd with dask as the scheduler. Also, hi Peter!
Doesn't seem to be working for me. $ sudo apt-get install tshart [sudo] password for ihasn: Reading package lists... Done Building dependency tree Reading state information... Done E: Unable to locate package tshart 
I mean, should I know about all about polymorphism and inheritance and stuff like that?
This is a fucking awesome idea and I'm definitely gonna add it to my project list.
Slight correction, assuming they want to scan all of the /24 subnet range, you need to change the for loop range to use {1..254} (since you likely don't want to scan .0 anyway)
Thanks!
Just set them up as scripts which do the fetching one singular time without any try except clauses. Then setup crontab to execute your script every second / minute / hour. You can also redirect the output to a file so you can see any errors that occured. This is a million times more robust, even if your data centers power goes out it will still continue collecting after being booted up.
This is definitely a thing you can do; however: If you actually write `map(lambda`... you are doing it wrong. You should be using comprehensions. Do not write `map(lambda x: x*2, [1, 2, 3])`. Instead, write `(x * 2 for x in [1, 2, 3])`. Do not write `filter(lambda x: x % 2 == 0, [1, 2, 3, 4, 5])`. Instead, write `(x for x in [1, 2, 3, 4, 5] if x % 2 == 0)`. `lambda` expressions are a good thing to understand and sometimes useful when you need to pass a transform as an argument, but `map()` and `filter()` are better for when you *already have a function*, not when you need to declare a new one inline anyway. Essentially, generators (with `()` parentheses as shown above) and list comprehensions (the same thing but with `[]` square brackets, which evaluates eagerly and returns a list) are usually preferred stylistically to `map()` and `filter()` for readability. You also seem to be using Python 2, for shame. Please, join us in the future; it's better here.
Also known as the "Kellyanne Conway Camera"
`map(str, [1, 2, 3])` is a pretty good example; lambdas and high-order functions are best introduced separately, as Python has better ways to do most of the things that involve both at once.
Shouldn't clients be responding to beacons more frequently than 10min? I think beacons are req'd to be in the ms. 
the ``build`` , ``dist`` and ``Jasper.egg-info`` shouldn't be commited as they are generated automatically by ``setup.py`` . What bugs me is that you have to declare 3 functions to test one? Isn't that a little too much overhead? Also, ``Expect(context.exception).to_be(None)`` can be rewritten as ``assert context.exception is None`` ?
I've done fairly exhaustive studies with this method - riding public transit running these systems and doing head counts over dozens of trials covering many weeks. I also set a few sensors up and we had people doing clickers and has camera cross referencing in a number of different demographic places. We've had a number of them hooked up to some cars running tests for over a year to gather robust, geospecific data. The multiplier is effectively 1.8-2.2 depending on a number of factors
I know lol. I was making an emacs joke.
Firstly, citing from Python Zen ``Explicit is better than implicit.`` . Why try to parse gibberish json-looking data? I cannot see a real-life example where this comes in handy. But of course, it looks more more than a fun project than a real-life targeted project. In that case, looks fine! Also, you might consider using the generic Python API for serializing (at least ``load`` and ``loads``. Cannot think of a reason you should supply the ``dump`` and ``dumps`` functions, maybe for the sake of completeness?).
Retirees. They don't get out much and they don't have smartphones 
If you limit the except clauses to the exceptions you really want to catch, you could look at the stack traces of the failures to figure oput what is going on. I would also recommend using the concurrent.futures library. It makes it easy to handle all the exceptions and retries in one loop. Depending on the duration of the requests the timings will drift out of the thirty seconds interval.
Couldn't you just use VS Code? Or am I missing something?
Thanks! I think I will do this instead then, so it might be Python2 compatible.
I would use a time-based queue that starts a thread with each API request function at a specified time. When the function completes successfully, it's last task is to add itself to the queue at the next time interval. If it fails, it adds itself again immediately. For analysis of the data I'd have each API function set a threading event upon successful completeion. Have a loop running that waits for each of the events to be set, analyzes the data, and then unsets the events. For thread safety, you might need to make copies of the analysis results in case one of your request functions changes it while it's in the middle of being analyzed. OR you can use a lock so that during the analysis process, no new API requests are made.
You probably are. * http://pbiernat.blogspot.ru/2014/09/bypassing-python-sandbox-by-abusing.html * https://hexplo.it/escaping-the-csawctf-python-sandbox/ Basically, just Google "escape Python sandbox" and you'll find lost of things. What are you using `exec` for, anyway?
It's completely unsafe. You can't sanitize code that way. It's completely possible to still do evil things (including importing arbitrary modules) without ever writing the phrase "import". It's possible to do this even if you've tried to restrict the builtins. You need to use an interpreter that is explicitly designed for sandboxed execution. CPython is not such an interpreter. It is impossible to do this safely with CPython. 
Do you live in Hong Kong? :)
Can you remote ssh on any python vm with VS17...? I don't think so.
That's pretty cool. I'd love to see those results published, they could be really useful.
I believe that with fully up-to-date Python this is no longer a problem, but twine is still the preferred upload method. (Edit: setuptools is irrelevant; the upload command comes from distutils and uses HTTPS in py 2.7.9 and 3.2+)
Wow.. very well done. Thanks for sharing.
Python has a number pf options for making desktop programs, see here: https://wiki.python.org/moin/GuiProgramming Neither is quite the same (nor quite as good, I dare say) as the Visual Studio-C# combinationn.
Well I am actually happy to pay for tools that make my life easier! I code with Django so I need the pro version of pycharm anyway. The same with remote development / debug and virtual box support. Therefore I also get CSS and js support already. Ok course people can use any tooling to get their work done but honestly I would rather be coding what I need to then spend all that time getting my ide to the point that I am comfortable. 
Hey id love to take look! 
So I think the advantage of Jasper's async vs pytest-asyncio is that it is just dirt simple and baked into the framework itself. No need to install a seperate plugin and learn how it works, you can just use standard async syntax and youre good to go. Also, I'm not sure how pytest works under the hood but with Jasper everything is ran asynchronously. So you can have multiple scenarios or features running at the same time just by using async/await. I'm not sure if the same can be said with pytest-asyncio. Now as far as Jasper vs pytest-behave, I was not aware of pytest-behave but looking around it seems to be lacking documentation, if it's basically like behave then the main difference is that the features are defined in python, not in a DSL. I see that's one of your concerns, you prefer the business people using a high level format to define the tests. I think if that's your use case Jasper probably isn't a good fit. My idea is that Jasper is behavior driven development for programmers. I've always liked the idea of BDD but I'm a programmer and I don't want to use a high level language to construct my tests, I want to program them! That's where the use case of Jasper fits into I think, BDD for programmers.
Update: width = 0 does not work either with the line disabled
There are ten thousand other ways, too. Don't think you can account for this one and be safe.
Obligatory notes of comparison with Emacs :) (to see if we're lacking stuff) &gt; Support for code cells and a Jupyter Notebook-like Ctrl+Enter cell execution experience. we have [emacs-ipython-notebook](https://github.com/millejoh/emacs-ipython-notebook) ! &gt; python web support so it looks like it offers GUIs to create project skeletons, run a local server (like `python manage.py runserver`), launch a debugger and depoly to Micosoft Azure. Not sure if it's useful (to whom it would be useful). Some GUIs replace shell scripts. We have some more stuff on [django-mode](https://github.com/myfreeweb/django-mode) and elpy (switch to tests, run tests (django, pytest…), run the current test I am in, execute a django management command (or make target) (with completion), etc) &gt; Python native development tools ok, no idea what this offers. &gt; shortcuts to deploy to windows Azure and Windows IoT core Emacs definitely does not have this :) &gt; Localization that's nice more: [python for Emacs](http://wikemacs.org/wiki/Python)
Try reposting your question in r/learnpython. Frankly, homework questions like this just make my head hurt, but I'm sure there are people in r/learnpython that would be able to point you in the right direction (they prefer to answer questions where the op shows they put some effort in solving the problem on their own before posting the question)
 Thanks, I posted it there as well.
That does work now. Thanks.
Not even getting to threads, just spawning tasks and callbacks into the event loop: import asyncio loop = asyncio.get_event_loop() async def spawn_task(loop): loop.call_soon(lambda: loop.create_task(say_hello())) async def say_hello(): print("hello") loop.run_until_complete(spawn_task(loop)) loop.close() This'll cause the loop to complain that there was still something pending in the loop when it closed. With pytest-asyncio this'll pop up if your test spawns a task and didn't clean it up. However, I don't think Jasper will (the task will run to completion). *NOW* whether or not this is desirable behavior is up to the end user to decide.
Scipy.distance.cdist probably will help you.
What are you actually trying to accomplish?
Why? If you just want to make ugly code you could combine all your variables into one: def approxPi( error ): v = 4, 1, 4, 0 while abs(v[2]-v[3]) &gt; error: v = -v[0], v[1]+2, v[2]+(-v[0]/(v[1]+2)), v[2] return v[2] 
Ok I see what you're saying. Yes, Jasper will always run async functions to completion, so you should not run into an issue where the loop is being closed while another task is pending. Granted, I haven't explicitly tried this before and I've never messed around with 'call_soon' or 'create_task', but if my understanding of them is correct then Jasper should just run them to completion.
You should test code before posting. 
Lol you ninja edited it you sneaky bastard. You didn't have the final `error[4]` on the tuple creation before. 
Of course, anytime! If you have any questions feel free to DM me, always down for a code review. I just took it step by step and googled the exact thing I was trying to do and it turned out okay. Glad it was useful for you!
I agree and best of luck to you! This is a project I can get behind. 
What do you mean? 
Your function isn't returning anything. 
In your while loop,Swap deposit and number of years. Then after the while loop return deposit 
Generators already have syntax for multiple loops and condition steps. Sounds like you should really read about them.
Ah so you're saying they should use asyncio.sleep and do something else while waiting? 
Might be my favorite python 3.6 feature 
No! There isn't anything else to do! The script does everything it needs to in as short a time as possible. Why are you trying to shoe horn asyncio into this?
A quick and dirty approach would be to "sample" the line as N points with np.linspace(ax, bx) np.linspace(ay, by). Then use a 2dim histogram np.histogramdd to check how many points are in each grid. Multiplying that number by dist(a, b)/N gives you the covered distance per cell. Increase N to improve the approximation. Should work in less than 5 lines. But I don't know if an analytical solution is required. good luck!
Pipe / map / filter is still more legible in complex situations. Especially if it entails unpacking nested data structures like JSON or XML ElementTrees to parse out specific slices of data.
I agree but if you want to be secure there's no way around it. A lot of tools out there will make it easier to deploy and maintain such a setup, for example Firejail with its security profiles https://firejail.wordpress.com/features-3/
If you're on Linux or OSX, try `find -name your_filename.ext -delete`. That's not Python, but it'll do the job.
Well it is a habit i have kept since 1.5.2 as it removes a lookup for the append method on the list object and so made for faster code. It was a good idea then for fast string concatenation. I must admit that I have not tested the speed recently. Aside from that I typically only use that for a single large string in a function. So readability is not a biggie. Small string I just concatenate on the fly as that is just as fast.
How is that "manually"? It'll just find all files with that name and delete them, automatically.
Can you elaborate why the answer is not suitable for your case and what you mean by automating and doing things manually? In your description above you did not say anything about automating. Do you want "code" that does the requested search and delete over and over? Let me ask what I ask product managers at least once a week: Which problem are you really trying to solve?
I realize I'm replying to a post from a month ago, but [no, you can't sort a list of method objects in Python 3](http://ideone.com/WHBaHj). The change in Python 3 is that if both sides of a comparison say they don't understand how to perform it, Python will raise a TypeError instead of trying the old, weird fallback. This applies even for objects of the same type.
It's Python, it's not OS specific so any computer with Python can run it.
Feels like an X-Y problem, for sure. 
For future reference, even a poorly formatted excerpt of your code will be more appreciated than a screenshot. Also if you read the sidebar (or the top of the submit post page), you would know that this belongs in r/learnpython
Who cares, and if you're that bothered [profile](https://docs.python.org/3/library/profile.html) it.
From what I remember, PyPy had a build of their python interpreter that stubs out OS calls to an external process to handle, effectively making a sandboxed python interpreter. I'm not sure what the current status of that is. And that kind of sandboxing won't save you from CPU hogs. You'll probably want to look to the host operating system for that kind of control.
Tongue in cheek? I suspect that all those recalculations of v[x] will cost. Of course [Disassembler for Python bytecode](https://docs.python.org/3/library/dis.html) and [The Python Profilers](https://docs.python.org/3/library/profile.html) will tell everybody, or do people on reddit prefer to guess?
What bliss, someone who understands the gospel according to St. Guido :-)
Oh wow I'm getting downvoted. Yes, that was sarcastic, and I thought it was pretty obvious. You are right, it won't be faster because we have an extra object to create and destroy (the tuple) and I am repeating several calculations. I don't think anyone cares enough to profile it; and rightly so. The code structure for something like this should be based on readability, not a few nanoseconds difference in performance.
Of course, all you need do is write the code. You should be able to find multiple ways of doing this by using your preferred search engine, starting by running up your preferred IDE or editor. If you want somebody to write the code for you I suggest that you write a suitably sized cheque made payable to the Python Software Foundation. When discussing size I am of course referring to the figures on the cheque and not the physical dimensions.
Others have covered this, but **NEVER USE EXEC ON USER-SUPPLIED INPUTS**. Ever. Never ever. Ever. *Never*. Now, all that said, you can execute user supplied code safely. The way to do this is to… invent your own programming language and write an interpreter for it. This isn't as big a hill to climb as it sounds like. You'd specifically be designing a *domain specific language*- a small language tuned to the specific problem you want to solve. It can look as much like Python as you like, you could have basically a "stripped down Python". Here's the really important thing: you'll build the abstract syntax tree yourself, and be able to validate what it contains *semantically* (which is miles different than sanitizing an input string). You'll have a grammar that explicitly defines what is and is not allowed, and control over what commands will eventually execute. I'll point you towards `PyParsing` as a library that's a good tool for building these kinds of things. Building a DSL is a good weekend project, and it helps you really understand how programming languages work.
This sounds like a strange assignment - GUI applications in Python are not nearly as smooth as in other languages, especially C#. [You can find some information on GUI programming with Python here](https://docs.python.org/3/faq/gui.html).
I tried this method but it doesn't seem to work. Can you write a function for me (you say it should be less than 5 lines)? This problem is really making me very frustrated lol 
That is a great term :) What i'm doing - I've built a bot that's trading various cryptocurrencies. The logic it trades with is customisable, written as a module that the bot can be told to recompile any time, so that it doesn't have to be taken offline to make the change. I'm considering opening it up to use from others under some sort of licensing agreement. It runs on AWS so anyone else using it wouldn't have direct access to it, they'd just be able to submit their own strategies to run through the backtester or use on the market. The concern is that if they can run malicious code they can retrieve the ssh key from the server, connect and grab the source code, and.. well, so much for getting paid for my work. The alternative that i see is to forgo python in the strategy altogether, make it in my own simple scripting language that the bot interprets itself. That's certainly possible, but a lot more work... hence my question.
On another note, there is a single liner for periodically compounded interest: interest = lambda p, r, t: p*(1-r**(t+1))/(1-r) P is initial endowment, t the # of periods and r the interest. For a proof, write out the difference between 2 compounding periods, from there on its high school algebra.
This is the other option that I've definitely considered. I was just hoping there would be a simpler solution :) But clearly not. Thanks for the suggestion, I'll check out PyParsing.
Thanks for the info. That's quite a bit above and beyond what I'm looking to do, but as you did say I was quite vague in my initial post. Sorry. Here's the missing context - https://www.reddit.com/r/Python/comments/6b3zzy/sanitizing_code_for_an_exec_command/dhk2115/ I'm aware of alternative methods to achieve my end goal, I was just curious if the route I described could be done safely. Clearly not :)
In some cases, tools that are supposed to export valid JSON simply don't (e.g. due to bugs). And sometimes you run into something that's not really JSON but not that far from it. For example, many of JavaScript object definitions share (not surprisingly) a lot of JSON's syntax: var x = {name: 'sarah'}; I run into things like that quite a bit when writing scrapers for websites, and extracting such data using a very forgiving JSON parser is often easier than using a full JavaScript interpreter. Supporting `load` and `loads` is a good idea, I'll keep that in mind!
This is great idea for a project, it would be cool if it could send me message whenever it detects an unusual Mac address. That would be a great job for a pi zero w. Thanks for the idea.
another shitty duplication of readily available information. i mean this is in the python documentation with better examples and better and more accurate explanations. there is really no gap that needed to be filled by a tutorial that just explains lambda/map/filter. there is no demand for this because it already is covered. you provide nothing original or insightful here. you are just spamming the web with more duplicated information. it's extremely low-effort. please don't publish anything when there's no uniqueness or originality about the content (say certain advanced programming techniques that you've developed or that aren't covered well). i think you are just out to generate clicks by publishing as much low-effort content as you can. (seems to be a pattern with medium.com) please don't post shit of this type. (looking at your posting history you do that frequently) 
to literally answer your question, you need to return some value (e.g. `return deposit`) to analyze your code, it is irrelevant what you return because your code won't work because you're overwriting the variables in every iteration of your loop to analyze your math, there's no need for a loop. unless it's a purely academic exercise to understand how loops or compounded interest work, you can just solve directly
building a PyQt5 application : https://github.com/QuantumPrayerTimes/quntumpt
`%|(abacuscreated (&gt;=|&lt;) %s)` Tried it on the regexr. it gives either 'abacuscreated' expressions and %'s that are not in the abacuscreated' expressions . Not what you want but maybe helpful EDIT: I think I miss understood
One thing I've discovered that's really helpful for recording data to a text file: the csv module. import csv and call csv.reader() on a file you've opened. Store lines of data in a list, then use reader.writerow(list)... (reader is the csv.reader() object). This will neatly output each item in the list, separated by commas. String items are enclosed in quotes. Also, see if [this](http://adamantine.me/index.php/2017/04/01/how-to-scrape-data-with-pythons-beautifulsoup/) helps.
I [used BeautifulSoup](http://adamantine.me/index.php/2017/04/01/how-to-scrape-data-with-pythons-beautifulsoup/) for a one-stop, quick solution to grabbing some data quickly from a series of pages that were very consistently structured. I used Scrapy for [a project](http://adamantine.me/index.php/2017/01/21/how-to-scrape-data-from-webpages-with-pythons-scrapy/) that involved following links to grab additional fields of data. It had a little bit more overhead in terms of another learning curve (how to create spiders or crawlers, item classes, etc) but also offered some value because you can start a new project via command line, set configuration settings in a config file, modify, adapt, and manager your spiders. Which is much better for projects where you're continually gathering data as it is published to the web.
If this is Python 2 you are doing integer arithmetic. Python 3, it's OK, AFAIK. 
first_name[0] last_name[0,7] valid_id = len(student_id) == 9
If you are worried about performance, Python isn't the language of choice anyway. Python's internal bookkeeping will swamp the actual algorithm for this. 
There are open source projects that make money by selling support. 
Fewer.
Just wondering: why didn't you use requests with BeautifulSoup instead?
It's a module that was designed for Linux and needs a lot of linux dependencies. We could help you if you showed us the error you get. However, the documentation that you linked says: &gt; Replacement for the ImageGrab Module, which works on Windows only. You're on Windows ... so just use `PIL.ImageGrab` --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
If it opens and closes instantly it sounds like you are double clicking the file to run it. Run it from IDLE (Run &gt; Run Module; or F5) and you should see the error that is causing the crash in the the python shell window.
In general, `cron` is the way to go. Have a scheduled script or executable collect the data into some sort of persistent storage (example: database, CSV file, JSON). When the data is finished collecting, signal a long running application that will ingest the collected data and extract what you want. You can also use Twisted, Tornado, asyncio to schedule tasks in the future, then pipe the results into coroutines, deferreds or futures for further processing. It all really depends on what the task is and how much resources you have
If your desire is for users to write python, why not make your service an API-based service. You can use your python in the background and expose the needed commands via a REST api or the like. I guess you would then be more responsible for the backend of running AWS for each user, but it sounds kind of like you're planning to do that anyway.
Wrong sub. Post this in /r/learnpython 
Why would you do that? There's no reason to recurse when you are only calling it again so you can loop. All that does is blow out the callstack.
IronPython in Visual Studio gives you drag and drop Windows Forms (the same Windows Forms and the sames drag and drop GUI Builder like c# ins VS Studio). Now is your school flexible enough to accept using IronPython? 
For the exceptions: put a bare 'raise' in the except clauses. This will trigger a traceback, which you can then follow to discover why the threads are exiting.
PyCharm is awesome. Everything from debugging to code coverage in unit tests. Very nice. I know I'll take a hit since it's not open source but I couldn't do without it after switching from PyDev. 
Offering another solution: the schedule module - https://pypi.python.org/pypi/schedule Been using this. It's simple, the API's straightforward and readable, and it handles my automated processing jobs very well. 
 def approx_pi(error): current = 0 for denom in range(1, 4*int(1 / error)+2, 2): current -= ((denom &amp; 2) - 1) / denom return current * 4 Or, the natural extension of this, a one-liner: def approx_pi(error): return -4 * sum( ((denom &amp; 2) - 1) / denom for denom in range(1, 4 * int(1 / error) + 2, 2) ) 
You're thinking that manipulating built-in expected behavior is the easy way out, but it's not. You'll create more headaches by going that route than you will by doing a find+replace and running your tests until things work as expected again.
Missed [Leo](http://leoeditor.com/). I'm really enjoying this after a couple weeks.
And Notepad. And Notepad++.
Noob here - why would you want to isolate your environment?
All of my previous scrapers had been built with requests and beautifulsoup/lxml etc and I had heard good things about scrapy, so part of the reason was simply to force myself to try a new tool. Another reason was that I am toying with the idea of hosting it on Scrapinghub and using Crawlera (although I discovered later that you can use Crawlera without scrapy!), so I wanted to fit within that toolset. Finally, although requests is a phenomenal tool, using it requires me to code in all exception handling, multithreading/concurrency, etc. myself. Scrapy has a lot of that functionality built right in, plus a bunch of other middleware to handle all sorts of different scenarios. Once I have my spider, models and pipelines established it's really a fire-and-forget solution instead of something I have to babysit to make sure it can handle every little hiccup and burp. In some ways it's similar to learning SqlAlchemy if you're already comfortable working directly in SQL. At the start it sometimes takes an agonizingly long time to do something that's ridiculously fast using raw sql, but once I invested the time to get past that productivity hurdle I began to discover why people love it so much. 
How about redefining/wrapping the errors that are caught? _IndexError = IndexError class IndexError(_IndexError): # add your logging here and then raise _IndexErrror Won't​ really help if they don't have granular `except` statements though... Edit: changed inheritance from `Exception` to `_IndexError`
Multiple reason, maybe you want to test a specifics environment within a docker container to check specific setup. Any reason works. I'll admit thought, most people will probably survive without this feature. So I guess PyCharm has some decent competition for a free tag price!
You forgot the `+` between `noun1` and `" that refused to do his homework."` on line 14. You are missing another one on line 19 between `noun3` and `"."`. You wouldn't have these problems if you used a modern string formatting: print "The {} lived {} ever after in the {} {}.".format(noun1, adverb2, adjective4, noun3) --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python you are using, what OS you are using and any errors you are getting. 
Atom and Vim are all I need. 
get a virtual machine, then get a docker, then put it in a safe and drop it to the bottkm of the Marianas trench. now its safe
one particular feature is cross-language debugging
Hey! Thanks for the help I'll try this out. Honestly I haven't used OpenOffice in a while so I'm out of touch. I was just thinking about solutions! 
I agree with /u/jwink3101, building an API is the correct method for dealing with this situation. Instead of forcing people to write their scripts in an arbitrary programming language that you have selected, why not let them write it in the programming language of THEIR choice? Either way, you need to do the exact same thing you would do in any proper, safe sandbox: * Figure out what information and data structures you plan to provide so the user's program can make their own decisions based on that data. * Decide what hooks are allowed, what behaviors in your program the user is allowed to trigger or override. Whether you expose that API by HTTP or whether you expose it in an internal script environment like Lua (see python's lupa module) the actual process is pretty simple. It's actually defining the API that's the hard part. But either way, you're going to have to do it if you want to allow safe interaction with your program.
because it's vague, implicit and ugly while only saving you 8 characters.
Triple quotes + `textwrap.dedent` from the standard lib gives you this, without all the extra leading/trailing quotes per line.
It would be helpful if you could post the actual source, if this is public data. Also try /r/learnpython, as per the sidebar.
You will need a mechanism for choosing which chat bot receives which inputs. There are two ways to approach this: Either a set of rules you determined in advance, or a set of examples you provided in advance which are fed to a machine learning algorithm which generates the rules for you. Once you have solved the problem of how to direct traffic, actually writing the code to do so is fairly trivial.
Vim.
&gt;The quite terrible idea to put the entire module on one page is an obvious example. This is my favorite part of the python docs! Funny.
A few things you might want to think about: * Denial of service: either fill your hard drive, exceed your RAM, or busy your processor. This one does all 3. with open('temp', 'wb') as f: garbage = ['lol'] while True: garbage.extend(garbage) f.write(' '.join(garbage)) * Someone can run their own botnet. Whether that's a botnet that victimizes your network or jumps across the internet and victimizes the rest of the world. Even if you cut off access to libraries like urllib, they can just copy-paste the classes that are defined by urllib, and they have the same thing. * An interpreter can probably run an interpreter inside of it. If you take away the import keyword and importlib/imp, I could still write a program that could read a text snippet and execute it. Your interpreter wouldn't know what my interpreter is running. I could encrypt anything I wouldn't want your interpreter to find in a text search, and bundle the decryption key and procedure as a python procedure that you would run for me. There are too many scenarios that are difficult for you to test and defend against. 
Here's another way: rewrite python bytecode https://youtu.be/mxjv9KqzwjI
Do some research on AIML, it's basically a seaperate programming language (technically it's a markup language, like HTML with tags and things) that defines a set of rules for how a chatbot should respond to certain input. It can be integrated to Python with the PyAIML module.
Editor? Vim IDE? GNU/Linux (https://sanctum.geek.nz/arabesque/series/unix-as-ide/) ;)
bump
I use PyCharm in a personal and professional setting and it's worth every dollar for the licenses.
Obviously we just have a difference in personal preference. I could give my "why" but you'll disagree and that's fine. Just thought it was "funny" and shared my differing point of view.
I saw a few things on AIML but it went straight over my head. I will take another, more in-depth look into AIML's. thank you!
Would I have to write the code for the machine learning algorithm or use a neural network like PyBrain?
What you're doing sounds a lot like Word mail merge fields. Check out this handy module: https://pypi.python.org/pypi/docx-mailmerge
It's actually kind of smart as long as it's local or you have a consistent naming convention. I use a variable called sline, which is short for split line and is always a list. Micro-optimizations can be very useful. I had a code taking 45 minutes to pase a 2 GB data file and preprocess it. I sped up a code by a factor of 50x by using numpy efficiently. It was still slow, so I then saved some struct objects and got another 10x. It ended taking 4 seconds in the end. I use the reader all the time. It's quite worth it. It's Python and it's faster than some well written C code because I waste some time and read the file twice, so I size the data arrays properly.
Why not use a real queue. Amqp, rabbitmq, etc
I don't know how to implement it. Do you have any ideas how to do it? The queue database wouldn't work?
Except this is not micro-optimization - you are literally just putting another name on the function; pretty bad one at that too.
Every `&lt;div class = "inmate"&gt;` is one person, so you select these and iterate over them. for elem in soup.select("div.inmate"): inmate_obj = grab_single_inmate(elem)
Yes, Notepad is everyone's favourite IDE.
My suggestion would be http://python-rq.org . If you dislike it for some reason, you can take a look at http://www.celeryproject.org
No.
Vim+tmux+unix-like tools
I think it makes code a *lot* more concise and readable: st = "john,doe,42\nJane,Doe,43" result = []; a = result.append a('&lt;table&gt;') a('&lt;tr&gt;&lt;th&gt;first name&lt;/th&gt;&lt;th&gt;last name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;') for line in st.split('\n'): a('&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;' % tuple(line.split(','))) a('&lt;/table&gt;') print ('\n'.join(result)) result = []; result.append('&lt;table&gt;') result.append('&lt;tr&gt;&lt;th&gt;first name&lt;/th&gt;&lt;th&gt;last name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;') for line in st.split('\n'): result.append('&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;' % tuple(line.split(','))) result.append('&lt;/table&gt;') print ('\n'.join(result)) 
Ew ew ew. At least inherit from `_IndexError`!
Come to the dark side ...
Beautiful. I'm gonna look into this. In the long run I obviously want to kill these but in the short term there are other fires. 
There is [relatorio](http://relatorio.readthedocs.io/en/latest/) also. It can generate odt, ods, … documents.
It never stops... Do any of you people know how to search? edlin https://www.reddit.com/r/Python/comments/6b7471/whats_your_favorite_python_ide/ https://www.reddit.com/r/Python/comments/6ahnsb/thonny_python_ide_for_beginners/ https://www.reddit.com/r/Python/comments/67eanw/the_most_adequate_python_ide_for_scientific/ https://www.reddit.com/r/Python/comments/5k3suf/comprehensive_review_of_10_top_performing_python/ https://www.reddit.com/r/Python/comments/5remwl/use_vim_as_a_python_ide/ https://www.reddit.com/r/Python/comments/54kxn3/what_is_the_best_python_ide/ 
JetBrains' guys are cool, they gave me an open source license to all their products because of mine open source projects. 
https://awesome-python.com/#gui
Eclipse + PyDev
You've got a misunderstanding of what `del` does. It is not deleting anything here. All it does is unbind the given name. That results in decrementing the reference count of the object the name was referring to. *IF* that caused the reference count to reach zero, then the object is no longer reachable from anywhere and its life is over, and it can be deleted. But that's not the case here. The list object has at least two references. The name `var` is one, and the generator object also holds a reference to the list. (There may be others, such as IPython internals relating to history.) So `del var` does not do anything here, because `var` was not the sole remaining reference to the list. The list object continues to exist exactly as it did before, in the same place in memory, completely unaffected. 
The generator holds a reference to `var`. You can see the reference in action by mutating `var` and observing the results: &gt;&gt;&gt; var = [] &gt;&gt;&gt; gen = (v for v in var) &gt;&gt;&gt; var.append('a') &gt;&gt;&gt; next(gen) 'a' You may want to review [how names and values work in python](https://nedbatchelder.com/text/names1.html).
&gt; You're also not following pep8 in your own style checker, which is kinda funny. Snake case names, not camelcase How's it funny, his project enforces proper C++, not proper Python. He could be god-tier with C++, doesn't make it funny that his Python style differs from ours. Good feedback though, I'm just nitpicking here to defend OP, no hard feelings.
I Concur. There's a great mailmerge tutorial her: http://pbpython.com/python-word-template.html
I looked into this and it seemed much more complicated than I wanted. How easy was it to get working? 
&gt; The list object continues to exist exactly as it did before, in the same place in memory, So the only way to avoid the memory usage of processing a large list to replace the list with another generator?
I wouldn't say that is the only way. It's 'a' way. You can come up with all sorts of techniques. But if the data is already in memory, then you've pretty much already lost; adding lazy evaluation onto the end of eager evaluation doesn't really accomplish anything. 
Do they really need to run in parallel? Is it too slow to call them in succession and then calculate? If not, you may be overdesigning. If you do need your data fetching calls to run in parallel, I think they should be separated from your calculations so that the tasks are less dependent on each other. Each call can save the data to a file or database and you separately have a task running to do the calculations on the data (and if needed, first validating that all the data is up to date or consistent).
python-docx is really good for writing and formatting new documents. Changing old documents, not so much. At least in my experience. 
This is not /r/codegolf though
Life-changing!
Python uses zero-based indexing, so you need to start counting at zero. my_lines.pop(0) would return 1 from your list, and my_lines.pop(4) would return the 5. my_lines.pop(5) would error out as there is no element at that position.
WTF is the problem. Indexing obviously starts at 0. Take it to r/learnPython.
Well I could have it generate a new one each time. I looked at this option, but it seemed complex. How easy is it get it working? 
I only mean "kinda" funny, not like, "haha omg noob" funny, but the same level of humor as an accidental pun. OP is definitely a solid developer and I should have been more clear about that. Sorry OP. ;(
After looking at this for a while this is exactly what I need
For me, this only works if `warnings` has already been imported. :/
wrong subreddit, I removed it.
You can also bypass startup items with various keys depending on where they are loading (for example, pressing and holding shift during Windows load bypasses the startup folder.) You could also use a live cd to boot and then delete the program.
[Hiring] **Company:** QuantumWise **Type:** Full-Time **Description:** QuantumWise is a mid-sized company (approx. 30 people) located in Copenhagen, Denmark. Our product, Virtual NanoLab, is used for atomic-scale modelling in the fields of electronics, materials science, and chemistry. Don't let the heavy focus on science discourage you, though! We're looking for an additional member for our GUI team (currently three people). Some familiarity with developing Qt or PyQt applications is required, and experience with OpenGL is also welcomed. The application process consists of solving an exercise. After the exercise there is a skype interview, and if all goes well we'll fly you over to Copenhagen to have a final chat. You can find the application and exercise here: http://quantumwise.com/about-us/jobs#1046 **Remote:** No, but working from home occasionally is no problem. **Visa Sponsorship:** ask us **Technologies:** Python 2, PyQt, c++ **Contact:** jobs@quantumwise.com
do your own work lazy bones
That'd work too.
Yes, the only way to avoid using the memory is to not create the list in the first place. Under what circumstance are you thinking that Python is just creating new large lists all the time? I'm having trouble coming up with when I would accidentally create a copy of a list.
I was able compile and deploy PyQt4 in production with pyinstaller, but I never bothered to learn any of the built-in tools. So if you need to, try pyinstaller. 
just try...except:.... or named exception ?
Nah, a generator is a function that 'pauses' between iterations of an outer loop. Python's got mechanisms tied to the `yield` and `for` statements that will make the generator reach the first yield statement, return a value to the caller, pause and then when it's called again it resumes and runs again. So, there's a function object holding the state of all the stack values you can mess with but conceptually, you may not NEED a generator if you need to examine multiple values from the sequence at once. Alternatively, you can look at the [itertools](https://docs.python.org/3/library/itertools.html) module and you could probably work something out there if you only need a rolling window of the last n values or something.
Thank you! I will definitely dive into this. 
Thanks for the heads up. I'll definitely take a closer look at it. 
Ah. That isn't what I would have considered as accidentally creating a list since they are defined to return a list and no one in their right mind would use one to create a list identical to the input. But, yeah, I've seen people do silly things with those kinds of functions (including using a list comprehension merely for creating side effects and never storing the returned list instead of using a loop). I always considered Python's functional-style functions as kind of 2nd-class citizens that most people thought un-Pythonic compared with using various comprehensions. The generator versions are much better. Of course, if you need need random access to the data in a sequence, generators aren't going to be your friend. :)
TIL. sweet. so startup scripts don't start on safe mode?
Thank you. I didn't go too deep in that chapter, as it's a topic that many people find intimidating, but for those with an interest, it should give you a quick introduction.
I've found that xlrd is pretty good for spreadsheet reading/manipulation as well.
See I was lazy and didn't even make a template. We made it as part of software for our customer. They just open the file, hit select all, copy, switch to their document and paste. It reformats the tables and headings. The whole point is we're not making a pdf, so you CAN do that.
if this comment did not end up being at the top of the thread, this wouldn't be reddit :+1:
Pyinstaller is awesome in that there's an entire module built into the platform who's job is to handle the heavy lifting when it comes to compiling pretty much every common python library. So it's simple enough once you get it downloaded and extracted. pyinstaller --onefile --noconsole --icon &lt;whatever icon file you want&gt; &lt;your main source file&gt; The exe will end up in a new folder in whichever direction you ran the compiler from. 
I would love to know this too. Hugh fan of Qt and python, but when using android, I always revert to Java. It's just such a hassle to use anything but java.
Well this is my mistake, I completely missed the word "Android" in your post. Sorry about that. 
You should use readlines() and writelines() instead of split() and join().
Thank you. This is excellent!
Amazing resource - is there a PDF of the full text available anywhere? 
I'll subscribe to the PDF version :)
There are tons of neat applications written in Python. There are lots of stories of what it's used for here: https://www.python.org/about/success/ But you might want something a bit more substantive, so maybe this will help: http://www.hartmannsoftware.com/Blog/Articles_from_Software_Fans/Most-Famous-Software-Programs-Written-in-Python Wikipedia also has a non-exhaustive list - https://en.wikipedia.org/wiki/List_of_Python_software 
Look at your potential technical debt from this, though. You'll apply this bandaid now, but unless you've got free time that couldn't be better devoted to other projects, you won't have much opportunity to fix the bandaid. Therefore, you'll be maintaining the old application _plus_ your bandaid mechanism. God help you if that introduces some weird edge case bug that you have to track down months later. Unless you're decommissioning the application within the next 6 to 12 months, don't do this to yourself.
I totally understand your argument, and it holds in isolation for sure. but nobody in the history of small software development teams has 2-3 weeks to sit and refactor/test code debt like this. this is one of those "a bit every day" kind of debt cleanup things, and if there is a way to reduce the liability of these without a 2000 line PR right off the bat, then I would totally take it.
If your language is very simple, building an interpreter is not such a huge problem. There are libraries like [PLY](http://www.dabeaz.com/ply/ply.html) that let you quickly build an interpreter for a custom language. There's a [tech talk by Alex Gaynor](https://www.youtube.com/watch?v=LCslqgM48D4) that might help if you need to get started. Link is to: So you want to build an interpreter, Alex Gaynor @ Pycon 2013
I may be late to the party but if you haven't looked at Pandas yet, do that.
I love you
We build lots of interesting things with Python for 3D animation and VFX pipelines that cover a wide spectrum. * Standalone desktop applications (Using Qt/wx) * Integrated tools for DCC apps (Maya, Nuke, etc..) * Lots of pipeline "glue" to automate things (detect changes, version assets, validate inputs, etc...) Not many of these things ever become public as they are all usually purpose built for a specific problem. However there are still a few open-source projects with Python components. ([Alembic](http://docs.alembic.io/index.html), [USD](https://github.com/PixarAnimationStudios/USD), [OpenEXR](http://www.excamera.com/sphinx/articles-openexr.html)) 
You can even omit the "r" as the default is read-only text file.
That is the purpose. `str(1)` gives you `'1'`, turning the number `1` into the string `'1'`, etc. Also, such questions are a better fit for /r/learnpython.
Haha yes, definitely do so.
I have deployed a flask app in azure but when I browse it, it is throwing Internal server error. And after checking the error logs, found out that the error is related to fastCGI. Exact error message would be &lt;handler&gt; scriptProcessor could not be found in &lt;fastCGI&gt; application configuration Does anyone has any experience in deploying flask app into Azure? if so, what could be the real issue here? The service is running as expected on my local IDE
Weird thing that a coworker just found a code with something like dictionary = { str("stuff"): 1, str("foo"): 100, str("bar"): 2 } and all I could think of was "He probably wants to ensure that the keys are strings and not unicodes..."
I am writing Python 3.5 Tkinter apps for my company that solve unique business needs and that look good according to my users and my manager. I've written an In/Out board app which lets team members click on a button to change their status which shows as a red or green "LED", and helps the receptionist know who is in the building and on call. I'm also finishing up a visual staff lookup program which combines data from our id badge printing software and HR/payroll system, and lets the receptionist or other users quickly find and see pictures of all users whose names start with a given character or two. The more characters you type the further the list is narrowed down. I will back up my "good looking" claims with screen shots, but first have to generate some fictionalized data. Tkinter usually gets short shrift as a GUI environment, being blamed for ugly looking interfaces. However it's perfectly capable of creating nice looking interfaces, one just has to learn to use grid() for placement of controls, and apply appropriate padding here and there. I also use several of the Ttk "themed" controls which take on more of the look of the operating system it runs on (Win7 here). In short, it's possible to create good looking, usable and useful Python apps with just the standard library.
Wish some nice soul convert it into PDF
Congrats
I see you have a nice name!
Awesome answer! This part especially: &gt; Another reason was that I am toying with the idea of hosting it on Scrapinghub and using Crawlera (although I discovered later that you can use Crawlera without scrapy!), so I wanted to fit within that toolset. Finally, although requests is a phenomenal tool, using it requires me to code in all exception handling, multithreading/concurrency, etc. myself. &gt; &gt; Scrapy has a lot of that functionality built right in, plus a bunch of other middleware to handle all sorts of different scenarios. Once I have my spider, models and pipelines established it's really a fire-and-forget solution instead of something I have to babysit to make sure it can handle every little hiccup and burp. Thanks for sharing man. Am quite keen on learning SQLAlchemy as well, hope to do so within the next few weeks.
Me one.
I'd like to see the PDF as well
If you're content with 'a bit every day,' you should be grepping through code directly, rather than monkeypatching in logging only to grep through that.
There are several requests for a PDF. If you had assistance generating it, would you be open to providing one online?
You're very welcome! They're both very good tools and it's always good to have another tool in the toolbelt! &gt; Am quite keen on learning SQLAlchemy as well, hope to do so within the next few weeks. I ended up attempting to teach myself the raw basics of scrapy and sqlalchemy in the same weekend, as scrapy relies on sqlAlchemy for it's models. Of course, it's taken much much longer to get familiar with the incredible intricacies and features of both, especially sqlalchemy. The coolest thing I discovered from sqlalchemy so far was [automap/reflect](http://docs.sqlalchemy.org/en/latest/orm/extensions/automap.html). I literally said "oh wow" when I first connected to a giant legacy postgresql database with 25 tables each having 5-30 columns and I could get an object from each table with all of the columns, metadata, etc with a couple lines of code. This saved me a pile of time going back and forth translating the existing SQL definition into one that worked for the new system I was designing. Good luck!
Don't make fun of someone that has been in a coma having their brain damaged during it :P
Yes, I've made several Python desktop applications. They look almost exactly what every other Windows or Linux or Apple desktop application looks like, because I use wxPython and that produces *native widgets*, meaning the buttons, menus, choices, radio buttons, top level windows, cursors, combo boxes, drop downs, etc., all look as that version of Windows, Linux, or OSX *wants* them to look like (it's actually calling the operating system's code for drawing them). And that's true whether it is running on Windows XP/Vista/7/8/10 or Ubuntu/Mint/Debian/Arch/Redhat or OSX Leopard/Mountain Lion/Mavericks/Sierra, or whatever (although I haven't tested on OSX). (I only say "almost exactly" because in a few places I have used a few non-native widgets that are also included with wxPython, but these look very good as well). 
[Hiring] Remote Full Stack Developer - Angular Frontend / Django Backend at Irazoo / Sidemoney https://www.djangojobs.net/jobs/685/remote-full-stack-developer-angular-frontend-django-backend-irazoo-sidemoney-irazoo-sidemoney/ #python #django #backend #frontend #hiring
Working on a Mandelbrot set creation 
You can always plug your text into something like [this](http://regexr.com) and then practice your regex and see how close you are. If you need any more help, the people over at /r/learnpython are also fantastic. 
Sure. But it occurred to me that if there's a way to accomplish both, it'd be helpful. Definitely better than just the one way. 
Regards PDF: Another of the *Nice to have* things. The problem is, I wrote the original book using Leanpub, but my site uses Wordpress, and I have some of the book on Github. So the book is actually spread all over. *Groan*. I know it's my fault. I'll try to create a PDF, but not sure when. 
I think the question as you've posed it is tricky to answer. If you can find a prebuilt tool that does everything you want and you're in a time-crunch, I'd probably suggest you choose that route. However, pre-built solutions only work until they don't, at which point you're going to have to build your own anyway. If time permits and you're naturally curious and enjoy solving problems, Python is a great language for scraping the internet. 
You've essentially reinvented the wheel, you're better off using a well tested framework than your custom solution.
It's been 7 hours, how long do I have to keep looking?
I started doing the assignments of Andrew Ng course. I am a beginner in python and to the field of ML. So far it's been interesting and awesome but, time consuming. I need a help from you guyz. Being a beginner, I don't see myself building completely new from scratch by only learning ML and implementing it's algorithms. I would like you people to enlighten me with the scope after completing this course.
I always wondered about this. Isn't the whole concept of "truthiness" of values against this idea too?
&gt; Of course, if you need need random access to the data in a sequence, generators aren't going to be your friend. :) Or if you need it sorted 
If they aren't paying you already, don't do your brother's work for him.
Didn't give them the code. I just sent him the excel file I made in 20 seconds (mostly loading a gigantic file which should have been a database anyway) for him to show them, and kept it unformatted. It takes him about 90 minutes a week. From what he's told me, the whole thing can be completely automated, from downloading the emails and attachments to generating the files and sending them on. Kid spends two days a week doing those reports. He'll be back in three hours, and I'll see what happens. A part time job of his at another company has also been partially automated (I didn't want to bother decoding an undocumented database), and reduced his work from 30-ish hours a month to maybe 6? He's now looking to ask for more jobs like that, and hiring out people to do the physical tasks for him, which is kind of the opposite of what I was aiming for (relaxing and enjoying his time).
A generator is an instruction for creating the value. Not the value itself. The memory footprint of an instruction like that is constant. 
Can you give more detail on this please? (Without revealing too much personal information). Was there anything specific the guy didn't like? Was it just that he would have to read a book? Or that it was an ebook vs physical book? Or the book was intimidating? Or he felt he was too old to learn new skills? 
I started looking at the web page source to see if this might be possible. Seems like a combination of Beautiful Soup, Requests, and Report Lab, and someone with a spare weekend or several hours, could go a long way towards putting something together. A more practical approach might be to make all of the LeanPub and other source documents available and someone would be able to create a script to generate a PDF directly from them. Never having looked into LeanPub, this is highly optimistic conjecture on my part, but it seems like it must be possible!
He was just not really an engineer in the sense that he thought he was. He never completed a degree, just worked with machinery for a really long time. He recently purchased a laptop computer, and I think realized he was in way over his head because he said he would have to look at it later. When he came back later that afternoon he asked me what a raspberry pee was. Not kidding. He said pee. I assume he is taking the summer off because I haven't seen him in a couple weeks.
getting them to a publishable form is some significant work ... but yeah, if I can find the time I will some day.
It would be interesting to integrate that into your contacts list. Maybe if your friend is at the door but you're not home, you get a notification and can call him right then. "Hey I saw you were at the door, what's up?"
See the snipehunt package.
You should also specify the text encoding.
Scrapping ≠ scraping.
You may want to add better readme format. See https://github.com/noffle/art-of-readme
&gt; ["Scripts that are useful for me on penetration tests."](https://github.com/smileisak/PyScripts) * `packagedemo/classmodule.py`, `class.py`, `classmodule.py` seem to all be the exact same "calculator" that only supports adding, multiplying and power/exponent. * `argparser.py` prints whether verbosity and/or quit was "turned on" * `exercice_1_(thread).py` prints `thread a 0\nthread b 0` every two seconds (never incrementing `i`) * `fonction.py` prints a given line 5 times * `if.py` asks your name, prints a response and then prints the numbers 1-9 * `module.py` imports the "SientificCalc" class and prints `4 * 12` * `pack.py` imports the "Calculator" class and prints `10 + 20` * `signal.py` doesn't seem to work at all since you can't import `signal` from a file named `signal.py` and has an infinite while loop at the end `while True: pass` * `thread.py` doesn't seem to work at all since you can't import `thread` from a file named `thread.py` and has an infinite while loop at the end `while True: pass` * `while.py` asks your age until the given age &lt;= 10 --- Since my work does ***not*** involve penetration tests, I'm curious how these scripts would be useful for those types of tests? Also, PEP8. 
Why not LaTeX?
yeah i second this, you suck lol. most of the work was already done for you now you can finish it!
[Celery](http://www.celeryproject.org/)
That's not the scientist way!
Mewtwo
Sure, in a perfect world everything runs in a container. But much of the time that's not the case, especially when you're talking about little command-line tools (I'm not going to launch a new container every time I want to run [http](https://httpie.org/), for instance). For most companies, it is absolutely not worth taking on the maintenance burden of compiling their own version of Python; the distro will do it better and faster than you.
&gt;For example, `if (count)` reads more naturally like "if there were any" to me, than the stilted `if (count &gt; 0)`. You and I have exactly opposite intuitions about this case.
 if elegant_solution_i_cant_understand: dollar += dollar 
Wow. that was really clever. and now I how to implement tail -f in python awesome!
Requests + BeautifulSoup is a very common, and very effective combination for webscraping. You wouldn't be going wrong by learning them. Maybe throw Mechanize in there as well, depending on the target.
That's fair. It's subjective. I work a lot with low-level C code and seeing a comparison operator implies extra checks for sign after a subtraction, where it's just the natural zeroness I want to test. If you enjoy specifying types, Ada will let you specify that `count` is only for counting apples, not oranges, with a maximum of 1 bushel, and comparisons with a 0 of unspecified type should not be allowed, because apples and oranges may have different zero considerations defined elsewhere.
This is why "beautiful is better than ugly" is the first line... It's ok to be implicit if it's more beautiful to do so... this is the underlying principle that has given us beautiful things like truthiness, list, generator, and dict comprehensions, list, dict, tuple and set literals, chained Boolean expressions, context managers, decorators, generator functions, etc... For any convenient feature, you could simply be more explicit and implement the feature yourself, but the feature's beauty is what makes it preferable.
I will definitely check this out Thank you!
I've played around with Facebook Messenger Bots since they're meant to be the next big thing. Are you ready to know what your past meant? What is currently happening in the present and what is in store for the future? I won't spoil it but if you message my bot on Facebook, it'll be able to tell you everything you need to know. So go ahead and try it out. www.facebook.com/psychicbot Trent 
Isn't Ansible ruby based? I have used that as well.
You can write modules in Ruby I believe - but the core dependency of deployment is remote servers need Python 2 (although you can technically run "raw" ad-hoc commands without it).
I'm not getting any error technically, just sits there. If I add a timeout limit, it'll timeout. urllib.request.urlopen("https://ndawn.ndsu.nodak.edu/current.html") But urllib2.urlopen("https://ndawn.ndsu.nodak.edu/current.html") on python 2.7 works immediately. 
I'm trying to parse through the html code for the table on the webpage for weather data. 
That's a very good point, I have added it in my comment.
pythonprogramming.net /r/learnpython
weasyprint is good for converting html files into pdf if that helps. You might need to do some magic to get the contents menu working within the doc though
Useful function (for instance with the last section of DSP) is `enumerate`. Your code: filtered_freq = [] index = 0 for f in freq: # Filter between lower and upper limits # Choosing 950, as closest to 1000. In real world, won't get exact numbers like these if index &gt; 950 and index &lt; 1050: # Has a real value. I'm choosing &gt;1, as many values are like 0.000000001 etc if f &gt; 1: filtered_freq.append(f) else: filtered_freq.append(0) else: filtered_freq.append(0) index += 1 With `enumerate`: filtered_freq = [f if (950 &lt; index &lt; 1050 and f &gt; 1) else 0 for index, f in enumerate(freq)] In this case, though, you already have `freq` as a numpy array. There's probably a way to `np.ma.masked_less` and do the index range too? 
Sensible C compilers should have no problem optimizing `if (x != 0)` to `if (x)` even at the lowest optimization levels. Some treat them as complete synonyms: compare https://godbolt.org/g/vZKPgN vs https://godbolt.org/g/Oke130 . In Python, this can make a small difference in avoiding an unnecessary function/method call.
This is cool. I am thinking of a cluster of these on several machines without the hassle of deploying code, try .. except... , auto-retries, stats, notifications, etc. The latter part of the video reminds me of rxpy. Good stuff.
You can start with Requests + Bs4 (or lxml). Also, I suggest you try [Scrapy](https://scrapy.org/).
Spread good word? It seems like karma-gathering effort to me.
ahhh yes it was pandas. that's the one thanks!
pair grid, yes thanks!
What is a santander ? 
Hats-Off
Just fyi you'll likely get more responses to this over in /r/learnpython, so I'd suggest try posting over there. Good luck!
Reason it burns so much CPU and RAM is cause it's programmed in Java with the ol virtual machine, this kills it's usability on older hardware sadly. Some programs benefit from the computational speed Java provides, but it comes at the cost of the hardware taxations as mentioned above. If only it was programmed in C/C++ like Geany is for example those performance issues would melt away and Python dev's would have one mean IDE with PyCharm to work with...
Ty, posted there instead.
:D
JAVASCRIPT IS THE BEST! Spare yourself the beautiful soup hassle.
where u gettin weather data from? (am an atmospheric scientist / software engineer)
Hey! Daily Tmax, Tmin, precip, the basics from GHCN database by year in zipped up in cvs.gz files.
I figured it out a while ago 
Thanks for your response, all super poignant questions too! What this system does is play the role of a bond market api at no cost to the investment banker who designed it. His subordinates feed it new info from the MSRB site each morning and then pour through the excel spreadsheets it produces and navigate through its visuals to find information on the imported data on cusips, series, updates, changes, etc. It really does function but his main concern is run-time and making it look more interactable to his subordinates. The front end right now is composed of a main excel page that calls specific vba scripts like run or select series etc. I feel like Visual Studio might be fitting for this client if he wants to simply bring the software into the 20th century, but I also think python is totally applicable to the situation as well. I would compare the system to something like DBC Finance. edit: 21st century, not 20th century :0
why not to "classic" import ipdb; ipdb.set_trace() 
I don't have any examples for you but maybe if I tell you that selenium is used to automate/simulate user interaction with a webpage as opposed to the requests library which you can use to login/ make post/get requests would clarify things abit?
Well, and this is a bit of an understatement, Google Docs and Git have vastly different models for collaboration. I suspect that his family and editors are more familiar with Google Docs. Also, serious question: do you have enough control of the formatting and layout with `docutils` to actually get a book suitable for print publication?
If you've liked this then you should watch some of his full tutorials: * [Python 3 Metaprogramming](https://www.youtube.com/watch?v=sPiWg5jSoZI) [03:24:00] * [Generators: The Final Frontier](https://www.youtube.com/watch?v=D1twn9kLmYg) [03:50:55] * [Inside the Python GIL](https://www.youtube.com/watch?v=ph374fJqFPE) [01:01:03] * [Learn Python Through Public Data Hacking](https://www.youtube.com/watch?v=RrPZza_vZ3w) [02:38:22] * [Python Concurrency From the Ground Up: LIVE!](https://www.youtube.com/watch?v=MCs5OvhV9S4) [00:46:50] * [Modules and Packages: Live and Let Die!] (https://www.youtube.com/watch?v=0oTh1CXRaQ0) [03:02:34] * [A Curious Course on Coroutines and Concurrency](http://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-co.html) [Part 2](http://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c1.html) [Part 3](http://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c0.html) (bad audio) He mentions the tail -f trick here. Dave's the best.
That is what it was originally written for I believe but I have used it to construct and download images that a web app creates on the fly. After looking and looking for a way to interact with the web app through some sort of REST like interface and coming to the conclusion that there was no "baked-in" way to automate the process, I wrote a python function using selenium to walk through the process of clicking the right buttons, uploading the correct source file, choosing the specific output formats and downloading the resulting image for a set of about 100 input sets. This would have taken me the better part of a couple days to do by hand and I expected to have to repeat the process if the source files ever changed. With selenium it took about 10 minutes to run, and I could re-run it when the pipeline that produced the source files is run on new data.
Is that a lighter weight replacement to IPython? I'm not too familiar with that package.
If it is worth rewriting this in a different language, then it is worth rewriting it more or less from scratch. Use the excel spreadsheet as a high level guide to expected functionality and basic business logic. Use it to create a list of basic requirements, but don't rely on how things are actually coded to guide your decisions. If it does anything weird assume the spreadsheet is incorrect. Add the desired behavior as a question to your document. Once you have all that, throw the excel spreadsheet in the trash, and use your requirements document going forward. In terms of SQL, I would think about using python+sqlite, and if there are any statistical functions you might pull in pandas. I would not touch openpyxl, nor would I attempt to use pandas as if it were an abstraction of how a spreadsheet is supposed to work. 
First thing I would do is physically watch these different people using the system, then after they did their routine let them explain what they did (business wise but also wrangling the system *and its quirks*), and then let them walk you through it on their screen. Ask about edge cases and panic mode and how they use Excel to get their thing done. Little escapes and tricks they developed and cargo cult. I bet they have a billion little things they do and depend on that you have no idea about *AND WOULD NOT FIND IN THE VB SCRIPT*, especially if they use Excel as the interface (and in different modes as well, both main guy and his people and whoever else). And talk to the guy, endless talk. Keep in mind you probably don't know what they do and as a programmer it is very difficult to synthesize the ways users use the systems (not as intended! not structured! madness). Manage the expectations they have. Your problem is people, not code.
Story of my life. &gt; A naive solution is to search for a few items by hand ["sample set of 20"], tell management "it works", release to production. Interesting. With that example and dealing with large output like that. What's the best practice with dumping that information. Just a simple log.txt file? 
Hey hey, I'm first! My problem this week: I've hundreds of thousands of litigation-related correspondences. They need to be sorted, indexed, categorized and cross-referenced, but: 1. The lawyers sort documents by dates and filenames primarily. But these alone don't make for good unique IDs, as many letters or court documents can be issued in one day, and they often cross-refer to each other, or cross-refer across cases. 2. I can't extract or use the contents of PDFs, as the contents of these documents aren't immediately accessible without prior OCR'ing, and that is expensive and slow. 3. And in any event, as lawyers, the eventual cross-referencing still have to be manually selected/done in the end, for purposes of care, at least during the initial digization stages. 4. They only need proper reversible (to date) 'randomized' unique IDs for separating/identifying documents. So: 1. Using os/os.stat, shutil, UUIDs and Python's hex, I wrote a script to automatically generate unique IDs based on the filename's creation time (which never changes here) - they'll look something like this:" {_54cde5e8cad53}" 2. Hexes are a _bit_ more readable than integers alone, hence why I chose them. 3. I then add that hex part to the renamed files. So now any cross-referencing can be done by reference to the hexed-details. Arguably, I could have gone with the simpler approach of something just like time-based indexing, like '20170516-230713'. But that would, in appearance, 'clash' against the dates which are already part of the filename itself, so it was a no-go. 
You should watch all of his tutorials*
Continuing work on my Flask site (the Python is pretty sound, but the HTML/CSS needs some polish). Otherwise, beginning to dig into all the Python stuff from that one Humble Book Bundle a couple months back.
Do you remember the jasper project? The JARVIS like program on the Raspberry Pi? Well I had a lot of problems putting it all together and making it function properly. Once I got it working, I found it was missing a lot of functionality that I wanted. So my project is building my own jasper. My idea is to run scripts (or I call sensors) on threads* to get user information (wifi, temperature/humidity as well as other arduino projects). This data could then be used in various modules. I'm using google TTS because it sounds less robotic. And so far, the program says hello when I walk through the door via wifi as well as announcing when the international space station is going to fly over. I'm currently using the facial_recognition library to better assess who is home while simultaneously trying to build speech to text and integrate CleverBot. I'm learning a fair amount of git branches at the moment. * using threads because some sensors take a few seconds to complete. 
Sounds easy! Let us know when you have it all done!
Nicely worked out. Saving this for later!
&gt; While I appreciate the ingenuity, what's wrong with git and the Python docutils? My editor and most of my beta readers are non-technical. Just people who want to help me out. Using `git` and `docutils`, even on GitHub which simplifies things for them, raises a barrier of entry for them. Sure, most could overcome it, but then instead of helping me with my books, they are having to learn a new skill. Which means the amount of contribution would shrink. For what it's worth, this applies to my fiction writing, not my [writing on technical topics](https://www.twoscoopspress.com/products/two-scoops-of-django-1-11).
This is a pretty cool idea.
My [technical book is written in LaTeX](https://www.twoscoopspress.com/products/two-scoops-of-django-1-11). The formatting control it provides is awesome. That, combined with git's history, works wonders. Our big problem is getting our customized LaTeX to convert to HTML for migration into epub (and then to kindle). As powerful as Pandoc may be, from long experience trying, it won't run on Two Scoops of Django's customized LaTeX template. Which means falling back on `htlatex` which kind of sucks. :'(
Writing a small program that downloads and creates a list of specific files on a server using REST API calls. Results come back in XML/JSON, so have been learning to parse this and then write it out to a file. Also working on some twitter and instagram post scheduling services, to create my own mini app that allows for scheduled posts. And also working on getting Jenkins setup on my RPi. My intention is to eventually have this connected to the python projects that I am pushing to github, to experiment with CI. This will also include getting automated tests up and running (in python, of course). I am still learning, so not entirely sure what will happen here, but I'm just trying to replicate a "real world" environment of software dev as best I can with minimal resources. I'm thinking about these and other projects that I can start working on, to continue to learn more in and with python.
Have you seen Melissa? https://github.com/Melissa-AI
Why not add that on pdbrc? 
You have already gold advices about UX / user centric design... One idea could be to create a view and call the original solution behind it, it could help you to begin with a feature complete solution and do tests easily. Then adapt views, recode features and iterate all along with some users.
This is amazing!
Possible yes... But that possible would probably require a custom python implementation or transpiler, or a ton flight hand crafted, optimized libraries.
Thanks!!
Reading all the comments in this thread, it sounds like an issue with your python3 install. I'd suggest removing it completely and reinstalling it. Run on my own machine in python3, this works just fine: `urllib.request.urlopen("https://ndawn.ndsu.nodak.edu/current.html")`
This is a really interesting proposition and one that I suggested given that an API exists for this purpose(but the cost is astrnomical) and I have experience with javascript. The head client on this seemed turned off by anything web based but there may be hope yet. 
Could I messsage you privately or come back here to make inquiries about your projects utilizing such a GUI as my work progresses? 
My employer doesn't define, set up or enforce my dev workflow. But they do determine what computers/VMs I use, how I access those machines, and so on. This is in order to ensure consistency in development, ease of updating, and matching production as closely as possible. My wording may have been unclear, but most developers likely work under constraints dictated by environment/the employer - whatever they may be.
A shooter where the player can only move up or down with the mouse and clicks to shoot infinitely spawning enemies coming from the left. It used to be an asteroids clone but I figured this would be easier while still being satisfactory. Also I figured out sprites are a thing and have made my code look way better.
Sure, it's a small enough file, so just pasting it here. import requests, os, bs4 url = 'http://xkcd.com' os.makedirs('xkcd', exist_ok=True) i = 0 while not url.endswith('#') and i &lt; 5: i += 1 # Download the page print('Download the page %s...'%url) res = requests.get(url) res.raise_for_status() soup = bs4.BeautifulSoup(res.text, "lxml") comicElem = soup.select('#comic img') if comicElem == []: print('Could not find a comic image.') else: comicURL = 'http:' + comicElem[0].get('src') # Download the image print('Downloading image %s...'%(comicURL)) res = requests.get(comicURL) res.raise_for_status() # Save theimage to ./xkcd imageFile = open(os.path.join('xkcd', os.path.basename(comicURL)), 'wb') for chunk in res.iter_content(100000): imageFile.write(chunk) imageFile.close() # Get the Prev button's url prevLink = soup.select('a[rel="prev"]')[0] url = 'http://xkcd.com' + prevLink.get('href') print('Done') 
Very cool! I love the fact you took the time to make it graphable. 
EDX will start a new round of the [MIT's Introduction to Computer Science and Programming Using Python]( https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-10) by the end of this month. 
Oh, thanks! Looks fantastic, wish I've only was able to read at least half of it :D
Good post and each aspect well discussed - I'll be taking away a few things too!
Hey, I've been in your almost same position, and am doing something very similar to this at the moment, in a different area of debt-oriented finance coming from an excel background. Having rebuilt some pretty large VBA scripts, you'll have to really start a lot from scratch, but this won't necessarily be a bad thing. If Excel integration is required, your best bet (for finance and modeling at least) is going to be a fully integrated solution like Pyxll (over DataNitro), which can also come complete with the excellent QuantLib library which is pretty excellent for what it sounds like you'll be doing. If you're looking for a free Excel/Python integration, you'll want to use the xlWings package which is included in Anaconda. As mentioned in other comments, you'll really want to take the time to map out the logic and the connections of the program, then rebuild it likely in an OOP fashion. Lastly, on Pandas - it looks like a spreadsheet replacement, but it only really is in specific circumstances. Pandas is excellent for data analysis, but for building/replicating financial models, you'll probably want to focus more of your efforts around NumPy.
Lacking real documentation. Please add some.
I created several GUIs on Windows using wxPython that were originally based on VBA on top of Microsoft projects (Excel / Access). It is not hard to do so. And the resulting applications usually ran just fine in Linux to boot.
After spending 2 hours in inkscape trying to align everything by hand for the ['amputation' graph](https://www.amin.space/blog/2017/5/elemental_speller/directed_acyclic_graph.svg), it was totally worth the time to implement that feature :)
As someone that has done this a few times: 1. Don't ever mention Python, your stack, etc. They *don't care*. Tell the users how this will benefit them, tell the managers how this will save them time and money. You could write it in Assembly as long as the users and managers are happy. 2. Use WinPython-Zero as a base and distribute that as a complete package. The second you say "Install" you're going to lose 50% of your user base. If it goes beyond that and "oh just open this command prompt, type pip install git+http" you've lost another 49%. And if your solution requires Admin access for most large corporations you're dead in the water immediately. Right now my tools are distributed with the following folder structure: CorpPython-64bit-3.6 &lt;- WinPython extracted, "Corp" being your corporation to make it sound official. my_tool.bat my_tool\my_tool.py. my_tool.bat is just this: @ECHO OFF @call %~dp0CorpPython-64bit-3.5\scripts\env.bat @%~dp0CorpPython-64bit-3.5\python-3.5.3.amd64\python.exe "%~dp0%~n0\%~n0.py" %* Most of my tools are drag and drop, so if they end user drags an excel onto the batch file the whole thing runs. After you've tested it, create a zip. Put it on a shared drive and tell people to run it "Unzip where ever you want. Drag files to my_tool.bat". Anything more complicated than that and you're going to lose a lot of users. You can also put it on a shared drive where you have read-write access. Tell people to mount your 'tools' to a shared drive and then you can roll updates at any time. Plus in corporate america most people are very familiar with "Oh just mount \\fileshare01.corp.com to T: and run T:\my_tool.bat" (And distribute out a .bat file to do that as well). 3\. Use a web interface where possible. Thinking long term if this project succeeds it'll need to scale. By making it a webapp you can easily move it off of user machines onto a server at work. For most things if a user drags and drops a file to change it'll do it and return. If they just double click on the .bat it'll launch a flask front end that they can view in their web browser. When the time comes I can easily migrate that flask front end to real server. 4\. Make a version 1.0. It doesn't have to be pretty. SQL backend would be a nice feature but if your logic doesn't work and your users hate the front end it doesn't matter what the backend is. Save it for a 2.0 release. Same with most other 'features'. Rather than trying to reinvent what exists, find a new graph they'd like to make that isn't in the VBA and use the Python to make that. Show people that "This is the way to generate this graph" and you'll start getting feature requests for new stuff, eventually feature requests to update the old graphs, that's your time to mess with the VBA.
Site no longer available, if the listing is no longer available, would you consider deleting the post?
To use your local Outlook email account credentials, you'll need win32com library (which you can get [here](http://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32)), then after that it is pretty easy: import win32com.client as win32 outlook = win32.Dispatch('outlook.application') mail = outlook.CreateItem(0) mail.To = "email1@some_company.com; email2@some_company.com" mail.Subject = 'Your email subject' mail.HTMLBody = "This email was automatically sent via Python Script" mail.Send() Otherwise, you can always use the smtp protocol. Here's an [example](http://nbviewer.jupyter.org/gist/anonymous/e3f17a7df67d6ec7ee350186d105d839).
thank you!
Your API page needs some real world examples. You're currently displaying just output, as well how to integrate this in projects already running. I get it for the most part as I have used celery a bit, but seeing some examples of real world use would make this more digestible.
It does support lambdas https://github.com/kootenpv/natura/blob/master/natura/scanner.py#L19 . What's the more advanced syntax you can do rather than with `re`?
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [kootenpv/natura/.../**scanner.py#L19** (master → ea28908)](https://github.com/kootenpv/natura/blob/ea289083b727d5bfc47802f3d1c2abebcee84805/natura/scanner.py#L19) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhn4hqa.)^.
Thanks for your feedback. I think I'm going to add a "Quickstart" section and some examples of how to interact with the API using JS, Python, etc. 
Not something I've ever tried to do myself. My suggestion is to survey the space of cx_Freeze and things like (e.g. pyinstaller) to see if any of them support building stand alone shared libraries instead of program executables. If not I can see two ways to accomplish what you want 1) would be to modify one of the existing tools to support building a shared library, and 2) put all of your C++ code into one or more shared libraries and provide a python binding to the script that is given to a tool like pyinstaller can load your C++ code. #2 could be as simple converting your executable to a shared library and probably a single binding to Python for you existing main function.
I think that would be great. Very nice project since I've never been able to get Flower to really work. Please keep going.
I installed python 2.7 to run this. First I ran into importError: No module named pathlib a google search revealed i need to run sudo pip install pathlib I did that, now I'm getting ImportError: cannot import name speller How can I fix this?
Thanks for the note, did that. 
 'abacuscreated\s+.*?\s+\%s\s' match all lines where there is an 'abacuscreated' followed by one or more spaces, a short string ('&lt;', '&lt;=' etc.), one or more spaces, and a '%s' followed by a space.
Most places allow to book online times as well. I'd assume the Python script would use that rather than call...
This seems interesting, is there a difference compared to flower? 
oops I added it to all countries but might take awhile to take effect.
Minecraft performance is awful, that's not a good example
Flower is more of an "internal" monitoring tool. You're given a monitoring dashboard and an API for listing, triggering, stopping, starting tasks, workers, etc. You don't want to expose these to a client facing API. We wanted to expose an API that we could use on our front-end to keep track of the status of tasks triggered by our django backend. Another difference between the flower and the WSCelery websocket API is that flower expects you to open a connection to E.g `/api/tasks/events/task-succeeded`, so if we wanted to track status on a per-task basis we would need to open a websocket connection to every task event that we are interested in. WSCelery allows you to monitor to monitor on a per-task basis by opening a connection to `/&lt;task-id&gt;`.
He did. Close to the end
Sounds like Python 3. Pathlib was added in one of the versions of Py3. 
blank=True, null=True
Wow, did not know how deep format went!
Eve runs/ran on Stackless right?
If you can program this in Python and make it work on a single computer, you should be able to split that code into a producer and consumer part and use [Pyro4](http://pythonhosted.org/Pyro4/) to connect it all together. It includes [various examples](https://github.com/irmen/Pyro4/tree/master/examples) of distributed systems that create jobs and let multiple clients process them. Maybe you can adapt one of them to suit your particular situation.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [irmen/Pyro4/.../**examples** (master → e26caed)](https://github.com/irmen/Pyro4/tree/e26caede6286007dd838ec0c84d761d2b5e06576/examples) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhn8jja.)^.
In what sense is it outdated? It uses python 2?
I'm making a graphical implementation of Conway's game of life. Using kivy framework
I do a lot of web work so I write the same 3 lines a lot in the back end. ("/link", Link), + class Link(Handler): def get(self): self.render("/link.html") + {% extends "base.html" %} I do a lot of simple sites that need next to no back-end features so I write that probably 8+ times in a single project and it SOLELY just renders the page.
This is why you should probably simply $ ulimit -u 100 or even lower and avoid the issue altogether. I think you can make this permanent for all users (on Linux) by properly editing /etc/security/limits.conf 
check out jinja2 if you want easy to manage templates 
so how can i fix?
I was honestly saying that due to your post. It is "outdated" because of the version of Python, but it is definitely still useful in both production and training. The difference in Python versions, in my opinion, has to do with efficiency. The newer versions require less code for the same result.
You would need to use Python 3 to run it. I don't know if there are any additional requirements since I have not tried it yet.
for i in range
converting different data structures into easily readable formats 
Yeah
Oh well i am setting up a woocommerce webshop in php. So i am in deep too.
&gt; I'd say initializers with multiple self.x = x. Got an alternative to that? I haven't been coding in Python long and its something I started doing after I began contributing to a project that already did that in inits. It always felt strange.
Curse you and your 10 hours of interesting material just before going to bed!
did you mean 'fun' ?
through lots of trial and error I was able to build it with Buildozer on an Ubuntu virtual machine. The instructions that finally work for me are here https://github.com/kivy/kivy/wiki/Creating-a-Release-APK I also had to set my buildozer .spec log to 2 and constantly install files that were missing to get it to build. Seems setting up the environment and build process was way harder than programing the game and now that I have that figured out I am super excited to start adding content. 
Hey, Looking at your posting history, it seems like even though you are new to python, you are not new to reddit. Thus, I would strongly recommend reading the sidebar, including the part that reads &gt; If you are about to ask a question, please consider /r/learnpython For your question, yeah, someone could. But you could think about how to do it by yourself, maybe explain (on /r/learnpython) what you tried, where is your issue, and read about `for` loops.
Not sure the code for turtle but looks like squares of equal size rotated around a singular point. ☺️ Perhaps find how to rotate the squares 
&gt; From what I gather (correct me if I'm wrong), you're referring to python accessing C++ libraries? Yes. Not sure if you can do it the other way around or if you can the road is remotely well traveled.
If you develop in pure python, profile to locate performance bottlenecks, then reimplement just the hot spots in C++ wrapped in the Python API and then import the object code into python (CPython), you can have the best of both worlds. https://docs.python.org/3/extending/extending.html 
 For me, it's easily setting up arguments. def arguments(): parser = argparse.ArgumentParser() # various arguments return parser.parse_args()
You technically could do like def __init__(self, x, y, z): for k,v in locals.items(): if k == "self": continue setattr(self, k, v) But I wouldn't do that...
 log.info('var=%s', `var`)
Openning and closing connections and cursors
Just fyi, people are down voting you because this topic is pretty simple.
&gt;fuzzy algorithm &gt;literally just searches `netstat -ano` with a regex I don't think those words mean what you think they mean.
tip: checkout structlog...
What does this do? When would you use it? Genuinely curious, I don't think I've seen this idiom in python yet
Ah, got it! Yeah that seems pretty annoying lol they really should make that the default 
The fpm tool might not yet cover your reqs completely. BTW, the direct approach of creating the config files and running dpkg-deb would likely have taken less time than creating your post. https://ubuntuforums.org/showthread.php?t=910717 
\#! /usr/bin/env python
Now make a model of the molecule!
I .. umm... well... Right. *quietly starts checking the limits on my servers, just in case*
fuck no, usually the majority of my fields are required, and if it allows blank I want to specifically set that
Created a psychic messenger bot that can read your fortune. https://www.facebook.com/psychicbot
I wrote something to help with that: http://github.com/crdoconnor/pathq It's still a little sparse though. There are tons of options that need adding, although it's fairly simple to extend.
import IPython ; IPython.embed()
Try [characteristic](https://characteristic.readthedocs.io/en/stable/).
Try [docopt](https://pypi.python.org/pypi/docopt/0.6.2).
The best thing to do IMO is to use unittest/some other test framework and subclass the result class (in case with unittest it's unittest.TestResult)
[Characteristic](https://characteristic.readthedocs.io/en/stable/).
No I haven't but thanks! I'll check that out. Apparently she uses espeak, which is a little robotic for me. I'll give it a go because I may not have had the settings correct. 
To PyCharm users out there, you can just type "main" (without quotes) and hit Enter. Autocomplete will build this if statement out for you.
ELI5? 
I write my code pre-compressed so I don't have to deal with problems like that
I was actually referring to https://linux.die.net/man/5/limits.conf - have fun fucking up your own user, as long as it's not touching the important stuff
Hahaha dope xD
If you are fine with spending a little money, I definitely recommend Python 101 https://leanpub.com/python_101 Michael's book covers a wide range of topics and is very well written. The book is only $10 and is great introductory material. I'm nearing the end of it and already purchased Python 201. I've used what I've learned in the book to start introducing myself to Flask and start working on a blog for myself. 
 with open(path) as f: contents = f.read() it would've been nice to have `io.load_file(path)` or something Edit: TIL pathlib has it :D
I really recommend click for simple argument parser. 
I'm not very experienced but it would seem to me if you have the capabilities of doing such a project in Python you would be better off doing the project in C++/C# and implementing Python as a scripting language for some of the logic you want to toy with quickly. Am I guessing right?
That sounds interesting, will it be open?
They do, anyone who isn't using them should try it out 
Pyfilesystem has something similar (https://pyfilesystem2.readthedocs.io/en/latest/reference/base.html#fs.base.FS.gettext)
Nice - thanks!
Context managers! They're super
&gt;&gt; Characteristic from github page (6 march 2017) &gt;Characteristic is unmaintained. Please have a look at its successor [attrs](https://github.com/python-attrs/attrs).
Parameterized decorators with all the layers of nesting required and remembering how, where and when to use the wraps and decorator decorator. The correct way being: from functools import wraps def decorator(argument): def real_decorator(function): @wraps(function) def wrapper(*args, **kwargs): funny_stuff() something_with_argument(argument) retval = function(*args, **kwargs) more_funny_stuff() return retval return wrapper return real_decorator 
Still working on my Bethesda mod manager. I think I want to implement mod cleaning next. Haters will say I should pay down some tech debt. Maybe add a UI.
Its strength is that it is easy to read and very easy to write scripts. It can get you hooked easily. Python has a ton of libraries. Anything you want to do, is many times already done and you can just `pip install` it. This is both a pro and a con, since sometimes you want to something simple, but the library is overwhelmingly huge and covers all sorts of use cases. Ignore the "baby language" comments. Some experienced elitist people think that due to a number of reasons. Some people think that because they worked hard to learn programming starting with C, C++ and java, it shouldn't be as easy to others. Just be aware that there is much to learn. I cannot think of any other cons. It is a programming language and you can use it however you see fit. 
Import pandas as pd Import numpy as np df = pd.read_csv('boring_data.csv') 
 import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns %matplotlib inline from sklearn import preprocessing, linear_model import sys import os from datetime import datetime, timedelta I do a lot of data sciency stuff and make a lot of new notebooks to try stuff out. And these lines really start to annoy me :D
When first learning Python, two things stuck out as very ugly warts to me. 1. \^This monstrosity which requires explaining multiple concepts including package importing and "dunder" properties, and the fact it's using a magic string rather than a constant just screams hacky. Surely there's a better way. 2. On Windows at least, Python 2 used to (still does?) install by default to C:\Python like some DOS game from the 90s polluting my drive root. Correcting it to install to "C:\Program Files (x86)\Python" caused weird `pip` errors that took quite a lot of googling to work out. I think it came down to Access Denied to site-packages in the install location but the error message was cryptic. If you can't install to a protected location like that then the installer shouldn't let you, or it should install only immutable program files there, and site-packages somewhere writable. That reminds me, does Python still install to "C:\Users\[User]\AppData\Local\Programs\Python\PythonXY-32"? Is this the location Windows standards recommend? What's wrong with Program Files or Program Files (x86)? I'm assuming there's a good explanation for this and it's due to some limitation in Windows but sheesh, first impressions last.
Please no. The less magic, the better.
I wouldn't mind that for something like a better on_delete behavior, but blank=True, null=True is just not enough characters to justify it when it's split 70/30 or whatever. You're going to end up typing it plenty in one direction or the other.
Mmhmm. Zen of Python is a useful heuristic to improve code, but it's a scattershot approach. It treats code quality as a black box, IMO unnecessarily.
Trying to create a higher level api for github.com/wasp/waspy so that you can create endpoints using falcon like syntax. Waspy is an async web framework i have been working on specifically designed for json Microservices.
Have the same idea whirling in the back of my head but the pain is not yet big enough to implement it. :-)
Monstrosity, really? If you execute a file by itself its \_\_name__ is set to \_\_main__ So to get a main function you check that variable, seems rather straightforward? And for your second point, you pretty much answered it yourself. In the program files folders windows typically restricts your write permissions, which are needed for pip. That's why package managers like pip, rvm etc default to C:/ or %appdata%
`contents = pathlib.Path(path).read_text()`
Those who come from C, C++, or Java backgrounds often have trouble with Python's use of indentation for defining statement groups ("significant whitespace"), and consider it a "con". I personally find it liberating. I once worked on a C++ team that spent 2 weeks debating the relative merits of "where the braces should go" - with Python it is a non-issue.
That could become addictive, good work! I have always been interested in doing something like this for a hobby project. Worked fine in AUS
And the callback, that was planted, in my chain
This really should have been a single argument driving both behaviors. Blank should be a form concern anyway. What does it have to do with your model?
If you specify it in the model you never have to specify it in a form. If you have multiple forms then changing the behavior for all forms becomes trivial.
I see you haven't been a victim or "spaces vs. tabs" in python, yet.
Agreed on all counts. I quoted that pattern from the standard library docs because it answers the GP's question while making the drawbacks that come with it easy to see. The libraries suggested by others to solve this problem have the same drawbacks (while making them less obvious) plus one more: unnecessary external dependencies. Of course, there are times when quick and compact trump all else. import this :)
The thing is that the real expert webscrapers don't bother with a UI at all, just pure http requests.
[here, have mine](https://gist.github.com/Jessime/69df607e4ad5f1229528af2edebe6e70)
[Attrs](https://attrs.readthedocs.io/en/stable/examples.html)
But that's even uglier and harder/longer to type than the initial reptitive example
Too bad that `locals()` is the only way to dynamically get at those arguments; this would fit neatly inside a decorator otherwise.
Bruh you need to look up graphviz :P edit: took me about two minutes. Not quiiiiite as neat but not bad: digraph G { rankdir=LR; Am -&gt; P -&gt; U -&gt; Ta Am -&gt; Pu -&gt; Ta -&gt; Ti -&gt; O -&gt; N } Gets you this: https://i.imgur.com/pqoCAoS.png And of course the syntax is easily generated by programs :D
What's a venv? How would this help?
seconding attrs, it's great. Also if the cutesy method names make you irrationally angry (attr.ib, attr.s) there are serious business aliases (from attr import attrib, attrs)
structlog is one of those that I looked up a while ago and thought "this is neat" and then I never remember to actually use it until I'm already in progress.
99% of the time, if null=True (meaning your database requires a value), you also want blank=True (forms require a value, if the field is on the form at all in the first place). If null=False, you don't want blank=False all the time, but I'd estimate that is still what you want 70% of the time. Of course, every project is different. I may simply use fewer ModelForms in my work. Speaking of which, blank=False is only applicable to ModelForms, not all Forms, making it even less relevant for models. And moreover, I find the ModelForm abstraction to typically fail me quite early on, and resort to conventional Forms for flexibility, so I use them even less. Again, YMMV
&gt; deSMB siqq
Found that recently, replaced close to 100 lines of argument parsing code with a 30 line docstring including prose description. I'm never going back.
I &lt;3 IntelliJ IDEs
Every team I've ever been on has (rightly) gone with 4 space indents. Tabs are a vestigial relic from the days of the Royal typewriter, and their 8-column alignment is in the same category of historical significance and modern-day irrelevance as the CapsLock key, the computer card, and the buggy whip.
Quick tip: Since both versions will include a newline at the end of each line, which you often don't need, you can map strip around it like so: with open(name, "r") as f: for line in map(str.rstrip, f): print(line) This will also read the file lazily (since maps are evaluated lazily) and not clutter your loop body. edit: updated with str.rstrip, thanks u/ptmcg
I'm not sure I understand your question. In `argparse` if you specify your argument as `-x` or `--my-x` then it is optional by default. It can be made required by specifying `required=True` in the `add_argument` method. Any argument that does not begin with a hyphen is a positional argument (`integers` in the linked documentation is an example).
That has nothing to do with bash…
Starts an ipython terminal inside python to replace the normal repl. 
Instead of `pass # todo` I like to use the ellipsis `...` which is a value and thus valid function body in Python and heavily implies "here be happening things later".
If this is a simple load and report type of solution, might I suggest maybe spinning up something like [Re:Dash](https://redash.io/) and migrating the spreadsheet's data over to that? It's built in Python, runs on PostgreSQL, and it has a lot of nice features for simple reporting over SQL queries and Pandas. There are a myriad of ways you could import new incoming data into Postgres as well. /2c
Even in sublime text "ifmain" is a snippet. You don't need a full ide. Alternatively snipmate in vim.
maybe create a decorator?
[Partials](https://docs.python.org/3/library/functools.html#functools.partial) to the rescue! For example, I define the following for SQLAlchemy: from functools import partial from sqlalchemy.orm import Column PKColumn = partial(Column, primary_key=True, autoincrement=True, nullable=False) *Note: my syntax might be wonky, I didn't bother checking things. Sorry! 
God no. Pypy doesn't make CPU bound code execute any faster and for tight loops it may be slower. To build something like Overwatch in Python you would need to use Python's C API for most of the client work and some of the server side work. You could then use Python code to orchestrate the two sides, but truthfully your stack would look like Frankenstein's monster and you would do better to write it with a good COTS game engine.
Docs, links, gist?!?
yes. have an upvote.
Some weird self-compiling language that runs on bytecodes and allows a live environment that can be saved. I've finished the main "core" of the interpreter, as well as serialization/deserialization. Now, I'm working on the compiler that can compile to its own bytecodes, which might either break everything or fix everything.
Looking for the others in this series. Is it not on their channel? 
Or a subclass.
You could, but you can use embed to create an ipython terminal that's embedded in your application. 
Big product implementation in my company/team this week. It's unrelated tech but I'm using Python to do large data validations on the fly with databases and Pandas while installing.
Ahh. I see. Obviously not why you would be typing it too much, but that use case makes sense. 
What he said. cssselector is returning the Element itself (which basically is an object that represents the tag pair that was grabbed by your cssselect), you need to then specify what you want from the Element. For example: for item in links: print(item.text) This would give you the Text of the Element... or: for item in links: print(item.get('href')) This would print the href attr of the Element.
Thanks! This sub is the best
implicit none welcome to my hell and of course "import ..." when I can do things my way If you mean the actual code code and not forematter shenanigans, I find myself flipping arrays around way more often than I should
Yes I discovered it during this project. It's amazing! My program has an option to [export its graphs as dot code](https://github.com/mesbahamin/stoichiograph/blob/master/stoichiograph/speller.py#L109). That's how I made [this beauty](https://www.amin.space/blog/2017/5/elemental_speller/longest_word.svg).
A cross platform decentralized commandline peer to peer file sharing application using twisted. With easy file search, peer discovery, file download, directory download and resume download. Been working on it for a while now.
Ah I see! Awesome!
What can I say, I love Python. I had to debug somebody's Ruby today and it...well Ruby has it's place... That place might be 1998... I'm just happy for Python right now.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) http://i.imgur.com/nu2Gca6.png ^[Source](https://github.com/AUTplayed/imguralbumbot) ^| ^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md)
`re.Scanner` doesn't support line/column tracking. It's also undocumented and thus unsupported. It could disappear in any version of Python when the internals no longer need it. Further, the `regex` module implements full PCRE regexes with many extra features. This module supports post-processing tokens, too (admittedly needs to be documented). Pass a function to the constructor of this Lexer and it will pass all constructed tokens + the scanner itself as arguments to that function and use the return result as the new token. This is useful for attaching the aforementioned line/column information to the tokens if you so choose. Mine _only_ supports unicode, since in Python 2 `str()` objects are a sequence of bytes, not fully-fledged characters. This reduces potential bugs with input later on.
Good point, I updated my snippet above. Obviously this isn't *always* what you want, but I think it's a fairly common use case nonetheless.
Or just set up some editor shortcuts? Wrapping this kind of thing hurts readability. 
Try collections.namedtuple: from collections import namedtuple Point = namedtuple('Point', ['x', 'y']) A = Point(1,2) A.x (1) A.y (2) And so on They're incredible
Really? That's a pretty classic code smell. Why do you need indexes so often?
It's pretty clear in the installation prompts. Installing to your user folder is correct and recommended for a single user unprivileged installation. If you install for multiple users it defaults to program files. This is good and sane behavior, but it will be unfamiliar if you're not used to real multi user operating systems. 
TIL! That's really neat, I never realised all those code snippets with `...` were valid code.
If you need the index for a list of items you can also use enumerate: for i, item in enumerate(items):
Our benevolent dictator also says that PEP8 is a guide, not a strict set of laws. I personally prefer tabs, but as required, I use whatever the project is already doing.
Only in Python 3!
&gt; the difficulty in packaging a commercial product is a real negative What's the difficulty? 
Nothing's wrong with it, I just wanted to practice using sockets/network interaction because it's one area I was abit rusty with. Plus I didn't really know nmap had the automatic searching for specifics like web page title etc.
 #! python3 for me. I'm on Windows. Or, if I want to be an anarchist... #! python2.7 ... on Windows!! 
I'm working on exercism.io problems while waiting for MITx 6.00.1x to start
`from functools import reduce` For some reason I don't recall, our benevolent dictator decided that `map` belongs in builtins (although exactly the same can be done with a generator expression) and `reduce` doesn't. This is plain annoying.
You can automate these kinds of things in any decent text editor (well, Emacs anyway). Code expansion/templates/snippets are a poor man's macro.
&gt; `for i in range(len(my_list)` `for i, el in enumerate(my_list)` reads even better though.
I think if /u/pydry had renamed his repo instead of deleting and reuploading, that old link would still be valid. Not sure though.
&gt; Zip is nice for getting values out of the lists, but not setting them. How about: for i, (el1, el2) in enumerate(zip(list1, list2)): if el2 &gt; 0: list1[i] = el1 * 2
True. Somehow I never really grokked `enumerate`.
What kind of subreddit is for this?
That's so 2.7 dude. What are you a granddad?
That's quite the number of imports you collected ᕕ( ᐛ )ᕗ
Note for future self.
It won't work if I would like to treat my arguments as positional, for instance I would always have to write p = Point(x=1, y=2) instead of p = Point(1,2)
A while ago I noticed I was doing a lot of for n in range(len(mylist)):
Not so. Plenty of peoples first experience with Python will be writing a simple website based on Django, Flask or similar. These will require the use of `if __name__ == "__main__":` to create the application object to hook into the framework. It really is one of those situations where it just needs to be considered a magical incantation until the learner is advanced enough to understand properly. Much like Java is maligned for it's Hello Word application requiring `public static void main` which beginners will be confounded by.
making a sql injectable login page, or at least trying to, not that that well verse in php or sql, sad to say.
 from __future__ import print_function, division, absolute_import
They're also immutable, which isn't always useful.
Right, didn't occur to me that it would be in there. Thanks for that, time to uninstall and reinstall some Pythons :)
Git off ma lawn, ya kids!
I have configured Pycharm to automatically add this line to new files. And before I had keyword `fu` that autocompletes into it. Save yourself from boring routine.
IntelliJ is both the Java IDE and the platform that all of their other IDE's are built on top of. PyCharm, RubyMine, etc. are just plugins for IntelliJ.
whoops, yes that's the one.
Thanks.
They're still tuples which can be bad.. (plus what lw9k said)
But if you like to do that you're part of the problem :P
For Python, PyCharm is the way to go (although it is written in Java and has pretty high memory consumption, it is totally worth). Saves a lot of time and has a neat code and syntax checker.
Code is worthless. Just a wrapper for peerflix * dont sudo pip install * FU and torrents * is not a library
It re-imports your imports if their source code changed. In other words, you don't have to restart your kernel if you change the code in an imported module or package.
A bit late to the party but: import logging logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s')
Bleeding edge... I see.
Alternatively, use XPath rather than CSS and select `//a/@href`, it'll return a list of [string-like objects](http://lxml.de/api/lxml.etree._ElementUnicodeResult-class.html).
If you want to do a bunch of stuff with sockets, I watched an interesting YouTube video about python coroutines for asynchronous tasks. If you can't find it lmk and I will dig it out of my browser history. 
Thanks for the pointer, I'll have a look and I'll let you know 
Cheers ! 
You changed my life
Your analogy doesn't really hold. The usage of tab to align is not comparable to the usage of the capslock key, the computer card, or the buggy whip. 
&gt; On Windows at least, Python 2 used to (still does?) install by default to C:\Python Python 3 did this up through v3.4
Well I strongly believe that Python requires more attention, knowledge and discipline because it is easier to introduce errors and its harder to use all its fancy features correctly (for starters, generators and coroutines).
In one of my Django projects, I have a custom model that every other model inherits from. In that same file I have `b_n = {'blank': True, 'null': True}` and I simply import it along with the base model and unpack it where needed. When you have a lot of models, it actually does same some time and sometimes even saves me from wrapping lines.
 with open('bla.csv', 'r') as bla: for lines in bla: blabla = bla.strip().split(',') I mostly work with biological databases, most of my time spent is with restructuring data. 
If you never end up using i as a variable you can use " for _ in range" and will do the same thing
I've always wondered, what do you actually do with the first argument to the namedtuple function, 'Point'? Can that be anything? Do people ever later refer back to that? I assume when you create your object A the 'Point' that is being referred to is the one that your're assigning the namedtuple to. I use namedtuples occasionally, but always have to remind myself to add that (seemingly) extra argument at the front.
You may be interested in [Snippets](http://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions/snippets/README.html)
It's doing Python Magic(tm) to dynamically create the class, and it needs a name for it :)
Does not quite work (in python 3) as `zip` is an iterator, and you can't modify a list during iteration. So you need to wrap either the zip or the enumerate in a `list()` call.
Most of my `__main__.py` files still have that conditional, just from pure habit.
I don't know about this week, but yeah. I want people to be able to select names in articles and flag them for annotation, and the site will try to fetch a wikipedia summary + thumbnail and make the name click-able anywhere it appears from then on. So I need people to do the heavy lifting. :P
Anyone who uses the phrase "baby language" is themselves a baby. The same applies to all other accusations of childishness. 
kill it. main doesn't need it because it should only be invoked with python -m
Any time you write this, you're doing it wrong.
/r/learnpython Post the code you already have, otherwise you won't learn anything.
Whoops I mixed them up
I use vim and Visual Studio Code. Both support snippets. For vim I use [ultisnips](https://github.com/SirVer/ultisnips). In VS Code find "Open User Snippets", and define your own snippets.
for **word** in words: (singular)
r/adviceanimals?
yup, it is the former. local machine. thanks :)
 with open("file.csv", "wb") as csvfile: ...blah blah blah...
I don't understand what you mean. `zip()` returns an iterator, and so does `enumerate()`. But the assignment is just a call to `list.__setitem__()`; it has no bearing on the iteration. That's the reason for the `enumerate` in the first place - you need the index to modify the list.
`json.loads` deserves its own line
I have been facing the same problem as you. I started out with Qt as it was something I was familiar with from my work in C++. I eventually ran into the problem of having to extend or overwrite various components that I could not find functionality with in the default set. I was also finding that how everything worked was a little restrictive for my tastes. Long story short I bit the bullet and finally tried creating a UI using web technologies. To start with I had tried this a few times and I hated it, I couldn't make heads or tails of where to start or how to get where I wanted to go. This is the "stack" I ended up creating to make things work: * Django (this is the python library that lets me actually use the web tools I want). * vue.js (this gets me reusable HTML components, it took me forever to figure this one out). * CSS grid (this gets me qt like layout control (rows and columns drove me insane!) * [vuematerial](https://github.com/vuematerial/vue-material) (I am a sucker for Google's Material Design) While I haven't used it you may want to look into: * [ChartJS](http://www.chartjs.org/) (makes your data very pretty). A list of all the awesome stuff available for [VueJS](https://github.com/vuejs/awesome-vue) **Project Structure:** project_name * project_name (this is what you get from creating the Django project). * front_end (this is where I keep all my html, js and CSS) * component_lib (this is where I keep the libraries I need the UI to use). A few notes: **Django:** * I normally ignore the database side of things. I haven't written any projects yet that need it but I like the "batteries included" part of it, plus being new to web dev it's nice to have something keep me in line with best practices. * If you really don't need a database and hate the idea of being constrained to a specific way of doing things check out flask it is the other one I came across but had a smaller community than Django Let me know if you have any questions as coming from a desktop only world this took me a while to wrap my head around. **Edits:** 1. Formatting
Man, there is no good excuse, if you repeate this code it can be in a library or in a logger configuration file.
keying stuff in
I've always wondered about that argument as well. Do things go bad if it's not the same as the variable name you're assigning the namedtuple to?
I mean if you are building Flask/Django apps as your intro to python there are TONS of things happening in there that you won't understand, but the point of those frameworks and the way they teach them is you really don't have to understand to make it work. If you really want to understand what is happening in a Flask app you have to have a really good understanding of imports, decorators, and jinja templates. All of which I'd argue are more advanced than understanding flow control using a variable check and dunder variables. 
I appreciate the share but the last thing the web needs is more ransomeware crap. I have at least 1 client a month who falls for this shit, more often than not they end up paying fml. 
React with Redux and Redux-thunk (for async actions) are the front end for a Flask back end I've been writing. Redux does have a lot of boiler plate, but that means you have to be more thoughtful of the structure of the app and that's a good thing IMO. Once that structure is in place though, you can add complex behavior to your front end very easily. This includes complex, interdependent actions, views that display portions of state, new parts of state, and so on. I know I sound like a fan boy but the above plus typescript have reinvigorated my passion for programming. Double bonus: if you are using typescript you can structure your events and their data payloads to be 100% type safe! 
 for w in filter(bool, words):
Don't like unicode_literals, eh? ;)
There's a csv reader in python's standard libs... Or, if you're using data: numpy.genfromtxt()
No, the Flask thing.
A webpack pipeline tool that will write the boilerplate for Redux actions and action creators by reading json files describing the types. It's my first time using &gt;2.7 I'm really enjoying Python 3!
web gui
Thanks. I did switch to %r at one point but ran into a situation where I didn't get what I wanted. Sorry, I don't recall the specifics.
I really hate writing command line arg parsing code, even with a lib. I want something that gives you a dict of args correctly parsed with 0 config needed.
Thanks. I have a terrible memory, but I'll try to remember to pm you when I have something live.
 s.lstrip(prefix)
To be honest, I kinda wish `map()` was hidden away in functools too. I almost always use list comprehensions instead, and they always seem more readable to me except in the most basic cases. Most of the time I'm doing something other than calling a straight function, so it'd be a combination of `map()` and `lambda` or `map()` and `filter()` ... but with a very readable list comprehension there's no need for the lambda and no need for the call to `filter`. Compare: odds_squared = [i**2 for i in numbers if i % 2] With what "functional programming" advocates would have us write: odds_squared = map(lambda i: i**2, filter(lambda i: i % 2, numbers)) 
Was the way to log when I started out with python (Automate the Boring Stuff). Never got around to putting it in a snippet but have done today now this thread has reminded me.
Good thing they have backups?
Also a static passphrase inside the code. CBC is a really bad choice though, while AES in general would be fine imho (after all there's hardware support these days).
Yup I am thinking to get a raspberry as Digital Ocean or similar service seems to cost a lot over long run for my limited use for now.
My first wholly original github repo. Someone posted a few days ago about having to calculate interest for a Comp. Sci class and I spend a lot of time looking at my personal finances, so I was inspired to create a library/script to make it easier to calculate growth. My goal is to eventually grow retirepy to use a flask server and have forms to allow multiple inputs to adjust the regular payment amounts at set intervals (since presumably as you get older you'll start making more money with raises/promotions etc)
PowerShell, one would assume.
It's really just a tad better than ``` public static void main (String[] args) ```
&gt;[**"How Do Python Coroutines Work?" [45:16]**](http://youtu.be/7sCu4gEjH5I) &gt;&gt;At Open Source Bridge and PyGotham in 2015, I demonstrated that you can code a Python 3 async framework in about a half hour. I start the demo by writing a callback-based async framework, built on non-blocking sockets and a simple event loop. Then I adapt the framework to use generator-based coroutines, which are cleaner than callbacks but still more efficient than threads for async I/O. &gt; [*^A. ^Jesse ^Jiryu ^Davis*](https://www.youtube.com/channel/UC5MSR011tHgM7cL3LL83DUQ) ^in ^Science ^&amp; ^Technology &gt;*^27,331 ^views ^since ^Aug ^2015* [^bot ^info](/r/youtubefactsbot/wiki/index)
true Went over all cases of that line in one of my scripts. 14 occurrences. All could be replaced either by enumerate or by direct iteration over mylist. Somewhy I was ignorant of enumerate on basis that it must be slower than range.
 def repetitive(): return repetitive()
If you could manage to book the tee time by timing a series of keypresses then I imagine it would be pretty easy to do. If you have to respond dynamically based on voice prompts, then it will be a lot harder.
My employer got hit last week. Fortune 500 company. We had machines get hit at corporate and even some here in my office. 
That mouse on 101's book page has a great beard! 
Thanks! I liked how it turned out
[removed]
I think everyone understood what was meant by the original sentence. I'm honestly more confused now than I was before.
Yeah! Let's make this thing great! /s
They didn't. I discussed this a lot with people here on Reddit after the presentation that quote was from was posted. Maybe more confusion is a good thing. Many people I tried to correct were 100% certain they were correct even though they were wrong. I even had one person claiming to quote the documentation while actually the text he pointed to directly contradicted his thesis. The point is that Python IS a bit confusing when it comes to arguments/parameters and most people are simply deluded that they know what is going on. I passed this article around at work and everyone seemed to have learnt something to their surprise. 
yes timing series of keypresses... is python best? or some other program?? im very new to the python... aka dont really know much at all
what do you mean by stored as uint32? Stored as what? as String, as binary representation, as actual int? 
I am learning Python from scratch, with no prior programming experience. Started yesterday and am already having a great time. My goal is to write a script for a Raspberry Pi I just purchased which will detect a current running through a wire and send me a text message. The current it's detecting will be the current that runs through the red interconnecting wire on a hardwired smoke detector system (dead under normal conditions, but carries current when one alarm is triggered, so all alarms sound). So hopefully if my house is burning down and I'm away I should get a SMS message!
I spend a lot of time in terminal on Windows. I use ConEmu to manage multiple PoSH and Bash sessions at the same time, through tabs and splitpanes. Will definitely give WinGuake a shot. Thanks a ton to the author!
beautifulsoup to scrape the HTML, and requests to download the files (can stream the download if the PDFs get a bit big). I hope i've understood your question correctly, but that's how I'd go about it.
A uint32 is an unsigned 32-bit integer. If you want to convert it to a float, just do float(your_var) If this is an array and you're using numpy, read your raw data and do np.asarray(your_var, dtype=np.float32).
that is scary. I've seen some ingenious methods for distribution. The best so far was one disguised as a jpg of a couple of cats in a basket. Opening the image ran the program and encrypted your drive.
IIRC, there is a Jupyter notebook extension called snippets I think just for this use case. EDIT: [link](http://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions/snippets/README.html) to extensions info. Sorry some1 posted it already.
I'm biased working for a company that makes backup software but I just don't get it. One crypto or one dead disk and you are hosed. Yes I know licensing can be expensive, but its cheaper than your whole.damn business.
A few weeks ago, Tobias who runs this podcast invited me on to speak. The episode is now up!
I am currently working on the EXACT same project. I chose to use jupyter notebook with ipywidgets. Each piece of equipment is represented by a box widget that contains other widgets (input boxes, selection boxes, etc) to interact with the bench equipment. I have another box widget setup to do some simple automation - iteration over user defined source voltages and load currents and measurements from the DMMs are put into a pandas dataframe and exported to an excel spreadsheet. If the user wants to do a more complicated loop for test automation, then they can just start coding in a new notebook cell.
Google App Engine might be an option too.
Is this common practise to comment **below** the code line?
I believe it will be 50% of the $29 purchase price, yes. But I will page u/fahimulhaq as he will know what's going on for sure.
This is what is imagine a nerdy hacker would say if he saw an amateur hacker's work 😂 I like it 
Vim is my default for that same reason. Snippets are larger blocks of code that can be tab-completed from a keyword. These should get you started: http://www.vim.org/scripts/script.php?script_id=2540 http://www.bestofvim.com/plugin/snipmate/ https://github.com/honza/vim-snippets
At least try to do a good job before submitting a morally questionnable shit
Thank you for your replies. The situation can be complex. The arguments can be three ways: file1 [union/minus] file2 [union/minus] file3 And this three ways, we need to wait in python after the first operation is finished, and get a temp file and union/minus file3. etc. And size can have options like: size -b file1 [union/minus] file2 etc. I am reading your links and articles, all very helpful. Thank you. 
And what about the if __name__ == "__main__" in the middle of the whole thing? Seems like the stuff below was an after thought
Iterating over a collection by taking N items at a time in a sliding window fashion. Not sure what the proper term for it is. In Ruby there's an Array.each_slice method, python itertools has: def pairwise(iterable): "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..." a, b = tee(iterable) next(b, None) return zip(a, b) Which is memory intensive so I either adapt that using `tee` with n&gt;2 or do something like for i in range(len(thing)-n): logic(thing[i:n]) But I avoid that because I always mess up ranges and get off by one errors.
Every-time without fail. We even had once client try to sue us till we proved we had provided written documentation on countermeasures they needed to take.
I think I need to do some manual parsing, apply some if conditions on the argv when doing the three ways. How do you think? Thank you.
Hmm.. someone down votes your comment there. Don't see why. I up voted so you won't think I'm one of those people who down vote all opposition. 
Web GUI + [pywebview](https://github.com/r0x0r/pywebview) to package it as a native app. 
Wasn't there a python project to have a new IDLE replacement out of the box? I recall seeing some design mockups for it.
Thanks a lot, this is a lot more useful than I initially expected 
I have found [VS code](https://code.visualstudio.com) very useful.
How about we get some pycharm deals going in here? That'd be great :D
1. It's not possible to somehow make a linear program run on multiple cores to make it go faster. If you have parallel processing in your script, you can use multithreading or multiprocessing to make it go faster. 2. It should be possible at OS level. Also, why?
is it atleast python 3?
Not a stupid question at all. You will write "templates" in HTML which will contain "blocks" These blocks can be filled by python methods. In general, your frontend will stay HTML and your backend will stay python and Django (at least how I have used it) bridges the two. I have tried to write my programs in a way that the front end doesn't matter they are just a display for the actual logic. [This article](https://scotch.io/tutorials/build-your-first-python-and-django-application) gives you a pretty good walk through of the process.
I think [Thonny](http://thonny.org/) matches what you want, I never tried it but it sounds cool.
Ah customers. Glad I'm not in support any more.
at first glance, you are missing an ")" on your def fullname(self): return '{} {}'.format(self.first, self.last
At least that follows common method syntax, in Python the syntax just drops out of nowhere.
You've also misspelled "init".
You also seem to have wet nips.
I still think that Learn Python the Hard Way is a great book for begginers. It transcends the syntax of language and instead focuses on critical thinking and problem solving. Also I have used python 2.7 and 3.6, and the differences are not that great.
Ahhh... What is the syntax? If it worked before try running the script with both python2 and python3.
There is now a [Python 3 version of that book](https://learnpythonthehardway.org/python3/) too it seems.
What do you mean by "not mixing types"?
What have you tried so far.
How did you execute the script? What command did you run?
`print('', listx)` should work just fine in python3
I don't think you can escape needing the parentheses in Python3 but, other than that, I think you should be able to do everything else you want.
This is a syntax error in python3. Try it with python2.
&gt; Is there any way to use 3 without changing how I use print? I need a quick and sloppy way of seeing output for something, so the fancy formatting and limitations slow me down. Sure! Just use 2to3 every time you want to run your script. In all seriousness just change the way you do things. Python 3 isn't Python 2, so you're going to have to learn how to do it the new way. Having print be a function instead of a statement is a very big deal (especially when you get into functional-ish programming with Python), so learn to love it.
I've been seeing more of it lately. I haven't done so myself, but I actually like the idea of it.
Not sure what your specific workflow is but you could use ipython. From the docs... 1. Auto-parentheses Callable objects (i.e. functions, methods, etc) can be invoked like this (notice the commas between the arguments):: In [1]: callable_ob arg1, arg2, arg3 and the input will be translated to this:: callable_ob(arg1, arg2, arg3) For example... In [38]: ,print 1, ['b', 3] 1, ['b', 3] Seems like a silly reason not to use python3 though. 
Uh.. you can put any object into python 3 print() and it will output it. Even if it's a bytes object, it'll print out the mem-ref for you. Example: &gt;&gt;from invest import Invest &gt;&gt;print(Invest) &lt;function Invest at 0x092AC1E0 and you can mix types in a single print: &gt;&gt;print('mixing types yo!', 59, Invest) mixing types yo! 59 &lt;function Invest at 0x092AC1E0
Have you tried Spyder? I find it great but my projects are rather small at the moment.
And there's contextlib.closing for when someone gives you something that needs closing, but has no enter/exit methods. 
If you want the first form to work (without the `,` at the start), you'll need to run `%autocall` first to enable it.
Thanks. I'm new to Reddit. Is it better etiquette to edit my post or leave it as is and expect they read the reply?
Remi is awesome! Thank you for showing me this.
 print(f'{x} {count}')
No matter which route you take, there's going to be a learning curve. I personally like using wxPython for my desktop applications. It has many widgets already built-in. However, creating it as a web app could be fun too.
I like WingWare's IDE. They have a free version you can use. The Pro version has a suite debugger shell though that you can use to interact with your paused application.
I'm doing dynamic layout with grid layout engine in Tkinter. If you design each frame as a component that is the same size. It is really easy to grid into different column and rows. This is probably the quickest route, but I think an HTML library might be the cleanest operating system.
You'll definitely need [Scapy](http://www.secdev.org/projects/scapy/)
I just think the 1's should be more serifed. Looks like "Python lol"
I guess it depends on how you look at it. You're the first to mention that and I can see it now too, but it's never bothered me
I second this. Based on what you're describing as desired functionality, Jupyter notebooks should be it.
Thank you too!
Eh...I can see my artist trolling me a bit. He is a funny guy
I will not judge your need to save an extra character when you *print-debug*, which you seem to do *a lot*, but if that is really what prevents you from switching to python3, this is the best I can do for you: &gt;&gt;&gt; p = print &gt;&gt;&gt; p("whatever", you, need, [to, debug])
You're basically creating a webpage. Then using that webpage to call python functions. As a simple example, let's say you have a python function that takes one parameter, and that function returns some data. def foo(bar): return "Yay for {}".format(bar) You now want to expose this to the web, so you make a flask project like so. from flask import Flask app = Flask(__name__) @app.route('/foo/&lt;bar&gt;') def foo(bar): return "Yay for {}".format(bar) It's the same as before with some imports and bootstrap stuff, but most importantly, the decorator on the function. Which basically says, call this function when you browse to /foo/ and pass what's after to the bar argument. Now if you start the flask server and go to your browser and put http://127.0.0.1:5000/foo/science on the url you should get the text "Yay for science" show up in the browser. Now all you have to do is replace the function with whatever function you have and you have access to your python functions through the browser. Next step is instead of manually calling the url, you're going to create a web app (html+css+js) that does it for you. You could make a button that simply fetches the data, or you could make a table that populates itself every x seconds according to the data, etc. If you're going this route, you're going to have to learn lots of new stuff, unlike python, there's often many ways to achieve the same result, which means that not everyone agrees on what is the best way to do things, which leads to many, many libraries that do the same thing. But if you're working alone, you don't have to worry too much about that and figure out things your way. If you don't have time/patience to learn new tech. You could just whip up an interface in tkinter and move on. There's nothing wrong with that approach either. You don't have to use the new shiny toy when the old one still works just as well :)
Let's see if a good spirit from JetBrains lurks in here and can hook us up with some one-time, new customers only discount for privat use :D 
I ran it through cmd, i just copied the directory and then executed the file.
This guy is awesome! His stuff is awesome!.
I actually switched from boost python to Cython (you should check it out) because getting boost to compile on supercomputers is awful. I'd recommend pybind over cython though, it's much less boilerplate and is better documented (I really don't want to migrate my entire code base again)
try whois.query(addr)
Thanks!
Try /r/learnpython. Also, since it is a check sum, I think it would be easier to compute the last digit, than to find a match and insert it into the file. 
how much crossover is there between python 201 and deep dive. I am an amateur python programmer and I feel python 101 is a lot of things I already have covered. the deep dive looked promising so at that price I jumped on it. 201 seems to share a lot of things. is it more in-depth?
Is it redundant to sign up for the course *and* purchase the book (201)? Is it supplemental or more of a one or the other? 
Pls report this as spam (check his comment history) http://i.imgur.com/oaRvzIv.png
Just so you know playing around with the variables after it has run is not an idle thing, it's a python thing. Just run your script with the `-i` option for interactive mode
Probably more of a one or the other. It really depends on how you learn. Educative is interactive but requires an internet connection. A PDF is neither of those things
Hey! I followed /u/ZeeD26's advice, but I adapted it for the &lt;p&gt;! Thanks a bunch. Edit: If anyone needs this solution in the future, I used for link in soup.find_all('a', string=str): print('seraching for hrefs') url = link.get('href') pdf_urls.append(url)
Obfuscation, specifically. It can be done with tools such as cython and Nuitka, depending on what packages you are using, but it's not a simple task - I have never successfully compiled a standalone PySide project. No doubt it's possible, just difficult. The whole concept of "obfuscation" doesn't really fit into the open-sourced/collaborative world of Python, and I'm sure it doesn't bother 99% of the people who use Python, either. It forced my hand to move a project from locally installed to online-hosted, which ended up being for the best, anyway (many, many hours of web framework learning later...).
I just used the executable to install Python, idk what pip is, how to use it, or how to reference it. What path are you referring to? How would I "use" pip tools to install Python? 
I also really care about the REPL and that is one of the most important features of a good editor for me. Is there a reason why Pycharm doesn't work for you in this regard? I've found their repl functionality to be better than the sublime/atom/vscode mix.
pip is a tool to install external python modules. it's job is to ease the process of "download the module, put it into right folder" to "just type pip install package-name" then let pip do the job for you. People code modules and register those modules into the repository of the pip to let you access their modules easily. (This is the idea basically, I don't know the behind-the-scenes) PATH variable is simply set of folder paths for windows to look inside. When you type any command in CMD, Windows will look into the PATH variable, and search the command(executable) you typed inside folders that are described in PATH. If you type "pip" and then hit enter in cmd, and if it shows an error like "unknown command", it means that the folder of the pip.exe is not added inside your PATH. In this case, you want to add the pip.exe's folder path inside the Windows PATH variable. Which you can learn how to simply by googling "how to set path in windows". I don't remember but pip should be already installed with python. You just need to find where the pip.exe is and following the steps you found in google to add this folder to PATH. After these steps you are good to go; Open CMD, type "pip install pygame" and then hit enter. It should display some messages and at the pygame will be installed. From there, you are able to import pygame inside your python scripts. 
The MySQL drivers you want to focus on are [mysqlclient](https://pypi.python.org/pypi/mysqlclient) (fork of the no-longer-maintained MySQL-Python) and [pymysql](https://pypi.python.org/pypi/PyMySQL) (pure Python driver w/ very broad use). Both maintained by the same person btw. Python database support is very competitive between SQlite, Postgresql and MySQL. The situation is also good for Oracle (cx_Oracle is basically the only driver) and SQL Server (pyodbc and pymssql are both OK) as well (though not as perfectly stellar as for the OSS databases). 
Sqlalchemy is very powerful but also overkill. Maybe peewee or ponyORM are better suited to start with an ORM. Personally I highly recommend you to use postgres. MySQL is for the quick and dirty stuff but can bit your ass later on. Also postgres let you use python itself as a database function and trigger language which can be very helpful later on. And it has complete unicode support as default out of the box unlike MySQL with its weird latin-swedish, utf8 and utf8mb4 bullshit. And text is better and faster than var(n) and you have ranges and timestamps with timezones and and and and ... ;)
Great! Thanks for checking it out. Feel free to contact me if you have any questions
Most of the issues have been in working on an image editing system. Needed to be able to display albums and create a basic photo editor that would display the image and allow user interaction and I just wasn't able to make it work in Qt but with web frameworks, I got a basic version up and running same day (mostly leveraging other people's work admittedly) 
&gt;Needed to be able to display albums and create a basic photo editor that would display the image and allow user interaction and I just wasn't able to make it work in Qt Uh, all Qt should be used for in that case is draw a picture, and that's not hard to do.
Guake user myself, wouldn't live without it. Such a time saver and makes managing multiple shells so much easier. If it's just as good for Windows users, they'll get a taste of speed shelling ;)
Use logging for logging, maybe? That saves you commenting/ deleting the lines for production. You should never be typing a right bracket, so the difference between 2 and 3 is literally the difference between a space and a left bracket. 
Reading r/TalesFromTechSupport means I'm not even surprised anymore.
'Well Documented' 
I agree with you. I was really hesitant to jump to web technologies for this reason. It turns out that it's not actually that much slower than my regular desktop applications. They are **bigger** but disk space is cheap. Mind you I don't have numbers so nothing "real" I can actually prove that statement with. Coming from an embedded system background this felt very gross to me and I am still not 100% comfortable with it. I have appeased the embedded systems engineer in me by keeping my logic as its own app that talks to the UI so I can always ditch web technologies if I cannot stand them anymore but so far they are growing on me but only as a display. The biggest thing I found lacking from Qt was design. I tried using QSS to make thins look nice but god its horribly documented. The number of times I have tried to figure what I can customise about specific items it drove me insane. The other thing I found missing was the lack of community and options. I needed to make things look pretty and started to expand and **I** just wasn't able to make Qt do what I wanted it to. I have seen many pretty and well-designed User Interfaces made in Qt but as a solo developed with tight timelines I needed something to lean on to get things where I needed to go and I couldn't find that with Qt. I would **LOVE** to be wrong and if someone can show me the way I am happy to come back to the world of Desktop UI development over web.
You are right drawing an image in Qt was easy. Doing live editing of the image, drawing galleries that show up as dynamic piles of images that is when it started to fail me and I was able to make it happen very quickly in web technologies. The other thing that pushed me towards web was Google Photos. Love how it looks and works and it helped me to realise that I might be able to get the functionality I am looking for out of web technologies for display. 
Agreed. `map` in functools would be okay, I just don't like that one of these two functions is in builtins and the other isn't. They go together pretty often in other languages, so one would expect them to be in the same place in python.
I may be missing something, but could you elaborate on what you mean my 'react'? What exactly are you making, and what functionality is failing? If you could post code snippets that would help as well.
And if you say `print(*args)` , this will work in both 2 and 3. I've used the debug level thing before too. Very handy to be able to show or hide lots of info by changing one character.
Just wondering what your application is, where BMP is preferable to any cross-platform industry standard, and a rare under-supported-even-by-Microsoft usage of BMP at that?
API Star (creator of DRF) + Zappa (CTO of gun.io) 
Which supercomputer have you had trouble with getting boost built on? I have not had any issues with OLCF (at ORNL) or LC (at LLNL). In any case, I prefer cython for wrapping c++ over boost.python.
OH YEAH I just watched that today! 
This would probably be better off posted in [/r/artificial](https://reddit.com/r/artificial). 
Growing tired of manually creating invoices for clients in google docs, I started building a time tracking web app. Considering this is only for personal use, I'm thinking about taking a step back and building it out as a cli app so I don't have to worry about hosting. 
Sciter is a great idea because its basically a 8MB browser designed for UI development. Unfortunately, the documentation doesn't really explain much other than dead simple stuff and since it requires a bit of boilerplating to get running, I've been stuck on simple issues with it for a while. I'm getting my issues solved little by little though. And its under active(ish) development so I think one day we will have good documentation. If you don't want to bring a hefty chrome installation along with your app, your should check it out. 
Here's a quick script I whipped up and it executes perfectly fine from the terminal with Python3. If you're using Python2 use `raw_input` rather than `input`. print("hello world") name = input("What is your name? ") print(name) if name == "testname": print("testname is great!") else: print("You are ok")
Thanks omento. The little details are important I really appreciate the help. 
Happy to help! If you are having trouble finding resources to learn from or things aren't making sense, just ask in /r/learnpython. It's a massive community that has done nothing but help thousands of people.
Thank you. I'll use /r/learnpython more often now. 
I have done something similar to what you need, dynamic widget creation depending on input data. Framework I used was kivy. You can see it working here https://youtu.be/GJ3f88ebDqc
one-liner: with open(fname) as fp: lines = fp.read().splitlines() It should really be 2 lines, but I like the brevity.
If you ever need to output new xlsx files, I can highly recommend [XlsxWriter](https://pypi.python.org/pypi/XlsxWriter). I created some complicated spreadsheets with this including multiple Sheets, Charts, Formulas, etc. This library works great. 
oh oh you're asking because this was in a python thread. I thought the question meant in general. Some of us are occasionally forced to use angrier languages than python ;)
I usually have millions of records
Grow up.
isn't that PHP framework?
/r/machinelearning or /r/learnmachinelearning are better suited.
I'm working on a typing system for an xbox controller. It's currently getting a rewrite because I never handled key-up events. https://github.com/Benhgift/chordboard When it's done I'll port it to oculus touch. All this because I want to touch type in vr and not be tied to my desk 
Oh, you're right! Those are even better. 
Yes. I'm leaning towards flask/flask-restful.
I just learned how to download the packages into sublime. I can now interact with my programs!!! Thank you for you info!
I just installed it! thank you for the advice! 
I think that looks really good. Will try it with some of my code.
What resource would you suggest for picking up on vuejs ?
Worth mentioning that the 3.6 class-based NamedTuple syntax is much cleaner.
but the immutability is the best part! :)
Looks really nice! I'll try and use it in my current flask project! 
https://github.com/edwardslabs/CloudBot Is the main repo and I suggest using that and not my fork. The jumproute plugin just takes the dotlan map and adds the system names to the end of the URL so I'm not actually hitting the dotlan site itself.
Even the sysadmin book is likely to focus on service and data management. A quick Google threw up this: https://code.tutsplus.com/tutorials/relational-databases-for-dummies--net-30244 . I read it and thought it was pretty good for an intro, especially the explanations of normally forms and primary keys, but mostly the explanations of what you're trying to achieve with those things. Internalising that tutorial would probably be a good start. It didn't cover indexes, though. Also it barely payed lip service to querying. You should cover those things. With a little more effort I'll bet you could find a more thorough tutorial. Something like a 'For Dummies' book would probably be ideal, actually. Whatever you find needs to be about databases in general, though. Material on a specific database will either be for sysadmins, or about esoteric proprietary features you aren't interested in. You don't want either of those. Incidentally, if you do manage to spend a few days on this and come out with a basic understanding of the relational model, SQL, and ACID, you'll be better off than 90% of developers out there. This is a fantastically marketable skill, and so many don't bother to acquire it.
I came here to recommend this. Assuming you plan on offering this as a web app what OP is doing should be easily modeled with django's ORM with the added benefit of things like basic security built in. Check out the Django Rest Framework as a way to create your service as an API. 
any way to make Python use this by default?
I haven't found one, but if you do come across something let me know! 
Oh, yes, good idea, I'll look into making filenames bold, thanks! 
Can you print the value of `addr` after the `input()` call? Maybe something is happening to `addr` to make it not a valid hostname.
&gt; So this library clearly has issues the repo hasn't had a commit in 5+ years. The last commit [here](https://bitbucket.org/richardpenman/pywhois/commits/all) says 4 days ago...
Well, you could argue whoever runs code from the internet he doesn't understand, deserves the consequences.
it posts back exactly what it should :/
sadly no cigar yes it "works" but it leaves out name, address etc, all the stuff all i get is "domain_name": "pbproduction.dk", "creation_date": "2016-02-25 00:00:00", "expiration_date": "2018-02-28 00:00:00", "dnssec": "Unsigned delegation", "status": "Active", "name_servers": "Hostname: ns1.unoeuro.com\nHostname: ns2.unoeuro.com\nHostname: ns3.unoeuro.com\nHostname: ns4.unoeuro.com\n\n# Use option --show-handles to get handle information.\n# Whois HELP for more help." where as fx. google.com yields all this aswell: "emails": [ "abusecomplaints@markmonitor.com", "contact-admin@google.com", "dns-admin@google.com" ], "dnssec": "unsigned", "name": "Dns Admin", "org": "Google Inc.", "address": "Please contact contact-admin@google.com, 1600 Amphitheatre Parkway", "city": "Mountain View", "state": "CA", "zipcode": "94043", "country": "US" 
Looks great, good work.
SDL only reads BMPs without any additional libraries. I'm writing a level generator for a game in C that uses SDL and want to be able to both read and save BMPs. I finally came up with an ugly hack to do everything in PNGs and call convert (ImageMagick utility) with a system command. It's not pretty, but it works.
I could see myself using them for my own personal use but if I was to share code I probably wouldn't, as I'm lazy enough about updating python and I'm sure others are too
i'm using them in small scripts i don't expect to run on development machines. [py-backwards](https://github.com/nvbn/py-backwards) is on my radar as a tool that'd allow me to write idiomatic 3.6 code, but i'm yet unsure how it would be used without violating the "edit and run" functionality i so much like about python.
i solved it!!!! DK hostmasters require a "--show-handles" option in their query! so i added my own options inside whois.py and then added the "--show-handles" before the input, and now it works perfectly! thanks for getting me on the right track guys, and made me look more into the different distro's :) great day to you all
Third time you posted this in /r/python... why? Also, this seems nicer: https://www.reddit.com/r/Python/comments/60scld/i_made_python_exceptions_a_little_better/
That seems horrifically unsafe... is there really a compelling reason why you can't include those small .py scripts and run them directly from local disk? Are you 100% certain your users will allows have internet access?
The two things I have found most useful so far are: * [AwesomeVue](https://github.com/vuejs/awesome-vue) A curated list of packages and tutorials on how to use VusJS. * [Electron Boiler Plate with Vue](https://github.com/bradstewart/electron-boilerplate-vue) An example program to get you off the ground with electron and Vue. 
That is the case for CPython, but its not something the Python language guarantees. In other runtimes, PyPy for instance, the file may not be closed until later.
+1 for VS code
You can try using an online [jsonviewer](http://jsonviewer.stack.hu/) to see the structure of the nested dictionary you want. In this case it'll be the following ``` lat = data['geometry']['location']['lat'] ``` PS - these questions should be directed towards /r/learnpython
Third? I thought it was the second, and I posted it because I just added per-frame variables, which I thought was great.
Just wanted to say that your 101 and 201 books are both excellent, they have been a tremendous help to me. Keep up the great work.
That's fair!
From my experience ZeroMQ is not for the faint hearted since it does supprisingly little for you. Study the guide and you'll probably figure out what's wrong. My shot in the dark: ZeroMQ sockets just throw away messages when the socket buffer is full, so you probably lost a request because you're sending to many and awaiting a response that never arrives because service on the other side never got your request.
Thanks. I'm so glad they were so helpful to you
Thanks for your response - Tried it, but I keep getting this error "the JSON object must be str, bytes, or bytearray. Not 'list'." This is the same error I keep getting when I try any methods to pull data. Also, good point, shall I remove this post and post there instead? 
Not as colorful, but there's actually a not-very-well-known module in the standard library called [`cgitb`](https://pymotw.com/3/cgitb/) that does this. See https://pymotw.com/3/cgitb/ for usage and examples. Its default, `format='html'`, actually spits out an HTML version of the traceback for use when debugging web apps (though most frameworks have a nicer version of this built in now).
I use them in all my utility scripts at work. I do a lot of tasks that would be hard for our customers to do themselves but easy for us to automate with internal APIs. I write all my little scripts with fstrings, then pass in the account info via an argument or paste it into my Jupyter notebook. Easy peasy job automation.
Generally, see refactoring and code manipulation in Emacs: http://wikemacs.org/wiki/Python#Refactoring
Python 3.6+ wont be widespread for years, so while the new functionality is cool, it will remain on the fringe for a long time to come.
Yes, but I wanna see the code where you try to see geocode_result 
 import json import googlemaps from datetime import datetime gmaps = googlemaps.Client(key='[key]') # Geocoding an address #geocode_result = gmaps.geocode('1600 Amphitheatre Parkway, Mountain View, CA') geocode_result = gmaps.geocode('1600 Amphitheatre Parkway, Mountain View, CA') #data = json.loads(geocode_result) #lat = geocode_result['geometry']['location']['lat'] print(geocode_result)
Generator, even. Nice. Better than the python 2 implementation.
I'm not sure this is a meaningful question the way you think it is? `range()` doesn't exist in a lot of languages, so the common strategy is to use a `for` loop and increment a counter. In the land of Python where generators are a thing, /u/rzzzwilson has it nailed.
That's calling the `str.format` method on the string `"{:02x}"`, not the `format` function. Also, /r/learnpython.
Not /r/machinelearning. /r/mlquestions or /r/learnmachinelearning
You're not wrong, its just that in some runtimes objects aren't destroyed immediately. So the file will be closed eventually...
I'm sure there is a good reason for this 
I see NLTK listed everywhere, but not [spaCy](https://spacy.io/) as much. I've used spacy for NER and some other tasks here and there and liked it quite a bit. 
You are calling the dataframe called train, but it doesn't exist yet. 
single quoted json is not standard. so the repr you get as output in like jupyter.
That would be it.. going to set that up now, thanks! 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Is it only me who finds expression f-string slightly funny, because it looks like a code word for f-word?
Nice list! 
SpaCy is great. Much more modern feel compared to NLTK
This is a hilarious post of yours aimed at someone who got in contact with the demoscene at the age of 11 and went from pascal straight to assembly. What we two have is a misunderstanding in communication, which is no surprise considering the text you wrote. Thanks for making me laugh. :) Anyhow, rereading what you wrote... i can only again state that most things you mention should be done in a shader. I guess youre not native english speaking, just like i'm not. It's all good, this was funny. :)
nobody here seemed to mention [wget](https://pypi.python.org/pypi/wget)
Yes, it is satire. Very much so.
The response is a list with one element and it's already a python object. I always do "for result in geocode_results" out of habit but you could also just take geocode_result[0] as the actual response. Then I iterate the first dict key result['address_components'] through a filter to find the element names I need, like postal code, county, etc. Gmaps is great but there is such a huge variation in the included keys that it's tricky to get exactly what you want over many queries. Lots of try/except attribute error blocks!
Yea, for something like this wget is a perfectly suitable tool and you could go either way. If you wanted to do more processing or organizing of the pdfs after downloads then python is what you want but I agree: wget also gets the job done pretty well.
Here's the dirty code I used to process a few hundred lat/longs an hour ago: for result in geocode_result: try: components = result['address_components'] except KeyError: components = list() for component in components: try: if 'postal_code' in component['types']: postal_code = component['long_name'] postal_code = postal_code.replace(' ', '') print("Postal code:", postal_code, "found for address:", address) except KeyError: continue EDIT: just to be clear, the actual print output of the code you supplied is the following: [ {'address_components': [ {'long_name': 'Google Building 41', 'short_name': 'Google Bldg 41', 'types': ['premise']}, {'long_name': '1600', 'short_name': '1600', 'types': ['street_number']}, {'long_name': 'Amphitheatre Parkway', 'short_name': 'Amphitheatre Pkwy', 'types': ['route']}, {'long_name': 'Mountain View', 'short_name': 'Mountain View', 'types': ['locality', 'political']}, {'long_name': 'Santa Clara County', 'short_name': 'Santa Clara County', 'types': ['administrative_area_level_2', 'political']}, {'long_name': 'California', 'short_name': 'CA', 'types': ['administrative_area_level_1', 'political']}, {'long_name': 'United States', 'short_name': 'US', 'types': ['country', 'political']}, {'long_name': '94043', 'short_name': '94043', 'types': ['postal_code']} ], 'formatted_address': 'Google Bldg 41, 1600 Amphitheatre Pkwy, Mountain View, CA 94043, USA', 'geometry': {'bounds': {'northeast': {'lat': 37.4228642, 'lng': -122.0851557}, 'southwest': {'lat': 37.4221145, 'lng': -122.0859841}}, 'location': {'lat': 37.4224082, 'lng': -122.0856086}, 'location_type': 'ROOFTOP', 'viewport': {'northeast': {'lat': 37.4238383302915, 'lng': -122.0842209197085}, 'southwest': {'lat': 37.4211403697085, 'lng': -122.0869188802915}}}, 'place_id': 'ChIJxQvW8wK6j4AR3ukttGy3w2s', 'types': ['premise']} ] The dictionary is wrapped in a list. 
Is Stampede a host-less phi machine where you can only run on the phi coprocessor?
In my application code, absolutely. However in any libraries I maintain - nope, those are all 2/3 compatible except where they can only support Python3 (asyncio based ones).
What's your background? If you already know another mainstream language I have found pluralsight to be the best, with a free 3 month trial if you have a (free) Microsoft account
Thank you!
If you don't mind waiting 10 minutes to load the project , waiting seconds after typing a word, eating RAM like Firefox , etc, etc
&gt; How do I navigate down to geometry &gt; location &gt; lat? You're close! The difference in this case is that the previous "address_components" key resulted in a list of values. The geometry key, on the other hand, are nested dictionaries, so we access them through calling the relevant keys. for result in geocode_result: try: lat = result['geometry']['location']['lat'] lng = result['geometry']['location']['lng'] except KeyError: lat = None lng = None print(lat, lng) If you want to iterate through dictionary keys and values you would have to explicitly call the dictionary's items: for result in geocode_result: for key, val in geocode_result.items(): # or geocode_result.iteritems(), if you're using python2 if key == 'something': # do something elif key == 'something else': # do something else 
Why not just use yasnippets?
You're more than welcome. Geocode all the things! 
Sorry for disappointment. It's more fun when you go in opposite direction - from the topic to the title.
How did you get this into such a readable format?
&gt; How did you get this into such a readable format? For reddit? I hit the spacebar a whole bunch of times :) four spaces indicates a code block, and I just indented from there. However, if--like me--you're frequently navigating JSON files, I actually use Notepad++ with the JSTool plugin. I cut and paste the JSON blob into my notepad and hit Ctrl-Alt-M. Instant readable JSON. EDIT: well shit, I can just cut and paste indented JSON directly into the comment box. Who knew? [{ 'address_components': [{ 'long_name': 'Google Building 41', 'short_name': 'Google Bldg 41', 'types': ['premise'] }, { 'long_name': '1600', 'short_name': '1600', 'types': ['street_number'] }, { 'long_name': 'Amphitheatre Parkway', 'short_name': 'Amphitheatre Pkwy', 'types': ['route'] }, { 'long_name': 'Mountain View', 'short_name': 'Mountain View', 'types': ['locality', 'political'] }, { 'long_name': 'Santa Clara County', 'short_name': 'Santa Clara County', 'types': ['administrative_area_level_2', 'political'] }, { 'long_name': 'California', 'short_name': 'CA', 'types': ['administrative_area_level_1', 'political'] }, { 'long_name': 'United States', 'short_name': 'US', 'types': ['country', 'political'] }, { 'long_name': '94043', 'short_name': '94043', 'types': ['postal_code'] } ], 'formatted_address': 'Google Bldg 41, 1600 Amphitheatre Pkwy, Mountain View, CA 94043, USA', 'geometry': { 'bounds': { 'northeast': { 'lat': 37.4228642, 'lng': -122.0851557 }, 'southwest': { 'lat': 37.4221145, 'lng': -122.0859841 } }, 'location': { 'lat': 37.4224082, 'lng': -122.0856086 }, 'location_type': 'ROOFTOP', 'viewport': { 'northeast': { 'lat': 37.4238383302915, 'lng': -122.0842209197085 }, 'southwest': { 'lat': 37.4211403697085, 'lng': -122.0869188802915 } } }, 'place_id': 'ChIJxQvW8wK6j4AR3ukttGy3w2s', 'types': ['premise'] } ] 
I end up cutting and pasting this one in every sqlalchemy script I write. I have no idea where I found it, but perhaps the sqlalchemy docs? from contextlib import contextmanager @contextmanager def session_scope(): """Provide a transactional scope around a series of operations.""" session = DBSession() session.expire_on_commit = False try: yield session session.commit() except: session.rollback() raise finally: session.close()
Shameless plug, you could try my library [bowtie](https://github.com/jwkvam/bowtie). You can link graphs through events and callbacks and it supports python 2 and 3. Admittedly, dash may be the better solution in the long term since it's backed by a company and I'm just one person.
Congratulations! :D
&gt; I have stuck with the '%' formatting because: same here, but for no particular reason. Since typically don't create strings using more than 2 or 3 variables, it works just fine for me. It's probably more a muscle memory thing. 
I'd love to see this published on python-guide.org! 
&gt; However, if--like me--you're frequently navigating JSON files, I actually use Notepad++ with the JSTool plugin. I cut and paste the JSON blob into my notepad and hit Ctrl-Alt-M. Instant readable JSON. &gt; &gt; This^^^
Huh, very interesting, I didn't know that, thank you.
could it be addict? https://github.com/mewwts/addict
That looks like it but I think it may had a different name. This also does the trick as well.
yasnippet is nice but it can't do all what this library does, for example it can not (AFAIK) capture the region and do something based on it. Besides this library can change some code with a single key stroke (like adding a decorator), and this is not the purpose of yasnippet. Use both :)
Actually I do have bowtie install apparently. I think I gravitated toward Plotly only because I had a number of plots already generated through there and I was trying to link them together. I'll definitely take a look at bowtie!
Have you seen [wrapt decorators](https://wrapt.readthedocs.io/en/latest/decorators.html)?
&gt; If you are about to ask a question, please consider r/learnpython or the learn python discord. Homework-style questions will be removed, and you'll be encouraged to post there instead. From the sidebar.
[removed]
Just add this to your .bashrc or .zshrc: alias py="python -m tbvaccine" Restar your shell/terminal. Then type `py myprogram.py` to run
I wish, but it's unnecessary. The pictures are all taken from exactly the same place, so it's simply a matter of counting how many of the pixels in the relevant area are above a certain brightness. 
I think I remember from an article or podcast with the spacy dev(s) that the goal is also a slightly different one. Whereas NLTK tries to focus on academic research, supporting various implementations, spacy focusses more on speed and efficiency
I do not doubt it would cause errors in crazy ways, but I kind of like the idea of the integers being iterable from zero.
Strings are a weird one. Blank is a valid string, but it's also nothing. Saying blank=True is like specifying a nonzero or positive int. 
The punch line is simple, Guido rules. Except some well trusted core developers are now accepted by the Python community as doing the BDFL's job on some PEPs. I haven't observed any problems yet with this approach.
What have the Romans ever done for us...
Pah :-) Give me [Coral 66](https://en.wikipedia.org/wiki/Coral_66) for loops and arrays that you could index any way that you liked.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) http://i.imgur.com/ncuJPOE.png http://i.imgur.com/twl3cu5.png ^[Source](https://github.com/AUTplayed/imguralbumbot) ^| ^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^| ^[Creator](https://np.reddit.com/user/AUTplayed/) ^| ^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^| ^[deletthis](http://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dhqsxpx) 
I suggest not if you have to support Python going back to 1.5. Before you laugh it was only a couple of years back that I heard on the main python mailing list that that little old beastie was still being used in production. Having said that you should be able to answer your own question, as only you know who will be using your code.
Sums up those bloody useless core developers perfectly, what **HAVE** they ever done for us???
Just to clarify, this only works if you're using iPython (or something similar), which I highly recommend. Edit: Learning about iPython and autoreload completely changed my workflow: tmux+vim+iPython ftw
Every chance I can.
Don't even need to type the full thing - "ifm" is enough
Uh it probably is a fairly commonly used tool. Think of how many devices scan for other compatible devices on your network. Maybe you have a python script to send data to a raspberry pi. It would scan your network for it.
It sets the __name__ attribute, which is sometime useful, for example in metaprogramming
Qt is the best simply by having the Qt Designer.
Yes.
Python 3.7 doesn't close for new features until the end of next January, see [pep-537](https://www.python.org/dev/peps/pep-0537/) so its not really fair to judge at the moment. What's the point of posting this incomplete list right now anyway? We're not anywhere close to the first alpha.
I was having the same thought recently. I use tyme, but there's just a good bit lacking like customizing invoices by client etc. 
Not certain on this, but I think nltk has much deeper associations with the academic community which tends to be a decisive factor in such things. 
Yeah, but tf has better documentation, training​, publications, support, etc than probably all of those combined.
I'm going to be there with a couple of other Reddit engineers. Lemme know if y'all want to meet up for dinner or drinks! For me: - 3.6 performance improvements - Gilectomy - pdb.set_trace() - immutable Python Edit: Let's meet at the [Sentry after party](https://blog.sentry.io/2017/05/16/pyconafterparty)!
And author of Keras, François Chollet also works in Google.
Pandas is bae
Unfortunately, I work in A) a large codebase which needs to be cross-compatible, B) some smaller codebases with py2 dependencies, so no.
First PyCon attendee here. https://us.pycon.org/2017/schedule/presentation/540/ https://us.pycon.org/2017/schedule/presentation/756/ https://us.pycon.org/2017/schedule/presentation/734/ https://us.pycon.org/2017/schedule/presentation/135/ Forgive me, I'm on mobile
Yes I use them everywhere, they're very handy. For my work code, I only need to support one Python version and for my open source code I only want to support one version (if you want me to support ancient python versions, pay me).
 a function can now have more than 255 parameters It's a brave new world.
Try ptpython. It's a repl too but has auto complete and syntax highlighting. It makes exploratory coding much easier.
We should code up another r/place for pycon
I am looking at dart right now. Google intended it to be a replacement for Javascript with its own dart vm, and then realized that isn't quite realistic. It can be transpiled to optimized javascript, run in their browser "dartium", or run in the dart VM. Dart is optionally typed(has a strong typing mode), integrates really nicely with angular, can be run server side, and now google is releasing flutter, so it will work with both iOS and android. The packages are getting there I think. The biggest problem I see with it is the adoption rate, but then again all of Google's ad platform is written in Dart, so it's not going away anytime soon. 
You're not doing anything wrong, it's just too complex for sympy to be able to compute the integral in a sane amount of time
Find a project!! Anything from Raspberry Pi Twitter bots to automating stuff at work. Every project you pick up will offer new challenges. Find something you're interested in and figure out how to use Python for it. 
[Thonny](http://thonny.org/) is what I wish IDLE was.
Hey, thank you very much :) I'm quite proud actually.
More sqlalchemy + mixins. Good stuff.
Next stop: click.pocoo.org/ :)
&gt; Added two new opcodes: LOAD_METHOD and CALL_METHOD to avoid instantiation of bound method objects for method calls, which results in method calls being faster up to 20%. (Contributed by Yury Selivanov and INADA Naoki in bpo-26110.) This sounds great! Method calls always were kind of expensive.
 print "How old are you?" age = raw_input() print "How tall are you?" height = raw_input() print "How much do you weigh?" weight = raw_input() print "So, you're %r old, %r tall and %r heavy." % (age, height, weight) 
Experiment! Use a sample of the data, go big until you start to overfit, then throw more data at it (including augmenting current data), tune, add regularization etc. 
Interesting subject! I feel pretty much the opposite. Some background: I am a network security consultant, I read some C++ in school and realized that programming was not my thing (later: yes it is!) So I stepped into networking instead, and as my experience grew and the feeling of repetitive tasks (cli adding rules, gui checking logs etc etc.. ) got too boring I started with python and I absolutely loved it. Some time later on I wrote a script that integrates with a local banks API for automated trading. Everything works fine and I continuously develop with python every day aside from my day to day tasks. I have two problems with python: 1. Most things that are fast is written in C and imported. Not native python. 2. There are so many libraries doing the same thing in 1 way or another, it's like the linux distribution problem, there are just too many sometimes. What I would like is a programming language that is natively fast and as beautiful as python. At the moment I am looking at golang and will probably move the later on but at present point I still need to continue in python as there are many good libraries that I can't leave at this point (numpy, scipy etc) I'm sure that I will still keep using python though, it still is awesome to me.
I hope to see more of those!
Can I help you with that?
You're the person behind hack.chat? I've used that before! It's really cool. I'll check out the bot later. 
It is called pre-alpha.
I'm not advocating that all arguments should be passed by keyword. I'm arguing that arguments with *default values* should be made keyword-only. In your case I would do `foo(source, target)` and `foo(source, target, should_check=should_check)` assuming that the latter has a default behaviour that we only want to change sometimes.
When I started doing some CodeWars and other challenges it sometimes almost felt like cheating how easy something was in comparison with other languages. Now that I sometimes have to code with PHP, I get frustrated with how more difficult it is in comparison (although I freely admit that a majority of the issues I am having may be because of my lack of PHP knowledge). 
If you're looking for something compiled, fast, elegant, expressive, with a standard library (especially a [GUI toolkit](https://github.com/picoe/Eto))... **F#**
I'm around. Also the PDB talk is by a co-worker of mine. And it will be awesome.
Shameless plug but for recommender systems you can use [Surprise](http://surpriselib.com)!
Someone suggested F# already which I think is a good option. I would also suggest C#. I think that C# has many really interesting constructs that you can actually bring back with you into python. Things that are done by necessity in C# that you can implement with discipline in python. I really enjoy writing python but I think learning C# had a natural tendency to cause me to uncover more interesting design patterns.
From the sidebar: &gt; If you are about to ask a question, please consider r/learnpython or the learn python discord. Homework-style questions will be removed, and you'll be encouraged to post there instead.
Might as well keep the daemon as a separate system daemon. There's nothing stopping you writing a further shell script to orchestrate running the two at the same time. Also, is there anything stopping you just running the python scripts via cron? 