I split between using VIM(not an IDE) and PyCharm. I'm learning how to use PyCharm and I'm liking it so far. PyCharm's VIM emulation is good, but sometimes there's things that are easier to do in VIM. You are going to see the usual comments to your question. Sublime(it's an editor not and IDE), PyDev, PyCharm, Wing IDE, TMUX and VIM. You are going to have to try some out and decide what you like. 
Run them and see which works. 
Cheers Buddy
Wing. I like it for teaching students because it is a nice mix of not being a heavy IDE and still has good features.
1. Use a different name for the list: like the Traceback tells you, this name is the name of a builtin function and not a list. 2. Create your own list (as per your other comment) 3. Read the sidebar: you are in the wrong subreddit. 4. Read your textbook/class notes/whatever you were given prior to being asked this question.
Atom, gvim
Vim with many plugins. If I have to use any IDE, I will choose PyCharm. Its support for type hinting and autocompletion is better than other IDEs.
vim in one terminal, python interpreter in another for testing things out and checking dir() or help(). I'd like to learn more about ways to save time in vim (e.g. running the visual selection through an interpreter or something), but most of the time it's not an issue. I downloaded PyCharm to try it out, but haven't given it a fair test yet. It's java based, which usually means I will find many things to hate about it on OS X, but I'll keep an open mind.
Visual Studio (with Python Tools) and PyCharm are both great IDEs. If I had to pick one I would go with PyCharm since there is a native Linux version. If you dont need an IDE, I really love my Komodo Edit for coding, actually I love Komodo Edit for really any sort of typing these days. Can't beat free. (Notepad++ is also very nice)
If I am doing a lot of Python work then I use PyCharm, but I've been doing a lot of Python + django + angular.js + chef lately and with that much language hopping I'm better off in vim.
Sublime Text 3. Mostly cuz I can't live without the features it provides like multiple cursors.
Are there any vim plugins for ipython?
What are things easier to do in VIM vs PyCharm's vim emulation?
Numbers are always the answer. If you can quantify how much time and/or money is saved in the long run by using better practices it will be easier to convince your management to look into it. That being said, if your management doesn't understand the price of technical debt, then it is probably a good time to start shopping around for other jobs before you end up paying the price.
I use PyCharm as well and love it. I was curious of other tools people used to see if I was missing anything but it seems a majority loves PyCharm as well.
I have an OCR plug-in in my browser called [Naptha](https://projectnaptha.com/) that is quite handy.
And it works with virtualenv which is good if you use different runtime/deps per project. PyLint/PEP warnings are nice too.
Is that from JetBrains? 
That's awesome! Do you have some kind of API I could use for the program? Thanks
Sublime text 3 (+Anaconda) or PyCharm. The later I use when I have to do some heavy debugging and pdb is just a nightmare for serious debugging.
the infamous learning curve
Textmate. I love how it's a fantastic editor right out of the box. Instead of tweaking you can start coding. It has some plugin support (not as much as Sublime) but it comes with a lot of features that have to be added with Sublime. Like Git support, a sidebar worth a damn and SSH editor capabilities. It also comes with tons of pre-installed packages and language support. To top it all off Textmate has nearly all the features that people mention why they love Sublime. It really is an underrated editor. Also Textmate has an active developer. Where as Sublime is pretty much abandonware by now. 
Vim has python built in, and one can do crazy scripting in it. I haven't dug, but there very well might by an ipython like plugin for vim. My friend is a vim wizard and becoming more interested in python. I've been meaning to look into this with him. Vim could be a full blown python ide I'm sure. Ipython implementing vim would be pretty awkward and a lot more work AFAIK.
yes, https://www.jetbrains.com/pycharm/
I don't live near Atlanta but I would definitely drop by if I did.
Windows (Vista+) has symlinks too, but they're called junctions/reparse points.
[It does. ](https://docs.python.org/2/library/sys.html#sys.path) sys.path.insert(0, "relative/path/to/some/package") sys.path.insert(0, "/absolute/path/to/some/module") import package as cheese_wheel import a_parrot
have you rooted your device? can you post a logcat?
&gt;If you're trying to imply that the python creators ought push the latest version, I &gt;guess I just don't see why. Obviously anyone who writes software would believe their most recent version to be the most sound, correct, feature-filled, etc. &gt;Lots of people on this thread seem insistent on the idea that we ought to promote &gt;the latest version. Not a single person has given a single reason that makes any &gt;sense for why that ought to be so. One would think that it would be axiomatic that the latest version is the best version (of anything) that builds the best first impression, etc. Also, it makes no sense to introduce someone to idioms, syntax, etc. that is already an evolutionary dead end. No, it's definitely axiomatic. Even you understood that in the context of Windows OS. I think you need to explain why the people who develop Python would believe their latest version if worse; they'd have to be intentionally and willfully taking the product backwards to believe that. &gt;I'll grant, if I take it as a given that the latest version ought to be promoted at the &gt;expense of the preexisting community How is it at the expense of anyone else? Even if it were, remember Guido's statement that the lines of code of Python that have been written pale in comparison to the total lines of code that have yet to be written.
Quick everyone comment! It's that time of the day where get to argue about editors. (I am mostly joking and use PyCharm and have been know to on occasion use Vim)
&gt; No, it's definitely axiomatic. Yeah... Got to disagree here. When it came out Python 3 was unusable for serious projects - the core language was ok, but module support was very limited and performance was terrible. I'm guessing you weren't programming in python in 2008. Python itself is an immediate counterexample to your axiom. &gt; Even you understood that in the context of Windows OS. Actually, when windows vista came out, it was a definite downgrade from windows xp. It was less stable, used more resources, and had very little to recommend it. A lot of people were very unhappy. Windows 7 was a bit better, but windows 8 is, in my opinion, again much less usable than windows 7. Of the last 3 versions of Windows to come out, only one has been an actual improvement. I do think that python 3 introduces some improvements that make it overall probably better than python 2, and certainly since that's where the main line development is, if it's not better now, it will be eventually. But the idea that the latest version of software is necessarily the best is just not correct at all. In fact, the two examples you gave (python 3 and windows) are perhaps some of the *best* examples of software that got worse (at least initially) with later versions.
I bet [this](https://code.google.com/p/tesseract-ocr/) might be close to what you're looking for
Yes! I've had a lot of problems installing it though... Pip says, 'could not find any downloads that satisfy...' If you think you know what I'm doing wrong, I'm all ears. I've tried downloading it and manually doing installing, but I'm lost. I found an online API that uses tesseract, but that's a compromise from what I want. 
I like to use Kivy for GUI stuff, but I always do it with Python 2.7, as it just works (I generally download everything from [Python Unofficial Binaries Page](http://www.lfd.uci.edu/~gohlke/pythonlibs/), Kivy and Pygame in this case). I think they do support Python 3 now though, but it's not quite as super simple as using the unofficial binaries downloads; see [here](http://kivy.org/docs/faq.html#does-kivy-support-python-3-x).
I handle pretty much all of the programming tasks for my research group. The other researchers know some matlab and that was what everything was written in before I showed up. I prefer python much more than matlab so I've converted everything to python and [flask](http://flask.pocoo.org/) web apps. Flask is very simple. You can use [Miguel Grinberg's Mega Tutorial](http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world/page/5) if you've never done any web dev. If you know the basics of MVC, then Flask should take an hour to become comfortable with.
lol! merci ! 
The fuck am I looking at here? 
It's better than ST2
Nah they thought this sub could help on the PEP/8 assembly language
/r/learnprogramming/ /r/asm 
Hey there, it's been requested that a moderator comment here. I'd like to preface this by saying I'm the newest and lowest ranked member of the moderation team, so whatever I say needs to be taken with a grain of salt, since most of what I do is clean up modqueues and fiddle with CSS stuff. I will implement something like this on the submissions page for the subreddit, probably using the built in "message on the subreddit" setting. I'll do something to make it stand out, similar to this. I could also put a hover effect on the submission buttons which suggest /r/learnpython as a place to go, though it should be noted that /r/learnpython has a pretty decent ruleset themselves; not all the posts that we have here could just be transferred over there. We don't currently have a rule about posting basic python questions. It's not super obvious from the sidebar, but beginner questions don't usually get removed; they just get downvoted (and frequently answered). The moderation team's stance is that this is intended behaviour; people can get the answers they are seeking without their question making it to the "hot" section of the subreddit. This is the core of how reddit is supposed to work, and I think if everyone can just get on board with "downvote the stuff that isn't interesting" then this is a problem that every single person here can fix.
I can't really speak for other GUI frameworks as I'm a relatively young coder and have no gui experience outside of Kivy, but here's a brief synopsis of what excites me most about kivy, and also some of the common gotchas. 1. Kivy is about as 'pythonic' as you can get, there is no underlying library in some other language that python is wrapping around. For performance kivy heavily relies on cython, and this requires a little extra C knowledge and a bit of static typing in the code, but it really is pretty much python. If you ever need to get your hands dirty with the internals, they will be readily readable and modifiable. 2. Cython! Cython is a really fun language to work with if you need to get a bit closer to the metal. For instance [here](https://www.youtube.com/watch?v=Aby7HzZcPik) is kivy doing full 2d physics calculations on several thousand sprites. The ease of interacting with both your python code and the C/C++ libraries you might be using for heavy lifting here is just phenomenal. 3. Pyjnius/pyobjus : Kivy do not just provide a subset of Android or iOS functionality for users as many other alternate environments for mobile development do. These two libraries allow you to pretty much automatically call into and interact with Java and Objective-C code from any library imaginable. Combine this with Cython and out of the box you are pretty much ready to build apps interacting with any Java, Objective-C, C, or C++ code you need. Kivy gives you much flexibility out of the box and has proven build pipelines to get apps deployed on all the major platforms. 4. The Provider Structure in Kivy is worth mentioning as well. Rather than having one Windowing provider, one font provider, and so on, Kivy is built to have a modular provider backend so that we can easily swap these out to suit platforms or enable desired functionality only available on certain providers. Kivy abstract out a core level of functionality we can guarantee everywhere, however it does not get in your way if you want to restrict yourself to a subset of platforms or providers and build an app making use of features specific to these apis. This also makes kivy apps very robust as we move forward because we can adapt to make use of new apis as they come. Kivy is about to complete a huge transition to SDL2 as our base provider on many platforms over the custom SDL1.3 thing we've been using through pygame. This will be completely seamless from the app developers perspective but quite significant on the backend. Kivy tries to get out of your way and let you do whatever you want, and to do that same thing on every platform possible, however there are some downsides that are worth noting: 1. Kivy is still a relatively young project (2008 to present!). Even with the core team doubling in size recently it is still just 11 people with probably 100 to 200 contributors total. This is much younger than other projects: GTK(1998), QT(1991), wxWidgets(1992), tk(1991). We have many areas that need to be fleshed out and we are missing common high level widgets found in other frameworks. There are some areas where performance is not quite up to par but things keep getting faster. I also think that the level of performance problems is quite overstated, it is quite possible to do some impressive things with default kivy. 2. Kivy does not try to hide OpenGL away. The graphics api is front in center in the way canvas works and this cuts both ways so to speak. You can really achieve some amazing stuff and pretty much do anything with Kivy's bindings, however some areas might feel a bit tricky if you're not familiar with graphics programming and the peculiarities of the openGL api. If you're just looking to put some data in rows and not thing about 'graphics' at all, it might be much better to use one of the other gui toolkits, at least until Kivy develop more high level widgets for these type of tasks! (Our current implementation sucks and we need some heroics done here) 3. We have got to update python-for-android. Right now it still only work for Python2. No one have had time to tackle this yet, there was some progress during GSOC2014 but it stalled out. Kivy itself work with python2 and python3, but the build chain for one of our biggest platforms is long due for renovations. Kivy-ios is getting upgrades at the moment and I'm sure python-for-android will follow this year sometime after we get 1.9 out. 4. It's going to be a little bit different. Kivy was built from the ground up to work with all types of input, with a heavy focus on touch. It is also much younger than the other gui frameworks, I like to imagine we have maybe gained something in hindsight? There is much grumbling about the KV language introducing a whole new thing, and yes it is a whole new thing, but I promise that it is worth it. It is fundamentally quicker for many UI constructions and the added knowledge inherent in the structure of KV allows some very clever things. I like to think of it as a sort of CSS, but it doesn't really categorize easily. If you really hate it you could avoid it entirely, but make sure to pay extra attention to the EventDispatcher documentation to understand how to achieve the event binding done automatically for you in KV lang. Anyway, kivy give you a lot of power, it's pretty much python through and through, it's built front the ground up for the many types of input found today, it works on all major platforms, and it's MIT, do what you want free. Maybe not the best match if you want to do some common desktop style apps that are really the core focus of some of these other gui kits. 
i know assembly, but you posted in python section
I don't use an IDE. Rather, I use Vim with a [few plugins](https://github.com/aspidites/dotfiles/blob/master/vimrc#L19). I do so because I'm most comfortable in a shell, and IDEs tend to feel a bit heavy weight. This is exacerbated by the fact that I use a tiling window manager. I have to say that GUIs with menu bars and a lot of chrome feel really out of place with the flat, border-less design of my other windows. 
The Qt GUI Designer outputs XML, which PyQt/PySide can convert into Python code that loads the GUI. So it's not 'C++ to Python', but rather 'XML to Python', and it actually works quite well. You can even do the conversion at runtime. The biggest drawback to PyQt is really the licensing, but that's likely only a problem if you intend to commercialize your software. It would be nice if PySide picked up some steam again, but at the moment it does seem dead in the water. PyGtk actually isn't that bad. In my experience, I ran into some inconsistent support for some of the C++ API, but that may have changed when they made the move to base everything on PyGObject, which supposedly has smoothed out a lot of issues. In my own work, we have made the move to Web GUIs, which is a shift I'm still trying to get comfortable with. One thing to understand is that depending on how interactive you want your GUI to be, the majority of your code may actually be JavaScript, and not Python. And desktop-like JavaScript frameworks are still in their infancy at this point. My personal preference is PyQt, but the trend does definitely seem to be towards Web GUIs.
Geany. Basically its gedit but smoother. 
Maybe something like [this](http://pytools.codeplex.com/) would interest you? [Video](https://www.youtube.com/watch?v=xf67RblhoBQ) (whole thing is relevant, but you may want to listen to 11:50~), [Article](http://www.hanselman.com/blog/OneOfMicrosoftsBestKeptSecretsPythonToolsForVisualStudioPTVS.aspx).
If I were going to do this today, I would go with [Kivy](http://kivy.org/docs/gettingstarted/first_app.html) since it seems to make some very nice UIs possible. When it comes to non-MS desktop apps, I have previously worked with Tk and [Fox](http://fox-toolkit.org/) and while those are workable and capable, I really didn't find them to be extraordinarily easy enough to use that I would recommend them. YMMV and all that. Good luck! Edit: On second thought, Tkinter docs have really improved since I used it (around 2000), and it seems to have been keeping up with the times as well. See [this](http://www.tkdocs.com/tutorial/onepage.html) for a nice guided tour.
I'll have to post it on Monday, as it's on my work computer. I tried practicing last weekend on my Mac by working on the seconds value of the menubar clock. Got the region screenshot bit working, got the CSV and file handling working, tesseract failed to recognize what I gave it, I gave up and went to bed. Tried plan B at work. Unfortunately the Mac script was also moved to my work computer. 
ok i posted it in asm http://www.reddit.com/r/asm/comments/2v5ntc/loops_and_pep8_help/ 
Seconded, I use Kivy for all GUI stuff as well.
It's a good start place and if you only need a super simple GUI then yes tkinter is great. If you want something complex or visually appealing then it's best to find an alternative I feel. I know from experience making an app with tkinter then changing it to PyQt after continuously making it more and more robust.
Kivy has a three version but I believe any deployment is difficult as it's not supported yet, last I checked anyways.
It can also generate a ui file that can build a script for the GUI that you just import into your main script, pretty nice once you figure it out anyways.
hey gurzo.. thanks for the reply... actually no my phone is not rooted but anyways thanks gurzo for trying to help me.. i better use the 'sl4a' its in python 2.7 and it worked on my phone.... thanks once again. ...
Splitting windows, switching tabs(buffers), I'm not sure if text objects work in PyCharm.
I use PySide with Python 3.4. Compiling the ui (files created by Qt Designer) and resource files isn't too burdensome and can be automated from a shortcut in your IDE or in a build process. There are also ways to dynamically load the ui files at run time or avoid them entirely by building the GUI programmatically. There is some discussion in PySide forums about their path forward for the project (it'll be a lot of work). Honestly I find PySide very capable despite not including Qt5 stuff (not even sure what I'm missing to be 100% honest).
Thanks for discussing this! I'm looking forward to trying this out. Correction: I think you meant "language independent"
If you only need your GUIs to work on Windows, look into IronPython. It works fine with WinForms. Obviously, you don't get the Python code generation from the WinForms designer, but can still easily hook up the Python code behind. You can also easily interoperate with any other .net bits (like your existing C# code), and use the BCL for what it's good. The disadvantage, of course, is the dependency on .net and Windows, but if you structure your code properly (split off the UI layer), it might be manageable. 
I second flask. I use it for everything that I need to slap a front end on. I've worked with kivy a bit, which seems to be more intuitive and easier to work with than some other front end frameworks, but html/CSS just makes way more sense to me. 
Unless I'm mistaken, you aren't switching between apps in this scenario because you aren't using a GUI builder. This wouldn't be much different than using PyQt without a GUI builder.
Wing IDE is also fantastic
Ok forgot reddit and orginaztional shit so I put code and explanation on stack overflow so code can be read better: http://stackoverflow.com/questions/28392209/multiple-lines-of-text-after-a-specific-line-in-a-text-file-via-python UPDATED LINK
That is what I meant, thanks. Fixed.
Its what AtomShell or NodeWebkit are in javascript 
My personal favorite is wxPython. For me, being a first-time GUI builder, it felt the most intuitive. I've actually gone through and made the same GUI in PyQt4, wxPython, and Tkinter and I liked wxPython the best: best aesthetics, portability, and code readability. It also has a really nifty Demo program which gives you interactive demos and code for all the widgets. I have the same fear that you do though: that Project Phoenix might not get off the ground quickly or will stagnate later on. I really want to move to Python3, but wx is the only thing holding me back :-(. I don't use any GUI to make UIs. I'd love to, but I haven't found a UI builder that I like, and sometimes I'm making brand new UI elements, so a UI builder isn't very helpful for that. I've no comment on web dev: I've only dabbled in it and don't have any use for it right now. So any advice that I would give would be completely made up :-P
Whats so good about elpy? I use python mode with ido and projectile
Maybe this one? https://code.google.com/p/pytesser/
I used wingide for local dev and remote vim with plugins for years. Half a fear ago I switched to emacs and its great, with some (lots) customization, it does even more than i want. Debugging, project management, ticketing, refactoring and autocompletion are there, but also steep learning curve for setting all of that up.
pycharm: remote debugging, deep django support, auto complete, git integration, linting, etc... The difference between an IDE and editor is night and day
Horrific on tablet
PyGTK (for python 3), as it is now know as PyGObject, is actually really nice if cross platform is not a priority. Here is a nice introduction https://readthedocs.org/projects/python-gtk-3-tutorial/
This question every 3 days. Please can we get some moderation or a sticky?
&gt; Tesseract it gives lots of false positives for low DPI images, can it be trained by providing correct text for given images manually, so it could build some kind of internal pattern base for further use?
It's silly for am experienced programmer to talk about "switching" languages. Use the right tool for the job. If that's Python or C# or something else depends on the project. It sounds like for quick GUI apps, C# is a great tool. 
I'm a total Python beginner (trying to transition from Matlab) and have been struggling to communicate with my NIDAQ-6501. I'm attempting to use the device to send digital codes for time-stamping a psychophysiology experiment. I have a Mac with a Win7 dual boot. Ideally, I'd like to do this on the OS X side, but either would be fine. I know that the labjack U3 works with the Python program I'd like to use (PsychoPy) but I already own the NiDAQ-6501 so it'd be great if I could get that working. Would any of you be so kind as to help walk me through getting this hardware to listen to Python? Help of the "explain it like I'm five" variety would be particularly useful. Thanks!
Thanks a ton for great advice. Wow - I haven't thought about 'devs mindset' till I saw your comment. I am mostly responsible for leading in-house devs/development, so I hope it will work out. Problem would be with contractors, and for that management really needs to make it clear during requirement handling I guess.
Yes, thank you. That's on my list of places to check out. I have an old account there but never needed to use it until now. I've updated my post to list other sites I usually check.
i don't know. but you can optimize the process with command line arguments, or optimize the image with filter and effects 
&gt;As you mention, with PyQt, licensing for commercial development ins't free. To expand on this: This is commercial in the closed-source sense. You are allowed to make all the money you want to using the free(GPL) version of PyQT, you just have to release your source under GPL. If you don't want to release your source, you can buy a commercial license.
https://priiduku.wordpress.com/2015/01/13/a-novice-guide-for-posting-a-status-update/
I have been very tempted to do more with Kivy - it seems to fit the bill. We've got a few things at work in different platforms and languages, and some days I just say to myself 'f***, I wish I could just do all of this bulls*** in python'.
What will you pay me? FOSS/Python is not charity.
I've found with python, anything that fits your use case now (more or less), and will fit your use case later (more or less), you'll still be happy. Even if your chosen libraries/APIs don't tick all the boxes, the speed of development seems to make up for it. But hey, I'm not actually a software engineer, I just stuff around trying to make things work, so take my point with a grain of salt.
Thanks for suggesting Nim, I like it so far. 
I also think that Glade is a neat way of doing GUIs. It is easy to assemble the GUI and connect the relevant signals. I also like that the GUI information is mostly kept in a separate file, so that the code can concentrate on the functionality.
I have commented on this in the past. I use an front ends for all my projects for the primary fact that it provides the most flexibility for me. The exception to that rule for me is when I need to do something on the local machine like file manipulation, but even then you can use a simple Web server pointed at 127.0.0.1. 
hey thanks for sharing this. reminded me about wall haven (still sad about wallbase). fun part for me at the moment is seeing how easy it is too enable searching, as well as using checkboxes for screen resolutions etc
Yes. I am using the debug server built in for development, and just directing the user to localhost. They can use whatever browser they want.
Yes. I am using the debug server built in for development, and just directing the user to localhost. They can use whatever browser they want.
This comment is a little late, but I'd def. have a go at Enaml. It's kind of like a markup language that takes inspiration from HTML, but with constraints ala most GUI frameworks and a very pythonic twist. I've found it to be quick and easy to use when making simple UIs in Python. My only complaint is that the documentation is a little lackluster.
I was thinking the same thing. The op says python is more flexible for them, but given the challenges of distributing a python GUI app, it really doesn't appear to be in this situation.
Any reason you chose NW over the others? I've always been split since none really stands out and installation sizes can be quite large. 
WingIde, and Emacs sometimes. IPython too.
PM me if you're doing this again anytime soon. I'm new to Python and would have really enjoyed something like this but I didn't see it until today. 
I have. Good luck finding decent paying work on there. The Indians always outbid you. It's a race to the bottom on that site.
The Python code itself seems to come from this project https://github.com/bradmontgomery/python-laser-tracker
I have created [pywebview] (https://github.com/r0x0r/pywebview) to provide a semi-native GUI experience for webapps created in Python. It allows to host a web component in a platform's native GUI window eliminating the need to use an external browser. I have packaged pywebview applications as standalone executables and the end result is quite decent.
Blatant self promotion here, but check [pywebview] (https://github.com/r0x0r/pywebview) out, if you wish to package your web app to open in a standalone native gui window :)
Thanks for the help . This will surely will help me!
&gt; Glade is a GUI builder fro GTK+. I know, I should've been elaborated &gt; GTK+ was mentioned. I've not seen it mentioned anywhere. 
 PyGTK was but Glade was not mentioned,
I felt NW had a larger community, plus the docs are helpful and there are a ton of resources online. The size is indeed an issue; I recall my app was around 35 MB compressed. In the end, it's a trade-off between size and OS support. JavaFX, which I worked with recently, is perhaps the only exception I can think of. Maybe Mono for C# too?
Vim. So extensible
Use MeteorJS for that
you are welcome!
Elpy has basically all the add on modes built in to a single package. I like the auto completion better and it seems to be a bit more fluid. Plus it is extremely easy to [set up](https://github.com/kpurdon/kwp-emacs/blob/master/dev/kwp-dev-python.el) I switched from basically the same set up you describe.
Another bonus here is that if you want some cheap hosting for personal experiments, one can try Google App Engine which supports Flask. I'm leaning more and more towards simply going with the web for the interface. There are toolkits to make apps use native controls but they often look a bit "off" anyway, even toolkits like Qt, and then I have to question if it's worth the bother. There are some giant advantages with a web app if you can live with an interface not being "native".
I have not found any decent Python IDE's, so I use VI. PyDev is *pretty* good, but I found PyCharm to be kind of meh. This is just my opinion. Compared to all the wonderful IDEs for Java, Python is still far behind the times.
Because it's open source and pure python - I can fiddle with it.
PyDev is free, it is what I often use. What makes you think it is not?
Huh. Okay, well, a couple years ago we were having to pay for it at my company. Either we got a "professional" edition, or it wasn't free back then. I just checked and you are totally right. I'm not sure why my company was paying for it, but I've amended my answer.
Where can I read more about this? I use VS and have VMware workstation and I'd love to quickly test on a local Linux VM. Do you have any tips on how to get started?
Too bad it needs Apple's Java 6 on the Mac. Can't run it using my Java 8 install. 
So $500 to help destroy the planet?
If you come from python, cython (http://cython.org/) might be a good choice. Kind regards Thierry Thierry
Yeah, and it's perfectly integrated with IPython! It allows you to edit manually the variables.. Sometimes there are some problems with the kernel, but just with really computing-intensive tasks.. 
Aside from simple command-line scripts, most Python development I do is Django-based web apps. Does the project *have to* run on the user's local machine? You might be better off making a web app hosted on your own domain that people can log into. Software as a Service is far more lucrative and easier to grow and maintain. You simply build your app then get hosting from somewhere like AWS, Digital Ocean or Heroku. Alternatively, if you have to make it run on the desktop, another thing to consider is making your app into a Chrome Packaged App. https://www.youtube.com/watch?v=lBUGTVIJVfM#t=28 
Sublime Text
Did you write this? Would you mind if I did a code review?
atom cuz sublime is too mainstream now
I'm an outlier, in the fact that I use Slickedit, Brief emulation. Vim's and Emac's Brief emulation might as well be nonexistent, they are so bad.
I agree, although flask does have a lot more extensions. There are a few things that are a pain to do with bottle: session, oauth etc...
I just tried :split and :vsplit and both work as expected in IdeaVim. Tried two switch tabs using the vim input but that didn't work however Idea provides a hotkey to switch tabs without using the mouse: https://www.jetbrains.com/idea/help/navigating-between-editor-tabs.html And i've never had a problem with text objects.
I've been trying to like kivy, but the lack python 3 support is the killer for me, and apparently for OP (yes, I am the other guy who uses python 3 !).
It does an awful lot more than just get metadata, but hopefully it'll include what you need; it's certainly the canonical way to talk to Spotify with Python
I use Emacs for coding Python. Oh, and for everything else too.
&gt; works with Python 3.4 Does it? `pip install kivy` fails for me, and when I looked it up it said it's not quite supported yet.
pycharm all day
Have a look at my comment
vim because it fits my workflow better. With a good .vimrc, it beats all IDEs imo.
[TextMate](https://github.com/textmate/textmate)
Just keep programming and do whatever is fun. Projects start out with ideas, so start thinking of things that you want to build. Go is a language I find really neat, but it's mostly for server stuff so I try to come up with server related ideas. You have a big head start on other programmers, and don't consider anything out of your league. You mention that you are interested in apps, well get a cheap android phone and start building things. Find a problem and solve it. Don't worry about writing bad code, everyone does it. Just try to keep improving and learn from what doesn't work.
Although I have been gravitating more towards web-based UIs lately, one major downside is that you really have to learn HTML (which isn't that hard) and in many cases Javascript (which I have a love-hate relationship with). In comparison, using something like PyQt4/PySide is incredibly easy since it requires knowing only Python. Another disadvantage to web UIs is that programs can get lost in tabs. I tend to have many browser windows open at work, each with lots of tabs. If I have lots of applications running in those tabs, it quickly becomes annoying to try to find which window and which tab contains what I want to use now. Standalone applications can have custom icons which makes finding what's open much easier!
I learned Python on Wing IDE, and I loved it. Having been a huge Emacs user I just couldn't justify paying that price as I have since moved to freelancing. Here is how I get all the same functionality as I got from Wing in Emacs (all available through the Emacs package manager): * elpy - Python IDE (I use jedi for completion, you can switch to rope using: rpc-backend) * I configured emacs so that pressing F2 inserts breakpoints for debugging by inserting the following in my python code from IPython import embed; embed() * You can also jump into the IPython debugger in my config by hitting F12 which inserts the following into my code: import ipdb; ipdb.set_trace() * imenu to navigate through large files to go through various classes and their class methods * hs-minor-mode for cold folding * sr-speedbar or speedbar for project navigation * projectile to navigate (i.e. grep, etc.) through large projects such as scipy If people want, I can blog my setup and .emacs on how it works. EDIT: Various edits
^ This
/r/vimmasterrace :D
I have done wxWidgets, PyQt/PySide and Tkinter in 2009-2012 timeframe. My initial evaluation for Python GUI development was in 2009 and at that time wxWidgets seemed like a clear winner. Things changed. Now in 2015 I would take a closer look at modern Tkinter for desktop development. By "modern" I mostly mean ttk namespace since it got some new widgets that look decent on Windows. There are few new books and new docs on Tkinter that focus on "modern" aspects of Tk. Tkinter is in Python standard library. So it is a bonus.
Oh wow, last commit 7 days ago, it's far less dead than I though it was.
**Eclipse** for everything. It's the only one I've found with which I can code python, Java, PHP, JavaScript, HTML, XML, CSS and everything I need without switching IDE. It comes with a nice python plugin [1], also for debugging. It might seem a bit of an overkill to most developers - it's definitely not just a light text editor - but it's a complete and open source solution. [1] http://pydev.org/
For internal tools it's not really an issue, you don't need to publish it publicly.
Thanks. Theres a lot of options. I'll look into this. All I really want is ipython in split screen with vim and some key bindings to run the vim file in ipython, select code and just run that code, highlight an object and get the help() for it or open the file it comes from. These along with the basic nested folding that collapses all the functions and classes and methods, fold search, and jumping to places where functions and variables are defined. 
Would these votes be reddit votes or comments voting for someone? Reddit votes are inaccurate, and comments can't be cheated (downvoting other posts, upvoting more than one post).
OP, are you associated with the project? I'm planning a new project right now and thinking about using django. (have done one previous production app in django, but i've been using rails for the last couple). My motivation is that the project is going to need a bunch of other python related to analytics and data science. after getting used to the way rails is organized, django rest framework looks like a good fit, not just for json APIs to but to organize my controller layer in general. the linked project looks cool, curious how far along it is. I guess it would be easy enough to extend, not that much code. 
vim with a slightly changed config but no plugins, or whatever vim emulation mode I can get in an IDE which doesn't suck.
It would be comments, yes, containing a link which the bot would scan for.
Joblib is wonderful. I use it every day. One problem: If you change your function's source code, Joblib will *delete* all of your old experiment results, so try to keep those in source control. I have a [fork](https://github.com/gcr/joblib) of joblib that instead keys the function by a hash of its source code so you can change it back later to keep your old results. The [pull request](https://github.com/joblib/joblib/pull/129) is still under review.
Thanks :)
I will definitely try Pathomx the next week and see how I get along with it. The upcoming plugin manager sounds like a great idea! Will it also support kind of external plugin repository - for those hopefully thousands of user contributed plugins in the future? ;-) Seriously you should make Pathomx more known! Don't want to come to EuroPython and have a talk about it? One more thing: It is difficult for me getting used to the name Pathomx - I always want to say PhantomX... :-) 
bookmarking this, because I bet money somebody turns it in as their own project at the end of the semester. 
^ This too. It's bizarre how Emacs slowly takes over more and more in my computing experience. It get's to the point that I immediatly look for Emacs support for whatever new fanglebloop I'm playing with as I can't be bothered learning fanglebloop's way of doing things.
This question comes up at least 3 times a week and it's always the same answers ... I wonder why people still bother to answer.
&gt;If I want to learn to code, I do not want to read a book about it, I just want to do it. But then you'll have no idea why you're doing what you're doing. I saw this in mathematics a lot... people knew to move the X here or there because "that's just what you're supposed to do". Give them a word problem where they have to actually understand what it is they're doing and they panic. I've seen math classes "boo!" the mention of word problems on an upcoming test and beg the teacher not to include them. That means they have no intuitive understanding. Someone told a story of a Visual Basic programmer putting a bunch of settings at the top of his code (I think iot was option strict vs. option explicit, which affects how variables are defined). The programmer told him he had no idea what it did and just knew to always put it at the top of his programs. This was in a commercial environment. You can memorize a bit of "if this, then do that" when it comes to programming, but unless you understand why you're doing what you're doing, more advanced concepts are going to be exponentially harder to understand. Heck, think about something as common (and potentially complicated) as Unicode. 
For those who may want additional reasons as to why PyPy does not need the type hints see the [Would type annotations help PyPy’s performance?](http://pypy.readthedocs.org/en/latest/faq.html#would-type-annotations-help-pypy-s-performance) PyPy FAQ entry. 
&gt;. Someone who has 3 hours of programming experience doesn't want to learn type &gt;theory they want to make a game or some fun little program. I Then they haven't really learned how to code, have they? Books don't need to be "full of theory", but they do need to be full of *explanations* for why something is being done, to increase the understanding of the developer. If you don't understand *why* you're doing something, you're just memorizing patterns: if I need to do this, do that. As soon as you get out of that small set of memorized patterns, you're going to be in trouble. Math is often the best example of this (particularly calculus). Kids can ace "conventional" problems but get every word problem wrong because they don't understand why they moved X here or Y there. They just knew "If the problem looks like this, do that". They have no intuitive understanding. Look at how Mark Pilgrim explains strings in Dive Into Python 3: http://www.diveintopython3.net/strings.html Granted this example is Python 3 vs. 2, but all we get from LPTHW is: http://learnpythonthehardway.org/book/ex6.html How has that really taught you anything about strings? You might memorize a few patterns, but you really haven't learned anything about Python strings.
Of the desktop GUI options, I think PyQt is the most widely used and produces the nicest cross-platform applications. It does not feel as integrated as plain Qt or C#, but you can get used to that. The [Eric IDE](http://eric-ide.python-projects.org/) attempts to provide an integrated experience for developing PyQt applications, but I don't use it myself. As others have mentioned, PyQt is free (both as in speech and as in beer) for open source work and for private projects. You only need a commercial license if you're distributing closed-source applications using it. ProjectPhoenix is, as I understand it, the effort of the wxPython author to create the next version of wxPython, so I wouldn't say it's backing the wrong horse. But it has been a work in progress for a long time, and I think PyQt is stealing its momentum. The local web server approach is not crazy. We develop the IPython notebook like that. The biggest advantage for us (with Python-savvy users) is that we can distribute the application with standard Python packaging tools, whereas PyQt/wxPython/PyGTK all need either alternative packaging schemes, or users separately installing that dependency. But it also has its drawbacks, like dealing with CSS, or not easily being able to know when the user has closed every part of your application.
Do you have any of your code up on the web? I use PyQt right now, and would love to see, e.g., how to make a web-based interface to acquire and plot data in real time. 
Yay! Someone saw my suggestion and the local install in Windows will be on `%LOCALAPPDATA%\Programs\Python\Python35` instead of `%LOCALAPPDATA%\Python\Python35` (or, more specifically, `FOLDERID_UserProgramFiles`, as can bee seen [on MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/dd765197(v=vs.85\).aspx)) EDIT: I'm not 100% convinced that `C:\Program Files\Python 3.5\` is consistent (I'd rather like `C:\Program Files\Python\Python 3.5`), but both are certainly better than `C:\Python35` :)
I think [WineBottler](http://winebottler.kronenberg.org/) is the one of the preferred ways of using Wine on OSX. 
By default a port doesn't keep track of connections that were made from it, you'd have to keep a list in your factory and close them yourself.
It's rather clear it's written by someone new to Python. I was going to offer some advice to help you learn, if you were the one who wrote it. 
ah, so it appears that the market is quite small. I probably shouldn't dedicate too much time to this then. Thanks :D
I use vi/Vim/GVim because it is everywhere I need an editor.
You could do it as a browser plugin that calls an API for your Twitter bot. But you'd need to use JavaScript for the browser plugin.
Vim, used to be macvim but since I learned tmux I found the command line one more suiting to my workflow. Learning how to use vim well has dramatically increased my productivity.
&gt; [PEP 465](https://www.python.org/dev/peps/pep-0465/), a new operator (@) for matrix multiplication This makes me very happy
Do you have a thread to look at as an example and along with the expected results from the bot?
File a bug please. Bring it to the attention of Steve Dower.
^I'm ^on ^OS ^X, ^so ^this ^isn't ^really ^relevant ^but ^I ^thought ^I'd ^share ^anyways ^because ^sharing ^is ^caring. **TextWrangler**. I used to use BBEdit when my employer was paying for it, but after leaving I found that TextWrangler (by the same company) was just as good for what I needed. Syntax highlighting, great/configurable keyboard shortcuts, and regex search and replace. That last one is my favorite feature in a text editor ever.
kate when I'm not pycharmin'
I've seen this issue mentioned before (with a default empty list, [], but same idea), and the answer, if I recall, is to use None instead of [] or {}.
The title here seems like those clickbait "Articles" you see at the bottom of "news" articles. "Save yourself hours of stress with this one small feature" "You won't believe what this python coder does to earn 10,000$ a week!" "Use this one weird list comprehension and never diet again!"
&gt;&gt; os.stat_result now has a st_file_attributes attribute on Windows. (Contributed by Ben Hoyt in issue 21719.) &gt;I answered a question from someone trying to get file attributes on Windows just the other month. It was necessary to resort to using PyWin32 to call the Win32 API directly, which made me sad. Interesting. I assume this has the information about if a file is hidden on Windows? I was looking just the other day about a way to check cross platform if a file was hidden. 
You have to define what you mean by hidden. NTFS filesystems allow for attributes like Read-only, Hidden, Archive, and System, but they are essentially meaningless. They are not file ACLs; NTFS has actual ACLs that actually control access which are completely different and separate from these. There is absolutely nothing stopping a program from reading a file with the Hidden attribute set, or writing to a file with the Read-only attribute set. They are just there for show, as they carryovers from the days of FAT. Now some programs do choose to give them meaning. Explorer in its stock configuration will not show directories with the hidden attribute set, but that can be disabled, so such a file might not even actually be hidden. It's a rather nebulous concept, particularly if you start talking about cross-platform, because other filesystems don't have things like this. On those filesystems, certain program can choose to not show certain things (e.g. files and directories that begin with a dot), but again that's entirely voluntary and isn't based on any FS attributes. 
did the pip install fully succeed ?
I know that no file will truly be hidden, but it might be nice to have a way to easily create a config directory in a user's home directory that would be hidden in the default file explorer. So dot-prefixed on POSIX systems and marked with a hidden attribute on NT. 
Ah, I see. Unfortunately, there's no way to do that with the standard library, because even the new functionality in 3.5 only lets you read the attributes. There's no way to set the hidden attribute without resorting to PyWin32 or invoking `attrib.exe`. (From a quick grep through the source, there is however a way to set the read-only attribute, via `os.chmod(filename, 0)`, a behavior that's rather undocumented. That's the only appearance of `SetFileAttributes()` in the whole tree.) 
Not really enough info in your question to do more than guess as to the problem. How about a screenshot of pycharm showing the code you've typed and the output from running?
If the value is *immutable*, this isnt a problem. You said primitive.
More suitable question for /r/learnpython If pip *didn't* install requests correctly, try using the pre-built, Windows module from http://www.lfd.uci.edu/~gohlke/pythonlibs/#requests
See [pydashie](https://github.com/evolvedlight/pydashie) a flask based dashboard which is based on Shopify's [Dashing](http://shopify.github.io/dashing). 
Done, over here: [http://bugs.python.org/issue23417](http://bugs.python.org/issue23417?@ok_message=Hi%20reddit!)
cool idea, i would like to join too, will it still be on for next week ? 
2002: Signals: just say no. It is impossible to write correct code in the presence of signals. -- Guido van Rossum (in response to a proposal essentially equivalent to PEP 475) 2015: I'm now accepting PEP 475 - "Retry system calls failing with EINTR". Antoine. (Antoine Pitrou, BDFL-delegate for PEP 475) Oh, well. Better late than never.
It looks like your not the only one with [this type of problem](http://help.simplecv.org/question/3707/installing-on-mac-os-10101/). Sorry I don't have any specific help for you. I would keep an eye on that thread and maybe post a question there as well. good luck
Is it because you multiply matrices frequently or because you are thinking of all creative abuses of this operator? :-)
Ha, you can call it what you like ;) The name reflects the origin of the software: it started out as metabolic pathway mapping software (the core of which was converted into a tool in the new system) called "MetaPath" but by the time I got to publish the paper that had already been taken. Pathomx (pronounced pathm-omics) reflects the pathway stuff plus the general '-omics' applications of it. But, ...that's not all it does now either. Think I'll wait a while before changing the name *again* though! Yes, there will be support for a plugin repository (there is some code there to support this already, but it is incomplete). I'm going to have a look at other tools and see how they implement this, try and make it nice and simple. It hadn't even occurred to me to present this at a Python conference (also suggested [here](http://www.reddit.com/user/sfermigier)) coming from a biology background my focus was there instead. I'll put together an abstract this week and see what that gets me! Thanks again for the feedback, much appreciated.
Left associative, damn.
On Mac, I have used py2app with semi_standalone = True and site_packages = True. A full package did not work on other machines for some reason. On Windows, PyInstaller without any special options did the trick.
Removing the ability to use `%` in `byte` was the main reason (for me) that porting network code was so hard.
&gt; via `os.chmod(filename, 0)`, a behavior that's rather undocumented I wouldn't say it's undocumented: &gt; Note: Although Windows supports `chmod()`, you can only set the file’s read-only flag with it (via the `stat.S_IWRITE` and `stat.S_IREAD` constants or a corresponding integer value). All other bits are ignored. https://docs.python.org/3/library/os.html#os.chmod
I don't think you can really single out desktop gui apps development in python as a specific job market. From an enterprise point of view or a job which entails GUI development specifically, the GUI design is in the realms of the UX people anyways. However it is a great skill to have and you should not discard it just because of this reason. My GUI of choice is GTK and having tinkered with it through the years in C i find it rather simplistic to write gui apps with gobject in python. 
You could always change the path. It's nice that from now on the **default** will be the sane one (I mean, it's been 20 years since you could have spaces in your filenames!), and I'm hoping the tutorials will be finally aware of that (I'd mention libraries, but I don't think I've met one that has problem with spaces).
Sublime Text 2 for me. I used TextWrangler a lot, and TextMate a little less, then tried Sublime and never changed. Great mouseless enviroment.
And due to 2.x and 3.x support will still need to handle `EINTR` for years to come.
I really like bottle.py. I think you should also look into it too.
I suspected what roguelynn has confirmed. I would use Last.FM. Every official Spotify client can scrobble to Last.FM (Even if somehow the Webplayer scrobbles a bit unreliably, but they're great browser extensions able to scrobble from a ton of websites) Unfortunately Last.FM hasn't got a realtime push API so you have to poll the "[user.getRecentTracks](http://www.lastfm.de/api/show/user.getRecentTracks)" endpoint. Then all you need to do is some timekeeping when the last track you already twittered was played.
Yes, unfortunately this is a common Python gotcha. What you really need to understand is how Python works for creating contexts (methods, classes). Remember that Python is completely dynamic, so, when you do: def a(b={}): You have just created a method in runtime with a parameter 'b' and said that 'b' has the value of a mutable object that will always be the same dictionary instance (regardless of how many times it's invoked). This may have valid uses (such as putting a global cache in a parameter), but usually, that's not what you want and you should restrain yourself to only putting immutable objects as parameter values so that this doesn't happen. I.e.: you can use None, tuples, strings, but you should not use lists, dicts or other mutable instances there (as you discovered). 
Make the first example say `if not found:`, then it'll be accurate.
you must inform about GIL, and switch to GPU computing
Thanks, but GPU computing is not really an option for me.
AFAIK this has been fixed in the latest release.
This depends mostly on [whether we can get an active committer to critique the implementation](http://code.activestate.com/lists/python-ideas/31078/), which is [now complete](http://bugs.python.org/issue2292).
I'm certainly not getting rid of the skill. I'm still writing my app, if only because I need it. lol. But thanks for the insight, could you elaborate on the job of the UX people? I understand their job is the "design" of the app. The features, how the users will, erm, use it, and so on and so forth. But do they also make development decisions, such as framework, language, method, etc. And yeah, I think I am going to use PyGTK for this app instead. GTK+ is used by a lot of things, like GIMP, and what little I have worked with it I am liking. So even though a lot of Python apps are done for server operations, some data science and math stuff as well. GUI programs would certainly look good on a resume, aye?
Numpy native operations release the GIL. You should see speedup when the size of the parallel tasks is large enough relative to the overhead of spinning and joining them. I can't trust your benchmarks unless I see your benchmark data.
He gets aroused by polymorphism.
Last time I used it most objects worked fine but "cit" on HTML was missing which really through me off. Objects between single characters (brackets etc.) all seemed fine though.
Oh yeah - I don't think the OPs idea is the way forward. I made add-dist-package for this a while ago... though that just automated the symlink hack. And am working on a successor, now that I've seen venv-gtk. Sure - if it works then it would be great for it to be part of virtualenv, in the meantime I'd like to get something to work. The idea is that you could install vext.gtk and it would only allow those packages to do with gtk to break out of the virtualenv. On install if those packages are not available, then it could display a message telling you to install pygtk with your systems package manager. Most of the packages that are difficult are audio/video packages that were built a long time before pip and requirements files existed - they just weren't built with the right assumptions for that.. I'd love it if they were all ported to CFFI and would just work, but they don't unfortunately.
I'd say you have a couple options. First, would be to fix your multiprocessing version of the code. ~~It looks like you are passing a function (partial function) to the multiprocessing portion, that's why it can't be pickled. You'll have to rearrange the code and how its called so that you pass the parameters for the function and use it as a target. I haven't used the concurrent modules so not sure the best way to do that.~~ Nevermind misread the code, but this function may still be the problem. Try using a standalone function instead of an object method. Another thing to consider if you are using multiprocesses is shared memory. If you are blindly passing arrays (at least large ones) they have to be serialized and sent to the other processes. If you can set up a shared piece of memory then the children just have to access that piece of memory. Concurrent might do this for you, but again I'm not sure. Lastly, Cython may be an option that could help you. You could get the code closer to C and tell it when to not use the GIL (when its not using python objects). The problem with that is that you're using numpy in your main work function which requires the GIL and numpy has already been pretty optimized. One nice thing you could try with Cython is using OpenMP to easily use multiple threads. One last note, if your images are large then creating worker threads based on their size may be counter productive. Not sure how smart concurrent is about this, but it may be faster to only create a few workers (4?) and have those work on equal parts of the input image. Edit: Wrong about how concurrent was being called. Edit 2: Actually using a partial in concurrent that way could be the problem. Especially since it is bound to `self`.
Cross post from [/r/pygamedev](https://www.reddit.com/r/pygamedev/).
I came to python from Java :|
When are we getting scandir?!
Simple solution: 1) use numpy instead of PIL 2) use pypy (iterating over numpy arrays is FAST) 3) abandon multiprocessing, it's broken and won't give you speedups EDIT: 4) don't be smart, don't use itertools, write a normal loop You should get ~50x speedups Cheers, fijal 
The reactor should remain "running" until the program is closed. I think you may be under the impression that having a running reactor is bad or somehow wasteful. If there are no events to process, the reactor will be idle, waiting for a signal that there's a new event somewhere. This is done via smart mechanisms that don't burn processor cycles continuously checking for new events.
Sublime 3 with tons of plugins. Nothing compares.
Thanks for the shout-out! I'm also working on scandir ([PEP 471](https://www.python.org/dev/peps/pep-0471/)), a much larger improvement which will speed up `os.walk()` for medium to large directory trees by almost an order of magnitude on Windows and by 2-3x on Linux.
Use `ravel` instead of `flatten` to avoid making a copy. Also, your rgb values should be computable all at once using `tensordot` or `einsum`. Avoiding the copies might help with parallelism since copying requires locking on the object or just holding the GIL.
Not yet, today is the first time we've got the post up (see /r/passtheparagraph), but there's no comments yet.
mean 3.3, 3.4 haven't been tested yet, but still it should work imo ( except android ). Btw. its better to download theirs bundled env from official site than using pip/apt-get
Totally agree. % formatting was supposed to be deprecated and `.format` was supposed to be the new hotness (and it *is* superior in basically every way). But now they put % formatting back for byte strings and not `.format`. What?
yes keda87 i do code in my phone.. when im practicing and doing the exercises on the book... but i dont use qpython becoz it doesnt work on my phone.. im using sl4a its python 2.7 and the tab escape character?? its working in sl4a... 
Haskell combined with data structures and algorithms did wonders for my programming. You think you know recursion and then you try Haskell. Then once you learn recursion you learn higher order functions, monads, functors etc and all of a sudden your code looks very different. 
Great question -- I'm going to load-test it at some point to be able to give you a straight answer, but so far, I'm using this setup in several small environments and it has been great. In other words, adding this log has not added any noticeable latency. Just to make sure we're comparing apples to apples though, any logging call whatsoever has a latency penalty. If you log to a text file, or some pipe, or to a local syslog process, it might be really fast, but it is never free. And using a database is going to be much much slower than those. However, I'm doing a few tricks to minimize insert costs: * use a separate auto-committing connection to the database * minimal constraints * trying to figure out if I can rebuild indexes asynchronously In fact, the database that you send logs to doesn't have to be the same production database your application uses. I'd love to get some more eyeballs on the project!
[Fork bomb](http://en.wikipedia.org/wiki/Fork_bomb), /u/matuba's code works in a bash shell. Here's the equivalent in Python, although I don't recommend running it: import os while "I should not" != "do this": os.fork()
That's a bummer. I'm thinking I might just spin-up a centos vm and cap memory.
He shouldn't have rubber stamped it then. He accepted it before it was even finalized.
There is no reason for the *IDE* to use a lot of memory when editing a small Python program. The script itself, yes, likely.
Can you post the code can so others can test? I'm running PyCharm on OS X Yosemite, and have never experienced any problems with memory.
einsum is sometimes faster than tensordot, not sure why. Interactions with CPU cache are hard to predict, so you just have to try various things.
[**@esaoperations**](https://twitter.com/esaoperations): &gt;[2015-02-09 14:34:29 UTC](https://twitter.com/esaoperations/status/564794470370410496) &gt;Sometimes, tracking spacecraft means dealing with snakes! In 2014, a python got into Libreville station [#IXV](https://twitter.com/search?q=%23IXV) [*pic.twitter.com*](http://pbs.twimg.com/media/B9aNYLwCMAA5te1.jpg) [^[Imgur]](http://i.imgur.com/n1U2gsI.jpg) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2vbh55%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Works with Java 7, too. I haven't updated to java 8 yet because it breaks modded minecraft and a bunch of other stuff.
&gt; because it fits my workflow better this is the best argument in any program choice debate
Also checkout /r/MCPi.
Since you're thinking about going that route, might I suggest [Vagrant](https://www.vagrantup.com/)? It automates creating and provisioning VMs, and it integrates very well with PyCharm (you can use the Python install in a virtual machine as the project interpreter in PyCharm). It's pretty nice being able to develop in an environment that more closely resembles your production environment, too.
So if I download a Java 7 JDK it should run? 
just open up 160 tabs in chrome
His screenshot shows the interpreter using the memory not the IDE itself. 
So..what OS? In linux you could just listen for a dbus signal (spotify is using dbus in linux), then just grab the meta info from dbus when new song is playing (listen for it). At least I think you could do it this way. Test this command in your terminal while playing music: dbus-send --print-reply --session --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:'org.mpris.MediaPlayer2.Player' string:'Metadata' 
Ive actually never used a plugin. Which ones do you recommend?
readlines() reads the whole file into memory. If input.txt is large then this is problematic. You can iterate line by line with "for line in f:". In other words remove the readlines() call from your for loop. Use the with statement when working with files: http://effbot.org/zone/python-with-statement.htm
 with open('input.txt','r') as open_file: lines = open_file.readlines() Using a with statement automatically opens and closes the file, and it's cleaner code :D
Oh, tons. Git, gitgutter, and SidebarEnhancements are the ones I know just from memory, without having my laptop in front of me. I use one of the python linters (either pep8 or pyflake or python-lint, I don't actually remember) to keep my code clean on every single save. 
Yes you centralize your log files by using syslog, rsyslog, agent, or splunk forwarder and then have something chew and spit out the data into a formate that can be indexed and searched, thats where mongodb comes in [I don't think RabbitMQ would be usefull in this case, its a message queue]. Logstash is actually the component which parses the logfiles before it gets stored. If your sysadmin is storing unparsed raw logs files in the manner that the OP seems to cater for, then how do you query? A full text search for each line of log entry? Do you then parse each entry in the database to extract the data out of it so that you can run stats on it? What difference would it make if it was in a text file instead? 
I think you got some formatting issues, repost your code, but add 4 spaces before every line.
Are you getting any error messages? This code works for me.
I can vouch for using Vagrant. It's not really a complete solution so much as a developer-friendly command-line automation client for Virtualbox or VMWare. It's awesome.
Prints first line with open("input.txt", "r") as f: print(f.readline()) readline() get a single line if you wanted to iterate over the whole file, then with open("input.txt", "r") as f: for line in f.readlines(): print("Line = ", line) `with` is a context manager that will automatically close the file for you. Best to use them so you don't leak resources by forgetting to close.
I changed it after doing more research online. The assignment wanted an while loop so it could go again. So yea that code works for me. If other want the while statement added I'll add it for future people to see. 
I have absolutely no idea. I haven't updated my Java in a long time (terrible practice, I know) because I don't want everything to break on me.
So this is my first program written for the Raspberry Pi - I seem to be maxing out the CPU when using bluetooth and trying to play sounds at the same time. The point of the project is to use a wiimote kind of like drum sticks and to play sounds when shaking the wiimote. Am I expecting too much from the Raspberry Pi 2?
Here's [this comment](http://np.reddit.com/r/Python/comments/2vb0qj/so_im_using_pycharm_and_the_python_processes_keep/cog38af?context=3) in case you've missed it. 
You could always contribute to, or build an add-on for, bitmessage. The p2p trustless, encrypted, decentralized messenger. https://github.com/Bitmessage/PyBitmessage 
I don't know if this is a joke or not? There's an actual real snake in that photo (presumably a Python). I don't see any computer code.
Is a coding language just a programming language, or is it some neologism for a specific concept like scripting language?
Likely, it's maxing the CPU as you're doing a while loop and not sleeping. You're hogging the processor. You have sleeps in conditional clauses, but do they trigger? I can't tell as I don't know your what your inputs are.
Seeing as Java and C++ are on there, I assume it's not just scripting languages. 
Checking for a win only looks nice because it's hard-coded for a 3x3 board which only has 8 win states, and in 1d they correspond with the digits on your numpad/phone keypad. Write that same mess out for an nxn board in 1d and it'll look like a disaster. Why do you store a chessboard in a bit array? There's 13 different states for any square - you'd need at least 4 bits to store each square. 
This is great. I think Python is a marvelous entry-level language that has expert-level usefulness.
Yeah I sort of feel like this is a lot for a beginner programmer.
Be on the lookout for Kivy. That's the next upcoming series of tutorials, then I will probably go back to machine learning. 
Multiple bit arrays of single bits, one array for each state. If you wanted to store 13 different values for an 8x8 board, it would be 12 arrays, each of 64 bits. You can process this in parallel very fast in a low level language.
You aren't wrong but I was thinking more of using multiple arrays each of 1 bit cell size, to represent a position. For example 1 board of 64 bits just for white bishops (Yes you could store less than 64 bits and use symmetry but whatever, we speak in generalisations ... :-) 
Did you follow [Installing NumPy](http://pypy.org/download.html#installing-numpy) on the PyPy download page.
docker is built for this http://en.wikipedia.org/wiki/Docker_%28software%29
I wish they included Matlab as an option so I'd have that ammo.
Some googling will reveal some ways to hack the Pi API into the PC minecraft.
Very interested in knowing this. What better way to teach kids Python than a game they all love?
Probably, but don't expect too much. RPis are fantastic for coding and learning Linux, not for gaming.
I'm sorry I couldn't resist.
TITLE misleading. codeeval is NOT a market share index. Python is NOT the most popular programming language C is still number one for the past 30 years with Java a close second. It is the top potential growth in the industry for people trying to see where jobs are going to be produced. It really is weird to see the numbers that way. I can't really think they are accurate in any reasonable way. See bottom quote. This is much more accurate in my books. http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html from codeeval.com: TIBOE is a more accurate measure of language market share compared to the CodeEval index which is a much better indicator for language demand in the industry which can help people predict which languages are going to grow in popularity. - See more at: http://blog.codeeval.com/codeevalblog/2015#py=
There's two Python games here: http://rosettacode.org/wiki/Tic-tac-toe
Hi Reddit, I got bored and thought it would be cool to write a script to randomly select a comment among (n) pages in p*rnhub. It actually extract all links to the videos in (n) pages and then fetches all of their comments and of course randomly selects one of them . You can find it Here : http://pastebin.com/iiVqvHYZ Tell me what you think Have fun 
It's your own goal. It's for you to decide. Ask yourself why you picked this goal. Did you just want to try something different or did you want to visit other countries?
YEA!! WOOOOO GO PYTHON WOOO!!! C++ CAN SUCK IT!!!! WOOOOOO!!!!
Ugh, time to find a new programming language.
Given they are pulling the data for what people are looking up and doing test around I can see it being the choice for people who are on the fringe of having coding skills. In that way its "used" by the most people. In actual new code for some use beyond teaching yourself I doubt it.
How many items in the shop bro? 
[Django](https://www.djangoproject.com/) is the standard for most large-scale web projects in Python. I don't know about which apps are best for e-commerce, I'll let someone else comment on that.
Spend the extra for a pi 2.
If your goal is scientific (as opposed to, say, video games), then [matplotlib](http://matplotlib.org/) is the de-facto standard for visualizing output. You could plot the particle's xy coordinates, or its x coordinate against time, or whatever. If you're interested in dynamics in general, take a look at the [PyDy project](https://pydy.org/). It uses a collection of common Python packages as a basis for multibody dynamics. Might give you a good starting point.
And Delphi users remain convinced that if they were just included for once they'd be close to the top of the leaderboard. :-(
TIOBE is a "lagging indicator". A big component of its score is the total number of web pages about a language. This is even if that page hasn't had a hit in five years. I say this as a former Delphi developer, that's why Pascal and Delphi are much higher on TIOBE than on other indexes. CodeEval is more of a "leading indicator". Another good leading indicator is [PyPL](http://pypl.github.io/PYPL.html), which uses Google Trends data to see how many people are actively searching for tutorials on the given languages. [Redmonk](http://redmonk.com/sogrady/2015/01/14/language-rankings-1-15/) also has a good index that involves Stack Overflow questions and Github activity.
Yup. It'll get me up and running with most functionality quick. And looks like there are lots of Django based shops: [https://www.djangopackages.com/grids/g/ecommerce/] (https://www.djangopackages.com/grids/g/ecommerce/) However I like the flask way of doing things and have built several large web apps with it. Actually the sites I've made with flask are a lot more complex than the ecommerce site I'll be doing, so flask can definitely do the job. I'm just a little torn on which way to go (mostly from scratch with flask vs djano) b/c this is for a client. I wanna get up and running quickly, but don't wanna be restricted by anything down the line in case there are any complex customizations. 
No idea as of yet. It's for a client with an existing web store I need to overhaul. Taking a look at the site, with a rough guess, probably 500-1000 little items. 
The customisations problems I have encountered with shops are: * Shipping - a total pain * Multiple styles/types of items * adjustments to the cart depending on what items are in the cart A customer job would solve these easily of course. 
Security Monkey (https://github.com/Netflix/security_monkey) is always looking for contributors. Great way to get started with AWS (boto) or Dart!
Unfortunately none of the talks were taped at PyTennessee. They didn't have the money to do it. I'd be willing to pay a bit more for tickets next year if it means the talks get taped. I had a few situations where I wanted to be in two talks at once.
Give it enough upvotes and it'll become true.
:( I couldn't attend sadly. Hopefully most of the speakers will put their slides up. (And the slides make sense out of context) What other talks did you see? 
It's also worth noting that C and C derivatives make up four out of the top five programming languages, making up a whopping 35% of the ratings. 
I did see this one from Christopher. k lars lohn (@2braids) had a really interesting talk/performance on decoupling code. The clean green architecture that you mentioned was also very good but Dave ran out of time before getting to the end, I really hope the full talk can be posted sometime. I also attended the microservices talk given by a member of the eventbrite staff, a quick intro to flask, and another talk on being a good mentor. Every presentation I saw was great. I've been to qcon in San Francisco which is way more expensive and I feel like the information and quality of speakers I got at PyTennessee was just as good for a much cheaper price.
Really well done. Thanks for the link and it's nice to see some flask usage that I might emulate.
Have you checked out HTTP Signatures? Its a spec for http message authentication that currently has a dearth of good open source implementations in Python. Might be interesting to work on a package integrating HTTP Signatures into a popular web framework in Python such as Django or Flask or Pyramid. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/?include_text=1
"Count" by whose standards? There is a lot of similarity between natural languages and programming languages (this is why we call them "languages", after all), and people with a knack for languages often have an easier time learning new programming languages, but they are also very different in many regards. Most authorities and employers do not acknowledge programming languages as foreign languages, and it would be weird to list Python on your resume under "foreign languages", if that's what you're after.
I wish that was the case for me in terms of hiring demand. I'd love to have another job programming in Python.
2015 is over already? I completely missed it...
Yes. But the title is misleading nonetheless.
May I ask why you need such a relatively lower framework to run as your webserver? Have you considered tornado? 
Do you find it confusing that `**` is right associative? And yet even if you do, `**` _is_ right associative, for exactly the reason that it is usually taken to be right associative in math. The same is true of matrix multiplication.
Interesting, i am also tackling this problem from the angle of replacing the openssl cmdline application: https://pypi.python.org/pypi/blitz-ca will have to take a look at your code
Good point about **. Matrix multiplication isn't left or right associative in math — it is simply associative, which means that it can be done in any order.
Developers never stop saying "if I move to this new software then all my old problems will be gone."
What OS do you run it on? 
I have used http://nuitka.net/ with great success
You don't have to sensor porn lol
Here is some ammo for you: http://www.google.de/trends/explore#q=python%2C%20matlab&amp;cmpt=q&amp;tz= Please also note that the leading Matlab countries are China, Kuba and Iran. OMG: Matlab is a Boris Spasski and Python is Bobby Fischer :D
&gt; so would Twisted be scalable enough to run something to the scale of instagram? If you have to ask this question, the answer is no. At that level of scale it's not about the frameworks (and language) you use.
PyPl lets you view graphs showing relative popularity over time. Python has been climbing steadily over the last 5 years, in contrast to for instance Perl and Ruby. [Python vs "Scripting languages" (PHP, Ruby, Javascript &amp; Perl) ](http://i.imgur.com/dF0Exdp.png) [Python vs "The rest" (Java, C, C++, Objective C, Swift, R &amp; Matlab)](http://i.imgur.com/Kw7Y9bb.png) Note the logarithmic scales. Java is at ~25%, Python ~10%, Swift ~2.5% 
I recently started working with [RPy](http://rpy.sourceforge.net/), and have been enjoying it quite a bit. I am much much faster doing data conditioning and gathering in Python, so access to R's libraries and methods once I have my data all set up is really convenient. The other benefit is that it is helping me learn R without taking significant breaks from workflow. IPython's rmagic also helps the workflow greatly.
Arcane knowledge, no doubt.
i think it includes things that aren't logic based like html.
I wouldn't go with Twisted. Even though it's asynchronous it's single threaded and won't let you scale unless you increase processing speed. Yes you can use threads or spawn processes but it's not going to scale like multiple processes across machines will. What I'd recommend (and practice) for similar situations is: * NGINX to accept requests, load balance the requests across multiple machines running the application, and to serve static content * Let Flask and uWSGI handle the RESTFUL api and accept requests from NGINX * Caching of some kind where it makes sense so not every request will hit your web application (also reduces load on the DB). I've used Redis and memcached for this. * A task worker such as Celery to handle processing that shouldn't be done during the request/response cycle.
That would make the programming language an element of the coding languages?
what do you use instead?
yes, it's a strict superset
As someone just getting into programming (picked Python as my first language), and not sure what direction I'd like to go when I am competent enough, I'm curious as to where this opinion comes from. What kind of programming do you do? Why do you feel Python is second best?
Uh, do the next 10 &amp; 1/2 months not get a say in this? Stupid title
As someone who was working on a parser for Delphi struct binary data only last year, I'm sad to say it's still alive :(
&gt; people with a knack for languages often have an easier time learning new programming languages Source? Is this really true? 
Here's a great video on the topic. https://www.youtube.com/watch?v=sPiWg5jSoZI
try /r/learnpython
OS X
This will consume a lot of memory when reading a large file.
In the next couple weeks, I'll try to write some stuff about how we do FP on my work project (which is open source: https://github.com/rackerlabs/otter). I wanted to get some of that into the talk, but I already had so much. Also, you can check out effect's documentation at https://effect.readthedocs.org/ (better styling TBD). Thank you for the kind words :)
Read the sidebar: &gt;**news** about the dynamic, interpreted, interactive, object-oriented, extensible programming language Python If you are about to ask a question, please consider r/learnpython Even in /r/learnpython I doubt anyone will do your homework for you. What most of us will do is make recommendations after looking at your code, this is assuming you have at least tried. Have pity? No, you're not pitiful for asking us to do your homework, you're lame. TRY TO DO IT YOURSELF, THEN ASK QUESTIONS ON /r/learnpython.
Hi! What you need to do is to define "Shift = "" " and the use "global" keyword in your functions to acces the Shift var. and change the content. I hope i wasn't too ambiguous. Here's the code: http://pastebin.com/718cCKQh 
Yeah? Then why can I not find any jobs in it then?
I am doing a lot of data science type projects. I switched to R. For doing some web I had to switch to javascript (I really don't like javascript) but the speed hit was huge using different things with python sadly. Scripting I am using more and more just bash or lua. Having dappled in making educational games I switched to C# for use in Unity.
Woops. Are you using the last version of MoviePy ? I added time_distance very recently. Since you are going to play around with that, I highly recommend that you separate your script in two like this: import moviepy.editor as mpy from moviepy.video.tools.cuts import FramesMatches clip = mpy.VideoFileClip("snowwhite.mp4") # only at the first run, then comment away these two lines scenes = FramesMatches.from_clip(clip.resize(width=120), 5, 2) scenes.save("myvideo_matches.txt") # load the result from the video scanning scenes = FramesMatches.load("myvideo_matches.txt") selected_scenes = scenes.select_scenes(2, 0.5, 4, 0.5) selected_scenes.write_gifs(clip.resize(width=270), "snow_white") This way you only do the long scanning once, all other operations take only seconds 
Are you running rpy2 on windows, OSX or Linux?
Windows
Thank you SOOOOO much! :D
well I was just considering speed, and someone noted that matrix with pypy was fast, so I thought it would be the fastest approach. I might have to look into tornado.
Nice. We decided to use openssl to no reimplement the crypto. Even if the API sucks and is horrid to work with, it's still getting a lot more attention than our code would ever do.
Okay not sure why all the hate for py2exe. Having used cx_freeze, pyinstaller and nuitka. Py2exe is the most solid out of any of them. BUT it is the hardest to get working. If you just want really easy to make installer, try pyinstaller. If you want small, all in one try py2exe. I find it to be about half the size of pyinstaller. (if you take the time to tune your output) Can you post your setup.py (and yes it should be .py not .txt) to pastebin or something so we can take a look? If setup.py is in the same folder as the main.py. In your setup dict you should have something like console=['main.py'],
Why are you posting about an old, EXTREMELY obscure template language? Template download metrics on the Python Package Index: * https://pypi.python.org/pypi/Genshi shows a mere23 downloads in the last day * https://pypi.python.org/pypi/Mako shows 402 downloads in the last day * https://pypi.python.org/pypi/Jinja2 shows a *whopping 1755 downloads* in the last day
 extensions = get_request_exts(request) cert.add_extensions(extensions) This is probably not what you want to do. You'll have to filter the extensions, or someone will add a CA/wildcard sign cert, or outdated extensions. ( unless you do strange things in get_requests_exts, haven't looked at that yet.
Looking more through your code. where do you set the text encoding of certificates, or do you allow T.61 strings in your certs?
http://geekmom.com/2015/02/adventures-in-minecraft/
No, because I [install all local packages with pip](https://pip.pypa.io/en/latest/reference/pip_install.html#usage).
PyCharm is currently considered (by most) the best Python IDE. There is also Wing IDE and PyDev. These 3 are the most popular ones. If you are on Windows there is also the Python Tools for Visual Studio which turns Visual Studio into a decent Python IDE. **Just a note:** This gets asked almost every other day. Can we please add a list of the most popular Python IDEs to the sidebar?
It's actually quite enjoyable, he's very funny.
Dude, I normally do peoples homework for them because I'm bored, but if you don't get through this one, your totally screwed, thats really ez program with some really ez math. If you can't figure it out at least you don't have to worry about being executed (exception Texas)... all joking aside I don't think any of us could write this code in a way you could pass it off as your own if you can't manage this one by yourself... just get the number of ft^2 from the user and then make math equations for each question pluging in the variable containing square feet... boom done.
If we define "learning a programming language" = "learning the syntax" then I don't think any skills you have or knack at learning a foreign language translates to easier time learning new programming language. I would instead clam that people who have a knack for mathematics often have an easier time learning new programming languages. I am currenly learning Haskell, [started this week for the first time], and its not my skill in learning foreign languages thats helping me, its my mathematics knowledge that, if I may claim is helping me pick it up rather quickly. Being trilingual, almost quadlingual [English , by upbringing, Italian through senior school/sixth form[sort of college for the yanks], Spanish, via classes and living in Spain], I am now trying to learn Swedish, and my knowledge of latin roots and grammar which helps with romantic languages is not exactly helping me with trying to learn Haskell!! But I wish it did!! 
My first animated gif.. The original Bat Cave: http://imgur.com/dPxgg35 Thanks for the tool. It works great and was lots of fun to play with. 
Are we only allowed to post about the most popular / mainstream things here?
When using `def`, you are defining a "function". It works like a recipe: it describes the actions to be done. In order to perform the actions described, you have to "call" the function. This can be done with `drawdigits()`. The parenthesis are here to indicate that you want to execute the contents of the function, not just look at it. Now, where to write that? After you definitions, you can add any line of code with no indentation and it will be executed right after the functions have been defined. Here is an example: import turtle def drawdigits(): penwidth = 5 setupturtle(penwidth) pencolours = ["DeepPink", "red", "orange", "yellow", "green", "blue", "purple", "violet", "turquoise"] ncolours = len(pencolours) turnangle = 20 sidelength = 25 digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] for index in range(len(digits)): thisdigit = digits[index] chosencolour = pencolours[index % ncolours] oneside(thisdigit, sidelength, turnangle, chosencolour) def oneside (digit, distance, angle, colour): turtle.pencolor(colour) turtle.rt( angle * digit) turtle.forward(distance) def setupturtle(size): turtle.pensize(size) turtle.penup() turtle.home() turtle.clear() turtle.pendown() drawdigits()
Thanks. Did you use the wheel or compile it yourself? 
I wheeled it. I've done compiling before, but it's not worth the effort sometimes.
Many folks don't use a full-fledged IDE for Python development. As compared with a language like Java, there's less boilerplate so it's not as helpful. Also, it's harder to do static analysis on Python which limits what an IDE can do for you. Any text editor with decent syntax highlighting should serve. I use vim now, but liked TextMate and have also heard good things about Atom and SublimeText. That said, PyCharm looks great, especially for Django development.
Awesome
Try PyQt4 and its awesome PyQT Designer!
Sorry I didn't mean to offend you but I find it odd that you jumped from me commenting on the presenter and the length to me not appreciating that it was put online. I did watch the entire thing and I enjoyed it. My comment was made more out of annoyance that I couldn't watch it at work. Again I'm sorry, it won't happen again.
Served.
I personally use PyCharm. I was reticent to even try it, and was using Sublime Text with a pylint plugin. I have completely switched to PyCharm, and being able to debug is something I now consider completely essential.
Nope. AFAIK you can post anything you want that's Python related. That said, you posted without explanation about something obscure, that has working, popular alternatives. Hence why I started with 'Why'. Looking back at my post, I came across in an abrasive mannaer. Apologies for being a jerk the way I asked.
That's ok - I gave you a karma point!
If I'm understanding you correctly, then I'd say [Bottle](http://bottlepy.org/) is right up your alley. Single python file, and dynamic enough to do just about anything.
Great! Thank you!
Dude. . . it's meta. Meta takes time.
Excellent article; just the thing I've been looking for. Thanks!
You were lucky I didn't hit the down vote button with that title. Kinda... misleading. But I do agree that this kind of question belongs to r/learnpython, and even then, people just expect programming to be as easy as asking someone to do the job should NOT be answered totally, more like giving hints (although this seems to fail, some times). Thanks for reminding me that this happens, I start introduction to programming tomorrow and I don't want to go through this in real life. 
It is not completely obscure. Genshi is used internally by Trac (http://trac.edgewall.org/). Unless you consider Trac obscure then I withdraw my comment.
[Yep](http://www.downforeveryoneorjustme.com/scikit-learn.org)
When you have something like a rest api where you have a mapping of collections and objects it may make sense to dynamically create new types programmatically. This allows for writing very generic client code.
Love the idea of someone calling out others for bad posting when they're a blatant spammer themself. Check out OP's submission history. Years of self promotion.
Well, I can't see any posts which are particularly spammy, I really have no idea what you're talking about, but sure.
hah, you must be new here. Allow me to chime in as someone who participates in several math and programming communities, mainly within reddit and stackoverflow: the problem is the time of year. We're just getting into a new semester, and the coursework is getting hard. There's going to be another spike in this type of activity towards the end of the semester (late april-ish), and then you're not gonna see any of this barely at all through the summer. Then come September... BAM! Homework help questions everywhere.
You had me at "learn how to learn"
It's so much worse in real life. You try closing Reddit and it's still there...
There's nothing wrong with posting content you've created if it makes sense for the subreddit you're posting to. That includes blog posts.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Eternal September**](https://en.wikipedia.org/wiki/Eternal%20September): [](#sfw) --- &gt;In [Usenet](https://en.wikipedia.org/wiki/Usenet) slang, __Eternal September__ (or the __September that never ended__) began in September 1993, the month that Internet service provider [America Online](https://en.wikipedia.org/wiki/AOL) began offering Usenet access to its tens of thousands, and later millions, of users. Before then, Usenet was largely restricted to American colleges and universities. Every year in September, a large number of incoming [freshmen](https://en.wikipedia.org/wiki/Freshmen) acquired access to Usenet for the first time, and took some time to become accustomed to Usenet's standards of conduct and "[netiquette](https://en.wikipedia.org/wiki/Netiquette)". But, after a month or so, these new users would either learn to comply with the networks' [social norms](https://en.wikipedia.org/wiki/Social_norms) or simply tire of using the service. However, for the existing userbase, the influx of new users from September 1993 onwards was a new and endless manifestation of the phenomenon. &gt; --- ^Interesting: [^September](https://en.wikipedia.org/wiki/September) ^| [^Hacker ^News](https://en.wikipedia.org/wiki/Hacker_News) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cohvkme) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cohvkme)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Amen. When I was still trying (and ultimately failing) to get a CS degree, part of why I got bad grades is because I was doing all my own work. I wasn't begging people for scraps, going on Usenet for help (hey, it's been a while) or, as some did, looking to fraternity brothers to hoist me up. Out in the workplace, you're going to need the skills. Do your homework.
At least he's creating content; the people he's talking about are posting their damn *homework*.
How about we just stop responding to homework help posts? 
One of the problems is indeed that /r/python has a lack of meaningful content being submitted to it, which results in this trash content making itself visible. Several years ago I remember /u/gst submitted about half of the content to this sub, good stuff too. I think he/she single-handedly had a big part in making /r/Python a great sub.
I think some of this problem can be alleviated by changing the "submit a new text post" page from saying "Is your post better for /r/learnpython?" to "Posts that are questions or asking for homework help will be deleted. Submit those to /r/learnpython instead." Even if the mods aren't around to delete them, that specific phrasing might help.
Can't do that for work? /r/python may be free of the 'please send me the codes' posts but the rest of the internet is infested with them
Sol meaning sun right?
Really, everyone needs to read [How To Ask Questions The Smart Way](http://www.catb.org/esr/faqs/smart-questions.html), and make that a requirement for any question asked.
Wow... out of the last couple of years, you've literally only submitted 6 out of 25 links that *weren't* linked to your blog. Seems a little spam'ish, doesn't it?
Over *two years* of posting... pretty much 75% of his links are to his own blog. That would seem to be "spam" and "[self-promotion](https://www.reddit.com/wiki/selfpromotion)" by Reddit standards.
Seriously. The point of the voting system is so that users have control over what kind of content goes into the forum .... use them, instead of griping about the content of the forum on your blog, then posting complaint to said forum.
Reminder that there's [this warning](https://i.imgur.com/xITYRzw.jpg) right over the text and link post form.
Syntax is not usually the problem; every programming language comes with its own distinct problem solving approaches, culture, and idioms. If you want to learn C properly, you have to learn to think close to the hardware; for Python, you have to embrace its dynamic nature, duck typing, EAFTP, etc.; JavaScript wants you to grok closures, callbacks, and its somewhat strange concepts of objects, prototypes, and `this`; for C++, you won't get far unless you understand the value vs. reference vs. pointer thing, RAII, and templates. Obviously there are many ways to Rome, but looking at my own experience, the deeper I get into programming (over 20 years now and counting), the more I approach programming languages as a form of inter-human communication, more than just a technical recipe for a machine to interpret. And for that, at least some of the skill in using and acquiring other forms of communication certainly translates. Of course a Math background helps with a language like Haskell that heavily borrows concepts from Category Theory, no doubt there; I'm pretty sure your language skills are still helping you, although on a somewhat less direct level.
Is it the lack of meaningful content that makes it such a great sub?
Also give Pyramid a look, its a lot larger for bottle. But it has the basics for all mvc webapps.
Thanks, although this works I'm having trouble understanding how it all works particularly the wrapper function, thanks anyway
I use twisted in our core envoirment for one webservice. I wished I didn't, now I'd go for Pyramid or Plone.
I agree. Those kind of questions should NOT be allowed in /r/python, since we have /r/learnpython an active and well used subreddit. /r/learnpython has a rules and guidelines in place to handle exactly those kind of posts, and while they are not always followed they are there for a reason and should be utilized.
https://docs.python.org/3/library/subprocess.html
I'm new to python. I'm new to programming in general. I have been teaching myself since December and it annoys the hell out of me seeing crap like this. There is zero point in just being handed the answer, you learn nothing. I start uni next month to learn to program properly. If i did this I wouldn't learn a thing. It's ridiculous. 
If people won't read the sidebar, do you honestly think they'll read that? Basically people don't read and won't read unless you shove stuff in their faces, and even then they still won't read.
Only one I can think of is [pyweek](https://www.pyweek.org/) for game development in python.
I do. It's far more likely that someone will read a message that is on the link submission page than for them to go through the sidebar and read any of what's there. 
People think python is the php for them. But in reality you actually need to program yourself. 
http://www.catb.org/esr/faqs/smart-questions.html
When they ask questions like this you should just answer with a link to the official python documentation.
I've tried to use simillar way. But there is problems. For example datetime object doesn't serialize to json, buy default. I think it'll be better to define the to_json method in every model class.
You might be looking for [pexpect](https://pypi.python.org/pypi/pexpect/), though this is geared toward interactive applications.
You're hitting the API limits I think ConnectionError: HTTPConnectionPool(host='202.171.253.74', port=84): Max retries exceeded with url: http://www.pornhub.com/video?o=bw&amp;page=1 (Caused by ProxyError('Cannot connect to proxy.', error(51, 'Network is unreachable'))) 
The paradox here is that the folks who post these kinds of things aren't going to read this article, so asking for better submissions is a message being sent to the wrong crowd.
It's not really eternal September at all though, because he's not saying that times were better. He's just noting the cyclical nature of the posting frequencies. The whole point of the "eternal" part of eternal September is that new people are joining all the time, and that there is a never ending flow of folks who lack "netiquette". It's not eternal if it ebbs and flows.
Just check out /r/java it's # pretty hard to misss :-)
And yet you and /u/tehyosh are commenting and ranting instead of simply downvoting this thread
But I don't think you guys understand the learning process. Beginners learn by mimicry, and copying. Once they do that enough they recognize the patterns, and then they can experiment, and start programming legitimately. This idea that you can only give them clues doesn't really make sense. For example, if you think back to when you were taught English in school, they made you learn through reptition. They didn't give you a bunch of letters, and go, "Okay. Figure out how these go together. Here are some hints." No, they literally make you copy verbatim from a book. This is how the learning process works. There seems to be a misunderstanding from programmers about how the human mind works. Copying is the first step to learning. 
It's the equivalent of someone shouting right into your ears... I *literally* got scared of that banner.
/r/learnpython?
Check [RaspberryJuice](https://github.com/zhuowei/RaspberryJuice)
Emacs, with python mode http://www.reddit.com/r/Python/comments/2te2n4/most_complete_doc_ive_seen_on_how_to_turn_emacs_a/ + Django mode. In Emacs, the shell (shell-mode) is integrated (no need to switch) and is all text: this is very handy.
As I [already said](https://www.reddit.com/r/Python/comments/2vahf9/speed_up_python_image_processing/#cogfp1p) I followed the instructions for installing the modified version of NumPy, and still I couldn't get it to work.
Flask seems like what everyone is using, but deploying it seems complicated. I could be wrong, but it seems like each app needs to be running its own server, which seems like it would be tiresome to setup and keep running. With CGI and PHP, it just works. I got mod_wsgi running last night so I'll see if Flask runs with that. 
Yeah, it's a night and day thing. If nothing else, it doesn't help them learn if they copy the worksheet into reddit and someone else does it for them.
You don't learn by getting someone to do your homework for you. Copying comes from what they've learned in lecture. Copy the structure of a while look from the example you're given, then modify it to the very simple problem you are asked to solve. Not only should such questions be in learnprogramming or learnpython, but a code snippet of that person's attempt to solve the problem should be mandatory. Showing what you've tried proves you're trying, doing it on your own, and it also makes it easier for other people to point you in the right direction, explain where there's misunderstandings. If a code snippet truly isn't possible, at least ask a more specific question. "What is the answer to my homework?" is never an acceptable question. Specificity is important, describe the part of the problem that is confusing you.
sadly such kind of article won't get us anywhere. The reason is that the guys asking these questions haven't read anything on the internet. They are new to how we do things here. And they learn only by doing or not at all. That's why HNs "flag" is such a great thing. If something is not good content, you just flag it and if other people flag it too it just goes away and doesn't annoy the stream. It's unfair to automate this, though. And it's not possible to educate people who are new or education resistant. Therefore this will always be manual labor for any community.
Just need mods (ideally AutoModerator) to remove and post a link to /r/learnpython. There's no reason to allow the posts here, even the exceptional one that shows some degree of effort.
Best content on /r/python in weeks
The problem is, if you start going down that road and passively encourage homework questions, /r/python will end up exactly like /r/c_programming did, where *literally* over 95% of the posts are homework questions. I have seen it slowly turn into a much worse Stackoverflow over the course of a year. That sub is *useless* now, there is no interesting content anymore, at all.
"wasn't working" is a very bad bug report - how it wasn't working? what went wrong?
&gt; put off by the whole Monad Monad's are great! It's algebraic types that I had a hard time getting. Then I went and implemented type algebra in Python to solve a problem, and suddenly "understood" ADTs.
Since you have been writing CGI in PERL, have you considered just writing CGI in Python? You might find Michael Foord's [cgiutil](http://www.voidspace.org.uk/python/cgiutils.html) useful.
Thank you! Very interesting.
- [This is with PyPy 2.5.0](http://pastebin.com/raw.php?i=3cA9yAmF) - [This is with PyPy3 2.4.0](http://pastebin.com/raw.php?i=yHEGeSqp)
How? Can you write a decent filter that will tell if the author has put effort into answering their own question?
Can you also paste the output of "pip install https://bitbucket.org/pypy/numpy.git" ?
The one thing I'm glad that exists in .ru-net is complete and publicly appraised intolerance to such questions ("RTFM, noob" is all you may expect as an answer) thus the complete lack of those.
Can skip part 1, part 1 is VERY Boring, things starts to get more interesting/funny from part 2 onwards.
in contrast to Danny's being a negative nellie on this one, I strongly recommend reading Genshi's source code. You will level up by a factor of three at least on your knowledge of how Python generator functions can be used. I use the techniques I learned from reading Genshi all the time (much to the puzzlement of other programmers who have only minimal yield-fu).
I assume shift+tab is for indentation? Highlight block, press tab for block over, and you can set keys for unindent block. Mine is ctrl+[. Many more options for setting fancy keys in basic IDLE.
You might want to post this in /r/learnpython since that really is the place for questions like these. Also I've never experienced this issue but it seems common in situations where stray python processes are still running. Try opening up your task manager and killing stray python processes. http://stackoverflow.com/questions/874757/python-idle-subprocess-error After that, why not just try using a text editor/terminal with a REPL instead of IDLE?
Thanks! I meant like somehow putting my own interpreter with packages without installing it.
I was referring to the automoderator bit.
yes, seriously. if it wasn't important to him then why would it slowly drive him insane that the quality of posts in /r/python is lacking sometimes? what should i grip?
If you could just give me a working example of how to do my job, that would be awesome! Lolz. I'm just going to bide my time to use that verbatim.
In addition to folks not reading the sidebar or an annoying nagover, I'd also suspect that a sizeable fraction of people are on mobile (Alien Blue) -- so there's none of the extra stuff that would warn them that they're in the wrong subreddit for asking questions. Kindly redirecting them to /r/learnpython via comments, along with a bit of advice on formatting their question, would go a long way to promoting a positive community image. 
How about we adopt a community policy that any questions of a learning nature should be kindly redirected, via comments, to /r/learnpython. Simply downvoting will just send a message that we're jerks and don't care about novice programmers. Novice programmers have just as much right to be here as experts, so let's show them that (a) we're a community of people who wish to encourage the growth of Python, and (b) that we actually care that they learn how to solve problems, but we want them to be in the right place to receive said help. 
Dustyrockpyle has a good answer. Your problem can be easy or hard depending on how many assumptions you can make about the data. If you know how many rooms there are ahead of time, it is very easy. If the size of the rooms (or amount of noise) is consistant, the problem is fairly easy. If you have an unknown number of rooms that vary wildly in size, with some close together and other far away it becomes hard. If you are trying to filter noise from a GPS sensor or similar there may be better approaches such as a Kalman Filter.
http://djangodash.com/
Seems discontinued?
Thank you I'll definitely look into this. But I don't know the number of rooms or how far they are.
[nope](http://www.urbandictionary.com/define.php?term=SOL)
Yeah, I understand this. Unfortunately, I don't know how many rooms there are or how far they are. The noise does seem fairly consistent, but thank you for the GPS sensor idea, I shall look into that. 
Not to mention your boss hires you with the presumption that you have the knowledge necessary to do the job. A teacher is literally teaching you the things you need to know to pass the class; if they're doing a shit job of it, it's completely reasonable to be frustrated. I understand the frustration with noob posts from people who didn't do the research, but acting like they should magically know what to search or ask for when this is all still Greek to them is not realistic. We should downvote and point them to r/learn python, not ridicule them for being where everyone has been at some point.
It hasn't run for a year because organizer needed time. Daniel Lindsley. I think something could be started up again for sure. Maybe ping him.
You won't have dict comprehensions, so you'll have to do dict( ) around a set-comprehension. For RHEL6 /7 you can use software collections. For 5? Sad to say. You're quite behind.
Open task manager and close all running Python processes. Then try again.
Let users do a call to a bot like the remindme bot that's somewhere around. When the bot's reply gets above X karma, it removes the thread and PM's the OP /r/learnpython. People call and upvote the bot to report homework submissions, so that way a post like this one doesn't get caught by other filter types, and you're not just blanket closing threads with negative votes.
Wouldn't that make it seem as if python community was hostile towards beginners?
I'm too busy to contribute to organizing such a thing :/ 
Not at all discontinued, but it did have to sleep for a year due to (rather extensive) burnout for me. Both the Django Dash &amp; the WSGI Wrestle (http://wsgiwrestle.com/) will be back this year (2015). http://toastdriven.com/blog/2014/nov/24/django-dash-wsgi-wrestle-cancelled/ has the details, but the tl;dr is that I'm just one person who can only do so much, who's trying desperately not to die, to fix personal issues, maintain a job, juggle OSS &amp; run free programming competitions.
As I said: &gt; There's no reason to allow the posts here, even the exceptional one that shows some degree of effort. As DemeGeek said, just filter for 'teacher', 'homework', 'assignment', and etc. and autoremove all of them.
God I hate when people use tab. 4 spaces is much easier on text editors... Rebinding tab to 4spaces is one fix, but arch. Sorry. Tabs are a nuisance :P 
I don't think many people in /r/python would object to the mods deleting posts that are clearly not for this sub. (Or object if the mods can't always delete these posts, that's a pretty big task. Btw, thanks for being a mod!) But if a not-at-all-about-the-Python-language post like this one can hold the front page for so long, its obvious that this problem resonates with a lot of people.
This is what we do in /r/math 
I dunno what ionelmc means, it's just a colorful sidebar wi-AHHH! I like how it only appears over the Submit Text and not Submit Link. That's exactly where it needs to be.
I think the former makes complete sense. Are you asking a question on learning python? Are you a beginner in python? Do you want to post a resource for learning python? Then your post goes there. Either way adding this to the submission text won't change much imo.
I've tried to work something out with gevent, but I had to use two IMAP connections and that doesn't seem right.
We give beginners a resource to help them. It's clearly labeled when they are posting. If they use that resource, they gain in knowledge. By ignoring that resource, they show us that the respect we've shown for them won't be reciprocated. That's fine, but it should lead to downvotes.
I think a lot of people would object if we began deleting posts like that; all the people who post things like that, for example! On top of that there are many regular posters here who commented that it's not a problem; just downvote and move on. What we would like to accomplish is simple: we would like the users of the subreddit to dictate what the content is via submissions, upvotes, and downvotes. The role that we see for moderators is to remove things that are spam, or links that don't work. This is pretty close to the original intent of reddit, which is the whole point! There has been a long list of subreddits that espouse heavy moderation to keep the content of a certain quality (heck, I moderate several subreddits that have strict rulesets and require constant care). We would like the front page of this subreddit to be the same quality, but we would like it to be curated by *you*, the user instead of *us*, the moderators. So downvote those posts that you don't want to see; direct them to /r/learnpython (or not) and answer their question (or not) or link them to this post (or not), but it is up to the community to dictate what is on the front page. These questions are very easy to prevent from getting on the front page; a few downvotes early on will kill them. They are almost *never* in the hot section, and they almost always politely guide the person towards /r/learnpython. 
I used to use Trac a lot. Proselytized is religiously. Then came Google Code followed by GitHub (and various alternatives). Haven't touched Trac, much less Genshi, in years. I suspect a lot of people are the same. Much as I have a soft spot for Trac, I think it is on its way toward obscurity. :(
You can't cover every case like that. Some users will see the guidelines and say it doesn't apply to them, even thought they do implicitly.
No list comprehension, no dict comprehension, no future imports, different lambda syntax, no with statement, no recent versions of (most) packages including numpy, scipy, pandas, wx, virtualenv, etc. If you're good at python, you can backport what you need, but it takes some time. It's not a lot of time, but there will be a few bugs along the way. That said, out of date in terms of a package means it's typically 2 years out of date, not 10. It is doable and I ported what I needed from multiprocessing, pandas, numpy, and docopt to Python 2.4 1.5 months ago. The Air Force program I was working with was built with Python 2.4 and also required PyQt3...shudder...so upgrading was not an option.
you can install locally. it has to be installed for you to use it
Or just any post in that sub.
"Never attribute to malice that which is adequately explained by stupidity." ;) I don't think they purposefully ignore our norms, they are just clueless. 
Wow, I thought I was lame for using 2.5 until recently. The *Air Force* using 2.4?
or have them pay $10 donation that goes to a charitable organization for every post they ask with homework help
Flask deployment is pretty obtuse but most other frameworks also use wsgi so deployment isn't much better. 
New rule requested: "Do my homework" style posts are banned.
Maybe the right response, then, is to just post code that doesn't work but may look reasonable.
/r/math has a similar at decline. It used to have interesting content about different mark topics and theories. Now, last I checked, it is completely dominated by "I put the symbol for pi on a pie... Isn't that interesting!" And "how does one divide two numbers"
What do you do then?
Nail on the head. This is why around 50% of entry Computer science students leave the major. They find the solution through other people or through the web, which scrapes them by the freshman classes; but then they get destroyed in their second and later years. Students need to either start paying attention in class or start learning the fundamentals better so that they can actually program these simple tasks. Seriously, take in an integer until it is zero? You don't need reddit army to solve that...
Remove spam, remove off-topic links (ie pictures of snakes), remove broken links, try to sort out arguments in comments, sort out issues with the CSS, add things to the sidebar. You know. Moderatory stuff.
Oh sure. But I meant in this particular case, telling people explicitly that questions and homework help should go to /r/learnpython is better than not telling them those two examples.
I'd like to know that also. How would this work?: # Python print(myfunction1(var, os.path.split(mydirectory)[-1])) # Punki? print myfunction1 var os.path.split mydirectory [-1] I couldn't think of a good example, but surely there are plenty of cases where function arguments would cause problems.
If they post with a Kiwi accent, odds are good that they're mine.
True that. Having a post of mine just disappear would miff me, as opposed to seeing it voted down, perhaps with the top comment being "this isn't suitable for this sub". As a user, I can only have a fraction of an effect at moving off-topic posts off the sub. This is why I don't bother patrolling /r/python/new on a regular basis: I don't feel like it has any effect for the effort I'd put in. And it'll probably be voted down once it reaches the front page. But I'm not sure it should have reached the front page to begin with. I guess we could (and have) ignored that a tiny minority of posts on the front page are these "what's wrong with my code" posts, but it's a distraction. We could very well leave the problem of spam and dead links to be corrected by downvotes instead of moderators too, but we don't because it's a distraction to have it on the front page. &gt; They are almost never in the hot section I can't agree with that. Right now of the 25 posts on the front page, 11 of them have 0 or 1 vote (5 of them are the sort I'd direct to /r/learnpython). There just isn't enough quality content being submitted (a separate problem) to push these off. And if it's gotten to the point that a not-about-the-Python-language post like this one can get 400+ upvotes (and currently the top-rated post of this week), I think that's a signal that the moderators have backing for a slightly heavier hand.
Of course they refused. Slapping that ugly banner on their perfect subreddit style? Nuh-uh! /s
Ya I guess it wouldn't hurt to try.
Well I'm fine with homework help posts, but like the article kind of says if they are written really shitty It bothers me but if its something well written where the user identifies where the problem is I don't mind helping. 
I think you should consider deleting them. You can configure automoderator to post a quick blurb explaining the removal and with a link to message the moderators if they felt the removal was unwarranted. Here's an [example](https://www.reddit.com/r/DotA2/comments/2vk9sv/test_build_bug_radiant_hero_wont_autoattack/) from a subreddit that I help moderate.
My first thought was something convoluted involving `itertools.groupby`, but this is better. from collections import Counter nums = [9,3,6,10] #nums = [3,3,3,3,3,5,1] def rank(nums): counts = Counter(nums) ranks = {} seen = 0 for k, v in sorted(counts.items(), reverse=True): ranks[k] = seen + 1 seen += v return [ranks[n] for n in nums] print(rank(nums)) 
 sorted_vector = sorted(vector, reverse=True) return [sorted_vector.index(i)+1 for i in vector
 &gt;In a nutshell, I can use any language I want for a school project, but it has to run on the school's server. The server only has Python 2.4. What differences between 2.4 and 2.7 should I be aware of? Should most 2.7 documentation be valid? Will I still have access to things like list comprehensions and zips? That really sucks. The first thing that comes to mind is a server update. You can always ask but the default response is usually "go to hell". Honestly these days you really want to be developing on the 3.x series where x is a 3 or later. &gt;Also, is there some way I can get a 3.4 program running on the server without writing privileges and letting me use whatever packages I want? I was thinking VirtualEnv but don't know if that's possible. Thanks! This depends upon what you mean by running? Most likely you can install 3.4 under your account and execute there. That implies all the limitations of your account and the policies for those accounts. The other problem that crops up is this: if the system is so old that Python 2.4 is it, then there is a good chance that the compilers, libraries and such, you have access to are also outdated. It could get ugly just trying to build 3.4 and any Libs you may need. Not knowing all the details here I'd suggest trying to work with what you got. The problem is for a school project it just isn't worth the distraction and frustration of fighting to code to modern software. You will be gone in a couple of years never to see the machine again. 
Sort scores while remembering their original placement. Iterate from highest to lowest score while updating the rank every time the current score is not equal to the previous: def ranks(scores): results = [None]*len(scores) rank = 0 counter = 0 prev = None for i_orig, score in sorted(enumerate(scores), key=lambda x: x[1], reverse=True): counter += 1 if score != prev: rank = counter prev = score results[i_orig] = rank return results print ranks([9,3,6,10]) # [2,4,3,1] print ranks([3,3,3,3,3,5,1]) # [2,2,2,2,2,1,7]
If you're interested in upgrading from idle, there's a lot of free IDE for Python. PyCharm is free for personal use, as is Pydev and Eric. I've not tried the other two but Pycharm definately works and is a huge upgrade over IDLE. It has nice things like auto-completion and it can check your code for errors.
You're downvoted, but I actually agree with this. I'm literally the only one in my company that understands, so I don't use them. If I leave, it wont be maintainable. I don't want to screw them over like that. Readability/maintainability usually means you shouldn't be using concepts that are near the edge of understanding for the vast majority of programmers in that language. You can't think of every project as being open source, with infinite eyes. Sometimes you personally know the audience that will be reading your code, and you should write for your readers.
This is neat and its method is easy to follow, but it does perform O(n^2) accesses on the input, whereas /u/Cynox's answer is O(nlogn)... obviously different strokes for different folks, and often you don't care about performance in python.
Example of the pain: def myFunction(myArg = []): myArg.append("testing") print myArg myFunction() ["testing"] myFunction() ["testing", "testing"] I consider this a design flaw. It's "sane" use cases are better handled with a class or even a function attribute, and it is absolutely not intuitive. 
Please make your blog readable with different screen sizes. Right now on my laptop I need to scroll right to read the text, but then your face on the left blocks part of the text.
Just make the sentence in the sidebar about going to /r/learnpython a bit more clear, or better yet, get some kind of automated mod bot that removes homework help posts. /r/math does the same thing, directing anything remotely like homework help to /r/learnmath or /r/cheatatmathhomework. 
&gt; Since PyTN didn't have the funding for recording equipment That's just lame. You don't need a budget to record video and audio. Two cellphones. One at the table for audio, one on a mount with a charger for video. Or, any consumer point and shoot or dslr camera from the last 10 years.
I think its intuitive once you understand that python passes arguments by reference. That should be one of the first things anyone learning Python learns about. I agree that its a wart though. Mutable types should simply not be allowed as default args. The interpreter should reject that as a syntax error. 
Can you please send me a screenshot? aclark@aclark.net
fully fund the psf 
Nice you got it. What threw me off was when he threw a different sequence at it The response to my submission. "ranks([8, 98, 10, 3, 3, 4, 4, 89]) returns [4, 1, 3, 7, 3, 5, 4, 2] with your implementation but should return [4, 1, 3, 7, 7, 5, 5, 2]."
You got it too. print ranks([9,3,6,10]) # [2,4,3,1] print ranks([3,3,3,3,3,5,1]) # [2,2,2,2,2,1,7] print ranks([8, 98, 10, 3, 3, 4, 4, 89]) # [4, 1, 3, 7, 7, 5, 5, 2]
It would be helpful if you could post the code you have already. The problem shouldn't be any different from working with lists, except that you have to read in the contents of your file into a list first before sorting the numbers. You wouldn't directly sort the contents of a file.
I spent a good 7 minutes looking at /r/java trying yo find what you were pointing out, only to realize that I have "Use subreddit style" off by default. So it is kinda hard to miss if you've done that.
I disagree. Passing by reference seems totally unrelated to me. To someone that doesn't know the strangeness, you're not passing anything. The assignment variable is at the function, which appears to be, and should be, local to the function, as all other variables names and assignments there are local to the function. It just doesn't make sense. Mutable types should be allowed as defaults, but they should be created in the function scope, which is what everyone new already assumes, and would be the absolute logical, user friendly, thing to happen. I realize that's not how it works under the hood...but that's a silly argument. Programming languages are for programmers and that's the end goal. That's like saying "this car only goes backwards" "why?", "that's how it works". It's was just a bad choice that stuck and now can't easily change, just like raw strings not actually being raw strings, just to keep the parser simple. So, we're stuck with doing it ourselves, rather than having python do something sane: def myFunction(myArg = None): if myArg is None: myArg = [] That's a hack around a problem. Having mutable defaults stored in some magic hidden namepace is stupid.
#####&amp;#009; ######&amp;#009; ######&amp;#009; ####&amp;#009; **Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPyth...** Current $27.68 High $27.68 Low $22.31 [Price History Chart](http://i.imgur.com/MaSUupJ.png) | [Animated GIF](http://i.imgur.com/mz19QcU.gif) | [FAQ](http://www.reddit.com/r/PriceZombie/wiki/index) 
Very simple. You got it. print ranks([9,3,6,10]) # [2,4,3,1] print ranks([3,3,3,3,3,5,1]) # [2,2,2,2,2,1,7] # the one that killed me print ranks([8, 98, 10, 3, 3, 4, 4, 89]) # [4, 1, 3, 7, 7, 5, 5, 2]
Technically three lines of code since it's missing the def ranks(vector): portion and the final ]. Still good though.
Nice! You got it but you'd probably be turned down because you respelled the function name from ranks() to rank() print rank([9,3,6,10]) # [2,4,3,1] print rank([3,3,3,3,3,5,1]) # [2,2,2,2,2,1,7] print rank([8, 98, 10, 3, 3, 4, 4, 89]) # [4, 1, 3, 7, 7, 5, 5, 2] 
I like the use of collections. You got it. print rank([9,3,6,10]) # [2,4,3,1] print rank([3,3,3,3,3,5,1]) # [2,2,2,2,2,1,7] print rank([8, 98, 10, 3, 3, 4, 4, 89]) # [4, 1, 3, 7, 7, 5, 5, 2]
The TA has to be able to run the program though, which won't work if he has to install something else. Thanks though!
&gt; That really sucks. The first thing that comes to mind is a server update. You can always ask but the default response is usually "go to hell". Honestly these days you really want to be developing on the 3.x series where x is a 3 or later. That's what I tried to do. The professor said at the earliest, the request would be fulfilled next semester.
Your first snippet is correct. print ranks([9,3,6,10]) # [2,4,3,1] print ranks([3,3,3,3,3,5,1]) # [2,2,2,2,2,1,7] print ranks([8, 98, 10, 3, 3, 4, 4, 89]) # [4, 1, 3, 7, 7, 5, 5, 2] However, your second snippet you give the last score in the second example first instead of 3rd. print ranks([9,3,6,10]) # [1, 3, 4, 2] print ranks([3,3,3,3,3,5,1]) # [2, 2, 2, 2, 2, 3, 1] print ranks([8, 98, 10, 3, 3, 4, 4, 89]) # [4, 1, 5, 2, 2, 3, 3, 6] 
Hi, you just have to read two things to achieve that: "[Python for Programmers](https://wiki.python.org/moin/BeginnersGuide/Programmers)" and [the SciPy documentation](http://www.scipy.org/docs.html).
You script fails. And you changed the name of the method print get_rank([9,3,6,10]) # TypeError: object of type 'numpy.int64' has no len() print get_rank([3,3,3,3,3,5,1]) # TypeError: object of type 'numpy.int64' has no len() print get_rank([8, 98, 10, 3, 3, 4, 4, 89]) # TypeError: object of type 'numpy.int64' has no len() Traceback (most recent call last): File "/Users/Knittle/Desktop/pyChallenge/billsil.py", line 20, in &lt;module&gt; print get_rank([3,3,3,3,3,5,1]) # [2,2,2,2,2,1,7] File "/Users/Knittle/Desktop/pyChallenge/billsil.py", line 13, in get_rank nj = len(j) TypeError: object of type 'numpy.int64' has no len()
This solution is probably faster since it's more pythonic though. I ran some benchmarks which showed this to be faster than /u/Cynox's too Here's another solution that comes out faster in benchmarks when the lists start getting bigger than 100 numbers. def ranks(data): scores = {} for i, value in enumerate(sorted(data, reverse=True)): if value not in scores: scores[value] = i + 1 return [scores[n] for n in data]
Here's a [tutorial](http://nbviewer.ipython.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb) to get you started on plotting using MATPLOTLIB. Since it looks like you're jumping right into Pandas, here's a Pandas [cheat sheet](http://nbviewer.ipython.org/github/pybokeh/ipython_notebooks/blob/master/pandas/PandasCheatSheet.ipynb) that I made.
/r/learnpython
You'll want to look at [NumPy for Matlab Users](http://wiki.scipy.org/NumPy_for_Matlab_Users). It has a nice table that shows the NumPy functions that correspond to Matlab ones.
you're right, the second line should read: ordered_scores = sorted(list(set(scores)), reverse=True) forgot set is hashed and not intrinsically ordered.
Oh, that's tricky. You're relying on dictionary comprehensions where later iterations of the loop overwrite earlier elements having the same key.
Looks interesting! Will take a look at it later this week.
Cool, sending through my CV for when they're fired.
I don't use it, but it seems to have convenience/familiarity stuff, and a class akin to Matlab tables / R data frames
Why not make a bot do this? Either automatically or through users flagging a post for the bot?
Don't do it for them. Give them indications of what they might look into next. Small steps. Maybe feed bits and pieces them. I have no problem helping people. So long as that's what they're actually looking for, and not simply someone to give them the answer. 
Can you not expose part of your home folder as public?
I thought about that, but I think the personal touch garners more goodwill. 
how about this: [k+1 for i in items for k,v in enumerate(sorted(set(items), reverse=True)) if i==v ]
I use CherryPy and then have the server class inherit a bunch of other servers, each one for a different webapp. So one server that combines webapps. I could have it all be one file, but since I'm serving so many different pages up, I find it useful to break them up into different classes per webapp and then have the main one inherit the rest. I have weightlifting, nutrition, location tracker, etc. webapps on my personal server, and basically the code is: server.py import cherrypy, com.kyleg.weightlifting, ... class Server(WeightliftingServer, ForeignLanguageServer, NestServer): @cherrypy.expose def index(self): return "Hello world" cherrypy.quickstart(Server(), '/', {'/':{'tools.session.on':True,'tools.staticdir.root':os.path.abspath(os.getcwd())}}) com.kyleg.weightlifting.Server.py import cherrypy class WeightliftingServer(object): @cherrypy.expose def weight_index(self): return "Foo" and so forth. Going to mywebhost.com:8080/index or mywebhost.com:8080/weight_index will load those pages. **Edit** NOte that Cherrypy does not have a template engine. You provide your own. Which is a good or bad thing depending on how lazy/controlfreakish you are.
I meant that as a joke. Like the big clue about which direction you're facing. Well if you know approximately what time it is.
&gt; You script fails Not a huge surprise. I didn't test it :) &gt; And you changed the name of the method I didn't realize we weren't allowed to...I wrote a rank method.
As an engineer who does lots of programming at NASA MSFC and previously worked at Arnold Air Force Base and other aerospace/defense companies... I'm really curious who you work for. Thankfully, while I am stuck with lots of legacy Fortran, my Matlab and Python stuff is my own. Proudly writing lots of Python 3.4 tools for my team. I can understand having to deal with ridiculous requirements though... my sympathies.
&gt; Why use numpy for this? To make it faster. I write methods that assume you're using the proper libraries for your data. If you don't care about speed, no worries, but if you do, use numpy. I would rather write the method the right way (I know it's not) and hopefully never have to come back to it, then write it without a numpy dependency that I'm going to have somewhere in my program. If you don't always have that dependency (I do) and you don't care about speed, then yeah using numpy is a bad idea. Like I said, I this is the "work quality" version and more specifically, my work. &gt; For example, instead of unique(scores) why not simply do set(scores)? I already converted it to an array of integers and numpy's unique method is faster than Python's builtin set method.
jesus
I'm not sure what kind of coding interview you went through, but there are really two kinds. The kind that wants to follow train of thinking as you solve a problem to see if you can think on your feet, regardless if you get it perfect, and the kind that makes sure your code is perfect and compilable in 30 seconds flat. If you interviewed for the latter, be happy you failed, it would have been a shit company to work for. While rapid software development is necessary, you have resources, colleagues, and a development environment (usually). Just because a person can solve a problem in 2 lines doesn't mean it's the most ideal. 10 years from now those 2 lines may be deprecated due their specificity and use of magic methods. Great code is scalable, readable and backwards compatible. It takes time to produce solutions like that. 
So?
Yes, they are powerful, I agree! But for a guy who has been thinking in terms of procedural/OO programming for years, they are quite a gulp. May be if I was younger and my mind wasn't already fixed on classes/objects, it would've been different :)
 def ranks(inlist): return [rank(i,inlist) for i in range(len(inlist))] def rank(index,inlist): num = inlist[index] indexrank = 1 for x in inlist: if x &gt; num: indexrank += 1 return indexrank quick and dirty solution
Pretty much all of the technical subs are ruined by "how do I get a job working with &lt;technology&gt;?", "here is my shitty blog", or "please do my homework for me." One notable exception is /r/netsec. Overall I would say that's a damn high quality technical subreddit. 
&gt; May be if I was younger You wanna see fixation? Try and teach a room full of COBOL programmers how objects work. Monads are so *simple*. They're object oriented, if you think about it- you have ugly stuff, so you put the ugly stuff in a box. Now you can pretend that the ugly stuff doesn't exist. I can't think of a more elegant summary of object oriented programming.
It specifically has to run on the server. Otherwise I would.
&gt;*most* people don't care
So a monad is a function, that takes an argument of a type wrapped up in a Maybe construct, and another argument that is a function taking another value with a type wrapped up in another Maybe, and uses that construct to create a value of the first type? simple? Maybe :) edit: Strangely enough, COBOL and FORTRAN look arcane just as much as Haskell to me. They bring me back to my childhood of BASIC carrying the same feelings I had from it (BASIC). I like LISP much much more than those mentioned :)
First of all, I wasn't joking about you. Second, even if you don't get it (different countries, different cultures...) you don't have to downvote as I put big warnings. For the rest, mistakes happen: I thought you were the first guy (to who I was responding who seemed to be very surprised that because some guy posted screenshots of the internal, private, admin panel of the site, the site admins decided to shut it down during 2 hours to investigate). So I was just "testing" his optimism to have him understand that it was a reasonable decision. As a final note, I'm usually all about explaining stuff, but it seems, from the votes, that most people are incapable of understanding irony or tolerate self mockery. Which leads to wars.
Good stuff! I had heard about this but thought it was stupid. It's pretty useful.
I meant setting up tab with 4 spaces, hhe
Did they have an attitude though? I wouldn't really call myself a "python developer", but I don't really understand modules either. 
ah yes, I forgot the wrapping up in a type, yes. with the implied return function inside (which returns Just a) edit: I think I should continue with Haskell and unfix my mind even more. It's nice exposing yourself to new syntax and concepts.
A common rule is to have AM auto-remove any posts above a certain report threshold: http://www.reddit.com/r/AutoModerator/wiki/common_conditions#wiki_reported_items
So then you message the mods.
No it's not that strange. I was just confused. I've messed around with Haskell a little bit and I appreciate functional programming. I may take some time in the future to study it more, but when I started mixing "pure" functions and IO it stressed me out. Probably because I didn't fully understand what the IO monad was doing.
The mark of a good developer is they fix their weaknesses. Asking others to explain modules without telling anyone precisely what you find confusing makes me think you're asking others to think for you. 
EDIT: so I got it working with last.fm thank you all! I'll post my code on github and you can follow my bot @leavensteebot
I love posts that teach programming concepts like this. Hadn't ever heard of this before.
Large squadrons of mobile users won't see it either.
Thanks. I am coming to the same conclusion. It seems like even micro frameworks are often written to scale much bigger than the few users that I collaborate with. 
Just noticed a small mistake in the success condition of "final refactoring" - JsonOKResponse({'success': 'successfully did thing!'}) + return JsonOKResponse({'success': 'successfully did thing!'}) obviously not the point of the post, but `do_complicated_thing` I think might be written @json_response @require_POST def do_complicated_thing(request, slug): if not request.is_ajax(): raise ValueError('Invalid Request') if not _has_required_params(request): raise ValueError('Missing required param(s): {0}'.format(_get_missing(request))) _object = Object.objects.get(slug=slug) if not do_a_bunch_of_stuff(_object): raise Exception('Bugger!') or perhaps factoring out the `{"error": ...}` in a lambda would help isolate the error formatting code.
Currying (another name for this) is really useful. It's especially useful with higher order functions. Say you need to square all the elements in a list a bunch of times? squareAll = functools.partial(map, f= lambda x: x*2) You can get the idea with that type of function.
I'd rather explain the concept and point them towards opening up the (noncompiled) libraries to see how everything works. Giving them code discourages good learning. Downvotes can be discouraging. Pointing them in the right direction is best IMO. 
At a Meetup with some of the devs tonight... It looks quite interesting! More info at http://jupyter.org
Something tells me he won't be breaking into fort knox any time soon ;)
Hi there, I was in your shoes around a year ago and I jumped headfirst into Python and have not looked back. After years of frustration with Matlab, I reached the breaking point when I made a GUI based tool in Matlab and was extremely underwhelmed with how clunky the whole experience was. Here are some links that should be really helpful: https://github.com/jrjohansson/scientific-python-lectures https://scipy-lectures.github.io/ I would not recommend diving head first into Pandas or Wes McKinney's book just yet unless you really need Dataframes (which is unlikely if you are coming from Matlab). Python + Numpy + SciPy should pretty much cover most standard Matlab use unless you were using some specialized toolkits in Matlab extensively. You will need to familiarize yourself with matplotlib, but for that, JR Johansson's tutorial (1st link) is an excellent quick guide. Matplotlib is not too difficult to pick up if you are familiar with Matlab, and the quality of the plots are far superior to what Matlab produces. I also found this book pretty invaluable when I was a Python + Numpy noob: http://www.amazon.com/Scientific-Programming-Computational-Science-Engineering/dp/3642302920 In addition to all this, you will perhaps gain the most benefit by learning Python, and how to think and code in a Pythonic manner and to divorce yourself from some of the poor programming styles Matlab cultivates in users. For that, a combination of books on the sidebar in this subreddit as well as copious amounts of Googling and perusing StackOverflow will gain you a lot of knowledge. What worked for me was to start by porting some code/scripts from Matlab into Python. Then, as I gained familiarity and confidence, I began tackling newer projects for work/fun in Python + the Numpy stack right off the bat. You don't need to learn very much to get to the point that you can do most basic Matlab stuff in Python. In time, I messed around with Cython and wrote a Fresnel reflection solver that was almost 10X faster than native Python and Matlab implementations. I've also written a Matplotlib wrapper for reducing a bit of the boilerplate cruft when generating plots ([Easyplot](https://github.com/HamsterHuey/easyplot)) Since then, I've also learned to use and have fallen in love with IPython Notebook. In a scientific environment, it is amazing to be able to self document code in a living document where you can write beautifully rendered equations in Latex and simultaneously run Python code and create plots via Matplotlib, all from within a web browser. I've certainly impressed several people at work with what I have been able to do with Ipython Notebook. Lastly, I'd highly recommend installing Anaconda for your local Python distribution. It is amazingly hassle free to have a full Python + Numpy stack installation, and the package manager (conda) is excellent and simple to use. I'd also recommend using the Spyder IDE (ships by default with Anaconda) as it will be familiar to those from a Matlab background and it has a variable explorer (a feature I really loved in Matlab, and continue to love in Spyder). Sorry for this rather long essay. Hope it's helpful and feel free to PM if you have any questions. 
/r/learnpython or any of the links on the sidebar under "Online books"
ty
THIS! This is what I was looking for! Glad to see it can be done :)! I have already started with Anaconda and Spyder as it does give a nice familiarity for my setup (command window on right and code on left) although I feel like a noob for not straight coding in iPython yet. I bring up the Data Analysis book as a long term goal as I'm considering a transition from engineering to financial analytics so in due time Id like to learn it. I appreciate the links as I have started porting over old codes from Matlab (cold turkey if you will) with a ton of Googleing and just not happy with the progress i guess. Will definitely PM you along the way if I run into a roadblock or have a sudden urge to retreat to the comfort that is Matlab at the moment!
Interesting read, definitely going to keep this concept in mind when working on new projects.
Having your own utility package can easily have you fall down the rabbit hole that is rewriting the standard library. A lot of 'utility' code I've seen rewrites standard library functionality, you'd just wanna be aware of that.
**nothing can be commented if you don't share anything.** Yes, definitely there will be some harsh comments, but that's how any project (useful or not) take off in open-source world ... 
Have you tried flask-webkit combined with py2exe (or its Mac equivalent)? https://github.com/brenoc/flask-webkit
Currying is actually a different concept than partial function application. When you curry a function you turn a function that takes N arguments into N functions that each take a single argument. Partial function application can result in a function that still takes multiple arguments.
I wouldn't worry about IPython Notebook for now. It has its place, but in most cases, I still prefer working in a proper IDE like Spyder and developing a working prototype for my code before shipping it over to an IPy Notebook where I can then focus more on actually using the code I wrote to crunch through data and make notes along the way. Good luck!
http://blog.aclark.net/2015/02/10/please-do-my-homework/
/r/learnpython
I think I basically agree, but for all I know, they did explain precisely what they found confusing.
 def ranks(scores): result = [] sorted_list = sorted(scores, reverse=True) for score in scores: rank = sorted_list.index(score) + 1 # index() returns the lowest index in list that obj appears. result.append(rank) return result print ranks([9,3,6,10]), "\n" print ranks([3,3,3,3,3,5,1])
Thank you! As soon as possible I'm going to correct the post.
&gt;&gt; For example datetime object doesn't serialize to json, buy default. &gt; Yup, thats the reason I had to use str() in the to_dict() function. [json.dumps](https://docs.python.org/2/library/json.html#json.dumps) supports a custom serializer for unknown datatypes, via the `default` argument. For example: import datetime, json now = datetime.datetime.now() isoformatter = lambda x: hasattr(x, "isoformat") and x.isoformat() print(json.dumps([now, now.date(), now.time()], default=isoformatter)) Outputs: ["2015-02-12T11:29:14.394000", "2015-02-12", "11:29:14.394000"] 
So this is just a reorganization of the package then. Okay. 
This would be nice, but I don't think you can define/redefine operators on the global/non-class space like Haskell (and C++) in Python. I would have to implement my own semantics/interpreter :)
As someone who was once in your shoes, here are a few pointers: * don't ever use "import numpy as *", while it will feel less "MATLAB-y" to use np.whatever at first, it will eventually keep your code much cleaner * numpy arrays are indexed in C style by default. So if you have the matrix A = [1 2; 3 4], in MATLAB A(:) is the vector [1 3 2 4], while A.flat in numpy is the vector [1 2 3 4]. To use the MATLAB style (Fortran style), use A.flat(order="F"). There are lots of commands that depend on the order command if you want to make behavior match MATLAB. * Looping over elements of a numpy array tends to be very, very slow. Don't do it if at all possible. * When you get to the stage where your programs will take some time to run, use a profiler and look into re-writing some of your code in Cython. Cython is a tool that will let you convert Python-like code to compiled C code. It's awesome. * No tool is better than an ipython notebook for working on small projects and collaboration. * Not exactly related to Python directly, but learn to use version control. Lots of ides interface with GitHub, for example, natively. That's all I can think of for now, though there are surely others. PM me with any questions if you have them; most MATLAB commands have numpy/scipy commands that do almost the exact same thing.
Thanks! Is it include post/pre install/uninstall scripts?
IPython's a big one.
Is there a reason to prefer this over using lambda functions? For instance: is_spaced_apart = lambda text: re.search('[a-zA-Z]\s\=', text) 
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 5. [**Contrast with partial function application**](https://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application) of article [**Currying**](https://en.wikipedia.org/wiki/Currying): [](#sfw) --- &gt; &gt;Currying and partial function application are often conflated. One of the significant differences between the two is that a call to a partially applied function returns the result right away, not another function down the currying chain; this distinction can be illustrated clearly for functions whose [arity](https://en.wikipedia.org/wiki/Arity) is greater than two. &gt;Given a function of type , currying produces . That is, while an evaluation of the first function might be represented as , evaluation of the curried function would be represented as , applying each argument in turn to a single-argument function returned by the previous invocation. Note that after calling , we are left with a function that takes a single argument and returns another function, not a function that takes two arguments. &gt;In contrast, __partial function application__ refers to the process of fixing a number of arguments to a function, producing another function of smaller arity. Given the definition of above, we might fix (or 'bind') the first argument, producing a function of type . Evaluation of this function might be represented as . Note that the result of partial function application in this case is a function that takes two arguments. &gt; --- ^Interesting: [^Currier](https://en.wikipedia.org/wiki/Currier) ^| [^Curry](https://en.wikipedia.org/wiki/Curry) ^| [^Type ^constructor](https://en.wikipedia.org/wiki/Type_constructor) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+coj5pw7) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+coj5pw7)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
No, routes, authenticatation, authorization are not the view. If you don't care to use (even lightweight) framework why do you care about the MVC nomenclature? If your code works now you don't need to add anything :). 
Pyramid offers an [alternative approach](http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/introduction.html#pyramid-and-other-web-frameworks). Read *You Say Pyramid is MVC, But Where's The Controller?*. Pyramid also perfectly integrates with SQLAlchemy.
&gt; squareAll = functools.partial(map, f= lambda x: x*2) Not going to work, `map` does not take any keyword argument, this will work: functools.partial(map, lambda x: x*2) And as /u/gmjosack noted, currying is not an other name for partial application, it's a transformation which (amongst other things) allows it. Incidentally, a bunch of functional languages are curried by default (so defining a 3-arguments function is really defining 3 nested 1-argument functions, you can [uncurry](http://hackage.haskell.org/package/base-4.7.0.2/docs/Prelude.html#v:uncurry) to get n-ary ones instead of a stack of n 1-ary functions). This leads to extremely common use of partial application, and the arguments to higher-order functions thus tend to be ordered based on partial application utility. That's why the first argument to `map` is the function in e.g. Haskell (an order which has been inherited by Python): partially applying `map` to a function (specialising it for a given mapping) is significantly more useful than partially applying it to an iterator. Meanwhile in Ruby or Javascript it's the "second" argument (the first one being the object). That is also a reason (if not the only one by far) for Python's much-maligned str.join: `','.join` is useful and can be applied to multiple iterators, `['a', 'b', 'c'].join` is not generally useful, rarely do you want to join the exact same input using multiple separators.
The problem with this is that people will always take the easy road, thinking along the lines of "Is there a subreddit for python? Let's just try /r/python and post there!" Reading the sidebar takes time. If you want to attract people that actually do read sidebars and have intelligent discussions, it's probably best to start a subreddit with a non-trivial name and list it in the sidebar.
One that's reached enough people. I can develop an app and deploy it to my family but I couldn't come back and say my deployment method worked well because the test group was so small. 
Someone could implement Haskell for the Python interpreter, like [Hy](https://github.com/hylang/hy) does for Lisp. Or to be more precise, implement a Haskell -&gt; Python AST compiler (transpiler?). But I don't really see the point of that. You can already do partial application using decorators IIRC.
I accept your rebuke, but have prepared a defense! The Regex is actually a good point. I concede on that one. I forgot that re.compile was a thing. But if we're going the function route, I'd still argue for `partial` over your `lambda` example on the basis of tracebacks. However, in total, I'll hide behind, "I did it for sake of example" and other untrue hand waving diversions. I won't argue too much on the Ajax example, either. There are a ton of ways the ajax stuff could have been implemented. However, note that in the blog, I say the hierarchy is "for fun." I wanted to demonstrate creating new things by hooking smaller things together. Gotta admit it's neat! The only one I'll really disagree with you on is the email one. I think that one just boils down to different strokes. I'd say it's a far swing from "horrible." I stole the idea from a coworker a long time ago. To my eye, it made for really nice declarative code. I don't think `If condition, email_admin(...)`. is any harder to understand than `if condition, send_mail(staff_emails.ADMIN, ...)`. Use an enum, db, or implementation X to power everything behind the scenes, however, my personal preference would still be that the call style is `email_person(...)`. That could just be the fact that I'm used to it being that way. Anyway, good points! 
[fpm](https://github.com/jordansissel/fpm) has support for Python, and will build other types of packages like RPM, as well.
Hansel, from the comments on the page, raised a good reason: tracebacks. With lambda, if there is an exception it shows up as "TypError: &lt;lambda&gt;() takes exactly 1 argument (3 given)" However, if you use partial you get a useful name to go along with the traceback: TypeError: fooer() takes exactly 1 argument (3 given)
I'm new to python myself after years in matlab. In matlab, I like to test chunks of code by highlighting it and pressing F9. I guess in python I can copy from the editor to the shell, but is there an similar way where I can highlight and F9
Well, it's refreshing to have someone take constructive criticism so well! I agree that regarding the last point, whether to have separate functions for each or to have one which accepts a value from an enum is mainly a matter of preference, and both styles are fine. What I find "horrible" is the hard-coding of the email addresses directly in those function definitions. The addresses really need to be read from somewhere else, even if at first just a dict, for all of the usual reasons that hard-coding data in your code is bad. As for the AJAX example, I certainly got what you were saying, and it is indeed neat :) Still, this is the kind of thing that programmers tend to use to solve the wrong problems, so I tend to be careful when showing such neat tricks. Specifically I think it's very important to show them using an example where they are actually appropriate... But I've beat that drum hard enough already. So, overall, many thanks for this!
&gt; I should say, I don't want to use Flask or Django or Bottle or any of the other frameworks First question: Why not? My Advice: Read the source code of those frameworks and understand how they model what you call a *controller* 😉
Thank you for this, it couldn't have been timed better. After reading this, I immediately had a need to use these. I am using them as a replacement for some poor closure-style code. Everything is now much more understandable and less screwy! 
I've got to say, not wanting to use "Flask or Django or Bottle or any other frameworks" is kind of weird. It's sort of like saying "I want to parse HTML, but I don't want to use the HTMLParser module, the xml module, or Beautiful Soup." Sure, you *can* re-implement the functionality you need from scratch, but why would you? The existing modules do everything you need in very general ways and are, frankly, going to be a lot better at what they do than anything you're going to implement if you don't make that your full-time job. Flask in particular is super lightweight, and imposes very little on your code.
The problem is that python doesn't have a strong concept of distinguishing between mutable and non-mutable types. Any attempt to make a type non-mutable is ad hoc, in that you have to close off all avenues of modification (e.g. via descriptors, or hacking `__dict__`). Combine this with how names are resolved at runtime, not compile time, and you really can't call this sort of thing a syntax error.
yeah, you're making some good points here. I'm not sure the currently defined syntax of Python is capable of raising a SyntaxError at parse time by inspecting arguments. We would probably need some kind of type annotations for that to work properly. Something I'm keeping an eye on, for future development purposes. [BDFL's suggestion for type annotations](https://mail.python.org/pipermail/python-ideas/2014-August/028618.html) in the current state of things you really have to just leverage out-of-band knowledge about Python and do some good peer code reviews to catch problems like this. I know that my team won't accept any code with a mutable default arg in it, because we all know about this problem, and know what is mutable vs. immutable in Python. 
The only easy way to do it would be to restrict default arg expressions to some literal subset of the syntax, e.g. only allow expressions built out of literals that can be evaluated statically. This would wreck many useful cases like class A: default = object() def foo(self, arg=default): if arg is not self.default: ... The type checking proposals are more for optional linter-style stuff, not for enforcing new type restrictions in the language. &gt; just leverage out-of-band knowledge about Python and do some good peer code reviews That's the best approach IMO.
I was half kidding too. :) But yes, the reality is you really shouldn't be using metaclasses unless you totally grok them and in most cases, most people really won't ever need to use them. Of course, it's not bad to understand them even if you never need them.
One man's model is another man's view.
The hard coded emails, will become someone else's nightmare. I mean it of course comes down to what the code is being used for. In the given context, the fact there is a marketing group etc, says otherwise. Now when they want to rebrand marketing to excitement team, the only person who can make that change is the developer who constructed this. 
This is my answer to the question, "When should you use `__call__`?"
http://lmgtfy.com/?q=accepting+passwords+in+python+without+showing+output
But... why would anyone *want* to program like that? It's not the way humans think nor how humans are used to reading math. This goes against "Readability counts".
&gt;It's a bit clearer A lack of parentheses here doesn't make anything clearer; parentheses let you see at a glance what parameters are for which function. And what about optional parameters? &gt;and once you get used to it I shouldn't have to get used to it. The human mind is already used to parentheses and things like 2*5 rather than multiply 2 5. I fail to see how this adds any functionality, yet it makes readability worse. &gt; it's easier on eye to scout out what gets grouped together into calls. That's hard to accept.
What is the target audience here, Java programmers?
You wrote too much code.
everyone should move to /r/pythonistheworstlanguageever
It's a good question. I'd say: - Most of the Python programmers I've worked with couldn't tell you the best time to use `__call__` vs. having a single-method class. - People with experience using languages without first-class functions often go for more heavy-weight interfaces, when a function is really all you need. - Functional programmers find this all very obvious. :)
Sure, like everything else in the universe there is a risk of failure.
Your posting history does not indicate to me that you are a spammer. I wouldn't worry abut it too much. You always take part in discussions, and you don't post repeated things from your blog over and over; they're all spread out and all on topic.
How about this? python setup.py bdist_deb
I recently started working as customer support for a small software company, but spend part of my time writing python for them.
In life, yes, but if (I'm just making up some numbers here) 95% of your content is "guilty" and it's easy to "un-guiltify" things (*and* your mods are all volunteers), then it's probably a good idea to go with guilt-by-default.
You say what you want but don't down vote because you disagree on pedantic grounds.
As xpertbot has said this is the correct answer. I just want to add that OP hasn't mentioned what the purpose is though. If it is for learning purposes it perfectly legit.
PACKT have a book ['Learning Selenium Testing Tools with Python'](https://www.packtpub.com/web-development/learning-selenium-testing-tools-python). Do you think it's feasible to go directly into learning QA from my current knowledge base? Looking at the table of contents from the above book it seems maybe so. Specialising has the advantage of greater pay (looking at job postings), but may have the disadvantage of reducing options for jobs. QA looks interesting, and definitely something I hadn't considered.
Go to a local python user group meeting.
/r/LearnPython is a mature, organized and very supportive subreddit. While I agree that having more people who want to help sign up over there would be awesome, don't sell it short! It's already sufficient to answer almost all questions.
I like reading about science (human biology/supplements), but am in no way qualified to have a job in a science, unfortunately.
I set debug level to 3 on both a bare script and one containing the same in a function, they are nearly identical: send: 'ehlo callctr-pc11.NCDOMAIN.netcarrier.com\r\n' reply: '250-marcie.netcarrier.net\r\n' reply: '250-AUTH=LOGIN CRAM-MD5 PLAIN\r\n' reply: '250-AUTH LOGIN CRAM-MD5 PLAIN\r\n' reply: '250-PIPELINING\r\n' reply: '250 8BITMIME\r\n' reply: retcode (250); Msg: smtp.domain.net AUTH=LOGIN CRAM-MD5 PLAIN AUTH LOGIN CRAM-MD5 PLAIN PIPELINING 8BITMIME send: 'mail FROM:&lt;guy.incognito@domain.com&gt;\r\n' reply: '250 ok\r\n' reply: retcode (250); Msg: ok send: 'rcpt TO:&lt;support@corp.domain.com&gt;\r\n' reply: '250 ok\r\n' reply: retcode (250); Msg: ok send: 'data\r\n' reply: '354 go ahead\r\n' reply: retcode (354); Msg: go ahead data: (354, 'go ahead') send: 'From: Guy Incognito &lt;guy.incognito@domain.com&gt;\r\nTo: Technical Support Mailbox &lt;suppor t@corp.domain.com&gt;\r\nSubject: TEST MESSAGE\r\n\r\nDISREGARD\r\n\r\n.\r\n' reply: '250 ok 1423774768 qp 46637\r\n' reply: retcode (250); Msg: ok 1423774768 qp 46637 data: (250, 'ok 1423774768 qp 46637') Successfully sent email send: 'quit\r\n' reply: '221 smtp.domain.net\r\n' reply: retcode (221); Msg: smtp.domain.net 
Awesome idea! Found a 'Hack Night'; which is worth doing even if it doesn't help with a job.
Then again with a stable framework already made, you can learn by going into its source and learning how this framework works inside and out, not only are you learning but you are learning a good stable way of doing things.
There are several ways you can check to see if software is correct. The simplest way is to build tests. It takes a lot of work to figure out what tests are needed, but it can be done. You can check code coverage with those tests. That will give the test developer hints at what tests need to be written. You can also measure the number and severity of bugs with the software. You'll have to train the software team to put all the bugs in the system so that you have a metric to measure. You can measure production vs. development, etc... if you need to. I think what is most important is to sit down with one or more developers from your company and ask them this very question.
&gt; they are nearly identical so, what exactly are the differences?
I will try that, but I'd expect Python to throw an error and crap out on me if the string were indented improperly. This is a good suggestion though as the barebones script has NO indentation (since there are no functions), while in the script containing the function I indent the string to align with the function.
This was it. Thanks so much...a little counter-intuitive to have: def email_function(): message = """From: ... To: ... ... ... """ ...because my naive understanding is that not indenting as I was would cause the interpreter to view that block of code as being finished. Can you comment as to why this happens? If I wanted to have a block quote with indentation for aesthetic reasons, how could I do that?
From the sidebar: If you are about to ask a question, please consider r/learnpython. Homework-style questions will be removed, and you'll be encouraged to post there instead. Seriously, read your textbooks and LEARN. We're not here to provide easy solutions for you.
kewl
I miss the days when I had this level of raw unbridled enthusiasm. Being old, bitter, and crotchety sucks.
You could try to prove it all with the various techniques that exist. 
&gt; but I'd expect Python to throw an error and crap out on me if the string were indented improperly. Python doesn't care about the contents of the smtp message; the SMTP server does, however. And thanks to spammers, most mail servers nowadays will accept messages violating the SMTP protocol, saying "all is well, goodbye" and then promptly delete the message without bothering to deliver it. (The problem in your case was that "To:" is part of the mail header, and that must not be indented.)
...while I think that's a nice answer to that problem: What happened to the idea of a big red banner upon submitting that basically says: &gt; Don't post beginner questions here please, go to /r/learnpython?
Smells like shitty bees talking.
That perfectly summarizes what the issue probably was. I'm no longer at work but will review the output of each tomorrow to confirm. &gt;In programming, even little things like spaces are often important Too true, but obviously I was bein overly cautious with white space in Python and not looking into leading spaces being sent to the SMTP server. Thanks again!
Hypothetically, what would it take? A medium sized open source application? A number of small open source application? 100 blog posts detailing aspects of Python and frameworks? Something else? There must be some hurdle that has to be reached, irrespective of time.
&gt;A medium sized open source application? &gt;A number of small open source application? One of those 2 I would assume. But it depends on who you are interviewing with, as well.
&gt; [`pip --install pyyaml`](https://github.com/mardix/deployapp/blob/ae8b34689c50804c674e601fc8a0c8daef8b691d/deployapp.py#L38-L45) Ouch!
Exactly what I was going to say. MVC wouldn't exist if people stopped trying new things. We'd not have made any progress at all in anything, much less programming. If you think you have a better way, play it out. Try new things, hack, experiment. Don't worry about what others say is "the" right way. It will change in a few years or less anyway.
 while True: print "Thank You!"
Thanks! And thanks for the /r/Python changes. Glad to see feedback result in improvements which will hopefully produce a better /r/Python.
Can we also offer them to go to stack overflow, where dozens of people will try to answer them in less then 30 mins to get that sweet rep
I've not applied for any yet. I wouldn't call myself experienced with PHP and JavaScript. I wrote a CMS in PHP (CRUD app). And also a small shopping cart integration; which resulted in a PDF ticket being created. But that was some time ago. With JavaScript, I didn't mention, I wrote a small mathematics text editor. There was some messy JavaScript used for some logic, and it used JavaScript templates. That was all on the front end. My CV is particularly bad as I got an auto-immune disease a few years ago, and have since got rid of the symptoms by combining a number of supplements together. I've gone as far as consuming nano material as a powerful anti-oxidant, using a probiotic combination based on the Human Microbiome Project, and taking a new anti-ageing supplement which has been shown to reverse ageing in mice muscle cells (it's a natural supplement which seems safe). Anyway... learning and testing took up most of my time and money. So I've got a CV with a couple of years gap in, and lack experience programming. Not a good situation. But better than a couple of years ago (since I'm not ill any longer). My CV isn't going to open any doors, and is probably quite a hindrance at this point. I don't even know how I'm going to explain it to a potential employer: 'Well, I biohacked mayself... do you know anything about mitochondrial anti-oxidants?'. Suffice to say, I think the only way I'm going to be able to get a job at this point is by being really quite good at programming. Luckily, I seem to have a reasonable aptitude. But aptitude != LOC. Edit: Clarification.
Yes! That was exactly it! Thank you. Also thank you for the explanation. Interesting that this behaviour is the default in TKinter.
I think you mean print("thank you")
sorry for the typo. It will be installed by itself during 'pip install deployapp'
I'm reminded of [this video]( http://youtu.be/o9pEzgHorH0). 
That'll happen too. From my experience in modding several subreddits that section on the submission page does almost exactly nothing though.
In more recent Python 3 releases, the 'u' identifier is legal again (and does nothing on Python 3, other than be legal to put at the start of the string) to help with codebases which want to be compatible with both 2 and 3. So the nice thing about my version is it works on 2.6 and 2.7, and on all the 3.x versions someone would actually want to use.
I mean, fair enough. It's a no-op.
Is this something we could use a machine learning bot for? I'm assuming we could use NLTK to classify posts as homework/not homework and then leave a polite message for the posts that are classified as homework? I'd be happy to take the lead if this is something mods/community may find useful. 
I am __not__ knowledable about Python at high performance, but, just in case you haven't heard/considered it: What about Pandas? How is the performance if, instead of a nested dictionary, you use objects? Dictionaries allow you to add arbitrary keys, which slows down performance, while with a class you can use __slots__ to specify what exact attributes it will have, which increases memory performance. I think you can just subclass dict and then set __slots__, and I do think that would save you a lot, but you'll have to look into it yourself. Edit: Otherwise maybe look here: https://stackoverflow.com/a/16257260
Yeah! That's a wonderful talk.
In case you are still looking for advice: It really depends what you want. Do you just search for a Python Job? Or do you want to work as a Software Developer that uses Python? There is a difference. I, for instance, am the later. I am a Software Developer and I am going to use the tools and Languages that fit the best for a Project. Currently I am working a lot with Python, but that was not always the case. I started out as a Software Developer Apprentice in a DotNet Development Company. I used C#, VB.Net, Python, Clojure, GO and even PHP (when I had to) for different Projects and Companys. I found all of it fun and challenging even when (as a Linux User) I was not convinced about Developing with Windows and DotNet at first. That would be a viable path for you to go, if you are not dead set on a Python Job. I don't know what the situation is in the UK, but Python jobs are more rare then Java Jobs or DotNet Jobs in my experience. Without a good CV to show, the positions that you are likely to get are limited, if you widen your scope a bit you are more likely to find a position that can give you experience which opens up new (maybe better) positions. So I would say: Just apply. Find Companys that interest you that are searching for new People and Apply. Doing Blog Posts, Open Source, writing Books and so on can Help you in an interview, but it is not really necessary. Doing these things is going to show the People that are hiring that you are interested, that you are motivated and that you can learn, but are probably not going to convince them about your skill. Here is what happens when someone mentions their open source project in their application to our company: The hiring manager tells some developer to take a look at it (probably after telling him how important Project X Deadline is and that we are behind on the Project) and the Developer will look at the GitHub/BitBucket/Whatever of this Person for maybe 5-10 minutes (Just enough time to find some errors they can ask them about in the Interview) and if there is nothing absolutely horrible in there will answer to the Manager that it looks good. That is just my view on this and other people may have different experience there. If you still want to do Blog posts (and that is great, it can only help) my personal advice would be to, maybe, focus less about the technical aspect of the thing you write about and include a little about why. That is what hiring people want to see: Problem Solving. For Example, your post about "Using a string to call a function" could include a little section about why that is useful. You could, in this example, show how, in a text adventure type Game, this could be used to interpret player commands. A site I find very useful to challenge and expand my programming experience is [Project Euler](https://projecteuler.net/). The Challenges there are math heavy, but are not very big, there are nice easy ones in the beginning and you can see all the solutions of other Project Euler members after you have solved the challenge. They also make great Blog posts in my opinion. I hope I am not sounding a little bit harsh here, I really wish you the best of luck and hope that this helps you a little bit.
Its just some print commands though
Very good! What IDE are you using?
There's nothing wrong with the two lines you posted. If you wanted us to help, we're going to need more. &gt;im trying to use a while loop to keep the menu there, but it doesnt run anything, it displays the filename over and over. * What do you mean "keep the menu" there? * What do you mean "it doesn't run anything"? * Where does it display the filename over and over? Also, I'm seeing that we're suppose to be directing questions like this to /r/learnpython. You should post there, where more people will be able/willing to help.
this statement does not reflect my personal experience.
Works great, thanks for the help!
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
I was going to rip it apart and give tips for every little detail, but it's not even in the right language! Just kidding. Try writing hangman next.
I got this back when I learned web development myself
&gt; I picked 12 characters because my quad-core 3.4 AMD Phenom II Black Edition got caught up on 13. There is no reason that should be the case. At length 13 there are only 8192 possible combinations, which is a trivial amount for any computer. I suspect the problem is that you're trying to print this out as one giant list and you're using IDLE which is pretty crappy at handling singe giant strings. This implementation of `randString()` is a total mess anyway. There's no need to build up a list of all these things in memory if all you're going to do is print them out. You can print out each one as it's computed, without first building the whole list. That will also work around any of IDLE's limitations, which BTW are only specific to IDLE and not Python; using your code and a standard console I was able to print out all combinations of length 20, for instance. So let's look at how this should be implemented. We want the function to return each item as it's computed: def randString(istr): for chars in product(*[(c.lower(), c.upper()) if c.isalpha() else (c,) for c in istr]): yield ''.join(chars) This is a generator function. It can be used like this: while True: for item in randString(input("str: ")): print(item) Note that `input()` returns a string (assuming this is Python 3, which I have to assume it is), so there is absolutely no point in wrapping its return value in `str()`. With this version there is effectively no limit on the string length, because nothing is stored in memory except the current permutation. You can input a string as long as you like and the only thing that matters is how long you want to wait while the output scrolls by. (BTW, the overhead of actually printing all these characters to a screen is far higher than generating them; try running this with the output redirected to a file and compare the speed. It's likely several orders of magnitude faster that way.) Edit: I neglected to mention that since this is 3.4 it could be written using `yield from`. 
Python is so amazing. My psueodocde is Python
is just built an english version: http://i.imgur.com/vA1npm4.png
see python is so easy for beginners that I don't even know what an IDE is :D
side projects or actual experience are much more worthwhile to getting a job. Interviews that have gone well for me included basic algorithms stuff, basic program architectural stuff, and discussing of side projects. While I almost invariably do interview programming tests in python syntax, you could honestly probably get a python job without knowing python because the base language is simple enough to pick up that it doesn't matter as long as you know a language at all.
Well I can't say I'm surprised that I got so much wrong! Part of the reason why I didn't really mind the limitations of IDLE is that it is always there, just open and run. And also that I was only ever going to actually use it for keywords like "yes"/"yep" "no"/"nope" etc. But thank you for the insight. I'm learning such great things about Python every hour. (PS: Don't judge me I'm OK with LUA and just started Python yesterday :P)
That's a pretty funny statement. How could I have gone all the way? (honest question)
gg dude! or dudette!
Careful about using the variable "math". It is a [module](https://docs.python.org/3.4/library/math.html) in Python.
Oh I missed the "give out my raw source code part"...that makes it harder. If you want to have the code be editable, create a numpy/scipy/matplotlib/pandas/whatever executable with lots of imports and a main function that takes the file and use importlib to exec it. Then just call the program portablePython, which does exist on Windows... So like ... # my script def main(): import numpy x = array([0., 1., 2.,]) print(x + 3) main() portablePython import numpy import importlib fname = sys.argv[1] func = importlib.import_module(fname[:-3] + '.main') func(sys.argv) Something like that should be pretty close to what you need, but test it in pure python first. I'm sure you could get fancier if you wanted and still be able to use if name == main, but meh...
Integrated Development Environment. Basically it's the program you use manage projects and to write and compile code.
I've checked the docs. vdist uses virtualenv, Docker and fpm under the hood. Cool! Thanks for sharing!
That made me remember my school days and my matrix-style Borland Pascal self-written screensaver! Whoa! :D Good work K_E, keep making other math games, then make some language games (and since you are German, make them in German to learn utf-8 coding.. this will be hard at first! ;)), then group the games in a suite in which every game is a module, then try do re-implement the games with classes, then wrap all this in a GUI. Then you can find a programmer job :)
Cool - any chance of improvements to the editor, like auto suggestion ? It would be nice if there was an easy API for programs that want to continually update the views (I guess a bit like what Vispy does) ?
This has the somewhat unrealistic but still annoying drawback that around 1000 wrong answers will crash the program, because the python recursion depth will have been exceeded. Besides, it should be return choose_valid_year() 
Where I'm working we hire good programmers even if they've never touched python before. It's no big deal. If the company you try to get into thinks you can't handle that switch within a few weeks then either they think you're incompetent or (more likely) they are incompetent. In any case, any amount of hobby work won't prepare you for the reality of an existing code base and an 8 hour work day. TL;DR: Just apply for the job.
Crazy you'd be downvoted for pointing that out. Some people on this sub can be thick sometimes.
In fact, the learning process never stops! :) Which is what I love most about programming. So much to discover so many "Hey that's *awesome*!" moments. But dear god, *never* look back... That... **abomination** I wrote yesterday... the *horror*!
Did you even take a look at his code?
Yeah, that shocked me as well ^.^
Well, I imported the `deployeapp.py` in the `setup.py`. By catching the ImportError at the import level, it still allow the setup.py to continue the process. Otherwise it will throw an error and everything will stop. 
Well, obvious flaw is obvious then ;)
O_O what? why? there were three situations to be true: a) say yes in order to activate the code b) maximum of rounds not reached yet c) correct or wrong answer I did not know how to structure them. because once it did not count the points, the second time the multiplication was always the same (just took a random number once)...
ahh, now we are missing important context when you edited out original screenshot from the post :(
I'm also based in the UK, I got my first Python job(s) in the Django framework by attending the local Python user group and meeting people through there. Do you mind me asking where in the UK you are based?
I changed it to the english version this was the original german version: http://i.imgur.com/j6SsawD.png
You are an awesome human being. Thank you!
Redis might be a good fit if you'd consider non-Python? It is lightning quick, persists to disk (e.g. during power outage), supports the keyspace you're after and supports counting. A trie (e.g. datrie by kmike) probably supports your needs and a trie re-uses subkey components, so it is useful for saving RAM.
Now, your next task is to take what you have add some functions and make it work again with those functions (trust me, on a first try after the functions, it WON'T work the same :))
You might want to take a look at requests and beautiful soup.
Thanks for the reply. I am interested in some of your points such as measuring the severity of the bugs? From what I know the software code they get always comes with bugs and they have to fix it so I'm trying to workout what metric to measure for this? I will sit down with them over the next few days and **should** find out what is important for the developers but thanks for the reply it has given me some ideas.
It's not much, but it's something AND that's frigging awesome! GG man, keep it up :D
I'd currently get destroyed on algos. I've implemented bubble sort in JavaScript, but that's about it. I've not learned about big O notation, or anything else that may be helpful with algorithms. Another thing to add to my programming-bucket-list!
I was joking. 
Your response was aldo valid, I was just surprised honestduane was too.
Can I ask what you mean exactly by "2 years of Python experience"? Did you do your own projects? Did you have other languages under your belt? Thanks, it would be helpful for my own job considerations.
&gt; I'm a little concerned that being able to program isn't going to be enough to get a job. Well, I don't have a CS degree and I don't even have a good education, but I was able to convince a small software company that I am motivated and willing to learn. That is all thats needed to get your first job. It may not be the 100% perfect job, but a Year or two of that will open up new doors. Here is the hard part: I wrote 3 job applications almost every day for 6 months. I barely got any responses back, but one day I was offered an internship for a week. That was my chance, I didn't know VB.net at the time but I showed them how fast I can learn it in the week they gave me. At the end of the Week, I was hired. Now, 5 Years later, I get a call from different Companys and Recruiters that may want to hire me about once a Week and every Application I send leads to at least an interview. My missing CS degree rarely comes up, questions in interviews are all about past projects and experience. And by the way: A CS degree does not really teach much outside of theory, CS degree without practical experience isn't that good from a hiring managers point of view.
There appears to be a python/django group in Bristol from a quick google. May be worth a try, I worked for free for a few months initially in Django whilst getting familiar with the framework, and started getting paid after that. Obviously this isn't a viable option for people with dependencies but it got me into paid python work and my first programming job whilst studying. If you offer to help out for free they have nothing to lose and you'll be surrounded by more experienced python developers you can learn from. 
I read this post last night and thought your ideas just made the code overly complicated. Then I got up this AM and was coding and suddenly saw the light. Using your ideas, I just wrote a block of code that really clean, DRY and I think easy to read even for programmers not familiar with partial. Thanks for the post!
I'm proud of you! I printed out my first program and hung it on my wall. It's still there ~15 years later.
From what I could see, it's the [Django Bath and Bristol Users Group](https://groups.google.com/forum/#!forum/dbug). But it doesn't seem very active. There's [Bristol Hack Night](http://www.meetup.com/CodeHub-Bristol/events/220111173/) and [Bristech](http://www.meetup.com/bristech/), but they're not Python specific. Still look worthwhile, though. I'm not against working for free. I aim to know Django/Flask within the next month, anyhow. MVC: From what I can tell, views are mostly simple templates, with some logic (loops) and helper functions. Models handle data. Typically via an ORM. And controllers deal with business logic. Throw in some routes, a task runner (manage.py/django-admin.py), a web server, and you pretty much have a working MVC app. It seems like Django is similar to Rails in that it's opinionated and uses consistency over configuration. I've got a few books to go through to learn the frameworks. I prefer the concept of Flask over Django—being lightweight with less magic. But can't imagine there are may jobs for Flask devs in my area. Once I've learned MVC on the back end it should be relatively trivial to learn a front end framework. Something like Ember/Backbone/Angular (maybe when 2.0 comes out), or maybe just using React for the view layer with a Django/Flask back end (if that's possible). All that sounds more like study than production code. Ipso facto not paid work.
Reading this may help: http://docs.pylonsproject.org/docs/pyramid/en/1.5-branch/designdefense.html#pyramid-gets-its-terminology-wrong-mvc For MVC in a webapp, I use [backbone.js](http://backbonejs.org). To use python for MVC in a webapp, the client needs to support python. I have yet to see a web browser offer python as an alternative. It really sounds like you have things already put together well, and are being persuaded, possibly by curiosity, to make your code fit a design pattern that doesn't reflect the system. A WSGI app is nothing but request/response and mvc doesn't really fit well.
I'm a big fan of using `functools.partial` to create decorators that take arguments. Or even busting it out into it's own decorator. def optional_kwargs(deco): @wraps(deco) def optioner(f=None, **kwargs): if not f: return partial(optioner, **kwargs) return deco(f, **kwargs) return optioner Or something like that. I'm on mobile, so pardon any errors.
How much of this is not already handled by SQLAlchemy for me?
I agree with /r/Etni3s ; you should force a sans-serif font, or at least a good font.
1) Thats the point. A try/except swallows the errors too. 2) Happens extremely often when dealing with objects returned from third party APIs 3) I'll test out reload, I'm happy to not do the sys.modules black magic if it actually breaks something 4) Agree to disagree. I often had to drill into objects in if statements and found it easier to put the safe_access check in an if statement rather than having to break it out into a try/except.
http://docs.python-requests.org/en/latest/ http://www.crummy.com/software/BeautifulSoup/
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Beautiful Soup**](https://en.wikipedia.org/wiki/Beautiful%20Soup): [](#sfw) --- &gt; &gt;__Beautiful Soup__ is a [Python](https://en.wikipedia.org/wiki/Python_(programming_language\)) package for parsing [HTML](https://en.wikipedia.org/wiki/HTML) documents (including having malformed markup, i.e. non-closed tags, so named after [Tag soup](https://en.wikipedia.org/wiki/Tag_soup)). It creates a parse tree for parsed pages that can be used to extract data from HTML, which is useful for [web scraping](https://en.wikipedia.org/wiki/Web_scraping). &gt;It is available for Python 2.6+ and Python 3. &gt; --- ^Interesting: [^John ^Wray ^\(novelist)](https://en.wikipedia.org/wiki/John_Wray_\(novelist\)) ^| [^GNU ^Bazaar](https://en.wikipedia.org/wiki/GNU_Bazaar) ^| [^Alice ^in ^Wonderland ^\(1999 ^film)](https://en.wikipedia.org/wiki/Alice_in_Wonderland_\(1999_film\)) ^| [^Liliom](https://en.wikipedia.org/wiki/Liliom) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cokftz5) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cokftz5)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Excel actually does this (translate their formulas/commands to user languages) and it is annoying as hell. Thank god you can still use the english original in German Excel. Also thank god (almost) nobody thinks Excel is a real programming tool.
At a glance, you don't get an `Out` when the result is `None`. The `print` function has "no" return (default return for python functions is `None`). Similarly, assigning something doesn't get you an `Out`. In [1]: print "foo" foo In [2]: x = "foo" In [3]: None In [4]: def foo(): ...: return None ...: In [5]: foo() In [6]: So if you want an "out" you need the result of the statement to (1) be not-`None`, and (2) not be assigned to anything: In [6]: "foo" Out[6]: 'foo' In [7]: def bar(): ...: return "bar" ...: In [8]: bar() Out[8]: 'bar' 
Subscribe to /r/learnpython!
I can't speak for the mods, but here's my personal view. I like the way the Linux subreddits are set up. General discussion goes in /r/linux. Beginner questions go in /r/linux4noobs. Those trickier sorts of questions that an advanced user will still learn from go in /r/linuxquestions. Sysadmin-specific stuff goes in /r/linuxadmin. This allows users to subscribe to the particular thing they're long for.
You should define the function at the top, not there, but in this situation you don't even need a function.
Err. So, some documentation reading and basic HTTP request making here? Also you can't do the `print "Page Name:"+ data['name']` if some error was occured.
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
Severity of bugs can be measured by something simple like the following: 1 - Causes the entire business process to fail. IE, no one can place an order. 2 - Interrupts the business process, but alternatives exist. IE, you can place an order, but sometimes it doesn't work. Or you can't order certain items. 3 - Annoying but doesn't interrupt the business process much at all. IE, misspelling of a word or the wrong color or button size. 4 - Invisible to customers but unimportant. 5 - Should fix, but no harmful effects at all. You can ask the developers to give estimates on how long it will take to fix each bug in man-weeks or man-days or whatever. These can be remarkably accurate if you test their estimates against reality.
It's more obvious in context than just sitting there on it's own. @optional_kwargs def cache(f, lru=True, max=256): ... 
Honestly, work on as many projects as you can. PyCon 2015 is coming up soon in Montreal and 2016-2017 will be in Portland. Those are packed with learning sessions and speakers. Great place to meet companies and people looking for python programmers. Biggest thing I can recommend is just to approach people that need something done and offer to help out. Python is so broad in that you can do so many different things. Make github projects and offer to help people to accelerate your learning. 
You have w wrong. It's supposed to be '⠺'. The sign '⠾' is with.
I need to create a deb package because my projects are services, and I want the same interface as my other project in other language (Java and so on...). fpm looks really what i was looking for. Thanks everyone!
Why do you think stateful closures are harder to read than classes? I almost always find the opposite to be true. A stateful closure moves the code closer to where it's being executed, which is especially important when it's only used in one place, and a class splits the logic amongst many functions (`__init__`, `__call__`) which the reader must then figure out, whereas a stateful closure represents the logic via control flow, which is easier to read.
Try to be best ‘Cause you’re only a man And a man’s gotta learn to take it Try to believe Though the going gets rough That you gotta hang tough to make it History repeats itself Try and you’ll succeed Never doubt that you’re the one And you can have your dreams! You’re the best! Around! Nothing’s gonna ever keep you down You’re the Best! Around! Nothing’s gonna ever keep you down You’re the Best! Around! Nothing’s gonna ever keep you dow-ow-ow-ow-own Fight ‘til the end Cause your life will depend On the strength that you have inside you Ah you gotta be proud starin’ out in the cloud When the odds in the game defy you Try your best to win them all and one day time will tell when you’re the one that’s standing there you’ll reach the final bell! You’re the best! Around! Nothing’s gonna ever keep you down You’re the Best! Around! Nothing’s gonna ever keep you down You’re the Best! Around! Nothing’s gonna ever keep you dow-ow-ow-ho-how-ho-own INSPIRING GUITAR SOLO You’re the best! Around! Nothing’s gonna ever keep you down You’re the Best! Around! Nothing’s gonna ever keep you down You’re the Best! Around! Nothing’s gonna ever keep you dow-ow-ow-ow-own Fight ‘til you drop never stop can’t give up Til you reach the top (FIGHT!) you’re the best in town (FIGHT!) Listen to that sound A little bit of all you got Can never bring you down You’re the best! Around! Nothing’s gonna ever keep you down You’re the Best! Around! 
I've watched quite a few of the vids from previous years, and am subscribed to the pyvideo.org RSS feed. I'm in the UK and don't have the cash to go to Portland. Going to conferences is a good idea, though. I've heard of people getting interviews at conferences. I believe the thinking is that anyone at a conference is probably going to be half decent, or at least willing to put in the effort to improve.
Did you set your project interpreter correctly?
For most people who aren't specifically in color science, it's really not that big of a deal as long as a module like this gets you close. Also, you aren't guaranteed to do a better job than this guy. As with any piece of software, test it and maybe even send patches if you find issues.
Thanks for the response. I look forward to reading your post tonight. I certainly enjoyed the last one on tips, tricks and idioms. Keep up the good work and thanks for contributing to the world. 
A better solution than gzipped CSV is to use a binary data format like HDF5: http://pandas.pydata.org/pandas-docs/stable/io.html#hdf5-pytables Those files will end up much smaller than CSV, but also dtypes/metadata is perfectly preserved and saving/loading is *much* faster. I believe pandas can also directly write to a gzipped file if you pass in a gzip file object (like /u/Tschus shows) to `DataFrame.to_csv`.
 except: **pass** You recognize that an error may occur, but you don't actually *do* anything about it. You swallow the error silently, and just hope your program can continue from there, which is a *terrible* assumption.
It squashes any and all errors that occur inside the try block. So, anything goes wrong in there - anything at all - and you'll never know about it. It's bad because it doesn't just ignore errors that you know about but possibly don't care about. It ignores everything, and you can't even figure out after the fact what went wrong or where. The better way is to catch specific exceptions that you know how to handle, and log the rest (and/or just allow them to percolate up to a higher level of execution). The important thing is not to lose the details of the error entirely, which is what the antipattern does. It's also known as the "diaper" antipattern. Because when shit happens, the only way you'll find out is if you remove the diaper. 
They would have done better to make it only catch and ignore the specific exception they wanted to ignore - or if they have to cast a wide net or the specific error is likely to eventually be a real problem they should have made sure the program state was getting logged somewhere. edit: I guess the reason it's listed as a problem in Python in particular is that it's fairly common for the exception mechanism in Python to be used (including with custom exceptions) to trigger a response to events that are not exactly a mission critical error - like reaching the end of an iterator. Well, that's not really best example for one you would want to supress, just one that comes to mind as being used in a different way than in other languages.
As /u/kankyo said, check out Python's requests module (pip/pip3 install requests). It does the heavy lifting of internet connections for you -- you don't need all the imports or insane connection code you have going on. 
The `Out` actually has meaning - if that prompt appears, you can access the variable it displayed by typing `Out[5]` (or whatever number it shows) inside IPython. Things you print() can't be accessed like that, so it doesn't show the prompt.
Anyone else find the description of what decorators are to be very confusing? Are there better resources that describe what they are and their uses more succintly?
If you're playing with the typography, you could change the line-height of the body text to 1.3em and see how you like it. Line height (or ['leading', traditionally](http://www.designtheplanet.com/typography-101-kerning-and-leading/)) is important for the readability of text.
Just tested requests (requests.get()/requests.request()) and there was code completion for the methods. from requests import get Also, had code complete. PyCharm CE doesn't have code complete for some things like django, unless you upgrade. It even shows the django module as an unresolved reference, when adding it as an import.
"print print" and "return 0"
Please post to /r/learnpython
 except **(nothing is here, but should be)**: pass The problem is not with the pass. Sometimes you know that a specific error is likely to occur and you know that it's perfectly reasonable to just ignore it when it happens. `except ... pass` is the way that you do that, though `contextlib.suppress` is better. The problem is that this code catches *every* error, not just the specific one you were expecting. If you don't specify exactly what kind of error you want to ignore then you could easily end up with a debugging nightmare. A similar thing can happen when you put too much code in the `try:` block instead of using an `else:`.
Another great idea (don't know how things translate to the UK, but given Python's popularity there I wouldn't be surprised) along these lines - check with the PSF - they'll sponsor a hack-night especially if it helps with porting 2x code to Python 3x. Which basically means they'll spring for pizza &amp; sodas, but if you can organize the event it's definitely going to be a bonus for anyone looking for employees. And it gives you an added reason to find shops that use Python and gets your foot in the door.
Let me know if you repost to /r/learnpython. If you have any Qs about the choice of code, I'm happy to answer. for num in range(99, 0, -1): if num != 1: print('{} bottles of beer on the wall, {} bottles of beer.' .format(num, num)) else: print('{} bottle of beer on the wall, {} bottle of beer.' .format(num, num)) if (num - 1) != 1: print('Take one down and pass it around, {} bottles of beer on the wall.' .format(num - 1)) else: print('Take one down and pass it around, {} bottle of beer on the wall.' .format(num - 1)) if num != 1: print('\n', end='')
What 'insane connection' code you're referring to? Requests work with HTTP, so the only bits they could've shortened are the `urllib.urlopen` calls. The rest is mostly working with BT protocol itself, which is not even TCP-based, apparently.
I thought it was clear. Decorators wrap a function they are decorating. If func1 is decorating func2 then the output of calling func2 is equal to calling func1 with func2 as the argument. For a good example of decorators, Flask uses the @app.route decorator to handle URL routing for its controllers.
Excellent idea! Anything that involves doing things most people would shy away from is probably going to be most effective. Plus, Python 3 ✓
Whenever I get like that I move to a new technology
There are a few problems. As /u/tea-drinker points out, you have two syntactic errors; however, you also have some logical errors too. I think you've confused yourself by attempting to track too many different versions of "bottles". You can do this whole project by actually only tracking one variable. If you have a current number of bottles in a variable called `bottles`, then the next number can always be referenced as `bottles - 1`. So you may want to try making a counter from 99 to 0 (maybe using a for-loop) as /u/--Q points out, or you could use a while loop (the way you were doing before). --- **while loop version** bottles = 99 while bottles &gt; 0: # do your print bottles -= 1 # equivalent to bottles = bottles - 1 --- **for loop version** for bottles in range(99, 0, -1): # do your print --- The next thing you'll want to look at is how you did your print. You can do an if statement, the way you did (more or less) in two parts. Or you could just construct the whole sentence all at once. --- **construct the sentences in pieces** current_singular = bottles == 1 # boolean True/False next_singular = bottles - 1 == 1 # boolean True/False first_sentence = '{0} bottles of beer on the wall, {0} bottles of beer. '.format(bottles) if current_singular: first_sentence = '{0} bottle of beer on the wall, {0} bottle of beer. Take one down pass it around. '.format(bottles) second_sentence = '{0} bottles of beer on the wall.'.format(bottles-1) if next_singular: second_sentence = '{0} bottle of beer on the wall.'.format(bottles-1) print first_sentence + second_sentence --- **construct the sentence all at once [advanced]** print ( '{current} bottle{current_plural} of beer on the wall, {current} ' 'bottle{current_plural} of beer. Take one down, pass it around, ' '{next} bottle{next_plural} of beer on the wall...' ).format( current=bottle, current_plural='s' if bottle &gt; 1 else '', next=bottle-1, next_plural='s' if (bottle - 1 &gt; 1 or bottle - 1 == 0) else '', ) --- My final solution to this same problem was as follows (if it helps): print '99 Bottles of Beer on the Wall' START_BOTTLES = 99 for bottle in range(START_BOTTLES, 0, -1): print ( '{current} bottle{current_plural} of beer on the wall, {current} ' 'bottle{current_plural} of beer. Take one down, pass it around, ' '{next} bottle{next_plural} of beer on the wall...' ).format( current=bottle, current_plural='s' if bottle &gt; 1 else '', next=bottle-1, next_plural='s' if (bottle - 1 &gt; 1 or bottle - 1 == 0) else '', ) --- Let me know if you need any help understanding what I'm trying to convey here. I'll do my best to break it down a bit further. I feel like maybe you just wandered down the rabbit hole with your `bottles`, `bottles2`, `bottles3`, and `bottles4` variables. And as a side note. You can place integers in strings by doing print '%d displays a number or digit' % (99,) instead of print '%s displays a string' % ('a string',) **Good luck!**
Using the defaults is the wisest choice when you want a user to view the website and they feel that they should. A person that is telling you that they have to modify the css on the client side has no need for you to change your behavior. When you use the defaults, the people operating a web browser cannot ever lay a substantial claim that you have provided a website with poor typography. The defaults are there for you to create your web page in an unopinionated manner, and allow for the clients to make their own styling opinions. It all boils down to what you want to present to the reader. If you have the desire for everybody to see your page in the same manner, you enforce the styling. However, if you are presenting information to the reader, with little regard to style, it might be better to leave that decision in the hands of the client that is requesting the service. The people having issues with their web browsers should take the issue up with the browser developers, not the webmaster.
Seriously, even after reading the "documentation" I'm like ... so it's some sort of database thing?
its mostly UDP these days, TCP for BT is kinda dead, I've rarely have seen TCP trackers these days
People are down-voting this thread why? I've giving my code to people because there is stuff all examples in python on how to scrape a torrent correctly. if its because of an error, run it in python 2.7 and do pip install bencode.
Here's my shortest! ;-) http://aroberge.blogspot.ca/2005/12/pycontest-challenge-117-character-long.html
You should check out /r/learnpython - they have some good resources for you. Also code acadamy would be a good intro. Good luck!
Never heard of this format. Might give it a shot. So I can read a csv, modify it, then export it in that format and be able to append to it later and read from it, right? 
Decorators let you bind administrative logic (logging, caching, checking user permissions, URL routing, etc) to a function that does something. The upside is your business function doesn't need to worry about that stuff. It also makes that logic reusable. The downside is your business function gets hidden away and it's bound inside the decorator (usually). 
Think of the things that really interest you. See if there is any python project or community that also revolves around those things. Much of the examples given in tutorials are for boring made-up purposes. It is good to have a real purpose, even if it is just a simple goal that you make up each day. Maybe it will be a different set of interests for you, but in my case, for example, I ~like~ love art. I liked computer graphics since I was a little kid. I started messing around with a little program called Blender, and Blender has a built-in python interpreter. I started learning python in order to learn to make addons for blender. This is what kept me interested in python long enough to learn it. Since graphics and art are my interest/hobby, it made learning python much easier because I had an actual goal in mind for each script or addon I attempted to make.
if you want to start with testing, i would highly recommend ' Obey the testing goat ' book, its one of the simplest yet easiest book on testing i have seen and its super fun to go through it.
I said just the same yesterday to my boss! :P
There is an option to include python.exe in your PATH environment variable during the installation of the CPython official distribution. It is unchecked by default so you have to opt in. There is a new installer for Windows [coming in 3.5](http://bugs.python.org/issue23260). This option might get better. It is a pain in the ass for most newcomers. I would have checked that option by default in the installer to make users opt out and reduce the problems.
I'm using cygwin and life is ok.
I've been on OSX with homebrew for a long time so I didn't know there was a checkbox to add the python.exe PATH. Do you happen to know if it includes pip.exe as well? 
I'm no expert but HDF is a great solution for working with data that's too large to read entirely into memory... you can open an hdf file as an HDFStore with pandas (and opening is nearly instant), then perform lookups or queries to access the data, and the data you want is extracted quickly from the disk and loaded into ram. It's like a database with really high query performance, support for hierarchical data, and seems especially popular with the science community. HDF supports various compression methods. 'blosc' is popular and fast. Especially since disk read time is one of HDF's bottlenecks, using blosc can speed queries by around 2.5x simply because there's that much less data to move in compressed form and decompressing is very fast. Someone please correct me if I'm getting any of this wrong... recently started using HDF myself and very impressed by it, but still learning.
Why there is such inconsistency in type names capitalization? I mean that: `str` type is `str` `int` type is `int` but `dict` type is `Dict` `list` type is `List` `set` type is `Set` What's the point in naming types different than classes?
Thank you! It drives me nuts. 
The windows path has a length limit (2048 chars or thereabout) that is easy to run into if lots of command line stuff is installed (like on a developer machine). Actual storage for the path is longer so you can enter and edit a longer path but then things will randomly stop working. Therefore, noone but the machine owner should edit the path - you need to know about it and whats on it.
Well, that's all great. But if my print returns None, just store None, that's fine by me. If that means I can get my Out[x] displayed, I'm happy.
Probably to emphasize their being parametrized. You can thus use standalone lowercase type names in type annotations (e.g. `str`), but you cannot do the same for capitalized ones (e.g. `Set`), for they need to be parametrized with a type of the elements (e.g. `Set[str]`), or function params, etc. It's analogous to difference between C++ classes and class templates; or normal and generic classes in Java or C#; or similar constructs from other langiages.
OMG. You really don't use virtualenv? 
It went ok.
I think I have... it works for other modules. And I've checked the list of modules under the interpreter in case I accidentally used a virtualenv interpreter. The way I set up the interpreter was: Going to the project settings, choosing the interpreter and picking the folder where python was installed. 
Weird. I'll need to dig into this a bit more. It's the professional version by the way. I used my edu mail to get a free year. 
I feel like I'm in a minority who doesn't want this
Because a type hint for simple types is the type itself. So, type hint for `str` is `str`. But `dict` is not getting extended with `typing.Generic` base class, so another type will be used. (Actually, `typing.Dict` is a subclass of `dict`, and I think you can just use it as a normal dictionary :-))
Do you mean "don't want to use it", or "don't want this in Python at all"? And if the latter, why?
oh, so it's the "don't want to use it" kind. That's ok, they are optional (but I think some projects will mandate basic type hints internally). Now, the freedom you talk about is something that came back to bite me more than once, so I personally will want to use type hints at least for function arguments the moment they land :-)
How often does Windows actually ever behave the way you want it to? With every new version of the OS, being any sort of 'power user' makes you more and more aware that it is actually designed for idiots by idiots.
Thanks. Started the book yesterday, and it suggested going through the official django tut. So going through the django tut, and will read the book after. 
Additionally to &gt;=3.4 pip is also included in &gt;=2.7.9.
Virtualenv is a hack and a security nightmare.
&gt; This is accurate, meaning to set the path automatically courts disaster because it assumes that Python installation is the only one on the machine. Except that on other platforms, the Python you install *has* effectively gone straight into your path. And you can add a new Python installation to the end of the path, to avoid breaking anything that relies on an existing installation.
Add it to the path.
This has nothing to do with windows and everything to do wit the python installer. If you are going to hate on windows at least do it right.
There is no right or wrong way to hate on Windows, it is shit in any context. And also, if it is everything to do with the installer, it is also everything to do with the OS that runs it. I suspect that the installer has been limited by Windows' idiot-proof permissions scheme. Software can only do what the OS will allow it to do. Not only does Windows constantly annoy you with permissions whether you are an admin user or not, it is also a mess of old paths vs. new paths. It is a building that has been rebuilt on top of old collapsed buildings again and again and still uses some of the old pipes and wiring from the original building. Although that was just an educated assumption that Windows is just as much to blame in this as the installer. So sue me if I'm wrong. P.S. Fuck Windows.
Celery (which imo is a great example how you should make your app configurable and how to make your app backwards compatible) and click (http://click.pocoo.org/3/, which i believe is way better than argh, docopt and others).
I don't agree with your opinion and so are the people down voting you but perhaps if you stated why you believe its a hack and a security nightmare, then people could answer you and state their opinions as well and maybe just maybe you will learn something new. 
It believe it works when you open your mouth, say something stupid, then you realize that what you are saying is stupid! And then be open and ask why what you are saying is stupid and learn from the feedback. Just saying :)
You can define your imports in a custom startup script (a .py file), then go to: Spyder &gt; Preferences &gt; Console &gt; Advanced Settings &gt; PYTHONSTARTUP replacement and specify its path. Probably in your university installation, there's a script running something like: from math import * or from numpy import * so you have all the package methods directly available, but polluting the namespace in that way is normally considered bad practice in Python.
Well I didn't need to ask why it was stupid because I was already provided with an answer. And I learnt that my assumption was wrong. And I said so. What else do I need to say? It's already at the point where it doesn't matter what I say, every comment that I make to try to continue this discussion is going to be shat on, including this one. If I foolishly stuck to my opinion, the hivemind would be offended and vote it out of existence. If I admit I'm wrong but also stress the importance of being wrong sometimes as a way to learn, like I just did, the hivemind gets offended and votes it out of existence. If I squirm and beg your forgiveness for daring to be wrong on the internet, the hivemind will find a reason to be offended and vote it out of existence. This is Reddit, a place for discussion and conversation and learning from each other, as long as you discuss the right things so not to ruffle the feathers of intolerant, closed minded, educated fools who forget that once they too didn't possess the knowledge they have now.
Ah, my mistake. I thought I was in /r/LearnPython, where people are helpful.
Thank you so much!
No need to get defensive, there's a million examples out there of adding python to the PATH.
If it's not already written it would be trivial to do. Look up Python libraries and DIY, but people here ain't too fond of 'do my homework' requests (and it wasn't me who downvoted).
Im not sure what you are getting defensive about. He gave you all you needed.... did you want him to write you a 10 lines exact instruction manual? This is no /r/techsupport where we copy paste you the first 5 google searchs :P we expect you to know that... how to google search... its extremely popular on google...
SQLAlchemy is far slower than using a direct interface most of the time, especially as an ORM.
Okay thanks, how about hashmap.py
I find simple wrapping proxy/dummy objects way better. class Nope: def __getattr__(self, name): return self def __getitem__(self, name): return self def get(self): return None def __nonzero__(self): return False class Maybe: def __init__(self, val): self.val = val def get(self): return self.val def __getattr__(self, name): ret = getattr(self.val, name, Nope) return Nope() if ret is Nope else Maybe(ret) def __getitem__(self, name): try: return Maybe(self.val[name]) except (KeyError, IndexError): return Nope() x = Maybe(someObject).attribute['or'].item['access'] if x: print(x.get()) (untested code)
That wasn't defensiveness; it was snark. This is defensiveness. At any rate, since my question was so simple, it could either have been ignored or answered politely, as another user has kindly done since the first reply was posted. Instead, in response to "I didn't do the thing during installation. How do I do it now?", I got "Hurr durr, just do the thing". I wasn't about to thank them for their invaluable insight, so I met snark with snark. Hell, just saying "Google it" would have been better. I didn't make a separate post about it. I didn't spam the comments asking everyone how to do it. I asked a relevant question in response to a comment about newcomers installing Python to the PATH. That being said, patronizing newbies is a great way to make them lose interest in a community and a subject.
I just upgraded from 2.7.5 to 2.7.9 on Windows to check out the PATH adding. I don't see any new executables in `C:\Windows`. Is this for 3.4 only? 
Do the [Udacity.com](https://www.udacity.com) 'Intro to Computer Science' course. It's free. Lesson 5 goes through how dictionaries work via hash tables. Once you know what a hash function is, what it returns, and how the position (bucket) in the hash table is calculated you should be able to understand the code more easily. If more than the hashing/hash table is confusing, skip over it for now. You don't need to know the implementation details of a dictionary to use it. Mostly understanding the following is important at the start: * A dictionary is a key-value pair. * What that looks like. * How to get/set values in the dictionary. May want to learn about .get(). * How to iterate over dictionaries. Need to learn .keys(), .values(), .items(). * That dictionary keys must be immutable. * The 'in' keyword. * How to construct a dictionary with dict().
Yes sir, thank you so much!
This is what i was looking for thanks a lot!!! 
Thank you very much , i was looking for these websites! 
I've always just fully specified calls to python c:\python34\python.exe [whatever]
Thanks for your kind advice!! 
Good going. Atleast you're proud enough to show it off and are enthusiastic about it. 
hey mechpaul Thank you again for your help. I know this is not /r/learnpython but may I ask you two more questions? I used your code for another game in which you have to name the capital of a given country: http://i.imgur.com/KXpXxh0.png 1) Is there an easier way to combine two objects as {'country': 'capital'} then with dictionaries? It seems hard isolating and presenting one of them as a word (see "x" and "userAnswer") and checking the answer (see "correctAnswer" in which I can't define y.lower([y]) so you have to write the capital exactly as it is defined in the dictionary. 2) how can I pick a random object without replacement from a dictionary? THANK YOU so so much :)
## how two balls collide i won't give you a recipe for that one, but try to guide you towards finding a solution to this problem. the approach i'd like to suggest to you is taking a sheet of graph paper and drawing two circles on it that have just moved into each other. as with the wall collisions, you won't catch the balls before they've already hit each other -- you've chosen that way for the wall as well, and it works reasonably well for such a simple example. (a more sophisticated approach would to detect that a collision happens, calculate the movement of say the first two pixels into the collision, then calculate the collision itself, and then the remaining pixels, but start slow and just assume that the balls moved a little into each other until they start to bounce back off each other). when you've drawn those two slightly intersecting circles (i suggest a considerable intersection so you can still draw visibly), think of how they'd bounce back off each other. don't think of x, y, dx and dy for the beginning, just wrap your head around how they visually bounce. when you have an understanding of the bouncing process, you can start to add a coordinate system, and each ball's x, y and the dx/dy pair. if it helps, you can even take particular example numbers and calculate the new dx/dy without the help of a computer. finally you should have a generic calculation of the bounced directions, and can phrase that in python. (as with many questions here on /r/python, i'm tempted to send you off to /r/learnprogramming or /r/algorithms, but now that we're here, i'll happily help you with further steps in this thread. mind you, though, that nothing in this sub-thread is particular to python any more). one thing you should be aware when phrasing this into a Ball.collideWith method is that by the time it is called, it has not been checked whether the two balls actually collide -- it is called for each and any pair of balls. implement that check at the beginning of the function, and return if they don't collide. that check should be the only place in the code where you will have to check the radius of the balls, the code for the geometric bouncing should be independent of that. one further note before you start doing the graphing: stick with identical balls for now. you can have the check of whether they actually collide evaluate both sizes (it'll be something along the lines of if ((self.x - other.x)**2 + (self.y - other.y)**2)**0.5 &lt;= self.radius + other.radius: return ), but in your calculations assume same sizes. for the rest, assume same sizes, otherwise you'd have to deal with things like mass, conservation of energy vs conservation of momentum, and whether you're thinking of balls or cylinders. we can think of that later, but stay simple for starters.
I think /usr/bin/python is usually a symlink to /usr/bin/python(2 or 3), which is itself a symlink to the specific version of python.
Guido once said that the problem with recursion (in regards to adding tail call optimization) is that people will use it. If we add this, people will use it, so you won't be able to avoid it.
 from operator import itemgetter segments = [ ['┏━┓', ' ╻', '╺━┓', '╺━┓', '╻ ╻', '┏━╸', '┏━╸', '╺━┓', '┏━┓', '┏━┓'], ['┃ ┃', ' ┃', '┏━┛', '╺━┫', '┗━┫', '┗━┓', '┣━┓', ' ┃', '┣━┫', '┗━┫'], ['┗━┛', ' ╹', '┗━╸', '╺━┛', ' ╹', '╺━┛', '┗━┛', ' ╹', '┗━┛', '╺━┛'], ] def display(numeric): get_digits = itemgetter(*map(int, numeric)) for row in segments: print(" ".join(get_digits(row))) display('378163771') #&gt;&gt;&gt; ╺━┓ ╺━┓ ┏━┓ ╻ ┏━╸ ╺━┓ ╺━┓ ╺━┓ ╻ #&gt;&gt;&gt; ╺━┫ ┃ ┣━┫ ┃ ┣━┓ ╺━┫ ┃ ┃ ┃ #&gt;&gt;&gt; ╺━┛ ╹ ┗━┛ ╹ ┗━┛ ╺━┛ ╹ ╹ ╹ 
Honestly, get a real book like Headfirst Python or the *free* Dive Into Python (and Dive Into Python 3, as you should really be learning the latest version of the language). As I've said before, Learn Python The Hard Way doesn't teach you anything; it just throws up code and says "now repeat after me". You need a real guide that's at least as much text as code. 
Brilliant! I like your answer the best so far, it's truly elegant and easy to understand. I was thinking about defining segments in a more natural way, like you did, but my code was much less elegant, because it lacked itemgetter. Nicely done!
 File "seg.py", line 11 print(leds, end='') ^ SyntaxError: invalid syntax 
In the future, please try out /r/learnpython for questions such as this one. They have a pretty dedicated team of people answering questions just like this one!
It's Python3. For Python2 use print leds, instead.
Type hinting in comments is such an awful syntax IMHO. Is there any reason they're sticking with that?
Python, like any interpreted language with a portable implementation, makes for great cross-platform development. However, I wouldn't claim that Python is great for *any* GUI development, cross-platform or otherwise. If software that runs on the desktop is your end goal, there are better options.
In order to get it out the door quickly. There are already systems in place that do it this way, so that's they way they did it. I honestly think that the whole thing is a huge waste of time.
For a single line you can write out a carriage return character sys.stdout.write('\r') Which would take you to the beginning of the line and you can draw over what you've already written. But you can't do multiple lines like this. To do that I'd recommend the [curses](https://docs.python.org/3/library/curses.html) library (or something similar, but curses should work).
A line is a line, and once you go past it, at least using standard stdout functions, you can't return to it. In a wide enough terminal, you could have each computer on the same line. This sounds like it's a somewhat complex project -- why not use something like the [curses](https://docs.python.org/3.4/howto/curses.html) library to make a bit more complex display?
Or another way of putting it, is they are equlivent expressions. Just they are typed different. I cerntally prefer the decorator, particarly if it is a decorator that takes arguements, that gets really ugly otherwise. So yeah, just are more readable to encourage people do use them, since they are a great pratice.
Additionally, adding too many things into PATH can cause slowdowns in some scenarios (this is especially noticeable if you use Cygwin/Mingw) because of the overhead of searching executables in PATH.
Thanks! I wasn't aware of curses, so I'll take a look into that and see if I can user that for my needs.
May I ask which country this job is in? Dice.com, America's biggest tech job site, lists 35 jobs across America with the word "Delphi", and about ten of those turn out to be for the Delphi auto part manufacturer or contain lines like "knowledge of general purpose programming language (e.g. C++, C#, Delphi)". This doesn't stop some in the Delphi community from claiming that it has success in the enterprise. In fact, he was probably having a bad day when we had a little exchange, but the current Delphi product manager once replied to me that he believed that Delphi has had more impact on the business world than Python ever has (!!!).
It did; it's just a long, slow, painful death. There's estimated to be about 50K diehards worldwide, 8K of which actively spend money on the Delphi ecosystem. Due to some confusion, misquoting and misrepresentation, however, some of those diehards will still attempt to tell you that there are 3 million Delphi developers worldwide (!!!). If you see this figure it was actually the total number of copies of Delphi ever sold and included educational sales and "an estimate for piracy".
A parser? Was the format Delphi uses to dump binary data ever even documented?
Adding something to your path isn't dependent on when you installed it. %path% = %path%+"c:\windows\python34" In your command line will do the trick, or you can go into your advanced system settings and edit your environment variables (how I do it). The folks before weren't being patronizing, you just didn't understand the task. Try and be a little more humble aight?
No problem! Here's some [documentation](https://docs.python.org/3.3/howto/curses.html) to help you get started.
Thanks. Why do you feel Python is not ready for prime time in this regard? The Dropbox desktop client, e.g., is written in Python.
What I mean by 'not ready for prime time' is that it is not a very robust solution. You don't just whip up an application on one platform and just build/test it on the others (a-la Java, and C++ with the right tools). That certainly doesn't mean that you can't do it. In DropBox's case, it looks like they're bundling their own customized Python 2.5.4 interpreter with the application. It looks like the "cross platform" nature of the application comes from them building their own framework on top of WxPython and PyObjC. Dropbox is a fairly large organization. They have the resources to engineer custom solutions like this. It's in their favor to build customized solutions for writing applications in Python so they can share developer resorces across their frontend and backend projects.
Comments should not be interpreted for type information. Not a new or unique view but a big one that has me against this PEP.
I don't know very much about wxPython, so I can't really comment there. My experience with cross-platform GUI development in Python mainly revolved around PyQt/PySide, and the juice was certainly not worth the squeeze. For simple applications, it worked fine. Once things got more complex, I ended up with some pretty bizarre issues. This was a long time ago, so maybe things have gotten better. I do know that packaging applications made in Python has *not* gotten better. Especially if you need something like PySide or wxPython.
Same reason people use US customary units, I guess. They don't care that there are better options out there.
https://realpython.com/blog/python/the-most-diabolical-python-antipattern/
I'm not sure what you mean by "packaging applications" but I've distributed .exe files of wxPython apps without much trouble, at least on Windows. I know less about the other platforms.
I'm not doubting you, but can you link some examples of good UI done in Java? I'd be happy to invest some time learning it if I thought the end result was worth it, but beauty is obviously subjective. Some people may even like Azureus or Vassal, but they drive me up the wall.
Why is it important to you that you see `Out[x]` displayed?
I was going to link to that as well (that's what I meant by there's others). It is an extra dependency though, and those make python hard to package.
Back in 2011, I tried to install the scipy stack on my Windows computer. After about an hour of tears of misery, I finally just gave up and decided that I didn't *really* want the scipy stack on my computer. (I wanted to poke at it to see what I thought of it, but I didn't actively have a need for it.) My problems may or may not have been exacerbated by needing to juggle multiple Python versions--I'd initially installed a version of Python 3, but at the time the scipy stack required Python 2.x, so I then had to have 2.7 and 3.x (I think 3.2) on my machine at the same time.
You basically want to define a hit box for each ball, and have the balls rebound if their hit boxes overlap. As for the trajectory, if you want perfectly inelastic collisions and it's a 2D game, it's a pretty straightforward operation to have v = [x, y] Turn into v = [-x, y] Or v = [x, -y]
I'd guess because of the difference between literals and objects.
For me PyCharm CE can't handle lxml module - says it's an unknown/broken import.
Sockets? I don't know lisp at all, but if sockets are easy then that's the way to go. You'll have to serialize the data; probably json or your own string representation of the data.
I'm sorry, what is colour science? and what kind of science doesn't rely on reproducible results?
Speaking of PATH variables, is MS ever going to modernize the way those settings are managed? Using a tiny ass text box to string together hundreds of paths is such a pain in the ass. 
As with any rule, they are not absolute. Even the infamous goto statement has its uses where it is actually the best solution (ex: error handling in languages without exceptions). I just wanted to share this tool with others since I it really helpful at multiple companies for dealing with objects returned from third party libraries, logging data on requests where you don't want exceptions thrown just for informational logs, etc. I guess /r/Python hates it, and has made that very clear, but I don't care, I still find it useful.
partial mangles introspection in my experience. If you want help() to be a way for your users to navigate your module, partials might bork it.
Aren't desktop applications going the way of the dodo?
Just because it's not an absolute, doesn't mean you as a library developer should be completely disregarding it. Especially since you have no particular reason to excuse yourself for swallowing other people's errors, effectively killing their exception handling control flow.
A little bit, yeah. There are very few places that a browser-based application can't do almost as well as a desktop app. However, there are a few things to consider before writing off desktop as an option for your app: 1. Performance. JavaScript interpreters have become quite fast lately, but they still can't hold a candle to Java or C#, and they'll never come close to a well-written C++ application. 2. Access. If you need to be able to access features that the browser won't let you access, then you need a desktop app, regardless of what technology you use. Chrome apps are just desktop apps written in a strange language. 3. Requirement of services. It's easy to send someone an .exe file, or even a .jar file, and tell them to run it. If you want to provide access to your web application, you're going to need a service for your users to connect to. This service needs to remain online, and it has to be inspected for security holes. Granted, if your desktop app relies on some outside service, then it suffers the same problem. However, if the gist of your app is "take user input, produce output", then requiring a server really puts a damper on ease of distribution. Granted, you're probably going to want a website for your application if you want more than a few people using it, anyway. 4. JavaScript. I could go on for hours about everything wrong with JavaScript. If you feel the need to punish yourself, or if you like the kind of pain that JavaScript has to offer, then by all means, go have fun over there. I'll take a language designed with a bit more thought, thanks. The "JavaScript alternative" languages that compile to JavaScript always feel like second-class citizens, forever constrained by the host language that they compile to. Until the browser vendors come up with a better platform to run software in their browsers (pro tip: they won't), web applications will always be developed with this monstrosity in mind. If you're targeting mobile, then this is a moot discussion. You should just use whatever tools and languages are blessed by the vendors of said phones.
If your application starts in Python, you could use a subprocess to "to spawn new processes, connect to their input/output/error pipes, and obtain their return codes" https://docs.python.org/2/library/subprocess.html
 PyQt4 and PySide are well supported in windows as well as linux, i have tested PyInstaller (no support for python 3.x yet) to get a single exe from the whole PySide application , the exe will be about 8 megas for empty form , it will run without need even python to be installed . also WxPython but i didn't try it .
if you model the bounces like that, the balls will behave like boxes, and that will produce noticably wrong bounces. most extreme case are balls colliding head-on on the diagonal: while they should bounce back on the diagonal, with your modelling they'll bounce back almost at right angles to how they should along the other diagonal.
Your right scripting libreoffice in python is a pain. Mostly because there is only limited documentation and the api feels like using java
If you write the first link in a browser, the file begins to download. So you don't need to get the captcha.
Have you considered simply dumping this data into MongoDB or a similar JSON-like object store as it happens, then working with that data to produce the summarized and/or graphed results as necessary? Both MongoDB and pymongo are quite easy to get started with. SQLite is good for small data sets, but probably isn't what you want for your level of scale. 
&gt;xlwings allows for the execution of python code within Excel. This simultaneously intrigues and terrifies me.
Why do you use Windows and not a linux kernel 
Are you fucking kidding me? Jesus.... any article that starts with this is idiotic. "Microsoft Excel remains a tool of choice for big data mavens, due to the numerous ways it can plug into third-party data sources and massage them with ease."
xlwings is cross-platform and works on Mac, too. On Windows, it's actually a wrapper around pywin32 but makes a lot of things a lot easier than when dealing with pywin32 directly. For example, you can just assign a Numpy Array or Pandas DataFrame to a single cell (top left corner) and you're done. With pywin32 you'd have to calculate the dimensions first and transform everything into list of list first. It also provides a way of triggering you're code from Excel so you can replace VBA macros.
It doesn't need VBA to start it - it's an additional option. You can just run your Python from wherever you want to interact with Excel, no need to call it from within Excel. 
Always happy to hear suggestions about improving the API! Send me a message or open a GitHub issue.
xlwings enables exactly that: Download one of the standalone examples for Windows (Fibonacci or Monte Carlo Simulation): http://xlwings.org/examples/ Download, unzip, run - no need to know anything about Python nor have it previously installed. It looks and behaves like any ordinary macro.
It's such a pity [Resolver One](http://www.resolversystems.com/) died so early.
Some things I thought of: * printing 1 to 100 (boring) * showing some opencv examples, sadly enough, the provided infrastructure doesn't allow me to use opencv * do some machine learning with scikit-learn (not interesting enough and might take too much time)
Haha, yeah, i thought that too. Tried to manage multiple csv files from excel once. What a joke. 
Thank you, /u/maratc I will try Phantomjs.
Would you consider doing demonstrations rather than teaching them code?Preferably simple ones. I'd go with something like web-scraping data (sports statistics?) or streaming with the Twitter API and visualizing trending topics.
If. You have access show them Maya (3d modeling engine) it's all programmed in python. Or as of 2012 it was.
Sorry, you're alright.
This looks kinda like Go
I don't like SS, Ruby/rails is harder to read IMHO. Guido states human readability as a goal, use of 'not' over bang and "and" over symbol &amp;. Python read very nice, possibly the best. 
Yeah, if you can open your data in Excel you do not have "big data".
No idea what you are talking about. Used [pyoo](https://github.com/seznam/pyoo) and it was a blast. I got my sheets baked from mysql db easily. With formatting and formulas and all i needed. API is pretty intuitive too. One thing i had missing was constant for certain format but it was simple to do it myself looking at how pyoo does things. 
I don't think printing 1 to 100 has to be boring. I mean, if you're just going to type for x in range(100): print x+1 then sure that's boring. But if you add a little more to it: &gt;&gt;&gt; def countdown(n): ... if n &gt; 0: ... print n ... countdown(n-1) ... elif n == 0: ... print "ZERO!" ... return 0 ... else: ... raise ValueError("Invalid value specified") ... &gt;&gt;&gt; countdown(10) 10 9 8 7 6 5 4 3 2 1 ZERO! &gt;&gt;&gt; countdown(-1) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "&lt;stdin&gt;", line 9, in countdown ValueError: Invalid value specified Now you get to talk about conditionals, error handling, functions, and most importantly (IMHO) recursion. I think recursion is a concept that can be fascinating to new programmers (at least it was to me, when I was a new programmer). If these are brand-new programmers, I'm curious why you're looking to jump into showing them machine-learning libraries. There's a lot of material to cover that falls somewhere between "Hello World" and machine learning ;) What about list comprehensions? Showing them how to find things for themselves with dir() and \_\_doc\_\_ ?
Probably best to compare code samples to show off Python's compactness and legibility. The thing that blew my mind the most was for loops.
Not arguing but one of the v's of Big Data is variety. 
Not sure how does all that qualify as cool stuff? If I'm new to programming, boring loops, errors and what not would be the last thing to get me interested. I would personally be more interested in interactive programming (iPython web notebook) to do cool things like drawing charts, downloading videos/songs using requests module and so on..
Nice idea, i was using something like this from fn.py which provides right shift operator for function composition which takes an argument and left shift operator for function composition which doesn't take an argument . I am not sure if dollar sign would be actually useful in Python and that's because of different syntax, but i think something like pipes would be very nice. I don't like the current way i am using for function composition which is like this : import functools def _compose(*fn): return functools.reduce(lambda f,g : lambda x: f ( g ( x )), fn) using F() from fn.py: _fetch = lambda _source : head \ ( take (1, map ( F() &gt;&gt; (_.get) , \ [i for i in html.fromstring(_source).xpath('//div[@class="desktop"]/a')] )\ ) \ ) ('href') 
Hey, so if you only have a little while I would try and do something visual. http://introtopython.org/visualization_earthquakes.html Has a great exercise in mapping recent earthquakes. This would be a lot less abstract than something like printing 1 through 100. 
Yes, you need Excel. This is basically the main difference to xlrd/xlwt, OpenPyxl and PyxlsWriter: While those libraries can read and write the files (and do so on any platform), xlwings is primarily for programming the spreadsheet itself and interacting with it while it is open.
Of course you'll be able to avoid others using it. That's the point of standardizing it. Today if others use it, you're sunk because they didn't write normal Python code. In a 484 future, you just use their code as if it were untyped Python. 
I think rather than going purely functional, you went back age old OOP and using classes. Just my gut feel :-) But may be you are just being pragmatic.
Yeah, but I think it was poor writing. I think the author meant big "data mavens", and not "Big Data" mavens. He's probably unaware or not used to the term "big data" the way it's currently used.
See also the not free data nitro https://datanitro.com 
simplekml is amazing. https://code.google.com/p/simplekml/
Hmm yes. If you check [pyoo.py](https://github.com/seznam/pyoo/blob/master/pyoo.py) you can see its built on top of pyuno. And it is messy indeed. Probably reason why multiple libs on top of it were was born. Well next time use pyoo and it will be great ;)
Often times you need to create something that will be handed over to a client. Client has Excel on all their machines. Everyone working for client knows how to use Excel. Client's clients know Excel. Nine times out of ten (for me at least) the choice of tool is not based on what is best for computations, but on other considerations.
Thanks, that looks good for the kml part. Do you (or anyone else) know of a good library for plotting on maps? Plotting things on a map seems like such a basic data visualization task, not just on large scale like what basemap provides. With all these map services available today it surprises me that it's this hard to find a good map visualization library for python. Looking around some more, I've found [Folium](https://github.com/python-visualization/folium). It looks good, but I haven't tried it out yet. Anyone have any experience with it or any other mapping library?
Why is this scary? 
Profile! Any optimization before profiling is premature. As you learn from your experience, you will start to avoid slow ways of doing things. But it is not smart to think your smart and spend time "optimizing" without checking what is actually slowing the code down first. This is the biggest "don't" of learning to write performant code. http://pymotw.com/2/profile/ Also, timeit is a great function for testing the performance of single functions and short pieces of code. You can compare a couple of different versions and see what is fastest: https://docs.python.org/2/library/timeit.html
Ah okay. Perhaps. My question for you: How would you go purely functional in this case? I'd be curious to know exactly what you mean if you have time to write an example.
Hey there! I'm going to direct you over to /r/LearnPython (and remove this post). That's probably the best place on reddit for you to get started with the Python language. There's many dedicated people who are super helpful! Personally (and to answer your question a bit) I like [Learn Python the Hard Way](http://learnpythonthehardway.org/). Interesting and informative!
Kids love spies. Teach them crypto with pynacl.
I don't want to spoil the party, but my experience tells me that if you really need optimal performance try to rewrite the component which causes bad runtime in C++ EDIT: And use [Valgrind](http://valgrind.org/) to profile it.
It's very rare that you even need to do that. There are so many tools out there that already interface with C++ that you can probably just use. We've written that line in every one of my company's computational software proposals (so requiring very good performance) and we haven't written a line of C++ code (outside of some bug fixes to legacy/open source software) in 10 years. Numpy, scipy, pandas, and hdf5 are necessary packages in my industry and effectively eliminate C++ code.
I'm trying to make myself a text based game. I've made a tiny portion of it Readily available on a Google Site and I'd really appreciate it if a few of you guys could download it and have a poke around to give me some tips on formatting and just general coding. I'm 15 and plan for this to be developed over a period of months so I'd really love some tips to advance the game. TL;DR I'd like some tips on the text based game I'm making in python. Download at link.
I wouldn't jump immediately to that conclusion. Algorithmic time complexity is often a cause of poor performance and is just as bad no matter which language you use. If all else fails, yes, rewriting in C can make things faster, but trading an O(n2) algorithm for an O(n) can be a big and easy win.
I'm not sure python would be the best for a **10 minute anything**. You may want to use awk. You go through as many useful one liners on a huge dataset and show how powerful computers can be with really old scripting languages. You only have 10 minutes. | Here I have 2,000,000 million rows of data. If I put this into excel it will crash and be unpleasant. | Let's say the data looks like this. How do I find out how many times Curly said "Wise"? 0,Larry,Wise guy! 1,Moe,Wise guy! 2,Curly,Wise guy! 3,Larry,Nyuk nyuk nyuk 4,Curly,Nyuk nyuk nyuk 5,Curly,Wise guy! 6,Larry,Wise guy! 7,Curly,Come here you! 8,Curly,Nyuk nyuk nyuk 9,Larry,Wise guy! We would use this script. cat data.txt | awk 'BEGIN{FS=",";sum=0;} ($2 == "Curly") &amp;&amp; ($3~/^Wise/) {sum += 1;} END{print sum;}' 222924 
[this](https://theopolis.me/location-history-visualizer/) is a much better tool for visualizing your Google location history. I doubt that it uses python though.
for cpu intensive pure-python code try pypy. Other than to get meaningful help you should really be asking more specific questions.
That guys fingers must fly over the keyboard.
This actually does belong in /r/learnpython, as do all specific Python questions. It might be better to think of it as "/askpython".
you know I find the zone out time the best time to think about my programming If you are always preoccupied with an app then your inventive/creative side is hindered. But I often have to scold my mind when im day dreaming because I will too often dwell on horrible past events. Which is very unproductive.
Are you supposed to be writing out the contents of the most valuable coinpurse? Or just the coinpurse number? Either way, in your loop you can have a variable that contains the highest value seen so far. It can be a tuple (bag#,value) or it can be the full contents (bag#, value, pennies, nickles, dimes, quarters, dollars) Each time you compute the next bag, compare it to the highest one seen so far. If it's higher, overwrite it with the new bag. If it's lower, just ignore it. At the end, print out the stored highest bag.
I'll try the tuple. I'm not a programmer, and this was my first real programming course. Unfortunately, it was a 2 week bootcamp from work. 
[ExPy](http://www.bnikolic.co.uk/expy/expy.html) is a full python 2.7 intepreter for Excel.
I would just like to point this out: def go(dbapi, ctx): conn = dbapi.connect( user='scott', passwd='tiger', host='localhost', db='test') &gt; host='localhost' *EXPLANATION EDIT:* **It's not fair to run the test on a local database**, where you're very obviously far less likely to be IO bound. What if your ping to the server is a couple hundred milliseconds? All of a sudden, you actually are IO bound. *FURTHER EDIT:* He tests for IO-boundness via a [script](https://wiki.openstack.org/wiki/PyMySQL_evaluation#Appendix_A_-_Performance_Tests) that is meant to strictly compare driver throughput and not take into account network IO trips, the latter of which is what makes async IO so good. What sort of joke is this?
You've cut and pasted the response we gave without thinking it through, and understanding where else you are using word as a list, and trying to access an element of the list.
Got it now! But I have a new program now, and a new problem. Think you can help?
What exactly does this do if you don't mind explaining to me?
I have this app for quick read: [Docs for Python]https://play.google.com/store/apps/details?id=com.jubad.pydocs330&amp;hl=en
I'm assuming this is more useful for different keyboards?
It gets better, if put this line in `~/.inputrc`, vi mode is selected automatically: set editing-mode vi Thanks to amitutk on HN.
Thanks! And you are the first who've noticed this. :-)
If for some reason the auto-save feature is not available, you can always send key presses (Ctrl + S) to Word every couple minutes. Personally, I would use something like AutoHotKey for that though.
my friend told me she had tried to make it autosave, but it messed up O.o no clue, i'm just making a program to practice python^^ And i'm not sure why it doesn't work, it just crashed and there was no temp docs to restore :/
AutoHotKey can [send keys directly to any window you want](http://ahkscript.org/docs/commands/ControlSend.htm), minimized or not. Edit: I see you want to use Python as a practice. In that case you might be interested in [pywinauto](https://code.google.com/p/pywinauto/).
You should not put your code inside the class definition. Also the coinPurse class should represent a single coinPurse. Right now you are not actually using your variables defined in the init method. You just make new ones in your loop. Only write the init method in the class definition and then add a value() method that returns the value as float + a method that returns a string or directly prints the coins in the purse named print_purse(). class coinPurse: purses = 0 def __init__(self, dollars, quarters, dimes, nickles, pennies): self.dollars = dollars self.quarters = qarters self.dimes = dimes self.nickles = nickles self.pennies = pennies def value(self): val = self.quarters*0.25 val += self.dimes*0.1 val += self.nickles*0.05 val += self.pennies*0.01 return val def print_purse(self): print('\ndollars = \t\t{}'.format(self.dollars)) print('quarters = \t\t{}'.format(self.quarters)) print('dimes = \t\t{}'.format(self.dimes)) print('nickles = \t\t{}'.format(self.nickles)) print('pennies = \t\t{}'.format(self.pennies)) #End of coinPurse class Write all your code to read in the values outside the class and use the values to create coinPurse Objects, that you put into a list. You can then use list comprehension to get a list of the values of the purses and the max function to get the most valuable purse. value_list =[item.value() for item in purse_list] index = value_list.index(max(value_list)) # index biggest value purse_list[index].print_purse() # print biggest purse summation = sum(value_list) # sum of all values to read in a purse from a file you need to know the format of that file. If it is something like quarters:20 dimes:10 Just do this file = open("purse.txt") quarters = int(file.readline().split(":")[1]) # split line in two strings and take the second and convert to int ... file.close() And then create the coinPurse objects out of this. You could also look into the built in pickle module which makes it easy to save and load objects. 
very helpfull! :D I didn't know you could do that, and i will sure look into it. thank you for the links and help^^
What's wrong with that? Localhost works in many places where an IP or URL address are expected. In Linux boxes too its a shortcut where it bypasses some of the network layer, where 127.0.0.1 doesn't, or something along those lines
I will copy my comment from the last spam you posted (3 days ago) &gt; I liked the description you provided here. It saved me wasting &gt; my time. /s &gt; &gt; &gt; I came expecting a command line application to crash an &gt; application and give me a core dump, or to retrace core dumps. &gt; Instead it appears to be some sort of database thing. &gt; &gt; Sigh 
/r/learnpython
if you install your deps in a directory /foo/bar/.. then all you need is to update the environment variable PYTHONPATH. If you have a project for examle: /path/to/my_project/ where you have : /path/to/my_project/my_deps/ # You install all your dependencies and third party module here. /path/to/my_project/main.py as you main entry point file. Then in this main.py all you need is to add at the top: import os import sys where_am_i = os.path.dirname(os.path.abspath(__file__)) sys.path.insert(0, where_am_i+"/my_deps") 
I think Python could do this task nicely. I have built scripts to do similiar querying of a webpage in Python with no troubs. Look at the [requests](http://docs.python-requests.org/en/latest/) and the [BeautifulSoup](http://www.crummy.com/software/BeautifulSoup/) libraries. The [CSV handling](https://docs.python.org/2/library/csv.html) is built in. If you dont know python, try [CodeAcademy](http://www.codecademy.com/en/tracks/python) to get the base stuff down then lots of googling and reading. You may also find the books on the RHS of this sub to be useful. Good luck, and may the force be with you.
Yeah, I've even installed [Vimium](http://vimium.github.io/) on Chrome just because it's easier to regex search webpages with `/[pP]y(thon)?\r` and things of this nature. And I'm only moderately invested in vim.
Thanx, should be fixed soon!
Thanks for your advice and the links, I'll cut my teeth at CodeAcademy tomorrow. :)
I'm not sure about your deployment patterns but in my experience (web dev, online games) you're going to try to put your DB on the same LAN, if not the same PC, as the other servers, so your ping is likely to be measured in microseconds. If your DB requires a 200ms round-trip to get any information back to the server then your site is doomed to be slow no matter how you slice and dice up those network requests.
Alternatively: 1. Open vim (optionally "set ft=python") 2. Write python that uses print for result 3. %!python It will interpret your buffer through the python binary and replace it with the stdout. Great for testing things like try+excepts, classes, and context managers that are annoying to test in a repl.
I dont know how it's "alternate" to OP's post. you both are talking about two different things.
&gt; Additionally, FTFY.
r/learnpython
Web scraping can be fun, maybe something social-related.. Or something that searches the best price on eBay+amazon+ecc... Guess something useful for teens can work in a 10mins thing
Point taken; I'm wrong to assume that communication time should be a noticeable bottleneck between application and database, as kylotan also pointed out earlier. With respect to the remark about open database connections, I agree that it's unrealistic to have anything more than in the order of 10s of database connections open, and so that level of concurrency is not worth talking about. Finally, I agree on the point that rewriting an application to be gevented is costly, especially when considering data consistency around yielding library calls. But consider this scenario. MySQL with InnoDB, backend processing running many concurrent indexed, FKed inserts into a table, meaning lots of locks and waiting on the database. While the inserts themselves won't happen any faster in a threaded or a gevented application, the advantage of gevent with an asynchronous MySQL connection is that other work [that may be IO bound but may not depend on database IO] can continue to happen with little overhead, resulting in an overall gain in work done. On the other hand, spinning up another thread is expensive, and all threads trying to write have to wait until IO returns. An argument could be made that any work that has to touch the database could be isolated to another process or machine to alleviate this issue for the threaded application. However, for sporadic workloads, the gevented application would almost certainly squeeze more out of its given resources in this scenario. The idea of testing strictly database throughput I feel is a bit pointless, as it's often not practical in terms of measuring performance of an application as a whole.
It's been there for probably 20+ years now. The shell is largely unusable for me without it!
Armin Ronacher just released Platter, which does exactly this. But there is nothing preventing you from putting your virtualenv inside your project folder and including it when you deploy. I think you'd need to be careful if any of your packages are compiled (e.g. psycopg2), but otherwise it should work. Not quite the same, but I had a requirements folder checked into git that contained the requirements tarballs for my virtualenv so that the server wouldn't have to hit pypi to fetch them when I deployed. Edit: I can understand not wanting or being able to install virtualenv on the machine you are deploying on, but you should have it installed on your dev machine without question.
I realise this now, but had no idea! I have been using "set -o vi" in bash for more than 20 years, and I'm always surprised when I work with people who love hating emacs but don't know about "set -o vi".
TIL about bpython! Weird though, C-r doesn't work as I'd expect it either in bpython.
Or use python-prompt-toolkit: https://github.com/jonathanslenders/python-prompt-toolkit It has vi and emacs modes, syntax highlighting, multiline editing, autocompletion with popup and more ! tldr: ptipython is better than ipython !
Reddit tip first: ^ this would better be put as a 'self' post, with a link in there. I was a bit confused when I clicked on the post asking for help that took me to a page that wasn't about help! So, the game... 1. There is no loop, so things can only happen ~1-2 times before exiting. It looks as though you've attempted to work around this by repeating segments. A better approach would be: while True: userinp = input("What do you do? ") if userinp == "go to waterpump": print(waterpump) input("What do you do now? ") elif userinp == "commit suicide": print(suicide) print("You have Died.") break else: print("I don't know how to", userinp) ...the break will allow you to exit the loop, and fall out of the program, without calling sys.exit(). This is also useful in clearing up anything that you want. 2. Try and think a little more deeply about the end-result you're looking for and implement the architecture now. As it stands, how are you going to control what is shown on the screen as your character moves around? How will you restrict abilities at each point. You could do this with an almightly if...else tree, but how about using classes to hold information about locations? Here is a simple implementation (working): class Location(object): def __init__(self, description="There is nothing here"): self.description = description self.exits = {} def go(self, direction): direction = direction.lower() if direction in self.exits and self.exits[direction]: print("You walk %s" % direction) return self.exits[direction] print("You can't go that way.") return False def display(self): print(self.description) # Define your starting location, note the change to the text to add a direction start = Location("You see nothing but trees and a poorly lit waterpump at the treeline to the North. What do you do? ") # Now define location2 room2 = Location("You walk over to the waterpump. There is a small scrap of paper resides inside the pump mechanism.") # Add the link start.exits['north'] = room2 room2.exits['south'] = start current_location = start while True: current_location.display() userinp = input("What would you like to do? ") if userinp.startswith('go '): direction = userinp[3:] # Chop off the go+space new_location = current_location.go(direction) if new_location: # Valid current_location = new_location elif userinp == "suicide": print(suicide) print("You have Died") break elif userinp == "commit suicide": print(suicide) print("You have Died.") break The output: You see nothing but trees and a poorly lit waterpump at the treeline to the North. What do you do? What would you like to do? go North You walk north You walk over to the waterpump. There is a small scrap of paper resides inside the pump mechanism. What would you like to do? go East You can't go that way. You walk over to the waterpump. There is a small scrap of paper resides inside the pump mechanism. What would you like to do? go South You walk south You see nothing but trees and a poorly lit waterpump at the treeline to the North. What do you do? What would you like to do? 
That is awesome that it can work directly with Pandas dataframes. That's a killer feature. Thanks for developing this awesome library.
I made a quick and small text based game as part of a r/dailyprogrammer challenge, I had a lot of fun doing it, you might find some useful things, [here](https://github.com/Zack--/code-snippets/tree/master/DailyProgrammer/173/Hard/Mawu3n4) it is. (Just get the two files and run ``solve.py`` with ``python2.7``)
There are lies, damned lies and benchmarks - Albert Einstein.
 Edit: I can understand not wanting or being able to install virtualenv on the machine you are deploying on, but you should have it installed on your dev machine without question. Now that venv comes bundled with python we don't even need to install virtualenv. Besides having virtualenv on the machine I'm deploying, I don't want to activate the virtualenv everytime I use the script I deploy. Or is there a way around that?
`#!/path/to/your/virtualenv/bin/python` at the top of your script. Then make your script executable and it will use your virtualenv when you run `./your_script.py`
Hi there. You have posted a beginners question to /r/python, however it is far more suited to /r/learnpython, where users are actively interested in helping with beginner topics. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Cheers &amp;amp; best of luck!
I've used [splinter](https://splinter.readthedocs.org/en/latest/) with fairly good success for this sort of thing. However, be prepared to do a lot of view-source/inspect-element first to identify the various form elements and links that you need to deal with. Hopefully, this is a one time effort and they don't change the structure of the form on you. This sort of automation is inherently fragile by nature YMMV :-) cheers.
&gt; Please note that our modqueue team isn't extensive, so please allow us a bit of time to get things done! These removals aren't a super high priority for the moderation team, and since we have had a long standing practice of only removing things that are spam, this process isn't super speedy. Please allow up to 24 hours for removal.
This would be great with Python. I use it to keep track of Amazon, Craiglist, and many things. BeautifulSoup and lxml are great packages to help you. I recommend against most online learning (other than the official docs and googling specific questions) and especially code academy and similar sites. I'd just grab a good book that's all in python with a specific theme you're interested in. Preferably a book a university would use. I found this book to be great. http://www.amazon.com/Scientific-Programming-Computational-Science-Engineering/dp/3642302920. 
rlwrap A must for sqlplus!
Be aware that IPython is used by scientists and ptpython's additional event loop messes with matplotlib, so they don't play nicely: https://github.com/jonathanslenders/python-prompt-toolkit/issues/63 ptpython certainly feels better (the auto-completion with jedi is lovely!), but isn't usable enough for me due to the matplotlib interaction.
 exp = lambda x:lambda y:x**y div = lambda x:lambda y:x/y pipe | 10.23 | exp(2) | div(10) | None
vi is a linux (unix as well?) text editor. It's completely command line driven, and many swear by it despite its steep learning curve. As a CLI application, vi is very hotkey dependent, and many have testified it's MUCH faster to code in after you learn most of the more useful combinations. Hope that sheds some light.
Holy shit post Batman. Only supports one DB? And is just an enormous convoluted command line wrapper to the already existing command line tool that already solves this problem? Bravo. A+. Would ignore again.
It's not really OS dependent at all (though its roots are in Unix iirc), but yes it's a console based editor. And in my experience so far, learning it has paid off immeasurably.
Hm, one workaround could be to do it on multiple chunks of the DataFrame separately and then concatenate the results. Maybe something like chunks = raw.loc[0:5, 'location'].apply(pd.Series) for i in range(5, nlines, chunksize) chunks = chunks.concat((chunks, raw.loc[i:chunksize, 'location'].apply(pd.Series)) 
Xlrd xlwt
This is awesome! I've been waiting for this for a long time. How hard to send keypress/mouse events programatticaly instead of using QT?
Ah awesome thanks! A quick question, do you have any recommendations on how to jump right into it? Any easy "problems" or issues to solve in order familiarize myself? 
Thank you, I'll try that. 
Does this still apply under Windows for those of us in that environment?
Wow, it always amazes me when someone can take a task I struggled with for 3 days, and spin out a couple lines that easily handle the task. Thank you very much. I tried to do list, and max, but I ended up with pages of convoluted code that was complete crap. I'll go through this and try to apply it to other exercises I find online. Seriously, you actually made this make much more sense. 