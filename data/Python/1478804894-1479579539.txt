Used coupon code NOV1202 to drop it to $10
too bad i missed the giveaway. Can you please share another one for me :) 
You may also want to research good laptops for hackintoshing. I see very little professional value in the new macbooks
If I'm not mistaken, PyCharm has this feature built in, and it makes for some very professional and nice looking code (Albeit I am certainly guilty of ignoring some of the capitalization conventions...)
I need python to generate the website from markdown files that represent "articles". How pelican works is - you create a theme with jinja2(or just use one of [hundreds available](https://github.com/getpelican/pelican-themes)) and then write content files that can either be markdown or reStructuredText files. Once that done you can simply call pelican to generate a whole website using your theme and the content files. It also handles all the menus, references, links and automates pretty much everything for you, including deploying to github pages and git branch management. If you wish you can inject some javascript into it and no one could even guess it's a static websites. It's extremely convenient, has a huge community with variety of plugins (photo gallery systems etc.). The greatest and most known example of pelican in action is probably - http://pyvideo.org It runs pelican and this solutions was what saved the website from being shutdown. If you want to know more there's a whole cool podcast on this subject on [talk python to me](https://talkpython.fm/episodes/show/83/python-videos-on-demand-at-pyvideo)
SimulateMe! muad_dib
Thanks much!
One more Q before I drop $9.99 on this! :) Basically the program is a .py script but has a dependency on a .pyc file (which imports). Thinking that won't work on an iPhone for the lack of file structure -- is that wrong? Thanks again and sorry for my newbness here
[removed]
Thanks for the input. I decided to go with SQLite and so far am finding it very easy and straightforward to use, and that it does exactly what I was hoping for.
No.
This is a super cool reference. I don't know if I've ever seen a resource structured quite like this.
There's no such thing as a ".bin" format. ".bin" is a file extension, and a very common one at that. How the data is stored inside depends entirely on what application is storing that data. Also, post questions in /r/learnpython next time.
In "68 lectures spanning almost 9 hours of video", you can understand Regression analysis K-Means Clustering Principal Component Analysis Train/Test and cross validation Bayesian Methods Decision Trees and Random Forests Multivariate Regression Multi-Level Models Support Vector Machines Reinforcement Learning Collaborative Filtering K-Nearest Neighbor Bias/Variance Tradeoff Ensemble Learning Term Frequency / Inverse Document Frequency Experimental Design and A/B Tests ? Sounds extremely extremely unlikely to me, but if it's true, sign me up!
Very nice, it is great to see so many people sharing the information they have about Python.
A silly little flask web API for a Unity3D game to connect to, for downloading procedural enemy data from the internet. I'll also eventually be doing a Unity3D package with built in behaviour scripts for various attributes the API can serve. Credit for all of the enemy variations goes to /u/garmichael. (http://www.reddit.com/r/gamedev/comments/23oxp6/build_a_bad_guy_workshop_designing_enemies_for/) Example enemy: Movement type: Wall Following, Ability: Exploding, Trigger: Proximity to player The idea is that eventually, a game dev will be able to say either 'getRandomEnemySet(count=5)' or 'getEnemySet(id=123456)' and then create a specifically tailored set of enemies on my site, with combinations of attributes which can be altered post-release without patching a game, for server-side customisation of content. Why? Not sure!
Why do you need to improve performance of your code? What I would do first is to initialize pascal_piramid with two first rows and simplify the rest :)
Don't post images of code. And post this to /r/learnpython. 
Thanks!
No matter how you write it it will be too fast to see difference :) Make the code readable and simplify it.
Here you are: http://pastebin.com/kezBhKzh A shorter version. Probably it could be written even more nicely :)
I'd say a masters degree is more likely to get you a job, at least a bachelors and some cool projects under your belt. hiring based on skill alone is still existent, but not as common as 5+ years ago
Oh, sure, if you want to read line-at-a-time then you need some sort of buffer. And yeah, implementing this using single-byte-reads is a terrible idea, don't do that :-). But (a) lots of protocols don't need this, (b) for those that do, [a better design is to split the buffering/parsing off into its own module](https://sans-io.readthedocs.io/) instead of mixing your parsing code up with your network I/O API. (Here's [an example](https://github.com/njsmith/h11/blob/master/h11/_receivebuffer.py) of buffering code that works like this.) And (c) if you really do like the asyncio design (maybe because you have some trivial protocol like "newline-separate JSON" and it's not worth going for the full Sans-IO approach), then it's very easy to write a `StreamReader`-style API on top of a curio socket. It's easy to add buffering/latency. It's impossible to remove buffering/latency. And not everyone wants buffering, and of those who do want buffering they might want different buffering than you do. So the basic API should be unbuffered. &gt; A lot of naive protocols will try to write byte by byte (or only slightly larger data chunks), but if you translate those writes to syscalls directly it will not be very efficient. This is the conventional wisdom for writing files to disk, but, surprisingly, it turns out that it doesn't apply to asyncio / network protocols! First, in asyncio, if you trace through the implementation, you'll find that each call to `StreamWriter.write` actually *does* do a syscall – it immediately tries to hand off the data to the kernel, and only falls back on buffering if the kernel refuses it. And second, this "eager writing" behavior is actually an optimization: the alternative isn't to batch up the writes into a single write; the alternative is to buffer the writes, register an event loop callback, go through an event loop iteration, get a readiness signal, resume from the callback, ... which turns out to be more overhead in most cases than just doing the multiple syscalls. [There's some discussion in this github issue](https://github.com/python/asyncio/issues/446#issuecomment-256498678). (The reason this works differently from writing to files on disk is that for a file, you can buffer indefinitely until enough data builds up or the file is closed; with sockets, you have to send the data promptly.) 
I have an electrical engineering bachelors, but I'm trying to get some machine learning and some cool projects in my repertoire. I recently caught the Python bug and want to make it part of my work. 
Looks nice, Generator + itertools :) Not sure OP will get it easily :) 
Looks quite above my level but it's great to see different solutions. It's always a great time to learn something new
I have the first gen Macbook 12" retina (the slow one, base model). I do not run PyCharm or Django, however I have fairly large Flask projects and use MacVim (along with Mysql/Mongodb), and a fair bit of kivy. I live with a few terminals and safari windows (plus all my background geeklets), and never have had a problem with regards to performance in development. The biggest problem I have had with it is screen size, but the core-m hasn't affected me on any of the projects I have worked on. I will admit however, if I could do it all again, would have gotten a pro. Foot print isn't much bigger, and not sure how long the core-m will stay relevant.
It seems like a nice feature to put in the desktop app, at least. It might not catch everything but at least it could have the potential to pop up a window that says 'it looks like there's a key in this commit, are you sure?' I was reading an article earlier about Facebook buying password lists and running them against their own password databases. It lets them pop up alerts to their users basically saying 'you really don't want to use this password, trust us'. It seems like a nice thing to do for your users.
What do you use that for at work?
Used it, too. Thanks mate! 
EE is a perfect background to pitch to employers. Signal processing and machine learning complement each other very well. I'm sure image processing via machine learning is popular enough to have some online tutorials. Then build a small portfolio of your own projects.
PyDAL. 
It's one of the few codebases for which I can easily use the source code as documentation in the rare case that the documentation for some method isn't there. On top of that, it's a great example of decoupled design and orthogonality. Everything ties together well, but everything still has well-defined edges and can be used independently.
what is this atrocity
All of your (s have matching )s.
Maybe one more?
There's nothing wrong following a tutorial to learn pygame/anything. I personally recommend you TYPE out the code by hand instead of just copy pasting it though, then focus on what you are typing and what it actually does as you go. That is my preferred method at least! People learn in different ways
Neither. Follow through with the tutorials to understand the syntax, available commands, libraries etc. Then, think of how you would begin to create a game from scratch. For example, think of a simple snake game. Follow through the tutorials. Instead of copy pasting, type it out. Don't have to memorize it, but look and type it out. Most tutorials end at creating a snake game at the most basic level. Now think of how you can add more features to it. Such as keeping score. Or a new type of food that reduces the length of the snake. Or speeding up after, say, the snake eats ten pieces of food. For more features take a look at [gnibbles](https://en.wikipedia.org/wiki/Nibbles_(video_game\)). It has food that reverses the head and tail, multiplayer support, network play, different mazes etc. One step at a time. I chose snake because gnibbles is my favorite game. You can pick anything you like. After you have a working prototype, use it. Play the game and you will see minor additions which can make your game play more enjoyable. Some of them might be as simple as changing colors. Or may be you will find something else. The idea is to learn the language, rather being able to work with it. 
Now i see it =)
The rows of Pascal's triangle follow n choose r for row n and element r; def factorial(x): y = 1 while x &gt; 0: y *= x x -= 1 return y n_choose_r = lambda n, r: factorial(n)/factorial(r)*(factorial(n-r)) row = lambda n: [n_choose_r(n, r) for r in range(n+1) pyramid = [row(i) for i in range(p)] This is faster if you want a specific row instead of the whole triangle, if you want the whole triangle it might be faster to use the previous row to calculate the next row.
I looked at this: [Does virtualenv serve a purpose (in production) when using docker](http://stackoverflow.com/questions/27017715/does-virtualenv-serve-a-purpose-in-production-when-using-docker) and this: [Why people create virtualenv in a docker container?](http://stackoverflow.com/questions/29146792/why-people-create-virtualenv-in-a-docker-container?rq=1) and their logic makes some sense. I am going add info that that's an option also, to the post tomorrow! Thanks a lot for the information.
Not really that hard, tbh. Depends on where you're starting from, of course, but if you've already been through calculus and linear algebra, you could probably just search each of these terms on youtube and have at least a basic 'understanding' after 9 hours or so.
Is Automateing boring stuff better because it focus only on Python 3?
If you know your editors well, then use an editor of your preference. I'm partial to vim. If you're not familiar with your editors, then maybe try a notebook.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
This isn't the kind of thing you just 'run'. You use it to write your own code. If you don't know any Python already, use /r/learnpython and https://www.reddit.com/r/learnpython/wiki/index
The python installer doesn't add the bin directory to the path for some reason. You can add it yourself if you can find it. I've had a couple installs that didn't get put into C:\Program Files (x86).
I have no idea how to update the remote repositories linking to that account with that name, so I would suggest getting a stronger candidates than having 1 Google internship and 1 Microsoft internship? ----------------------------------------------------------------------------------------- [*^^[Feedback]*](https://www.reddit.com/message/compose/?to=Simulate_Me_Bot) [*^^[Get ^^a ^^bot]*](https://www.reddit.com/message/compose/?to=iNeverQuiteWas) [*^^[Info]*](https://www.reddit.com/r/FreeKarma4You/comments/5b0r6r/i_am_a_bot_that_will_simulate_you/)
Late to the latest podcast. ----------------------------------------------------------------------------------------- [*^^[Feedback]*](https://www.reddit.com/message/compose/?to=Simulate_Me_Bot) [*^^[Get ^^a ^^bot]*](https://www.reddit.com/message/compose/?to=iNeverQuiteWas) [*^^[Info]*](https://www.reddit.com/r/FreeKarma4You/comments/5b0r6r/i_am_a_bot_that_will_simulate_you/)
&gt; The python installer doesn't add the bin directory to the path for some reason The reason is that you did not check the required checkbox. 
Thanks man! Looking forward to checking this out first thing Monday morning!
You could get a basic understanding I guess, but considering entire books have been written on these subjects, it'd take a lot more than 9 hours to understand them all in depth.
There isn't much in the way of docs there, not sure how much this will help unless you have a little python background, this code is untested but I'm pretty sure it should work, should be run from the same directory that you have checked the code out to: from InstagramAPI import InstagramAPI username = "your username" password = "your password" insta = InstagramAPI(username, password) insta.login() you should then be able to call the InstagramAPI methods insta.getProfileData() sometimes the best way to learn is a hint in the right direction that you can expand on, cheers :D edit: OP removed the original text, this is usage for the following project for those who find this thread: https://github.com/LevPasha/Instagram-API-python 
Yeah total marketing nonsense. Understanding k-means alone would take you more than 9 hours to get to a level where you can apply it and be confident that you're doing it the right way for the right data. To understand the variety of distance metrics which can used to determine the clustering, aside from euclidean, when they can be used and why, dimensionality limits (e.g. euclidean breaks down in high-dimensional space) etc. how to determine what value of k best explains the variance in your data without dissolving into an individual difference measure, how to understand and intuit the limitations - such as a tendency to equal cluster size and when that's bad for your data, when to use alternatives like SVD and EM. not to mention actually understanding and writing an algorithm for it. At 9 hours you'll get a passing familiarity with the topics. I've been implementing SVD-based algorithms in an extensive data analysis pipeline for months and I still don't 100% understand all the details.
I have heard great things of Automate the boring stuff with Python, so I think that's a safe bet. However I haven't heard of the latter, so don't take my opinion as infinite wisdom!
Thanks! That help like you have know idea lol
Jupyter is hands down your best bet IMHO. I'd say I do 90% of my development in Notebooks. It's a very straight forward and easy to use REPL and designed for research. https://www.youtube.com/watch?v=G3mwNnGu5T4
I would try to get Linux running. Comes installed by default on ubuntu and fedora. I'm not sure if you've used Linux or not, but if you can at least get it running in a vm you'll have a much better developing experience.
This is really awesome
This is why I always suggest WinPython. Extract it. Double click the CMD. Run everything in there.
Use the notebook to develop the code to start off with. You'll learn quicker with the fast feedback. When you've made something substantial, factor it into a module and import it in the notebook to continue working on new parts. 
It's just an artifact man. Probably smart to do it for easy git work/build/ci/testing. 
Doing science? Install the [Anaconda3](http://continuum.io/downloads) distribution, then use `jupyter notebook` to try out ideas and test small bits of code. Once you've got more than a few paragraphs, fire up `spyder` (a matlab-like python environment) to turn your code into an easy-to-execute program. Basically the notebook will serve you very well until you need to write a program you can call from the shell, and then it's time to write some `.py` files :)
Yes, unless you replace `raise e` with `raise` in which case it doesn't do that.
That sounds like a pretty cool project. I'll be interested to check it out when you're done with it :)
Sounds fun! I'd pip install [this](https://pypi.python.org/pypi/AMFM_decompy/1.0.5-1) for starters and see if it works. It's based on [YAAPT](http://ws2.binghamton.edu/zahorian/yaapt.htm) which AFAIK is still state of the art.
Selenium is in my opinion just too much. It's a powerful tool, but slow and bulky compare to requests or grab. Unfortunately, from my experiece, the only way how to scrape a domain fast, is to use a proxy provider, tor (don't have an experience with this) or some other IP anonymizing tools. 
Good work. I love anything I can learn about programming audio processing. Can't wait to tear this thing apart! I know some max/super collider. And some Python, but as for implementing them together, I've never tried tried music in python though. Super collider is amazing for making synths, but I hate the magic of it. The whole point is I want to learn how it works. 
Yeah, which is why the above is frustrating. I'm glad to agree
If you really know what you are doing, it would take a half to full day to build it complete. If you kinda know what you are doing you could get it functioning in a day, but it wouldn't be pretty. If you don't know what you are doing it could take a week to get a reasonable working hack.
Errr.... Excellent presentation of the concept, but I have a MAJOR issue with the implementation you propose. In the absence of a good trie implementation you'd probably go for a hash table -- a.k.a. as a dictionary in Python. The performance cost is that of: - calculating the hash values - traversing whatever data structure (list? table? tree?) underlies the implementation of the dictionary. A trie will help you avoid that cost if you implement it on a low level (i.e. via pointers to tree nodes...). Implementing the trie using dictionaries imposes on you again the overhead of hash calculation and lookup...
Well said! It's amusing to see people take one MOOC/tutorial with no prior coding or statistics experience, and think they're ready for the big leagues. They don't know what they don't know.
I personally use a combination of both. The notebooks are create to prototype and to visualize things. However, when you are writing lots of code they tend to get cluttered pretty easily. My workflow looks like that: I start trying out things in a notebook. In the next step I start to refractor parts of it as functions and classes as needed. If I think, that one of these parts is important and reusable, I copy it over into a python module, I write in parallel for the specific project, I add documentation, clean up the code and maybe add unit test. As a module has multiple files for structure, I am using an Texteditor or IDE for that. In my notebook, I just import my module and and use the cleaned up functions. At the end, I have a readable notebook to present the project and a reusable module, that has all the tools needed to build a new similar one. 
&gt; "Someone on the internet said it would take them 5 hours or 15 hours for a beginner" Which means it would take 2 weeks. I've been coding in Python for 10 years. A decent person is more than 10x better than a beginner.
Oh I meant to mention the main part of the code is under the path: NameAmigo/tree/master/web/app, with NameCraft.py being the Flask interface
It depends on what you want to do with it. If you are analyzing large amounts of data and need a lot of intermediate results to know what to do next, an ipython notebook is great. You can copy&amp;paste the code into a python file later. In most other cases, or if your dataset is small and you can re-run your script fast enough, I'd prefer an editor. 
I disagree. I think its wreckless to give any numbers, about how long ot would take them, with so many degrees of freedom and unknowns. What about dev ops? What about monitoring? What about scheduling? What about data corruption? What about docs? Testing? Is this for a team of realtors who are their own consumer of the results? Or is it for collecting feedback from customers who wont have the patience to do something twice? Im a seasoned python developer and could prototype this in half a day. I've seen rookies struggle on reading a csv file for 1.5 days...cause of an encoding issue or something edge-casey. For me to do this, the upper bound is likely 6 weeks.
Another tip: Use powershell, not cmd
Looking for data analysis internship in California. I study ML, and other data courses in a LA college . Know MySQL, HTML,js,python. No related experience.
Please write a blog (or even just a subreddit) to udpate your progress and what you have learned. I've never been this arbitrarily curious about something before.
proxymesh.com
Look into the gmail api. Probably the easiest way to do this.
I'm working on a simple web app for managing bills. Currently trying to wrap my head around custom widgets and fields for WTForms.
It's definitely possible with Python using [cron](https://en.wikipedia.org/wiki/Cron), some e-mail account rules to process it (assuming you don't use your own server) but you need to be very careful because the string to trigger the e-mail could have a different intention from the external person than your script. Good luck!
Cool! I wanna try this and compare against the [Hilbert transform](https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.hilbert.html) for pitch detection. 
And by your logic you should also run your docker in a VM, just in case. Just in case you need to "avoid any potential issues that arise from installing docker on bare metal". &gt; you can just find an appropriate base to begin with Not everything is a nail. Stop swinging hammers around. If you think you need docker, you probably don't.
&gt; doesn't tamper with the system inside the container. Repeat that again, out loud. Explain why adding docker in a VM or Jail or In a Jail in a VM in a ESXi is any different. Either you trust docker's container or you don't. 
Yeah, selenium is good if you're, say, scraping from an account and don't want your loins to get banned.
I don't mean to threadjack, but it sounds like you might like my "chippy" library. It's a Python synthesizer library with a bunch of generators for different waveforms and envelopes, that can be used directly or spit out pcm data. The documentation is lacking, but it should be simple enough for you to poke through. https://github.com/benmoran56/chippy
Working on writing a mutation testing system. Hopefully nicer than the existing ones. At least less complex :P Based on baron. 
No. ;) (also, come to think of it, I think librosa relies on audioread, which calls ffmpeg, and pysndfx calls sox, so my pants are on fire)
Yea, but he just said he needs it for a school project. Why would performance matter? And also, by saying "quickly", you actually mean then there are tens of thousands of entries at least. So it's relative.
Thank you a bunch!! lacking documentation is exactly what I'm after right now. Sick of following tutorials and not actually learning anything. I want to make some mistakes and get stuck on stuff.
No.
No.
It's okay. I was just really excited because i thought you had implemented some of that and then was like import numpy oh. In any case good work.
1. If all you want is to test out the syntax, you could use [repl.it](https://repl.it/languages/python3). This is an online editor in which you can actually execute your code and see the results. If you make syntax errors, it will also tell you. And you can also import packages. 2. Now, you could also simply [install Python](https://www.python.org/downloads/) on your laptop, then start the Python interpreter (console) and play with the syntax however you want. 3. As a complement to your course, I suggest you to get a good Python book, such as [this one](http://www.diveintopython3.net/). As a side note: this type of question should be asked under /r/learnpython. You will probably get even better answers there, because people are used to answering beginner questions.
You know what's more irritating? except: pass 
Reflects only users of some random CI service.
Is there any benefit to using this over grequests or aiohttp?
Nice, thank you very much DrTrunks :) . I will look into it!
 def build_n_gram(words=2, join_with=u' ' ): random.shuffle(funny_words) return join_with.join(funny_words[:words]) **edit** better yet def build_n_gram(words=2, join_with=u' ' ): return join_with.join(random.sample(funny_words, words))
Or new development that still makes use of an existing codebase? 
Or new development that's running on currently supported operating systems (like RHEL 6/7) which comes with python 2 and is guaranteed to be supported for another 10 years.
Don't stop! There is so much to do with: asyncio implementation, speed comparision, proxies, and so on, and so on.
The list is short and it doesn't even attempt to do some sort of mix-in. It's a lot easier to deliver an endless stream of phrases with using adjectives, nouns, and qualifiers. Maybe something you can extend an existing library like [Faker](https://github.com/joke2k/faker). EDIT: Took a few minutes to validate the theory. By using the adjective ordering and splitting it up I came up with a script in minutes. 1. Quantity four, ten, a few, several 1. Value/Opinion delicious, charming, beautiful 1. Size tall, tiny, huge 1. Temperature hot, cold 1. Age old, young, new, 14-year-old 1. Shape square, round 1. Color red, purple, green 1. Origin Swedish, Victorian, Chinese 1. Material glass, silver, wooden And here is a small sample with a very short word list. cold ancient aardvark charming cold plastic book amazing middle-aged home-grown flower pot charming Europeen plant funny large boiling dog a few wide cardboard kids newborn yellow martain fiberglass croissant bankrupt newborn airbrush whimsical hot teen alien fourteen octagonal steel abacuses whimsical steel couch amazing young couch ten middle-aged orange men small ancient binder small round American cardboard couch boiling irregular flower pot delicious gargantuan irregular house average-sized Europeen couch ten frighening metal aardvarks stinky boiling dog bitty freezing newborn orange flower pot square pink plant teen red aardvark ten boiling moose square American aardvark whimsical middle-aged banjo lovely yellow martain plastic banjo ten irregular American abacuses a dozen octagonal aardvarks 
Learning some WebScrapping with BeautifulSoup! I'm a total noob, but gotta start somewhere.
Create a small application that allows a user to input location data and displays the current weather information based on that location. Allow the user to save the locations so they don't have to input them every time. You could do it all of it client side as a SPA but use django/flask as your api: - Proxy the weather calls to the actual weather API. - CRUD the user's cities.
To PHP or Java sure. To Python3.x you must be drunk.
/u/sli is a little bitch. Linux has a better developing experience because it was built for development. The gnu toolset was built upon for decades to improve the lives of developers. Everything in the operating system is configurable opposed to windows and each distro has an easy to use package manager. I strongly urge you to try Linux.
Is the game Old School Runescape?
If you are a computer science student who knows python 3, you won't have trouble with 2.7. All you'll need is a reference for a few days or weeks until you know all the differences and quirks.
Yes, it almost ended Python. The survival of the language even in such a huge break atests for the quality of the language! 
using the combined with Jupyter IDE? or do you think you will stick with IDLE that comes with Anaconda3?
An explanation and an example of the correct approach would make this post much more helpful. Is this specific to python 2?
With that argument we'd all still be writing cobol, pascal, and fortran. :-)
I've actually done something similar in JavaScript so it might not be too difficult to port it over. Nice idea!
Isn't this something else though? However I do like the thought of having a project called average-sized european couch
It's just inertia. If the new language features really add enough value then gradually, slowly, code bases will evolve to Python 3. Also, I know lots of people that still code in Fortran because of the existing code base.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
You submit this garbage "blog" post where you're just listing links from this very same sub. And didn't even change the title. Oh okay, there's "original content" in the blogpost: the advertisements you've put in. Title | Previous submission | votes ---|---|--- PSA: Check this site , it has tons of usefull Python cheat sheets | PSA: Check this site , it has tons of usefull Python cheat sheets [2 days ago](https://www.reddit.com/r/Python/comments/5c0myl/psa_check_this_site_it_has_tons_of_usefull_python/) | +52 Data Science and Machine Learning with Python - Hands On! | Data Science and Machine Learning with Python - Hands On! [1 day ago](https://www.reddit.com/r/Python/comments/5c7gfr/data_science_and_machine_learning_with_python/) | +215 6 things to develop an efficient web scraper in Python | 6 things to develop an efficient web scraper in Python [5 days ago](https://www.reddit.com/r/Python/comments/5belws/6_things_to_develop_an_efficient_web_scraper_in/) | +138 What’s new in Celery 4.0 (latentcall) | What’s new in Celery 4.0 (latentcall) [5 days ago](https://www.reddit.com/r/Python/comments/5bfwfe/whats_new_in_celery_40_latentcall/) | +127 Heap automates away the annoying parts of user analytics. No manual event tracking. | n/a: it's an advertisement | 3 Reasons For Python’s Explosive Growth | 3 Reasons For Python’s Explosive Growth [3 days ago](https://www.reddit.com/r/Python/comments/5btt3x/3_reasons_for_pythons_explosive_growth/) | +57 OSMnx: Python for Street Networks. A package to download, construct, analyze, map, and visualize urban street networks from OpenStreetMap. | OSMnx: Python for Street Networks. A package to download, construct, analyze, map, and visualize urban street networks from OpenStreetMap. [4 days ago](https://www.reddit.com/r/Python/comments/5bn6wy/osmnx_python_for_street_networks_a_package_to/) | +76 Date and Time Manipulation - You're probably doing it wrong. | Date and Time Manipulation - You're probably doing it wrong. [4 days ago](https://www.reddit.com/r/Python/comments/5bijdi/date_and_time_manipulation_youre_probably_doing/) | +45 New Python podcast: Python Bytes Python headlines delivered to your earbuds | New Python podcast: Python Bytes Python headlines delivered to your earbuds [2 days ago](https://www.reddit.com/r/Python/comments/5bvtq1/new_python_podcast_python_bytes_python_headlines/) | +68 Some thoughts on asynchronous API design in a post-async/await world | Some thoughts on asynchronous API design in a post-async/await world [5 days ago](https://www.reddit.com/r/Python/comments/5bdf48/some_thoughts_on_asynchronous_api_design_in_a/) | +44 Introduction to Random Forests in Python | Introduction to Random Forests in Python [3 days ago](https://www.reddit.com/r/Python/comments/5btwdl/introduction_to_random_forests_in_python/) | +45 Looking for a job? Join Honeypot and let companies apply to you... | n/a: it's an advertisement | And you're doing the same thing across different programming subs. * [In /r/elixir](https://www.reddit.com/r/elixir/comments/5cdlvf/awesome_elixir_newsletter_week_25/) * [In /r/java](https://www.reddit.com/r/java/comments/5cdlah/awesome_java_weekly_issue_26/) * [In /r/node](https://www.reddit.com/r/node/comments/5cdln8/awesome_nodejs_weekly_issue_26/) * Here in /r/python
SimulateMe! muad_dib
Seriously... this "tool" sucks. Between posts like this and "Top X Python Packages" (hint: requests and numpy no matter what), I'm almost ready to abandon this sub. Is there another community for more substantive Python discussion?
No, because new developers, companys and projects emerged. Still there are enough legacy-projects and coders mainly working in them. But that not what I meant. Python 2 and 3 are to similar, that makes working with them a pain, because the coder must constaly switch between different versions, remenber how a feature workes, how an api was set here or there. As long as python 3 has no real selling point, it's better for the coder to go with one environment, then two.
[deleted] ^^^^^^^^^^^^^^^^0.9228 &gt; [What is this?](https://pastebin.com/64GuVi2F/52442)
Emacs will be the best if you want fast results.
I did something like this, it downloaded all the Sega Megadrive Roms from rom-nation. Good times.
 except: &lt;code to manage 1 single exception type&gt; This drives me mad every time I see it.
With most widely used libraries [now available in Python 3](http://python3wos.appspot.com/), the study seems doubtful and some comments here just misleading.
PyAutoGUI + Pillow https://automatetheboringstuff.com/chapter18/
Sorry about the downvotes man. &gt; Linux has a better developing experience because it was built for development. So, TL;DR your answer is "Linux has a better developing experience because it was built for development"? I have tried Python programming in Linux and I'll try again but I just don't see any downside with Windows.
I recently started a new project in Python 2.7 because guys maintaining a server could not be bothered to update ancient Python 3.2.
&gt; Why does daemonizing the server change the cwd? Because [that is one of the traditional steps of daemonizing](https://linux.die.net/man/1/daemonize). &gt; How do I fix it? Use absolute paths, or change the current working directory yourself. 
SimulateMe! mm865
Add Python 3 
Sure thing. I was thinking about doing that next.
Is there a benefit to using something like asyncio or curio over the multiprocessing module?
Well, to spell check web pages. :) I work in the medical marketing industry. If one of our client's site has a procedure misspelled, or any word for that matter, in their content then I think that erodes a bit of trust with the user (potential client). I mean, who is going to trust a doctor to cut them open if they can't even spell the service they offer correctly. 
Definitely, I come across that in the legal field. You can't promise clients great attention to detal. They might not understand the technical aspects of your work but they can read.
Good for you!!!
I expected another incarnation of god to come down to Earth, but I doubt I'd get my college housemates to agree. ----------------------------------------------------------------------------------------- [*^^[Feedback]*](https://www.reddit.com/message/compose/?to=Simulate_Me_Bot) [*^^[Get ^^a ^^bot]*](https://www.reddit.com/message/compose/?to=iNeverQuiteWas) [*^^[Info]*](https://www.reddit.com/r/FreeKarma4You/comments/5b0r6r/i_am_a_bot_that_will_simulate_you/)
And my brain feels a bit frazzled around the edges.
Thanks for the comment! I'm sorry you had anxiety reading this :) The lambda setup costs me a few pennies a month. Even if I had a million requests, it would still cost less than a dollar. It's unlikely that I would ever get enough submission traffic to overwhelm your $5/month digital ocean server, so I'm aware that scalability is not a great argument in this case -- however, this setup was quite a bit easier to set up than a django app, because I was already using Amazon to host my magazine, and I'm familiar with AWS. Hosting the actual magazine itself through Amazon saves me a significant amount of money, because I sometimes get large spikes of traffic from media linking to the magazine, which would overwhelm a small server. I'm glad that django works well for you, though!
You're totally right, you should go fill up some other sub with your negativity.
Nice summary but unfortunately skips mentioning the most important part: version compatibility Jython, unfortunately, seems quite dead in the water having had its last release (which brought 2.7 compatibility) in May 2015. IronPython looks slightly better. Although it's latest release also only targets 2.7, there is an active development branch working towards 3.x compatibility. PyPy currently supports up to 3.2 (3.3 is in alpha) and Mozilla is sponsoring work to get it up to 3.5 in the nearish future. Pyston was started with the express goal of only supporting 2.7, this has since been slightly qualified that 3.x support is eventually desired. So far it also only supports Linux x64 and AFAIK doesn't yet (?) fulfill its performance targets. Pyjion looks very interesting and will have full 3.x support since it's basically "just" a plugin to CPython, but is still much too early to tell how it will work out. Cython is proven and can be very useful in certain cases but can't be really considered a python implementation since it changes the syntax. So to summarize the only real contenders (IMO) currently are CPython and PyPy with *maybe* Jython / IronPython if you *really* have to work in the JVM / CLR.
Meh, no worse than anywhere else on the internet. :) Glad you enjoy it. Much appreciated!
Pyautogui is quite handy and great module for your task. Make sure you go through the documentation to explore all the tasks that you can do using it. Since you are new to programming, this habit of learning from documentation will be the best thing in long term.
shit son!
Spam bot?
Also RPython is a static compiler. The JIT is a feature of PyPy not RPython.
Can you provide a minimal but complete testcase that demonstrates the problem? 
I'm also new to python. I figured I could learn to use linux and python at the same time. I'm also deploying my scripts to a raspberry pi that runs linux, but that shouldn't matter much. What I did, was make a VM running ubuntu and installed pycharm in there. If ever I do something wrong (I have messed some things up while learning) I can revert to a fresh vm from my snapshots. Since I hadn't really used VM'S much before, I learned some of that too. Killed three birds with one stone. Seems like the best fit for me. If I need to do any development, just boot up the VM and I'm ready to go. If I break something while learning, I just wipe the VM without messing with my windows system. Also, make sure you setup a git. If you do have to wipe the vm, it's really simple to just pull your code from where you left off. I use Gitlab cause private repository are free, but I also have a github setup for other projects. Give them both a try. 
And [pypy-stm](http://doc.pypy.org/en/latest/stm.html)!
The anxiety comment, priceless.
Asyncio can leverage all cores with executor pools. It also does a better job at logging. Logging with multiprocessing is somewhat broken. 
Can I suggest the addition of the words "correct horse battery staple", so it can be used to generate passphrases as well? :p
Your post made me study more about python! thank you
With [Zappa](https://www.zappa.io/), you can have the best of both worlds and run a Django app on AWS Lambda (with API Gateway).
There is also [rtv](http://github.com/michael-lazar/rtv). I haven't tried yours yet but I'll give it a spin.
Random question about how to abstract a lot of this knowledge into a true-enough-brain-nugget: I've been doing a lot of C# and learned about `interfaces`, which put forth a contract for a class to implement to adhere to that interface. Is it safe to consider `Python` to be akin to an interface, while `CPython` `PyPy` etc, are the implementation? Ie. They will all implement the same features, just differently? My understanding is that features implemented in all of them, should provide identical results, just with different performances. Or do some features fundamentally do different things?
Have you tried Numba for GIL-free performance?
It is fair to consider all programming languages as interfaces, and we even call CPython and PyPy "Python implementations." This is a bit more obvious for Python because the language was not intended for use in high-performance applications. This is opposed to C++, which values zero-overhead abstractions very highly even though that's a characteristic of the implementation (gcc, clang, intel). So while you could technically make a valid implementation of the C++ standard that is slow and has overhead, nobody would like it. The same Python code produces the same output across implementations. That is the only promise you get, everything else is on the table.
Why so many upvotes for some random comment?
[wxpython phoenix snapshot builds](https://wxpython.org/Phoenix/snapshot-builds/).
&gt; If it would have been possible to run old code without any bother, people would have switched from day 2 on and could then have slowly ported their code. Except that’s not what happens, ever. If you tell someone *this is the new way, but the old one will still work*, most people will respond *if it ain’t broke, don’t fix it* — and *it runs* constitutes *ain’t broke*… So, you introduced new stuff that some people might use, but others won’t bother learning (what for?). Congrats. Not to mention many of the changes that make Python 3 *Python 3* (Unicode and I/O fixes, for exmple) are *impossible* to do without breaking backwards compatibility at some point.
Worth checking out [chalice](https://github.com/awslabs/chalice) as well. It's a cool flask-like framework for lambda.
Your previous comment has no explanation, no references to back it, just a random comment.
The term 'pythonic' is overused these days.
Yeah I will make sure I go through it all. It seems like a nice module to use :)
Oh I still use AHK. Is this pyautogui a full replacement? 
Good observation! See the "contributions" section in the README ;-)
&gt; print('Hello World!') FTFY
This should fix your vendor lock issues: https://github.com/serverless/serverless
Nuitka just parses your code and creates C++ source files with calls to python C API functions instead of executing python code every time. PyPy is already working on Python 3.5 support (you can already try nightly versions) 
We where talking about why is python2.7 better then Java. So I used the python2.7 print statement. :)
Two ideas: * Install Spotify on the Android emulator (there are websites where you can download the Spotify APK, google it). There you have root and you can view the logs with logcat * Decompile the APK and look directly at the source For the next time, you should post such questions in /r/learnpython.
Pretty logical and obvious.
Finding a good editor will help (like pycharm). However, there is more to learning a language than the base syntax, there is also the "right way" vs the "wrong way" of doing things. This is even more important with python which is very strict about its syntax. I found the book 'Idiomatic Python' invaluable in helping both learn the syntax, and learn the "right way" for things. You can also load a module 'pylint' that will tell you how good your code is. 
What engine is your forum running on? Does that engine have an API?
These phishing redirects after clicking links to get to the real content is UNREAL! How would you get past that? That is, if you have already encountered the problem and obviously it depends on the particular website.. But if you have anything valuable to share please do :P
It's the Fantrax website, and as far as I know, there is no API. 
Then you should probably look into Selenium or some sort of browser automation.
&gt; Python 3 is a better language That depends on what kind of program you're writing. &gt; took it's toll on the community... Worst thing, imo, is the numerous Py3 fanboys who flat-out cannot comprehend that, yes, Python 2 really is better-suited to some kinds of projects. The ignorant disdain that pours out of some of them is something I never thought I'd see in the Python community… 
&gt; Just makes no sense... To you. Why don't you actually *ask* some people who are still starting projects with Py2 instead of simply assuming it's because they're clueless. 
I doubt there's many/any of that crowd on this sub. Nor do I know any personally.
&gt; d = {0: 1} &gt; for k, v in d.items(): &gt; print(k) &gt; del(d[k]) &gt; d[k+1] = 1 &gt; &gt; print(d) So what's weird is, I ran this on multiple versions: Here's the output. 2.7.10 (default, Jul 1 2015, 10:54:53) [GCC 4.9.2] 0 {1: 1} 3.5.2 (default, Nov 9 2016, 00:32:23) [GCC 4.9.2] 0 1 2 3 4 5 6 7 {8: 1} 
Almost finished with my config file manager. It makes it easier to quickly edit a config file by saving an alias to the file's location so that it can be called later with an edit command (using a default editor that you've set) 
/u/bnn_indonesia done.
There are several in this thread…
You're totally right. You could also implement ZeroRPC (and use Redis instead of zmq), ZeroC Ice, or Thrift, but my problem with those is that they're not so easy to grok. I've found myself piecing together a quick-and-dirty RPC-like system on many occasions because the aforementioned just takes too much time to implement. So I made one that just works without too much bootstrapping. My goal with Shisetsu is that it should be easy to grok, lean, and easy to modify. And more than anything else, this was also an exercise for me.
It's too big to pull the plug. Someone will do it. Redhat, dropbox, whatever. Name a few that use 2.x in their stack, or have lots of users on 2.x, and tell me that they think it's cheaper to replace it all than it is to hire a couple guys to maintain (edit: a fork of) the interpreter and maybe charge others for that service.
Actually, Python 3.6 implemented [PEP 523](https://www.python.org/dev/peps/pep-0523/), a modification proposed by the Pyjion creators in order to implement their JIT. So I suppose developement will resume shortly.
If you get stuck don't forget about stack overflow. Has helped me get out of a few situations where I felt like quitting. 
I'll do that, thanks!
he produces interesting videos but I cannot follow him because he tends to exaggerate a lot! All this movement, tone of voice... compare those to the people behind laracasts or khan academy for example.
3.5 introduces a new syntax for handling coroutines. Pretty sure 3.5 would work fine with Kivy as long as you don't use the new Asyncio syntax.
The unicode/string change is very big, and very breaking, for certain types of code. Twisted had a pretty big problem with it. They've mostly solved it now through some truly superhuman efforts by certain individuals.
http://inventwithpython.com/blog/2012/04/06/stop-using-print-for-debugging-a-5-minute-quickstart-guide-to-pythons-logging-module/
As someone who has made a living in time series analysis for &gt; 20 years, in industry, we store everything in UTC and retrieve it in local time. All date/time math is done in UTC and retrieved in local. So, where supported, some days have 23 hours and some days have 25 hours. Customers often force us to demonstrate that we support their local 23/25 hour days for reporting purposes before they let us in the door. If a library does not support this, it is an automatic pass. This is across languages and platforms, and energy, packaged goods, municipal/govt, oil and gas, food/beverages, manufacturing, etc. Windows, MacOS, Linux, unix, etc. Store in UTC, retrieve in local. No one in industry uses 'solar' days. All time stamps globally have to align. Comparing data from across the world to align events requires this. / my two cents. 
Too bad the latest supported Python version is 2.7...
Kivy is not working at all for me on Windows-- followed the install steps (and stackoverflow help)-- no solution whatsoever.... I can't get the app to load at all (and it says my OpenGL version is 1.1 when it's obviously not that) I'd stay the heck away from Kivy for Windows environment. 
Thanks! And i will.
There is no specific timeline, you can download a pre-alpha nightly (which includes scandir() AFAIK) and give it a try. The nightly builds are available here http://buildbot.pypy.org/nightly/py3.5 , where you can also see the number of failing tests for each nightly
it worked for me. Try pip install docutils pygments pypiwin32 kivy.deps.sdl2 kivy.deps.glew pip install kivy
Stupid me. I was reading up on a few issues and always found the term 'ajax' somewhere, but I thought bs4 would handle ajax for me.. I'm right now downloading and setting up phantomjs to load the site, save it and open/parse it with bs4! Thank you for the explanation!
You're welcome. I would, however, still recommend looking into using the actual XHR requests instead of loading the full page. If nothing else, then as a learning experience.
Depends on what you are doing. If you are developing a module, library, or working on a larger project use an IDE like Pycharm. The code intelligence and refactoring tools are invaluable in navigating/modifying a more sophisticated codebase. If you are only working on one moderately-sized script at a time, only USING modules someone else has developer --or-- are doing purely interactive work, Jupyter notebook is a better option. In keeping with this philosophy, I typically develop my modules entirely in PyCharm and put the interactive usage examples for end users into Jupyter notebooks. 
https://github.com/PhE/docker-recipes https://github.com/PhE/pygido 
It's a real great book. I've tried to set out a goal to learn a book a week, but that is unreasonable if I really want to understand the material. So I'm going through the book and really understanding it slowly and steadily. I have 40 books on my list, but the next 8 are the ones that should build the foundation of everything and they are: * Python Programming on Github * Fluent Python * Python Cookbook * Effective Python * Flask Web Development * Two Scoops of Django * Python Machine Learning * Data Visualization with Python and JavaScript Remember, understanding &gt; time it takes to read a book 
Try /r/learnpython.
Make a function called letter_grade that takes a numerical grade and returns the letter grade. When you print out the table with your grades (before calculations) put the result of the letter grade function alongside the grade. You can do this with one print function by concatenation Example: print("Score 1:"+str(score)+" Letter grade:"+letter_grade(score))
Py2's text model is basically the POSIX text model, so if you're writing a program that needs to play nice with other *NIX command-line utilities, like `find` and `grep`, in many situations Py2 "just works", while you have to fight with Py3 to undo all the decoding "magic" the interpreter has done before it called your code. Py3 works marvellously when the input really is text *and* it's using the right encoding. But a lot of the things it treats as text are actually bytes (e.g. filenames on Linux or in ZIP files), and [Py3 doesn't give you the tools you need to handle the cases when its automatic encoding/decoding does the wrong thing](https://thoughtstreams.io/ncoghlan_dev/missing-pieces-in-python-3-unicode/). That is to say, it's often easier to do encoding/decoding manually in Py2 than it is to *undo* it in Py3.
This is a known bug for some intel graphic drivers. I have the same problem and there's a fix on stack overflow that allows you to start it, but even the showcase won't fully work. Alas that's a deal breaker for kivy on windows for me. Which is a shame, it works nicely on the raspberry pi. See: http://stackoverflow.com/questions/34969990/kivy-does-not-detect-opengl-2-0/34973374
If it's just going to be desktop app and it's not a project for the purpose of learning kivy I would check out pyside. QT is an easy to use mature framework.
Kind of a broad question. To get started take a look at using Jquery/AJAX and integrating it with django. Ajax will let you receive requests/update the page/messages without actually refreshing the whole page (which you wouldnt like in a real time chat app). Integrating with firebase should then be simple and for the authentication system (which Im guessing you would like) should also be pretty straight-forward to setup. Focus mainly on being able to receive/send messages without refreshing the page constantly.
How do I setup testing and staging environments for an infrastructure like this? How do I run all of this on a laptop so I can test new features and debug locally. Is there a version of aws lambda that runs locally or a good way to simulate it for development?
If mobile s in the future go for it. It's on my list of things to learn as well but nothing beats pyside and QT designer for quickly getting a UI together.
Thank you!
No special infrastructure needed -- you're just running python functions on lambda, so just mock the inputs to your handler function and you're good to go locally.
The Perl Foundation has a [Perl5 core maintenance fund](http://www.perlfoundation.org/perl_5_core_maintenance_fund) that's used for grants to fund tasks or projects related to Perl5. The PSF has given grants in the past for core projects, though there isn't a dedicated fund -- it just comes from general reserves. Maybe the PSF should set a target of $X/year to fund 1 or 2 people, and then try either crowdfunding it or finding corporate sponsors to meet the necessary goal. 
The `__init__.py` is the only place I'd ever advise using `from x import *`. But even in a place where you have total control over the namespace, I'd still advise using explicit imports if you can as that is a big boon to readers of your code. Otherwise, you should really have documentation that details what ends up in each of the namespaces so people don't have to go hunting with `dir()`.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
"Fluent Python" from O'Reilly Media.
So I love python's built in types. If nothing else, they provide a consistent syntax for others to base their own API on. For example, I deal with geometry a lot. It's nice to be able to borrow the set syntax (union, intersection, etc.) and apply it to my geometry objects and have this lovely, automatically understandable code afterwards for other python users.
&gt; Twisted can you elaborate on these efforts, i'm interested
Clean a bar, work out, donate plasma, watch tv, and sleep
3&gt;2. Moved to 3 couple months ago and never looked back. I'd recommend automating the boring stuff over lpthw
It's not a waste, no, but it may be helpful to look into making the Python 2 code you write compatible with Python 3 from the get-go. I have written a lot of 2/3 compatible code, and I have upgraded a fair bit of Python 2 code to be 3 compatible. It's much easier to do it from the beginning. [This website](http://python-future.org/compatible_idioms.html) has a lot of great advice on doing just that.
Try automate the boring stuff with python, might be more of your thing. I'd recommend Zed Shaw's learn python the hard way, but the python 3 version of the book is still being worked on. If you don't mind learning while the language is python 2 (they're quite similar anyway), or by reading the error filled python 3 version, then I suggest those. [learn python the hard way 3](https://learnpythonthehardway.org/python3/) [Automate the boring stuff](https://automatetheboringstuff.com/) While i'm not sure if they have 'answer banks', you're more than free to google the answers or ask around the /r/learnpython community. 
Thank you for your feedback, I'll take a look at these books. :)
Thanks, I've never had debugging capabilities in my code before.
Could you clarify a bit what the functionality of your desired final result looks like, along with some specifics regarding the scale of the project? Are you expecting ones, tens, hundreds, or thousands of client connections per second? Is there a JSON file per client, or are they all trying to access the same file? What is the purpose of sending &amp; receiving to the same file? How does the script know which portions of the JSON file to send back to the clients once it has written data? What is the purpose of the entire system? I'd love to help, but it's not clear to me what you're trying to do or why. 
The link at the top of the post, from Ashwini's recent conference speaking talks about ipdb as well: http://slides.com/ashwch/pdb-mupy#/ 
Nah, 3 isn't THAT different, and 2 is still much more widely deployed. You can learn most of the important differences in a day. Also there are things you can do now to help your 2 code be upwardly compatible with 3 code.
Do Jupyter Notebooks let me run "pure python"? As in, can I run Django and other web frameworks through them, or is it primarily for data-analysis? With "remote debugging", does this mean that all of the libraries/packages would be installed within the Docker container? It's not just the Python kernel being run within the container and everything else is local? Furthermore, any OS calls (ie file storage) would be to thr Docker container, right? 
Jupyter Notebooks do allow you to run pure Python, but they're better suited for interactive stuff, not Django. PyCharm can do exactly what you want though - attach a debugger to a completely remote Python install with its own set of libraries, etc. It even [supports Docker natively](https://www.jetbrains.com/help/pycharm/2016.2/configuring-remote-interpreters-via-docker.html).
Looks great! Thanks!
Yeah it looks like the author wanted to talk about abstract collections but didn't bother with a use case. 
Yes it sounds like PyCharm is exactly what I'm after. Thank you!
Hey I just listened to this today! This... is perhaps the most boring episode, and if this is your first episode of Talk Python to Me, I suggest maybe checking out another episode first before passing judgement. Even still, this is highly recommended to anyone interested in understanding more about how the community is structured and funded. About as interesting as a city council meeting, but very relevant.
It now checks for album art and adds it apart from tags. 
This is not really an ideal comparison. The Perl Foundation example, as well as the suggested annual grant-oriented funding, are examples of software foundations funding core development projects. What the program actually focuses on is how those foundations themselves get funding, along with related organizations and very central businesses, such as pip, readthedocs, etc. Python gets a lot of attention to its core development either from volunteers or by employees of private companies that rely on those core packages that they help to maintain. Generally speaking, development of the core does not appear to be the challenge at hand. Personally, I'm inclined to agree with PSF's strategy when it comes to funding targeted core development projects: &gt;"This initial experiment with a formal grant process, although largely successful, has not yet been repeated because of the amount of volunteer labor that the grant review and oversight process consumed. &gt;The PSF board is, however, always open to receiving proposals for funded work, which will be considered along with our other initiatives. Proposals that are likely to be successful are those that will bootstrap a new project or sub-section of the Python community in a relatively cost effective manner. Projects that won't be maintained after the funding ends are unlikely to be considered." *...from [The PSF Executive Summary](https://www.python.org/psf/summary/)* The numbers that they give in the program were surprising to me. Tens of thousands of dollars a month (I think about $40K) worth of bandwidth was mentioned for PIP, for example, which is I guess donated by Rackspace. Great! Thanks so much Rackspace! ....but what happens if Rackspace stops donating? They are a critical point of failure that could not easily be replaced. So, the program argues, there need to be diverse funding sources and creative solutions for generating funding for the mundane operational expenses, which are actually incredibly large. 
It's obviously nice to know pdb, but for anyone looking for something more intuitive I've found that Visual studio code with the Python extension is the most lightweight option with a decent debugging experience. Unlike PyCharm, for example, it still feels and runs like a text editor despite all of the features typically found in IDEs.
This is a good intro course to programming using Python: https://www.coursera.org/learn/interactive-python-1 You need to submit assignments and as well as grade your peers' assignments in order to pass the course.
Thanks. This wasn't really what I was thinking of, but now that I think about it, this is probably the better way to go about doing it.
I understand, but my aim is to be able to use voice commands and then have the addition of functions easy, but also human readable.
Any learning is good learning, but I find the snide tone and clear bias against Python 3 in LPTHW to be pretty... Demoralising. That said, you won't have a hard time migrating, the necessary syntax changes aren't massive (although some of the string logic is). When you're done with your current topic, why not see if you can find a tutorial that runs over all the new stuff? 
[Ask Python](http://askpython.com/) [Think Python](http://greenteapress.com/wp/think-python-2e/) and the rest of the serie that uses Python, e.g. ThinkDSP and ThinkBayes. Python 101 and 201 from [Michael Driscoll](https://leanpub.com/u/mikedriscoll) were free recently...
Wow, that sounds very impressive. I will definitely take a look at this tonight!
&gt;Also, are there any modules for drawing figures (a-la Matlab)? Thanks so much in advance! Yes, there's a few options but the main one is Matplotlib. I highly recommend Seaborn too, as it extends Matplotlib with a lot of useful plotting functions (and nice colour schemes). I'm a biologist (neuroscience) and I do all my work with Jupyter, Numpy/Scipy, Pandas, Matplotlib and Seaborn. It's a great combination. However don't discount R. It's a somewhat clumsy language, especially compared to Python, but it has bioinformatics libraries that don't exist on Python. I use it for my RNA-seq analysis, again using Jupyter. I don't use any other IDEs anymore.
That's not a good idea. Store your `teacher` instances in a dictionary, with the key being the name you want them to be searchable by, something like `{'prof': teacher(...), 'other prof': teacher(...)}`. Then you can check if such a name exists with `if temp in dict_of_teachers` and then retrieve the object with `dict_of_teachers[temp]`.
Thanks
Also, post questions in /r/learnpython next time.
For core Python just use [the official tutorial](https://docs.python.org/3/tutorial/).
Created this as a solution: https://github.com/GitWarningBot. It will notify people of their exposed AWS keys.
Never heard of Seaborn yet. I'll check it out, thanks! Regarding R - it's less relevant to what we're currently doing, but it's definitely on our list :)
checkio.org is nice to start practicing basics
From: http://www.daveoncode.com/2013/10/17/how-to-make-angularjs-and-django-play-nice-together/ $interpolateProvider.startSymbol('{$'); $interpolateProvider.endSymbol('$}');
If you don't want them all in a class you could probably use a decorator to register all available functions as well, just another way to skin the cat as they say.
I wouldn't say "broken" rather it's easy to get wrong. Devs have to be more aware of what's happening at the OS level when using multiprocess or threads. If you're writing to a file then queues,locks, context managers, etc. need to be leveraged which requires some initial convoluted logic. Another simple way would be to log using ``syslog`` but that's only for unix-like environments.
If I were you, I might just learn Python by using it. A Python framework for the analysis and visualization of trees. http://etetoolkit.org/ Biopython Tutorial and Cookbook http://biopython.org/ A Python package for precision medicine and proteogenomics http://pygeno.iric.ca/ PS. My background is the same as yours. Dual Master of Science on Bioinformatics and Software Engineering. I left bio field 10 years ago after I did microarray genechip research.
There's plot.ly also.
Hey here's the random F.R.I.E.N.D.S episode generator! https://github.com/jaunkunal029/RandomFriends Still working on the Classifier..
The easiest way to find that URL would have been to look in your browser's network profiler as the page loads. Just look through the files for filenames or content that look interesting. If you wanted to automate this programatically to find unpublished APIs, I would say you'd cover a sufficient amount of cases by simply spidering pages and checking if they contain valid JSON. You could also try checking for requests to pages that contain strings like "json" and "api" or content-type in the response header.
Planning to use this soon!
I was thinking about this. I thought I control imports with `__all__` and then nobody needs to take time in the `__init__.py`. But I will taks your advice and use normal imports there. Thanks.
Thank you very much!!!!!
I would love to, but I don't have access to any OS X machines to develop on. If you want to help you just need to implement a module exposing four low-level functions (`press(scan_code)`, `release(scan_code)`, `listen(queue)` and `map_char(name)`), and you would have all the help I can give. Edit: there was an issue a while ago asking for OS X support. I just reopened it with more details on what is required to have it working: https://github.com/boppreh/keyboard/issues/11#issuecomment-260199952
At least use pandas or numpy for loading the csvs, it should make your life much easier. And then maybe sklearn for the actual regression?
Can this library distinguish between different keyboards? I'm using a USB numeric keyboard to trigger certain macros at work, but I haven't been able to find any Python libraries that can hook into keystrokes from only one device.
Not yet. It was on the todo list, but I'll start working on it right now. Are you using Windows or Linux (just so I prioritize the right OS)?
Interesting project, thank you for sharing this! Do you think this software is fast enough not to cause input lag for fast typists? I wanted to see if you need X running to use it. While taking a quick glance at your source code, `flake8` reported several unused imports. I also noticed use of lists for static sequenced data .. have you looked into optimization at this point? Also, do you expect users to `sudo pip install` this software? I've read that it is commonly regarded as poor practice to `sudo pip install` software for two reasons: 1. The installed files might conflict with other OS installed python files. 2. Privileged execution of untrusted code. Your source code is available for everyone to read, but perhaps everybody trusts it without checking, thinking "It's OSS, so someone must have audited it..". I hope I don't sound offputting. I like what you have done. I'm just trying to share my experience when trying to install and use your software, and hope you will benefit from the feedback. 
Yes, the backend always send events by scan code. At the start of the program a map is made between all known names and their scan codes, and this is used thorough the code.
There's no way to suppress key presses currently. It used to be possible, but only in Windows, and not reliability, plus it required processing hotkeys in the main callback, which introduced input lag. Also, I found no way at all to do so in Linux, and feature asymmetry is not nice. Yes, I'm afraid you would have to issue a counter-CapsLock.
Alright, good to know the limitations. Countering it seems to work fine though, after very limited testing obviously. On a similar note, is it possible to get the state of the caps/num/scroll lock keys, since you can't be sure of their state before the script runs?
This does make the length become 48, but it doesn't help me turn the unicode into floats. I need floats, since what the raw string is is bytes. I need those (supposedly) 48 bytes to becomes floating point numbers
Videos are up, see my other post above for links.
Now that you mention it there's that too! This is the closest my mobile googling foo can offer: http://lwn.net/Articles/641244/ I was referring to [MicroPython](https://micropython.org/) which runs on microcontrollers. Goodness, there be many pythons out there :)
Hmm, I got mixed success. In Linux this was easy. In Windows, though, it seems to require having a RawInput hook instead of a regular KeyboardHook, and this brings many complications (requires separate process, hard to map to scan codes, etc). Suggestions welcome. What I could implement was: - Linux now reports the path of the device that generated each event, available at `event.device`. So if you are on Linux, problem solved. - Both Windows and Linux now report if the pressed key is located on the key pad, available at `event.is_keypad`. This helps distinguishing between a top-row `1` and a keypad `1`, for example. For some reason the `enter` key is misreported, the events are identical regardless of the actual key pressed. Maybe this is a hardware fault of my €5 USB keyboard. These features are available in a new release, 0.9.4. If your only keypad is the USB numeric keyboard you'll be able to add hotkeys by doing `keyboard.hook_key(key, callback)` and checking the `event.is_keypad` property of the event inside the callback. Unfortunately if you have two keypads, there's no way to distinguish them at the moment. I'll keep this in mind if I ever find an alternative in the future.
I'm impressed by the place taken from Java by Python.
/r/programminghorror
Find code that you seem to repeat a lot. Think about how you might use `functions` to not have to repeat them so much. When the code is nearly identical, but not quite identical, think about how you might use `arguments` passed into those functions to let them behave slightly differently.
Graduating in December. Searching for a software engineer position(in USA).
use sets instead of lists. set(['camera', 'lens', 'cant take pictures', 'focus'])
i normally don't do this kind of stuff , but the movie on TV is boring ... so here you go... you can use a dictionary as a map and fetch the solution number right from there this will leave you with one for loop instead of endless if-else statements shorter version of your code : #!/usr/bin/env python problem_map = { 'screen_problem' : { 'keywords' : ['screen','display','touchscreen','screen is cracked'], 'solution' : 0, }, 'camera_problem' : { 'keywords' : ['camera','lens','cant take pictures','focus'], 'solution' : 1, }, 'speaker_problem' : { 'keywords' : ['speaker','sound','cant hear anything'], 'solution' : 2, }, 'software_problem' : { 'keywords' : ['lag','slow','cant open applications','applications','virus','apps','app','software','update'], 'solution' : 3, }, 'mic_problem' : { 'keywords' : ['mic','hear me','microphone', ], 'solution' : 4, }, ' water_damage' : { 'keywords' : ['water','dropped in water','dropped in'], 'solution' : 5, }, 'battery_damage' : { 'keywords' : ['battery','charging','charge'], 'solution' : 6, }, } def get_solution(i): with open("solutions.txt","r") as f: solution = f.readlines() return solution[i] def solution_checker(Name, Email): print ("Hello ", Name) Problem=input("Hello Could you please tell us what is wrong with your phone? ").lower() solved=False for problem in problem_map.keys(): if any( x in problem_map[problem]['keywords'] for x in Problem.split() ): print(get_solution(problem_map[problem]['solution'])) solved = True break if not solved: while True: end=input("sorry, we are unable to find a solution for your problem. Do you want to : A) send your problem to a tecnitian and get a responce back via Your Email or B) Re write your question? or C) end the program?").upper() if end == 'A': print('Great, a tecnitian will get back to you as soon as possible with your problem of', Problem,'and will get back to you via ', Email,'Thank you for using troubleshooter') break elif end == 'B': break elif end== 'C': exit() else: print('that is not a valid answer, please choose A or B or C') continue if __name__ == '__main__': print("Hi, welcome to troubleshooter 2! before we get started We need to get some quick details....") Name = input(' Please enter your Name: ') Email = input(' Please enter your Email: ') solution_checker(Name, Email) I think it does mostly the same .. but don't take my word for it :) I'm sure it can be simplified further 
im kinda a noob at this so ill try but thanks anyway
jheez thanks a lot man :D really appreciate it :D
I'm gonna do some research and maybe contribute to that :D 
Awesome! I would be extremely grateful. If you need anything don't hesitate to open an issue or send me an email (check my [GitHub profile](https://github.com/boppreh)).
but wait i've just realised... i have to get the solutions from a text file called 'solutions.txt', how would i implement that into the code? 
yea i get what ur saying but im kinda a noob at python so i dont rly know how to do that xD sorry bare with me
Try this: def printsolution(solnum): file=open("solutions.txt","r") solution=file.readlines() print(solution[solnum]) file.close() loop=0 And replace your repeated [file=open..loop=0] with a simple printsolution(1) or whatever the soltuion number is. Sorry for improper syntax and indent, written on mobile
Cheers for that man :D
So you want people to do it for you instead of you learning how to do it yourself?
Generally speaking, you want to use this when you have code that must raise a certain exception under certain conditions. Verifying that your code fails when you expect it to fail is just as important as checking the "happy case", if not more. An example where this kind of test can be critically important is when you're writing authentication / authorization code. Suppose you have a function `createUser`, which requires `admin` permission; you would want to write (at least) two tests to accurately cover this behavior: one, a test that calls the function with a current user who *is* an administrator, and two, a test that calls it with a current user who isn't. In the first case, you want to verify that the call goes through; in the second case, you want to make sure that it raises the right kind of exception. Of course you could rewrite the test to catch the exception, return `True` in the `except` branch and `False` in the `try` body, but that gets old quick, and introduces a lot of boilerplate.
`a, b, c = [[1], [2], [3]]`
hmm... yeah i wasn't expecting that to be the answer.. 
Hmm..wasn't expecting that to be the answer.. but yeah makes sense.. I was hoping that the outer brackets could be removed, but it makes sense that there nothing hold the items inside. 
Where are you trying to download it from? I just checked the version hosted [here](http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy) and my scanners aren't picking anything up so you could give that a try.
What about if the list is of variable length? Please
Looking at your code and your attitude, you should stop programming.
Thank you for the clarifications. With `static sequenced data`, I mean data in an iterable object that doesn't change. Also, while I have your attention, does your software replace the features of [xcape](https://github.com/alols/xcape)? I use `xcape` for defining dual role keys. I have my caps lock configured to be `ctlr` when held down, but `esc` when tapped.
Oh, you mean I should use tuples instead of lists when I know it won't mutate? I'm aware of that, I just choose lists in some places to help readability. For example avoiding a chain of opening or closing parenthesis, or mixing lists and tuples in the same collection. About `xcape`, I didn't know it. One of the limitations of my library is that it can never block a key event. So to replace caps lock, for example, you'll have to issue a counter-Caps Lock event to undo the effects of the previous one. Should work, but is hackish. I'll check how they are doing in `xcape`, maybe I'll be able to replicate this feature.
Hmm, that's unfortunate. One possibility is that the application was swallowing all key presses to avoid losing focus (e.g. windows button or alt+tab). Since it's not possible to register a keyboard hook with higher priority than another we hit an impasse. But thanks for the feedback, I'll add to the list of known limitations.
Thanks a lot! I successfully downloaded and installed it from the website you linked to without any problems. I tried downloading it from [this site](https://pypi.python.org/pypi/numpy), so I thought I'd be fine. I still don't know why a trojan was detected, but at least I got the module! Thanks again! :)
Probably is, I just wanted to check with you guys on here before I did anything about it. Thanks! :)
It's not saying web scraping = $100k salary. Indeed doesn't decide themselves what skills are worth. It's saying the keywords "web" and "scraping" appear in job postings that average $100k. The first job listed is Lead Software Engineer for Time Warner Cable. That person probably has a lot more responsibilities than doing simple web scraps and gets paid extraordinarily well for it.
I'm surprised C++ has more than Ruby. That's cool that Python is #2, I don't think I would've guessed that either. I probably would've guessed Javascript #1 and Ruby #2.
Do you use Ruby? I am curious as to why you'd think it's that popular. 
You might want to look at a program called HIDMacros. I believe it works by checking the hardware id of the device that sent the event. 
Agreed, impressed. But definitely not surprised. Us Python developers love their language and platform. I'm not saying there aren't Java fanatics out there, but I've run into more of the opposite (frustrated with Java, not loving the dev experience). And OSS is mostly a labor of love, so things like Python fit right in.
There is a massive amount of sampling bias built in to these 'studies'. This is just projects that are hosted on GitHub. Python still has a long, long way to go inside of a lot of bigger companies.
As the other person said. Your question is poorly defined... What do you mean by "remove"? Let's use the top answer's example a = [[1], [2], [3]] What do you want to accomplish with a and/or the items in a? If you simply want to visit each element of the outer list individually, then a simple loop or comprehension is the way to go.
What's the first? English? lol.. Edit: Please dont crucify me.
The (obvious?) answer for me is it depends. Your example is a little too simple because of the add operation that it seems pointless. In most other cases I would say you are probably just properly separating your code in to functions. However, in my opinion separating this in to two modules is major overkill. There is no reason you can't have a `if __name__...` block at the end of `add_nums.py`. I write most of my code as a "library" like you say and typically have a command line interface via `if __name__` for testing and debugging at the very least. If the whole purpose of the code is for one single entry point by the user then I might put this in `mypkg/__main__.py` so it can be called as `python -m mypkg` to simplify it a little. Edit: Maybe should have noted that I call the individual scripts like `python -m mypkg.add_nums`.
I am thinking of manually tagging all the episodes by their genre and then export this data to a .csv file and use this for selecting the particular episodes. EDIT 1: Any ideas are welcome!
&gt; In chrome - ctrl + shift + i F12 works as well
When you say library, I think the term you may have meant to use would be module -- as a module. Yes I do that too. Always a folder (for the repo) containing a folder(for an ``__init__.py``) alongside a ``setup.py`` ... the basic scaffolding is not so basic anymore.
[removed]
If you find a bug that you can't immediately fix, it's a good idea to write a test to reproduce it, then mark it as an expected failure. When you do get around to fixing it, you can remove the decorator. If the bug is ever accidentally fixed, the test will show up as an unexpected success, and you can work out what you changed that fixed it.
Ruby is nearly synonymous with Ruby on Rails, at least in the US, and perhaps that's the problem. Python is used in more domains. It has more legs to stand on.
I don't think it's saying just that skill gives you that salary. I tried searching several prog languages and they all gave me low 100k. It's probably just most software related roles are in that range and those are the ones that have that skill listed. 
What do you do for work?
Our tool for that is MATLAB and will be for some time. You're not even acknowledging the COBOL and FORTRAN that run the world.
Sure but it is very hard to measure use of closed source and in-house software, at least not as easy as mining github data.
i don't know what DM is but i would like to help..
Ah, this is a very interesting one! I hadn't noticed that the command-line output explicitly indicated expected failures and unexpected successes.
`import` only works for built-in corpora. If you want to use your own files, use `PlaintextCorpusReader()` method ([see the details in the NLTK tutorial](http://www.nltk.org/book/ch02.html#loading-your-own-corpus)).
Having the computer come up with a scenario requires either some way for it to randomly pick scenario-components from a pre-set number of such scenarios or using some sort of algorithm (procedural generation). That's possible to do, but will generally not create the same quality of stories/adventures that hand-crafting them would do. It depends on what level of complexity you are looking for though - if all you want are quests like "get item &lt;random&gt; from location &lt;random&gt;" then it's simple. When you want something more complex it can quickly become a very hard computational problem. As for creating a text-based game, you might be looking for creating a MUD - a multiplayer text MMO where the computer is often considered to be the "DM". This means the computer handles all the rules-mongering while human staff (generally) crafts the story/world for the players. You can read more about MUDs on [wikipedia](https://www.wikipedia.org/MUD). If you want to create such a game in Python, then [Evennia](http://www.evennia.com/) is a place to start, it is a Python library for creating multiplayer text games. 
I'm afraid that I cannot work out what that code is supposed to do. 
I think I will end up wrapping [Docfrac](http://docfrac.net/wordpress/) without requiring my users to install Libreoffice. Seems that converting RTF to any other format in Python 3 is not an easy and common thing. **Update:** Docfrac doesn't seems to provide .exe or .dll. I found [UnRtf for Windows](http://gnuwin32.sourceforge.net/packages/unrtf.htm) and [RTF 2 HTML Lite Converter](http://sageshome.net/oss/rtf2html.php) which looks more interesting. **Update:** I gived up.
Webassembly might reshuffle that.
I've read it "Python 2 most popular language". Not so far from true.
I do the "`__main__` is for self-unit-testing" on nearly all my modules, unless it's a filter/utility of some kind where there's an obvious command-line way to use the module's capability alone.
Extending my Flask-powered brew controller on my Raspberry Pi by automatically running recipes.
Does anyone know if i can look for a lets say, red pixel in a region. I know you can use pygui for a region screenshot. But if i want to move my mouse to that red pixel there must be a easy way to do this right? I csn do it but just for a specific x y coords. :-) can i search a region for a pixel :-) 
What you're talking about (a folder with an `__init__.py`) is called a package - a module is a single file. I'd encourage you to stick with plain modules wherever possible. [Here's what Raymond Hettinger has to say about packages.](https://youtu.be/wf-BqAjZb8M?t=25m33s) EDIT: [And this.](https://youtu.be/wf-BqAjZb8M?t=32m21s)
 This sub is pretty quiet for how popular we are
nice i am interesting too in creating such a game. i will look into evennia thanks for the info.
You're correct that making a function for adding is silly, but for literally anything more complicated than that you're doing it right. Putting argument parsing and the work you want to do on the arguments in different functions is solid program design. As a guideline, consider that you should be suspicious of functions that grow over 20 lines, and if the function gets greater than 50 lines long, it's worth breaking it into separate responsibilities in order to test it effectively. If this is slowing you down, you should consider what parts of your toolchain make file management difficult, or make it difficult to dig into data. Most IDEs have tools that can find dependencies for you, vim and emacs have ctags, etc.
sure, many people already do something like this, crowdsourcing though [Amazon's Mechanical Turk](https://www.mturk.com/mturk/welcome).
My Django project has so much JS libs in it that it became a javascript project according to Github :-/
I'm surprised that Ruby is comparable to C and C++ in terms of GitHub popularity. 
Agreed
I'm -1 on pyenv, and I've switched over to [vex](http://github.com/sashahart/vex). I've found things to be much more tolerable / similar to the rest of the bash environment. And for the most part, now that I use `vex` exclusively, I have not found any necessity of installing system level packages except: * pip * vex And I install a couple of linters for my text editor. Everything else lives inside of a virtual environment.
hi, This looks very cool, try posting in https://www.reddit.com/r/generative/
&gt; vex is an alternative to virtualenv - https://github.com/sashahart/vex Pyenv is about python versions and not about virtualenvs. 
I think because Ruby became almost exclusively tied to Rails while Python got picked up in a lot more areas other than just web development. Then when Pylons and Django appeared, Ruby and Rails became less and less necessary or even useful as it was so focused in one area and no others while Python became the Swiss army knife that Perl always wanted to be.
... First look in the slaughterhouse, the. Look for the meat factory. Then look for the cleaver factory, then for the hook factory...
And don't forget all the left_pads that are needed because the standard library only includes useful functions like [wrapping a string in a blink tag](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink).
I'm working a program that compares product data from distributors that sells some of the same and similar items. It then merges any duplicate items and separates distributor specific items. Its almost finished. Just need to work out a few bugs and finish search function. 
Title should have been: there's JavaScript, and then there's everything else. 😊
That's a good sign, you're learning.
Virtual environments control both packages and python versions; they are not orthogonal but very much paired. I think the linked blog post indicates as much as well.
D&amp;D-esque.
Yeah, I did look at that. The problem I was running into with that program was using multiple files. I have one py file to run the program and one that stores most of the data. If I put them on the same file it really really slows things down because its over 1000 lines... I'm about to test WinPython now, but I'm not sure if it uses 2.7 which is what I always use because I'm accustom to it.
Awesome!
Understood, I just don't want to give false hope to people that go "OMG Python's so popular, I've made the right decision and will find employment" If anything the more popular something is opensource the more competition there is. You can get by being mediocre COBOL or FORTRAN programmer but to stand out as Python you have to be a bit better.
I looked at that one. Can you import external libraries?
Yeah that's how I figured you spelled it but one of my friends said it was "esk" TL;DR: My bad, sorry 
There's also [Pew](https://github.com/berdario/pew), which I'm really digging. It bundles [pythonz](https://github.com/saghul/pythonz) for installing different versions of Python (including CPython, Jython, PyPy).
What do you mean by external libraries? You can simply install all the libraries you need, since Anaconda comes with its own package manager conda.
You apologized and everything! I just like being a pedantic turd sometimes. Carry on! (And stop listening to your friend.)
Setup is kind of annoying when you first get going with asyncio, there is a bit of ceremony with `create_server` being a coroutine (though it does make sense), all implementations give a coroutine (native generator) instead of the server object It's common in asyncio to: loop = asyncio.get_event_loop() srv = loop.run_until_complete(create_server()) try: loop.run_forever() except KeyboardInterrupt: pass finally: srv.close() loop.run_until_complete(srv.wait_closed()) loop.close() There isn't really a great way to get around it and you cannot create it before the loop exists since it effectively binds the loop to a socket and system events. One option is to use a coroutine for your setup, since in many cases you may use other coroutine based initializers, but it's a case by case basis. 
I actually tried pew and liked the CLI on vex better (new vs -m), but I thought pew was decent as well.
That's basically what I meant, just worded it weird lol Well awesome, I'll check it out.
Seriously, where is Conda ?
I do use ansible ... to control pythonz and install the version of python I want (2.7.12 and 3.5) on a newly acquired server (with only 2.7.9 and 3.4 in system packages usually). Is something wrong with this method ? Do you recommend something else ? PS : ansible still not ported to python3, what a shame. Pythonz not working if only python3 is installed on the system (like in Ubuntu 16.04), what a shame too. 
Continuing work on a script to group my Google Chrome bookmarks by similarity by looking and the site contents of each url (with beautifulsoulp, pandas, k-means clustering) I am learning as I go. More info here: https://hugoalvarado.github.io/bookmark-analysis-part1.html#bookmark-analysis-part1
So... am I missing something or is this just a gif? With a title like that, I expected to learn something....
Oops. I read that as "we got a nice critical mess". 
Typically I see this when you have to workaround a bug that is upstream in your dependencies. You want to know when upstream fixes it.
https://en.wikipedia.org/wiki/Penrose_tiling Seeing the code would be nice, .gif alone isn't much helpful.
Thanks for sharing. I am really struggling with getting my environment the way I want... it seems some things on my development box default to Python 2, while others Python 3. My jupyter notebook is a complete mess. It runs python2 by default, but python3 won't import properly. I've been spending a lot of time on Stack Overflow trying to figure out what is going on.
What kind of GUI, just text?
That's a good idea. I'll work on it, it should be a pretty small change. 
I've never actually used Conda. If I'm honest, I don't really know what it gives me that I am missing. I'm looking for the elevator pitch if you know where I can find it.
As a note, I actually install python from scratch rather than using the given system install. This is at least partially why I want to use the native package installer. I want access to source/lib packages.
Native package installers tend to only have one version of Python 3. I test against 2.7,3.4 and 3.5 and pypy at moment. For a development environment, I don't want to use ansible/salt/chef/puppet. pyenv also helps me easily install development versions of Python. Which I find interesting, fun and sometimes useful if you want to test against pre-releases.
1. Please post your code as text, not a screenshot 2. Post questions like this in /r/learnpython
https://github.com/rg3/youtube-dl : This library does exactly that. It handles lot of usecases. 
Probably better off consulting a lawyer.
Python's 3D gamedev ecosystem is pretty bad. There's [Panda3D](https://www.panda3d.org/), but it doesn't really compare to state of the art tech or support VR. If you want to do VR, look into Unity or Unreal Engine - VR rendering is _really really really fucking hard_, so having an engine that does it for you is a huge advantage.
Do you keep both the Elm files and the JS files it generates under version control? I have never used Elm, and therefore don't know if it is necessary, but I do think it is good practice to leave out files that are automatically generated by the compiler from version control.
I've never really understood the advantage of using make over just using Python. If you're creating a Python package, you are assured to have Python. Why limit to say Mac/Linux if you already have a full programming language to handle the same task? I will use CMake for C extensions, but I'd likely not use anything but Python for other tasks.
1. Try /r/learnpython 2. Try [Flask](http://flask.pocoo.org/)
Complete guess, but there is support in Qt for high resolution screen scaling [described here](http://doc.qt.io/qt-5/highdpi.html). Would you be able to achieve what you're looking for using the environment variables described there?
Oh, thank you, that's very gracious. I had probably seen your library before, but dismissed thinking it was a wrapper around pyHook. Sorry. Your code and the whole project seems very organized, and it seems we are doing pretty much the same thing. The only difference I could see is that in your library the hooks are much closer to the Win32 API. In mine there's a thread collecting events, putting them into a queue, that goes to a generic listener, and only then the events are matched against hotkeys. Your method definitely has some merit.
Sure, I don't have a reason that is likely to change your mind as I think you seem pretty happy with your setup but to restate why I like pyenv; it has has given me the easiest and most flexible way to install multiple Python versions out of the approaches I have tried.
Ahh nice, that's useful to know!
It looks interesting but PySide is based on Qt 4.8 which apparently does not support High DPI. Maybe QPainter, QPaintEngine, QPaintDevice would be useful here? 
I wouldn't say that kivy is used 'so much' for game development so much as I would say that kivy is your only realistic prospect for game development in Python. I don't recommend it, but if you *must* use Python for 2D games, then Kivy is the way to go. Pygame is a dead project. You're as likely to get a virus from their website as you are to get documentation. It's 100% abandoned.
What about cookies, user agents and authentication?
I mean source code readability, like this: lists_of_points.append(((x1, y2), (x2, y2))) vs lists_of_points.append([(x1, y2), (x2, y2)]) My rule is that if the list has a conceptually fixed number of elements (e.g. 2D point, multiple return values) I use a tuple. If the list may theoretically contain a variable number of elements, even if it's currently hard coded not to, I'll use a list. If you see any code of mine that violates this rule feel free to report as (minor) bug. If you disagree I'd like to know your reasons, but this is an extremely minor and inconsequential point. If you find it abominable and submit a pull request replacing everything I would accept.
Nice post. Yea, it seems like a good idea if you can try to create a program around one of your main interests. Python is really good for this because it allows you to create a simulation or website quickly, when compared with other languages.
&gt;In mine they there's a thread collecting events, putting them into a queue, that goes to a generic listener, and only then the events are matched against hotkeys. This is actually _very_ similar to what the first version of pyhooked did (except it didn't thread). The current version is actually mainly written by one of the contributors to pywinauto. I refactored it for use as a stand alone library. Anyway, perhaps in the future keyboard will use a similar method, who knows. I believe some speedup is experienced in some cases (in very unscientific tests I did).
Oh, for some reason I thought they had done a release recently. Perhaps I was thinking of Pyglet or arcade
It's okay I've done all 3. The thing that gets tricky is when you have many slaves the problem is the sessions are all over the place. 
Oh yeah, java will be nr 1. Frontend in big corp will just be written in java with webassembly. 
because his favorite language is so low on the Tiobe list :-)
HA
You don't need to parallelize over rules, you need to parallelize over cells. The new value of every cell only depends on the previous state of the whole thing, so it's pretty easy to parallelize.
Plus there is tons you can do with Python. My first project was a jsonrpc server. I've learned about sockets, protocols, and eventually async (when I recently rewrote it). 
Don't hesitate to start projects but also get back to the fundamentals to improve what you did. It's sanity to read again code you wrote few weeks ago and think how different (better) you could do the same thing. And that happend with: - books - experience
the core is text but to get higher marks we need to use tkinter. Even with text, it's tricky because how do you tell python to check if a counter has already been placed in a particular column? unlike tic tac toe where u pic the row and column, with connect 4, you pick just the column and the counter drops to the nearest empty slot. I need a way of finding out whether the rows in that particular column have counters in them already
unity3d or unreal engine python equivalent is crap
Thanks :)
The [Begins](https://pypi.python.org/pypi/begins/0.9) library does a really nice job of this too.
Is it possible to write a script with Pythonista that would allow you to download via Bittorrent without a client on iOs?
I prefer conda for this. 
What do you think Wikihow is?
also try: &gt;&gt;&gt; import antigravity ;)
Sounds like you're a networking guy (i'm no python expert) but the obvious thing to me is to take stock of all the stuff you do day-to-day or at least once a week or whatever at work and just automate that out of your life. Thats how I'm learning at least! GL!
FYI - Twisted started out as a MUD. Be careful about scope creep.
In order to solidify my knowledge and skills with a programming language, I always make an IRC bot. The duties of the bot change from implementation to implementation, but they all communicate with an IRC channel/user and... Well... Something else.
State of * lock keys is not visible at the moment, but I've created an issue to track the progress of this feature: https://github.com/boppreh/keyboard/issues/23
Thanks. Not yet, but I'll be adding GeoJSON export to a future version. Should be an easy feature to add in.
How can you create a website using python? Don't you have to use css or javascript?
The line about it not being secure enough for use in production should be before the tutorial rather than after.
I've made a script to work with the shapefiles and export them as geojson, plus I'm converting the street data into blocks so we can have solid polygons from it. In my script you can tweak the inner offset and the min. area. If you're interested I can share it with you.. It's not a big deal but it works pretty well.
Python as the backend using a framework like Django is what they mean.
Yeah the front end will always be at least some combination of HTML, JS, CSS, so when people say that they built a site using X language they're usually referring to the backend.
I would suggest doing the work related project
Maybe this will be more clear. &gt;&gt;&gt; _.pop(0)([1,2]) 1 &gt;&gt;&gt; list(map(_.attr, [Object(1), Object(2)])) [1, 2] To be clear, I'm not advocating that anyone try this at home. 
What the hell are you talking about? The title suggested that maybe there'd be a tutorial or something more than just a gif. I presume the image was created with python... but seeing as this isn't /r/pics I expected some kind of information, too.
This isn't bioinformatics specific but I'm a computational chemist in a PhD program and I've pretty much just used a combination of numpy, scipy, and matplotlib for all my data analysis. I have a question for you, though! I think bioinformatics could be a field where I could utilize the skills I picked up as a PhD student in enzyme design. Do you have any good resources on some good biostatistics material that might be industrially relevant (I'm a physical chemist by training, so I don't really know where to look).
I'm just saying you could've been less pretentious about your curiosity, not that you were being a dick about it
What happens when you go to a URL? Click a link? Push a button? Create a user? View your profile? All that stuff is handled by the backend code which renders your front end code which in turn can be read by your browser and then viewed by you.
The back end is any code run on the server side of a webpage. The other end is the front end, or client side, which is the code run that is run in your browser (i.e. HTML, CSS, js). When you visit a URL, you're sending some server a request to view the content on that URL. The request is sent from the client (your browser) to the server. The server (back end) has code which takes your request and generates the proper response - in this case, it gives you a subreddit page and populates it with the proper data you'd expect, i.e. comments, links, etc. So for Facebook I think it's PHP which does that work...I think reddit is actually Python. So the Python on the server has logic which allows it to handle your request and give you what you need. That's the skinny of it.
I personally find that context is everything. Like, I don't care if I can manipulate data stored in an array or not, unless the array contains something I actually care about, or find useful somehow. If it's not something I am invested in, it's hard to keep interested.
I have to disagree with your interpretation of doing one thing well. Maybe you see it as "hotkeys", but I see that "one thing" as "productivity", via hotkeys, macros, windows, etc. Yes, the API design becomes a greater challenge. AutoHotkey's basic GUI API suffers from early design decisions when macros were the main consideration. Your green field would not need to suffer the same fate if you had the features on your roadmap from the beginning. There is also huge value in having a comprehensive toolkit, in which all of the tools work together without any additional configuration, dependency resolution, asynchronous release schedules, etc. Besides setup being more productive, it also makes your software more accessible to novice programmers and incidental programmers, like DBAs, network administrators, and system administrators. Regardless, I'm already very happy that you've developed this project thus far. 
Give pyglet a try. I'm currently working on implementing SDL2 style game controller support. https://bitbucket.org/pyglet/pyglet/wiki/Home 
That's one of my greatest issues as well. I always wanted to work on a project with other people, or even one that I really care about. But I always fall short. My personal projects get abandoned because I simply don't care much about them. As for group projects, they never gone beyond class assignments that were given because I never met people that actually wanted to plan out a project. But yeah, not really sure how to solve this problem. 
You'll get a lot more help at /r/learnpython. On windows you might have better luck with anaconda, though scipy is rather particular about how you port pieces. I'd suggest asking over at /r/learnpython. 
You'll get a lot more advice at /r/learnpython. 
Automate more tasks. Tackle projects that you'd traditionally use other tools (like maybe Excel) with a Python notebook or script. Opportunities will present themselves as you continue to work, and you'll continue to learn more. It's that simple.
[check out this stackoverflow link](http://stackoverflow.com/questions/24159542/how-do-i-convert-a-csv-file-to-xlsb-using-python)
I think a good general beginner project is to make Telegram Bot, which is a chat bot that is built on the telegram messaging app platform. It's fun, not too difficult and you can demo the chat bot to people. You can check out the bot that I made while learning python at: https://telegram.me/MusicLyricsVideoBot **Official Telegram Bot Api:** https://core.telegram.org/bots **Python API Wrapper:** http://telepot.readthedocs.io/en/latest/ **Directory of Telegram Bots ( to give you inspiration ) :** https://storebot.me/
I agree 100%!! So many coders are grumpy introverts who will tell you that you're shit at coding, and shouldn't bother writing a line of code until you know how to do it perfectly. The reality is that everybody has to start learning somewhere. I learned Python by building a series of apps in PyGame (ironically not games) with custom GUI's that relied on loops. Contrary to expert opinion, you can make ANYTHING you like once you know the simple logic of a loop. It may not be pretty, but you can sticky tape ANYTHING into a loop. That's when the fun starts!!! Once you've sticky-taped together a POS app that runs off some byzantine loop, you can then teach yourself to simplify the code. By making REALLY stupid mistakes (which are natural BTW) you can slowly train yourself to not make those mistakes. IMO for too long neckbeards have ruled the world of coding with overly harsh opinions about what constitutes 'good' code. Having learned a few human languages (Japanese and English... Italian is my native tongue) I can say for certain that I learned both by talking to people (and being laughed up). If you just sit in a room cram-studying the theory then IMO you risk turning into a neckbeard who can tell everybody who's experimenting they are shit, but will piss everybody off at work because you'll be too much of a perfectionist. Being practical is often very good! 
[xlwt](https://pypi.python.org/pypi/xlwt) together with its xlrd counter library are very well known and supported libraries that reads and writes the Excel binary formats.
Well, I am a newbie to reddit. When I was posting this link yesterday, I got a "human checking" again and again so I even did not know this image was successfully posted! Here is the [code](https://github.com/neozhaoliang/pywonderland). It uses random parameters and renders a different pattern each time you run it. Just run ``` python penrose.py ``` Some math explanations: The way in the page cited by @ChatterBrained is called deflation-inflation and it's the most common way to draw a Penrose tiling (used by almost all codes you can find on internet), it's elementary and easy to implement , but it does not draw all Penrose tilings. In 1981 de Bruijn found a new way to look at Penrose tilings by the "pentagrid method" he called. His method is a bit mathematically complexed, but still not hard to implement into code. A good introductory link to his method is [here](http://www.ams.org/samplings/feature-column/fcarc-ribbons), but you should refer to his [original paper](https://www.math.brown.edu/~res/M272/pentagrid.pdf) if you want to truly understand his method.
BeautifulSoup and find image links? 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
code at [github](https://github.com/neozhaoliang/pywonderland)
Thanks, fixed it!
The Flask framework is really good for creating websites. This guy on youtube has some nice flask tutorials: https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ
At least the actors in each episode can be scraped from each [episode page on imdb](http://www.imdb.com/title/tt0583459/?ref_=ttep_ep1) using e.g. `beautifulsoup`
Difficult shit is difficult. Stop giving up you lazy ass.
I wish there was anything I care about and can manage with.
I'll check them, thank you!
The bane of my existence. bored on reddit at work. next day something piques my intrest and im there for 12 hrs.
I've written several bash scripts to make my life easier over the past few years. I launched myself into Python a few weeks ago and am going through, rewriting all of them, marvelling regularly at how much better Python (or probably any actual programming language) does things. I learned Pascal at school, then spent some time with Delphi, then a touch of C++ and then pretty much nothing but batch and bash scripts until I met Python. I can see myself using it exclusively from here on out, it's wonderful.
It's true that programming is generally a means to an end. And this is why thinking about the end result is a big source of motivation. However, you never know how long a project will take to complete, or how hard some bugs or performance problems will be to resolve. So along the way, you need to enjoy programming (and learning about programming) for its own sake, otherwise you will not like what you do. Personally, this is how I stay motivated: * Have a specific objective (end result). * Try to constantly learn new things, and apply what I learned in the projects I'm working on. * Work on several personal projects at the same time (or at least, constantly look for "my next project"). So when you lose motivation for one of them, you can work on another, and then come back afterwards. By the way, I found that the environment I work in is extremely important. Working at home, and being too comfortable almost never lead to productive days. I need to **force** myself to go out.
As long as you are on the learning business, it's even better to do that better thing, and see what happens as a consequence.
Your friend is selfish. And most likely a spammer :) There are certainly some hidden opportunities on the web, but I don't know any of them.
sounds pretty interesting
I don't regret pointing out its okay to be unnecessarily sensitive and wait to be asked
In my experience, If I make a mistake, examine exactly what it was and why I made it, then correct said mistake after I understand it and learn how to fix it (usually by finding one of the books you're referencing), then I will remember that structure better and more permanently than something I studied in a book before jumping in and coding. I would need to read the book and come back to it several times before fully digesting and internalizing the information; whereas a single mistake and debugging process will immediately cement that knowledge in both my long term and working memory. So in some sense, I think you're wrong, just starting by reading books would not save me time. And of course many people learn differently, I can only speak for myself. Obviously there should be some balance, constantly trying to reinvent the wheel will get you nowhere fast. But reading and studying information without doing it or trying it yourself is actually a very ineffecient way to learn something. Its just not really how most brains function; we are primates, we learn by experimentation and we learn from mistakes. 
Thank you for this. I feel the same. I see others say that they would choose to do personal projects and I thought I must not be that into programming since when I get home from work/school the only thing I'll feel like doing is being unproductive (sleep/games/Netflix). It's good to know that it does take a force to actually get into it
Predicting customer attrition with Decision Trees =)
Rewriting some i3pystatus modules to fit what I want to see instead of just adjusting my expectations...
mine some data with pandas + numpy + pyspark and building an api to move data with flask
&gt; It's been a while since I've used locust but I believe it uses the ``requests`` package under the hood so cookies, user agents, and authentication should be covered. Don't quote me though :D ~ */u/notoriousno*
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
We've also released a new demo video showing the features in use: https://vimeo.com/189945022 Release notes: This release has refined the use of Qt 5, with additional tools for tomographic reconstruction for electron tomography. The data pipeline has been tweaked and improved further, offering a unified view of the data sources, data operators, and visualization modules in a multi-threaded application where responsiveness is preserved. The volume rendering, reconstruction, and several other key pieces of the application have been improved, and benefit from the threaded execution of operators. The user interface has seen a number of improvements too. New features in this release include: Extend the data operators to run in a background thread, support progress updates, and cancellation Use PyBind11 to wrap some of the C++ interface to make the operator Python API richer and more expressive Improved pipeline view to unify all pipeline objects, show state of operators, and display child data when present Many new segmentation routines exposed, numerical output can be viewed in a sppreadsheet view Enabled full scene antialiasing to improve rendered scenes with minimal overhead Exposed additional volume rendering options, with more to follow Added the Tomviz version to the state file to improve future reproducibility Custom interfaces in most module settings to improve presentation of options, display the name of operators when they are selected Updated dependencies including Qt 5.7.0, and ParaView 5.2, now build with latest Visual Studio 2015 on Windows Various updates to reconstruction routines including the addition of progress updates, executing in a background thread, and refinements Save screen captures with a transparent background Improved drag and drop installer on Mac OS X First version of a Tomviz user guide was developed As mentioned in the last release posted to this subreddit: Additional Tomography datasets made open and public in "Nanomaterial datasets to advance tomography in scanning transmission electron microscopy" Scientific Data 3 160041 (2016) http://www.nature.com/articles/sdata201641
Thanks!!
This is absolutely a great idea. My first experience of programming was writing a scraper for twitter data, and I've since written bots, basic analytics software and also started messing around with flask to build [this](http://threerandomwords.rocks/). All of this with zero programming education. 
And this doesn't stop after the learning phase. This is refactoring.
Why don't you ask **him** to prove it? 
 from sympy.ntheory.generate import prime; prime(66) You colleague needs to read the Zen though. Simple is better than complex, Readability counts. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
First project was a tip calculator that tipped based on a rating you gave the "server" on a scale of 1-5. Now whenever I feel I'm not good enough I just remember that I have seen a project from start to finish and hey, if I can make this than I can make anything I want if I put the effort in. Now I'm working on my first Twitter bot. The start was riddled with non-coding errors, but since getting those solved it's starting to come together. TL;DR - Title is 100% right.
For anyone who's interested in the [housing market](https://www.housecanary.com/) and/or Python, this is a great interview of the author of the [compromise library](https://youtu.be/yC9m2GInXqU?t=5m31s) on [podcast.__init__](https://www.podcastinit.com/)!
I have tried so hard, for so long to get into haskell. At this point I can't even really explain the problem, it's just that no resource I've found has ever approached teaching haskell in a way that made sense to me. People (by which I mean online resources and not actual people) can't seem to resist going on and on about how the compiler works and explain how simple tasks are accomplished to me :( I've gone through the first 11 chapters of haskell from first principles, but if you asked me to iterate over a list and change all values of "1" to "2", I don't think I could. Last time I looked into it, I couldn't even figure out how to display a 2D array to the console with each sub array on it's own line. I really wish I could find an article somewhere that just goes through short, simple examples like that and explains in a friendly way what the best way to accomplish those things in haskell is. 
 &gt;&gt;&gt; False == False in [False] True Have fun. :) hint: https://docs.python.org/2/reference/expressions.html#not-in
Thanks for the suggestion! I took a look at it, but unfortunately haystack doesn't support Elastic Search 2 yet, never mind Elastic Search 5. I may work on haystack when I'm going to build something more serious and want to use Whoosh in development and Elastic Search in production.
 &gt;&gt;&gt;True + True + True 3
Just to point out that none of the most obvious explanations account for this result: &gt;&gt;&gt; False == (False in [False]) False &gt;&gt;&gt; (False == False) in [False] False 
...or even better, without using global: x = [] def f(x=x): print(x) x.append(1) f()
Still working on converting my Pentesting framework from Java to Python. Only have a couple more classes to convert. Still need to do tests and docstrings.
&gt;&gt;&gt; False == (False in [False]) False (False in [False]) is True so False == True is False &gt;&gt;&gt; (False == False) in [False] False (False == False) is True True in [False] is False I'm missing what is not obvious here.
I'm working on a site where I can upload surveillance pictures from an rpi. I bought one for my father in law and now I need to provide him with a site and API for uploading pics.
The latebinding loop one gets me almost every time. lambs = [lambda : q for q in xrange(10)] lambs[0]() &gt;&gt;&gt; 9 The easy trick is the following: lambs = [lambda q=q: q for q in xrange(10)] lambs[0]() &gt;&gt;&gt; 0
Wot? This is clearly from July
In the end I ended up using a variation of this method. I put the words in a list so that I could append to them. Then when I entered a command, it checked for exact copies, then if none were found, it uses a module (I can't remember the name RN) to find close matches. If one is found, it adds that to the list of key phrases. Otherwise, it just says that no command was found.
Whoopsie, actually it should be about Pyston 0.6.0. I got something in my RSS feed but it is deleted from the Website. It was like: &gt; Pyston 0.6 released &gt; The Pyston Blog by Marius Wachtler &gt; We are excited to announce the v0.6 release of Pyston, our high performance Python JIT. &gt; &gt; In this release our main goal was reducing the overall memory footprint but it also contains a lot of additional smaller changes. &gt; &gt; Memory reductions &gt; &gt; One of the big items which reduced memory usage was moving away from representing the interpreter instructions in a tree but instead store them as an actual bytecode where each instruction follows each other in memory and does not involve pointer chasing. (which has the additional benefit of slightly speeding up the interpreter :) ). &gt; &gt; We are also much more aggressive in freeing unused memory now. For example for very hot functions which we compiled using the LLVM JIT (our highest tier) we now free the code which the baseline JIT emitted. Additional improvements were accomplished by making our analysis passes more memory efficient and fixing a few leaks. &gt; &gt; While we are happy that we were able to reduce the memory usage quite significantly in a few weeks we are not yet satisfied with it and will spend more time on reducing the memory usage further. We have several ideas for this – some of the bytecode related ones are summarized here. &gt; &gt; Additional changes &gt; &gt; This release contains a lot of compatibility issues and bug fixed. &gt; We also spend time on making it easier to replace CPython with Pyston for example by more closely matching it’s directory structure and other things like more closely following it’s python ‘dict’ ordering. &gt; I should have noticed it. My bad. 
def swap(a, b): return b, a
You can use `input()`, which is hackish but shorter, or `keyboard.wait('esc')`, which has the added benefit or working as an emergency shutoff button. Or a `threading.Lock`.
Good luck! I worked heavily on [pyUserInput](https://github.com/SavinaRoja/PyUserInput) - and they have hit a bit of a brick wall with the Mac stuff. Its not easy. I don't think you can solve this without using the C extensions. I'd like to be wrong but... its hard. This is my fork if its any help: https://github.com/willwade/PyUserInput/blob/master/pykeyboard/mac.py
thanks 
Writing stored procedures for Redshift with the help of Python UDFs.
The two examples given are the first two things people will try to use to explain the behavior of the `False == False in [False]` statement, but they don't behave the same.
 &gt;&gt;&gt; False - False - False 0
For the people reading this comment and wondering why this is. If you read the documentation from the hint you'll see that the comparisons can be chained arbitrarily. And 'in' is considered a comparison operator. Also all comparison operator have the same priority. So when you have something like *"False == False in [False]"* it's the same thing as having *"False == False and False in [False]"*. Just like *"1 &lt; 2 &lt; 3"* is the same as *"1 &lt; 2 and 2 &lt; 3"*.
This one I find the best one yet. It also works inverted &gt;&gt;&gt; True != True not in [True] False
Hey _LegalizeMeth_ I had the same question the other day and couldn't find a good list with all the wonderful Python podcasts out there. So I decided to create my own: [The Ultimate List of Python Podcasts](https://dbader.org/blog/ultimate-list-of-python-podcasts). I hope this is helpful – I plan to keep the list updated so for anyone reading this, shoot me a PM or email me if you think I'm missing anything or you'd like to get your own Python podcast added :)
https://www.jetbrains.com/pycharm-edu/ Hard to go wrong with PyCharm. I'd suggest looking into IPython/Jupyter as well. &gt; I suppose the existing libraries are mainly in Python 2, thus probably not worth going to 3 yet. This is a terrible assumption. Check the ones you intend to use, decide from there. Most, if not all, of the 'big names' in data processing are py3 compatible (numpy, pandas, scikit-learn, tons of graphing/plotting libs)
thank you
I wanted to write something for myself concerning music notes, which more or less have this structure.
What's the surprise? Is it that python lets you have un-parenthesized tuples?
I believe it is simply an option on py.test to continue after encountering an error.
You want a graph library (not a graphing library). [networkx](https://networkx.github.io/) and [graphviz](https://graphviz.readthedocs.io/en/latest/) are popular options, but may be overkill depending on your needs.
Then you should probably just use constants for notes, something like C = 1 D = 2 E = 3 etc. Then if you need to calculate the distance between two notes `a` and `b` (assuming `b &gt; a`), it's either just `b - a` (going one way around the ring) or `7 + a - b` (going the other way around) - choose the shorter one. 
One of my favorites (from [r/Python](https://www.reddit.com/r/Python/comments/4ivd2k/what_is_your_favorite_python_error_message/)) def a(b, c, d='foo'): pass a(c=1, d='bar') TypeError: a() takes at least 2 arguments (2 given)
Why not `a, b = b, a` ?
Silence of most of the lambs.
I would'nt recommend starting out with an IDE Vim and Sublime Text are the way to go. Plus you can later install plugins to transform these editors into a nice Python IDE.
Thank you all for the advice. I'll take this all into consideration. So far it seems like I just have to stick to it till it's seems easier and fun again. And I have to really force myself to get into. Thanks again everyone
Does that work on Windows though nowadays? I haven't used that OS in ages so I wouldn't know.
I'm using Python for a science project involving weather and CSV's.
Not exactly sure which one you're referring to, but Anaconda does work on Windows if you were talking about that.
&gt; `TypeError: a() takes at least 2 arguments (2 given)` Nice error message :D By the way in at least python 3.5 there is another message: In [12]: def a(b, c, d='foo'): ...: pass ...: In [13]: a(c=1, d='bar') --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-13-996538da2a89&gt; in &lt;module&gt;() ----&gt; 1 a(c=1, d='bar') TypeError: a() missing 1 required positional argument: 'b' Way better to understand.
Any reason for that? Not saying that I really want an IDE, but I suppose I'll not be using a simple text editor at uni either, thus my thought was to get used to something bigger from the start.
Useful list, i appreciate you posting it. 
You think so? Mind explaining why? I must admit I'm not really a computer super user and usually prefer to use stuff that works from the beginning. 
vim/gedit/terminal. I thought they were all *nix exclusives.
From scratch. I recently built something similar but way simpler (simple query language which compiles to SQL through SQLAlchemy core) and this turned out pretty useful and solid already. I want to see if the simple implementation idea will also work for something as complex as GraphQL. I'm not striving for performance in the beginning, though I eventually want to write a Python extension in Rust, so this may change. ;) 
A lot of the behavior described here is python 2.x and fixed in python 3.x
200% agree with that !
I think so. If you are talking about text editor: I used to use Notepad++ with powershell on Windows when I first started learning Python but now I'm happily using Ubuntu or Trisquel. If you are talking about Anaconda: It works on Windows, OS X, and Linux :)
I guess haha. But I also think using Linux or OS X would be much better for OP. I was a Windows user and typed my first Python program on Windows 7. Now I'd turn every Thinkpad I touch into a Linux laptop as I really can't stand Windows.
You can use Jupyter alone or from within PyCharm, I didn't make that clear in my first reply. It is awesome for data science-y stuff. It allows you to do the time consuming loading/preprocessing steps once then saves the state there and you can toy around with ideas without having to reload all your data each time you screw up. Super handy. Find that list of suggested packages from your professor and see if they are compatible or have alternatives. If it is super niche stuff you may be screwed. It really doesn't matter that much if you start with 2 or 3 from a pure learning python point of view. There are differences and gotchas between the two, but the core language is the same. The biggest pitfall is package support, that's the main deciding factor.
Yes I'd love to see it. Got a link? Or share it at the [GitHub repo](https://github.com/gboeing/osmnx) or you can contact [me directly](http://geoffboeing.com/contact/).
I'm more following Zed Shaw's advice. I learned Python through his LPTHW and he mentioned that beginners should not start off working in an IDE. I see his point as I think learning how to navigate inside a terminal (basic commands like cd, cp, rm, mv, mkdir, touch, etc.) and how to compile your programs in the terminal (not that you need to compile Python code but maybe C, C++, and Java) could be highly valuable in the long-run. Btw, if you choose Vim, you can also learn more about customizing your own text editor. If Vim sounds scary, then Gedit is a great choice with the simple command sudo apt-get install gedit-plugins providing you many good plugins. Or Atom, the new open-source, fancy-looking text editor. IDEs can be great as well I guess, but why not start off in a manner that you could get the most out of a programming experience?
I can recommend Import This https://soundcloud.com/import-this by Kenneth Reitz, the guy who wrote requests
Yeah I've run into that one before. That's a fun one to debug if you don't know about this behaviour.
There's a typo in equation 5: the *n* inside the sum should be *i*. Here's a short program to run an empirical test: from __future__ import print_function, division, absolute_import import random, math n = 10 num_trials = 1000000 def calc_expected(n): val = 0.0 for i in range(1, n): val += i*i / math.factorial(i+1) return val def is_sorted_compare_count(arr): for i in range(n - 2): if arr[i] &gt; arr[i+1]: return i + 1 return n - 1 compare_sum = 0 for trial in range(num_trials): rnd_array = range(n+1) random.shuffle(rnd_array) compare_sum += is_sorted_compare_count(rnd_array) avg = compare_sum / num_trials print("\nCalculated expected is", calc_expected(n)) print("Empirical expected is", avg) 
One of the classics: &gt;&gt;&gt; a = 256 &gt;&gt;&gt; b = 256 &gt;&gt;&gt; a is b True &gt;&gt;&gt; a = 257 &gt;&gt;&gt; b = 257 &gt;&gt;&gt; a is b False
"why is it better" "the Bible said so" and I'm pretty sure LOAD_FAST is just the parallel to STORE_FAST, which is "fast" in reference to STORE_NAME, not *_GLOBAL
I found the error, when retrieving current conditions, use temp_min and temp_max, while forcasts use only max and min
"Clean architectures in Python" alludes to some guide by which one can architect a Python project "cleanly". Instead, this blog seems to try to describe the architecture of a single project, and one has to read page after page of text and code before any description is reached. Not very well organized IMO. How about a UML diagram or something as a preface?
link is broken.
Total beginner here. Is the IDE the program that I input Python code into, that compiles and runs it? I use Anaconda Navigator (Spyder) on the Mac? For a physics student with some intro to Python and a months-long itch for mastering it (which I'm hoping to scratch soon), is this a good IDE? Sorry if it's beneath this thread/sub. It's difficult to even start to find my way around Spain when everyone's speaking Spanish.
The first bullet points has links to introductions of different concepts, like clean architecture, with visual representations. I've found those very helpful. Have you tried to read those?
Then go with an IDE. See my comment above for more of an explanation. I disagree with the advice that beginners should use text editors first. That's just asking for more headaches. 
Here are direct links so you can listen on this site I made backed by Django. Talk Python to me https://www.podparadise.com/Podcast/979020229 Podcast init https://www.podparadise.com/Podcast/981834425 Python Bytes https://www.podparadise.com/Podcast/1173690032 The Python Experience https://www.podparadise.com/Podcast/1165128787 Test &amp; Code https://www.podparadise.com/Podcast/1029487211 From Python Import Podcast https://www.podparadise.com/Podcast/525611633
I'll take this chance to recommend my favorite programming podcast [Programming Throwdown](http://www.programmingthrowdown.com). It's not Python specific, so probably not suitable for your list. But they have episodes on [Python](http://www.programmingthrowdown.com/2011/03/episode-002.html) as well as [Scientific Python](http://www.programmingthrowdown.com/2016/03/episode-52-scientific-python.html). 
This is great, thanks for posting! I've been meaning to listen to podcasts for a while now and I might try some of these out.
This is a great snippet because a lot of Python programmers actually fall victim to using mutable default arguments. If anyone is curious, this is covered more in-depth in [The Hitchhiker's Guide to Python](http://docs.python-guide.org/en/latest/writing/gotchas/). 
I don't think he is tired of it. It's just his voice. He reminds me of Gilfoyle from Silicon Valley.
If you encode the notes as integers from 0 to 11 you can use modular subtraction to get the distances. This mathematical structure is called a modular group, BTW. from __future__ import print_function, division, absolute_import num = {"A":0, "A#":1, "B":2, "C":3, "C#":4, "D":5, "D#":6, "E":7, "F":8, "F#":9, "G":10, "G#":11} name = {0:"A", 1:"A#", 2:"B", 3:"C", 4:"C#", 5:"D", 6:"D#", 7:"E", 8:"F", 9:"F#", 10:"G", 11:"G#"} def note_dist_by_name(lower_name, higher_name): return note_dist_by_num(num[lower_name], num[higher_name]) def note_dist_by_num(lower_num, higher_num): return (higher_num - lower_num) % 12 def min_dist_by_name(name1, name2): return min(note_dist_by_name(name1, name2), note_dist_by_name(name2, name1)) def print_info(note1, note2): print("The distance from {0} up to {1} is {2}".format( note1, note2, note_dist_by_name(note1, note2))) print("The distance from {0} down to {1} is {2}".format( note1, note2, note_dist_by_name(note2, note1))) print("The minimum distance from {0} to {1} is {2}".format( note1, note2, min_dist_by_name(note1, note2))) print() print_info("A#", "D") print_info("G", "C#") print_info("B", "G#") As an added bonus, here's the cycle of fifths. def print_cycle_of_fifths(start_num): current_note_num = start_num for i in range(12): print(name[current_note_num]) current_note_num = (current_note_num + 7) % 12 print_cycle_of_fifths(3) If you wanted to get fancy you could define a class for notes, storing the encoding and name with instances, and then define methods for it.
sorry, but I'm writing this blog to share my experiences and I'm learning python. so soon I'll write there about python.
&gt; It is very important to understand that the models in this layer are different from the usual models of framework like Django. These models are not connected with a storage system, so they cannot be directly saved or queried using methods of their classes. They may however contain helper methods that implement code related to the business rules. I disagree with much of this. I do agree that theses aren't Django or SQLAlchemy models. However, entities are distinct objects that have a lifetime outside of a request. They change over time: a room might be in a fault zone and after a particularly bad earth quake, it's location could change; prices fluctuate bad on demand and the economy; etc. As for querying, it depends on * what you mean by querying * if it's a top level entity You should absolutely be able to query for a specific entity or a collection of entities meeting criteria. That doesn't mean that you necessarily execute a database query. A query should take the form of "I need to know what rooms in this bounding box are free on the 23rd of November" and that would be translated into something the domain understands. Maybe it goes to the network, maybe it goes to disk, maybe it gives a canned response. But your query might end up looking like: rooms.filter(WithinBox(...), AvailableOn(date(2016, 11, 23))) What ever is done with that is up to the repository implementation. As for what I mean by a top level entity, there are entities that exist solely to serve this top level one. You shouldn't query for these directly or hold a reference to them. An example might be a rental agreement for one of these rooms, but it all depends on how you've modeled your domain. Divorcing your domain model and persistence model is important. The database should be beholden to your application, not the other way around. I think you're on the right track here though. But the part I disagree with most is &gt; They may however contain helper methods that implement code related to the business rules. Your entities should be the backbone of your model. You sound think in terms of "what does this entity do" not "what data does this entity contain" What does a room do in your model? You'd probably ask it questions like "Are you free on X date?" You'd ask it to produce a rental agreement for a period. class StorageRoom: def available_during(self, period): ... def book(self, period): ... def estimate(self, peeiod): ... You might have a separate domain model called RentedRoom that handles things like storage. But the methods publicly exposed in your entities are the use cases. What you have labeled "Use Cases" look more like command objects to me. Some object that's basically a serialized method call looking for its instance. I'm ho-hum on these. They're handy if you're going to do async processing, just dumo them off into a queue and let someone else handle them. But in the other, you could just invoke whatever public API the domain exposes directly. If you're gonna ask about cross cutting concerns, that's what things like domain and application services are for. Functionally, these are the same - take related objects and stitch their operations together into a cohesive whole - but it's more what semantically they represent. If something only talks in terms of rooms and agreements, it's a domain service. If it touches stuff like cookies and sessions, it's an application service (unless your domain involves cookies and sessions). 
I'm talking about specifically related to the Python language, not general comp sci or dev problems.
Just make your own API wrapper. It's pretty simple. My preferred way is to install the app for the API I want on my old android phone (rooted and installed my own security certificate on it for HTTPS traffic). Since just about every app uses API to communicate with the back end servers, I find this to be the easiest way (You can also do it on a PC, but I haven't tried it for my projects). I then run it through a MITM proxy on my computer. I use Fiddler, but Wireshark or any other MITM proxy will work. Then on the app, do whatever it is you want your project to do so you can see what the API does to request the info you want. Once you have the packets captured, it's just a matter of deciphering what it is that's going on. Like how to generate a valid API token, what info is sent in the header, and what kind of info is sent back, sort through JSON data for what you need if the reply has JSON, etc. Then just import requests into your project and replicate your findings programmatically. Some words of caution, if they change their API, chances are you're project will stop working. Also don't hammer their servers or they'll probably ban you. I've used this method for a couple of different projects (control my garage door opener, view weekly circulars) and it works fine. The back end servers think I'm just Joe Schmo surfing their app from my phone.
It looks like automatically generated documentation, which *can* be useful, but not when it only states what's in the signature. Any documentation intended to be used by someone not on the team writing the software should have useful examples of use. Including tests can be enormously useful for that - as long as they aren't too abstract. 
I don't normally read entire blog posts, but I very much appreciate the writing style in this one.
Most python implementations cache the first n (this case 256) integer values to improve performance, and the 'is' operator checks reference equality, not value equality like '==' 256 is 256 == True because they both refer to the same internal object, but 257 is beyond the cached range so a new ref is created for both ints, hence they aren't the same
Could you describe how, or link to an article that details how to best create isolated environments without installing all packages in every single one of them? I've been looking for a good workflow for a while.
Interesting, Thanks for the info
I'm writing a wrapper to integrate Rospy with pytest, so that I'm not stuck using python2 and a strange xml based unittest wrapper to test my code.
Well this code isn't using Selenium to login to gmail, it's using an API library to do the work. To login to a web page with Selenium try something like this: http://stackoverflow.com/questions/21186327/fill-username-and-password-using-selenium-in-python username = selenium.find_element_by_id("username") password = selenium.find_element_by_id("password") username.send_keys("YourUsername") password.send_keys("Pa55worD") selenium.find_element_by_name("submit").click()
This is by all means NOT part of the method of FiveThirtyEight since it's not part of any poll 538 uses. That's the whole point of the post...
Writing a RAT, also thinking of working on a web scraper
Hi, it is a simple query from yahoo: #!/usr/bin/env python # -*- coding: utf-8 -*- import urllib2, urllib, json baseurl = "https://query.yahooapis.com/v1/public/yql?" yql_query = "select * from weather.forecast where woeid in (select woeid from geo.places(1) where text='szentendre, hu') and u='c'" yql_url = baseurl + urllib.urlencode({'q':yql_query}) + "&amp;format=json" result = urllib2.urlopen(yql_url).read() data = json.loads(result) print data For json response look: https://developer.yahoo.com/weather/ --[sorry, but I don't use weather.com.
&gt;I learned Python through his LPTHW and he mentioned that beginners should not start off working in an IDE. I see his point as I think learning how to navigate inside a terminal (basic commands like cd, cp, rm, mv, mkdir, touch, etc.) You started with a problem and now you have 2. 
Ah, thanks. Didn't know that one yet.
Frame.__init__ return a class Frame. You need to use super(Yourclass, self).__init__ to apply properties of father class. When to put widgets in your new class you can reference the parent with self. Are you familiar with OOP? Do you understand? 
Thanks so much for clearing that up!
A lot of code is version neutral, so if you know Python 3 you know Python 2 minus few syntax features, some different imports and so on. Python 3 is the current, future and supported version while Python 2 will end in some time.
 thanks
Arrrr slash fucking learn python /r/learnpython !!!!!!
And multiple returns... most other languages require you pack that in an array first. Or you need to create a temp variable to do this. I even saw an interview question, how can you swap 2 variables in C++ without using a temp variable. The answer was use subtraction first.
&gt; Can someone tell me what went wrong? Your understanding of the entire process is what went wrong. HMAC specifically isn't resumable to avoid length extension attacks to which e.g. SHAs can be victim to. Since PBKDF2 applies *iteration* rounds of HMAC it specifically can't be resumable either, on purpose. And PBKDF2 does not just re-hmac the result of the previous hmac, it also XORs all of them together. &gt; However, the parameter "iterations" does not work as I expect it to. The wikipedia article on PBKDF2 explains how it behaves and what *iterations* means. &gt; As the following simple code shows, when i try to call the function twice with one iteration, I get a different answer then when I call it once with two iterations. Which is to be expected. &gt; Since hashing functions are deterministic, both methods should yield the same result No.
omg, this sentiment still around.
Almost every person who knows what they are talking about recommends Python 3. People are using Python 2 because they have some legacy code that was built with it, or because their field requires none of the Python 3 features.
No. There was no problem to start with.
ha, yeah. if only he would drop references to Satanism now as then... the format is good, and it's impressive that he gets someone different on the show every week. if it doesn't continue to pan out, he could start a Cake cover band.
Hey man, first of all, thank you for trying to answer my question. I didn't really get anything out of your answer though. I believe that this is due to the fact that I literally new nothing of programming 2 weeks ago, while you are an expert, for whom these topics are so ingrained, that you look at me in disbelief about how I could have a problem with this topic. So let me start here, about where my problem lies. &gt;The wikipedia article on PBKDF2 explains how it behaves and what iterations means. well I read the wikipedia article. It is either wrong or misleading, because it says the following quote on this topic: &gt;PBKDF2 applies a pseudorandom function, [...] , to the input password [...] and repeats the process many times to produce a derived key [..] From this I can only resume that if we call the hashing function f, the input x it produces f(x). if it produces it many times over (controlled via the iterations parameter) I can assume, by what the wikipedia article says, that it does f(f(....f(x)..)). So yes by that logic if I give that function f(x) as the parameter, it should give me the same as calling f(f(x)) directly. &gt;HMAC specifically isn't resumable to avoid length extension attacks to which e.g. SHAs can be victim to. This is the one point where I could see that there is some deeper layer to this problem that I haven't understood/seen yet that could resolve this issue. And it is exactly this type of info I would have wanted to get with this post.
I feel like by this point cpython should've just stopped caching these to remove the gotcha. Are the real world performance benefits really that notable, and if so, why?
Thanks for sharing that... there is a ton of info there. Do you guys have a recommendation to find a Python job by state? I will be looking for Python work next year, and it needs to be in a specific state.
Learn Python. 2 or 3 doesn't matter. (Altought 3 is regarded as the future of the language) Most of the times, differences between them aren't painful.
You don't have to name the function in a certain way, you can hange the matching rules in pytest config to choose yours. Also you can run tests functions from pytest as normal function, you'll get the standard behavior of assert, which is good enough for the shell. Of course, you won't have fixture support. But do your lib support fixtures ?
why not python1 ?
Why even use "code"? Linux/Mac: &gt; grep -E -i -w 'word1|word2' /location/of/file DOS/Windows - more work, but very easy: &gt; findstr /i /S /G:strings.txt x:\location\of\file.txt - where "strings.txt" is a newline separated files of strings to search for. If you really *need* Python to do it, and have small sets of data (less than a few megabytes per file/text), divide into lists and use [set.intersection()](https://docs.python.org/3/library/stdtypes.html#set.intersection). Size matters, as lists will require the data to be read into memory. Also, be sure to pass your variables by reference, and not by value, if you go with lists, otherwise you could end up with something severely bloated.
It's not a multiple return -- the function returns a single value. That value is a tuple of two elements (because it's the comma, not the parentheses, that make a tuple).
Yea point taken... I guess this is why the break of backwards compatibility was so controversial. 
Did you mean maybe "immutable"?
Netflix doesn't have a public API (it was shuttered two years ago, I believe) so you'll have to resort to screen scraping which is probably against their TOS (read it to be sure). 
I tried `pip install detectem`, after running `det` with a webpage, it gives a `FileNotFoundError: DOCKER_SOCKET not found`.
yay, the 13123098th one of these.
Take a look at the [deque](https://docs.python.org/3/library/collections.html#deque-objects). There's an article [Circular Buffers in Python](http://techand.coffee/2015/04/04/circular-buffers-in-python/) which might help.
salary should be segregated by job types not language. you see javascript salary, for what? nodejs or frontend? i bet salary scale is very different. java is what, java ee or android? for python, i know web developer salary is different from a data science ones. except mabye for ruby, ruby means rails. people get paid for the type of job they do (and their skill level) and not the language they use.
Possibly, could you PM me the details?
I haven't yet finished the article, but I interpreted &gt; They may however contain helper methods that implement code related to the business rules. to mean, in order to answer the question, "Are you free on X date?", you need to determine what constitutes a room being available during a particular period in time, for which the logic would be the business rules.
@kirbyfan Got it fixed. Current updates are in the develop branch. It now works with image files if either the source or the target to the command ends in .img
Python hasn't really got multiple returns. You're packing it in an array just like any other language. You just don't have to put parens around a tuple to make a tuple, and there's a bit of syntactic sugar for destructuring a tuple.
I did something similar, but using a YAML file in project root to define the commands using existing functions. http://github.com/rochacbruno/manage
I've never really gotten rostest to work properly, and I'm still stuck on Python 2. (Using Jade for now.) My tests are all in pytest though. Were you able to get Python 3 to work consistently?
Can you point me to the others?
The last three projects I've done at work have been python 3 only.
Why is `in` treated like this? What is a situation where this is useful/intuitive?
thank you! I'd explore more closely the number of monthly Python jobs advertised. Based on Gooroo.io data, I filtered the states by number of jobs per month, and this is how results look like: http://my.jetscreenshot.com/1321/20161116-ty5p-26kb Then I would compare these results with an average rent per state in order to find the happy medium. You can check such information here http://www.citylab.com/housing/2015/05/mapping-the-hourly-wage-needed-to-rent-a-2-bedroom-apartment-in-every-us-state/394142/ or here https://www.apartmentlist.com/rentonomics/national-rent-data/
No. There's a big difference in correcting for the bias (and failing), and to construct a different method or data collection. 
They are talking about their project.
 - We use indigo (because we first wrote things on Indigo ~2 years ago and I cba to update) - https://github.com/gtagency/buzzmobile/blob/master/install - That pretty much is the entire isntall process. Spin up a 14.10 VM, git clone, and install, and things should work (although we still hit issues with dependencies that aren't always there) See the 1 open pull request for the pytest/unittest integrations I'm working on. They make testing incredibly nice, although I've had to fight ROS tooth and nail to get to that point.
I'm proud of the way I set up my launch file generator from a YAML config file. I'll see if I'm allowed to share that part. (It needs Jade+ though, because xacro didn't have proper if statements until then.) I'm probably more of a novice than you in general, though. I really dislike the ROS toolkit documentation (rviz etc).
If you don't know of anything - would you be willing to collaborate on the mentioned rebuild of such a library?
I very quickly gave up and just read the source.
I can't be sure about what all projects were being referred to, but the [Click](http://click.pocoo.org) library is very quick to get up and running, though it doesn't auto-generate off of existing modules. But TBH, that seems almost superfluous in most situations. I've made a file about as long as your python file to use this tool, and created a CLI that I have more potential control over in the future. But, to each their own. And it never hurts to try building something, even if it's already been done before. Edit: Additionally, it auto-generates some rather nice help messages, something I find more useful than auto-generating the CLI itself :P
As opposed to say Gui or Graphical user interface which is clicking icons on your desktop 
 &gt;&gt;&gt; 1 &lt; 2 &lt; 3 True The problem is that `in` has the same precedence of the other comparison operators (see linked page), so this leads to this unintuitive expression.
Jesus you really like blank lines do you?
Ah okay, I think I understood you now. But in that case I think that this has more to do with Python's default shallow copying than with scoping: If x's `__copy__()` implements a deep copy then each invocation of `f()` would print `[1]` even if x is mutable. So I believe that my point about re-scoping being fundamentally different than importing into the scope still stands, regardless of mutability.
This method would primarily be used to estimate the Trump/Brexit vote. And if really needed it's possible to generalize for more answers.
hmm, didn't you run your own code through your own code... so we have a CLI to generate CLI from code? 
why not set yourself a project where you webscrape the job listings in your area to look at the demand for python developers
But `x` is never copied. What is really happening is this: &gt;&gt;&gt; x = 1 &gt;&gt;&gt; print "id(global)", id(x) &gt;&gt;&gt; def f(x=x): ... print "id(local)", id(x) ... # x in local scope and x in global scope point to the same object ... x += 1 ... # a new object: 2 (int) was created and assigned to local scope with name x ... print x ... &gt;&gt;&gt; f() id(global) 16023896 id(local) 16023896 2 &gt;&gt;&gt; x # x in global scope was never touched 1 This gives you the power of passing around objects via their location (or thing 'reference') while still making sure you don't accidentally change the world for everybody. Well, with mutable object you have to take extra care. But thats Python for you. :) 
I wrote an exporter for the unit definitions for my favorite video game. I though it would take three or four days of work, but it took a couple of weeks instead. Hopefully people will use it fruitfully. I'd hate to have put all of that work into it and not have it come to anything.
Try this one Fluent Python http://shop.oreilly.com/product/0636920032519.do
You might have a difficult time finding part time programming jobs. I'd love to find one, but I've never seen one. That said, I like the idea @lieutenant_lowercase shared in regards to writing a scraper to find such a posting. If you're a student, you can probably be an exception to my generalization by finding an internship. Some internships might not even require you to be a student, though they could be difficult to land without some college work. Don't worry about people disliking Django. The web is full of strong opinions, and there are also a ton of people that adore Django. You'll tend to find far more jobs with Python than Ruby anyway since RoR is really only good for web. Python is highly prized in a number of other areas as well as web. If you want to start with something easier than Django, you could try something simple like Flask. Finally, a lot of jobs where you'll write Python will be primarily a job in another language. I work a C# job on paper, but we have some Python apps written with Flask and SQL Alchemy. We've never posted a Python position officially, but there are usually at least one to two developers writing Python each week. Your city is large enough to find "pure" Python jobs (as far as any job is only one language at least, which is usually never totally the case) and that's a great language to build a career upon, but feel free to find multiple languages to love.
Continuing work on Twitter bot. Finished the portion that reads tweets and edits them. Now I need to look into the reply/retweet function and getting it all on a loop.
Isn't that what he's doing?
Sounds more like he/she wants you to do it for him/her and report back.
I don't think telling your experiences/opinion can be considered "doing something for someone".
&gt; python sytax is really a sytax that only describes Love. Wow, that's a new one. &gt; give me some suggestions that tells me what are the demand in python and what are the requirement for it? Your best bet would be looking at job ads. You will see the most up to date (this week) info, and exact requirements listed. &gt; Or can i just get a simple python job that use dic ,list ,object ,join meth ,and etc? (Come on i just want to get job ,even the earning is simlar to Walmart job:D) I doubt it. You might be able to get little gigs here and there on Upwork or similar sites, or if you know someone who trusts/likes you and is willing to pay you to write some small programs for them. But it's a long shot. 
Right now I'm working on a project where I would like to allow simultaneous input as well as output a background task, would this allow me to implement this functionality? 
Don't think of Pythons variables as containers but rather tags which are attached to objects residing somewhere in memory. Like a pointer perhaps. So assignment or reassignment never touched the object, just the "pointer" to it. This also explains how multiple variables can point to the same object.
Use a loop to go through the letters in the string and then use the time lib to do the waiting for you. Not going to provide more help than that. You got this on your own. If someone else does everything for you then you won't learn a thing and you might as well just do it in Batch instead.
What's going on in your life? You seem to be trying to project something.
That you'll have to ask the language developers. My guess would be either oversight and they had to keep it for compatibility reasons or they didn't see it as a problem.
Yes, through docker machine; "docker images" shows my images. v.11.2
Well, the process of converting xlsx to xlsb in excel is the same for converting csv to xlsb with excel --so this option would just be adding an unnecessary step. But I appreciate the offer.
Okay, I could give this a shot. So essentially I would replace 'file1.csv', etc. with the names of the files I want to export, save the program in the folder with the files, and then run it? Or will this, the way it is, cycle through all the files in the folder? I just figured I could use this task as an opportunity to learn, but if you more experiences folks think I'm biting off more than I can chew right now let me know.
Programming Python. Even if you don't read it, it will impress others, and doubles as a murder weapon (it is just that large). Seriously though, generally have it on my desk as a brief refresher when I haven't used a concept in a while.
Well, I suppose you could also just leave all the program options inside a file and not have an interface. Then just run it on the command line. No gui or cli there I guess?
An even better solution is a CI / CD pipeline, which can execute everything from linting and complexity analysis to building and testing before pushing to a remote repository. Its a powerful tool that allows projects and organizations to scale up to tens or hundreds of developers.
I will be honest, other than full time developer jobs, most of the industry is based around freelancing. So you are better off building a portfolio with your own project (like a website, github tools, etc), and expand your job search to contacting smaller companies with propositions. Both will want portfolios. In my experience, knowledge of specific libraries is a benefit (not a requirement), but you have to sell yourself. This means if you can demonstrate that even if you don't know the library, you can learn it.
Np, I wouldn't have posted it here if I didn't want peoples opinions. I might not have been clear on that this is mostly a technical exercise for me, and a call to action - let's start to concretely think about approaches to this problem. So this is good. The wierd-voter-groups-turning-out-to-vote-bias I do not have any technical solution for though yet. 
 import cligenerator cligen = cligenerator.CLIGenerator(cligenerator.CLIGenerator) with open('cligenerator.py', 'w') as f: f.write(cligen.generate()) Result: AttributeError: type object 'CLIGenerator' has no attribute '__code__' edit: maybe better: import cligenerator cligen = cligenerator.CLIGenerator(lambda f, *args, **kwargs: f(*args, **kwargs)) cligen_wrap = cligenerator.CLIGenerator(cligen.generate) with open('cligenerator.py', 'w') as f: f.write(cligen_wrap.generate()) [Result](https://gist.github.com/MareinK/807cd401f1cdc9b37b7298ce609f650f). Running it gives: File "cligenerator.py", line 5 def generate(self): ^ IndentationError: unexpected indent Fun to play around with :)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
1. You should try to avoid using pip, especially the way you are using it (with sudo) because chances are that it might override files installed by system packages, and that only leads to further problems (it's possible that could cause issues) 2. If you want to use pip, you should use python3-pip package (I don't know exact name on Fedora) 3. When using pip, it's recommended to either install things with --user option (it install in home directory so no sudo needed), or create a virtualenv first (with python3.4+ you can just type `pyvenv my_env; source my_env/bin/activate` and then call pip. This way pip won't try overwrite system packages and also won't require root (no need to uses sudo) 4. If you use virtualenv pip should be installed, but if it's not after sourcing `activate` script, you can type `python -m ensurepip`. Again, run it only in virtualenv or you could mess up your system by overwriting system files.
I found this surprising when I first came across it, though it's hard to imagine what else it could do: &gt;&gt;&gt; def f(): ... try: ... return 1 ... finally: ... return 2 ... &gt;&gt;&gt; f() 2 Floating-point arithmetic has lots of surprises before you get used to it, but then it's hardly unique to python. Here's one: &gt;&gt;&gt; 0.1 + 0.2 == 0.3 False You can make an object that is its own type, and it apparently causes a memory leak in CPython (it's explained in the "leakers" directory in the source code - there is also a "crashers" directory with some obscure bugs that cause interpreter crashes but are too awkward to fix): &gt;&gt;&gt; class A(type): ... pass ... &gt;&gt;&gt; class B(A, metaclass=A): ... pass ... &gt;&gt;&gt; B.__class__ = B &gt;&gt;&gt; B is type(B) True Playing around with `globals`: &gt;&gt;&gt; globals()['a'] = 5 &gt;&gt;&gt; a 5
`detectem.settings.DOCKER_SOCKET` is the variable pointing to `/var/run/docker.sock` which is the default [docker socket](https://docs.docker.com/engine/admin/). To change the value, currently you have to edit `detectem.settings` but if you notify it at [the issues page](https://github.com/spectresearch/detectem/issues) and I can reproduce it, I could add an option to set the docker socket location through `det`command line. 
Ah man. I thought you'd be fine with having a woman actally wanting you. I'll be sure to tell her to stop doing such things. Thanks mate.
Paid by the line.
https://doc.scrapy.org/en/1.2/topics/request-response.html?highlight=login#topics-request-response-ref-request-userlogin
IronClad was great when it was supported. I hope with the renewed work on IronPython they will update this great tool so people can start using it again.
I'd suppose it has to do with OSX (specifically docker-machine). On Linux I get the complaint that I don't have the scrapinghub image. It's downloading, but I suppose it'll work then.
worth buying for me, but I can't say I've read them =)
Post the code. You just describing the code to me is no help at all.
it is certainly possible to make a living with django projects. look for usergroups/meetups in your area to find contacts. also: what's wrong with your commas? :)
Working on automatic admin site generation (like django) for asyncio/aiohttp, checkout https://github.com/aio-libs/aiohttp_admin
Nice work. I love these sorts of things. I maintain a highly opinionated package that does something similar, https://github.com/mayfield/shellish. See the decorator example (@autocommand), https://github.com/mayfield/shellish/blob/master/examples/decorator.py 
Yep, we use gitlab ci and merge requests cannot be merged until the build passes. The build won't pass unless both flake8 and unit tests pass. 
Argh does this. 
`videoCapture.read()` returns a tuple as result. Assigning in that way simply unwraps the values in the tuple into their own variable. Like in this example t = (1, 2) a, b = t #a = 1, b = 2 
Do your own homework you lazy failure
No. Use cryptography.fernet. Don't make your own crypto.
If you've noticed, I do it after blocks: if a: something() else: something_else()
No. Just No. You used the random library for crypto. Don't. LOL.
Not to be mean or anything, but uhh... your code looks bad. Like really, really bad. I would not approve of any pull request that looked like this. The blank lines, the tabs.. *shiver*. Look over the [PEP8](https://www.python.org/dev/peps/pep-0008/) and format your code accordingly. For future note, you should try to format all your code according to the PEP8 before making it public.
Just decode binary as ASCII ( b"[STRING]".decode( 'ascii') ).
I know about crypto... Don't roll your own. I don't like cryptography.io because it's just weird. PyCryptodome is pretty cool. Cryptography.io works, PyOpenSSL is available depending on what you're doing. Don't use Python's random library for anything crypto, unless you have a specific need for it and, in those cases, you still may not need it. Instead, use `/dev/urandom` (`os.urandom` or whatever crypto library you're using) for generating random bytes securely. Any questions? EDIT: I should preface that I am not *not* recommending cryptography.io to you. Use what you're comfortable with, I prefer lower level primitives.
A little suggestion. When you make a project public you should hookup travis or some other CI system and have it do the following for every commit and PR: - Run pylint/pep8 tools and treat warnings as errors - Run unittests - Build the documentation if you're using something like Sphinx. That makes it easy to keep the style consistent and it also eliminates a bunch of potential issues before you even review the code.
I am reading this now as someone whos has programmed in python for over 8 years. I wish I had this 5 years ago. This book teaches you about real power of python and pythonic ways.
The largest public company database of environmental, social governance ratings: https://esg.censible.co/companies If anyone is interested in finance, company ethics and corporate social responsibility it'd be great to hear feedback and desired enhancements.
Secrets! (https://docs.python.org/dev/library/secrets.html) Literally abstracts all of the thinking away for you and says "If python was installed properly, these functions give you cryptographically secure numbers"
So I may be misunderstanding you, but it sounds like you're trying to auth in the app, then tell your flask API about that. That's inherently problematic for a few reasons: 1. The client id and secret are in your app, these are easy to find. Now I can pretend to be your app 2. You need some crazy logic in your API for your app to be considered valid. Again, I can pretty much see whatever your app is doing 3. You want to add another provider (twitter or the new hotness, you are bound by the speed of the app approval process) Instead you may want to consider having your app open a web view to your flask app. That handles the flow with whatever provider (google, facebook, the next hot thing, etc). Then your app generates your own token to be used with your mobile app. This has a few benefits: 1. regardless of oauth2 provider, they app speaks your backends speak (you define the tokens and what you need in them) 2. I cannot easily see anything personal about your implementation - e.g. Only the server has the client secret. If it somehow leaked; you update it in one spot - not needing to go through the App Store approval process in order to get it updated. Anyway, like I said I may be misunderstanding your flow. That's just how I read and understood it. Apologies if I got it wrong :)
I noticed your flair. Do you work in NLP?
We, decent people, make sure that educational material is available to everyone regardless of their wealth.
How would I resubmit it to /r/LearnPython ?
Obviously the UK manages to stay inside the single market you have absolutely no reason to put in the same access by having one deal with other countries, it's expected to be rewritten nd because they were elected to represent what they think is best for the first time then you have established might be a wholescale review because of future referencing. ----------------------------------------------------------------------------------------- [*^^[Feedback]*](https://www.reddit.com/message/compose/?to=Simulate_Me_Bot) [*^^[Get ^^a ^^bot]*](https://www.reddit.com/message/compose/?to=iNeverQuiteWas) [*^^[Info]*](https://www.reddit.com/r/FreeKarma4You/comments/5b0r6r/i_am_a_bot_that_will_simulate_you/)
The white spacing is excessive. 
Needed a way to dynamically set the full license text at the top of each source file, without knowing what license was chosen until render time. The pattern looks like this, #!/usr/bin/env python # -*- coding: utf-8 -*- # &gt;&gt; |LICENSE,comment| # # &lt;&lt; class {{ cookiecutter.module | capitalize }}Error(Exception): """ Base Exception class for the {{ cookiecutter.project_name }} application. """ And the rendered contents look like this, #!/usr/bin/env python # -*- coding: utf-8 -*- # &gt;&gt; # # cli-application # A basic command line application written in Python. # # Copyright (C) 2016 Vivint, inc. # # MIT License # .. # .. # # &lt;&lt; class CliappError(Exception): """ Base Exception class for the cli-application application. """ Or, since it can multipass...I used it to generate the `--help` from running my new app, and putting it dynamically into the `README.md` file. Before, ## Getting Started ```bash $ mkdir {{ cookiecutter.project_name }} $ cd {{ cookiecutter.project_name }} $ virtualenv venv $ source venv/bin/activate $ pip install {{ cookiecutter.module }} $ {{ cookiecutter.command }} ``` ## Usage ```bash |cli.output,code| ``` *CookieCutter generation step..* `ctx.run('python -m {}.app --help &gt;&gt; cli.output'.format(item), echo=True)` *Second injection pass* After, ## Getting Started ```bash $ mkdir cli-application $ cd cli-application $ virtualenv venv $ source venv/bin/activate $ pip install cliapp $ cliapp ``` ## Usage ```bash Usage: app.py [OPTIONS] cli-application A basic command line application written in Python. Options: -c, --config PATH Path to the configuration file (JSON) --help Show this message and exit. ``` 
&gt; We, decent people, make sure that educational material is available to everyone regardless of their wealth. Written like a true scumbag with a Robinhood complex.
There is a file in a hidden directory you need to edit to run python code in VSCode .vscode tasks.json { // See https://go.microsoft.com/fwlink/?LinkId=733558 // for the documentation about the tasks.json format "version": "0.1.0", "command": "python", "args": ["${file}"], "showOutput": "always" }
10-15 is usually not a moderately high number of parameters for bayesian inference. Why are you avoiding gradients? If that doesn't exclude autodiff look into pystan - hmc may help with sampling problematic posteriors (given your degeneracy/correlation issues). 
Why not both? But it really depends on what you want to do. I would recommend python, because you can do so much with it. Like run a web framework with Django or Flask! Or build games with pygame! Really you can do a lot with both, but javascript in my experience is better for making dynamic webpages, and python is better for behind the scenes tasks. Was there* a particular type of task you were looking to do? *fixed spelling
I see the post but does anybody use ReactOS as a daily driver? My first thought is for my Toshiba p233 laptop. Does anybody develop on this on this sub?
Thank you for including both Talk Python To Me and Python Bytes in your list Dan.
Can you share the code? 
Define few. And then I'll take that bet. A thousand dollars?
I agree that doing these checks in a CI is definitely the way to go. However, as /u/rwillmer said, a pre-commit hook for simple checks like flake8 has the advantage that the bad code never makes it into your repository, and your history doesn't get cluttered with commit messages like "PEP8 fix" and "removed unused import".
&gt; - espneopixel.c: solve glitching LED issues with cpu at 80MHz Been waiting for this :)
https://www.reactos.org/wiki/Tests_for_0.4.3 - list of officialy tested apps Both Pythons are listed. 
Thank you Mike! Love the shows, keep up the good work :)
I couldn't agree more! After scraping several sites I ALWAYS use lxml, especially since it's fast too. Much faster than my bs4 scripts have ever been near. Google chrome has "copy xpath" if you inspect an element too, so that makes the xpath selection really fast. (don't even need the xpath plugins anymore :) )
Thanks, I didn't know that! Is it also possible to just check the diff like `git diff --cached -U0 | flake8 --diff` would? I had a glance a the source and it seems that is not an option right now.
Can you clarify where multiple inheritance is supposed to be involved in your example? Apart from that: * There's nothing wrong with having a separate class for each API object. Actually, this is the right thing to do. * I suggest that you refine your design a little bit: * Create these classes: Api, User, Repository. * Allow the creation of those instances like: import Api reddit = Api(...) user = reddit.get_user(...) repository = reddit.get_repository(...) ... In my opinion, exposing too much of the internals of a class (and specifically, designing it in a way that you must access its members' members) is a bad idea.
Seriously, I'm sure that creating your own cryptography module is a very good learning experiment. You should continue on this route, and continue to experiment and learn about cryptography along the way. Cryptography is a complex topic, as others have pointed out. And you should not assume that you know everything about it, or that you have thought about every possible corner case or exploit. For production code, my opinion is that you should stick to well-known libraries (that is, unless you're a cryptography expert). Reason: those libraries have been battle-tested, and involve many years of development and wisdom.
https://github.com/chrisantonellis/pymongo_basemodel I'm the author, this is still in heavy active development. it fully supports deep setting and getting of deep nested values via dot notation syntax
As a mid-level python developer, I find that ironic. 
Writing a report that gets the current and average heap utilization of my Elasticsearch cluster and e-mailing it to a distribution list.
Working on a small project with scikit learn to predict their identities of 9 subjects and their corresponding 14 actions. Also building an eCommerce site with django.
You should use os.urandom (or random.SystemRandom) instead of directly using /dev/urandom
https://github.com/chrisantonellis/pymongo_basemodel I'm the author and I'm looking for help with documentation! This first the list of requirements above *except* for JSONSchema
Learning python as a software engineer with 30+ years experience. My polyglot portfolio currently contains Java, PL/SQL, XSLT, Javascript, and bash. I've used (and mostly forgotten) Fortran, C, C++, Pascal, and Rexx. I'm working with a new COTS solution that has a C# and python API.
Fleshing out my twitter bot. At the moment, it sends me and my girlfriend two tweets a day. The first one is a word, and the second is the definition of that word. I also have configured the program to text me the word and definition also. For the future, I would like to create a little webapp with a simple interface that will allow me to just type in a word and save it to a database (or something different that I don't know anything about) and the program will find it's definition. Then maybe I can take it further and make it to allow different users to sign up and to make their own list of words that they don't know the meaning of. If anybody has suggestions on what I should learn to implement this, that would be appreciated! This was the first real world problem/project that I have done that isn't just a little "find all of the prime numbers up to x", so I'm quite proud of it, it isn't flash and the code could definitely be cleaner but for right now, it helps me to commit words that I didn't previously know, to memory. 
Look into the `json` module in the standard library. Also, post questions in /r/learnpython.
PyCharm Community. VS Code is not a full-fledged IDE, it's an enhanced text editor, like Notepad ++ or Sublime Text. The debugging tools in PyCharm are top-notch. Git/VCS integration is seamless and intuitive, the plugins are handy, and the code completion is great.
Well, yes, that's what I mean. I probably should've specified that.
I went through pickle, jsonpickle, and also the json lib. Read through stackoverflow and maximum i got was object.__dict__ method.
/r/learnpython
&gt;10-15 is usually not a moderately high number of parameters for bayesian inference. In my world that's quite a few fitting params but it's good to hear that it wouldn't be considered a lot! &gt;Why are you avoiding gradients? I'm mostly avoiding gradients bc my model is pretty complex. It already takes ~minute per point in parameter space to just calculate the model part of the likelihood though that should improve w/ parallelizing and maybe more C wrapping. Considering putting together a lookup table but it's hard to get the grid in parameter space fine enough to be useful. &gt;If that doesn't exclude autodiff look into pystan - hmc may help with sampling problematic posteriors (given your degeneracy/correlation issues). will check out pystan, thanks!
It's not pretty but something like this will do the job def json_object_hook(d): return namedtuple('X', d.keys())(*d.values()) def json2obj(data): return json.loads(data, object_hook=json_object_hook) data = '{"name": "whatever","phone_number": {"home": "aaaa1","mobile": "aaaa2"}}' obj = json2obj(data) print(obj.phone_number.mobile) A more appropriate approach would be to create a class and somehow parse the json and set the attributes. Similar to this... class Whatever(object): def __init__(self, dictionary): for key in dictionary: setattr(self, key, str(dictionary[key]))
well the thing is that someone should follow the "most" structured way possible. Having this in mind, you validate your json somehow, lets say you use voluptuous, and you map the attributes one by one. Ideally...the object is designed to get very specific attributes and this is what you try to search in the json. So a specific defined object and a search on keys on the dictionary is better instead of blindly making the json an object 
Mostly Sublime, sometimes Emacs
if your goal is to create bots, python would be a good choice. 
Downloading it now. This is the first I've heard of it. It's probably a bit OCD, but for most of my code, I run it through multiple versions of Python in virtualenvs for testing (2.7, 3.5, pypy), even though I deploy internally to a single version most of the time. If nothing else, I have another interpreter in my testing arsenal now. 
One thing that may be slowing down your recursive solution is the manipulation of a representation of the towers and the disks on them (Spielbrett). This doesn't appear to be part of the requirements you stated: &gt; build a program that solves the towers of Hanoi problem for a tower of size n, then displays the number of moves it took, and the moves taken You don't need to 'simulate' the disks to get a solution. The simple "towers" recursive solution does everything you need. Not manipulating the simulation should save some time. In addition, you don't need to keep a count of moves as you must save enough information to print the moves later, so just count the number of saved moves. So a simplified recursive function would be something like: def hanoi(src, dst, tmp, n): global Moves if n &gt; 1: hanoi(src, tmp, dst, n-1) hanoi(src, dst, tmp, 1) hanoi(tmp, dst, src, n-1) else: Moves.append((src, dst)) # just append the from/to numbers n = 4 # or some value from the command line Moves = [] hanoi(1, 2, 3, n) This is not very different from *your* Hanoi() function except there is no move counter and we just append move tuples to a global list. Complete code is [in PasteBin](http://pastebin.com/vTKtzpXw). Running that code with 10 disks gets: For 10 disks there were 1023 moves taking 0.000599s (1709156 moves per second) Moves: 1 to 3 1 to 2 3 to 2 1 to 3 ...etc which is about as fast as your recursive function when you commented out saving the results. Larger N takes longer, of course, but that's expected: For 25 disks there were 33554431 moves taking 23.911611s (1403269 moves per second) 
Data science, data analysis for example, also some other stuff in that fields.
I'm not sure the quote: &gt; the relevant Python developers do not believe in recursion as an important problem solving strategy is correct. I *am* sure that the core developers want function calls to be as fast and as efficient as possible, but since Python is highly dynamic, a function call in Python just **isn't** going to be as fast as a function call in Lisp, C, C++ or even Java. /u/tdammers is correct in stating that Python doesn't have TCO, explicit recursion constructs or lazy evaluation, but that is simply because the core developers want Python, not Lisp, Clojure or Haskell. Maybe the BDFL has a thing against functional programming as some say, but it's his language and it's quite successful! I think that the core developers *do* believe that recursion as an important problem solving strategy, but they aren't going to ruin Python by charging off and forgetting the language aims (stated in [0]): * an easy and intuitive language just as powerful as major competitors * open source, so anyone can contribute to its development * code that is as understandable as plain English * suitability for everyday tasks, allowing for short development times [0] https://en.wikipedia.org/wiki/Guido_van_Rossum
Pyglet is not dead, it's development community is small and right now they are mostly bug fixing. It's still a great platform though I do recommend using cocos2d with it
What do people think about panda3d? http://www.panda3d.org/
Godot engine is a free, open-source, unity like game engine that uses a Python dialect as it's main programming language. It's the most advanced game engine for python. 
Adding TCO would not impact the stated goals in the slightest; it would be completely transparent for existing code, AND it would make the languages easier to use for problems of naturally recursive nature. Honestly, the only downside I can see is that someone would have to actually build it.
Rest in Peace, Rob!
&gt; avoids having tons of "Fix flake8 compliance" in the repo The way our CI is configured, a patch won't make it into the repo until it passes linting (and everything else). We've dockerized most of our CI process so developers can build and test locally, if they want to short-circuit the "feedback cycle". That being said, our CI system is faster since it runs in parallel across many cloud instances.
Can you share the code for the first bit ? I've been thinking of doing a similar concept with a study buddy
IMHO the best is https://www.datacamp.com
You can look into the different functions of `pythondialog`. I know they have a tree view window option, and different types of menus. I mainly work with regular menus, input boxes, and yes/no boxes of that library, though. I haven't tried a tree view.
Data engineer might be another one to search for. Generally requires more knowledge of programming and less background in math/stats. But like all job titles it varies. 
1. Please post questions in /r/learnpython 2. The question you're asking is not how to "save" a file, it's how to download a file from a link. You can use [urllib.request.urlretrieve](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve) for that.
I must say, if there is one thing that's certain about intel, it's that their software is always amazingly fast.
It doesn't bode too well when the community is downvoting you like hell on the very site you wrote your article on.
It's just that I've seen such a fuckload of "awesome hackathons" where you get to do "cool stuff with open data", and what it's really about is attracting a bunch of free labor to half-ass a bunch of lousy projects that none of the in-house devs would want to touch, that would be too expensive to outsource to domestic contractors, and outsourcing to India, well, we tried that but it didn't work. Do I sound disillusioned? I guess, yeah. I'm sorry I'll shut up now. Have fun!
http://www.dabeaz.com/, Haven't took his course, but I attended a conference where he spoke at. https://www.youtube.com/watch?v=j6VSAsKAj98. I also had custom training taught by Continuum with my company, https://www.continuum.io/training and it was good.
It's similar for me, just replace def with func, and you have to declare variables with var. In the rest is more or less like python. http://docs.godotengine.org/en/stable/reference/gdscript_more_efficiently.html#doc-gdscript-more-efficiently
I've been using VS Code quite a bit lately and I really can't complain. The auto filename complete is super handy and I'm totally obsessed with the SETI Modified color theme for it (I made a custom theme in PyCharm to try and copy it, but it's not even close). I'm also quite fond of it for small(ish), one-off, type projects. But for bigger projects, I always end up in PyCharm at some point or another, for something. Being a full on IDE it has some features that VS Code just doesn't have (yet). Like being able to set custom interpreter parameters for running scripts or automatically adding docstrings with the click of a button. VS Code doesn't have a plug yet to do this (I haven't found one anyways) but MAN I wish it did. Like the poor fellow who forgot his password said in the comment above; Pycharm started out as just Python support for IntelliJ. So who knows? Maybe in time VS Code will become a full blown IDE as well. In the end, use what makes you comfortable. And don't be afraid to mix it up a bit either. So till next time. Keep fit and have fun.
JYI- It's just that I've seen such a fuckload of "awesome hackathons"- it is not a hackathon, it is a competitive challenge where everyone competes against each other as a sport. Yeah that happens many a times. These would be a good read for you I guess. http://blog.hackerearth.com/2015/08/hackathon-misconstrued.html http://www.theatlantic.com/technology/archive/2015/07/the-secret-lives-of-hackathon-junkies/397895/
Implementing websockets using django channels
I assumed as much. That is why my response was to the person stating the combination is usually a similar price. I wasn't stating "OMGZ GO OUT AND TORRENT EVERYTHING!1!!!1". Rather, the original question stated "Any O'Reilly Python books that are worth buying the physical copy?", which led me to believe you likely already had digital copies. This end, his response did not make sense to me. It's okay that my statement wasn't taken as intended, because I wasn't completely clear in my statement. Meh. Just negative fictional Internet points. That's what I get for posting without writing paragraphs. I am confused as to how I am an indecent person though...
Pro is okay but make sure you look at the features to see if you really need them. I let my sub lapse this year as I wasn't really using enough to justify it and I switch between multiple languages, some of which PyCharm doesn't support.
It hasn't changed much since then. Still too clunky for non-trivial games.
[Sixty North](http://sixty-north.com/training.html) offers some good Python training. 
&gt; Pygame isn't only not pythonic, it's also completely dead. The website is unmaintained. Visiting the documentation pages is as likely to deliver an attempted exploit of a browser vulnerability than the info you're looking for. I just visited it (http://www.pygame.org/) out of curiosity and it seems alive and well, there seems to be many updates from 2016, and most recent post is from 3 days ago.
I'm working on porting Python for Godot (see https://github.com/touilleMan/godot-python) It's really early so far, but I have hope your statement will become reality soon enough ;-)
Hate to be this guy but, I'm from a country without Paypal, O'Reilly nor Amazon, sometimes I can't help but be a book pirate... :/ Some books had such a big impression on me that I'm planning to buy them on paper just to support their authors. Fluent Python is one of them, actually I follow its author on Twitter and always praise him in Tech circles. 
That's fantastic! I Starred your repo ;)
Pysdl is pretty nice but I wouldn't consider it pythonic.
for people that are used to more traditional coding styles like C C++ Java etc...
Maybe it's gonna be useful if you do it properly. I hate python tabs... Extension or a complete new IDE?
Right now it is just a dinky text editor but I am looking at making a sublime extension in the near future.
Devops. I use python, ruby, Java, groovy, SQL all the time for automation and validation.
I'm pretty much just dealing with SQL, Python, and Powershell, but that's a good point. We use Git. Thanks!
Then do whatever you want, I guess.
Thanks for all the examples! Fun stuff!
Does the homepage look broken and terrible to anyone else or did my browser load it wrong?
Specifically, the page has &gt; Python: cv2.VideoCapture.read([image]) → retval, image where the right arrow of course means the return values. It's very easy to skim docs and miss the key information. I know I've done it often enough.
Don't make games in python. It's the wrong tool for the job. :(
Is it shipped in Anaconda by default?
Death to brackets.
I think default anaconda is missing pyDAAL only: https://docs.continuum.io/anaconda/pkg-docs, but you can conda install it: https://anaconda.org/intel/pydaal
Python as a language isn't really constrained by anything at all - it's a purely theoretical thing. If you want implementation details of CPython, start [here](https://docs.python.org/3/faq/design.html) and [here](http://effbot.org/pyfaq/where-do-i-start-if-i-want-to-learn-about-the-cpython-implementation.htm), and be ready to read a lot of code.
Because there are way more types of games than just AAA FPS and the like that you would need C++ for.
Nice. I am not sure, what I want to do exactly. Just playing around a bit, but the way you did it tempts me to do more with music in python.
The big deal is the distribution story. There's a reason pygame, pyglet, and pandas3d are dead, but django, twisted, and supervisor are going strong after all this time. If you let the developers control the environment they run in, everything's brilliant. Ask one of them to make something that runs, say, "on windows", they're rooted.
When I try to install SciPy I get this: pip install scipy Collecting scipy Using cached scipy-0.18.1-cp27-cp27mu-manylinux1_x86_64.whl Installing collected packages: scipy Exception: Traceback (most recent call last): File "/usr/local/lib/python2.7/dist-packages/pip/basecommand.py", line 215, in main status = self.run(options, args) File "/usr/local/lib/python2.7/dist-packages/pip/commands/install.py", line 342, in run prefix=options.prefix_path, File "/usr/local/lib/python2.7/dist-packages/pip/req/req_set.py", line 784, in install **kwargs File "/usr/local/lib/python2.7/dist-packages/pip/req/req_install.py", line 851, in install self.move_wheel_files(self.source_dir, root=root, prefix=prefix) File "/usr/local/lib/python2.7/dist-packages/pip/req/req_install.py", line 1064, in move_wheel_files isolated=self.isolated, File "/usr/local/lib/python2.7/dist-packages/pip/wheel.py", line 345, in move_wheel_files clobber(source, lib_dir, True) File "/usr/local/lib/python2.7/dist-packages/pip/wheel.py", line 316, in clobber ensure_dir(destdir) File "/usr/local/lib/python2.7/dist-packages/pip/utils/__init__.py", line 83, in ensure_dir os.makedirs(path) File "/usr/lib/python2.7/os.py", line 157, in makedirs mkdir(name, mode) OSError: [Errno 13] Permission denied: '/usr/local/lib/python2.7/dist-packages/scipy-0.18.1.dist-info'
Southern California (Long Beach area). Sounds great for opportunities, but most of the jobs are in Culver City or Santa Monica. I've done that commute before, and I have no intention of doing it again. On an average day that's a good hour long commute through rush hour traffic each way. I want a better quality of life than wakeup-&gt;commute-&gt;work-&gt;commute-&gt;sleep, so I need my daily commute to be around half hour each way, unless I could work remotely 2-3 days a week. I am hoping to snag something in Long Beach itself, but failing that Lakewood, Carson, El Segundo, etc... 
&gt; I gave up on Windows And there you go, game dev on Python is dead.
my pleasure. the other suggestion with django and postgresql is a little too much for you in my opinion. both django and postgresql have a lot of features you don't need. flask is like an extremely lightweight django and dynamodb / nosql databases are quicker to started with than postgresql / relational databases, especially if you haven't already done much SQL. you will need to define a schema for a relational database (tables, columns, foreign keys, etc) and with nosql you can basically just dump your stuff into it as python dictionaries. definitely not good practice once you have a clear idea of what you need to store and how it will be accessed but less setup to just store stuff edit: also learning about amazon web services, e.g. ec2 and dynamodb, can really really level you up down the line if and when you work on larger projects
Has anybody heard of the Python Arcade Library? Seems to be small but promising: http://pythonhosted.org/arcade/ 
I'm actually building a wrapper on top of PySDL2, so yeah, this is my answer.
Why you would ever need this, just check the answer and then print whatever you want
VS Code is not a java app.
Python-GLPK, PyGLPK and PyMathProg all integrate with GLPK. You can sort out the graphs and tables on your own from the output. 
Wouldn't it have been easier to just, I don't know, work with the language as is? All you're doing here is guaranteeing that you are going to trip over your own two feet every time you sit down to code in a different text editor? You're solving a problem that doesn't exist. 
Absolutely! Overtime you get used to how documentation for APIs are laid out and it becomes easier to skim through and pull out relevant info. However, given that there's no uniform standard for writing documentation that everyone follows, inevitably you'll come across a codebase you need to use that makes it unbearably difficult to find the info you need.
Tools: ssh, git, ansible, puppet, fabric, vagrant, docker. It helps if you know how to set up the most common dbs and webservers, like nginx, redis, mongo, postgres etc, although that's relatively trivial stuff to pick up. Also npm/node is all the rage at the moment. Python tools and libs: pip, virtualenv, cx_freeze/py2exe. Again helps to know the setup procedures for gunicorn, uwsgi, django, flask. Cloud stuff: cloudformation, kubernetes and all that jazz. However, that's a bottomless pit of vendor-specific, non-transferable stuff, which you probably don't want to explore unless your targeted role explicitly requires it.
Check out http://marshmallow.readthedocs.io/en/latest/
It's not like Python is at fault here, you know. If people still can't figure out how to properly implement distribution on Windows, then problem is probably Windows, not Python itself.
The docs here seem a little oddly laid out when first approached, but I'm sure after using it for 1/2 an hour, it would be second nature.
What kind of stuff do you do as a software engineer?
VSCode hands down! I have two python extensions installed: 1. [MagicPython](https://marketplace.visualstudio.com/items?itemName=magicstack.MagicPython) (better syntax highlighting) 2. [Python](https://marketplace.visualstudio.com/items?itemName=donjayamanne.python) (debugging, linting, intellisense, etc...) With those installed, VSCode provides all the things that I want for python development tasks: * Auto-completion * Cmd + Click to goto definition * Automatic linting on save Most of the rest of the features that PyCharm provides beyond those I use very infrequently, so I see no point in using such a heavy IDE for development. I still love JetBrains products and use IntelliJ/Android Studio regularly for Android development, but there is a _very_ marked difference in speed between the two.
It has [a lot of examples](https://pythonhosted.org/arcade/examples/index.html) available.
I agree, I have actually used pyomo and it's great. It interfaces with a wide array of solvers and even supports remote solvers through NEOS server. Check out e.g. a solution of the [knapsack problem](https://en.wikipedia.org/wiki/Knapsack_problem) in pyomo: from pyomo.environ import * model = AbstractModel() model.n = Param(within=PositiveIntegers) model.I = RangeSet(1, model.n) model.w = Param(model.I) model.v = Param(model.I) model.W = Param(within=NonNegativeReals) model.x = Var(model.I, domain=NonNegativeIntegers) def obj(m): return sum(m.v[i] * m.x[i] for i in m.I) model.obj = Objective(rule=obj, sense=maximize) def constraint1(m): return sum(m.w[i] * m.x[i] for i in m.I) &lt;= m.W model.constraint1 = Constraint(model.I, rule=constraint1) instance = model.create_instance(filename='knapsack.dat') solver = SolverFactory('glpk') results = solver.solve(instance, logfile='results.log') instance.solutions.store_to(results) results.write(filename='results.json', format='json') For plotting/tables use seaborn (which actually uses matplotlib) and pandas.
IMO, it looks like you have a simple problem, but you don't know how to program and you think you need to be some Python wizard. This reads like an /r/iamverysmart. 
Good idea. https://github.com/mongrol/pylove2d 
Go browse the Python docs and standard library reference. Youll learn what's included and how to check for that.
ahh cool – yeah I've noticed amazon's services mentioned quite a bit in conversation. Considering I work mostly in content marketing I'm super keen to see just how much autonomy I can add to my workflow. Thank you so much for your help with this one.
A slight correction: The mathematical structure isn't a modular group but rather is [the least residue system modulo 12](https://en.wikipedia.org/wiki/Modular_arithmetic#Residue_systems), which is a cyclic group.
Really? How?! I want the pro version!
I was going to suggest GIS work. That's how I started, and you can do pretty well for yourself with that. Being in Southern California, you're pretty close to ESRI's headquarters (Redlands), so I'd keep my eyes open for jobs there (though you'll likely need more experience first). ESRI also offers some free online training; I'd take all that you can if you want to go that route. I think you need to buy a [personal use copy](http://www.esri.com/software/arcgis/arcgis-for-personal-use) of ArcGIS for $100 a year to get access to the training material, though.
I really liked rice university's class on coursera. Also univ of michigans on coursera
There is [PySFML](http://python-sfml.org/) - Python bindings to SFML. It's pretty pythonic and should be fast, since it written in Cython, but unfortunately, it seems abandoned.
Id say the number of clients would be on the tens, only one JSON file and the whole file is sent at a time. the system is for home automation. I was thinking make it really simple, create a time stamp with the last time the file was edited. that's the only way I can think right now.
the problem I've found with standard libraries is that documentation is not to good, learning curve is quite steep and of autobahn it's quite resource demanding. any library would you recommend with good docs, that keeps it simple, and a big community?
If the Python devs believe in recursion as an important problem solving strategy, then they are clearly not putting their money where their mouth is. If you can't do automatic TCO, then at least have something like clojure's loop/recur - clojure runs on the JVM, has no TCO, and produces useful stack traces. And the feature wouldn't violate anything that already exists, and it would not be harder to understand than, say, decorators or yield returns. My experience is that this is a general tendency wrt Python and FP - confusing and subpar scoping rules (making closures dangerous and easy to get wrong), crippled lambfas, uncontrolled mutability and side effects, effectful imports (who the fuck thought this was a good idea anyway?), etc.
There is lots of information on /r/learnpython
Wow cheers, that is very helpful! I didn#t think of abstracting the coding further and not include the boardstate at all. I guess I still have to improve my way of thinking when it comes to programming :)
And that Tcl has great deployment story on windows, linux, mac, etc. has therefore nothing to do with TclKit nor that Tcl people cared, and made it happen. No, it must be because of suitability of linux, mac, etc. Oh, and probably windows, too ...
It's not a hackathon it's programming contest and the motivation to participate is to compete with your peers and sharpen your skills.
You cannot parse HTML with regular expressions alone, because it is not a regular grammar. Also, your example does not fully define the problem. My guess is what you want is something like parse the HTML with beautifulsoup, and then use its query features to grab the interesting bit.
Why has development halted and what in God's name possessed you to GPL a library?
You've given up because... why, exactly? What is stopping you from using these maintained libraries? 
I'm currently using BS4, but the problem is the structure of the whole document. It's really bad so for this specific bit I find useful using regex
https://www.google.co.uk/search?q=python+gui
(I'm the dev advocate at PyCharm) If you're interested, here's a video series to introduce some features of PyCharm: https://www.youtube.com/playlist?list=PLQ176FUIyIUZ1mwB-uImQE-gmkwzjNLjP
That's [standard practise](https://docs.python.org/library/__main__.html) in Python, this block will execute only if the module is run directly and not if it's imported from another module. In this specific case it doesn't really matter because that script is stand-alone and meant to be run directly anyway. 
You just got PEP8ed! reference: https://www.youtube.com/watch?v=wf-BqAjZb8M I recommend watching this.
BUT if you want to make games professionally, you won't be making them in python. It's a great language to know in general but for various reasons just hasn't made it as a viable game programming language. 
https://docs.python.org/3/library/tk.html
Generally speaking, a "list" is probably what you want, if you need to send JSON to your API: import requests requests.post('url', json={'emails': ['foo@a.com', 'bar@b.com']})
in which sense is it a “must”? i’d agree that you *should*, though.
I would say that one *ought* to.
True I see your point. And as others have pointed out it's more of a text editor. 
Awesome! Thank you!
This is very helpful, thank you so much!
Could someone kindly ELI5 this for me....Also, how come there isn't an example (with some code + data) to show me exactly what is happening.
http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454
Then please allow plugins to be written in python, pretty-please.
Look at Beautifulsoup. 
You raise a good point. PyCharm gets many benefits from sharing a huge IDE platform (IntelliJ, etc.) but it means plugins are in Java. To be fair, I don't think VS Code lets you do this either, but I might be wrong.
OH!!! Nice video ! I will fix all of my bad habit ! thank you.
Sorry for my bad habit! I have already fix all of them ! thank you!
I'd say the answer is trivial, yes. Loading a json object is learning how to use Python, which is the stated goal of that Subreddit. I think you've got what you need with the other comments in this thread, however, and maybe just to bring the discussion back to what /r/python is about note that more than one library was discussed for converting a json object to a dict. If I recall correctly the standard json library isn't as performant as some of its alternatives. 
The habit came about from federal work, where any development machine had to be auditable and destroable in a moments notice. Makes it a lot easier to only have dev work on the device for the audit and don't have to re-image base machine. However I continued doing it for two other reasons: 1. Wherever I go to work, it doesn't matter what box they hand me, I will be developing in the same *nix VM I am used too. Without any hassle of side installing or boot camping Linux and getting root permissions from IT. 2. Everything blew up? Restore Base snapshot, 15 mins of updates and git pulls and back to business. On average I have three work machine (either physical or VM) die on me per year from various reasons (hard drive dies, bad ram, bad update, it's a Tuesday, etc..), and it's nice not being bothered by it. 
This is a great library. Tons of examples and the codebase is commented very nicely. I'm loving the extensive use of type hints in the docstrings as well. +1 This post should be higher up.
When I tried to use pyglet to build the robots game specified in the live wires course (see PDFs from this link: https://github.com/tjvr/livewires/releases/tag/zip4) piglet had trouble rendering frames at a fast speed. I'll admit I'm quite the noob but it seems very hard to get it to be performant.
Thank you, I'll keep that in my mind.
I agree with you! :)
Python 3 for everything. The more you use it, the more libraries get ported.
Has ruby solved the distribution problem on Windows? What about lua? Or any other interpreted language for that matter. Windows sucks, hard and often, but that can't be the end of the story or Python game development is a permanent dead end.
Unless there is a very specific and compelling reason to use Python 2, use Python 3. There were some painful updates in the earlier versions of 3, but more recent updates have had far fewer breaking changes while adding lots of powerful new capabilities you might want to be able to take advantage of in the future.
My workload is web-based and so it's not the core focus of the Intel Distribution, but I was hoping it would offer some performance improvement on regular python code so I thought I'd do a little test. I cloned this [mako_v_jinja](https://bitbucket.org/zzzeek/mako_v_jinja) repo and updated it for python3, and here are the results: Python 3.5.2 |Intel Corporation| (default, Oct 20 2016, 03:10:33) [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux jinja2 2.8: 4.9533123210130725 mako 1.0.6: 4.368664958019508 mako 1.0.6 using def: 4.310921513009816 And on my current Python: Python 3.4.3 (default, Oct 14 2015, 20:28:29) [GCC 4.8.4] on linux jinja2 2.8: 4.5641348299977835 mako 1.0.6: 4.316026560001774 mako 1.0.6 using def: 4.251105604984332 Now there are admittedly quite a few variables here, what with different compilers and python3.4 vs Intel's 3.5. All that to say, I was hoping that the Intel distribution would show an improvement on regular python code, but it doesn't on this template test. Again, not that it really matters. I know it's not the target workload, so I don't want to criticize the Intel version...
When I was doing devops, it was a mix of Linux and Windows, although it happened to be more Windows for me at the time. So if you go that route, then you'll want to look at PyWin32, wmi.py and some of the other goodies that Tim Golden has put together.
Maybe add unpacking of generators in list literals and tuple assignments as well? For example: &gt;&gt;&gt; g1 = (n for n in range(3)) &gt;&gt;&gt; g2 = (n**2 for n in range(3)) &gt;&gt;&gt; [10, *g1, 12, *g2] [10, 0, 1, 2, 12, 0, 1, 4] &gt;&gt;&gt; g = (n for n in range(3)) &gt;&gt;&gt; a, b, c = g1 &gt;&gt;&gt; print(a, b, c) 0 1 2
Generators are why I love python. It took me a bit to fully understand how asyncio works and should be used, but generators definitly helped. I can't stress how awesome list comps, generators, and yield are.
Is this better than, say, using IMAP to backup and/or transfer between accounts? I use gmail apps on my own domain (grandfathered into being free) and that is how I transferred my emails. It worked pretty well, though kind of slow.
In my experience, pyglet is as fast or faster than PySDL2, if you take advantage of batched rendering. If not, yes, it can be quite slow if you do things like draw all sprites individually. I'd be happy to look at your code if you want to learn.
for n=0-256; `is` works as expected in: `d = n; d is n` However, once you get to 257 that functionality is no more.
It's a small optimization detail. Basically CPython caches the numbers between -5 and 256, for performance reasons; so any variable pointing to a number in that range is literally pointing to the same stack element as the literal you type in the comparison. Numbers outside the range are instantiated as new, so "is" doesn't work for them because the literal you are comparing is a different object. Regardless, for native types you should always use "==" to compare values. "is" is for objects and types with strict identity checks. (edited for clarity)
Some more digging, and I find this... From https://docs.python.org/2/c-api/int.html The section regarding PyObject* PyInt_FromLong PyObject* PyInt_FromLong(long ival) Return value: New reference. Create a new integer object with a value of ival. The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you actually just get back a reference to the existing object. So it should be possible to change the value of 1. I suspect the behaviour of Python in this case is undefined. :-)
`is` doesn't check for equality. It compares the identity of objects, which is what `id()` ([docs on id()](https://docs.python.org/3/library/functions.html#id)) will give you. You can read about the `is` keyword [here](https://docs.python.org/3/library/stdtypes.html#comparisons). To implement an equality comparison using `is`, you are really saying: id(var_a) == id(var_b)
tutorials. Real tutorials on how to do real (or at least functioning) games. Targetting people who have never made a game. On the [quickstart](https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/programming_guide/quickstart.html), after explaining how to capture click events, how to display text on the screen, and how to do other very specific io tasks, it says *The examples presented in this chapter should have given you enough information to get started writing simple arcade and point-and-click-based games.* What? The quickstart doesnt even mention any game! Actually I was so frustrated with pyglet documentation that i made a [game](https://github.com/manugarri/pyglet-test) without looking at the existing docs just to see how wrong the output would be.
Though note that there **is** a slight difference there. You may think that two different objects can't have the same id, but there's an important qualification missing from that statement that makes it false, as illustrated by the below example: &gt;&gt;&gt; id([]) == id([]) True &gt;&gt;&gt; [] is [] False 
You can export your contacts to CSV in Gmail.
It's perfectly safe, though you should probably run it outside of IDLE as a background service.
I was thinking of replying a similar way, but to be fair the documentation for python GUI's isn't quite what is available for other languages
Not sure how much time you're playing with, but if you can pick up another skill that you will enjoy, marry it to being able to solve industry problems with Python (or any other language), it will get you in the door. I did it backwards, I'm on the business side and learned python to use as a tool to solve business problems on the financial and admin side. For example, I have a whole group of financial excel files that have to be pulled together each month to create a monthly report, then a summary has to be pulled together and sent to the boss. one of the things that I did was write a script using xlwings which is a python module to grab all the excel files in the monthly folder, consolidate them into one workbook, then analyze them, chart progress and provide a summary in a text file which could be copied directly into an email to send to whoever was interested in how we're doing. I've never seen so many happy faces around the conference table. Approached it problematically, hard work up front, but now takes less than 3 minutes to run the script. Most managers on the business side don't have programming as a skill, I'm sure the same can be said for other spheres. You could do this in pretty much any industry with an additional skill. If you like fashion for example, bust your @ss learning about the industry, network like crazy and then offer yourself out as a consultant (to start and prove you have value getting you in the door for permanent employment) analyzing/visualizing a section of their historical data such as retail purchase info to let them know where they can improve sole. If they already do this, see if you can speed up their process and move them away from manual analysis. 
Just use the Python interpreter directly. Run "python /path/to/your/script.py" in Terminal.
I'm putting the finishing touches on a machine learning text analysis pipeline, using scikit-learn and xgboost... there are about 10 steps in total and it's a pretty robust process. I'm happy with the results. 
I would agree also on PyQT
When you're so eager to get rid of your privacy you start doing google's job for them.
The only two (major) issues I've run into with 2 &gt; 3 is print statements versus functions, and strings versus bytes. 
Never experienced distribution of RenPy, but even if that's the case, great, now we can easily deploy powerpoint presentations. I mean, I guess a platformer is just a really complex powerpoint presentation?
No.
/r/learnpython
Everyone is happy if they get even a glimpse of sense about what the hell the datetime module is about. 
with the proper _selectors_ on BS you could be able to get everything from an HTML or XML.
&gt; Even if they're on mac or linux, it's a pain in the arse. Depends. &gt; Funny, I have no problem running .NET programs, or things compiled targeting Win32. Yeah, because they're written for Windows only and with Windows in mind. Try to launch .Net program on linux or mac. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Python 3. Python 2 is a dead end it is already in maintenance mode, and soon will stop being supported + programming in python 3 is more enjoyable to use. Also, with python 2 vs 3 differences. Those aren't big enough differences that you couldn't pick up in few minutes.
Why is it the wrong tool for the job?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
My point stands though. VNs are a tiny subset of the gaming space, with an even smaller market share.
I see what you're saying. In one sense, I think it's correct to say that it represents a point in time (in contrast to a duration of time like timedelta), but it doesn't represent a point in time when compared to other offset aware objects.
But there's so much potential in the Python language, and so many talented Python developers. We SHOULD be trying to get a unified, perfect, distribution model for Windows.
What's up with these dll files in etc/libs/win/Microsoft.VC90.CRT/ and how do they work with your repo being GNU AGPL 3.0 licensed? 
There is no particular reason why im storing the file as JSON actually, that's actually a good point ill try storing the information on a database and have the script read from in and generate the jason dataset to send to client and viceversa, I sopose that's more "elegant" on the messaging protocol dont think that is the right fit for me. On the last two points I would like to understand a bit more how does the python process work, i got a bit lost with socket files and python processes and files... on the other option actually I was using a bash script originally, the problem came when working with JSON I wanted to validate the data and be able to intereact with data foir testing pourposes. I think using a database in conbination with the "python process" option might work, just need to understand exactly how would that be implemented... * I had no idea mongoDB was JSON oriented... 
I suggest you to read Python programming 4th edition
Exactly. It represents a point in time in a general, abstract way using a generally agreed upon earth-centric system. It only lacks an offset context for timezones, which are not uniformly applied. I think the datetime.datetime.now() function may create a lot of this confusion. The name of the function implies that it would have the timezone context, but it does not. The outputted time I believe is the same as the local time, but it does not actually specify the time zone from which it was sourced--making conversions impossible without adding that information.
Thanks for highlighting [Sphinx](http://www.sphinx-doc.org). It's in the other category. Sorry. A twitter poll only allows 4 choices.
The specific problem I had with bytes() versus str() is that str doesn't support the buffer interface, so the call in py3 had to be bytes().
Wow, I have never seen any of these before. Can I ask what is the advantage for using one of these, over Flask/Django? How much of a competitor to WordPress is it?
&gt; If you are comparing values or behaviours, `==` is what you need No it is not because equality does not guarantee "same behavior" because things can be equal (via coercion) to objects not of their type. And `1` does not behave like `1.0`, simple enough to just look at the methods each has. Something as simple as `(1).to_bytes()` vs `(1.0).to_bytes().` As for `id` I don't get what your point is. Seems like you are suggesting that one can use `id` to accomplish the exact same thing as `is` and I would agree[1]. That is exactly what one should do!! If you need to know some kind of implementation specific detail about an object you use a built-in function: What kind of object is it? (use `type`) What is the MRO? (use `super`) Where in the heap is it? (use `id` with CPython) If you need to know the "algebraic" behavior of an object you use the comparison operators: `==`, `&lt;`, `&gt;`, ..., `is`. `1 is 1` because as an integer there can be only one `1.` All `1`s behave identically and whether you put your ones on the heap in a single location or in multiple locations, or whether you just keep them on the stack or in registers, just doesn't matter. All `1`s are the same as all other `1`s. As it stands we have two ways to identify whether two objects are references to the same thing `def is_same_address(x, y): return id(x) == id(y)` should exactly match the behavior of `is` and no way to identify if two objects necessarily must behave identically. In other words we could try and write: `def behave_as_one(x, y): return type(x) is type(y) and x == y and immutable(type(x))`, but there is no way to identify when python objects are immutable. [1] There are some weird caveats here such as the fact that `id([]) == id([])` can return true in certain cases... but for the actual use cases that matter equality of id can be used as a replacement for is.
Static sites can be served from CDNs or other low-cost hosting options. If all you want is templates and content, it can be easier to maintain a site with a static site generator than as a web application. Personally, I find it way easier to maintain a site using Nikola and storing all of my code and all of my posts in GitHub. I have custom layout written with Mako templates. I host in Google AppEngine and consume zero billable resources.
Amazing article, thanks for the share. This line got me: "Not a week goes by when I don’t follow a link from social media to a website that shows a “Database connection error.” ". Recently one website of mine got an unexpected surge of traffic, and I had to debug this database connection error while people were live on the downed site.
Thanks! Yes, those two pieces of advice helped me a lot. Things can get tricky otherwise.
Agreed. The `now` method uses system time, which of course has an offset, so you would expect the datetime object to have an offset as well. I see what you're saying. 
If you are on a desktop, please read the sidebar.
Note, I am not a programmer, I'm a business-side manager who is learning to use python at work. 1. Auto Excel File Consolidation with Pandas Dataframe, Analysis and movement of relevant data back to an auto-formatted Excel file creating a hot-spot report for the month period. 2. Script to search a pre-set folder for zip files, if it finds them it unzips them, then looks for .txt files, runs search and replace using pre-set variables...What's stumping me is Regex...learning. I tried using the standard python replace() function but for some reason it isn't working....not sure why...that's what I'm doing other than usual day-to-day business management.
Nikola.
Statik: https://github.com/thanethomson/statik/ makes it easy to build content from yaml/json models, which are transformed into sqlalchemy and are thus queriable.
great piece of software - I struggled for couple of hours trying to restore imapsynced data back to Gmail, with this tool it was a matter of minutes 
Hosting and serving simple html files is so much easier, faster, safer, etc.
I use Pelican.. and I really like it.
When I evaluated python static site generators last year, **Pelican** was the only actively maintained one that didn't more or less force a blog-style site structure on either the source files or the output files. (Getting the bloggy stuff out of the way required a good understanding of the available config settings, but once configured, it worked pretty nicely.) For this, it gets my +1. Nikola was one of my contenders, but it didn't work well for non-blog sites. I haven't tried Lektor. I guess I'll have to take a look. See also: https://www.staticgen.com/
Hi I'm an accountant and novice in python. Now working with mongodb and pymongo trying to create a database for my work. 
I thought the article was a bit bullshit. If you use caching correctly (especially page caching) plus a CDN, any old CMS can handle big big traffic. Last year I had a wordpress website that was doing 500k pageviews/day on a medium instance on AWS, cpu never went above 10% and the DB was almost idle. I think when you have a CMS with page caching, using static is going backwards.
Are you serious? If i have to press a button each time, it's not automated. Automation is when a process can run periodically without your input. Or do you press a BACKUP button every day to back up your machine? I should be able to schedule backup jobs and forget about them until I need the data. Gmvault can do this.
Thanks!! I will add links !!!
Should they add a note clarifying it's the company BeOpen and not the website owner?
I imagine it's low on the list of anyone's priorities. BeOpen.com was the company name, and it's surely of little interest to anyone now. They'd almost certainly need to keep the copyright info as-is anyway, so where would you add the clarification, and for what real benefit? In terms of "Should", the requirement is, as I say, generally to maintain the list of copyright holders, which in this case is BeOpen.com. They *could* do other things, but I don't think they need to do anything other than keep the list as it has always been.
Not Python. Jekyll is written in Ruby.
Excellent project, thanks for sharing. I was thinking it would be nice to have cliff notes, or a cheat sheet for the whole of Python 3.6. I've been meaning to get into Async IO for awhile.
What library?
Hyde. Its basically Jekyll but written in python.
 Nikola. Developers behind that care a lot. 
Any example of sites generated with these? Specifically interested in pelican. 
What if the domain BeOpen.com is acquired by someone and they assert copyright? It looks like it's tied to the website and not the company behind it. 
Lektor gives the user a lot of room to make what they want. Relational database type sites are also practical, though it takes a bit of work. The default does include a blog, but the examples are enough to start toward a more complex site.
if it's not written down, what stops the current owner of beopen.com from claiming to be a copyright holder?
Google AppEngine does not bill static content hosting?
Statik is really cool, it focus beyond static blogs: https://getstatik.com/
It is written down. It's right there. The copyright holder is "BeOpen.com", which would need to be a legal entity - either person or corporation - with that name. Not just some *other* entity that happens to register the domain name. There was a company called BeOpen.com. They held the copyright for a release of python. Their *company name* happened also to be a publically routed, DNS-resolved domain name. That is obviously deliberate, but it doesn't make the company name and the domain name *the same*. If you have a company called BeOpen.com and can prove that it was the same company that held the copyright, then the copyright is indeed yours. If you happen to register the domain name, it isn't, because the name in that copyright declaration *isn't a domain name*, it just happens to look like one.
Python and the mature scientific libraries seem to do a good job at providing backwards comparability when they depreciate something - like giving warnings over many releases before finally breaking backwards comparability (at least in my experience). If there's a specific package you are depending on and are wondering if you should update at the risk of hurting your code, just read the changelog and perhaps install within a new virtual environment. 
Thanks! Do you mean the whole features of Python3? Currently, I am trying to figure out how to separate my notes between py2 and py3 !!! By the way, the below link is my another asyncio cheat sheet. :) [asyncio](https://github.com/crazyguitar/pysheeet/blob/master/docs/notes/python-asyncio.rst)
And a static site would have been able to push more with less. Edit: The next time Facebook Chat or what ever the latest 'chat' fad is starts to lag consider this old post on "[How much CPU does IRC use](http://serverfault.com/questions/159758/how-much-ram-and-cpu-do-various-irc-daemons-take-up)" &gt; *I used to run ircu on a pentium 100 with 48MB of memory some years ago. It was running well with thousands :of users.* So lets break down the numbers on your test case: &gt;&gt; 500k pageviews on a medium instance on AWS, vCPU CPU Credits / hour Mem (GiB) Storage t2.medium 2 24 4 EBS-Only From: https://www.rootusers.com/linux-web-server-performance-benchmark-2016-results/ - nginx stable uses ~100 MB. - nginx on a single core tops out at about 30k requests per *second*. A well designed static website should have at most 3 hits: HTML, CSS &amp; JS. If you have images then that's a hit each. So 10k *pages* per second. You could have your 500k pages served in 50 seconds on 500 MB of RAM and a single core Xeon.
I think that depends really. Migrating from Pygame to Pyglet requires a completely different structure since Pyglets event loop is handled internally by pyglet through linking functions to events and times (unless you want to make your own event loop) whereas pygame is more explicit and you just call and ask pygame whats up for every frame. I had a semi-decent wrapper I used for pygame, but porting it to pyglet would have been a lot more work (especially with restructuring) than it would have been worth.
I've recently switched to Pyglet from Pygame, and I think you're completely right. The source code for Pyglet is some of the most readable library code of that size I've ever seen, and while it has a lot of things that takes getting used to (at least for me) and has a few things you have to write around from time to time (mostly due to OpenGL quirks and hardware quirks), it's definitely worth using. Especially with python3 and pypy compability. Tho, there is a suffocating lack of examples for how to use Pyglet. If there was a repository of examples covering different aspects and things from small to medium scaled projects that would be great. I'd easily contribute my code (tho it's probably not as pythonic as it should be).
Is this completely compiled with Intel compiler tool chain for C/C++/Fortran? If yes, how compatible is this with pip/conda packages compiled with MSVC?
I'm not super-qualified to talk deeply on this topic, but I think it's worth noting that Lektor is a project by Armin Ronacher, the author of Flask, Jinja, Wekzeug, Twig, and more - and he's a pretty respectable programmer IMO. And so what I've seen of Lektor is pretty cool, but I don't have even a single static site in production, so take my thoughts with that grain of salt. Looking forward to using it though, when the opportunity arises.
Warning: I have strong opinions about the mock library and monkeypatching in tests in general. mock_animal.query.all.return_value = [test_animal] Can we not? Mocking isn't something that should be done lightly and mocking an ORM response is bad juju for multiple reasons: 1. You don't own that interface. Mike Bayer or one of the Flask-SQLA contributors can up and change that flow at any time (they probably *won't* but it's possible). Now your tests pass but your code is broken and you've no idea why. 2. Depending on the size of your app, you'd probably benefit more from stuff the database details and ORM details behind a repository interface where you can stuff queries like `retrieve_all_animals` or whatever. If it's a smaller app...eh, you're just gonna make a headache for yourself. You need to gauge this one on your own. 3. I don't a see a mention of using the `auto_spec` feature which ensures that you can only call existing methods (and the various special mock methods) on your stand in. Assume you fat fingered your test and you end up doing `mock_animal.qeury.all.return_value` Whoops.
Maybe we can start something together! I do a simple dictionary [dictio](github.com/bbuccianti/cli—dictionary) recently. Do you have any idea for a new project? What do you like to do? Something that you actually are going to use.
Copyrights in important things like this tend to be registered with the appropriate government, and falsely claiming to be a copyright holder is illegal and can get you sued quickly out of existence. For example, for the Django Web framework, the foundation which acts as steward of the copyright has the relevant documentation to legally prove itself the copyright holder.
Typical yotube bot
[Lunesta Confessions](http://lunestaconfessions.com) 
Being the current registrant of a domain does not somehow give you any rights to of any of the assets of a past registrant of the same domain. That would be absurd. If you wanted to assert those rights you'd have to show documentation that you acquired them from the company before it folded; and those kind of transactions are backed by signed legal contracts. You can't just stroll in and say, hey, I happen to have registered this domain name, give me all your stuff. 
no it's not.
Are these any examples of statik out there? 
I use this method: https://nicolas.perriault.net/code/2012/dead-easy-yet-powerful-static-website-generator-with-flask/ Converted from jekyll to this in an hour or two. I set up a git hook in my VPS which builds automatically and publishes on git push as well. 
With libraries, it depends; if there are important security fixes, or you need to add functionality to your program that the old library versions do not support, then upgrading libraries is preferred, but if that's not the case, you can keep using the old versions. The nice thing about pip and virtualenv is that you can make a choice, on a per-library basis, simply by editing your requirements file (which refers to exact library versions). One way or another, if you plan to maintain your code for a year or more, you will definitely want to think about these things; the minimum you should plan for is to build and test your code locally, against the correct libraries and interpreters, before every release. Having automated tests and automated builds (and maybe even automated releases) will eventually make your life much easier here, but might not be worth it for a small school project.
Dvidsilva/Gloria 
So this uses threads wtf? The factorial function can be computed via [tail recursion optimisation](https://en.wikipedia.org/wiki/Tail_call#Example_programs). Its inherently no parallelisable.
FYI: Hugo is great and included in the [Alternative (Language) Edition](https://twitter.com/statictimes/status/799705697776758785) poll - the (leading) candidates include: [Hugo (Go)](https://gohugo.io), [Sculpin (PHP)](https://sculpin.io), [Hakyll (Haskell)](https://jaspervdj.be/hakyll). Cheers.
Depends on the style of game, no? 3D games would not be Python's forte, but arcade-style or tiled or isometric or text-based games are eminently possible, I'm sure.
I know. I made my some of my first sites in Dreamweaver back in the mid nineties. It worked very well for static sites.
I would consider PySide or PyQt. Both are python implentations of Qt. Qt has got Qt designer, which is a WYSIYG user interface in which you can click and draw your GUI. Good luck!
Ah, I misunderstood you. You were talking about covering 2 to 3, while I was talking about 3 to 2, which is much easier because 3 makes distinction between str and bytes.
The statik site is built with statik ;-) See -&gt; [/thanethomson/getstatik-site](https://github.com/thanethomson/getstatik-site)
[removed]
Doensn't matter if it's impressive or not. The point is that that is more traffic than the vast majority of the websites. You probably won't have to handle that much, so why optimize for things that most likely you'll never see?
Please post your code.
Thanks for the feedback. There are a decent number of example applications included, but they're just sort of sitting in the repo. Anything in particular that you think would be useful as far as example code goes? 
Thanks. Wow, you guys really have a good attention to detail! didn't even noticed that. Thanks Sorry for asking and realizing how the stupid that was lol.
Wrong cask.
Can you give a few examples? All the big ones I know of support both now :) edit: other than maybe some low level networking ones like scapy 
And really I don't know why we consider dynamic site as the default and static as the exception. It seems to me that it makes more sense to default to static unless you need the features of a dynamic website (like easy multi user usage, or frequent content updates). 
Its not always about performance. Dynamically generating anything adds more of an attack surface. You can hash static. 
You're in the minority then. The proof is that wordpress's popularity comes from being easier to use
I know all style PEPs. Not following them is entirely possible. The world won't explode, Python won't crash, so no: it's not a must. It's just advisable. Besides: PEP 8 is a style guide for Python stdlib development, not every existing project. I don't follow some parts of it that I disagree with.
/r/webdev
One of the unsung benefits of a static site is that you can't hack the content. Sure you can still attack the site or hosting, but you don't have to patch your CMS.
BTW, it might save you typing: `blur_filter = np.ones((3, 3)) / 9`
Sorry for my bad coding habit :( (even I know PEP8). I think **should** and **MUST** are all right! PEP8 just a coding style recommendation, and even some of python standard libraries are not following (history reason). (ex: unittest, logging) Based on PEP8 [A Foolish Consistency is the Hobgoblin of Little Minds](https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds) &gt; A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important. and [Naming Conventions](https://www.python.org/dev/peps/pep-0008/#naming-conventions) &gt;New modules and packages (including third party frameworks) should be written to these standards, but where an existing library has a different style, internal consistency is preferred. So I think we **should** follow PEP8 and **must** be consistency in our code. Sorry again for I didn't follow PEP8 and full of no consistency :( 
Check out [bokeh](http://bokeh.pydata.org/en/latest/).
Because I like Nikola and reStructuredText (and nginx) and can have my posts version controlled, the security of static is nice too. 
Such a quick reply, and exactly what i needed! 
Just like Windows is easier to use than a Mac as 'evidenced' by it being popular?
Of course factorial is parallelizable (here assuming all positive ints): def mult(a, b): result = 1 for i in range(a, b + 1): result *= i return result def fact(n): return mult(1, n) fact(2n) = mult(1, n) * mult(n + 1, 2n) Btw `mult` can also be done recursively with tail recursion optimization if you wish.
edit: Trying to find the numpy docs for np.array but I assume it has an overloaded magic method for division? What am I missing here, I tried to replicate that with this &gt;&gt;&gt; x = [[1,1,1],[1,1,1],[1,1,1]] &gt;&gt;&gt; x [[1, 1, 1], [1, 1, 1], [1, 1, 1]] &gt;&gt;&gt; x / 9 Traceback (most recent call last): File "&lt;pyshell#2&gt;", line 1, in &lt;module&gt; x / 9 TypeError: unsupported operand type(s) for /: 'list' and 'int' This is Python `3.5.2`
Python lists are different objects than numpy arrays. The former are general data structures which may contain any type of objects (numbers, strings, file handles, etc.), even mixing objects of different types in the same list; while the latter are dedicated for numerical applications. Therefore it doesn't make much sense to overload arithmetic operators on lists, while it makes a lot of sense to make them work on numpy arrays. Hence you can divide a numpy array by a number, but you can't do so with Python lists. Note also, that with Python lists `[1, 2, 3] + [4, 5, 6]` will result in `[1, 2, 3, 4, 5, 6]` ("concatenation"), not in `[5, 7, 9]`. With numpy arrays `np.array([1, 2, 3]) + np.array([4, 5, 6])` will result in `np.array([5, 7, 9])`. Different types of objects for different uses.
Found the reference for np.array (ndarray?) https://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html#array-methods as for numpy doing matrix operations vs concat makes sense.
I've used bokeh and [plotly](https://plot.ly/python/getting-started/). Plotly's plots have much better interactivity. 
I think the best way would be to have a tutorial for a game that's easy on the logic, but uses pretty much all aspects of Pyglet in some way or another that generally follows the documentation. Maybe something like an auto-scrolling platformer where the player jumps hurdles (like floppy bird), that's initially just using OpenGL primitives with no user input, and then gradually add keyboard input for the player, then some menu options, text and mouse capture, then replace all the OpenGL primitives with images using both images and texturemaps. Finally add sound and video, set up application resources (level data), and some debugging.
That would be awesome! Ideally, the docs would contain two different sections, for game developers who want to use pyglet, and for python developers who want to develop a game. The docs now cater to the first group. Besides the tutorials, maybe a link list of good intro to game development content would be helpful as well.
Your site doesn't already use a back end scripting language?
Why not just write most of the styling is HTML and create a custom template? You can pull stuff from the metadata dict and then just set the template name as the page.
jupyterhub is a implementation of the jupyter server that allows multiple users to connect and work together on jupyter notbooks.
It works just fine. For example, http://getnikola.com is a Nikola site that includes but is not a blog. We even have a specific tutorial about that: https://getnikola.com/creating-a-site-not-a-blog-with-nikola.html
Nikola doesn't force a blog structure at all, it's just the default. We even have a specific tutorial for doing not-a-blog: https://getnikola.com/creating-a-site-not-a-blog-with-nikola.html 
(Nikola can do some hierarchies in menus, and has built-in gallery support)
It's easier to use for a subset of all possible users. If you are a developer, Nikola is meant to feel sort of natural: * put your posts in git * build * deploy Or, more and more nowadays, push your posts to git and have something like travis build &amp; deploy. For people coming from other paths in life, it will feel somewhat foreign. 
Learning Spotify's Luigi library for creating data pipelines. Very cool.
(and it requires Python 2…)
&gt; Your code is not parallelizable Are you being serious?
I built [athena](http://github.com/apas/athena). I like it and I think you should use it, too.
Correct.
Even in cases when you need registration and database you could do it using something like auth0 and mongolab. Site still could be static.
It's unfair that the poll is on twitter, because I don't have an account. &amp;nbsp; My vote goes to Nikola. &amp;nbsp; Nikola for the win!
Again, you are missing specifics, what in boto is not working? Otherwise you are just creating FUD. Since I started using python 3 I don't remember having issues, two years earlier there were some libraries that I initially wanted to use that did not work on 3, but they were no longer maintained, so even using them under python 2 was questionable. Those libraries also had maintained replacements that worked for 2 and 3.
Not related to Python, but you should look into R shiny and R markdown. Great for data visualization and you can set up your own sever on Ubuntu
I've been using Python 3.5.x with Visual Studio for about as long as both have been out. There shouldn't be an issue with compatibility. What is more likely is that you have another version of Python (eg Python 2) installed, and it is causing these issues. If you could post an example of code that does/does not work, that would be appreciated. Also, try running `py -2` and `py -3`.
1. PEP 8 is explicitly a style guide for the standard library (the non-complying modules are older than PEP 8) 2. Every project chooses its own style. Therefore 3rd party modules are in no way required to follow anything resembling PEP 8. It's a nice thing to stay close to it, as many contributors have their muscle memory trained to produce PEP 8 compliant code. Some of these rules however have no consequence on this, as anyone will hit the tab key to indent instead of hitting space four times, and editors autodetect indent style, so you might not even notice how some file is indented. In practice this means that many (maybe even most) newer 3rd party modules follow a slightly modified version of PEP 8. E.g. most projects I contribute to turn off or modify the line length limit. --- I generally agree with your sentiment, changed as follows: We should use PEP 8 (with some edits as we see fit), and we must stay consistent (as long as there's no reason to make an exception). Note that the phrase about the “foolish consistency” means exactly that: consistency for consistency's sake is foolish. If being inconsistent buys you clarity, do it.
Timezones are also geographically bound as well. But that's a whole other can of worms.
But then OP wouldn't be able to easily put it in a web page