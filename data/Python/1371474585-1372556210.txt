In terms of content, stackoverflow blows it out of the water: http://stackoverflow.com/questions/101268/hidden-features-of-python Googled with "stack overflow cool python tricks" (stack overflow + title of post)
Hell, if I google "cool python tricks" it's the first result in my search.
1. I don't want to sign up for your shitty site just to read more than one goddamn answer. 2. Stack Overflow is not [Stack Exchange](http://stackexchange.com/sites).
That's not entirely accurate, as anything bound to localhost [won't be available from your public ip](http://superuser.com/questions/196893/difference-between-localhost-and-the-ip-address). Edit: I misunderstood you two. I thought you were referring to telling the SimpleHTTPServer which IP address to use, but it turns out it automatically binds to all available (public and private) network interfaces, so my comment doesn't apply here.
And for cases when `None` is an acceptable value" sentinel = object() def foo(a, b=sentinel): if b is sentinel: b = [] ...
Impressive lol and I hope you mean it.
A lot of his critiques are purely about syntax or the structure of the standard library, not about the language semantics itself. Attacking your least favorite lexical syntax as not being like another language ( Ruby, Coffeescript, Smalltalk ) is IMHO not all that useful criticism. 
Yeah I know that and I'm the user of some of them. But the rules of Quora make it more flexibility than any SE site, and adding new topics is just a mouseclick instead of a community process. 
Python 3, Yeah!!! ( ... btw I've never used P3 :[ )
I'm the author :) I think you may have misread the article. The trouble I was having was parsing *other* people's decorators (not my own). For example many users of Flask-Classy are using it with another package like Flask-Login which includes it's own set of decorators. I have no control over those and so I had to find a way to support them.
As has been an all too common occurrence in my life - I find myself forced once again to apologize for my face. Sorry :(
Is there a list of the major differences between (Py)Qt 4/5?
Have you guys been keeping up with the new WebAgg Matplotlib backend? Would that be easier to support in PyPy?
[yes](http://pyqt.sourceforge.net/Docs/PyQt5/pyqt4_differences.html)
Thanks.
&gt; Quora has a much wider selection of content than SE Yes, you did.
You should try sqlite, is small, compact and runs everywhere. Just a thought. http://sqlite.org/ 
Good call. There are so [many great open source software hosting services](https://en.wikipedia.org/wiki/Comparison_of_open-source_software_hosting_facilities); github may be a [representative sample](https://en.wikipedia.org/wiki/Representative_sample).
This is follow up of [unittest fixture syntax and flow reference](http://pythontesting.net/framework/unittest/unittest-fixtures/), demonstrating the failure flows. Pretty boring actually. But I wanted to have it up there, in case someone was confused by what happens when fixture methods fail.
How does this compare to PIL?
I want to call out for not using others that not allow access to people from some countries for political reasons. Check this (it touched my heart) http://www.reddit.com/r/linux/comments/1f72w5/please_stop_using_restrictive_platforms_for/
Why do these projects never have a description of what they are at the top, front and center. Instead, most of these projects front pages start with : Hey, have you tried jabberwocky? No? Then youre missing out! Its awesome, uses python 3, and is open source! This guide doesn’t cover all changes in 0.3. See also the full list of changes in Version 0.3.0.... And then Im bored / disinterested and move on... Give me this : Wand is a 2D open source image manipulation module for python. Features : [a handful of features] Platform : python (new)3.2, (new)3.3, 2.6, 2.7 Intro tutorial here : [link] History : Its been around for 5 years, downloaded x number of times, and is used by _______. It is developed and maintained by ____________. (why did this go bold, I didnt use any *) Sample code and example output: [link]
The linked page is just a release note. You can find these info in its home page: &lt;http://wand-py.org/&gt;.
The function definition `def foo(a, b=[]):` is evaluated when the program is first run. This means the empty list `[]` is created then, and every time `foo` is called, it gets the same list as the default argument for `b`. Since lists are not immutable, you can return `b` or modify it, and those modifications will persist the next time the function is called and the list is used again. isarl's way will cause a new list to be created each time `foo` is called, ensuring you get an empty list each time.
also funny: trying to use QWebsettings before the QApplication is instantiated. (it’s also a segfault)
Ok, but SQLite is not the best option when multiple users are using the same database. It would be the best for one user. Edit: Support for other databases (and SQLite) will be added in the future.
I didn't mix them up. Quora has a much wider selection of content than the entire Stack Exchange network.
I would kill for some tail call optimization though. Python has some nice looping syntax but sometimes you just want to recurse.
ahhh thats what Im talking about, thank you.
Underscores make text bold. Also, I completely agree with the fact that projects should have simple up-front descriptions.
Lists are mutable, and default arguments for a function get evaluated at function definition time, not at function call time. That means that the default value for `b` exists in the same scope as the definition of `foo`, where intuition would lead you to expect it to be function-local, reinitialized with each call. This behaviour is true of all mutable types, including `set` and `dict`, so you should also watch out and initialize default sets and dictionaries using the `None` trick (or some kind of [sentinel](http://www.reddit.com/r/Python/comments/1gh54e/cool_python_tricks/cakjc0a) as /u/nemec suggested). Testing against `None` in this way causes the empty list to be created at function call time.
PIL is effectively abandonware.
You're dead to me. :-(
A little aside: I'm just finding out about Flask-Classy. I think this can be a nice answer to Rails' "resource" routing mechanism for those who want it. How does this work with endpoint names, specifically with one of my favorite flask utility: url_for?
There is a problem with translation default context menu for QTextEdit and QPlainTextEdit in PyQt 4.10 (with Qt5) and PyQt5 using qt_xx.qm from `site-packages/PyQt4/translations` folder. It works properly for QLineEdit for example (this is the same context menu). Another issue is warning "OpenType support missing for script" if you try expand/scroll the QFontComboBox. However, I think these problems are related to Qt5, not PyQt. 
Serious question from a web beginner: Why would I choose bottle over Flask? Especially now that I see Flask has early Python 3 support.
Yes, bottle has had Python 3 support for a number of years. It's even lighter weight than Flask. As a beginner if your app is less than around 1000 lines, I'd stick with bottle. As soon as you get over that, switch to Flask. Bottle is also slightly faster: [web framework shootout](http://blog.curiasolutions.com/the-great-web-framework-shootout/)
That grey font is unreadable too.
On the flip side, I started a project with bottle and it kept growing and growing. I found myself wishing I'd used Flask, not so much because it's more powerful as that it has a larger user base so it's easier to find help for it.
Did anyone actually look at the code? What's with all this implicit state? Salt looks like the web2py of configuration management.
Unfortunately, looks like no licensing changes. Still no LGPL. (Edit: No LGPL/Apache/MIT/BSD/etc.)
So we either pick PySide which is likely dead, or PyQT which has awful licensing. :P 
One thing I would have liked to read is what makes it different or better than web.py ..
It works very nicely with it, actually. By default Flask-Classy will create an endpoint like `CommentView:get` for you, but you are free to define your own endpoints as well. You can check the docs here: http://pythonhosted.org/Flask-Classy/
The reason is simple. When you use a for loop like so `for item in collection: #code` the object item is an iterator. It serves up a copy of each item in the collection in turn. To modify a list in a for loop one must use the [] index operator. `for k in range(len(collection)): ##code that acts on collection[k]` 
Regarding virtualenv, ```--no-site-packages``` is now the default behavior.
Python should be more like Ruby and less like Python.
*sigh*, I was so excited for PySide...
The real answer is that it's correct because it's in the zeitgeist. Doing it the obvious way doesn't work, for reasons which make sense once you know them, and every alternative is worse, so the leaders of the Python community settled on this way, prescribed it to the masses, and everyone accepted it and moved on. The community sidesteps the answer with lots of hand-waving and describing of why it works the way it does, but the answer to why it's "correct" is "because the Python community says so." To a degree they're right - it's "pythonic" because it's what Python users do (and preach), but it's not *really* correct. It's just the best we have. A really correct answer wouldn't stick a useless value into the signature, making `help()` unhelpful. A really correct answer wouldn't require you to clean up after it in the function body. A really correct answer wouldn't increase [cyclomatic complexity](http://en.wikipedia.org/wiki/Cyclomatic_complexity). The pythonic way isn't *correct*, but it *is* "correct."
https://en.wikipedia.org/wiki/Command-line_interface https://en.wikipedia.org/wiki/Command-line_argument_parsing#Python https://en.wikipedia.org/wiki/Python_(programming_language) [Automated testing](http://www.reddit.com/r/Python/comments/1drv59/getting_started_with_automated_testing/c9tfxgd) is much easier when there is a `main` function. Minimally, in Unix style: def main(): '''Prints "Hello World!"''' print("Hello world!") return 0 if __name__ == '__main__': import sys sys.exit(main()) * http://docs.python.org/2.6/library/optparse.html * http://docs.python.org/2.7/library/argparse.html * http://docs.python.org/3/library/argparse.html From [the list of PyPi Trove Classifiers](https://pypi.python.org/pypi?%3Aaction=list_classifiers): Environment :: Console 
http://scipy-lectures.github.io/intro/language/python_language.html
Mostly preference, you choose what you know best, Flask or Bottle are more or less the same if you start with a small project. As your project grows bigger, you will still find someway to work around with the framework. 
Just found optparse yesterday, even though it's a standard library. It's awesome.
1) bottle has much better documentation 2) web.py does not support python 3 3) web.py is just slightly more complex development-wise 
Thanks !
optparse is deprecated, I'd stick to argparse (which is brilliant, IMO). (for proof, check out the [2.7 docs](http://docs.python.org/2.7/library/optparse.html))
I wished this view decorator bug from Feb 2012 was fixed. https://github.com/defnull/bottle/pull/231
It's not *awful*. They have [an exception](http://www.riverbankcomputing.co.uk/software/pyqt/license) to the GPL so you can use it with code under most of the popular open source licenses. Riverbank are really just looking to charge people who use PyQt for commercial projects. But yes, it is a choice between two less-than-ideal alternatives.
Baker and Commandr both make CLI programming trivial: https://pypi.python.org/pypi/Baker/ https://pypi.python.org/pypi/commandr/1.0.1
I was going to post `argparse`. Building a CLI as suggested is error prone and not to be undertaken except for didactic purposes.
http://pythonhosted.org/argh/
Why whinging about commercial software? Since when it is "unfortunate" to pay people for their work if that makes (let's say) one living? PyQt has a GPL license if you're inclined so.
Agree, the best way is using optparse or argparse =D
How is this better than http://docs.python.org/2/library/ftplib.html?
&gt; A really correct answer wouldn't stick a useless value into the signature, making `help()` unhelpful. Yeah, I was thinking the same thing! If anything I think it should be written like this: def foo(a, b=[]): b = b[:] ...
[docopt](http://docopt.org/), anyone?
Here is the code to add text on an image, taken from [what's new](http://docs.wand-py.org/en/0.3-maintenance/whatsnew/0.3.html#drawing): &gt;&gt;&gt; from wand.font import Font &gt;&gt;&gt; font = Font(path='tests/assets/League_Gothic.otf', size=64) &gt;&gt;&gt; with Image(width=300, height=150) as image: ... image.caption('Wand', left=5, top=5, width=490, height=140, font=font) ... image.save(filename='caption-result.png') I'm using Wand for unit-testing. I generate many images of different formats and then provide them as input for my app. How can i generate an image with text with the most generic font possible? I don't care for the exact font, i just want to use some text. [wand.font](http://docs.wand-py.org/en/0.3-maintenance/wand/font.html) says to use [TTFQuery](http://ttfquery.sourceforge.net/), but i don't want to dive into a library for such a simple task. What is the simplest way to get a font?
One idea I can think of right now is simply bundling a TTF font file into your unit test source tree.
Also, import operator functions = { 'add': operator.add 'subtract': operator.sub 'multiply': operator.mul 'divide': operator.truediv } instead of functions = { 'add': lambda num1, num2: num1 + num2, 'subtract': lambda num1, num2: num1 - num2, 'multiply': lambda num1, num2: num1 * num2, 'divide': lambda num1, num2: num1 / num2 } 
Direct sys.argv manipulation, no command-line options, no error checking... This is not how one creates real command-line tools in Python.
Why switch to Flask at that point? 
Yes! Always docopt. It's the best thing that ever happened to command line parsing in Python.
Or better yet: docopt.
I've been looking forward to this. 
Have you looked at the [Flask Mega Tutorial](http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world)? It seems interesting as an alternative.
I'm glad to hear it!
I have, it's pretty much the best available tutorial for flask besides a few small tutorials on single tasks. Though even with it I find I'm at a loss for direction and fumbling through the docs aimlessly. 
you're right. however, sometimes the official tutorials are difficult to follow. i am also going to be doing a series on this so it will have some unique cases. 
what a terrible title
I asked a semi-related [StackOverflow question](http://stackoverflow.com/questions/16618808/is-taking-advantage-of-the-one-time-binding-of-function-arguments-a-bad-idea) recently, and I'm sort of paraphrasing what I gathered in the discussion there in my above reply.
As a long time Python developer, I would recommend that anybody learning the language to *NOT* pay any attention to this article. It is careless to omit any sort of error checking, command-line options, etc., in a command-line tool. At least look at the built-in module argparse.
Flask is great, but if you're writing something relatively small/portable, it seems like a bit of overkill to have to include Werkzeug, Jinja2, Markupsafe, and itsdangerous as dependencies. I actually tend to go with CherryPy for my smaller projects rather than bottle, mainly because the server included is production ready and the framework itself is, in my opinion, more capable of handling a complex project (so if my small project grows into a large one, I don't feel the need to switch frameworks). Like bottle, there aren't any external dependencies. That's just a personal preference for me though, bottle is certainly just as capable of handling a light weight project. On a scale of minimalist to batteries included, you could say bottle is on one extreme, followed by CherryPy, then Flask, with Django at the other extreme.
Except that's a terrible 'solution' to the problem - as I stated in my post, you should construct a new list with a list comprehension (or manually in rare cases where a list comp isn't powerful enough) - iteration by index is slow, inflexible and hard to read.
yuck! :)
I don't really think this short script is wrong. What can really happen? If you don't pass something which is an int in sys.argv[2:4], you'll get a ValueError. If you don't pass something which is not a correct operation in sys.argv[1], you'll get a KeyError. I agree it is not "explicit error handling", but for a simple program like that I'm not really sure you really want to add so much logic for error checking, I mean, it is a simple program, so keep it simple. The question of the pertinence of this article and of a linking in reddit is more important. Should we link on reddit a blog post everytime we discover a trivial feature of a language ? (Look mum, I know how to print a value...). This code is so trivial that it may be compacted in one line (changing a bit the behavior, I agree): import operator, sys print(getattr(operator, sys.argv[1])(*map(int, sys.argv[2:4]))) (I agree it is a bit over compacted, let's do something readable) import operator import sys operation = getattr(operator, sys.argv[1]) operand = map(int, sys.argv[2:]) print(operation(*operand)) (Interested readers may notice a minor difference in behavior between my two version, the why is let as an exercise for the reader). Version with rough error checking: import operator import sys try: operation = getattr(operator, sys.argv[1]) except (AttributeError, IndexError): sys.exit("You must provide a correct operation as first argument. Availables ones are {}.".format(', '.join(dir(operator)))) try: operand = list(map(int, sys.argv[2:])) except ValueError: sys.exit("You must provid integer arguments after your operation.") try: print(operation(*operand)) except TypeError: sys.exit("Your operation takes more or less integer arguments.") I think error checking here is too overkill for such a simple program ;) (Edit: code formating) (Edit: typo) 
Good Luck Robert. I wish you all the best!!! Is this going to be based on Python 3? 
As a bonus, you can deploy gitolite internally to give you SSH authenticated and encrypted ACL'd repos, without needing to pay GitHub money. Also if you're working on proprietary code that MUST NOT leave the building.
I'm one of the people he interviewed. Based on the questions he asked, this book should be valuable for those who want to first pick up Flask as well as those who want to increase their skill level with best practices and solid fundamentals. If you're looking for a Flask book this is a no-brainer.
I thought the same about error checking, otherwise, I pretend to build a more complex script so was good to know better libraries to do that. About the relevance, for me it values a post, I have seen people searching stuffs like that in several languages. About reddit, I don't know, I started to participate now and I have seen links like this one, maybe they are the exceptions. Don't forget that it's managed by the community , up and down votes should be used for this reason. Anyway, ASAP, I will rewriting it using argparse.
Google gives really good results when you look for "command line parsing python" or "command line arguments python"... For the community stuff, I agree that the community will vote, but unfortunately some communities contains so much noise that users stop to use them. By the way, there is other posts on your blog which should be posted on reddit, but that one was really too much trivial.
There will be a chapter on using Flask with Python 3. The rest of the book is probably going to assume 2.7. This isn't necessarily set in stone, but it seems to be the most pragmatic way to go.
The focus is on conventions / best practices. I've based the organization largely on [Two Scoops of Django](https://django.2scoops.org/). Daniel and Audrey did an amazing job with that book, so it has become something of a model for my own.
Thanks for the support Glenn! Here's hoping I prove you right. :)
You are right my friend. I agree with you.
If there is a "big" difference you could have "Python 3 note: " areas to explain them. I think if you do it this way you don't need a whole chapter for explaining Python 3 idiosyncrasies. 
That was the day everybody in China jumped off a two foot ledge at the same time.
Yessir, I love lifting :) Nothing like looking forward to being stronger month-to-month. 
sys.argv is a good place to start but im sure youll out grow it when you want to do complex behavior via flags. check out: http://docs.python.org/dev/library/argparse.html or even http://docs.python.org/2/library/optparse.html
The information is coming from both online research (digging through the mailing list archives, Stack Overflow questions, projects on GitHub, etc.) and the interviews with developers. That's not to mention the things that [my editor](http://bluesock.org/~willg/) catches. :)
This seems like a bit of Python code you had written long ago when you were learning and decided to pull out for a blog post. Part of creating good Python applications is using the standard library effectively (argparse, operator) and using community assets (docopt, clint, etc) to spend your time solving specific problems, not ones that have already been solved.
Something really small I've found useful a lot of times print('-'*80) This prints a line of ---- I use it a lot in IDLE, since it's automatically set to being 80 characters wide.
I love CherryPy as well. Needs better/more tutorials.
I'd totally buy if it was available on Amazon later! Pledged!
Python comes with Ubuntu by default. Just type `python` in the command-line to get the python shell.
sudo apt-get install python python-tk ? edit: python-tk since it's part of python but for some reason the python package doesn't install it
You can try: *sudo apt-get install python* which should give you Python 2.7 and then: *sudo apt-get install python-numpy python-scipy python-matplotlib* to install numpy, scipy and matplotlib. I'm not sure if the same method can be used for other packages.
So, just to drive home the point of error checking- What happens to your script when I pass "q" "n" as options? It crashes, because you don't check the type of the input, you don't try/catch on the conversion of input to int, and you don't check what happens when you actually do the math. So, better than "q" and "n"...I'll pass "100" "0" and get a crash because of divide by zero. Anybody that says they don't need error checking in their script isn't writing a script worth running.
thanks guys! I'm a "super-noob" when it comes to linux. I really know nothing about it so I apologize for the stupid questions. One more though. How do I access the python command line, and python shell? or is this just accessed through the terminal?
As others have already said, it should come already installed. But for future reference, you can unzip a tar.gz file like this: $ tar -zxvf filename.tar.gz Then there's usually a README or some other help file from the archive that should give you basic instructions on how to build the source. 
I'll probably do epub and mobi. PDF backers will get those too.
I'm a pip man myself. Also, use this as an opportunity to wrap your mind around virtualenvironments. You'll thank yourself later. virtualenvwrapper is also your friend :-) Welcome to Linux! Best way to learn is by doing. Edit:[Link!!](http://www.silverwareconsulting.com/index.cfm/2012/7/24/Getting-Started-with-virtualenv-and-virtualenvwrapper-in-Python)
Well thanks, I guess I've been doing it the hard way all this time.
If you want the IDLE program that normally gets installed alongside python in the windows version then you just have to install it separately; sudo apt-get install idle It's a bit uglier than the windows version, but all the functionality is there. You should be able to launch it by typing `idle` into the launcher. That said, you don't really _need_ it. If you want to edit python scripts you can just use a text editor such as `gedit` and if you want to type python code interactively you can just type `python` into the terminal.
When installing software in linux you should almost never download a file from the web. Instead, you should use your package manager. If you want a GUI package manager then you can just search for "Software Center" in the launcher. If you'd prefer the command line, package manager commands usually begin with the words `sudo apt-get`, and you can type `man apt-get` for more information on that.
On windows I'm used to using notepad++ Is gedit or using the terminal a better way to go?
I came across that same problem, I created a dupe.. https://github.com/defnull/bottle/issues/508 but one of the devs posted a neater work-around in my issue submission @get('/', template='index') def index(db): return { 'users': db.execute('select * from users').fetchall() }
I liked the fact that to use bottle it was simply a case of downloading bottle.py, and importing it. I was tossing up between flask and bottle, and bottle was just less resistance to get up and running. Plugins are fairly simple to write too, even though i'm sure plugins for flask are similarly simple to develop
But he wanted verbose...
I like it, probably I 'll use it. Maybe docs need improvements: this stuff &gt; # Generate SomeModel from SomeApp and select FK or M2M values from db &gt; some = mixer.blend('someapp.somemodel', somerelation=mixer.select) is a bit obscure...
I see, it's ugly, but I dont known English :) Pull requests are welcome ;)
Both. You use gedit when you want to write scripts (like with notepad++) and you use `python` when you want to type code in and have it run immediately. gedit isn't the only text-editor available but it's the default one and it's pretty good. 
oops tar xvf butts.tarbzgz2
On Linux, the equivalent to notepad++ is Geany. Try: sudo apt-get install geany
Absolutely! I was a bit sceptical at the beginning, thinking that is was a lot of overhead, but once you start working on parallel on different projects with different requirements, virtualenvs are just magical and very convenient.
Pledged for a physical copy of the book. Good luck. 
Have you thought of trying to post to planet.python.org somehow? Might pickup some more backers. 
http://www.sublimetext.com/2
you accidentally the link
Dude, I love your attitude. Sorry that this is off-topic, but [this](http://jessenoller.com/blog/2011/05/05/on-contribution ) is some guy's view on contributing. The 'motivation' chapter was quite inspirational, and might be semi-related to the topic.
All I can say is that I love you. Selenium and PhantomJS is exactly what I've needed, without knowing I needed it. I've always been cobbling together some mix of requests and BeautifulSoup with a dash of regular expression cobbling to deal with javascript doodads... 10 minutes of this has replaced 4 custom modules.
What's the current view of Gitolite vs GitLab?
One thing I would highly recommend would be [ipython](http://ipython.org/), which is an *enhanced interactive python*. Install it with sudo apt-get install ipython and to start it, in the teminal just type ipython I found it very useful when I was learning python as it makes it easier to just type commands, and see what the outcome is because if you press tab it will give you completion options, so for example you could type import sys sys. and press tab and be presented with (almost) everything available in the *sys* module. *ipython notebook* is also a really cool way to teach/ learn/ present something new.
I don't think it's a lot of work, but it *is* another piece of infrastructure that has to be maintained and managed. The author's approach means that: * He gets to use github's auth instead of managing it himself * If github goes down, github engineers work on bringing it back up instead of an internal devops team or engineer * github can be accessed securely from both internal and external networks. If you want your own pypi server to be accessible from an external network (like heroku) then you're going to have to deal with attacks yourself. * If you're already paying for github private hosting, why not use it instead of paying for another web endpoint that you don't actually need?
What skills do you really have to contribute? I hate to be so... negative, but if you're still learning do you really think you can make a meaningful contribution to an active project? Perhaps write another todo app or something. Static blog generator. The usual trite people write when they're learning.
I really got an appreciation when I started using python for file parsing, mainly processing and pulling data out of giant log files. Lately I've been into making scripts that perform interesting things, such as pulling the top images off /r/wallpaper and applying it as the computers desktop background. I'd recommend finding a task you'd like to automate/improve and figuring out how to do it in python.
Installing things like numpy from source is slow, and you still have to install dependencies like blas through apt. virtualenv &amp; pip are great for pure Python things, but not much fun when you're using a lot of C extensions.
That sounds like fun.
Make an IRC bot! You'd be surprised how little code you need to make a simple one, but you can add so much functionality later on. I learned a lot from doing different small projects like that.
Python Unicode Compact Utils/Library? Where?
Develop a search engine. Check out the Udacity course if this stumps you.
I think you mean "tripe" instead of "trite".
This question comes up at least 5 times a week and the answers are always the same and they are all more or less worthless. The one single answer that fits, is: scratch your own itches. If there is nothing, do something else like sports or whatever.
Splat?! Why did I not know about splat earlier?
It's very important that they lose the method they use to fund their development so that others can make money off of it while giving back nothing in return.
Nice. Good to hear, I'll keep an eye out.
Perhaps I'm the only one running unittest, pytest, and nose side by side on a regular basis, but I always have to look this up. So I finally decided to write it down in one place to save me time in the future. But, as with note taking in school, once I decide to write it down, that very act helps solidify the memory, and I probably won't need to look it up again. Ironic. 
With py.test you can also use the following syntax for testing just a single test class: py.test -q -s test_filename.py::ClassName You can even test just a method:: py.test -q -s test_filename.py::ClassName::method_name 
The letters are like *right* next to each other! And by that, I was being sarcastic, please look up the definition of the words you correct.
&gt; I think I'd enjoy it more if I could help others. And &gt; My work being put to use. Etc. Are you sure?
I agree. In fact, for the first iteration, I wouldn't even touch Python 3. Get the content out there in 2.7.x and then think about adding tidbits about Python 3 throughout. You may want to put up a survey about Python 3 on Kickstarter. See how many people are using it with Flask - or want to. As you probably know, I'd approach adding anything about Python 3 with caution, especially if you are going to be using extensions and third-party libraries. Definitely mention whether a particular extension or library is compatible with Python 3. 
Thanks SirScott, that's just what I was looking for. I've updated the post. 
I pledged 10$ after seeing this announcement here. Indeed thou adding it to other sites like planetpython, newhacker and maybe dzone could boost your effort even more. EDIT: I meant news.ycombinator.com aka hackers news not newhacker :(
Trite is an adjective. If you really meant to use it, you used it wrong. 
I run mine all the time with single : Is it proper syntax to use double? Also, I believe between the class and method, you should have a period, not a colon. Here's my syntax that works in Python 2.7: nosetests -vs test.py:ClassName.method_name
Or even just make some plugins for an existing one. I'd link mine if I weren't on mobile, but there are lots out there so finding one shouldn't be an issue. That way you have a place to put tiny bits of functionality that seem too minor to consider as a separate project. 
I have a bit. A few months ago i bought "A practical Guide to Linux commands, editors, and shell programming." by Mark G. Sobell. I learned very little but I am still looking it over. Surprisingly the only thing in the book I have a good handle on is using the vim
Definitely. Github is a great resource for that, you can find dozens of small apps on there to start off with.
Awesome! Thank you. I think the physical copies are going to end up looking pretty good.
I'm pretty sure it didn't use a WeakKeyDictionary earlier (it was a straight dict), and sadly doesn't note why it's important to use one if you're storing instance data in the descriptor. edit: ah comments in TFA point this out.
I suggest you take a look at this: http://wiki.maemo.org/Maemo.org_team/How_Elections_Work The Maemo elections system seems to be most like what you are doing. However, cryptographically hashing really won't add any security to the voting process. The only thing hashing would do is tie a vote with a voter. However, if the online voting platform generates this key for the voter, then someone who has control of the system, will be able to control the votes. During an election, there is usually less than 100% turnout, and those unused votes can be hijacked by a hacker and used to change the outcome of an election. It may be better to have each client generate their own private key, instead of assigning one to each citizen.
Thanks for the suggestions (and the pledge)! I couldn't find newhacker though. Do you have a link? Also, I'd never heard of dzone before. Is it particularly popular?
Good idea. I think I'll have to either get someone who's already on there to blog about it or get on there myself and write another post about it.
What if this person already knows another programming language and its a simple matter of syntax? Further, I posit that one can meaningfully contribute to OSS despite any perceived or real lack of "experience." I can't enumerate how wrong headed it is to discourage someone from trying to help others. To discourage someone from attempting to create. Everyone and everything starts from somewhere, "experience" is another way of saying, "done this before." Meaningful contributions to programming happen when "done this before" does not apply. Truly ground breaking things do not come from experience in many cases, but from a desire to do something different. So experience, in a lot of cases, can be a recipe to produce the not-so-ironic projects you mentioned. 
I never, ever tried to discourage anyone. I asked *how* they envision their involvement in something. My point was to give them some perspective on their skills, take a step back and really evaluate what they think they can contribute given what they know. If it's not much: that's ok, just take a bit more time doing similar things to what I listed, re-invent the wheel when you're learning, that's ok.
I’d find that harder to pronounce.
Pyblosxom! It's fun, user-friendly and has great comprehensive docs.
What's funny is that I actually gave you the benefit of the doubt and looked up "trite" just in case there was a lesser-known noun usage, thinking I might learn something new. Instead, I find out you're just an asshole being condescending to someone else who wants to learn something. Good on ya.
Cheers brah
Strange in that one that the full stack "Pyramid" beats Bottle for the 'hello world' test, but Bottle wins in the database test.
Easy / Practical / Helping Others / Creating Meaning *[Random Hacks of Kindness](https://en.wikipedia.org/wiki/Random_Hacks_of_Kindness)* * http://www.rhok.org/ * https://github.com/RHoK *[Code for America](https://en.wikipedia.org/wiki/Code_for_America)* * http://codeforamerica.org/get-involved/ * https://github.com/codeforamerica *[Competitive Programming](https://en.wikipedia.org/wiki/Competitive_programming)* * http://www.kaggle.com/competitions * https://projecteuler.net/ [The Architecture of Open Source Applications](http://www.aosabook.org/en/index.html) books are tremendous resources for learning about successful approaches to open source development. ... Read, Code, Test, Write Tests, Write Documentation 
http://www.nasa.gov/home/hqnews/2013/jun/HQ_13-188_Asteroid_Grand_Challenge.html
For anyone in the beginner/intermediate stage, I'd highly, highly recommend picking up a copy of Learning Python. That book is absolutely fantastic. 
any recommended books for starters?
I've read the 3rd edition of Learning Python and it's exhaustive and exhausting. It covers everything including the finer details of pretty much everything. I don't know if I'd read it again because it was a very dull book due to the author's writing style, but I do feel it helped me understand some topics that can be fairly hard to grasp. The new Python Cookbook 4th edition topics look much better than the second book. The second was filled with a bunch of more specialized recipes that I never used. The table of contents for the new edition looks more practical. I haven't read any of the other books listed. Hope that helps.
I wanted to get that one but $25 is still too expensive for me. I'll just wait until I can find a cheaper older edition.
The thing that I wonder do we even need these type of books anymore? Isn't all of this information on the net, stackexchange, /r/learnpython etc? I'm always looking to make my coding better/easier but I'm not sure a book is going to give me what I need. Or, at least, give me what the internet can't.
Yeah, I like the idea of storing any data in the instance itself, which seems much simpler. Possibly just using the name of the property with an underscore in front rather than storing in `__dict__` with the name of the property.
I've usually seen "return from finally" filed under "bad practice".
I don't like abusing finally to mess with the return value. And in this case it seems marginally clearer to just leave off the finally: def f(): try: some_exception_causing_code() if some_cond: return [some_list] except: pass return [another_list] except that if `some_cond` is false at the end of the `try` then.... so it seems like it should be def f(): try: some_exception_causing_code() some_cond = True except: pass if some_cond: return [some_list] return [another_list] `try/else` is a nice addition to the standard idiom (I think the choice of keywords was strange, but then there aren't many keywords that could have been used): def f(): try: some_exception_causing_code() except: pass else: some_cond = True if some_cond: return [some_list] return [another_list] Generally I have only seen "return from finally" categorized as a bad practice. It's kinda hard to decide which is better since there seems to be some branch logic missing (with regards to `some_cond` especially). I am curious as to what all the decision points are.
that's beautiful. like poetry. or *Finnigan's Wake*.
That's hilarious. And a nice example application (as in, reason to apply this tech). I could see something like this used during a timed programmer's practical test.
Self-plug no. 15 ...
Oh, okay. It was on the front page of HN for a little while. I actually just posted the latest update ([Funded in just 36 hours!](http://www.kickstarter.com/projects/1223051718/practical-flask-book-project/posts/513183)) in [/newest](https://news.ycombinator.com/newest). Thanks for the tips.
I like the idea of doing a survey via Kickstarter. I've thought about doing one before, so I might have to put a little more thought into what I want to ask.
http://pythonbooks.revolunet.com/
You may also be interested in [path.py](https://github.com/jaraco/path.py), based on Jason Orendorff's original.
You can also use phantomjs in splinter ([see the docs](http://splinter.cobrateam.info/docs/drivers/phantomjs.html)). Splinter is built upon selenium and easier to use IMO.
&gt; Comparing os.listdir() to ls -l is not a fair comparison in the slightest. ls -l has to call stat() on each file to get the owner/group/mode/timestamp/etc in addition to reading each directory entry, and that's just a lot more syscalls so of course it's going to take longer. That's kind of the point - calling ls would have a much higher overhead than using built in calls. While it may not be scientifically sound experiment it does prove a point that if you are lazy it can have serious effects on the performance of your application. Take [this](http://www.happyloaf.com/reinstall.txt) for example. This is not uncommon - I know of a person with "30 years of experience" that programs like that. (Obviously what I linked wasn't his - but you get the idea). And actually they use the backtick operator in perl instead of system but it probably does similar functionality (disclaimer: not a Perl user). I'm not arguing that shelling could be more efficient - I'm sure there are ways of minimizing the performance impact but I would say most beginner programmers may try to take the easiest path (which in this case - just shell out to ls and parse the results). I argue using built in libraries is usually a much better idea than trying to fiddle with shelling. Edit: context
This fails if you have underscore prepended objects in your dict. 
Misleading title. Discount is only for *ebooks*.
"try to program efficient as possible"? this isn't even wrong.
Here are some issues that you may not have thought of: 1. You imply you are generating a key and sending it to the user anonymously. This requires trusting the authority: 1. to discard the identifiying info 2. not copy the PK and fake the vote 3. not create spurious keys and add extra votes 4. not to send fake keys so some people can't vote. 2. If you are letting users generate their own key, how do you stop them generating two? The obvious solution is to have an authority sign keys, but this requires trusting the authority with (1.1), (1.3) or (1.4) (but with fake sigs). 3. It is vital to ensure the list of votes can't be manipulated to exclude someone, this is hard. 4. It is a common requirement for voting systems for a user not to be able to prove who they voted for (as this allows them to sell votes). This system allows them to prove their vote by showing their private key (or signing other data with it). 5. How do you deal with users who don't understand? (not really security, but important) The complexity must not be too high. You may like to look at Debian's election system (implemented as [devottee](http://www.debian.org/vote/)). They have solved key distribution by using the existing PGP web of trust that Debian has. Their constitiution does not require a secret ballot.
I just switched to Eclipse/PyDev. That was the only thing that worked for me.
No, this was just a function I defined in my script and called.
I will have to look at this. I did not experience this problem in eclipse, but that does not mean my whitespace is correct. I will make sure. Thanks!
The third thing seems like premature optimization. Don't worry about efficiency until 1) you know it's a problem, and 2) you have data that proves your new code is better. Excepting obvious cases, of course, where you KNOW it'll be better and doesn't require you to have to do any extra work (e.g. using xrange instead of range is typically good).
Did I really write the whole post telling people to make mistakes? I don't understand it. That was a typo; I have corrected it and I believe it is better to see the good part of it rather than focus on the tiny mistake. I really don't like having to argue about this but at least understand that I was not trying to intentionally make a grammatical error. Have a good one!
I learned to program with ProjectEuler challenges.
I was not criticizing your grammar, but the idea that you should try to writing efficient code before measuring what parts are fast or slow.
I own most of the python O'Reilly books and while I resort to googling problems a lot (more than looking things up in books) I haven't found anything on the internet that could replace the coherency and organization of a really good book. Books like Learning Python could be replaced by pure google searches in most cases, but I haven't found anything that could replace something like Programming Python that take a really cohesive look at all of the builtin functions and libraries that Python offers, the kinds of things that aren't covered in beginner tutorials and are hard to look up if you don't know what your looking for.
Programming Python, the sequel kind of, to Learning Python is one of the best books they have on Python. While most of the things in Learning Python that beginners want to know is covered online. It goes over everything that actually allows you do things with Python, like network connections, etc. and all of the things that aren't covered in any of the beginners tutorials that I've found, and the kinds of things that are harder to look up when you don't know what your looking for. Truly a phenomenal book that made me realize how powerful Python really was.
Yup... only on **E-BOOKS**
For a personal project, I wrote [ClipManager](https://bitbucket.org/mercnet/clipmanager), a cross platform clipboard manager in PySide (Qt) for Windows and Ubuntu/Arch. I was determined to release it because I wanted a clipboard manager that looked and behaved the same across Windows and Linux. It taught me a lot, and now I am moving on to my next personal project.
There's a bunch of other Path libraries that behave similarly. There's actually two PEPs; http://www.python.org/dev/peps/pep-0355/ (2006 rejected), http://www.python.org/dev/peps/pep-0428/ (2012 pending--last mention I see on the mailing list is from Oct 2012). I worked at a facility that used an OO path library they wrote and loved reading/writing code using it.
It would probably help if you posted your code so that we could take a look and make specific suggestions! 
&gt; Yeah, I like the idea of storing any data in the instance itself, which seems much simpler. It is, and is a pretty common route. It has two drawbacks though: 1. It pollutes the instance's namespace which may be an issue in some (rare) cases, though on the other hand it makes the instance easier to debug (no hidden data in composed objects). It also makes the instance "responsible" for the descriptor's data 2. It precludes the descriptor interacting with instances outside of binding operations, which can be an interesting feature.
Bioinformatics problems at http://rosalind.info
https://github.com/syamajala/KnotContactHomology/blob/master/braids.py the commented out code at the bottom is the example i am interested in.
Descriptors? Is this the same as Decorators? as in: @something above a function?
You can even get the Python documentation on Kindle/tablet. 
In case you're not aware, Python is not the greatest language for deep recursion and parallel processing. Though it's more likely your code just needs to be cleaned up :P
Could someone point out, why and when would you pick ZODB instead of other solutions?
Fur future reference - a Django-Zato integration sample that lets one pull exchange rates from Google or Yahoo! was posted on the project's blog: https://zato.io/blog/posts/django-web-services-integration.html
This pitfall is about security in general, not just cryptography: * A program is correct if everything in the specification works. * A program is secure if everything that is not in the specification does not work. The tricky part is that you cannot test security. The spec is finite and can be tested in a finite set of tests. "Everything that isn't in the spec" is not something finite. You can't test it. There can always be another creative way an attacker can break your assumptions, cheat, and get the program to do something it wasn't supposed to i.e. to break its security.
In the interests of balance, the major disadvantage is that it's a Python-only solution.
Except Qt is pronounced “cute”.
There's nothing stopping it from being pronounced "cutie". Especially if it way QtPy instead of PyQt. As I was writing them, I even automatically pronounced them in my mind "cutie pie" and "pie cute". It probably comes naturally with the order of the letters :)
[pfft](https://bitbucket.org/tdammers/pfft/)! The idea isn't mine though. I've seen similar libraries for Common Lisp and Scheme, although I can't currently seem to find a link. For Haskell, there's [BlazeHtml](http://jaspervdj.be/blaze/), which does mostly the same, but libraries like [HSX/HSP](http://happstack.com/docs/crashcourse/Templates.html#hello-hsp) take it a step further, embedding *actual HTML* inside native source code (this is a bit hacky though, since they hook a preprocessor into the compiler via language pragmas to make this possible). And there appears to be a rather solid Python library (more solid than mine in any case) that does more or less the same, too, but I can't remember the name of this one either.
During the install process few tricky parts * bash isn't sh so the test syntax [[]] failed * libevent-dev is required by gevent but isn't managed by pip * argparse is not available in "old" Python 2.6.6 Using the script * no autocommands to keep it "clean" yet an error when starting the script without defining the autocommands variable * by default the server log of the script is visible, g:vimfox_debug didnt help e.g. 127.0.0.1 - - [2013-06-20 12:39:32] "GET /socket.io/1/websocket/340896709706 HTTP/1.1" 101 - - * red/green square indicator, what is this for? (green connected to server, red disconnected, orange..?)
Got a few more disadvantages there? (edit: python only is not too problematic, particularly in /r/Python - I'd like to hear if it has any disadvantage compared to MongoDB or other solutions I can use in python )
Well, I'd add that until recently ZODB seems to have been fairly unmaintained. Also, the documentation is scattered over the web and could be a lot better. I don't think there are any ZODB books.
Nope. Read on my friend..
Replication? Failover? 
Thanks for your comment. 1. The template was a free one. It came like this. But I will edit it and try if it works. 2. I don't know how this can be done. If I find a way to do it like a playlist, I will. But right now I don't know any.
I have used ZODB extensively in a hobby project. If you don't have to scale it, it's great. Writing serializers for ZODB is *significantly* easier than using an ORM or writing a serializer for mongoDB. ZODB is not a good replacement for redis, which has pubsub built in... which is a technical advantage. ZODB is in many regards a logical equivalent to mongoDB but it stores pickled python objects instead of BSON. The technical differences between the two can be derived from that. It's dead simple to write for, but I can imagine a number of typical use-cases where mongoDB would be faster in production.
There you go. The first one is done.
That link is just a list of stuff that will break if you switch the imports from PyQt4 to PyQt5, it doesn't list anything new.. Since PyQt is just bindings to the C++ library, [the new things listed here](http://qt-project.org/doc/qt-5.0/qtdoc/qt5-intro.html) are available in Python too, and I imagine most of [the new functions and classes](http://qt-project.org/doc/qt-5.0/qtdoc/whatsnew.html) are too
some of your recursive functions appear to be tail recursive, which can be easier to turn into iterative functions.
How do you query ZODB?
I think the function that is causing most of the problem is expand_help. phi_b_help can probably be rewritten iteratively, but the way it is written now doesn't seem to cause any problems. 
ok, but wouldn't you go with a graph database for graph storage? also it would be nice to know a real world use case
&gt; Just a quick tip - you don't have to transform your source coordinates to get sensible looking plots in matplotlib. Just call "axes.set_aspect('equal', 'datalim')" on your axes and any projection will drawn nicely without the squished-ness. That's broadly what I did. (See the `axis('equal')` call.) The squashedness is because, at the UK's latitude, one degree East is not the same distance as one degree North. 
Here are the results of running yours: @dev-vm01:~$ /usr/bin/time -v python switch.py with_shell Command being timed: "python switch.py with_shell" User time (seconds): 0.68 System time (seconds): 2.01 Percent of CPU this job got: 85% Elapsed (wall clock) time (h:mm:ss or m:ss): 0:03.14 Average shared text size (kbytes): 0 Average unshared data size (kbytes): 0 Average stack size (kbytes): 0 Average total size (kbytes): 0 Maximum resident set size (kbytes): 3720 Average resident set size (kbytes): 0 Major (requiring I/O) page faults: 0 Minor (reclaiming a frame) page faults: 301015 Voluntary context switches: 2999 Involuntary context switches: 2593 Swaps: 0 File system inputs: 0 File system outputs: 0 Socket messages sent: 0 Socket messages received: 0 Signals delivered: 0 Page size (bytes): 4096 Exit status: 0 Results of mine @dev-vm01:~$ /usr/bin/time -v python switch2.py Command being timed: "python switch2.py" User time (seconds): 0.61 System time (seconds): 2.06 Percent of CPU this job got: 76% Elapsed (wall clock) time (h:mm:ss or m:ss): 0:03.50 Average shared text size (kbytes): 0 Average unshared data size (kbytes): 0 Average stack size (kbytes): 0 Average total size (kbytes): 0 Maximum resident set size (kbytes): 3684 Average resident set size (kbytes): 0 Major (requiring I/O) page faults: 0 Minor (reclaiming a frame) page faults: 352951 Voluntary context switches: 2501 Involuntary context switches: 1669 Swaps: 0 File system inputs: 0 File system outputs: 0 Socket messages sent: 0 Socket messages received: 0 Signals delivered: 0 Page size (bytes): 4096 Exit status: 0 Specs: Ubuntu 12.04 VMWare Player 3052MB RAM 1x 3114.349MHz Processor (as reported by /proc/cpuinfo) It would appear if you ran mine it would also run in ~1 second. I think the reason the times are really different are due to the difference in processors. I'll bet if I assigned more processors it would handle the context switching better.
Nice, thank you :)
&gt; ok, but wouldn't you go with a graph database for graph storage? There are certainly cases where a graph database will be more appropriate. ZODB is really about persistent Python object graphs, whereas graph databases can be used for graphs of any kind which don't necessarily correspond to objects in your program. &gt; also it would be nice to know a real world use case The [Plone](http://plone.org) CMS uses ZODB for storage.
It is too good to be true. There are *always* tradeoffs when making technology choices. How those tradeoffs play out depends on your particular application.
I've never used it, but here you go: [Zope Replication Services](http://www.zope.com/products/x1752814276/Zope-Replication-Services).
While I'm not sure I would use this library (functional programming at this level isn't really my thing), the idea certainly appeals to me. I've watched your library, and will keep rolling it our in my head for a while. There are a couple of cool things I'd like to implement for it, but there's only so much time in the day :( Off the top of my head - it would be cool if you could implement the HTML5 specification, so that an exception would be raised if an element were used in a disallowed way. For instance - if you tried to insert two `head` element, a `SpecificationError` might be raised telling you not to do that. Better yet, define the spec in a logical and documented way and provide hooks in the library, so that multiple specifications could be added in the future.
ZRS is now open source as zc.zrs in pypi
Also, throw on some Bootstrap on that website! Also, so much screen real estate going unused, you have way too much whitespace. Functionality is pretty good, but the design is really unfriendly. [Tubalr](http://www.tubalr.com)'s design may serve as a good reference. 
It hasn't been unmaintained. It's just mostly stable so it doesn't see a lot of changes. I think porting to Python 3 is the next big effort. In fact replication was open sourced just last month.
Think of it as a disk-based memory. You connect to it and get a root object, then reference the object and it's contents just like any other python object. It can be a dict, list, tuple, custom object or any thing else, nested until you run out of disk space.
I'm not any good at designing, unfortunetely. I found this one online actually. But I will take some designing courses after the summer holiday so it should be good. In the meantime, I think I can keep it simple without messing it all up.
What do you get for the wall clock elapsed of my version without `with_shell`? It's the ratio that should matter, not the absolute values. I specifically chose `/usr/bin` to list because it has a good number of entries. If you're doing `listdir('.')` of a dir with only a few files, that's just going to be measuring meaningless noise. 
:)
If this is your product: the boxes aren't quite large enough at the "Deploy in a second" section. The words at the bottom of the "Manage the clustering" and "No lock-in, nor entry or exit costs" boxes are on top of the border, making them difficult to read. Firefox 21.0/windows 7. Similar problem in IE 9.0.8 ("Manage the Clustering" box only).
mongo is a key/value store.. that's about it.. and its good at that.. but ZODB shines in that its an object store with multi-undo capability, scalable, and purpose built for content management. ZODB in conjunction with a CMS/CMF also has a good security model as its per object. try that in a relational model. 
huh? unmaintained? you just crawl out from a rock? I've been using ZODB for years.. Its fairly active, Jim Fulton and the folks at Zope Corp have been keeping it up with the community for years. It just works.. i guess its just not sexy enough
[seems alive here.. just was looking the other day actually on the work that's going on with ZTK](http://www.zodb.org)
as said before Plone uses ZODB (although isn't to that). Real world use case is CIA, FBI and if you want more [common ones check here.](http://plone.org/support/sites)
&gt; huh? unmaintained? Fair enough. Perhaps quietly maintained but un-promoted would be more accurate. You rarely hear anything about ZODB, in spite of it being so fabulous and the site has been down for a while. 
Does anyone know of a service that deploys/manages/whatever in my servers? Basically i enter ssh keys of my servers and it install my python app?
ok thanks, i know about plone, but thats pretty much it. i just don't know of any other real world use case other than a CMS like Plone. it seems to be a very interresting system, but i think you have to "get" the conceprs behind it before you can use it. i wonder how it compares to SQL/noSQL databases in terms of simplicity, performance, scalability, security and whatever else potentially could be important.
You could profile the code so you know the impact of each function
Saw the post's thumbnail and was wondering what Atari had to do with this...
you're absolutely right in ZODB in being un-promoted as a "current and sexy" storage solution. methinks most of the reason is because its become more of "utility" or "component" (perhaps incorrectly) for other software projects. It was Python's original "killer-app" in that it gave you a native store to go along with the then nascent language. If you develop in Django, Pyramid, Turbo-Gears etc, you can (thanks to eggs) make ZODB part of you project if you wish. Today with Plone for example, its just another under the hood component.. I run buildout, it gets called in and installed by the pip/easy_install and then it works so well that you don't even know that its there. You can also use ZEO (zope enterprise objects) to load balance and scale a ZODB across multiple clients. My Plone cms spans 3 VM's with 16 zope clients each with one ZODB. I'm posting on the zone dev list later today to let then know that their site isn't resolving correctly (only on www.). THis has been a great thread so far in that our conversation alone is talking up the project.
Lispy HTML! This may be a helpful approach to Adding [microdata](https://en.wikipedia.org/wiki/Microdata_\(HTML\)) for the [schema.org types](http://schema.org/docs/full.html). From [webhelpers](https://bitbucket.org/bbangert/webhelpers), [webhelpers.html.builder](http://docs.pylonsproject.org/projects/webhelpers/en/latest/modules/html/builder.html) utilizes [MarkupSafe](https://github.com/mitsuhiko/markupsafe) to do something similar. 
I'll just leave this here https://github.com/magcius/toenail/blob/master/ailment.py#L168
I'm not sure what you mean by "Zope solution". Using ZODB doesn't require using Zope.
Have said no to Facebook. So dear Sir, i would politely turn down the offer. 
i'm known to make exceptions. :) if you are interested, you'll def. get the link. best!
I'm sorry, I saw an opportunity to be contrarian and edgy and I couldn't resist. 
What the hell is this?
Cannot even watch the youtube ad as the permissions are wrong.
www.zodb.org works
Yeah, this problem was a bit on the trivial side.
https://github.com/ansible/ansible/fork
Thanks for the reply. I really appreciate this. - replaced the bash syntax with sh syntax - libevent should be installed using your package manager. As i understand it pip can't install c extensions - the install script now tests for availability of argparse and will install the module if required. the script - vimfox will now set the g:vimfxo_autocommands var if it hasnt been set by the user - I managed to suppress most of the log messages of the server. Still trying to find out how I can silence the HTTP request log - the status indicator should be green. This means the websockets are initialized and in contact with the vimfox server. Orange means something went wrong with the last reload request, hover over the the status indicator for more information. Red means the websockets could not connect / are dicsconnected. Thanks again!
it's meant for beginners. plus, that answer is incorrect.
Sorry, I was mean, just couldn't help it. I'm retiring it. P.D.: I've worked with it, you can't fake that hate.
Prerequisites: "zc.lockfile, ZConfig, zdaemon, zope.event, zope.interface, zope.proxy and zope.testing". I'm not sure you're clear on the definition of "require".
I mean... if you need all the middle steps to happen as well: def doubling(i): return i * 2 def double(x): store = {} for i in x: x[i] = doubling(i) return store Even with the doubling function, I'd still rather do: def double(x): return {i: doubling(i) for i in x} or, worst case: def double(x): return dict(zip(i, map(doubling, i)))
Seems to fill a need that has already been filled with really good software. 
Given the trivial nature of the problem, you may want to consider x-posting to /r/learnpython. You'll get a lot less snarkiness there.
Because a ManyToMany require an aditional table. With a OneToMany, only one ForeignKey is needed. The OneToMany would be more efficient in time that the ManyToMany.
Sure, ZODB has some dependencies from the zope ecosystem; my point is that it doesn't require a full Zope app server. Those dependencies are pretty small and you'll probably never interact with them directly.
That hair split very nicely. But seriously. ZODB exists on top of multiple Zope libraries. Using ZODB leaves you open to any and all changes to those libraries. ZODB is utterly a Zope project -- it's right in the freaking name. 
&gt;Historical. The ZODB predates the era of robust open sources databases (e.g. MySQL and PostgreSQL). You've got that backwards. Both MySQL and Postgres came out several years before ZODB.
I really, really like this. Being able to use the Unix-style path separators is simple and intuitive. I went ahead and forked your repo and hope to get the time to thoroughly understand your codebase. Just a note, though - importing this as `path` strikes me as a bad idea, because it would be very easy to lapse into using it as you would expect `os.path` to work.
Why are people being so cynical? Even though this event is probably helping him promote his Python training courses, however this meetup is FREE itself, and he published the problems beforehand so that people can decide based on his/her Python skills. Even today, I still feel grateful that when I developed my first Python script at work, my co-worker kindly pinged me and pointed out that "keys in dictionary have to be unique", instead of thinking/joking around that I was newbie and dumb. 
I don't like the choice of var names.
pussy
Yes but diversity can also be a good thing and salt is a pretty amazing project to build upon.
Significant cost savings because a simple program is more likely to work on the first try. For more complex code, a prototype written in Python can be read by, um, a cheaper Programmer for implementation in the required target language - C, Java, whatever is required.
well there is a fair amount of diversity. I'm all for people doing stuff for fun, but there is way too much reinventing the wheel in the foss world. Thought there was already an established one in python but I think i'm wrong - in which case I retract my opinion. 
You mean function names?
My very verbose answer, following all the instructions... number_list = [2, 3, 4, 6, 8, 1, 11, 14, 3] def double(the_list): '''Put the doubled numbers into a dictionary.''' the_dict = {} for item in the_list: the_dict[item] = doubling(item) print the_dict def doubling(a_number): '''Double a number and return it.''' return a_number + a_number double(number_list) It was way too trivial for me, but good luck with it, I like the idea.
could you please be more specific and name some?
[Zenoss](http://community.zenoss.org/index.jspa) is python (zope) but is pretty complicated and robust. I've been wanting to try salt so I think I'll try this too on my personal server. 
Another Zope based software that uses ZODB is [Zenoss](http://community.zenoss.org/index.jspa) which monitors servers, network appliances, etc. It stores events in mysql and everything else in ZODB. In version four they switched from ZEO to [RelStorage](https://pypi.python.org/pypi/RelStorage) (ZODB using mysql for storage instead of the Data.fs file).
&gt; ok, but wouldn't you go with a graph database for graph storage? The ZODB *is* a graph database. Objects in the ZODB are arranged in a directed possibly cyclic graph that starts at a root Persistent dictionary.
thank you. (1) it's free (2) if it's too easy, then don't come (3) if there is something that you'd like me to go over, then make a suggestion rather than just criticizing me (4) sure, i want to promote my courses, but i also earnestly do want to help people (5) the best programmers do not necessarily know how the best technologies, there are plenty of soft skills. empathy is [huge](http://skillcrush.com/2013/06/20/are-you-too-old-to-learn-how-to-code/#comment-936510150). 
The very concept of "Zope solution" you allude to, is simply an oxymoron in this scenario you present. You see, almost a decade ago, the "Zope monolith" was split into many, many small and independent packages. The ZODB and those deps you list are good examples of that. As such, ZODB isn't a "Zope solution" -- it merely requires some open source packages that happen to start with the namespace name `zope.` for legacy reasons, but that's it. Or are you prepared to call Twisted a "Zope solution" because it uses `zope.interface` and `zope.adapter`? This "Zope is a single exclusive monolithic ecosystem" meme needs to die real fast. Please stop spreading it.
Here is yours @dev-vm01:~$ /usr/bin/time -v python switch.py Command being timed: "python switch.py" User time (seconds): 0.09 System time (seconds): 0.19 Percent of CPU this job got: 93% Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.31 Average shared text size (kbytes): 0 Average unshared data size (kbytes): 0 Average stack size (kbytes): 0 Average total size (kbytes): 0 Maximum resident set size (kbytes): 3724 Average resident set size (kbytes): 0 Major (requiring I/O) page faults: 0 Minor (reclaiming a frame) page faults: 1052 Voluntary context switches: 1 Involuntary context switches: 15 Swaps: 0 File system inputs: 0 File system outputs: 0 Socket messages sent: 0 Socket messages received: 0 Signals delivered: 0 Page size (bytes): 4096 Exit status: 0 Here is mine @dev-vm01:~$ /usr/bin/time -v python switch2.py Command being timed: "python switch2.py" User time (seconds): 0.02 System time (seconds): 0.02 Percent of CPU this job got: 67% Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.05 Average shared text size (kbytes): 0 Average unshared data size (kbytes): 0 Average stack size (kbytes): 0 Average total size (kbytes): 0 Maximum resident set size (kbytes): 3660 Average resident set size (kbytes): 0 Major (requiring I/O) page faults: 0 Minor (reclaiming a frame) page faults: 1036 Voluntary context switches: 1 Involuntary context switches: 6 Swaps: 0 File system inputs: 0 File system outputs: 0 Socket messages sent: 0 Socket messages received: 0 Signals delivered: 0 Page size (bytes): 4096 Exit status: 0 This is using: x = subprocess.Popen(["ls", "-l", "/usr/bin"], stdout=subprocess.PIPE).communicate()[0] On my example: Command being timed: "python switch2.py" User time (seconds): 0.01 System time (seconds): 0.02 Percent of CPU this job got: 74% Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.05 Average shared text size (kbytes): 0 Average unshared data size (kbytes): 0 Average stack size (kbytes): 0 Average total size (kbytes): 0 Maximum resident set size (kbytes): 3660 Average resident set size (kbytes): 0 Major (requiring I/O) page faults: 0 Minor (reclaiming a frame) page faults: 1036 Voluntary context switches: 1 Involuntary context switches: 7 Swaps: 0 File system inputs: 0 File system outputs: 0 Socket messages sent: 0 Socket messages received: 0 Signals delivered: 0 Page size (bytes): 4096 Exit status: 0 I should mention this in on Python 2.7.3
I actually started the same thing yesterday, but I did it on heroku following https://devcenter.heroku.com/articles/python. Seems much easier than using Beanstalk. But apparently becomes much pricier when you start getting traffic.
[First-Order Logic](http://en.wikipedia.org/wiki/First-order_logic) [Algebra of Sets](http://en.wikipedia.org/wiki/Algebra_of_sets) [Relational Algebra](http://en.wikipedia.org/wiki/Relational_algebra) [Relational Database](http://en.wikipedia.org/wiki/Relational_database) (1970) [Codd's 12 Rules](http://en.wikipedia.org/wiki/Codd%27s_12_rules) (1985)
I don't like your tone either
&gt;Transparent references between objects without the need for reference swizzling. Does ZODB maintain [referential integrity](http://en.wikipedia.org/wiki/Referential_integrity) and/or [propagation constraints](http://en.wikipedia.org/wiki/Propagation_constraint) so as not to leave [dangling pointers](http://en.wikipedia.org/wiki/Dangling_pointer)? 
I'm curious. Do you have 16 zeo clients and 3 VMs all serving traffic? Or is one VM for editors and two for the outside world or something like that? We have two VMs, one for editors and one for outside world with varnish. 9 clients total.
[He doesn't like you](http://www.dadsbigplan.com/wp-content/uploads/2010/08/he-doesnt-like-you.jpg)
As someone that has put each of these into production, I have not been satisfied with any of them; so I'd love to see more competition! IMHO, Xymon (Hobbit) has been my favorite so far, just because it was so dumb simple to get running and was extremely functional at what it does. It just feels really dated at this point. P.S. I *hate* SNMP
I like the idea. I worked on something similar a while ago, I was inspired by the seaside canvas framework... https://gist.github.com/malby/3087622 However I found the built in bottle simpletemplate was just faster because it compiled the templates into python byte code after the first pass. I wanted to change my HtmlCanvas into some sort of generator, so the final result could be cached, but I'm lacking the skills
Could you please share some of your hate on SNMP? I have to dive into it soon, would really appreciate some info. 
I don't object to the api, but the explanation on what it actually does is a bit lacking.
You're basically picking and choosing whatever criteria fits your love of ZODB. If you've been around that long you know as well as I do that ZODB had a plethora of its own problems at the time, and moreover, that it never found anywhere near the uptake of MySQL/Postgres.
Although I’m not sure what *proper* you said does exactly mean, have you tried [Wand][]? [Wand]: http://wand-py.org/
You live in a fantasy world.
currently pillow is the PIL still being updated/maintained (https://github.com/python-imaging/Pillow)
It's been awhile since this post but I just saw your comment. All the time in multi-threaded applications, especially when a GUIs involved and you want it to remain responsive. Though queue's tend to take the brute of what you'd use signals (events or publisher-subscriber pairs in other languages) for in Python. I totally agree that if used inappropriately these can be hell to debug, but if you keep appropriate function names and tags on which functions are consumers and providers then signals are precisely what you use for tying buttons or user actions to background threads. Another good use is having multiple listener threads working on retrieving data from say, user input, network signals, or other different technologies, then those threads can handle accepting the input, formatting it, and shooting it off to a standardized consumer that runs once for processing then closes. Much lighter on memory than having another thread set up to pull from a queue constantly, though you'd need to balance out cost of startup vs. cost of constantly up. A bonus is that, for me at least, thinking of user input in the form of signals tends to be more intuitive, not to mention you get used to working with them a lot if you use just about any GUI framework.
Anything I ever did in PIL, I now do with the [OpenCV](http://opencv.org/) bindings. Not exactly a replacement, but pretty good for basic image processing.
Don't shell out ... unless there are years of development behind a C-based console application that does *exactly* what you need to do. Sure you could reimplement the logic in python but that would be a major diversion of resources and a fork of the business logic. Instead embrace python's ability to shell out *when necessary*. FWIW, shelling out to very domain-specific C-based console binaries *increased* our speed 100X compared to comparable pure-python code. Yeah, Cython, etc might approach the speed of our C binary but the C code is tested, maintained, vetted and works faster than anything else we could hope to write in our budget. 
I tried out kernprof and I've been able to do a little better in expand_help() by converting some for loops to list comprehensions, but I still can't expand the list I want. 
Neither are readable. Just use a fucking if/else.
Whatever dude. I'll let others be the judge of you. You can keep your decade-old preconceptions if they make you happy.
Ah. Insults. I see. What you just told me is a manipulative attempt at shaming me by implying that I am crazy. Like I said I my other post, *whatever, dude*. You can keep your preconceptions, I do not care. I'm not going to interact with your emotional reactions to facts you dislike. Bye. Anyone else is free to ask me for details about the bad old days of MySQL 3. Those sure were fun.
Gmond/Ganglia/RRDTool, Collectd/Graphite
Python does have an interface to Gimp iirc.
Thanks. It's fixed !
Also,[SimpleCV](http://www.simplecv.org/) is a wrapper for OpenCV that I've been playing with at work. I'd recommend it.
For me, using ZODB in applications that involve user definable schemata works really well. Sure, you can do it in SQL, but your choices are modifying the schema on the fly or having more general data item tables that don't logically map well to what the data is. Using ZODB I can really easily fiddle with objects, which is either a blessing or a curse, depending on how good the original developer was.
Running vector6 = [83, 104, 117, 116, 100, 111, 119, 110, 32, 47, 114, 32, 124, 124, 32, 115, 117, 100, 111, 32, 114, 101, 98, 111, 111, 116] ''.join([chr(x) for x in vector6]) Looks enough to tell you what's supposed to happen here... But it doesn't seem to be very testing of advanced python code, only whether you like translating lists of ascii encoded characters.
Don't like how it's injecting itself into the stdlib's namespace [unipath](https://github.com/mikeorr/Unipath) is a great OO path lib for python.
I thought that Pillow was a fork made to allow for Python 3 support due to the deadness of PIL.
That is correct, however the documentation is limited to nonexistent. 
I told about documentation. I understand that it's ugly, but Im doing them as I can.
I have no idea of the purpose, but it looks like a partial Java implementation.....in Python.
I knew about this for some time. Did you reach any important milestone that prompt you to post it here ? Anyway this sounds really cool. B.t.w. I have written [python-pickle](http://hackage.haskell.org/package/python-pickle) to serialize/deserialize using the Pickle format. It doesn't implement everything, is for Python 2.x, but it may have some interest to you.
It also installs on a debian install without requiring you to symlink .so files all over the farking place.
&gt; I made it for fun and to learn how CPython works 
I'd suggest not using the word "signal", and instead, call what you're talking about "events" and "event handlers".
To really design a strong crypto system ,you'll should use mathematical proofs to show they are secure under your threat models. According to some authors even this doesn't give 100% guarantees, because it all depends on your chosen attack model. 
I thought there was already ZODB3 that supported Py3?
Ah, this is why I shouldn't browse reddit until I've had coffee 
I prefer OpenCV over SimpleCV (just a personal preference), but [skimage](http://scikit-image.org/docs/dev/api/skimage.html) is also worth a look if you like the matplotlib way of doing things.
I wasn't implying.
I renamed the command from VimfoxReloadBuffer to VimfoxReloadFile. I forgot to update the docs. My bad. I just did a clean install to see one of the last commits broke the plugin but it is working at my end. By default vimfox will first check whether the file has been modified before sending the reload command. You can force a reload by adding a 1 to the Vimfoxcommand. If you open the css file in vim, enable vimfox, reload the page manually one time and then enter the following command: 'VimfoxReloadPage 1' does it refresh the page in the browser?
No, even with 'VimfoxReloadPage 1' I still have have to manually refresh. Btw I still see socket requests if I manually refresh the page..
`global ext`?
you are the only one actually visiting the site it seems :)
Wow, this is full of bad practices like ignoring loads of important pep8 warnings, entering your password for services in other untrusted services that you know will store it unencrypted and whatever more. Pretty sure there are lots better solutions to what it is what they're trying to do in their very typical un-thought-through webdeveloper mindset.
Not really about optimism. This reddit isn't targeted towards people learning python. that's learnpython's focus. Since that's what this post is about, it really fits better over there. 
Well I think it depends on what domain you're working in. In C# I do call them events and event handlers, but if I'm working with PyQT, PySide or most any Python GUI framework they're explicitly called signals in the code and documentation, so it would cause more confusion to call them events in that context. I do agree that it's important to distinguish them though as I did in my previous comment.
well, at least there's [git-annex](http://git-annex.branchable.com/) now.
SNMP is a pain but it does do it's job well. I do agree, none of them are truly complete - but that's my point, why start from scratch and ending up incomplete as well when you could improve on what exists - either by patching, or if they aren't down with your goals forking. Again though I don't know the developer or why he started from scratch. It could simply because he wanted to write something from scratch for fun to learn some new software/libraries - I totally get that. And like I said somewhere else, none of the big tools are in python which means it's a worthwhile venture. (though I still retain that python is totally unsuitable for the web but that's an entirely different subject)
Never tried/heard of chef or puppet. Not sure what you have against ruby it's just a different/arguably better (from a syntax and language feature perspective, python destroys ruby on mature library support which is why I tend to use python) Totally bullshit to need your name and email to get their source and I would suspect it's not okay for me to get the source and post it to github - in which case I would not call it free opensource software. If we are talking about license stuff though, this software has a sorta odd license. It looks like they just kinda made it up instead of using the GPL or BSD or some established license. ( https://github.com/lincolnloop/salmon/blob/master/LICENSE ) I'm not really an expert or know at all what i'm talking about though when it comes to licenses. 
bonus points if you can make it work together with vimwiki, so one could edit vimwiki pages, then vimfox would automatically do the rest behind the curtain: convert those wiki pages to html and show the updated content in the browser
Pretty handy tutorial. I don't do image stuff but it's nice that for the super common and easy tasks there is a dummy friendly tutorial. 
Little confused why I would use this.... Initially I thought it might do something fancy like generate me a fancy table of variables and data structures... (pass in a big dict or array with dictionary or array objects in it - and have it generated in a table) This just makes functional programming people happy I take it?
My goto thing I suggest to people with these sorts of questions is make a game. The structure involved in creating most types of games forces you do learn certain specific features of the language you could otherwise get around (probably in a way purists would cringe looking at, but you can hammer a nail with a screwdriver - trust me I have done it) Making a game also provides you with some instant gratification (least for me) seeing a window popup, and some pretty colors and lines moving is cool. Because it's a personal project you can do things.... not sure how to put it, not the best way (different from what I said above) for instance you can cater the way you create a game based on what you are trying to practice or learn, like creating a linked list or implementing a bst (which would be easier, result in less lines of code and probably run faster if done in a pythonic way) Check out pygame, it's pretty fun, TONS of examples and you can get a window showing up in a few lines of code. 
hell I have written programs like this to achieve one task that only needs to be done once. Most recently was mangling some output from a command to be dumped into another command. I basically had some broken flac files mixed in with a whole bunch of good ones causing MPD to choke so I had to get a list of all the flac files, run those through flac tool to check them for errors, then from that output I had to remove some characters and add some so my move script worked correctly. It all could of been done in bash with sed and awk, but you know I was like fuck that, I don't know those tools and this will take me 5 minutes in python so that's what I did. I could of used that as an opportunity to learn awk, sed and cut, but I wanted this done so my music would work. '/'.join(line.split('/')[2:]) ftw. Worse is I bet someone here will tell me I could of done that in a better way. 
No, of course not. You were just being an *intolerant bully* to people who disagree with you. I'm sorry for you, because you could only have been taught to be a dick *by example*.
matplotlib?
ZODB3 is a meta distribution that pulls in other eggs needed for ZODB when using zope. See the setup.py here: https://github.com/zopefoundation/ZODB3
pygal isn't bad, and produces SVG/PNG graphs of varying types
These were slides are from a talk I gave last night at the SoCal Piggies (Python Interest Group) here in LA (join us next time if you're local!). The idea behind the talk was to present some simple solutions for small teams to incorporate practices to improve validation, testing and integration. They're likely short of *best practices*, but still some accessible solutions for us freelancers and small teams that don't have the support of dedicated DevOps or QA. I know slides really only tell half the story (at least hopefully my actual talking voice adds something), so if there's interest, I'll create a blog post out of this talk.
I used to have a whole bunch of links bookmarked on this topic but the only one I found isn't relevant to python. I'm looking forward to getting home and fiddling with the script. Getting off topic, do you have any good resources on similar image processing? Taking a small segment of an image, specifically a map and identifying the location? 
Really cool project. I wish I knew Haskell. What was the reason you decided to do it in Haskell and not Python itself?
Pillow is maintained as fuck! :-) Also note that in Pillow, the only supported way to import Image is `from PIL import Image`. In Pillow 2.1.0, we'll take that a step further and retire support for `import _imaging` (at which point you'll need to do `from PIL import Image.core as _imaging`).
interesting angle
Gnuplot.py is a binding of gnuplot, which has some pretty nifty capabilities and great documentation. I use it for all my plots.
Also, thanks for posting. I'm always interested to see what others are doing for deployment as I try to refine my deployment process. I'm curious (again) why you have this fabric step: &gt; clean (remove .pyc's) I never do this. I assume it must have caused issues for you in the past?
Yes, I do this. Same for cron scripts, ex: (on ubuntu) &gt; ln -sf /srv/projects/example.com/config/etc/cron.daily/backup_logs /etc/cron.daily/ I've actually switched over to using salt-stack (which is also in version control) for these config and cron scripts, but the soft-link from version control is a great way to ensure your configs are properly captured and versioned.
For me, the killer feature of ZODB is the distributed object cache that it maintains on the clients. When your hot data is in that cache it is incredibly fast as there as there are no database round trips needed before serving your page. The drawback of that approach is that queries can only be run on the client, so the index objects have to be fetched before the query can be run.
Yeah, the most common case is when you update your git clone and the updated revision removed some .py files. Since *.pyc is in the `.gitignore`, python will still pickup those old .pyc files lingering around despite the source file having been removed. People also tend to write post-commit hooks to clear .pyc files to solve this same problem. edit: *post-checkout* probably rather than *post-commit*
Mild plug: if you're interested in continuous code quality checking (using pylint, but pep8 and pyflakes coming soon), check out my project, http://landscape.io It's rather beta, and I hadn't planned to 'release' this for another few weeks, but please try it and let me know what you think.
**[Is Python a good tool for Data Visualization?](http://www.reddit.com/r/Python/comments/1ankk4/is_python_a_good_tool_for_data_visualisation/)** [Playing with SVG Graphics in Python](http://www.reddit.com/r/IPython/comments/1f8rsr/playing_with_svg_graphics_in_ipython/ca8hzah) (/r/IPython) **[Vega - a JSON visualization grammar for visualization designs in HTML5 canvas or SVG](http://www.reddit.com/r/visualization/comments/1dv3zg/vega_a_json_visualization_grammar_for/c9u44g7)** (/r/Visualization) 
EDIT: join = on Architecture is x86 (i386) 
* http://scipy-lectures.github.io/intro/matplotlib/matplotlib.html#quick-references * http://scipy-lectures.github.io/intro/matplotlib/matplotlib.html#colormaps * http://scipy-lectures.github.io/intro/matplotlib/matplotlib.html#galleries * http://tonysyu.github.com/mpltools/auto_examples/index.html#style-package * http://www.reddit.com/r/Python/comments/1ahppf/clean_ggplotstyle_graphics_for_matplotlib_using
[EasyViz](https://code.google.com/p/scitools/wiki/EasyvizDocumentation) has an API similar to Matplotlib and bindings to "Gnuplot, Matplotlib, Grace, Veusz, Pmw.Blt.Graph, PyX, Matlab, VTK, VisIt, OpenDX".
https://github.com/mher/chartkick.py creates charts with Google Charts and Highcharts.
It would be great if there was an [IPython extension](http://www.reddit.com/r/IPython/comments/1g1j1v/ipython_display_hookery/cagp0p1).
There is a new HTML5 Canvas backend for matplotlib: http://matplotlib.org/users/whats_new.html#html5-canvas-backend (https://code.google.com/p/mplh5canvas/)
we've got an nginx frontend with haproxy balancing. two boxes with 16 zopes with one zeo. I was thinking of setting up a bifurcated environment such as yours but time didn't permit.
Thanks! http://gnuplot-py.sourceforge.net/ 
I just checked this out.. my god this is soooo awesome. my DR strategy has just improved nth!
I don't use Matplotlib because I find the Matlab style plotting unnecessarily difficult both to use and to document effectively. The reason I like Gnuplot.py is that the plotting is as simple as writing a gnuplot script but I can get the data in and do scripting with python. From a programming point of view, it's a very inelegant solution (meta-programming via string formatting? lol). However, because I know both tools well and they're both very good at what they do, I get good results with a minimum of fuss and work. From a user perspective, it's very nice.
can't one just switch to Jinja ?
From sysadmin point of view, most important things are: - using argparse(or anything similar), so I can run it with -h and get summary of options - having -v option for verbose output - exiting with non-zero code if something goes wrong. Ideally giving meaning full description of the problem. - documentation explaining what it is, how to install and configure it and how to debug if necessary (might be available online) - if it logs something, allow me to specify where. Do not hard code any paths, as my system might be different then your. Also do not assume it will be run as root. - for daemons, pidfile and init.d script is nice, again - do not hard code any paths - if there are any dependencies, document them, better yet - have a way to validate them
One of the nice things about CPython is it does the CMMI dance without complaint. Just install from source: cd Python-3.3.2 ./configure --prefix=/home/&lt;username&gt;/apps/ ./make ./make install Then edit your ~/.bash_rc file and add the new bin location to your PATH. Install pip and you're good to go. 
I saw this today, anything that incorporated some of these algorithms would be fun. http://eferm.com/wp-content/uploads/2011/05/cheat3.pdf
If you want to learn about Computer Vision with Python I suggest the great book "Programming Computer Vision with Python" by [Jan Erik Solem](http://www.maths.lth.se/matematiklth/personal/solem). You can find the final draft of the book on its associated website: [http://programmingcomputervision.com](http://programmingcomputervision.com).
In a not completely unrelated vein, there are performance improvements being proposed for the stdlib listdir/walk. See here: [scandir](https://github.com/benhoyt/scandir). (I was able to get a significant speedup on one of my programs which indexes files on a NFS. The scandir replacements require fewer syscalls.)
Minor appearance suggestion (too lazy to actually do this through the proper git channels): For an inactive first tab: tab.border(0, 0, 0, 0, 0, 0, curses.ACS_LTEE, curses.ACS_BTEE) For other inactive tabs: tab.border(0, 0, 0, 0, 0, 0, curses.ACS_BTEE, curses.ACS_BTEE)
Plone is a CMS. Plone is based on Zope. Zope is an "application framework" backed by ZODB. There are *many* Web applications built with Zope that are *not* CMSs. Comparison of ZODB to other DBMSs is a legitimate topic, one I've addressed before. If no one else picks it up in the next day or so, I'll provide references on "simplicity, performance, ..."
Thanks noteed. I posted it here now because I think it is in a usable state. It passes well over half the Cpython test suite (on my computer). There are a few small missing features, but the majority of the language is supported. I'm keen for others to try it out. I'll have a look at python-pickle. Cheers!
Thanks daniterida. There are many reasons I used Haskell and not Python. The main one is Haskell's type system. In my opinion Haskell is very well suited to writing compilers. I also previously wrote a compiler called berp, which translates Python to Haskell, so I already had a lot of infrastructure in place.
I guess I'm a bit late here but this is interesting :) Apologies for the simple examples, but, well, complex realistic examples are hard to invent and would dwarf the prose. 1. You have a database connection, user information, etc. Why is that a property of the _controller_? (What IS the controller?) Surely the current user is a property of the current _request_? Pyramid's cookbook even has an example of [making `request.user` work this way](http://docs.pylonsproject.org/projects/pyramid_cookbook/en/latest/auth/user_object.html). You could do the same thing with the database, though SQLAlchemy provides a magical global thing. The general problem is that you have a lot of code that needs to run in a lot of places, and Python has plenty of tools for that: write functions, add properties, use some decorators. Sticking it all into the controller means all the views within a single class are forced to share the same setup code whether they need it or not, multiple controllers sharing code requires tons of mixins, it's difficult to tell what code actually runs where, and you end up with a bit of a hairball. 2. State doesn't have to change; the contents of a Python string are its state, and that never changes. A controller class happens to have most of its state set in stone.
&gt; First you used the assert statement: that's not the way the unittest is designed. Unittest provides all the sort of self.assertXXXX goodies to test the condition and display "useful" errors if they don't pass (like 1char difference between large text): all by default, no magic. I'm aware! I've been mostly using py.test lately, and it automatically generates useful errors for a plain `assert`. It's been natural enough for me that it's become a habit. My bad. &gt; Second you use a "stupid" example of very short test (1 line). On larger tests the "class" approach add exactly 1 line "bloating". The reward is I can derive from that test and re-applying to different cases easily (like testing an api versus different implementations). I can add setup/tearDown methods on them without magic tricks and preserving the state. The problem lies with the semantics, not the syntax. You can share code just fine without classes: write a function that accepts some arguments. You don't need magic tricks to add setup/teardown methods, either; even unittest supports module-level setup and teardown, and other harnesses (like py.test!) have more fine-grained ways to create and destroy state for particular tests.
https://en.wikipedia.org/wiki/Electronic_voting#Cryptographic_verification https://en.wikipedia.org/wiki/Public-key_cryptography#Practical_considerations https://en.wikipedia.org/wiki/Public-key_cryptography#Relation_to_real_world_events
Most of the native tools have been mentioned. Here are the ones that let you build D3 of JS from Python (disclosure: I am the author of a few of these): * Python-NVD3: https://github.com/areski/python-nvd3 * Bokeh (Docs not great yet): https://github.com/ContinuumIO/Bokeh * Vincent (Vega.js): https://github.com/wrobstory/vincent * Bearcart (Rickshaw.js): https://github.com/wrobstory/bearcart * Folium (Leaflet.js, Maps!): https://github.com/wrobstory/folium * D3py (dev has slowed for this): https://github.com/mikedewar/d3py 
http://realpython.eventbrite.com/ - sign up!
I think that instead of posting about this coding challenge, you should first make a post just to your survey. You probably shouldn't start this screencast if there is no demand, which you haven't determined yet, and I suspect will be lacking.
There's interest! What do you think of integrating statsd + graphite, and icinga versus nagios?
How about plotting with [ggplot2](https://code.google.com/p/pyggplot/)? Ggplot plots can be amazing and high quality. 
You are right that there already exists bytecode compilers for Python, so the practical benefits of doing it again in another language seem unclear. As pointed out by Rhomboid, my main motivation was for fun and to learn. I think I achieved both of those goals already. But there *may* be applications down the track. For instance we could use it for trying out Python extensions which compile to CPython compatible bytecode. I've already had a few ideas along those lines. We could also play with optimisation techniques, or alternative compilation approaches (perhaps to different targets). We could also try other useful extensions such as tail-call-optimsation. Of course I'm biased, but I think the the blip code is much simpler to work with than CPython (assuming you know Haskell). Another small benefit is the elaboration of CPython's bytecode implementation. I've had to trawl through the CPython code, plus lots of other scattered bits of documentation to figure out how it works. A hopefully clearer and simpler implementation in a higher-level language *might* help others understand how it works too.
I've only used Nagios and Cacti unfortunately. Server (and service) monitoring is usually one of the first roles handed off to dedicated IT support, so I haven't held on to that responsibility. It's also usually cumbersome and error-prone, so I'd love a simple *aaS solution.
Nice! I thought the spaces weren't really nice but didn't see that shape. Thanks.
It really comes down to design choices. You might have just stumbled onto bad design.
Might as well ask here, or in /r/learnpython. I suppose it *is* possible that your question has to do with Jython specifics, in which case I'm sorry to say I have no suggestion past the usual go-to-official-site-and-look-there (mailing list? newsgroup? IRC?), but judging by the fact you said "assignment", it doesn't seem very likely. Of course, mind the sub rules yada yada yada. 
I should really like Jython, but I can just never get into it. For the most part, it feels just like Python, so Python 2.X references should get you there. However, Jython is Python built in Java, so it has access to the incredibly powerful Java libraries (particularly Swing for GUIs) So if you're doing that stuff, you'll need to know a little Java, and just translate the Java ideas into Python syntax. This is where I run into problems. I'm reasonably confident in both Java and Python (written books about both) but I really struggle accessing Java libraries with Python syntax. It makes my brain confused. I'm guessing you're actually using JES (Jython Environment for Students) which is a Jython implementation suggested in a popular textbook teaching CS1 with multimedia in Jython. JES adds a few other features too, like an integrated image editor. You'll really need to look on the specific site for JES if you have a question there. Or go ahead and ask here. Worst thing that happens is nobody knows. 
Hit it on the head. Hard parts are calling java libraries. Swing in particular took a little practice before I got it down.
Do you want the number to be doubled or squared? i * 2 is doubling. 1 doubled is 2.
It is not reinventing, it is experimenting and they are publishing the results. This is a good thing even if the result of the experiment isn't all that useful.
What exactly does this website do for me? What is different from YouTube? &gt; And you don't have to scroll to view long pages now, it adapts automatically. I can't see that happening. What do you mean? And most importantly since you are posting in a programming subreddit: where is the code? At least I don't care that much about the result ... it's just a website doing stuff. I'm way more interested in *how* you did things. How did you deploy? Why do I see an `index.py` there?
Well you measured demand, but you're still measuring it. If you were happy with just the data you collected already, you wouldn't need the survey. I guess what you're saying is that, you have some data that points to a reasonable amount demand, but you're still looking to solidify that data a bit more, which is fine of course. I don't really believe however there will be demand for a coding challenge payed by the coders. Doesn't make much sense. Companies(A) out there are the ones paying other companies(B), with large communities of programmers, to get their(A) challenges presented to them, in order to find competent programmers to potentially hire, and at the same time find relatively cheap solutions to tough problems they(A) might be having. This is why overall I assume you won't find the necessary amount of demand to be financially successful with this project of yours. Maybe if you instead shopped this around to IT companies instead of coders that would change, however you'd be entering a very saturated market already.
I like Twisted's performance, but I really cannot stand programming with it. It's like the worst parts of Java (a billion classes, a billion factories for those classes, tons of boilerplate methods, camelCase), combined with the worst parts of callback hell (a la Node.js). It is the absolute opposite of Pythonic.
ok, I got my ticket. how do I attend???
I don't see how that's relevant, but sure they could.
[Twisted has built-in support to avoid callback hell which works great](http://twistedmatrix.com/trac/wiki/DeferredGenerator). All the other stuff can be easily mitigated in my experience.
Stackoverflow.com
**Installing Python, IPython, [...]** * **http://www.reddit.com/r/Python/comments/1785dd/ipython_notebook_workshop_report_one_of_the/c83lg8u** * http://stackoverflow.com/questions/15762943/anaconda-vs-epd-enthought-vs-manual-installation-of-python * http://docs.python-guide.org/en/latest/#getting-started * http://docs.enthought.com/canopy/quick-start.html (Canopy) * http://docs.continuum.io/anaconda/install.html (Anaconda) http://scipy-lectures.github.io/intro/index.html http://pyladies-kit.readthedocs.org/
sweet! didn't know there were so many docs written already... thanks for sharing :)
The links in the comments for these questions may also be helpful: [Help: Tips on starting up a coders club at the local library](http://www.reddit.com/r/Python/comments/1dq7j0/help_tips_on_starting_up_a_coders_club_at_the/) [Seeking advice for introducing IPython in high school setting.](http://www.reddit.com/r/IPython/comments/1dl8wc/seeking_advice_for_introducing_ipython_in_high/)
The lazy, lazy one.
Good article, I'm pretty interested in playing around with this. One thing though. I thought the conventional wisdom was that recursion in Python is slow, particularly [but not only] because of the lack of tail call optimization. If Hy is targeting the Python AST (I'm guessing it's running on Cython, still looking through the documentation), doesn't it suffer from this too? It's hard to imagine it'd be useful as more than a learning tool if it does... Lisp isn't Lisp without recursion. Edit: Apparently recursion isn't necessarily that big a deal. I'm not very experienced with Lisp.
Oh, it uses googleLib and Bottle.py. Most of it's code is those libraries. So how I did things-how the code works; 1-) It scrapes iTunes and Number 1 FM to get the top songs. 2-) It uses googleLib to get the song URL from YouTube. 3-) It parses the URL to get the YouTube video id. 4-) It makes an embed code using that id. 5-) It puts these together with the Bottle.py framework. For the scrolling part, it used to be in a div so the content scrolled not the page itself. I fixed that. Index.py is just a name I chose. If you use Bottle.py you can even make it index.reddit. Everybody seems to hate googleLib and web scraping. Since this site is based on it, it shows it works nicely. And I know that if a put the code here everybody will be like; "Hey don't scrape it'll break". But see, it's not broken. If you need more explanation about the code just ask.
Recursion is far more important to Scheme than it is to Common Lisp. I don't actually use recursion very often at all in Lisp. And I work mostly in Lisp. (clojure may be a different beast altogether -- I haven't really looked into it yet)
/u/electronutin, these posts are great, keep it up!
Indeed, hy targets the Python AST. We don't currently do any kind of optimizations on the AST we generate before handing it down to the compiler, so the same "caveats" apply to hy code as to normal python code. Once we'll have nailed down the internals and the language (well, at least a bit more than what we have now, macros are still in flux for instance), we will be able to look at doing some optimizations. A trivial first step would be using [haypo's astoptimizer](https://pypi.python.org/pypi/astoptimizer). Tail call optimization sounds like another beast, although the simple cases can be dealt with with [a bit of magic](http://code.activestate.com/recipes/474088/) (looks like old code and I haven't tested it firsthand, so beware).
clojure doesn't have tail call optimization either.
It's also strewn with nonsensical quotes, I suppose that they're references. But still.
We don't need another half-assed Lisp implemented on top of your favorite language.
Hy author here - doing TCO in Python AST is hard(tm) :) /u/olasd tells me that we could do something with byte hacking, so perhaps that's one route we can go in the future :)
Yeah, my understanding is that Guido is [not a big fan of recursion / supportive of TRE](http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html). I'd like to see more done because I typically think about algorithms in terms of recursion, but it's not something I have the expertise to implement myself.
Aye! Well, feel free to stop by, hang out, make hy-flavored puns or help us for future features over in `#hy` on freenode, if you're in the mood :)
IIRC, clojure has a special form that you use when you want TCO, instead of just a normal return. Edit: [It's called `recur`](http://stackoverflow.com/questions/10212928/automatic-tco-in-clojure)
Try these free books, or check the sidebar for other options: http://inventwithpython.com/
In case anyone wants to learn more: [PyCon Lightning Talk](http://blog.pault.ag/day/2013/04/02) [Hour long Boston python talk](http://www.youtube.com/watch?v=ulekCWvDFVI) [Talk Slides](http://hy.slides.pault.ag/#/step-1) [Docs(needs work)](http://docs.hylang.org/en/latest/) 
This is really cool, I just started teaching myself and this looks like a solid layout thanks a lot.
it's relevant in that if you're having speed problems with your django templates, [jinja is around 20 times faster](http://mindref.blogspot.com/2012/07/python-fastest-template.html). an order of magnitude more improvement than any optimization you could find by tweaking the django template.
Thank you very much!
Exactly. This is to work around the same problem of lack of tail call optimizations in the JVM.
[This post](http://www.rapidscaling.com/ihatesnmp) sums up my thoughts pretty well. It essentially boils down to... - The security is laughable, even with SNMPv3 you can't be assured all your devices are going to support it - Primarily UDP based - Horribly unreadable (OIDs). You get MIBs for devices that give you some "readable" text, but it's still convoluted and verbose - Traps aren't guaranteed delivery - APIs/agents/clients are usually very bloated What's the solution? No idea. For computing equipment, I'd rather run a client on the machine that's part of another solution (like the ones people are mentioning here). For other hardware that is typical to be monitored by SNMP (say a switch or router), SNMP is usually added as a checkbox feature and isn't necessarily the best source of information. Most of the companies would rather sell you their own specialized software package for monitoring them, so why would they make anything else easier? It seems to me that SNMP still exists because there is nothing that can really replace outright. 
As someone who has also written a Lisp in python, I find this an interesting project. What is the scope/purpose of it? Is the idea to build sometihng the equivalent of what Clojure is to Java? I.e. to combine the expressiveness of Lisp with Python's extensive libraries.
I hope Mr. IndustrialPopsicle listens to your wisdom
1. That's this interested person's blog posting, I'll let him answer :) 2. see above :) 3. Yeah. I had to take it down when we added macros, since they introduce a security issue (allowing code to be run at compile-time) - it still works locally, though!
The idea is to create something bidirectionally inter-operable with Python -- e.g. Python can import Hy, Hy can import Python, Hy can import Hy and Python can import Python :) As a side-effect, all Hy is also pdb debuggable(!!!!) Other than that, the project is very very similar to Clojure's in that it's really nice to be able to "piggyback" on a language with an active community (I'm actually a Pythonista first - this was for teaching AST to hackers @ Boston Python / PyCon lightning talk) Not to mention be able to write a DSL for doing X, while still also being able to use the stdlib / common bindings :) 
Make sure to mention this list of binaries for popular libraries: http://www.lfd.uci.edu/~gohlke/pythonlibs/
Thank you so much!
&gt; The idea is to create something bidirectionally inter-operable with Python OK, so why do you want to do that?
here is the link: [Anaconda](http://continuum.io/downloads)
[RappingProgrammer](http://reddit.com/user/RappingProgrammer) is right, also you can use *inlineCallbacks*, here is simple example: @defer.inlineCallbacks def sum_of_squares(): a = yield get_deferred_from_somewhere1() a2 = a**2 b = yield get_deferred_from_somewhere2() b2 = b**2 c2 = a2 + b2 print c2 defer.returnValue(c2)
Not sure if this is relevant, but you should take a look at [AutobahnPython](http://autobahn.ws/) if you're doing websocket stuff. Dat abstraction layer... 
Perhaps because some problems are easier to solve with python, and some are easier to solve with lisp.
In case I wasn't clear, I meant that state is a property of each controller instance. Also, the logic isn't all in "the controller", there are separate controllers for different functions (is this a terminology confusion?) In the system that consumes most of my time, while there is a mapping from request to user (but see the caveat below) that mapping can depend on the controller that is invoked. For example, we have both single-stage login (username and password) but also two-stage logins (in effect company and password followed by username at that company and a second password). Some controllers require the user to have been logged in the first way, some the second. So to sort that out before the controller is invoked would mean having controller-specific logic moved out into the login/authentication code, which seems to me to be more difficult to follow. The caveat: In some cases, generally clients submitting bulk data, there is no real user. Authentication is a hash over some of the request parameters and a shared secret. In practice we don't have "tons of mixins". We have a set of classes derived from the base controller class, corresponding to different login/authentication cases, which override the base controller methods, and then the real application controllers are derived from them (the caveat cases are special, in the sense that the application controllers do their own authentication). We've found this all works quite well for us (its a total rewrite of a system that was a total nightmare!). YMMV! 
In my opinion running two versions of python and installing packages is a complete mess on a mac. A clear guide with what to do when it inevitably goes wrong would help.
also http://www.learnpythonthehardway.org/
Ever write a whole Django project in Lisp? Well I have now :)
Please use and consider contributing to [*The Hitchhiker’s Guide to Python!*](http://docs.python-guide.org/en/latest/) (/u/westurner linked that too) instead of writing your own.
We can (and probably should) use alternate syntaxes for lisps. As a simple example, one can make it indentation-aware, reducing the number of necessary parentheses. My ideal syntax would probably be a more blatant kind of tree representation. I hope to find/make it eventually. In an ideal world, anyone can use whatever syntax they prefer to represent Lisp ASTs, while versioning systems work off those ASTs rather than lines of text. (The two can be equivalent as long as we have a *standard* way of representing ASTs as text.) Syntax ought to be irrelevant rather than Lisp's main deterrent. --- &gt;Lisp evangelists (a dying breed as far as I can tell) often talk about "Lisp all the way down" being the ultimate goal I'd be interested to see just how short (and bug-free) a lisp-based operating system would be compared to the current C ones. I doubt this will happen until [decades after] we get a more friendly syntax, however. For now, we make do. Clojure is very popular, so I doubt the next generation of lisp evangelists will mind much.
Its not quite as simple as replacing Django's templates with Jinja. The effort required for a moderate project would be big, and you would have to re-write any existing template tags you have made. And most of the time Django templates are fast enough, its just they are kind of a black box.
Frameworks started appearing without Python 2 support!
Future ready. Isn't it better to use the time and resources for useful features than to maintain platform that will be soon obsolete and already has a replacement?
am i overlooking an example? would be very useful to see...
&gt; I'd be interested to see just how short (and bug-free) a lisp-based operating system would be compared to the current C ones. I doubt this will happen until [decades after] we get a more friendly syntax, however. There is a lisp-based OS. It's called Emacs ;-)
It is, but yours is one of the first projects we've seen that's been brave enough not to offer a Python 2 version. Having frameworks that are Python 3 only will probably speed up the migration, so kudos for taking the leap.
Not really, since it's written in C ;)
Yes, sorry for the late response. I will definitely check these out! They look very useful. Thank you!
This looks very promising. I am bookmarking this and am going to make an effort to learn! Thank you very much.
I interpreted the requirement as revocation's "lisp all the way down". Emacs has C base, hence is not the "lisp all the way down" OS we are looking for.
he stated in another comment that he feels the type system of Haskell really makes it a winner. [permalink](http://www.reddit.com/r/Python/comments/1gscar/blip_a_bytecode_compiler_for_python_3/canj6k2), [another rationale by him](http://www.reddit.com/r/Python/comments/1gscar/blip_a_bytecode_compiler_for_python_3/canxr3h)
After looking through the presentation and looking at the docs and so on I still have no idea why I'd use this. Some examples along the lines of "here's this tedious task and how you might do it with plain Python, and here's how easy it is with Bubbles" would be helpful.
When I meet the task to generate html quickly, I rather like to use markdown instead. 
Nice theme, I'm going to have a try
You should probably use Markdown's [meta data][1] instead of your custom post format (portability and simplicity). If mikasa doesn't handle this for you, it is fairly easy to [do it yourself][2]. [1]: http://pythonhosted.org/Markdown/extensions/meta_data.html [2]: https://github.com/posativ/acrylamid/blob/master/acrylamid/readers.py#L591
I agree with you. But it's a little late when I realized this point. Alternative to Markdown's meta data, [mdconf]( https://github.com/visionmedia/mdconf ) may be a better choice. It maps markdown text to dict(hashtable) struct. I made mdconf [a python version](https://github.com/hit9/mdconf.py) , via misaka. But I am not sure whether I should switch to mdconf from toml, since this project used toml for a few days. 
It would be... if python 3 was an actual valid replacement of python 2.
I realise this is r/Python, but I'll elaborate since you asked. First and foremost is Algebraic Data Types (ADTs) and pattern matching. The central data type in a compiler is the Abstract Syntax Tree, which is naturally and elegantly represented as an Algebraic Dataype, see [AST.hs](https://github.com/bjpop/language-python/blob/master/ghc_normal/Language/Python/Common/AST.hs) for example. Note particularly the Statement and Expr types. The core of a compiler is a function which decomposes the AST recursively and builds a representation of the target code. Pattern matching is very handy for this style of programming, and it can make it easier to be sure you've covered all the cases. See [Compile.hs](https://github.com/bjpop/blip/blob/master/compiler/src/Compile.hs), and note the compileStmt function, for example. There is also a lot of state to manage in a compiler, and Haskell's State Monad (Transformer) provides a lot of utility for that task. This is particularly good for *separation of concerns* and helps avoid state management messing up the rest of the code. See [State.hs](https://github.com/bjpop/blip/blob/master/compiler/src/State.hs) for the bulk of the state management code in blip. I also use various Haskell idioms such as Monoids for doing traversals of the AST and collecting information. See for example [Scope.hs](https://github.com/bjpop/blip/blob/master/compiler/src/Scope.hs), particularly the VarUsage type class. There are also other reasons which are not specific to compilers. The type system is a light-weight formal system, which catches many shallow bugs, but also provides a lot of confidence when the code is refactored.
I have also written a static page generator for my personal site using [Flask-FlatPages](http://pythonhosted.org/Flask-FlatPages/) for parsing the markdown and meta data stuff. The static pages are generated with [Frozen-Flask](http://pythonhosted.org/Frozen-Flask/). Pretty simple and works like a charm! But i will definitly check out lilac for some inspirations.
So you prefer yet another new universal meta data format?
Very nice idea to froze flask application to static pages, yet a good way for pythoners to write blog.
Python has lots of web frameworks available. I'm partial to web2py. Other popular ones include Flask, Bottle, Pyramid, etc. 
Signal processing in python is inferior as compared to matlab. You'll have to code some of your own routines, but get past that and it's ok. I'm working on making a proper ARMA filter code right now as the controls module can't handle a 64th/64th order model. Matlab does just fine.
http://statsmodels.sourceforge.net/devel/tsa.html#arma-process
In addition to numpy &amp; scipy, I'd recommend checking out [MDP](http://mdp-toolkit.sourceforge.net/) and [pywavelets](http://www.pybytes.com/pywavelets/) as well.
Thanks!
http://en.wikipedia.org/wiki/Push_technology
No worries. You might search for github issues containing [ARMA](https://github.com/statsmodels/statsmodels/search?q=ARMA&amp;ref=cmdform&amp;type=Issues) and/or [ARIMA](https://github.com/statsmodels/statsmodels/search?q=ARIMA&amp;ref=cmdform&amp;type=Issues). If there's not one already and you can share a set a reference data, you could [create a new issue](https://github.com/statsmodels/statsmodels/issues/new) for the statsmodels project team.
I wrote this because I often generate jibberish text using lorem ipsum libraries to provision data to test with. At times a client complains that using "foreign language" takes away from the experience and can be detracting. This package uses every line of dialog from Star Trek: TNG (scraped from [here](http://antoa.com/tng/)) to generate real-looking text. Usage: Install rikeripsum pip install rikeripsum Then, from a python prompt, simply: from rikeripsum import rikeripsum rikeripsum.generate_paragraph() Or, you can generate a sentence with a specific number of words: rikeripsum.generate_sentence(5) **EDIT:** Made a github.io page with a live demo: http://ben174.github.io/rikeripsum/
I will be posting examples on the blog. This was just initial announcement. Stay tuned. In short: one of the goals is to have higher level ETL operations without having to care about the underlying technology. Say you want to load slowly changing dimension – if it will be possible, series of SQL statements will be constructed (which is faster), if not, it will fall back to plain iteration. You as ETL developer should not care in most of the cases how it is being performed (at least not at early stages). Framework is in its early stages. Honestly, I agree that it brings nothing too exciting yet that you can not do with SQLAlchemy or Iterator for the first look. However, the value and usefulness will increase by number of operations and multiple backends.
See my commend above to Keith.
Does anyone know of some good screencasts that use the aforementioned technologies to build a simple, real-time web application?
&gt;&gt;&gt; print "\n\n".join((x() for x in 7*(rikeripsum.generate_paragraph,))) Yeah. I'm sure it did. Acknowledged. Enterprise to Stargazer, please respond. No, just my cards... When you've worked it out, you'll understand command. Jean-Luc? Congratulations. Proceed. Commander, no unnecessary risks. If it becomes clear you can't succeed, I want you back here, alive... I don't want any dead heroes. Clear? Geordi... It was like he was... blaming me or something. But it's more than just this one incident. For the past few days, I've been feeling like everyone's staring at me... or talking about me... Not these dreams. None required, Prime Minister. Why that module and not the others? ... No one ever said that God didn't have a sense of humor. Twenty-three. Captain Picard is waiting in his Ready Room. This way. Why didn't you warn me? They mean it... They will help. Why haven't we heard anything about that? And the other one -- his assistant? Mister Gleason, can you pinpoint the Borg's source of transmission? You enjoyed that. Magnify. Alert all science labs to standby. They should be coordinating their efforts with Commander Data. I am Commander William Riker of the Starship Enterprise. Like a juggernaut which could start moving at any moment. You are aboard the Federation Starship Enterprise. We are treating your injuries. How long were you on Galorndon Core? Do you understand me? Of course not. Your bet, Counselor. I only want to make you as happy as you want to make me. You're entitled to that... Did you copy that, Geordi? Data. Are you sitting on a full house or a flush? The man they knew as my father... the man who stands before them now... both are merely hosts. It is your task to help them understand. Sir, Lieutenant Castillo is the last senior officer alive... he will have limited support from Ops, no Tactical, reduced staff in Engineering... I like a woman who's intelligent and sure of herself... somebody I can talk to and get something back. But the most important thing of all -- she has to laugh at my jokes. Set to kill. Enterprise? There's no time to debate the issues, Ramsey. We're taking you with us whether you choose to go or not. Life signs? Computer, locate Lieutenant Worf. Commander La Forge wants to get an idea of how big this pocket is. He thinks the rate of energy absorption will be linked to its size. 
I can try here and see what happens. What is the URL? 
This is a direct link to the Windows installer: http://www.python.org/ftp/python/3.3.2/python-3.3.2.msi For the site itself http://www.python.org/getit/
It works here. Mysterious. 
Check your internet connection? If at work, the network might be blocking msi downloads.
Anti-virus software could also be blocking msi files. 
How would I get it to record the results to a file after running? 
I just had a quick look at msg.py, off the top of my head: 1. The 'spec' named tuple. Why is the second key called 'status_byte type args size'? Are you sure you didn't miss a comma somewhere? Why are you using a named tuple and not a dict here anyway? 2. Also, are you sure the items in 'msg_spec' comply with how that named tuple is declared? 3. Don't do 'spec_lookup = dict()'. Instead do 'spec_lookup = {}' (faster). 4. 'for i in range(16): do bla': why 16? Are you sure you don't want 'for i, val in enumerate(my_dict): do bla'? 5. The 'ifint()' function is really redundant. Why not just use its last line? Also check the 'assert' functionality in Python. It should help you make sure your code/inputs match. 6. Never do 'if x == None'. Do 'if x is None'. 7. What version of Python is this code supposed to run on? If it's 2.7 and above, you don't need to import the print_function, and please make sure your base classes inherit from 'object' (new style classes). Also use the string 'format()' method instead of the older '% arg' method. 8. _setattr_: use a dict instead of all the 'if x, if y, if z'. 9. A lot of other things. That code needs plenty of cleanup, and I wholeheartedly recommed you use some PEP8 utility for your code. Keep coding, and good luck :-)! 
It's cool, but doesn't it break the concept of the original? The random text was meant to be not readable, to ease focus on the layout, spacing etc instead of the text itself...
It's sad how many of those lines I could identify.
I thought the same thing at first, but OP mentioned [here](http://www.reddit.com/r/Python/comments/1gzb50/rikeripsum_a_lorem_ipsum_type_text_generator_but/cap9xq5) that sometimes clients complain that it's in a "foreign language".
EDIT: I thought that Pickle files don't survive endian changes, but I can't find evidence to support that. Be careful about storing the data in a pickle file - they aren't transportable last time I checked.
you can pipe the output to a file. For eg, if you run the command as: python tespeed.py &gt; output.txt The output of the program will be written to output.txt
Do you think you could do a Dr. Who Ipsum? 
I don't know why it took so long, porn stars have been asking for python for years now.
Can you elaborate please?
&gt; detracting If you meant "distracting" I hope you didn't honestly think using star wars scripts would be less distracting than latin. PS: This project is hilarious and I support it.
I avoid running pickle files as its easy to insert malware/[shellcode into them](http://www.toniblogs.com/08/2012/security/shellcoding-with-python-pickles/). But bhearsum's referring to http://docs.python.org/2.7/library/pickle.html#what-can-be-pickled-and-unpickled: &gt; Similarly, classes are pickled by named reference, so the same restrictions in the unpickling environment apply. Note that none of the class’s code or data is pickled, so in the following example the class attribute attr is not restored in the unpickling environment: class Foo: attr = 'a class attr' picklestring = pickle.dumps(Foo) &gt; These restrictions are why picklable functions and classes must be defined in the top level of a module. &gt;Similarly, when class instances are pickled, their class’s code and data are not pickled along with them. Only the instance data are pickled. This is done on purpose, so you can fix bugs in a class or add methods to the class and still load objects that were created with an earlier version of the class. 
I know not why it fails, but I downloaded it and uploaded it elsewhere. http://www.mediafire.com/?7473xno1guc4utu Perhaps this simple change will somehow help?
I'd like to see a vid tutorial or otherwise of this if possible?
It shouldn't be that hard. Dr. Who transcripts are here: http://www.chakoteya.net/doctorwho/ .
Thank you! Excellent points. 1. I used named tuples because they are a simple and memory efficient alternative to objects. I want attribute access, so a dictionary wouldn't work. I could write a class, but this seems a bit pointless when a simple namedtuple() does the job. 2. This is how I've seen it done before. I checked the docs now, and they say "The field_names are a sequence of strings such as ['x', 'y']. Alternatively, field_names can be a single string with each fieldname separated by whitespace and/or commas, for example 'x y' or 'x, y'." I've switched to a tuple of strings. This is less confusing and probably faster. 3. Ah, the dict() originally tool an argument, and I forgot to change it to a {} when I removed it. Done. As for the range(16), there are 16 MIDI channels, so I need to make one key for each. I've added a comment about this. 4. Ah, good point. I've gone through isint(), isnum() and assert_*() and found that they were all used only once, so I've removed them and moved their code down into __setattr__(). Also the 'time' check did a little too much checking, so I've fixed that. 5. I can't find the 'if x == None' in msg.py. Where did you see it? 6. It's written for 2.7 and 3.2. In my Python 2.7 'print(1, 2)' prints '(1, 2)', so it looks like print is still a keyword. Am I missing something? Anyway, all classes now inherit from object and I've switched to .format() everywhere. (I finally sat down and started learning the syntax.) 7. I will consider this. I guess it's faster to use a dict, but I find the if/elif/else more readable. 8. I wonder what the other things are. :) I'll run it through some PEP8 tools and see what comes up. (I know I have many lines that are too long.) 
That is the *point* of Lorem Ipsum. To put blobs of text that are "foreign" so that the client is forced to focus on the design and not the filler text. 
Try looking in the [Python Package Index](https://pypi.python.org/pypi?%3Aaction=browse).
This is cool I guess (certainly upvoting!), but do you get that the point of Lorem Ipsum is to use "foreign language" so that the eye focuses on the design and not the filler text? Have you ever tried explaining to a client *why* you use Lorem Ipsum? Did you understand *why* everyone uses Lorem Ipsum? As a fun project it's cool, but as a thing you'd use with actual clients it's sort of baffling.
https://bitbucket.org/mchaput/whoosh/wiki/Home http://haystacksearch.org/ http://pyes.readthedocs.org/en/latest/index.html
[`Topic :: Internet :: WWW/HTTP :: Indexing/Search`](https://pypi.python.org/pypi?:action=browse&amp;c=319&amp;c=326&amp;c=334)
Does the same thing. Maybe it hates .msi files? I'll try again on a friend's network. 
Fundamentally, I don't think clients need to kow why you use Lorem Ipsum. I think it's OK to try and explain if they make an issue of it but you're hardly dealing with cosmopolitan folk if they're complaining about seeing a foreign language in the first place. Having a bit of English placeholder text to sub in on occasion seems like a fair idea.
Agreed, you lose safety, future proofing, etc, and in this case, there are no advantages to pickling. Simply a list of strings all in the same format...
&gt; star wars scripts This is distracting, hence it detracted from your point.
http://gifatron.com/wp-content/uploads/2013/05/sGx39yA.gif
You were probably thinking of marshal, which is used to store python bytecode and is not intended to be portable: http://docs.python.org/2.7/library/marshal.html
Just to pile on, Pickle's format [changed between Python 2 and 3](http://bugs.python.org/issue6137) so a pickle generated by one version is completely unreadable by the other.
Do you get the same issue if you download an alternative Python distribution for Windows, such as Python(x,y), Anaconda, etc? https://code.google.com/p/pythonxy/wiki/Downloads http://continuum.io/downloads 
Pretty much, yes. Depending on the data that you want, this can be quite simple. lines = open(get_data('riker.txt')).readlines() This way, you could have one dialog line per file line. In addition, it makes it much easier to add additional lines by editing the text file. (Technically, pickling is a form of serialization which tries to handle every possible python object. Making your own serialization can be much simpler, since you don't need to handle every possibility, only the ones in your code.) Edit: Whoops, I forgot that `readlines` leaves the trailing newline character at the end of each line. This will strip it. lines = [line.strip() for line in open(get_data('riker.txt')).readlines()]
Yea, maybe it would simplify things to just use a flat text file. I'll do that in the next version. 
Actually - for performance - I am stuffing a few other properties in the pickle for each line (word count being one). But yea, I could easily store that in plain text as well. 
Thank you for that. Try clicking 'Try a Demo' at http://ben174.github.io/rikeripsum/
They don't survive Windows &lt;-&gt; Linux migration because of the end of line characters, although it's not that hard to clean up. Maybe that was it?
Nothing wrong with text only games, I played plenty of them back in the day! Fun way to work on your skills too. Some notes: 1) I got to level 14 before it just sort of stopped and kicked me out to the command line 2) It took me to level 5 or 6 to get any gold at all. Once I got 4 gold I went to shop and it said I didn't have enough. 3) There was no real 'tension' in the combat. I never seemed to come close to being in danger. 4) The combat being fully automated and kind of verbose made it tough to understand what it was doing and why...but I kept winning :) 5) You should allow short cuts... I typed 'north' a lot 6) You should round your numbers. Cool that I deflected 0.131138512736 damage, but is it that much better than 0.131138512735? :) -rf 
I think often clients are inarticulate about why they don't like something. Perhaps in this case the client was more interested in seeing real looking test data than either gibberish or Star Trek dialog.
I truly appreciate your passion. So lets see if I can parse this. * We've determined that in the episode 'First Duty', Riker tends to be most verbose, with an average of of 28 words per line of dialog. * We've determined that the episode 'Allegiance' contains the record for most words said in a single line of dialog by Riker. 
Could this be upgraded to use Markov chains generator? The corpus is big enough to train the thing to produce really good rikerisms.
dangerous, imho, to just do whatever the client says because they're paying.
It's an old joke, but I felt like it rather missed the point of my suggesting the Lisp-based OS - such an OS was supposed to be "Lisp all the way down", whereas Emacs simply isn't. I *guess* I agree on the C OS preventing "all the way down", though if thinking of a program as its own OS, I think the argument would be that the interactions between ProgramOS and the main C OS are not strictly part of ProgramOS, hence don't count. Whatever.
Cool, I'll try it again when you update it!
&gt; Dangerous to just do whatever the client says, it is because they are paying. To yoda speak converted it, it makes more sense now. Yes, hmmm.
Aha, the 'x == None' is was in assert_time(). I must have fixed it when I moved the code down into __setattr() and then forgotten about it. By line 103, do you mean '_SPEC_LOOKUP = _make_spec_lookup()' or are you looking at an earlier version? I've been splitting some of my ifs to break of long lines, but this was clearly not a long line. Fixed. ~~(Also removed some unnecessary parantheses.)~~ Edit: The parantheses were necessery. (Also spelling.) The += was contatenating a list. I've changed it to .append(). 
FALCONNNN WRAP!
I'm building a lookup table and assigning it to a global variable. Is there a better way to do this? Ah, I was searching for += for some reason. Fixed. 
Could do a json blob or something.
I just tried this by changing it from randomly selecting a line to generating one using [PyMarkovChain](https://github.com/MaxWagner/PyMarkovChain) and it was less than impressive. &gt; You could probably aren't pioneers, like to beam back. That's right home under these blue. For transmission from the ship's records could never actually an impact with you say, I'm not angry. Only a dentarium alloy. By order to speak up to give you said you'd like looking for them may be concentrated in. Can you believe that far a captain says the VISOR by. Apgar. No. Since you stop it. Engage evacuation of coming aboard for you have no good job. Is it programmed the testing, Mister Worf, you release command to Transporter Room, we've gone into adults. Mister Worf, Red alert. I wonder if there is a more advanced way to create sentences that make more sense.
Fine, but why is it there? Why is it between two function definitions (and not some relevant function calls instead)? There should be a good reason to put that code exactly there (e.g., it supports or helps to understand the code that follows).
Ah, I see what you mean. Yes, is looks a bit out of place. I've replaced it with '_SPEC_LOOKUP = {}' and moved the initialization down to the bottom of the module. Better? 
It would be nice to have a bit more information about this project. Specially to which kind of applications it does apply well (my guess: not that many, but please prove me wrong).
It worked fine on my small example script, except it complained about A not being a function (which of course it isn't, so maybe it should): class A(object): def __init__(self): a = 1 print A().a The code still works though. When I tried to compile a module in my current project it blew up with: I 0.001 [31170] src/falcon/reval.cc:1208 Failed to compile function, executing using ceval: Unknown opcode SETUP_EXCEPT, arg = 12 Segmentation fault (core dumped) I would be nice to see which function it tried to compile. (Well, I guess maybe that would have been printed it if didn't core dump. :) Here's the module I compiled: http://raw.github.com/olemb/mido/1ac56f870e862c506e3cdf0acf33b1d8356fc55b/mido/msg.py 
I don't think it's too bad for placeholder text. Lorem Ipsum sentences don't make sense either, or so I'm told.
Definitely fun, Ive been meaning to put together something like this myself for a while. Might I suggest allowing shorthand for the actions? I dont want to type 'character' every time I want to see my stats, or type out the whole word 'north' every time I want to go north. Allowing me to type either 'north' or just 'n' would be nice :D
 print "Loading..." time.sleep(1) Whyyy
If you don't have any dependencies on 2.7, then you should definitely just switch to 3.3. You can learn most of the [2.7 -&gt; 3.3 differences](http://docs.python.org/release/3.0/whatsnew/3.0.html) in a day (enough to take the course, anyway). If you need to continue using both versions for whatever reason, I think your best bet is to set up some [virtualenv](https://pypi.python.org/pypi/virtualenv)s which will let you switch between versions. See [this](http://stackoverflow.com/a/1534343/2101569) SO answer
Don't forget to try [numba](http://numba.pydata.org/) too if you try Falcon. LLVM JIT inside python
1. I can only see one string concatenation (grepped all files for '+'): sig = '(' + ', '.join(parts) + ')' I think this would be less readable: sig = '{}{}{}'.format('(', ', '.join(parts), ')') but maybe there's a better way. The other two concatenate a list and a list / list expression respectively: for name in spec.args + ('time',): [msg.type] + [getattr(msg, a) for a in msg.spec.args] Is there a better way of doing this? 2. I like to have a blank line after the doc string, so the first line is not bunched up there. 3. This is of course good advice, but I honestly can't see how to I could make this any shorter and more concise, except for little things here and there. 
No, wait. There is this case: parts.append(name + '=0') which I changed to: arts.append('{}=0'.format(name) 
I was just on the verge of learning about virtualenvs for some NLTK stuff I'm doing. Using it to run two different versions of Python hadn't occurred to me. I'll check that out as I ponder a total switch to 3.3. Thanks!
This is poorly named. There is already an independent programming language called [Falcon](http://www.falconpl.org/).
 sig = '{}{}{}'.format('(', ', '.join(parts), ')') Haha, I can be stupid sometimes. :) How about this? sig = '({})'.format(', '.join(parts)) I think I'll keep this however, despite what I wrote in the other comment: parts.append(name + '=0') For little things like this, I find that '+' is best. 
I think virtualenv with python3 is the way to go. It makes everything easy and if you continue working with python you'll find tools and places (some webhosts, for example) that still rely on 2.6 and 2.7. Of course, you'll need python 3 installed to use it to set-up your virtual environment but once you're working with virtualenv you won't have to remember which modules are installed with which python version. In addition to virtualenv, I like virtualenvwrapper, which offers some convenient commands for switching between virtualenvs. 
They serve different purposes. Numba has a lengthy compile time, which is worth it if you're trying to speed up a smaller computational kernel. Falcon should, eventually, be able to give a minor boost across a large codebase. 
It works well when your application's bottleneck is the CPython interpreter, rather than any of its helper functions in the C API or some external library. The performance gain isn't huge (we never saw anything more than 3X) so it's not worth the same sort of hype as PyPy or Numba, but the advantage is that the conversion to Falcon's bytecode is very quick (not much startup/compilation time) and the interpreter is compatible with the C API (so it won't break extensions). We wrote a paper about it a few months ago, which I'll put somewhere online later today. 
Option 3 is generally used
Thanks for trying it out, I'll check out why your code crashed. edit: It was a stupid mistake-- Falcon doesn't yet support 'except' blocks in the interpreter but was trying to run the code anyway. The normal behavior is to fall back on CPython when we don't support something. Could you, by any chance, give me an example of your Message class being used? I'd like to add it as one of our tests/benchmarks. 
Use a Python 3.3 virtualenv.
Check out the [tornado.gen](http://www.tornadoweb.org/en/stable/gen.html) module. It eliminates the need for callbacks using generators and futures. As a bonus, the documentation is top notch.
**Have two versions running side by side.** I don't think there's anything preventing you from doing that.
Indeed, though I've not had the chance to try it out in the flesh, I've been quite excited by its introduction.
To create the feeling of a loading screen. With out it seen like it was missing something. 
Yeah just make sure you're careful to use the right one... I have 2.7, 3.1 and 3.2 on a single machine. No virtualenv or anything.
It's not like there has never been an unfortunate naming scheme between unrelated projects and languages in the software world. Case-in-point: Java vs. Javascript.
&gt; Like a juggernaut which could start moving at any moment. You are aboard the Federation Starship Enterprise. We are treating your injuries. How long were you on Galorndon Core? Do you understand me? Of course not. Your bet, Counselor. I only want to make you as happy as you want to make me. You're entitled to that... Did you copy that, Geordi? Data. Are you sitting on a full house or a flush? That was.. beautiful *sniff*
&gt; You specify which functions you want Falcon to wrap (or you entire module)... **your** entire module...
In terms of large scale things there is, of course, a little site called www.reddit.com I wrote a utility called [pySSHMenu](https://github.com/MasslessParticle/pySSHMenu) That I think is very handy. In fact, I use it every day. Additionally, I've written a framework for managing a distributed application for work that has saved me and my team tons of time and headaches. In what ways are folks telling you that it's not useful? If anything, I find Python to be more useful because of the quickness of development and (non-web) deployment.
Why would you consider it not useful? I've worked on a number of popular commercial websites that are written in python, I've written a number of tools for processing data, etc. 
I always browse forums and people say that it's not good foreleg ramming and is not worth learning EDIT: I mean "for programming" but my ipad autocorrected it. I guess I should leave it there in shame...
&gt; foreleg ramming What the fuck kind of forums have you been visiting?
That was an intentional marketing decision, cuz Java was HOT HOT HOT. https://en.wikipedia.org/wiki/JavaScript#Birth_at_Netscape
Well my main goal is to just learn programming as a hobby, and I think I might go with python.
Much of the backend software for EVE Online is written in a stackless flavor of Python. http://www.slideshare.net/Arbow/stackless-python-in-eve
Ha, thanks. Any chance you can apply the same magic to our [interpreter](https://github.com/rjpower/falcon/blob/master/src/falcon/reval.cc)? 
LOL, that's quite the autocorrect... Python is the 3rd language that I've worked in for a long period of time (C++ for 10 years, C# for 8 years, Python now for 3 years -- I won't count Javascript :) ). There's nothing wrong with it. It might not be appropriate for every task in every situation, but it's a perfectly viable language for professional development.
* Its used extensively at Google and the creator of the language works at Google. * Civilisation IV uses it for game logic and AI. * Industrial Light &amp; Magic - the company that did the effects for Star Wars and Star Trek uses it extensively. * Blender 3D is built in it. * NASA's Johnson Space Center uses Python in its Integrated Planning System as the standard scripting language. * "The [US] National Weather Service has included Python with Tkinter on the latest build of our main computer system. This system is installed at 120 offices across the country. This is the system where we make maps, write forecasts, issue warnings, and basically do most of our work." * Swedish Meteorological and Hydrological Institute (SMHI) * It comes 8th on the TIOBE index. Scrap that - just [read this for an incomplete list of organisations that use it](http://wiki.python.org/moin/OrganizationsUsingPython). Added to the fact that thousands of websites are built on the Django, Pyramid and TurboGears frameworks (all Python). In fact the more I think about this the more I think you must be trolling.
Bastards!
I'm an electrical engineer, and my company builds embedded Linux devices, about 10,000 per year. Our manufacturing test is written in Python, it drives all of the JTAG programming, serial communication, and other stimulus on the devices. It records all of the information like MAC addresses into a database, and allows us to do statistical analysis on the test results to see where failures occur. This lets us recommend areas for the manufacturing staff to research improvements. We work hard to shave pennies off our costs, and the python script helps us to do this.
Wow, thanks for this list, I think I'm going to try to learn it. And no, I'm just a complete beginner in terms of programming!
When mechanical engineers need data analyzed, they usually have a few options: * do it by hand * write an excel macro (basically VBA is the worst language ever) * try to get a copy of Matlab, since they learned it in school The much, much better solution is the 4th: download Python. Right now we're in the process of moving much of our scripting to Python and away from Matlab and Excel. SO much better, and so much easier to learn. (Matlab is very good, of course, just really expensive and not as easy to write.)
Python isn't The Best language for any one purpose but it's a good language for just about any. It's a fantastic glue language for scripting too. And when performance is critical, it's very easy for Python to outsource the tough parts to another language. Games will have Python for the game logic but use C libraries for the actual rendering.
I can't believe that you didn't get more replies. Truly excellent work. I'm going to use nvd3 in my next project.
Try reading [this](http://wiki.python.org/moin/Python2orPython3). If you're just learning, definitely learn with Python 3. Many of 3's features are available in Python 2.7's "futures" collection, and learning 3 to start will save you time later on.
Start with 3.3, especially if you're a beginner - it's where the future of the Python project is headed. There are a few packages that haven't made the transition yet but more and more are gaining support (Flask and Django recently, PIL was forked into Pillow, etc.).
Other than d Features, is the coding the same?
They are totally right. Python is a programming language and therefore totally unusable for programming. Only real developers know that for programming, you actually use mspaint. But you didn't hear this from me, understood? Jokes aside: Python is as good as any language for programming. Maybe not for all tasks, but no programming language is good for all tasks. Python also has the advantage that it's easy to learn and i recommend most people to just start with python and build up on that. Another useful thing written in Python is the backend of [Eve Online](http://www.eveonline.com/) and [NASA](http://www.python.org/about/success/usa/), [Netflix](http://techblog.netflix.com/2013/03/python-at-netflix.html), [Spotify](http://labs.spotify.com/2013/03/20/how-we-use-python-at-spotify/) and various others also think you can write very useful stuff with python.
My response to [u/radiofragments](reddit.com/u/radiofragments) has some hidden shortcut with in the game and possible changes too. Glad you like it!
maybe this is stupid question, but how does Falcon compare to Pypy?
You could do much worse than Python. It's got lots of accessible tools (Flask or Django if you want to make interactive websites, PyGame or Kivy if you want to make games or apps, jillions of hobby-oriented libraries for electronics, image and sound processing--you name it), a super friendly community, and loads of good, free resources to learn from. The only alternatives I might consider are Ruby and Javascript. Javascript lets you interact with your web-browser (and your web-browser can run it, so you've already got all the software you need to get started). It's kind of an oddball to learn to program with, but certainly serviceable. Ruby is a lot like Python but the community tends to have fewer Science/Engineering types and more Web Designers, so it's *very* focused on web-frameworks. Of course, all of this is moot: flipping a coin and getting started, even if you decide later that you want to switch, is probably a better course of action than deliberating and researching a bunch of languages.
Sure, here a simple example with a few common operations: from msg import Message # Import like above, or just paste this at the end of msg.py a = Message('note_on', channel=0, note=60, velocity=64) print(a) print(a.hex()) b = m.copy(note=62) c = Message(0x92) # Create Message by status_byte You can also just create a message and play around with it. The message types are defined in _MSG_SPECS, first or second column, for example: Message('note_off') Message('note_on') Message('polytouch') etc. 
This thread is getting deep, so I'll just post out here. I really appreciate your feedback. Thank you for taking the time to do this! Your suggestions have helped me make many improvements to my code. It's great to get an outsider's perspective. I will take some time away from msg.py. When I come back to it, I'm sure I'll see some room for improvement. 
If you install Python 3.3 side-by-side, you can fire it up using python3.3 and everything works as expected. You can also use virtualenv or a virtualbox VM but that's not really required. Scrapping 2.7 and going to 3.3 is a very forward-looking approach, but a lot of key application infrastructure has still not made the move to 3.x yet. You would be gambling on never needing those components.
Does it wrap modules that you import in your module? 
PyPy is a tracing compiler, whereas Falcon is just an efficient interpreter implementation. The main motivation for Falcon is that PyPy breaks your extension modules, whereas Falcon is an attempt to see how fast you can get Python while maintaining a PyObject representation (which extension modules depend on). The answer seems to be "a little faster" -- at best 2X - 3X if you're doing a lot of simple operations entirely inside your interpreter. 
OpenStack - www.openstack.org - all python.
What he said. You might still run into some important packages that aren't available for 3, but 3.3 is the first Python 3 release that is "there". All my new code will target 3.3+ assuming I don't need 2.*-compatible only packages (Twisted springs to mind). 
Thanks for sharing mate!
My colleague and I spent about 10 minutes playing your game. If this is your first ever game in Python then congratulations! I don't think anything I wrote would have run for 10 minutes without crashing when I was first starting out. Here are some weird things we noticed about the game: * You have to memorize your character name, because it doesn't list previous saves when you start the game up. * If I have to go through the trouble of naming my character, I'd like to be referred to as such instead of "Human". * The difficulty is easy but misleading because it seems that with each subsequent encounter the monster is one level higher than the previous one. But this fact does not seem to influence the outcome of any battle. Monsters do less than 1 point of damage, yet the "Human" has over 100 hit points. * Oddly the human's level gains seem to accelerate as the game progresses. Sometimes we gained upwards of 3 levels after a single battle. * Why should I care about how much gold I have if I cannot see what I can buy with it until I have enough to afford something? Or is there a cover charge to enter the shop? * We noticed that the map expands in size the farther you travel away from the town. If you travel in one direction the map increases in both dimensions about every two steps, but it just fills with 0's so I don't seem to have anything to go do other than to encounter monsters. * Upon achieving 10 gold we tried to enter the shop and the game bombed with this this stack trace: Traceback (most recent call last): File "adventure.py", line 388, in &lt;module&gt; x_pos,y_pos,monster_roll,human = movement_human(area,kills,level,experience,gold,x_pos,y_pos,human) File "adventure.py", line 279, in movement_human human = human + level_increase NameError: global name 'level_increase' is not defined So consider re-balancing your numbers (and getting rid of the floating points) as well as giving the player more instruction as to how to play the game. If you make significant changes let us know and we'll play it again!
Er.... I think it's more dangerous/annoying to argue such a trivial point. Maybe when you are done arguing with your clients, they can complain about the bad experience to me over some coffee!
Thanks for the feedback. I've updated the project readme with some example usage and output: https://github.com/ghickman/classify/blob/master/README.rst EDIT: Also updated the article with an output screenshot.
Ah, I can see how that looks like a mistake. I have added a comment to clarify this. Thank you. MIDI data bytes are only 7 bit, so the valid range is 0 - 127. The high bit is used to signal new messages. Here's an example of a 'note_on' message with max values: 0x90 # status byte (1001 0000) 0x7f # note (0111 1111) 0x7f # velocity (0111 1111) For anyone interested in the encoding of MIDI messages: http://www.midi.org/techspecs/midimessages.php (Btw, I see now that my entire doctring for that function is "Raise". That's a bit silly. :) 
You saying that makes me think you don't actually have much experience freelancing. To put this another way, I think that educating clients is kind of important and fundamental. It's not.. arguing. But they're paying *you* because they don't know what the fuck they're doing and you do. When they want to shoot themselves in the foot for ~reasons~, you have to teach them why it's a bad idea. Same thing with this Lorem Ipsum bit. If they are complaining that they can't read it, you don't waste all your time changing the text around because they want you to, you *explain* why you're doing what you're doing and move on. Your client wants.. unicorns that shoot leprechauns out of it's ass, and they want it for dirt cheap. There's always a little bit of a feedback loop there. If you just blindly do whatever they want, "because they're the client", you *will* go broke, imho.
But when you create Message(0x92), I don't see the status byte getting masked out anywhere--- so won't this trigger a ValueError?
this is amazing, this will really help with my final year project. Thanks a ton for sharing this
The high bits of the status byte are not masked out because 0x92 is only used to look up the message spec. The _SPEC_LOOKUP table has a key for every value from 0x90 to 0x0f, and they all map to the spec with status_byte 0x90. This is the value which is used from then on. The channel is masked out from the 0x92, and then masked back in inside the 'status_byte' getter. This is a bit tricky. The alternative is to use the original 0x92 and mask in and out the channel when the 'channel' attribute is accessed, but this could get even trickier since most messages don't have that attribute. Edit: assert_data_byte() is not used on the status byte passed Message() (since it's not a data byte), so that's why you won't get a ValueError.
If you are interested in this, you may also be interested in some of the many scientific workflow management systems out there, such as [Pegasus](http://pegasus.isi.edu), [Triana](http://trianacode.org/), [Taverna](http://www.taverna.org.uk/), [Kepler](https://kepler-project.org), [Askalon](http://www.askalon.org/), [Makeflow](http://www.cse.nd.edu/~ccl/software/makeflow/), or [Swift](http://www.ci.uchicago.edu/swift/main/)
[Anaconda](http://continuum.io/downloads) allows you setup a Python 2.7 and Python 3.3 environment side-by-side.
wha? string handling in python 3 is what makes it superior; you'll notice once you handle strings that arent ASCII. i cant remember how many times i shot myself in the foot using python2 and unicode strings...
I'll check it out. Thanks.
idk what lucene is, but have a look at https://pypi.python.org/pypi/Whoosh
downloading files with the browser isn't a good idea, use a download manager that can resume downloads (if server allows it)
The criticism is that in order to teach strings in Python 3 you have to teach some unicode, and that can be off-putting for beginners. It's not a huge deal, but it's worth flagging on the way in.
I'm stuck on Python 2.7 due to library support, but since you're starting out, just go with Python 3.3. I doubt you'll notice the difference. If you do, you're probably working with an obscure package and it wouldn't be hard to downgrade.
This is my first game in python and my first game ever. I like the first two points. I think I might make the save characters a separate folder so I can do a search by file name of each character saved. Also changing human to the character name would be a nice change. Definitely would make it more personal. I been working on balancing how the monsters do damage and how the characters level. I made the monster dangerous and the experience need to gain each successive level has been increased. I used a map to should reference to the location of the town(2). The damage done and experience gained from monsters increases linearly as you travel radially away from the town. I have fixed the last point. level_increase needed to be level_increase_human. I also added interactions so you can say yes or no to the shop's question. Though item choice is based off of gold amount. I gonna keep working on the game and apply a lot of these changes.
Here's how I might clean up the structure for something similar. Haven't really tested anything because I don't like to send out requests to 4chan from shared dorm internet. Hopefully it's reasonably self-documenting with not _too many_ wtfs. Shout at me if you spot something bad. https://gist.github.com/anonymous/5862949 I can guarantee that everyone in the 'Programming Daily' threads on /g/ has written a variation on this theme at least once. You might try there. 
Messy code more than anything.
Burkean, is it a coincidence that the code at the link you posted has the same menu as me? o.o I've never seen that code before. I am going to clean this up with the 4chan api. Regex breaks all the time anyway.
Hi, I'm the author of sigal :-) For the processing speed, it depends on the size of your images, cpu etc., but to give some examples I have : - one gallery with 450 images, processed in ~510 sec (with quite big images) - another with 1600 images processed in ~110 sec (with small images) The good point is that images that are already in the output folder will not be reprocessed as long as you don't delete the output folder. Another point is the use of multiple cores. I made a first try with multiprocessing, but it was not working correctly. Looking at this is one of the next steps. 
Currently it is not possible, but it is definitely on the todo list !
I also have [smithy](http://pythonhosted.org/Smithy/), [scons](http://www.scons.org) and [ruffus](http://www.ruffus.org.uk/design.html) on my list of python workflow managers.
Thanks, but I think we'll be taking this one in another direction. :)
This looks so cool. Unfortunately I am only learning Python so I'm not even sure how you would install this. Vey cool. I will come back to it.
Or for that matter, the Python native code compiler for CMU Common Lisp.
This is a great article, despite your use of Gall-Peters :) I'd like to figure out how to mix/match your Python pieces with some D3 mapping. Referring to GDAL as an incantation sounds about right- my experience trying to figure out how to actually get anything done with the Python bindings has been a little painful. 
Thanks! At some point (probably when I launch the next big version of Vincent), I'm going to write a giant blog post about the existing tools for Python and D3. 
Thanks to Python. ;-)
good luck actually getting paid :)
I'd switch to Python 3.3. Especially in the case where you are learning from the ground up. In a nutshell it has gotten to the point where learning the 2.x series is a waste of time. Beyond that I think you have had this decided for you, if the class demands a 3.x series you have little choice. On a Mac the two installations can stand side by side so it isn't a big deal to install 3.x. 
Hmm, seeing several things wrong (or at least not idiomatic) in here. I'll throw it in my IDE and fix it up for you in the next 10-15 minutes. **edit**: Actually I see there's a lot referenced but missing, so I'll just leave a general example that you can pattern your rewrite after. And yes, I'm going to say it's probably best to rewrite these parts from scratch. from multiprocessing import Process, Queue def f(q): """ This is the worker function for each process. Pass it the queue. """ q.put([42, None, 'hello']) if __name__ == '__main__': q = Queue() # Notice I'm not calling __init__ directly. It will do that itself. # You can put the next two lines in a for loop if you want many processes going at once p = Process(target=f, args=(q,)) # Notice I passed the Queue instance as an argument p.start() # Join all of your processes. You'll want to keep them in a list and loop through them here. p.join() # Finally, process whatever is in the queue output = q.get() print output # prints "[42, None, 'hello']" # Do something useful with the output here 
Just updated it. It doesn't use regex anymore. Please report any bugs.
Ah, gotcha. Yeah, multiprocessing gets weird quick. Even veteran programmers hate writing + debugging multiple processes. There are some good tools out there that will let you inspect each one and set breakpoints, for example, but it can still get confusing.
thanks for your help and I agree that it's time to start from scratch. I originally had written the gencandidatesproc class with the threading module only to realize later that i needed to use multiprocessing, so the code is me trying to transform something for threading into mp...
[Celery Canvas: Designing Workflows](http://docs.celeryproject.org/en/latest/userguide/canvas.html) [AppEngine Pipeline](https://code.google.com/p/appengine-pipeline/)
Instead of messing around with workers and queues yourself, just use the Pool class from multiprocessing.pool: from multiprocessing.pool import Pool p = Pool(processes=nnn) from time import sleep map(sleep, [5] * 10) # takes 50 seconds p.map(sleep, [5] * 10) # takes 5 seconds by sleeping in parallel Bonus: the class multiprocessing.pool.ThreadPool has an identical API but uses threads instead of subprocesses which is sometimes more appropriate.
Glad I could help. I highly recommend Jeff Knupp's "Writing Idiomatic Python" book. http://www.jeffknupp.com/writing-idiomatic-python-ebook/ Good luck.
Currently I use ruffus, although in a slightly different way than what it was envisioned for. It's not very robust, but for now works well enough.
Oooooh, I feel dumb now. Thank you for this.
How do i customize `density` parameter through Wand? See: [density command-line option](http://imagemagick.org/script/command-line-options.php#density) **Solution:** [Improve quality of Wand conversion](http://stackoverflow.com/q/17314382/596361)
Thanks, nice. :) The outcome is a bit surprising to me because under certain circumstances generators are actually slower than populating a list. For example: s = ''.join(generator()) is slower than s = ''.join(build_list()) I guess this is because ''.join reuses the contents of the list, while on the generator a lot more copying is involved. If someone knows better, just tell me. ;-)
So you want to get rid of PyObjects? You claim PyPy does not use PyObjects? You say that refcounting is a performance bottleneck? You cite some performance comparison with Lua that is increadibly flawed (look at the mandelbrot code in Python and Lua. This is not a fair comparison AT ALL) AND is not even particularly conclusive? Sorry, this does not make you very convincing. The fact that you apparently wrote your own Python interpreter is the one thing that lends some credence to your claims. But otherwise, this needs to be backed by evidence in order to not be rejected as FUD.
I think you're right. I've already installed 3.3 and done some test runs to see that they can work that way. I'll run them side-by-side for a while as I migrate my own self to 3.3.
Apologies for the lack of clarity, I meant code that will run on both Python 2 and 3.
Thanks. I've bought the book now and started reading it. Looking good so far. I also found this PEP on doc string conventions, which is very helpful: http://www.python.org/dev/peps/pep-0257/ 
Ah. Got it. Thanks. 
Who says PySide is likely dead? Works fine for me on Ubuntu!
I noticed in the course that they will be providing some modules to install. Keeping these in a venv will definitely prevent any confusion that could arise on your system between 2 and 3. It's usually not an issue to worry about, and it might be a bit extreme, but I ended up doing it that way after pip got confused on my old system and I couldn't use/find pip-installed packages without manual tweaking of my py-path. And that involved looking through my system's python libraries, which were a horrible tangled mess anyway, since so many programs on my OS use python 2 or 3. My new setup is rather militant, but it works. I installed python, virtualenvwrapper virtualenv, and pip. each one for two and three specifically. After that point, I only install libraries in virtual environments, and never systemwide. anytime I need one in whichever python version, I switch into the appropriate env. It's kind of confusing at first, but it allows total control over what libraries are where, and you'll never feel weird about installing a package from wherever, or worrying about if it will break anything. Something to consider. 
Your link points to http://www.answertv.net/ I can't find anything there about a web framework. Did you post the right link? 
why so negative? falcon seems* to prove that there is significant (if not tremendous) performance gain. *“seems” as i didn’t try it, but i don’t doubt those easily verifiable claims
If I'm reading this right, it chooses a wallpaper from /r/wallpaper if it encounters an imgur album. That isn't very user friendly, is it? But then again, maybe this script was originally written as a project for only you to use...? 
This is the lamest thing I have ever read, but at the same time, it's beautiful. 
http://4.bp.blogspot.com/-qT5E00i3GmY/ToCarPNAhjI/AAAAAAAAAG4/7Fa0qelycy8/s1600/Super+Mario+Bros.+1_007.png
Thanks for this! It's actually very timely for a project I'm working on at the moment. I am a bit disappointed that there isn't more documentation. While you're saying that you'll write documentation if there is enough usage you'll likely find that not having any documentation is the barrier to getting the kind of usage you hoped for in the first place. In essence: usually documentation leads to usage, not the other way around.
Currently, PYCS takes some setting up before it works (moreso on Linux). The readme should cover that well enough. There is also a "custom themes" feature implemented, but it hasn't been documented at all. I'm currently without a computer, so that sadly has to wait. EDIT: Oh, and here! Have an [example of its output](http://fripp.starback.se/~samuel/irc/pycs/fishingjam). 
I was about to give it a try, but running startops.py (as suggested by the readme) fails with: Traceback (most recent call last): File "startops.py", line 78, in &lt;module&gt; confutil.createConfig(aliases, pycspath + '\\settings\\aliases.cfg', comments.aliascomment) TypeError: createConfig() takes exactly 2 arguments (3 given) 
&gt; Its GPL licensed so you can do anything you want with the source. No, no you can't.
that's mario
*that's a'Mario
Yes your code is easy to read and the examples are great! As for documentation - don't worry about getting to sophisticated with it. A one page markdown file that highlights the examples from example_functions.py (like a quickstart) would be good enough to start seeing adoption from those who encounter your project via Google searches, etc. Then you can take time to flesh it out later. Thanks again.
i fucked up
Interesting. I think the market for such tools is quite big. Is you project open source? Do you have a link?
You are a genius.....
So you think that they lied in their paper when they plot figures of optimized code running faster than CPython?
Sublime Text 2's SublimeLinter package will highlight functions and variables in the code that are not called anywhere else throughout your code. edit: oh, just noticed you specifically mentioned knowledge of a linter. I guess I'm not exactly sure what you're looking for.
It goes against my instincts as well, since list comprehensions have some C backing as well. I was also surprised by poor filter performance, but that seems to have been fixed in recent Python 3 implementations.
Use coverage.py and just see which lines never run during normal operation.
Are you sure? I don't use SublimeText but looking at SublimeLinter's [python module](https://github.com/SublimeLinter/SublimeLinter/blob/master/sublimelinter/modules/python.py) it just calls pyflakes, which doesn't seem to spot anything when I run it directly.
I've used [Vulture](https://pypi.python.org/pypi/vulture) with moderate success.
Cool well i will add that tonight when i get tired and need a break from programming then. thx DONE
Any of the existing code coverage tools should work, but you have to weed out false positives if your sample run doesn't hit all the functions.
Awesome, this looks like a good starting point.
PyPy does not use PyObjects.
Regex is terrible for parsing html. It just doesn't work the way you would expect most of the time.
No, I did it as part of a contract. It was specifically for crunching a lot of data over and over and over, tweaking algorithms. I don't think the market for such tools is big because every single company that has this need will pretty much roll their own until the open source tools converge on some standard :)
There's a semi-famous cult classic [stackoverflow answer](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454).
When working on large codebases, I can recommend SonarQube to give you an overview. You get a nice [report](http://nemo.sonarsource.org/dashboard/index/pyffi) . In the violations-section you can find a rule "unreachable code" and more. 
how certain are you that they're NEVER called? there may be some really esoteric stuff that only comes up once in a while. what you might be looking for is some kind of statistical function on top of finding stuff that doesn't get used, to track and see how much stuff gets used and what for. 
Related to OCHawkey14's solution, I believe [PyCharm](http://www.jetbrains.com/pycharm/) will do the trick. I don't use PyCharm, but I do use Intellij, which is made by the same company, and has a lot of overlapping functionality. In Intellij you can use their Inspect Code tool and have it look for all potentially unused functions/variables/etc.
Looks like you are running a 2.6 version of easy_install with a 2.7 python interpreter?
Isn't this an undecidable question generally?
20% faster means 120% of the original speed :)
Static typing: int i = "foo"; // Compile error, can't assign a string to an int Dynamic typing: i = "foo" # Sure why not, vars are just references to objects python i + 10 # Woops, runtime error trying to add a string to an int
Because re-writes are so easy!
No. It's straightforward static analysis, barring weird `eval`-type stuff.
Yep. Run the whole program under coverage checker for some time, check what's at 0%.
Your definition of static typing is not correct, since you can write roughly the same thing in languages supporting type inference (and have the error at compile time obviously) (unless you defined that addition of a string and an int is a valid operation, which you may be able to do: &gt; let i = "foo" &gt; i + 10 "foo\n" ) (or the language did it for you, which Java does for instance) (and of course dynamically typed languages may be perfectly fine with the operation as well, I'm looking at you javascript) (or Perl) (or PHP) (also lua, kind-of: it will fault on this but would work if the string was composed only of digits)
&gt; No. It's straightforward static analysis To a pretty limited extent, it really is global static path analysis. Even ignoring not just evals but things like `getattr` (and `attrgetter`), `__dict__` manipulations or metaclass madness, actual dead code detection requires performing global path analysis to know that in e.g. def frob(a): if a &lt; 10: whup() else: b = frobnicate(a, 42) whop(b) is never actually called with `a &gt;= 10` and thus the whole `else` branch is dead code and the test is redundant. So yeah, generally it's an undecidable question.
If you don't have tests, remove steps 1, 3, 4, 5 and perform normal software runs with coverage turned on. Collect, see what has never been used.
The MsgSpec is now a class instead of a named tuple. It made more sense to put my signature() method there, so it had to be done. Yeah, you were right. It's better this way. 
That's a far more aggressive view of "dead code" than I was talking about. I meant more like "method `foo` of class `Bar` can never be called".
&gt; That's a far more aggressive view of "dead code" than I was talking about. Yeah, but it's the one matching standard uses of "dead code analysis" and "dead code elimination": dead code is code which is never executed and code which is irrelevant (affects variables which are never queried, or always followed by a fault and thus having no impact on the behavior of the program) Unused methods or functions, or unreachable code (e.g. code following a return or raise) is a subset of dead code.
&gt; Static analysis [Halting problem](http://en.wikipedia.org/wiki/Halting_problem) &gt; How does one mention a method but not call it? def foo(a): if a: do_something() else: do_something_else() the program never calls `foo` with a falsy value, the second branch is dead code and `do_something_else` is a dead function. And of course code can be technically live (the program could theoretically run it) but effectively dead (program input never leads to the code being run), e.g. XBM support in browsers (removed from most of them only a few years ago, probably hadn't been run by user request in a decade) &gt; And why would one do that? I'll answer this question with an other question: why would one want to put bugs in his or her program?
Yes, but it's the subset I understood the OP to be asking about, based on "more specifically functions/methods that are never called". BTW, there's no need for people to be downvoting you. It's a good point to raise, and I should have been more clear about my assumptions in the original comment.
Aww, thanks! Wait a second...
&gt; Yes, but it's the subset I understood the OP to be asking about, based on "more specifically functions/methods that are never called". True.
I have in fact tried lua. Not luajit, true. But nevertheless I have been *very* impressed with Luas elegance and speed. Regardless, this is not a fair comparison: [mandelbrot, python](http://benchmarksgame.alioth.debian.org/u64/program.php?test=mandelbrot&amp;lang=python3&amp;id=2) &lt;-&gt; [mandelbrot, lua](http://benchmarksgame.alioth.debian.org/u64/program.php?test=mandelbrot&amp;lang=lua&amp;id=1) These pieces of code can not be meaningfully compared for code size, memory consumption and speed because they essentially express different algorithms.
The article left me very unconvinced whether it was just some random dude claiming wild stuff on the internet or genuine research. I realize now that these people actually know their stuff. But the way the article was written, I really wasn't sure.
I don't think OP is trolling at all. I'm learning Python right now and I'm still trying to find something I can create that I can use to practice my new half-skills
http://en.wikipedia.org/wiki/Code_coverage#Basic_coverage_criteria http://www.reddit.com/r/Python/comments/1drv59/getting_started_with_automated_testing/#c9tfxgd
* Haha, yes inherit from object. I keep forgetting. :) * I agree that .format() is better nearly all the time, but how is parts.append('{}=0'.format(name)) any clearer in this case? The '=0' is such a tiny string that I find concatenation much easier to read in this case. Is + always evil for strings? (I haven't come to this part of the book.) * I agree totally about _MSG_SPECS. This needs to go in the docs. Moving it to a text file for now. (Woah, that's so much better!) * Yeah, it's my new naming convention for everything! No, I just sometimes use short names for temporary local variables. Will see if I can come up with something better. By the way, have you seen what I did to __setattr__()? I've also added a ton of docstrings, so using pydoc and help() is starting to be really useful now. Edit: typo
That doesn't tell you the function is never called, [especially in python](http://docs.python.org/2/library/functions.html#getattr)
I always assume that posting this kind of stuff in programming subreddits implies that people want criticism/feedback. So here come two and a half major points of criticism: * Why is this distributed as fully configured Tornado app? Your actual library boils down to these two files: [`xlsx_factory.py`](https://github.com/papaloizouc/jsonTOxls/blob/master/server/xlsx_factory.py) and [`input_factory.py`](https://github.com/papaloizouc/jsonTOxls/blob/master/server/input_factory.py). * Why is [`InputHandler`](https://github.com/papaloizouc/jsonTOxls/blob/master/server/input_factory.py#L5) a class? It only has class methods. * The README says I should run `python3 server/server.py` but there is no such file.
there are a few clues, even if you stop before the last paragraph, which reads: &gt; Still, we found the project interesting enough to write a paper about it (which we submitted to the Dynamic Languages Symposium). not that there aren’t any stupid papers out there, but …
&gt; It is easy to just throw the halting problem and say "I give up, nothing can be done" like you did Oh yes, let's add misrepresentation and willful lies to your offenses shall we? Don't you think you might want to stop digging at some point? &gt; Python's community brain fart answer of "Umm... just... WRITE MORE TESTS!" is not a valid argument. It is just sad. The question being, is it more sad than your pitiful strawmen, or do you win this contest handily?
Thank you i like negative feedback because you get better. 1) I made it as a tornado app because when i started the main idea was that i found a very good xls library in python and you can run a server in your business, where you can send json request from several projects from any other languages e.g. java php. The main idea is that i have worked on 4-5 different excel API's so far because every project has something different and i wanted to get a centralized/unified way (The effort spent by individual developers maintaining different xls reports i believe it worths having just 1, and i choose xlsxwritter because it has decent documentation and doesn't need a lot of code to create files) Of course it doesn't have to be a server, i can probably make it optional. In theory i can create xls file with much less lines using my library than apache poi (no criticism just example), in practice i have a java job and i don't think i will ever manage to get java people to appreciate python. 2) You are right for InputHandler. It was a class when i started because i had some state in it, but i decided to just make it static. I will change that today. DONE 3) You are also right for this python3 server/server.py. I renamed the file yesterday and forgot to change the readme. I will change that today as well. DONE Thank you for your feedback.
I understand that you made it a Tornado app for yourself. That's totally reasonable. But don't distribute it that way. It makes it harder to use and for yourself (and others) harder to maintain. And you "have to" write much more documentation. Right now it's not a library, it's an application. PS: criticism is not *negative* feedback ;)
yeah but how often does that happen? :P i only advise caution in ripping out odd functions because sometimes you get stuff that's called less than .1% of the time, but it happens to be kind of important. we had stuff like that pulled from a test management system we used at a job i worked, and it managed to grind a whole test series to a halt for over a week till we found the problem(talk about obscure).
I slightly misunderstood these libraries at first. I didn't realize that they just generated the proper javascript. I've been using phantomjs via subprocess to render the charts out to a rastered image. I would recommend that you include info about how to do that in your tutorial. 
I typically use pychecker and pylint. Both try to find unused and unreachable code. Pylint is much more thorough. I'll usually use pychecker after any change and pylint weekly or so (since it's so much more verbose). You'll find there's a lot of low-hanging fruit. Dead code is definitely bad but it won't cause runtime errors. Things like redefined names and funcs, syntax errors in rarely-called code. missing imports and undefined names are just as low hanging but much juicier. These tools will find many of these for you. If your code base is that old and large and hasn't had static analysis tools like these run in it, you're bound to have some big surprises. There will likely be a ton of messages. Many will be easy fixes. Some are a bit cryptic at first. Do yourself a favor and configure the tools to just check for what you think is important. If you get through these, your code will be much better for it.
The last few versions have had memory leak issues for me (particularly with large projects). Hopefully those leaks got plugged in the beta.
PyCharm gives you this information as a matter of course as part of its inspection stufg
[Vim](http://vim.org)
[PyDev](http://pydev.org/)
Glorious vim master race.
Either you need to disable your personal firewall software, or you have a file in the start directory which has the same as one of the system files. (Eg, a file named "string.py" or "os.py".) There may be other reasons instead. You'll have to provide more information about the failure in order to diagnose it, like how you're trying to start the program. You'll also need to provide details about the solutions you've tried.
In general, yes. In practice, undecidable code isn't really useful…
thx for the course link i was planning to do something similar but i didn't know any course. 
starting it through terminal seems to have fixed it... is there any way to just open it from the apps folder?
PyScripter. It's free, open source, and on Windows. Very good software with really nice debugging tools (I'm just a beginner at Python). Try it out.
I've tried a few. Started with IDLE, stuck with it for over a year (it's really not THAT terrible) I've tried notepad++, but it had some really weird problems I couldn't fix. Tried komodo edit, vim, pywindows and aliens aptana studio. I simply didn't like komodo. I never had the patience to get familiar with vim's commands. Pywindows is... Well, for windows. I also program on Ubuntu. Aptana studio is pretty neat and I still use it when working on web projects, though probably converting to my current text editor. Sublime text 2. It's simple, extremely lightweight, had awesome plugins, easy to understand command system, fully customizable, looks elegant and is just overall AWESOME to use. It starts up within a second, always. It never crashes or hangs, no matter what I try. Plugins can be managed extremely easily with a plugin, it allows you to install plugins in less than 5 seconds (not kidding) http://www.sublimetext.com Built-in Python console, run a script with Ctrl + B. Also, it's semi-free. You should buy it, but the trial is the complete version, and it has no time limit. I really recommend this!
Well, a program that could solve the halting problem would be pretty handy. ;)
Notepad++
I don't know. Have you done an internet search? A Google search for 'mac osx python idle' finds these possible matches. http://stackoverflow.com/questions/8792044/how-do-i-launch-idle-the-development-environment-for-python-on-mac-os-10-7 http://www.youtube.com/watch?v=BE1wDsLzOJA
what does your shortcut run? can't be the same command. also do you have 2 versions of python? 2.7 and 3.3 maybe? if i am right idle command for python3.x is idle3 and for 2.x is idle. If you run in terminal idle it may run 2.x but the shortcut may be running 3.x idle. so if 3.x has a problem the 2.x may still run ok. 
i'm a big fan of sublime text 2. it's in a word simply gorgeous. it also has auto-suggest based on prior-typed words(opposed to auto-complete), it automatically completes bracketing, and can do everything the old boys like Vi or ViM can do(including look just like them). the tabs and project stuff is just icing on the cake. 
it's bloody NICE. when we started automating stuff at my last job, we paid for several copies. not because we thought we had to, but because we were a startup, and we wanted to support another startup that was doing something we thought really deserved the support.
Hence, undecidable.
my shortcut runs 3.3 and im pretty sure i dont have 2.7 installed, but ill check EDIT: using 'idle2.7' i figured out that i do have 2.7 installed. any way to delete it?
i believe you should keep it,other software would normally depend on 2.7. if you run idle in terminal it should normally run idle2.7, so i guess your idle2.7 works but your idle3 is broken? that's why shortcut doesn't work but terminal works?
How about eclipse with vim as the text editor? ah? AH?!
no, terminal allows both to work, but i cant get it to start from a shortcut
I use Eclim to get the best of both worlds whenever I use Java.
then the shortcut is doing something else. cant u make a new shortcut? on linux you do this : which idle3 and it gives /bin/idle3 should be the same on mac, so if u make a shortcut for it it should work. 
Emacs in an 80 character wide terminal with [auto-complete](http://cx4a.org/software/auto-complete/).
Good to see another emacs user. :) 
I'd suggest Spyder if you mainly work on data analysis projects. https://code.google.com/p/spyderlib/downloads/list Their self-contained application for Mac is quite good. I say "Self-contained" because it comes with a bunch of the core scientific libraries built into the package so you don't actually need a Python distribution installed to develop with it. The only problem is it lacks a package manager right now. Otherwise, I use Sublime Text and PythonAnywhere.
This is my vote too, especially Django!
You still get to work on this professionally? I thought you had to switch projects or something.
Doesn't matter. I've gone from Eclipse, to IDLE, to KomodoEdit, to Notepad++, to VIM, to Geany, to Kate, to Visual Studio, to PyCharm, and back forth again and again. If you're a professional Python developer then it matters -- if you're writing code to solve day-to-day issues then just use whatever is quick and easy. Currently: Notepad++ because my main work machine is Windows 7 and I can write batch files, PowerShell, XML, and Python all in the same editor. And it's lightweight and handles LARGE log files with ease.
FYI the multiprocessing library is quirky/broken Windows, unfortunately. 
PyCharm is 2nd only to IntelliJ You *need* an IDE when you're working with a large codebase. A text editor just doesn't cut it when you're managing tens of thousands of lines of code. 
if it's PHP, you can do $func() which will execute the function that's name is stored in $func. i've seen this used in places where it really make sense (really useful in OO), but also in others where they didn't understand exceptions.
I think you'll find this very useful. http://projecteuler.net/ 
Try asking on /r/learnpython.
Agreed. It always seems like these editor-preference discussions fill up with vim faithful and then I feel like if anyone sees my enlarged left pinky, they'll know I don't belong. 
Implemented with multiprocessing.Pool and everything runs smoothly now. Had to download a [patch](http://bugs.python.org/issue12157) for the module so I could pass it an empty list on occasion, but it's using all 4 cores of my computer. Way easier than using multiprocessing.Process
I don't get this. Why would you want to use Visual Studio, of all things, to develop Python code?
pyparsing is your friend. I highly recommend it. 
Thanks, I'll check it out. I've been looking at the parsley library, which I saw mentioned at PyCon last year - any opinion on pyparsing compared to that? 
Another vote for pyparsing. I parsed a format similar to yours (OCR'd dictionary entries) with pyparsing and it worked out great. I haven't used parsely, but from the looks of it, it's probably got stronger theory behind it, and is a little more modern than pyparsing. Another big difference seems to be that in parsely you define your grammar in a big string with its own special syntax, while with pyparsing you use python syntax.
pyparsing is truly excellent. I don't think you need anything else.
there have been a few fixes for large projects. hopefully yours is addressed in Beta. if not, please contact us &amp; we'll root cause &amp; fix it for RC. thanks.
well... some people like using a smart editor, others like an IDE, and some use both. to each their own. specific reasons for using PTVS? i'd say: * if you're on windows &amp; want a free python IDE * you're already a VS user &amp; need to write some Python * you need some specific features that PTVS has like, mixed CPython/C++ debugging * you need IronPython / C# / F# support * etc. there are other great IDE's as well, such as pycharm, pydev, wing, komodo, spyder, ... on windows as well. if you definitely need a cross-plat IDE, or a very lightweight IDE, PTVS isn't for you. [disclaimer - i work on PTVS]
I usually use [Waxeye](http://waxeye.org/); it's cross-language and it's pretty easy to use. I've also heard some good things about [PLY](http://www.dabeaz.com/ply/), which uses the old YACC-style grammar.
The major pain in the ass that this gets around is declaring the environment in code. No longer do you have to declare braintree.Environment.Sandbox when calling configure; but it also wraps the configuration up fairly nicely.
For working on big projects, Eclipse + Pydev is awesome. I've just been watching the demo of Python Tools For Visual Studio from Microsoft. If you're on Windows (sadly, sometimes it is necessary), this looks like a good IDE with features comparable to eclipse/pydev (Note, they offer a perpetually free edition based on "Visual Studio Shell" which lacks the language profiling tools but is otherwise a complete IDE for python). For resource-limited machines (I'm thinking raspberry pi, 250MB ram and weedy CPU), Geany works well for me. My scientist colleagues seems happy with Spyder for doing data analysis. Canopy from Enthought might be good for weaning people off matlab.
I am intrigued, please elaborate.
What am I supposed to be looking at here? What is converter.py? How did you come to the conclusion that python2.7 is running?
I think pushing register vm vs stack vm is doable - but you have to live up to standards of contributing, which means going and writing a patch, tests and making sure your contribution is high quality. Also doing more comprehensive tests
I've only ever used the VS shell w/ PTVS. Works perfectly. I love it as a dev environment. It's unfortunate because I was about to move away from Windows completely, but now I'm trapped again. Damn you PTVS team.
Nice! I love stuff like this. Here's where I got before the game quit (I think I was killed): The highest area reached was 1 killed 12 beasts. The human was level 8 with 86.6224821857 experience. 0 gold was collected. The human wandered the forest for 7.40530689955 minutes. Can you continue playing characters that have died by running the program and loading them up again? Maybe you could add a hardcore mode, where death is permanent. I gave myself some money and visited the shop and got this exception: Traceback (most recent call last): File "Game.py", line 388, in &lt;module&gt; x_pos,y_pos,monster_roll,human = movement_human(area,kills,level,experience,gold,x_pos,y_pos,human) File "Game.py", line 279, in movement_human human = human + level_increase NameError: global name 'level_increase' is not defined It's a good start! You could add a lot of things to make it more fun. Have you seen [Candy Box](http://kotaku.com/candy-box-a-game-thats-simple-sweet-and-strangely-c-492318079) or Dark Room? They're both text-based games that starts off very simple and then adds more and more interesting / addictive features the longer you play it. Not to say you should copy them.. just some ideas. More stats, items, equipment, random drops, random events, scenarios, encounters, storyline, etc. Have you thought about putting the code into a repo on github (or bitbucket) instead of just a gist? That makes it a little easier for people to follow along and get updates.
It isn't. Whatever gave you that idea?
Excellent, thank you. 
The fact that it goes through the program once successfully, and then spits out errors that it would only get from python 2.X
`NameError`s happen in python3 too. I think it's much more likely you just have an error in your script. You should edit your post to include your code.
As it's not been mentioned I use Aptana, which I believe is a branch of eclipse/pydev 
My favorite is [parsimonious](https://github.com/erikrose/parsimonious). It is based on [parsing expression grammar](http://pdos.csail.mit.edu/papers/parsing:popl04.pdf) which means you don't need a tokenization step. Here is a [JSON example in parsimonious](https://github.com/erikrose/parsimonious/blob/json-example/example_json.py). I also made a screencast that uses parsimonious, which could be a good introduction: [how to write an interpreter](http://www.youtube.com/watch?v=1h1mM7VwNGo).
May be this answers your question. &gt; Python ports of other libraries, like Spring or Guice, retain the feel (and verbosity) of being designed for a statically typed language. Pinject was designed from the ground up for python.
... Did you just come to a Python subreddit to bash Python? So brave.
Yep, the 100% coverage is a bit ridiculous (I know!), but it is the declared goal of all public Pyramid projects. Thanks for the feedback. Also, it is published to pypi. Link here: https://pypi.python.org/pypi/pyramid_braintree/0.1
ANTLR with python3 is terrible (was when I last checked)
- Always use format(). It's not just a question of efficiency. The day will come when changing or adding something to that string will be necessary, and then you'll thank yourself for not using '+'. - You do know that _init() will only be called once, and only when the module is imported right? - Also are you sure you want to use a global variable? Is it really needed for your clasess/functions to work properly? - Readability counts, and even more so in Python. Don't use letters as variable names unless it's part of some iteration like 'k in d.keys(), etc. - Why are you still importing namedtuple? - 'SPEC_LOOKUP = {}' needs to be placed somewhere more relevant. - __setattr__() is still too long and messy. You need to make it more readable, and you need to start using a dictionary. - What editor are you working with? 
Hey, I wrote [forkthecookbook](http://forkthecookbook.com) in Python. I started off with PyParsing, but then it eventually became entirely regex based. If you have any questions go ahead and shoot
FWIW, I'm a PLY fan.
Oh, that must be from the default python install, but i have reinstalled setuptools for 2.7
Thats what I am trying to do, but it pops up this error everytime
* OK, you've convinced me. * I made init to avoid polluting the global namespace, but I see your point. * I'm not sure where I would put it if it wasn't global. In Message? * Got it. I'm in the process of eliminating one-letter names (and other badly named tings) * Ah, namedtuple. I didn't notice that. * I've moved it to the top. * I couldn't make a dictionary before, because I had some special cases. I've eliminated them now, so I'll give it a try. * emacs 
FYI, Lepl is no longer developed and supported.
- Is the global variables used more than once or twice? Can't you have a function just return it? - Start using PyCharm or Sublime Text (with Python plugins). I copy pasted your module to PyCharm, and the static analysis did wonders. Good Luck!
Parsly?
Parsing was actually my gateway drug for Haskell. It's worth sticking with because applicative/monadic parsing (which i believe pyparsing is based on) is life changing!
* Yup. * Will try. Thanks! 
The biggest difference seems to be a goal of avoiding modification of existing code in the simple case, by using type inference based on argument names. eg. func(some_class) will infer the type SomeClass and implicitly create a binding. The same kind of inference applies to provider methods: provides_foo() provides the argument named "foo". Injector doesn't have this kind of inference, favoring explicit over implicit, but the same goal of avoiding modifying existing code is generally achieved with provider methods. For more complex applications Pinject suggests using annotations similar to Injector. In summary, my guess is they're largely equivalent for non-trivial applications, but Pinject makes it simpler to use DI with simple applications. Disclaimer: I'm the author of Injector. Edit: more detail.
I'm pretty sure you're reading a string with input(). Python 3's input() works like Python 2's raw_input(). It just returns the string without evaluating it. That's why Sam is not set. See: http://stackoverflow.com/questions/3800846/differences-between-input-and-raw-input Edit: Typo. 
Take a look at XText which should solve your problem.
 http://en.wikipedia.org/wiki/Context-free_grammar http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form http://en.wikipedia.org/wiki/Parsing_expression_grammar
http://en.wikipedia.org/wiki/Colorless_green_ideas_sleep_furiously
http://www.reddit.com/r/Python/comments/1gn9gv/z/cam3t17
Which part of the sidebar do you feel is relevant to this question?
http://www.reddit.com/r/learnpython/wiki/index
Actually I interpreted something into *"programmers"* because it doesn't make any sense. So I guess this part is relevant: &gt; **Online exercices** &gt; * codingbat * pyschools * codecademy * /r/dailyprogrammer &gt; **programming challenges** &gt; * The Python Challenge (solve each level through programming) * CheckiO (game world) * Project Euler (math heavy)
Vim https://github.com/carlhuda/janus https://github.com/klen/python-mode http://vim-voom.github.io [EDIT] https://github.com/ivanov/vim-ipython#similar-projects https://github.com/gotcha/vimpdb https://dev.launchpad.net/UltimateVimPythonSetup
http://wiki.python.org/moin/IntegratedDevelopmentEnvironments http://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Python
Ah, thanks.
Hilarious. I'm impressed how much they missed the point.
http://docs.python.org/2/tutorial/errors.html#defining-clean-up-actions http://docs.python.org/2/library/contextlib.html
Can you compile an IronPython project to a single executable, and, if so, what .NET version will the executable run on?
Alright I give up, what exactly are you trying to say?
We might try to make a patch eventually. For now, Falcon still isn't really done. We need to pull in more of the language features and, as you said, test everything a lot more thoroughly (both for correctness and performance)
Why not just pull the repository and run the performance test yourself? Or, even better, run it on new code, help us find things than run slower than Python so we can fix bugs and identify other features worth adding. 
How so?
By the way, Peter Norvig in his "software design" course on Udacity implemented a fully-functional backtracking BNF-defined parser in like 30 lines of code.
http://en.wikisource.org/wiki/The_Road_Not_Taken
There's nothing in the IronPython that specifically supports this. In theory you could use a combination of clr.CompileModules (to pre-compile Python code to .NET assemblies) + ILMerge (to combine that assembly and the IronPython DLLs) to accomplish this, but I'm not sure if anyone's tried. If that worked then it'd work on any .NET which IronPython supports which I believe is .NET 4 and above.
I'm looking at the [basic dependency injection](https://github.com/google/pinject#basic-dependency-injection) and scratching my head. Basic Python OO could do that in the same amount of lines. I failed to see the value... hmm maybe I should read on.
It's a whole lot of code for supposedly enabling you to do stuff that Python already provides. For example, passing arguments to method calls.
My mistake, I searched on crate.io, but it seems it isn't up to date.
I was actually planning to use Sphinx for documentation, but I wasn't aware there was a doc string format I could use. I'm definitely doing that! By the way, I've finished reading Writing Idiomatic Python now. Good book! And I've downloaded PyCharm and will give it a whirl tomorrow. :) Oh, and the dictionary thing in __setattr__()? It works beautifully! I've done the same to bytes(). It's going to be a pleasure to write tests for these mini-functions I've broken out. 
That is actually somewhat appropriate, because I'm trying deciding if you are a really crappy troll or just not very bright. 
Ok, I fixed that and I get the following via printenv: LDFLAGS=-L/home/USER/python/Python-2.7.5/lib/tcl8.6 -L/home/USER/python/Python-2.7.5/lib/tk8.6 CPPFLAGS=-I/home/USER/python/Python-2.7.5/include I still get the same error running setup.py. Also, could you dumb down the part about LD_LIBRARY_PATH for me? I've been using Python for a while, but this is the first time I've had to install it and playing with compilers this much is completely new ground for me. 
Yeah, I'm an idiot. I had an undefined variable named "Sam" hanging out.
Look for a configure log or a verbose option, and debug the problem. You can use strace to show all file access syscalls if you can't find a log or it doesn't exist. I know that doesn't seem very helpful, but that's the best I can tell you without being able to actually sit down at the machine in question. Somewhere, something is looking for a file and failing to find it. You need to find where that happens and why it's not being found. `LD_LIBRARY_PATH` is about telling the runtime loader where to find dependent libraries when it tries to load and execute a binary. For example, binary `foo` might contain in its ELF headers a `DT_NEEDED` tag specifying `libbar.so` as a dependent shared library. The dynamic loader (ld.so) will search a list of paths to find `libbar.so`. That list can be affected in a number of ways, see `man ld.so` for details. `LD_LIBRARY_PATH` is the most common way of adding something to the list. If you put shared libraries in a non-standard place, you have to somehow alert ld.so to this fact. But such a failure will not generally show up at compile-time or link-time, but at run-time, i.e. `ld.so` is different from `ld`, commonly referred to as the link editor or just "the linker". And likewise, `LD_LIBRARY_PATH` has nothing to do with the linker being able to find libraries, which is most likely what is stopping the configure process. That's a long winded way of saying that you will almost certainly be required to set `LD_LIBRARY_PATH`, but it's not related to the proximal cause of whatever error you're seeing now. 
you can either insert a vim editor into eclipse or add eclipse functionalities to vim. Google eclim or "vim eclipse", you'll find it ;)
Any PEG will do, but parsley is my favorite as well.
I'll give it a shot. Thanks.
I'd be open to better explanations myself. So I use DI frameworks when I'm working in Java or C#, but I haven't used one in python, I've been told it's not terribly pythonic, but I'd love to have someone with more experience weight in here. Let's cover in a nutshell why I bother at all in C#/Java (apologies, this is in C#/Java to explicitly highlight interfaces) public class Bar { public string Foo() { var example = new DataBaseConnection(); return example.DoStuff(); } } Imagine that's our code, and we want to test our code. We can't test this without involving the DB, which means unit testing isn't so unity, things are slow, life is pain (we have to like set the DB state prior to tests, etc). Now using DI (not a framework... just DI): public class Bar { public IDBConnection DBConnection { get; set; } public Bar(IDBConnection dbConnection) { DBConnection = dbConnection; } public string Foo() { return DBConnection.DoStuff(); } } Whew, verbose languages huh? Okay so now we're coupled to IDBConnection which could be anything, including a mock. So now when I goto test, I inject a mock there and bob's your uncle. But... how do I bother to consume Bar now in my code? The Java answer is "Why make an abstract factory, then an implementation that will build Bars and inject the right dependencies... or use a framework that's going to build these factories for you". Right, you can do that and have 1.2 billion factories, but maybe an easier way is to ask a DI framework to wire these together for you. Then you sort of register implementations for IDBConnection and then resolve Bar and the framework figures this out (and the implementation is a Mock when you're testing and the real deal with you're in live). So in short, DI Frameworks can provide you a simple place to create a compositional root for your application and support easily swapping out implementations such as mocks/etc at runtime. For better or for worse, a lot of python testing I see will just monkey patch out the DB in the tests. I don't know if that's a better way or not, so I'm happy to learn more if someone wants to speak up with their experience. 
HN comments: https://news.ycombinator.com/item?id=5948893
I totally agree, i tried pycharm pydev idle geany komodo ninja wing etc and i stick with pycharm. But If someone wants to use vi it stills makes sense to me, depending on the project. 
Are you familiar with the concept of [code coverage](http://www.reddit.com/r/Python/comments/1h3ygp/dead_code_detection_tool/caqu02w)?
Interesting. We faced a number of similar issues while we were building our flask stack. In no particular order: **Settings** We actually have three settings files. One comes default with the library, and has all the 'default' settings for things. We call this base.ini and it's always present in the lib itself. Then we have default.ini, which is in the application space and contains the defaults for the app - this is usually stuff like session cookie name, timeout etc. These settings overlay the base.ini. Finally there's a local.ini, which contains the settings specific to the environment you're on (developer machine, prod etc) and a separate test.ini (four!) for running tests. **Management commands** The library brings in a bunch of management commands by default, including **shell** which gives you an (i)python shell with various handy defaults like model access, **serve** to serve the whole thing, **test** for running the test suite or part of it, **cron** which serves as an endpoint to call for cron operations, **compile_static** which will build any .less etc stuff and **watch_static** for same but auto-build-on-change. **Decorators/Auth** Rather than having **@login_required** we modified the blueprint itself so that you do @route(..., auth=auth.has_role('foo')) or similar. This was a deliberate design choice to force the developer to specify authentication for every route - there's an auth.public if it's supposed to be open. **Testing** Due to the nature of the apps we build and a design to test "from the user", we make heavy use of selenium in our test setup, so it's always there by default. 
Does anyone know why he's jamming his services into his \_\_init\_\_.py files? Just seems weird to me. He could be putting them in their own files in the same folder as the \_\_init\_\_.py. I'm confused....
Programmers, in languages like C, are prone to error regarding not cleaning up their resources. You might check out the Rust language. http://static.rust-lang.org/doc/tutorial.html#destructors http://static.rust-lang.org/doc/rust.html#unsafe-functions TLDR [fast paths](https://en.wikipedia.org/wiki/Fast_path) are frequently sub-optimal from a security perspective.
Rust is actually one of the languages I've been looking to play with lately. I got through the tutorial but became stuck after not having any idea where to go after. 
And the single click installer I mentioned is not available here: https://pytools.codeplex.com/downloads/get/697389
So he may eventually do import foo.service.db.reporting, db.munge etc. I'm guessing. It's similar to what I do sometimes. 
i actually never tried it with python3, only with python2 and it was pretty nice. also it was the antlr v3 - can't sa anything about v4 but i always considered it a really nice peace of software - despite its written in java :-P
Hi, I get the general 'thanks', (thank you), but find it hard to discern the meaning behind your list of those particular links?
You set a breakpoint on line 7. It's not going to continue running until you hit the resume button (the one with the play symbol next to the pause symbol).
Aha, I was wondering why "Sam" didn't work, but the others did. Don't worry, though, we're all idiots from time to time. :) 
Nice post. Requests library is awesome. If you need to consume SOAP web services, you have to try out a library called "suds". Pretty neat and easy to use.
It would be great if this (and/or the OP) were listed in the Python standard library itertools recipes. These links are to the rendered and source versions of the docs for the itertools module in Python 2 and 3.
&gt; Programmers, in languages like C, are prone to error regarding not cleaning up their resources. Just the other day I coded some short C app, only one function. I had all the error flags turned on so it was absolutely proper C99, except I still forgot to free() my malloc(). Doesn't really matter in my one function application since it will clean up when it closes, but it just showed me how easy it is to forget.
*Related Posts* [A comprehensive guide for pragmatic RESTful API design](http://www.reddit.com/r/programming/comments/1f9k42/a_comprehensive_guide_for_pragmatic_restful_api/) [Best Framework/Libraries for a small, REST-Based application](http://www.reddit.com/r/Python/comments/1c6866/best_frameworklibraries_for_a_small_restbased/) *API Directories* http://mashable.com/category/apis/ http://www.programmableweb.com/apis/directory http://apis.io/apis *[Linked Data](http://www.reddit.com/r/semanticweb/comments/1gbuvp/explain_linked_data_like_im_five/)* [^*](http://www.reddit.com/r/compsci/comments/1e3mht/is_rdbmss_and_sql_still_part_of_the_standard/c9xz34s) [Where can I find useful ontologies?](http://www.reddit.com/r/semanticweb/comments/1ff5kc/where_can_i_find_useful_ontologies/ca9nnx7) 
Google failed me in finding the management commands library for flask. Do you have a reference? 
Can you explain that auth decorator a bit more? That looks interesting.
I'm not sure about these precise examples, but there was a recent similar question on the python-dev mailing list. The main given reason was that some codebases are older that the [PEP8](http://www.python.org/dev/peps/pep-0008/) itself, which gives some strict guidelines about the "Pythonic" style. Edit: Here is the python-dev thread I was refering to http://code.activestate.com/lists/python-dev/122496/
OK, that makes sense to me, for a strongly typed language like Java. But in Python I'd write something like: class Bar : def db_connection (self) : return open_database (...) def foo (self) : return self.db_connection().do_stuff() and then in my tests, I'd mock the *Bar.db_connection* method. That's typically one line of Python (using **with**), and its easy to see what is going on. I can even mock it so that my mock calls the original *Bar.db_connection* method. And: there is no need for "swapping out implementations such as mocks/etc at runtime" because they are only there when testing. Pinject's "Pinject has reasonable defaults that allow it to work out of the box" feels really scarey to me. I want to test my code to verify that it does what I want it to, I don't want to be guessing whether Pinject's "reasonable defaults" are actually reasonable for my use. On this one, I think Python's explicit is better, and I'd go with injector .... but I think I'll stick with mocking.
Nice post. Two cents: 1) requests has already json deserialization http://docs.python-requests.org/en/latest/ &gt;&gt;&gt; r = requests.get('https://api.github.com/user', auth=('user', 'pass')) &gt;&gt;&gt; r.status_code 200 &gt;&gt;&gt; r.headers['content-type'] 'application/json; charset=utf8' &gt;&gt;&gt; r.json() {u'private_gists': 419, u'total_private_repos': 77, ...} 2) hammock ( https://github.com/kadirpekel/hammock) is a nice web-service module that would make this kind of code more DRY
Madness! I feel like they shouldn't be plural... 
This is where things like RAII in C++ and context managers in Python are really great. I could never go back to C.
defaultdict: http://hg.python.org/cpython/annotate/9046ef201591/Modules/_collectionsmodule.c#l1428 OrderedDict: http://hg.python.org/cpython/file/tip/Lib/collections/__init__.py#l26 http://docs.python.org/2/library/stdtypes.html#dict.setdefault
You're right. Thanks. I'll make sure to use that in the next requests/json post. 
Also [`UserDict` and `DictMixin`](http://docs.python.org/2/library/userdict.html#module-UserDict) and [Collections Abstract Base Classes](http://docs.python.org/2/library/collections.html#collections-abstract-base-classes) And [`python -R`](http://docs.python.org/2/using/cmdline.html#cmdoption-R) and [`PYTHONHASHSEED`](http://docs.python.org/2/using/cmdline.html#envvar-PYTHONHASHSEED) As of v2.7, [`namedtuple._asdict`](http://docs.python.org/2/library/collections.html#collections.somenamedtuple._asdict) returns an `OrderedDict`.
also namedtuple. I think I've read one reason is the possibility of eventually becoming a buitlin.
Could you expand on ``python -R`` and ``PYTHONHASHSEED``? I fail to see the link.
omg, I need this in IronPython
nginx with uwsgi and supervisor. *edit*: http://www.reddit.com/r/Python/comments/1h93h8/you_should_be_using_nginx_uwsgi/
Another few suggestions: def __call__(self): """Return the current time""" return self.timer() This allows you to use the timer as you would the original timer: &gt;&gt;&gt; timer = Timer() &gt;&gt;&gt; print(timer()) 1372422075.670381 Also, why not compute elapsed time on demand? def elapsed(self): """Return elapsed time in seconds""" return self.end - self.start def elapsed_ms(self): """Return elapsed time in milliseconds""" return (self.end - self.start) * 1000 I actually need this in one of my current projects. What license is it released under?
Plurals should only be used in the names of collection classes.
wow that does look pretty nice. 
Thanks! I'll include it in my project. Please feel free to include them. Actually, I don't either, now that I think about it. :) They are not that ~~hard~~ expensive to compute. A couple of things though about __exit__(): * the self.elapsed_ms line is longer than 79 characters. It wraps in my editor. (See PEP-8.) * the names could be more descriptive. How about elapsed_seconds and elapsed_milliseconds?
Yes! That's really useful. I like it. You could do: def __enter__(self): self.start = self.timer() self.end = None def __exit__(self, type, value, traceback): self.end = self.timer() def elapsed(self): if self.end is None: return self.timer() - self.start else: return self.end - self.start 
I moved it to https://github.com/brouberol/contexttimer, included your suggestions and named you in the Readme. I'll package it to pypi when I can. RIght now, i'm leaving for the weekend :)
Cf http://www.reddit.com/r/Python/comments/1h8nnp/a_timer_as_a_context_manager/carz0aw: I'll do it next week, after the weekend ;)
Cool, thanks! One more thing for over the weekend: This should be moved up into the doc string of Timer: class Timer(object): """ A timer as a context manager. Wraps around a time generator. A custom generator can be passed to the constructor. The default timer is timeit.default_timer. This measures wall clock time, not CPU time! On Unix systems, it corresponds to time.time. On Windows systems, it corresponds to time.clock. """ I hope you have an excellent weekend!
Here's a nice 30m presentation from pydata: http://vimeo.com/63435580
Glad you find it useful too. And I really like getting rid of that unecessary variable.
A lot of those sound like stupid ideas in C, let alone Python.
Thanks again for your feedback i added doc in the readme file both the json and images of the output. You were right, even if its the same code its much better to have doc. It took some time but i think it looks good.
So sad it doesn't have an elapsed_m function to get the time in minutes on the fly.
May somebody tell me the advantage of using this over the built-in debugger with Flask? Or Django? Looks really great and I plan on giving it a shot, I just want to know what it is better for compared to the default debuggers.
There in lies one of the limitations of MySQL that not even MS Sql suffers from: no way to return structured data in a single column. In mssql I'd suggest creating an XML doc for that column. I believe you could do the same in pgsql, though I think they have something even better than that. The best way to do what you want here is to create two results sets, and merge/link them in Python.
And an elapsed_ns for nano secondes and elapsed_ps for picosecond. Thanks to python3 unicode variable name, it is also possible to write elapsed_µs. I also highly suggest to add elapsed_h for the hours, elapsed_d for the days (but it should takes into account the leap seconds). Finally, I wondering if elapsed_gs for giga seconds may be a good idea, who know python is so slow that some time may takes giga seconds... Or you can learn division. (friday dumbass mode, sorry ;)
Dumbass mode aside, I like the simplicity of having only one function. It's clearly the way to go. 
That's what I do.
They are both only "builtin" to the extent that they are part of the standard library, but they are not "builtins" in the normal sense of the word, as you have to import something first before using either of them. That one is implemented in C and another in Python is completely immaterial. You can write extension modules in either. 
Use the GROUP_CONCAT aggregate function for MySQL. It's useful for turning rows that have repetitive information into single tuples *before* the application receives the information, sometimes helps write cleaner code. For reference: [GROUP_CONCAT](http://dev.mysql.com/doc/refman/5.0/en/group-by-functions.html#function_group-concat) Otherwise you technically can't just shove them all into the same tuple. 
We use uWSGI in `--emperor` mode (with `--tyrant`), launched by an [init script](https://github.com/radiosilence/deb-stackscript/blob/master/templates/uwsgi_init.j2) (supervisord is entirely pointless). Our flags: --pidfile $PIDFILE \ --daemonize /var/log/uwsgi \ --emperor-tyrant \ --enable-threads \ --emperor "/srv/*/*/uwsgi.ini" \ --emperor "/opt/uwsgi/etc/uwsgi.d/*.ini" This also runs a fastrouter/subscription server, which sites "subscribe" to. So we have uWSGI installed in /opt/uwsgi via a virtualenv (meaning we don't mess with our system, but also have the latest version). Then we have /opt/uwsgi/etc/uwsgi.d/fastrouter with a configuration like: [uwsgi] shared-socket = 127.0.0.1:3031 fastrouter-subscription-server = 127.0.0.1:2626 fastrouter = =0 master = true processes = 4 fastrouter-cheap = true Why fastrouter? Because it allows nginx to simply listen to the fastrouter socket, and have the subscriptions manage the TCP socket mappings. In this way, nginx does not need rw access to the uWSGI vassals' file sockets (there are not any). An example config for a vassal (autogenerated by Fabric +[servers.py](https://github.com/radiosilence/servers.py) would be here: [uwsgi] disable-logging = True socket = 127.0.0.1:0 subscribe2 = server=127.0.0.1:2626,key=qrs.example.co.uk chdir = /srv/qrs/test master = true processes = 2 heartbeat = 10 module = qrs.wsgi:application virtualenv = /srv/qrs/test/.virtualenvs/qrs_test attach-daemon = /srv/qrs/test/.virtualenvs/qrs_test/bin/fab celery:test enable-threads = true threads = 4 env = DJANGO_DB_PASSWORD=H.K6W,:7eijBBGe9 env = DJANGO_MC_SOCKET=/srv/qrs/test/memcached.sock env = DJANGO_SETTINGS_MODULE=qrs.settings.development env = DJANGO_SECRET_KEY=xxxx attach-daemon = /usr/bin/memcached -s memcached.sock And would be placed at `/srv/mysite/myinstance/uwsgi.ini` In this way we get the advantages of user based isolation (when we set up correct permissions), plus uWSGI handles spawning celery and memcached for the instance. Oh yeah, and also it means we can scale horizontally extremely easily by popping in another server, allowing the subscription/fastrouter port on our trusted interface, and having as many servers as we want subscribe to handle the website :) We handle all our nginx configs automatically, but in short, all they have to do is `uwsgi_pass 127.0.0.1:3031` and uWSGI sorts out the rest. It is also trivial to roll out certificates (secured) subscriptions with this setup, too.
You should start in Google. 
Is this better than using Tornado? I use Tornado to host a Flask based intranet site. It's only used by about 5 users and seems to run ok.
In which order, and what to query? After I query, I get so many results and get lost. 
Flask's built in debugger isn't; it's a shell where you can examine variables but not monitor and control execution. 
you might want to pick some pypy tests for that (they have a slightly different aspect than cpython ones)
The Flask/Django built-in debug views are more for inspecting things at the end of the http response. This is like PDB or IPDB interactive debugging, but in a nice web gui.
namedtuple is a corner case -- it is actually a factory function, not a class, even though it returns a class. But as a function, it is correctly cased per PEP8.
Ah, okay. Thanks for the insight!
Got it, I'll give it a shot. Thanks!
orderDict is dromedary case.
You can try searching something like "Advanced Python book". Then, if you want to know about PIL, search "Python PIL" or "Python PIL explained". And you say that don't have any computer science knowdledge, so I recommend to search books about that topic, there are so many and so goods. Things like socket, process, and that kind of things will come in "abstract" when you are reading advanced programming books, and then just have to see how is applied in Python. Good Luck! 
It's amazing how many people don't know about this. It's like the most painless process management ever.
Wow what a well argued article ಠ_ಠ. The comments are more interesting; the author of Apache's mod_wsgi also joins the discussion.
I've been a heavy user of UWSGI/nginx in Emperor mode for a long time, but i've never took the time to look at fastrouter, that is amazing.
*If it ain't broke don't fix it.*
Why would anyone ever migrate from sqlite to mysql without at least some amount of mild force applied to them? The logical step up is postgresql, not mysql.
This looks so nice, can't wait to try it. I wish PHP had this with XDebug.
mod_wsgi just seems so much easier to setup.
If your site is only used by about 5 users, you could probably even get away with the default Flask mini-webserver. It pretty much doesn't matter what you use at such a small scale.
PIL and GIL are quite different things though
There's a lot of ground you want to cover here, and you have to be patient - this will take a long time; on the bright side, you'll become a much better programmer. Start with a good book about concurrency and multi-threaded / multi-process programming. It doesn't have to be Python specific.
When iterating through a `dict` or a `defaultdict`, the key order is determined by https://en.wikipedia.org/wiki/Open_addressing and a hashing seed determined by `PYTHONHASHSEED`. `python -R` randomizes `PYTHONHASHSEED` at startup. There are cases when (especially for (doc-) testing and distributed programs) it makes sense to manually set the value of `PYHTHONHASHSEED`. _dict = dict(one='one', two='two') _dict = defaultdict(one='one', two='two') [key for key in _dict] ## `__iter__`, `Mapping`, `MutableMapping` [(k,v) for (k,v) in _dict.items()] ## `ItemsView` [(k,v) for (k,v) in _dict.iteritems()] ## _dict.items() in Python 3 [(k,v) for (k,v) in _dict.keys()] ## KeysView [(k,v) for (k,v) in _dict.iterkeys()] ## _dict.keys() in Python 3 [(k,v) for (k,v) in _dict.values()] ## `ValuesView` [(k,v) for (k,v) in _dict.itervalues()] ## _dict.values() in Python 3 To implement a structure with a similar interface, there are: * [`collections.Mapping`](http://docs.python.org/2/library/collections.html#collections.Mapping) * [`collections.MutableMapping`](http://docs.python.org/2/library/collections.html#collections.MutableMapping) * [`collections.ItemsView`](http://docs.python.org/2/library/collections.html#collections.ItemsView) * [`collections.KeysView`](http://docs.python.org/2/library/collections.html#collections.KeysView) * [`collections.ValuesView`](http://docs.python.org/2/library/collections.html#collections.ValuesView] From http://docs.python.org/dev/using/cmdline.html#cmdoption-R : &gt; See http://www.ocert.org/advisories/ocert-2011-003.html for details. 
I don't know how to help you with what you asked for, but if you want it, here's a way to get rid of that super-long line: def convertRecords(records): for record in records: # I don't know what these are, so # I can't give them meaningful names. :) first = record[:8] second = record['{} {}'.format(result[8], result[9])] third = record[9:13] content = OlvContent(first, second, third) 
Search for each term plus 'Python' and you'll find one or two useful sites. Doesn't matter what order, because you don't need to fully understand everything you read. Just accept that some bits will make sense now and others will only make sense later, and keep reading.
Depending on your editor, you may be able to add a column ruler.
[Pylint](http://www.pylint.org/) is a nice tool that can inform you of (amongst other things) PEP-8 violations.
If you want to use more characters per line, use more characters per line. I don't follow that convention because it's not 2001, when that was PEP was written, and I don't like how execessively wrapped code looks, and the document itself tells you not to be a slave to it, to use your judgment and decide what looks best.
At the moment, when I convert results to ObjectListView it's like that: results[num][0], so for replies it would be something like: (results[num][5][0], results[num][5][1], results[num][5][2]) "5" is because in the MySQL request it would be the 5th selected collumn, and 0 1 2 3 etc depending on the number of replies
Many many tools don't like single letter package names, as well !
i tried but it was hard
What, you aren't using an MDA green screen CRT?
There's also pep8. 
Close. I'm running emacs in gnome-terminal.
I prefer `flake8`; it detects PEP-8 violations, plus a wide variety of other things; it basically wraps the `pep8` and `pyflakes` tools.
Oh god the backslashes, everywhere backslashes. Most sane editors will let you specify a soft wrap column, but you probably want to set it a lot higher than pep8 recommends - a limit of 79 causes massive readability issues, especially on imports. 
And add emacs flymake and errors are easy to spot, even while typing.
Nice. I use vim-flake8, but that requires me to manually press F7...
crate.io (except the sign-in with GitHub error still does not seem to have been addressed)?
I just use waitress unless I've a good reason to do otherwise. It might not be the fastest of WSGI servers, but it's still pretty fast, has sane default behaviour, and is easy to get up and running.
[pylama](https://github.com/klen/pylama) supports pylint, pep8, pep257, pyflakes and mccabe.
&gt; crate.io That is certainly interesting. Glad to know of it. I will have to read more about that! PS: sign in with github worked for me.
Proofread more. 
Wohoo... there goes my weekend. Thanks though!
I hate this too, but `addCleanup()` does what you want (it's always called). Use it instead (as I usually do).
Try syntastic plugin for vim. Very configurable, and checks f.i. javascript, php and many others
Check again, they were re-enabled yesterday.
Looks interesting - I wonder if it works with appengine. (The most recent dev_appserver is handily architected so that it is impossible to use pdb. Apparently Google thinks debugging isn't important.) It would also be nice if the license for wdb was more permissive. When running your app with wdb the combination ends up GPL3, so it can't be used to debug code with non-GPL3 licenses (unless you keep everything to yourself and similar busy work). It would be sufficient for just the code that runs in the app being debugged to be permissive.
The Python installation tool utilized to install different versions of Anaconda and component packages is called [conda](http://docs.continuum.io/conda/intro.html). [pythonbrew]( https://github.com/utahta/pythonbrew) in combination with [virtualenvwrapper](http://virtualenvwrapper.readthedocs.org/en/latest/) is also great.
Crate pulls their counters from PyPI, they are just a better frontend. On the other hand the counters don't mean a thing. A single Travis CI user is very likely to contribute hundreds of downloads to any packages he/she uses.
Actually, the download count is a pointless, terrible way to determine the size of your package's user base. Why? 1. A single developer using continuous integration can download a package 5, 10, or 100 times in a day. 2. A single open source project with dozens of committers using continuous integration can download your package a thousand times in a day. 3. Some people spoof their own download counts in order to make themselves look more impressive (we discovered this while maintaining Django Packages). A better metric is how many followers or watchers the repo for the project has, be it on GitHub, BitBucket, or whatever.
Why not `named_tuple` though?
gunicorn + supervisor + nginx works great for my needs, and it's easier to deploy than uWSGI. I can't see why everybody has to use a space shuttle when a more modest solution (arguably, gnunicorn is pretty awesome too) is clearly enough. Shouldn't be "a standard pattern" but "use the best tool at hand for a given task".
The with statement is exactly for doing such cleanups in any case. Maybe unittest should be changed to use context managers with setup as `__enter__` and teardown as `__exit__`…
I prefer to use Google Analytics to track the Installation page on the website of my package [pyDatalog](https://sites.google.com/site/pydatalog/): the numbers are quite different from pypi's download stats, but probably more representative !
I know, was just an example u.U 
For my package these cases are unfortunately not very likely yet. But that is an issue that hopefully I will face as the package grows. How would you suggest tracking it then? That is exactly the question I am asking. If the package reports back with a hardware address of its user when used (perhaps hashed for privacy), than multiple downloads from the same MAC address will not be counted multiple times. The problem is that I don't want to piss people off by phoning home and lose users that way. Basically, how do YOU suggest accomplishing tracking a user base since downloads suck as a metric? Caveat: my package is meant to make doing a set of many command line processes easier. The audience is only slightly made of folks who are gonna be savvy enough to clone from its github page.
This is really great but one important question: how does it play with the debugger? 
I would say that download count is the best way of tracking usage. Not a very good way, for all the reasons pydanny mentioned (and then some), but there simply seem to be no better ones. How many watchers/starrers a repo has - it shows only the people who are registered at the site and who engage in watching and starring repos. Which should be a pretty small and specific subset of all users. Phoning home would, of course, give a pretty good overview.. only it seems like a dubious practice. Understandable that the author wants to know exact usage, but also understandable that users do not want software on their computer doing unrelated stuff on its own. Asking the user's permission to do so would simply be an additional annoyance for the user.
If your package targets professional Python developers, I think it's a rational metric. In fact, it's better than a flat count of the number of developers use it - it's weighted towards those that build their environments for each deploy, use CI tools, and have created large, popular open source projects with lots of contributors :) Github metrics are the best way of seeing how many *people* are liking your work, but the download metrics can help show how well your package is being received by the community relative to others in the niche. It's just another piece of data that you can use to build a clearer picture of the progression of your work's growth in the community.
Thanks, sounds promising! Also, you mention Python 2.7/PyPy works and Jython doesn't but don't mention anything about Python 3. I think explicitly mentioning it would be better.
Are you the author? I just helped someone to [use this](http://www.reddit.com/r/learnpython/comments/1fk258/my_first_code/) recently. The code was fine, but I had some issues with the documentation. I had to dive into the actual code to determine which methods try to use a password, as well as what exception is raised when the password is incorrect.
Seems quite useful. OTOH, zipfile's interphase sucks, so anything more humane (a la request.py) would be great!
Nice tutorial. If you like this kind of stuff also check out the NLTK book (for free online). IN chapter 6 they talk about text classification in the context of spam filters which also uses the same approach of the author of this article. Check it out it's pretty cool too: http://nltk.org/book/ch06.html
Sorry reddit didn't translate the source quite right, there are some line breaks missing...
I don't track your python package's user base. But thanks for asking, I guess.
What's wrong with the zipfile/tarfile API?
Actually, I was confusing it with tarfiles... Last time I used it I spent a lot of time doing stuff like tarinfo = tarfile.TarInfo(fn) tarinfo.mtime = time.time() tarinfo.size = len(yaml_data) tar_fh.addfile(tarinfo, StringIO.StringIO(yaml_data)) And so on, which seems like a waste of time in comparison with e.g. tar_fh.append(yaml_data) Where the other arguments can be set to reasonable defaults (such as time.time() for the time, and len() for the size). Or in any case set them as as named arguments. 
HA! I can't figure out how to change the title!
Clever. Any non-obvious insights surface? 
Thank you for this!
at least in python3, the api is a bit better, can either do tar_fh.add(pathToFile) or data = StringIO.StringIO(yaml_data)) tar_fh.addfile(TarFile.gettarinfo(fileObj=, fileobj=data), data) the second one is kind of awkward because TarInfo objects only represent 'information" about a file in a tar archive, but not the data itself, you have to provide the fileobj so it fills in the mtime and size attributes, and then you have to provide the fileobj again when you call addfile so it can actually read the data. It seems that another method could just be added, or maybe modify TarFile.add() to take a fileobj instead, and then that will create a automatic TarInfo object from the fileobj and read from that as well
It says uuid1() is guaranteed unique, but from looking at the [source](http://svn.python.org/projects/python/branches/pep-0384/Lib/uuid.py) it looks like there is roughly a 1/16384 chance that the same uuid will get generated if the code takes less than 100 nanoseconds to run. uuid1() takes 50 milliseconds to run on my linode... how fast is your machine? Edit: uuid1() does use time.time() though, which on my machine only provides hundredths of a second. That could increase the chances of getting a collision.
This blows up inside a virtualbox instance backed by a Intel i7-2600 that is actually been downclocked to 3.4Ghz as I am too cheap to get better ventilation at the moment. Edit: Going to file a bug report if anyone else can duplicate this behavior. Looking at uudi1's implementation I suspect it's landing inside of this if... return bock https://github.com/certik/python-2.7/blame/master/Lib/uuid.py#L498 as a couple lines down there is a check for repeat TS usage.
Lots of stuff, actually. More importantly, you could match what was being said about the product to the actual copy on the product. That created measurable sales benefits for several products my company made.
Instead of plotting it directly with a library like matplotlib, you could use an image manipulation library to generate a heatmap in PNG format. They aren't terribly difficult to write yourself, but I'm pretty sure you could find a library feature that would make it easier. EDIT: A minute of googling came up with [heatmap](https://pypi.python.org/pypi/heatmap/2.2.1), which uses PIL to generate a heatmap in just a few lines of code.
http://burnash.github.io/gspread/
Poorly written article. Try giving at least some indication as to what Nginx and UWSGI are at the beginning. Introductions are a staple of writing.
web2py is in the 3.0 EAP
The Github page is actually more informative :)
Which github page?