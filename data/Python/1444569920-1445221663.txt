Fair enough, didn't think of that. I'm just used by Java's / C++ variable types where I don't have to worry about this. 
Ok. Thanks!
No. In Python variables do not have types and implying that they do by naming them so is very misleading and hence a bad habit you don't want beginners to adopt. You should rather explain the reasons to use int() and str() through [Python's internal object model](https://docs.python.org/3/reference/datamodel.html) and what [int](https://docs.python.org/3/library/functions.html#int) and [str](https://docs.python.org/3/library/stdtypes.html#str) actually do. At least using something like x = 5 #is int or doing it interactively &gt;&gt;&gt; x = 5 &gt;&gt;&gt; type(x) &lt;class 'int'&gt; &gt;&gt;&gt; y = str(5) &gt;&gt;&gt; type(y) &lt;class 'str'&gt; &gt;&gt;&gt; y '5' &gt;&gt;&gt; x 5 
Something like this can be counter intuitive, especially if you know some other languages that are weakly typed, which might try to do arithmetic on strings &gt;&gt;&gt; int(2 * 3) 6 &gt;&gt;&gt; int(2 * '3') 33 &gt;&gt;&gt; int('2' * 3) 222 
Try doing a search on the file name to see if there's another copy of it anywhere. Also, look for `.pyc` files - Python produces them automatically, and in some circumstances (e.g. if the clock changes) it might not regenerate them. It's normally safe to remove any `.pyc` files you find - Python will automatically create them again when you import things.
Definitely not Pythonic, but I think "more Pythonic" is still accurate. But I wholeheartedly agree with the rest of what you say. Both languages have their place.
Wow, it seems a bit wired to me.
You can still use xunit style methods on unittest.TestCase classes. But just use yield fixtures they're great
yeah. Why not use setup_abc and teardown_abc syntax? The addfinalizer method seems a bit strange.
I'm not sure where you are reading that I suggest that Python would decrease it's hold.
`merging` seems pretty reasonable ;) Though it's not really "more Pythonic" it's more classical style of classes (which Python kind of shares).
Ah, so it is. I thought I came up with it independently. It's been a long time since I've read PEP8. 
Sometimes I feel like I must be the only person on the planet who prefers unittest. * Built in * Similar to other languages test framework * Putting tests in classes is actually great, because it makes you organize your tests into logical units that need the same setUp tearDown and oh yeah- * setUp and tearDown always seem infinitely more complicated in all the "simple" frameworks. It always seem like the alternate frameworks are built to handle "5 in [1,2,3,4,5]?!?" but get 100 times less pythonic and readable when you start needing to test real code, or a larger integration test.
I've searched my computer for any other copies of the file and I can't find any. I also do not see .pyc files anywhere on my computer? I have tried now deleting the source files entirely,after saving them to a USB drive, just to see what would happen. The .bat still runs the old code, which far as I can tell doesn't even exist, nor does the file that it was originally from ??
Django's pretty big, but it's never been the flavor-of-the-month most popular framework. It's more subdued than that. Which I believe is a good thing, since people invested in it clearly don't worry about being on the bleeding edge of flavor of the month technology. They'll probably stick with Django or at least Python in the future, too.
Can't agree more. I think there are 30+ assert* methods in unittest. 
This is a simple broadcast server that I wrote. It will listen for messages that are broadcast to it. If the message contains the 'secret_key', then it will respond to that ip with a response contains the server info. Line 26 contains the 'select' statement import thread import select import socket import time class broadcastServer(object): BCAST_IP = "255.255.255.255" BCAST_PORT = 55535 BUF_SIZE = 1024 SECRET_KEY = "^*hg)&amp;VjgT^?" CURRENT_PORT = 2000 thread_list = [] def __init__(self): address = (self.BCAST_IP, self.BCAST_PORT) server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,1) server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1) server_socket.bind(address) server_socket.setblocking(0) bcast_id = ''.join([self.SECRET_KEY, socket.gethostname(),'{',str(self.CURRENT_PORT),'}']) while True: result = select.select([server_socket],[],[]) msg = result[0][0].recv(self.BUF_SIZE) if ((self.SECRET_KEY in msg) and msg != bcast_id): self.BCAST_TIMER = 10 inviteAddress = (msg.replace(self.SECRET_KEY, ''), self.BCAST_PORT) bcast_id = ''.join([self.SECRET_KEY, socket.gethostname(),'{',str(self.CURRENT_PORT),'}']) server_socket.sendto(bcast_id, inviteAddress) def get_host(self): host = socket.gethostbyname(socket.gethostname()) if not '127' in host: return host s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.connect(("8.8.8.8",0)) host = (s.getsockname()[0]) s.close() return host
One good thing about adding a teardown method manually is that the setup and teardown methods will be run in pairs. If you use decorators or similar for setup teardown you don't know in which order they will run _or_ you have to depend on the order they are defined/added. You can also [use yield](https://pytest.org/latest/yieldfixture.html) with py.test since v2.4 (if your python version supports it).
in the 4 last the only one which may happen in real life is `sum(list_of_string)` which don't work and the reason is that it is that the correction pointed in the error message is a **huge** performance improvement 
Nose still uses unittest-like test classes, doesn't it? 
I am not sure what the problem was but i uninstalled everything related to python and pygame and deleted every folder and file that had anything to do with either, saving whatever code I wanted on a USB. I have since reinstalled everything and my problem seems to have gone away only to be replaced by a new one. Whenever I run a pygame program through the command line interface I get an error when it tries to import the pygame module. ImportError: No module named 'pygame'. As before the file runs fine if I just run it through IDLE, pygame imports correctly and the game runs. If I didn't need to have 2 python programs running concurrently I wouldn't care so much... 
I never mess with the OS Python. In El Capitan they added rootless folder and I think (not sure) that /Library is one of them. I suggest you use homebrew to install pyenv and with it install the python version you need. It will put a python in your user home folder so you won't have to worry with the SIP of El Capitan ( see ars technica: http://arstechnica.com/apple/2015/09/os-x-10-11-el-capitan-the-ars-technica-review/8/ )
my new problem seems more specific to pygame im going to ask for help there. thanks for the replies
Lots of people have said no, but haven't really said why. Python's dynamically typed, which means the type of a variable isn't fixed. The type of a value is, but not variables. So you say: x_int = 5 and later say: x_int = SomeClass("woozle wuzzle") x_int is something way different now and you're lying about what it is. This'd be a real pain to read through. It's like a version of the [stroop effect](https://loschmo.files.wordpress.com/2014/09/stroop-test.jpg) but for types. Very bad. If you did it in code I had to work with I'd make this face: &gt;=O
You don't. You use fixture : @pytest.yield_fixture def stuff_you_want_to_init(): your_stuff = any_setup_code() yield your_stuff optional tear_down_code def test_foo(stuff_you_want_to_init): assert bar() This is way, wayyyyyyyyy better than setup and tear down as it's run only for test fonction. It also mean your setup and tear down code is not tied to a code unit, so sharing this code is much easier between your tests.
At least one other. It's much more explicit. Being class based supports the composability OA mentioned. In fact I've never run into the issues people claim the assert type test libs solve. It's like people don't know how to write/use object inheirtance or common/shared libraries. The error output of (modern) unittest is great. 
Edited; see response below; ~~It is my understanding that Apple restricts apps that have the ability to run any interpreted language, for any reason. Consequently, all of the ways I know of to run python 'on' an iPad are by using websites; for example,~~ [CodeAnywhere](https://codeanywhere.com). Tangentially related, not a very good option; A jailbroken iPad can install python, text editors, and terminals, but the window for jailbreaking has closed until a team finds a new exploit for iOS9.
I'm not really going to argue, despite using py.test myself, it's all a matter of taste after all **but** built in is the worst possible argument ever. It's the same argument people use for ctypes for example. This is terrible because it glorifies things that are inferior to alternatives just because at some point in time someone tried to put it into the standard library.
 Values have types associated with them, and variables point to types. Variables don't have types, that's why they can point to objects of any type. Semantics, but, still.
On a phone, so I can't explain much, but you need to google "virtualenv". That will solve your problems going forward. 
if 1 / if 0 code is cancer
You use the TestCase from unittest, or just make functions starting with the word test (is customizable). After that there is setup and teardown, and any method whose name starts with test gets run as a test. You then just use normal asserts. There are also nice tools and decorators, I like the raises decorator, which you can use to ensure that a piece of code fails with the correct error class. 
1.9.3-2.... Will upgrade later, thanks!
&gt; But, I wouldn't be surprised if it's possible to deal with the dependencies you're concerned about, one way or another. It's a bit clunky but I think I found a way to incorporate C extensions and native shared libraries in Lambda: http://www.perrygeo.com/running-python-with-compiled-code-on-aws-lambda.html TL;DR; You need to compile everything on an EC2 instance and jump through some hoops to get dynamic linking working through environment variables.
We use nose in our team with [describe-it](https://pypi.python.org/pypi/describe_it) (developed by ourselves). This enables us to write tests both in the traditional style and in a more bdd-ish way. You could probably do similar things in py.test, but nose has been good enough for us to not need to look for an alternative.
Yeah, but this doesn't work if this folder is in PYTHONPATH for the currently configured interpreter. E.g. if you're working on a package and installed it using `setup.py develop` - see https://youtrack.jetbrains.com/issue/PY-5459. There is a hack to overcome this (options-&gt;editor-&gt;file types-&gt;ignore files and folders) but a) it hides the folder completely; b) I'm not sure it works if folder name is not unique.
All of my kit is fairly old, which helps as a constraint to develop in.
nowadays setting up a specific python dev environment by virtualenv may be necessary preparation for hacking
There are some decent options. Pythonista is excellent but a bit pricey. However, it does have some nice additional libraries. There are a number of less expensive options. Python Math is nice, and it's free. It runs 2.7 and includes numPy and some other nice math libraries. However, if you want the ability to save files I think that's $.99 (well worth it) There's another series of Python apps you can find in the app store that seem to be from the same guy. They're pretty good for free, and there's a 3.4 version. Some of the documentation and support is in Chinese, but there's still the English stuff there. While you can't 'download' python code, you can copy and paste it, so there's really no meaningful restriction any more.
In Rome, do as the Romans. [Python Is Not Java](http://dirtsimple.org/2004/12/python-is-not-java.html). [Java is not Python, either...](http://dirtsimple.org/2004/12/java-is-not-python-either.html).
I've seen this happen multiple times with IDLE, having to terminate IDLE and delete the __pycache__ directory. I haven't had the issue since I stopped using IDLE.
noun_I verb_don't verb_see noun_what's adv_so adj_bad adp_about adj_hungarian noun_notation. noun_It verb_makes noun_code adv_much adv_more adj_readable conj_and adj_clear. adv_Just verb_imagine verb_trying part_to verb_understand adj_this noun_post adp_without adj_the adj_added noun_tags.
Built-in is an argument for the pure reason that everybody has it. The [batteries included](https://docs.python.org/3.5/tutorial/stdlib.html#batteries-included) philosophy is great because there's a whole lot that you can just assume everyone has. It's not without its down sides, and it does definitely come with 'the tyranny of the default', but that only really raises the bar for replacement libraries.
If you don't know anything about iPads, why are you so sure it's an "Apple advertisement delivery device"? You probably want Pythonista. Apart from having its own GUI library, so you can build interfaces, you can run scripts from other apps via the Pythonista URL scheme, which is the iOS version of IPC. You can also specify success and error URLs, so you can send output back to the calling app or on to another. It also includes a Dropbox library with which you can sync your code, so you can get Python scripts and libraries into Pyhonista by putting them in your Dropbox and running the sync. Editorial is a text editor by the same author with Python built in. 
indeed
I believe that it is more important to show that Python is strongly typed, for example. &gt;&gt;&gt; 1 + '1' Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: unsupported operand type(s) for +: 'int' and 'str' 
yay another one of these
no, just... no.
The big difference between using Django and Flask versus any Javascript framework is that they fall behind HEAVILY in the real-time arena. Due to WSGI and it's non support for websockets the complexity it takes to build asynchronous websocket responses to work with WSGI is 2 fold more complex to implement then any JavaScript framework. You basically get into running three very independent apps that you have to make talk to each other, or get REALLY hacky. Truly I think this could be traced back to the fact that Python2 is still supported, and the push to use 3 isn't there yet. With Python 3 this becomes much easier, but there are still not many open source complete frameworks in the python world built around real time communication. Right now it there are tools to do this, but nothing has caught on yet. Basically if someone was to heavily modify the core of django to use websockets, or find a better way then presently out there to integrate the use without sacrificing simplicity or the ease of use of Django, the use of python in the web development world would explode. It would have affects on the entire language itself from new webserver design to probably some new type of standard for the language it self. The next few years of advances in the Web Development world will create more changes than in the last 10 years combined. Frameworks like React, Electron, Node, Angular, Meteor are all what people are talking about now. I think Python will catch up and then some, but not until Python2 is put to bed. (coming only from the web dev perspective). TBH Web assembly could possibly change the face of everything we know though, so this could all be irrelevant. 
There are 2 main reasons this is bad: - It reminds people of Microsoft sample code which always used Hungarian notation. - It should not be needed. The name of a variable should make clear what the purpose of the variable is. Therefore the data type should always be clear, and re-stating it is noise that doesn't add to the readability of the code. If people are confused maybe it would help to add verbose comments: # Assign a floating point value to variable called "y" y = 2.0 
Python and Angular are not rivals. A Python web server is a perfectly good choice for a project using an Angular front end. Python and Node are rivals.
Thanks - looking into that. 
To be honest, and I have written tons of integration tests, unittest is way worse there. Since you usually have to bring in lots of dependencies in a integration test the class-based approach starts to get messy. Way more clean and clear to use pytest fixtures instead of mixin spagetti. It's very hard to reason what calls what and how things interact when you use multiple inheritance a lot. And that what unittest inevitably leads you to. Composition is natural in pytest. Not in unittest. You should really give pytest fixtures a try. 
&gt; You're assuming the endgame of all libraries is to end up in stdlib That's not what I'm saying at all. I'm saying that if something is in the standard library, it means everyone has it. Which is a good non-technical reason to use it. &gt; Another thing, "raising the bar" implies that stdlib is actually looking for a replacement. No. It simply means that you don't have to just have a better library than the standard. Yours has to be enough better that people would rather use it despite the fact that it's another dependency they have to worry about. Another point is actually that (for Python specifically, though this is definitely not true for all languages) the standard library is pretty good. It's certainly not perfect, but the fact that Python is simultaneously able to have such a huge standard library and have very good overall quality for the modules provided therein is quite amazing.
Nose don't have fixtures or assertion helpers. It's like the poor man's pytest. Read this: http://pytest.org/latest/faq.html#how-does-pytest-relate-to-nose-and-unittest &gt; nose was originally created as a clone of pytest when pytest was in the 0.8 release cycle. Note that starting with pytest-2.0 support for running unittest test suites is majorly improved.
It does better integration. Builtin support for subprocesses. Support for the awesome [xdist](http://pytest.org/latest/xdist.html?highlight=xdist) etc etc
Look at the permissions of /usr/local and down. I'm told that the owner/group changed.
No.
aiohttp also supports WebSockets.
1. I prefer Homebrew Python because then everything is on the same page when you need to install more things. For example, if you want to install Pillow, the Python image library, you'll probably need a bunch of other stuff from Homebrew to support it. 2. It's all a matter of personal preference. I usually have a directory inside of my projects that holds the VE and use autoenv to activate it, but virtualenvwrapper seems to assume all your VEs are in some centralized location. Just make up a system and try to be consistent.
This appears to be exactly what I was looking for, have an upvote kind sir.
 &gt;&gt;&gt; x = (1 &lt;&lt; 53) + 1 &gt;&gt;&gt; x + 1.0 &lt; x True Implementation limit?
As someone who has dealt with plotting real-time data in python before I might be able to help a little. How fast are you updating these plots? How many plots? How much data for each plot? Line plots only? Why Python 2? If you have a large infrastructure on 2 then fine, but for any new or young projects I'd suggest going to 3. Especially 3.4 if you end up needing to do more asynchronous stuff. I have successfully written a PyQt4 application that used matplotlib to update 12+ plots every half second. It did require some work with blitting which is pretty low level for matplotlib, but it worked. If you go this route look at blitting in matplotlib and look at updating your line plot data with `line.set_ydata(new_data)`. Another library you should look at is [vispy](http://vispy.org/). I've been using it for non-plotting OpenGL work the last month or so and its really nice, but I'm not sure the plotting API is quite ready for easy use. By that I mean their interfaces are still changing and the plotting API is very new so you may have to read some source code to do anything that isn't directly supported right now. If you are updating your data quickly and need room to grow in the future this is your best bet since it uses the GPU. If your plotting has slow performance with vispy/OpenGL it's your reading of the data, not the plotting. I've used Bokeh for simple realtime plotting with 6 or so plots showing the latest 200 records. Besides maybe matplotlib this will probably be your fastest way to get from nothing to something. You don't have to do a flask app and it supports multiple frontends last I checked. My biggest problem with Bokeh (haven't looked at newer versions in the last 4 or so months) is that when it sends updates to the data server and then to the client I think it *has* to send the entire data array every time which is not the best for web applications. Other tips: * Use generators where possible * If you can get the data in a more asynchronous manner than reading a file for updates, do it. * Don't try to show a continuously growing number of values, pick a set number and show the last N values.
[removed]
Racket for functional programming. Seriously the best thing I have learned over the years of self-taught programming.
Your guess is as good as ours. I personally think asyncio is great and will likely replace the twisted / gevent / similar competitors. Having it built into the language itself adds a lot of value. For example, my source code editor handles "async" and "await" keywords correctly.
[Here, read their latest dev blog with a section on Python 3](http://labs.twistedmatrix.com/2015/09/twisted-devlog-september-2015.html) Personally I've gotten fed up with waiting for Twisted to port. I can no longer in good conscience recommend them as something that claims to be "production ready!" but only on 2. I am not going to be a part of anything that turns people onto 2 on purpose any more.
Didnt get past #1, "know how to write code on a whiteboard or paper." Yeah, no. If a company asks you to do whiteboard coding, just walk out. There is no relationship between whiteboard coding and real coding. If you want a programmer that is good at writing code on a whiteboard, then yes, make them write code on a whiteboard.
I completely disagree. I use to ask a question for the candidate to write a loop to print numbers from 1 to 100 thinking it would be a warm up question. But this has unfortunately has become a weed out question. You learn lots from watching someone whiteboard code 
I know literally nothing about twisted, so take this anecdote with a huge grain of salt. But maybe it's relevant. I maintained an open source python git library for a while. They wanted to "add support for python 3". I volunteered. I made a new branch and spent a few months doing that. When I was done, a number of the changes I made were kind of drastic (I'll spare you on the details, ask if you're interested). It became clear that maintaining the Python 2 *and* Python 3 branches going forward would be tricky. Every commit to the 2 branch would require someone to translate it to the 3 branch. And every new feature to the 3 branch would require someone back-porting it to the 2 branch. I mean at that point you're basically maintaining 2 projects. We were too small to support so much churn. The ideal situation would be *abandoning* the 2 branch and moving forward with only the 3 branch. This line of thinking lead to discussions, arguments, politics, and more arguments. And now instead of developing, you're all just fighting all the time. Long story short I left and the Python 3 port basically died. Everyone else wanted to stay focused on features and supporting the 2.x community. Which is fine, that's the choice they made. But every time someone asks about 3.x support now they just avoid the topic. 
Certainly not for reasons that OP pointed out though. If they let you code on a whiteboard then they want to see how you're approaching the problem. They don't want to see whether you get the syntax right.
Yeah, you learn how some one would code on a whiteboard. It does not generalize. Even timed programming test like hackerrank are bullshit because you are taken out of your development environment, and asked to solve a problem that was run through a shitty Chinese/Hindu translator into English. I have done enough harckerrank timed tests and now I tell companies what is wrong with them. If a company insists i take this timed test, i send them my github link. If they still insist, i retract my candidacy.
Classes support composition but not to the degree a free-standing function does. At least not without using multiple inheritance. 
Yes and no. Yeah the tools do help, but just trust me that there are difficulties that the tools don't address. Like how in Python 2 file handles are automatically closed when they're garbage collected, but in Python 3 they yell at you pretty severely for not doing this yourself. Another recurring theme for this project was using python 2 strings for both raw binary data AND ascii strings. The translator constantly got that one wrong. I guess what I'm saying is that if you're already following "best practices" in your 2.x code base and aren't doing anything tricky, the tools will do what you want. But they're not a panacea.
I tell them to use any language they like including peudo code
What I don't like about the whole premise here is that you make it about preparing for the *interview* which I kind of disagree with. Sure you should prepare for the interview but most of the things you talk about should be a preparation for the *job*! And keep in mind that failing an interview isn't necessarily a bad thing. In most cases it just means that you're either not ready for this job yet or it just doesn't match your skill set. Also, soft skills and social fit is a big deal in many companies. Finally, one of the biggest things that are missing on your list is that you should have the right mindset. Be eager to learn, know how to help yourself, know when and where to get help, always ask for best practices, develop what I'd call a developer's sixth sense. PS: Not knowing about list comprehensions might just as well be a plus because they're usually harder to read than just a normal iteration.
"The tools" didn't produce Django's Python 2/3 codebase. It required manual effort. I'm just saying that it is certainly a thing that can be done, and can be done with even large and complex codebases. But an important part of the process is not to try to make large changes to the codebase -- stick to having it do what it did before, using the same algorithms as before, etc., and the language will work with you much much more.
That's amazing, especially considering that about a third to a half of any debugging I do is related to deployment. 
It's both the primary language of the Digital Asset Management Pipelines, as well as being the preferred API for applications. Applications like Nuke, Mari, Maya etc provide python APIs for their programs, so that they can be customized to integrate with the Pipeline. Artist tools are written in python so they can run inside the program- ideally with a native look and feel. Outside the programs and the DAM pipeline, it's used for thousands of misc tasks like converting XML files, reading other files and database management. Library wise, nothing really exotic. 
A port to Python 3 is "underway" -- anyone who wants to help, can: https://twistedmatrix.com/trac/wiki/Plan/Python3 The reason it's taken so long is lack of interest and the existence of coding standards. Twisted is widely deployed, generally-ok-written, somewhat-quality code, and that level of quality needs to be maintained during the port. Also, Python 3 for a long time didn't support features necessary for porting to Python 3 which were removed from Python 2. Crippling the bytes type was the major one. Some of these are being added, some have been added, and some are still missing. Ultimately, Twisted will be fine I think.
For any sort of large project, anyone wanting to actually help will need to invest a *significant* amount of their own time *simply* reading, testing, running, modifying, reading, reading and more reading of the project code, architecture and setup simply to be able to make useful behavioural changes. This fact is common to most large projects. There are very, very few that have managed to both grow large and stay clean enough that they're understandable and modifiable (especially their guts / core functionalities) wholesale without a lot of grokking required beforehand. This is way more time invested than simply that needed to use the project. Moreover, simple improvements that are easy to do, usually get done by the core contributors anyway, a month before you even knew that was a simple improvement that could be done. So simply saying "It's an open source project. Anyone can help." is kind of disingenuous. You usually need someone very technically capable who can grok the project, and then is willing to spend all their time to actually do that. And then come to terms with the backwards-compatibility needs of the project, which is usually the un-sung 50% reason why public problem X hasn't been solved 3 months/years earlier in the first place. And design a solution around that, while keeping the changes minimal and understandable, and not lowering performance... Although anyone *could* help, almost always not anyone *can* help. 
Hey man, thanks for this, yesterday around 4AM i realized that I was doing it backward. I was treating the computer that should receive the notification as a client, when in reality I should make a listening server. The whole networking "thing" is just a big blob for me. I definitely need to spend some time learning it. 
Thanks bud, will look at it!
Yes, Python2 also supports WebSockets. I have no idea what's your argument for relating Python2 or 3 with WebSockets. &gt; For it to be widely used it needs to be a more fully fleshed framework More "fully fleshed framework" like what? What JavaScript offers in comparison? Express?
This is key, here. 
Thanks! It won't catch every deployment bug that you have, but it is designed to make it easier for your dev/test environment to closely mimic the kind of set up you have in production - e.g. change one version number in the set_up and your code is suddenly being tested with python 3.4.3. instead of 2.6.9 or postgres 9.4.5 instead of 9.2.7. It also automates all the set up so setting up a "test driven development environment" ought to be a breeze.
This is a really standard reply when someone grumbles about an open source project - "it's open source - you do it!". It's a catch-all way of dismissing the validity of the grumble.
I work in visual effects. We use Python for a lot of things: asset management, artists' tools, desktop &amp; web apps. Financial stuff is mostly in Java, but almost everything else is in Python. Almost everything is custom-written, though (we've been using Python for 20+ years) so we don't use many third-party libraries, save for some web frameworks (mostly Pylons and increasingly Flask).
Enough of Twisted is ported to Python3 to run http://crossbar.io which is a pretty non-trivial Twisted application. So, certainly "python3 porting" is not done in the sense that all the unit-tests in Twisted pass, but it *is* fairly far along.
&gt;the cv2.pyd is under python/2.7/x86, which makes me think this pyd file isn't compatible with python 3.x. do I need to recompile? Yes. Binaries compiled for one Python version should not be used with another. I would suggest that you use one of Chis Gohlke's wheel files [choose opencv_python‑3.0.0‑cp35‑none‑win32.whl since you are on win32](http://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv) Download that file and run `pip install opencv_python‑3.0.0‑cp35‑none‑win32.whl` and you should be good to go.
[removed]
You could also have a look at [pyqtgraph](http://www.pyqtgraph.org/). Or is that what you meant by pyqtplot? It should be quite easy to get something simple running, just look at the examples and copy from there.
Python questions go in /r/learnpython - you'll get a much better response there.
You sound like such a tool. 
correct, the whole purpose of python is to save coder time by avoiding static typing in favor of dynamic typing. It's not a bad idea to have a personal syntax though, e.g. using underscores_for_objects and camelCaseForMethods
Last two jobs I've had, no whiteboards involved. In fact, I don't recall being asked to write any code at all.
&gt; Python is driven by it's really documented community. The [documentation](http://www.tornadoweb.org/en/stable/) for Tornado is highly readable and quite good. &gt; It could be argued that the Tornado library does not have many real world examples with full blown websites in the public realm. Not sure how you define a "full blown website," but there are [many demos](https://github.com/tornadoweb/tornado/tree/master/demos) included in the Tornado repository, [quite a few](https://github.com/tornadoweb/tornado/wiki/Links) examples listed on the project wiki, [an active discussion group](https://groups.google.com/forum/#!forum/python-tornado), and [lots of helpful answers](https://stackoverflow.com/questions/tagged/tornado) on Stack Overflow. &gt; Long winded analogy OK. &gt; I feel like Django has no excuse at this point. It's a widely enough used framework that a group of engineers should have been able to either create a new engine that truly melds WSGI inner workings with Websockets not blocking the main thread. The problem here is the WSGI specification which is inherently synchronous. The only way out of this is to either use a different paradigm (e.g., Tornado or asyncio's event loops) or come up with a new specification entirely (which is beyond the project scope of Django anyway). That said, websockets are not always necessary. Many applications can run perfectly fine in the traditional request-response architecture, so WSGI still has its place.
I didn't know there was any disagreement. What is the argument for Python not being strongly typed that isn't just based on misunderstanding of what strong typing means?
Tried various apps, currently deeply in love with pythonista, although it comes with a price. For me it was worth it :)
Didn't get past seeing it was a 23min video and I_have_better_things_to_do
Thank you , u/ondoheer and u/shellcod3
Given you've posted in the Python subreddit, I'm going to assume you want a Python framework. http://www.django-rest-framework.org/ is pretty popular in these scenarios, as Django provides batteries-included automation for all the usual User actions.
I've also found myself putting this enormously useful line at the top of most of my code: jsonify = lambda x: json.dumps(x, indent=4, sort_keys=True) JSON is great for output! It makes large data structures readable, and it's even easily machine-parsable :)
The one with `sum` is (ab)using the fact that the second argument to `sum()` is a default value to return if the first argument is an empty sequence. Probably could be improved to switch the order of the checks so that it does the "did I get a string? error out" check before the "did I get an empty sequence? return second argument" check. But if you do `pydoc sum` it'll tell you exactly what's going on.
Iterable-comparisons one actually is exposing Python's type system: if you look, you'll see it's actually doing equality comparisons between a tuple and a list, and those will never compare equal.
Yeah, a bit odd. That being said, if it's an internship like role at a Python house, it makes sense. Also, I've noticed that when you choose a language to solve a particular problem, most interviewers jump in and ask some more language specific questions to get an idea of your expertise in your chosen language.
You said you don't recall being asked to write code now you provide evidence that you wrote it?
A screenshot would be nice.
in the interview, you obtuse fuck.
Start by becoming a software engineer - not a Python coder. Living in one of the major metro areas helps as well. 
List comprehension should be used when it's useful to express an idea in a cleaner way, as a higher-order, more abstract concept - definitely not for speed; optimizing anything for speed is futile in 95% of the cases. But can you really claim that it's usually not as readable? Compare: arr = [] for i in xrange(100): arr.append(i*i) with arr = [i * i for i in xrange(100)] The latter simply states what you need. The former goes through lower-level steps to create what you need. In what way is the latter less readable?
&gt;Heck, I recently interviewed with a group that had, as part of the interview, for someone with 10+ years experience in industry, "write a function that checks whether a string is a palindrome". How else do you propose they verify you're an actual software engineer, and not a pretender? It may be obvious to you, but how do they know it, *until* you write the code? Your years of experience don't matter per se - for all they know, you may be lying outright, or you may have spend these 10 years adding buttons to a webform, and never bothering to do anything that can't be done by quickly copying code from StackOverlfow. Again, *you* may know that you've done nothing of the sort - but *they* don't. 
Your example is definitely one where I would use a list comprehension. That's what I meant when I gave an example of a simple comprehension, [f(x) for x in Y]. I'm talking about the misconception that it is inherently superior. Like if someone were using a list comprehension that covered 2 whole lines with long identifier names and many conditions attached. It would just be better to split it up into a for loop and some if/elif/else action.
&gt; He definitely needs to first determine if performance is at all a consideration. You don't always have to measure for this Yes. This is what I meant, although you've stated it much more clearly. 
How do you propose, then, verifying that someone *can* code? Merely having a github account only proves you're friends with a guy that can code, not that *you* can. I agree with your points about timed tests (although pretty much any online tool allows, or at least can't prohibit, you from using your own dev env, and then just pasting the code - but the timing aspect doesn't often translate into actual engineering ability). But asking the candidate to write some code *during an in-house interview* is a staple of all semi-serious interviews - since there's no other way to verify that someone is, in fact, a software engineer.
Yes. Python 3 doesn't get tricked by this.
In what way is it better - It would be better formatted, easier to read. 
Any news?
I believe Twisted, like almost every other project that wants to support both Python 2 and 3, aren't trying to maintain two parallel codebases. Instead they write in the common language subset.
For those integration tests, what has the unittest module that pytest has not? I don't see the point here.
I thought relying on fake RAII file closing due to reference counting in cpython had been discouraged in python at least since context managers/with statements in python 2.5/2.6 .
The assertion re writing in pytest is black magic but it makes it easy to write asserts that tell you what the problem is without debugging or constructing you own context string for each assertion.
See http://www.joelonsoftware.com/articles/Wrong.html The original Hungarian notation had useful prefixes which don't generally correspond to type (except in cutting edge static typing techniques). Stuff like colMax with col for column. Some of this stuff can be useful in python although I prefer longer prefixes/suffixes such as column_index or i_miles.
Very true and I think I read that this similarity was by design.
Are you _certain_ you used the correct version of bumpy and opencv? I would be very surprised if a whl install didn't work. Speaking of, were there any errors on installing? Could you give the EXACT error you're getting? 
Github. No one's best work is on Github, but a Senior Dev should have enough there to skip the fizzbuzz question round. 
Seriously a good one instead of the comments. . Thanks actually. .
Well you have to familiarise yourself with the code and tasks remaining which are both big jobs, plus you have to put down or change priority on your existing projects to deal with the new one. There's more to porting than just running 2to3 until all the tests pass.
I think that with the next version (15.5), we will be "production ready" -- we have nearly all of base, we have the test runner (trial) and now the application runner (twistd, with the web plugin). Coming soon after that are a number of ecosystem frameworks -- klein and treq have ports that are just waiting for patches to be applied to Twisted (all of which are written and are going through a few review cycles to make sure we're doing it right). txmongo has already got full support, and Autobahn supports ~95% of functionality on Py3, using Twisted. So, we're getting there.
What did you try? Threads or Twisted?
I doubt somebody with the technical skills and knowledge of twisted is going to dump their day job to work on porting since they probably work on more interesting and better paying work.
[removed]
I *think* it's because `None` is a singleton, and `is` doesn't check for equality but just if they (the parameters) point at the same object. And whoooo, late!
I mentioned, the list comprehension becomes harder to read when the variable names are longer and several conditions are used, making the request span several lines. It's not good practice to use 1 letter variable names. 
I'm actually OK ditching the 2.x byte handling, I really liked the string / byte separation like they did it. It reminded me of Java, very explicit. It was just painful to convert it, but still worth it. That's cool about the byte formatting though, I didn't know about that. 
My two jobs that are 90% Python programming are in Devops. People love their automation.. and testing.. and web interfaces.
Non-sudo install would be nice too.
This is oddly readable.
I could try uninstalling and reinstalling everything again (would be like the 3rd time), but I think I have it right. [here is](http://i.imgur.com/HVh4Wyr.png) my wheel installs and error message.
This remind me that this subreddit's theme (and Python.org) is the wrong color. It's the old Python 2 theme, not the new Python 3 theme. Ah well. No-one ever said Python's transition path wasn't confused. 
What challenges has the project had that it's taken so many years?
Yeah, it's using Qt's GraphicsView as a very fast canvas. Way faster than matplotlib for these purposes.
I wish I'd seen this before I was 2/3 of the way through converting [PyRestTest](https://github.com/svanoort/pyresttest) to be dual Python 2/3 compatible. 
Yes. I never said list comprehensions were bad. The central argument I've been making is that they are not universally preferable. Then I described specific cases where this is true. 
[This one](https://raw.githubusercontent.com/LukeB42/Emissary/master/doc/emissary4.png) is from a [separate project](https://github.com/LukeB42/Emissary) that defines three panes: the list of articles, the scrolling pager for article content, and a statusbar that lets you search for articles while you type. The nifty thing about it is how those panes listen for input, and that positioning them is like this: [[articles, content], statusubar] List operations can be used to reposition them.
If youre looking for more help, I found a ton of info and examples and even python packages you could use to assist in making a text based rpg, just by googling 'python text game rpg'. Here is one such topic: http://codereview.stackexchange.com/questions/97282/skeleton-for-a-text-based-rpg
Thanks for saving me from wasting my time guys! What would you recommend instead? My team uses Python frequently at work and I still suck at it
Try `pip install pygame`.
First of all, Sublime Text has nothing to do with Python itself or installing Python libraries. ST is a text editor - it's great for *writing* Python code in (and many other languages), but that's the extent of it. As for installing Pygame, try this (there are Win and OS X instructions there): http://kidscancode.org/blog/2015/09/pygame_install/ I've been trying to make these steps as simple as possible so my students can follow them. At this point, it's the best process I've found for making sure you have a good, working Pygame setup. 
Cool Ill try that out. Thanks!
As far as I can tell, Twisted is enjoying a renaissance right now. Twisted 15 is an awesome major version - the best in a long time. The new documentation is great. It has a new threading library. It has a new async logger. The twisted room at the PyCon.us sprints was awesomely high energy and full of life. I am hopeful that eventually Python will have core facilities (like async, yield, and await) so that Twisted doesn't need to supply flow control over its own event loop. Some people are saying that asyncio will "replace" Twisted, but that betrays a misunderstanding of what Twisted is: it's a network engine with asynchronous processing and transport APIs. If asyncio becomes truly successful, it will only replace parts of how Twisted (and other async projects) work. Asyncio doesn't do the same things as Twisted. Twisted is quite possibly the finest piece of open source software in the world. Reading the codebase is an absolute joy and has made me a much better python developer. It is solid, battle-tested, and does some very heavy lifting with very little code. If you've never used Twisted before, but have some async needs for your upcoming Django / Flask / Pyramid project, I suggest you check out hendrix ("A Twisted Django" - get it?), which is an easy and performant way to use Twisted for this purpose. https://github.com/hendrix/hendrix
I agree with what you are saying. The system seems to be a rush to publish. While it can produce something good if enough people try at it, most of what they put out is questionable quality.
Yap, the "noise"-to-quality content ratio is definitely higher than at other publishers, e.g., O'Reilly or Wiley. It's not impossible to write a good book with/for Packt, but it's probably more challenging of the author (what I mean by that is: what is good enough for the publisher may not necessarily satisfying for the reader). Since tech books are generally not cheap, I always search for independent reviews or consul my social media platforms before I make a purchase; I think Safari Online could be worthwhile for me, something I'll probably try out some time. However, I think the main problem about errors is *not* that they are annoying -- I even think that you can be considered lucky if you find them given that they exist (I am not talking about typos here) -- but to learn something that is not correct!
Exactly. 
Interesting, do you have any more information about this?
Install the [Visual C++ Redistributable for Visual Studio 2015 ](http://www.microsoft.com/en-us/download/details.aspx?id=48145)
thanks for taking the time to be helpful. gohlke replied below with the solution
Sorry, it looks like this is no longer true. It used to be substantially slower. I'm using 3.4. &gt;&gt;&gt; timeit.timeit('"%s, %s!" % ("Hello", "World")', number=10000) 0.0003353929496370256 &gt;&gt;&gt; timeit.timeit('"{0}, {1}!".format("Hello", "World")', number=10000) 0.010580547037534416 &gt;&gt;&gt; timeit.timeit('"{}, {}!".format("Hello", "World")', number=10000) 0.009777617990039289 Old style string formatting is still way faster.
Thanks for sharing, and making this available for free w. pay option is a very nice thing to do -- not only for the individual reader, but it benefits the Python community as a whole; I hope it will encourage more people to consider this "topic." Btw. I have the feeling that many open-source libraries, especially in the scientific computing community are going toward Py2.7x &amp; Py3.x rather than Py2.7x vs. Py3.x. Although guaranteeing cross-compatibility may not always be possible &amp; feasible, it has become easier and more convenient over the years (thanks to `future`, convenient tools to manage virtual environments, and services like travis-ci) 
Cool, thanks for the feedback 😀
Github proves either that you can code, or that you have a friend willing to lend you his code. Nothing short of having you write code proves that you can write code.
That doesn't matter, though. You job may use Python and nothing but Python - but, if it's job that will be good for your career, it's still not a Python job, but a software engineering job that happens to use Python. Python, Java, IntelliJ, Django, and all those things are tools, not jobs. A good engineer uses whatever tool is appropriate, but does not base his job around that tool.
I'm biased since I'm the author, but a lot of people like [Automate the Boring Stuff with Python](http://amazon.com/Automate-Boring-Stuff-Python-Programming/dp/1593275994/). It's for beginners, but the second half also covers several cool modules that devops or admins people would like to know. You can also read it for free online at https://automatetheboringstuff.com
 **Automate the Boring Stuff with Python: Practical Programming for Total...** |||| --:|:--|:-- Current|$22.86|Amazon (New) High|$24.65|Amazon (New) Low|$19.44|Amazon (New) |Average|$22.86|30 Day [Price History Chart and Sales Rank](http://i.imgur.com/1yrNgUk.png) | [FAQ](http://www.reddit.com/r/PriceZombie/wiki/index) 
I gotta say, their use of Mako templates is fascinating
Thanks very, very much. I'll definitely have a look through those. I already know Smalltalk reasonably well, but I know that when I grok LISP, I will be all I can be…
Learn Python published by O'Reilly was where I learned. Also the Automate Boring book is good! Depending on if your team uses Django (common web framework) you definitely want to learn Django too as it is a whole 'nother ball of wax.
Yep. Here's a post by Guido van Rossum explaining the history behind it: http://python-history.blogspot.co.uk/2010/06/from-list-comprehensions-to-generator.html?m=1
I never noticed this got reposted elsewhere, so I'm busy catching up. That was my notebook; it's meant to be fairly high level and is (as much as anything) a rant against K-Means and some of the other "default" clustering algorithms as anything. I agree I never really defined cluster and I see you've looked into that in rather more detail. I think what I have in mind and what you describe in your paper are very similar. I hope you don't mind if I steal/crib your definition when update that notebook with more details. I had never actually heard of "robust single linkage". Interestingly it is very similar to HDBSCAN. In fact HDBSCAN is identical to robust single linkage with alpha=1, at least up to the hierarchy. One of the goals of HDBSCAN is extracting an 'intelligent' flat clustering from that hierarchy and so there is further work (which is actually quite interesting in its own right) to effectively find a good flat clustering. It actually has some things in common with Carlsson's ideas on persistent homology in focussing on persistence (and I believe this analogy can be taken further and multidimensional persistence may yield a good way to eliminate the min_samples/k_neighbors parameter). Anyway, thanks for your links; they were very informative, and I look forward to your future work. 
If you actually need type enforcement, it's probably best to use a different language so you can actually get the types enforced. Focus on good variable names. This should prevent most cases of people using it as if it were the wrong type. You can also just go ahead and use it, and handle the resulting exception if it wasn't a type you were expecting. There are also functions that can test the type of a variable, though I haven't had cause to use them yet and don't expect to unless I'm deep in the internals of some library I'm writing. 
sublime is a text editor. it isn't the python interpreter (though it has one embedded, thats just for playing around, its not the interpreter that will run your program). try /r/learnpython for basic questions like this. they'll help you get up and running.
&gt; x = (1 &lt;&lt; 53) + 1 It is a misleading example though, as the implicit conversion to float gets you with an implementation limit. Integers are arbitrary. Floats are not. &gt;&gt;&gt; x = (1 &lt;&lt; 53) + 1 &gt;&gt;&gt; x 9007199254740993 &gt;&gt;&gt; x + 1 9007199254740994 &gt;&gt;&gt; x + 1.0 9007199254740992.0 &gt;&gt;&gt; float(x) 9007199254740992.0 &gt;&gt;&gt; float(x) + 1 9007199254740992.0 &gt;&gt;&gt; float(x) + 1 == float(x) True
Give up on the standard `unittest`, use `pytest` instead. (Some people use `nosetest` but I don't see the benefit). That said, you have too many nested directories before you get to your tests.
I am reluctant to go too in-depth immediately, since I've done this many times before, but happy to elaborate on any point. Anyway, here are the biggest things: * Twisted is one of those "special cases" where we deal with both text (unicode) and bytes. The lack of b/u prefixing in 3.0 to 3.2 made porting essentially impossible with a 2/3 codebase, and 2to3 didn't work at all due to the problem domain. Real porting was possible when 3.3 came out. * 3.0 to 3.4 does not include bytes formatting. This is fair enough for the general case, but a lot of Twisted relies on it. Say, for example, a HTTP response line. It could be produced like this: version = b"1.1"; path = b"/"; method = b"GET"; introLine = b"%s %s HTTP/%s" % (path, method, version) Not saying this is the best way, but a lot of this code was written before `.format()` (which also doesnt work on bytes in Py3.0-3.4). So, since it doesn't work at all, you have two options: a) do a decode-format-encode dance to use `.format` or `%s`, or b) (the solution Twisted has gone with) replace the nicer formatting with bytes concatenation. We can't depend on the bytes formatting in 3.5 yet, as we target 3.3+. * Lots of Python changed. For example, there is now no such thing as a bound method, and this small detail meant that things like trial's internals had to be completely rewritten. * Twisted is big. Currently, it's at ~140K statements, and that's after I've removed a bunch of old things. Right now we're at 50% (which is a massive milestone), and there's parts that will never be ported (either due to uselessness in the present day, or something else doing it better). There's many smaller reasons, but those are the big ones.
I break my tests up in a structure that resembles my project directory. For example, the tests for `src/xyz/entities` go in `tests/xyz/entities` (xyz being the package name). When I get around to building the web component, that'll live at `src/web/` and the tests will go in `tests/web/`. Etc etc. So I have a structure that looks like this (on mobile so pardon crappy format): xyz/ src/ xyz/{entities, handlers, auth} web/{routes, repositories} cli/{commands, utils} tests/ xyz/{entities, handlers, auth} web/{routes, repositories} cli/{commands, utils}
I tried three times to learn Haskell and its packaging system made me so mad. I have two locations and 4 computers I work with plus my home systems. I never got all working with Haskell. Racket's Dr. Racket works every time.
I have one main package and then web and cli are addons. It just helps me keep my mind straight when coding. 
Who cares? If you systematically fake your Github, you'll be caught and fired immediately after hiring when you can't actually code. It's not a crime worth committing, and I've never heard of anyone committing it. Fearing a faked Github (as opposed to an inflated one, which can be real—I see a lot of class projects on Github, as if they proved anything) is just paranoid. 
To check if it's installed with the python environment you're running against - open the Terminal, type python, once it starts up try to "import pygame" If that's not working, you might installed incorrectly or it's associated with another python environment on your computer. Just a side tip, to organize and visually work with your projects you can try out the PyCharm IDE. That allows you to go into your preferences and visually navigate your python environments and select the one's you setup to run against. Good luck and don't give up! Pygame is fun!
This is my favorite answer.
I had never really given py.test a shot, despite having heard about it several times over the years. I've always just opted for classic unittest+nosetest for whatever reason. Probably because it made sense coming from other languages. After reading this post, I decided to use py.test for a script I've been writing at work for a couple days. I think I'm converted now. It's so simple, and so much less verbose than all of the ``self.assert*`` methods. I'm sure I'm doing some things rather "incorrectly," since I'm still using [mock](https://docs.python.org/3/library/unittest.mock.html), but I'm definitely enjoying py.test thus far.
[removed]
Strongly typed may be a bit misleading. For example, we'll use OP's idea even though it's irrelevant. x_int = 1 y_int = 1 z_float = 0.3 a_int = x_int + y_int # y_int is 2 b_int = x_int + z_float # b_int is 1.3 In strongly typed languages, (int a) will be equal to the value as (x_int). Now... int x = 1; int y = 1; float z = 0.3; int a = x + y; // int y is 2 int b = x + z; b is where strongly typed languages differ from Python. They can behave generally 2 ways. 1. An exception is thrown due to type mismatch. 2. The value of b will be 1. Or maybe 2, but I have never seen this because that sounds pretty silly. Now one could argue that all "ints" in Python are "floats". But this still isn't the same thing as strongly typed languages are *traditionally*. Yes it is "strongly typed" but not in the colloquial sense. Just saying that may be misleading. Even though it is "strongly typed" in a way to make it much simpler to use.
Github please.
It's not about fearing anything; it's more about the amount of information you can get from seeing someone's code, in a repository, disconnected from the actual project. What part of the code was written by the candidate (as opposed to his peers, the author of the repo he forked, random SO people)? What part was his original code (as opposed cleaned by code review)? To which extend is the design fully his (it may range from, indeed, fully his to fully architect's, with everything in-between, and you have no way of finding out which is the case). A lot of people believe in their superior ability to judge someone else's skills from reading their code, but that ability is severely limiting even for very experienced engineers.
The tutorials linked in the sidebar of this subreddit are very good. &gt; due to significant concerns around confidentiality, I wasn't aware of the extent of the coding requirements until after I had signed the employment contract What a mess! "Get me graduates - In which field? - I can't tell you. Just get me some and stop asking awkward questions." Edit: I am just about to buy a device made by Furuno. On the off-chance that you know of any reason why I shouldn't, please let me know (privately is OK). :-)
Oh *we* don't see an issue - Python is strongly typed - But we are here on r/Python which selects for those who know the one true way ;-)
Aha! Now I see. ;)
I'd add that now is the time for him to learn Pyenv or virtualenv if he hasn't already. Two points: 1. Ice seen people worry about having to learn another package, but the sort of person who is reticent to take the time to learn another package is *exactly* the kind of person who needs one of these, because they are going to have a fucking nightmare if they ever have need to unfuck package version conflicts. I haven't used Pyenv but with virtenv, it didn't take long to learn and instead of "learning" it, I just created and virtenvs folder and made myself a little readme cheatsheet. How to create a virtenv; how to create a virtenv with specific default Python version; how to do those without site packages installed; and how to toggle virtenvs. That's it, if you're on a Mac and have Time Machine going that's basically all you need to know how to do. 2. Insulation from stuff like what OP experienced. Your virtual environments won't shatter upon an OS update and are easier to back up/transfer/etc. 
Kidding right? super math intensive and definitely not easy. 
Honestly this doesn't sound more optimized than a normal usage of the site. It does sound like he got way more messages than normal maybe, but the quality of a lot of those matches still sounds really, really low. Is receiving hundreds of messages from people you aren't interested in talking to actually better than them not messaging you at all? 
What if you need an extra dependency? What would that workflow look like?
Definitely not easy, but the math seem to be on the level you would expect in a machine learning textbook. Still a cute "hacking" story :)
&gt; What actually seems to be happening is that Python is considering x and x to be “duplicate” values, float(x) and float(x) to be “duplicate” values, and 0*1e400 and 0*1e400 to be “distinct” values. Why that is I’m not quite sure. I believe that's an optimization: the set constructor tries a cheap identity check (`x is y`) before attempting a more expensive comparison (`x == y`). When x is a NaN, `x == x` returns False, but `x is x` is always True, so the duplicate value gets eliminated. Similarly, `float(x) is x` when x is already a float, as an optimization, so `{x, float(x)}` is the same as `{x, x}` is the same as `{x}`.
Hey I have experience with boto. I used to work for a mid-sized, ecommerce business that sold on both Amazon and ebay. I've built applications mainly focussed around pricing, but do have good experience with the whole MWS API. PM me if you're interested in talking through your requirements in more detail. FYI, I'm UK based, if that makes any difference to you.
Yes. That ego boost
Here you have yet another solution, with if else and a single lookup: val = thedict.get(key) if val is not None: return val else: return default just sayin'
Why would you want to run your server through a VPN? It's not a good idea 99.9% of the time, as it limits your bandwidth massively. 
K-modes is similar to k-means, just instead of using the mean to calculate centroids you use the mode, so forcing your centroid to be one of your data points. Also the distance is measured slightly different. Here is an article about this https://shapeofdata.wordpress.com/2014/03/04/k-modes/
It would be more like running a python script through the VPN to automate a headless browser for tests, or to use API's. That way my computer and internet wouldn't have to be on 24/7. 
Then look into NetworkManager. You should be able to just poke it over DBus and have it bring up your VPN connection for you.
This has little to do with math, Python, or OkCupid. A better title would be "Guy with Math PhD wasted a lot of time to write meaningless code instead of simply answering some more questions; then goes on a lot of dates which all fail; then simply gets approached by a girl he happens to love". Notice how math, machine learning, and specifically Python have nothing to do with that. Bonus points for namedropping a Bell Labs algorithm that, by description, is indistinguishable from clustering; for consulting a neuroscientist to install a simple keylogger; and for mentioning a notebook "with formulas and equations", apparently about writing Python code that amounts to webscrapping. 
Check out my framework http://hitchtest.com/ python's built in unittest, nose and py.test are all okay for testing python functions without side effects (that's what's in most tutorials), but the higher level at which you test, the more they start to suck. For fully isolated, complete, end to end tests of a web application they suck really badly. There's an *awful* lot of work which needs to be done to effectively automate testing a web app - installing software, checking the environment for problems, starting services (webserver, database, etc.), stopping services, interacting with mock services and tons of other stuff which is not fun to build from scratch yourself. Hence the reason I built this. I'd be really happy to see python beginners raise questions as issues on github, incidentally. I'm trying pretty hard to make it beginner friendly right now.
CUDA is a parallel programming model. CUDA C++ is an extension of C++, as CUDA Fortran is an extension of C. And while the work in this post doesn't use it, there is also CUDA Python, developed by Continuum Analytics as part of the Numba JIT compiler. http://docs.continuum.io/numbapro/CUDAJit
Hey /r/python. For work, I've created a graph visualisation of a bunch of Python related StackOverflow tags and their relations. The graph came from a Neo4j instance I use, and I've used lots of sk-learn goodness in getting the data together. EDIT: I also wrote a blog about how I did it, which (barring some format changes) is now live: https://www.packtpub.com/books/content/creating-graph-application-python-neo4j-gephi-linkuriousjs
Thanks for the explanation! That helps
https://pyformat.info/ is a great reference.
Strictly speaking you're right, but I have never seen a language which didn't cast number types from one another. And from a type system perspective, they may be considered subclasses of a common type (like Number) and simply "upcast" them. That's different from doing "hello" + 3, which is an operation on two completely different and, in general, unrelated types.
I think this shows that the underlying OK Cupid algorithms are ineffective at matching people, or that he was picky or unattractive. Questionnaires are not the whole story!
I remember hearing about someone using Spam Assassin to find women online.
A crosspost to so? is google broken?
The post of the programmers SE site is deleted. In any way, it is meant to be a question. So, I let it remain as is.
&gt; The way of implementing iterators are known as generators. It is a normal function except that it yields expression in the function. Nope. Generators are subtypes of iterators ([abc](https://docs.python.org/3/library/collections.abc.html)). A generator is any object that inherits from `collections.abc.Generator` and in so doing implements the generator interface: `send, throw, close, __iter__, __next__`
I don't know...they hired someone who recognized being out of their depth and actively sought out help. I'd take that over an overzealous coworker who thinks they know what they're doing and blindly charges ahead while creating a bunch of useless and/or harmful garbage. OP isn't going to be immediately useful, but sounds like they might be a good long term investment as a hire. That being said, there's value in honesty with many employers. I once told my VP that he should demote me because I was drowning and was going to wreck the world. He said of course I would, as does everyone in that position. Just don't do it often and don't do it the same way twice and he'd be happy. Evaluate if "I'm in over my head, but actively trying to learn how to swim" is a good thing to call out. Some places it'll be rewarded with extra time and guidance. 
Yeah, I wouldn't expect a conversion to bool to spend the time considering if a string was "False", "FALSE", "false", etc.
except that is not what your question asks &gt; I was confused about which among these 3 is the most widely &gt; accepted guide. is not the same as &gt; Is there a standard style guide for Python? the answer to both is the first result on google. pep8
If you're used to stringly typed languages it's a bit surprising.
I believe his post was a joke because this story came out around 3-4 years ago
Yeah, it boiled down to "he answered tons of questions to improve match rate" and then "bulk visited tons of profiles".
Python and Machine Learning (among with 'algorithm') are buzzwords outside of tech. I really don't know why. From what I've seen, Machine Learning outside of academia and research is actually very boring and not at all impressive. Yeah Facebook, Google, etc. are trying to do some amazing stuff with it, but nothing substantial has been created yet that relies on it. I guess Linear Regression sounds a lot less attractive than Machine Learning. But the guy made it to wire and found love, which gives him great publicity. So it wasn't all for nothing and nothing.
The article hints at that. It says his fake accounts were getting banned, but then it "made them act more human", which probably means he just throttled them and added some randomness to their clicks.
No, you missed it. He apparently did two rounds of bulk behavior - the first when he researched what questions to answer, and that's when his bots were getting banned (which he apparently circumvented by adding randomness, somehow averting the far easier "there's six user accounts out of one IP" test); and the second when he actually bulk visited all women pages, so they would see him and respond back. That second round could not be done on a bot - the women needed to see his actual account to write him back, yet he somehow evaded the ban anyway.
Looks like your data is almost valid `yaml`. I'd do something like import yaml almost_yaml = s[s.find('-'):] yaml_data = almost_yaml.replace('--', '""').replace('-', '---') parsed = yaml.load_all(yaml_data) instead of using regexes.
Does it go beyond linear regressiob? I'm talking about products out there that have a user base. Not r&amp;d.
It certainly depends on your confidence in Python... because Django can provide you with a minimum viable product with little effort if you are familiar with Django (or any other web framework)... but if you're not, it can be a daunting task. I would almost recommend you look at Google Drive and use forms/sheets/charts. This path is successful when the users are fairly confident in their processes and don't want to continue to enhance their workflows/processes. IMHO, if the solution architect is also the primary user - don't go down this path because this is not a robust solution and an SA is always tempted to add more and more functionality. I am of the opinion that you get a web-first solution with perks such as mobile UI right out of the gate and continued improvements - which are developed by someone other than yourself. Success Stories. http://googledocs.blogspot.com/
Hi, thanks for your answer. We can't use any internet hosted solution, since internet is only 56k over here. They are 5 people (and 8 people next January). I could host a django app on the office NAS, but I am not that versed in django and would not want to jeopardize their workflow by introducing bugs that will surely happen, since I don't know django. I am good in Python though. (I'm a software engineer since 8 years C++/Python)
On Windows, you must use the python launcher. Shebang is only used by it to select the proper version of python. `py test.py` will work, as well as double-clicking the file in explorer.
I'll watch that movie! Let's get 2 people who have never used a computer to pretend to be programmers, and mispronounce computer words. And the girl will be a supermodel, wearing nerd glasses. By the end of the movie, she will take off her glasses and realise she was beautiful all along. And oh yes. Can we have a lot of product placements please? Don't see enough of that nowadays.
We need Red/Green code as well!.
Or you use Python within **Cygwin** (https://www.cygwin.com/). I installed Cygwin &amp; Python through **Babun** (http://babun.github.io/) and i'm a happy user so far :-) Of cause you can also use a real **Linux** for Learning e.g. a **LiveCD** or **Virtual Machine** (i use free Virtualbox). I suppose all current Linux distros come with Python.
Machine learning is far more complicated than linear regression. It's useful in finding correlations to hundreds of variables.
Great job xkcd bot! Keep trying...
BS4 is a parsing library which makes it incredibly convenient to get specific data out of web responses. Scrapy is a web-scraping framework with a ton of functionality to let you build a spider that can crawl an entire site. Parsing the data from the responses is only a small portion, and includes things out-of-the-box like handling redirects, cookies, referrers, user-agents, compression, throttling/delays, etc. A similar comparison would be Jinja2 vs. Django (I saw you're active in web development subreddits). One is a great library for generating HTML, while the other is a complete framework for making a website.
Three links to find out wtf it is. Terrible.
Scientific computing mostly. Thanks for advice, I'll keep looking
Am I the only one that sees adding new languages for every problem set you encounter a bad solution? Especially when all these new languages solve essentially the *same* problem (let's take x arguments, some are required some are not, let's have this documentation for these arguments, etc) Python already has solved this problem, why not reuse that? That's the approach I use in [hug](https://github.com/timothycrosley/hug): import hug @hug.cli(version="1.0.0") def math(number_1:int, number_2:int=1): '''Multiplies number_1 by number2''' return number_1 * number_2 if __name__ == '__main__': math.cli() It also supports hug_directives, and you can even expose a function as both a cli and an HTTP API endpoint.
While I think the idea is nice, in my opinion the questions are sometimes lacking important information or they are answered wrongly or not sufficient, e.g. &gt; How do you make a higher order function in Python? &gt; A: To make high order function , we need to import functools module No - any function accepting other functions as argument or returning other functions can be called a "higher order function". You can create them in plain Python without importing any modules. &gt; What are the supported data types in Python? &gt; A: Python has five standard data types: Numbers, String, List, Tuple, Dictionary Depending on how you count, you should probably say `float, int, complex, str, bytes, list, tuple, dict, set, frozenset`. Also, you should add "builtin", as Python supports any datatype, as long as the programmer defines it. &gt; Which module in Python supports regular expressions? &gt; re Well, there's [regex](https://pypi.python.org/pypi/regex) - should probably clarify "in the standard library" &gt; You can perform mathematical operation on String? &gt; False What is a mathematical operation? Does `'str' * 3` count? If so, the answer should probably be yes - `'str' * 3 = 'strstrstr'` &gt; What are Python decorators? &gt; A: A Python decorator is a specific change that we make in Python syntax to alter functions easily. Well, decorators are basically syntactic sugar that allow us to modify functions/classes. Calling them a "specific change [...] in Python syntax" is probably misleading. Also, IMO, it should say "decorator syntax" - the actual "decorators" are plain Python functions or classes. &gt; Why lambda forms in python does not have statements? &gt; A: A lambda form in python does not have statements as it is used to make new function object and then return them at runtime. That's not really the reason a lambda expression (not "form") cannot have statements. Normal function definitions are also executed at runtime and can contain statements, and you can always use `exec` and `compile` to create "on-the-fly" functions even with statements. I don't know the exact reason why lambdas only allow expressions, but Guido said so and it probably keeps the grammar easier.
Looks nice, but i have a problem tried downloading it: with this url form your page: https://www.yhathq.com/products/rodeo/downloads/linux_64 but i get the following return: PLATFORM NOT SUPPORTED: linux_64
Just about every CLI solution is platform agnostic (works on windows, linux etc), but what you probably mean is that it's language agnostic - which is a given, every DSL is, or put another way - it's language agnostic because it's a new language! Let's take this to it's logical conclusion, If you moved everything into domain specific languages you would simply have to write several different languages for every problem, would have to learn more, and solve the same *exact* problems using different syntax for each problem area.
I feel that it's a "wat" that `bool(str(False))` works at all.
It's pretty similar. We've beta tested it with a lot of Spyder users and were able to win over converts. Try it and let me know what you think!
still the same. Do you get a file if you target the url: https://www.yhathq.com/products/rodeo/downloads/linux_64 ? Cheers
@chub79, @Sir_not_sir TurboGears (beside Django and Zope) is a framework mentioned in official Python Documentation in [Some notable frameworks](https://docs.python.org/3/howto/webservers.html#some-notable-frameworks) section. 
It's not a new language. It simply implements the POSIX standard. Python with argparse and optparse (or in your case hug) went and implemented their own inadequate syntax with a confusing API that is less capable than the POSIX standard. There is one method in docopt that you call with two arguments, one of which is the version. At the end of an incapable standard argument parser in Python, you're left with a poorly formatted command line prompt. With docopt, you write your properly formatted prompt and get a properly functioning argument listing.
When I open the app, my Mac says "OS X is trying to allow an item to always run," and it wants my admin user/password. Is Rodeo running something in the background?
You could use proxies. I made a library to easily get proxies pip install checkerproxy from Checkerproxy import Checkerproxy import requests proxies = Checkerproxy() requests.get("http://google.com", proxies = proxies.proxies_requests_form[0]) 
please tell me what it is, specifically, you're trying to accomplish and then I might be able to suggest a tool that might help. on the most basic level if what you're looking for is a command line package manager then what you're looking for is [pip](https://pypi.python.org/pypi/pip). what other tasks are you looking to accomplish? unittest is a python built in and it integrates with CI tools like jenkins through a command line interface. python is interpreted so there's no need to have something like a Makefile to deal with compiling. "building" a python app usually doesn't involve anything besides installing your package dependencies through pip and then running your test suite through unittest to make sure it all works. are you looking for a tool that produces redistributable Python executables? the only one I know of for that purpose is [py2exe](http://www.py2exe.org/) which is supposed to produce distributable packages to run on Windows machines. all of the other use cases I've personally used Python for simply don't require any kind of packaging or distributing. one of the luxuries of web server development I suppose. Its Unix and its just IO streams start to finish, so it just kinda works already. WSGI does the hard work. 
it runs IPython underneath the Mac App.
Seven years ago, this framework was quite popular and known in part because of a 5-minutes wiki tutorial that went kind of viral. These days... it feels like Sourceforge :(
That obviously hasn't been updated in a while, it still mentions pylons.
Happy to see more data types in the Environment panel. This project is really coming along! However I was interested in using it on a server remotely through the browser. Now it seems very similar to spyder
The requests library along with ipython is what I usually start with. I then setup virtualenvwrapper and the likes. 
It is a clickbait headline for a Wired article. What did you expect?
anaconda3
Do you really find: import hug @hug.cli(version="1.0.0") def math(number_1:int, number_2:int=1): '''Multiplies number_1 by number2''' return number_1 * number_2 math.cli() More confusing then: """Math. Multiplies number_1 by number_2 Usage: math.py &lt;number_1&gt; &lt;number_2&gt; math.py (-h | --help) math.py --version Options: -h --help Show this screen. --version Show version. """ from docopt import docopt def math(number_1:int, number_2:int): """Multiplies number_1 by number_2""" return number_1 * number_2 arguments = docopt(__doc__, version='1.0.0') print(math(arguments['number_1']), int(arguments['number_2']))) Their usage from the command line is nearly identical... and functionality equivalent. I know I'd want to write the first. Which one would you honestly think is more Pythonic?
well, a typical workflow goes like this: 1. ensure dependencies are installed, including those needed just for building. 2. Perform any necessary pre-compilation tasks. I can't think of anything off the top of my head, but in Javascript or PHP this might mean taking something like a template, and compiling it into native code. 3. Run unit tests, and fail the build if a unit test fails 4. Run integration tests, and fail the build if an integration test fails 5. Run code quality checks, eg: pylint 6. Generate coverage reports, and fail if coverage is not high enough. 7. Package everything for distribution (maybe this could involve something like py2exe if necessary) 8. if releasing, then upload final artifact to where it may need to be (pypi, personal server, etc) 9. Clean up anything that was generated from the above workflow. Now, all of this is of course possible without any tools whatsoever. I can run pip install -r dependencies.txt, I can run unit tests from the command line, I can run python setup.py install, and so on. But I personally find it easier to normalize all these steps by convention. With Make, I can just write tasks somewhat abstract all these rules, but I'd rather keep it close to python for simplicity's sake. With a formal build tool in place, the tools used to perform the work are abstracted away behind some sort of well defined convention. Should any of these tools change, my build process doesn't have to. I won't have to worry about whether someone is building on *nix or windows. It provides a consistent log output that can be easily parsed by CI servers. So, is it a NECESSITY? No. But I do find it incredibly useful nonetheless. 
at my dayjob we use [Ansible](http://www.ansible.com/) to automate our infrastructure management. if you desire an abstraction layer to sit in front of your Python-related management tasks I would definitely recommend doing it with Ansible. 
I just started using ipython. Great for prototyping
At one point, can they work together so well that both of them type on the same keyboard at once? That would be fun.
Do you know if any do not require AHK? From my searching all Python libraries use AHK's dll.
mkvirtualenvwrapper, then ipython + ipdb are installed by the ~/.local/share/virtualenvs/postmkvirtualenv script.
Looks and feels like RStudio for Python to me. That is a good thing for the Python world.
What kind of output do you want to end up with? You could split the input text into a list of subgroups using string.split() and then use re.findall() to create a dictionary for each subgroup.
I had the same thought. I started with spyder, but realized my use of #%% cells was approximating the ipython notebook, so I switched to that. I'm generally happier, but I still prefer spyder's themes and full-fledged editing.
Is there anyway you can still do some of these sample plots for me? I am having some issues with finding things that are even compatible with my version of Python, I am using Anaconda but some of the things imported are still not available. 
if x == 2: print x 
Every project benefits from TDD, debuggers, profilers and notebooks. In almost every virtual env on my system * ipdb * pytest * coverage * jupyter * cprofilev 
Nowadays, ipython and ipdb
&gt; a typical workflow there is no way that is a typical workflow. those items are separated by days,hours,weeks or months.
How so? except for steps 7 and 8, this is what I will typically do before I commit code. For example at work, if a java dev can't run mvn clean install on the project, don't commit that code.
1. you install dependencies every time you commit code? 2. NA 3. py.test 4. 4-6 CI on integration branches (covers 1) 7. 7,8 exaggeration as you already noted. we use CI rather than imposing a shitty build tool every commit.
Windows 10 x64 &amp; Python 3.5.0 Installed Rodeo for Windows x64 (installed without issue) Started Rodeo &amp; failed due to missing matplotlib ran pip install matplotlib and failed with *Command "python setup.py egg_info" failed with error code 1 in C:\Users\...\AppD ata\Local\Temp\pip-build-4uu4ghr4\matplotlib*
tox, isort, ipython, percol, cookiecutter and the setuptools/pip/wheel trio.
For how long I've used Python, my standard environment is REALLY light. Pygame, wx, twisted, mysql.connector, and passlib.
Dates are the canonical example of really bad truthiness implementation - who thought that midnight being false and any other time of date being true was a good idea? But I've also seen lots of examples of people accidentally writing if foo.remaining: when they mean if foo.remaining(): and various other variants that are easy to miss.
Pip and virtualenv.
1. For python, I remake the virtual environment before every build. So I don't install dependencies every time BEFORE I commit code, but as every commit triggers a build, the CI sever installs dependencies on every commit. I don't know why I got into this habit, but it's habitual now so I don't question whether or it's overkill ;) 2. I don't see how this is not applicable. If you take the template example, what ultimately gets shipped is the compiled code. So I can't skip this step and expect my tests to work. Of course, not every project will need this step. 3. one of the reasons I'd prefer to have a build tool , is it's a lot easier to copy a build script/configuration across projects, then a CI setup from Jenkins and others. 4. that's not the scm strategy I use. I tend to do all my work in trunk and tag/branch releases. But I'm open to alternative strategies if you're willing to share some.
good catch! fix pending...
Actually depends a lot on what I'm doing at the time, but things that I tend to use often: * peewee * arrow * requests * bs4 * pathlib (standard library, but not well-known enough imo) * concurrent.futures (also standard lib) Also, not directly used in my projects, but help with managing python in general: * pip * virtualenv * pew
This isn't Twitter. If you want to notify someone that you're replying to something they said, use `/u/username` or reply to their comment directly.
Held together with duct tape on public access Canadian tv?
Firstly, I'm confused because in 1 you say you already have a thing where every commit triggers a build. So you have a CI system anyway? So your problem is that configuring jenkins or whatever is too hard? or is it that there is no cross platform CI? But in any case, you should move to integration branches because that incentivises having your branch a logically ordered story of changes whereas doing everything locally every commit may overemphasises the instantaneous value of single commits. Too rigid local CI can strenuously force every branch to *work* after *every* commit creating strange incentives for keeping the branch building, rather than keeping the story of changes intelligible.
Have you found a good way to copy stuff from GVIM and run in IPython? On Linux I can use something like Tmux+VimSlime for this, but I haven't found a good way to do it on Windows (which I use more often).
Did you write the entire program with spaces? You should use four spaces instead of a tab character for indentation in Python in all your programs 
Yes, but something like the the class browser that Smalltak has, and in general something that takes advantage of a GUI: it's cumbersome to inkove dir when I can just browse classes visually. 
No IPython (Now is Jupyter kernel agnostic) is an interactive notebook of cells. RStudio is more of a IDE for Data Science and is also a great Latex and MarkUp editor. Very different in their methods. At first when I switched to R from Python I didn't really like RStudio as much. Now after a few years under my belt I LOVE RStudio and feel it is a better tool for doing the work and Jupyter is better for sharing and hosting.
Good article, but a bit misleading of a title. Might be better titled "Stepping through the 'Python wats'". The article discusses how Python's execution model leads to the results, but still leaves out the rationale of most decisions. E.g. why did Guido see fit to make int, float, str, and such all parse their arguments, while bool does not? That seems inconsistent, and likely the unintended consequence of some other decision. Still, very useful for folks tutorial.
Is there any hope of adding notebook support / code cells etc? I would love developing notebook style with full fledged ide features. 
Well, the framework has continued evolving for the past few years and also has a good amount of ready made extensions and components ( See http://turbogears.org/cogbin.html ) we have been using it for practically all our web development needs with pretty much satisfaction since version 2.3.
MMMmmmmmm requests.
Aww yeah ipdb. I always forget him until I need him. The rest are unfamiliar to me but I'll look though them, thanks!
Ooh, that sounds nice. I'll definitely look into that. Edit: Just looked up Jupyter, I didn't realize IPython was spinning out. That's awesome!
I've found some documentation for it (sorry, don't recall where), but if you can get a copy of gVim compiled with python support you can ostensibly get an IPython kernel running inside Vim for real-time awesomeness. I haven't been able to compile Vim in a way that works as well as the binary distribution (for Windows). My personal workflow is to write my script in Vim, use the %run magic in IPython, fiddle with the leftover state, and copy my changes to the source file and repeat. I will also liberally use ipdb.set_trace() in my source file, or even import and start a full-blown IPython depending on my goal.
percol looks sick! Definitely checking that out.
Yeah, but truthy doesn't really make sense for a string. It doesn't really even make sense for an integer (and different languages have different answers as to whether 1 is true, or 0 is true).
IPython (Jupyter) notebooks have *no* relation to Rstudio. There are no similarities. They are for different purposes. Edit: Plenty of downvotes but no comments... tell me why I'm wrong if you want to contribute to the discussion.
You accidentally posted a link to esr
Yes! Just found it, it seems more handy than iPython for learning &amp; testing code snippets
Python's idea of "truthiness" is pretty simple: * If `__bool__()` (on Python 3; `__nonzero__()` for Python 2) is defined on the type, call it and use the return value of that method. * Otherwise, if `__len__()` is defined on the type, call it; an instance is `False` if `__len__()` returns 0, `True` otherwise. * Otherwise, default to `True`. This gets pretty good intuitive behavior while still allowing customization; the fact that `__len__()` is in the chain of fallback options means empty sequences and mappings get to be `False` automatically, which is what people tend to expect (and is why `bool("False")` is `True` -- `str` is a sequence type in Python, so any string of length &gt; 0 is `True`).
Which of these give you a benefit over the debugger/ test tools in an IDE like PyCharm?
The method/not-method thing is not really caused by Python's method of handling booleans. And the confusion about whether to call something as a method, or not (and having to go look it up in the API docs, or let the interpreter/compiler error you out as a reminder) is a thing in other languages; I know some Java and some C#, for example, and I always have to try to remember, or just look up, which standard things that are methods in Java become properties in C#.
Of course it does :) A lot of real, actual companies right now are sitting on loads of data, and many have started to realize that processing that data is monetizable. That's why Data Science is a thing, and a pretty hot thing, right now.
&gt; This is my understanding anyway. I tried so hard to get into somewhere that actually does machine learning, found no place better than grad school. In Canada, anyway A significant amount of companies that do this are located in the SF Bay Area, as it were. Some, however, are more than willing to consider full-time remote people.
Sure, but he didn't do that - the article explicitly states his bot bluntly visited women by ages - a thousand 41-year olds one day, another thousand 40-year old the next day, and so on.
I got this error when executing command in IPython console: "Could not execute command. Python is still starting up. This should only take another couple seconds." Waited for minutes but still the same. Any clue? Edit: OSX + Python 3.4.3
Visual Studio 2015 community edition comes with Python Tools for Visual Studio.
Is there source for the desktop version? There is https://github.com/yhat/rodeo, but that looks like the web app.
Definitely. I sort of feel like RStudio missed out on an opportunity to serve both the Python and R markets, and now Rodeo is jumping in. Jupyter Notebooks have the awesome RMagic feature, allowing you to execute R code from within a python notebook. If Rodeo develops something similar, it could become my IDE of choice. 
The r magic is actually a Pandas thing since Pandas really is a remaking of R and it is incomplete so Wes coded that in.
yes still trying to figure out how to reconcile the repos: https://github.com/yhat/rodeo/tree/native
* Pip * Virtualenvwrapper
Nice. Good to know. Thanks. 
What do you mean spinning out?
It's not exactly an IDE, but for writing short scripts I would highly recommend the ipython notebook. I think at the beginning stages, an IDE will just get in your way, and being comfortable with the ipython notebook will be extremely valuable to you.
Or something like Autoit?
Check glass door.com 
Requests, pytest, and more often than not sqlalchemy.
.deb is not for all distros...
RStudio keeps the data frames and 'regular' variables in different sections, with data frames on top. That way 'spammy' variables can be investigated if needed but they don't clutter up the data frames list.
I have been in this position (no BS degree, and I got a really good job doing Python). My best advice is just to relax and stay calm (I know it's hard...). Interviewing is a crapshoot, you will either get an interviewer who asks you things in a way that makes sense, or you will get one who likes to ask really difficult questions. If it's the latter, probably not much you can do. But eventually you will find a series of interviewers who like you, whether it's this position or another. I have been the interviewer as well. My methodology was to ask a broad range of questions, like "in as much detail as you like, explain what happens in a web request from the time the user hits 'submit' until the data is returned". Sadly most people I interviewed could not answer this with even a minimal level of detail...
I'm getting something similar on Windows x32 with 2.7.
Hi there. You have posted a learning question to /r/python. These types of questions are far more suited to /r/learnpython, where users are actively interested in helping people to learn. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Show them that you've tried to solve your problem and you can get all the help you need. Cheers &amp; best of luck!
I'm getting the same thing on Windows x64. Will try on Linux Mint/Ubuntu later.
I think this looks cool, but it really annoys me that the Rodeo team refuse to admit that their product was obviously heavily influenced by RStudio.
Sorry, I don't follow. What kind of dependency are you thinking of? In general, anything I need to run commands in the container consistently get built in, even if they aren't needed for the main purpose (I go so far as to make sure my testing tools are in my production containers to ensure what I test is exactly what goes to prod). Worst case you can always do something like 'docker run &lt;snip&gt; /bin/bash "pip install $package &amp;&amp; python do_a_thing.py"'
well, i mean the layout is why people like rstudio, and probably the reason people will like this. it offers a lot of the same stuff other ides offer, of course, but i don't know of any other editors that look quite like it. [rstudio](http://rprogramming.net/wp-content/uploads/2012/10/RStudio-Screenshot.png) [rodeo](https://raw.githubusercontent.com/yhat/rodeo/master/rodeo/static/img/screenshot-mpl-complex.png) i'm not saying they shouldn't have made it, it looks beautiful and i'll probably use it myself, i just think they should have said, 'hey, we were inspired by rstudio and made this', kind of like yhat did with their ggplot port (which is also great). 
Same error, Ubuntu 15.04.
Requests, Beautiful Soup, and PyYAML are probably my most commonly installed ones. Lucky for me I haven't had to install Python that many times though.
For Windows x64, is there a way to install this in another directory aside from the Program Files folder? I have no admin access rights in that and would like to install it in some other directory. This looks promising!
ipython, ipdb, nosetests, requests, concurrent.futures
I don't install it, but argparse is my favourite timesaver and gets very little love. Not the biggest or flashiest but I use it in the smallest thrown away sysadmin script to the biggest server projects.
Actually it's a module called [rpy2](http://rpy.sourceforge.net/) that provides the interoperability.
The property vs. method thing is absolutely an issue in other language as well, but in other languages it's a thing that is resolved at compile time. Because of the truthiness concept in Python, it's not even resolved at runtime. Your code will work but do the wrong thing.
same error on Ubuntu 14.04 
Having a generic language level concept of additive identity in all datatypes that support addition makes sense and is useful. Making additive identity be implicitly equivalent to the "false" boolean value still seems like a mistake. 
I believe [woof](https://youtu.be/8wfG8ngFvPk) does most of that...
I don't care about his political views. And despite the obvious Unix bias, The Art of Unix Programming is a good book.
I absolutely love argparse. 
Thank you I'll share this
Eclipse with PyDev is very good!
while true this not a feature of python. but rather of a python implementation. If you use this don't be mad if your code breaks in the future. Also I will shame you.
Then I don't know why "you're calling him a raving lunatic" :) Edit: Oh, you edited your comment. The Art of Unix Programming is a good book. Read it if you haven't.
Show that you are curious. The interviews are bi-directional. You can(and should) also ask questions, show interest in the project, try to learn where it is heading what you will be doing there. Show general problem solving and programming skills, languages are easy to learn, good practices are hard. 
My new favourite is pathlib. It's so refreshingly logical and ergonomic after years of mucking about with string paths. And it's in the stdlib - definitely one of the most underrated inclusions!
yay! this package has existed for 2 days and is in total 42 LOC...
Not even that. Only Only 29 lines since the others are empty. Also some are comments, imports, or useless filler.
Percol is pretty nice. But I always forget what its name is so I end up mostly not using it. Is that just me?
With the exception of email and SMS, the users will always need to have a specific app installed on their phones for it to work. There's no universal notification system for phones, so there isn't one for Python.
Actually, the stretch goal of giving everything to the PSF was not reached, so proceeds will still go to me.
The major difference is that revision 1.3 had fixes for black and white printing (URL's were in blue in the earlier revision), and of course the cover has a PyCon logo.
Here you go! Not just a preview, but the whole book in HTML. http://python3porting.com
At the start of the interview, say "just before we get started do you mind if I quickly say something?". They will say "sure". And you say "This is a job that I really want. If theres any area that I don't have what you are after, I'm going to work super hard to learn what I need to, and I'm going to work super hard when I'm in the job."
reeeally nice this see thing!
grin, a supercharged grep replacement.
Here the description of this subreddit that you can read in the right sidebar : &gt; news about the dynamic, interpreted, interactive, object-oriented, extensible programming language Python So, what is your news about ? That teachers give students homework ? You can also read in this sidebar : &gt; If you are about to ask a question, please consider [r/learnpython](/r/learnpython). Finally, asking somebody (or an entire subreddit) to do your homework is the first step to fail the course you are attending. Good luck. 
I don't really have any advice because I am still learning python, but just wanted to wish you good luck and I hope you get the job :) Please let us know how it went and what questions they asked you (ofc if its not something super secret)
Argparse is so verbose, I get tired just looking at it. [Click](http://click.pocoo.org/5/) is great.
It also didn't say "Second Edition" on the cover anymore so initially I thought this eBook was a new edition.
You *should* be able to redirect output from the notebook to somewhere else. Honestly, I've never tried it, but I can't imagine that you can't configure it to do this. But definitely +1 for your idea of a "dream environment." I'd like the same thing; most of my notebooks are really research logs, where I'm trying to piece out something in particular from a dataset, so they're littered with a combination of code cells, comments, and LaTeX w/ references to articles/equations I'm coding. Having the output automatically saved to a log or directory (including figures) would be great.
bpython - Every venv has to have this because this the best REPL for python hands down. ptpython comes close (even surpasses at some features), but bpython has the right balance of simplicity and awesomeness out of the box. 
I've heard good things about it, but I mainly use argparse because it comes in stdlib
Yeah, I didn't open it. Looks interesting, thought.
So... is it possible to do remote development like with the previous version ? You run Rodeo on whatever compute node of a large cluster where your data and work environment is sitting, then as you are SSHing into that machine you just activate an ssh tunnel on port 80, finally you point the web browser of your local computer to Rodeo ? I can't really do any work on my local MacBook Air, it just doesn't have the crunching power of those expensive off-site computers.
Don't be naive, this is reddit. Don't expect any explanations for the downvotes. (I didn't downvote your comment).
X/ 一Z
I download and ran it on the latest version of OS X but it complains with this message: "Bad news! Rodeo can't start" and suggested I install python through the Anaconda distribution... However my python executable is in my `PATH` and ipython is installed: ingineer@computer ~ $ which python /usr/local/bin/python ingineer@computer ~ $ python Python 2.7.9 (default, Dec 19 2014, 06:00:59) [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.56)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import IPython &gt;&gt;&gt; IPython.__version__ '3.2.1' &gt;&gt;&gt; You guys need to fix something.
http://www.cafepress.com/+python-programming+toys
I disagree. I find bs4 intuitive, with a great API, and it's also quite performant when it's set to use lxml's parser. Between xml.dom, HTMLParser, lxml.html, BeautifulSoup3, and bs4, bs4 was absolutely the nicest library for HTML and XML parsing that I've used.
bpython is absolutely fantastic, I get sad every time I have to run a standard python REPL. 
I've been trying to build an IRC client in my spare time for a while, and this is the module that I've been using for interacting with the networks. As the client is still some long way off, I decided to open source this component in the hope that others could benefit from my work so far. This way, if my side-project never gets anywhere, it wasn't all in vain :) I did start off by experimenting with some of the libraries that are already out there, but couldn't find one that really matched my requirements. I found that the libraries you mentioned were not really well suited for my IRC client as I imagined it. AsyncIRC uses threads, where I would like to use asyncio, and irc3 is heavily geared towards being a back-end for bots. Using them for the client started to feel a little like fitting a square peg into a round hole. One thing that will be noticably different to a programmer is that this library does not use "flask-style routes" for registering message handlers with the connection. Instead, all handlers are expected to be part of a simple list. This makes unregistering handlers significantly eaiser, and I found this to be more convenient for debugging. All messages are sent to all handlers in order, and they can decide whether or not they want to deal with them. This is not as messy as it sounds! I've done my best to avoid making assumptions that cannot be easily overridden, and plan to add a whole load more to reduce boiler plate. My hope is that this API will be more flexible, and more widely applicable than any of the options currently available.
[The only Python plush I could find.](https://pypi.python.org/pypi/plush?) Best of luck. If you do find something, let us know. I wouldn't mind one myself. He can hang out with my rubber ducky and plush penguin.
Thanks, but that's not quite it. I've edited description to be more precise.
Of course I would be!
woof 
New to python ( about 1 year) never used those modules.
.
I started working on some simple examples [here](https://gist.github.com/darothen/57432f8ddf09537fe4b2). I'll try to update with standard level plots when I next have some free time.
[A little bit on the derp-tastic end of the spectrum, but it is a start...](https://www.ehayes.com/Wholesale-Gifts/New-Items/HX4762/Giant-Plush-Snake--104-Inches-Long--Blue-and-Yellow-Pattern)
I'm not sure what you mean by locked in. Hopefully, any good debug tool, any good coverage tool etc. will give you the same results given the same codebase. The IDE doesn't add any dependencies: if I develop something in PyCharm, then someone else looks at it while running ipdb and coverage, there's nothing to stop it working properly, is there? 
There's already an issue raised on github, but I am also having the problem that Rodeo isn't working with Anaconda environments, resulting in the "Bad news! Rodeo can't start" dialogue. I suspect the solution might have to do with setting the "default python command" in preferences, but I can't find a path that works. Certainly none of the paths in my python PATH work.
Rodeo attempts to read from your PATH but sometimes it doesn't quite work :( You can try pasting `/usr/local/bin/python` into the Preferences &gt; Default Python Command field. This might resolve the issue. Let me know if it works!
there will always be differences at some level. for a large project it just makes sense to standardize things like coverage and testing, and that's a lot easier with small, free, open-source tools. It also makes it easier to use hosted solutions like Travis-CI. Look at any substantial project on github, they likely have coverage and test configuration as part of their source.
found these on etsy but seems they were already sold. you may be able to contact the seller and ask if he'll make one for you. https://www.etsy.com/listing/13925598/ball-python-plush-soft-sculpture https://www.etsy.com/listing/14277984/albino-ball-python-plush-soft-sculpture
I got this guy from a vendor at PyCon: http://imgur.com/AL7DLOU It's based off the [8" Snake Beanie](http://curtotoy.com/ProductDetails/?productId=6263821&amp;tab=Tile&amp;referrerPage=ProductResults&amp;refPgId=508794700&amp;referrerModule=PRDREB) update: I'm not sure if this is the same vendor: https://www.etsy.com/in-en/listing/242529009/python-logoed-beanie-animals update2: Some proceeds went to the Python Software Foundation when I got mine. I'm not seeing that mentioned on that etsy site. Try to find a vendor that gives back to the PSF.
That's terrific, thanks!
That is what I mean - adding a Python dependency. Do you then do something like `pip install -r requirements.txt` in the container, and then commit and push the container as an image? If so, that would seem like an awkward way to move a project forward when working in a team (multiple people committing the image, for example). Assuming you're not doing that, do you recreate the Docker image from time to time? Are you using CI for that? I'm curious what a workflow like that would look like, especially in a team setting.
[Put these on his desk.](http://i.imgur.com/HyCFKCv.jpg) Kick it up a notch.
There are HTTP status code constants in 2.x httplib stdlib module (http.client in Python 3); in Python 3.5 there is also https://docs.python.org/3.5/library/http.html#http.HTTPStatus. Maybe it is better to backport 3.5 http.HTTPStatus and release it a separate package?
&gt; As this walkthrough proves, both languages have a lot of similarities in syntax and approach, and you can’t go wrong with one, the other, or both. Definitely not a 'R &gt; Python' post.
that makes sense. we'll add it in the next release.
First choice because easy and adequate. Celery nice but likely not really worth the complexity unless you got the requirements for it.
no not at the moment
sorry it's not signed yet (though should be soon) but i can assure you there's nothing malicious going on. though, i totally understand if you hold of on installing. The source code is here: https://github.com/yhat/rodeo/tree/native if you'd like to inspect it.
Thumbor is fantastic.
try one of those custom plush toy places. Like [this](http://www.budsies.com/) or [this](http://www.cuddleclones.com/) And just send them some [version](http://orig04.deviantart.net/5fb9/f/2010/010/1/d/python_logo_by_bluex_pl.png) of the python logo you like.
Same here, also got it during the last PyCon. I also have a shark with a python bandana (well you know, wife's idea ..)
&gt; This gets pretty good intuitive behavior while still allowing customization I think it's only intuitive most of the time. And the rest of the time you want to pull out your hair and stab people. I would submit the article as evindence for my claim. A more egregious example is the `time` data type. It happens to be false when the time is "zero" (aka midnight). A common sophmoric thing to do is to write `if foo:` when testing for `None`. If `foo` is midnight, then you get a bug.
Those were boa constrictors, though, but close enough :)
Your question would receive a better audience at /r/learnpython. 
 import python
How about you [bake cookies](http://www.thingiverse.com/thing:239697) instead?
While I'm sure some optimization may be possible, I didn't see any overly verbose code. What struck me is how much underlying power is in some of the packages that they referred to, and made me curious as to what the equivalent might be in R (a language I'm unfamiliar with, if it wasn't obvious)? For example, if the target file was JSON I'd only have to change .content to .json and I'd be done. If it was XML it's a couple more lines, but not significantly more (i.e. import bs4, BeautifulSoup(r.text) instead of r.content). That's not including the ability to send customized headers, handle cookies, etc. For those more familiar with R and rCurl, are those steps similar or does Python start coming into it's own when http interactions get more complex? I ask because rCurl seems to be based on curl, which is powerful, but I don't know how much of that power made it into the package. EDIT: a grammar error that began to eat away at me. If I hadn't changed it, I couldn't sleep tonight. 
don't know of any plush, but you could give a python balloon animal the ol' college try.... either that or give him a balloon 'do while' he might find handy
You just made me completely unproductive for the rest of my day. I hope you are happy. 
I don't know much about interacting with Git but I think that using server hooks would be a cleaner solution. I also noticed that you are using setTimeout for continuous updates. Websockets are a better alternative, I think. I dunno about how easy it would be to integrate them into a Flask app though.
If that turns out to be true, of course. It's entirely possible it was independently thought up, yeah?
Server hooks would require a central repository, like GitHub, right? I'm completely on board about not using setInterval, I'm looking into other options. Thanks for the feed back btw! I appreciate it!
How about this one? http://www.stuffedsafari.com/Albino-Burmese-Python-50-Inch-Snake-Stuffed-Animal-p/ar-03254.htm
Are you interested in some constructive feedback? Like on the readme, code style, etc?
[Link](http://www.comp-phys.tu-dresden.de/) Under teaching, there are some example problems that you can use python for. I guess it's more a motivational presentation, isn't it? The biggest advantage of python is that there are so many libraries available. That makes it just so much easier to get the computational result for your problem.
It is very similar to Spyder. We use Spyder exclusively at work. We were part of the beta testing and were very anxious to use it. There were a few things that annoyed us, but we provided the feedback to the Rodeo team and they promised to address them in future releases. I think the best part about this is that Greg and the Rodeo/Yhat team are very responsive to the users' feedback and are constantly making updates/feature releases. Good stuff!
Looks pretty neat! small tidbit, you seem to have loaded in the d3 v2 and d3 v3. I'm a bit curious why. also semicolons, always.
To save you a click: Using the server for external api consumption has pluses (e.g. avoid CORS, not exposing private keys). There is pretty much nothing specific python beyond the fact that, like every other modern language, it has available libraries and examples to help. Oh, and buzzwords about AWS and Docker at the end.
Are you running python in a container? 
SublimeText3 with Package Control, Anaconda, and Sublime-Flake8-Lint installed.
My bad on the 0 and 1 values. Making that table was a faff. I have edited the 1 out. Unfortunately I have google trawled for hours to gather what little information I know about how LabVIEW flattens clustered values into a string for TCP/IP transmission. Ultimately though its just a typecast / flatten block in LabVIEW - most of the devs don't need to question how it actually works. As a result there isn't much info online. You make a good point on the ASCII just being an encoding. Just because I happen to be receiving something that presents as an ASCII charactor doesn't mean the data is ASCII! Thanks for that realisation. Unfortunately as you say - still stuck with the bizarre way it expands its significant figures in both directions.
Thank you for your contribution.
I think the answer is that it's targeting a declining platform: .Net's strength was Windows desktop - if you wanted to build windows application nothing touched dot-net in terms of quality API and ease of use. But when it became possible to build high quality web interfaces (thanks to frameworks like Angular, React, BackBone etc), the demand for new windows applications fell significantly. And in turn, fewer reasons to need to do anything on the .Net platform. Why bother targeting a platform that limits where you can run your application. Who cares about a version of Python that adds very little value and is in many ways more limited than the standard. There's just not a big enough market out there for dot-net to make this worthwhile. At work I've noticed that most of my .Net pals have shifted over to working on legacy client-side projects or else completely crossed over to JVM/Python which seems to be heavily in demand. There's just no demand for Windows applications and the devs are feeling it.
Thanks for your input. However, it does not seem to help in my case :(
The main thing I think that caused development to drop off is MS dropped supporting it. Therefore it was tied to the interests of the open source community, but the interest wasn't there. :( It was a great idea, but not enough people had the know how and the time to work on it.
Yes I think that's spot on - literally nobody wants to write Windows apps now, Microsoft has even made it possible to all the major languages out there with Visual Studio in a desperate attempt to attract developers to write for its apps store. But I had hoped with .NET becoming multi platform the IronPython project might see more activity.
This is a neat little demo. Thanks for sharing!
If you guys were doing your own project like detailed in this post, would you use R or Python? I know this is a Python sub so I guess I'm expecting this answer, but in the early stages of learning R, and if I should be jumping to Python I'd like to do so before wasting more time on R.
see `.git/hooks/` directory on any git repository
&gt; Sometimes I feel like I must be the only person on the planet who prefers unittest. you're not alone brother.
I still can't figure out how to work this. I keep getting some weird errors to do with SCons, which I had to install myself, and I've gone source diving to monkeypatch it, but it didn't even change anything. I'd love some help.
Forgive me for repeatedly kicking dot-net's stinking and bloated corpse: Dot-net was never big for consumer applications. It was always really a business thing and so totally tied in with Microsoft's dominance of the enterprise desktop. It was a pretty safe bet because the next biggest computing platform (Apple) still has almost no presence in the enterprise. Microsoft bet big and lost that they could keep people in their sandbox - and consequently they never really really bothered to make Internet Explorer competitive. The new dot-net is the combination of Chrome, Javascript and Angular.js on the client-side and Python/JVM+Scala on the server side. 
Depends what kind of work is being done. For numerical stuff, I immediately install ipython, numpy, scipy, pandas, and matplotlib (and whatever dependencies are needed for those). If machine learning is involved, I install scikit-learn. If web dev is involved, then Flask and dataset for running SQL queries.
The midnight thing was openly admitted to be bad, and was fixed in Python 3.5.
It's not installing in my Ubuntu sys. . dpkg fails and software center alerts me its a bad package. . Any takers. . Please help. .!!
Looks very good at first glance. Just compiled a simple python socket server with it and it appears to work flawlessly. Makes ELF executables on linux named whatever.exe, but that's ok, still works. Going to put this through its paces soon, as I have a need to produce *windows* executables in Python with no additional dependencies. I'm not so bothered about the potential speed increase atm, as the ability to easily produce a windows executable. Distutils doesn't cut it for me. Wahey!
The ability to ignore the snarky "this-should-be-in-r/learnpython" comments from people in this sub
I suppose the problem is my interests are first, foremost and all but entirely for statistics, so that's why I've been using R, but I've been seeing Python used more and more lately for tasks I've been doing on my own. Even if statistics are priority A-Z, should I look into Python?
Thanks! Is there chance to get PythonMagick for Python 3.5 x64?
Given the regularity with which /u/theglamp blogs about R, and that yhat has a post about [running Rstudio on the cloud](http://blog.yhathq.com/posts/r-in-the-cloud-part-1.html) from way back in 2013, I doubt the features / layout were independently thought up. Rstudio is ubiquitous in R land. I'm fine with rodeo being heavily inspired by Rstudio, but it's a little weird they never mention it, since the layout is identical.
yeah like i can do that ;&lt;
Oh hey! I interviewed with Vik and even though I was sorely under qualified, he was very nice to converse with me and help me get some bearings straight. Encouraging to see someone who started off without a CS degree and a completely different career path end up being so involved and informed on machine learning. And good article too. I was debating between using python's mathematical modules vs R
Ah, seems you really know what's going on! I just didn't want to make any assumptions but it sounds like there should be at least a bit of explanation here.
Even at 10 GB I think the main issue will be how well you structure your program and how beefy your hardware is, regardless of the language. I'm not familiar with R but it wouldn't have become as popular as it has by wimping out on large datasets. Where python may help you, and I have no idea if this is even true for R, is interacting with MySQL and getting the data in (and out, if you want) of your program. Python has all sorts of fancy wrappers, modules, and functions to interact with databases, wander around the network, and export the output. It seems that R has a lock on specific types of analytical tools, as well as some pretty fancy reporting functions (although there are a number of Python projects that are narrowing the gap, like Seaborn and Bokeh). But Python works well as full stack, where you can take that analysis and turn it into something very different and then offer it to entirely new audiences in different ways. Maybe a better way of looking at it is what your final intent is. If you need something that can be programmatically converted into a persistent database/web service or needs to be constantly updated or if there is a wide variety of inputs and a large diverse audience for the outputs, perhaps a more general programing language would better suit you. However, if it's simply a one-off analysis on a single database I'm positive R would be more than competent to handle it. Even though I'm not familiar with the language, I've seen some of the inputs and outputs for R-derived analytics and it seems to be extremely powerful. 
Actually Python is getting a full ggplot port, and bokeh and bqplot and seaborn are ahead in some ways. Python has the edge in R for bayesian stats, with a full probablistic programming language in Pymc3. It is much more expressive and concise than stan, and has more samplers. Python can also handle out of core data sets and plotting with blaze, dask and bokeh. R cannot. In fact, I would suggest blaze as a table abstraction frontend for the mysql database, and bokeh for plotting. http://blaze.pydata.org/ Also numba can compile python to c like speeds. For machine learning, you can stream data to sgd in scikit learn. I would ask the very helpful blaze google group for help in setting this all up: https://groups.google.com/a/continuum.io/forum/#!forum/blaze-dev 
As a physics and computer science student, the physics student in me likes how simple the syntax is, how forgiving the data structures are (in that they aren't C++ arrays/vectors/etc), and how big the community is for support. The computer science student in me loves the variety of libraries available, the versatility of it, and I love it just because I can prototype programs so much quicker in Python than in something like C++. If they're scared of learning to program, suggest something like Codeacademy to get them started, it's really beginner friendly. Then the documentations for things like scipy, numpy, matplotlib are much less scary. In addition, stack overflow. Good lord, stack overflow helped me so much. A final thing I have to suggest is that if they plan on going into research positions, they should probably know Python/R/something like that for data representation, and Python's matplotlib produces production quality graphs, numpy provides good line fittings, and I think it's Pylab that provides support for graph legends and such. Hope this helps!
My bad, the `d3 v2` was a remnant of a copy paste that outstayed its welcome. I'd removed it but didn't push some commits, they are in now. And, yes sir; coming from python has spoiled me.
Oh.
Python is great for customized analyses. General programming is nicer in Python. R is great for off-the-shell analyses, where you don't need to tweak or process data significantly. Plotting is better with R, via ggplot2. Plotting in Python is not as nice. 80% of a scikit-learn tutorial is spent on setting up the figures in matplotlib and plot them. These scikit learn folks need to do something about this. It's really a shame otherwise. 
That's the only part that doesn't work, frankly. Everything else is much better than the IDE I was previously using. Definitely a great candidate for PStudio.
Wow thats cool. 
Yeah maybe in a bit
Others are covering the high tech stuff. Never underestimate the power of a notebook(the ones with actual paper) and a pen/pencil to sketch out ideas and manually run through how a function should behave vs how it actually behaves. Sure, there are tools to step through code line by line, but sometimes doing it on paper can make it easier to visualize and understand. A comfortable chair, and a desk/table with enough space to lay reference material out on can help a lot too. Back into the high tech suggestions of others, if you've got a second computer(preferably laptop) or a tablet, these can be great for viewing reference material on while you code on your primary system. Not worth splurging on for a beginner(unless you are rich), but if you've already got one, use it, it would have to be pretty ancient to be a real problem for just reading API documentation and tutorials and whatnot. A coffeepot. 
Really great service! I was wondering if you do thumbnails of documents and other file types? Or do you limit yourself to only images?
AWS SNS does it via Boto.
OK, that's great news in that case. I'm a while off getting to that stage with my current project, but it's good to know that Nuitka might be the solution.
Survey says.... NO! Just more marketing assholes pretending they're doing us a favor by offering their Al ~~Stevens~~ Williams level "Learn Bags of Shit" in 24 hours. I'll hold my breath waiting for Martin Fowler to pop in next. Edit: Sorry Al Stevens, I did not mean you! I brain farted and mixed up my Dr. Dobbs authors. Again, my apologies.
Nice try VW engineering team.
It is pretty typical of Microsoft to half-bake great ideas, then drop it before it has the chance to gain traction. Look at XNA.
Howbout this pillow? http://www.redbubble.com/people/mhashemi/works/15568934-python-logo-tile-print?country_code=US&amp;p=throw-pillow&amp;size=small&amp;type=cover-only&amp;utm_campaign=shopping&amp;utm_medium=google_products&amp;utm_source=google&amp;gclid=CKyj8MnXw8gCFYM6aQodloEMhg
&gt; ;&lt; Well, Lets build Something. .!
Too much PHP can damage your brain to that point. 
&gt; Makes ELF executables on linux named whatever.exe, but that's ok Is there any reason you couldn't just rename it?
My dog has a pair of [these](http://www.costco.co.uk/medias/sys_master/root/hb0/heb/8849583964190.jpg?buildNumber=RELEASE-33-SVN-2004).
'enterprise' means the hundreds of huge, boring mega corporations that each employ tens of thousands of people - most of whom perform a limited range of 'operations'. Amazon and Google are quite far from the normal American company. 
[removed]
Color is handled in most terminals with [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code). I don't know the exact details, but it should work on Windows, OS X, and Linux. 
Great, thanks for your help. Kudos for the links. I'm starting to like this website.
R is just so much more convenient for most data analysis I can't imagine using python. I love Python, but R is really great. 
I thought nuitka still needed access to Python?
Wait for it... We haven't unleash our full troll potential yet.
Without the code, there is little we can do. We also need the error displayed once your program crashed.
It will give you 7 files, but you can package them with a installer.
Well, type hints are just regular python annotation + a regular module, so my guess is it should work since... there is nothing to add.
Maybe it fell on "break"? haha seriously paste the code or the error somewhere ;)
http://www.thingiverse.com/thing:232064 Have it 3d printed by one of the online printing shops.
Yeah, I've got both 2.7 and 3.4.
Try path.py. It's libe pathlib, but much better. E.G : the Path object inherit from str, so that you can use it anywhere you use to pass a str, without having to cast it.
Is there any documentation on how this works, specifically how it handles the dynamic language features of python?
[removed]
It uses libpython (cpython runtime). Imagine it as rewriting python code into c++ code that uses python api. So essentially if you make a class it still is real true 100% python object under the hood.
If you ever find out, you should come back and share. Up until today I never realized that I needed this in my life, but I'd love to have one. Of course, there's always [this option](http://www.bigappleherp.com/ANIMALS-LIVE-REPTILES/Pythons).
If you download the solution from Github IronRuby is part of the package. There's also IronScheme and a couple of others I believe.
Thank you for the information.
It wasn't really .NET bashing on my part - I've mostly coded in C# for the past decade and it's a great language. I was just posing a question and think it'd be good to see some life in IronPython.
Well you have the blaze and SQL alchemy packages which are really very useful for interacting with such databases in python... I have no idea how you would go about that in R.
How does py2exe and pyinstaller achieve a single .exe with no dependencies, and why doesn't nuitka support it? (I know they are not the same thing excactly, but they can serve the same purpose; distributing a Python application)
Please use /r/learnpython, and show your work so far.
okay, i'll do that now :D :D
If you read for example IEC61508 and others you'll see requirements for tool chain qualification and other language based constraints such as strong typing. The compilers we use for safety critical software have been qualified and there exists qualification kits. If you can find a qualified complier for python then that is a start. To really answer your question you wont find any one thing to meet compliance with the standards you listed. If you want tools to help look at ldra.com, etc. If your programmers have to write in python because they can't manage c or ada then get new programmers. Such languages have long histories of being used in critical environments. 
You'll may have problems with C++ in critical applications unless you adopt a subset of the language, it's also unlikely you'll find toolchains that support v14 at this stage.
Same here. 
This is like a python/showerthoughts post! I would say that the yellow snake is python 3 because its the underdog, whereas the blue snake (Python 2) is on top but looking backwards, opposed to python 3 which is forward looking. 
Good reasons! Also, the blue snake is shaped kinda like the number "2".
If they work at Facebook yes
I'm guessing OP is looking for something that can be compiled to standards conforming code similar to simulink in MATLAB
That is almost the PyPy logo if the smaller snake starts eating the bigger one at the same time
They are harder to reverse but, I can see what cpu can see. 
Hi thx for you tool, I used it 2 days ago and it worked well! But not it says "error" and don't download anymore. I downloaded zip version and all I have is some .py files that I cannot open! Does your app still work or??
[removed]
Good point, how did I miss that.
Nope, if you use `nuitka prog.py --standalone` you get a totally portable program, which will run anywhere with the same OS system calls.
&gt;Nuitka files could be bundled into a self-extracting thing, it just doesn't do this yet. The reason I asked was that the two I mentioned spit out a functioning standalone .exe file (Py2exe does at least, I think PyInstaller does too), not a self-extracting bundle. A ready to go exe with no extracting is desirable in a lot of contexts, in my opinion at least.
&gt; I want to call below import from my own app's flask module. Why? Just import them from flask.ext.whatever. There's absolutely no advantage to importing from your own shadowed module.
[removed]
It is interesting that they expect a programmer to be a good photo/image editor. That seems like contradictory talents in my mind. 
digg's back-end was in python long before it was bought by Betaworks
&gt;not a self-extracting bundle. That's exactly what Py2exe is. It just extracts all of those files to a temp folder and runs from there. 
Can I use this on OSX to make `.app` archives?
&gt; number one really!?
/r/learnpython
Thanks for the clarifications. Saw quite a few mention of optimizations on the wiki so was wondering if it messed up the mapping between the generated code and the original one.
Number one syntax issue, I should say. They just look a lot like dict literals, which see a lot more use. At least, in my experience.
This is old school web development. From the 90s through the early 00s, it was expected that you could do every part of the process, from designing the visuals, often writing some of the copy, writing the code, designing the database, setting up the servers to run it, purchasing the domains, and then doing SEO. This was basically what I did for the first 10 years of my career. I actually started out purely on the design and content end and now I'm *mostly* on the other side, but I can still do all the steps; I'm just much, much better at coding and tech work than I am graphics and design.
It would be the opposite of `__future__`, and would remove access to all functions that are deprecated, or that are scheduled to be deprecated in an upcoming release. Because we just don't use those functions nowadays.
Digg still exists? 
&gt; Is it bad to post a link to a post on your own site? I haven't submitted too many so not sure what the protocol is, I didn't think there was anything wrong with this approach. You are right. Maybe SEO?
yeah. and their rss reader is almost as good as google reader was, and their content curation is on par or better than other sites I visit daily for general interest types of things. 
I see your point. I'll change it to a better example. EDIT: Done.
That's completely unnecessary and is likely to cause headstrain down the track. As the Zen of Python says, namespaces are one honking great idea. You could have your custom flask module as yashlodha_flask and import it from there?
Huh. I'll have to check them out. I was honestly under the impression that they went under. I wasn't really in to Internet culture when ~~it~~ Digg was a "thing", if you know what I mean. 
[Nope, but close](https://www.reddit.com/r/engineering/comments/3mppqp/i_work_in_diesel_emissions_not_at_vw_some/).
&gt; Is Python the right answer here? Matlab is and until we can meet these qualifications we can't move to Python as an organization. - [DO Qualification Kit for for DO-178 and DO-278](http://www.mathworks.com/products/do-178/) - [IEC Certification Kit for ISO 26262 and IEC 61508 ](http://www.mathworks.com/products/iec-61508/) - [AUTOSAR Support from Embedded Coder](http://www.mathworks.com/hardware-support/autosar.html) &gt; If it was me I'd go with C++14 and nothing less. We actually used a [Model Based development cycle.](http://web.stanford.edu/class/archive/ee/ee392m/ee392m.1034/Lecture3_Engineering.pdf). None of our engineers ever use C++. &gt; More so do that with LLVM/CLang as development platform I would love to move away from closed source compilers (Who knows what we pay for those) but I can't find any LLVM/Clang support.
&gt; If you can find a qualified complier for python then that is a start. Do you know if any companies offer paid support? &gt; because they can't manage c or ada then get new programmers. I don't know a single person in our organization that admits to knowing ada and a large majority of our developers don't know C and the ones that do rarely use it (if ever). &gt; To really answer your question you wont find any one thing to meet compliance with the standards you listed. [MathWorks DO Qualification Kit for for DO-178 and DO-278](http://www.mathworks.com/products/do-178/), [MathWorks IEC Certification Kit for ISO 26262 and IEC 61508 ](http://www.mathworks.com/products/iec-61508/), [MathWorks AUTOSAR Support from Embedded Coder](http://www.mathworks.com/hardware-support/autosar.html). (You forced me to name the elephant in the room).
Winner winner chicken dinner.
Thursday. 
The similarity is appropriate since the collection of dict keys is like a set. Though sets can include stuff that can't be dict keys I guess since dict keys have to be immutable/hashable. Edit: above statement is wrong, was corrected below...
I don't mind, but I see no reason not to keep the conversation public so others could benefit from it. If you have any reason to prefer this conversation be private, feel free to PM.
I was interested until the fucking subscribe came up.
Fair enough .. I thought it would be better to keep noob questions out of the public eye ;) Anyways, Please let me know if i'm wrong in any of my assumptions 1) The Prosody XMPP server will run alongside the django server with a shared postgres Database? 2) I should probably use Kaiwa as an app in my django project. Incidentally - I have used and really liked Lets-Chat(https://github.com/sdelements/lets-chat) as a chat client but they seem to be using MongoDb - Lets-Chat is again a chat client which requires a server like prosody? 3) Is it possible to automatically create XMPP accounts for users at the time of registration?
In other surprising news: Digg still exists. 
What are you trying to specialize exactly? 
You're probably correct. I misspoke about the actual split of the team - wasn't what I was trying to convey either, not sure why I didn't change that
To add some dates, digg v3 was 2006 and the Betaworks take over was mid 2012. Digg's now written in python is kinda 9 year old news.
The only thing that's made me curiously look into R was statistical tolerance limits which R handles in the tolerance package. They are different from confidence and prediction limits and are often used in manufacturing where you have made 50 widgets and you're trying to approximate the population and determine if you ever expect some proportion of the population to exceed a limit with some confidence. R's tolerance package has dozens of methods for doing tolerance limits on like a dozen different types of analysis, which is impressive. However I LOVE python for everything else, so its like asking myself if I should speak Italian instead of English because I like the word for bullfrog or something.
I actually want this
Overplayed your hand : lied about your programming experience? Hope you didn't do that. Anyway, there is a great reference on the sidebar of this sub which is algorithms and data structures. The intro chapters do a good job of explaining classes and inheritance. 
It went under as a community.
it was interesting news to me though. So it probably would have been best to put a TIL: on the headline. I'll get it right next time maybe. 
Dammit, you're right. v4 was the big rewrite. This shows how carefully I've kept up with digg.
&gt;python backend and php frontend Er...could you elaborate what you mean by that?
&gt; Missing is construction from a tuple, which is between the two in terms of speed (list construction is "slow"). AFAIK the bytecode compiler optimizes list literals to tuple literals anyway.
Internet culture was a thing at some point? What do you mean by that.
Python 3 &amp; Pyautogui
If you look at the dis output in his post your can see it actually calls BUILD LIST.
Now that I didn't know, since I'm still using 3.4. Very neat.
That's a good talk, thanks for sharing.
According to the talk /u/flutefreak7 linked, I was indeed right that py2exe does not extract to a temporary folder. You made me doubt my self though. It does it by patching the way the Python interpreter loads DLL files. https://youtu.be/wsczq6j3_bA?t=1018
Same here. I've tried installing MinGW as well.
There are a lot of tutorials online, but honestly I just suggest playing with it. Learn what most of the tools on the left do, load a picture, learn how to crop, resize, etc. Also "Save for Web" is super useful. After that, it's all pixelated gravy.
As someone who is looking for Python work in NYC... I'm not sure if I'm hipster enough to work at Digg
Yeah. Stuff got bloated real quick.
Sure, that'll be $50 for the initial consultation (me reading this post), and $3000 to have it done by Monday. I take credit card and bank transfer. /s
I usually use SQL alchemy. But for R, maybe [dplyr](https://github.com/hadley/dplyr).
I got the same error, OSX + Python 2.7.9
They went under, they sold for pennies and the new management has been rebuilding for a while now. I agree with the guy above, their RSS reader is probably the best out there for browser-based readers. 
and now i'm off to watch an old episode of diggnation
Noob questions are great, and later when (...if, really) some goes looking for this information, they'll find it. I'm of the opinion that as long as a question is asked in good faith, it's not stupid or noobish.
Fair point.
This just feels extremely cheap to me and makes me a little uncomfortable - You've taken a file from [this project](https://github.com/tomchristie/django-rest-framework), added a `setup.py` and gone "Hey, guys! Look at this awesome project! By the way, status.py is from another project." I agree that the file can be useful in certain circumstances, but I fail to see why one wouldn't just import it from `django-rest-framework`, or, as /u/kmike84 has said, use `httplib` or `http.client`.
was that around the time designers would give you a full page image and ask that you just cut it into smaller pieces and load them in the right place? Uh, can we just use a font that everyone has on their system instead of loading a picture for fucking copy?
You are definitely hipster enough
Better than inoreader?
&gt;As to why 0 and 0.0 return the same value, I’m not 100% certain of this (as I haven’t looked at the CPython dictionary implementation lately), but I believe the collision-avoidance allows two keys to get the same value from the dictionary if they have the same hash and compare equal (and since hash(0) == hash(0.0) and 0 == 0.0 you get the result in the example). I believe it was decided that all int-like number types should hash to themselves to allow for this sort of thing, since they can be intermixed in most other cases too. I seem to remember hearing that in a PyCon talk.
TIL import dis Good stuff.
&gt;No voting and no comments Except for this AMA thing they're trying to push...
Pages don't take one second to be generated. I would have never noticed it is Python!
Naah, Inoreader is much more feature-rich, digg one doesn't even has card view.
What happens if you run this? import sys sys.stdout.fileno() 
Do you use the internet?
Checkout the python json library, though, for that. https://docs.python.org/2/library/json.html You can do things like json.dumps(object) to convert from python to string, and then json.loads(string) to convert from string back to python object. Couple this with urllib2 or requests and that's all you really need, though maybe there are some things that simplify the process even further. I think json.dumps doesn't work with an arbitrary object (unless you extend a class with it and write your own decoder), but it works great on dictionaries.
Yep. 
1. For various languages such as C there are qualified compliers and support packages (paid). We use Texas Instruments parts here and there is a TI Qual Kit. As for python there is nothing. 2. If your designing safety critical applications to run on embedded devices (such as a safety CPU) then you'll need compilers supported by the device, and hence limited to the C language. You can also do a lot of it in Matlab as there are certified blocks to use. If your doing safety critical work for use on a PC (say for industrial control) and you use an operating system, the OS needs to be safety critical. There are lots of them QNX, GreenHills, etc, but you won't run python on it. If you are using a PC for generating safety related configuration data then there are lots of additional requirements to meet you can find some good explanations of this in EN13849 standard. 3. Just having a Mathworks qualification kit IS NOT going to get your software qualified, it will help but there is no magic pill. Its not that easy!. Consider IEC61508 part 1 and you'll see the requirements for management, planning, configuration control and training. This is the first part of your "functional safety management plan". If you have a guy that can write python, and you find a python complier there is still no way an assessor will sign off unless that person is suitably qualified to write the code and your company has the management capabilities for that project where that code will end up. I run a company designing safety critical systems. For our embedded firmware we use the C language. We have a FSM plan that covers our team members, our code and revision control standards our QA, Etc. We then have a project requirements specs, models, etc. We design our code traceable to the specifications, following 61508 part 3. You prove that your software is safe for use in the application by making a 'safety case' to a thrid party assessor. So in example lets say that I am making a one line function in C which is my entire product. The function is as below and I want to prove to an assessor that it is safe. u32 Add(u32A, u32B){ return u32A * u32B; } To make my case that this firmware is safe, I need to prove (not a complete list): SRS (See table A.1) Validation Plan Software Design (This is huge!) See Table A.2, A.3, A.4 Software Module Testing Integration Testing (HW/SW) A.5 System Verification Testing A.7, A.9 Modifications A.8 Safety Assessment Moreover, software always has a probably of 1.0 for failure, therefore you can only do things to reduce the risks of that failure through design and testing. So just to meet the module testing for this one simple function I would generate test cases that: 1. Input all boundary conditions and check the output. Note that this will automatically show failures because 0xFFFFFFFF + 0x00000001 is an overflow in this function. (This will be tens of test cases) 2. Static analysis 3. Function call testing 4. Branch testing 5. MC/DC testing 6. Performance / Stress testing 7. Memory (stack) analysis 8. SC/HAZOP An that't for one function. Common projects here have 1K functions, we have lots of automated tools. Hope this helps a bit, but again to stress you won't find one solution you can just buy off-the-shelf, write some code and get it certified tomorrow. 
How do you use Spyder at work? Mainly as an exploratory tool or a basic IDE?
Oh wow, maybe the Digg-heads will go back now.
I know this is resurrecting an old thread, but for completeness, what license are you publishing this under? (e.g., Apache, Public Domain, something else)
They are using urlllib however you can do the same with requests.
 digg+rss ... that would be a beautiful comeback.
I have Python 2.7.3 installed on Windows, the Default Python Command is set correctly to `C:\Python27\python.exe` but I have the same behavior /u/jeanfrancis describes. If I open the Developer Tools, there's the following error on the console: `Uncaught TypeError: Arguments to path.join must be strings`. Running Session -&gt; Restart Session adds the following error: `Uncaught TypeError: Cannot read property 'execute' of undefined`.
Duh, it is in your question. Sorry. Is there a particular function that doesn't work, or nothing works?
It boils down to the fact that `set` and `dict` can be overloaded but `{}` can't, so the interpreter needs to spend extra time tracking down the definition of those functions. It's also one of the reasons that compiled languages are so much faster.
And so the bytecode has to be conservative in terms of optimizations, while the meaning of {a, b, c} is fixed and thus reducible, right ?
Yep. It needs to account for the possibility that some dumbass in an outer scope said `set = list`.
Maybe your idea of "easily" is the problem. Any source (yelp, google maps) is fine, and your bot may need to click through to a second page for each item. Figuring out how to scrape is your challenge. Edit: /r/learnpython when you have an actual python question to ask.
I don't really agree. But maybe my eyes are just specially attuned to noticing colons, or something.
[removed]
Really, a big part of programming is just rolling up your sleves and doing it. You can do anything with programming, but you actually have to *do* it. Most projects have a lot of details and are a lot of work, and that isn't necessarily a sign that you are approaching it wrong. (Sometimes it is, but only once you get used to how much work often goes into things). Keep it up! It's good stuff.
yeah, for me, I was really butt hurt when google reader was eol'd , and then digg reader appeared and I was less but hurt. And after using it for a year or two I am zero percent butt hurt. but maybe inoreader is better, i just dont care. And then I noticed digg's front page had some decent stuff that wasn't in my feeds. so now I'm ok with digg the way it is. I hope it never gets like reddit.
This error: AttributeError: 'module' object has no attribute 'fileno'
hi! we have an api that powers the site/app but we haven't fully exposed it yet (other than to IFTTT). we've been meaning to but haven't finished up the last mile like the site to create api tokens, etc... what did you have in mind re: the API?
So digg is no longer Kevin Rose and his friends personal bulletin board frontpage? 
Okay, sounds good. We all have to know our place.
Guideline for hourly work: 1. Figure out the salary you'd want to have. 2. Divide by 40 and 52 to get to an hourly rate based on a 40-hour work week. 3. Double the number from (2). For example, if you want a salary of $75,000: 75000 / 52 / 40 = 36.05, multiply by 2 to get $72.11/hour. (the reason why you double is in case you end up as a contractor rather than an actual employee; in that case you're on the hook for a bunch of stuff the employer would normally pick up, and so you bump the rate up to accommodate that)
Depends heavily on where you live and what kind of code you'll be writing. In Boston, I'd expect $70k at least for something like back end web development. For something more complex, I'd expect at least $85k. In flyover country, probably 20-30% less.
It's interesting to know how to do this. But practically it's just easier to use Nose, or to use something like Hypothesis which is built for doing this sort of testing over a range of inputs.
I know this sounds cruel but it sounds like it would pay to hire an expert that has done this before. By the way I'm not that guy so don't even ask. However you pretty much will have to expect that more a compiler technology will have to be implemented, Ada, C &amp; C++ are common here but there are other choices. Frankly I'm not a big fan of C here but that is me never liking C, however your developers will have to learn one or more of these. The question that comes to mind is this is this for an on vehicle control systems or a lab testing system? If it is an on the road embedded system you will be stuck with the tools you can find for the processors built into whatever SoC you use. This can become a big bugga boo when a chip might have 5 or more programable units all with differing programming needs.
I was also surprised by the number of asserts. I was always taught that they should be used mostly for debugging purposes and final programs should have better management of those conditions.
$20 an hour could be seen by some as you saying you aren't qualified. 
what's a "flyover country" ?
In the United States, it's considered the land-locked states in the middle of the country - essentially the states that you'd fly over going from coast-to-coast.
Same name. Totally different website. They gave up the user-submitted Reddit-model to focus on curated content instead.
The list of banned words is cringe worthy.
I would be interested to know if anyone has an opinion on building the chat application using asyncio module and websockets protocol. I have seen any stories where people used it at scale, I can only see some simple examples. Going into the details on the implementation, I get a feeling that if properly implemented, you can compete with node.js or equivalent in terms of no. of connected clients. - https://pypi.python.org/pypi/websockets - https://github.com/crossbario/autobahn-python - https://github.com/ajdavis/asyncio-chat-example
mypy with python 3.4
Okay, in my trials I only used long integers as they were fairly easy to understand. For the first trial I'd advice you to do the same. And for analysis, use this to print from python: s = your_received_string print(' '.join(hex(ord(x)) for x in s)) Using that i get 4 ASCII chars (displayed in their hex code) that represent a 32 bit long integer in exactly the way you would suspect. Could you just send a couple of integers of your choosing and display it in the way I described above, that would greatly help with analysis :)
Does it suffer from the [Scunthorpe Problem](https://en.m.wikipedia.org/wiki/Scunthorpe_problem)? And if it doesn't suffer from the Scunthorpe problem, will it block user names such as "bigcock95"?
I think there's a bug in the code. The core of the regular expression is [a-zA-Z0-9_.-].+ You need to remove the last dot, as this will definitely match, for example, `a@!/`
I usually use [prospector](http://prospector.readthedocs.org/en/master/) which wraps a bunch of other tools and has some sensible defaults.
This is the closest thing to what I was thinking. Thank you for your hard work on this.
I usually use flake8 first, followed by pylint.
Neither of them. [Frosted](https://github.com/timothycrosley/frosted). Specifically with Syntastic in Vim. I tried Pep8 for a long time, but it got annoying.
+1 for PyCharm. It's an underused godsend
Welp, roll it boys. Time to reverse exodus. 
[Parametrizing fixtures and test functions](https://pytest.org/latest/parametrize.html#parametrize-basics). Or even better, [Hypothesis](https://hypothesis.readthedocs.org/en/latest/) (with [pytest integration](https://hypothesis.readthedocs.org/en/latest/changes.html?highlight=pytest#id6))
:s !python 
That's not a problem of compiled languages, it's a problem of CPython being a straight interpreter. In pypy, there's no performance difference: &gt; pypy -mtimeit 'set([1, 2, 3])' 1000000000 loops, best of 3: 0.00104 usec per loop &gt; pypy -mtimeit '{1, 2, 3}' 1000000000 loops, best of 3: 0.00105 usec per loop 
You can even use dis.dis as a decorator if you just want to see the bytecode for a specific snippet but don't care for the function itself: &gt;&gt;&gt; @dis.dis ... def fn(): ... print(*(i for i in range(5))) ... print(*[i for i in range(5)]) ... print(*{i for i in range(5)}) ... 3 0 LOAD_GLOBAL 0 (print) 3 LOAD_CONST 1 (&lt;code object &lt;genexpr&gt; at 0x10e4bec90, file "&lt;stdin&gt;", line 3&gt;) 6 LOAD_CONST 2 ('fn.&lt;locals&gt;.&lt;genexpr&gt;') 9 MAKE_FUNCTION 0 12 LOAD_GLOBAL 1 (range) 15 LOAD_CONST 3 (5) 18 CALL_FUNCTION 1 (1 positional, 0 keyword pair) 21 GET_ITER 22 CALL_FUNCTION 1 (1 positional, 0 keyword pair) 25 CALL_FUNCTION_VAR 0 (0 positional, 0 keyword pair) 28 POP_TOP 4 29 LOAD_GLOBAL 0 (print) 32 LOAD_CONST 4 (&lt;code object &lt;listcomp&gt; at 0x10e5b7a50, file "&lt;stdin&gt;", line 4&gt;) 35 LOAD_CONST 5 ('fn.&lt;locals&gt;.&lt;listcomp&gt;') 38 MAKE_FUNCTION 0 41 LOAD_GLOBAL 1 (range) 44 LOAD_CONST 3 (5) 47 CALL_FUNCTION 1 (1 positional, 0 keyword pair) 50 GET_ITER 51 CALL_FUNCTION 1 (1 positional, 0 keyword pair) 54 CALL_FUNCTION_VAR 0 (0 positional, 0 keyword pair) 57 POP_TOP 5 58 LOAD_GLOBAL 0 (print) 61 LOAD_CONST 6 (&lt;code object &lt;setcomp&gt; at 0x10e604540, file "&lt;stdin&gt;", line 5&gt;) 64 LOAD_CONST 7 ('fn.&lt;locals&gt;.&lt;setcomp&gt;') 67 MAKE_FUNCTION 0 70 LOAD_GLOBAL 1 (range) 73 LOAD_CONST 3 (5) 76 CALL_FUNCTION 1 (1 positional, 0 keyword pair) 79 GET_ITER 80 CALL_FUNCTION 1 (1 positional, 0 keyword pair) 83 CALL_FUNCTION_VAR 0 (0 positional, 0 keyword pair) 86 POP_TOP 87 LOAD_CONST 0 (None) 90 RETURN_VALUE 
I got one of these at EuroPython 2015, it's awesome.
What database are you using ?
Thanks a lot jotomicrom. Great find! I've added a fix for the same. https://github.com/theskumar/python-usernames/commit/c055ba93af8fc7e616f0d17958d709c12e53846e
Pylint, because it catches real errors and has also improved my design style a lot. Plus whatever Spyder has built in, because I can't work out how to disable it - I already know the line I'm typing has trailing whitespace, I'm not done!
To expansive for part time development. Doesn't even support opensource packaging.
you probably do `:sort`. `:! sort` calls a shell function named sort which will hang waiting for input. As for `:s !python`, it uses ! as an expression delimiter, forgets the space and looks for things named python, and deleting them. It is equivalent to `:s:python` as far as I can tell.
annnnd I should go back to my books.
there is allwas skytools https://wiki.postgresql.org/wiki/SkyTools containing a highly optimized queue for PostgreSQL. If you do not like the dependency, just roll your own... we are talking about ~100 lines of code. 
Just make sure you spell parametrize the way they do. I think there's an issue filed for supporting `parameterize` as well.
That is definitely an annoyance, even more so because due to all the dynamic definition shenanigans autocompletion doesn't work (pycharm's at least) and a misspelling will "work" and create a misspelt mark, with no effect at runtime.
Agreed on that. Py.test is the bee's knees but it's far from perfect. 
Lol this is worse than family asking for me to clean their computer for free
Yes, and it highlights in the code while you are coding to you see lint as soon as you create it, very convenient.
Basically python is taking some input and outputting that to a file (a .csv). It's then suppose to call powershell to run that .csv. But I've changed the code and now it's opening powershell: p = subprocess.Popen(["C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\powershell.exe", "C:\\site\\py\\noInitial.ps1"]) p.communicate()
SublimeText + Anaconda
My [nose-parameterized](https://github.com/wolever/nose-parameterized) package — which supports unittest, nose, and py.test — does this in a slightly prettier (albeit also more magical) way, and injects the test functions into the namespace of the class they are being defined on without needing to decorate the class: class TestMathUnitTest(unittest.TestCase): @parameterized.expand([ ("negative", -1.5, -2.0), ("integer", 1, 1.0), ("large fraction", 1.6, 1), ]) def test_floor(self, name, input, expected): self.assertEqual(math.floor(input), expected) 
This is a position based in Tennessee.
I wish I had work for but I'm a noob. Why not shift focus and build something people need. Look to the people you already know and ask them what kind of tools they wish existed and build that for them. You can do that for free too. You'll start to see patterns of what people ask for. Take that, build a product, and charge for it. If you can work in a subscription service that automatically charges the customer, even better. Once you have a few paying customers you can start thinking about scaling up and seeking investment to hire people for your business. It's a lot more work than just getting a job, but way more rewarding- emotionally and financially in the end when you succeed. 
I use pylint as it can be used with Spyder, Sypder crashes a bit for me I think because I am running it from source (I could not install it normally from the bins) but I prefer using it as it has an object inspector and I love the pylint.
They have changed the license recently and included a free version of Pycharm, no money needed unless you want better support for specific frameworks (django, pyramid, flask, web2py, etc)
His base price is free to get in the door but he is hoping to receive a position once he has proven himself. So, his trial period is free.
for private projects and for testing locally, I use [prospector](https://pypi.python.org/pypi/prospector). For public and open source projects, I use [landscape.io](https://landscape.io/), (from the makers of prospector) which just runs from a git hook.
I have no clue what you're wanting to do at this point. I don't know of magic code "generators" however I hope you figure out whatever you're attempting to do..........
So it sounds like u/riksi gave him a legit way to make money and feed his son and he dismissed it because it's not easy for him. If he was really as desperate as his post suggests he'd be looking into any job, mcdonalds, grocery store, geek squad, whatever. To suggest he's better than a job is just straight up arrogant. 
Exactly, it's not enough to just support Python, i am not going to change text editor every time i feel like writing Cython, TypeScript or SCSS. Python alone doesn't do a lot, which is why the free version isn't really better then tools like Atom. PyCharm is an amazing tool if the price is worth it, i used the free version long enough to know that it is that.
US census
Edit: OP has posted the following as evidence to back up their claims: http://imgur.com/z6iibfr http://community.macmillan.org.uk/cancer_types/testicular-cancer/f/163/t/65858 OP also appears in this story (a story of his banking debt troubles, which occurs after his cancer, but there's no mention of cancer here by this journalist, I wonder why not?): http://www.dailymail.co.uk/news/article-3166511/Barclays-lock-vulnerable-man-two-bank-accounts-inadvertently-putting-200-000-debt-say-t-Monday.html ...and OP also appears in this story: https://www.reddit.com/r/unitedkingdom/comments/3dtx6y/did_anyone_else_see_this_the_bpas_hacker_search/ I believe the reason for the fake account may not necessarily be based so much in that this is entirely made up, but rather based on the BPAS hacking conviction. This would also explain the trouble getting hired through normal means. original: Having spent a large chunk of my life on the internet, I have learned some pretty major things. No one likes to say these things, but I will go ahead and do it: 1. 99% of those who claim they are female are lying. 2. 99% of those who claim they have/had cancer (or other major illnesses...but cancer is the main choice) online, are lying. Those are the two most common things I've seen in time, but your post goes even further, claiming you used to work in charity. It amazes me just how common it is for people to lie about those two major things. It is a shame people try to do ploys like this, seeking all sorts of things like money, charity, trust, and sometimes just plain sympathy. People like your story really do exist, but a post like this simply cannot be trusted. You cannot be trusted right now. Show us proof of the charitable work you've done, if you believe that to be an important part of your story. What was the charity? Name the campaign? What's your name? If you cannot divulge that information, you have no basis to make claims here. You want work? Show us proof of the work you know, show a portfolio. That's how you get a job. Finally, if you are truly talented, and good to work for free, look into the "bootcamps" and such that offer you employable skills. These can be great places to network, and land an actual career. If you are skilled enough, they will let you do this for free via a scholarship. 
I agree, as a short term solution to receive any income is better than none.
/r/datasets seems to be helpful for this.
I want to be optimistic but I tend to agree with you... his account was also created today and this is his only post...
I have. All my scripts are now python scripts. If I don't need it to be used anywhere, I use docopt or click for command line parsing. `sh` works well for emulating the shell. If I do need global deployment, then I make it compatible with 2 and 3, use argparse, and subprocess. Obviously, there are functions in os and sys etc that are also useful. It is possible to write the script in such a way that you can put it in pipes, with errors going to stderr and input from stdin and output from stdout.
You will also need to set up paypal etc in order to get paid. It takes a few weeks in Japan, but it might be shorter in the UK.
Has Rope's autocompletion been screwed up for you? I had to turn it off because it'd slow vim down to a crawl.
PyCharm has syntax highlighting and formatting for SCSS and TypeScript. What else do you feel is missing when you switch to those?
It runs decent on a three year old low end laptop with 4gb of RAM and i3 processor with 5400 rpm drive. 
Oh, sorry, I must've been unclear. I'm not looking to replace bash scripting with Python scripting, I already do that. What I'm looking to do is replace the bash shell with a Python-based shell, such that I could use a terminal with Python syntax instead of Bash syntax. Obviously I'd expect commands like cd and ls to work the same, but if I wanted to on-the-fly script against something like the ls result, I could do so using Python.
Yeah, I can at least agree with you how sick, twisted, and pathetic it is that people lie about this sort of thing. It completely invalidates anyone, immediately, who actually is legit. A real shame indeed. What I suggest you do, should you be real, is to leave out your life story. Even if real, it actually only serves to discredit you. People will immediately not trust you. Instead, just offer your services as an intern, apply to some bootcamps, and build your portfolio, keeping your posts about interest in work about your skills, and the work you're interested in. As you get to know your employer, then you can slowly tell them your life story, if it seems appropriate. 
You could ask, but I wont. I believe you to be a liar still myself, unfortunately. You've lost nothing, this is a fake account. Get on your REAL reddit account, post your interest in being an intern, or asking for bootcamps and suggestions in your area for networking. Post your portfolio. You will find you have far better "votes." I know my vote will be different. 
Oh hell yes, I'm subscribing to this.
Me too, after finally figuring out how to tell it i'm building for python 3. 
[removed]
Qpython, it comes with a pip script
Huey has a SQLite back end and could easily be modified to work with postgres.
Only problem with PyCharm linting is that it doesn't run for you in CI. I think PyCharm + a linter in CI is a good combo.
Does that do linting as well? I thought is was only about type-checking. I've tried setting it up with virtualenvs but never quite figured out how to run it. It works... kind of, but complains a lot about missing packages. Strangely the ones it misses are usually stdlib packages :/ Usually I do something like this: $ virtualenv env $ ./env/bin/bin/pip install -e . $ ./env/bin/bin/pip install mypy-lang $ ./env/bin/bin mypy mypackagagename What am I missing?
You could prevent the concurrency problem by installing a trace and capturing all the `print`ing and `write`'ing function calls. Of course, that would make it even less suitable for production :)
It's not a linter itself, but http://pre-commit.com/ is a nice tool that comes with a bunch of built-in hooks that wrap static analysis tools, and it has a mode that lets you run it in CI. It'll do things like pointing out that your files contain AWS tokens or SSH private keys, or that you're about to commit a giant file, or that you're committing files that contain merge conflict strings that you might accidentally have marked as resolved. Available hooks: http://pre-commit.com/hooks.html
I believe I have been very sensitive to the possibility that you may not be lying, trying to illustrate to you exactly where and why your post is being downvoted. Most people are not bothering by giving you any time, and would say I am letting myself be trolled right now. It is my hopeful optimism that I have not wasted my time on yet another liar. I don't have a shaded view of people. It's a simple numbers game. Most people who claim to have ailments like you have, are liars. It's not a shaded view, it's a sad reality.
I can somewhat understand the desire to replace shell scripting with Python, even though you're losing a lot of power and convenience along the way. But the terminal? Even with something like `sh` package, all this syntactic clutter of parentheses, commas, apostrophes, etc. would add up very quickly, and quite significantly slow you down. Imagine typing `ls('directory', l=True)` instead of `ls -a directory` all day, not to mention the more involved commands. You'd also make more mistakes due to having to get all this additional syntax right w/o the usual editor/IDE features like syntax highlighting or linting.
flake8 (with https://github.com/alfredodeza/khuno.vim)
I was about to call you an a-hole but then after reading the thread, I'd have to agree with you on this one. You're troll handling here was the most respectful I've ever seen. The Jury's still out for me on the legitimacy of this post but I applaud you for digging further to ensure it's validity. 
&gt; except my code is like a trashier trailer park reality tv version... Sold!
You're very concerned about votes here. I told you what you needed to do to fix the problem. You're not doing it. Your post is skeptical, thus you got the votes you did. I came in when you were 60%. I simply prefer to explain why I downvote threads when I do it. Most of your downvoters have not explained to you, because they believe you're a troll and not worth their time. 
I explained my downvote. I explained why your evidence was not sufficient. I also explained what you could do to easily get proper votes. My only conclusion so far is that simply posting for internships and jobs is not actually what you seek.
Try [Here](http://collaborative-tools-project.blogspot.in/2012/05/getting-csv-data-into-google.html) &amp; [there](https://github.com/lpenz/google-spreadsheet-csv) &amp; [somewhere](https://www.mattcutts.com/blog/write-google-spreadsheet-from-python/) The above is enough to go along with your work or else build something new just with the above.
You have posted in a public place. I am part of the public. I gave my vote and opinion. That's what we do here. Not censor at the request of the OP. No, censoring my post at your request is not the best thing to do. I have been civil. I told you how to get votes. A new post in this subreddit is front page easily. I told you how you can get to the front page legit. It would take about 10 minutes of your time. I believe now I am certainly wasting time, as we're going in circles. Get on your "real" reddit account. Make the post I suggested, and you will get your votes and your impressions that you seek. It will be the opposite of what you have going on here. For some strange reason, you are not willing to do that, and it makes me believe your goals are not aligned with what you say. 
Check this https://docs.python.org/2/tutorial/floatingpoint.html
Edited your picture to the top of my post, as I said I would.
I edited the top of my original comment to include the image you shared, which I think is the correct course of action. Deleting the post means no one can see what actually occurred. That's stupid. Deleting and censorship is not the correct step to take in a situation like this. You are blaming me for your downvotes, and I don't know how else to tell you that it was not my post that brought them all, it was your post and crazy story. ... and to think that story was crazy. Not only that, you have ANOTHER crazy story about the 100k debt. But wait, there's more. You're also the alleged BPAS hacker. The community hates you for that too apparently: https://www.reddit.com/r/unitedkingdom/comments/3dtx6y/did_anyone_else_see_this_the_bpas_hacker_search/ I simply explained to you the reality of the situation, and you took the community's response and charged me with it. 
Good little walkthrough.
That is epic. edit: Some problems sourcing virtualenvs. ROS works fine though if I use `source-bash`.
Then you should have been honest, this is a new story about why you are not using your main account. Moments ago, you chastised me for calling you a liar, yet here we are realizing you were indeed lying. Stop the lying. Just be honest and you wont have to keep back tracking to fix messes. 
[removed]
As noted by /u/the_hoser, floating point has precision issues. If you'd like arbitrary precision, look at [SymPy], which supports arbitrary precision with [other mathematical features]. Here's the arbitrary precision example that wikipedia provides: &gt;&gt;&gt; from sympy import Rational, pprint &gt;&gt;&gt; &gt;&gt;&gt; e = Rational(2)**50 / Rational(10)**50 &gt;&gt;&gt; pprint(e) 1/88817841970012523233890533447265625 [SymPy]:https://en.wikipedia.org/wiki/SymPy [other mathematical features]:https://en.wikipedia.org/wiki/SymPy#Features
Easy to read is a human property that machines can't really judge. So instead, automated tools just enforce a set of fairly arbitrary rules about how you have to lay out your code, many of which don't benefit readability at all. If every project doing this carefully configured the tools to check the specific things they care about, it would be fine - I'd rather a machine told me two minutes after I make the PR than a human told me two days later. But that never seems to happen. People just run the tool with the default options, because we've got to use PEP 8, in every tiny detail. TL;DR: I use style guides as *guides*, not rules
I use pylint with Jenkins and Pycharm. Basically so the repo can be standardized across all developers
rope has been fine. The only time it has been a problem is when I go and do something stupid like create a quick hack of a python file in the root of my homedir, because then it goes and trawls through all subdirectories trying to find python libraries etc.
Just to answer the question before it's asked - this isn't the default because arbitrary precision math is very computationally expensive. IEEE-754 is actually computed directly in hardware by the floating point unit on the CPU.
Well it's linked to the text editor you use, so the one that works with Sublime is sublimelinter and thus pyflakes !
Are you in Bacon's Marketing Analytics class? If so, so am I! If not, that's pretty funny because I'm working on Hierarchical Bayesian Multinomial Logit models leveraging MCMC in R.
We actually use it as our primary IDE for development. Our team is primarily focused on data wrangling/cleansing, building data pipelines, and data visualization via Tableau. All of our python development is done in Spyder.
Looking at the gspread github page: https://github.com/burnash/gspread they mention converting their 'tests' to work with OAuth and their tests.py file uses oauth2client.client So it would appear that gspread can use OAuth however I haven't checked how much of the code has been updated to use that
No matter which editor you use, there is always `pdb` :)
This is entertaining. But on a serious note to anyone wanting to release a lib, please use the `logging` module and let us configure it with `logging.basicConfig`! As another side note, I hate how unpythonic (stylistically) the `logging` module is.
It's an issue with bigger teams IMO. It pisses a lot of people off when git diff picks up changes that aren't actual code changes.
You need to use the master from github. Its hopelessly outdated on pypi. And yes it lints because it has to parse the AST to type check. I have it running on CI so no type check = no merge. You do have to write some missing stubs but its really fast once youve done it once or twice.
Pylint + pep8 + [radon](https://github.com/rubik/radon) (for keeping track of code complexity). After disabling some odd Pylint warning (* and ** magic anyone?) I'm quite satisfied with this setup. *Disclaimer*: I wrote radon. Suggestions and pull requests encouraged!
http://www.kdnuggets.com/datasets/index.html
Didn't know about Frosted, thanks! I'm also using Syntastic, I'll give it a try!
In my case, Python 3.5
Ahah nice. Hilarious comments in the source! 
flake8 in vim
I haven't actually set it up on our CI yet, but it you can [run a pycharm inspection from the command line](https://www.jetbrains.com/pycharm/help/working-with-pycharm-features-from-command-line.html#d371757e110). [I'm running it now with the Project Default inspection. It produced 22 megabytes of output for the Spell Checker inspector. I may have to do some tuning.]
Don't be a dick ~Dick
Never! /s
PSA: I just updated the article to cover using setters as well.
Well, anyway, here's some feedback so far: - init of members outside of \_\_init__, this is bad and probably doesn't do what you think - tabs instead of spaces, PEP8 is your friend, and github renders tabs sometimes incorrectly so there's a good reason to use tabs too! - constants sometimes, magic numbers sometimes (window.py:895) - lists are used when tuples would be more appropriate (Pane.geometry, Pane.coords). Even better would be to have small classes so you don't need those big comments to explain what the members are - "coords" -&gt; "position"? - I understand you're British, but just spell it "color" in comments too :P consistency is important - Window.\_\_iter__: use yield - Use PyCharm and be sure to fix all warnings it throws at you. This just saves you a lot of trouble. - "except Exception, e" -&gt; "except Exception as e" - list comprehensions just to have side effects is not nice. You're creating a potentially big list of [None, None, None, ...] and then throwing it away. - "def coordinate(self, panes=[], index=0):" &lt;- never have a default argument "=[]", that doesn't do what you think. But worse than that. Those two arguments are never used! (PyCharm shows this clearly, again, PyCharm FTW) - Window.panes is a list now, but you're accessing it by name in at least two places. Maybe use OrderedDict? Or have a dict handy also - "except: pass" is super evil. Please reconsider! - Menu.process_input has checks that up arrow doesn't go past 0, but there's no check for page up. A better way is to just change the index, then at the end of the function check that it's in range and fix it if it isn't. 
As a meteorologist I'll tell you this: lightning data is hard to find free. It costs a bit of $$$
Like I was telling /u/ksion, I understand that Python would be less powerful and efficient (by a TON), but I'd still like the option out of comfort and preference, even if just because I can (because we all know that's a totally valid excuse to programmers).
Even better is named loggers (as `requests` does it): &gt; import logging &gt; &gt; logging.getLogger("requests").setLevel(logging.WARNING)
Haha. I love how Sublime Text plugins are always telling me I have an unused variable. I just wrote the damned thing, give me a minute to use it. Actually wish a timer on such warnings was an option.
The [pyed piper](https://code.google.com/p/pyp/) is a nice tool for data manipulation. It can replace not the whole shell but awk and sed.
Don't ask shitty, lazy questions. ~Harry
[Gotta love that test suite](https://github.com/ourway/auth/blob/master/tests.py)
wikipedia of course.
Ah, great. And boy that's a scary (yet impressive) hack to resolve the test class without a decorator. Bravo.
There are correct answers here, but I think I can clarify. In Python, there are no brackets for organizing logical sections of code. Where in C++, an if statement looks like this: if (x == 5) { std::cout &lt;&lt; "x is five!" &lt;&lt; endl; } // more stuff In Python, logical sections must be separated by whitespace like so: if x == 5: print "x is five!" # more stuff # more stuff Though this form is not commonly used, it is also legal: if x == 5: print "x is five!" 
I don't use it as my default shell, but I do use [ipython](https://ipython.org/) a lot for similar things. You can invoke shell commands at any time with a bang, and you can even get output from them in a convenient little object. !cd /var/log sls = !ls syslog* zipped = [x for x in sls if x.endswith('.gz')] Stuff like that.
Kaggle.com 
The only time i referred to debug modes was when i talked about typescript no? So no idea where you got that one from, i use terminal debuggers, so no idea.
@BillGates can you help me make my text cursive in Word?
Not sure about the 'realness' (sorry not native english speaker) of this entire story, but I have contacted emergency services in the UK and your local police has been alerted.
[The worldwide megadataset](https://osf.io/zdcbq/files/) has tons of data. 436 political units (countries, states and similar) and 413 variables covering pretty much anything.
Fixing the Scunthorpe problem came with its own set of problems. I got a variation on the screenname "gang rape" because AIM ignores whitespace and the valid word "g rape" turned off the filter.
[**@gvanrossum**](https://twitter.com/gvanrossum/) &gt; [2015-10-15 19:23 UTC](https://twitter.com/gvanrossum/status/654739464967688192) &gt; @sonduszeyad88 Sure, I charge $1000 per hour for homework services like that. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
[This might be my favorite commit](https://github.com/ourway/auth/commit/9be3b80ed6821612c8acc0462e655ea8a3189470)
Hi there. You have posted a learning question to /r/python. These types of questions are far more suited to /r/learnpython, where users are actively interested in helping people to learn. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Show them that you've tried to solve your problem and you can get all the help you need. Cheers &amp; best of luck!
Hi there. You have posted a learning question to /r/python. These types of questions are far more suited to /r/learnpython, where users are actively interested in helping people to learn. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Show them that you've tried to solve your problem and you can get all the help you need. Cheers &amp; best of luck!
Hi there. You have posted a learning question to /r/python. These types of questions are far more suited to /r/learnpython, where users are actively interested in helping people to learn. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Show them that you've tried to solve your problem and you can get all the help you need. Cheers &amp; best of luck!
Hi there. You have posted a learning question to /r/python. These types of questions are far more suited to /r/learnpython, where users are actively interested in helping people to learn. Please resubmit it over there! Make sure to read their sidebar rules before posting, notably this one: "Posting homework assignments is not prohibited if you show that you tried to solve it yourself." Show them that you've tried to solve your problem and you can get all the help you need. Cheers &amp; best of luck!
more than 1k?
Soo... like $3?
Gah! prospectors default format is HORRIBLE! wasting two lines, line# separated from col#. Line: 276 pylint: invalid-name / Invalid constant name "app" (col 4) 
Beautiful... I wonder I should make the switch to this for my next project...
Luigi has a configuration option to store task data..maybe you can find some way to make it work for you
but...why is it you never signed up BEFORE ? you had to first post this thread and need people to remind you
I'm still scratching my head why he needed to create this begging thread to have someone suggest odesk to him....
&gt; To my knowledge, it doesn't run windows [It does!!!](http://ms-iot.github.io/content/en-US/Downloads.htm)
Every kid in the whole world would prefer have a living father that owes up to his mistakes instead of the alternative. I realise you are feeling very depressed at the moment, and could have been depressed for a long while now, but there truly is light at the end of the tunnel. 
what video ? 
Yes the anaconda people.. they have a consulting arm that provides python programmers. There are a bunch here at Large Firm^TM .. can't really give details on what they are doing. Hard core python programming.
Well I thought so far I just need to learn a programming language, just my teacher let me to get a raspberry pi so.....I don't have computer science lesson and i'm in a boarding school so i really don't want to take any keyboard and monitor...... Anyway it looks like I don't need it so ,thank you guys
&gt; No amount of medications the doctors give me help. I was put on Benzo's for 4 months because I was so bad, and just as I started improving they took me off them This is a contradiction, I only point this out so you might realise you are not in a good mindset at the moment and as a result, might not be thinking clearly. &gt; It's Christmas soon. The weight is heavy on my shoulders to show my son that I can make this Christmas a good one. If you go through with your plans your son is going to have the shittiest holidays of his entire friends group for every year for the rest of his life. I don't say this to guilt you, but you can maybe realise this if it gets mentioned this way. &gt; When you can't do that it makes you feel worthless. I have personally been battling with depression for about 15 years (I am about the same age as yourself) so I know how it feels to think you are not worth ANYTHING. But that is just a delusion, you don't do yourself favours by thinking this way. Always look at the bright side of life is not just a Monty Python song, it is also sound advice if you want to increase your life quality. edit: since so much time has passed since your last reply I can only hope the emergency services arrived in time.
Yeah, they're more irreplaceable than universal. If you need numpy nothing else will quite do but only if you need numpy. 
Ok great. Could you please use ***[pastie](http://pastie.org/)*** or ***[gist](https://gist.github.com/)*** next time ? thanks 
https://github.com/vinta/awesome-python is a curated list of a bunch of handy modules. I found out about pathlib and arrow from this list. 
&gt; It says my file directory is wrong or something What is "it"?
Very cool! 
Well, most any consultant is expensive compared to an FTE.. or burning $100 bills. Source: Was consultant on Wall St. for 10 years.
That's what I was thinking, I'd pay 1k/hr to hire Guido.
Guido actually helped me with my homework once. Had to do a small project on someone notable in programming so I shot him an email. Nice guy. 
- They went for the cursive, but I didn't care, because I don't use cursive. - Then they went for the bold, but I didn't care, because I don't use bold. You know the rest.
/r/learnpython
It would be nice to see **global** and **nonlocal** highlighted the same way as **async** and other keywords.
Where's Bokeh?
Besides /r/datasets, here's a compilation of public datasets that are at least 100,000+ rows and are relatively easy to get (some of them might require the ability to scrape and collate via a for loop): [Deep and interesting datasets for computational journalists: a quick list ](http://cjlab.stanford.edu/2015/09/30/lab-launch-and-data-sets/)
Sure but I charge $4 Billion per hour for homework services like that.
Xcode.
seaborn
He specifically stated homework services. I imagine the company would have a different job description. 
Bill Gates would lose money if he stopped to pick up $4 billion from the sidewalk.
Thanks sorry for posting in the wrong place. 
Yes, especially if that $4 billion were in $100 bills laying on the sidewalk. That's 40 million pieces of paper to pick up. That would take a long time for anyone, and he'd lose money in all that lost time.
Ipython, [httpie!](https://github.com/jkbrzt/httpie), requests
But it's okay because you can fire them whenever without calling it "layoffs".
Care to elaborate? 
I never would have expected Python to be described as hard core.
The real savings are in not paying for benefits, vacation, 401k, perks or anything else FTEs require. 
The origin of that expression comes from the tech campusus in London, UK. These are all in east end of the city near to the Cockney areas. So there's an influx of local programmers, and their cries of "Cor Blimey guv, this is hard" lead to the creatioin of the term 'hard core programming' source: My ass.
Didn't that used to be a google interview question (when the file was several terabyes in size)?
Whaever is installed in my editor (atom has Flake8) or IDE (jetbrains has its own). On the terminal I use flake8 or pylint, whichever is easier to install on the distro (I apt-get/yum until I guess a name right and then that's what I use).
that's the claim, but most consultants I've seen charge 1 FTE salary for a 3 month engagement and then deliver something an FTE could have built in 3 weeks.
&gt;I'd much rather do something like for i in ls(): do something well you can. First of all, in bash looping over `ls` is a big no-no. You should use native globs with for loops because command outputs are plaintext and now you have a problem with unreliable delimiters (whitespace, newline or whatever you'd select is inherently unreliable given the legal char space in filesystems). Globs used directly never degrade. Guess what, you have `import glob` in python. &gt;&gt;&gt; for shit in glob.glob('*.csv'): print(shit) ... pt.csv That said there are some things that are not only more laborious in python but a true pain in the ass to achieve. For example I haven't figured out a way to wrap around a cli prog spitting shit out to stdout and stderr transparently, ie python doesn't simply devour it into 2 separate variables but also prints it out chronologically. The whole stdout/stderr redirection is vastly superior in bash. Writing a prog that simply prints shit out and then using shell to dump it to file or to pipe it further is much easier than doubling the size of your code so you optionally have file handlers to write shit where you want it. If my code was supposed to make a heavy use of cli tools and required dozen subprocess.popen() I'd think twice about writing it in python because there is language preference and then there is going full retard. My general approach is to write tools in python and make them compatible with pipes if it would prove useful (looping over stdin instead of paramed files) so i get much more bang for the buck in how i can string them together.
Still cheaper than buying a copy of Delphi. :-(
A friend and I did a thing in Python differently. I asked Guido which was was best and he said real programmers do it a different way.
Beautiful!
guy sounds like a dick
The obvious way isn't always obvious if you're not Dutch.
This question is really better suited for /r/learnpython I'm guessing you mean you are calling an external command and it asks for addition input? The pexpect module can do that for you.
My mistake. This discussion was about Python tools and you brought up Atom as a substitute for PyCharm, so that's why I asked about the debugger.
When you see `__author__` and `__version__` at the top of the file, you know you're dealing with some serious fucking python.
The solution is simple, make sure the important software doesn't run, or if it does, doesn't run very well on windows 10. Windows 10 is Lava. 
Interesting. The Dev branch even supports Hamiltonian MC.
[removed]
Could you please share a screenshot how it's currently highlighted in your editor?
Don't a lot of companies still have windows XP machines, because you just can't upgrade them, the software only works on XP? We've got time.
Spark?
lmao youre a card bruh a++
@dreamlax. Yes, you are right. I started with initial set of banned words collected from across the internet. I am pretty sure we can add more ;-) `fuckedintheass`, `ass_fuck` is the [Scunthorpe Problem](https://en.m.wikipedia.org/wiki/Scunthorpe_problem) as pointed by @lordmauve. Unless we add them manually in the banned word list. 
Python takes the Sammy Hagar approach to coding though: There's only one way to rock.
completely disagree - they might not be able to touch type at the same speed as 10 random developers - but the best developers, that can fit how the system as a whole in their brain and provide the best abstractions and the best plan to get from point A --&gt; B can be as valuable as saving enormous amounts of time not going down dead ends all the way to literally being able to solve a problem that 10 other developers may never be able to solve, period.
Not exactly what you're asking for, but I thought I'd throw this in because it's somewhat related and might help with a few of the reasons you want to replace bash in the first place. [Have you seen red?](https://pypi.python.org/pypi/red/0.2.1) I worked on this since I hate dropping into a python shell just to run regex's and do simple things with the stdout of some program. I wanted to be able to pipe the stdout of something directly into a python oneliner and do what I expect. Instead of cat'ing out to a file and parsing the file in a python interpreter, you could use red, just as you might use sed, grep or awk. I tried to make it the python equivalent of `perl -ne`. You can even aggregate against stdout, like count how many times you saw `[ERROR]` in a log file, and print stats of how often you saw what error messages. You can also invoke third party libraries from it, and do something like call `requests.get` on every url you pull out of a log file and print the status code. Brings some of the pleasantries of python directly to the shell, so I thought I'd mention it.
you could actually do /u/thisisbillgates ... 
Did I really need 144 new items in window.history?
Thanks. will do that soon. :)
Is there a video for this talk? The slides piqued my interest
I've seen *plenty* of projects with 6-8 $100/hr developers that were glacially slow, unwieldy and buggy because they were mired in massive amounts of technical debt. Virtually all of them could have been done quicker and at a higher quality *part time* by a single $1000/hr developer (maybe with a junior to help out). The difference really doesn't become really apparent until about 9 months in to a large project though. After 3 years of steadily digging a hole those more expensive developers become bigger and bigger bargains. This is not widely understood, however, especially by technical managers who don't understand development (the norm, IME). That's why so many projects that basically aren't that complicated end up massive trainwrecks with 8 or 9 developers. Management just throw yet another $100/hr developer at the problem and hope it speeds things up. It doesn't.
What was the thing? You said closing out programs, but not sure what you meant by that. 
&gt; For example, many developers use an ORM because it makes interacting with the database easier; however, some will actually write their own thin wrapper for interacting with the database. As Donald Knuth put it "premature optimization is the root of all evil". If you don't use an ORM at *all* for performance reasons, that's you. Evil. &gt;Why? Performance for writing applications that deal with 100,000 requests per second. You might do it for performance reasons, yes, although caching tends to be the first port of call for that problem. Abandoning an ORM for *specific* queries might come later. Denormalization comes next. NoSQL / map/reduce comes after that.
Especially that vegetarian crap. Give me some classic chicken bullion any day of the week.
When people refer to how amazing PyCharm is, does this apply to the community edition as well?
eh what the heck...
Such modules come shipped with Python nowadays. Besides, I install the modules which are relevant to what I use Python for. I am a data analyst, so I install pandas.
He forgot to mention that he requires 3 hours minimum.
yeah, honestly I'm not even using any of the pro features.
It's not Python, but whatever I do I first install Vagrant (and VirtualBox), and then set up the environment there rather than working on my main machine. And regarding setting up, I've lately grown quite fond of conda as the package and environment manager.
can you tell me more about this?
very nice to see that he also answers simple queries: [link](https://twitter.com/gvanrossum/status/655024013610102784)
[**@gvanrossum**](https://twitter.com/gvanrossum/) &gt; [2015-10-16 14:14 UTC](https://twitter.com/gvanrossum/status/655024013610102784) &gt; @isithasub Sorry, no, it's an interpreter. But it's mighty small and fast! (It's \*micro\* after all.) ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Interesting. Similar idea, very different approach I think. red is more tailored for eval or exec'ing python code from regex matches, and pyp looks like it is meant to run a pipeline of operations on input, transforming data as it goes through the series of operations. Some things might be easier in pyp, but I don't think it has near the capabilities of red, simply because you can import any library and evaluate raw python code. From what I can tell, it doesn't look like you could do something like this: $ red "(.*)" urls.txt -i requests -x 'response = requests.get(line)' -e '[response.status_code, response.content[:20]]' [404, '&lt;!doctype html&gt;\n&lt;htm'] [200, '&lt;!doctype html&gt;&lt;html'] [200, '&lt;?xml version="1.0" '] Though of course I haven't delved deeper than the docs you linked to, so I don't know pyp's full capabilities. It'd be interesting to see how you could use either for different problems. I really need to make that regex optional, with "(.*)" being the default. It was originally meant as a grep/run-python tool, but honestly I think most things it would be helpful with don't need the regex.
After the 10 TB question comes the "endless stream" question, where you have to sort, select, partition, categorize, or otherwise process a dataset without beginning or end. 
You can check this here -&gt; https://github.com/frappe/erpnext Open source erp bulit for the web..used in more than 130 countries worldwide. Start contributing !
If you are interested in GUI/webinterfaces : https://github.com/dddomodossola/gui I need testing to improve its usability and stability.
That's great. SublimeLinter users can add `"magicpython": "python"` to the `syntax_map` in their SublimeLinter settings to bring linting back.
Depends who those 10 are... some people get software jobs with very limited programming ability. But even if the 10 were competent the boost to morale and marketing of being able to say Guido worked on the project might justify his price.
There isn't. Ben wrote in a comment on HN that the talk wasn't recorded, but he will try to give it again in a conference where it will be.
Well it does has python linters, flake8 and pyflakes, thought seems like the version i have is to old for those packages.
Why did you just now talk about ORM in relation to being a *real programmer*? As far as I see *real programmers* have not come to any consensus about using ORM or not.
But if you hire 10 devs you're likely to get some pretty mediocre ones in there. Then add to that the overhead of communication between 10 people which inevitably slows things down. The superstar programmer fallacy is real, but there is a reason people like Guido get paid thousands an hour to consult
Yes, in my opinion, and in Esteis' opinion also. Rudeness is of course subjective. If you want your speech to have an effect on people, you have to take into account how they will hear it. Use our feedback as you wish.
http://lmgtfy.com/?q=national+instruments+DAQ+python+interface&amp;l=1
good tune!
Most of Bill's holdings are in investments or non-cash asset: *"Bill Gates has a net worth of nearly $82 billion, of which just $14 billion is in Microsoft stock. The bulk of the remainder — $64 billion – is invested in a variety of assets through Cascade Investment LLC, his private investment firm, according to people familiar with the matter. Cash, some small technology investments and assets such as his 66,000 square-foot mansion in Medina, Wash., make up the last $4 billion chunk.*"^[1](http://blogs.wsj.com/moneybeat/2014/09/19/breaking-down-bill-gatess-wealth/) So you would also have to calculate how much he is making off his investments per hour and also look at the time value of money for the $4B. In the end it is still worth it to pick it up. 
writing something like with open(..) as f: res = sorted([ x for x in f]) would probably cost him no more than 20$ even at this rate... :)
You can develop on the web, in python, and never touch django. Is it the most popular python web framework? Probably. Does that matter? Maybe. 
Just look at sugarcrm, the exact path to licencing, now the community switched.
holy sheeeet. this is amazing. Thank you very much. 
If you want to leverage one of its many built-ins then yes. I have built sites with Flask and Django. I really like Django for the admin interface, users/groups and the mass of packages built for it. Flask is great for complete control but there is less packages around it. Best thing is try both and see what you like.
If you have a function like this that calls another function: def func1(*args, **kwargs): return func_inner(args, kwargs) The variable `args` is a tuple, the variable `kwargs` is a dictionary. The function `func_inner` accepts two arguments, a tuple and a dictionary. However, if you had: def func2(*args, **kwargs): return func_inner2(*args, **kwargs) The function `func_inner2` accepts zero or more positional arguments and zero or more keyword arguments. So the asterisks do matter.
Really? Ascribing malicious intent to what is probably a simple bug? And Guido perpetuating that notion, of all people? Not to mention that if this was only discovered now, how would it be "since Guido left", which happened about _two years_ ago? I rather doubt no one of the hunders or thousand people discussing Python issues haven't noticed until now.
it wasn't discovered now. by tweets it looks like it has been happening 
https://xkcd.com/552/
[Image](http://imgs.xkcd.com/comics/correlation.png) **Title:** Correlation **Title-text:** Correlation doesn't imply causation, but it does waggle its eyebrows suggestively and gesture furtively while mouthing 'look over there'. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/552#Explanation) **Stats:** This comic has been referenced 479 times, representing 0.5655% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cw30izf)
to be fair it would probably take him about a minute to figure out and implement, so its actually about 17 dollars. 
This is actually a bargain since it would only take Guido about 15 seconds to write it in a single line and respond. 
How do you sort with map reduce? (I'm far out of practice, but this does not seem obvious to me)
I do feel a bit weird bringing in external dependencies just for command line arguments (for really rough and ready scripts you get by with sys.argv, after all). 
at least someone clicked on my lmgtfy link!
Windows friendly? Plenty of *nix TUI love out there, but I'm really struggling on Windows. Making a quick tool usable by a colleague is a real pain sometimes (tk, ini-files, cli arguments, etc.).
Because money.
Not literally, but there is a dollar amount associated with his time. Most things that are "free" actually still cost you time which, especially when you're Bill Gates level rich, is more valuable than money. I don't even make that much but I value my time highly and wouldn't take a higher paying job that requires more hours per week.
1 million per hour? What are you, made of beanie babies?
Thank you! I wish this submission didn't slide off the front page this fast :/ 
Thanks for this!
do yourself a massive favour and use the wonderful requests library. The batteries included http/urlib modules in python are extremely clunky in comparison. The answer to your question is right on the main page for [requests] (http://docs.python-requests.org/en/latest/) import requests r = requests.post("http://localhost:8080/rest/Test/0", data = "EXAMPLE DATA \!", auth = ('user', 'pass'))
Details about the project?
This is the correct link https://www.oreilly.com/learning/python-cookbook-concurrency
Damn, don't release software if you're about to get on a train. That issue should be fixed :)
if you have to ask.....
Hey noah, Just to let you know buddy, your doing yourself a dis-service if you are just trying to get the project done for a grade. Grades don't matter after college. In software, the only thing that matters is can you figure out things on your own without help and make good decisions. You might want to try just getting as far as you can on your own, and maybe reaching out to T.A.'s or other students, or check your textbook out, or use Google, if you are struggling with something. If someone fills in the holes for you, you are missing the opportunity to learn how to un-stuck yourself when you are lost and have no idea what to do next. Which, believe it or not, is really all being a good programmer is.
I'm unable I help but looking forward to this reply. 
Yen! It's yen!
300$ for a 5 day (9 if you count sprints) is an absolute steal. 
/r/learnpython
The sidebar would be a good start. You can find a lot of information there.
https://www.reddit.com/r/learnpython/comments/3p5z6o/my_cousin_asked_me_where_i_would_go_if_i_wanted/
Date times are probably still strings. Use parse_dates=True in read_sql statement.
I am liking this http://interactivepython.org/courselib/static/thinkcspy/toc.html
I have a question, Why did you put a method.. inside of a method? In the plot() method. Second, me just being curious here, how long have you been "python" programming? Btw, Cmder is great :D 
Sorry to say, I have no idea how to deploy a spark cluster. [Here's their notes on installing spark standalone.](http://spark.apache.org/docs/latest/spark-standalone.html) [Here's some collection of scripts to work with it.](https://github.com/adobe-research/spark-cluster-deployment) It will take a lot of time to read documentation and probably a few blog entries to see how people are deploying it. Unfortunately, you're going to be somewhat limited to just testing unless you've got a few baremetal machines to run it on that are decent, or have the funds to spin up lots of instances in EC2. It'll take some hardware to set up a cluster to handle real tasks. I'm sure there are people online you could ask for some sort of minimum requirements to make something useful. You know what, [this guy put spark on two rasperry pis!](https://darrenjw2.wordpress.com/2015/04/17/installing-apache-spark-on-a-raspberry-pi-2/) It might not perform nearly as well as a desktop computer, but that's something you could test with cheaply. But as to how you know what the data looks like, at the link you showed me they say this: &gt;The data is in csv format. &gt;For the data files this includes the fields: &gt;medallion, hack_license, vendor_id, rate_code, store_and_fwd_flag, pickup_datetime, dropoff_datetime, passenger_count, trip_time_in_secs, trip_distance, pickup_longitude, pickup_latitude, dropoff_longitude, &gt;For the data files this includes the fields: &gt;medallion, hack_license, vendor_id, pickup_datetime, payment_type, fare_amount, surcharge, mta_tax, tip_amount, tolls_amount, total_amount So, it's newline delimited comma separated values. You could just read the first 100 lines or so from a data file and see what it looks like. How you initially approach it will always depend on the nature of the data and the file format, but a CSV is super easy to work with. Each newline is a record. You can use basic command line tools like `head` and `tail` to pull out lines from it, you can code your own thing to just call `read(num_bytes)` and split on newlines, however you want. If you want to pull out random records from the file, you could seek the a random location, read until newline, then pull out the very next line. If you don't care about their spot in the file, just calling `head -1000 file &gt; first_1000_lines.txt` from the command line on *nix or mac works.
Fair point about goroutines, especially considering he was using tornado/twisted goroutines could be a big win.
I'm having a little problem with the sed expression. You have `[A-z]` when I think you need `[A-Z]` or else sed chokes.
For all those that are learning python and would like to join a fun community where we discuss everything nerd/geek and also have a dedicated channel for python learning- a slack group where we discuss python related topics, help out each other(no matter how beginner of a question it is) - join me by sending me a PM and an invite will send be sent to you. Cheers. 
I was figuring out how to deploy spark this past week. Spark is recommended to exist on an "edge node" which has the Hadoop lib and binary and config files and is on the same network as the Hadoop nodes, but is not a master or slave itself. So it can act as a workbench. When you run spark in standalone mode you specify the master bode with a command line argument. Or if you run it on yarn you specify yarn-cluster as a parameter and it conveniently checks the yarn config files to figure out the cluster and runs it 
I thought you meant that x or y were specific ways of closing out a program (not stand ins for what he actually told you). I got it now.
No problem! Yeah, for a CSV, you're fine. You just can't read it all in to an array or something. You can't store it all in RAM, but you can iterate through it pretty easily. It depends on what you need to save in memory while processing the file. Some situations might get a little trickier due to a huge file (or just large amount of data in general). Let's say you had a CSV of 1TB and you wanted to remove duplicate rows. You obviously can't store each row in memory to know if you've seen that row before. You might think to sort it first, but that could take a very long time as well and might not be practical. One thing you could do would be to use a bloom filter, which can tell you with pretty high accuracy whether you've seen an item before by hashing it, while also not using much memory to check. You don't need every single item in memory, just the bloom filter. You iterate through the file, checking the bloom filter with each row, and if it's not a dupe, you append to an output CSV. If it is, you skip it. With just one pass, without storing the whole file in memory, you could dedupe it. It always depends on the nature of the data, the file structure, and what you're trying to do. And it takes some extra thinking with something like spark, because your file is distributed among several servers. None of them have the whole dataset, so if you have interdependencies (deduping as one example), it gets a little tricky to figure out the quickest and most practical way to do it. But spark is super easy if you've got an embarrassingly parallel problem, like taking a huge CSV and creating JSON records for each line. You can distribute it as finely as you want, to as many servers as there are rows in the file.
You don't have a 10 for any suit if you're deck! 
&gt;whenever I read the source code. i don't get what is happening. I'll ignore the rest as I didn't understand it. What source code are you reading that you don't understand? Ok, well you mention the DictReader in the csv module. What part do you not understand? If you can be more specific, then maybe we can help. &gt; how do you get over this? maybe I lack a deeper knowledge of python. like with descriptors and such Read (good sexy example [here](https://github.com/fogleman/Minecraft/blob/master/main.py)), write, get it wrong and get it right. You only get better by doing and then writing more 'correct' code later down the line. I have been coding in Python for a few years and still learn a lot for each project I undertake.
There are two sides of the story. The one side is, that in order to get better at programming, you have to learn, reading other people's code. That is something, that is oftentimes neglected when teaching other people coding. Most of the time you learn how to use variables, functions, controll-structures to plumb together to solve your problem; but near to nobody shows you, how to "understand" code made by others. To improve that skill, you have to practice a lot: grab your debugger of choice and go! The other side of the story is, that, in order to understand what other people wrote, it has to be written in an accessible way. It is not always your fault, if you could wrap your head around someone else's code: sometimes the code is in a terrible condition. Python as a language helps the writer to avoid a "bigger mess", but I'm sure, there is a lot of awful code out there. The only way to understand bad code is the same: grab your debugger and go! After you read a lot of code and train yourself how to write "clean code" you are able to decide in what condition a codebase is and appreciate good code, i. e. it is easy to understand. 
Maybe r/commandline will like this too?
Apart from you, who has ascribed it to malicious intent? It is a demonstrable fact that Gmail's spam filter is broken, and it broke after Guido left. It is an exaggeration to suggest a correlation ("ever since Guido left"), since it is more recent than that, nevertheless the general facts are correct: Gmail will mark tracker issues as spam. Linus Torvalds spotted this bug too, three months ago, so it is not just Python tracker issues: https://plus.google.com/+LinusTorvalds/posts/DiG9qANf5PA Given that *three months on* Gmail's spam filtering is still broken, I think this demonstrates that Google simply doesn't care about techies and their needs. 
Thanks for the information.
is this your project? one look at it and you can already tell it's good clean code. it's just wow. I'll be using that as a reference to write idiomatic good looking code from now on
Does it have a dark display option yet? The screenshots don't show one. That's pretty much a killer from my point of view -- if your app deals with text editing, but only allows light background, it can go be icky somewhere else, not on my computer.
CodeNewbie or a different one?
A script kiddie is typically defined as someone using scripts to attack sites and generally do mean things so I don't think you're a skiddie. Regarding not understanding code very well, you really just have to keep working at it. Build more things, read other people's code, help out on open source projects, etc. I personally learned a lot by playing what are known as Capture The Flags. Eventually computers become such a big part of your life that you no longer even really need to read source code to guess at how something is implemented. 
There's [these](http://leoeditor.com/FAQ.html#how-do-i-set-selection-colors) options.
I would sum it up as a Python-scriptable tool to deduplicate, wikify, and unify code and documentation as with Donald Knuth's literate programming philosophy. WIth macros and (Emacs-like?) commands, you could even document your own extensions that do git stuff or run tests or debug/release versions of your codebase. There's support for the usual syntax highlighting, etc. for languages like Python and C, but it can be language-agnostic. Plus, builtin web browser and other Qt goodies.
The thing is that i live in Europe :D
Looks very interesting. I've never used Emacs but I would consider using Leo as it looks very approachable. However, I've read the front page of the website, and it is not clear to me what advantage this has over something like, let's say Spyder IDE. It's unclear to me what a "Leo outline" is from the front page? When you refer to 'graph' is this a 'function call graph' or 'mind-mapping graph' or something else? Also what does scriptable mean (this is probably clear to an Emacs user)? What can I script? Can I manipulate my code as a string using python? Can I extend autocomplete? etc? I understand that documentation can be seen in Leo, and that Leo also has a built in web-browser (now that sounds amazing for integration with technologies like IPython, visual output, etc) However, not to be hard on Leo's front page, it was unclear to me what really stands out about Leo over other IDEs. Of course I can try to read through all of Leo docs, but I think for a new technology/IDE to be widely adopted the value proposition should be clearly evident within a short amount of time. That said, I think the aims of Leo from the reddit post title sounds really promising and the screenshots look great! Further, I think Emacs is overly complicated and a vestige of the past, and that something like this is needed (I know I'll get some heat for this one, sorry in advance to all the Emacs users). Perhaps this is aimed at Emacs users, but as a non-Emac user this also sounds interesting to me, and I would like to know more.
Looks cool. A keyboard-driven outliner / integrated literate programming environment. Out-emacs Emacs, though... It doesn't even scratch the surface of what org-mode can do. Still, outlining is a handy tool for writing, and the combination of code and outlines is powerful.
Use the style recommendations for the languages used ([PEP8](https://www.python.org/dev/peps/pep-0008/) for Python, for example). Enforce them with a lint tool ([PyLint](http://www.pylint.org/), for example). Never dogmatically, but reasonably. Use version control; you can easily use one locally if you don't want it on the internet or some other network (Git or SVN, for example). Use automated tests. Write technical documentation, even though no one likes to. Create simple high-level diagrams to visualize how the project structure looks like and the parts interact with each other. Look into how projects are best organized in modules. Use language features such as named tuples and type hints. Use the IDE/editor you are most productive with for the task. Use a continuous integration server (such as [Jenkins](https://jenkins-ci.org/)) to run all tests, the lint tools, and create the documentation automatically every time you update the source code repository.
/r/learnpython
Yeah, me too. But that isn't the conferences fault ;)
design before coding read code from high profile projects use git 
No that's a downside. Hiding the source is stupid.
You will learn most by reading well written code. 
To learn web dev, I recommend it because Flask has less buit-in tools. There's also [importd (D is for Django)](http://importd.readthedocs.org/en/latest/) that is like Flask (quick setup) in Django. Or [web2py](http://www.web2py.com/), or others…
I understand your critique, often its breaks down to just bad naming, no meaningful names for functions, methods or variables. Often I see just single letters for variables, so really no clue whats going on. F.e why put a user name in a variable called `u` instead of `user_name`. This kind of implicity is important in dynamically typed languages. Courses, tutorials or what every should put more emphasis onto good naming conventions. But what I don't get is your critique on white space? Why should using brackets help understanding code? I think forced intendation helps alot to read and understand structured code.
I like the idea of the `try - except - else` method, as it gets the exceptional behaviour out of the way up front. I've never written any production Python, but will be starting soon - is it considered bad form?
Have the simple install process you can write. Use setuptools. You can/should also use docker and docker-compose to simplify your work.
This is all great, thanks a lot. 
Your example doesn't have any real difference. But if you have any break inside the while, then there is going to be a difference, because with the break, the `do_something_else()` function will not execute. Sometimes people have code that looks like this: flag = True while ...: do_something() if ...: flag = False break if flag: do_something_else() With the else, you have: while ...: do_something() if ...: break else: do_something_else() Looks better!
I don't think there's any Python control flow that is considered bad form to use in production.
Learning to read source code is another, of many skills you need to elevate yourself as a programmer. Don't stress and keep working at it, I usually don't try to grok an entire library but I'll work in from the API I'm using and then out.
I will man I've been writing a shit ton of scripts like a lot. and It's true the more I learn the more I cringe at the code I wrote yesterday haahahha
I guess I should start contributing to open source projects. you think that's a place to start?
I love web apps and I love flask too! I just built my first portfolio site. and deployed it at heroku. I love python and everything you've recommended me
well I couldn't undertand a class less than 30 lines and then try to understand an entire library? hahahah. If that'll happen be sure to visit me in the asylum near you XD
None if "do something else" is the end of your code, but sometimes you need to do extra processing only if the loop completed before continuing with the rest of the program.
One thing you MUST MUST MUST do, COMMENT COMMENT COMMENT! This will serve 2 purposes - 1&gt; When you read and need to change your code a few years later, you don't have to analyze the code as heavily because you can dive directly into the section you need to work on. 2&gt; When someone else reads your code, they won't curse you out!!! in other words Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.
That means you're getting better mang :D
Actually the else still runs even if the while loop was executed
Just my 2 cents, but I am not a fan of this for loop syntax for readability. It gives me the impression that the else is going to execute if the for loop is empty. For example: lst = [1] for i in lst: print "List is not empty" else: print "List is empty" Would print "List is not empty" "List is empty" 
so you're talking about the capability of an IDE
Yeah, imho they should have chosen it another way (`else` executes if `for/while` did not finish properly/etc). While I do understand where they are coming from, it's not really that intuitive.
he meant SW not HW. Your average corporate sheeple use Excel/Word/Outlook/&lt;some corporate windows app&gt; ALL DAY
Yes that's exactly what I had in mind, cheers.
Or you could set the string to a variable and print it on a later line.
Yeah all you're showing an example of there is that python can do boolean expressions
IMO the keyword should be "finally", not "else". 
Yeah, isn't that the keyword for the try-except block in java?
why would you redefine "str"?
Not a Python programmer, but isn't that an assignment? This is basically an IF-ELSE without having to write the ELSE, just set it true by default and go false IF it's false.
Refactor early and often. I've wrote an open source code that 200k lines. It used to be double that with less features. There are some major blocks of code I've rewritten from scratch 5 times.
then maybe you should charge more dumbass.
everything that can be automated
No, he meant why you are overloading the `str` class https://docs.python.org/2/library/functions.html?highlight=str#str
Heh no sorry :D.
&gt; you could have brute forced this. When I read this I thought you wanted to encourage him to create 1000 fake accounts that post every possible number to increase his win chances :D
Why wouldn't you just do: text = "x is %s" % x
&gt; People love their automation.. and testing.. and web interfaces. you mean that's what you did in DevOps ? 
No problem - thanks for the info and the post!
Not from me. There is EasyEngine by rtCamp. https://github.com/rtCamp/easyengine It automates the installation of LEMP stack for serving WordPress or other PHP webapps from a CLI. It includes WP-CLI, Nginx, MariaDB, PHP-FPM, HHVM, Redis, OpCache, memcache, FastCGI, Google Pagespeed, phpMyAdmin, Adminer, Postfix, Dovecot, roundcube, MailScanner, plus many others. I mainly focus on PHP dev but this project made me want to learn Python E.g., ee site create example.com --wpredis # install wordpress + nginx redis_cache 
Or 'nobreak'.
if you do: print("A", "B") it will print the tuple "A","B" Which is also valid python2. You'll get the parens around it to show that it's a tuple.
That's not the point of the example.
Your code and mine are doing two very different tasks, though. Your is comparing all things in your list; mine is searching for a specific thing (or the first thing that meets some criteria). (Also bear in mind I was trying to give an example of how I see the intended use of that structure; I'm not an "advocate" for it - I've used it maybe once in 7 years of python!)
Look, when I'm trying to follow the code path , I find end braces far more effective at delineating code sections than trying to keep track of how many tabs over stuff was. I don't want to get to the end of a nested loop structure and have a hard time working out where I am. Plus, in most IDEs, you can select a brace and the corresponding open or close brace will be highlighted. Also, I've never deleted something in, say, visual studio and had to worry about fixing the tabs so everything will compile right.
&gt; hit up over the head with a socket wrench import socket @socket.wrench def crappy_code(): ... I want that.
Ok, now I understand you more. Too many nested code is also bad coding, even the Zen of python has a view about it: "Flat is better than nested." Like bad naming people try to put everything in a structure instead of dividing the problem into smaller subroutines (functions/methods), this is a problem in many languages and braces are more a workaround ;) Most editors and IDE will show you coresponding parenthesis, brackets or what every, even IDLE do this ;) Also alot of editors handle the tab problem quiet well, often you can descide between hard and soft tabs, the convention is 4 spaces in the python world, fe Linus Torvalds prefer 8 spaces for his C code. These editors will substitute every tab to the amount of spaces you want. Never used vs for python but I think there are preferences or plugins for that. For python the free edition of PyCharm is a pretty and powerful IDE, also vim, sublime and atom are quiet nice editors.
Oh, I get it now :P, sorry Python, didn't know you had an str class.
This was interesting! I really like shouldContinue = True if x == 5 else False It allows you to simply simple expressions in a way that is still readable. This is one of my main complaints with many languages. For example in swift they recently added similar functionality but it is so unreadable that using it in code other people will work on is mean. This code looks really clean and could be read by most people relatively easily.
It's ok; in most languages you can't override the keywords. :-)
thanks! just subscribed with r/commandline and submitted it there.
She does say it needs Python 2.7 for compilation, tho, because of needing a library (can't remember which) that doesn't support Python 3 yet.
for...else is considered bad style because it's so weird.
Music organizing by metadata and finding duplicate music files! Along with testing school assignments, automated testing is a godsend 
What sort of hardware do you need for a setup like that?
Nice
In both examples, the current sum is collected in a variable called [`sum`](https://docs.python.org/2/library/functions.html#sum) which shadows the `sum` built-in function in python (which the python highlighter recognized). While this doesn't create problems in these short blurbs, it is a bad practice in general (and you should pay attention to your highlighter for clues like these).
Try taking a look at [Rodeo](https://www.yhathq.com/products/rodeo). I just found out about them recently on this subreddit, and it has the exact thing you're looking for: an editor and a console to run the code (just use the CMD + R shotcut).
How about using `not` instead of `!` for readability?
That's a good point. Will feed that back to the author. 
The averaging example here might be "functional" by some definition, but it is not Pythonic. Python has a builtin function for summing the elements of an iterable which should be used instead. In fact, the reason that reduce was moved into functools in Python 3 was to discourage its use in favor of other builtin functions which do a more specific job. In general, when talking about "functional programming" in a practical sense, you really can't separate the concept from the actual language that you're using. Python's sum function really isn't particularly non-functional, and the reduce function is not more functional just because it takes a function as an argument. If the intent here was to write a series of articles on Python's higher-order functions, then that would be fine, but the author really needs to come up with a better example than just summing integers.
My home IP is a dynamic IP, in order to access my home raspberry pi server externally I need to know the current IP my house has been assigned. So I've set up a cron job on the pi that automatically runs a little python script to check my current IP and if it's changed send me an email with the new IP
Rather than an IDE, I would strongly recommend starting out in the ipython notebook. It's perfect for writing short-ish scripts that you'll be doing as you begin learning. Additionally, the notebook is (imo) one of Python's best features, and getting comfortable with it now will pay off.
Unfortunately, if you want to run code an an user's machine, you're basically limited to one of these options: 1. Write the code in javascript, and have it run natively in the web browser. 2. Write the code in something like Java that can run through a plugin. 3. Tell the user to download your code an run it.
How do you gather Craigslist information with no api?
Browsers doesn't have Python interpreters, so this isn't possible. You'd have to write your code in JS — the only language that browsers support — or use something that translates Python to JS. 
so we can say that doing everything in `try` is a very bad practice, is it right?
[Dr. Mario, Minesweeper, etc](https://www.youtube.com/watch?v=WGEX0dz_f_w)
I would imagine it's a battle between adding new keywords and reusing existing ones. If you add new keywords for all kinds of little features here and there you end up with a really bloated list. But if you reuse keywords too much they end up doing too many different things depending on context. Either way if you've never seen something before you're probably going to have to Google what it means.
The definition of functional programming doesn't have to be complicated or get into declarative vs imperative or anything like that. The basic idea of functional programming is simply to program with **pure functions** that are combined together using **higher-order functions**. A pure function is one that doesn't depend on or alter global state (doesn't require mutating variables), so it always gives the same output for the same input. A higher-order function is simply a function that acts on other functions -- that is it either takes a function (or functions) as input or returns a functions as output (or both). As a trivial demonstration of higher-order function: In [1]: def make_adder(add_on): ....: return lambda x: x+add_on In python `lambda` is used to create anonymous functions. That is `f = lambda x: x + add_on` is equivalent to: def f(x): return x + add_on Note, while the `def` syntax requires the function to be named, using the lambda syntax you can create functions that are not named -- so where ever you'd normally put a function name you can just insert a `lambda` instead. In [2]: f = make_adder(6) In [3]: g = make_adder(10) In [4]: f(3) Out[4]: 9 In [5]: g(3) Out[5]: 13 In [6]: def my_map(f, xs): ....: return [f(x) for x in xs] In [7]: my_map(f, [1,2,3,4,5]) Out[7]: [7, 8, 9, 10, 11] In [8]: my_map(g, [1,2,3,4,5,6]) Out[8]: [11, 12, 13, 14, 15, 16] In this example, `make_adder` and `my_map` are higher-order functions (make_adder returns a function; my_map takes a function as a parameter). Note in practice you wouldn't define `my_map`, you would just use the built-in function `map`. There are two main benefits of functional programming. First, the style often makes for clear concise code. Second, is that a smart compiler can optimize the code in smart ways. If you write `map(f, [1,2,3,4])` on a quad-core machine and `f` is a pure function (and assume its slow), a smart compiler could calculate f(1), f(2), f(3), and f(4) simultaneously on different cores, while something written imperatively without assurances that `f` is pure wouldn't be able to make these assumptions of what could be parallelized (and would hence work on 1 core and do the calculations serially).
Some languages do it like this value = &lt;boolean expression&gt; ? &lt;true-value&gt; : &lt;false-value&gt; This is slightly more compact and has the advantage of putting the true and false values right next to each other, whereas Python's mixes the boolean in the middle with the true and false values on either end. There's arguments to which is better, but I think that Python's works well in the context of the language, because the ?: notation would look out of place.
i wanted to do this too, but i got scared because apparently craigslist is known to crack down on people for scraping their websites
My intuition was similar, because usually an else means that the preceding block did not execute, so it would make sense that the else would run if the for did not finish completely. This is certainly a clever feature, but I feel like it can end up making your code more unreadable for people who aren't Python experts. And certain parts of the community will jump on your case if you don't use these features at every opportunity.
I think they only get upset when people try to build apps upon their full data. Don't quote me on that though.
Yes. Ideally a `try` block includes one line of executed code and then specified exception(s) related just to that operation.
DigitalOcean is your friend
I do the second and third items in your list, but I would really like to know how to do the first. We have a frontend to a database but I don't know to get around the request for an authenticity token thats generated when I use the frontend normally. Can you give some insight on how you pull your data? That would help me a bunch.
Yup, and the simplicity of the website makes for a much simpler scraper implementation. 
`for`-`else` is almost always meant to be used like for elem in elems: if f(elem): break else: default() You can use this to remember the behaviour by viewing it as if the `else` is attached to the `if`, but just fell down a block.
I scrape my myfitnesspal macronutrient records and post them to the googledocs spreadsheet my trainer uses for my weight training programming.
Aside from some netsec things, once a day I have it go and check for updates from a few of my favorite blogs. Generally I do this when I get in in the morning. Web scraping isn't considered the most polite thing in the world or I'd have it run every five minutes. I just use Beautiful Soup to do it. I was at some point going to have Tkinter running this but meh. That's a lot of effort for something I couldn't really justify spending the time on at work.
I made a custom deck of cards, and used Pillow to generate the card faces.
There's no tuple unpacking going on here, they only disambiguate. 
https://gist.github.com/anonymous/5a79aa743b3fceecc107 You have to have the MFP columns set up the way the script expects. Then it just finds the right row in the spreadsheet, and puts the values into the hardcoded columns. Edit: MFP does a redirect that confuses requests if you try to get macros for the current day, so that will error out. I just don't do that (because I cron the script, and it only really is worth running on a full day's nutrients, so I don't need "today").