[Nim (formerly Nimrod)](https://nim-lang.org/)
For me [Clojure](https://clojure.org) beats Python in expressiveness, but I've never used Clojure to work on something with a GUI. There's [ClojureScript](https://clojurescript.org/), which comes with every GUI framework from the JS world, but that's a different story...
r/learnpython is the proper place for help posts Assuming normal sentences, I think you could do len(var.split(" ")) Seperate the string into words, assuming that spaces were used Or you could even do var.count(" ") + 1 The +1 as there's one less space between words than there is words For the second you'd need to get rid of trailing/leading whitespace and it relies on singular spaces in the string 
The opposite happened to me. I used to be a huge Python coder until I did some projects in Haskell. Now I can't code in any language that doesn't have extremely strict typing and really good type inference, along other things. 
Could it maybe just check if the version is high enough, then just spit out a message telling the user to update the module if required?
ok tnx for that! 
I always wonder what all those people are doing that they have to complain about the speed of python. Yes, python is slower but in most of the cases, calculation time is just a joke compared to IO time which is the same for all the languages. 
Are there any other compiled languages with Python interop that you'd recommend? I've only ever known interpreted languages (except a little C#), and I figure I really need to pick one up.
You should try Common Lisp: compiled yet very expressive. (For GUIs why would one be interested in anything but html+js ?)
/r/rust
The full version needs to handle `step` being negative (or zero).
Well, there's your problem: Python interop generally meant C or C++ until Rust came along. There are lots of integration options in other languages but none that I have seen were very powerful, or ergonomic to use, or basically tempting in any way. When I suggested not learning Rust as a first-second-language BTW, that didn't mean "Learn C++". Rust is hard because you have to get things right up-front, or it won't compile. C will let you be sloppy, then segfault without telling you why, maybe minutes after the original bug happened. If you *must* learn a Python interop language, Rust is the one.
This resonates very strongly with me. Python certainly does set a particular level of quality. However, there's one language I find even more pleasurable than Python -- [Nim](http://nim-lang.org). The syntax is very much like Python, but it boasts C-level execution speed.
Do you think Rust is also suitable for application programming? I always thought of it more as a system programming language than an application one, as it is often advertised as a safer replacement to C. Not that there aren't applications written in C, but... you got my point. and cc: /u/elemental_1_1
I, too cannot program in anything else besides Python. I still use C, and sometimes C++, but mainly only when speed is THAT important, or I'm programming on a microprocessor (think Arduino), and I do not enjoy it.
I'd say Kotlin. Leverage the power of Java's package ecosystem (including Android development) with none of the verbosity and a fantastic statically-typed language.
tl;dr: Python is the best Python ;) Forget the latest fashions, if Python isn't working for you, you probably need Java, C#, or C++. I guess it depends if you want 'Pythonic' as in 'it kinda looks like python', or as in 'it's really cool and elegant', or more generally 'it's generally good and practical'? Thing is, there is already an excellent Pythonic language, it's called Python ;) So really the question is, what problem are you having in Python that could be solved by moving to a different language? For many issues (including GUIs) bindings to a suitable library would do the trick. Otherwise, I think there is a general problem that there are broadly two categories of languages - 'classic' like Java, C/++ which are super mature but suffer from all kinds of usability issues that make them nasty after using Python, and 'modern' like Rust, Go, Swift, etc which are much nicer (and often owe a lot to ideas also pioneered/popularized in Python) but are much less mature and come with their own set of compromises. Python is perhaps unusual in being an an 'old' language (predating Java!) AND being beautifully usable. Frankly if you want something that isn't Python and needs to be fast and mature, I would avoid jumping on the flavour-of-the-month new language even if that means dealing with something ugly - you don't want your platform changing under you if you have limited resources. Even with promising upcoming languages like Go or Rust you'll run into missing libraries and bugs. In the end I think it boils down to using modern C++, Java, or C#. You could stretch to other JVM/CLR based languages, (Kotlin looks particularly promising) but none will be as well supported as the 'core' Java/C# languages. I've done my time in Java and it's tedious but it works, and IDE support is excellent. You can save yourself a lot of pain by firing a lot of over-engineered Java 'patterns' recommendations into the Sun (no, you don't need a FactoryBuilderInterface!) and just writing Java kinda like you write Python.
&gt; F# This is unusual. Nobody ever recommended F# to me. Care to elaborate on why it is better to learn than - jus examples - C++, Rust or golang? I'm genuinely curious.
No I asked for other languages as well, but you are right that it was because of performance concerns. Still an interesting conversation though, I enjoy it. =)
I mean, it's not a bad thing to remove thresholds like that, but I am really curious if there is an actual use-case that made someone invest the time to fix it.
Since you mention `init.d/apache2`, I assume you're using sysvinit (or similar) to manage your daemons. sysvinit is not really complex enough to understand the sort of arrangement you want, so there's not much you can do. If you were using a modern Linux distro, it would probably have systemd rather than sysvinit, and systemd service files have all kinds of fancy configuration for expressing dependencies between services, like "service X requires service Y to be running" and "after stopping X, also stop Y". You might also consider installing a more sophisiticated third-party service manager like supervisord, and using that to manage both Apache and your scripts. Lastly, if the Apache webserver doesn't actually communicate directly with your scripts (only via the database), perhaps you *shouldn't* link them together - it's nice to be able to restart or upgrade your background services without causing visible down-time for the webserver, and it's nice to be able to restart the webserver without interrupting whatever important things your scripts are doing to the database.
I would also recommend Kotlin. One of the few languages that doesn't make me think "I wish I were writing Python."
Plus, they just made it an official first-class language for Android development!
I'm learning elixir - apparently is useful for multi-process work.
The talks that get uploaded on YouTube first 😔 
I wonder what do you think about Kotlin, if you had a chance to play with.
This is a very interesting family of pde leading to interesting pattern. I have talked about my work previously, and I attempt to reproduce the 1D case of your article with my solver (triflow). https://gist.github.com/81a89c2c4298597a154bb4d282da5111 I will certainly use your work as reference for the next step : implementation of 2D solver.
I don't do any Android dev. What does that mean? I thought you could already write Android stuff in Kotlin since it uses the JVM?
It hit 1.0 long ago: https://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/
You could already, but they're just increasing support and officially pushing it.
Very low level and stable: rust. Underdog closer to Python: Nim.
Have you tried Nuitka? Compiled python - not *recommending* it due to not having used it "in production", but when I played round with it, it seemed pretty good. Supports Py3 syntax too (not sure up to which version). I sometimes use Go for when I need a compiled, cross-platform program with no external dependencies. Go syntax is way too much like C for my liking tho.
[MFW i dipped my feet into javascript after having a long-time blast with python](https://media.giphy.com/media/n7DgfXU6kFCfe/giphy.gif)
&gt; What I would like is a programming language that is natively fast and as beautiful as python. You might find [crystal](https://crystal-lang.org/) interesting.
The bundle is very good but I've found that the Google Python course is very interesting. The fact they are test-oriented is big plus.
Nah, PHP just sucks bad
If performance is so relevant at this point, you're probably doing some wrong. 
Looks good! I'll try it later in practice. I do love the xkcd theme. I was wondering if there is a library for something like that. Do you think it is possible to make the plots wavy as well? Bars and lines maybe?
Yeah, it seems kinda pointless for normal code. However, I can see where it could be useful when using `**kwargs`, for example something like `settings = dict(**big_config_dict_with_1000_items)`.
&gt; I personally haven't run into a library yet that can't run in 3.6 but can in 3.5&gt; Really? :-)
'age' is not defined
Not bad, although I'd have preferred introducing metaclass by way of some motivating problem rather than starting with semantics.
Already being [uploaded](https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg/videos?shelf_id=0&amp;view=0&amp;sort=dd).
Then read up on [Counter objects](https://docs.python.org/3/library/collections.html#counter-objects).
Do you have some kind of bot that throws up the Steve signal? every time I'm browsing a post where Rust is mentioned (especially with a misconception) you are there providing answers unrelentingly. Your love of Rust is one of the reasons it's great IMO 
Absolutely. There's no way that I'd consider using anything that was automatically updating things behind my back.
outside python, I like freepascal/lazarus
I'm going to throw in my two cents for Rust, I've done a good chunk of C development and Rust for me hits the sweet spot of not shackling me but being very expressive. I know Go as well and have written quite a bit of Go code ~ 12,000 LOC and I can tell you it is not the way to go. It doesn't have good GUI support and doesn't play nice with Python. Go is not a bad language by any means but it has a niche. Rust on the other hand is a great general programming language that has GUI bindings already (and can just FFI to C where it doesn't have good ones), and will help you if you ever need to make some part of your Python code faster.
Hello there, assuming you didn't start with anything yet ("Hello World" program?!), I would suggest you to make yourself comfortable with [the basics](https://www.learnpython.org/) (interactive tutorials) of the language. 
Hehe &lt;3 I do not, I just happen to read a lot. I don't subscribe here, but followed a link that pointed here, and happened to notice some Rust talk, and figured I'd clarify here.
Thanks for the advice, very helpful!
and there's tf.keras soon :). You could already use [tf.contrib.keras](https://www.tensorflow.org/api_docs/python/tf/contrib/keras) 
Yeah, my point was: you can't list all of them in a top 15 list but have to pick more or less one project for each "category". TensorFlow is also my lib of choice for DL btw 
I recently got into c# I like it a lot. I'm only using it for unity so I have no idea about GUI libraries with it.
Thank you! 
Have you tried rust ? I see it as the low level, imperative brother of haskell
At least in 3.5 both `*args` and `**kwargs` are not limited in this way. E.g. d = {str(i) : i**2 for i in range(1000)} d2 = dict(**d) works fine. So this seems to be a problem only for code that actually does def foo(a1, a2, a3, ..., a1000): pass 
when do they upload it on youtube? any suggestions? 
F# has been the thing that looked most promising after I did a lot of research... I want to prefer OCaml but there's too many iffy parts about it to really convince me. 
And there's a JVM-less Kotlin Native in beta.
It's unfortunate that I can't upvote this more than once. F# is a beautiful, cerebral language that's more expressive than Python, with an amazingly well designed type system and standard library. After loving Python for so long, I now can't write Python without wishing that I was writing F#.
Do the tutorials get posted as well?
Nim's compile-to-javascript story got a lot of improvements yesterday with their 0.17 release. Tons of bug fixes. Check out [karax](https://github.com/pragmagic/karax), a DSL written in Nim for single page applications. (specifically, here's an [example TODO app](https://github.com/pragmagic/karax/tree/master/examples/todoapp))
I feel you
[removed]
Rust is a functional language with hygienic macros and a predefined style. As languages go, that's as elegant as it gets. This is, of course, a matter of taste. But elegance usually refers to an expressive syntax that comes without compromise, and I think Rust qualifies with flying colours.
I normally suggest Rust because Rust is very good at the things that Python is bad at, but that doesn't seem like the ask here. Ok. Don't freak out on me here. You want a compiled language, optimized for execution speed, with a mature ecosystem and support for modern cross-paradigm expressiveness. You want...Java. **WAIT WAIT DON'T GO** Java has come a long way since 1.4. Java 8 pretty much supports functional programming now. The release date of Java 9 is a bit of a running joke, but it does look like it's going to happen this year (and not July, no matter what the announcement says), and then you get AOT to cut down on cold run performance issues, a REPL, and collections arguably more powerful than Python's. If you absolutely can't deal with the verbosity of Java, you might consider Scala so you can at least keep the Java ecosystem, but be aware that Scala comes with impressive transient memory needs to keep its execution snappy on the JVM. It's not that it needs that much more memory long term, it's that some of those methods create a lot of short lived objects that need free memory to be sitting around ready to use.
Get into Kotlin. Best of Python that converts to Java for Android development. It's beautiful
Ha! &lt;3
I feel this pain. Python is my first and true love when it comes to programming languages. I used it full-time at my day job for a total of about eight years, and loved it. I left a job once largely because they terminated my permission to use Python and asked for .NET instead, and when job hunting the use of Python is almost (but not quite) a requirement for me. These days I'm writing Ruby the vast majority of the time at work. I find Rails very Django-like and am fine with it, but Ruby itself is not my cup of tea. Idiomatic Ruby and idiomatic Python are very, very different, and while I of course write idiomatic Ruby, "Pythonicity" is much closer to the way things are structured in my mind. I tried Clojure for a while. I wrote an authentication microservice in it, and I enjoyed myself. I feel like FP in general is something that is a pretty good fit for me, and I felt the epiphany that I've heard of "code is data" - you don't really grok that statement until you've experienced the realization. At the end of the day, Clojure isn't really for me either. Clojure's strength is that it runs on the JVM and has access to Java objects and libraries; it's weakness is that it runs on the JVM and has access to Java objects and libraries. I found that a good deal of my time was spent writing wrappers around Java stuff so I could write the business logic of my app in idiomatic Clojure; basically mostly thinking "how do I represent this interface in a functional way" and implementing that interface 90% of the time, with brief periods of satisfying "Ah, this functional stuff is very elegant". My lack of direct Java experience got in the way somewhat, and to be honest I almost learned Java at the same time. To solve on particular problem with JWT token verification I had to simultaneously understand the library I was using (in Clojure), the library it was wrapping (in Java), and the inner workings of OpenSSL (in C). It was taxing, to say the least. The other big issue (for me) with Clojure is that it's very dense. Even after I got to the point where I could read Clojure code without having to look up what the functions were, I found that I couldn't *write* Clojure unless I was really "in the zone" and on top of my game. A night with little sleep would severely impact my ability to deliver the next day, as would a headache or a noisy external environment. When I was productive, I was very productive; when I wasn't, I got almost nothing done. Python isn't like that for me - when I'm not on top of my game, I can still bang out quality code, just a bit slower than I otherwise could and with a focus on implementing portions of an overall architecture that I had previous put together, or by breaking out a small chunk of functionality and setting aside the issue of large architecture for later.
Oh, good idea to test! :-) Okay, in that case it seems much less useful. Still, I can imagine it *might* be useful for certain types of generated code ... hmmm, it's pretty hard to imagine, though. :-) Edit: Okay, [Python issue 18896](https://bugs.python.org/issue18896) says that this affects things like the number of fields/arguments a namedtuple can have, which I can see could be a problem, particularly in generated code.
If I'm going to target JVM, why not go for Kotlin instead?
Ah, that `namedtuple` use-case at least makes some kind of sense. Thanks for sharing it!
I think I might go for C++, since I want to get into Arduino anways. I honestly can't read Rust, at all. Too many symbols all over the place.
You can use type annotations along with a type checker to get decent type checking in Python, btw. I use PyCharm and it will automatically highlight arguments of the wrong type as soon as you add the annotations. I also recently discovered the built in *typing* library, which extends the ability to express type requirements in the annotations. Python's support for type checking isn't as robust as many statically typed languages, but there's no reason to do without completely.
http://markheath.net/post/linq-tips-and-tricks https://docs.microsoft.com/en-us/dotnet/articles/csharp/whats-new/csharp-7#tuples https://docs.microsoft.com/en-us/dotnet/articles/csharp/whats-new/csharp-7#pattern-matching Also they beat Python to the punch at async/await https://docs.microsoft.com/en-us/dotnet/articles/csharp/async
It's like they say "there are the tools people complain about, and the tools people use". Learning C++ is pretty much never a mistake, despite the frustrations. Just make sure to use the modern features in C++11/14/17. Dan Saks has a few good talks on embedded C++ if that's what you're into.
Knowing Lisp is what made learning Python feel so natural to me. In my mind, they are the same core concepts, just with a different syntax and built-in data structures.
Take a look at [Plumbum](https://plumbum.readthedocs.io/en/latest/). There's no magic here, it still uses underlying standard library calls, but it wraps it into a beautiful and easy-to-understand interface (I can't stand the syntax look of Subprocess). from plumbum import ls ls('-la')
Refining a slack bot that gathers key product and analytics terms from a user; requests from the appropriate reporting API; and returns a readable/fun response. 
Some are already uploaded to the "PyCon 2017 " channel
It might be a fine language. I don't have any exposure to it. I wouldn't use it for a project with production needs, though. If someone who comes after you will need to maintain this, who will it be? I don't know much R or Go, but if I had to, I'd learn them. Kotlin, though? Not only do I not know Kotlin, *I don't know anyone who does*. I know someone needs to be an early adopter for anything good to take off, but that's for personal time, not business needs. If this is a project for personal use, I'd stick with Python. It's worth learning how to make Python go fast. Language runtime is usually not the determining factor in application performance.
Pyomo 5.2 (available starting 14 May) supports Python 3.6
Very clearly explained and easy to follow. I appreciated the orm example.
I'm learning Java right now. I'm struggling right there with you, brother.
Honestly I never get my hands dirty after looking at code examples, but I think I'll give Nim a try. =) In case you are still interested, I looked at a few languages for CLR and JVM but I think I don't want either (especially with Mono, I don't want to take risk due to patent issues. I found Go too opionated, especially the GOPATH madness and certain conventions that it enforces. Rust seems nice, but a bit too low level for my own purposes.
That's one iffy part that is getting less so by the day with .net core etc. while OCaml is still not nice in ways that have been common for probably a decade or more. Like multiple standard libraries, that alone seems absolutely crazy to me. 
Python has strong typing: you can't treat a string as a byte array. It does not have static typing, which is what you meant here: a variable identifier can be reassigned to a value of a completely different type. 
Congrats! A follow up post on your new job would be great. I dread the day I have to go back to Java. Friends and colleagues of mine enjoy it because its so rigid (static typing, functions are not first class citizens, etc..). I am not a fan of it for the same reasons. I'm curious to know your experience transitioning back and your thought process. Best of luck!
&gt; And LINQ gives C# some of the expressiveness of Python. This, LINQ really made a difference in how easy it was to get a lot of common things done. I think C# is a language that has matured in a good way, many of the changes over the years have improved the language usability quite a bit. Stuff that in the early days would take 15 lines of code can sometimes get done in 1. (LINQ expressions etc..)
Disagree. Some people want compiled languages with type safety.
Really surprised to see D not mentioned yet. D is like if Python and C++ had a baby. It has the modeling power of C++ with the expressiveness of Python, with ultra-fast compile times and powerful metaprogramming abilities. There's also pyd which allows you to embed D in Python or Python in D.
Thank you very much! For the application i'm looking to make someting "retro" looking with a simple GUI. Bassically i want to make an app that looks in a certain way and when i start it, i want to be able to log in and inside i want to input informations, like account passwords, emails, simple data etc.
mono has worked well for me on osx and linux. i have yet to migrate to the dotnet core but that's another option. only issue i ever had with mono was shredding it with too many async actors - blew up in threading after about 10 concurrent actors. but that's not something i do often (i was working on a project that had me scanning 1000s of websites simultaneously).
i have come to love and embrace the type inference engine. it's been wicked smart for my uses over the past several years. much more so than scala's. 
Well, look at wargaming they are able to do AAA games using python. It's not a pure Python games, but well, as far as I know current gamedev state everyone is using unity,unreal engine,cryengine etc. Which contains all the hardass things like physics, collisions so mostly you have to deal with game logics, not the hardcore things, most of them are already well done in those engines. But I might be wrong, I'm not really deep into a gamedev.
I have a burning hatred for Go and its community. Rust is on my list to learn, but I've mostly been happy with C for low level stuff. Most of my work at the moment is in Scala with some Python for writing test scripts. I haven't paid much attention to Nim (people seemed to have stopped talking about it for the past few months). It does have a nice Pythonic syntax. I'm not sure where I'd use it, though, especially with Kotlin and Scala starting to go native as well. 
python is cool as an interpreted language but i'd say go has a lot to offer as a system language. for example, builtin concurrency primitives, a simpler package management system, an equally if not more expressive syntax and more. 
If you'd only had horizontally flipped the face xD
Really, I want a language that has a stdlib like python, type system like haskell, concurrency like erlang, and compiles to a native binary.
Cool. Thanks.
I actually had it the other way at first but in my opinion it looks better with the direction you see above :) Here, look at what it looks like if I flip his face. http://i.imgur.com/0sP66Ei.png. The reason I think it looks worse here where he's looking to our left is first of all that it still doesn't match the angle so it doesn't look natural either way. The second and more important reason is that when he looks to our left it looks like he's not interested in the batsignal whereas when he looks to right it looks much more like he's paying attention. Thirdly I put it together quickly because I think half-assed things are funnier :P
Yeah, C++ always leaves you as free to fuck up as you want, but if you follow idioms in modern C++ it's rarely going to happen.
Yeah, I know, but thanks. It's both new and "provisional", so it's not really something I can rely on. (Especially since a lot of what I do deals with legacy code.)
I know python but only used for Ml. +1 for flask Do you know any good tutorials? 
Thanks missed that fixed now
This question gets asked way to much
I see your point :D only option: flip horizontal+vertical batman xD just kidding... Glad to know your thought process for this awesome image :P 
try having to use multiple languages at the same time :P
https://docs.microsoft.com/en-us/dotnet/articles/fsharp/tour
we are replacing matlab/c++ with julia in our lab. it is amazing.
I'm not an expert but the impression I've always had about games implemented in Python is that they use Python as the UI scripting language and perhaps the games rules engine (for turn based board-game type things anyway), but the graphics rendering stuff is all Python bindings to C libs. 
Cool. I'll give it a try. Maybe write a M20 npc random generator? If you ever in my nick of the woods, I'll buy you a beer. :)
Go because it follow the zen of Python (more than Python !) If html+css is acceptable as a gui... 
Challenge accepted
I don't really have enough experience to explain to you why, but it won't stop me from at least mentioning **Haskell** to you anyways. It's a functional language, based around lambda calculus, and kind of has that 'programmer's programming' air about it. 
Only thing I don't like about Nim is the philosophy. Although it has a Python-ish syntax, the development style tends to be more "do it however you want", there are various idiosyncrasies in the language (the whole `declared` vs `defined` distinction kind of feels like a hack to me), and the standard library is a bit of a mess (there are two regex modules, two argument parsers, the sockets API went through 2 major revisions over 3 minor releases).
what?
&gt;what? I said "Look at the built-in urllib, requests, or selenium packages (depending on the complexity of your bank's website)" 
I don't see anyone mentioning it, so I'll throw [Cython](http://cython.org/) out there. It's Python but with a few modifications to let you write your C extensions without C. I admit I haven't actually tried it, so I'd appreciate hearing anyone's experiences with it. You mention performance, and I guess it depends on performance for what.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [mbrubeck/robinson/.../**painting.rs** (master → 41f2a4f)](https://github.com/mbrubeck/robinson/blob/41f2a4f8ecd43e938ffb37af5294501163d890cf/src/painting.rs) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhs91rs.)^.
Hey, that would be fun. I'm actually giving a little spiel about my reddit bot in rooms B110-111 at 4pm before going to the set_trace talk if you're interested.
VS Code, Atom, Xamarian, and now VS for Mac should cover the IDE story (if Emacs or Vi aren't your thing). Lots of the community develops off of Windows, though knowing .Net will always help if you get stuck in the rough. For VMs you've got Mono, and soon enough .Net core which will be cross-platform. Mono is battle-tested but bumps into the occasional compatibility issue with main .Net. .Net Core is immature *right now*, but once it's realized I think the majority of the awesome F# community will focus on it, leaving a first class cross platform story. 
I think there are arguments for OCaml over F#, from a pure linguistic standpoint. For most of us though, you're hiring either ".net" devs or "java" devs, so F# is just a no-brainer.
&gt; sofi-unity3d explores how to control a Unity3D game environment through sofi by using WebSocketSharp as a client inside the game world. &gt; &gt; https://github.com/tryexceptpass/sofi-unity3d
Okay thanks, that's good to know. Just seems odd to me since before the constants b/d were inserted it computed with no problems.
This looks like a good start. Thanks!
That's awesome! I should edit this to expand the description, I really mean anything you do often in your life, rather than just work-related things. Do you have a video? 
I don't have a video but I am working on something huge that should help me save a ton of time. I came up with the idea when I was standing on my toilet hanging a clock. I slipped, hit my head and was knocked out. The idea came to me in a vision. I know I probably sound crazy.
You can go and watch talks from previous and current Pycons. I find it very helpful. My favorite one is 'Beyond PEP8' from 2015.
Julia is 5 years old. Go is 8 years old. They're all new programming languages still, in that they're not established the way Python or C++ are. I still like all three (Rust, Go, Julia), though, but if you're looking for a first low level compiled language, you should go with C++, then Rust. Same if you want a numeric interpreted language you should learn python's numeric stack then Julia. Etc.
This sounds pretty crazy.
Here is the [video](https://youtu.be/3isQI0nXQRE?t=2m23s)
There's a number of ways you can approach this. For example, if your bank sends you a statement at the end of every month, you can go and pull it from your email with a script. Otherwise, you'll have to investigate whether there's a bank API that you can use(requests library) or use web UI automation tools (Selenium library) to create a script that will log you in and press button to download a statement. I don't think web scraping will be the most convenient way here, cause you'll definitely need to authenticate to get the info.
That's ok, I guess I'll have to find another way to get my free Russian passport.
Yes! We'll also live stream using Facebook and YouTube.
got a tutorial or guide to learn that selenium thing? that sounds exactly what i am looking for!
Great Scott!
Nice, I'm guessing you're a sysadmin?
as I said i am totally new to progrmaming i am not sure what this means...
&gt; It starts off with a robotic arm that pics up a dog food can from and rotates 180 degrees.... This was the point where I figured it out.
Not supporting Windows 7 doesn't help. That came out in 2009. You also need stable releases and they're very clear that the code is alpha level. Also, I'd never heard of it.
This is more general programming and not really related to Python 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Nothing's better than PyCharm
Well let me rethink that point and say first class functions aren't as important to them as they are to me. I may catch flack but I'm having a real love affair with JavaScript right now. If you're disciplined you can do incredible this game with it (Ramda).
Bunch of new videos are being uploaded to https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg right now. 
I've been following the Python world for almost 15 years and I've never heard of it. There are plenty of smalltime editors out there, typically one-man projects that are eventually abandoned; this is probably one of them. Try contacting the original author and see what he says. Personally, I think python support is so widespread in mainstream editors, and specialised editors are now so good (PyCharm, Wing etc) that, realistically speaking, this sort of niche project has very small chances of ever gaining traction.
I'm building so i can learn how ml models that are built using frameworks are added to applications. So i wanted to build everything. 
and can i jump right into this?! or is a basic programming a must ? like khan academy or codeacademy basic python tutorial?!
I've dabbled a bit, but most of my work is one-off IO-limited stuff, and the libraries just aren't there for Julia. In Python, I can express a multi-terabyte computation in about six lines, and Xarray+Dask make it more efficient than my old hand-coded versions (of thousands of lines and a week of debugging each). Particularly for analyses I do once, the sheer expressiveness is impossible to beat!
What are some other use cases?
Keep in mind they gouge you after that, unless you are running reserved instances.
I run on [Heroku](https://www.heroku.com/python) for free. 
Ouch. I can see that. I agree, Python is a stronger choice if it's one-off stuff, particularly if Julia doesn't have the libraries (yet). I'm rooting for it to mature, because it presents a really clever solution to the expressiveness/performance conundrum. I'll have to look up Xarray and Dask, I feel like I've heard of them, but it's impossible to stay on top of all the Python libraries!!!
Many people recommend Kotlin. Do you know if there are any issues with this language or uses cases where it is a really poor choice? 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Java offers no advantages over Python? Which planet are you from? :) Also how "Java and Ruby" are in one basket? 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Forgive me as I haven't had time to read the article, but can this technique be used with Craigslist?
If you want to learn how to use programming languages in practice, you should start by improving your problem-solving skills (or if I should put it simply "learn to use google"). I believe you'll get a ton of useful info if you just search for 'python selenium tutorial'. Not trying to be arrogant, but actually helping you to get started by this advice.
A specific OS, or does this have to work for any OS?
Better buy it VPS server in [linode](https://www.linode.com/) or [digitalocean](https://www.digitalocean.com/), make daemon for your app and ejoice
Written May 2017, uses version 2.7
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I'm currently switching from vim to PyCharm, It's not that vim is not a good python editor, but PyCharm understands python, it's more than a text editor 
¯\_(ツ)_/¯
Why do you say that? What features do you like about it? I've used it but found it seemed too bloated for my liking. 
http://xarray.pydata.org/en/stable/dask.html It's basically magic, and can scale from one thread to a ~thousand node cluster :) It's also unlikely to go away, because Pandas now converts to Xarray objects for 3+ dimensional data.
I don't work in a world of Java vs dot net so I don't really care about that. I think there are obvious arguments for f# from a linguistic standpoint. Like no weird inferred semicolons for example. 
No, `return` is keyword for python to stop the current function and return to wherever it was called from. I'm guessing you are thinking of the `continue` keyword, which causing python to start again at the top of a loop: while True: if some_condition: continue # skip the rest of this iteration and start on the next one --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Did you actually tried to write something in Java? 
But not beta?
It does work on Windows 7, at least on my system.
NodeMCU boards (esp8266) can run micropython. If you are just reading sensors and doing some actuations they could be a good choice. Micropython + MQTT is a very fun combination. 
Django and flask come to mind. Both are production ready and are used in a lot of places.
That's what happened indeed, thank you for spotting ;)
Try [this](https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8). I heard it's quite good. I am going to start this one myself in a couple of weeks.
Which print Statement syntax works in both?
Don't force people to update. Have a check and then spit out an error message that tells them to update.
There's plenty of compiled Python stuff, numba is great. Also the difference in speed is often negligible, furthermore Python is has great libraries written in fast languages so that you don't need to worry about compiling it, look at numpy!
So it's basically a sideways classic shmup? I like that you only allow movement along one axis.
&gt; This philosophy is called 'Convention over Configuration'. That's one opinion. Django has another.
First problem solution is weak references. I don't get second problem. Network stream is also global for your case, publish/subscribe is also one-way pattern. I don't see any difference between. Give an example please.
Python on wheels comes to mind, re spawning just in these days! http://www.pythononwheels.org
Spot instances also work great if your application can be interrupted. You can have it automatically be replaced to an on demand instance if the spot price raises too high. Reserved instances are a commitment but if you need to you can sell them on the marketplace if you end up needing to shut it down.
Take a look at Nuitka :) [Nuitka home page](http://nuitka.net/) [EuroPython 2015 - Kay Hayen - The Python Compiler ](https://www.youtube.com/watch?v=a8RRbT4BTEw) 
Pretty funny. I just tried it with /r/atheism and /r/Python. The result was /r/firstamendment /r/cyberlaws /r/tech.
Maybe not a best language to dovelop UI and games, but almost all enterprise software written in Java, big data processing there are two main players java and c++. Even for gui there probably was a reason why Google choose Java API.
Haha yeah there are a bunch of interesting connections to be found! 
Python is compiled. The majority of the code you use is compiled, but not all of it. Python is also not slow due to the non-compiled part of it. It's slow because it's an interpreted language. It's also largely fast enough. I had a code that parsed a 2 GB file and took 45 minutes. I used numpy properly and micro optimized it and got it down to 4 seconds. It's fast enough. If you really have slow bits, you can write it in C/C++/Cython/nutika/pypy and compile it. The point is you only do that for 1% of your code. Python is optimized for adding features to your code, not runtime. I consider myself very good at Pythom just delivered the messiest package I've ever written. It's untested, disorganized, undocumented or with incorrect documentation, probably doesn't still work on much of it, but it solved the problem of the day, which allowed us to solve the 3 year problem. 
Stifle n00b.
You can use libusb1 - it has Python bindings. 
RoR apps are difficult or dangerous to change? News to me ¯\\\_(ツ)\_/¯ 
My try with /r/leagueoflegends and r/guitars gave "None" as one of the links. Fun project though.
/r/learnpython this question is retarted
is this from the guy that made another html gui toolkit instead of contributing to remi or something?
You mean append one file onto another? Open the big file in append mode and add the contents of the small one. with open(big_file, 'a') as f_out, open(small_file) as f_in: f_out.write(f_in.read()) If the file to be added is large (more than 100 MB or so) you may want to do that in a chunkwise fashion to avoid swamping your memory. --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
Yes I know about lsusb But I'm trying to display if a iOS device is connected in a gui(tk)
CPU seconds are only the same as runtime if your code uses 100% of a CPU. If it does, rethink/rewrite your code. Generally a bot should use much less than that. How much CPU is yours using? The suggestion to just stick a sleep() call in your mainloop is a good easy fix, though I guess you should sleep for at least 22 seconds each time.
i didn't get the required output. i tried with this code f = open ('in1.txt','r') fout = open ('hql1.txt','w') text = f.read() fout = "hql1.txt" fout = open('hql1.txt','w') for item in re.findall(r'CREATE[^;]*;',text): print &gt;&gt;fout, re.search(r'(?&lt;=\.)\w+',item).group()+'.hql' print &gt;&gt;fout,(item) and its giving output: emp.hql create external table db.emp(id int,name string) row formatted fields terminated by ',' location 'hadfs:.../'; now i want eactly input1 file emp.hql and input2 file emp.hql and so on. Please give me a hint how to achieve this. 
Because it would no longer be Python. It would be useful for you to take a programming languages course so that you understand the implications of your suggestion.
I already did. I can't figure out your example beyond that. Take this to /r/learnpython, and be sure to include your formatted code and a complete formatted example of what you want. 
 lsusb | grep name_of_device would do that. 
Depends what you mean by add. I wrote a spline interpolation code back in the day to compute the coefficients at a given point. When I was in grad school, my very smart professor said it was impossible; it's just tricky. I then did a linear combination on 30 matrices using those coefficients. At some point, you'll reach the limit on the maximum number of open files, so you might have to code for that. It was 1000x faster than the previous element wise problem on small matrices. It was N^(2+M). M was typically 30 to 100. 
Did you try with a directed graph instead of a undirected one ?
Thanks! 
I think for a short ~1hr class, everything that could've been covered, was. Like it was said during the class; there is no written standard for this stuff. You can use custom-auth, or certificate-based auth.. Completely up to you. IMO the class was great for someone who is new to creating RESTful APIs using Flask, and wanted to learn about simple authentication (for example; me). It wasn't too complicated to grasp the concepts, and I walked away with a lot of new knowledge. To each his/her own!
Python is compiled
Python is significantly more slow because it only uses a single core, then it is slow because of "not compiling" it.
I didn't but it I think it would be easy to implement, and might have more interesting results. But many pairs would not have a path in a directed graph
I recently started doing research for a professor at my University and we needed to collect data from about 10,000 pages of the same website. I've been programming for a few years now, but I'm new to Python and the entire idea of web scraping is very new to me. Unfortunately my professor had no idea how to approach it either, so I was on my own. The hardest part is that I have to scrape comments from a JavaScript module, and those familiar with scraping know that JavaScript isn't rendered using traditional methods. (This is just what I've gleaned from research.) So I ended up creating a virtual Linux system running Python 2.7 and using BeautifulSoup and Dryscrape. So far it's worked really well and I'm really happy with the results. :) 
You're right, edited.
How many more of these do we need??? Seems like there is one every week
I agree as a general principle. I felt as a tutorial it made more sense to import the libraries as I used them. This is the first one, so we'll see how it goes. 
It understands my code and does really good static analysis without me having to tell it everything.
I know exactly what you mean. I was going to move into a less expensive but nicer house, but the door knob was a funny shape. Noped right out of there. You gotta have standards.
I always use this, I'm glad.
You've asked an interesting beginner question :) and I hope you read all these comments people have left you because you have some great answers here. And I'll just add that if you run with `pypy` then it does get compiled (to raw assembly)
Not if you play nice and have a long delay between response. But it is still a machine and not a set of eyeballs looking at the HTML, and that adds no value for companies that depend on human clicks. 
I never understood why eyeballs and clicks generated value for websites. People are more and more immune to ads for everyday passes.
Not this year. Last year I went to that and enjoyed it, and I imagine it was good this year too. But I went to the grokking the GIL talk instead, and while it was alright, it didn't dive as deep as I hoped it would.
The Python interpreter is compiled. Programs written in the python programming language are interpreted. 
working on a project which I've named *takamaru* ([meaning](http://naruto.wikia.com/wiki/Takamaru)) GitHub: [https://github.com/vipul-sharma20/takamaru](https://github.com/vipul-sharma20/takamaru) Build your own email/sms alerts and newsletters. Get customized email/sms alerts and newsletters of desired Reddit posts and GitHub repositories. These customizations can be like choice of subreddits, frequency of alerts, desired keywords etc.
I would make a base class for the scraper to group common things like your fetch methods. Also, might be a bit less verbose​ to keep the session object in the class attributes. Other than that, it's a good tutorial!
Web2py
Have you seen PyUSB? https://github.com/walac/pyusb
You can use PyQt with Qt Designer.
I've played round with Sanic and found it to be pretty good.
Hettinger's talk about the dictionaries today was excellent. I would highly recommend watching it if you're interested in how data is stored in Python under the hood.
apparently I missed them all. I got blocked from a website I needed stuff from because I was sending a request every second. Not that it would change much, since they don't have a robots.txt, so I don't know what frequency they won't block.
Always a Django hater around here. Lol
thanks, i searched how to use the json strings and arranged a part of the code. However with some urli didn't understand how to pull out the part that i want. when the string is like this `strg = {"status":true,"data":0.04469625320722456}` i used a = json.loads(strg) a['data'] and all is ok. when the string is like `strg = {"status":true,"data":{"price_usd":129.216,"price_btc":0.06180004}}` how can i extract only the value price_usd? i tried this way: a = json.loads(strg) b = json.loads(a['data']) b['price_usd'] but it doesn't work
You don't have to load json twice. Something like this should work: a = json.loads(strg) b = a['data']['price_usd'] print(b) e: noticed this line: `stringa = poolbalance + ' ' + hashrate + ' ' + value_usd + ' ' + str(ETH_EUR) + ' ' + str(bal_totETH) + ' ' + str(totEUR)` you might use: `stringa = "{} {} {}".format(poolbalance, hashrate, value_usd, etc...)` check: https://pyformat.info/ for more 
The more info, the merrier as far as I'm concerned
Consider creating a context manager for your user_waiting switch, so that if an exception occurs in user code, they don't spin forever.
&gt; I heard that wxPython is good. Should I use that instead? You can. It's good, too. No licensing issues, applications look native because they are. 
[Design Patterns](https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612) [The Art of Computer Programming](https://www.amazon.com/dp/0321751043/_encoding=UTF8?coliid=I29NBLZI8P7T73&amp;colid=1F4UNCK38C3G1)
metascraper
Remember, Craigslist has a very aggressive terms of use. Crawling is unacceptable. &gt;USE. You agree not to use or provide software (except for general purpose web browsers and email clients, or software expressly licensed by us) or services that interact or interoperate with CL, e.g. for downloading, uploading, posting, flagging, emailing, search, or mobile use. Robots, spiders, scripts, scrapers, crawlers, etc. are prohibited, as are misleading, unsolicited, unlawful, and/or spam postings/email. You agree not to collect users' personal and/or contact information ("PI"). https://www.craigslist.org/about/terms.of.use
Here in Vancouver, 99% of home rentals are on Craigslist. Craigslist has gone after other websites which use the information 
A toolkit to make asyncio easier to use. Right now I'm improving tests for my implementation of go-like channels and "waiters", which is a class that I found by reading asyncio's source for Queue, Event, Lock and Semaphore. Basically those classes keep track of who awaits them by creating a future each time they are called asynchronously and putting it in a queue (which is often called "_waiters"). Interestingly, this intermediate abstraction between the synchronous and asynchronous worlds could implement backpressure by putting a limit on its internal queue and raising an exception when it is awaited by too many coroutines. Creating this "Waiter" class also makes the code much easier to follow, while in asyncio's source it's rather hard to follow.
I came across a blog post about using Scrapy and it taught me a clever use of css selection + another selector that was extremely quick and easy to isolate what you want to grab.
Thank you for you guys recommendation. I would read all of the books you recommended. 
I'm trying to convert an entire MATLAB codebase into Python so that's fun. I've never used MATLAB till last week. 
The reason BeautifulSoup gets used more is because a lot of html is malformed (eg. missing closing tags, etc) and a strict xml parser will choke on it. BeautifulSoup is much more forgiving.
Push notifications. You have a web app that needs to display near real time updates: stock prices, chat, multiplayer games, and similar. With an async framework you could do something like this # web browser would connect to http://server.tld/notify_me def notify_me(self, request): def on_event(msg): #A message arrived to the message queue request.write(str(msg)) request.finish() #add a callback to a simple message queue service (there is only one message type). some_message_queue_service.on_msg(on_event) return NOT_DONE_YET #Tell the async framework to keep the connection open The real version of that had a few minor details (what happens if remote client disconnects, timeouts, etc) but that is the gist. With a normal http web stack, you could DOS (denial of service) yourself when the nginx/uwsgi thread pool becomes exhausted. With the above using epoll, you can rack up a significant amount of pending connections before things go really bad. 
There's more to contend with than just thread overhead that can slow you down. Multithreading for performance is not easy. 
Rust was designed because of applications, namely web browsers. It's certainly suitable, and I think it's a valuable language to learn. However, _Rust is mostly safety_. If you're working on a problem that does a lot of I/O and crashing is acceptable, you'll have bad time. 
Isn't Julia JITted? 
If you see an interesting open space, go there instead of any talk. Open spaces are not recorded, so if you don't go, you'll miss those discussions forever. Some of those discussions are incredibly good. I went to Logging, Reliaibility, State Machines, and Mypy, and wish Async and a few others didn't happen at the same time.
You need 72 pencils to do that cool pic ..... and a bit of patience
Since you're using requests you can do page1.json() to parse the JSON instead of JSON.loads in addition to what's already been said
[Actually, the picture is not taken by myself.][1] [1]: http://www.georgehart.com/sculpture/pencils.html
Cool. The demo session quickly helped me understand how to use. 
I love this guy.
Skimming through the video it looks very similar to [his other talk](https://www.youtube.com/watch?v=p33CVV29OG8), is there any differences?
It is true. You could make it harder by adding session dependent and even a stateful encryption, and compiling your code with obfuscations. It could enentually be reverse engineered though.
The code runs on the user's computer. They can just add a trusted SSL root cert, then proxy the app's traffic through something like [mitmproxy](https://mitmproxy.org/). You might be able to pin the certificate in the client's code to defend against that, but the user will still be able to patch out the check if they want.
10k pages it's a quite large amount of web scraping. How fast Dryscrape in comparison to using Selenium or Splash?
http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame
You are on Windows, correct?
Then just `pip install [path to the downloaded .whl file]`.
I want to increment a value of a counter in the server using the post request. For each post request counter increments by 1. I want to make sure that no one can spam my endpoint.
Then you need some sort of authentication mechanism. Log in, create a session, and require valid session and login for the counter POST request. You should also add CSRF protection.
I do use the command line all the time which is why I want to understand how this is different than clicking my dos shortcut in my quicklaunch menu. You mention 'persistent'. Does that mean you can hide and show it on demand? If Ctl+Alt+T brings it up, then what hides it? The Github page says that: `When done, type exit to close the console` but that didn't work. 
What were you grabbing that you needed data every second? 
This is an XY Problem. You're wanting to do X (prevent spam calls) but you're asking about Y (limiting the request to only your cli app). I'd suggest looking about token authentication and rate limiting. The way rate limiting works is by tracking the number of calls made over a period of time, and if that number reaches some arbitrary limit set by you, then all future calls during that period fail - preferably with a 429 TOO MANY REQUESTS status code and include a Retry After header. For example, you set the rate limit at 100 calls per hour. If a naughty client tries to make 101 calls in that hour, their 101st call (and all other calls in that hour) fail. 
Wanting to handle more requests with fewer resources. Since django and flask are synchronous frameworks (short of employing threads or gevent) you need to run them multiprocess to get concurrency. With aiohttp, twisted, etc, you can run one instance of your app that can handle multiple requests at once. That's not to say that aiohttp or twisted are a silver bullet that'll fix resource issues for you, you should still run multiple deploys of them and load balance in case something happens to one of your boxes. It's just that they can handle more with less. The flipside is that since Django and Flask are typically multiprocess, they can handle blocking actions much better. Whereas event loop driven frameworks will fall over in this case. Celery would be useful for handling blocking IO and CPU bound work. Just punt the task over there. Alternatively, there is the ProcessPoolExecutor in concurrent.futures you can use to punt this work as well. 
To get this to work, all you have to do is make the settings.json file like [this](https://gist.github.com/chand1012/0dab09bc7fdeeb58c247c19b7ea6e8c6) and place it in the 'bin' folder. If you're having any other trouble, just ask. This program is in its very early stages and needs some testing still.
I believe the point here is that POST requests generated using something other than your CLI would not be forgeries-- they would be legitimate POST requests. 
Iirc pycon talks' slides are made available online later.
I'm using in production aiohttp and so far so good. But there is another one I have my eye on and it's 🌟 [Star](https://github.com/tomchristie/apistar) by Tom Christie (Django project). Not sure how much is it ready for production deployment.
[RTFM](https://www.crummy.com/software/BeautifulSoup/bs4/doc/).
You can also use it without Designer?
So you now have an answer, but if you want help in the future please tell us exactly what happened. "given me error message in the command prompt window" is about as much use as a wet fart in a thunderstorm.
I pretty much let my minions do all my work.
School project that includes openGL and a tcp server. 
About 99.85% of the time I think "oh, I will scrape a bunch of pages for the content I need," the site generates unique session tokens and uses dynamic AJAX queries you have to call JavaScript to build up in order to be of any use. The only scraper that can follow that mess is a web browser.
Thought that was the case, just need to figure out how to update the widgets as the program goes on. I used to label them all like that but then I started learning papyrus for skyrim modding and all their variable are named like that, hard habit to break 
Thanks for the advice, never really asked for help before, usually a quick Google sorts things out 
/r/learnpython Try storing the number of cubes in a variable then adding 1 each time you create one. e.g. def create_cube(...): ... cube_count += 1 cube_count = 0 create_cube(...) create_cube(...) create_cube(...) print(cube_count) # result: 3 
def Crystal(pos): global Num Num += 1 glBegin(GL_LINES) for edge in edges: for vertex in edge: glVertex3fv(vertices[vertex]) glEnd()
Automate the boring stuff is a great resource. It has actual practice and you can find the answers online. If you have no degree related to coding you'll need to build a github, but even if you do have a good degree you'll need a github anyway likely. Work on your algorithms too, for those you'll need pretty good math skills.
I agree with your sentiment. For non-compliant libs there's `loop.run_in_executor` which uses the executors found in concurrent.futures. However, if I need to schedule reoccurring tasks, I'm probably going to reach for Celery (assuming cron isn't enough), as there are simply too many corner cases that they've thought of that I would get terribly wrong. At that point, I'd probably start punting as much CPU bound work as possible over there as well. Especially since there is apparently going to be an asyncio bridge in Celery 5.
You can prevent your users from accidentally using incorrect clients by inspecting the `User-Agent` header. This is typically done for the benefit of the user, and the server application will inspect the user-agent to try to determine what capabilities the client has in order to ensure that content is properly rendered. So for an example API, we can require that the client present `fooclient/X.Y.Z` in the user-agent header, where `X.Y.Z` is the client version: #!/usr/bin/env python import requests __version__ = '1.9.0' agent = 'fooclient/{}'.format(__version__) resp = requests.post( 'http://localhost:5000/foo', headers={'User-Agent': agent} ) print(resp.json()) Notice that it is absolutely trivial to "spoof" the user-agent and say that you are something you are not. This is common practice for web browsers, where there has been a sort of accidental arms race. Web sites might start requiring something like `Mozilla/5.0` to enable some nice feature, so web browsers will then add it to their user-agent. This results in modern browsers sending comically long and complex user agent strings. This is only useful to either help protect the user, or within a very trusted environment. For example, your API is limited to team members or operators and you want your organization to use a common client - you can check the user agent to ensure no one has accidentally violated protocol and pass them back information on what they should use. You can also use the user-agent to ensure that team members are not using outdated clients. Flask makes it easy to write a decorator function to apply to endpoints. Here is a simple example that searches the user agent for `fooclient/&lt;&lt;version&gt;&gt;` and will return 400 if the client is incorrect or out of date: from functools import wraps from distutils.version import StrictVersion import re from flask import Flask, request, jsonify, make_response app = Flask(__name__) MIN_CLIENT_VERSION = '1.0.0' def client_required(f): client_pattern = re.compile("fooclient/([0-9\.]+)") @wraps(f) def decorated(*args, **kwargs): result = client_pattern.search(request.headers['User-Agent']) if result is None: error = jsonify({'error': 'This API only supports fooclient'}) return make_response(error, 400) try: version = StrictVersion(result.group(1)) except ValueError: error = jsonify({'error': 'Unknown version of fooclient'}) return make_response(error, 400) if version &lt; StrictVersion(MIN_CLIENT_VERSION): msg = ( 'Client version {} not supported, upgrade to {} or later' .format(result.group(1), MIN_CLIENT_VERSION) ) error = jsonify({'error': msg}) return make_response(error, 400) return f(*args, **kwargs) return decorated @app.route('/foo', methods=['POST']) @client_required def foo(): return make_response(jsonify({'ok': True}), 200) If you want protection against malicious users who can't be trusted not to spoof the user-agent or modify the client, then the simplest route is really to improve the server or place it behind a reverse proxy that can perform rate-limiting or other measures to block malicious users without worrying about the client that they use. 
I just watch it at two times speed.
This adds 1 to num everytime that function is called
But it should draw a cube everytime the function is called, right?
Anyone know when they will appear on http://pyvideo.org ?
Oh poor me, someone is providing useful free content, but it's not in the format I prefer! Sigh
It's on the sidebar of this subreddit!
I haven't tried either of those, Dryscrape is going to take about 5hrs total. As I said I'm really new to this, but I will check out those alternatives before investing more time in Dryscrape.
That is what happens when a programmer does design work for his own blog. I can save the situation - his two front legs are hidden because he is busy crawling.
I made a automatic brightness script for my macbook running Arch Linux. All auto-brightness do not consider the brightness of the screen, only using the Ambient Light Sensor. My script would take the average screen color, the ambient light sensor value, and then scale for a better brightness. White screen -&gt; darker, dark screen -&gt; brighter, also taking into account the outside light of the sensor. But yea, I also needed to often capture the screen. Unfortunately, the script that I found and adapted is only for linux :( I mainly replied just to support you on the quest to find a fast screenshot taker... I was surprised it is quite an issue (and we cannot just read the values from somewhere). Anyway, the script I found was this: https://gist.github.com/bozdag/9909679
Also successfully using aiohttp in production, proxied behind nginx. I do keep looking for one of these frameworks to work like nginx does -- provide ability to spawn a thread (or 2) per CPU and then use async within each thread. 
...why does it matter if they're on youtube?
Yes, you can do it this way. First declare a file object: myfile = open("somefile.html", "w") Then you modify the previous loop so it looks like: for item in titles: myfile.write(item.get_text() + "\n") This code will create a new file named somefile.html and add the contents of your anchor tags in separate lines.
The point is when the parser hits those kinds of errors BeautifulSoup​ will handle them so you don't have to write code to handle them yourself.
Couldn't even get into this talk because the room was at full capacity. Hettinger talks are always great. 
This looks like a really neat project. Does the speech​ to text work offline?
How is this different than a make file?
Thats exactly what I mean - hitting the hotkey should make it appear and then hitting the same hotkey again should make it disappear. Note that I havent used this specific terminal app so maybe it doesn't work right on windows or just was implemented poorly in the first place; I'm just describing the overall concept of a quake-style terminal. 
Thank you. I was skimming the docs to find that out but couldn't find it.
I'm doing some TPB scraping this week. I'll be passing that info through to some other external APIs to generate some very nice 'TOP' lists. All data is going to be pulled daily and pushed up to mongo. Think torrent freaks weekly top ten films on steroids with extra info and more categories.
If you don't already know design patterns, the GOF book is completely useless.
You can work on the user agent but without any garentee 
It is harder to download/listen in the background, Youtube makes downloading hard
Huh, okay. For the record, I use http://dirpy.com as my youtube downloader (if I'm not using `youtube-dl`) and it works great for saving videos and audio from videos.
Nope, will not work. file.write(url.get_text() + "\n") ValueError: I/O operation on closed file.
big ups and thanks for this hint! but how do you add two conditions: if there are two different ways a link may work. how to make Python detect the way link is truncated?
Yes, related to truncated hrefs. The question is that there are two ways links may be truncated, and thus there are two different initial sections of a link to be appended. You can not use one and the same base_url to two different versions of truncated appendixes of links.
It didn't *need* to be every second, it's just that I assumed that was a reasonable wait time. And it was song lyrics, to use as training data for a language model. 
You could store the person / name as a variable then use .remove() or .pop() to remove the name. Also r/learnpython
It's worth carving the time to listen to Raymond. He is a world class teacher, and I guarantee you'll walk away happy.
To expand, this is because typed input in the terminal is not the same as piped input. If you want to keep the process around, you should look into the `pexpect` module: &gt;&gt;&gt; import pexpect &gt;&gt;&gt; upper = pexpect.spawn('tr a-z A-Z') &gt;&gt;&gt; upper.send('hello\n') 6 &gt;&gt;&gt; upper.read_nonblocking(size=10000) 'hello\r\nHELLO\r\n' &gt;&gt;&gt; upper.send('world\n') 6 &gt;&gt;&gt; upper.read_nonblocking(size=10000) 'world\r\nWORLD\r\n' Although I agree with /u/Rhomboid: there is no reason for you to do this. There is nothing `tr` can do that you can't do faster and neater in python / re. Edit: for your case: import pexpect class Pipe: def __init__(self, args): self.proc = pexpect.spawn(' '.join(args)) def __call__(self, data): self.proc.send(data + '\n') try: out = self.proc.read_nonblocking(size=10000, timeout=.1) return '\n'.join(out.splitlines()[1:]) # remove the input line except pexpect.TIMEOUT: return '' upper = Pipe(['tr', 'a-z', 'A-Z']) hello = upper('hello') world = upper('world') print(hello, world) 
I have a little script that uses the gps in my phone to calculate the nearest train station on my route home from work and writes a text message to my wife with an estimated time of arrival.
So, what do you do for a living?
The moderator who managed that room is rather infamous for not letting people into a talk if the are no seats.
I still don't know why they chose to put a Hettinger talk into that room, given there were bigger rooms. Brandan Rhodes talk was in one of the bigger rooms so it was a lot easier to get into that one. I'd planned to get to the Hettinger talk early but rolled my ankle the night before, so I was late getting to it due to being a bit hobbled. 
But a little python program makes it easy: $ youtube-dl 'https://www.youtube.com/watch?v=phe1s6p38gk' [youtube] phe1s6p38gk: Downloading webpage [youtube] phe1s6p38gk: Downloading video info webpage [youtube] phe1s6p38gk: Extracting video information [youtube] phe1s6p38gk: Downloading MPD manifest [youtube] phe1s6p38gk: Downloading MPD manifest [download] Destination: Jean Baptiste Aviat Writing a C Python extension in 2017 PyCon 2017-phe1s6p38gk.mp4 [download] 26.9% of 207.67MiB at 2.58MiB/s ETA 00:58 
If you need to keep a lot of open concurrent connections, like websockets for example
I wouldn't use sanic before it proves that it can work in real world. Right now it loads whole request body into memory before processing it and it does it even for 404 response. It is very easy to flood server memory and effectively dos it
Ya, though I thought he was Australian.
Most of us who were in the talk just stayed from the previous one. The room was probably 80% full before they even opened the doors for people coming in. Sorry to hear about your ankle :(.
Oh, and a concrete example of where you'd want this is with my [wrld](https://github.com/ninjaaron/wrld) command. You can use it to build commands in an iteration context where arguments can be piped to an external command before the command runs. so you could do something like `ls | wrld move {} "@tr a-z A-Z"` if you want to uppercase all the file names in a directory. This version spawns a new instance of `tr` every time, which is slow. There is another version: `ls | wrld move {} "|tr a-z A-Z"` &lt;- this will use a pipe and run all of stdin through at once, but it waits for the the process to exit. This would be bad if the `ls` command produced more output than could fit into RAM. furthermore, if there are filenames with newlines or something in them, it will completely screw up everything, since the current approach is based on splitlines() and doesn't pair the filename with the output until after all output is processed. So, that is a real-world use.
agreed.
Star looks extremely interesting, but I also wonder about how far along it is.
I've made fairly extensive use of it in some of my projects. It can truly make an epic difference in performance, but it does take work and understanding what its doing to get the maximum benefit. What I personally like is that I can mock out a (complex) algorithm in python (and numpy) and be sure I am doing the right thing, and then take that code and cythonize it and then slowly add types and rewrite portions to build something that is fast. A recent problem I was working on saw me mock out an algorithm that had a runtime of around 30 minutes -- long, but easy to write and I could at least see that it was doing the right thing. After some (a non-negligible amount) of work I had modified it into a cython version that ran in under 5 seconds. That's a pretty dramatic runtime improvement.
I think I will give aiohttp a try. I would love to check in with you after you have given Sanic a try to hear what you think! Thanks for such a detailed response.
Working on a few scripts that use Google's Directions API to get travel times from my house to a few locations scattered around the state so that I could chart the worst times for traffic/etc. Parses an XML result from the Directions API and pulls out a value for "duration in traffic" every ten minutes and saves it to a PostgreSQL database, then uses matplotlib to generate daily charts. Doing this on a Google Compute VM running Debian so I could schedule it with cron and forget about it. Working pretty well so far, I think. What has taken the longest so far was figuring out how to apply some kind of filter/smoothing to my plots from matplotlib - I am definitely not a mathematician and I'm VERY thankful for stackoverflow.
I figured it out! But posting in a public forum like this would spoil everyone's fun. If you need a hint I'd send the course author an email. He seems like a nice enough guy. 
I don't. Whenever I have a need for a solution that would be too slow in Python, I write a module in Rust that does it way faster. Why Rust? Portable, way safer than C and pretty much the same performance as C.
I feel like I've learned more watching Raymond and David Beazley talks than I did in 4 years of college. They're fantastic teachers that really understand their subject. 
It's certainly more work unless you're already familiar with Rust. Cython can be learned somewhat incrementally from Python.
I used to have an unusable amount of stuff saved on Pocket to read later, now I use Diigo for a small annual fee and have a script that randomly or based on a keyword selects 5 items and re-saves them so they're at the top of the queue so I can read them or delete them if I'm not interested any more. I'm working on a way to trigger the script remotely from my mobile phone.
They also understand how to effectively communicate the really subtle nuances about their subjects - those little details that, if you spend enough time working through them, they'll pop out as "aha!" moments. Every time I watch Raymond or David I have a dozen or so of those "aha!" moments, and my fingers never even touch the keyboard.
Ooh, I love this idea. I need to do something similar with all the reddit saves I have.
Mostly watchdogs and remediations for flaky and buggy stuff at work.
GMail's algorithm for the frequency with which it checks external email accounts depends on whether it finds emails in them. I have a couple of accounts where I don't get many emails, but when I do I need to see them straight away. The only way to accomplish this while using GMail as a mail client is to send emails to that account every two minutes all day every day. So that's automated.
RayHet's talks are always great. I think it is long past the time that he got the Guido treatment at PyCons, so if he **needs** an extra 5 minutes, he **gets** an extra 5 minutes. Just tell the next speaker to skip their useless and boring preamble in which they try to justify their occupation of the stage, pimp their company and then waste another 2 minutes telling us what they are going to spend the next 25 minutes talking about.
I had exactly the same issue (twice, I of course forgot what I did the first time I had this problem). The trick was to use MinGW, it even says that here: https://github.com/cython/cython/wiki/InstallingOnWindows The instructions are a bit hidden: &gt; &gt; You can get the error message "Unable to find vcvarsall.bat". One option is to find this default compiler and install it: Usually the Microsoft Visual Studio 2008 Express edition is what you want. Alternatively, you can **manually change the Cython compiler to MinGW**. You can do this by changing the compiler defaults, as described in the sections below. And then follow the instructions under the "MinGW Compiler" section. The instructions themselves are a bit unclear, so here is my interpretation: 1. Download and install MinGW: https://sourceforge.net/projects/mingw/files/Installer/mingw-get-setup.exe/download Install it in C:/MinGW. 2. Add "C:\MinGW\bin" to your PATH environmental variable. Make sure to change the "Path" variable which is under "System variables", not "User variables for &lt;you user name&gt;". 3. Now open command prompt and run "gcc --version" to check if the compiler is correclty installed. 4. Go to your Python installation directory, e.g. C:/Python36. Now navigate further to C:/Python36/Lib/distutils, and create a file named "distutils.cfg" there. Inside that file put: [build] compiler = mingw32 5. Save the file and try running the test scripts. This is what I did a couple of months ago and it worked. I use cython extensively as I'm running some numerical simulations which are very CPU hungry. Cython does an awesome job at preserving the readibility of Python, yet is has the speed of C. If you are using numpy arrays to pass your data into Cython, make sure to read about the optimizations you can turn on (e.g. turning off bounds check, wraparound, etc.).
No, I use C and the CPython API if I need to interface a library with Python or I have a math intensive problem, as the interoperability of C with other languages and platforms is unrivaled.
Wow!
Here's some docs, straight from the Rust lang book :) https://doc.rust-lang.org/1.2.0/book/rust-inside-other-languages.html#python Assuming one is as familiar with Rust as with C, it should be about the same amount of work as writing a C extension. Definitely helps that the Rust devs have put significant effort into making the FFI nice to use. :)
But that's the same default value it has in the [github repo](https://github.com/chand1012/WinGuake/blob/master/settings.json) and yet typing 'exit' at the prompt doesn't work. 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [chand1012/WinGuake/.../**settings.json** (master → 17ccc9a)](https://github.com/chand1012/WinGuake/blob/17ccc9a52c991eff9e1cbdff53e5c97837d096d1/settings.json) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhv9u5f.)^.
Also, what 'bin' folder? There is no bin folder in the repo.
It would make far more sense to contribute to an existing Python project, with a real code base, and get commits/patches accepted.
you are really missing out. Cython does exactly this but makes it much easier to do so.
The reddit bot that you created, what does it do? If you don't mind me asking.
I do some freelance on taskrabbit. In order to get the best tasks you have to click on available tasks, but the tasks pop up randomly. I didn't want to keep clicking it myself, so i used vysor google chrome app to mirror my phone and some python automation to click it for me. It was a few simple lines of code.
You mac needs python2.7 for various other programs ... which is why it's included in the first place. If you changed the "python" command to point to python3 then you probably broke a lot of other things. The accepted command for python3 on *nix systems is "python3". 
Oh. Well that's not so bad, it only affects the commands in you type in your terminal emulator. For the same reason, if sublime text calls "python" it still used python2.7 because .bash_profile has no effect outside of the emulator. Change the command that you use and the command sublime text uses to "python3". 
I think starting with a small idea is best in these situations. Make a Library app, its a great app to create single instances of an objects and collections from the instance. The point is not the project but how you put the project together. Make sure it is DRY, and that classes are abstracted to a common sense level, not the ultimate level. Make sure it includes a few methods of iterating your data set. You settings should load from a file and your data from a database (I would suggest MYSQlite so its portable). Dictionary's and collections,. Variables and data types as well as variable scope, Loops and conditionals, error catching and dealing with it. I would suggest that having a sort and search algorithm would be a nice addition. It's up to you if you want to add an interface. Cover the broad strokes and make sure it works ,is commented, and for bonus points I would put in Unit Tests.
What do you mean by that last line?
Whenever you want to run python, type "python3" into the terminal, not "python". Also, change the command sublime text uses from "python" to "python3". I don't have ST, but some googling tells me you need to edit a file called "Python.sublime-build". [A useful link, maybe.](http://stackoverflow.com/a/23161870/2229945)
Sublime doesn't really have a 'run file' option per se, instead you're most likely using the build system. You can just add another build system for Python 3 files (google "sublime build tool" to learn how). On a side note when you say you followed a tutorial and "changed the command" that's misleading. As u/novel_yet_trivial mentioned it would be quite bad if you had actually changed the executable. Adding an alias to your .bashrc / .profile on the other hand is completely harmless. In a case like this it's better to just say what you did exactly. Oh and there's r/learnpython and, more importantly, r/sublimetext.
Since I don't use sublime text I can't really help you more. Try /r/SublimeText. 
Will do, thanks!
I have a script that goes through the parts lists output from my EDM package and associates them to parts in my master parts file. This avoids most of the drudgery is building a bill of materials for a new device.
I was talking in the release version, its a pre compiled executable. The current version in the repo may or may not work, depending on where I stopped working.
Glad to hear about your success. Maybe write a few blog posts to help other beginners while the difficulties are fresh in your mind. I know I have forgotten how hard it can be in the beginning after a decade.
Can you share memory between python and rust?
docker
For PyCharm, it's Ctrl+Q when a choice from the list is selected. It'll show you the documentation for it.
Do not use kite.
Thanks. :)
Well, that's neat! TIL. I can almost guarantee that one of the super helpful people over at /r/rust will be able to tell you if Rust supports the same thing/the level it does support. :)
Dude same here, i would be super interested as well.
Kite seems to be far too intrusive for what it does. 
Thanks a lot...
I automated video conversion with ffmpeg. I have a folder with 200GB of videos, in a lot of subfolders. The other version of this is downloading videos from a mega folder and uploads back the encoded video files.
The template system allow Kalliope to be used in the language you want. Nothing is hard coded.
to be fair, he's been the moderator for "the" talks. i.e. Larry's Gilectomy last year, the sequel this year, and Raymond's this year. I recall Guido saying he couldn't get a seat in the Gilectomy last year. they know these are going to be popular and the convention staff is very, very particular about seating capacity. If there are alot of empty seats, no big deal if you're standing. But if it's near seating capacity, it's near fire marshal's freak out number. So the convention staff will ask you to leave. This happened in other talks this year, but the moderator in this case has communicated that well. as requested/required by the convention center. I'm not sure why pycon put Larry or Raymond in a room that only seats 600 people when they're going to be the most popular talks. Last year I say through a talk that I didn't want to go to, just to get a seat at the gilectomy. Turned out to be one of the more interesting talks I went to. This year I also happened to be in the talks before Larry and Raymond's talks. these are minor complaints of course. pycon is awesome and it's organizers do an amazing job. 
lunch followed his talk.... I would have happily stayed and listened to Raymond talk about whatever he wanted to talk about for another hour.... 
I don't mean this to sound dickish, but why?
From the linked page: "This module is intended to allow libraries that depend on numpy, but do not make much use of array processing, to make numpy an optional dependency. This might make such libaries better available, also on platforms like Pypy and Jython."
Oh cool, I wonder if it'd work in Skulpt. Be great to have this in Pandas.
I've got a bit fed up with copying all that copying and pasting. Then I realized that notebook's frontend is essentially driven by Javascript. Unfortunately I suck at JS, so I wrote these and I posted here: /* https://jupyter-notebook.readthedocs.io/en/latest/extending/frontend_extensions.html */ define([ 'base/js/namespace' ], function( Jupyter ) { function load_ipython_extension() { if (Jupyter.notebook.get_cells().length===1){ //do your thing Jupyter.notebook.insert_cell_above('code', 0).set_text("from __future__ import division, print_function\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nimport re\nfrom calendar import monthrange\nfrom pandas_datareader import data as web\nfrom pandas.tseries.offsets import DateOffset, Second, Minute, Hour, Day\n\nimport plotly.graph_objs as pgo\nfrom plotly.offline import plot, init_notebook_mode, iplot, iplot_mpl\nimport pdb\nimport cufflinks as cf\n\npd.options.display.max_rows = 10\npd.set_option('max_columns', 50)\nsns.set(style='ticks', context='talk')"); Jupyter.notebook.insert_cell_above('code', 1).set_text("import IPython\nthousand_c = lambda x: '{:,}'.format(x)\nthousands = lambda arg, p, cycle: p.text('{:,}'.format(arg))\nnp.set_printoptions(formatter={'float_kind': thousand_c, 'int_kind': thousand_c})\nclass IntFormatter(pd.formats.format.GenericArrayFormatter):\n pd.set_option('display.float_format', thousand_c)\n def _format_strings(self):\n formatter = self.formatter or thousand_c\n fmt_values = [formatter(x) for x in self.values]\n return fmt_values\npd.formats.format.IntArrayFormatter = IntFormatter\nfrm = get_ipython().display_formatter.formatters['text/plain']\nfrm.for_type(int, thousands)\nfrm.for_type(float, thousands)\nnp.set_printoptions(precision = 4)"); Jupyter.notebook.insert_cell_above('code', 2).set_text("from pivottablejs import pivot_ui\nfrom altair import Chart, X, Y, Axis, Scale\npd.set_option('precision', 4)\ninit_notebook_mode()\ncf.go_offline()"); } } return { load_ipython_extension: load_ipython_extension }; }); 
There is an implementation of [reactive extensions of python](https://github.com/ReactiveX/RxPY).
I have used it to both wrap C and C++ code, and to accelerate a CPU heavy functions. For the latter use case it is excellent since you can start with your pure python function and then gradually modify it by adding more Cython-features (types, bounds-checking, etc.) to achieve higher speed. I used to recommend Cython also for wrapping libraries, but now I prefer to use [pybind11](http://pybind11.readthedocs.io/en/master/). The problem with Cython bindings is that you get more layers of indirection as you go from `Your C/C++ code -&gt; Cython code -&gt; generated C/C++ code -&gt; Python module` whereas pybind11 is `Your C/C++ code -&gt; pybind11 C++ wrapper code -&gt; Python module`.
PyPy3 Doesn't AFAIK.
Not anymore, in 95% of cases numba does it for me. It's amazing that a single decorator can speed up your code 1000 times.
Every other year as far as I can see. But I digress. This is an interesting topic for me as a hobby-programmer as I find other peoples solutions interesting as inspiration as I look for good (fun) automation candidates...
Tiny games are always fun. Someone else suggested tic tac toe. I'd probably do a dungeon crawl or a trimmed-down SimCity.
My code goes with BeautifulSoup doing the parsing: for url in soup.find_all('a', class_='result-title hdrlnk'): print(url) How do I bing your code with this? How do I let Python work with data it scrapped from website and analyze? How to make reference?
That sounds like a great example! +1 for code / bullet points / rough outline of your approach!
So they see your data just like Github?
Let's get the easy possibility out of the way first. Are you doing `if __main__` ("does a \_\_main\_\_ module exist somewhere in this process?") or `if __name__ == '__main__'` ("Was this file run as \_\_main\_\_?")? Edit: Backslashed underscores that were being interpreted as Markdown formatting.
It's probably doable, but it's hard to say how difficult it's going to be without knowing more about the problem. Are there only beatles on the white paper? Do they tend to cluster together? etc. If the answer to the two questions above is Yes and No, respectively, then it is a relatively easy problem solved by simple thresholding and blob counting. If there are other objects on the paper, the system needs some way to distinguish beetles from other things, which can be either simple (e.g. classification based on color, basic shape, ...) or very hard (e.g. machine learning methods). If they tend to move around you might have some luck by detecting moving objects and track them over time and then count them.
Yeah, I guess I'm used to thinking of numpy from the performance angle...
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [ibatugow/blt_samples/.../**manual_cellsize.py** (master → 38d0e05)](https://github.com/ibatugow/blt_samples/blob/38d0e053c329e904555bcbe35f061de5d2c7e551/Python/manual_cellsize.py) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhvtdk3.)^.
Oh no, they are not moving. My colleague freeze them so they are dead and still. ;D I will check OpenCV. Thanks.
Submitted 24 minutes ago and already has a lot of upvotes, I wonder what's going on here...
At least you know it works ;). I only made a few accounts as poc but it's interesting how easily it can be manipulated, you could easily make a ton more and launch any post to the top of a subreddit.
Then I would suggest trying the following: 1. Convert image from color to grayscale 1. Threshold the image (make it binary) to only keep low-value ("black") pixels. 1. If necessary use morhphological operations to remove very small regions, and also close holes within the blobs you actually want. 1. Count all remaining blobs
OpenCV for sure. If you upload some example images, we can tell you how hard the problem is to complete. 
I'm working on similar projects, so I may! I was thinking of just using a text file with an identifier so it wouldn't need a whole database. I was always thinking about making one of these just to understand them, so I found this interesting.
Some infos would be great, thanks a lot! If I get it right this tool does the copy-&gt;modify the copy-&gt;rename and swap using a file in the FS for the copy.. Is this correct? Sometimes I do that at work and it's always a problem to kill our apps to manage changes on the big tables. I'm curious about performance, maximum size of the changed tables, do the script cares about foreign keys lost in the process? If my Ops approves, I'd be using this on some approx 1.5Gb tables, are those sizes tested? Thanks again.
It should go without saying that this is very much against reddit T&amp;Cs. This might put your (main) account at risk of being banned for posting this, and admitting to manipulating the vote counts. Guess we'll find out ;)
I'm aware, doesn't bother me much I'm not too attached to any particular account. May the odds be in my favor. 
Is there anything else other than beetles on the background? If there are only beetles, the problem is very easy. If there is other stuff, the problem is probably much, much harder. Also, if the beetles are ever touching, rather than having some space between each, the problem can get significantly more difficult. If it is one of these more difficult problems, it might be easier to just write a tool that assists in the counting, grabbing everything that could possibly be a beetle, then showing the user an image and having them verify whether it's one beetle, X number of beetles, or 0 beetles. *edit* Also, if there is not only beetles, some prep work to remove other debris might help. Beetles will probably float, so you can remove dirt and stones by floating the beetles in water. The beetles will probably all fit through a certain size of mesh, too, but not through another, so you can filter out particles too big or too small with a sieve. 
You're shadowing `list` in *randomUserNames.py*.
Woops fixed
Having a fairly chunky installed component can be a pain if all you want to do is generate a 3D array of random numbers, for example.
Also, what's wrong with a NotImplementedError?
[This tutorial](http://pythonvision.org/basic-tutorial/) gives an example of counting cells in microscope images, with Python. If your beetles have a regular shape this should work OK.
That's pretty interesting. Do you think to make it open-sourced (or already made it)? 
I also started using tools like this recently to get jump starts and its far simpler and quicker to set up. 
It watched both. They're close in material. However, he does refine his presentation for this one so that he explains a little better how they work.
Oh, fair enough. If they are ever shareable Im interested :) 
Thank you; When I leave out 'get_text', I am getting: TypeError: write() argument must be str, not list
Thanks!
You do not understand what I want to do. I want to make something like "while loop" that user HAS TO click "Yes" in UAC pop up.
What about a simplified Twitter clone using Flask?
[Here](https://github.com/audreyr/cookiecutter) is a link to cookiecutter for those interested.
have you ever compiled it? takes fucking hours and you need fortran as well as c/c++ compilers. not to mention BLAS/LAPACK linking issues..
I think we'll see an official JIT before we see the gilectomy offer great performance and stability. There's more and more money being put in Python. An official JIT is inevitable.
I bet there are a lot of scala people who would hate this. I'm not sure if they will be able to argue a good reasoning, but usually, when such drastic changes proposed, we'll see a lot of unhappy people.
And also post this to r/learnpython , maybe you'll have more question and will help some beginners. 
Good source. Alternative official PEP for python style direct from the man himself: https://www.python.org/dev/peps/pep-0008/
Okay, I see, the names just jar at each other. Thank you for the clarity. 
Backup reports; I create an excel file from JSON data, review it manually, then save as PDF and attach to ticket manually. Saves a lot of time doing data entry from multiple systems.
"I don't even use Scala but this has definitely ruined it!" \*goes back to transpiling Ruby into JS\*
What are the kinds of tasks people are looking for in using more CPU cores that aren't currently better done with a GPU? 
In python, classes shouldn't be used just to clump together related functions etc. - use modules for that. Classes should be used to clump together things which have both state and behaviour.
plus: http://clize.readthedocs.io/
I think the Python​ way is to start without classes in general, and refactor into a class if it makes sense to do so (with some exceptions of course).
Perhaps my work has just benefitted more from object oriented design than others would. 
It is not an option for all systems and environments, but anaconda and canopy have pre-compiled distributions of most of the scientific stack. They should do the job in most cases.
What kind of person wakes up one day and decides to hate on python to troll people?
Style is helpful to readability, but I think CrypticCube is asking for multi-file code organization -- a problem that's bigger than one eyeball, and in my view, not a very Python-specific problem.
it's not designed to be compiled by the end user... It's meant for scientific dists of python
Is there even an "official" project for JITted Python?
It looks like it's optional to me. I don't like it specifically because Scala already has too many ways to do one thing. This is adding needless complexity to an already established language.
Hey, thanks for the insight instead of just auto-downvote. Didn't think about that.
Start-here, get-this-many
Thanks for sharing, will definitely look into that. Do you have any experience with it? Would you recommend it? What are the pros and cons in your opinion?
&gt; GPUs are great for big linear algebra problems. They're not really good for much else, in my experience. Fortunately, a lot of real-world problems are linear algebra problems. In your specific problem (I/O), how does having multiple cores help? In other words, how would removing the GIL significantly speedup your process? 
But in this example if I wanted dog it would be arrayx[3:6] wouldn't it? 
I want to second /u/counters and add on that in my field of scientific research, so much code is developmental. I may be wrong, but I think GPUs are currently not especially good for development work at the moment. The support just isn't there yet. In addition, I'm working on a new genetic algorithm / optimization suite that needs to be very dynamic and run multiple different simulations simultaneously on different cores. A GPU is great at solving one computationally complex problem at once, but allowing multiple cores to do different things can also be extremely valuable. I use HTCondor and MPI high performance computing nearly every day, and while I don't know for sure, I'd be very surprised if GPUs could replace that in a meaningful way (at least currently, maybe in 10-20 years it would be more reasonable).
I tried something similar to this for counting seeds. Unfortunately I don't know where I put the code, but I think the bit I had the most trouble with was working out when seeds are touching - in this case, simple blob-counting sees multiple seeds as one blob. I tried to detect unusually large blobs and dividing by the average area, but I didn't have much confidence in it. I expect someone with more computer vision skills could come up with something based on the shape as well.
Actually, "start-here, go-up-to-but-not-including-here"
I find it helpful to think of the indexes as between the elements in the array. So your array is: ^0 C ^1 A ^2 T ^3 D ^4 O ^5 G ^6 Asking for a slice is asking for everything between those indexes. So [0:3] is everything between 0 and 3, which is CAT. Similarly for [3:6] being DOG.
How is that in any way similar to emacs? Emacs is incredibly powerful.
I see how this can be useful in text documents, but I also wonder if this could be better in a python markdown parser. The biggest difference is that I would also include links to the relevant part of the document. Also, you may want to look at regex for some of your parsing
Because there are numerous advantages to defining it that way. For example, partitioning a list can be expressed as `foo[:n]` and `foo[n:]`, i.e. `foo[:n] + foo[n:] == foo`. Also, the length of `foo[x:y]` is y - x. There are many more. If you defined ranges as inclusive, there would be a whole bunch of ugly "- 1" terms in all of those definitions. 
I've done something like this to create a persistent bash shell I can call from python. What I did was send a sentinel at the end. I would randomly generate a string and read until I found the string. It is a bit hacky and I am sure it isn't super robust but it does seem to do the job for me.
Thank you for taking the time to reply, that's some great info. couple of my friends are database administrators at software development companies. I'll definitely make sure to tell them about it and see what they think. I'm sure they'll give it a shot and get back with some feedback.
why is indentation vs brackets more complexity?
ah, yes. I injected my own mental block into this conversation. Sorry about that. 
I gotcha, number two sounds simple enough, but I'm curious to investigate number one. thanks for the tips! 
They're laying out the groundwork at the moment, https://www.python.org/dev/peps/pep-0523/
I get it it's a joke. The joke doesn't make sense though. Emacs/vim have just as much support as atom out of the box. They aren't arcane or convoluted ways to write code as the op implies.
1. Get the data (probably points on a map with asociated values) 2. Convet it to dense format using interpolation (IDW for example) 3. Plot it (matplotlib)
This visualization helps a ton. Thank you. 
It is the one thing i hate about Python. The lack of clear symbols for begin and end makes for hard to read code. Further some of the worse cut and paste bugs I've ever had came via Python. Of course i could blame the cut and paste errors on the editor but that would just try to place blame fir a bad language feature someplace else. Mind you right now most of my programming is in fact done in Python so im familiar with the code and tools. In general i really like the language but indentation to form blocks of code is just stupid. 
You'll love .net core then. I've been using it for a relatively large project recently and it's been a blast, and I love the lack of platform dependency. In fact, I develop primarily on Windows but deploy to Linux, and it just works. It's great.
Pythonista for the Python part Launch Center Pro for quick launching / sending text message.
https://matplotlib.org/basemap/users/examples.html
Python has its flaws, but AFAIK indentation-based blocks are a non-issue. The lack of additional syntax characters increases readability. In 17 years of python, I've only seen it become a problem in two cases: 1. One-liners; 2. Template languages that embed Python in HTML, which doesn't care a whit about preserving white space. But hey, we all know by now that embedding programming languages in HTML is bad, m'kay?
Can GAs outperform hill climbers on a real world problem yet? (Jansen's gap doesn't count)
And write all code in ed! 
I'll look into it some time, but it's below Rust and Go on my list if I'm being honest. I primarily use Python3.5 for cross-platform compatible scripting and coding (at least most platforms, not those that require C, assembly, or HDLs). Then again, my use case is restricted to mostly Linux installations, with the exception of my desktop which I use to run more computationally heavy stuff, but I keep Win7 on that because ~*__games__*~ and not really digging newer versions of Windows. I ramble about completely asinine things too much
Do you also want the program to relaunch itself if they attempt to end the program via Task Manager? If you want to be a jerk, you could probably just fork bomb the machine.
It does limit things like true anonymous functions but I've made it this far without them, so it's not that bad. 
You'll want to use Basemap as well as `contourf` from pyplot and `interpolate` from scipy.
Or are done just fine with processes?
You can't wipe your chin with Emacs, can you?
Different people learn in different ways. We have [a pretty long list of learning resources in the wiki](https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_programming.3F). Try a few and see what resonates. For a brand new programmer I'd recommend codecademy. Also, if you don't have one already make sure you look for a project that interests you and start on it as soon as you can. Programming is a lot more fun if you have a goal. If you get stuck, have general questions or want some critique of your code come visit us in /r/learnpython. 
Wrote a script to create multiple jails on our BSD machines. It's a pain to do manually and error prone, so doing it this way takes care of that. Have many other including one that I use to deploy CUPS printer settings to any new host that I add to the network. 
and indeed, `argv[0] == '/usr/lib64/python3.4/pydoc.py'` (:
&gt;Can GAs outperform hill climbers on a real world problem yet? (Jansen's gap doesn't count) I think there are a few things that are relevant to answering your question: 1) GAs can use objective functions that are not differentiable. Hill climbers work best (in my experience) on functions where you can calculate the derivative and figure out which way to go up/down hill. Monte Carlo and other stochastic algorithms can sort-of do hill climbing without a differentiable function, but I don't really know if those are considered hill climbers (I've only taken one formal optimization class). But either way, being able to do optimizations on a function without a derivative naturally opens up many more possibilities. 2) Hill climbers move up/down hill, and therefore by definition their movements are small (i.e. the X value in the domain space moves a small amount). GAs, on the other hand, can change X significantly and move to an entirely different spot in the domain space without having to make incremental movements to get there. This has the potential to search large domain spaces with deep minima more efficiently. Maybe more importantly, GAs and hill climbers are not entirely independent! I actually use a conjugate gradient minimizer within the GA (this isn't uncommon when the domain space is massive, and when you only care about locating minima in that domain space). First, I change X significantly using a mutation or crossover, then I do a conjugate gradient minimization to move X a small amount to the nearest minima (simple hill climbing). This allows me to search only the local minima of the domain space. My application for GAs are atomic simulations, where I put ~ 1,000 to 10,000 atoms in a box and move them around until some objective function is minimized (for example, until it "looks like" the atoms are all arranged in rows and columns). Unfortunately, each atom can move in 3D space, so it has 3 degrees of freedom. Each atom can do this, which means that the dimensionality of my space is `(the number of atoms) x 3 -1`. So for 1,000 atoms, the domain space's dimensionality is ~ 3,000, which is just massive. We can't explore that large of a space in any reasonable time, so for us, moving large distances quickly and only searching minima is actually very useful! I know that got long, but I hope it helps?
Even though there are some great sites out there, most people responds to [audio-visual stimuli the best](https://www.google.com/webhp?pws=0&amp;gl=us&amp;gws_rd=cr#pws=0&amp;gl=us&amp;q=youtube+python+beginner). Best of luck! 
Ahh OK. Well the server side of things is written in PHP and makes use of MySQL. It handles the game logic. AFAIK there is no way to make PHP run constantly on the server to act as a bot. It has to be executed in some manner. I could launch a cron job, but I can only run the script as quick as once per minute. I'd like to keep writing my backend in PHP, so I just want something that will execute the appropriate PHP script when the time calls for it. My gf who is also getting into programming keeps showing me nifty things that python can do and I thought it would be fun a first taste of python to use it in this manner. 
I just installed it with pip install numpy --no-cache-dir --no-binary :all: on an AMD FX-8320 overclocked to 4GHz. Total time: 4 minutes, 11 seconds. That's with no ccache or anything and pip isn't using all the cores (sadly; wish it did). EDIT: letting pip install a wheel of numpy took 18 seconds. 
So does pip with wheels. 
I'm glad to see this progressing! 
&gt; Jansen's gap It totally counts. It counts when you have 150 design variables. It probably doesn't count with 3. Additionally, something that GAs handle well that gradient based methods don't handle is failed cases. What is the answer for a model that is inside out. You end up trying to fake it using a penalty method (e.g., it didn't converge, so the answer is 75% of the nominal value). Well, now you've screwed up your gradient. A standard optimization validation case is to bump your optimized design variables and reoptimize. Even using a very, very good gradient method (Vanderplaats' DOT), for 150 design variables, I often find I get a better solution. That said, what I do expect to see if I march from my nominal position to the optimum with a constant step size, I should see a smooth curve. Getting there though, may be impossible for a purely gradient-based method.
&gt; But noooo, you had to use C# as the example Hey, man! C# takes the kids to Disney World every year and paid the house of 15 years early. But I hear you. Though I love some C#, when it comes time to work on my own stuff, I'm split my time between my Python and my Node. Just don't tell Satya, please. I wouldn't want to be kicked out of the club.
lol
Look into the `pyautogui` library. --- If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
first post in this thread to make me lol.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/commandline] [\[xpost \/r\/python\] Script for Getting Last Commit Date on Popular Hosting Sites](https://np.reddit.com/r/commandline/comments/6cqq46/xpost_rpython_script_for_getting_last_commit_date/) - [/r/git] [\[xpost \/r\/python\] Script for Getting Last Commit Date on Popular Hosting Sites](https://np.reddit.com/r/git/comments/6cqqg2/xpost_rpython_script_for_getting_last_commit_date/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I don't make the rules. I just want my code to get checked in so I can move on with my life. You can ask the pylint people why they have decided to do this. And now that we require pylint before checkin, I have to replace map with list comprehension. I'm not interested in an in-depth argument over why one or the other is preferred. It's too much argument for too little gain. At my office, It Has Been Decided, and therefore shall be so. Arguing is pointless. Here's one online discussion about it though: https://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map
thank you 
Yeah, I should have added that. 
That was a reference to *The Last Question* (a short story). In that case, /u/ScroogeMcDucksMoney should use `itertools.products`. There are 98 combinations which yield 75 if the range is 1-6, and 272 if the range is 1-7. Let me know if you have any more questions. And ask more clearly next time. Also, obligatory /r/learnpython for beginner Python questions.
&gt;But hey, we all know by now that embedding programming languages in HTML is bad, m'kay? Exactly. Which is why I wrote a virtual machine inJavascript, that I then compiled the JVM to run on, so that I could run jpython on as god intended.
Could brute force it with multiple nested loops; one loop for each variable breaking when the equation equals 75. I assume you have to solve this in Python since you are posting in /r/Python
Ummm, how can you write an article on parallel libraries for Python and not mention dask? 
Yes, numbers are 1-6, not 1-7. Thanks for the subreddit.
As an extension, you've missed a closebracket on line 19 &gt; path = input("Which path do you choose? (left or right): " should really be &gt; path = input("Which path do you choose? (left or right): ") 
r/learnpython
&gt; I mostly work with biological databases You mean people?
This has nothing to do with Python programming or `from __future__ import division`. Its a guy removing a snake from a car.
&gt; It goes so far as to reject all code containing 'map' functions - requiring them to be replaced by list comprehensions - and rejecting ALL lines over 79 chars, no exceptions. That is *exactly* the sort of thing why Guido hates automated PEP 8 checkers. And since PEP 8 itself **explicitly** warns against "a foolish consistency" and over-zealous application of PEP 8 style, your colleague's tool itself is in violation of PEP 8! (I know this is not your choice, you are having this inflicted on you.) [Raymond Hettinger did a good talk about this some time ago.](http://www.youtube.com/watch?v=wf-BqAjZb8M) Edit: and for those who prefer text to video, [commentary on Raymond's talk](https://medium.com/@drb/pep-8-beautiful-code-and-the-tyranny-of-guidelines-f96499f5ac17).
Sorry for not replying. I can link my github to you once I get back home. 
That's a really cool idea. I haven't really thought about the keywords I use
Depending on your specific task, the Selenium library might also be helpful.
I plan to make it do more than just keywords.
I think this snippet is probably what you are looking for from functional import compose, partial def composeAll(*args): """Util for multiple function composition i.e. composed = composeAll([f, g, h]) composed(x) == f(g(h(x))) This is really useful for stacking layers together """ return partial(functools.reduce, compose)(*args) 
That's just what I'm looking for. Cheers for the speedy answer!
And so we come full circle again.
No problem, happy hacking
4) Armin Rigo's [Software Transactional Memory](http://doc.pypy.org/en/latest/stm.html) STM is the most interesting, I think, if maybe the most challenging. However, I'm most looking forward to subinterpreters.
This just uses `permutations` and `reduce`: from itertools import permutations from functools import reduce a = ('a', lambda x: x*2) b = ('b', lambda x: x+3) c = ('c', lambda x: x**2) fns = (a,b,c) for x in range(3): for cur_fns in permutations(fns): print(x, ','.join(fn[0] for fn in cur_fns), end=' -&gt; ') print(reduce(lambda a, b: b[1](a), (x,) + cur_fns)) Prints: 0 a,b,c -&gt; 9 0 a,c,b -&gt; 3 0 b,a,c -&gt; 36 0 b,c,a -&gt; 18 0 c,a,b -&gt; 3 0 c,b,a -&gt; 6 1 a,b,c -&gt; 25 1 a,c,b -&gt; 7 1 b,a,c -&gt; 64 1 b,c,a -&gt; 32 1 c,a,b -&gt; 5 1 c,b,a -&gt; 8 2 a,b,c -&gt; 49 2 a,c,b -&gt; 19 2 b,a,c -&gt; 100 2 b,c,a -&gt; 50 2 c,a,b -&gt; 11 2 c,b,a -&gt; 14
Hi Thanks for the tips! I'm actually attempting to do it all over websockets now. Apparently it's quite straight forward to run php a server, so I'll use websockets to send and retrieve data to it. Game data is in mysql already. Thanks for the advice. I may take up this offer if I can't figure websockets out. 
What is `functional`?
Using an IDE might help. 
I also come from a C++ background, and started dabbling in Python a couple years ago. Now I use it all the time. You'll become relatively fluent in the syntax in a short amount of time. It's very simple compared to what you are used to. Personally I recommend [Automate the Boring Stuff](https://automatetheboringstuff.com/). I was interested in the projects, but the first few chapters give a good overview of the language itself.
Neat! Thank you! 
If you program in modern C++11 you're not that far off from a high level language. Some notable differences include: • Thou shalt use spaces, not tabs. The number of spaces for indentation shall be 4, and 4 shall be the count of spaces thou shalt use. Thou shalt not use 3 spaces, nor shalt thou use 5. 6 is right out. • PEP8 linting is your friend. Clean over clever. • Python does not follow the RAII idiom. Instead there is the "with" statement to mark resource acquisition - for the most part. • Don't worry about low level implementation and optimization details. • The Python standard library is an order of magnitude more capable than C++'s. • Rolling your own version of a standard library feature might be acceptable in C++ but it's usually a terrible idea in Python, since the primitives are optimized. • Some concepts like generators, iterators, metaclasses, class and static methods, and the fact that classes are objects too are quite different from C++. It's worth spending time to appreciate the differences.
I edit inodes with a magnet. 
The index is created on the new table before being swapped with the original table. The new table is the only one that will be locked. The original one will only be locked when being swapped, once the process completes, and it happens very quickly.
Arch has been my favorite distro to develop on. EVERYTHING is in the AUR. If you need some kind of library or tool it's literally a `pacman` away.
This is better suited for r/learnpython It seems like you are having trouble with types. You should read about the pickle library or some other form of serialization.
body_text is a list. Either use extract_first() or something like f.write(" ".join(body_text))
Are you going to install any other libraries that depend on the Numpy C API, or libs that Numpy itself depends on? e.g. Numba, Cython, Scipy, pandas, Matplotlib, ... or even Tensorflow with GPU? The level of dependency metadata in wheels is insufficient to robustly resolve package deps for the whole universe of things, especially since you can also be unwittingly building in dependencies on your own dev environment. So, unless you know that your deployment environment is very similar to your dev environment, or you are *extremely* confident you won't ever need to use downstream packages that may pull in a C level dependency, then **installing parts of the pydata/stack using wheels is deployment technical debt**. Sometimes the upstream dependencies are extremely non-intuitive. For instance: * nbconvert, for converting Jupyter Notebooks to HTML, depends on Pandoc, which requires A HASKELL COMPILER. Good luck with that on Windows. * Matplotlib, for plotting, can be built wrong so that it conflicts with your system Qt. You could end up in a situation where Spyder (the IDE) will run, but Matplotlib won't import. Or vice versa. Good luck linking a Qt that isn't your system Qt. * graphviz (the python library) is only one of several popular wrappers for graphviz (the C-based tool). The PyPI package for (python) graphviz bundles in its own upstream dependency. That's convenient, unless you want to use one of the others, OR another tool you use like Dask or NetworkX want to use a different binding, or a different version of C graphviz. The list goes on. The PyPA is working hard to solve the problems of Python devs, but the data science &amp; scientific computing ecosystem that is bringing droves of users to Python have bigger needs, AND they are typically less proficient at software development. Perhaps some day we'll have convergence between the wheels world and the conda world, but it will not happen if pip advocates pretend that wheels "solve all the problems".
https://www.youtube.com/watch?v=LhadeL7_EIU&amp;list=PLzV58Zm8FuBL6OAv1Yu6AwXZrnsFbbR0S you're welcome.
This was probably the least enjoyable of the talks I've seen him give, and it was still a very good one! I learned a few things. I think his [Beyond PEP8](https://www.youtube.com/watch?v=wf-BqAjZb8M)-talk is one of the best programming related talks I've seen. Edit: Dammit, now I got stuck watching that talk again!
You should be aware that there is no such thing as a private variable in Python. Also, you should resist the urge to write getters and setters for properties of python classes.
I guess so. If you mean we started IRC on the shell. Slack client is terrible at resource consumption though, it's a good idea to keep simple things simple.
Unfortunately sharing data between processes can be tricky. If you use `multiprocessing` you either need to make sure all your objects are picklable, or pass meta-information to reconstruct the object on the receiving end. I have a lot of problems where I simply want to do with multiprocessing.Pool() as pool: results = pool.map(lambda x: x.process(), list_of_complex_objects)
Oh God... camel-cased packages, semicolons, tabs instead of spaces, mixing good and bad spacing, quotation marks instead of apostrophes on some places... HERESY! Let me recommend some good night read, [PEP 8](https://www.python.org/dev/peps/pep-0008/).
Yeah just look at the setup.py. I'll assume it's this persons first project, certainly in python anyhow.
Switching from javascript to python it looks like.
&gt; join(body_text)) Thank you so much sir, I re-write the last past and it's work. You have a wonderful day
Thank you, will take a look!
Have you seen scapy?
seconded - matplotlib makes this easy to plot
EDIT: It's fixed now, thanks. This is a malicious post. Please don't paste destructive scripts, ever. I know you're pointing out what the problem is, but people are likely to copy-paste this and nuke their system.
[Opened a PR](https://github.com/M1ND-B3ND3R/BoopSuite/pull/3) for the semicolons, couldn't let that stand. Was going to test it, but running the setup.py I got the message: "[-] Must be run as root." Er, nope.
In addition to that, he prefixes all commands with "sudo". Which means they would run fine as non-root. And if root, no sudo is needed.
I am the one who would do that by mistake. No lie.
In general `python` should point to Python 2.x and `python3` to Python 3.X. This should be almost universally true (except for Arch Linux?) and is the recommended standard naming. It's a backwards compatibility thing so that scripts written for Python 2 and below (which expect a `python` executable) continue to work correctly on systems which has both 2.x and 3.x installed. See [PEP 394](https://www.python.org/dev/peps/pep-0394/) Edit: This is for Unix-like systems though. Didn't see that you were on Windows...
In your console do `where py` or `where python` -- You can rename that executable in the 2.x installation to be `py2.exe`/`python2.exe`. In which case there would be no python2 executable for when you do `py` or `python` by itself. Typically speaking what I'll do is create a copy of each and rename the copy to `python3.6.exe` or whatever for the appropriate version. That way you can simply call in the command line `python3.6` 
Safe for who? Marshmallows?
Try Jupyter Notebook
Sorry, I should have wrote it. `python3` doesn't work on windows, but `py -3.4` works. Thanks for the explaination, and for link to the PEP ! Cheers
For all those who soldier on using bottle. Not sure the rules in linking to my little blog but whatever.
1. repo containing some python easter eggs https://github.com/OrkoHunter/python-easter-eggs 2. Flask was created as an april-fools joke (with fake video-demo narrated by fake french dev) 3. PEP 401 -- BDFL Retirement https://www.python.org/dev/peps/pep-0401/ 4. Parrot Prank - joining Perl and Python http://archive.oreilly.com/pub/a/oreilly/news/parrotstory_0401.html interview with both creators http://www.perl.com/pub/2001/04/01/parrot.htm 
&gt; Yep. That is in regards to Pyjion (https://github.com/Microsoft/pyjion) and is being worked on by two of my excellent coworkers! But is it being worked on? I've been watching the Pyjion project closely ever since it started but it seems like it has stalled. The latest commit mentions it's a side project and work is sporadic. In any case, I don't see that it can be called an "official JIT". Pep 523 is the basis for Pycharm's [debugger performance enhancements](https://blog.jetbrains.com/pycharm/2017/03/pycharm-2017-1/) so 523 benefits the ecosystem regardless of whether or not an official JIT is produced. 
Are you using a virtualenv, and if so, is Django installed on it? I had a similar error yesterday because I had a package installed on both my global Python *and* the virtualenv for my project.
In this subreddit, you'll find more proponents for Python. I work with financial data and do most of my work in Python. That said, R and Python are very different languages. Things you learn for R will not apply to Python and vice versa. My advice would be to learn both, but first learn SQL. The language you use for processing the data doesn't matter if you can't get it efficiently. SQL knowledge will set you apart from others in the finance world.
Generally yes, however for more complex animations I have occasionally found that the kernel crashes after a few runs and requires restart. Not the end of the world but it kind of negates the whole point of notebooks imo. Why not try a different ide that doesn't pre-import matplotlib by default. 
&gt;It goes so far as to reject all code containing 'map' functions - requiring them to be replaced by list comprehensions My rule is simple: if I already have a function I'm going to apply I will use `map`, `reduce`, `filter` etc. But if I don't have a function and I don't see much of sense to create it, I will go for list/generator comprehensions.
I'm working on a text based zombie apocalypse game! I'm just starting out coding (in general) and it's going well so far!
Maybe get to do some population genetics work in python, but mainly busy on expanding some functionality of code at work, which is c++.
https://www.reddit.com/r/Python/comments/6bhnzq/whats_everyone_working_on_this_week/dhmwt31 Already done with Google image downloader, and continue with booru wiki. The homepage is already done with text input search working properly. Next task is add image example and use other booru such danbooru for parsing 
Just finished a little Python-AHK project of mine I called Modular Programming, it's basically a client - server application with a database of algorithm I can invoke into any text editor by writing my request (type of algorithm, specific one, language used), selecting it, and pressing Shift + Space! 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Thanks, I will have a look and see what I can do. 
XD 
Not the first python project, but the first one on github. Any suggestions or constructive criticism cause I would love to hear! :)
I would be interested in seeing that
You again? Jeez, Man you really like commenting. Why not just let it go, what's got you fixed on telling me you don't like the project. Its up and coming and I don't see you bothering any suggestions?
True! I will change that, thanks :)
Requiring root for specific functions is fine, even for running the script, but it shouldn't be necessary for installing it. Think of all the time you're wasting typing those ;)
Well, I don't drink soda and I don't play video games. Other than that I guess you got me ;)
What's a good way to negate that when I use the package menagerie to install it? I though all package managers need elevated permissions?
Hi again. So here's my Git, https://github.com/chengwill97 and the code is under Desktop Images. I thought about adding a read.me but I figured the comments will be enough. What u/_D_I_S_T_R_E_S_S_ is absolutely helpful. Feel free to ask me any questions
And my rule is simpler; don't use map and slavishly adhere to the 79 char limit so I can commit my code and not get screamed at. In this case, the pep8 tool is being used as a blunt force instrument. And I agree with the Hettinger video that atrocities are committed in the code because pep8 decided to make these 'standard' warnings. If my code were on a performance path I might have an argument, but even then it would likely become a refactoring situation. I don't think there's really a way to adjust the standard on a file-by-file basis for automated checkin testing.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Oh and I will keep posting it, I am proud of my work and I want to share it and build on it. Give me some of your code, I'll critique yours :)
In that example it wouldn't it be cleaner to have a `sql_parsing.py` file with your functions in that? You get the same namespacing but you don't have to instantiate an object
Am tidying up a Flask side project with an excuse to try VueJS - quite enjoyable! It's at https://joybird.io/consultant if anybody wants to give feedback :) (Background: I've been a freelance python engineer for years and always have more work than I can handle. I built this to share the love with other freelancers)
Your `setup.py` is a bit unusual in that it is using the Linux `apt-get` `yum` or `pacman` tools to perform the install. It's normal to install Python packages using `pip`, and often into a virtualenv which is non-root. External dependencies (e.g. "libncap-dev", "iw", "tcpdump", "graphviz" and "imagemagick") are normally managed separately — if I pip installed a package and saw it do an `apt-get` I'd be a bit surprised. I'd expect this to be in a separate bash script. Using a normal Python `setup.py` file you can replace the code around this... &gt; subprocess.check_output(["sudo", "ln", "-s", "/usr/share/Packet-Sniffer/boopsniff_gui.py", "/usr/local/bin/boopsniff_gui"], stderr=subprocess.STDOUT) ...with setup( ... entry_points = { 'console_scripts': ['boopsniff_gui=PacketSniffer.boopsniff_gui'], } ...which will create a runnable command in the Python scripts folder, calling the script on the second part. Note that the `-` in the name makes it unimportable in Python, so you'll need to remove it (as above) for it to work. The Python scripts folder should be in your path, so the `boopsniff_gui` command will be available as soon as the script is pip installed. See this [how-to on Python packaging](http://python-packaging.readthedocs.io/en/latest/index.html) for some more examples. It's good to try and keep to the standards as far as possible to reduce the surprises for people downloading your scripts. If you *really* don't want to do any this, I'd suggest you change the name of the file `setup.py` to something like `install.py` to make it clear it's not a standard installable package.
Ha, ha :)
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Working on a self driving RC car to race in the next DIY Robocars race. Python with Keras/tensor flow. Instructions: donkeycar.com. Also finishing my Udacity homework.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I use static decorators though I don't have to inst objs. 
Didn't know about this one. I've been out of the C# community for a few years now. Things have probably changed a lot since then!
Looks good. Just one note - JS&lt;&gt;PY integration allow you to pass function calbacks, eg. `bound_js_to_py(method, data, js_callback)` and in Python code `js_callback.Call(data, py_callback)`, and then back in js just call `py_callback(data)`.
Well thanks for all the reference material I will read over it while I'm working :)
I keep seeing all this hype around new systems for browser automation and keep asking myself, what do these new systems do better than Splinter? Splinter is a selenium wrapper that takes the irk out of setting it up. I really recommend checking it out
So now my projects will have a setup.cfg, a setup.py, a pyproject.toml and possibly a requirements.txt, all in different formats. Fantastic!
Thinking of rewriting my Private Mailinator-clone with Flask (currently ExpressJS)…
You don't need to tell me lol, I'm a professional dev I know how Python works. I'm speaking from a personal design/organizational standpoint 
Wrapping a bunch of poorly documented .NET libraries so that we can use Python in a Pythonic way. 
[PEP8 imports rules](https://www.python.org/dev/peps/pep-0008/#imports) do the trick for me.
that one [xkcd](https://xkcd.com/927/), as always…
You failed to mention the meaning of a single underscore as a variable name. 
So I bought the deep dive course and I bought your books. Opinions: I like your books and your approach versus Deep Dive. Deep Dive progresses in a way I find smoother as someone already familiar where I can gloss over things I know. On the other hand you richly go into topics that feel like they covered more than just a few pages. Where I felt your explanations and samples on comprehensions were confusing Deep Dive had some more rich practical samples I got to play with that made the concept clearer. As far as educative goes I am disappointed. It doesn't feel like an interactive take on the books as much as a copy paste with some browser runnable code. Anyone working with any of these should be getting there time in with IDLE and working the code to their understanding. Also for deep dive there are some links found on the free html book they didn't transfer to educative. So it says click here for further reading and then nothing is present. Right now my favorite thing is to work through my the educative deep dive with the html book open along with your 2 books in pdf. I've yet to get through it all so I can really speak on complete crossover but I feel like the best value would be your 2 books and the free deep dive book.
Great ! Can this write as well as read ? If you don't have it already, it would be great if it could check the file magic to guess the correct plugin to use if you don't specify the format.
Haha, someone is a fast reader :) Also, you're right. Discussing the use of `_` as a placeholder / temp variable in the article would be good. If I'm not mistaken the Python REPL also stores the result of the last expression it evaluated in a variable called `_`. Will update the article soon.
The generated python code is very straightforward, which is a good thing. If I'd made this, I would probably have made something more declarative + put all the format stuff in the header of the class.... but that would have just ended up more complex, simplicity ftw.
The end game is for the package to have the .toml and no setup.py. Something like the following from the flit documentation. But for now this pep lets you depend on helpers (abstractions!) and import them inside setup.py itself. [metadata] module=foobar author=Sir Robin author-email=robin@camelot.uk home-page=http://github.com/sirrobin/foobar 
Don't forget Pipfile! 
&gt; Can this write as well as read ? Not yet, Kaitai Struct doesn't have full writing support in the first place :( There is a [work-in-progress branch](https://github.com/kaitai-io/kaitai_struct_compiler/tree/serialization) with writing support, but it's not release-quality yet. &gt; If you don't have it already, it would be great if it could check the file magic Thanks for the idea! Technically, KS generates magic checking calls (and throws exceptions) where applicable, so most likely trying to parse a completely invalid file will fail. Thus, in theory, one can try to autodetect the format just by trying everything (which is actually more or less what a real operating system does as well). My only concern is that some formats do not have any sanity/magic checks at all, and thus would happily parse complete nonsense.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [kaitai-io/kaitai_struct_compiler/.../**serialization** (serialization → 7dee284)](https://github.com/kaitai-io/kaitai_struct_compiler/tree/serialization) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhxtg5x.)^.
More declarative? You mean, as in putting `fs/*.py` stuff into .ksy file?
My guess is that it is easier for the interpreter to ignore it in files than to add an exception for command line work.
OK cool, good to know. Thank you.
Doing my first ever paid freelance project in it. I designed an embedded PCB, to be programmed in C, and I'm writing a python interface between it and the customers existing code. Edit: on a pi no less!
How about using python dicts themselves? Parse the files using ast.literal_eval. Safe, familiar, native.
I hate paywalls. That is all.
It's one of the common gotchas I always try to teach people. The other head wrecker is def spam(errors=[]). If you're using subprocess with a program you don't 100% trust send the output to tempfile. That's my attitude at least. 
Check pm
Can you use Python code for the values? That is the problem with setup.py
I don't think so. 
Very cool. 
Read the PEP. It was rejected because the file format should be universally readable, including other languages besides Python. Would have been nice though. Dict/List literals are essentially just better JSON.
I use the semicolons as a convention across different languages since I code in python, C++ and others. I won't be removing the semicolons as python doesn't care about them, I'm sorry you don't like them, as for the setup.py requiring root I'm making an install.py and a setup.sh file. The setup.sh will still require advanced permissions to install extra packages... Nothing I can do there unfortunately :(
I very much disagree re:YAML. I don't see how this: [[addresses]] number = 123 street = "Fake St" town = "Springfield" [[addresses]] number = 221 unit = "B" street = "Baker St" town = "London" is better than this: addresses: - number: 123 street: Fake St town: Springfield - number: 221 unit: B street: Baker St town: London Similar for TOML's odd dict syntax using the `[x.y]` form.
Oh yeah it was to someone else XD sorry I'm not familiar with reddit. Its a weird media platform. Thanks for being good spirited about it XD Btw is there a better title I could use for my project that would result in less negative feedback and more constructive criticism? Just wondering 
Working on a twitter marketing / automation project.
No apology is necessary; this isn't particularly problematic. I hope you got all the help you needed!
Lol I didn't, 88% upvoted seems "downvoted" to you? You must be a wonderful person to code with.
try archive.is
try archive.is 
Honestly, I like the name — and you've managed to find something unique which is half the battle. Don't worry about the criticism, that's standard on reddit — you could post a script that cures cancer and still get down votes :) On style, Python has very particular conventions about "the right way to do it" (see PEP8). This is *a good thing* because it makes it easier for people in the Python community to contribute to one anothers code. You basically just walked into a club and broke all the rules... You rebel ;) It's definitely worth looking into for future Python projects, or as you work more on this one. That said, it's more important that you're making something and enjoying doing it, so keep it up :) 
When I had this problem, I just used to run the python 3.(latest) installation again using the "repair" option.
I didn't say the majority downvoted you, I said I did. The reason I did was because a nice person made a tool and offered it up for free, and YOU criticized how it's made... You must be a real dick. 
What do you mean? I am unfamiliar with reddit so I cant quite tell who this directed to XD forgive my ignorance 
It's directed at you. Stockholm syndrome is where a hostage falls for the hostage takers cause and joins their side. In this case, a programming language force you to use semicolons and no you think it "looks better" when all logic dictates otherwise. I hope some day soon you will use python without semicolons and see how beautiful it is.
Looks very interesting. Just a tip though, text is really slow in the asciicinema, rather annoying. Better is to write a readme that explains stuff, and just show a few commands in an asciicinema.
I dislike how Django uses it, but they usually use translatable strings with an underscore `_('Hello world')`, basically the translate function is aliased to underscore. I'd prefer they started using `t` or `trans` instead because I also use `_` as a throw away variable.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Why not accept the semicolon-removing pull request that another user had made? I sort of understand if you don't feel like going through it yourself, but since the commit had been done by someone already, you might as well merge it since, you know, it respects the Python style guide...
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Why would one use that instead of [0]? Readability?
[0] says "get me the first". The above says "get me the first of two". The behave slightly differently so they also communicate slightly differently. 
&gt; I'd prefer they started using t or trans instead Not to mention trans is a descriptive name that actually tells you what it's doing.
I have implemented many of the PEP8 standards and will commit them once I am convinced my code is stable :)
Maybe this [IDLE Enhancement Exception for All Branches](https://www.python.org/dev/peps/pep-0434/)? I'm not aware of anything else, but for better answers I suggest you go to [IDLE-dev -- IDLE development](https://mail.python.org/mailman/listinfo/idle-dev).
:\^) Welcome to heaven
Well I try to be nice XD 
I actually came from C++ but I do like python but I like semicolons because its easier to read for ME, I realize many disagree but I like it. :)
I believe purposely destroying a work of art is referred to as barbarism. And your coding convention hurts nobody but the poor saps who has to read it after you are done. In any case, you will always have an easier time reading my code, and I will always have a harder time reading your code. Those results should always stand on their own.
Except for anyone who comes from C will like my code more, oh and where is your code btw? I want to see it. Maybe I can learn something... Or issue a pull request to add semicolons to your code ;) but thanks for calling my project a work of art :) that made my day :)
Nice! You shouldn't use them yet, but once you're at the point where you're implementing Pep8 without thinking, check out AutoPep8 and YAPF. The first one soft-formats your code to the Pep8 standard, and YAPF hard-formats it (splitting up long lines, strings, etc). https://github.com/hhatto/autopep8 https://github.com/google/yapf They're built to be implemented into text editors. Some examples of the packages at work in Atom: https://atom.io/packages/python-autopep8 https://atom.io/packages/python-yapf AutoPep8 will *only* perform stable modifications, while YAPF theoretically could change the meaning of your code (although it's never happened to me). 
Are you following something like https://pythonspot.com/en/create-a-chrome-plugin-with-python/ and expecting to compile to js with Rapydscript? If so you're going to hit at least two problems. 1 is that Rapydscript won't just convert Selenium or whatever Python modules you want into js. You're stuck with the very small number of modules (6?) that have been implemented in Rapydscript. They won't be useful for web scraping. 2 is that Chrome extensions are heavily sandboxed/restricted. The way that people normally use Selenium for scraping won't work inside a browser extension. I would take a step back and tell us what you're trying to do (scrape a website? explain more), instead of how you're trying to do it. There's probably a much easier way. When you're trying to do something new, it's better to have only one new part and use things you already know for all the other parts. If you're new to Python and new to Chrome extensions and new to running Python in Chrome, start with projects that only use one of those things or you might get stuck.
Come to the dark side
Sure, but split(x, 1) is only two anyway, so I don't see the difference in this case. I've done it myself sometimes, but I'm wondering if there's actually an advantage.
Don't forget MANIFEST and MANIFEST.in
I like both, and use both daily for automation, analysis, etc. Python is a wonderful language, in so many ways. It has a natural learning curve, and you will learn a lot as you transition from simple imperative scripts to object-oriented design. R is wonderful analysis environment, and has many phenomenal qualities, but as a 'programming' or even 'scripting' language, it is a complete mess, IMHO. I love it - I love working in it - but mostly due to syntactical 'meat' from non-standard packages. Ggplot2, dplyr, generally anything you can get from Wickham or his team, is amazing stuff. Shiny and Knitr are transformational. But it's got some seriously messed up syntax choices, IMO, and is a functional-perspective objecty thing. I don't think it's a good 'first language'. Now as others have noted, you can call R from python (Rpy2) and even vice-a-versy now, from RStudio Knitr documents. This makes the choice for a practicing data scientist more complicated. But for someone developing skills (and no programming background) I'd say python for sure. You ~~will~~ are more likely to (again IMHO) develop better coding and design habitats from Python, and probably have more fun. Learn how NumPy works (for vector/matrix opps), learn to love iterators, etc. Then you can start with R. Just my 2cents. Anyways, both are wonderful aspects of human beings. Have fun!
I would personally recommend: https://www.udemy.com/complete-python-bootcamp/ On sale for $10 (it pretty much always is. If it isn't, download the mobile app and buy it there). Great course, thorough, videos are helpful. Also includes Jupyter notebooks of each lesson. Jupyter is great for testing out python code on the fly.
Understandable, but it's in the stack overflow link in the OP in excruciating detail. I can add it to the OP once I get back to a desktop though. 
My style is whatever PyCharm does when I tell it to reformat the current file. So that's another vote for PEP8 rules.
We also figured it would be useful for PTVS debugging: https://www.python.org/dev/peps/pep-0523/#debugging It is pretty amazing the speedup PyCharm has with it though! I will leave it to Brett or Dino to comment on future work but my understanding is it is still active, but the activity is a bit sporadic.
No comment possible in a configuration is innacceptable.
Just use Anaconda.
Okay so I installed python27 to my windows machine. How can i then install Wheel House files or the source code? 
Fun fact, the reason Google treats a dash (-) as a space but an underscore (_) as a hard character is because much of Google is written in python and Googles own devs wanted to be able to look stuff up and find help including searches with underscores. So now the worlds biggest search engine treats underscores as hard characters, annoying millions of unix users who often use underscores as spaces, because of python programmers :P
To each their own :)
It takes time. So when you enter the function, the first line says 'return s', and the function does. It gives s back and *returns* to the calling function, the parent code, how ever you want to think of it. The if tests never actually get run. Try removing the very first return, and things should seem a bit more sane. Well a bit less confusing anyway...
You are immediately returning s. So it's going to return whatever you pass in for s. Remove line 2 and it should work. You also need to revise your else if logic. Should be s == "no" 
`str.split(x, 1)` can return a list of length 1 or 2. So I suppose the advantage here would be an exception if the split didn't actually split. (But one should probably use `partition` for that...)
A wireless sniffer for network security auditing that includes a GUI, https://github.com/M1ND-B3ND3R/BoopSuite
The underscore function for translatable strings is a convention that started with C `gettext`, so it's fairly well-understood.
Ach I really hate __these. I used to work with someone who put them everywhere - it's worthless and breaks the Eclipse debugger! /rant
The error message tells you exactly what is wrong. Whatever file is opened and used by line 5 in setup.py has an invalid character in it. That invalid character is 0x81.
https://github.com/divijbindlish/parse-torrent-name/blob/master/setup.py The last commit is "Fix setup.py README read to work on Windows" from 6 months ago. The version on PyPi is older than that and doesn't have the changes. Literally 30 seconds to look at the Git Repo and see that. Part of doing Python, or any coding is reading the error messages and comprehending what they are telling you. Even if the main GitRepo wasn't fixed you could have forked it and done it yourself. 
If you have parameters in your url then this is the way to do it
They are not competing standards. All of them do different things. Having all of them in the same format and in fewer different files would be great, though. Note: [Pipfile](https://github.com/pypa/pipfile) is indeed a competitor to requirements.txt
At least they both use the toml language, so the 5 files are *only* in 4 different languages...
Why don't you put brackets around your if statements then? ;-) BTW if you're looking to get hired to write software, you do need to remove the semi-colons. If this is just a personal or toy project, it's fine.
Yeah, I don't understand what the point of it is. It talks about specifying dependencies, but doesn't pip already have that?
Its personal, and for others and honestly I work as a dev intern and asked some other devs and they said its fine syntactically its just not pythonic. But if I can add curly braces around my if statements maybe I will ;) I love how no one has told me how good of a tool it is, just a bunch of bitching about the semicolons XD makes me laugh such anger over a lil symbol XD
You are right, I will add that to my to do and I will get it in there asap!
Maybe you can get some help with your reading difficulties? Ellipsis at the end indicate an omission, or a trailing off. (It's important that you learn how to read, then you won't have these misunderstandings.) No, you ignored the contribution the author was graciously giving, and instead focused on a laundry list of things that you consider to be deficiencies: &gt;&gt;&gt;Oh God... camel-cased packages, semicolons, tabs instead of spaces, mixing good and bad spacing, quotation marks instead of apostrophes on some places... HERESY! &gt;&gt;&gt;Let me recommend some good night read, PEP 8. That isn't helpful advice, that's just rude behavior. 
&gt;Even if the main GitRepo wasn't fixed you could have forked it and done it &gt;yourself. Not everyone is Linus Torvalds. The person said they're an analyst, not a computer scientist. 
Exactly what I do.
This kind of thing seems like a great use case for namedtuple
Well don't use it I guess XD if its that important then don't bother XD
Same, though within a cluster I usually sort alphabetically. And I try to be explicit about imports, no `from module import *` (don’t want to pollute the namespace when I don’t have to).
Python isn't easily parseable, or editable by tooling. Nor is it easy to make safe to parse. That's a couple of the reasons for moving away from *python code* as the configuration format.
Yes, /u/eco32I is giving the best advice. Anaconda makes everything a lot easier to install on Windows. https://www.continuum.io/downloads
Any source on that? I could maybe see that being an early convention, but I'm a bit skeptical it would survive to this day if it would impede search.
Hmm...do you have an example query in mind where you include an underscore but don't mean it as an underscore? I want underscore to be treated literally when I search for `LD_PRELOAD` or `LC_COLLATE` for example.
I do the exact same, although within each category I don't pay too much attention to ordering.
I often name throw-away variables so I have a decent name to use if I ever decide I need it in the future, and also to avoid stomping on ``_`` when I'm executing code in the REPL. args, _unknown = parser.parse_known_args()
OK, but then you're inventing yet another format for which tooling must be created :-)
Google "Donglegate" for a not-so-funny moment.
I agree with other posters that it's not helpful to tell someone new to coding to go and fix a package themself. But to OP, you need to understand that pip and easy_install get their packages by default from [PyPI](https://pypi.python.org/pypi), and sometimes these packages aren't up to date. You've stumbled upon one of those occasions, where the author has fixed the problem on github, but not pushed it to PyPI. So in this instance, you can force pip to install the github master version, and thus get the fix. `pip install https://github.com/divijbindlish/parse-torrent-name/archive/master.zip` PS - I had the same problem as you installing that package on my Win7 machine, so don't jump too quick on the Win10 bashing band wagon.
Thank you, I didn't realize that was the case. Will update the article. Nice minimal example—mind if I use it? :)
It is aimed towards beginners, but I've been using Thonny more and more lately.
True newbie here- I borrowed a "Learning python" textbook from a colleague in the IT department and I made my computer print hello world! As dumb as it sounds it was really really exciting.
Matlab also encourages the practice (with ~)
I am in the same boat as you, good luck on your journey!!
And I'm a mechanical engineer.
Working on predicting a customers price elasticity index using Gamma GLMM. 
Thank you :) very valuable lessons and good intro to python 
Legit question here: Why do people dislike TOML? My first experience with it was via Rust, and it seems to work pretty well there. What am I missing here, and what are the recommended options aside from it?
I'm a heavy MATLAB user and prefer Jupyter Notebooks. I start developing an idea, when I reach a milestone and the notebook runs. I copy it and start on Copy2. By time I hit Copy10 it's ready to migrate to Spyder. 
I wish I had more to say - it looks well done. Maybe add your pycache to your gitignore?
Also the need to escape `/` in strings - why is this?
I'm glad you asked that! I'm a professional SEO so I sometimes just take it for granted everyone knows the - vs _ problem. **Directly from Google:** "We recommend that you use hyphens (-) instead of underscores (_) in your URLs." Source: https://support.google.com/webmasters/answer/76329?hl=en From **Matt Cutts** (former head of the web spam team at Google, but is now working for the United States Digital Service as the director of engineering): &gt; With underscores, Google’s programmer roots are showing. Lots of computer programming languages have stuff like _MAXINT, which may be different than MAXINT. So if you have a url like word1_word2, Google will only return that page if the user searches for word1_word2 (which almost never happens). If you have a url like word1-word2, that page can be returned for the searches word1, word2, and even “word1 word2”. Source: https://www.mattcutts.com/blog/dashes-vs-underscores/ **You can easily test this yourself** by choosing almost any two words and separating them with a dash and looking at the results, then trying again with an underscore. The results for dash and space are the same, but the result for the underscore are a LOT smaller and you end up looking at a misspelling search result (ie "Did you mean...") instead of a direct search. 
every great journey begins with a step 
Please see [Excursus: Setting environment variables](https://docs.python.org/3/using/windows.html#excursus-setting-environment-variables).
Oh that reminds me, no line breaks in strings either. Like wtf.
`pip install -e .` - a better way.
But `LD_PRELOAD` is an environment variable and I *want* google to search with the underscore, same with searching for C types like `size_t`, etc. People often use it on posix system to separate words in paths, so they don't have to write `python\ programming\ shortcuts.py` (and because older tools would behave strangely with spaces), but it is technically part of the path (or identifier or whatever) just like any other character. It's something to be aware of, but hopefully you have "Python" "Programming" "Shortcuts" in the text of your page somewhere rather than relying on google to extract keywords from the request path.
I am writing a script that checks a YouTube RSS feed with feedparser. Then if there is a new video out, it will download it using youtube-dl. 
PyCharm is so fully featured, it even has a minimalistic mode (toolbar &gt; view &gt; enter distraction free mode). It has both a bash console and a python console, and pretty much everything else you might need. [Take a look](http://imgur.com/a/qs31F).
Just mechanicalsoup. I'm so sorry if Its such a noob question.. I just really want to learn python so bad but google and youtube dont seem to help :( I need someone to teach me
It says syntax error when I type in pip install mechanicalsoup
I remember that also having been the end game for setup.cfg. 
Use pip from the commandline. Click [here](https://pip.pypa.io/en/stable/) for the pip documentation.
Command line? Sorry another noob question
If you find time, take a look at Geany. It is cross platform, fast and pretty conventionally designed, so the learning curve is not steep. It has only the basic IDE features, like project management.
github the code for that, please. Sounds cool.
&gt; I love how no one has told me how good of a tool it is, just a bunch of bitching about the semicolons XD makes me laugh such anger over a lil symbol XD I see no anger, just criticism. Basically it really doesn't invalidate the work you've done, and in this case because it's a personal project it's alright, but for future, if you are wanting others to contribute, it might discourage people from doing so. 
Going to attempt the perennial challenge: how best to automate a recurring email to a group based on the content of a spreadsheet. There are many like it, but this one is mine.
If it's not available in your path you can execute it as a module: python3 -m pip install &lt;target&gt;
This is what I was searching for. The site says that the framework is built on RoR principles(convention over configuration). But, as you already said, it is re-spawning in these days. So, it doesn't look stable.
Neat! That's a fine trick 
What benefit does this provide over Python 3's own enum module?
You still don't understand why it is important to have rules on syntax. It's like walking on wrong side of pavement. As long as you are alone, you can walk wherever and however you want. But if some stranger tried to walk with you (GitHub) or you got into a mildly large town with a lot of people (a company), you and everybody around you would have a hard time. Some village folks, never being in a big city, may still defend a "free-walking" as long as you are walking. Also, I think you are taking my original comment too seriously.
I would suggest learnpython.org as well. AFAIK Python the Hard Way does not care about Python 3, only Python 2 and - https://pythonclock.org/. Most important thing is to dive into it and really study and give it time and not giving up at first few blocking points. Think about anything cool and simple so you can finalize it, e.g: * generate number using random and ask user to guess the number and validate * drawing with turtle might be fun * calculator of your incomes/expenses * Working with API or do web scrapping and working with the data And I think best would be to learn it with your friends and ideally having some mentor suggesting the best way when you hit a wall. Learnpython.org makes use of ipython so use it on your PC as well. Those advantages when you can do just obj. and hit TAB to show you the available methods, plus obj.method? to get help and many automagical features makes it great tool for begginers imho.
Well, it's not minimalist, but my current favorite is Visual Studio Code. It has excellent Python plugins, you can run the code within the editor, and you can also use a terminal inside. The good thing is that I can use it for almost everything, I don't need to switch editors if I want to use a different language. I used to use vim, but I noticed that I use VS Code more and more. Here is a [screenshot](https://i.imgur.com/hCQkQEh.png).
Nice article. I had not heard the "dunder" term before. Nor did I realize that you could use _ as a variable name. I usually use some junk name for variables that I do not need, but _ is more expressive somehow.
`__foo` still isn't private.
/r/learnpython
One more point that should be mentioned. Everything starting with an underscore in the module scope is not shown in the Python generated documentation (`pydoc`).
Actually, names for binaries and scripts more often contain “-” than “_”. xdg-open, git-submodule, jupyter-notebook Only Python files contain underscores because modules need to have names that are valid identifiers
vim + tmux
Hi, I did the same thing. Porting a web based project from Rails to Django. The way I did it was total immersion and avoided trying to match Ruby structures/methods/loops etc with Python's. For tutorials, I cannot recommend any because the key was to look at the tutorial material, and make sure it was presented in a method one's brain would enjoy. I would simply google python tutorials and also on youtube and pick the ones which work for me. Live coding videos are good too. I will say Chris Schafer vids are top notch: https://www.youtube.com/user/schafer5 Here's a couple other tips: - Install ipython or bpython and start coding right there on basic data structures (dicts, lists, sets, loops, classes, booleans). - PyCharm has a free version. It's awesome. - Watch every Youtube video of Raymond Hettinger
Hm. You need a kind of vector plot : if you compute [x(t), y(t)] (for each data), and the same with a little time delta [x(t + dt), y(t + dt)], and for each data coordinate, you plot an arrow with that. Something like that? https://gist.github.com/458873bb625e9ea1cec44b51358e4f6c
So all deployment tools, provisioners etc. now have to support yet another format. Why not just go with TOML?
I just wanna put Poet (https://github.com/sdispater/poet) into the discussion. It's a working proof-of-concept implementation of Rust style package configuration. To me that seems the most appealing. It should be possible to generate setup.{py,cfg} based on that.
Besides flit, my own enscons project uses pyproject.toml to write the metadata (package name, version, dependencies etc.), and it uses a SConstruct file, a little bit like a Makefile, to build the package and any extension modules. If you only need to install the package or build a wheel, setup.py is not needed at all; if it is included it's only a compatibility shim to invoke SCons. In other words, this all happens without 'import distutils' or 'import setuptools'.
The problem with setup.cfg is that it didn't change the basic packaging model. It was basically equivalent to a less flexible setup.py call, combining metadata and build in the same file. With pyproject.toml pip gets enough information to download a build system, build your project into a wheel, and then do the install; i.e. the compiler options don't necessarily need to be inside pyproject.toml. So if distutils doesn't meet your needs for whatever reason you can use something else.
I would recommend "Dive into Python 3" (on the sidebar). Since you're already a programmer, it should be a quick way to get up to date with the basic data structures and things, without having to go through a beginner's "how do I program" tutorial. 
Your usecase is already solved by having requirements.txt so that pip can do its magic. Pip is already shipped. You can just add one line to stdlib invoking pip by default when any installation is performed. In fact, adding *another* hook will complicate things - now pip will have to check wtf the package will do when invoking the installation machinery. If you really wanted to push metadata away from setup.py, you could either build on formats we already have (requirements.txt), build a format that is entirely controlled by the project (a json-like python subset) or a format that is *really* widely used by tooling (json, yaml, ini, makefile, whatever). EDIT: looking at the PEP, this change seems to be driven entirely by build requirements rather than end-user distribution. Considering that such build requirements are supposed to be less and less relevant thanks to wheels, I'm even more baffled at why we should bother with this.
To have a dark theme ``` Edit -&gt; Preferences -&gt; User Interface -&gt; Display Style -&gt; Match Palette ``` And select ```Color Palette: Monokai```
That should be possible with list comprehension, you shouldn't need numpy for that.
If the error you get is "sorry, but this version only supports 100 named groups", you may use regex module &gt;&gt;&gt; import regex as re &gt;&gt;&gt; re.compile(m) regex.Regex('(((((\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *([- ](mm|cm|millimeter(s)?|centimeter(s)?)(?![a-z/]))( )?(by|x)( )?(\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *([- ](mm|cm|millimeter(s)?|centimeter(s)?)(?![a-z/]))( )?(by|x)( )?(\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *([- ](mm|cm|millimeter(s)?|centimeter(s)?)(?![a-z/])))|((\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *( )?(by|x)( )?(\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *( )?(by|x)( )?(\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *([- ](mm|cm|millimeter(s)?|centimeter(s)?)(?![a-z/])))|((\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *( )?(by|x)( )?(\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *( )?(by|x)( )?(\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *)))|((((\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *([- ](mm|cm|millimeter(s)?|centimeter(s)?)(?![a-z/]))( )?(by|x)( )?(\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *)|((\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *( )?(by|x)( )?(\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *([- ](mm|cm|millimeter(s)?|centimeter(s)?)(?![a-z/])))|((\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *( )?(by|x)( )?(\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *)))|((((\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *(to|-)([- ](mm|cm|millimeter(s)?|centimeter(s)?)(?![a-z/])))|((\\d+.( )?\\d+|\\d+( )?.\\d+|.\\d+|\\d+) *([- ](mm|cm|millimeter(s)?|centimeter(s)?)(?![a-z/]))))))', flags=regex.V0) You could also try checking the smaller 3 regexps xyz_cm, xy_cm, x_cm and use them until one matches your string
It's a bit long but here we go: error Traceback (most recent call last) &lt;ipython-input-38-538a16efeaeb&gt; in &lt;module&gt;() ----&gt; 1 final_regex = re.compile(m) /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/re.py in compile(pattern, flags) 231 def compile(pattern, flags=0): 232 "Compile a regular expression pattern, returning a pattern object." --&gt; 233 return _compile(pattern, flags) 234 235 def purge(): /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/re.py in _compile(pattern, flags) 299 if not sre_compile.isstring(pattern): 300 raise TypeError("first argument must be string or compiled pattern") --&gt; 301 p = sre_compile.compile(pattern, flags) 302 if not (flags &amp; DEBUG): 303 if len(_cache) &gt;= _MAXCACHE: /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_compile.py in compile(p, flags) 560 if isstring(p): 561 pattern = p --&gt; 562 p = sre_parse.parse(p, flags) 563 else: 564 pattern = None /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_parse.py in parse(str, flags, pattern) 854 855 try: --&gt; 856 p = _parse_sub(source, pattern, flags &amp; SRE_FLAG_VERBOSE, False) 857 except Verbose: 858 # the VERBOSE flag was switched on inside the pattern. to be /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_parse.py in _parse_sub(source, state, verbose, nested) 413 start = source.tell() 414 while True: --&gt; 415 itemsappend(_parse(source, state, verbose)) 416 if not sourcematch("|"): 417 break /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_parse.py in _parse(source, state, verbose) 761 sub_verbose = ((verbose or (add_flags &amp; SRE_FLAG_VERBOSE)) and 762 not (del_flags &amp; SRE_FLAG_VERBOSE)) --&gt; 763 p = _parse_sub(source, state, sub_verbose) 764 if not source.match(")"): 765 raise source.error("missing ), unterminated subpattern", /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_parse.py in _parse_sub(source, state, verbose, nested) 413 start = source.tell() 414 while True: --&gt; 415 itemsappend(_parse(source, state, verbose)) 416 if not sourcematch("|"): 417 break /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_parse.py in _parse(source, state, verbose) 761 sub_verbose = ((verbose or (add_flags &amp; SRE_FLAG_VERBOSE)) and 762 not (del_flags &amp; SRE_FLAG_VERBOSE)) --&gt; 763 p = _parse_sub(source, state, sub_verbose) 764 if not source.match(")"): 765 raise source.error("missing ), unterminated subpattern", /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_parse.py in _parse_sub(source, state, verbose, nested) 413 start = source.tell() 414 while True: --&gt; 415 itemsappend(_parse(source, state, verbose)) 416 if not sourcematch("|"): 417 break /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_parse.py in _parse(source, state, verbose) 761 sub_verbose = ((verbose or (add_flags &amp; SRE_FLAG_VERBOSE)) and 762 not (del_flags &amp; SRE_FLAG_VERBOSE)) --&gt; 763 p = _parse_sub(source, state, sub_verbose) 764 if not source.match(")"): 765 raise source.error("missing ), unterminated subpattern", /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_parse.py in _parse_sub(source, state, verbose, nested) 413 start = source.tell() 414 while True: --&gt; 415 itemsappend(_parse(source, state, verbose)) 416 if not sourcematch("|"): 417 break /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_parse.py in _parse(source, state, verbose) 761 sub_verbose = ((verbose or (add_flags &amp; SRE_FLAG_VERBOSE)) and 762 not (del_flags &amp; SRE_FLAG_VERBOSE)) --&gt; 763 p = _parse_sub(source, state, sub_verbose) 764 if not source.match(")"): 765 raise source.error("missing ), unterminated subpattern", /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_parse.py in _parse_sub(source, state, verbose, nested) 413 start = source.tell() 414 while True: --&gt; 415 itemsappend(_parse(source, state, verbose)) 416 if not sourcematch("|"): 417 break /usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_parse.py in _parse(source, state, verbose) 616 if item[0][0] in _REPEATCODES: 617 raise source.error("multiple repeat", --&gt; 618 source.tell() - here + len(this)) 619 if sourcematch("?"): 620 subpattern[-1] = (MIN_REPEAT, (min, max, item)) error: multiple repeat at position 1104
Great idea! I'll come up with one that works for everyone and submit a pep.
No line breaks in strings is pretty helpful for quickly identifying syntax errors at the point of the error, so I can understand why it would be added. Whether or not something like that should be enforced by a parser which is reading data is a different question. The notion of being "liberal in what you accept, conservative in what you create" should really apply to something like JSON. I want a warning about a line break in a string, and an attempt to continue to parse the file, not a hard parse failure. Enforcing the spec in that way is what leads me to using the yaml parser to read and json to write. 
I hope the official documentation gets updated to say what the current best practises for are for Python deployment and requirements, what tools are obsolete, and what if any legacy support should be used.
What are the best sessions you've seen that come recommended for an experienced pythonista?
The main point of contention is right here: error: multiple repeat at position 1104 Which I'm guessing means, that the final regex has a syntactic error at that particular position. My question is more this: Is there a cleaner way to define this regex?
The code shown won't run because of the line continuation characters '\' in the assignments for xy_cm, xyz_cm and m. Take them out and it runs fine for me.
What if you require a package for installation?
Then it goes in requirements.txt. I don't follow you.
No offense, but those variable names look pretty useless. xyz_cm? by? x_cm? length_token_pattern area_token_pattern volume_token_pattern
None taken. I didn't write it lol. I'm just trying to get it to work. The original regex is found here: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4586346/bin/ACI-06-0600-s001.pdf
I'm coming back to comment on this again, and gold you. This visualization completely resolved every question I had about this and since reading it I've been able to make my arrays/lists with next to zero thought about the range. 
Yep. That whole paragraph explaining each regex could be replaced with intelligent naming. Academics don't typically work in production environments, which is why their variable naming can be so bad. Once the code is in your codebase, it's your responsibility, so don't let them choose it!
def SumFunction(args1, args2): return (args1 + args2) This is a simple funtion to add up two values. And you call it in this manner. Assuming you have two digits you want to up 5 and 9 respectively. You call the function like this: SumFunction(5, 9) Or print (SumFunction(5, 9))
Not you as in me, you as in the stdlib developers. That machinery that has now been merged will now have to be maintained and updated to follow TOML and Python changes. All this just so that someone can specify its build requirements in a format that he likes a little bit better than the umpteen that were already there and could have been used instead. &gt; So yes just like setup.py you still need pyproject.toml in your PyPI package. As the top comment says, that's yet another file for packagers to produce and maintain. Great.
It is already pre installed in your python version. All you need do is to update it with the command C...\&gt; python -m pip install -U pip Note that u need to include the package in your PATH system variable if its not there yet. Pip location is usually in the Scripts directory in your python file.
It does here: &gt;&gt;&gt; 42 42 &gt;&gt;&gt; _ 42 
Yes, if there were any alternativs available. In stdlib you have, as far as I remember, support for CSV, JSON and "ini-files". I hope we can agree that CSV is not a suitable format. JSON can't handle comments which makes it unsuitable as a configuration format. It's also not very pleasant to read _or_ write, can't have trailing commas and creates annoying diffs. That leaves ConfigParser. Problem with that is that there is no specification for the format it parses. Which encoding should the files be in? Does it support other types than strings? Can you use spaces in section names? Can you use interpolation or not? How do you format a list? A nested dictionary? How do you separate None and empty string? Even the documentation for the module is ambiguous, it states that "The optional values can contain format strings which refer to other values in the same section" but further down it reads "On top of the core functionality, SafeConfigParser supports interpolation.". Well, which one is it? Does the ini-file format support interpolation or is it just the SafeConfigParser that supports it? I would not consider a format that doesn't even have a specification. A python subset would most likely take longer time do define than to implement a TOML parser, and that would also need to have a parser written for it. So while I agree with you that it would be better to use an existing format I don't see one that is suitable. Specifying a subset of python is not such an easy task and will still require a parser to be written.
&gt; In stdlib you have, as far as I remember, support for CSV, JSON and "ini-files". And html and xml; which, when it comes to tooling, are probably the best supported ever (if little loved). And of course requirements.txt and MANIFEST, which have their own formats. &gt; Problem with that is that there is no specification for the format it parses. Well, this was an excellent chance to standardize on one. Besides, that's what setup.cfg already uses - just expand that, have an optional setup-build.cfg with the new format. Requirements.txt has little specification too, and it was adopted without any major problem. This is just an excuse, let's be honest; ini-style is just out of fashion. &gt; A python subset would most likely take longer time do define than to implement a TOML parser There are literally two one-line suggestions in this very thread, doing the exact same thing. Come on. To me it looks like a solution in search of a problem, done for the benefit of toolmakers and other ecosystems rather than for Python.
I got into an argument with Shuttleworth a few years ago. At the time I was working on KDE. We'd do our own translations within KDE. Ubuntu was taking KDE and retranslating it, so that menu items matched those from their Gnome translations. They thought it was important for the File menu to be the same in Gnome and KDE when translated into Spanish. But what they ended up doing was making it impossible for us to support KDE users on Ubuntu. Users would pop into forums, on irc, etc., and complain that they can't find feature X, or feature Y is broken. Then we'd try to walk them through the software to resolve it. Only, they wouldn't be able to find the setting. Or the setting would just be gone. We complained about it to Shuttleworth, in person even, but he presented it as a 'his way or the highway'. This was almost 10 years ago. It's gotten a lot worse since then. I don't recommend Ubuntu to new users either. I usually recommend Fedora to newbies in North America (since it does gnome right), and OpenSuse to everyone else.
I feel like I don't have the math comp/sci background for half of these :(
Shouldn't this be in /r/learnpython?
Finally attempting to finish my tweet classifier, which I started 6 months ago lol
Can you predict how long it will take until the number of cryptocurrency startups exceeds the number of people on earth?
"Shall we use slots?" misheard and taken out of context went viral in my office once.
The current development version of PyInstaller supports 3.6. I've used it successfully to create an executable for a 3.6 project myself. If you download the current dev branch -- https://github.com/pyinstaller/pyinstaller/zipball/develop -- you can unpack that into a directory and manually install it with pip.
That wouldn't retain order.
There are already standards for this in the Python community.
There's also https://arokem.github.io/python-matlab-bridge/ Multiple things to try: 1. Why not have Matlab read the image instead of passing it? 2. Save the image as a .mat and pass the filename instead of trying to pass the data through the interface. 3. Batch everything. Do all of the python stuff in a loop, save it to a .mat. Then run Matlab once on everything. Have you profiled your code in Matlab to see what is taking time?
stdlib also supports `Enum('colors', [('red','#F00') (etc,etc)])` if you need definition order, no?
Try to avoid web scrapping if you can, something little changes on the page and you have to redo your lxml or beatufilsoup code (these two are used for parsing the html). Use API if you can, however if there is no other way and the pages stay in the same way, then there is no problem. You can find many tutorials people using requests to get the html source and then parsing it with BeautifulSoup or lxml. Why would you put anything to excel? :D You might have thought the CSV, or even some JSON is fine, no need to go to big databases, but if you do, use SQLAlchemy for that. Few examples where web scrapping is used: I build this [currency converter](https://github.com/Pulecz/convert_currency) using [fixer.io](http://fixer.io/) Then I had an idea to get random Czech names, so I used [this page](http://www.kdejsme.cz/seznam/prijmeni/A) (with random uppercase letter) and got all the surnames which are in the li tags with url containing some string. But I would suggest automating the boring stuff, make something that you will use often. 
Most of this is going over my head. What's a practical application for this?
isort enforces pep8 plus the most common decisions that people apply within the variation that pep8 allows: You would be amazed how many variations are allowed within the community official rules (line separate with \ or using parenthesis, etc). isort has at this point been downloaded 6 million times, so I've heard about all of them... The specific example that made me want to include profiles for these, was here: https://github.com/timothycrosley/isort/issues/409
you can create a data type yourself you need to learn special class functions you can look to fluent python book as a reference 
Yes. I had immense problems with using pyinstaller with 3.6.1 with the current stable version. I looked to see if the dev version would work but didn't' see any information on that. I had to revert to using 3.5.2 which worked fine. There are other packages such as briefcase and cx_freeze. I didn't have much luck with them. cx_freeze does not however create a single enclosed executable but rather creates a directory with all the dependencies along with the executable.
If you compile 3.6.1 from source, it won't be included. You'll have to use get-pip.py (from online) to get it.
Apologies to the speaker, but I got around that by turning the volume off and just looked at the stuff that was typed in the video.
Learning how SpaceX land their first stage and try to implement it in Kerbal Space Program with RO mod. Currently using Proportional Navigation (Missile Homing Guidance ?)
Emacs + IPython
I personally liked "hacking nes games with python"
Hettinger was presenting stuff from a RTD site -- do you know if this content is public anywhere?
Yes this was good. I was ready to spawn some fireballs in Mario and he switched to Zelda. I wished there was more time at the end, he shouldn't have live coded the entire thing. He could have pasted in the Lua code at least. 
* [GILectomy](https://www.youtube.com/watch?v=pLqv11ScGsQ)
well: $ ls /bin | grep -c _ 207 $ ls /bin | grep -c - 632 dashes in binary names are thrice as popular as underscores
I see what you're saying, but your reaction means he did it right. He left you wanting more :)
Shapely is the most popular python geometry library, but the first two problems are trivial arithmetic, and I can't work out what problem you could possible be trying to solve in the third. Maybe offer some context and we can reframe your problem.
This is really cool stuff. It's like Shenzhen without having to go to Shenzhen!
Click link, find out? The talk is just fantastic, I am pretty sure I would listen to him talk about anything because he is just a fantastic speaker.
In addition to what others have mentioned here, Dijkstra adds the observation that making `seq[x:y]` inclusive at the upper and lower bounds would mean that the empty sequence is denoted by the ugly `seq[0:-1]` (or similar).
What do you see on the page for: Edit -&gt; Preferences -&gt; User Interface
I believe you, 1,000s wouldn't.
You still don't understand that YOU WERE, AND STILL ARE, BEING A DICK. He gave freely of himself. You used the opportunity of that gift to be an ass. If someone makes available a pie for public consumption, you are free to enjoy it, or leave it alone. If you take that opportunity to publicly criticize the pie, and do so with this "Oh God..." kind of claptrap, then you are the worst kind of jerk. That's what happened here. You owe the contributor an apology. 
I've also flagged this up on the main Python mailing list and it's been torn to pieces. I can only assume that the author is more interested in a clever name than useful code, so please move on everybody, nothing to see here.
Sometimes you just want to use np.sin(arr) instead of iterating through a list using [math.sin(x) for x in arr]. :)
No, over 25 years after the language was first released nobody should be wasting their time with an article such as this.
He hasn't posted it yet, but [here are some similar docs](https://dl.dropboxusercontent.com/u/3967849/sfmu2/_build/html/recipe.html) from a previous presentation.
Unless somebody is determined to get at it, in which case you're simply wasting your time.
Yep. Or just tab+tab in ipython.
Just crazy, I never will understand it [Vim (cleaning product)](https://en.wikipedia.org/wiki/Vim_(cleaning_product)) :-)
Kali 2 requires sudo. People seem to agree that su by default is bad.
Is it possible to include the dir options for autocomplete in vim? I know pycharm does that. 
Thank you so much! :)
Thank you so much! :)
If you want fancy highlighting and colors it is easy to install new ones as well. Light, FOSS, simple.
I guess you didn't write a version without mypy to compare performance?
Code talks. I look forward to your competing project!
Can I safe to say, in a way this method is one of the way to encrypt my python source code? Is it easily decryptable?
Examples: x = 3 # this would be an integer y = "3" # this would be a string something like print(x + y) wouldn't give you 6 or "33". You'd have to convert one or the other to meet the format like so print(x + int(y)) # will give you 6 print(str(x) + y) # will give you 33
I was a big fan of Joe Jevnik's [Title Available Upon Request](https://www.youtube.com/watch?v=7SH3zWHdGoc) about lazy evaluation.
Using pyinstaller/cx_freeze/whatever might obfuscate your code a little bit but it is still going to be pretty easy to "extract" the code for anyone determined and skilled enough because Python is interpreted. Even code that has been compiled to machine code can be reverse engineered - even if you can't get the original source code via reverse engineering you can still figure out how any algorithms the program uses work. In conclusion, if you really want to keep the computational logic of your code as secret as possible, the only real option is to have a client-server setup where all your end users are running dumb clients that send requests containing the input data to your server, which does the calculations (using the super secret algorithm) and then responds to the clients with the answers. 
A blog post about learning mechanical physics and math using python for examples and demostration of the theory.
What if the person renaming it is not you? A variable prefixed by an underscore in the context of a function or script by convention will remind them of an unused variable.
A few comments: 1. "It takes a lot of effort to add correct type hints everywhere" It's worth noting that you don't have to add annotations everywhere in order to get the benefits of types. The type system is deliberately designed to be *gradual* (you can explicitly state certain things can be any type) to let you slowly transform your codebase from being entirely untyped to typed. Usually, annotating one discrete chunk or module at a time is a reasonably good approach. But yeah, I do agree that annotating an entire large codebase can be a lot of work. There are some tools like [pytype](https://github.com/google/pytype) that attempt to infer types for your entire codebase which might make annotating easier, but my understanding is that pytype is still very much in heavy development and won't work in all cases yet. 2. "Mypy has bugs. One of the most obvious is that it doesn't know about several modules and classes from the standard library." Yeah, I agree this is a problem, though this isn't a problem with mypy so much as it is a problem with [Typeshed](https://github.com/python/typeshed), which is a resource more or less shared by multiple type checkers other then mypy. Typeshed quality is sort of hit-or-miss at the moment, but on the bright side, it'll only get better as time goes on. The various parties interested in Python types (mypy devs, Pycharm devs, etc...) are also aware of this problem -- in fact, I think at least one or two of them are making an active push towards cleaning up typeshed as we speak as a part of the Pycon sprints. 3. "Shutting mypy up is done via a # type: ignore comment. Tale now has about 60 of these... Some of them can and should be removed once mypy gets smarter, but I have no way of knowing which ones they are." Use the `--warn-unused-ignores` flag. You may also be interested in `--warn-redundant-casts`. 4. "Sometimes you have to use strings rather than the type itself [...] Type hints for variables are often required to help mypy [...] This causes a lot of extra imports in every module. In my case this even led to some circular import problems that were only fixable by changing the modules itself." These are all fair points, though for the first two I think it's unclear what a better solution would look like given current limitations. I do agree import cycles in particular are nasty -- there are some dirty hacks you can do to get rid of them, but at expense of code readability (e.g. use the comment syntax for types and hide your type-only imports under an "if False" clause). 5. "some type hints can become quite elaborate" As you said, type aliases can really help here. Something I personally also like doing is defining a `custom_types` module, and sticking all of my aliases in there, which helps with the "polluting namespace" issue. 6. "...static typing (via type hints + mypy tooling) clashes with Python's dynamic duck type nature." This is probably not directly related to your criticism here, but you may perhaps be interested in [protocols](https://www.python.org/dev/peps/pep-0544/), which is a proposed change that will add structural subtyping to the Python types ecosystem (currently, we have only nominal subtyping). In a nutshell, protocols/structural types will make it easier to annotate code that make heavy use of duck-typing.
Scala I like the options between functional and OO code, similarly to how you can use each in Python. Also, it runs on the JVM, which is just convenient for cross-platform. The guys working on the language are doing a great job, and even though the language is daunting for people new to functional programming, I strongly recommend it. 
Can I ask why you're concerned?
Emacs and elpy
Well I get what a variable is, but I don't get the whole difference BETWEEN variables and strings in terms of input. Like, if I can do My_String = "3", why would I bother using My_Var = 3 when they essentially do the same thing, but a string can be used for more, for example strings can also be = "Hey hows it goin?" Where as variables can not. I am only confused about why use variables when you can just use strings instead. I'm not sure what functions differ between the two. Again, i'm still new to this.
Quick question, for the variable you set up. I tried inputting that, and simply came up with: "Hello, %s, how was day today?" x4. How would I be able to set the % to be the name, with one of those being for each name?
Has cython become less relevant? As far as I'm aware it's still pretty heavily used. Libraries like pandas rely on it for pretty much everything, and I've even found a few good uses for it at work. 
Sorry about that. I forgot to add the variable at the end. % name goes after the closing double quote and before the closing parenthesis.
I prefer Kali 2 or Fedora security lab, or just Debian (with xfce or a wm), also like openbsd with cwm. I used the original Kali for a while but I set up sudo. I don't see the point of only having a root user, seems like a bad idea.
think i see the confusion. My_Var is the variable. 3 is an integer, not a variable. also "3" + 1 is not valid, so "3" and 3 do not "essentially do the same thing" :)
That doesn't really mean anything. Those pages are automatically generated as soon as the 3.6 release was made, and the trunk becomes 3.7. If you want to see the release schedule of 3.7, read [PEP-537](https://www.python.org/dev/peps/pep-0537/#schedule). Spoiler: 3.7.0 is over a year away (2018-06-15) but of course schedules are never set in stone. 
Thank you for your reply! There are some valuable tips in there that I will certainly try out. And perhaps I'll look into contributing to typeshed for at least the modules that I found are missing.
Rust - fast, safe. Also you can easily interact with python from rust, so you can use rust for python extensions
I went and got a shower, and realized how stupid I was making things more complicated than they are. If I could run this by you, I think we could understand what I was doing wrong haha. So, Variables can perform functions, while strings cannot. My confusion was thinking they were the same thing, like having a variable that says 1 + 2, and having a string that says 1 + 2, but I did not realize that the variable would actually solve and put 3, whereas the string would still remain 1 + 2. Would this be correct?
Wow! Like I said this is my first language and i'm really new to it as well, but this is actually really cool! Thank you :D
The only other language I enjoy using is C#. Sometimes I'm forced to use Matlab, but I'm really good at kicking and screaming. 
So variables are not always functions? What else can you use Variables for then? Ive mainly heard of them used for calculations, and data so far.
:/ you are using the words all wrong. x = 3 3 is an integer x is a variable s = "q" "q" is a string s is a variable &lt;---- take note of this. seems to be source of confusion x + 7 gives 10 because 3+7 is 10 s + "3" gives "q3" because "q"+"3" is "q3" (+ on strings is concatenation) x + s is invalid because 3 + "q" is meaningless 
I am also new to programming and Python specifically, but you are using words I don't think you fully understand. I got a degree in math and come from a math-heavy background so using words like "variable" and "function" are natural for me, but they have completely different meanings in programming. A variable specifically stores information. When you type out a program, let's say it is 100 lines long, and on every fifth line you need to print out "Hello World". Instead of literally typing "Hello World" every fifth line for a total of 20 times, you can assign "Hello World" to the variable x. So for the first time you write x = "Hello World". Then every fifth line you can just type, print(x), and when you run your program every fifth line will output "Hello World". Therefore you did not have to type it out every single time. You stored your information in the variable x, and when you called on your variable x, it printed exactly what it had stored, nothing more nothing less.
I gotta admit...that was pretty dope. 
Sorry! Haha thank you though, I think I am getting it now. I just went over concatenation if that gives you any hint as to where I am at, but I think that helps me to understand your last sentence :)
You should use a `.gitignore` file in your project, which will allow you to automatically prevent unnecessary files/directories (like `__pycache__`) from being checked into your git repository. Also, if you are familiar with HTML, try a building a basic Flask web application. A guestbook or something similar, perhaps?
I would like to release a closed source automation package to my client. Thats all. 
Because the default programmer is a white male. My not acknowledging that he's black I want to bring attention to the increasing diversity in the Python community and the programming community at large. 
I'll join when they there is a DAPP and they have an ICO :D :D And "proprietary, in house hedge fund"? dafuq? So... they will trade for themselves, and also let others trade on the system. Not much conflict there! :D It just gets scummier and scammier.
Crucial, yes. One example was needing to clean unicode characters on large corpuses of data for machine learning. Between optimizing the logic and cythonizing, it got about 150x faster than the pure python version.
The only valid reason to use Python 2 is on an existing project that is too massive to convert fully or a serious library that isn't converted. DO NOT START WITH PYTHON 2.7. Even if you are working through a learning via Python 2 book. There are easy to find pages with the differences between 2 and 3. 3.6 is an obvious win compared to 2.7. 
Python2 is slowly being phased out in favor of python3. If you are familiar with py2, you can easily grasp and make the switch to py3. Continue learning from the book, and keep in mind when writing/porting programs to py3. Many scripts run in both py3 and py2. The libraries, which may not be available in py3, may potentially be ported in the future. Or they won't be, and will be replaced by a newer/better library. So, work with what you are most comfortable, for now. This is also a good time to learn about virtualenv. Start using that if you don't already do so. 
Ah, I just listened to a podcast about that. There was a solid 15 minutes just explaining how the name(s) came to be.
I imagine it would also make gatherings 1000x more comfortable to be in/go to if there's other people there with similar backgrounds.
It's not about having a hard-on for one version over another, it's that Python 3 *is* the proper version to use, as per the Python Software Foundation. As stated above, the only defensible reason to use Python 2 over 3 is if you're working on legacy code.
3.6 may be the first version seriously better than 2.7, but it is seriously better than 2.7.
As a novice programmer who went through the "Learn Python the Hard Way" book... I HIGHLY recommend Python 3. Python 2 is fine enough, but if you learn Python 3 you're already preparing for the future (Python 2 isn't getting any younger and will eventually die, no matter how slowly). However, if you're ever curious about taking programming further, Python 2 will not prepare you as well for that path. Just like learning to fix a car with a carburetor on it now will less informative for a mechanics job because cars are slightly different. There are honestly very few contextual differences as a novice between Python 2.7 and 3.x. One of the only big ones that I can recall off the top of my head is Print now requires print(). Other than that, the syntax is pretty much the same and you shouldn't have any complication with Python 3 syntax, even/especially if you switch now. You've got the basics and the beginnings down, I'm guessing. So you should be able to take that beginning and run with Python 3 just as strongly as you would with Python 2.7. PS - I don't completely recommend this, but you could simply use Python 3 for Learn Python The Hard Way and teach Zed that you're the boss Applesauce! :) 
`math.gcd()` was added in Python 3.5. You're using two different versions, apparently. (And Pycharm doesn't really have anything to do with it, because it's not executing your code. It's using some Python interpreter.) 
Robotics EIT here. I like python very much, and I'm playing with automating KSP using kRPC. PM me to discuss.
Also, consider Octave. Almost any .m files you write with that work in Matlab with no problems. This is easy enough that you don't need the toolboxes or Simulink.
I figured someone would say that haha, I was just trying to see if it was worthwhile pursuing and if it had solid applications in the industry I'm considering. Thanks for the input though 
I'm trying to learn too! From scratch. Found a free resource online. 
Howdy, im also learning to code Python! :D I haven't heard of those sites, however I have been using CodeAcademy and its been pretty great. Its free, though you can pay $20 a month for a few extra addons, like live support to help you, and extra review questions but it doesn't seem too necessary. Let me know how you progress! :)
Early I learning Python, I stumbled across Cython. Following and tweaking the tutorial, I reduced the time it took to map an inefficient method across an 800K row data frame from 40+!minutes to 19. Then I realized the *actual* way I should have constructed said method and the pure-Python finished in 11. Adding Cython had it finish in less than a one. So, now that I'm still an amateur but less of one, if I'm doing something data- or memory-intensive, I always try to do the minimum Cython optimizations. 
CompTia? I go to a tech school and the class across from me I believe does stuff for it. Not sure but it sounds familiar and I know they do a lot of related stuff to that. Sounds interesting though! Me personally I am learning this for a hobby, and I have always been interested in coding. I actually was gonna go learn with them but most of the computer hardware related stuff they do I already know, and I would rather this be my hobby instead of job. Its super cool though. I do more component level electronics/electrical stuff and they seem to relate.
Since you already seem interested in Python, a whitespace-significant language, you may really enjoy the [whitespace](https://github.com/haroldl/whitespace-nd) language. Lucky you - it can be installed with cabal.
Wait, so that can pick up packets from a nearby router? That sounds badass! Ohh i'm just getting into Python but that sounds super interesting.
You need a compatible wireless card like the tplink tl-wn722n but yeah you can get packets. 
... and then when you want to bring what you've learnt back into python, there's [kanren](https://github.com/logpy/logpy). I haven't personally used it but it [sounds very cool](https://jeffersonheard.github.io/2016/11/simplifying-complex-business-logic-with-pythons-kanren/).
I'm not entirely sure that all the variables in your formulas are referring to. Specifically, 𝐹𝑛𝑒𝑡 = 𝐹𝑡 − 𝐹𝐷 − 𝐹𝑔 𝐹𝑛𝑒𝑡 = 𝐹𝑡 −(1/2𝜌𝐶𝐷𝐴𝑣2)− 𝑚𝑔 Do you have a rubric that explains the problem/formulas? Feel free to PM me; I may be able to help
I'll just that out! I'll add this onto my resources guide on my blog. Maybe it'll help others out in the same boat. Thanks!
I used to work as a model developer for a very large insurance company, actuaries would typically use excel and then it would be fobbed off to Java or C# developers to replicate as a website. All data science was being done in much simpler tools such as tableau because it's cheap for people's time. If you want to get into insurance it could be worth learning some stuff like, bornheutter-ferguson method and chain ladders and implementing them. They are pretty popular insurance tools.
I have to use R on occasion and I feel like I've been dragged back into the dark ages. I don't know why statisticians are so tied to it, the syntactic sugar is only marginally nicer than python and everything else is significantly worse.
Ruby - Very similar to Python. It's my first language when I began my software engineering career (But I have been coding in Python for school, toy-projects prior to that). It fed me for a while. I have since then switched to Python (of course) since my current work involve lots of automation, data proc, and viz. I occasionally use Ruby from time to time for side-projects so as not to forget it etc. Sometimes I use it for nostalgic purposes, but that's just me. Cheers.
&gt; all libraries and frameworks support it. Not even close. There are basic libraries (wxPython anyone?) that don't. It's about time they do though.
Html/css
HTML to specify the page content and CSS to style it. Add javascript to make it more "responsive". Useful website: https://www.w3schools.com Book: https://www.amazon.com/HTML-CSS-Design-Build-Websites/dp/1118008189 (His Javascript and jQuery one is also good) Once you've got that down you can use a python web framework such as Flask to add more functionality (if you so chose). http://flask.pocoo.org
Hey thank you Pelidc and 'CCC' I'm pretty sure just off the quick search I did I am going to go down this road. Very appreciated. Thank you for taking the time out of your day to help. Cheers!
Still working on my image viewer app made with kivy. Since the bugs became too complicated to debug on the fly, I had to implement unit testing. It takes a lot of time but it really helps to find bugs I didn't expect at all. Now I have one big class tested thoroughly and I have to do the rest.
ah my bad, I meant the "Looking to hire" doesn't work. I thought it took you to /consultant hence my comment above. I am not looking to hire, I am just nosy :)
[This website](www-personal.umich.edu/~mejn/computational-physics/) has examples you may find helpful. As for syntax, you can define a function as: def function_name(arg_name): # this is a comment (doesn't run) # functions can have multiple args # put calculations here # return statement here example: def add_nums(num_one, num_two): res = num_one + num_two return res check = add_nums(3, 6) print(check) # 9 a, b = 3, 6 check2 = add_nums(a, b) print(check2) # 9 num_list = [3, 6] check3 = add_nums(num_list[0], num_list[1]) print(check3) # 9 General comments: Exponents are typed with ** as opposed to ^. You may also want to look up tutorials/docs for modules numpy and scipy. Plotting is easiest with matplotlib.pyplot (look up matplotlib); these is a necessary import (numpy and scipy are optional). You can add histograms, scatter plots, line plots, contour plots, etc. with legends, customized axes, etc. Example: import numpy as np import scipy as sp import matplotlib.pyplot as plt x = np.linspace(1,100,100) # [1, 2, ..., 100], (start, end, number of steps) def example_func(var): # not using x to not confuse with global variable return np.cos(var) # numpy is vectorized, works with numbers and lists/arrays y = example_func(x) x and y must have the same number of elements, which can be checked with len(x) == len(y). plt.plot(x, y) plt.show() # show the plot # or plt.savefig(file_location/file_name.png) # saves the plot to specified file_location with file_name As for reading in data from a file, you may want to try numpy (loadtxt ?) or scipy (io_read ?). Or consider calling matlab through python, as described my [matlab website](https://www.mathworks.com/help/matlab/matlab_external/call-user-script-and-function-from-python.html?requestedDomain=www.mathworks.com) and [stackoverflow](https://stackoverflow.com/questions/2883189/calling-matlab-functions-from-python). Good luck.
Lua is just fun. [Love2d](https://love2d.org/) in particular.
Ah I see what you mean. Yes you are right, I hadn't actually finished setting up the "looking to hire" form. I've linked it now if you actually did want to hire one day :) My plan is to gather a bunch of freelancers on one side, and a bunch of decent clients on the other. I'll manually match them for now but with enough volume I hope to be able to play with some machine learning to match them one day!
C/C++ obvs Rust is kind of neat, and picks up a few pitfalls of Python Fortran for when you want numbers to go *super quickly*
FYI the reasons you're getting downvoted are (most likely) - The answer to "should I learn python" is always "yes" - This question might be better suited for r/learnpython
&gt; The biggest hassle with Python3 is the print(beer) syntax, other than that it's no biggie. First of all, I wouldn't call it a hassle. I actually prefer it for its consistency. Then I think other differences are a little more difficult, for instance that range only creates an iterator and if the whole list is needed, you gotta wrap it explicitly in list(). This is a real difference. However, this makes sense, remember explicit is better than implicit. Python 3 all the way. 
Get away from that book! You'll thank us later.
I'd be interested to know your experience with other languages than python. Have you ever used a statically typed language? If no, do you think you would like to try one now that you have had a taste of typing in a language not really built for it? And if yes, how would you compare the experience?
i am honestly curious: as a beginner, what exactly "does not speak" to you with py3?
There's also Datalog, which is like a Prolog-inspired DSL
Python and Lisp were the first two I learned after Windows Batch when I just started programming, so I'm attracted to Lisps... also Prolog, and I dabbled in Haskell and liked it too. Also, Javascript (not really the frameworks, but the vanilla language itself. I think it's pretty neat)
I actually went through that same course last summer. However,I have a lot fo C and C++ knowledge and also followed along with a Python 3 book and actually wrote each lesson in both versions of the language. To me, Python 3 makes more sense as it is a bit closer to C/C++while still being it's own awesome language (and it is awesome). I don't really think there's many advantages of 2.7 over 3, but there's a lot of stuff I prefer about 3 over 2.7.
The following code should get you where you need to go. If you get an overflow error then remove all the unit stuff, but if you do get an overflow error then it probably means something is wrong. Ask me if you have any questions. Edit: I think maybe the acceleration shouldn't be incremented every step but actually just set? Oh well you're the physicist I'm sure you'll figure it out. :p By the way when you're done I'm interested in knowing the numbers. Oh and I removed the decrement of the fuel weight during the coasting phase. # This is just to make the print function work in python 2 like it does in python 3. from __future__ import print_function # This is a useful package to make sure that your units make sense. # You can get it using pip: pip install pint # If you don't have pip get it here: https://pip.pypa.io/en/stable/installing/ from pint import UnitRegistry ureg = UnitRegistry() # Constants AREA = 1 * ureg.meter**2 # Density of kerosene. DENSITY = 0.81 * ureg.kg / ureg.m**3 # Earth's gravitational constant. G = 9.8 * ureg.m / ureg.s**2 # I'm no rocket scientist (sorry) so this might actually be a calculated function? drag_coefficient = 0.1 # Constant rocket variables. MASS_INITIAL = 1000 * ureg.kg # The total burnout time. TIME_BURNOUT = 120 * ureg.s # This is the resolution of the simulation. TIME_STEP = 0.1 * ureg.s def net_force(f_thrust, drag_coefficient, velocity, mass): """ Calculate the net force currently being exerted on the rocket. :param f_thrust: The engine thrust. :units f_thrust: N :param drag_coefficient: The drag coefficient of the rocket. :units drag_coefficient: unitless :param velocity: The current velocity of the rocket. :units velocity: m/s :param mass: The current mass of the rocket including fuel. :units mass: kg :returns: The net force of the rocket. :units: N """ return f_thrust - 0.5 * DENSITY * drag_coefficient * AREA * velocity**2 - mass * G def total_mass(mass_propellant, time_current): """ Calculate the total mass of the rocket. :param mass_propellant: The current mass of the propellant. :units mass_propellant: kg :param time_current: The current time of the simulation. :units time_current: s :returns: The total mass of the rocket. :units: kg """ return MASS_INITIAL - mass_propellant * time_current / TIME_BURNOUT def thrust_force(time_current): """ Calculate the current thrust force of the rocket. :param time_current: The current time of the simulation. :units time_current: s :returns: The current thrust force. :units: N """ # Here you'll calculate the thrust force from your thrust vector and drag coefficient? return 1000 * ureg.N def main(): """ Run the simulation of the rocket to calculate the apogee. This will simulate both the powered and coasting phases. """ # Variables that will change over the course of the simulation. acceleration = 0 * ureg.m / ureg.s**2 velocity = 0 * ureg.m / ureg.s distance = 0 * ureg.m mass_propellant = 1000 * ureg.kg time_current = 0 * ureg.s # Powered phase. while time_current &lt; TIME_BURNOUT: current_mass = total_mass(mass_propellant, time_current) f_net = net_force( thrust_force(time_current), drag_coefficient, velocity, current_mass, ) acceleration = f_net / current_mass velocity += acceleration * TIME_STEP distance += velocity * TIME_STEP # Subtract the amount of fuel that is used each second. mass_propellant -= 1 * ureg.kg # Increment time by the predefined step amount. time_current += TIME_STEP # Coasting phase - stop when velocity reaches 0 m/s because that should be when # we reach apogee. while velocity &gt; 0 * ureg.m / ureg.s: current_mass = total_mass(mass_propellant, time_current) f_net = net_force( 0 * ureg.N, drag_coefficient, velocity, current_mass, ) acceleration = f_net / current_mass velocity += acceleration * TIME_STEP distance += velocity * TIME_STEP # Increment time by the predefined step amount. time_current += TIME_STEP # Once you get to this point you should be at the apogee. print('Time to reach apogee:', time_current) print('Total distance travelled:', distance) if __name__ == '__main__': main() 
Traj_calc on github might help 
&gt; it's nice to have role models who look like you Yea, that is exactly the problem. "I'm blue so I emulate and support blue people". In an ideal world I shouldn't care about an engineers color or origin at all. The content of the talk should be the only thing that matters. It's nice to know blue people can succeed, but that's different from choosing them as role models based on my own blue color.
Run `python3` in terminal instead of `python`. `python` is aliased to `python2` on Ubuntu.
probably, you need to add #!/usr/bin/env python3 to the top of the file if you run it as executable. Or run with python3 my_program.py Or maybe somehow set python3 as default. I not ubuntu user, so dont know how. Also, you can use virtualenv as environment...
Flower shops envy our passion :-D
That isn't a convention at all though. You're the only person I've heard of using it that way. This post even mentions that prefixed by an underscore implies that the variable is for internal use only. If I saw _var in the context you mentioned that is what I'd assume.
Have you used it yourself yet or are you still on the fence?
I'd like to bypass some python limitations: - I'd like more language features: get pipes, pattern matching, async/await without a version bump, more flexibility in the grammar in general - I want to easily build standalone executables, also for web apps - more metaprogramming (unlimited meta-programming with lisp-like macros) - if possible investigate how to write web apps with the same language: backend, JS frontend, html (and css). - speed - preferably more functional programming So I'm turning to Common Lisp http://lisp-lang.org/ ([awesome-cl](https://github.com/CodyReichert/awesome-cl)) and [Nim](https://nim-lang.org/) ([awesome-nim](https://github.com/VPashkov/awesome-nim)). Both ecosystems are evolving nicely right now. **edit**: interesting to see that [pgloader was ported from Python to Common Lisp](http://tapoueh.org/blog/2014/05/14-pgloader-got-faster.html) and experienced a 20 to 30x speed gain, among others.
Definitely! It's still a work in progress, but I could share the code with you (of what I have so far at least haha). If you're just starting out like me, you should check out Automate the Boring Stuff with Python. It's a book along with videos you can find on YouTube. I went through the YouTube videos and they really helped! The author explains everything really well.
Certainly. My work is software development in C#. Historically I've worked with Java and C++ as well. Static typing is nice in its own way. I find it a HUGE help when refactoring code and letting the IDE give correct to-the-point code hints/autocompletion suggestions, and avoiding run time issues by being able to give compile-time errors or warnings about type related mistakes you made. It certainly avoids certain classes of bugs BUT I also find that often it's a limitation and you're working against the type system (or having to change types all over the place to adapt existing code to new situations - something you usually don't have to to at all in a dynamically typed language). Also I feel that IDE support (code completion, template expansion, etc) partially hides a lot of the issues you could have with it. This also means that I really cannot imagine right now using just a regular text editor to create any non trivial code fragment for a statically typed language, while I'm very often using just vim or sublime text to write fairly large pieces of Python code comfortably. The most interesting thing to me perhaps, is the fact that both worlds seem to converge nowadays. C# is getting more and more dynamic language features that seem directly inspired by Python even (tuples come to mind). Python is getting some static typing features, and tools to do compile time analysis rather than having to depend on run time error checks or extensive unit test suites perhaps. I know about (functional) languages such as Scala and F# that have a strong type system but avoid burdening the programmer with it by having a very good type inference mechanism. I sometimes wish Python had something like that. PS I find Java quite horrible nowadays when compared to the alternatives. I almost never use it though and don't really know about the improvements made (if any) in java 8 or 9.
I thought myself that pypy (or other jitters) could profit from it but as I understand now, they don't use the type hints. Apparently the type inference and optimizations they already had in place don't need these hints
Start with PEP8: https://www.python.org/dev/peps/pep-0008/
After all the infernal mess with dependencies management, packaging, deployment, distribution and debugging of Python stuff, using **Go** is an extremely refreshing experience.
i love JS
of course! [here you go](https://github.com/helldragger/ModularProgramming) Btw I 'm still trying to figure out how to use travis, the project works, but couldn't figure out how to pass a travis build x)
Thanks :)
I am trying whenever I can, but not all collegues are fans of my experiments so not that much. First few components were just annotated withou mypy, which was fine. Now that I'm trying to run it through mypy... It's not that great.
 # well played, sir
 # I'm almost sorry. x)
 import burn_center
import requests, argparse, json
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
print ("Hello World") 
You can create websites with python! With django(server side code), but you need html css and javascript(client side). https://www.djangoproject.com/ Also yes you should start first with webschools.com html5, css3, js and so on.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
 for i in range(n):
It isn't a problem at all. Sorry to remove it.
I think /r/learnpython is the best subreddit for this. any way awesome tutorial It helped me. I always find class pain in my ass
Well, you're just doing your job
 from ___future___ import program; program()
Crates yes, basically pypi packages though you require them in a Cargo.toml file (like having a requirements.txt) rather than installing them with Cargo.
A round of applause for 2.7 -&gt; 3.6 migration :)
This looks perfect, thanks!
http? You disgust me.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
https://www.youtube.com/watch?v=IxAKFlpdcfc
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I like Java for programs that can't be microservices or scripts. It's just difficult to switch between being OO and pythonic.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
import os;
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
I have literally never heard YouTube called "video on demand".
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Nice tutorial ;) As a note, for running usually I suggest people just start with 'F9', which will run the module with the default interpreter and bind Ctrl+F11 to rerun the last run as I think it's usually more efficient in the long run (although I get that using the UI may be easier for starting). -- disclaimer: I'm the PyDev author, this is in the Running/Debugging in the Getting Started Guide: http://www.pydev.org/manual_101_root.html :) 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
import ddos
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
**awk**. Predates Python, Perl and TCL and is instrumental in defining "the Unix way" of developing small apps that do one thing well; then combining them in the shell. The pattern-action format is an ideal way of working with so many types of every day data. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!