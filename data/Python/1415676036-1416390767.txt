where is that from? (has the link changed?)
Another clarification question: Would I be correct in that the specific problem is that you currently do not have a way to determine if the "content" of each image is the same (where content is size agnostic). If this is the case I have a script that you could re-purpose. Edit: I've put together some code that may solve your problem. It requires the cv2 library for python as well as numpy. It hashes the content of the image, then for each unique hash selects the highest resolution image. There may be issues if two images with different content produce the same hash. [Source code](http://1drv.ms/1xH4vP6)
You should check out some examples with the concept of a 'node'. That's the right name for this concept I believe, they use it a lot in my CS classes. Make every spot on the board a node. node.value will be if it's black or white, 0/1 whatever. Then you have node.left node.right node.down node.up That'll point to other node objects or to NULL (or none for Python I think it is?) if it goes to the end of the board. Then to check if a move is valid all you need to do is see if node.up.up.value is equal to this.value or not, etc. That's probably how I'd do this anyways because I've done so many projects like this. 
Great list! One tool missing from the list is my own pip-missing-reqs which is *kinda* like pylint except that it analyses your application to determine which dependencies you actually use (import directly in your code) that are not listed in your requirements.txt https://pypi.python.org/pypi/pip_missing_reqs 
thanks for the book recommendation. I'll check it out !
Why use `print` instead of the standard logger?
The main issue is that `pip` requirements files are not really for dependencies; they're for reproducible builds.
&gt; I am converting the NIST water steam tables that I found in the Xsteam matlab/octave package. Sounds useful. Will this conversion source be available online? Also, have you seen: https://github.com/jjgomera/iapws ? Freesteam is also available, but as a library plus bindings including python.
http://www.reddit.com/r/Python/comments/2laeav/how_to_implement_a_de_brujin_graph_for_string/ 
What have you tried? What errors are you getting? We're not going to do your homework for you, but we can help with explaining parts of it. I would recommend posting a question with more detail about what is wrong to /r/learnpython in order to get answers without someone doing everything for you.
Yes, I use the index values in the list to determine the state of any individual board piece. I don't know how I would do it using lists of lists. 
You can use `f.xreadlines()` (for Python2) and create something like this: f = open('/tmp/myfile.txt', 'r') for line in f.xreadlines(): yield line.strip() It will greatly descrease memory usage (I had prepopulated file with a 1000000 random and short lines): &gt;&gt;&gt; sys.getsizeof(f.readlines()) 8697472 &gt;&gt;&gt; sys.getsizeof(f.xreadlines()) 144 
I'm not alone in saying this: nothing gets packaging "right". Every solution has problems. Python's packaging isn't that bad, and it's getting better.
I've written a 100k lines of code open source project. I put things into logical groups, hit about 1000 lines before I break it in two. A few more files is a lot more of a pain though I also reorganize it every now and then, so don't overthink it too much.
thank you! And how many modules would you say is too many for a package? Like should different types of view controllers be seperated?
I did a quick look on my project and without intentionally limiting it, hit 15-20 files/directories per folder with 5 or so directories at the most per folder. I don't have a file cap per folder. I only care about organization. My project deals with a finite element model to do structural analysis. So a model is basically points, elements (triangle, quad, line, tetrahedron), materials, properties, loads, physical constraints, optimization related cards, aerodynamics, etc.. There is one input format that has 500+ different input cards, so it's a lot. Then there's a reader (uses ~8 files), a writer (1 file that makes use of lots of reprs) and an ~5 files with interface methods. The output readers are similarly excessive. &gt; Like should different types of view controllers be separated? I would probably keep them all together until the file got long and then split them out. If you know they're going to be long, you can start them in separate modules from the start. You can always reorganize stuff later.
His point was that you should hard pin for _apps_, but not for libraries.
I agree; in fact, that was exactly my point (although you said it better).
And... item #3 is the decrepit "Django Book". I left a comment asking them to take it off their list.
It's because you're editing the list in place. One solution is to iterate over a copy and edit the original: for x in mylist[:]: if x &lt; 5: mylist.remove(x) However the more pythonic way of doing that is list comprehension: newlist = [x for x in mylist if x &gt; 5]
In regards to your clarification question, yes. Thanks for the source code its really appreciated :) I'll give it a go and let you know how I got on!
Oh no I'm sorry, I didn't want to imply that I wanted you to do it for me, I was so tired when I posted that I just couldn't keep working. I'll have to ask the professor for an extension. I truly did not mean that, I apologize to everyone here.
Yes. I'm using the terms packages and libraries interchangeably. That's not to say you should leave your package deps completely unpinned, but more often to a minor version using &gt;, &lt;
Am I the only one that's thoroughly confused?
Apparently if you search for the same words as google engineers are searching, they will grant you access to the hidden foobar.
"Apparently"? Where'd you hear this?
Thank you!!
In the end, I decided to approach the problem from a different angle. I modified the VBA code that creates the excel PDFs so that it saved each as a seperate pdf file but with a number in the file that represents its order in the final document. This allows me to just throw them into order them and throw them into acrobat easily where I then add the page numbers manually. I really wanted to find an automated, Python based solution, but I couldn't find a lot of documentation on COM and I don't have time right now to spend a week digging into it! :(
Most welcome reply. Just the level of description we need.
/r/learnpython would be a more appropriate sub for your question. It is also beneficial to post the actual error message along with the code that generated it. I'm glad you got it working by manually entering that line, but that doesn't help us fix your issue. If your car broke down you wouldn't take your neighbor's car to the shop.
Seems it is time to write a bot that will constantly Google randomly Python, data science and parallel computing queries. I will set it up on Google App Engine for extra credit.
I did actually include the image of the csv file, code and error above as a link when you clicked "*Here's the error that I'm getting*". But here it is again. [http://i.imgur.com/yW94I1V.png](http://i.imgur.com/yW94I1V.png)
You haven't said exactly where `setup_logger` is called from or exactly how your CLI script is invoked, but I would guess that if you've specified a `module:func` setuptools entry point, then your `setup_logger` probably isn't being called, so `INFO` messages don't show up, but (due to the default level in the stdlib) `WARNING` and greater will show up. I'm not sure what you mean by `SEVERE`, as it 's not a stdlib logging level. You could set up your setuptools entry point to invoke the logging setup (or add a new entry point just to set up logging, which then calls the old entry point). BTW you shouldn't post this type of question here - this subreddit is for *news* about Python. See the sidebar for more guidelines.
Though I second that /r/learnpython would be a better sub for this, here's how to fix it. Change url = imArray[i] to url = imArray[i][0] What's happening is that csv.reader is reading a line of CSV text, and forming it into a list. Each entry of that list is a column of the row. You are then appending that list of column data onto another list, imArray. So imArray is a list of lists. We want to get the first column of the i'th row, so therefore we use imArray[i][0].
Oops, I thought I went to /r/learnpython my fault. Thank you for the reply though, I figured out the issue. EDIT WITH SOLUTION: So, basically I have a script with a function `main` which was the entry point for my command line program. This function as not calling `setup_logger`, as /u/vsajip suspected. I had this at the end of my script if __name__ == '__main__': logger = setup_logger() main() which explains why I was getting expected logging output by calling it with python and not by calling the command line program. 
The [Duplicity](http://duplicity.nongnu.org/) backup program, which is popular on Linux, is also written in Python.
First of all, it will be like ten times faster if you open the file once (for i in {1..1000000}; do echo "This is custom message number $i"; done) &gt;&gt; /var/scripts/sample_$(date +%Y-%m-$d_%H%M).log Secondly, it's a single line of code in any language. If you want it to be as fast as possible, just write it in C. But yes, it's much faster even in python: This python script generates 1-2 million lines a second (on my laptop) when redirected to a file: $ cat gen.py i = 0 while True: print "This is custom message number {}".format(i) i += 1 This C program generates 3-4 millions lines a second, limited by i/o: $ cat gen.c #include &lt;stdio.h&gt; int main() { int i=0; while (1) { printf("This is custom message number %u\n", i++); } } They just run continuously, no need for cron.
If you want to generate a wider variety of fake data, you can look into using https://pypi.python.org/pypi/fake-factory
Thank you!!
&gt; r Thanks for your awesome feedback. I changed my script to that first one you posted, and it's generating the 1m events in about 20 seconds, which is so much quicker than before. It's generating about 106MB/minute, which is much closer to what I was seeking. I'm going to play around with the straight c to see if that's too much for what I need or not. :) Thanks!
Okay, thanks.
Yeah, I've looked into it too without much luck. Here's a $250 program I just found that lets you invoke Adobe macros from the command line, so it's certainly technically possible, just need to figure out a way to do it for free. http://www.evermap.com/autobatch.asp
The Unix way: head -c &lt;large number&gt; /dev/zero ¦ tr '\0' '\n' ¦ cat -n ¦ xargs -L1 printf 'This is message number %s\n'
He was joking.
http://letmebingthatforyou.com/?q=joking
Jython can't use any of the myriad C extension modules that make CPython such a joy (e.g. matplotlib, numpy, lxml, pillow, pygame, etc.) Jython's single-threaded performance is nothing to write home about. CPython is easily as fast and often faster than Jython for those types of loads. Jython only supports the language features up to 2.7. The world is finally realizing that there's a lot of nice stuff in 3.x, like `yield from`. Jython requires the bloat of an entire JVM, including poor startup time for quick utility scripts. In summary, Jython is appealing to a certain type of workload (long running multithreaded servers) but that is not what everyone uses Python for. 
http://lmgtfy.com/?q=mysql.connector+python No offence.
I've been playing with it for a while and it's not fun at all. It checks the parameters that are coming from a search in Google to unlock it. I was expecting some kind of puzzle but there is nothing to do. Your account must be flagged by Google depending on what you look (people is finding it with Python). After that the terminal unlocks with the programming tests.
&gt; Right, but that could change. Anything could happen, but it won't. There is no demand for it, and nobody is interested in doing the work. What could possibly be the value proposition of a system that requires several person-decades of work to get to the point that CPython is at now? 
Need microseconds, but thanks for the response!
Pretty much. This is like that automatic coding system that got a DARPA grant, but in reverse. You're not searching Google for a solution to a problem, Google is searching YOU for a solution to its problem. A Googler has a problem and is told by the Google FooBar AI that person X has also just searched for that problem. Person X solves the problem and happens to be invited to an interview where one of the puzzles is exactly the topic that the Googler had a problem with. As this is Google, they make a super human effort to solve the problem in the best possible way, but in reality doing all the work for the original Googler. Now even better, the interviewee may return home and add the issue and his solution to some message board or git repo where others will pile on and point out problems. There aren't any engineers left at Google -- the last one designed this system and is now tending its garden. 
I guess I'm missing the relevance/context.
I think the problem is that you aren't wrapping the connection in the with statement, so even if there were an ```__exit__``` method on it, it would never be called the way you've coded it. You'd need something more like with sql.zsJDBC.connect() as conn: with conn.cursor() as cursor: cursor.execute() That way when you exit the outer with block conn.```__exit__``` would be called. Note that I've never used that lib so I'm not sure there is an ```__exit__``` method on conn. [edit] ```with sql.zsJDBC.connect().cursor() as cursor:``` might also work.
Love these! Best way to get people to code is to get them involved in something they can use!
http://xkcd.com/979/
[Image](http://imgs.xkcd.com/comics/wisdom_of_the_ancients.png) **Title:** Wisdom of the Ancients **Title-text:** All long help threads should have a sticky globally-editable post at the top saying 'DEAR PEOPLE FROM THE FUTURE: Here's what we've figured out so far ...' [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=979#Explanation) **Stats:** This comic has been referenced 394 times, representing 0.9808% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_clzt57a)
Integrate CloneDigger too
having an option to show countries/country borders on the world map would be great
It's easy to misread, and maybe it's entirely my fault, but I wrote: &gt; Thus, I have to write something like this: In other words, I had first tried what you have suggested, and realized that it wasn't working. So, I had to resort to keeping the connection outside of the with-statement, and closing it manually. Thank you, though. As I mentioned, I think this may be more of a problem with the Jython interaction with the MySQL driver; and, truthfully, it was a more complicated piece of code than how it appears in my snippet. It may not be a problem with other databases.
Wow, they need to revisit their pricing strategy. I would consider if it was like 10 bucks, but never for 250. I mean honestly, anyone who is interested in doing this is not going to pay 250!
so I should search for "how do I self-driving car"
pypy has a dedicated core of developers that are get goers - they didnt come to reddid to aks for a what if, they made a "there is" and stepped up even more from that
IronPython http://www.ironpython.info/index.php?title=Interacting_with_Excel
PyMySql's been around for *years* (at least 2009)... I'm just confused about where/why the loon popped up on your original comment...
Glancing at the source, it looks like cursor implements ```__del__``` which calls .close() on the cursor. I'm assuming that ```__del__``` runs when you exit the with block. There's no such implementation on connection. here on line 204: http://zxjdbc.cvs.sourceforge.net/viewvc/zxjdbc/zxJDBC/src/java/com/ziclix/python/sql/PyCursor.java?view=markup not there's no ```__del__``` on Connection: http://zxjdbc.cvs.sourceforge.net/viewvc/zxjdbc/zxJDBC/src/java/com/ziclix/python/sql/PyConnection.java?view=markup 
&gt; Look at how much Java has improved in speed/efficiency over the years. I must admit that I've not seen this improvement. The Java-based GUI apps I run are always sluggish compared to the native ones. Maybe it makes less difference on the back end.
This is frustrating, cause I have firefox configured to clear my search history and cookies upon exit.
Actually, I couldn't find the change logs for around that period (version 2.2 - 2.3)... Any help?
&gt; when someone posts “I love Python”, it will reply “Me too!” (and optionally, upvote it). Posting stuff is probably fine but a voting bot is definitely against the rules.
`__del__` runs when an object is no longer referenced.
updated with my solution :D
&gt; &gt; Jython requires the bloat of an entire JVM, including poor startup time for quick utility scripts. &gt; &gt; Yeah, no argument there. I'm not saying it's a free lunch. :) It's a deal breaker.
He already answered: &gt; We could still keep the async and multiprocessing libraries (not sure if they all work right now in Jython) but also have real concurrent threads, that is no more GIL. &gt; &gt; I know that the Java ecosystem is anathema to many in the Python world but why not just embrace it? Imagine being able to call Java/Ruby/Scala/Groovy/Clojure code from Python too? &gt; &gt; I don't really like Oracle either but the GIL is never going away from CPython. Yes, we should use threads sparingly but sometimes they are the best choice. Do I agree that the costs are worth it? No. But what's the point in asking him to repeat what he just wrote up above?
Jython's performance is garbage compared to cpython, even with the gill. Its not likely to change because of implementation details, honoring of cpython's semantics which are designed to be painful for threads. Pypy is already a better solution...by far. 
It can be handy not having to first convert a string or timestamp to a datetime object before using it in one of the dateutil functions.
Okay, then the next logical question is "Why do you think that removing the GIL is worth all of the obvious costs? What real world use case can only be addressed by switching to Java's VM?" Why does OP seem to think that the GIL is worth all of this? With all of the work required to achieve what he's proposing, we could likely have removed the GIL from pypy 3 times. (I don't know that for certain. I know they've tried to remove the GIL from pypy a few times before already and not achieved anything worth making the default.) "I know that the Java ecosystem is anathema to many in the Python world but why not just embrace it? Imagine being able to call Java/Ruby/Scala/Groovy/Clojure code from Python too?" "Why not?" is not a valid reason. To change from the status quo, you have to have a positive reason to change, not just a negative lack of a reason to not change. His point of "you can call other JVM-implemented languages this way" is addressed by my last question. His answers are insufficient.
I can appreciate that, but now take a look at listing 12-2, from the documentation: http://www.jython.org/jythonbook/en/1.0/DatabasesAndJython.html#connections Am I misreading something, because I very well may be. If I am, I honestly would appreciate you (or anyone) pointing out where or what I'm misunderstanding. The way I read the example, the with-statement *should* work for a connection object. If I'm reading the example correctly, then this sort of goes to my point; because it just sucks to see documentation that promises something that, in reality, isn't actually implemented. If you're interested, please take a look at the question I posed to StackOverflow about Jython and database connection pools (the zxJDBC.connectx method), because the way I read the source, I suspect that doesn't work either. http://stackoverflow.com/q/26792742/155167 -------------------- P.S. I think the with-statement relies on `__exit__`, not `__del__`. http://effbot.org/zone/python-with-statement.htm
Is it possible to monitor every subreddit instead of just one?
I didn't say that Jython was garbage. Again: you're not using common sense. Jython is great. PyPy is great. CPython is great. Because they have different strengths and weaknesses, they cannot replace each other. CPython has a lot of virtues, all of which are deal-breakers against the idea of mothballing it. * It is practical to use CPython for command line tools designed to be used interactively or run thousands of times in other scripts. Not so for Jython. Do you know how quickly CPython starts up? 0.023 seconds. * CPython has a lot of extremely important libraries that don't exist for Jython and never would. * CPython is installed on more computers out of the box than Java. Not just my computer, but every Mac in the world, for example. And most Linux boxes as well. There are others, but those three are deal-breakers in and of themselves. 
do it seriously 
This is so much better than letmegooglethatforyou!
I love how 'diazepam rectal gel' is ranked 5th in bing for the term "joking".. Now that's funny!
yea, I just found /r/learnpython and posted it over there instead, thanks!
I would love to use Tkinter, and I'm scouring the internet reading all kinds of tutorials, but I was wondering if I could share my code with you all and maybe get some ideas or if Tkinter is even the right thing for the ideas I have in mind with my skillset
[Date Util](http://labix.org/python-dateutil) is pretty flexible.
Whelp, post it up as a [pastebin](http://pastebin.com/) or a [gist](https://gist.github.com/) 
Check https://pypi.python.org/pypi/humanize for a more general library and http://crsmithdev.com/arrow/ for something more time specific. But what is Apr 10 19 supposed to be? The year 19 before or after the common era? That ambiguity seems more like an input error rather than a library problem.
Look up timestring... It's one of those lesser known modules that are amazing
Sweet. I made a picture-to-ascii art python script, and I thought it would be cool to turn it into a bot. So someone could comment, "pic-2-ascii - &lt;image link&gt;" or something like that and the script would turn the picture into text.
just threw it up in my edits
Okay, I see, you only care about inputs. Apologies. Did you see this? https://github.com/okfn/datautil/blob/master/datautil/date.py If your only issue is those teen dates, perhaps writing a decorator would solve it; this lib seems to do some standardization as well.
Got a github link? That sounds pretty cool. 
A VPN operates below the socket layer and is transparent to applications, so the question doesn't really apply. VPNs are typically fake network adaptors that encrypt the traffic and tunnel it out your real network interface, all without applications knowing or caring it is taking place. If you're looking for urllib2 to initiate the vpn connection, it won't be able to do that. It's an http and https library, even an SSL (really TLS) VPN is a lot more complex. You need to establish the vpn connection though whatever client or tool your vpn uses and then any python networking library with work without extra configuration. If you want to script connecting to each vpn in sequence and scraping the URL, python can do that but you're really into the realm of shell scripting, something python doesn't excel at compared to true shells. What you really might need is a shell script to handle the vpn connections which calls your python script during each connection. urlib2 is pretty ugly to use; I'd use [requests](http://docs.python-requests.org/en/latest/) as it's far, far easier. There are also lots of libraries to help with scraping, they would be able to most of the heavy lifting for you.
might I throw in a shameless plug for [Data Structures and Algorithms](http://it-ebooks.info/book/2467/) and for O'Riely's[ Python for Data Analysis](http://shop.oreilly.com/product/0636920023784.do) I favor the approach of the former, since it has a ton of course-like reading and problems to practice on, the later being the more traditional O'Riely format that's more of a how-to-do rather than a how-to-approach the problem.
Thanks for letting me know. I wasn't aware of it.
OP here. Yeah, that is just Wordpress being difficult. I tried wrestling with it, but it won't just indent the code. If you look at the code on Github, it is indented. I'll try to find another work around.
I think when you predict a flame war and then keep mentioning it, it becomes a self fulfilling prophecy. Especially when everyone else is being very civil and just informing you. 
Use a &lt;pre&gt; tag instead of &lt;blockquote&gt;&lt;p&gt; to preserve spacing: &lt;pre&gt;for submission in subreddit.get_hot(limit = 5): print “Title: “, submission.title print “Text: “, submission.selftext print “Score: “, submission.score print “&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;\n”&lt;/pre&gt;
&gt; &gt; To change from the status quo, you have to have a **positive reason** to change &gt; Look at the Python 2/3 split. Talk about changing the status quo. Exactly. &gt; Also pypy. Doubly exactly. &gt; Maybe I'm just a big hippie but I'd love it if we could all get on one VM and just make it awesome. What happened to choice? Why does having CPython alive prevent you from using Jython?
understood mate - thanks for the detailed reply 
yah - looking like that may be the best option - thanks for the reply
I love Python
&gt; Posting stuff is probably fine That's the whole point to nearly every bot. But yeah, upvoting is definitely against the rules.
Cool, that worked. Thanks
My brother likes to read comics in his tablet using ACV (for Android). However it seems that CBR support is not complete yet and sometimes ACV stops suddenly when reading a file that other viewers show without problems. I made this scripts to "glue" some tools and convert CBR files to CBZ format. You can even convert a complete folder of CBR files! Hope you like it :)
This looks like homework. We don't tend to do people's homework for them, it deprives them of the opportunity to learn python.
Well, whether it's fine it depends what exactly the stuff it's posting is. A bot that scrapes facebook for similar usernames and replies to your comment with your name and address is going to break all the rules.
I did a quick fix by just filtering out the emoji characters 
Please show us the output of `print(sys.argv[1])`, so we can see what json.loads is trying to parse. An example script that reproduces the error would also be helpful.
Pretty easy, something like: class secret_decorator: def __init__(self, func): self.origianl = func def __call__(self): print('decorator') self.original() Ofcourse it's missing the descriptor semantics (bound methods and all), I'm too lazy to implement `__get__`.
Cool stuff. :) I currently host and maintain what has become a very large, very multipurpose bot for /r/Hockey. I'd be happy to share some of my learned knowledge about building it on here, as well. For starters, the biggest problem you will run into is HTTP errors. To keep a bot up as much as possible requires trapping errors at every point you request or send information to Reddit. Also know that this: submissions = r.get_subreddit('learnpython').get_hot(limit=5) does not actually return any information from Reddit. `submissions` is a generator object. Putting the above line of code in a `try: except:` block will never trap an error. It is when you actually do this: for submission in submissions: print(submission.title) that any communication error will happen. Your example code does combine the two into a single line of code, but I want to make sure people know where the point of failure is in case they're trying to trap an error and can't figure out why it doesn't work.
If you mean this one - http://repl.it/3qC/1 It doesn't works =) 
&gt; "I find its primary use is for very small, quick-and-dirty guis." **.replace("quick-and-","")** and i would agree with you ;-)
Now this subreddit is going to be full of bots constantly uttering random predefined statements. Well done OP.
[Here ya go!](https://github.com/joshmtwigg/Picture-to-ASCII-Python-Script.git)
You did way too much re invention of the wheel. There are many libraries out there that help you crawl sites and parse html like scrapy or beautifulsoup so you could have easily extracted the title and the url. Even better though is the fact that you are trying to take data from reddit which is really easy. Just throw '.json' onto the end of a reddit path and you get some nice easy to parse data. Here's a sample. It doesn't do exactly what you are trying to do but it's a start import json import os import re from urllib.request import urlopen from mimetypes import guess_type URL = "http://www.reddit.com/r/EarthPorn/top.json?sort=top&amp;t=week" DIRECTORY = 'earth_porn' _CLEAN_FILENAME = lambda x: re.sub(r'[\?\&lt;\&gt;\/\|\:\*]', '', x) _CLEAN_TITLE_RE = re.compile('[\[.*\]]|[\(?\d+(,\d+)?+[\sxX×]+\d+(,\d+)?\)?]|' '\([oOcCsS]+\)|O[CS]|\soc|\sos') with urlopen(URL) as data: json_data = json.loads(data.readall().decode('utf-8')) urls = [(d['data']['url'], d['data']['title']) for d in json_data['data']['children']] for url, title in urls: type = guess_type(url)[0] or 'jpeg' # if None assume jpeg if type and 'image/' in type: with urlopen(url) as img: # Tuncate image name image_name = _CLEAN_TITLE_RE.sub('', title).strip()[:250] filename = ''.join((image_name.replace('.', ''), '.', type.split('/')[-1])) filepath = os.path.join(DIRECTORY, _CLEAN_FILENAME(filename)) print(filepath) with open(filepath, 'wb') as f: f.write(img.read())
i never claimed i was a core contributor to begin with i only claimed the pypy people get stuff done instead of "loving to see ot happen" contrary to your perception i did not downvote any of your posts
In regards to learning resources, this one is excellent and up to date: http://www.tkdocs.com/tutorial/index.html
1. Wordpress has [code] blocks which you can optional use with syntax highlighting: http://en.support.wordpress.com/code/posting-source-code/ 2. It's a good idea to also host your entire finished script somewhere like gist or pastebin.
Your bot isn't really monitoring submissions, it's just downloading the most recent submissions up to a limit. You *can* use `subreddit.get_hot()` to monitor submissions on a subreddit, but it's sort of a pain in the ass. You need to wrap it in an outer while loop and keep tabs on submission ids so you know when you've hit something you've seen before. This is a common enough operation that the praw developers built a special helper function for doing precisely this sort of thing without needing to maintain your own cache of ids, and you should take advantage of it. I present: [`praw.helpers.submission_stream`](https://github.com/praw-dev/praw/blob/master/praw/helpers.py#l62) import praw ua = "demo bot" r = praw.Reddit(ua) r.login() stmt = 'Title: {title}\nText: {text}\nScore: {score}\n\n' for subm in praw.helpers.submission_stream('learn_python', r): print stmt.format(title=subm.title, text=subm.selftext, score=subm.score) This will monitor the subreddit indefinitely or until an unhandled exception is encountered.
You're bot will just have to find posts by other bots and report them to the moderators.
Don't worry, I have created my own subreddit for this. It has been created specifically for baby bots :)
since we're on that topic, for making webscrapers in Python, check out Beautiful Soup. It has a lot of functions that you probably have in mind for your scraper, and a lot of other things as well such as handling encoding, splitting, searching, etc. [http://www.crummy.com/software/BeautifulSoup/](http://www.crummy.com/software/BeautifulSoup/) 
I'm honestly stumped as well. ```__del__``` shouldn't even be called when that with block exits as cursor can still be referenced. As for the documentation, docs that lie are worse than not having any at all.
Can this be something? http://www.codecademy.com/ 
pic-2-ascii - &lt;http://www.chattanoogaville.com/images/american-eagle-melanietipton-melanietiptonofficialwebsite-chattanoogaville-chattanoogavilleconservativetvshow-lloydmarcusarticles-conservativetelevision.jpg&gt;
Here's a smaller version. Using my script from github, you can make a higher resolution, bigger, better, more full of freedom version: ______________________ MMMMMMo )ooo%MMMMMMMMMMMMMMMMMMMMMMMMMMMMM@@MMMMM@@@@@@@@@@@@@@@M@@@M@@MMMMMMMMMMMMMMM%000000000&amp;&amp;&amp;oo====++?}})*''----'?&amp;%000000%%%00000000%%%%%%%%%% MM%?*'` *}&amp;@MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM@@MMMMMMMMMMMMMMM@@MM@@@@M@@@@@@@@MMMMMMMMM%0000&amp;&amp;o+?})*'--`````````-------')=%%00000000000%%000%%%%%%%%% MM@o)` *MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM@MM@@@MMMMMMMMMMMMMM@@@@@@@@MMMMMMMMMMMMM@@M&amp;)**'******'''---````````````----'*}&amp;%00000000000000%%%%%%%%%% MMMMM) '' oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM@*oMMM@@MMMMMMMMMMM@@@@MMMMMM@@%%@00%&amp;&amp;%%%MMM=`------''***))***''--``````------'*)o@%000000000000000%%%%%%% MMMM@`+MM0+?MMMMMMMMMMMMMMMMMMM%0@MM}0MMMM@+)*&amp;MMMM@@@@@@@@@@@MMMM%&amp;=++?*)''*''**'*''=0@=`-------------'''****'''----------'*)=%@00000000000000000%%%% MMMM@oMMMMMM@MMMMMMMMMMMMMMMMMMM&amp;}}}**@MMMMM%+**)}?%@@@@@@@MMM@0o?)''*''--'``---''---*)}?'------------``````----------------'))?&amp;%%%0000000000000000%% MMMMMMMMMM@@@@MMMMMMMMMMMMMMMMMMMM+-**?o%MMMMM0}?%@MMM@@@MMM&amp;?)'-'''''''--``---````--*)'''-'''---------------``````````------'))}?+o00%%%000000000000% MMMMMMMMMMMMM@MMMMMMMMMMMMMMMMMMMM?'''*)}o@MMMMM0@MMMMMM@%o)---'''--`----````---````'-----)}*))*'-----------------------------*)))*)}?+=o&amp;000%%0%00000 MMMMMMMMMMMMMM@MMMMMMMM%MMMMMMMMM@&amp;0@o*}MMMMMMMMMMMMMM@o}*'---------``--``` `````-``-'--**))''*)})'-''---------````````````---'*))*))*****)}?+=oo&amp;00%% MMMMMMM@@@@@@@@@M%0MMM0-0MMMMMMMMMMMMM@+0MMMMMMMMMMM0?*--''------`````````` ` `-``-*'`-'''--'))}}*'-'-----------````````-----'****************))}?+= MMMMMM@@@@@@@@@@@%+*'?)`*@MMMMMMMMMMMMMM@MMMMMMMMM%?'''''''-`--```````````- `---'-`-'`'-'))?})}+)--'------------``````-----'**)))**************** ?=MMMMMMM@@@@MM@@MM@?`''-*)}=%MMMMMMMMMMMMMMMMMM&amp;?***''''''-````````-``` `` --````-``')'*}o&amp;+?&amp;o)'--------------``````----'**)}))*************** +@MMMMMM@@@@MM@@@@MM}`---'}o&amp;%MMMMMMMMMMMMMMMM%}''***'''''---````````` ` ```-````-*'`*o%%%o?)??})'-'-------```````------''*)}})))))))*******) MMMMMMM@@@@@@@@@@@Mo}o%%?-+MMMMMMMMMMMMMMMMM@=*'*****''''----````````` ` ```` ```''--}o=o=?}}+?o&amp;=*--'''**))}}?+++====o===+?}}}}}))))))*)))** MMMM@@@@@@MMMMMMMMMMMMMMM0)%MMMMMMMMMMMMMMM0}'******'*''---`-````````` ``` ``` `---''**-)+}?++??o+&amp;o+o=oo&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;00%0&amp;=?}})))))**)))) MMMMMMM@@%0&amp;&amp;o=====o&amp;0%@MMMMMMMMMMMMMMMMMM=*''*****''''--`----````` ``` `````---'''''+&amp;=o+?+o==%@00&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;ooooooo&amp;&amp;&amp;&amp;&amp;&amp;000%%%&amp;+})))))***)) @%&amp;o=?}**'--```````-''*)?=&amp;%MMMMMMMMMMMMMo''''*****'''''-----````` ````` ``--`''')*+&amp;%%&amp;&amp;o&amp;o0@%%o0&amp;&amp;&amp;&amp;&amp;&amp;&amp;oooooo&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;0000%%%&amp;?))))))))) *'--``````---------'*******)}+&amp;%MMMMMMMM@*'''''*)**'**''-`-----```` `````--`'*'*}+oo&amp;%@0&amp;&amp;0@@@%o+=&amp;&amp;&amp;&amp;&amp;&amp;oooooo&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;0000%%%@0+**)))))) -------------------''**********)?o%MMMMMo*''*****)*'))**'------```` `` ` ````-'))}}+o=&amp;0%&amp;&amp;0@MM@=}*)o&amp;&amp;&amp;&amp;&amp;&amp;oooo&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;00000%%%%%o}***)** ''-----------------''*********))**)?o%Mo*'''*))}}}}}??++?}'--''-` `--` `` ---*)}?+oo+}?&amp;%MMMMMo})}}?o&amp;&amp;&amp;&amp;&amp;&amp;oooo&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;0000%%%%%@%+)***) --'----------------''**********)))))*)?'''''-*)}}}}+++=+&amp;0}***'-'-` ` ` ````-`--` `--'-*)}??++?}?oMMMMMM&amp;??}}?=o&amp;&amp;&amp;&amp;&amp;&amp;oooo&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;00000%%%%%%@0=?}) ---'---------------'************))))))***'''***)***)))??&amp;+*+M%=*`--``----``---``'**'`-)**)?+}*?&amp;%M%&amp;@M@@%+}))}??+=o&amp;&amp;&amp;&amp;&amp;&amp;ooo&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;0000%%%%%%%@@%00 ------------------''************)))))**'''''**********)*+o*'o%ooo})**''------``--'*?)')+o000&amp;0%@M@&amp;&amp;M@@@%?}}}}????+&amp;&amp;&amp;&amp;&amp;ooooo&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;00000%%%%%%%@%00 ------------------''************)))))*'---'*))**''''**}?}+=)''')=&amp;o=}*'----`----*')+=?+0%@MMMM0ooo0MM@@@&amp;+?}}}}+=+o%%&amp;&amp;&amp;&amp;oooo&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;00000%%%%%%%@%0 ------------------''************))****'---'**''''''''')}}))}}}}?}}??}*'-'?)-----*}=@&amp;o+&amp;0%@MMMM@%@%%%@%0=?}))))}?+&amp;%%0&amp;&amp;&amp;&amp;oooo&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;0000000%%%%%@@% ------------------''**********))))***'--''**''''''''''***)**}}?}}}}})*'-'?*'''''*}=0o+=o00%@@@0o&amp;0o&amp;0&amp;o+})))}})}+oo==&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;000000000%%%%@@ ------------------'***********)))))****''*)**''''''************)))}})*''''**''''')+oo==o0%%@@0oooo&amp;&amp;o+??}}?}}?}}?+?=0@0&amp;&amp;&amp;&amp;&amp;ooo======o&amp;00%%0000000%%%@ ``-`````--''''''''''''*****)*))))))****'''''*''''''''*****))*)})*)))**''****'---')+o%000%%@%0&amp;oo0o==???})}}})))))}??o%?**'''----``----'*}+o&amp;0%%%000%%@ '*)}}?+=oooo&amp;&amp;&amp;&amp;&amp;&amp;ooo=+}))****)))))**)*'''*)*)*''''-'''''***''*''**'**'*****''--')+&amp;%%%@@@0=++==?)**))}}))}??})}}?+=o&amp;)`-````````------''**)}+o&amp;%%%%%% o&amp;000&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;00%%%%%00&amp;=?})*)))******''''''''''--''-```--'**'******)*))*''--')+0%%%@M&amp;???}})))****))))}}}}))}?}?+++'---````--------'*******)}+o0%% &amp;&amp;&amp;&amp;&amp;oo&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;000000000%%%0&amp;+})****'------''''----''------''***''**)))))*''--'}=%%%%@%0o?})**)*****))}}?}})*'*)???=&amp;'```````-------''*****))****}+o &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;0000000000000%%%%0=)'--------''''''------'''-'''''***))))))**'--'}o%%%%%%%&amp;?}))?})}?????}}}}}})'-')+o+&amp;o-````---------'*******)))))))) &amp;&amp;&amp;&amp;&amp;&amp;o&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;000000000000000%%%%+**''''-----''''''-''-``---'''-'}?*)}}))))**'-*?&amp;%%%%%%%@0=+??}}?????????}}})*''')+??o) ```--------''******))))))))} &amp;&amp;&amp;&amp;&amp;&amp;&amp;o&amp;&amp;&amp;&amp;&amp;&amp;0000000000000000%%%&amp;*'''''''-`--'''''--''----''''***)'--')?}?))*''*?0%%%0&amp;&amp;&amp;&amp;&amp;o=oo==o==+?????))})*))'*)+})?'`----------''******))))))))} &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;0000000000000000%%%='''--''---''''''-''----'''''---` ``')?})*''*=00000&amp;&amp;&amp;ooo+?}}?++++?})))''**'*))'*}+}}}`---------''******)))))))))) &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;00000000000000000%%%}'---''----'--------``----`````` ```-`'''*)})'')o&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;o?)*))))))***'''---'-'))**}=?}-`--------'******))))))))))) &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;00000000000000000%0%='----'-------```````````````````--''-'*''''))*'}o&amp;oo&amp;&amp;&amp;&amp;&amp;&amp;&amp;o=?}))}}))*''--'-`-----)+?)?=}*--------''*****)))))))))))) &amp;&amp;&amp;&amp;0&amp;&amp;&amp;&amp;&amp;&amp;&amp;000000000000000000%&amp;*---''-'----`````````````---``--''''-'*'-'*))))*?=oooo&amp;&amp;&amp;&amp;&amp;&amp;ooo==+?})))*''-'-``-----*+?+=+}*`-----''****)))))))))))))) 0000&amp;&amp;o&amp;&amp;&amp;&amp;000000000000000000%0)------''---``````` ````---'**'--'''-'**)**))?+===ooo&amp;&amp;&amp;&amp;&amp;oo+++??})*'--`---``-----*)?o&amp;+}*--`--''**)))))))))))))))) 0000&amp;&amp;&amp;&amp;&amp;&amp;0%00000000000000000%=---''''''----````` ```````--'''---''''-''**'')}?)?===o=o&amp;&amp;&amp;&amp;oo=+}*))*''-```----`---'-*?+o0o==+}}})******))))))))))))) 0&amp;o=+})))}?=o&amp;000%%%00000000%&amp;)--''''''''---```````````````-------'-''''''''-''***}++====o&amp;&amp;&amp;&amp;oo=}*''**''-```-----'-''-)o&amp;%@0&amp;&amp;&amp;&amp;00&amp;&amp;o+?})**)))))))))) }*'--`---'***)}}?+=o00%%%000%+''''''-''*'-----`````````` `--`---'-'*'-''''--**--**}?+===o&amp;0&amp;&amp;&amp;&amp;o?'''*))'''``-----'*-')**?&amp;@M%&amp;&amp;&amp;&amp;000%%%0&amp;o?})*))))))) '''----''**)))**''**)?+=&amp;0%%%}'*'''''-'*'-----```` ```````````-----''--'-----**--')*}))?+=o&amp;0&amp;&amp;&amp;o}---')?}*)*----'''''-')}?+0MM0&amp;00000000%%%%0&amp;=?)))))) ''----''***)))*****))***)}?oo)*****'--''------```````````---`----------`---`'*'--')**'`'?=o&amp;0%00&amp;)`-`-')?+??)'-''*)'-''*=000@M@00000000%%%%%%%%%0o+?}) ''---'***)))))****)))))))***?)**))*''''-------````````---''-``--```-` ```----``'''--``*?o&amp;0%@@0)```--')}+}*'-''*))'-'*}==&amp;0MM%00000%%%%%%%%%0%%%%%0o ''--'****)*))***))))))))))))+))}+)'***''------``-------***-``--` `` ``` ` `----- '*)o0%@M&amp;+?-``-`**)o+*-'**))'*'*)}??&amp;@MM%00%%%%%%%%%%%%%%%%%%% ''''****)******)))))))))))*)?}o&amp;}'*})**--------'*''--*}*)'---'- ` `--`-- -`'o&amp;%MM&amp;=M0' ''-}*}00?***)+**''))===@MM@@%%0%%%%%%%%%%%%%%%%% -''**))*****)))))))*******?=o@@}*}&amp;=)*--''-''*}}))*'}o)**--')'` ``` ` ` -))-'-` `--o0%@M@%MM0'')'}?}?o0o=)*+?})'*}oMo0MMMM@@@%%%%%%%%%%%%%%%%% ''*)*****)))))***)}?+=oo=&amp;MMM%))o@M='''*'*))}+=+&amp;+)=0)'*'-*?)` `--` --`` `}0+)'```-''?0&amp;=0@M@M00)'*?o==?}+%0}}=}+})}=@@o@MMMM@MM@@%%%%%%%%%%%%%% *******)*))**)}+&amp;%@MMMMMMMMM&amp;)+@MMM)****)??o0%@M@+%%*'*'-}+)-` `-'''-')'` `*@M@=)--'}}}')**)+@MM&amp;&amp;=')=%%%&amp;+)}=@=%%?++}?+M@%@MMM@@@MMMM@@%%%%%%%%%% *******))**}o%MMMM@@@MMMMM@&amp;=%MMMMo*}))}?=0@MMMMMM0**''}+?*-``` -*)})'=o}- ``)0MMMM=*'*&amp;%o**'**}&amp;&amp;M%?)-}&amp;@MMM@o?)?%@M%==o=o&amp;M@MMM@@@@@@MMMMMM@@@%%%%% *********+0MMMMM@@@@MMMMMMMMMMMMM@}o})?o%MMMMMMMMo'**?oo?*-`-```*}++?oM%?'``-)0MMMMMM+'}@M@&amp;o')?&amp;+*+0*`'?%MMMMMM@o})&amp;MM@o00@%@MMMMM@@MM%@MMMMMMMMMM@@% '''****+%MMM@M@@@@@MMMMMMMMMMMMMMo&amp;%)+%MMMMMMMMMo')+o=??+)'----'}+=&amp;MMMMo*``-=MMMMMMMM=0M@@M0*}%%?}-'-`*oMMMMMMMMM@+)&amp;MMM&amp;@%M@MMMMM@@@@@@@MMMMMMMMMMMM ))***)0MMMM@MM@@@@@MMMMMMMMMMMMM@oMo=MMMMMMMMMM=*=&amp;&amp;)*+0%}**'''}==0MMMMM@}--)%@M@MMMMMM@@@@Mo)oMM&amp;}'''`?MMMMMMMMMMMM=}&amp;MMMM@MMMMMMMMM@@@@@@MMMMMMMMMMM 00&amp;&amp;&amp;@MMMMMMM@@@@@%@MMMMMMMMMMMM%@M0MMMMMMMMMM=?%0}*)o@M@?)}*'}=&amp;%MM@MMMM=')0%MMMMMMMMM@0%@@??@MMM+*)**0MMMMMMMMMMMMMo0MMMMMMMMMMMMMMMMMM@@MMMMMMMMMMM 000%MMMMMMMM@@MMM%%MMMMMMMMMMMMM@MMMMMMMMMMMM&amp;oMM=}+%MMMMo+?*}o0MMMM@MMMM@+0MMMMMMMMMMMMM@%%?%MMMM&amp;)))&amp;MMMMMMMMMMMMMM%0MMMMMMMMMMMMMMMMMM@@@MMMMMMMMMM 00%MMMMM@@MMM@M@%@@@@M@%MMMM@@MMM@MMMMMMMMMMM@MM@++MMMMMMM0}?=%MMMMMMMMM@MMMMMMMMMMMMM@M@M%&amp;%MMMMM@+?=MMMMMMMMMMMMMMM%0MMMMMMMMMMMMMMMMMMM@@MMMMMMMMMM 0%MMMMMM@MMMM@%%%@%%@MM%MMMMM@MMMMMMMMMMMMMMMMMM&amp;}@MMMMMM@%=&amp
I've never touched Tkinter for Python GUI's so for me I'd agree that it's irrelevant. I'm sure people who use it would disagree though. I've mostly used wxpython and love the great documentation and demo tools, but as far as I know it's not Python 3 compatible so I've moved to PyQt. I also don't manually code GUI's. For my purposes I don't see any reason to. PyQt and wxpython both have graphical layout tools (QT Designer and xrced respectively). These will generate all the GUI layout resource files and python code to define objects and event handlers. You can then either edit the boilerplate python code manually or import it and override the methods. 
the only part that sucks is the video quality and the [dialect.](http://i.imgur.com/0HTSqUh.gifv) Can NOT understand most of what he is saying - 
Thanks. The scenario I needed random data for was just getting lots of data (100GB+), but this is a scenario I will encounter again in the future. I will take a look at this for future use!
We'd love to get some feedback! Docs: http://boto3.readthedocs.org/en/latest/ Code: https://github.com/boto/boto3 Sample app: https://github.com/boto/boto3-sample
&gt; Again, the problem (or perhaps strength of) with a language like Python is that it's used for many different purposes: quick one off scripts, big web sites, scientific computing, etc. While a slow startup time might impact one off scripts, it really wouldn't be a big deal for a long running task. You will have achieved wisdom when you can say: "the strength of the Python ecosystem is that there are multiple implementations with different strengths and weaknesses which are optimized for different workloads." 
You're not being criticized, you're being analyzed. (The former being a subset of the latter.)
&gt; Seriously, you can't expect people to write down complex GUIs in code. Almost every time GUI builders come up as a topic, some gurus say they prefer doing it "by hand" (not using a builder). Supposedly this gives better control. I, though, think of visual layout for a visual layout makes perfect sense. 
dude this is so cool. you gotta post this in /r/india.
I am very interested in PyQt, but right now i have to create something very quick, and the learning curve of PyQt has stopped me. Surely, though, i want to start using PyQt in the future. My main concern about it is deployment. If i want to create and deploy an application with it, i imagine i would have to rely on both python and Qt being installed on the target computer, or provide them myself. Is it possible/reasonaly easy to create an executable? I did read about people having difficulties doing so with PyQt... 
What the heck is your cheese man? Are you getting practice, I haven't seen a single *unique* thing come out of your posts all thread. I don't know if you're a teen, tweenty, in your thirties, forties, or pushing retirement (I'm betting on older), but you need to grow up. Btw- What's this nonsense about *starting* a flame war? Do you have dreams of masterminding a "destructive flame war", and taking over the /r/ a la Demosthenes and Locke? Or is this thread going to end up linked somewhere. (I'm calling it right here.)
Thanks. /u/samacharbot is currently active on /r/india and /r/SouthAsianHistory 
If you did this just for the purpose of downloading the images, you should look into praw, a library that wraps the Reddit API. If you did it for the sake of learning how to write a crawler, then the advice of the others apply. ^^
Nice. This is almost like the bit of news bot (also written in python).
I've only played with PyQt at home. I'm still on Python 2.7 and wxpython at work. I don't remember having any problems getting simple GUI's up and running quickly. If I remember I'll try to find the tutorials I used to get started and my notes on the basics when I get home and post them. I use cx_freeze to make standalone exe's but I don't remember if I've tried it on a PyQt project yet. 
I might try it over Christmas just for fun. Let's be realistic, though, Google would never hire me as a programmer.
I use it. The main benefit is that it is bundled with the standard release. **Resources** http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html Tkinter GUI ApplicationDevelopment HOTSHOT http://www.amazon.com/gp/product/1849697949/ http://www.amazon.com/Python-Tkinter-Programming-John-Grayson/dp/1884777813 **Layout Editors** Rapyd-Tk http://www.bitflipper.ca/rapyd/ PAGE Python Automatic Gui Generator http://page.sourceforge.net/ http://page.sourceforge.net/pdf/python-page.pdf Activestate's Komodo Gui Builder http://spectcl.sourceforge.net/ko3-guib-docs/komodo-doc-guibuilder.html 
That was a civil reply, I'd say you've been pretty cool, for having your methods disliked. I'd only point out that mentioning "the possibility for a flame war" sets the mood for "a flame war". /r/Python doesn't really get crazy about tools because we have *so many of them*. Python is not sinking, it is not *needing* to reinvent itself. The entire (peaceful) community can be summed up in one line: import this
I use tkinter all the time. It doesn't require any downloaded libs which is really a requirement at work. It can make some really nice interfaces if you know how to use it
Tkinter cannot support multithreading as far as I know, which is why I prefer to use it for very simple projects.
Thanks for sharing! I'm going to try these layout editors
I wrote a small bot that feeds the Planet Mozilla feed into the /r/MozillaTech subreddit. See here on GitHub: https://github.com/djc/pmf
I was just saying, with big JOKE flags that if you are surprised by that, that means that you would not have behaved the same way. In which case you must be very "optimistic" to say the least. I was (kindly) making fun of that by saying that even if you found your wife/husband clearly cheating, you would still think there might be another explanation. I can hardly think of more compelling proofs than screenshots of the website internals and host description when it comes to hacking. Defacing is stronger, of course. But otherwise it is generally considered strong enough to pause the system and investigate. But people don't like jokes. The nevertheless apparently like your useless comment very much... As I said, if it happened to YOU, you would have been much more composed in your comment. Especially as you most certainly didn't figure out the downtime yourself so it did't affect you in any way. That's just complaining for the sake of it.
'Every good work of software starts by scratching a developer's personal itch.'
As someone who has quite literally written many thousands of lines of Python Tkinter interface code, including hand-written complex interfaces, the only reference worth a damn is the one maintained by John Shipman at New Mexico Tech: http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html The tkdocs tutorial is okay to get started on simple interfaces but once you get into intermediate level interface components, it just will not cut it. Take for example PanedWindow. It's a fairly common UI component (sometimes called a "splitter window"). The tkdocs tutorial tells you nothing about managing the sash and handle of the PanedWindow, probably because it doesn't cover the tk version of PanedWindow at all - it only covers ttk.PanedWindow. The NMT docs cover both of them and have a good description of each and what things change when you use the ttk version. I downloaded the NMT docs as a PDF and never bothered to refer to anything else unless I was looking for sample code snippets.
If you're willing to use python and just call java "from time to time" there" , the kivy project has the Pyjnius project which enables accessing java from Cpython.(and as far as i remember, it looked nice). 
Interesting, thanks. 
Just to clarify, I did play with PyQt some months ago, but my experience was limited to few simple interfaces. It wasn't hard, like difficult to understand, mostly it seemed to require more time, at least because there is more stuff involved: the qt libraries are huge, even if I realize I don't have to know a lot to build decent interfaces.
I like tkinter because it seems very well integrated with python: no extra stuff to install and I'm good to go very quickly. It would be fantastic to have a better support to it. I played a bit with PyQt some months ago and it didn't seem as natural as working with tkinter, but my limited experience with both (and with python in general) could be a part of that feeling
I'm ok with hand coding parts of complex interfaces (or complete but simple ones). It just seems too much to have to do everything by hand... Fortunately there are some tools, as pointed out in the thread. I'll try them, at least to build an initial sketch of the gui
I saw the twilio team use this at DjangoCon this year. It worked really well and was an awesome take on a presentation.
Just added this to my Instapaper feed, looks like it might have some ideas... http://www.macstories.net/stories/automating-ios-how-pythonista-changed-my-workflow/
&gt; I don't really like Oracle either but the GIL is never going away from CPython. I don't really think you can say that. If CPython gets a jit, the GIL could certainly go away. PyPy is working on getting rid of the GIL. Alternatively, why not make a GIL-less Python and distribute that? Something will be done. The GIL issue is only going to get worse.
now you just try to be mean also anything you post in the wild is open to oppinions, deal with it
[tkRAD](https://github.com/tarball69/tkRAD/) - Tkinter Rapid Application Development (RAD) library - Tkinter XML widget building Also have a look at the other projects from the same person https://github.com/tarball69/
Give Kivy a look, great for quick plain ifaces
You win my friend. The way I see it you insulted me first with: &gt;i only claimed the pypy people get stuff done instead of "loving to see ot happen" I'm dealing with it just fine. I'm also not just accepting your responses without replying back. :)
PyPy is not CPython. There have been several attempts to remove the GIL from CPython and none have been successful, we'll see how PyPy fares (I am interested in their STM experiments). Not sure how the GIL is going to get worse though. 
Thought I'd share the project I'm working on. All the major stuff is in there. I'm still working on building channel guide information.
Of course, I was just testing my abilities and thought this would be a neat thing to make :) Thats a nice tip, i never knew about json- what data is it exactly giving me? and thanks for that code that is a lot cleaner :D
Yeah I just kind of did it for both- I wanted wallpapers and wanted to learn how to do this so. thanks :)
Yeah thats true- on my big screen i can see it all but i definitely see what you mean. Good tip about the variablel names I'll remember that. The thing that deterred me from functions was I remember trying to do that once but had some issues with not being able to call on variables created in a function in another function, I'm still not really sure how to get around this.
Non-mobile link http://www.stuffaboutcode.com/2014/11/adventures-in-minecraft.html
&gt; There have been several attempts to remove the GIL from CPython and none have been successful The requirement is the GIL will be in CPython if removing the GIL significantly impacts single thread performance. Let's say 1 minute extra for some script is deemed significant. If by virtue of improved computer performance, that gets down to 2 seconds in 10 years, it's no longer significant. You can still make a GIL-less CPython and distribute both. &gt; Not sure how the GIL is going to get worse though. It's not that the GIL will get worse. It's that the perception of it will get worse. As programs of the future do more, they become increasingly dependent on threads. Not being able to use these threads will be more of an issue for these programs (e.g. games, 3D visualization for engineers, programs with databases).
The data it gives depends on the page. If you use it for any subreddit page it will give you a list of results on that page. Each of those results has links, author etc.. I'm not sure exactly what data it returns though. If you want to find out just experiment with it. There are some bugs in it but it gives you the gist of a different approach to the same problem. For your code you used lots of '.replace(x, "")' it would probably have been better to use a loop or 're.sub(PATTERNS, "", value)'. If you're trying to parse HTML try to stick to html parsers as it's just a pain to do what you did guessing how far to skip ahead. I think there's a html parser library in the standard libraries but I've never used it. It's definitely better to build something than to not build it though but it's always nice to build something and learn a new library while doing so.
Awesome I'll look into it. Yeah thats a good idea actually, thanks for the feedback
Out of curiosity, what is it that makes you sick of java?
I understand. I'm not particularly fond of Tkinter, but I made an application using wxPython once and liked the results much better... but I hadn't anticipated the sheer number of people who would not install wxPython just to run my app. In the environment in which I was working (a Suse Linux variant) people would not even run my app if they had to type "python" to get it started or it had a ".py" extension. You can't just change your users, so I figured out a way to "compile" a python project into a single executable and give them that (similar to PEX). Since it now looked like a binary file, their objections went away - I mean, it's a binary file so it won't have Python's performance problems! The downside to this is that I couldn't access anything that wasn't either pure Python or included in the standard distribution... hence many thousands of lines of Tkinter followed after that.
Mine doesn't have all of the same features. I just re download the images each time, I don't have a text file keeping track of the filenames, I also don't allow the user to limit the number of images downloaded and I have different rules for generating the filenames.
Yeah, there's a link to a PDF on the github page that has the API.
Well, it's a good language for some tasks and I like it a lot more than C++, although C++ is a better choice sometimes too. Mostly, I hate Java's verbosity. This is partly because I like Ruby and Python and don't mind the tradeoffs of dynamically typed languages. I really hate Maven a lot, I find it to be an insanely complicated tool. I'm also not a big fan of Eclipse. Those are more ecosystem details but they are pretty common in the Java world. Oh yes, I also can't stand how everything has to be a class all the time in Java. Yeah, I know about lambdas in Java 1.8 and I think they're a step in the right direction but it's also crazy that it's taken this long for Java to get them. XML!!! I'm so sick of dealing with Spring and Java XML config files. . . Oy vey. I've done enough of that for one lifetime. Other things like dependency injection just annoy the living shit out of me. In Ruby or Python, you can just import code on the fly. . . from source files. You don't need to deal with XML serialization/config formats like Spring. I could go on and on but Java's not that bad really, I've just had my fill of it. :)
Thanks :)
ha, fair enough. i'm a java developer at my day job and a python hobbyist. i was just curious to find out a different point of view. i greatly prefer using java config annotations for spring than xml... just much nicer. maven... meh. it does its job. best thing is getting your IDE (jetbrains stuff ftw) to do all the maven/spring/boilerplating for you. it doesn't seem nearly as verbose then since a lot of the basics are autogenerated. dependency injection is fantastic... to each their own though :)
Seriously, what does that even mean. This is some dumb joke or something. Try this I guess def the_flying_circus(): if True or True: return True elif 5==5: return True else: return True I suggest you check out udacity. It's free (even though it tries to push paid for tutoring on you, there is a button to just go through it free) and not terrible. 
Thanks, that second link is exactly what I needed
You might try http://www.codewars.com. I've been doing it for a couple days and it's pretty fun. They present a problem and you have to put in working code that gives the desired test results. When you submit your final answer that works, it shows you everybody else's answers and you can comment and discuss them. Pretty cool.
Thanks I'll check this out
Ha ha, yeah I've heard that IntelliJ is MUCH better than Eclipse but I've never used it. The thing that I like about languages like Perl/Python/Ruby is that for small projects I can just create a single script file and not worry about all the build/IDE config details. For small stuff, it just feels like overkill. Also, a lot of my feelings toward Java are tainted by my old workplace, which was a bit of a fanatical Java-everywhere-all-the-time kind of place.
Built an enterprise app today in it because we wanted easy to maintain standard Python code. Yea - it still works - but probably best for enterprise type apps. 
Quick code review just reading through it. 1) Docstrings go in quotes, not comments. With comments, you'll get no `help()`. 2) Classes are typically uppercase. You'll find non-uppercase, but not often. 3) commas between parameters and no spaces around default values (`def __init__(self, ip, port=8000)`) 4) `self.get_status()` makes it sound like it is returning something. `self.update_status()` at least makes seem like there wont be any return, but why not return. 5) Your per-function comments should be strings at the start of a function like (1) for modules. 6) `w...` `jResp...` appear a lot. Part of that looks like a `base_url` and part looks like a some add ons. An interface like `jResp = self.api.get('tv/getTuned')` could sub in for all of those so you don't have to keep copying and pasting. 7) If you like this style, feel free to keep it, but an alternative is: try: major, minor = channel.split('-') except ValueError: major = channel minor = 65535 8) If you do the same channel calculation twice, make it a function (if, not iff). `def _parse_channel` to make sure there is no inconsistency. 9) Why urllib.request.urlopen? `from urllib.request import urlopen`. If you're working with json a lot, `requests.get(url).json()`might be a pleasant alternative. 10) Noting what are valid keys is nice, but do you know what the valid keys are in advance? If I send an invalid key back, what do I get? Can you raise an exception which will tell me that I've screwed up? `raise ValueError("Invalid key " + key)` (don't get wise and make this a `KeyError`. 11) I appreciate that you've made the commands somewhat like the api they represent. I'd stick with that and have `tune`, `get_tuned`, `get_prog_info`, `mode` and elaborate in the docstring on what they do. 11b) You'll probably see in a style guide at some point that docstrings and commits should be imperative. Do what makes sense, but "## **This gets* the channel and program information of the current channel" starts to get awkward. "Return ..." and "Get ..." are *very* common in docstrings. 12) Link to the other documentation that will let a user know how to use the api!
What version of Python is needed for this? Or does it not matter? Looks like a cool thing to mess around with. Good job.
Some Python3.x. I'm not sure down to the version, but urllib has no requests in Python2.x.
Alright, thank you. I just got finished reading through your other comment trying to see if I could figure how to use this since I have DirecTV. I'm using Python 3.4.2 so I wasn't quite sure if I'd be able to use it.
&gt; Motivated towards execution without delay. What does that even mean? &gt; Readily available for new projects during business hours and/or off hours Hahahaha............ no.
Looking at og_the_so's [comment](http://www.reddit.com/r/Python/comments/2m45j3/control_your_directv_receiver_using_python/cm12q05) you may want to slap a quick cli on this and mark it as python3 with a shebang (though if you switch to requests, you'll immediately support python 2.5+? through 3.x.
Yeah, I think the only thing not version agnostic would be the urllib request.
Thanks for the pointers. I'm making some updates now.
As Aea posted, this would work much better if you posted the whole function or section you are working with.
While that makes sense, as far as simple GUIs go tkinter is pretty easy to deal with manually. As it is some gui builders are far better than others. I don't know of a native Python solution though. 
Why couldn't you package your program with wxPython into an executable for Linux using cx_freeze or PyInstaller?
Providing some indication of new feature/functionality would go a long way towards convincing people to test it.....
2 bugs in your quiz. 1. child.method =&gt; You have omitted the () 2. super(Child, self).method.original() =&gt; You need to pass self as argument Once you fix them: def secret_decorator(func): def inner(*args): print 'decorated' func(*args) inner.original = func return inner 
I've committed a new version. I added a /usr/bin/env shebang at the top and switched to requests (thank you for that, it's much nicer). By cli do you mean the #!/usr/bin/env python header?
I've committed a new version that should be a lot easier to understand and it should support python 2.5+.
nope, elsewhere it is not a quiz. Take a look to the solution posted by @ionelmc
What about bug 1? @ionelmc has ignored that. Please check. Bug 2 can be fixed using functools.partial if you insist it is not a bug.
oh, yeah. first in a sample. fixed. i thought you mean super(Child, self).method().original(self) That's pretty ugly
Bug 2 also needs to be fixed if you plan to use this technique in anything other than a toy example. Poor @ionelmc has taken great pains to work around this nonsense.
Why you think that passing self twice in the super(Child, self).method.original(self) is not the bug? What about super(Child, self).method() ? Is this bug in python? And I don't understand why a quiz solving is the "great pains"
 def the_flying_circus(): if 'this is a stupid problem' and 'you should probably find a different tutorial site': return True elif '': return False else: return False
This looks pretty cool, but is a rather big change. Handling iteration and chaining of resources looks really quite nice and is something I find myself doing a lot. Since there is quite a bit in boto3 around session handling, has any thought gone into handling AWS API limits? Something like exponential back off of requests when API limits are reached?
I think the "great pains" is using a class rather than a function for implementing the decorator. from functools import partial def secret_decorator(func): def inner(self): print 'decorated' func(self) func.self = self inner.original = partial(func, getattr(func, 'self', None)) return inner Now this works.
What does python --version return? I got the same error when I used Python 3.4.0, but it worked fine for Python 2.7.6.
This would be a question better suited on /r/learnpython, honestly! Anyhow, since I have time, I'll give you an answer. I honestly don't know whether or not it would work.. but it'd be a bad idea nonetheless. Python's a great language, and a powerful one at that, but games is really not it's strong point. It is possible to convert a script into an executable file, but it's generally not very pretty or beautifully bundled. Most web games are based on Flash. I'd suggest looking into that instead!
You are right. self does not seem necessary. I need to figure out how to save that in a more elegant way.
You can use py2exe or pyinstaller to make an exe.Or if you are using kivy,they have a detailed documentation on making a windows executable: http://kivy.org/docs/guide/packaging-windows.html If performance doesn't matter much for your game then go with python otherwise I suggest using lua or c++
can this be done using a function decorator instead of a class decorator?
I think he is looking to create a downloadable game, not an in browser game. Which is entirely possible with Python. Including a nice installer.
I knew switching to DuckDuckGo will backfire at some point!
 def secret_decorator(func): def inner(self): print 'decorated' func(self) from functools import partial class Desc(object): def __init__(self, func): self.func = func def __call__(self): self.func(self) def __get__(self, instance): return partial(self.func, instance) inner.original = Desc(func) return inner This will work better.
Why don't you turn this into a service for Home Assistant: http://www.reddit.com/r/Python/comments/2l4u8u/home_assistant_python_3_home_automation_platform/ Phillip.
It looks like it's exactly what MachaHack said (the console fucks it up) it looks like [this](http://gyazo.com/0922a3ef546e4f1468c345ef3569041f).
Thank you very much for your really helpful answer! I have to give the file reading a try. I think it really is like you said, the console is cutting away all the " in the string. I have no idea how I did not see this?! (I made a lot of prints to figure shit out). Print and error are looking like [this](http://gyazo.com/0922a3ef546e4f1468c345ef3569041f).
I'll keep that in mind. Thank you for pointing it out and sorry for this mistake :(
Found this nice link in the comments: https://github.com/mysz/subst Basically a sed with [PCRE](https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions) written in python.
Hi, I would also recommend https://www.codeeval.com . Greate problems, separated in 3 difficulties. Each solution is evaluated against predefined set of functional tests and also has criteria for speed and uniqueness. However after a while I found that just solving problems is becoming somewhat borring. I would recommend you try and find something that you tend to repeat in your day-to-day work and maybe try to (semi-)automate it. Once such project is identified it becomes very easy (and way more interesting) to search for concrete problem that you have and adapt it to serve your needs.
http://www.reddit.com/r/Python/comments/2lzxw0/build_a_reddit_bot_part_1/
Stupid question, `submission_stream` seems to infinitely yield new posts as they appear. Would you know if this is done via websockets, i.e would need a persistent connection with the server?
Don't really know enough about websockets to say, but if you're asking if you need a persistent connection to the *reddit* server, then no: I don't believe this is correct. The reddit API is RESTful and operates through GET requests. I'm pretty sure `submission_stream` just maximizes your requests to the /all/comments endpoint and maintains a cache of comment ids so it knows which comments it's seen before so it can ensure it only delivers new comments to you. Pretty sure this is all done through the `requests` library. You can always ask more involved questions over at /r/redditdev. The `praw` developers are pretty active in there.
Agreed, you can write garbage in any language. I'm definitely not saying Python is the right choice all the time (nor is Java the wrong choice). For me, I've been working with Java and Python for so long that I'm really excited to be using Ruby. And I'm very interested in test driving some of the newer languages out there: Scala, Clojure, Go, Rust, Julia, etc. I'm especially thrilled to see something like Rust which is positioned to replace C++. There are really only two languages I never want to use again: C++ and Perl. Both very influential and important but not for me. I might not like Java so much anymore but I wouldn't avoid it if it fit a specific need well.
I actually find that the example you describe is *exactly* what I use the else statement for when dealing with loops. I often deal with dictionaries or lists containing other objects. The else statement is great when you need to handle these dictionaries/lists based on data within the objects.
&gt; some gurus say they prefer doing it "by hand" I'm no guru, but I do prefer building GUIs by hand. I started with Swing on Java, and I became quite comfortable building dialogs in code. There were GUI builders that mostly worked, but I often used them to get started, finishing things up by hand. I don't use Swing anymore, but I do still hand-code dialogs and windows in tkinter or Win32 resource scripts (yes, I really do...). I don't find it particularly problematic. The Win32 resource scripts are especially easy in my mind because they don't resize (generally speaking), and the layout becomes a big arithmetic problem. However, I realize hand-writing GUIs isn't for everyone, so use what you want. 
My favorite tkinter resource is the [TkDocs website](http://www.tkdocs.com/). It has some great examples and explanations of the newer ttk widgets, which some older tkinter sites just don't explain.
As a general rule, any code that immediately looks like an error is probably a bad idea. While it could be handy in a particular edge case, this code will almost certainly be misunderstood by the next programmer who looks at it. The most important efficiency in modern programming is not efficiency for the memory or processor, but programmer efficiency. If one of my programmers submitted code like that, I would say: "Very clever. Change it to something more universally understandable, or clean out your desk." An if statement inside the loop with an ordinary else would do the job just fine and any programmer would understand it. Any time you're using features like break or continue, the code is going to be a trap for somebody. Find a better way to write it. It might also be better in this case to make it a while loop with a Boolean sentry.
If your other programmers don't know how to use for...else, then why have they been hired to work with python?
You have to give the variables as parameters to whatever function you're calling.
I use a for/else in my code for a Miller-Rabin primality checker: def isPrime(n, k=5): # miller-rabin if n &lt; 2: return False for p in [2,3,5,7,11,13,17,19,23,29]: if n % p == 0: return n == p s, d = 0, n-1 while d % 2 == 0: s, d = s+1, d/2 for i in range(k): x = pow(randint(2, n-1), d, n) if x == 1 or x == n-1: continue for r in range(1, s): x = (x * x) % n if x == 1: return False if x == n-1: break else: return False return True
I think you could use *or* instead of *and*: import socket import itertools (lambda port=9000, s=socket.socket(socket.AF_INET, socket.SOCK_STREAM): s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) or s.bind(('', port)) or s.listen(5) or list(map(lambda c: c[0].sendall(c[0].recv(1024)) and c[0].close(), (s.accept() for _ in itertools.count(1)))))()
You don't really need python for this. The shell could do this relatively quickly...your three main problems are: 1. for i in {1..1000000} &lt;- This expands in memory. 2. you keep opening and closing files 3. the external date command is called for each iteration of the loop Here's a shell script that should run very quickly (well, as compared to the original...python would be faster still) #!/bin/bash i=1 logfile=sample_$(date +%Y-%m-$d_%H%M).log while [ $i -le 1000000 ] do echo "This is custom message number $i" i=$(( i+1 )) done &gt;&gt; /var/scripts/$logfile It's a bit different than yours in that yours will create more than one output file if it runs for longer than a minute. This only generates the output file name once, so it will only generate a single output file. 
I agree with this. The "unusual" else clauses are perfectly Pythonic and I'd get mighty pissed if a PM ever gave me the above spiel. EDIT: Furthermore, these else clauses are not used for performance. They are there precisely because they allow one to write more expressive code.
Could you post an example in context?
Wouldn't that short-circuit after the first value evaluates to `True`?
using `set` instead of list was also suggested.
Alright, here's a really tiny one. Basically, I have a dictionary containing "User" objects. At a certain point, I start collecting creation dates for these users via an API. I do this with the help of a multi-threaded module I created. When every "User" object has a creation date, I want to progress my code. Here's where my function comes into play: def is_missing_creation_dates(self): for username in self.users: if(self.users[username].creation_date == ""): return True else: return False It will only ever return False once all objects have a creation date assigned to them! Edit: I know I can do this with a simple 'if("" in [self.users[username].creation_date for username in self.users]) ' check, but I rather do it via a progressive check rather than generate what can sometimes be a *huge* list every time. Edit: Apparently this was totally unnecessary. Nevermind. Nonetheless, my initial point still stands!
The article explains that these methods return None, which is False in a boolean context.
The else clause is unnecessary there. Your code is equivalent to: def is_missing_creation_dates(self): for username in self.users: if(self.users[username].creation_date == ""): return True return False It's never useful to have an else clause on a loop that doesn't enclose a break statement. 
Thanks for sharing.
As somebody who has been programming in Python full time for over 7 years, with many other capable Python programmers, I've only seen it used 3 times, and every time it caught me off guard. Don't get me wrong: I like the language feature. I think it's clearer and more convenient than using a Boolean flag variable to check if a break was encountered. But I see it used so sparingly that I wouldn't expect every capable Python programmer to know about it. By the same logic, you shouldn't hire a Python programmer who doesn't know how to write closures, decorators, Python/C extensions, metaclasses, or any of the many features that only get used in special circumstances. Basically, you should never hire anybody but a seasoned veteran. If that's the hiring process you want to take on, that's your choice, but I'd happily take somebody who can write 98% of my code and takes a few minutes to look up the special features the other 2% of the time.
Use generators. They use the same list comprehension syntax, but don't make everything at once.
You can't do containment checks with generators.
Yeah, I was thinking about that last night. I'm going to have to look into it.
That's a good point. I didn't mean to imply that you need to know 99% of the language's features. I guess I should have written it as "can't understand for...else".
Because the `and`s are evaluating `foo == None` which is True, so they evaluate the next statement until they hit a falsey value. As Citrauq indicates, you could equally just use `or` which would keep evaluating until it hits a truthy statement.
Could also set the lambda to return `False` and use `any`; should then iterate forever. Pity there's no functional way to discard exceptions, a `try`/`except` is blockish so can't be lambda'd. Would have to define a function to accept something that might crash, then pass a lambda and context to that function from the functional code.
I think any would work as-is: None is considered False in a boolean context.
I did a fun little project that queried epicurious for recipes on a given user input. It provided 10 options for the desired food item and then displayed the recipe. Neat intro into web scraping 
Ideally we're looking for someone close to full-time hours. However, we have several on-going projects that require part-time and/or close to full-time work. 
It was several years ago so I can't recall every program that I had looked at but as I recall cx_freeze, like py2exe, did *not* create a single file executable. I had to do something akin to "binary file ducktyping" and if my executable arrived as an executable or as a file that decompressed to an executable, people would start balking. The entire project as well as any non-python assets (art, configuration data, localization files) had to arrive as a single file and stay that way.
 def is_missing_creation_dates(self): return any(self.users[username].creation_date == "" for username in self.users) The lack of `[]` makes it a generator expression, which makes it generate items as `any` asks for them, and `any` will terminate immediately when it hits its first `True`.
Well, now I'm really curious. Your statement, &gt; I often deal with dictionaries or lists containing other objects. The else statement is great when you need to handle these dictionaries/lists based on data within the objects. describes pretty much every Python program in existence, yet in well over a decade of working with Python, I've never used either while...else or for...else, and what's more I don't think I've ever seen it used outside of a text book or a blog post about the obscurity of this feature.
[Tada!](https://praw.readthedocs.org/en/v2.1.19/) I think (although I'm not 100% certain) you use +s (e.g `r.get_subreddit('python+learnpython')`. Doing this in the browser gives you a stream of both, so why not in the API?
/r/learnpython. This doesn't belong here. 
Maybe I didn't phrase my question correctly or I didn't get your answer right. I will rephrase my question in the description: I *wrote* a python module and I want to spare my users the trouble of installing FFMPEG themselves. Is there a way to configure setuptools so that it will download and install FFMPEG when the package is installed.
I'm actually interested in the code that generates the Python classes from the JSON descriptors....is that open source as well?
At my team, there's another important factor: similarity across languages. We employ python for certain things we cannot do in java (e.g. low level unix work, or short-running scripts with fast startup requirements), but if we have the choice between something that's consistent across java and python and something that might be a teensy-tiny bit more convenient in python... why bother. That's why we replaced one use or for-else in our code base with for-return-handle_not_found and never looked back. There's other special python features with much, much stronger use cases, such as descriptors. 
It will do it by default if it's configured properly (e.g. internet, name is spelled right, you have a compiler). If it's being dumb, you can include the egg with the package so setuptools can find the package or just make an exe so they don't need to install anything.
&gt; I hadn't anticipated the sheer number of people who would not install wxPython just to run my app. I ran into this too. It actually kind of surprised me. Hell, some linux users even seemed borderline offended that it was made with Wx. 
Wait, django is faster than flask? When did this happen?
If you want something like AutoHotkey but for Python, check out the PyAutoGUI module: https://pypi.python.org/pypi/PyAutoGUI But if all the automation happens in the browser, it might be easier to get it using a browser automation module like Selenium. Here's a rough draft from my next Python book that covers it: http://inventwithpython.com/automate11-web_scraping.pdf
49 Game Clones, chosen based on their simplicity. http://inventwithpython.com/blog/2012/02/20/i-need-practice-programming-49-ideas-for-game-clones-to-code Also, a Project Euler-like site: http://www.codeabbey.com/index/task_list And: /r/dailyprogrammer
You're putting all sorts of weird intentions onto people. You made a joke. People didn't get it. I didn't get it, so I asked for an explanation. That's it. &gt; The nevertheless apparently like your useless comment very much... Not really, since it stands at a score of 1. Also, since it prompted you to explain yourself, it was precisely the opposite of useless. &gt; As I said, if it happened to YOU, you would have been much more composed in your comment. Especially as you most certainly didn't figure out the downtime yourself so it did't affect you in any way. That's just complaining for the sake of it. I wasn't complaining about the downtime at all...
I am working on a similar problem. For mine, I am creating a custom build command using info I found here: http://stackoverflow.com/questions/1754966/how-can-i-run-a-makefile-in-setup-py You might need to do something similar to check for FFMPEG and install it if need be.
Thanks for your answers and for your time. I still don't understand what "configured properly" means. For instance, where should I explain to Python that during the installation of my library, I want to fetch the Windows ffmpeg installer on the web and install it ? How can I make this installation optional, so that users can decide during the installation of my library whether they want to install FFMPEG at the same time or not ?
It will be a file in /usr/bin, except on windows and on Mac (?). The answer I was looking for has been given by u/kdadihaus above, I think I can find my way from there :)
I think this is kinda what [Conda recipes](http://conda.pydata.org/docs/build.html) are for.
It wasn't really on my mind at the time, but I'm glad it didn't introduce a lot of slowness. FWIW, Flask even without Py3 support was never really as performance-concerned as some other frameworks: http://svn.repoze.org/whatsitdoing/
&gt; Thanks for your answers and for your time. I still don't understand what "configured properly" means. It's in the parentheses. You need internet, a valid requirements/setup.py file, and probably a compiler since it's an MPEG library, which I assume is not pure python. &gt; I want to fetch the Windows ffmpeg installer on the web and install it? You don't. That is not supported. You can download the source and compile it. For most users, that's probably not an option. You either 1) tell the user to download it and install it first 2) provide the installer and tell them to install it first or 3) make an NSIS installer that installs it (see the link) and your package 4) you make an exe using pyInstaller/cx_freeze/py2exe (and possibly still use NSIS). http://nsis.sourceforge.net/Main_Page &gt; How can I make this installation optional Use NSIS. I strongly recommend just using pyInstaller to create an exe. You can skirt the issues of specifying a version of Python, having pip, internet issues, compiler issues, and probable FFMPEG issues. It takes some time to figure out how to use it, but it's not that hard and once you get it, it'll just work. It's also much more professional.
&gt; I hadn't anticipated the sheer number of people who would not install wxPython just to run my app. You can skirt that issue. People love EXEs. Also, without making an exe, you run the risk of python versioning issues. In 10 years, your code should still work. Pyinstaller can definitely make a single file.
I don't quite grasp what docker is bringing to the table here but it's always some handy doc.
It's interesting how even small benchmarks can be so different. I've tried Morepath both with whatsitsdoing and with wheezy.web's benchmarking system. whatsitsdoing does performance testing with a server like waitress and apache bench, whereas wheezy.web's benchmark just tests throughput with raw WSGI calls. Both are informative. The raw WSGI throughput really shows you how much time is spent handling requests in each framework. But it's not very realistic. A real web server plus ab shows massive difference between using, say, waitress and gunicorn, with the same framework. It's probably more interesting to make sure not too much code is executed in the critical path, just as a code-cleanliness exercise, rather than worry too much about benchmarks, but benchmarks make much better talking points. They're exciting and all! 
Right, but I'm looking for actual examples rather than generic templates. I agree that it *seems* useful, but it's rarity in practice suggests to me that it isn't.
Thanks! So far you've provided the only real example.
Just a means of accessing elasticsearch and kibana. Makes it easy to recreate this environment anywhere.
I would say the module `pickle` is the best way to store the object. Can you develop "call said object by name" ?
I know about for/else but I avoid using it because I figure 90% of Python programmers won't know what it means without looking it up. And it's not a huge win -- it just saves a tiny bit of code.
With what library are you reading the PDF images ? PIL ? If you can manage to transform the image into a (width x height x 3) numpy array, it will be easy to cut it into equal chunks using numpy.split_array(myarray, number_of_chunks) 
Use [Charles](http://www.charlesproxy.com/) with its [SSL Certificates](http://www.charlesproxy.com/documentation/using-charles/ssl-certificates/) to analyze the web traffic, and then use requests. Using something like PyAutoGUI for this task is just really unclean. Alternatively the Selenium WebDrivers are a great solution too, as ALSweigart mentioned.
I was going to use PIL but I'm open to literally any idea. Yours in an interesting take, I'll try it and see what I can come up with. Thank you!
Thanks! most of that is stuff I'm 'sort of' doing now... I installed Eclipse and have been using that with pyDev, and while it doesn't do as much as you've described style wise, it certainly catches actual 'broken' things (wrong indentation, etc) and a few of the 'warnings' as well (as you said, libraries that are referenced, but not used, etc...). &gt; There's also not really a 'right' way persay to write your code - if it works it works... but that's not a good standard to live by Exactly... I can usually google my way through a problem enough to make the error messages ago away... but then I end up with something that breaks horribly once I change something, or something that works inexplicably, etc... And yeah, I just figured it was worth a shot. But barring some kind of code review site, I probably just need to tackle the issues a little bit at a time. My biggest concern is the design decisions that I don't KNOW are problems, right? But as you said, it's not the end of the world :)
Here's an example from the codebase I current work on: for sdef in page.facebookpagepost_set.first().score_definitions: if sdef['column'] == score_column: score_definition = sdef break else: raise CommandError("Invalid score column: %s" % score_column) It scans a list of dictionaries for a dictionary with a key matching a particular value, and raises an error if one is not found.
Cool. If you don't mind dependencies, matplotlib has an imread("myfile.png") function that can read several formats I think and outputs a numpy array.
I use VTK. It works quite well. Alos, isn't MayaVI dead? The last update I see was from 2005.
I don't recall using either of these, but the `try`/`else` construct is something I've gotten a lot of mileage out of.
No longer! I added Python 3 support last night.
You're better off asking this in r/learnpython. 
If I give the class a name variable, and when I create the object I pass said name, I would like to be able to call it somehow by name for comparison with other entries. 
Wow! Thanks for posting this :) I didn't post it myself because I wasn't sure r/Python would like it! *Full disclosure: I wrote this puppy.*
nice, here an expanded similar echo server, mostly from http://ilab.cs.byu.edu/python/socket/echoserver.html import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('',9000)) s.listen(5) while 1: client, address = s.accept() data = client.recv(1024) if data: client.send(data) client.close() 
Ok, let me digest. I'll holler on Monday-ish.
Neither have I, five years and counting.
I can't wait for the angular fad to end.
Excellent :)
http://codereview.stackexchange.com/
Thank you!
Why not just use the built in smtplib? 
If you want just one of the numbers: print(book['Capone']) or alternatively if you want all of the numbers you could do this for k,v in book.items(): print v 
":80" isn't necessary since that's the standard HTTP port anyways.
Be prepared to wait a while. 
Is there really an overlap in people technical enough to `pip install` your module, but simultaneously not able to install ffmpeg with their package manager and/or through an external installer?
These visualization tools combined with Flask would make for some really good dashboards.
Just curious as to why? 
Why? It's a great framework for organizing your frontend code. 
FYI, for non USA, change /text to /intl, for Canada change /text to /canada
This is actually in PEP 20 http://legacy.python.org/dev/peps/pep-0020/ &gt; Flat is better than nested.
Even better break into functions use early return.
Goddamn. I've been looking for just this type of in depth tutorial. I'm excited to go through it, since I'd love to learn how to use Angular along with Django. +1
In some cases if x == something_totally_not relevant: continue at the top of a loop. I'm sure there is some other, possibly better, way to do this.
I have no idea what I do in my code, but now I know what I should be doing. :]
Could you show an explicit example?
What are the limitations on this service?
"Notes and Limitations" section on front page of at textbelt.com
It's already shown: the explicit version is having "continue." The implicit version is relying on the fact that there is no "else" clause.
No, the yield would not make any difference, the else would still be unnecessary.
Here my awful code: def vlc(path, ext=vidia): from urllib.parse import quote tmpl = '''&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;playlist xmlns="http://xspf.org/ns/0/" xmlns:vlc="http://www.videolan.org/vlc/playlist/ns/0/" version="1"&gt; &lt;title&gt;Playlist&lt;/title&gt; &lt;trackList&gt;''' for i, fp in enumerate((os.path.join(p, e) for p, d, f in os.walk(path) for e in f if e.endswith(ext))): tmpl += '''&lt;track&gt; &lt;location&gt;file:///{}&lt;/location&gt; &lt;duration&gt;0&lt;/duration&gt; &lt;extension application="http://www.videolan.org/vlc/playlist/0"&gt; &lt;vlc:id&gt;{}&lt;/vlc:id&gt; &lt;/extension&gt; &lt;/track&gt;'''.format(quote(fp), i) else: tmpl += '''&lt;/trackList&gt; &lt;extension application="http://www.videolan.org/vlc/playlist/0"&gt;''' for _ in range(i): tmpl += '\n\t\t&lt;vlc:item tid="{}"/&gt;'.format(_) else: tmpl += '''\n\t&lt;/extension&gt; &lt;/playlist&gt;''' with open('%s.xspf' % os.path.basename(path), 'wb') as f: f.write(tmpl.encode('UTF-8')) if __name__ == '__main__': vlc(sys.argv[1] if len(sys.argv) == 2 else 'D:\\Downloads') If directory or sub-dirs has no files with matching extensions, generator yields no values and 'i' for enumerate will not be created, this will raise an exception, so i made else clause wich garantees that 'i' will be in namespace, also nested for...else to minimize unecessary writes. Also not related question: is there's better way to construct template? Concatinating strings doesn't feel good. xml.etree.ElementTree doesn't help too, also it's too complicated for this simple script.
Wow, I must be going blind. Thanks. 75 per day is pretty generous!
obligatory https://blog.jcoglan.com/2013/11/15/why-github-is-not-your-cv/
In case someone wants to use this for Python 2 and 3 both (right now it's Python 2 only): import urllib try: import httplib HTTPConnection = httplib.HTTPConnection urlencode = urllib.urlencode except: import http.client HTTPConnection = http.client.HTTPConnection urlencode = urllib.parse.urlencode def send_text(numstring, message): params = urlencode({'number': numstring, 'message': message}) headers = {"Content-type": "application/x-www-form-urlencoded", "Accept": "text/plain"} conn = HTTPConnection("textbelt.com") conn.request("POST", "/intl", params, headers) response = conn.getresponse() return response 
Fair enough. It's an overall cool article by the way :)
I feel like brute forcing every provider isn't the most elegant design for an SMS API.
There is exercism.io, that works as follows: you download the exercise in a given language, solve it and send back. After submission you would be able to see solution of other people and you should do them some code review, and their should comment your code: http://exercism.io/ It works surprisingly well. Apart from that, I would recommend you http://www.checkio.org/ - it's a platform for exercising solving programming problems - after you solve a problem - there is `see other solution` section and you can learn a lot from it. I really like code review and I think that it is very important, but I really hate correcting people's spelling mistakes, bad variable names, lack of comments, lack of tests, bad formatting (linters in editor are the best for it), not idiomatic python code, extremely long functions... This should be corrected by author before code review. Review your code yourself after finishing a feature/problem with this things in mind and your code will greatly improve.
Apparently, yes (it's a request from a user who says installing ffmpeg always causes a lot of trouble to his clients, and I guess he is not the only one in this case). Plus you have the problem that package managers in Ubuntu/Debian actually install a completely outdated version of ffmpeg (because of the war between ffmpeg and avconv). My module detects this and sends an error message but then linux beginners are not always able to upgrade ffmpeg by themselves (which consists in copying a binary in /usr/bin).
For pyusb keyboard-alike devices I just starter a QThread in PyQt that waited for input. Thread end signal launched a slot that then looked at the value set by the code in the thread. Interrupts for GPIO depend on the microcontroller/SBC used with it. Some do have it, some don't and then you have to poll in loop.
Python 3 support isn't quite there yet, though - release is at Christmas. You can get most bits working by compiling the alpha version from source. That's easiest to do on linux, but openCV doesn't work on Ubuntu 14.10 (just a heads up). 
Probably should be written as: for x in (x for x in collection if predicate(x)): do_something(x) to save generating a separate list
[**+Pavel Cisar**](https://plus.google.com/118290124501648575087) [_2014-11-13T16:36:50.809Z_](https://plus.google.com/118290124501648575087/posts/JNPyHwFWuVo) &gt; &gt;FDB Python driver for Firebird v1.4.2 is available for download . This mostly bugfix version introduces a backward incompatible change to events API, so read the Release Notes before deployment. &gt; &gt;[https://pypi.python.org/pypi/fdb](https://pypi.python.org/pypi/fdb) 
Yeah maybe in the end I will make a separate script to install what must be installed. Thanks !
`reduce()` sounds like the best match, in my opinion.
Why? It seems to me that pipedings' solution is more inefficient (it loops twice), more verbose and more difficult to read than a single loop with/without continue. Plus, what does it mean that a loop should not decide based on what's being looped over? This always happens, including in the example above.
seems fantastic, but is it possible to make it send some text to european cells? I tried to change /text to /intl but it didn't help. How the phone number should be enetered? in e. as '0043xxxxx' or? cheers!
Why not just use requests?
You could if you had a paying account, but PythonAnywhere restricts free users to a whitelist of sites, HTTP/HTTPS only. https://www.pythonanywhere.com/whitelist/
textbelt doesn't appear to work with Australian numbers.
even better: the person receiving the text and being unable to do anything about it is the product.
To make this snippet more approachable to a passer-by?
I also favor breaking things up into chains of generators: def gen1(stuff): for i in stuff: if not pred(i): yield i def gen2(gen1stuff): for i in gen1stuff: ....blah.... yield something else s = stuff() g = gen2(gen1(s)) ##do something with g c.f. http://www.dabeaz.com/generators/
This is awesome, but are you able to guarantee the phone numbers aren't on any sort of spam list?
I would argue that Requests is more approachable, especially to someone who may not be familiar with web related lingo.
I build libraries for situations where people can't install new libraries (in my case, usually classroom). I have to rely on pure python or nothing. You should see what I have to do to get OAuth...
Something like this? # -*- coding: cp1252 -*- def getInfo(): wc = input("Enter the wholesale cost : ") p = input ("Enter the percentage markup : ") return wc, p def calculateRetail(wc, p) : return wc+(wc*(p/100.0)) def main() : wc, p = getInfo() r = calculateRetail(wc, p) print "The wholesale cost is £%.2f" %wc print "The markup percentage is %d%%" %p print "The retail price is £%.2f" %r main() Although I don't like how your professor / teacher has set this up - why all the functions? It does nothing to make it simpler, just adds complexity to it. It also robs you of a bit of your independence to show HOW you'd use functions, if at all. Anyway.
Why can't you use virtualenv?
Not relevant in this specific case (using requests instead of urllib) but I've worked in a secure environment before, i.e. no external Internet connection. Wrote a very simple message board in pure Python 2.4 using Tkinter for the UI and wrote pickled posts to disk for data persistence.
I was thinking more from the point of view of copying a script and running it against a stock Python installation.
Nice try, NSA.
&gt; more inefficient (it loops twice) Wouldn't it be exactly the same given the example? The second For loop is only processing what passed the first For loop. Same as in u/pipedings example. &gt; what does it mean that a loop should not decide based on what's being looped over? I think he meant that you should not be looping over an entire set and figuring out which ones you should be processing inside the loop. Instead, you should limit the processing set to only the ones that satisfied the predicate. for x in (x for x in collection if predicate(x)): 
As a general rule, if statements cause bugs. This filtered structure doesn't branch, and is therefore less complex. The extra iteration cost is obviated by using a generator instead. Using a generator-filter will produce nearly the same code as the first example except that it's easier to read, understand, and test. I personally would not use a comprehension in the for loop. Whenever I need to do something like this my list is usually a property on an object, so I write another property on the class to yield the elements I care about (and it gets a great readable name) Compare : for a in zoo.animals: if not is_a_bear(animal): continue # do something with your bears With for bear in zoo.bears: #do something with your bears In the case of some zoo, I would probably write a more general filter property, but you get the point. Typos courtesy of Swype.
Bigger protip: https://github.com/typpo/textbelt/blob/master/lib/text.js#L45-L72 https://github.com/typpo/textbelt/blob/master/lib/providers.js https://github.com/typpo/textbelt/blob/master/lib/text.js#L56-L59 Unlimited texts
What does that even mean? Edit: Geez people, he edited his post to clarify after I posted this.
It a FOSS product... source is on github
This doesn't seem to send to Google Voice numbers. :(
Well, this got my hopes up. It's just using a carrier's email to sms gateways. When I send a message to my Rogers phone, I get the usual "You have mail from txt2@textbelt.com. Please reply with 'Read' to read your message" bullshit. 
I tried it, received a 200 status code, never received my text though. Verizon is my service provider.
Like they need to make money somehow
No he doesn't. He edited his post to clarify.
 sentence = "this is a solution" words = sentence.split(" ") print words[0], "is the first word" print words[-1], "is the last word"
Cheers!
My understanding at the time is that py2exe creates a "dist" directory that has multiple files, all of which are required for proper functionality. The only requirement at the time was that a single file could be placed wherever the user wanted (their bin directory, on their desktop, their home directory, etc.) and could be executed from that location. Py2exe not only was windows only, but it had an entire directory of files it required.
Thanks for contributing. I think the reason I never use this construct is because I tend to extract such loops into their own functions. My version would have been: def find_address(start): for i in range(1000): address = start + i if ctypes.c_int32.from_address(address).value == val: return address raise RuntimeError("Address not found.") With the immediate return replacing their break, there's no need for the else clause.
This is correct. There is no SMS gateway at the moment for Google Voice . https://github.com/typpo/textbelt/issues/27
&gt; Wouldn't it be exactly the same given the example? Timeit! :) With this rudimentary implementation of the example: N = 100000 def predicate(x): return x % 2 == 0 def do_something(x): x += 1 def one_loop(): collection = range(N) for x in collection: if predicate(x): do_something(x) def two_loops(): collection = range(N) for x in (x for x in collection if predicate(x)): do_something(x) I get: %timeit one_loop() 10 loops, best of 3: 23.7 ms per loop %timeit two_loops() 10 loops, best of 3: 27.1 ms per loop &gt; you should limit the processing set to only the ones that satisfied the predicate. Why shouldn't conditional logic belong to a loop? Is it a PEP or something? 
 a = sentence.split() # turn string into list del a[2] # delete 3rd element " ".join(a) # recreate string from pruned list
That's true. I would've approached it from the perspective of someone writing a web app in python that requires this functionality would've probably had it installed anyway.
&gt; As a general rule, if statements cause bugs. So, should we remove if statements altogether? It looks to me you're just moving the conditional to another place (a new function, a comprehension, a property). But you are still using if's :) &gt; This filtered structure doesn't branch, and is therefore less complex. It's subjective and depends on the complexity of the conditional logic: for a simple if statement I'd rather have it in a loop instead of having to look up another function or comprehension. For more complex logic I'd definitely move it to a separate function. &gt; The extra iteration cost is obviated by using a generator instead. Not true. Try and timeit yourself (see my other comment in this thread for an example you can play with). 
I think your post made it sound like you can't use Python 3 against this service, which is not true.
As a standard library (py2) alternative, import urllib, urllib2 def send_text(numstring, message): data = urllib.urlencode({'number': numstring, 'message': message}) r = urllib2.urlopen("http://textbelt.com/intl", data) return r.getcode(), r.read()
Else is pretty explicit. if x &gt; 1: # stuff else: continue vs. if x &lt;= 1: continue # stuff are equally explicit. One is less nested in this case.
It's part of the standard library now, but was introduced in 2.5 and not available to me at the time.
Sooo... you ported vi + screen to the browser? And tossed some market speak buzz word bingo into your description of it. And you expect people to run a service on every machine they intend to remotely work on? Yeah... no.
 myvariable = sentence.split(" ")[2] Should do it.
This isn't a Python problem so much as it's a math problem. Once you know how to do the math, you can easily implement it. You want to read up about Rotation Matrices: http://en.wikipedia.org/wiki/Rotation_matrix There are a couple of caveats, the main one being that when you rotate an image, the dimensions of the image might change. Also, you'll find the 'destination' coordinate for your pixel might not be a whole number, so you'll want to do some blending, or it may look crude.
It depends how you set it up. There is an option for py2exe to make a single file .exe. I use the awesome GUI2Exe GUI program for interacting with py2exe, and it is just a setting in that. For bitmaps/icons, I usually use Img2py to turn them into strings which wxPython turns back into art. I did some contracting work where I did this and just transferred a single file to the end user who had no understanding of programming whatsoever, and it worked out great.
Sorry about that, I didn't test it with every carrier. 
I defaulted to PEP 20, rule 2: "Explicit is better than implicit." It's a judgment call...
same here, looks like it worked after i took off the leading 1. Takes 9 digit format
Isn't it a little overkill to use a rotation matrix to make a 90° rotation ? It's only a simple coordinates change. If the former image is shaped HxWx3 the new one will be WxHx3 and the pixel at position (i,j) in the former matrix will be at (W-j, i) in the new one.
Why not just make a new image with the dimensions reversed and loop through copying the pixels?
+1 Controversial
Nice work. That difference would become exponentially bigger, too, with bigger list/set sizes.
There's two problems with this argument: * What if textbelt decides it wants to use HTTPS? Port 80 is for HTTP traffic. Port 443 is for HTTPS traffic. * If you're going to hide behind "explicit is better than implicit" you're being hypocritical because you left off `http://www.` on the front of the URL. * PEP 20 is meant to be applied to Python, not connections. Only provide a port if it's needed (like connecting to Redis or Postgres). An example of violating PEP 20 is Python 3's `super`. 
Great idea! Thank you for that!
This is also a great and simple approach. Thanks!
The application is the only thing using the information so I feel like SQL would be overkill for it, but I'll take a look at it again, especially the Sqlite3, thanks.
That's what Sqlite3 is for though. It's for embedded applications that need reliable storage but doesn't need to share. Sqlite3 is your best bet. Good luck 
This is a hard question to answer without knowing what your data looks like. But have you considered JSON? You can basically store your Python dict\list, etc directly to a file and load it again. It's easy-ish to edit by hand, but let's you do more complicated data relationships that csv, for example. I'm not sure about performance with a lot of data, though. https://docs.python.org/2/library/json.html
Yeaapp, you were right. I did a nested loop with double comprehension (closer to OP's question) and got the following result: import timeit structure = [] for x in range(1000): should_process = x % 3 == 0 or x % 5 == 0 structure.append({"id": x, "should_process": should_process, "list": [i for i in range(1000)]}) def predicate(x): return x % 3 == 0 and x % 5 == 0 def do_something(x): str = "whatever man you were right =P" def comprehension(): for i in (i for x in structure if x['should_process'] for i in x['list'] if predicate(i)): do_something(i) def two_loops(): for x in structure: if x['should_process']: for i in x['list']: if predicate(i): do_something(i) print(timeit.timeit(two_loops, number=3)) # Result 7.375 print(timeit.timeit(comprehension, number=3)) # Result 7.687 Though /u/spaztiq I don't think it's an exponential increase, at least with the results I was getting. I think it's b/c it's not a full loop that's being added it's partial evaluation of a generator. As for conditional logic in loops, I guess depending on how complex it gets I prefer to have it in a separate function that evaluates to either True/False to improve readability of the looping stuff. 
You can try the Tabular Data Package http://dataprotocols.org/tabular-data-package/
My data is simply usually looks like this: People Bob, Writes python code for a living and continues to make examples. etc etc Name Description is the usual format for most of my data and sometimes includes values as well. The problem I have is it needs to be simple enough for others, non programmers, to add new content which is why I've been sticking with txt and csv. 
It wasn't intended to be. 
Although I haven't touched this in a while, I wrote a simple doc store type wrapper around sqlite3. It would probably work perfectly for what you need. This is currently running my blog and I have a couple of other little scripts that use it. IIRC, the versioning ended up being a little wonky and I'll probably remove that feature eventually. Everything else worked very well though. https://github.com/nod/databag
SQLite is absolutely 100% designed as a replacement for what you would previously have used a structured .txt or .csv file for. It gives you the convenience and powerful query interface of SQL even for lightweight applications, while stripping away the aspects of a full fledged RDBMS that would be inconvenient to deal with in a small application 
What's that ST plugin?
Why do you need something like RPG Maker, but in Python? RPG Maker is designed for people with little to no coding experience, there would be no value in redoing this in Python, other than doing it for fun and making it open source. If you want to code a game, and use a framework that yields something similar to games made with RPG Maker, I don't think anything this specific exist (I'll be glad to be proven wrong), but you can try building using [PyGame](http://www.pygame.org/news.html). It's only gives you the basics like sprite placement and handling input, but it should be easy to make the tile system, menus and dialogs in it. Plus, you would be able to make a better combat engine than the dull final-fantasy-like one you get in RPG Maker.
Alarm bells are going off in my head. I'd never let people I would describe as "non programmers" edit the data store by hand. Give them a simple tool too add data safely. Either a single dialog window with a list of fields and an add button, or a command line utility that prompts for each input. So long as the instructions for use fit on the back of a business card, I don't see how that could be worse.
Actually it is. I actually missed the part where he said 90 degrees. Whoops.
good question - lemme see I seem to remember using this webpage for some setup and customization instructions in ST: https://realpython.com/blog/python/setting-up-sublime-text-3-for-full-stack-python-development/ specifically I have the 'anaconda' package installed. I think by default it has 'anaconda linting' enabled. So at the bottom of the ST screen there's a small bar that shows me warning messages if I click a line that has been circled (denoted lines are circled to denote that there's some issue) There's also a number of other packages for ST that are out there for 'linting' such as: https://sublime.wbond.net/packages/SublimeLinter-pep8 https://github.com/vorushin/sublimetext_python_checker I have not used these however so I cannot comment on them. 
If you have an Android phone or iPhone Pushbullet is a good alternative to SMS. It's very [easy to use](https://docs.pushbullet.com/http/).
Definitely giving it a shot since it is highly recommended, thanks.
Why not `map(foo, filter(predicate, my_iterable))`? Or, if you prefer comprehensions: `(foo(x) for x in my_iterable if predicate(x))` Sub in a list comphrension if you need to.
Go for it. I use it for most things that requires storage, but I don't need a full blown MySQL setup or similar. What is nice is you can export CSV, HTML, etc from the SQLite database.
It appears to require the download of an app, signing up for an account, downloading the SDK, and then you can use it. Are you sure the word "easy" was the right choice?
Running "python setup.py install" on a distutils built python package is just copying a file into a python lib folder. So technically, your script would be accomplishing the same results. Well, except distutils installs by default into a location for 3rd party packages (usually lib/site-packages), so having two locations is slightly less dirty than installing everything in one location. But the advantage of making a properly packaged python package is that the end user has the choice of how and where they want to install your package. For example, distutils gives them the option of doing "python setup.py install --home" to install in a python location in their own home directory, so that they don't need to have root to install (or they can use --prefix to install it to where ever they like). In addition, other tools can manage and install python packages: setuptools' easy_install, pip, virtualenv and buildout are all different tools which can use distutils built python packages in ways that serve different use cases. Worth the effort? That really depends upon how many colleagues you have and if they already have preferred ways of managing their python scripts and libraries. 
There's no SDK involved, it's all done over HTTP. The examples all use curl. That's why I called it easy. You can use your Google account, but you do need to install an app on the phone. In return, you get much more flexibility than SMS, and you also don't have to send your phone number to some third party.
Oops, my mistake. But otherwise it's still quite a bit more complicated than just filling in this simple bit of code with a phone number and a message... Oh well, whatever floats your boat.
I meant that I wanted to make a game similar to the game that makes on RPG maker(to the moon). Just an example. I've already tried and Pygame is really cool! I even made a prototype. But I'm sure there is something that give me the opportunity to avoid mistakes and make the game better.
Looks like I'm just using the generic SublimeLinter with ST2. Thanks for the link for full stack Python though; I'm going to use all that! Cheers, mate!
&gt;Simple Revision Control is RCS reloaded - a comfortable small version control system for single-file, solo-developer projects like all those little scripts in your ~/bin directory. It features lockless operation, a clean modern UI resembling Subversion, embedded documentation, and the actual histories are plain old RCS files. https://gitorious.org/src-vcs/ 
That is pretty cool! Can you send it around the house with coordinates to do auto pilot?
You can use Kivy or PyGame, but you will have to program all the features that RPG Maker offers. Another option is to use Ren'Py, but it's an engine focused on Visual Novels - even though you can add anything you need with Python.
Thank you
If I understand your question correctly, you could store them in a list, and then call the object by using list indexing, like so: object_list = [*list of objects*] object_list[i].method()
unfortunately, not with this drone. With the multiwii drone I'm building, I'll equip it with enough ultrasonic sensors so that it can navigate around the house without bumping into walls.
yeah, i saw ops solution and the solution someone else posted below and just rewrote it with requests in about two seconds the post was basically just a notice that the API existed
You might be interested in some of the other blog posts describing how I put different components together w/ an arduino. If you're using the arduino, you'll be compiling your code in C though.
That's alright, it's definitely Rogers' fault. The service is going to be extremely useful for everyone else who doesn't have to put up with Rogers. I was being unrealistic expecting an free sms gateway to send out texts any other way. The paid ones are expensive for a reason. 
I think Pydub (depends on numpy and ffmpeg-or-avconv) reads easily mp3s, and then this analysis library seems relevant (depends on Pydub): https://github.com/worldveil/dejavu While I am at it, MoviePy (depends on ffmpeg and numpy) can also read audio, here is how you would make a spectrogram: # Get the sound (we be an array with values between 0 and 1) from moviepy.editor import AudioFileClip audio = AudioFileClip("myaudio.mp3") # could be a wav, ogg... sound_array = audio.to_soundarray() # Plot and display the spectrogram with Pylab from pylab import specgram, show specgram(sound_array[:,0]) # spectrogram of the left channel show()
/r/learnpython
See also: http://www.reddit.com/r/learnpython/wiki/index
I'll leave a more nuts-and-bolts explanation to someone better qualified to give it. But basically, your problem is that the properties of Object are themselves an instance of a classe. Generally speaking the output you get for calling a an object (such as an instance of a class) without querying any parameters will look like: &lt;__main__.Container object at 0x7f2b4429a160&gt; I took that one from your OP. However in general you can ignore the numbers right before the closing &gt;, IIRC those are specific memory addresses, which will change even on your own machine every time you run it based on what memory addresses happen to be available. So taking your code and quickly punching it into an interactive shell, I get to a.property1 and get back &lt;__main__.Container object at 0x038826D0&gt; as you did. If I instead do a.property1.value I get 5. **tl;dr** If you do print(instance_of_class) without querying any parameters, Python just tells you there's an object of a given type being stored at a given memory location. Since a.property1 is itself an object with multiple attributes, you need to query the specific attribute you want out of it, e.g. a.property1.value
Primary, yes, but I've heard of creating, say, a word processor (there's a Word-style ribbon bar available)
Virtualenv, pip. /r/learnpython
Different assignment order I suppose? 
Still relevant? I guess that depends on your needs. If you're not interested in deploying dependencies, or requiring your end users to download dependencies then yes! It's very relevant. If you're looking to develop a desktop UI iteravely, Tkinter is really hard to beat in terms of simplicity, and if you properly decouple your logic and your UI then you shouldn't have any trouble throwing a different UI if you "outgrow" Tkinter. The fact that many (most) Tkinter resources are old simply indicates that it's been around a long time and has been pretty reliable. Honestly I don't see an issue with writing complex GUIs in code - you write complex logic in code, don't you? GUIs are really nothing more than that. It may take you a bit longer, but honestly if you're comfortable with the widgets then it really shouldn't be that big of a time sink. The only advantage of a designer *might* be a slightly more rapid feedback, but honestly - you're using Python here. You should be able to write some code and have it on your screen in about 10 seconds (if you know what you're writing). And most of that time is thinking about what you need to write! --- As a relevant aside, here's what my journey looked like: I always wanted to learn how to write desktop UIs, and I found a linux magazine that said, "Hey, PyGTK is easy! It's done in Python which is even easier!" So I went to the PyGTK tutorial site. It said if I didn't know Python I should learn Python first. So I learned Python and then I started picking up PyGTK. But I didn't really understand GUI toolkits very much, and Gnome is pretty huge. And then I found Tkinter, which was very simple. So I started using Tkinter to build my UIs - even gave a tutorial at PyArkansas about building UIs with Tkinter. And then I learned about Qt, so I thought I'd give that a try. But it turns out typing the letter Q that much was a serious pain in my left pinky, so I gave that up. Then I learned about wxPython, which is something sort of in the middle. And they're all fantastic sets, depending on what it is you want. The way I try to explain it is that Tkinter is like lumber and nails. You can build what you want, but you're going to have to build it yourself. PyGTK (and wxPython) are more like building things out of prefab - you've got walls and roofs already build, you just have to put them all together. Qt is like that but even more - it even comes with the kitchen sink. Seriously - it has http://qt-project.org/doc/qt-4.8/qlcdnumber.html In that time I also attempted to learn Django - a few times. But Django was big, and I kept getting overwhelmed with all the parts. And then I learned about Flask. And Flask was simple. And Flask lets me write simple webservers. And I can make the UIs as complicated as I want with all kinds of Javascript and whatever. So Flask has become my go to. I use Flask+HTML+JS for all my UI needs. Because that UI works on my computer, on my tablet, and heck - even on my 4 year old dumb phone. But if I was going to make a desktop app, I'd still probably reach for Tkinter first.
I know this is a conversation long dead, but after spending the last 5 hours perusing the web for python interfaces of different image processors and finally having landed on [Wand](http://docs.wand-py.org/en/0.3.8/whatsnew/0.3.html#exif), to which I then found myself looking up its [author](http://hongminhee.org), I thought I absolutely had to respond to your comment because I found it a little odd that [hongminhee](http://www.reddit.com/user/hongminhee) never replied to yours with a link to his more-useful-than-pillow-in-certain-cases image processing package, which he happens to maintain. 
Lets say I have a linked list and I want to add an element to the end. I have a pointer to the end in self.last_element and I add the new element to self.last_element.next by saying self.last_element.next = new_node. But now the self.last_element points to the one before the last element so we update it to the last element again using self.last_element = new_node Now we have the following code: self.last_element.next = new_node self.last_element = new_node Hey we have two elements we set to the same, when we do that we like to write code like a = b = 5, if you want to claim this is not common practice make sure to tell so so that I can point to the hundreds examples where this is used. So now we get code that says self.last_element = self.last_element.next = new_node It was not intentionally misleading and I don't think I'm an ass because I did that. But hey, no need to remain polite!
https://www.python.org/dev/peps/pep-0020/ "Explicit is better than implicit." By doing those two assignments like that you are saving one line of code, but making it way more likely that your code is going to confuse someone else. The order of assignments is different in python than in javascript, so just do two explicit assignments.
In javascript assignment order works right to left, in Python left to right. Replace line 10 with the following to get the same results: self.property1.other = value self.property1 = self.property1.other 
Btw it doesn't operate from right to left either. When you do a = b = c it apparently does a = c and then b = c but when you do a = 5 = c it will make a equal 5 and then say that you can't assign to a literal. So the order apparently isn't that obvious. Either you do the obvious or throw an error which I thought was the python philosophy.
The order *is* that obvious: you can specify multiple lvalues (via multiple =) and one rvalue. lvalues cannot be literals. `a = b = c = d = e = 5` The other option is tuple unpacking, in which lvalue and rvalue are both essentially tuples: `a,b,c,d,e = (5,5,5,5,5)` If you want to see what is happening when you do that, you can use `compile` and `dis`: co = compile('a = b = c = d = e = 5', 'fragmentname', 'single') import dis dis.dis(co) 1 0 LOAD_CONST 0 (5) 3 DUP_TOP 4 STORE_NAME 0 (a) 7 DUP_TOP 8 STORE_NAME 1 (b) 11 DUP_TOP 12 STORE_NAME 2 (c) 15 DUP_TOP 16 STORE_NAME 3 (d) 19 STORE_NAME 4 (e) 22 LOAD_CONST 1 (None) 25 RETURN_VALUE So you can see we do a=5 then b=5 then c=5 then d=5 then e=5 (the values for a,b,c,d being created by duplicating the value that we eventually assign to e); the assignments occur in the order they are listed in the line. (ignore the final 'return_value', that's because I told it to compile in single statement mode, therefore it will always try to return a value, even if that value is None) Which Python version are you running, btw? because `a=5=c` just immediately throws a SyntaxError, for me (Python 3.4); IMO this is correct behaviour.
It works in python ... if you catch the error a is still set to 5. That being said if the order is that obvious please tell me what the order is.
Yea, i just did that! I ended up using pySide for my crappy small gui (but i'm not tossing tkinter out of the windows). I was afraid i wouldn't have been able to create an executable, but pyInstaller did it and it was really a piece of cake :)
I did use two different assignments but I thought it was obvious. Anyway someone on IRC explained it already.
Codecademy?
&gt; it works in python Not for me: try: a= 5 = c except SyntaxError: print(a) print(c) python /tmp/foo File "/tmp/foo", line 2 a= 5 = c ^ SyntaxError: can't assign to literal I don't know what you think you are doing, but using code that isn't compiled yet to catch SyntaxError is simply nonsensical - there is no way that can do anything at all, as the code (including the except clause) cannot execute until it is successfully parsed. Even if what you meant was: try: exec('a= 5 = c') except SyntaxError: print(a) print(c) That is still incapable of doing anything, for the exact same reason (the crucial code is never executed because it is never successfully parsed) &gt; Please tell me what the order is. I have already done that, as have others. In my case, I demonstrated *exactly* what the Python VM does when you write something like 'a=b=c=d=e=5'. Please listen to what the order is.
Not really. If you're looking to make a game that's your own, it's best to write as much of it yourself as you can and grab libraries for places where you'd be reinventing the wheel. Also, MAKE A LEVEL EDITOR that spits out files that your game can interpret. This will help significantly ease the process of world setup and make your game modular at the same time.
Yeah, that's what I meant by &gt; you can specify multiple lvalues (via multiple =) and one rvalue. But I can understand if you are not familiar with the lvalue/rvalue terminology, that this might not be very helpful. BTW: posting a question and then deleting it once you have an answer is against /r/python etiquette.
I disagree, but I think it depends mostly on what you are trying to do with the assignment. If you are trying to assign 'a' and 'b' to the same thing then it makes sense to put them in one line. If you are trying to do something less obvious, like OP, and assign to an attribute of an object and then replace the object, I don't see how that is clearer to a reader in any way. I'm confused by your first point. You think right-to-left assignment makes more sense so python should do it that way or not let you do chained assignment at all? For you last point, why would you ever do something like that? I tried to find an explanation by Guido saying why he did it the way he did, but only found this: https://mail.python.org/pipermail/python-dev/2012-November/122560.html My point was/is that if you are doing something "creative" in a chained assignment (anything beyond assigning two variables to the same value) then you are making it complicated for others. The OP was using an object then replacing that object which to me is easier to understand in two lines of code rather than one line of code.
Thank you!
The AR drone, not much. However, all the things you'd like for it to carry can be done if you built a multiwii based copter, which I am currently working on. :)
very nice! Question for you: How is its performance? Counting word frequencies would be a great map/reduce problem.
wierdly enough I've done both... The SQLAlchemy documentation is good, but I can't seem to find an end to end tutorial in there about this topic. (hence my question about a TUTORIAL). Thanks for the helpful input though.
Thanks, I've been going over this exact documentation and just can't seem to get my head around it so I was hoping for a tutorial that showed this... Well, time for another read through I guess.
pySFML definitely looks more professional.
I attended a talk this past Monday where the speaker had built an open source hardware drone using a raspberry pi as the brain. He also uses WiFi to control it. You might find it very interesting. There are a lot of details on his blog at www.techvendetta.com
Nice! I had no idea such a thing existed! BRB, blowing all my savings ...
It's Python... but with two spaces.
You may be interested in [sklearn.feature_extraction.text.CountVectorizer](http://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html)
Nice work man! But for everyone who hates XPath (like me), I must recommend beautifulsoup: http://www.crummy.com/software/BeautifulSoup/ Very easy to work with, very intuitive, and the requests + beautifulsoup combo is perfect. 
I really admire this blog post! I think small projects like this that people can easily follow along with and is presented in a clean, simple manner is great for beginners to learn. Thanks, and I hope your work does not go unappreciated!
echonest api is pretty nice
I don't understand. Why not just use a defaultdict += 1?
Support unpyc3 and uncompyle2 decompilers only. * works on py2exe binaries, cx_Freeze binaries, bbfreeze binaries, and PyInstaller binaries. 
&gt;py.test plugin for regression tests &gt;This pytest-plugin allows capturing of output of test functions which can be compared to the captured output from former runs. This is a common technique to start TDD if you have to refactor legacy code which ships without tests.
Sidenote: XKCD has a [JSON interface](https://xkcd.com/json.html), which makes parsing any comic metadata super easy.
You can definitely get a bit more abstract than the simple script you've provided. You'll want to look into the [Task class](http://docs.fabfile.org/en/1.10/api/core/tasks.html#fabric.tasks.Task), along with [the execution model](http://docs.fabfile.org/en/1.8/usage/execution.html#intelligently-executing-tasks-with-execute). Between those two aspects (along with using [roledefs](http://docs.fabfile.org/en/1.8/api/core/decorators.html#fabric.decorators.roles)), you can achieve something that's more sane/modular than just a collection of functions that get mapped to fab commands. Bottom-line though is that you'll want to look into the [execute](http://docs.fabfile.org/en/1.8/api/core/tasks.html#fabric.tasks.execute) command, that's the general entry point to calling Fabric tasks from within your code.
Grub is also nice, lighter then soup 
Hey, I've had to do something similar before and this snippet helped me get started: https://dmsimard.com/2013/11/29/capture-output-from-parallel-execution-with-fabric/ Good luck!
I use count vectorizer all of the time. It's the bomb.
Ah ok, so you don't have enough data to say either way. OK then.
Thanks, I've edited the post to mention this.
I could use a defaultdict in place of [collections.Counter](https://docs.python.org/3.4/library/collections.html#collections.Counter) to count the frequencies. However, using a defaultdict would be slightly more manual and involved than `Counter(list).most_common(top_n_words)`.
Thanks, I'll have a nosy though the docs when I'm fresh in the morning. Check the edit btw
[binstar](https://binstar.org/search?q=psycopg2) may be of help. conda install binstar binstar search -t psycopg2
What do you mean? The execution times I posted above show that performance isn't a problem on an average-sized document for me.
It's not really a general solution though, is it?
this gives no result for 64bit
Your comments are a little vague and I'm not sure what you're saying. Can you rephrase? Do you want to see performance on a larger document?
Have you seen PyQuery? It lets you use JQuery-style selectors, including many of the pseudoselectors.
Short answer, yes you run the script on a Digital Ocean node. Before you do anything else I highly suggest you read over Digital Ocean's documentation for setting up a node and connecting to it over SSH since you said you're new to all this. These are probably a good place to start: * https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04 * https://www.digitalocean.com/community/tutorials/an-introduction-to-securing-your-linux-vps (please at least read this) * https://www.digitalocean.com/community/tutorials/how-to-connect-to-your-droplet-with-ssh * https://www.digitalocean.com/community/tutorials/additional-recommended-steps-for-new-ubuntu-14-04-servers After you have a host setup and can connect to it over SSH these steps should get your script onto the server and running: 1. **Transfer Script** `scp script.py &lt;user&gt;@&lt;ip or hostname&gt;:`. This will transfer the script to your host and place it in your home directory. So long as you can connect with SSH this should work. 2. **Run Script** `screen -dmS script python script.py`. This will run your script in the backround and keep it running even after you log out. If you have output you expect to be able to read I'd either send that to a file (Google sending stdout and stderr to a file) or use Python's logger to write to a file. 3. **Check Status** `screen -r script`. So long as your script is running you'll be able to use `screen -r` to resume the screen session and check on it. You can also use the `ps` command to check on it too (see `man ps` for more info). 
Personally I've used [Selenium]{http://www.seleniumhq.org} for tasks like this - if you're just downloading the files, that's all you need. I've then used a watcher on a folder to parse the files when new ones appear, which separates the getting of the files out from the parsing. Its not the cleanest solution, but it does work.
Any VPS provider will do a perfect job at handling this kind of task for you. Digital Ocean provides "pay-as-you-go" (hourly) and monthly plans. I would just compare the pricing and use whatever is cheaper. For you, monthly may end up being cheaper since there will be many long-running processes.
I'm gonna check it out
That's cool, but xkcd is absolute shit.
I have not! That sounds awesome though, will have to check it out.
I've worked on a large scale Python code-base that is similar. Basically, there is only one thing you can really do, and that is follow the boy-scout rule: leave in a better condition than when you started. Things like commented out code, bad comments and redundant code can be just changed almost immediately. Prime example, the code you listed: if hasattr(foo, 'wibble'): pass else if True: import Bar # XXX this is subtle? setattr(Bar, '__baz', g_someThing.__somethingElse(foo)) Could be changed to: import Bar if not hasattr(foo, 'wibble'): setattr(Bar, '__baz', g_someThing.__somethingElse(foo)) As for better debugging, I often find that better testing is often the solution. Don't understand something? Add an test. Keep adding tests. They give a starting base of logic to act from. Found a bug? Add another test. It takes time, but one day someone else after you will be working on an **11-year old** code base. Make things better for that person - it could be you!
Could use [`random.sample`](https://docs.python.org/2/library/random.html#random.sample) to make sure you don't get repeats.
Start adding unit tests and make sure they all pass in a CI environment. Pycharm's debugger is great. If you don't wanna use that IDE check out ipdb for debugging. 
Have you made any attempt to optimize your database and how you retrieve data from it with your program? Unless you're working with millions and millions of rows or very complex queries it should probably not be taking a very long time to generate some output from it.
You're not that far off. You need to set env.host_string before you run any commands. Check out the documentation: http://docs.fabfile.org/en/latest/usage/env.html#host-string In your case, you'll be doing something like: def cool_stuff(): for host in mystuff.get_host_list(): # expects the form user@host:port env.host_string = host run('coolcommand') 
What is instagram style sharing? Sepia filters applied to every SQL statement? 
PyCharm has a great debugger. The community edition has everything you'll ever need. &gt; we don't have the budget or the time &gt; the quality issues seem to annoy me than other members of the team &gt; we seem to struggle to retain staff more than a year This pile of garbage has been putting food on the table for ten years, for one company or another. I'd bet anything that you do in fact have the budget. Consider this: if I wanted to sell you a complex piece of software, you'd probably want to check out the source code first, I imagine. And if you saw `else if True` and `setattr(Bar, '__baz', g_someThing.__somethingElse(foo))` and other such gems you certainly wouldn't want to buy it. There are two possibilities: one, your company bought this software and didn't even bother to have a programmer look at it, or two, they did have a programmer look at it, heard that it was terrible, and bought it anyway. I feel the only winning move is not to play. Try to sell them on a complete rewrite, and if they say no, just quit. With three years of experience you shouldn't be able to walk down the street without getting offered a job.
Your best bet is to go looking around for how people debug with Cython (dialect-ish of Python that can compile down to c libraries), numpy, numba and other scientific libraries. Those projects are involved at the C (or Fortran) level extensively and have lots of contributors, so searching around there should help. Two items that came up after a quick search for how debugging numpy and Cython: * [Cython debugger (with ability to set breakpoints in C, Python and Cython code)](http://docs.cython.org/src/userguide/debugging.html) * [a guide to debugging SciPy (scientific python library) code with gdb and some python extensions for gdb](http://scipy-lectures.github.io/advanced/debugging/#debugging-segmentation-faults-using-gdb). Not sure whether it's the same as PyDev's debugger, but I find ipdb to be quite helpful too. Hope one of these might be helpful!
I remember spending hours each evening pouring over these comics when I was first introduced.
[Image](http://imgs.xkcd.com/comics/random_number.png) **Title:** Random Number **Title-text:** RFC 1149.5 specifies 4 as the standard IEEE-vetted random number. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=221#Explanation) **Stats:** This comic has been referenced 156 times, representing 0.3833% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cm3tuai)
Once I configured notepad++ to use 4 spaces for tab I never had this problem again
This is really helpful, thanks!
Saltstack is great for this if you don't mind the extra complexity, but it's also way more powerful.
Perhaps you should profile this? Do you know it takes a long time because it really is intensive, or is it inefficient queries or unnecessary object creations? My naive guess is that you might be making a hundred times more database hits than you need or something.
Also is IDLE open source? We should work on fixing it.
Index!
Use a real IDE
I don't use Notepad++, but does it have a pair of keyboard commands, something like shift-tab/ctrl-shift-tab, to indent highlighted blocks of code left/right (respectively) one level at a time? And if so, are you using it? And if you're using it, does Notepad++ have an option to show whitespace characters? If it has the keyboard shortcut and you're using it, it wouldn't surprise me if what's happening is that it's using a different style of tab-indent than you're using in the rest of your code.
If you're already used to Visual Studio, there is a plugin called [Python Tools for Visual Studio (PVTS)](http://pytools.codeplex.com/) which lets you code Python in VS and use all the fancy debug/IntelliSense/refactoring/etc. features that VS has. http://pytools.codeplex.com/ Others mention [PyCharm](https://www.jetbrains.com/pycharm/) - thats a good one but if you already know VS from your C++ time, then try out PTVS. My personal favorite IDE is [Spyder](https://code.google.com/p/spyderlib/), but it's better for small, few-file scripts and projects. Sadly, it just doesn't have the refactoring features needed for working on large projects. But it is open source, and pure python, so that's cool.
Of course IDLE is open source! It is part of the core Python codebase and is distributed with most Python versions on python.org. The work to improve IDLE is ongoing, and has recently increased in pace, due in large to a Google Summer of Code participant who worked on many major issues during this past summer. If you're interested in helping to improve IDLE, feel free to search for existing issues and bugs on bugs.python.org. [Here are all open issues related to IDLE, sorted in reverse chronological order based on latest activity](http://bugs.python.org/issue?%40ignore=file%3Acontent&amp;%40columns=title&amp;%40columns=id&amp;%40columns=activity&amp;%40sort=activity&amp;components=6&amp;status=1&amp;%40columns=status&amp;%40sortdir=on&amp;%40action=search).
There is the official [docs about extending Sphinx][1]. Although it is a very good starting point, you practically need to know about APIs about docsutils as a library since Sphinx internally is built on top of it. Read [PEP 258][2] and [docutils API reference material][3]. Lastly you also need examples to read. The [sphinx-contrib][4] repository would help. [1]: http://sphinx-doc.org/extdev/index.html [2]: https://www.python.org/dev/peps/pep-0258/ [3]: http://docutils.sourceforge.net/docs/index.html#api-api-reference-material-for-client-developers [4]: https://bitbucket.org/birkenfeld/sphinx-contrib
&gt; Don't indent empty lines. Don't end a line with any white space. These are irrelevant. Your editor should allow you to visualise whitespace, (`:set list` in vim) so you can see what's gone wrong. [This mess](http://i.imgur.com/VI78EgT.png) runs fine.
I use Notepad++ for Python and I use tabs. I run Python from the Windows command prompt rather than through IDLE. I have never had any problems with indentation.
Have you tried Geany? It's basically Notepad++ with a couple extra bells, but it's open source and cross-platform. Ever since I switched to Geany as my default editor in Linux, I stopped using Notepad++ when I'm in Windows. And you can just hit F5 and it'll execute code (I've never tried in Windows, though, so maybe some extra work there) But, aside from switching IDE/editors, looks like there's good answers in here. Fix your tab so that it does 4 spaces rather than a tab.
Have you ever thought about using Sublime? Its made on a python core and I use it for web development on PHP and I love it indentation has never been an issue at all. Its highly customizable. 
&gt; Notepad++ has a great plugin called "NppExec" that can run Python code without ever leaving the Notepad++ interface. You have no idea how much time this saved me, thanks!
You could take a look at geany which is a pretty nice editor
Yeah, not to start a flamewar, but it's almost 2015, I didn't realize people were still using Notepad++ Also with the SublimeREPL package you don't even need IDLE.
I think you should start with very simple functions, like asking for input and doing simple math with the input. A simple game would be a great end goal of a course! Something like Snake would be great, but it might be a bit hard to learn for 13 year olds.
Although I don't see myself using anything other than vim in the forseeable future, I like the concept of "no open files in dirty state". Is anyone using vim this way?
/u/AeroNotix was unnecessarily rude, but if you'd like to try on a larger text document I like using something from [project gutenberg](http://gutenberg.org) (the *Complete Works of Shakespeare* is about 5MB of plaintext once you remove the header/footer).
I think by the end of the year a text-based version of Tic-Tac-Toe (or similar game) would be doable.
You don't need IDLE with Notepad++ either. NppExec.
Simply put python your_script.py &amp; Will make your script run in the background. Please notice the **&amp;** after your_script.py.
What ever you end up doing... Make sure you get some PEP8 in there to enforce some good coding standards into them at the beginning! :) 
The thing that convinced me that programming was cool, was a piece of code that could en/decrypt some text using the caesar cipher.
Good reference, I've trimmed all Gutenberg info from the complete Shakespeare set (5.2MB now) and my script runs in [5.502,5.570,5.554] seconds. Uploaded output [here](https://gist.github.com/515e01458a561fa5c46b) if anybody's interested.
Lambdas work ok for most purposes, and you often want named functions anyway to make the code debuggable. One way you can write fluent style in Python is to have the arguments on separate lines: # Get all distinct key up events from the input and only fire if long enough and distinct query = self.subject.select( lambda x: x["term"] ).filter( lambda text: len(text) &gt; 2 # Only if the text is longer than 2 characters ).throttle( 0.750, # Pause for 750ms scheduler=scheduler ).distinct_until_changed() # Only if the value has changed
If there's budget, have them control robots, which if possible, can fight. Lego mindstorms, maybe? There are probably frameworks to have robots fight on screen. Finally, websites and apps. Maybe a homebrew encryption app, or anonymous notepassing app, or ask your friend out app. Probably the kids themselves can generate ideas in this area, and you can help them flesh out the steps to get there, and learn the bits and pieces needed.
Depending on the amount of interest and cleverness of your kids, I realy suggest to make sure you have several options to let them choose from. Not only varying in subject, but perhaps also in complexity. This will make it interesting for everyone in the class. I don't know your situation but some kids are visually oriented, others might like abstract or text based things. Some kids are really smart others may struggle with the simplest of programming concepts. It's too limiting (IMO) to have just one or two options for them, given the myriad of things you can do with a computer! IMO it should somehow show them what broad range of things one can do and let them pick something that they like For instance: - a rather trivial game (rock paper scissors) - a more complex game (tic tac toe or hangman) - rather simple graphics with turtle - more complex graphics - perhaps something with sound? (although in a class this could be problematic) Just thinking back at the time when I was young and there was a "computer" class in my school which was utterly boring and useless for me and a few other kids in the class who were already hacking away at home in assembler on a commodore-64. It would be a shame to not have something interesting to do for everyone !
This one fixed the issue for me on Ubuntu 14.04 with OpenJDK
As many others have stated, at that young age you will really need to be able to convince them that programming is *cool*. So, how about writing a module for easy "clickXY()" controls for automating the mouse? With that, you could teach them things like automating some really simple web-based games. Of course, this is a fairly advanced project, so you've got to do a lot of preparation to make it simple enough, and so on, but that would definitely capture their attention.
Find the option to show whitespace in your ide. Make sure the tab indicator is different from the space one.. Then try and figure out what keys are trying to change it. E G. Backspace
PyCharm just came out with a Educational Edition, I'd check that out. Plus Atom is awesome for Python. Both are multi-platform.
It's perfect. If you are comfortable with it, use it. 
Check out SciTE instead. It's based upon the same engine as Notepad++, but works so much better. There isn't a massive distance between every line of text and you can run things directly in it by pressing f5 (so, no alt-tabbing to a command window to actually run the code).
(Unimplemented) ideas are a dime a dozen, but I'm not going to let that stop me from sharing mine with you. I always thought that a fun project for kids, once they learn to code a bit, would be to supply them with an empty GUI shell simulating some common object in the real world and getting them to wire up the functionality. For example, every time I'm at the gas pump, I wonder if it might not be fun to give kids a GUI of the pump's interface and have them program the workings of it -- insert card, enter Zip Code, choose gas, etc. What happens if they try to choose the gas before they enter the Zip? What happens if they try to start the pump before they swipe the card? Will it default to the "Pay Inside" option? If not a gas pump, then maybe an ATM. Or maybe something else entirely -- some kind of music jukebox. I just worry that the GUI programming would be too hard for them. But wiring up an existing GUI might be something that they could manage and that would be fun for them.
It's certainly something I'll look at if it has to scale, at the moment I don't think the dependencies (rabbitMQ) are worth it, I don't need a message queue etc
Just want to correct something you imply in your comment with the wording &gt; It's basically Notepad++ with a couple extra bells, but it's open source and cross-platform. Notepad++ is open source.
Definitely go the games route. Making games is what got me into programming.
Notepad++ is a decent text editor. I've personally never liked the UI, and it only runs on 1/3 of the operating systems I use, so it's a no-go for me personally, but for some other people, it should be fine.
Don't you risk introducing a lot of bugs in that way? Let's say you misunderstand slightly what a function does: There is the risk that you change the behavior of the whole system in a way, that makes bugs even harder to track.
Maybe try to incorporate some component of competition/score between the students, and the student's programs. So, they get points for "solving a problem", but then, also show them that some programs take longer to run than others. 
Something that imitates the apps they are currently using. I recently taught a class at that age how to do a simple chat server. The fact that it was something they found useful made it very interesting to them.
Games. See http://ProgramArcadeGames.com That's my attempted recreation of what got me into programming. 
urllib, being able to extract REAL information from the web was when I first thought 'ok this is awesome.' after that I would recommend JSON. 
You probably don't want to cd to their Python directory. For example, if the project is importing from a relative path to the main script, then this would cause issues because the working directory is no longer the directory of the script. Instead, it's much better and easier (in my opinion, at least) to simply use `C:\PythonXX\python.exe "$(FULL_CURRENT_PATH)"`.
I believe you need postgreSQL's bin folder in your PATH. Edit: I downvoted this. This isn't the place to ask this.
Emacs! #EditorWars But seriously after spending a year or so in n++ and starting to use emacs it's a godsend. Code completion, syntax checking, snippets, etc, etc... Sure there is a learning curve but nothing too bad. Other legit options (vim, sublime, atom)
Honestly, when I was 13 I thought the idea of hacking was about the coolest thing ever. If there's a way to teach them how to crack other systems (ones you've set up to be vulnerable) in a way that will make them learn about their own security rather than create monsters then I think that might be quite engaging. You will know your community best whether something like that might be a PR problem or likely to get you fired, in which case you would obviously want to avoid!
Notepad++ has the best autocompletion of any text editor I've found for Python. I use sublime. Spent a lot of effort trying to get autocomplete working, then a coworker showed me her code in Notepad++ and I was amazed. I'd love to get the internal engine of Notepad++ code completion into sublime. 
The kids do love to ask me and the guest speakers we've had "can you hack?" They want to pirate multiplayer console games and cheat at them. But they are also very impressed when I use LanSchool to blank their screens during lecture, etc.
Robots are a huge interest for kids. Along the same lines a small CNC machine or RepRap can draw the interest of many 13 year olds. The thing with CNC machines is that the technology invoked is diverse, so you don't have the problem of only a few students interested in the programming. Design work needs to be done for example. In the end there are many opportunities to learn about computers that aren't directly programming related. Now before you start to think that a CNC machine is massively expensive, realize that a RepRap and even some CNC routers can be had for the price of a good PC. You can accomplish the same with Robots, however there is a significant interest with kids when it comes to making things. Another option is to get a micro controller board with Python built in. This would allow for experiencing a bit of low level I/O at a low cost. Blinking the lights so to speak. Unfortunately when you speak about teaching computers to 13 year olds and programming you really have two different subjects here. My big fear is that you might not be qualified to teach students Python programming and might end up doing more damage than good. It is easy to generate a simple app in Python but the question becomes is it a quality Pythonic app? Honestly I wouldn't try to teach these students programming until you have a set of lessons vetted by a skilled Python programmer(s). Just because Python is "easy" doesn't mean that the results of a programming effort are high quality. 
KML is just XML with some extra fluff. pyKML itself looks like it is based on lxml (see the projects front page). They also have documentation for how to read in a file [here](https://pythonhosted.org/pykml/tutorial.html#parsing-existing-kml-documents), but it doesn't look very detailed. I'm guessing once you get the root object you can manually search through the items in "root.Document.Folder.something". This is all a guess since I have never used pyKML and just looked at their documentation, but you should be able to figure it out from there.
I would really consider [Scratch](http://www.scratch.mit.edu) for this
Hack all the stoplights in my town. Change my grades. Make war impossible. Probably in that order.
When I was 13 I started programming because I wanted to "password protect my folders". Hollywood convinced me it was trivial to lock a folder down with a password. Now here I am, 16 years later, and I still don't know how to do that. And my security knowledge now tells me a password-barrier is a terrible idea. If I could go back, I'd show that kid how to encrypt a file using Python.
Don't get caught up in the bozos who will exclaim "no true programmer uses blah blah blah". It's like the vim vs emacs "debate" (waste of breath). I choose nano just to piss off the puritan idiots.
But not cross-platform, sadly. I prefer n++ to Geany because of the behavior when you select a symbol (default behavior is to highlight (not select) all other instances of the same symbol. Geany has a plugin for this, but you have to clear the selection with a keystroke, which I really don't like.
A cool thing we did was to make a "instagram" like app that would make photofilters by manipulating pixels in photo. Was pretty cool
Came here to say that I use PyCharm because npp drove me nuts with the same issue OP has. Haven't looked back. For everything too small to load PyCharm for, I use notepad2. What is Atom? 
Fair enough. My experiences with being shut down were a long time ago (pre DO) Still, once bitten, twice shy.
Fluent things is usually usefull when you don't have keyword arguments as in java language no such usefull in python
Robots. Just... robots.
You could just queue up another call of your check function at the end. Add something like: root.after(1000, check) to the end of your check() function. It will then call check every 1000ms from there on out after it has been called once. I think that will do what you want in a simpler way. You wouldn't need the timer. Also as for updating the label, I think it would be: Box.configure(text=temp) That should change the text of the label so add that in the check. A possibly simpler way though would be to use a StringVar. You can tell the label to just always display whatever is in the StringVar, and then when you update the StringVar the label will automagically update. If you want to know how to do that I can post more info but otherwise I think this will get you going.
Code protection is kind of hopeless no ? basically if I have your binary I can reverse engineering it.
That's why tests are so important. They guarantee that for a certain subset of input the program behaves correctly.
This is basically my strategy. I maintain one codebase, which isn't great, but isn't as bad as the example in this post. The twist is that a sizeable chunk of it was written in a mad rush by me 4 years ago. It works well as far as the end user is concerned, but some of the code is total crap in terms of elegance, clarity and consiseness compared to decent code I write now. The other twist is that I usualy don't remember why I wrote things the way that I did. Since everything works well if left alone, I follow your boy scout technique. When I have to modify code, I tend to improve it while I'm there. First I write some automated tests (if appropriate), then I make the changes, then I rerun the automated tests, if everything is OK, I do some manual testing. Sometimes I just fix small issues, sometimes I do a complete rewrite of the area. I still have very little time to spend on it, so I only rewrite if I think it'll make my life easier in the future. Tips: * When it makes sense, make use of automated testing * Use decent version control * Use a decent IDE like PyCharm - make use of its refactoring tool, VCS integration and debug tools. * Make small changes and nibble away at the problem * Consider writing "clean" wrappers for the "dirty" code, once everything is using the clean wrapper, you understand how everything works and you can replace the dirty code behind it. * Add optional logging as you go. Like most problems in life (not just software), the hardest thing is commiting to solving them and starting to solve them. Lots of problems don't require great ideas, they just require dedication and perhaps some stubborness.
I run things from hotkeys in N++ via nppexec. ctrl+alt+p runs python 2, ctrl+shift+p for python3, Ctrl+f5 opens cmd at the files directory, ctrl+alt+c while highlighting a "def" line triggers a macro that inserts a preformatted doc string with all the arguments laid out... An editor is a tool, and all tools need sharpened.
I find it frustrating that there are missing sections of documentation in Sphinx and docutils. For example, how do I find out what a node is? http://sphinx-doc.org/extdev/markupapi.html#roles is empty.
Why don'y you show them [Scratch](http://scratch.mit.edu) at first? It is a really cool way to learn a pseudocode and will immensely help them to understand logic behind programming.
seems to work well in the fabfile, but not when I import fabric to mystuff and all it?!
I found this video, should be helpful: http://pyvideo.org/video/1703/better-documentation-through-automation-creating
In what way is it failing? Do you have a traceback?
I grew up with computers as a kid in the 80's and GWbasic and QBasic made math classes fun to me. I think teaching Python is a perfect place to start for 13 year olds. I would suggest that you look into integration with thing other than just a screen or a console. Forinstance look at the Rasbperry Pi, or Minecraft. Also take a look at the [blink(1)](http://blink1.thingm.com). It is a simple USB LED that you can control with software. The great thing about it how easy it is to make small useful software like a light that glows based on tweets or some system property. Good luck and if you post any material on GitHub I hope you share it on this subreddit. 
I've never heard of salt using RabbitMQ? It does transport over ZeroMQ / msgpack (quite a bit lighter).
sorry I meant 0MQ.
I would have loved to see something like this: http://zulko.github.io/blog/2014/09/20/vector-animations-with-python/ Another idea is to adapt one or more of the simple example games from pygame.org and let them modify it. That way they can work on something a bit more interactive than ye olde console apps.
For me, it was mod \*cough\*cheat at\*cough\* games
Having watched this, Doug explains many of the basic concepts that are a bit glossed-over in turorials and documentation. Highly recommended for anyone looking to write an extension.
Wow, that's really nice! The StringVar sounds way more interesting. I looked it up and tried to make it run, but I'm kinda stuck.. import serial import time, threading from Tkinter import * serInt = serial.Serial('COM4', 9600, timeout=60) def check(): global temp temp = serInt.read(5) #print temp threading.Timer(1, check).start() check() root = Tk() deg = StringVar() deg.set(temp) Box = Label(root, textvariable=deg) Box.pack() root.mainloop() I understand that my "check()" function renews the temp variable every 1 second. The temp value gets passed down to the deg StringVar, where it is used by the textvariable of the Label. When check() it runs a second time, it does not get passed down to the deg, because the deg is not in that loop. StringVar is a special Tkinter term, I wonder if there is a special way to get the temp value to the deg var. Once more, thank you! I'm glad you told me about the StringVar! 
I've been coding for less than a week and know probably very little. I knew basic HTML before but now i'm trying to learn python and practicing it by making a text adventure. From what i've been told though, I should stay away from emacs until I have a lot more experience, so i'm going to be doing that.
I'd honestly let them choose. Create a list of suggestions for them to choose from, but if someone wants to do something else, tell them to run it by you (to make sure it's feasable for them to do), and then let them at it.. It'll help them get more interested and more involved if they choose what they want to program.
Learning emacs can happen alongside learning any language. I wish i would have learned using emacs first actually. Without any configuration it's a great text editor with syntax highlighting. Configuration can come later [or you can steal mine](https://github.com/kpurdon)
I'm well versed in async because of my NodeJS experience, so I could do something tailored to async but I think that's a bit more esoteric. The actual app that I am building will be applicable to more people. Feel free to email me if you need help, though - michael at real python dot com. Cheers!
I would show them how to code python on a raspberry pi and then control motors, relays, LED's over the internet. You can just start with a couple of components and get them to really understand how these things work before you move to something more complex like a robot.
I was thinking you'd use it more along these lines: import serial import time, threading from Tkinter import * serInt = serial.Serial('COM4', 9600, timeout=60) def check(): deg.set(str(serInt.read(5))) threading.Timer(1, check).start() root = Tk() deg = StringVar(root) Box = Label(root, textvariable=deg) Box.pack() check() root.mainloop() You don't really need a separate temp variable. You can just use the StringVar variable. See if that works as you were expecting. Also, in addition to StringVar, there's IntVar, BooleanVar and DoubleVar for various other types of variable storage which are compatible with the Tkinter widgets. I should add, in your version the reason it doesn't work is because you are only calling deg.set() once. In the code preceding root.mainloop(). Otherwise in your check function you would update the temp variable but the StringVar never got set again. In the example code I posted, every time check is called, the StringVar is updated, and thus the label updates as well.
That is one method. Another is to install "screen": https://www.digitalocean.com/community/tutorials/how-to-install-and-use-screen-on-an-ubuntu-cloud-server Phillip.
&gt; People here seem to reckon Pydev/Eclipse is as good as it gets, but it seems really clunky to me when compared to C/C++ debuggers like GDB/LLDB/Visual Studio. I hate Pydev. It seems buggy to me. It has little to no object introspection capability and has a horrific search. I have coworkers that have used it for years and prefer it, yet they can't show me how to navigate it properly or do things that I think are basic IDE functionality. I'm use Wing IDE which is incredible. The search is great and the debugger is hands down the best I've seen. I've also tried PyCharm for a few months and while better than Pydev, I was unimpressed. There's also Python for Visual Studio that is free and I hear it's quite good. You need to try the different things out there but in my opinion, Pydev is free and it shows. &gt; Python and C stack frames please Yeah...that's harder to come by. I don't know of anything that does that. C code is swigged so I'm not sure how that would work.
Make a real program. Do you want to make a web game, something scientific? Does it even need a GUI? I avoid GUIs when I can because as soon as you make one, you suddenly need to test a lot more edge cases.
Ever use Sublime Text? Atom is similar. It's an open source text editor from github. It has tons of modules like linters and other things that can help with python/html/css/javascript/etc. It's definitely worth checking out. I love PyCharm, and IDEA from intellij(java). http://atom.io 
Hey! Thanks for pointing the errors out. I works really great now! I'll go and find some ressources about this, that are not too intermediate! Thanks for your help!
Those edits that are 'too small' to fire up the IDE are the reason I decided to learn vim. gVim will launch just as quickly as notepad for a quick edit but can go into full IDE mode with a few typed commands. And if you're in a console you can make an edit without even leaving the window. Though, it may have taken a month before I was able to make those quick edits..
When you say the apple doesn't respawn do you mean it stays in the old position or do you mean the apple is gone?
What you're trying to do is called scraping. This is opposed to getting information directly from an API — you're essentially reading the website like it was a browser, except instead of rendering and displaying it, you're dumping it into an object. There are a variety of ways to do this. [Scrapy](http://scrapy.org) is popular. In my web projects, I've rolled my own using [Requests](http://docs.python-requests.org/en/latest/) and some sort of HTML/XML parser. My preference is [Beautiful Soup](http://www.crummy.com/software/BeautifulSoup/) with [lxml](http://lxml.de). My personal preference for designing these is to have a class that contains the methods you'd be interested in: something like ESPN that has score, team, game methods. [Here's](https://github.com/alilja/ratebeer) what I wrote if that helps at all.
Maybe a hack for my favorite computer game, since a lot of kids play video games. For example: - Automatic driving for a car game - Automatic aiming for a FPS - A bot for an RPG that goes around grinding/looting You could also teach them morals at the same time, because cheating is bad, but using programming to get work done efficiently is not bad! :)
I found the problem. You are spawning the apples off screen. I added a bit of debug code so everytime it spawns an apple it reports the new position: print "Apple Position: {0}".format(self.apple_pos) return self.apple_pos Every time the apple "Disappeared" the apple's Y was at 720 which means the apple STARTS at 720 and ends at 740. You need to generate positions based on self.WIDTH-self.apple.get_width(). Here's my modified food code which has the debug support and also has the missing apple problem fixed. Also I refactored your random location generation. It was previously running tons of times until you happened to generate a random number that was a multiple of 20. Instead you can generate a random number from 0 to your max number / 20. Then multiply by 20 and you will get a multiple of 20 every time. import pygame import random import snake class Food(): def __init__(self, WIDTH, HEIGHT, x, y): self.WIDTH = WIDTH self.HEIGHT = HEIGHT self.apple_eaten = True self.apple_pos = (20, 20) self.s = snake.Snake(WIDTH, HEIGHT) self.apple = pygame.image.load("res\images\_apple.png") self.get_food_position(x, y) def update(self, x, y, game_display): self.check_if_eaten(x, y) if self.apple_eaten: self.get_food_position(x, y) self.blit_apple(game_display) def get_food_position(self, x, y): while True: self.apple_pos = (self.apple.get_width()*random.randint(0, (self.WIDTH-self.apple.get_width())/self.apple.get_width()), self.apple.get_height()*random.randint(0, (self.HEIGHT-self.apple.get_height())/self.apple.get_height())) apple_in_snake = False for i in range(0, len(x)-1): if x[i]-20 &lt;= self.apple_pos[0] and x[i]+20 &gt;= self.apple_pos[0] and y[i]-20 &lt;= self.apple_pos[1] and y[i]+20 &gt;= self.apple_pos[1]: apple_in_snake = True print("APPLE IN SNAKE!") break if not apple_in_snake: break print "Apple Position: {0}".format(self.apple_pos) return self.apple_pos def check_if_eaten(self, x, y): if x[0] &lt;= self.apple_pos[0] and x[0] &gt;= self.apple_pos[0] and y[0] &lt;= self.apple_pos[1] and y[0] &gt;= self.apple_pos[1]: self.apple_eaten = True else: self.apple_eaten = False def blit_apple(self, game_display): game_display.blit(self.apple, self.apple_pos) 
There's also a plugin called PyNPP which lets you run python without any initial setup. It's what I use.
Build an interactive online multiplayer game of X, where X could be any number of board games. checkers, connect 4, battleship, sorry, monopoly, etc...
Sad to see the statistics showing adoption that low. What significant/important sites run Python 3 in production? Apparently [python.org requires Python 3.3](https://github.com/python/pythondotorg), but are there any other large or well known sites which also run on Python 3?
Definitely games and cryptography. That's why I wrote these free programming books: http://inventwithpython.com * Invent Your Own Computer Games with Python * Making Games with Python &amp; Pygame * Hacking Secret Ciphers with Python &amp; Pygame
What help do you need with those? Where's the code of your attempt at solving them?
Another annoying thing with cffi is that installing a package as root and not importing it at least once will make it unimportable for other users since it can't write the compiled module into the package dir... 
I wrote a programming book for beginners that covers several such crypto programs (and how to break those codes). You can download it for free: [Hacking Secret Ciphers with Python](http://inventwithpython.com/hacking)
You should at least attempt your homework first.
Demos is what got me hooked. You know back-in-the-day pushing sound and graphics to the limit. Too bad it's all so easy now with SDL.
It solves the problem of running on interpreters besides CPython, and it doesn't require learning a new language, which is a huge maintainability win.
Twitch tv bot/interactive stream.
I still use it to develop support scripts at work. It's pretty handy and not too obtuse. I do wish there was... I don't want to say better but more options when it comes to documentation. If you don't "get" something as it's being taught on a tutorial there may not be an alternative. I ran into that a bit trying to use the Ttk TreeView. There are very few tutorials on it (Now that I know it fairly well I might try to put together some tutorials on it). Also I combine Tkinter with EasyGUI... which is abandoned... Even so, EasyGUI's file open, save, and pop up dialogues are just too easy not to use.
I think one of the recent winpython builds comes with Ming64. Set the distutils config file to use ming. I honestly, tried my best to actually help. But, you're wrong about this being the right place. From the side bar: &gt;news about the dynamic, interpreted, interactive, object-oriented, extensible programming language Python. If you are about to ask a question, please consider r/learnpython Nothing about your post, is "news"
You are using the input() function right now to get the keypress. If you were to take the return value from input and store it, the variable will contain whatever the user typed. So where you've got: input("Press the enter key to find out.") You could make it something like: guess = input("Type a guess and press enter key to find out") You can look at this reference for the built-in functions to Python to see how they work: https://docs.python.org/2/library/functions.html Unfortunately, there's not much information there for input(). If you check the documentation for raw_input() though, there is some information about how it works and what will be returned.
My suspicion is that python3 is popular among scientists looking to prototype a model or do some quick data analysis--and that is primarily motivated by the responses to "who is using python3 in production?" [threads](http://www.reddit.com/r/Python/comments/1r4zoq/who_is_using_python_3/)--but that companies with existing python code bases are not actively porting. I don't have much information though some I'm not too confident in my assessment, though this blog entry backs my guess where it relates to websites.
+1 for this. There is an ftp server that has a buffer overflow vuln that can be exploited with a simple python while loop. Can't remember which server but should be easy to find.
The changes described in the blog post solves that issue.
Sad to see people believing that the numbers after *3 months* of python 3 support mean... well, anything at all. (Note the "It should be noted that we only started supporting Python 3 in September of 2013" and the "21 January 2014" dateline.) I would be fascinated to see their data after a year, but this isn't it.
https://docs.python.org/2/library/multiprocessing.html
Let's try to summon Graham Dumpleton to rerun these numbers!
Post these questions to /r/learnprogramming or /r/learnpython, not this subreddit. And please read the FAQs before posting.
Autocomplete in sublime works great for me. I installed the Anaconda package which includes jedi auto-complete.
 &gt;As a self-taught programmer who now makes a living at it, I would like to temper the last part of this excellent comment with the counter-argument that perfect is often the enemy of good. I really don't disagree with this. However when in a teaching position you need to be able to guide the students especially if they hit a non productive frustration cycle. I would expect that the students will write perfect code, but the the teacher needs to be prepared to show them a better way. &gt;I learned programming by writing terribly bad QBasic programs on my own. While it taught me nothing about OOP, algorithms, etc., it taught me very valuable lessons in what I think are the core values that make someone able to learn the "good" habits later: patience, the ability to notice seemingly trivial differences in text, and above all the confidence that I can do this, that a solution exists and I can find it eventually. Having that sort of experience at 13 is valuable even if it's in BASIC without a teacher. I totally agree with this too. These are often the traits that get developed when learning on your own. However I'm not really sure how focused a computer class for thirteen year olds will be on programming. I'm thinking that the class is a more general awareness class. As such there will be bright stars in the class that really adapt well to programming, it would be very valuable to guide these students with the right amount of help. To your point spoon feeding them is the wrong approach. &gt;So to the OP I say go for it, absolutely! And make sure they figure at least some of it out on their own and realize that there are subjective style decisions involved - programming is at times a creative art. This is very important, there hardly ever is just one solution to a programming problem. &gt;Yes, having lesson plans vetted is a good idea, but sometimes letting students do things the "wrong" way first and learning first-hand why programming style matters can be beneficial. No one understands the evils of, say, global variables until a program gets into the thousands of lines and something goes wrong because of a seemingly unrelated change. I think the real challenge here is for the teacher not the students. The important thing is not to guide in the wrong direction. I actually had such an experience in high (junior) school that frankly was frustrating because I already knew more than the teacher. This was many many moons ago frankly before personal computers became widespread so I don't really blame the teacher. I just see a bit of experience and training on the teachers part as a smart bit of prep. 
Remember mad libs, where the player fills in the blanks of a story and makes it very funny? You could have them each write a small part and then collaborate in bringing them altogether. 
I gave up because it was just too complicated. I was trying to wrap and use a library on Windows. The clusterfuck of having to match my VS compiler to the one Python was compiled it. Then not being able to run "verify" and being stuck tring to use just ctypes (this is the "other" -- ABI mode you can use with cffi) was better, but I hit other walls (some VS features, #pragmas not being implemented in the C parser cffi is using), I ended up abandoning the effort.
&gt;Conclusion and the Future &gt;Looking towards the future I plan to upstream these ideas and I will blog again when they’ve been resolved inside of CFFI itself.
I had my class of 14, 15, and 16 year olds do an anonymous and optional survey. The most popular thing they wanted to do was "hacking". Even though they didn't really know what it was. Building a Python keylogger was also a high priority. I could PM the actual survey results if you want, or send you some "hacking" related lessons I made.
There is an 'engine' [PyORB](http://www.pygame.org/project-PyORPG-2831-.html). It is not exactly what you have shown. Also look at all the various projects at the [rpg](http://www.pygame.org/tags/rpg) section of pygame. 
I'll give you the "running on other interpreters" issue (although that's not an issue some of us care about since PyPy doesn't work with the scientific/data stack), but cython is not this huge alien language. Sure there is an overhead associated with learning a few new syntax rules, but the upside is that it's used in production in many robust libraries like pandas, scikit-learn, sage, kivy, not to mention scipy, so there are tons of practical examples out there. It's not for everyone, but it's a brilliant package and personally, it took little time to get adept with and the return on investment has been huge. I actually like the power to mix c and python without a strict divide between the two, but to each their own I guess. 
It seems like an expensive hobby, and one I always wanted to get into. Can you reveal an estimate of how much it cost to build the thing and a multiwii respectively? Also, are there any job prospects to it in fields where having automated a flying killer robot would be directly relevant? Aside from academia or maybe Amazon, I don't see it.
a multiwii drone is actually pretty cheap. It's cheaper than the ar drone. As for drone jobs, some are popping up, but there still aren't too many... except, as you stated, Amazon.
If you really have to use Docker, then this is fine. But if you just want "better isolation than virtualenv", you should look at using conda: http://conda.pydata.org/ You get isolation of binary libraries, without needing to deal with VMs - and it's completely cross-platform!
That's because the scientific data stack uses a lot of C. This gives the writers of said libs another option to call C code with reasonable performance. Also most of the libs you mentioned were started well before CIFF was started so I think the authors are not necessarily targeting those libs but enabling the creation of aditonal ones.
Alright thanks for the reply, and great post by the way. I'm awfully busy at the moment, but somewhere down the line, if I ever get the time, can I hit you up for some guidance regarding all this?
no problem and absolutely!
Consider: def add_friend(self, friend): add_friend takes two arguments: self and friend. Then in: s.add_friend() 's' is implicitly passes to the function as 'self', but you still need to pass in a value for 'friend'. Something like: s.add_friend(friend) It's not clear from your code what type of object 's' or 'friend' is, though. Or what snapchat.py is. 
I mostly agree with what's been said. Video games for sure, but that won't appeal to everyone. Sure I played Text Based MUDs when I was 8 years old, but not everyone did. Honestly, what got me into programming when I was young was when I found out how to make a keylogger in C++ and hide it. I thought I was gonna hack the school by running it on a teacher's computer. (Never had the balls to plug in the flash drive though) We also figured out a way using telnet to send messages back and forth in one of my graphic design classes. (Was on a separate LAN network from the rest of the school, including the teachers computer, it was dumb.) So that's another plus one for cryptography stuff. Godspeed OP, I really hope this goes well. I would have loved a Python class in my school.
 for i in range(1,len(kmer_list)): this can be changed to for i,item in enumerate(kmer_list): enumerate is very useful. After taking a close look at your function, you are looking at different at all of the possibilities within a specific domain. You can create a function that tests the condition; def testMatchingString(letter, direction, string): #Fill in basic logic Then you can use a list comprehension: testSet = [ (letter, direction) for letter in ['A','T','G','C'] for direction in [-1,1]] This creates a list of tuples of all permutations Then your complex if...elses can be turned into for set in testSet: if testSet(set[0], set[1], item): khmer_list.remove(...) break You probably cant copy and paste the above code into your program. I just wanted to let you know about some useful constructs in python that may help you in this program or the future. List comprehensions are amazingly useful. Enumerate is nice to know about. Don't be afraid to write general functions to encompass the logic, so that your main loop is readable. I would rather write more functions than more lines of code.
Thanks for your reply, I changed test.py to: from snapchat import Snapchat s = Snapchat() username = raw_input('Enter your username: ') password = raw_input('Enter your password: ') friend = raw_input('Enter friend name: ') s.login(username, password) s.add_friend(friend) And that did the trick :D
Glad I came across this article. I was looking in starting a project doing this sort of thing sometime soon. Does anyone have any experience with the (?) NLTK library for Python? I imagine many of the steps described in the article are simplified in the library. I haven't had a chance to read much yet. 
 import random while True: print "8{}D{}".format('='*random.randint(10, 30), '~'*random.randint(3, 10)
13 year old me would have wanted to make awesome games and be famous. 43 year old me wishes 13 year old me spent more time solving actual problems programatically, and spent more time on data structures. 
/r/python isn't the right place to ask. You could try asking at /r/learnpython, or at one of the webdev subreddits. Read the sidebar to get an idea about what you should be using /r/python for.
I am on of those old stubborn 2.7 people. I just like it when things work, when I dont have to google for solutions and I can focus on what my client wants. I have an irrational fear that switching to 3 means changing that.
Great work! Currently it is a pain to distribute CFFI modules, I really appreciate that you've taken the time to document how you went about this. Upstreaming some of the boilerplate code would be even cooler!
Have you taken a look at [execute](http://docs.fabfile.org/en/latest/api/core/tasks.html#fabric.tasks.execute)?
/r/python isn't the right place to ask. You could try asking at /r/learnpython. Read the sidebar to get an idea about what you should be using /r/python for.
There are almost always some books on the subject - [check amazon](http://www.amazon.com/s/ref=nb_sb_noss_1?url=search-alias%3Daps&amp;field-keywords=rest). I've recently started reading [REST in Practice: Hypermedia and Systems Architecture ](http://www.amazon.com/REST-Practice-Hypermedia-Systems-Architecture/dp/0596805829/ref=sr_1_3?ie=UTF8&amp;qid=1416208554&amp;sr=8-3&amp;keywords=rest) - and it looks very reasonable. If you have general question about REST, maybe you should try [rest subreddit](http://www.reddit.com/r/rest)?
For many applications it is obvious that this sort of text clean up is imperative for any reasonable analysis, but I am curious to know the side effects of losing some of the information. For example, when you change **luv** to *love* and **sooo happppppy** to *so happy* you lose the style of the tweet. This information may point to a 12 year old girl who is of a completely different consumer than let's say a 25 year old woman. The point being that people are particular in the language and slang thereof that they use. I wonder if anyone has studied this flavor of language processing. edit: formatting
Thank you so much for taking the time to write this, I do a lot of work with cffi and packaging has always been the one painful aspect of it, the post really helps with that :-)
In addition to consolidating the redundant logic (which needs to be step 1), you should look at your data structures. Removing an item from a list, checking a list for whether it contains an item and concatenating a letter to an existing string are all O(n) operations, but with the right data structures you could make this O(1). For the "contig" string that you are continually appending to, I would substitute a [doubly ended queue](https://docs.python.org/2/library/collections.html#collections.deque). For "kmer_list", you might be better served by using a (ordered?) set, which can supports fast removal of items and inclusion checks.
Fair enough about the other interpreters. I'd be interested to see how this scales when you have many hundreds/thousands of lines of code that you need to interface across. Cython, although it is domain specific, reads pretty nicely IMHO. This whole pass C as a string looks a little bit strange to me at the moment.
The implication of the post, whilst only vaguely stated, is that the number of deployments of a given version somehow reflects the current state of the uptake of Python 3 "This is not a good sign for Python 3 adoption". I'm calling bullshit on that, and calling bullshit on the vague implication of the blog post that deployments = takeup. The version of Python used in deployed applications reflects history, not the present. If we measured the past to understand the present then we could examine the vast deposits of coal underground and conclude that the earth must be thickly covered with forest today. We are told that "Python 2.7 dominates.". What is true is that Python 2 dominated in the past and that's why there are so many deployed applications using it. But that is the past, not the present. This unfortunate blog post spreads further the misinformation that Python 3 has no traction and that it is little used in the real world. This fuels the rubbish assertion that Python 3 is not being taken up at all. If measuring the number of deployments in any way reflects current makeup of a technology then I'm willing to bet that Perl is absolutely huge in 2014. How about we see some stats from NewRelic showing number of deployed Perl applications, along with the suggestion that based on number of deployments Perl is not a declining technology but a hugely popular one. The real question is not "what version of Python is used on all deployed Python systems", but rather "what version of Python are people using for projects currently in active development". That's a much harder thing to find real world information on. I'm no statistician and I don't think the blogger in question is either. Examining history however does not tell us what the present looks like. NewRelic is doing no favours to the Python community with its vague pseudo statistical analysis. 
Some nitpicking: testMatchingString, testSet You should use PEP8 naming convention, so: test_matching_string, test_set It is pretty much always a bad idea to use variable names which clash with built-in fuctions, which set() is. for set in testSet: 
Thankyou :) im having trouble with trying to add HTML pages to my django site :)
I am using OSX. I suppose I should have mentioned that. I think it sounds like a good habit to get used to using Terminal, my question is how? I used a `print "Hello world" ` command in a .py file to get used to executing the code in Terminal, but `vi HelloWorld.py` executes the code once, and then I have to open a new bash tab, close the first, and start over. I'm certain there's a less tedious, and arguably less stupid, way to run code as I'm writing it. 
Here's what I would want to do: - Fractals! With python's support for complex numbers, producing the [mandelbrot set](http://en.wikipedia.org/wiki/Mandelbrot_set), for example, is straightforward! Make each pixel a point in the complex plane between -1 and 1, and call its value k. Then calculate z = z**2 + k in a while loop until abs(z) is larger than, say, 2. Give a color to the pixel based on the number of times it looped, or black if it "never" got larger than 2. - [N-body problems](http://parlab.eecs.berkeley.edu/wiki/patterns/n-body_methods#examples) like simulating the solar system, or simulating a lot of bouncing and colliding balls. Compare the naive approach (lists of x positions, y positions, masses, speeds, etc.) with the object-oriented approach. - Simulating a [double pendulum](http://en.wikipedia.org/wiki/Double_pendulum). - Drawing and exploring the [lorentz attractor](http://en.wikipedia.org/wiki/Lorenz_system) or the [logistic map](http://en.wikipedia.org/wiki/Bifurcation_diagram). - Drawing and exploring [L-systems](http://en.wikipedia.org/wiki/L-system) The nice thing about most of this stuff is that you don't need to understand how the core equation works or what it does, you just need to understand what to put in and what to do with the result. **EDIT:** more: - Simulating cellular automata, like [Game of Life](http://en.wikipedia.org/wiki/Conway's_Game_of_Life), [rule 30](http://en.wikipedia.org/wiki/Rule_30), etc. - Drawing [bezier curves](http://vimeo.com/106757336) - Making a clone of the classic ["starfield" screen saver](http://codentronix.com/2011/05/28/3d-starfield-made-using-python-and-pygame/). Add directional steering with the mouse pointer, star trek warp effect, etc. **EDIT 2:** Add links and small corrections.
`vi HelloWorld.py` won't run your code, it'll open it in the vi (or vim) editor. There are plenty of professional-level IDEs that can run your code via a button click: Eclipse/PyDev, PyCharm, etc. But in my opinion by far the best thing is to stick with a basic text editor like vim, or Sublime, or whatever you like, and then just have a separate terminal window to run the code in: once you've typed `python hello_world.py` the first time, running it again is just a matter of up-arrow enter.
This isn't so much about learning Python as about achieving a specific goal using python. My understanding is that the latter is acceptable, here.
I think that is a fair point. However, it might be better to code the information you are looking for (e.g. age) as a separate variable. That way you don't lose the information and can work on the cleaner data as well
 #!/usr/bin/env python # encoding: utf-8 """ @ Make Everything Simple @ Just read the Microphone, and display the wave timing. @ By yinkeedai """ from pyqtgraph.Qt import QtGui, QtCore import pyqtgraph as pg import numpy as np import pyaudio app = QtGui.QApplication([]) win = pg.GraphicsWindow(title="Xmusic power by dejavu") pl = win.addPlot(title="utest show") wave_curve = pl.plot(pen=(0,255,0)) pl.setYRange(-10000, 10000, padding=None) def updateview(): global pl, wave_curve, spend_time, audio_data, stream, ptr stream.start_stream() string_data = stream.read(DEFAULT_NUM_SAMPLES) stream.stop_stream() audio_data = np.fromstring(string_data, dtype=np.short) spend_time = np.arange(0, len(audio_data))*(1.0/DEFAULT_SAMPLING_RATE) wave_curve.setData(spend_time, audio_data) timer = QtCore.QTimer() timer.timeout.connect(updateview) DEFAULT_NUM_SAMPLES = 2000 DEFAULT_SAMPLING_RATE = 8000 DEFAULT_NUM_CHANNEL = 1 DEFAULT_FORMAT= pyaudio.paInt16 micp = pyaudio.PyAudio() stream = micp.open(format=DEFAULT_FORMAT, channels=DEFAULT_NUM_CHANNEL, rate=DEFAULT_SAMPLING_RATE, input=True, frames_per_buffer=DEFAULT_NUM_SAMPLES) timer.start(100) # start the Qt event loop if __name__ == '__main__': import sys if (sys.flags.interactive != 1) or not hasattr(QtCore, 'PYQT_VERSION'): QtGui.QApplication.instance().exec_() 
OP question is ok. It is very related to Python since it talks about Django.
I've found [Web API Design](http://apigee.com/about/resources/ebooks/web-api-design) to be simple and clear. It comes form apigee which arguably have some experience with REST APIs and it's FREE :)
There is a DRF blog post with a "[required reading](http://www.django-rest-framework.org/topics/rest-hypermedia-hateoas)" list for designing Hypermedia API's which is another term for a truly RESTful API. 
same here, Qbasic buddies ...
I use python 2. To be honest, if my OS (Mac) had python 3 as `/usr/bin/python`, I'd use that. The fact I have to explicitly say `python3` makes me nervous, because I hate to deviate from the norm when it comes to platform.
Ooops, didn't realise this was a blog post from January 2014. Would be nice to see updated numbers.
I don't really think there is anything major that is unique to python that is not applicable in other languages, unless you count obvious stuff like e.g. modules in the python standard library etc, which might not have an exact counterpart in any other language. Python isn't really fundamentally very different from most of the other language in its local space, unlike e.g. haskell, agda, rust, erlang et al, which may have some completely new and crazy concepts that don't really exist in any other language. Is it a bad thing to have such things? No, definitely not. One has to individually judge whether those things are good or not, or whether they are worth using/knowing. For instance erlang has the binary matching syntax and binary building comprehensions (like list comprehensions but for binary data), and while they might take an hour or two of reading about them to fully master them, I think they are a fantastic tool. On the other hand, there are also quite a few features in various languages that people consider to be best to leave alone, e.g. C++ does have quite a few controversial features that are banned from many codebases. But I think one really has to look at it on a case-by-case basis. I also don't think there is a huge danger in being "too specialized", particularly since knowing a language is not even a very specialized "thing" in general. If you specialize in simulating emergent flow behaviour in popcorn-popping using python, then you may have to worry.
Vim is a text editor, not a Python interpreter. If you want to invoke the Python interpreter from a Unix command line you just call it like any other programming: python my_python_script.py
Other languages (e.g. various lisps) do have the same features regarding function arguments (and sometimes more.) The shell too, of course. I guess docstrings are a pretty unique feature, though.
The best damn package system outside of R.
Which one?
Pip, but what I meant is that Python is very extensible.
look at google c++ guidelines, IIRC they explicitly forbids some features.
Nothing really. Python is a mishmash of previously explored ideas, redone and revised. It's pretty clever and its main strength is the community and the standard library. &gt; Also, it got me thinking... is this really a bad thing? I don't think there is anything wrong with learning the ins and outs of the tools you're using... but how do you decide you're too far in? Too specialized? Is there such a point for Python? You can learn a lot of stuff about the python internals. It's cool and challenging, but the question is: does it matter? if you code in django, and implement mostly at the high level, your time is best invested in following the django community, but if you are a guy like me, which has to deal with C interface, optimization of the code, smart tricks to improve the design, parallelism, memory allocation strategy, then of course it pays off to know how the python garbage collection works, the opcodes, the pickle format, how python interacts with the Linux vs Windows API, etc. Programming always boils down to accepting something as granted and specialize in what you need.
Yeah, features like exceptions are banned from codebases, checkout googles guidelines for c++
One thing instantly comes to mind coroutines. I was writing a bot that consumed data from one api and pushed it to another, earlier I was using threads bit moving to coroutines simplified the code and no more Ctrl-c problems. They are quite good for concurrency. (Not parallelism)
Python is not original or dogmatic, it took from many languages from lisp to c. If something should be defining python, it is its flexibility : a lot was added to the language and it was done *very* intelligently. Not many languages evolve, and those who do, rarely do it as gracefully.
Not because Google thinks that feature is bad, but because their current codebase can't handle exceptions. From the guidelines: "Given that Google's existing code is not exception-tolerant, the costs of using exceptions are somewhat greater than the costs in a new project. The conversion process would be slow and error-prone. We don't believe that the available alternatives to exceptions, such as error codes and assertions, introduce a significant burden. Our advice against using exceptions is not predicated on philosophical or moral grounds, but practical ones." A case can be made against blindly following Google's coding guidelines if you don't actually work for Google.
Common Lisp has docstring. 
Ah, I didn't remember the context. But I've seen many places avoid exceptions especially in constructors because it might cause memory leaks. 
At the risk of starting a holy war, rubygems is a much better packaging system. pip is an improvement over easy_install. The packaging system with the most comprehensive library is Perl's CPAN.
If you want to write test without side effects, write code without side effects. 
One thing Python is somewhat unique in, at least in comparison to Java, is that you can expose variables of objects with confidence. E.g. you can simply do: class Point(object): def __init__(self, x, y): self.x = x self.y = y At this point, any program can modify x &amp; y. If you later discover that this is dangerous, simply convert them into properties: @property def x(self): return x @x.setter def x(self, value): if value &lt; 42: raise ValueError('We will have none of that') self.x = value The import system works like this as well. It allows you to split up one module into several without needing to change any dependent code. E.g. `import foo` will look in: * `./foo.py` * `./foo/__init__.py` In short, Python in particular encourages agile practices very strongly.
I'm not aware of any quirks about Python that are "not exactly applicable in other languages". What does that actually mean? Its just programming. When you're programming in Python you're still programming. Its not some special, different kind of programming. Its the ordinary kind that you do in every language. 
exceptions can introduce memory leaks if the class raising the exception is implemented incorrectly. if the class appropriately frees memory it was reserving on raising the exception it should be fine. i've sometimes seen C++ devs advocate not raising exceptions in a procedure call context where de-allocation/cleanup stuff will only occur of the procedure completes all the way down to its ending return statement. that's a coding style issue really, and not actually a flaw related to the implementation of exceptions. 
properties is not unique to python, it's just not present in java, IIRC, C# has properties too.
The holy trinity: numpy, scipy, matplotlib.
I agree. To clarify what you said, the exact same thing can be said of routines that return error codes. 
&gt; “The biggest question was which programming language to use. Craig wanted to use C. Urs preferred C++. Urs prevailed, but he agreed to restrict Google coders "from using the bad parts of C++." &gt; "What are the bad parts of C++?" I once asked Craig. &gt; "Most of it," he said with a straight face.” Excerpt From: Edwards, Douglas. “I'm Feeling Lucky: The Confessions of Google Employee Number 59.” “Craig” is Craig Silverstein, first Google employee, and “Urs” is Urs Hölzle, employee #8 and Google's head of engineering.
Simple really. C++ has so many concepts and its so flexible its nearly impossible to know them all in depth. So companies decide which features to use and which ones to avoid. This helps with code reviews and consistency.
Even a simple stream cipher is good for that.
Yes, and that's more syntactic sugar than a real distinct feature IMO. Haxe have them too -in both cases, it compiles to functions similar to the ones you write by hand in java.
There are lisps that can catch all extra keyword arguments like **kwargs does? Do you have an example?
Python doesn't really reinvent the wheel, it just has a lot of nice things and syntactic sugar to make it extremely programmer friendly while sacrificing performance. Python is the best language for rapid prototyping and performance insensitive applications IMO.
This was true 10 years ago but CPAN doesn't really compare to pip or npm (and their respective ecosystems) anymore.
Oh yeah, I completely forgot about the c# yield/await but didn't know about the lisp ones(never saw them in clojure)
This is pretty much just syntactic sugar for getters and setters, it's extremely useful for shortening code and making it more readable. It's also something java developers have been begging for for years but it's not novel in any way.
The perl community is alive and well. CPAN has over 141K modules whereas PyPi has 51.5K modules. Not trying to rain on Python's parade, I like it too. I just pointing out that some of the hype isn't necessarily true.
Loops, iterators, generators and the like, perhaps? Most languages don't completely ban the "natural" for loop, requiring the usage of an iterator just to loop through a set of integers. Python's optimization of everything involving loops to completely rely on the highly-efficient generator and iterator constructs is fairly unusual - most other languages have lazy looping and list operations, but for most of them the lazy operations are not usually the right way to go.
Lol. Funny. Does anyone know of a place where there's seriousl discussion about job automation? A lot of my job could be automated (it help desk), would be cool to share ideas somewhere. 
My favorite part of numpy/scipy is that you have the equivalent of FORTRAN style array slicing. Except it's row major in Python and indices start at 0. I can't think of another language with an easy way to replicate this.
should be: while 10 &lt; datetime.now().hour &lt; 15: ...
Ah your right! Thank you for the code review ;)
A "natural" for loop is honestly just a while loop in disguise though, which python does have.
/r/automate
you're welcome does Dave have an Auto-Kazanz script?
You can keep the original value to reference. Later on you may want to reprocess with more sophisticated tools to better capture sentiment.
Having used the GSG, I can say with certainty that it effectively turns C++ into a subset of Go.
Additionally it helps easing new developers into your codebase and get them up to speed.
R has it, but you said *programming language*, so... :)
Almost nothing. In fact, I would argue that Python is a broad intersection of many language features present elsewhere; possibly one of the broadest possible sets, actually. I think the .NET family languages (e.g. C#) and D come the closest to matching it. If Python added Checked Exceptions, static typing, LINQ, and a smattering of other things, it could well become the superset of everything.
Slightly related, for requests there's also very nice mock library called responses; https://github.com/dropbox/responses
Ruby has a package manager for its package manager...
The difference that /u/dbakker point's out is that while _initially_ having the Java variable public is the same as Python, what if you later decide you need to do something in the getter/setter besides simply return the value? In Java, that's generally the reason for using boilerplate getters/setters when they're just exposing a private value - if you later need to add logic to the get/set, you can do so without going through your whole codebase (or worse, making a breaking API change if your code is a library others depend on) by just modifying the body of the getX()/setX() function. Contrast this with Python where you can convert a simple field of an object into a property with the decorator syntax to allow you to add more logic to the getter/setter while external code can still use it as if it were a field on the object.
here it answers why https://www.youtube.com/watch?v=NOCElcMcFik
While I agree that Python owes a lot of its features to other languages, some are a good bit more rare than others. Metaclasses are such a feature that comes to mind; I'm not aware of other languages that have them, but I wouldn't be surprised if a few do. Also, I think the concept that a class is an executable statement rather than a definition is probably one of the less commonly available features in other languages, but I would expect other dynamic languages would support that concept. Is there anything wrong with a language with not-readily-transferable concepts? It depends on your point of view I guess. Paul Graham wrote an interesting essay on a related topic, where he discussed language power as being on a continuum and becoming exposed to more powerful languages has a beneficial effect on your use of less powerful languages. That essay has always resonated with me, and perhaps it might influence you as well: http://www.paulgraham.com/avg.html
While we're here, please donate to PyPy STM, it's purely a crowdfunded effort http://pypy.org/tmdonate2.html
You are correct. Thanks for pointing this out. My reading comprehension is crap without coffee ;)
Please give details. 
Couldn't the same be said of PyPi? This is a byproduct of having an open ecosystem. It isn't indicative about the quality of the modules in general or wether or not all of desired topics are covered.
As far as I've seen, it's less of an issue on PyPi. I won't speculate on *why* this is the case. I'm merely pointing out that there are a large number of CPAN modules' who's namespaces are longer than their actual working code.
I'll give the detail so you don't have to hate yourself so much. The core tradeoff in Perl 5 is that arguments are not named by default; the programmer gets to choose whether they want to use them directly as a list, splice part of them out, use them as an argument list and so on. Cons: obviously, it can feel redundant. Pros: programming flexibility, runtime speed. Examples of basic use cases: # named arguments sub f1 { my $arg1 = shift; # common syntax #1 my ($arg2, $arg3) = @_; # common syntax #2 ... } # gobble-the-rest sub f2 { my ($arg1, $arg2, @rest) = @_; ... } # keywords sub f3 { my ($arg1, %args) = @_; $args{foo} or $args{bar}; } More tricky stuff can be done by operating on the `@_` argument list at runtime. **Can**, not **should**. Ninja (hopefully) edit: there's now a [simplified syntax](http://perldoc.perl.org/perlsub.html#Signatures) for all of the simple cases that cuts down on the boilerplate. Marked experimental for now, I hope it sticks. 
Nah, thats different than pythons coroutine's, unless you always use them with channels
&gt; [RVM](http://rvm.io/) is a command-line tool which allows you to easily install, manage, and work with multiple ruby environments from interpreters to sets of gems. It's overly simplistic for me to call it a package manager for the package manager...but that's how it's generally used in practice.
import antigravity
I enjoyed the "REST API Design Rulebook" too: http://shop.oreilly.com/product/0636920021575.do and RESTFul Web Apis someone else mentioned. Tip: I found it immensely useful to create a command-line program to easily access the API, so you can run "tool get your/api" and do the call with nice output. Feel free to use anything (BSD license) from this location: https://pypi.python.org/pypi/decipher Other books on my todo list: "SOA with Rest", "APIs: a strategy guide", "REST IN practice", "Service Design Patterns: Fundamental design solutions". Also after spending some time thinking about REST APIs, I've gotten quite a few other architectural ideas, so I'd recommend thinking about your own system's access patterns rather than the REST API being just a bolt on for clients. For more architectural ideas, you might want to give "Enterprise Integration Patterns" a read. 
Does anyone know why the blender "never happen" ? 
I was about to make the same joke about Matlab. \*brofist\*
I disagree. The sidebar says that one should *consider* /r/learnpython, but clearly the question being asked here is beyond the scope of *learning* python. It has to do with RESTful API construction *in* Python. That's not a beginner topic, and historically speaking, these kinds of questions have been welcomed here. &gt;Besides, it's not python-specific at all. The question is about Django...
Why did you lisp in that one revision? :S
Cool though this may be, Haskell programmers strike me as purists, so I wonder how happy they would be about running Python code in a Haskell application ;) Kidding aside, this is very cool!
Have you tried running code through Powershell instead? 
Games 100%. I just wish that there was a good alternative to PyGame. Something less like pyglet and more like Löve for Lua.
rvm (and rbenv) is to ruby what pyenv is to python. 
That's what I started with at first, just so I knew how to do it, but it is time consuming to do it a lot using powershell because every time I have to set the path first.
This is quite an interesting use. It had never occurred to me. I will definitely play around with it. The 'never happen' w.r.t Blender is very sad indeed.
Maybe its awkward duck typing which is somewhat between Smalltalk and Ruby.
Context: https://gist.github.com/Kazanz/bf3a78fc72003d20faac/edeb8bbff3a9b8dbab19bab50e3fbc69c4861c6d#file-auto-dave-L8 - time.thleep(5) + time.sleep(5)
The number one feature of Python which isn't mentioned in the fine comments so far is **community**. If we compare Python with other languages solely by its technical merit then python is yet another scripting language (seriously). It does has it bright spots and some unique features, but really nothing that can't be done by the other scripting languages. However, if we look at Python + it's community then Python becomes a force to be reckoned with. I think this combination is what set Python apart from other languages. Is python always the right tool for the job? No, but odds are great that it will be good enough or you'll learn concepts that you could apply using a more appropriate language after you fleshed out your idea using REPL. 
That subreddit is really mostly gadget driven. Not saying that it isn't really cool, it just focuses on stuff like automating farming with robots. I think OP is really looking for resources about using Python to automate repetitive office-type tasks. 
It looks Awesome! I really like the detailed examples.
yeah, exactly. that's what i mean by a class being implemented correctly. 
I just opened idle and pasted it in, but I don't have urllib2. I am using python 3. ???
It's considered idiomatic python to use dictionaries, while one would use "C struct" in statically typed languages. d = {"age":10, "name": "John", "age"} # Python vs struct target { int age; char *name }; // C or Data Target = Target Int String -- Haskell Also, in Python, class instance attributes are implemented using dictionary. This theoretically could affect time complexity of the algorithms, but in practice time is O(1). source: https://wiki.python.org/moin/TimeComplexity
I think you're already here. I use Python heavily to automate things in my job, and it's widely regarded as one of the strongest languages for just this very task. This is one of the best places to discuss anything Python related in the world. Start a thread, make it interesting, and you'll get a lot of discussion.
He might write one when he comes back from vacation!
Very true, but sometimes you just got to have side effects in your code to have functionality. Abstracting out every side effect from your code will make for an aweful lot of boiler plate and wrapper code. In (very simple) the example I gave you can't keep out the *side effect* of sending a request to the third party REST service. But during testing you should get rid of that side effect to make testing, good testing, possible. 
Nice, didn't know about that one :) 
Try simply changing urllib2 to urllib
Did you put your system into production or just play low key? I was working in this build chain stuff where the process was tedious with many manual operations. When I understood the process, it was trivial to automate most of the parts with python. After that I would just trigger the scripts and verify that everything went right. There are more complex systems like Ant, Jenkins, Make etc. which can automate a whole lot more of the processes. But due to organization politics and such issues there probably are a lot of "button pushers" who trigger the final process while reading reddit rest of the day. And if someone asks "hey man I'm breaking my back here everyday doing this stuff"
It's about designing RESTful APIs. There isnt a specific Django way to do that.
Depending on the project, some or all of these features may be banned for instance: - operator overloading - multiple inheritance - templates - RTTI - exceptions - STL
There's also [click](https://pypi.python.org/pypi/click/3.3), but personally I prefer argparse, simply because it's in the stdlib.
me likes [argh](https://pythonhosted.org/argh/tutorial.html)
&gt; def foo(args, *kwargs) javascript: arguments http://javascriptweblog.wordpress.com/2011/01/18/javascripts-arguments-object-and-beyond/ function example() { return arguments; } var result = example("a", "b", "c"); //result is now ["a", "b", "c"] &gt; Access to python shell while debugging code Javascript, every browser in the world has a debugger with autocomplete. if you're using chrome right now right click and select "Inspect Element" click on the console tab or press escape and start trying ideas. (its a REPL) Remember you can also do the same thing in Nodejs using node-debug which is a pretty solid debugger without having to live in the console. 
When I worked tech support in college I wrote a script that would check the voicemail inbox and notify me of new messages (the cheapest level of tech support would leave messages and we'd call back - even if we weren't doing anything. It was a pretty stupid way to do it). I had it checking every ten seconds. I was praised for my hard work - while I was at work the average time to call back plummeted. I never shared the script with management because it was such a toxic place to work that I could more easily imagine being reprimanded for it than being rewarded for it. And as could be predicted, that division of that company no longer exists.
I feel like im becoming "Praise nodejs" in this thread. Nodejs does packaging considerably better than python. 1) you never need to open a config file to set it up or update deps 2) it doesnt need a whole copy of the python binary in order to run npm init (it will then ask you a bunch of questions and create a file for you) this will create a package.json file which will have all youre dependency information stored in there. npm install -save &lt;package&gt; this will download the package into the node_module sub-directory in the local directory you are currently in. pip instead will automatically make all download GLOBAL which makes keeping track of everything using a combination of requirements.txt and virtualenv to make it local. with NPM you can install things globally (however, it is discouraged) by using the -g flag when you install. 
Many of a language's strengths help you appreciate certain constructs. For example, keyword arguments, certainly not exclusive or originally from Python, cover most use cases of the Builder pattern in e.g Java. Once you appreciate that, then anywhere else you encounter it - C# 4.0+, Swift, etc - you can immediately utilize its full potential. Similar examples include list comprehensions, generators, and runtime shenanigans like the __getattr__ magic method 
When I was still doing accounting to get through college, I turned a cost/price sheet in excel into an automated system to do cost analysis and determine new prices, using Visual Basic (ugh). At first I was just recording a macro to do something I'd do, then inspect the visual basic it produced. I already knew programming but I had no idea about visual basic, but I wanted it confined to the excel document so the boss could see I was still working in excel and not "having fun programming". I ended up having it do everything I did in under one minute, when the job was supposed to take about 4 hours. At first they got pissed at me because they wanted a "human" to determine the costs. Honestly though, we had to double check afterwards when the salesmen looked at the prices so it didn't matter. Since I'd basically have to do shittier jobs (sorting/filing) if I didn't have to do this anymore, I wrote it up to show dialog boxes so I could check its work, determine prices "manually" and see how it was coming up with everything. They loved it, and I could still show I was working on that and didn't have to do the more manual stuff. I eventually added a secret feature to just burn through everything without opening the dialog boxes and I'd run that in the first minute and finish the job. It'd even look for statistically significant drops in price and warn me so i could look for data errors in input. This worked. I'd run it, when they came around I'd click shit and look like I'm doing stuff manually, then when I had the space to myself I'd fuck around on the internet until I spent my allotted time I had to do the job. Felt shady, but honestly I still spent a shit ton less time on it than the person previous, and I was getting paid a lot less as a student, so I guess it evened out.
I had a support job where I could work from home, but I'd have to check for new tickets constantly and handle them quickly. Otherwise I could fuck around. I opened up the dev mode in chrome and had it refresh the page by fake clicking a button (not a real refresh), then if it found certain elements in the page it'd get the ticket number and check if it had already seen it. If it hadn't, it'd open some loud obnoxious youtube video so I would stop fucking around and get to work.
I don't really see any moral dilemma in your part. If they want to keep the system inefficient because "lolhumans, keep working", it's their fault. And on top of that, why the hell are they micromanaging people so hard as to remotely or physically look at what you're doing? That's bonkers to say the least. Management is supposed to manage the overall system, not peer into what the hell is on your screen at any given moment. Just pop up 10 terminals with top, awk, sed, /dev/urand, cowsay, /dev/null and so on. That is incredibly toxic work environment I agree.
Although `webbrowser.open` (also in the stdlib) is probably a better choice unless Dave browses reddit in a very unusual way.
Javascript's `arguments` isn't even close to Python. def print_bang(*args, bang=True, **kwargs): if bang: print("!", *args, **kwargs) else: print(*args, **kwargs) print_bang(1, 2, 3, sep=":") #&gt;&gt;&gt; !:1:2:3 print_bang(1, 2, 3, sep=":", bang=False) #&gt;&gt;&gt; 1:2:3 
Yeah, you've pretty much got it. The micromanagement there was pretty terrible. To be clear, the place where I worked remote could give a shit less as long as I handled the tickets that came in. At the accounting gig I came into the office and my boss oversaw every little aspect of everyone's jobs. The general mindset was "if you aren't working, maybe we don't need you", not "if you complete the task efficiently, you're a great worker". There were some great sides to that job and it felt more like a family than a workplace, but there was also some pretty extreme micromanagement. It got me through college at least, and I eventually found an internship to do what I really love (coding) where I worked fulltime once I graduated. Changed jobs a couple times since then and everything's going great.
urllib.request.urlopen() corresponds to the old urllib2.urlopen
Fellow workers, please heed my message and do not share the secrets of efficiency with your managers. If perchance the manager is somewhat competent, he will try to Taylorize your job. That will be a net loss for you and everyone else in your company doing the same thing. Enjoy your extra moments of rest and freedom within the workplace. That will be your reward. A raise will never be.
&gt;I think OP is really looking for resources about using Python to automate repetitive office-type tasks. If he's not, I certainly am.
Please go to /r/learnpython and read the sidebar.
What you need is PYthon auto-indent and PyNpp plugins. Make sure the tab spacing is 4 or 2 spaces, and you're set. Never problems. Also you can try using PyDev with Eclipse, it works really nicely.
You guys may be interested in [Sikuli](http://www.sikuli.org/).
classic dave.
And you could use [this](https://gist.github.com/anonymous/40fbe310077419ae9f31) [NSFW] to automate ... well ... fun? Source: [This thread](https://www.reddit.com/r/Python/comments/2fk5se/the_most_fun_eight_lines_ive_written/) [NSFW] (the above link is a more solid version updated by /u/jarod1701 and adjusted to python3 by me) Bonus for the lazy: /u/lojic made an [online version] with random pictures (http://porncumments.herokuapp.com/) [NSFW]
virtualenv?
Would there be a way to use Combi to answer [this SO question](http://stackoverflow.com/questions/26890032)?
So... this is /r/python now.
No, sorry.
Aw, got my hopes up there for a second.
Why not just use [mock](http://www.voidspace.org.uk/python/mock/) to patch `requests.post` and return a mock object? I do this all the time and depending on the use-case may store the test response content in a file / local variable , or if I'm doing some type of integration test and just want to avoid hitting any remote endpoints, I just patch the proper method on the `requests` module and validate that it was called with correct arguments. 
You really should at least mention what technique you're using in this article - Inversion of Control/Dependency Injection/etc. To keep the article focused, you may not want to go in depth, but some links would be useful. Also, you should take a look at the various mocking libraries that are out there. They allow you to do this much more succinctly, without the overhead of DI.
This describes (almost) exactly one of my previous internships. Was hired just to manually analyze the daily test data (grab off website, put in excel, make plots, send to manager). Took appx 8 hours a day to do. Automated it after the first two weeks, scheduled it to run daily, then asked someone else what I should do now that it's "solved". They had nothing for me to do. Whole rest of the summer was me teaching myself things, and helping other interns, because my manager had no remaining tasks planned. If you're a manager, and you get an intern, make sure you have things for them to do. Because being bored all summer sucks.
You can use Python to access most native APIs on Windows. I used this to automate some record keeping stuff in Outlook. http://vermeulen.ca/python-win32api.html
OP should be using requests anyway.
Neat! I didn't realize HDF5 played so nicely with Pandas before.
In Mathematics we never study the full structure of an object. We simply denote the properties we are interested in with respect to a class of mappings, then forget the rest. Problems are intractable otherwise, and we wind up seeing too many similar things as distinct, when really they're quite similar. That said, there are a few different notions of "relevant information" available to us which could yield different and interesting questions.
First step is understanding that it's irrational. Python 3 works. Yes, a fear that porting existing code to Python 3 will introduce bugs is realistic. But you should *not* be afraid of starting new projects in Python 3.
Of course, if you want it to *not* update deps, because you don't trust upstream not to break anything, then you have more work to do.
I'm actually writing a Python book for non-programmers on this exact topic. [Automate the Boring Stuff with Python](http://www.amazon.com/Automate-Boring-Stuff-Python-Programming/dp/1593275994) It will be free to download under a Creative Commons license when published. You can read the description (and later the book) from here: http://automatetheboringstuff.com/
Wonderful! Is there a way to antialiasing the contours?
Same position as you bud! - [Crash into Python](http://stephensugden.com/crash_into_python/) - [Learn Python in X Minutes](http://learnxinyminutes.com/docs/python/) Python 2 vs 3 isn't a big deal. Just a couple syntax things + every list-like object (called an iterator) is lazy by default.
Looking at StackOverflow questions might also be interesting though I never investigated what was available. Sum historical data, as you have brought up, would be more difficult to draw inferences from.
Cool site. When is the book due to be released? 
I haven't done anything with Outlook or SharePoint, so I can't personally recommend anything with those in particular. A quick search did turn up [a way to access outlook through win32com.client](http://stackoverflow.com/questions/5077625/reading-e-mails-from-outlook-with-python-through-mapi) though. Parsing text data into JSON and sending it through a web API's easy enough with `re`, `json` and `requests`. For myself, the bulk of what I did with Python when I was on helpdesk was using automate fixes and system analysis for things our ITSM software doesn't handle really well. Python's `winreg`, `active_directory` and `wmi` modules do a great job interfacing with those parts of the Windows API, and once I'd built some modules with functions/classes for the most common things I look at/work on, it was an obvious next step to make any batch operations take advantage of multithreading through `concurrent.futures`. For example, say you want to know what settings are being used in the xml config files Citrix stores as binary registry keys for each user on a few hundred computers? No problem, I'll have it for you in five minutes. As for sharing the wealth, I was pretty wary of letting too much out of the hat, too. For myself, my first round of automation [unshared, and unknown to my superiors] got me enough attention for skill and efficiency that I moved from Tier1 to Tier2 support. As Tier2, I improved the tools I'd made for myself, bundled them in an executable with a crappy Tkinter GUI, and showed that to the lead, who then showed it the department's manager, who showed it to *his* boss. All in all it impressed enough people that once a position opened in what passes for our DevOps group, I was moved over there. Since the executable bundle made the code a less accessible to casual theft and I'd hidden some easter eggs in it that would display my name I wasn't too worried about someone else taking credit - especially when I've got the real sourcecode with my name stamped on every commit. I'm glad I did share what I had though, because I'm a lot happier where I am than I was on the helpdesk.
I have a feeling some, if you were an employee, would have terminated you and kept the automation script. Look, you wrote yourself out of a job, so, we don't need you anymore. Get out.
In your version the file isn't automatically closed, as it is with the 2nd example. Note the `unclosed file` in `locals()`: &gt;&gt;&gt; data = open("thing.txt").read() &gt;&gt;&gt; data 'hello\n' &gt;&gt;&gt; locals() {'__package__': None, '__doc__': None, 'data': 'hello\n', '__name__': '__main__', '__spec__': None, '__builtins__': &lt;module 'builtins' (built-in)&gt;, '__warningregistry__': {("unclosed file &lt;_io.TextIOWrapper name='thing.txt' mode='r' encoding='UTF-8'&gt;", &lt;class 'ResourceWarning'&gt;, 1): True}, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;}
not for me ... &gt;&gt;&gt; data = open('backup-2014-05-14-1013.txt').read(20) &gt;&gt;&gt; locals() {'__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', 'data': 'Wed May 14 10:13:49 ', '__doc__': None, '__package__': None} Same in python 2 and 3. This led me to believe it was garbage collected, and thereby closed.
I wasn't present at this presentation, but I've had the pleasure of seeing a few of Dan's talks at PyATL and speaking with. Currently, I'm playing with this set up and seeing what comes of it.
Interesting. What OS are you using? I'm on Linux fwiw. I would go with a context manager just because this is clearly not portable functionality. Of course, it doesn't really matter since the OS will close the file once the script exits, but eventually your students might come across a resource that the OS doesn't handle and it would be better if they were in the habit of using context managers, IMO.
The with approach is great for line streaming. f.readline() doesn't raise an error if you read past the end of the file (at least in Python 2.7). You just get blank lines.
It's not in locals because you didn't open `data`. You only initialized `data`. &gt;&gt;&gt; data = open('backup-2014-05-14-1013.txt').read(20) &gt;&gt;&gt; data 'contents of backup' 
I was looking for the unclosed file warning, not the data. &gt;&gt;&gt; data = open('data.txt').read() &gt;&gt;&gt; data 'test data\n' &gt;&gt;&gt; locals() {'__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', 'data': 'test data\n', '__doc__': None, '__package__': None} 
Thanks for sharing. Wasn't aware of this. Will be checking it out tonight.
Interesting. My work machine is Debian and gave the results above in python 2 and 3. My home machine is Mint and in python 3 gave a warning like yours. However on all of them I can watch "open files" in the system monitor and see that `f = open()` keeps the file open, while `data = open().read()` does not.
Read more closely. That is not a file object, that is a repr() string of a file object stored as `__warningregistry__`. So it's just a string. The file object was properly garbage collected as it should be.
"Blender is for Blender users" - Ton Roosendaal. https://developer.blender.org/T22328
I completely agree that for most applications one would need to make the information homogenous. However, I am curious to know if there exists work out there that explores the difference between *luv* and *love*. What does the slang say about the speaker?
Oh man! I thought no one used POV-Ray anymore! Thanks for developing this, I'm definitely looking forward to trying it out. I love Python and I just love making stuff in POV-Ray too :)
Cool, thank you.
I do things like this sometimes, using `format()` and `join()`: main_template = """ This is my {adj} template. {desc} ..So there. """ # Build multiple lines based on a for-loop. desclines = '\n'.join('My thing {}'.format(i) for i in range(3)) print(main_template.format(adj="awesome", desc=desclines)) # Also, this: template_args = { 'adj': 'different', 'desc': '\n'.join('Thing {}'.format(i) for i in range(3)) } print(main_template.format(**template_args)) *** And the output: This is my awesome template. My thing 0 My thing 1 My thing 2 ..So there. This is my different template. Thing 0 Thing 1 Thing 2 ..So there.
Spaces between mathematical symbols, and variable creation like "X = 5" or "Z = 5 - 2" for readability's sake. Spacing between functions, imports, and dictionaries. Helpful to name variables with all lower case, and if you need spaces replacing them with underscores EX: "this_variable = 5". Be careful when dealing with global variables if you're going with external module work.
Until people define multi-line data structures. Ahhh.
On a similar note, when I was a freshman at uni, back in 1999, I was hired as an intern at a local company with about 200 employees. They also had 15 unpaid summer interns whose main job was to manually feed data into the databases for testing purposes. The data came in various forms, but mostly spreadsheets that had to be converted to some format they'd come up with that they could batch run to load the DB. It was tedious as hell. First day on the job I spent 10 hours writing a Perl script that automated the entire task. They found other things for the interns to do and then hired me on at the end of the summer. 
Sounds cool! Please PM me when it's available at this awesome student price. :)
This looks neat! Combinatorics was probably my favorite math that I ever took. A nice addition, along with the statistics library.
I would have introduced a password or a "bug" that needs to be "dealt" with or it wouldn't work, hence still needing me.
Linked Data Platform: http://www.w3.org/TR/ldp/ http://www.w3.org/2012/ldp/charter : &gt; The mission of the Linked Data Platform (LDP) Working Group is to produce a W3C Recommendation for HTTP-based (RESTful) application integration patterns using read/write Linked Data. This work will benefit both small-scale in-browser applications (WebApps) and large-scale Enterprise Application Integration (EAI) efforts. It will complement SPARQL and will be compatible with standards for publishing Linked Data, bringing the data integration features of RDF to RESTful, data-oriented software development.
There's a best way to do certain things which aren't necessarily the best way to do it in another language. It's called idiomatic python. But any language will have faster and slower ways of doing the same thing, and learning those details is part of mastering any language.
Overall, it's honestly very hard to follow the script, especially with the way you're indexing content. It seems like a more readable/pythonic way to write would be on line 22: `for home_team, home_score, away_team, away_score in content:` then referring to those variables directly within each iteration of the loop. Try to think about the way your code should work in or near english and build around that. Trying to remember that content[i][3] is the away team sucks. Unpacking the list each time and calling things what they are makes it way easier to refer back to. 
Hi Maciej. If remember correctly, you (PyPy) wanted to make a blog post about the results of the fund raiser booster by PSP in September. I'm kind of curious how much difference did it make. 
Thanks for the feedback, I agree that I was lacking in naming the technique used. Regarding the use of mocking libraries, see my comment here: http://www.reddit.com/r/Python/comments/2mjyt5/how_to_write_tests_without_side_effects/cm5spnw
Does anyone else think the a &lt; b &lt; c construct in Python is terrible? Like, yeah that's mighty convenient, but what about left/right associativity i.e. a &lt; (b &lt; c) and (a &lt; b) &lt; c? Well that depends on whether a or c are respectively smaller or larger than 1 (True) doesn't it...
I would say that we are at the kindergarden level of motivations.
Smalltalk does duck typing on object's type Ruby does duck typing on object itself Python does duck typing on object itself except for the operators The equivalent of a + b is not a.__add__(b) but type(a).__add__(a, b) It's done like that for the class objects, if you implement str() as this: def str(o): return o.__str__() then pass a class as argument str(int) it will result an error because int.\_\_str\_\_() expects to have a self argument. Now, because of that, you have awkward situations like class Foo: def __str__ (self): return "Foo __str__" def a_add (self, x): return 1 + x def a_str (self): return "a __str__" a = Foo() a.__add__ = type(a.__str__)(a_add, a) a.__str__ = type(a.__str__)(a_str, a) print(a) # "Foo __str__" print(a.__str__()) # "a __str__" print(a + 5) # TypeError: unsupported operand type(s) for +: 'Foo' and 'int' print(a.__add__(5)) # 6 
Two source trees, one for each python version? Really? :-|
Kivy ?
You have to understand that the generation of managers in many firms has no idea that so many tasks are easy to automate. 
&gt; getattr I would say "__getattr__" An example of something great than can be done with : https://hg.python.org/cpython/file/1855b5c3da61/Lib/xmlrpc/client.py#l1081 
Also, [splinter](http://splinter.cobrateam.info/en/latest/) for Web automation.
Damn, I went looking for anything looking remotely like LISP, and I didn't find anything, so I was all confused. I need coffee.
i was monitoring my python 3.4 uwsgi webapps with newrelic but lately I had problems with uwsgi hanging on launch so i removed new relic and now everything is fine.
pip does all those things. You can point it to branch or commit in repo, specify exact version of a package (I assume that's what lockfile does), and get your packages from any source or site (the only limitation pip introduced is that if you get package from pypi, then it should be hosted there as well, unless you explicitly specify you're ok if it isn't)
Markdown screwed me up. You as well :-) 
Well in many companies you have to do management to move up or get a rise. Once you're doing management you have to justify your role in the company. So you make people below you create reports, (mostly useless) data etc and pass it on your manager, repeat until it reaches the top. Good managers are great, but too much people are forced into it, and as companies grow you end up with too much layers.
I am not sure to understand, would you please define what is duck typing ? I think we are not referring to the same thing. Also, your example is incomplete, you are not giving the semantics of str(), how the operator checks that 'a' has \_\_str\_\_ ? Statically typed languages can have duck typing (F# has it, if i recall correctly). EDIT: duck typing with F#: http://bruinbrown.wordpress.com/2014/03/02/looking-at-the-details-of-fs-duck-typing/ 
Heh. No joke, my current job is working on a tool that does exactly what you just described (but with way more checks and automation). In fact, it started out as an excel document doing checks and ended up a full blown server/front end to do thousands of account checks to ensure data sanity (reconciliation). It is a key selling feature for our company because so many accountants get accounting wrong. Our company is very diligent about the integrity of the data and the numbers.
I don't see a need for that. In a place where the report is done manually, there's all sorts of low hanging fruit in the process, all sorts of ways to make things more efficient. 
My experience has been all good with showing people my work in automation. I've always been in the tech industry, though. I can't imagine someone being scared of a method that's both more efficient and more accurate. 
As a fan of Python it pains me to say that if you're working in an MS environment, Powershell is a much better tool. I write/have written a reasonable amount of both to automate tasks at work and you can tell MS has put a lot of effort into making PS a one-stop-shop for automation. 
Running it through 2to3 is very useful for this kind of thing.
I had a similar experience as a financial advisor. I was the new guy and low man on the totem pole and they viewed it as though they were doing me a favor by employing me for garbage pay. I automated most of my daily tasks away other than filing. In the end, I had trouble acting like I was busy, because I really wasn't. I ended up mostly programming for fun at work (usually related) and subsequently decided to change careers. Less than 2 years later and no CS degree (mine is in Finance), I'm a developer and don't regret a second of it.
Anyone still uses python 2? Wow.
Well done! More of this, please!
Awesome. Thanks for the links!
You don't work in scientific programming do you?
no ... :)
Yeah, that'd be great if more than 30% of our environment supported powershell and my requests to deploy it to the rest weren't rejected.
goose is holding me back.
If you're looking for feedback then it is polite to try to make it easily readable for others, preferrably follow pep8. You haven't pushed `nfl games.txt` either so we have no idea what your list indices mean. I also feel that globals can be avoided but its hard to say as its not exactly clear what's happening at a glance. I think what you're doing is computing the principal eigenvector of the win-loss point difference matrix and then ranking the teams. If that is so, you can use scikit-learn's `parwise_kernels` and networkx's `pagerank` to make life easier. Good job, but try to write code with readability in mind.
Mine as well, though with GEANT3... 
&gt; I am not sure to understand, would you please define what is duck typing ? Well, you know, "if it quacks like a duck". If phrasing it more formally, probably something like: &gt; *Duck typing* a programming method where operations to apply to an object are decided by the methods or attributes that the object provides rather than its type. If an object has the interface required by the operations being executed, the object is assumed to provide the wanted behaviours. The most baseline case would be a text substitution macro. These are typeless and will work as long as the result is valid regardless of initial inputs. &gt; Also, your example is incomplete, you are not giving the semantics of str(), how the operator checks that 'a' has \_\_str\_\_ ? It's exactly like in Python (actually the code I wrote *is* valid Python as long as `Foo` is predefined): # Five second summary def str(obj: object) -&gt; str: return type(obj).__str__() I'm assuming that functions and types get separate scopes here. &gt; Statically typed languages can have duck typing Yes, because some statically typed languages allow you to explicitly forego static types. This, for example, does not use a static type: def foo&lt;T&gt;(bar: T) -&gt; T: return bar although it's perfectly valid in a statically typed language. C++'s `template` syntax is probably one of the earliest instances of duck typing in a statically typed language. But you can't have it without some form of generics. `StaticPython` would have no generics at all. Implicit downcasting of types may somewhat simulate generics to a very small degree (and `str` would require this as written) but that is possible to remove too. If you assume that the compiler or runtime writes the generic boilerplate-y type downcasting code (`cast_to_object`) for you, you'd just need to use: str(a.cast_to_object()) 
~~How does GEANT compare with PyMC as far as features go?~~ EDIT: nm, I did not see "Monte Carlo **physics**" in the title.
No, not complete programming novices but people who've done programming before and were trying to learn Python. So, yes, your example is good as it compares it to a language that needs a lot more clutter for a simple thing. I usually show the Java example: public class HelloWorld { public static void main(String[] args) { System.out.println("Hello, World"); } }
Thank you for your feedback! This is my first time posting on github so I'm not great with uploading files yet. I will try to apply your advice about readability. 
For me, a somewhat more involved list comprehension and some other manipulations, like: A_clients = [ clientname for clientname in clients_list where clientname[0] in ("a", "A") ].sort() 
What I forgot to mention is I'm working in python 3.4, so default encoding is utf-8
if you want blocking code to call asyncio stuff in a way that it blocks until completion, you can do it like this: loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.sleep(5)) (you'll probably have your event loop around somewhere already, and don't need to assign it every time). the other way round, call blocking stuff inside asyncio, do this: yield from loop.run_in_executor(None, lambda: time.sleep(5))
Yeah that's the way many other languages would evaluate the expression, but when have you ever intended to do a less-than comparison on a boolean expression? I think it makes sense for Python to treat comparisons this way.
neat! did not know that!
I second that! To follow [pep8](https://www.python.org/dev/peps/pep-0008) is generally a good advice for any Python programmer. I recommend running [flake8](https://pypi.python.org/pypi/flake8) against any file before you check it into source control. It's checks files for pep8 compatibility, plus a couple of more goodies like unused imports and such.
But the loop is already running and handling network stuff. I'd need a new event loop to use ``loop.run_until_complete()`` if I understand it right?
Scientific programming works well in python 3 - problem is mostly when you have some big-ass legacy codebase which no one is going to port...
&gt; Duck typing a programming method where operations to apply to an object are decided by the methods or attributes that the object provides rather than its type. So, as i said before, Python does duck typing on objects excepting for operators where duck typing is applied on the object's type (because a type is also an object in Python). foo.__str__() # duck typing on foo str(foo) # duck typing on type(foo) &gt; This, for example, does not use a static type: &gt; def foo&lt;T&gt;(bar: T) -&gt; T: &gt; return bar &gt; although it's perfectly valid in a statically typed language. It's generic programming but it's still statically typed, foo&lt;T&gt; and bar:T are restrained to one and only one type: T 
Internal design: https://raw.githubusercontent.com/bup/bup/master/DESIGN
In the Fibonacci example, the main reason the recursive implementation is slower is because the recursive function has a different computational complexity, O(2^n ), than the iterative version, O(n). You should at least compare the same algorithm between the recursive and iterative implementations. The point about max recursion depth is indeed valid though.
I actually read that in the docs and thought someone might correct me on this. I thought if it did it in place it would sort the list in place and then the name assignment would point to the converted list.
I'm not sure where you're getting binary trees idea from -- C Python dictionaries do use a hash (At a certain size: dictionaries up to 8 elements are really just an array). See: http://svn.python.org/projects/python/trunk/Objects/dictnotes.txt for optimization rationale; and source: http://svn.python.org/projects/python/trunk/Objects/dictobject.c 
You're right. My mistake! (Now I wonder what I was thinking of...)
well, you can always test it. but `sort` returns `None`. so `A_clients` will point to `None`
What really sold it to me was first class functions and integration of data structures into the language. I think most of what pandas does regarding indexing/slicing is mind-blowing as well. I think a lot of examples where you are comparing line counts are kind of silly because in most cases you could just wrap the longer code into a single function and it would be equivalent. In many cases such a function already exists in a different library. Most experienced programmers would not consider something like public static void main to be an issue because the IDE does all the boilerplate automatically and we just mentally filter it out. If you want some ugly Java just take a look at callbacks using anonymous classes...
0. Concision, 1. Dynamic typing (there are tradeoffs of course), 2. First-class functions (higher-order functions, decorators, closures, etc.), 3. REPL for inspection and prototyping, 4. Massive standard library and other third-party libraries, 5. Use cases: web development, numerical computing, etc. Just my .02 :)
I'd downvote Reddit for converting my zero-indexed list to one-indexed. :p
Yeah, python 3 and scientific programming work fine. It's the people funding the research and the people managing those funds that may not like you using money to update to the newest software/language/tools. It's also hard as a software developer to convince certain scientists of new (or better) coding practices.
Nice, and great to see such detailed documentation. One thing I might be missing is what platforms it works on. I assumed Linux, maybe osx, and not windows, but didn't immediately see it stated.
That was for a quarantee that they don't simply take my script and terminate me
I don't control the server. It still has Python 2 on it and will for a long long time.
Use the print function regardless.
I understood the word, "Python."
I have horrible memories of Pythia now. 
Or when that big-ass legacy code base is the thing you need for your science.
This isn't really for new programmers, but I really like this: http://norvig.com/spell-correct.html 
This is why I C# now. EDIT: bring on the downvotes. I write and maintain 10's of thousands of lines of Python. But it's a dead end language for all the reasons in this article. Why do you think Google stopped using it? The writing is on the wall folks. We're in a multi-core era and Python is stuck in the past.
Anyone else get PTSD flashbacks when GEANT is mentioned?
Going back to your code, I missed the line where you split the line by spaces. So you would make line 22 `for line in content:` Then replace line 23 with: `home_team, home_score, away_team, away_score = line.split()` You don't need to define them in advance, and each time through the loop those variables will refer to the teams/scores for the line you're working on. 
Add https://pypi.python.org/pypi/rinse to your list.
Just ran into this: http://codecombat.com/play It may be useful..
Hey, there is this great initiative called Django Girls - free workshops for women. http://djangogirls.org/resources/ You may use the tutorial linked on the site, there is also a coaching manual that can be very helpful. Hope this helps :)
I'm not a huge fan of orienting programming towards any gender but there is http://www.pyladies.com/ which has some resources that you might find useful. I think the most important thing to do is to simply demonstrate how simple it is to get a project going in Python. 20 lines of Python and you have a simple game, or GUI, or useful tool, or website. Teach the basic syntax for awhile and then go into frameworks that they'll find interesting. In reality this 3 hour lesson isn't going to give them much, but you have to inspire them to do learning on their own. 
List comprehension readability is better in simple cases than for loops, but far, far worse in complex cases.
I'm enjoying your content for the most part, but if you're going to use reddit to advertise your blog, you should pay for real ads. In the last two weeks you've posted 1 comment and 16 links to your blog. It looks like you were once active here, so I do hope you decide to rejoin the community and take part in the discussion.
Please give us the full command you used. If it was just `python`, then it's likely that you have to call the executable by it's filename (e.g.: `python27.exe`)
Markdown protip: do `0\.` to keep the numbering.
If you have a struct-like object or a dict (same thing) that you access in an inner loop, you can gain speed by changing it into a tuple. Making a lambda with a readable name to pull the field makes it as readable and self-documenting as the object or dict accessor syntax while still being much faster.
 Try https://github.com/arskom/spyne ? https://github.com/arskom/spyne/blob/master/examples/user_manager/spyne_client.py I have used it long time ago when it was named rpclib. But https://code.google.com/p/pysimplesoap/ say "Supports Python 3 (same codebase, no need to run 2to3) " Honnestly, soap in python is painful, You know what, I drop all those lib in the project I need to do soap, and write a tiny wrapper for serializing soap request/response. good chance
&gt; Python lists are not linked lists. They are arrays. Lists are arrays of pointers. If you want an actual int/float array, you should be using numpy. For large array sizes, it matters.
I always preferred using the context manager approach for files, but I found it interesting to read in the official ['What's New in Python 3.0'](https://docs.python.org/3.3/whatsnew/3.0.html?highlight=execfile#builtins) guide (written by GvR himself) that he recommends: &gt;Removed execfile(). Instead of execfile(fn) use exec(open(fn).read()). So there's definitely cases where relying on the file closing itself automatically is acceptable. I've been less paranoid about closing files since...
C++ STL map maybe? (same functionality as ordereddict). EDIT: brain lag on my side, STL map is not the same as ordereddict, it sorts newly added element by key.
This seems to be the hardest thing to do in java, I was a little taken aback when I had to open a text file.
This is really cool, I find the official docs styles hard to read. Thanks a ton.
I feel like this will be too difficult for them. I mean, many of them will not have even taken algebra yet.
&gt; 1) Are there any better GUI programs for this? uh? &gt; 2) Is it possible to run the GUI script and script2 at the same time inside of a python script? You can spawn it as a process, or run it as a separate thread. &gt; 3) Is it possible to send a live feed to a PyQt widget, and/or live text file (without the use of an inputted user signal)? yes, just call setText() on the widget. &gt; 4) Do I have to import the GUI file into my script2 file? no 
Essentially, the problem is that the shell doesn't know anything about python, and where it lives. When it sees just "python &lt;somescript.py&gt;, it'll try to find a program called python in a bunch of places - the current directory, a bunch of system directories, and a few more. The exact places are determined by the **Path** environment variable. This is basically a semicolon delimited list of directories. Eg. it might be something like "C:\windows\system32;c:\someotherplace;..." which means when you type "python", it'll look for "python.exe" in "C:\windows\system32", then if it didn't find it, in "C:\someotherplace" and so on. Obviously, it's not installed in any of those, hence the "python is not recognised" error you get. This is what that that powershell line is doing - it basicly means "Set the path to the current value of the path (the $env:Path part), followed by ";C:\Python27". It's that last part that you'll need to change, because python isn't installed in c:\, but on your usb drive. Change it to: [Environment]::SetEnvironmentVariable("Path", "$env:Path;F:\Wherever\Python\is\installed", "User") eg. if the python executable is on your USB disk at `F:\python\python.exe", it would be: [Environment]::SetEnvironmentVariable("Path", "$env:Path;F:\python", "User") Note that you'll need to do this whenever you launch a new powershell session (the environment variable is local to the session). There are ways of adding a permanent entry that applies to everything, but you won't be able to do that on a locked down computer. One other thing - you mentioned a batch file, while the script above is a powershell syntax, which is slightly different. To set the path from a batch script (or cmd.exe console), the syntax is slightly different, being: set PATH="%PATH%;F:\python" (obviously replacing "F:\python" with whatever the right value is) The other way to do it is to tell it where python is directly each time you run it. Ie. instead of writing: python somescript.py write the full path: f:\python\python somescript.py 
Great article, thanks ! I have re-implemented tailing file to browser that previously using twisted + websockets to this approach. Much simpler. https://gist.github.com/k4ml/43b2fb8cfdb9d3b6d58d
/r/learnpython
I'd avoid math completely, when I said graph theory I meant something like "A graph is a way to model things and the relationships between them, now who here has a facebook or twitter?" I was thinking maybe a simplified version of [this](http://neo4j.com/blog/oscon-twitter-graph/) with the neo4j parts stripped out or hidden behind your IPython Notebook. Make it easy for them to change the variables like hashtag or user account to get the ego network of. [Here](http://opensourceconnections.com/blog/2013/11/27/quick-start-with-neo4j-using-your-twitter-data/) is something similar Middle School is like 12-14 years old right?
That's cool and all but Geant4 is not particularly hard to install especially when using CMake for the build.
Is it still the case for java 8 or did they introduce something easier than this?
What "inner loop"?
Please see my comment above: http://www.reddit.com/r/Python/comments/28qr7c/can_anyone_explain_the_differences_between_web2py/cm6j20d
Basically, Middle School kids should be 10-14 years old. Cool idea with the graphs and looking for twitter things, I think that would be something to spark their interests. 
The code is effectively: unique_words = [word for line in open("book.txt"') for word in line.split()] unique_words = set(unique_words) It's a tradeoff of memory vs speed, assuming set comprehension doesn't exist. Set comprehension is done as: unique_words = {word for line in open("book.txt"') for word in line.split()} which works in Python 2.7+
You are right, it is actually pretty easy to install. The Python bindings are a bit [painful though](http://christopherpoole.github.io/compiling-and-installing-the-geant4-python-bindings/). An alternative is to use [nix](http://nixos.org/nix/) as [Geant4 and g4py](https://github.com/NixOS/nixpkgs/tree/907af9e9e61899fab0eca047c209852ba6f84e64/pkgs/development/libraries/physics/geant4) are both in the nixpkgs repository (added by me). OP: Keep up the good work, nice to see you getting more stuff online.
Actually, it's using a generator comprehension: unique_words = (word for line in open("book.txt"') for word in line.split()) unique_words = set(unique_words) The original doesn't create a giant array and so it has exactly the same performance characteristics as your set comprehension, though it is admittedly less readable.
Sorry to beat a dead horse, but the Sphinx / Docutils docuementation is pretty poor, which is pretty ironic. How am I supposed to know about Directive.state.nested_parse() which is a pretty important function and isn't documented _at_ _all_ ?
It should probably be mentioned that if you get this error: &gt;praw.errors.RateLimitExceeded: 'you are doing that too much. try again in 9 minutes.' on field 'ratelimit' It's might be because your bot does not have enough karma to comment frequently - if you used a newly created account. Great tutorial OP, thanks for doing it. 
That is glorious and should be used in all recruitment (and possibly even in first year courses)
This man* speaks the truth. Unless you are planning on dynamically reading in large and complicated WSDLs, just use string formatting, or an XML library like lxml. *person
Do I understand what you did correctly: 1. Used docker containers to calculate one loop each of a Monte Carlo physics program 2. Aggregated together If so, I think I finally see a personal use for docker!
I've been running an intro session aimed at novices and 6 hours in were still struggling with some pretty basic stuff... And these are graduate students and post docs for the most part. Tl;dr it'll go slower than you think. I think focusing on generating interest and making it seem accessible is key.
In combination with "freelan", and ipython and mpi that is what I am currently working on. ...not one loop though... I think maybe I misinterpreted what you meant.
FYI : the first "contents" isn't necessary
I lot of the suggestions have been about cool concise code, which will surely excite your class, but I think you really have the chance to blow java out of the water. I would probably make sure to hit the following points 1) Define your own `__eq__`, `__str__`, ... easily. 2) Pass functions around. Pass methods around. Pass classes around. 3) Define a class inside of a function and return the class. 4) Decorators. Decorators that are classes. 5) Variable number of arguments.
Thank you! As a newbie I always wanted a clean reference guide. 
God forbid you then have to deal with character encoding in Java. 
 String text = new String(Files.readAllBytes(Paths.get("file")), StandardCharsets.UTF_8); [Source.](http://stackoverflow.com/questions/14169661/read-complete-file-without-using-loop-in-java) Plus, your Java example should use try-with-resources.
TL;DR: Be as Pythonic as possible.
Thanks... Great work all around.
I am teaching programming to middle school kids at the moment and I have found that using concrete conceptual examples is going to be your best bet before you give them code to look at. What do you mean by "very very basic programming experience"? 
&gt; We're in a multi-core era and Python is stuck in the past. Because every single problem demands a multi threaded solution. We should all stop fighting it and go back to writing everything in COBOL. It is the one true language. All those other languages are just posers.
Certainly OP couldn't be in the same class...
Why don't you add net:0 before you shift? Then you don't have to make a note of what the value was.
thank you! :)
I would show a chart of a function, matplot lib or text. Here is a fun scroller: ``` import time import math for x in xrange(1000): print " " * int(26+25*math.sin(x/100)), 'X' time.sleep(0.05) ```
Probably or have? Is there any way you kind find out for sure? Usually when you plan out what you want to teach you need a baseline of what the kids know. At that age you can easily lose the kids by over or underestimating them.
Not to mention how sad OP made the kitten. OP, YOU MONSTER!
Oh this is so fabulous! Brilliant!
I don't think that was meant to actually be run, it was probably on one line for space reasons. In a proper program you shouldn't be using `exec(a_file)` anyway, so there isn't much motivation for complete examples. 
FWIW, the constant factors are significantly better for the set comprehension, even on PyPy: $ python3 -m timeit "set(x for x in range(10000))" 1000 loops, best of 3: 1.06 msec per loop $ python3 -m timeit "{x for x in range(10000)}" 1000 loops, best of 3: 599 usec per loop $ pypy3 -m timeit "set(x for x in range(10000))" 1000 loops, best of 3: 347 usec per loop $ pypy3 -m timeit "{x for x in range(10000)}" 1000 loops, best of 3: 230 usec per loop 
Just jumping on the bandwagon with a little-known `startswith` trick: A_clients = sorted(name for name in clients_list if name.startswith(("a", "A")))
Ah I see. Well in that case I wouldn't assume they know much but that is just my own opinion. Maybe break the 3 hours down into 3 one hour modules. So example: Hour One: Variables Hour Two: Conditionals Hour Three: Loops I usually go with the format of, introduce the topic with a real world example (To introduce loops maybe "simon says") , then go to the code and show how to make a loop in python, then combine the real world example with the coding for an activity for them to do on their own. You could do that for each of the three, whatever topics you choose. It keeps a nice structure to the lesson but that's just my opinion.
I am relatively new to python, so please humor me. In the section 'Keep variables local', I ran the examples with python 2.7. I get roughly the same times regardless of whether the variable to look up is in the global or local scope. Also ran the code with python 3.4. Again, I did not see any time penalty using local versus global scopes. I understand that the use of (micro)benchmarks comes with a ton of caveats (version, system, background processes, etc). However, in this case, I don't get his results using the same code and now I am very confused. Are the examples OP gave psuedocode? or too simple to see the penalty? Quick note: I did the benchmarks using the ipython notebook. Also, for testing in python 3.4 I swapped xrange to range since they are same thing. AFAIK neither of these should influence the benchmark.
I have never tried, but I thought that you can utilize multi-core architecture with python via *import multiprocessing* Is this package not used by the python community?
I will look into *format* as well as inline template. 
I will show the code: How to get last 3 characters of a string. print "a.jpg"[-3:] 
This humanizing of animals is really getting old. The kitten is not sad by human standards. Why do people assume a facial expression on an animal can be correlated to the emotions expressed by a similar expression on a human? Edit: what the hell is a "coding professor"? A teacher who writes codes? 
I find it hilariously ironic that the OP copied a post about not copying code.
Python is increasingly inadequate for most business needs. I still marvel at how expressive it is. How little effort it takes to express my intent and how well the source code reads. But I've had to refactor too much python into C or C# over the years. Python is an illusion in many cases. With modern C# I can develop at very nearly the same pace, and scale it up much better across multiple cores if needed. With C# I have options. With Python I can launch off like a rocket but I hit a ceiling very quickly.
It's rarely used because it sucks (for reasons that are well documented across the net). Seriously, try to scale a computation across multiple cores with multiprocess and then compare the same thing to C#'s thread class or thread pool. Threading in C# gives you so many options with beautiful, clear APIs and a massive set of well documented concurrent data structures to make your program absolutely dominate huge data sets by truly utilizing the power of a modern CPU. It's a beautiful thing. C# is objectively superior in this regard by any measure. Until Python addresses this, it will gradually lose relevance. The future is more cores, not less. 
Same image link though...
Programming does create "codes" in a manner of speaking
It's not a particularly useful pattern in Python. What do you want to write?
Thanks :). Kinda surprised so many people are appreciative.
A coworkers wife complains that whenever we go out to dinner all we want to do is talk about "The C Codes"
Hey, I teach python. The first class is the best because it's first exposure, it can be really exciting! You can do a lot with 3 hours since the intro stuff is so basic. In my first class I usually build an ATM simulator. It's a concrete thing where the learners understand what it should do and it doesn't require anything complicated conceptually or programmatically, but you can scale the example out as much as you want to include whatever concepts you want. It's great. I explain how programming languages can do math, then how they store values using variables. Then I explain strings and how they're a different type of data, a way of representing text, but can still be stored in variables. Then I move into comparisons (&gt; &lt; == != &lt;= &gt;=) and how they're either True or False, then I show how basic conditional logic works-- just if/else. Then just need to understand input() and print() and int()/str() conversion and you can finish with this-- #This is a script to simulate a basic ATM. user_balance = 500 user_PIN = 5678 PIN_attempt = input("Enter your PIN: ") PIN_attempt = int(PIN_attempt) if PIN_attempt == user_PIN: amount_to_withdraw = input("How much would you like to withdraw? ") amount_to_withdraw = int(amount_to_withdraw) if amount_to_withdraw &lt;= user_balance: user_balance -= amount_to_withdraw print("Disbursing $" + str(amount_to_withdraw)) print("Ending transaction.") else: print("Who are you kidding? You don't have that kind of money.") else: print("Invalid PIN.") (By the way, I had added in the use of -= after the fact. Originally, to keep it simple, I wrote it longhand as user_balance = user_balance - amount_to_withdraw and explained how that worked.) Also, this won't take 3 hours, or it probably won't. AlSweigart's suggestion of the guess-the-number game is another great idea. If they're past this level, not sure right now, too late at night for me to go dig up other ideas. :) But looping is next of course, and maybe lists and some string manipulation.
I teach computing at a secondary school in the UK. Recently I got my year 9 pupils (mostly 13 yrs old) to work through a couple of lessons on Python using the Turtle module. The ability to see an output which is understandable, easy to manipulate and creative appealed to both boys and girls in the class and although I had the usual 'this is boring' from both genders I spotted some definite talent amongst the pupils, especially some of the girls who didn't seem likely to be interested. 
Honestly... the part about the TAs being able to pick code someone copied is a crock of shit. If all you are doing is translating a snippet of pseudocode *which was provided*, there's really only a few ways to do it (and unlike TIMTOWTDI languages like Perl, Python actually encourages monotony in cases like this). Once you've seen 5 different implementations of quicksort, you've well and truly seen them all. And to be quite honest, there is almost zero functional difference between being able to apply a quicksort you cut and pasted, and writing your own. The difference between a good programmer and a shitty one lies in the moment one of them thinks "now is the time to use a quicksort algorithm", where the other one decides to use selection or insertion and winds up bottlenecking the entire project.
It's a reasonable reaction considering it's immediately attempting to balance the scales but I don't think making all these materials and events for women is the right way to go. I mean what's wrong with the resources out there already? Why do the events have a female twist on it to begin with? It's a programming language not an article of clothing. It's just a tool like any other. I don't think "hey we should have workshops to teach women how to use power tools" because they're just tools/skills/methods. You present their usage and that's that. It should be done in welcoming environments of course but that's true of any topic. I personally learn from whatever resource explains it well enough to me whether it's from the official documentation or some random blog post online or even Youtube. I suggest we teach that incremental process of Googling to young girls instead of creating all these events geared towards females. While I agree that something needs to be done about it, I don't think the current approach is the best. 
Well, I'm not actually hard coding them. This was an example I put together which exhibits the problem. I'm using a library to read DWARF debugging data from ELF files and locating various software modules and the variables inside them. They all have relative paths inside the software build. It just seems so odd though that on some PCs it works perfectly and any paths work perfectly and then other PCs with the same version of Python behave differently. Even stranger is when I distribute this to coworkers I freeze it so it's all static libraries included with the distribution and it still handles slashes differently.
Before I was a professional developer, I worked as a customer service grunt for an insurer, and in one department they had access to an Oracle database. People used to refer to writing some SQL as "writing an SQL" and it bugged the hell out of me.
More like "everyone" :/ AppEngine is stuck at 2.7, CentOS6 is on 2.6 as yum depends on it, etc.
If readablility counts I would suggest to use a generator expression... less parenthesis and in general more efficient (Example in Python 3): def join_list(limit): return ''.join(str(num) for num in range(limit)) Another hint for you: If you use ipython you can use the ``timeit`` magic command: In [4]: timeit join_list(10) 100000 loops, best of 3: 3.05 µs per loop Much nicer than to put everything in a string :-)
Woah. That's deep shit. Thanks for sharing.
That's why I specified 'If all you are doing...' - in language terms it's like the difference between comparing the use of a single idiom or phrase, and comparing a paragraph. Plenty of people will have more or less identical idioms, phrases, or in this case sorting algorithms, where they will have significant and immediately identifiable differences when comparing paragraphs or larger pieces of software.
Does it upset people when others refer to "cutting" from the internet? Cutting removes the source and adds to your clipboard, copy clones it to your clipboard. 