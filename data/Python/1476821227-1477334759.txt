The blog post in an extract from the white paper (link on the post) where we write about version control of Excel tools, too. Have a look at https://www.pathio.com 
Thanks a lot for your kind words and for using Spyder too!
&gt;The title pretty much explains my predicament The title explains your predicament about as well as birds and bees explain procreation. We get the idea, but the details are a bit fuzzy.
The fuck lol.. straight into the strange corner of Reddit...
love it
Automatically making invoices from the Purchase Orders my wife gets emailed to her. It scrapes her email and extracts the numbers, puts them in a formatted Excel sheet. She then copies that to Word just to make it pretty and attaches (I could go that step, too, possibly, but it wasn't worth it) . I assume most of the other employees have been putting this laborious crap in by hand for years. It takes like 25 min of eye-straining copy/pasting for every time you have to invoice even just $50 worth of invoiced work--every week! My way produces the Excel sheet with one click in 30 seconds.
Thank you very much! Just downloaded it : )
Thanks for the kind words
Does anyone ever count? I just see what it prints, and the adjust accordingly. 
I augment our regression manual testing with automated scripts using Skiluli and Jython (I know its not python but its close!). anywhere in our program that does not have keystroke shortcuts or tab order and requires mouse clicks and user interaction, I use sikuli to perform those tasks as well as assert results or perform negative testing in data fields. Anywhere that does have keystrokes or keyboard shortcuts, i still use built in python commands which automates faster and more consistent than I can lol.
It must have been written back when reddit wasn't https all over.
Haha. I think this is great. I'd prefer rewriting stuff using xlwings, but hey, why not write the tests to work with excel first, and migrate afterwards..?! Cool!
Don't forget /r/learnpython as well.
It's actually /r/python. If it had asked what is my_str[:17], that would be http://reddit.com.
[Deploying Linux on bare metal hardware](http://www.stacki.com) Of course, *I* didn't write it all myself, I just work for the company that does. 
now kith
Please someone convince my boss of this.
What happened I missed it 
Appreciated, as someone who's felt a little failed by Lua, I hope your book can put me on the straight and narrow of advancing my Python.
I'm definitely up for some help with BitMon at https://github.com/DonaldKBrown/BitMon. It's a dialog based MMO game. I've gotten a few core components down, but I need a way of keeping track of battles, handling random encounters, etc. I'd gladly reciprocate any help by helping with any projects you might have.
And since some people like to represent null dates in databases as "0000-00-00 00:00:00", everything exploded !
Good luck! Python is a lot of fun. 
Why do you presume that I don't know what I'm doing? You do understand that Linux filenames are bytes, right? There may be a filesystem encoding, but that's just a suggestion (unlike HFS+, which enforces UTF-8 filenames). So please, explain how trying to decode Linux filenames that are explicitly bytes is the right thing to do?
&gt; Python is a strongly-typed language Are you serious? You come up with the completely broken `('ascii', errors='replace')` and now you're talking to me as if *I* don't know what I'm doing? I'd accuse you of entirely missing the point that Py2 is much better suited to this, but I'm pretty sure you're either doing it on purpose or have drunk more Kool-Aid than is good for you. 
I like to use Google drive as more of a backup than anything else, if I only have it on drive and accidentally delete a file and it syncs across all my devices Im screwed 
Welcome! If you do this a lot, you may want to look at [urllib.parse](https://docs.python.org/3/library/urllib.parse.html) in the standard library.
&gt; Are you fucking serious? Yes. Please make sure you understand the relevant terminology. &gt;You come up with the completely broken It wasn't broken before you stated your real requirements, and thereby contradicted yourself. &gt;Fuck me. You're a real piece of work, aren't you? ... You're the one persisting despite being objectively wrong, refusing to accept any of multiple proposed solutions offered to you, and moving the goalposts each time.
So if you were me, would you go about just getting a new API key even after my first one was suspended by twitter? 
Could I have one too, my curiosity is great 
I automate restarting my Flask server with Python. I don't like to run Flask in debug mode, but I also like being able to save a change and have it immediately restart the server to reflect the new changes. So, I whipped up a Python text editor using a tutorial I found a while back. I edit the file with it and save it. It runs it through some tests to make sure it won't get any traceback errors. If all looks good, it stops and restarts the Flask script using subprocess calls. If anything is wrong, it sends me back to the editor after displaying the Traceback and my still working previous version remains running.
Send it my way too, please. 
I don't know about using timeit on essentially no-ops. &gt;The dot-lookup is also quite expensive by the way. Then take them out! push = list.push pop = list.pop item = pop(mylist) Not diving through a stack of function frames makes these sort of micro-optimizations cleaner and easier.
I put on my robe and wizard hat
I read "car" as "cat". I really want to automate my cat, now. First, though, I'll have to get a cat....
Lol already got my answer from these guys but I guess thanks for the help? I'm already subbed to learn_python, and had posted it here cause I'm an idiot
&gt; Because you demonstrate it. No. You assumed it. You could have asked "under what circumstances?" But instead, you just assumed I was ignorant and started trying to school me. And as a result you proposed "solutions" that are fundamentally broken for the cases in which working with encoded strings is preferable. And then tried to back out by claiming I had moved the goalposts. &gt; sequences of bytes I'm guessing it was your knee-jerk dismissal of my usage of the term "encoded strings" as some kind of ignorant nonsense that only the clueless would use that lead to your suggesting broken solutions for situations that do indeed require handling *encoded strings*. It would be a wonderful world if every filesystem, file format and network protocol required the encoding to be explicit. But that isn't the world we live in, and like it or not, there are many situations that, for example, joining bytes with '/' is correct and trying to decode the bytes and join them with u'/' isn't. If you're writing code for those situations, Py3 sucks compared to Py2 because that is the Py2 text model, while the Py3 text model wants to pretend that this situation doesn't exist. 
First of all, thanks for writing and sharing your book. I was glad to see the section on async/await so I jumped straight to that, however there seem to be some mistakes in the examples. Using blocking I/O (eg request.read, time.sleep) in a coroutine defeats the purpose of having an event loop and prevents other asynchronous functions from running concurrently. Instead non-blocking versions of these functions should be used (eg aiohttp.ClientSession, asyncio.sleep), along with the await syntax, to allow control to pass back to the event loop while the I/O is pending.
\*glomp* :3
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
The answer is '/r/python', yeah? The colon is a new thing for me. 
This is very interesting! :D Did you consider the cases when an Aureliano/Jose Arcadio is referred just by the first name? Also, https://en.wikipedia.org/wiki/Six_degrees_of_separation
Ty
Yep, look up string slicing for more info on the subject. 
That's what I was thinking. (Not a regular programmer/Python user, FYI. Just dabble.)
fuck you bloodninja not this time
Thanks! I found a typo... At the start of Chapter 22: * urllib.rebotparser
Please check on r/learnprogramming or if you know python already check [here](http://rosalind.info/problems/locations/)
Pm me?
I so much love Python for this. Stuff like `pos` just doesn't do it for me...
Poor guy got ass blasted for making a reasonable mistake :(
If those articles don't help, how about this one? http://arstechnica.com/tech-policy/2013/04/microsoft-excel-the-ruiner-of-global-economies/ Or maybe this? http://biostat.mc.vanderbilt.edu/wiki/Main/ExcelProblems
You coulda made the same point without the douchey attitude. 
Thanks for letting me know. I'll get that fixed ASAP!
I don't think if such posts would be encouraged even on /r/learnpython, but here they'll be definitely frowned upon. 
Yes, I have been made aware of this. I am going to be updating that chapter shortly.
I generally prefer flask but in that case, django may be a better fit. You choose flask for its flexibility and performance. These things are generally not an issue for an e-commerce website. I would pick flask for more complex/unique applications. 
The sidebar here has a lot of good resources. Also might want to ask on /r/learnpython. 
You might get more help at /r/learnpython. 
Seeing as it's non default libraries, I feel like a discussion on them might fit this sub. I for one am interested
Cool. You're welcome! Can I download a corrected copy?
thank you man
Awesome thanks. Will it be possible to download an updated copy when it's fixed?
What license did it move from?
Thanks Zybooks! Now I have knowledge and karma! What a phenomenal publication.
thanks for pypi, hope it works out! I like your company requirements
Triple quotes strings aren't comments - they're strings that can contain multiple lines. A string literal as the top line in a module, class or function is, as you suspect, for documentation. It is available to you when you call the built-in function help on that object or on an instance of a class with it, and it's also commonly used to generate the online documentation for the stdlib and other projects.
Using python 34, it says a colon is an invalid syntax. 
thank you 
Same!
Shame the URL is http, not https.
Go to /r/learnpython Also, it has to do with you can't cd to a file
This is a subreddit for snakes 🐍🐍🐍
 from urllib.parse import urlparse parse_result = urlparse(my_str) path = parse_result.path
prints 'reddit' or something, idk, do I look like I know string manipulation? 
""" is for a multi-line string, not a comment.
thank you, thank you. I am buying you my first ever reddit gold.
The main difference between PonyORM and SQLAlchemy is that PonyORM works on a higher level of abstraction and can understand the "meaning" of a query. With SQLAlchemy when you write a query you basically write it using SQL, just using some "Python dialect" of it. You need to understand what SQL you want to get, and write corresponding Python equivalent for each SQL construction. With Pony you express the meaning of the query using Python generator syntax. After that Pony chooses a way to translate it to SQL. Depending on a database, it can choose to use subselect or join. In many cases it can transform a query with a subselect to a more efficient query with GROUP BY and HAVING, and so on. Also, Pony can automatically prevent "N+1 query" antipattern. Conceptually, SQLAlchemy is built on [Relational model](https://en.wikipedia.org/wiki/Relational_model), while PonyORM is built on a more high-level [Entity–relationship model](https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model). That mean that in the future it will be possible to add support of NoSQL databases to PonyORM. Also, there is a work in progress on adding JavaScript layer to PonyORM.
Some people pay good money for that, he got it for free..
me too thanks
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
That's in the 13th edition update.
Very useful. I know a friend who built something similar at his job. Let me know if you need any help testing it.
I learned the negative stride (or step) part way early in my python learning, then completely forgot about it. Dunno how many times I typed ''.join(reversed(list(some_string))) before seeing that again and smacking my head.
http://www.pythonforbeginners.com/basics/list-comprehensions-in-python &lt;- this should explain comprehensions quite well.
Do you know which magic methods you need to implement in order to support indexing and slicing?
This is an unfortunate time to be named Donald. You have my support until it's all over.
Affero GPL if I remember correctly.
This news is directed to someone that already knows about it and have to be noticed about updates. You don't know remi? Don't open the post.
 from math import sqrt, floor num = int(input("Enter any number : ")) if num &gt; 1: if len([i for i in range(2, floor(sqrt(num))+1) if (num % i == 0)]): print('{0} is not a prime number'.format(num)) else: print('{0} is a prime number'.format(num)) else: print('{0} is neither composite nor prime'.format(num))
What class is this for?
Someone did ([Excel-TDD](https://github.com/VBA-tools/Excel-TDD)).
Guess I'm the weirdo. I count.
Maybe [Tinydb](http://tinydb.readthedocs.io/en/latest/)? I've heard good things in the past.
What are you doing with them? I wouldn't expect json files to get corrupted 'often' if you write them correctly. Do you have multiple processes or threads that could be changing them simultaneously?
And now you are stuck here for the rest of your life!
You have two options Implement your own database, which is what you started and found out how easy it is to do wrong Or use someone else's database. Id suggest #2. Specifically sqlite since it likely fits what you're doing. If you really want to stick with json data stores you could also use postgres which let's you store json directly in a db 
Dead project?
https://github.com/dropbox/pyston
`__getitem__` for getting, `__setitem__` for setting, and `__delitem__` for deleting. Slices are converted into `slice` objects to be passed to these methods, i.e. `obj[a:b:c]` is equivalent to `obj[slice(a, b, c)]`. Originally there were separate magic methods for slicing (`__getslice__`, etc.) but this was deprecated a long time ago and removed in 3.0.
Any guesses as to what kind of salary would he go for? 
It doesn't compile if you don't close your brakets.
I'm voting Donald (Knuth) for president 2016. :-)
So now you got the list, what's your plan ?
Thank you for checking out my book(s).
basically just open, json.load, close and then later in the code with open("file.json", 'w') as outfile: json.dump(jsonstuff, outfile) I thought about that and no, there is no simultaneous threads, sometimes I just think my webhost is fucking with something, I mean the script worked for years
it's data from scrapping, so no
Yeah that's what I should have done from the start, but now a rewrite is painful.
Cool! I'd love to check it out 
Sounds like operator error to me honestly. Want to post some of the code?
Just use the old filenames as keys and store the json as text field. Then write a wrapper class that makes sqllite look like a file. Should be a minor update if your code is clean.
If it's a webapp, is it possible that the server runs multiple copies of it side by side to serve more requests? Is it possible that anything else modifies it in another way? If there's only one call like that running at a time, it shouldn't get corrupted.
Hey I used the same online textbook for my python class. To cool. 
Oh, neat. For anyone else that has no idea what a slice object is: https://docs.python.org/3/library/functions.html#slice
Currently working on a medium sized project with MongoDB. My advice: don't do it. Postgres is a better choice in every way that matters.
Yeah...although I have heard from a lot of people who are learning Python that they really liked Python 101 too. But I will say that Python 101 also contains a lot of intermediate level material mainly because I find books that only cover the basics to be a bit boring. I want my readers to know about all the other things you can do with Python!
No. Thank you! 
Yeah, I am not sure that there approach will work though. Maintaining not one but _two_ transpilers for JS and Java seems like a lot of work. It is hard to support all of Python as it is constantly changing. But it is closer than any other project, you're right about that.
In your `setup.py` file for installation, you can specify `entry_points`, which allow you to run a command. [More info](https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/). [DocOpt](https://github.com/docopt/docopt) is also a useful tool for creating command line interfaces. I gave a talk on this at PyGotham, but it seems the video hasn't been uploaded yet. [Slides are here](http://slides.skien.cc/BuildingCommandLineToolswithPython-pygotham2016.pdf), but the video has a lot more context.
So was the deleted account that posted 19 days ago.
Not to my knowledge, I believe Windows passes it as a regular mouse event. I think all events are regular (meaning there are no special "this is scripted or automated").
I already posted this like a month ago mentioning the better performances of pendulum compared to pytz. I updated the article mentioning some cases where pytz does not behave properly whereas pendulum does. This is not an article that tells you to ditch completely pytz but that you should also consider pendulum when working with timezones.
How do you see that information?
What did you see VegBerg, WHAT DID YOU SEEE?!?!?!?
There's no way to know at 'compile' time if len refers to the built-in function, or some other function (e.g. that could patched into this module from elsewhere) that does something completely different.
You click the link you posted, and it says +31.
Docopt is awesome. I've even started making multilevel docopts, so, you make a global one: Usage: program main_opt1 ARG1 [--options] program main_opt2 ARG1 [--options] program main_opt3 ARG2 [--options] Because that can get unwieldy, I make a sublevel Usage: program main_opt1 [--option1] [--option2] where I go into detail on the options. That way I can have one interface, filter out the cruft, and have unique --help options for each.
I've never really understood the appeal of Docopt. I use argparse so I *don't* have to type out all of the help and usage stuff. Is there something I'm missing about Docopt?
Normally this will all happen in just 1 script.py.
This library has made my life so much easier. I've stripped datetime out of almost all of my projects in favor of pendulum.
This is nice, but 90% of my timezone-related operations are in pandas...
Do you know if there is a way to find the solutions to the problems posted? 
Looks like this could've been written more simply as a BASH script...
Very cool. Also nice to know we can inject python code so easily.
alright, thanks for the answer
It has more than zero if-statements. So no. 
The Scrapy package can handle authentication. 
best comment 2016
also I suggest to use selenium webdriver with scrapy
I will put a shout out for [Click](http://click.pocoo.org/5/why/). If you don't know, Click allows you to define your command line options by using decorators. You write an 'entry' function, and then use decorators to define what options, and arguments are allowed. You have lots of options (including validation hooks and many others) to customize how your command line options work. Each of your command options and arguments are simply passed to your main function as arguments - meaning that you can get on with just writing functionality rather than writing code to handle the command line. It also has support for sub commands.
BASH has an entire suite of flow control mechanisms: branching, looping, and the like. You might learn them sometime. They come in handy!
im on Manjaro XFCE and a project im working on with a few friends we started in python2.7 so for this one we're just carrrying on seeing as only we are gonna use it anyways
Why? That's a lot of overhead when you might not need it. I feel a lot of people fall back to Selenium simply because they don't fully grok how the web actually works - in the majority of cases you do not need to replicate an entire browser to get the data you are after.
pandas dataframes
This is awesome. Thank you!
Good luck with that attitude, I'm sure it'll take you far!
The best way to go about this is to look at the HTTP traffic that occurs when you log in. If the login page rendering requires Javascript, I believe you will need to use selenium, which allows you to automate the browser activity needed to make it work. If not, I would suggest using the Python Requests module using sessions and it's authentication features to handle it. Do you have a link to the login page? That would be helpful.
Could be fun to benchmark effects of simple optimisations, like using tuples instead of lists in some places, fixing and caching some values and `len()`'s, especially in hot loop and `setStateRule73` function. Check why you do `enumerate()` and if that is most pythonic/performant for what you want, stuff like that. Maybe re-evaluate the algorithm? If I read this correctly the automata is one row per iteration, and only depends on the previous row? Then you might not need to create new lists every time? Is list even the optimal type to use here? Also it could be more pythonic as a generator that given a start state endlessly yields new rows. Then let main grab terminal width and fill your screen in scrolling patterns. Report back here and at /r/proceduralgeneration for stars and sweet karma.
that's what need, thanks!
'fekhbfuwfheuy734r843gu93gy7t7g3fhbwkf3gy7t7g3fhbwk43gu93gy7t'[7:-3] now, count!
You could try using the mouse functions from [PyAutoGUI](https://pyautogui.readthedocs.io/en/latest/mouse.html#mouse-drags) for this.
Learning them was all it took to convince me that they would never come in handy. There may be a case where bash is simpler than python for something, but I haven't found it yet.
But it is also written in C++ and so the madness goes round and round and round.
I guess my question is what is the problem with "overhead" in this specific case? If there's a tool that you're familiar using and you're going to be executing on a semi regular basis, I don't understand the problem with forcing someone to use something they don't understand. I have experienced certain situations where I used selenium, specifically Paypal checkouts which pop into a new window and then loads the login screen in a iframe. There's probably a way to do it without Selenium but it would just be a huge waste of time for me to try and figure that out. 
Your automate the boring stuff was the first python i ever touched. Then i found Mike's python 101 and ever since then i've just tried to "level up" my knowledge. Thank you for make such great content.
Sorry, it is heavily focused on people within the medical physics profession as it is a tool for them to use. Nevertheless by going to the parameterisation page, coordinates can be entered, and then "parameterise insert" can be pressed. That will give you a live example of scipy's basinhopping algorithm with callbacks. If you head over to the model page, press "load demo data" and then "run spline model" that is an example of scipy's fitpack spline wrapper.
Thank you so much! It worked! 
That would definitely make less coding for reading the csv files in. The way I have it set now, it reads the contents into an array and then generates lists depending on the row column. That part is pretty quick, but this is much more elegant. Thanks!
Thanks. Don't know what that is, but I'm going to investigate. :)
It's also a demonstration of how scipy's spline model can be limited to results which are deemed confident for prediction.
OP's Python is a prime example...
Awesome! I hope you enjoy it
&gt; a supported/approved way of handling my requirements (requirements.txt) vs all requirements (requirements.lock) would be nice. usually, you can either have your own which you don't check in, or if you mean "the things that are needed to build, but not the exact versions of the entire package list", that is what setup.py's install_requires is for &gt; search n' show https://github.com/balzss/yip is a recent thing which you might like, if you are not referring to it already that is
You mean a compiler.
Let's recognize that this was posted by the company that makes MATLAB, and is really an advertisement for MATLAB rather than a legitimate comparison. Anyone who has used both Python and MATLAB will understand how painful MATLAB is for anything of more than minimal complexity.
If you find yourself writing a python script heavy with subprocess.call and subprocess.check_output, etc, sometimes you're just writing a bash script in Python. If you literally just need to run command line programs and pipe input and output, shell scripting is the way to go.
Does this module work on Windows 10 or solely linux/OSX?
I've been using pendulum on my latest project, and have enjoyed working with it. I did find a bug though. If you create an object using pendulum.today(0), the object seems ok, but then if you pickle it, it will fail when you unpickle the object. So if you are wanting to default to the +00:00 Time zone as I am in the program, use today(tz='UTC').
TL;DR: "Matlab is better than Python, get it now!" - Mathworks
No, right now it doesn't work on Windows but if enough people are interested I might port it. :)
Yes, it is practical, though an optimized, memory-efficient implementation is going to use the stack of iterators pattern (see networkx, for instance). But the normal iterative DFS I posted above is going to work fine for most applications, and it's easier to implement, to boot. For instance, if the branching factor of the tree is `k`, then the stack implementation takes roughly `k` times as much memory as the stack-of-iterators solution, at most. In the worst case for both implementations, the memory consumption is about the same. In short, if I have to implement DFS I would use the implementation above for all but the largest of trees. Memory is cheap, most trees I work with have small branching factor (2 or 3), and if I can store one tree in memory I can probably store another just fine.
This is so true that (a) it hurts (b) I was expecting hundreds of upvotes but there are 23 as of now which is very confusing.
&gt; https://github.com/khamidou/lptrace#technical-details Wow. You have buried the lede here, I think. There's a huge problem in Python land: my script has hanged, how do I debug it, just figure what's going on, without adding the call to start the pdb server and whatnot and restarting it? There were two posts by /u/mbenbernard about using Python support in gdb to do that ([1](https://benbernardblog.com/my-startling-encounter-with-python-debuggers/), [2](https://benbernardblog.com/my-startling-encounter-with-python-debuggers-part-2/)), but yeah, it's complicated and you'd be dealing with gdb directly. What you did there is a game changer I think. But if I may very humbly suggest, you should emphasize it in the README that what your thing can do is to inject and run _arbitrary_ Python code in a running process, including STARTING THE FREAKING PDB with that `-d/--debugger` switch, and maybe add an option for running really arbitrary code. While tracing Python calls is just what it does by default because that's what you usually want, but it's nowhere near the limit of what it can be used for. Because, and I speak only for myself, the title of your post and the first page of the readme left me somewhat lukewarm about your thing. Oh, some weird trick to trace Python code. It was when I realized that it solves the general problem of attaching to a running Python process and running arbitrary code in it that I became excited as fuck! Don't bury the lede, say that that's what it does first of all, mention the starting pdb use case, mention the tracing use case. ------------- Also, why do you manually check if you run as root, I'm entirely sure that you can attach to any process started by the same user with gdb. If it's not true in some weird edge case, let the gdb fail and complain about it. Also, please don't suppress output from `subprocess.Popen`. Either just remove all those `... = subprocess.PIPE` or check if running the commands was successful and print the errors if not. The last thing I want from my debugging tool is to silently pretend that everything is OK, when I'm using it in the precise situations when things are not OK.
Have you ever had to do any sort of large scale sharding with postgres? Saying it's an absolute nightmare is putting it mildly. Where mongodb shines is with its ability to scale ... not its ability to handle small relational datasets.
Oh that is just hilarious. And it is a sign they are feeling very threatened by python. 
Are you lost?
&gt; Anyone who has used both Python and MATLAB will understand how painful MATLAB is for anything of more than minimal complexity. I am someone who has used both Python and Matlab for things far far beyond minimal complexity, and I can counter that Matlab was in fact not painfull at all. I have however used Python for quantum simulations in a setting where it was absolutely shit. Which tool is best suited for you depends critically on what you are trying to acchieve. With my experience I would say that neither is universally better than the other and that everyone who would tell you so is either uninformed, a PR shell or just being a fanboy for their favorit language. There's still lots of things Python could learn from Matlab, and theres are a great many areas where Matlab can't even compete with Python. 
It should be either downvoted into oblivion because it's blatant spam or posted in /r/humor
Is switching this big of a deal for most people? You'd think you were asking them to switch to assembly. 
Pro-con list of this vs something established like supervisord?
I've written a [Scrapy tutorial](https://hexfox.com/web-scraping/scrape-your-cinemas-listings-to-get-a-daily-email-of-films-with-a-high-imdb-rating/) here if you'd like to get a start into it. It's a Python framework for web scraping and is the go-to solution when you're not just building one off throw away scraping tasks with requests &amp; beautifulsoup (e.g at a professional job!) Scrapy handles a lot of the following topics for you, so it's worth reading up on what they and why they are a good idea in the world of web scraping. * Selector engines (css or xpath) for extraction * Concurrent HTTP requests * Throttling HTTP requests * Respecting robots.txt * Data exports (saving to database, xml, JSON, etc) * The list goes on, check the docs! If you need any extra help or you're stuck understanding something, ping me an email at darian@hexfox.com and I'll sort you out. This goes for anyone reading too :) Good luck with the job! 
Don't post images of code. Post questions to /r/learnpython, per the sidebar. Provide relevant information, like the version of Python you're using, the platform, and the complete error message. 
A lot of their points are valid (better/complete libraries, documentation, support, etc.) but there's no getting around MATLAB being a terrible programming language and way too expensive. Their first example is also misleading since the matrix NumPy class or the new @ operator make both pieces of code on par in terms of readability. Mathworks needs to just adopt the Python language and officially support it as an alternative way of using their libraries. 
If you look at the code for TinyDB, it doesn't really do anything that the OP isn't already doing (ie it just opens and closes files for you, and is also not thread safe).
It is what it is
In a lot of programming languages it's a function that returns the position at which a substring occurs in a string.
That's great advice. (Edit: I was referring to the advice about interviewing, not the rest) I've been doing a lot of interviews this year for the same reason. After spending 8 years at my previous job, I realized when I interviewed for the job I started this year that I was so nervous that I fumbled with my answers. Somehow I got the job anyway. Since then I've been continously improving my resume, interviewing, and then studying and working in my lab and at work to keep improving my skills. 
Switching an **existing codebase**? Well yeah. Every port, whether between languages or APIs, potentially blows up in strange ways (and worse, can silently fail, esp. if your test coverage is lacking). I've been 100% behind Py3, from 3.0 onwards. I still have old scripts running under 2 because I don't want to deal with the breakage. People have done their best to ease the porting process, but it is still a porting process ;)
It reminds me a lot of a quote I heard once comparing python an R which went something like, "I'd rather program math in a general purpose programing language than try to do general programming in a math language."
Dude thank you so much from me and my friends (sorry for sale loss) this sure will come in handy! Can we know what drove you to give it away for free for these days?
Amen. There's more than one feature request I've flatly refused, simply because I could tell it was going down the package management path and I remember reading this article.
This. Every single site I've ever dealt with I was able to just use requests sessions and bs4 to parse. The ONLY exception was a weird site with multiple iframes. Not sure what the equivalent of a [Session](http://docs.python-requests.org/en/master/user/advanced/) is with Scrapy but I'm sure it can't be hard to implement.
The fact some people continue to write py2 code baffles me, I understand existing codebases being still in py2, migration is a huge pain in the back, but I don't get why so many places still teach py2, it's gonna be dead like next year (assuming Guido pulls the plug for real) and there's plenty of libraries fully on py3.
Shell scripts can be really handy for doing low level things like formatting data files and moving things around. Awk and sed are super useful with shell scripts... I like shell scripts =/
Windows? Gross.
Have you tried the Anaconda distribution of Python (for scientific packages), and the Spyder IDE (included)?
Anaconda - yes, however I haven't used Spyder. Thanks for the heads up, I'll definitely take a look!
Its triple booted with Linux, don't worry. I use the Windows for exploit development. I like Linux **a lot** more than Windows :)
Thanks Alan. :)
When you use the break statement, it sort of "breaks out" of the current loop it is in (while/for loops). Once it breaks, it continues down the program as if it had finished the loop. For example: for x in range(5): if x == 3: break else: print("x = %d", x) random_function() This code would run through and print the numbers 0 - 2, but once x = 3, the if statement will evaluate to True, running the break statement. The break statement will end the for loop before x = 4 has a chance to be evaluated, so it will never print "x = 4." Instead, it will skip ahead to run random_function(), which can be any lines of code you have after the for loop
: after the "yes" And it's == not =
I tried that and it still gives me. File "python", line 2 if s == "yes": ^ IndentationError: unexpected indent
Okay, if your formatting is correct now, then the print after the if needs to be indented like the else is 
s = raw_input("Do you have a boyfriend?") if s == "yes": print "Oh,thanks anyways." else: print "Can I have your number?" 
I have the indentation exact 4 lines and all, do I need to declare it as a function?
Sorry, if I sound stupid. 
you'll emerge on the other side a new person. a new person who laughs in the face of .csv and .xls(x)
Everyone better read that first readme paragraph--- thats a pretty dicey situation
Totally serious. The book could be going over Python fundamentals in an introductory chapter in order to use Python as a "Get started" language to quickly put the core concepts of the course into practice. But really it's just nice to see a Zybook in the wild since it's a project of one of the professor's at my uni. 
This is just the thing, a shell script would be less code, and less code would be less opportunity for error...
I wouldn't try to learn from reading that, I'd pull from simple scripts that do something similar. I agree the syntax is unnecessarily complicated 
Why not use Solr? It will do the shardijg, ngrams, stopwords, etc for you. It scales very well in its cloud mode. 
Thank you very much. More to play with and research.
Ha ha ja ... This website even before 2009. I guess 2001. Dates Created on 2000-09-28 - Expires on 2017-03-02 - Updated on 2016-07-21 ---[Whois History](http://research.domaintools.com/research/whois-history/search/?q=utoronto.ca) 
Probably not when you need to read seven pages of manual for every line you write!
Just to reiterate, this is awesome. Thank you for sharing it !
Did you write your Python without consulting the documentation? Of course, every language requires some intense initial study, then continual use of documentation as you go. It's fallacious to assume that someone can hold the entire spec of a language in their head. If you're interested, [here's a great place to start with BASH](http://tldp.org/LDP/abs/html/index.html) Or, just keep your head in the sand. My success certainly doesn't hinge on your ability to pick up new languages...
What's a .data file? That's the most generic sounding file ever, but it's probably super specific. What's the file look like?
We have lots of resources over at r/learnpython - make sure to check the wiki.
Far away from maintaining bash scripts :P
A lot of downvoted from people who think bash is perfectly fine to work with. Strange strange people. 
If I want to build a web application in Python, which framework would be a good choice?
Oh wow, Spyder has an ipython terminal built in now!? I haven't been keeping up! Thanks!
In bash the idea is also a dead end; you can never grow it to to something substantial without facing a rewrite in something like python.
Unlikely in practice. I mean, sure, you'd probably have some gains in performance but they specifically talk about memory usage, and that pretty much rules out pypy. A more reasonable contender for a big win with even less effort would by cython. Mostly because it's much less work.
When did you last use it? It was there definitely 5 years ago.
Yes indeed. Scrapy uses Middleware to handle stuff like persisting session state across requests. e.g The [Cookies middleware](https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#module-scrapy.downloadermiddlewares.cookies)
&gt; the trade off of using that vs being building native bindings The article says &gt; but it makes for a significantly more complex wheels build which isn't I something I know enough about either; in my experience, if non-wheel build-from-source-every-time is not a problem, using Cython makes the integration with C ABI much easier. Building wheels after that, as I understand, is a question of having a build infrastructure for all the required target platforms (i.e. C libraries and python versions). Better yet, the interfacing can be made into a separate library to avoid the "compiling modules and headers every time we change a character" problem.
Cleanest way would be to use selenium.
As far as I understood supervisord goals, they aren't interchangeable. You still need some tool to start app up and other stuff. Daemonizer just help you to start and shut your app gracefully and be sure no immediate shutdown will happen when you send signal to it.
+1 for writing Python 3 now. It's much more fun and the ecosystem has reached a nice point now. Unless you can't move away from Python 2, just don't use it anylonger.
Which languages? 
We need something much closer to cargo than to yarn because we want to package also extensions, and provide .exe|.dmg|deb, handle libs like PyQT, numpy, matplotlib, scikitlearn, etc. 
You might get more help at /r/learnpython. You're question is a little confusing...it's both too vague and too specific at the same time. You want to scrape the first page of google results and you know that you don't want a headless browser, API, or third-party service, but you don't know if it's possible and you need someone to tell you how? # using curl `curl https://www.google.com/#q=INSERT_SEARCH_TERMS_HERE` # using python and requests import requests response = requests.get('https://www.google.com/#q=SEARCH_TERM') Now if your'e planning on doing some parsing and manipulation with the results I'd look into one of the numerous scraping libraries (`scrapy`, `beautifulsoup`, etc) available. They've been created for this exact use case.
If you want a Python-supporting host to run websites off I strongly recommend [Webfaction](https://www.webfaction.com/). They allow you to install whatever you want on their shared servers (any Python module), you can even compile/run your own http server instance if you want. It's $10/mo. It's got easy installers for Django and supports MySql.
Affiliate spam
Flask, django, bottle, cherry, aiohttp, etc... There is no shortage of frameworks. It just depends on what you want to do. 
Django
nice and very helpful blog
This is something that I was hoping to [add in Hunter some day](https://github.com/ionelmc/python-hunter/issues/27). Interested in helping? Even if just giving feedback.
Here's an alternative approach, although not specific to JSON. from moya.context import Context &gt;&gt;&gt; c = Context({"foo": {"bar": {"baz": ["well", "hello", "there"]}}}) &gt;&gt;&gt; c['foo.bar.baz.1'] 'hello' And bonus expressions: &gt;&gt;&gt; c.eval('foo.bar.baz.1 + " " + title:foo.bar.baz.2') u'hello There'
Personally I would use Grab, it's pretty nice for this sort of thing usually: from grab import Grab g = Grab() g.go(your_url) g.doc.set_input('user', username) g.doc.set_input('pass', password) g.submit() # you can g.go() to a different url here if needed. data_usage = g.doc.select(xpath).text() You just need to work out the names for the user / pass inputs and the xpaths for the elements you want to extract the data from. I like xpaths and I find this API style to be pretty congruent with the mental model of how I think about extracting data from a webpage.
Incorrectly.
That's orthogonal. What if your input is already validated, or you don't care about the input being valid?
I didn't want to confuse people reading the code into thinking that the object at that key is actually callable (jsane works with anything, not only JSON). This way is a bit more explicit.
I will write one for you for $4,258.73. The code will be free. The charge is just for the shitpost.
lol
I've managed to create a save and load to a file but not how to change a number through aliases... Going insane, but will post this in /r/learnpython. Thanks.
Since both of the examples are straight from textbooks, I cannot help but notice that the principle point of generators is missing from the article. So how about this: from itertools import takewhile def fibonacci(): """ Infinite stream of Fibonacci numbers. """ a, b = 0, 1 while True: yield a a, b = b, a + b def primes(): """ Infinite stream of prime numbers. """ primes = [] a = 2 while True: if all([a % p != 0 for p in primes]): yield a primes += [a] a += 1 # Fibonacci numbers less than 100 print(list(takewhile(lambda x: x &lt; 100, fibonacci()))) # prime numbers less than 100 print(list(takewhile(lambda x: x &lt; 100, primes()))) 
Heroku is a good place for a small dev database. I have a small django app hosted on pythonanywhere which communicates with a postgres db on Heroku. All free!
What's wrong with using goGgle? https://github.com/Worm4047/MovSort
One of my main projects has to interface with some third party windows software. Some of us are stuck with it.
Looks kinda like [dictdigger](https://github.com/jtushman/dict_digger) 
Postgres also supports columns with key-value maps, which might cover your type use case.
Why? Most definitions of transpiler I know focus on the fact that the output is on a similar level of abstraction(which is true in this case) or that the target is a high level language(which is true in this case). Of course, a transpiler is a compiler, it's just a more targetted definition. 
&gt; Sure. But it's unclear in the article if they actually did have the rust version before or not No, it's not: &gt; After the investigation had pointed us towards Python’s shortcomings, **we decided to vet the performance of our Rust source map parser, perviously written for our CLI tool** (emphasis mine). &gt; They do say that they had the Python version before. Moving from pure Python to cython can be quite easy. It's open source so [you can give that a shot](https://github.com/getsentry/sentry/blob/9486374c0c37aa58a112bd4c0cc15774840547db/src/sentry/lang/javascript/sourcemaps/native.py) and report back with the results.
Hence my question, actually. Being familiar with more oldschool, for lack of a better term, SQL I'm not yet sure how to best approach the task at hand. So, I figured, why not ask around!
To prove your point, historically document- or graph-oriented databases proven to be mostly niche solutions and relational model won partly because table is such a good way to represent different data at low level. This paper describes evolution of db solutions since 60s or so very well, along with why's and how's: http://people.csail.mit.edu/tdanford/6830papers/stonebraker-what-goes-around.pdf
Good question. JavaScript is often minified (rewritten to take less space) before being transmitted to the browser, but when you're debugging it's much handier to have the original source location available. [Source maps](https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map) provide the link between the pre- and post-minified worlds.
If you are looking for a great IDE try Pycharm or Spyder, both are very full featured. I prefer Pycharm personally. Additionally, it seems like a lot of people's complaints are more a result of not having the correct packages installed. Plotting seems like a common complaint which is fascinating as I doubt anyone could tell the difference between a figure made in Matlab and one made with matplotlib.
If you do decide to go the DigitalOcean route, hit me up and I can get you some credit to experiment with.
This was already using slots. 
With cffi I need one wheel per platform. One for OS X and one for Linux32, one for Linux64. If I link to libpython I need two for each Python version. That's 6 wheels for 2.7 alone. 
1. Make sure you're honest. I got a job where they asked about my weaknesses and I mentioned I had half the required experience but went on to say that my love of code and hobbies outside of work would allow me to be a productive, energetic member of the team. I never regretted taking that job. I learned a ton and it helped me go from being a reporting analyst to a developer, which was really my dream. 2. Pick some scraping tool like PyQuery (easy if you already know JQuery selectors) or Beautiful Soup 4 (more mainstream), and try scraping something simple like a quotes website into a json file of just quotes and then make a simple static html site with Bootstrap with a few nav bar links that are for quotes from different people. The site won't be useful enough to buy a host to put it up somewhere, but it'll give you an idea of how to talk about some basic concepts. 3. Don't worry. If you get the job and you were honest, it's because the boss wanted you on the team. My boss right now sometimes asks for someone with 10 year experience, interviews some kids just out of school, and decides to hire them too while continuing a search for a senior dev. If you waste a little of their time but are polite and friendly, you won't burn any bridges, and an interview without an offer is just free training for a future interview.
Another solution, also not limited to json: [TreeDict](http://www.stat.washington.edu/~hoytak/code/treedict/)
Interesting! Looking forward to reading this paper.
MicroPython is lean and efficient Python implementation for microcontrollers and constrained systems. In this version: "New port to Zephyr RTOS, initial support for running upip (package manager) runs on baremetal systems like ESP8266, and reduction in code size." More detailed changelog is available by the link in the title. 
Why not return the object itself. If it doesn't exist then return a special object DoesNotExist which can be indexed the same way but just keeps returning DoesNotExist objects. You can't do a get with a default though. So maybe this is a show stopper. For what it's with, I like calling the result to get the value over the .r syntax. 
I recommend PythonAnywhere. Deploying is pretty easy and they have an integrated IDE which is nice. 
You can do all of that on the aws free tier
PythonAnywhere is pretty good, I use it and have had no problems with it, I've used the online editor to change stuff whilst making changes from local deployment.
I also use webfaction. It's great if your needs are very simple, but scaling really isn't much of a possibility. It's not their business model afaik. 
What a great write! Not only is the author quite a brave programmer, but a gifted writer.
Couldn't agree more. Brandon Rhodes drives this home in his talk about Python data structures; dictionaries should really only be used for _mapping_ and not as surrogates for an object model. Marshmallow immediately comes to mind as a much better tool for solving this problem.
Yup. You kinda tell by the 1 contributor, almost no forks, and few pulls that there's not much of a following. Personally I like the concept, but the lack of maturity (e.g. no benchmarking) in this offering makes it easy to dismiss.
I agree, and this library is useful for making the conversion. I generally use [schema](https://github.com/keleshev/schema) for the validation step first.
eh... no? these suggestions are ill-conceived for instance "for a and b in... " is poor notation for what you want to do . such suggestions should be left to people with a sense of structure and mathematics . they'll come up with a notation that makes sense. 
You mean that one suggestion is, in your opinion, not intuitive. Some would disagree, which is why it is called a "suggestion" and they usually lead to debates discussing the pros and cons of the suggestion. Reading the whole post would also be a good idea rather than discarding everything as soon as you find something you don't like.
Really cool, thanks! 
BTW, if newname in lista: ... if newname not in lista: is a waste of computation since Python has to iterate over `lista` twice! Anyway, to your question, You can't directly change the key in a dictionary. However, you can do something like: &gt;&gt;&gt; lista = {'joe':'555-555-5555'} &gt;&gt;&gt; lista['bob'] = lista.pop('joe') May I make another suggestion? Don’t back yourself into a corner with a dictionary of name as the key and the number as the val. What if you decide to store addresses? Make the value a dictionary of the information you will later need. Do something like lista['bob'] = {'phone':'555-555-5555'} because then you can later do something like lista['bob']['address'] = '1600 Pennsylvania Ave NW'
Thanks hexfoxed. My girlfriend left me because she says consulting isn't a secure full time job. I am sacrificing everything to make my career dreams come true.
I don't think that says that cmd.exe was removed; it's saying that a particular trick to open a command shell as the system user no longer works. As far as I know all versions of Windows still have cmd.exe.
Another way to do this would be to subclass `dict` and override `__getattr__` to call `__getitem__`.
Thanks for the reply. The cmd.exe on this machine is missing however and I can't locate it nor a download for a copy from another pc, therefore unable to install v-env. I was linked the wrong advice from another thread is all.
This comparison would have really bothered me a few years ago, but it almost doesn't matter now. See this quote from 2009: "Something important happened in the Scientific Python world during the last year: we are no longer constantly comparing our software with commercial packages, nor justifying the need for Python in Science. Python has now reached the level of adoption where this sort of justification is no longer necessary. The exact moment when this shift in focus occurred is difficult to identify, but that it happened was apparent during the conference." Gael Varoquaux, Stéfan van der Walt, and Jarrod Millman, [Editorial](http://conference.scipy.org/proceedings/scipy2009/paper_0/full_text.pdf), Proceedings of the 8th Python in Science Conference (SciPy 2009). Note: link is a PDF.
Yeah, you can certainly reverse engineer file formats. I run a 70k line code that does that. I parse horrifically undocumented Fortran formatted binary files. It's supports flipped endians, auto-detection of float/double/int size, and detects when the parent program crashes. There are 100s of results and it'll load a 2 GB file in 4 seconds. Still, I prefer that to unicode detection. That's an unsolvable task as far as I'm concerned. I use unicode, but I have the rule of the user has to get it right or I don't even bother. I'm not doing websites, so it's less of a concern. If the program crashes, that's on you. All my data is latin1 anyways.
That means there's a way to load a dynlib from pypy/jython/ironpython? And also somehow load cffi itself? Or doesn't it use C extensions in the python-loaded side?
I've considered creating a DigitalOcean server to play around with, but I have no clue how to secure it properly. Because of this I've considered going with someone like Webfaction. How difficult is it to secure the server?
Yep, a nightmare without a build infrastructure. ... Or you could skip making the wheels and make it an occasional nightmare for those who install it.
I solidly dislike monolithic frameworks in general; a much better approach IMO is to pick single-purpose libraries for the various concerns, and write some minimal glue code to put them together. Plain WSGI isn't too shabby to code against, gives you all the freedom you'd want, and has the advantage of using a reasonable approach to modelling web application - which is more than you can say about Django or Flask. For other concerns, excellent libraries exist that address them really well, for example sqlalchemy for anything SQL, jinja2 for HTML templating, requests for talking to external HTTP services, zeromq for all sorts of message passing between internal services, you name it. I really don't see the benefit of one monolithic framework that locks me into one opinionated set of libraries that may or may not be the best for my particular needs.
There are mailing lists in which they discuss these things ([Python Ideas](https://mail.python.org/mailman/listinfo/python-ideas)), but note that is a wide distribution list with pretty much all the major names you'd know in Python. I'd tend to agree with the other comments thinking there may be better syntax. Instead you could likely just make your use case a library or compose some pieces from itertools in there. There are a lot of nuances in your proposals, for example what if your two generators aren't the same length? What if a generator raises? Etc.
If a partner would leave over something as petty as that, they would do so anyway eventually, so don't dwell on that will you. Consulting is an insecure job if you are rubbish at your job. Guess what, that fact is the same as any other job. Practice, get good at it, make a network for yourself and you'll make a small fortune. I know data scientists in London on £500+ (~$700) a day, and that's not even in finance. Keep learning.
Yeah, that isn't a lot... It made more sense in my head, but the reasoning is that in this sort of common case: lower = range ( ... ) upper = range ( ... ) for x , y in zip ( lower , upper ) : ... Spacial locality of variable to generator would make it more readable: for x in lower and y in upper : ...
I honestly like `for x in generator1 and y in generator2 `. Not really sure if it helps since we can do `for x,y in zip` already, and it doesnt make much sense to add it for just the reason that we might like this. It really is not enough reason. Plus, this is cute for 2 generators, but what about when you do for `x,y,z` (or more) which also happens.... your method won't "scale" :)
Get some cheap VPS and manage it yourself. It's not difficult, and given that your main goal is learning, it's an opportunity to learn some simple sysadmin stuff too. A nice list of cheap VPSes is on [lowendbox.com](https://lowendbox.com/).
Yeah, it makes the smallest change out of all of them but it reads really damn nice. The long line thing occurs with if statements too and generally it's split over multiple lines. for x in generator1 and y in generator2 and z in generator3 and ... That's kinda nice to read, but I'm starting to doubt and is a good delimiter here.
http://selenium-python.readthedocs.io/py-modindex.html
thank you very much both of you!
Thanks, and sorry about not posting in /r/learnpython. I don't know what you mean by well-behaved, but I find java a lot less easy to program than python. I've done the codecademy stuff for both python and java and java looks more similar to COBOL than python does. I really like python. Python is what I'm trying to install right now. I uninstalled python 3.5x and downloaded the tarball for 3.4.5... now I just need to figure out what to do with these files that I downloaded, to get IDLE back and the computer responding properly to .py files.
By "well-behaved" I mean apps that interact well with the rest of the system. Using widgets and UI guidelines the user is familiar with, responding properly to intents, and using intents to share data with other applications, etc., etc. Yes, Java is more verbose, but the payoff is that your app will look and behave like any other Android app - that is, the way your user is used to apps behaving - not like a Kivy app, which will be much less familiar. This stuff matters a lot. You might want to look into [Kotlin](https://kotlinlang.org/) if Java itself is an obstacle for you - it's a Java-compatible language with a syntax that, while still being closer to C than Python, can be much more elegant. If you're committed to Python though, you can download an .exe installer from python.org - the source tarball is for people who want to build the interpreter themselves.
&gt; Silicon Valley teenage bro-cultural bankruptcy Uhh, what does that even mean?
That would also only work for the first lookup, though, or you'd still need the `.r()` at the end.
I totally agree with what you're saying except... &gt; There's nothing wrong with using JSON as a wire format to talk to browsers JSON is only useful as a wire format when one doesn't care about typing, marshalling and/or specification, as in: you'll never know what you're going to get in a JSON blob. There's no way of enforcing any sort of spec, other than rolling your own code at either end of the wire. Take a look at Apache's Avro and Thrift projects for something at the other end of the spectrum. It may be overkill for many projects, but it's worth a look, if only to see what a well defined, yet custom wire protocol could look like.
Right. Mentally I was already thinking this was returning attribute dictionaries (AttrDict). https://pypi.python.org/pypi/attrdict/2.0.0
cmd.exe is pretty fundamental. If it's missing, I would suggest you back up your data and restore your system.
Data analysis, scipy, numpy, web
Other languages don't tend to have quite so many operators, nor such unintuitive ones; I have also yet to encounter another language where doing something like `"$var"` is required (instead of just `$var`). Would you rather write - `3 &lt; var &lt;= 42` - or `[ 3 -lt "$var" ] &amp;&amp; [ "$var" -le 42 ]` (NB: this won't work if you miss out any of the whitespace) - or `(( 3 &lt; "$var" )) &amp;&amp; (( "$var" &lt;= 42 ))`? If the last two are wrong, please correct me. I'm not too familiar with Bash.
I'm not in data science (yet) unfortunately but I do teach everything to do with web scraping and browser automation. darian@hexfox.com if ever have any questions about that.
/u/sentdex has launched the campaign which he talks about on his youtube channel [here](https://www.youtube.com/watch?v=qO-V5ctO-vU). He makes quality videos and supports the community well so consider supporting him if you can.
Sure, but what if the object is a list? What if it's a string? I'd have to subclass them all.
You don't need to memorize anything... this isn't university. You found the page, now you know how to do an if statement. Problem solved. You're just being dramatic to make some meaningless point...
Yes, also to make small Android apps (smaller than Kivy), and a lot of other small cute things. These features wait for people who need them up to the level of actually starting to work on them. (Or hire me to work on MicroPython full-time, and I'll make you happy with such features on a regular basis.) 
&gt; This is so true ...except that others have already pointed out why it's not true.
1. Install pypy 2. Make virtualenv using it (virtualenv -p ...) 3. Enter virtualenv 4. Install gunicorn Or perhaps just pypy gunicorn ... will work
thanks! these are great tips to try and improve the code :)
This is not the subreddit for questions. You've already posted this in /r/learnpython, someone should respond there.
That's exactly your Python version - `major.minor.micro`.
Flask, Django
oh I'm sorry, I meant install path. Where exactly that version of python is installed in my windows explorer. 
`import sys; print(sys.executable)`
That did it! Thanks 
dSpace, CANape, Controls. But that's my industry.
Engineers probably shouldn't don't let stuff like that get in the way of writing good code. If the library works, it's fine.
Awesome, that was a fast turn around :)
/r/learnpython is a better place for such questions. Also, that question is ... weird. An IDE is not an interpreter, it doesn't execute code.
That's why I specified "for browsers". For browsers, JSON parsing is free; may as well use it. For anything else, find a better wire format with a built-in schema, like ProtoBuf, Thrift, etc.
It could be referring to linting? Or syntax checking? No idea, and I agree this is a weird question out of context.
So the function wont work anymore? Also thanks for answering.
It will work, you just won't be able to access it by that name. The function will still exist as long as there's another reference to it. Functions in Python are just values like anything else, so you can even assign a different name to the function: Python 3.6.0b1 (default, Sep 12 2016, 18:11:36) [MSC v.1900 64 bit (AMD64)] on win32 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; foo = print &gt;&gt;&gt; print = 5 &gt;&gt;&gt; print * 2 10 &gt;&gt;&gt; foo("hello world") hello world
The `=` in Python doesn't mean "equals". It means "set to". So, first, I set `foo` to the current value of `print`, which is the normal `print` function. Then, when I set the value of `print` to `5`, it doesn't change `foo`.
Alright thanks for the explanation, do you want me to delete this post?
Idk I felt like it'd be better to ask here but I'll try there too. Thanks 
del str
This is a good answer but I also recommend examining `sys.path` (or perhaps the first few entries `sys/path[:5]`) to see where imported modules come from.
How many have used this and how is it coming along? I've used some microntrollers years ago, but currently don't have much knowledge. I was considering picking up an arduino just to get some projects done quickly, but do you think this would be a better alternative in that I can accomplish things quickly and effectively while also learning something somewhat useful. I have no problems with Arduinos for hobbiest projects, but it is never really getting to the nitty gritty of it. I'm sure both are effective for my needs, but was just curious what yall thought. Thanks
That construct doesn't work if there's a list anywhere in that, unfortunately.
This isn't a "learnpython" question. python gives 2.7 python3 gives 3.5 After following the steps above, I should be able to: sudo apt-get install python3.2 python3.3 python3.4 and then run each of those versions. That's the whole point of deadsnakes. As I said, its for setting up a testing environment for a project that has to support all those versions. cf: https://github.com/waylan/Python-Markdown/wiki/Test-Environment-Setup
I've been using micropython on my adafruit huzzah esp8266 and 1 thing has caused me to sadly switch back to c **There's no easy way to get your code onto the device!** I ended up using this very nice helper program by adafruit, but you can't move entire folders which makes it a massive pain for moving a library: https://github.com/adafruit/ampy I don't see this ever really getting traction on the esp8266 until you can use it like the main micropython board and mount it as a USB device. The main micropython board is awesome btw. As an alternative, once `upip` is implemented (it's listed in the kickstarter) I'll at least be able to get the libraries I need. 
I know a lot about web scraping but in Visual Basic and now learning Python. Do you get paid well?
there is a difference in getting the job done and getting it done well. Idk how you can be in this sub and not understand the core philosophy of python
Everyone is naming framework and libraries; but i think that misses the point. I would argue the most important skill of python is understanding it's core philosophy and learning to use the language features to write clean idiomatic code. Raymond Hettinger puts out a lot of very high quality content on this subject and definitely worth checking out.
Omitting the fact that IDEs don't execute code (the interpreter does), code may be unreachable. For example when you have code inside a function behind a return statement. def fn(): return 1 doesntHappen() # never executed
How is the development speed/ documentation in your opinion? The documentation and lack of example projects was my primary concern when it was originally released. Thanks!
That;s the sort of question I'd ask when teaching `if __name__ == '__main__':`. Of course I know the difference between an IDE and an interpreter, so I would not phrase it like that.
Can you recommend literature? 
maybe he's just using google drive as 'cloud storage'.
Very good, but also very fickle.
https://developers.nest.com/documentation/cloud/data-rate-limits/
While I wish I could agree with you, I'm going to go out on a limb and say that most companies actually don't give a damn how clean and idiomatic your code is. As long as it performs accurately and in the realm of efficiently.
Let ~~stats~~ stars tell: (on Github) * MicroPython 3875 * eLua 445 * nodemcu 2680 * JerryScript 1903 MicroPython is the most popular (well, well-known) scripting language intended for microcontrollers. * esp8266/Arduino 3600 MicroPython is more popular than esp8266's Arduino port (which is likely strays far enough from the original Arduino to be called "incompatible", whereas MicroPython idea is "hardware-independent programming"). * arduino/Arduino 5988 MicroPython has 2/3 popularity of the original Arduino. Arduino is around for 10 years, and MicroPython hasn't yet closed its 3rd year. 
You might want to start with jupyter notebooks which can be very helpful for taking programming notes :) or repeating common tasks.
yeah until the boss says; "can you also make it do this? how long is that gonna take?" Well written clean code is easy to understand and extend. If you practice learning how to do this instead of memorizing frameworks; you'll be much better off as a python programmer. Having a well written code base has direct business value in that it isnt a mountain of technical debt that 1 person at the company understands. If you're at a company that doesn't care about code quality; then you should quit and go work for a sane company.
Wooo! Awesome :) I'll give it a try 
Awesome, thanks!
I have read most of Dan's blogs from the time I just started working with django and needed to deploy static files to S3 to this one. Every single time I learn something new and it's pretty awesome
All fantastic conference talks on the subject: https://www.youtube.com/watch?v=wf-BqAjZb8M https://www.youtube.com/watch?v=OSGv2VnC0go https://www.youtube.com/watch?v=bpZS9ehw98k https://www.youtube.com/watch?v=JlrkizEBjXk Also love this: http://noamelf.com/2016/08/05/designing-pythonic-apis/ 
Haha oh Reddit, why is it always peoples suggestions to quit their job? They do care about code quality, it doesn't mean they hire based on that as the highest criteria.
I mean; finding another job in this industry is pretty easy tbh. Point being that code quality is important, and i have no interest in a company that doesn't care. Almost all job interviews I've had dont ask about frameworks anyway; unless you're going into a specific and specialized subfield. Instead they ask algorithm and design questions. And it's difficult to actually find out in an interview if someone can write quality code, but if you can prove you can do it then you're that much more of an asset. 
Thanks. You mean use Requests to call the request URL in the post request? And how do I scrape as soon as there's new Ajax refresh? 
you call `r = requests.post(...)` and then call `r.json()` to get the data. From your description, it sounds like it's making the ajax call on a timer, so you'll just re-do the request call whenever you want new data.
This is also my first thought. When a line is commented out, it's not executed.
also: http://www.kdnuggets.com/
In general, you can't. If you're talking about the `str()`, you can "get it back" because it was never gone. Your interpreter will always have a reference to that because it's a builtin but you have to do some hacky things to put it back where you expect it to be. Just don't override the names of things you need later.
I **HATE** when newbies delete posts after getting a question answered. If we don't want it visible, downvotes will hide it. It's very likely the same question will be asked in the future; when that happens we can just link the previous post.
Hey there, bit of an odd question but I'll bite. I work on question answering in NLP. I use python all day with a TensorFlow back end to write neural networks which are meant to be able to read documents and answer questions about them in natural language. So I come quite close to being qualified to answer the question in your title: massive progress is being made in AI now, we are starting to see models which show signs of being able to do complicated reasoning on unstructured data. DeepMind's recent DNCs are an exciting example. Alas, we are still a long way from a general 'what if' machine, I think such a thing is probably AI-Complete. This is easily for me the most exciting thing you can do with python today. The way things are going the first AGI might very well be written in it!!
Wrong language. This is not an R forum like /r/rlanguage. Also, a polygon and an ellipse are not even remotely similar. You should read up on your problem. These are polygons http://www.math-only-math.com/polygon-and-its-classification.html This is an ellipse. http://www.daviddarling.info/encyclopedia/E/ellipse.html A circle is not a polygon. A circle is an ellipse. An ellipse is an oval with a fancy mathematical definition, but all ovals are not ellipses. All ellipses are ovals.
Version 0.1.2 now supports Python 3.
+1 for Python Requests. Sample code for a POST request that returns JSON: import requests url = 'https://example.com/liveodds.php' payload = {'event':'122849212', 'token':'aff3b34443cbd12134b294'} r = requests.post(url, data=payload) json = r.json()
This: https://pypi.python.org/pypi/selenium
I am one of those guys who use it for "everything". The alternatives exist for everything and could be slightly/a lot better. The beauty of Python is that it can do it all: heavy math and table manipulation, database access, web applications... things you don't yet know you will need tomorrow, like a foxpro reader. By centralizing on Python I get: * a highly inter-operable system * homogeneous code base * no need to learn/relearn other languages * fast concept to product time * did I mention the garganual amount of 3rd party libraries? Yes, even a foxpro reader I did create an insane program that run multiple server cpus into the ground, but my boss never authorized spending time to rewrite it in C. I ended up replacing it with external call to **grep** + regular expressions. 
&gt; misses the point I disagree, main skill is to know programming, be familiar with common used techniques, best practices, be able to work with people. Good to have general knowledge in CS or other relevant areas. Python skills may be a nice bonus, but not the reason company will hire you, `understanding it's core philosophy` is a nice bonus to knowing Python, but not more than it. The "know only language" trick may work with Java or maybe Android/iOS/web development, but those are bad developers. Only to know language is just not enough to do anything. Same as ability to sit still for long time doesn't do one a good QA tester. To sum all that, Python is a tool which help to do something, you good in that `something` - you are on the market and and your Python skills in demand, but if the Python all you know...
"framework and libraries" IS the core philosophy and contribute to "clean idiomatic code" more than anything else. I rip out my code if it can be replaced with a pypi module without hesitation, because that's one less library to maintain and the alternative is better maintained and documented.
code quality and idiomatic code are not the same things
Did you forgot to switch accounts before posting again?
This is so true in the software industry that it hurts.
IMHO tornado is a helluva lot better designed than Flask, the API is quite a bit more intuitive, less magical, more pythonic and more powerful all at the same time. 
For simple string formats I use %. Generally if I need to print more than two variables I use .format with a dictionary. See here http://stackoverflow.com/questions/5952344/how-do-i-format-a-string-using-a-dictionary-in-python-3-x If it's something quick, dirty, and temporary, sometimes I even use 'Hello ' + name. 
this was considered in https://www.python.org/dev/peps/pep-0502/#id85 imo, using the same syntax to mimick consistency is undesirable when the two things don't behave in the same way; python has no tags, and javascript has no string formatters.
&gt; I am new to Python For such tasks the shortest way to the solution is the best It should be the other way around - understand the task then choose tool. (ajax is not relevant here, it just a way browser makes request) 1) You have one site - you maybe don't need tool that knows to scrap any site 2) first you understand how data pulled - open browser F12 -&gt; network, browse the site. Copy in cURL format requests (or use some tool like Fiddler) 3) Do you need login to see the data? You need a tool which can keep the session, command line `curl`can do it, also pycurl or httplib (maybe simpler) next step is to choose a tool and that depends on what you found. maybe all you need import time, os while True: os.system("curl http://site.com/api?q=value &gt;&gt; data ") sleep(1) separate the tasks (common beginner's mistake) task 1 - get data task 2 - parse data task 3 - do something with it **don't** do it for raw_data in request(): data = json.loads(raw_data) parsed_data = parse_data(data) for a, b, c in parsed_data: process(a, b, c) do import csv with open('raw.data', 'w') as rf: try: for raw_data in request(): rf.write(raw_data + os.linesep) except: traceback.print_exc() with open('raw.data', 'r') as rf: with csv.writer(open('parsed.data.csv', 'w')) as pf: for line in rf: data = json.loads(line) for a, b, c in parsed_data:# pf.write([a, b, c]) # or just use Excel with csv.writer(open('parsed.data.csv', 'r')) as pf: for a, b, c in pf: process(a, b, c) 
The Javascript one is horrible to write on non US keyboards.
Oh no, it's an engineering thing. There are lots of people with extremely inflated egos - the same kind of people you often see writing the most terse, impenetrable, unreadable code, because it makes them feel smart.
Wow! A suggestion. Put your data in a text file, then just read it in. file: data.txt Hello. It's me! I'm going now. And the code: file: incomplete-story-program-thing.py with open('data.txt', 'r') as fp: # open text file in read (r) mode lines = fp.readlines() # create iterator of lines in file for line in lines: # for each line ... print(insta_print(character_names[3]) + delay_print(line)) # print the line If you need a quick way to distinguish between 2 types of line (for your delay effect) put a '@' as the lead character, and test with: if line.startswith('@'): delayprint(line[1:]) else: instaprint(line) You might also stick another code in the text file strings like `#name#` to mean player name. Then you can search and replace it like this: if '#name#' in line: line = line.replace('#name#', character_names[3])
How do I upvote this 1000 times?
% is considered the "old" style now. See [PEP 3101](https://www.python.org/dev/peps/pep-3101/) and the [string formatter options](https://docs.python.org/2/library/string.html#custom-string-formatting).
New style also doesn't work for bytes. Anyone know why they went with old style instead?
What about spoon? You get spoon stabbing with me. When can I start? 
Wow, I didn't know about itertools.takewhile(). This looks really useful!
&gt; if someone told you that you have to explicitly number the placeholders, then you shouldn't listen to them Well, numbering is helpful, especially when you have repeat strings &gt;&gt;&gt; print "Hello {0} White, {0} Dylan just won a Nobel prize".format('Bob') Hello Bob White, Bob Dylan just won a Nobel prize 
i read all of it. a grasp of math and abstraction could help you. here's more https://www.reddit.com/r/Python/comments/58hrn6/how_to_contribute_to_python_without_being_a/d91ixt1
no, actually it's misleading. someone might think it's a cartesian product type of thing (something you usually use a double for loop for ) , which it looks more like, rather than zipping them linearly. the suggestions seem very narrow-minded, catering to the handful of use-cases known to **you**. "and" is particularly poor, a comma would make more sense, but then the above still stands (cartesian product). 
I think regex and webscraping is assumed tbh... With Python I would say generally Django and python with postgreSQL would be what gets listed on job posts. As with all of these types of quesitons, Python is just such a general language that it really depends what you want to do with it that will determine what's in demand. 
unit testing doesn't get enough credit. 
I admire anyone who takes a chance at writing code, even relatively simple code, LIVE during a conference presentation. 
Hm, I haven't been stabber with a fork yet. Maybe this programming thing will work out for me after all...
Besides the excellent advice all ready offered about using csv.DictReader or Pandas, please don't use 'range' to loop, it is almost always a code smell. Use plurals for your container names, singular for the element names, and you have something like:- for student in enrolledStudents: doSomething(student)
But that one liner that replaced 1000 lines of code is so cool. If only we know how it worked and could get it down to less than 3000 characters. 
Pedantic personalities, pedantic personalities everywhere... 
Also really convenient for i18n, as the translator can easily reorder terms if necessary in their language. Also works with keyword (both old and new styles), but in the old style if a translator needed to reorder positional arguments they were POS.
&gt; &gt; &gt; &gt; &gt; Yes it does. Added in 3.5 Nope. Python 3.5.1 (v3.5.1:37a07cee5969, Dec 6 2015, 01:54:25) [MSC v.1900 64 bit (AMD64)] on win32 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; b'{}'.format(1) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; AttributeError: 'bytes' object has no attribute 'format'
How much you paying for this
Yeah, site is down. How does this compare to panda3d?
For knowing Python? Sure, my consulting rate is equal to that.
I used % for a long time as well, but know that I know how format works, it's way easier and more confortable to use: &gt;&gt; x, y, z = 4, "foo", 8.90 &gt;&gt; print("{1}, {0}! {2}?".format(x, y, z)) foo, 4! 8.9? &gt;&gt; print("{a}, {b}! {c}".format(a=x, b=z, c="bar")) 4, 8.9! bar? It's very intuitive and easy to use - you don't have to worry about type, order etc. anymore!
It is supposed to be outdated, since the new style is supposed to replace it. As about a dozen people have shown, the new style is a lot more readable in complex esoteric cases. The drawback is of course that it's also a lot wordier in the much more common simple cases, e.g. "a %s c" % str vs "a {} c".format(str) Not everyone thinks that making the common simple cases wordier is such a great design, so the old style has remained.
&gt; /r/learnpython Thanks! Really appreciate the feedback! 
David Beazley!
Would be great if that also worked for bytes...
In python or in general? I'd say in the context of software development writing tests might even be overhyped
Finding a sane company is the hard task.
I sympathize, but in my case replace Java developers with .NET ones.
I didn't even notice. Since they are equivalent, it doesn't matter which one you use.
I have no idea, but feel free to suggest it on python-ideas.
If you find yourself writing a python script heavy with `subprocess.call` and `subprocess.check_output`, etc., you should be using the [sh](https://amoffat.github.io/sh/) package.
I think I tried something like that and had an error something like 'list object is not callable'. And I was going to use xrange instead but read that the loop info would have to be rebuilt each time. In any case, thanks to all for the advice. I'm going to try the above plus the csv.dictreader (didn't even know that existed -I was initially trying to build the dictionaries manually after using csv.reader). I was going to post my question on Stackoverflow. Glad I came here instead. :)
Does every inner tuple have 3 elements? I'm inclined to think that this might not be reasonably feasible without some intermediate step converting to a list, since it's not possible to iteratively build up the final tuple due to immutability. Short of hardcoding it, I don't really see any way to define the final tuple all in one step. This does ask the question as to why you want to do this though. Care to enlighten us?
This is interesting, I might actually do this but if you're only paying in exposure dollars it might take awhile!
I'd encourage you to double check (or post it, for our opinion) the exact wording of the assignment that's asking for this. I'm thinking someone has misinterpreted what's being asked.
Most developers in general have less than awesome personalities
That's true for version 3.6. However, as you know from the Zen of Python: "There should be one — and preferably only one — obvious way to do it." And that way will be f-strings after 3.6. It would not surprise me if they deprecated `%` (for all strings) and `format` strings (for string literals) at least in the style guide.
Those people are rare in my experience of . NET. What I can offer you is clueless developers who can't use anything other than what Microsoft created... I'm hoping we will get "fresh" blood of the free software, always live in the terminal divas once the . NET cir tooling hits stable (sadly they're seemingly making csproj files XML so we will only get the masochist free software developers). 
Tell me about it... A few weeks ago I was running a connectivity test ( using sockets ) and i confirmed that that we didn't had connection to an endpoint.. And the following conversation went thru: -Please test it again, and properly this time - What you mean? i'm using a socket test, i guarantee that we don't have connectivity -Test it again, with the black application -Black application? - i was really confused -yes, you are using the new one, and some people of our team have confirmed that some commands and operations runs slower on the blue command line instead the black one. -Man.. you mean i can't use powershell? and you are asking me to use the command line... with black background? -yes please -You know that what you are saying doesn't make any sense right? -Please stop trying to do new things, just work like everyone else please. I can't transcript more because my blood is boiling again just for remembering this history. Anyway, he can't get fired because he is in the house for 20 years. Worse than legacy systems, are legacy people. 
Best of luck!
Any good company is hiring people who *specifically aren't socially underdeveloped assholes* though. I had an interview process where they just critiqued my code and asked me why I did things the way I did in a huge roundtable, the whole point was to see if I would get defensive and whatnot (it was like 12 people all facing my direction, grilling me). I was proud of their process. It made me feel like I was in good hands. I'd do the exact same thing to candidates. What baffles me is peoples' inability to cut their losses by learning a multitude of skills. Rather than just be good with computers (which is easy for them), few people want to do what is hard which is learn how to work with people. As if the number one advice forever hasn't been "get good with people, learn to listen intently". I just don't understand why it's not more common. People like that only hurt themselves and their careers. And their whole lives but I can't attest to that for sure.
The problem with f-strings is that they are not backward compatible. So until all Python versions before 3.6 are official unmaintained, I would take offense at them being the canonical way of formatting. 
I made something similar a few months ago but without the regex feature (thats a pretty good idea). Nice work yo.
One of Python's core principles is that "there should be one-- and preferably only one --obvious way to do it." And keeping % in the language after the switch to Python 3 is *the worst* compromise of this idea. They *were* going to take it out, but they backed out at the last minute. You know what this leads to? Nitpicky, holy war-style rifts in the community over whether or not the brevity of `%` in edge cases makes it worth using...in a world where 9 times outta 10 they're using autocomplete anyway. And, on top of that, they *also* left in a built-in `format` function on top of `%`, so there are actually three somewhat equatable ways to do this. It's bizarre.
add a ticket to the sanic repo so this doesn't get lost
Got it! Thanks!
not that this is wrong but i almost always would do "Hello {first_name} White, {first_name} Dylan".format(first_name='bob') which, while a fair amount longer, makes the string itself easier to read and will make it easier to change to use fstrings in 3.6
Did they tell you beforehand that the interview was going to be a 12 person panel reviewing your code? That's not standard in software interviews. Is pen testing different? 
One shiny upvote
&gt; Like HPC In my experience this has been one of the things that Python is well suited for. Interfaces to Spark and Hadoop exist as well as libraries like [dask.distributed]. dask.distributed allows running operations in parallel on many core and many machines. [dask.distributed]:http://distributed.readthedocs.io/en/latest/
&gt;Double quotes aren't required in Bash. [Stack Exchange suggests otherwise](https://unix.stackexchange.com/questions/68694/when-is-double-quoting-necessary). I quote (no pun intended): "it is far easier to use double quotes all the time than to remember when they are needed. They are needed most of the time, so you'll need to learn when they aren't needed, not when they are needed." &gt;Bash is especially hard And so more programs should be written in it? To be clear, I'm not against using Bash. I'm against using Bash for its own sake, or because of some reasoning that "less code would be less opportunity for error" -- that's nonsensical. I can name all my variables a single letter, but that doesn't make my code any clearer, and if anything it increases the chances of it being buggy as it becomes harder to understand. I'm not particularly interested in continuing this -- it started from a totally reasonable comment that said that this could've been written in bash, leading to a humorous jab at bash's incomprehensible conditionals, and then descended into snark (which I'm guilty of too).
believe me, that people need a manual about how to do telnet test, also, they are here since 1997 with no motivation to do anything better. 
There is actually a PEP for that: https://www.python.org/dev/peps/pep-0498/
That does not mean that there aren't differences between using powershell and cmd.exe. I've seen many computer-illiterate users discover weird bugs. All I'm saying is that "that's impossible" and "it's the stupid user" bugs are also worth investigating.
On mobile, so bear with me. For starters, I would separate any long running, prone to fail task (web queries) from a local fast operation (dataframe creation). Easier to catch errors, multiprocessing, or other changes. Can't see the code, but I'm guessing you have something like a source_list and result_list. You can just zip then together ( zip(source, result) ) and turn that into a dataframe that you merge with master using the source variable as your key. If the result list is in random order, the quick and dirty solution could be to return the result with the function argument.
Try this : http://harfang3d.com
Thanks!
Pretty clean, I like it. Nice work. Whip up a post about running this as a scheduled AWS Lambda task and you've got a some great blog material. :)
I saw no license agreement (but if it was JavaScript, I browse with it off by default so maybe that's why). In any case, the Harfang 3D *pricing* page states: &gt; We will then get back to you on a yearly basis to identify potential **revenue** on which you should pay **royalties** according to the following conditions. &gt; &gt; You are an individual or a company with a yearly global gross revenue of less than 1.000.000€.We ask for **3% royalties** for each year during which your **product gross revenue** exceeds **30.000€**. &gt; &gt; OR &gt; &gt; You are a company with a yearly global gross revenue of 1.000.000€ or more.We ask for **3% royalties** of your **product gross revenue**. (emphasis is theirs) edit: I'm not against people selling commercial software but is this type of thing normal for the gaming industry or something? The open ended nature of "on a yearly basis" doesn't set right with me. Perhaps if it was 3% of royalties up to a given, one-time cap, then this wouldn't make be feel weird about it. That said, I'm not the target developer for this type of library. I must admit, site looks slick and it looks well documented.
&gt; If log level is INFO, the string formatting for DEBUG messages isn't performed. This, and one other important property. Everything that hooks or extends `logging` operates on `LogRecord` instances so they can aggregate identical messages and track occurrences that only vary in their arguments. If you've ever passed pre-formatted strings to the logging methods and wondered why you were getting hundreds or thousands of distinct events in Sentry, this is probably why.
then they probably should do a `"".join(i, " bottle of beer ", i, "bottles of beer on the wall")` to avoid all parsing and unnecessary function calling. hardly readable tho. 
 &gt; python3.5 -mtimeit -s 'i=42' '"".join([str(i), " bottle of beer ", str(i), "bottles of beer on the wall"])' 1000000 loops, best of 3: 1.04 usec per loop &gt; python3.5 -mtimeit -s 'i=42' '"%d bottle of beer %d bottles of beer on the wall" % (i, i)' 1000000 loops, best of 3: 0.542 usec per loop &gt; python3.5 -mtimeit -s 'i=42' '"{0} bottle of beer {0} bottles of beer on the wall".format(i)' 1000000 loops, best of 3: 0.767 usec per loop 
believe me, that team don't dare to do these comands on a powershell: ping host or telnet host port because they believe that things only works on the black app ( yes, they say black app) The team isn't formed by skilled people, the team was formed by a group of people that can't be fired because they just cost too much ( if they are fired, company has to pay 20+ years of benefits ). Those people are stupid, and for my luck, i just have to handle then 1/2 times every 6 months.
&gt; In fact, in 3.6 there is a new new style, which largely uses the same syntax the new style but in a more compact format. It's not only more compact, but more powerful. You can for example write: print(f"1+1 = {1+1} and the result of f(24) is {f(24)}") with format you'd have to write print("1+1 = {oneplusone} and the result of f(24) is {fres}".format(oneplusone=1+1, fres=f(24)))
do you take offense at pathlib being the official ways to work with paths?
&gt;do you take offense at pathlib being the official ways to work with paths? To be honest, I don't know how pathic is implemented. If that's done in a way that's a parse error, the answer is yes.
Cool, thank you!!
Not sure of you're taking requests, but I'd like to see you do more with facial recognition. I know you've already covered it in a few tutorials but it'd be nice to have a series dedicated to facial recognition. Anyways, thanks for the tutorials. I just finished your python basics and am working on building a website in django now. I wouldn't be here without your quality tutorials. 
Is it just me or the `f'{}` looks not much different from a regular concatenated string...
he's a true beazd
Yes, that is exactly what I was saying that there are rate limits, but there is not definition of what the actual limit is. If you look at the following link, it shows that when using firebase, it only limits Write Calls, not Reads. Since I only need to Read the API that is what I'm looking for to have near real time data, without limitation. https://developers.nest.com/documentation/cloud/architecture-overview/
Indeed.. Mostly I'm confused. I think I'll probably keep using "old style" out of habit until someone complains in a code review, or upstream actually commits to removing it. 
Without asking you to write an essay, what is something Java devs do that's unpythony? I'm guessing writing every thing loaded with classes?
Another consideration is that the old style is significantly faster. 
 &gt;&gt;&gt; t = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) &gt;&gt;&gt; nt = ((t[i:i+5]) for i in range(0, len(t), 5)) &gt;&gt;&gt; tuple(nt) ((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15), (16, 17)) You'll have to use `tuple()` because tuple comprehensions return a generator. Specific indexes that are out of range don't work, but slices that are out of range are no problem. Just swap out those two 5s in the second line for whatever number you want (or a variable) to change the chunk size. Also, /r/learnpython is a more suitable place for these kinds of questions.
I am always taking requests! We've really not done anything specific to facial recognition, only facial detection. You could in theory use Haar Cascades for facial recognition, but that's not industry standard AFAIK. Not sure if or when I might fit in a facial recognition series, but I will keep it in mind. Usually, if I get enough requests on something, I will do it. 
It depends on your use case, but considering Continuum (the company behind conda) is primarily a Scientific Python consulting company that has multiple packages offering various levels of support and services, it's pretty safe to use in production. If you really need a lot out of conda it may be worth looking in to a support package with them.
Yeah, minus the `" + "` everywhere and with an easy way to place format specifiers, e.g., `f'{variable:d}`
Doh. No service on train. I thought Reddit would catch duplicates. Thanks
Although not limited to python, Watch https://www.destroyallsoftware.com/talks/boundaries and read "The Pragmatic Programmer" For me, that leads to writing way more classes, with way more well defined functionality (No egg laying wool hogs). I also drop asserts all over the place as a form of executable documentation. 
https://www.codecademy.com/learn/python
Wouldn't have thought a minor would break this, but... i'll give it a try
nobody said that they were
This might be apart of the problem - https://gist.github.com/anonymous/a5052766e18284581b6b90478fe9847c#file-craps-py-L143 https://gist.github.com/anonymous/a5052766e18284581b6b90478fe9847c#file-craps-py-L147
I prefer the old style for a number of reasons: * new style is python-only but my life is not python-only * you _should_ use it in logging * it's slightly faster * the common use case conveys more type information Via my exposure to other languages I've been convinced that "you shouldn't have to care about types" doesn't lead to writing good software _for me_. What I _don't_ like about old style is that it has built in syntax support with nasty edges. If that was removed in favour of `"%s".format(...)` then I'd have been fine with that. I will also admit that, for beginners, the new style has less cognitive load and is less confusing.
This is life in general.
At my company we use conda to manage our entire python stack across multiple platforms (OSX, Windows and Linux) and we haven't had any issues. Typically we have a metapackage that defines the specific requirements of a project. You could also use an environment.yml file, but these aren't always cross-platform compatible. The nice thing about a metapackage is that it has a formal recipe so you can use all of the standard conda meta information to control what happens on what platform. I guess you could also use 1 environment.yml file per-platform as well. Also, depending on what you need to get from pip, you might consider looking at what is available via conda-forge since this fills in a lot of the gaps between what Continuum makes available through the default anaconda channel and what is on pypi. 
Sure, it seems 74 other people thought it's true. I do bash scripting quite regularly and I find conditional statements much more non-trivial than other languages.
No one cares about numpy and scipy, theyre only looking for sklearn
An intermediate series is actually a very good idea. I'm currently at the point where I'm starting my own projects to get better used to using the basics of python in an actual program or app. I feel like an intermediate series is the one thing missing from your channel. 
.format(**locals()) # Fuck it
Yes.
I don't know what bullsilly is thinking but this is a well-known procedure, look up convex hull of an ellipse.
&gt;Another way which is somewhat fun is to exploit `self.__dict__`: Or using `format_map`: def __str__(self): return '({x}, {y}, {z})`.format_map(self.__dict__)
Here is my Python code for GET from the normal, but **Rate Limited** API. I'm sure the code is pretty sub-par but even though its messy, it works for a limited number of requests That is why I would like to go with the Firebase alternative. Maybe by seeing this code, someone could help me adapt it to using it with the Python Firebase wrapper import requests import json import time counter = 0 # Loop will run whenever a nested While loop breaks while True: # Address where API is request with authroization response = requests.get("https://developer-api.nest.com/devices/thermostats?auth=c.zWUFYLl.......cLP3") data = response.json() hvacState = data["Z9S1....aBu_Xk"]["hvac_state"] #Loop will run when Thermostat State is Off while hvacState == 'off' : # Address where API is request with authroization response = requests.get("https://developer-api.nest.com/devices/thermostats?auth=c.zWUFYLl.......cLP3") data = response.json() # Device ID and Thermostat State. Used to pull API data, must use Device ID. hvacState = data["Z9S1....aBu_Xk"]["hvac_state"] if hvacState == 'off': print "HVAC State: %s" % hvacState # Counter to watch while script is running, mainly for API Rate Limits counter = counter + 1 print "Count: %s" % counter print'30 Second Delay' time.sleep(30) # No requests for 30 seconds # If the state does not equal "off", end loop and jump to beginning of first Loop if hvacState != 'off' : break #Loop will run when Thermostat State is Heating while hvacState == 'heating' : response = requests.get("https://developer-api.nest.com/devices/thermostats?auth=c.zWUFYLl.......cLP3") # Address where API is request with authroization data = response.json() # Device ID and Thermostat State. Used to pull API data, must use Device ID. hvacState = data["Z9S1....aBu_Xk"]["hvac_state"] if hvacState == 'heating': print "HVAC State: %s" % hvacState print'30 Second Delay' counter = counter + 1 # Counter to watch while script is running, mainly for API Rate Limits print "Count: %s" % counter # No requests for 30 seconds time.sleep(30) # If the state does not equal "heating", end loop and jump to beginning of first Loop if hvacState != 'heating' : break 
Old style is also faster. In [3]: %timeit '{:s}'.format('foo') 10000000 loops, best of 3: 200 ns per loop In [4]: %timeit '%s' % 'foo' 10000000 loops, best of 3: 23.8 ns per loop 
Isn't {0} from c#?
A 24 day old account with nothing but codequs.com spam. Nice...
It's not only more readable; it offers a lot more features: https://pyformat.info/ Anything highlighted in the article marks a feature that cannot be done with old-style formatting.
&gt; I don't think anyone can do it without looking it up Speak for yourself. The flags are the same as `printf()` as used in C, which some of us have been using for decades.
I've built llvm on rhel7 and it's quite doable. IIRC you need to first build cmake, then llvm. "download, configure, make &amp; make install" work well.
That seems like a job for a batch file, not Python. 
I think its important to run everything in a virtualenv. I'd try to not touch, or install anything using the systems python.
You are not alone! `style='{'` not applying to log messages themselves is very annoying. Now I just use it like `logging.debug("Thing {}".format(thing))`. Can't wait for Python 3.6 to shorten this with the new formatting mechanism.
So continue using the old style everywhere because the new style randomly doesn't work. Got it.
Mandatory plug for https://pyformat.info
Took me a minute to figure out what you meant there. By my reckoning, you'd want to override [`logger.makeRecord()`](https://github.com/python-git/python/blob/master/Lib/logging/__init__.py#L301). But, I think that may cause the same issue /u/TomBombadildozer [mentions](https://www.reddit.com/r/Python/comments/58l5aj/is_it_true_that_is_outdated/d91qbg5/).
Yeah, that's definitely something that could have been done better…
The best IDE is the one you're most productive in. Doesn't matter if that's edlin on MSDOS 3. Very popular ones are Pycharm (my personal go-to, and I pay for the Professional version, Community is great too), VIM with some python plugins to give you IDE-like things (what I use if I'm not on my own laptop), Sublime Text with something like the Anaconda plugin (what I used before Pycharm), and PyDev. There are quite a few others. Visual Studio Code + the Python plugin are really nice, as is Atom + Python plugin. Really, it's whatever floats your boat. Find the one you're comfortable in and gives you the things you need. There's no "right" IDE.
A lot of people may disagree with me, but I'm in the school of thought that using a text editor rather than a full IDE is preferable. Why you may ask?in my opinion, it forces you to understand the code and file structure of a project because of the absence of features that IDEs have, and when something goes wrong, you're more likely to be familiar with all the interactions and find the bug quickly (again, this is just _my opinion_). Once you encounter the things that you do frequently and fully understand, you'll likely find a plugin or macro that will help you be more efficient with it, and can build up your skillset using it to your own requirements, rather than trying to learn "the way" of whatever IDE you may use. Best of all, you'll learn to use the standalone tools you work with so its a lot easier to modify your workflow and add or remove tooling as needed (again, just my opinion). It's like comparing a framework to a bunch of small libraries. You can go either way, the trade-off is usually just long term vs short term efficiency and upgrade/maintainability. Sublime text is the best/lowest mental cost choice , or if you want to make a great investment with regards to long-term efficiency, vim. Or Emacs if you're weird and into that kind of thing. If you don't wanna go that route, pycharm is probably the one but I'm not a python dev so don't listen to me. 
Check out the 'subprocess' library. 
We distribute a Python 3 GUI application on Mac, Windows, and Linux that uses PyQt4, gdal, matplotlib, pyopengl, etc. We use conda for all of our developers and beta testers and use pyinstaller to create an installer for each OS that we support. The biggest issue we've had is with version incompatibilities between various packages or packages not being fully tested before going out. The biggest problem was (and still is) gdal and to a lesser extent PyQt. I've had multiple cases where gdal doesn't have it's dependencies proper specified (no minimum version, missing dep, etc). So when I prepare for distribution and have the crazy idea to update the packages being used I go through a cycle of update, error, google error, force older version, error, google error, and so on. But once you find a version that works for you you are mostly OK...that is until someone comes out with a new build number with the same version and that build doesn't work for your application.
Excessive numbers of classes and abstractions. CamelCase. Being ignorant of common Python idioms or methods (though this is not exclusive to Java programmers). *Some* of the code in older versions of the Python libraries for Google's APIs were great examples of Java programmers writing Java in Python. 
Exactly this. And you can always call further python scripts from the batch file too. 
Part of it might be that I'm a 35yr old dude, mid career, that changed to a new career and that I'm trying really hard to seem like I know what I'm doing. Part of it is also that I came into development as a self learner, and if I got this far I would have *had* to take everything in stride or I'd never learn anything. Thanks, though!
Awesome, thanks!
I haven't used Django much but flask is pretty cool too. They're both super popular. 
That seems like a smart improvement that could remove the need for either of the others more than it does a third option. 
&gt; don't think an AWS Lambda task would work for something like this since it uses your Twitter archive to get your tweets, which is a manual process. Sure, but you don't absolutely need the archive for simple time-based filtering. The Twitter API will let you stream all your tweets. &gt; The execution time also might be too long for Lambda. If you wanted to do a rolling cleanup of old tweets, the first hit would certainly take too long to run as a lambda task. But after that, say you wanted to nuke any tweets older than X days... that would be pretty cheap.
Pardon my question but why post it here, it's a Java project, surely it would be better off in /r/Java, in my opinion even if you are trying to copy Python it doesn't make for a good reason to post it, it's not a project we as python users can make use of.
You should install cygwin and be like "Where's your God now?"
% syntax is ugly and hard to read if you're formatting a string of any length. .format often has unnecessary repetition. The new system allows you to plug variables directly into the string and is (syntactically) by far the best. 
This is how I write python. I used to use IDEs (pycharm mostly) or iPython notebooks in my browser (Jupyter), but now I use exclusively a text editor (depending on the system (mac, linux, windows) I'll use either Emacs or Atom), and run everything in a command line/terminal. I find I catch a lot of my mistakes easier without relying on an IDE, and I am a lot more productive. The work I do involves data analysis for astrophysical images/data sets, so I'm constantly reading in data in different formats (.txt files, .fits files, etc.), and it really forces me to understand WHAT I'm working with. So, I am definitely of the opinion that no IDE is best, even though people might scold me for this.
Not really. If you started learning Python after .format was introduced you were (at least I was) going to use .format(x=self.x). With 3.6 coming in f'({self.x}, {self.y}) is by far the most obvious. People coming into Python today will probably blow right past the old style string formatters, unless they are coming from another language that uses them. The old style string formatting system is only obvious if you're using it from habit or need the speed.
I'm primarily using vim with Jedi. But whatever floats your boat! 
What do you mean? Formatting a string does not involve `print` in any way.
&gt; I pay for the Professional version What features do you use that make it worth the upgrade? 
This doesn't fit the definition of an IDE. You're missing a debugger, and it's not integrated. edit: Thanks for the downvotes, but the definition of an [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment) is "Integrated development environment". Any modern usage of it includes an integrated debugger. Maybe he's using some pdb vim integration, but "vim with Jedi" alone would not be an IDE.
Cool. I'm diving deep into Python now. One of my dreams Is to start a remote consultant group. Do people do that?
OMG DID YOU REALLY SAID EDLIN I'M OLD
I heavily use the profiler and remote development bits, the SQL integration, it's nice to have the framework and js bits at times. Textmate bundles are also handy.
using an IDE to write python code isn't affecting your ability to understand your data, even if it's in different formats. No way pycharm affected your productivity in a negative way. 0&gt;BULLSHIT
Much batch code and assembler was written in edlin when I was knee high to a grass hopper, with a gleam in my eye and utter confidence that the world made sense and Pascal would be the language of the future.
Ya know there's a python extension to Visual studio that works perfectly. 
There's a difference between the question of which IDE is best, and which IDE is best if you already know some other IDE. If you are already familiar with Visual Studio, look into [Python Tools for Visual Studio \(PTVS\)](https://microsoft.github.io/PTVS/). I personally use Pycharm Pro over it because I am more familiar with it, though for some projects that are mostly c/c++ with some python, I will use VS+PTVS.
Not OP, but I use Cython which isn't as well supported in the community edition.
Not for HPC tasks like fluid dynamics, physics simulations etc. When you want to control memory to make the best of each processor it's more difficult in python. Plus writing CUDA for the GPU is probably easier in C++ for similar reasons.
Well, we'll see what happens. It does seem to me that f-strings are superior in every way to `%`, so I wouldn't be surprised that in the long run, `%` were deprecated.
If you are used to Visual Studio, consider checking out the official [Python plugin](https://www.visualstudio.com/vs/python/) for it. It's open source and has a lot of the Visual Studio features you are probably already familiar with. 
Op and professional developer - I use a text editor every single day. The terminal is my IDE. If I want to debug, I use a debugger. If I want to build, i use build tools. If I need to do X, I choose tool Y based on what's best for the task, and the decision is based on evaluation, not because it's built in to my development environment. Different strokes for different folks, but to say that professionals using text editors are irresponsible is pretty naive. I can't think of many industries or hobbies even where the "ready-to-go-all-in-a-box" solution is the professional way. 
It makes sense if you view Python as a 2nd language for people who started with C. In 2016, it's not reasonable to assume people know C or that they even want to continue using those conventions. It's about time that we have something pythonic.
I couldn't find the url but there was a blog post on continuum site saying that are in the process of giving up maintenance of python packages on its official channel to conda-forge. Update: url at https://www.continuum.io/blog/developer-blog/anaconda-build-migration-conda-forge
We use conda in production. The twist is, the production has no access to Internet, so I have a shell script that installs Anaconda + everything from scratch using both conda and pip to a directory inside Docker or VM which do have Internet access, then pack it in a tarball which gets copied + extracted to production environment.
I don't agree. We are programmers, who (hopefully) know several languages, not just one. It is indeed interesting for Python users also if you need to use Java but you miss the cool features of Python. At /r/java I'm pretty damn sure they would send me back here.
true, that was a bit out of context ;)
 # RegEx pattern for matching email. https://elliot.land/validating-an-email-address At minimum, the regex should be more like[this one](http://emailregex.com/#pythonregex) to match sub-addresses properly.
/r/learnpython Also, welcome to the club. You'll like it here.
What ever machine you're using it on now doesn't have ```requests```.
This strikes me as a ~~big~~bit of a bad idea to be honest. Regular expressions are good for some things, and have their uses. But their use should be avoided in many cases. For example, e-mail addresses: it's better to use a RFC2822 compliant parser; yours fails to match subaddresses (user+subbox@domain.com), and would also fail to match IDN domains, and probably other things. URLs? What about other types of URLs beyond http/https? Domains? `r'^([a-z][a-z0-9-]+(\.|-*\.))+[a-z]{2,6}$'` is a bad regex to match a domain as TLDs can have [more than 6 letters](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#English) nowadays, to say nothing of IDN domains again. Dates and years? Don't do that - use a datetime library, and *never* do any sort of calendaring [or time zone calculations](https://www.youtube.com/watch?v=-5wpm-gesOY) yourself unless you've made a career of it; too many things you (and I) probably don't know, and it's best left to the experts. Your library is less useful only supporting 1900-2099. HTML tags? Don't even get me started on why [this is a horrible idea](https://stackoverflow.com/questions/590747/using-regular-expressions-to-parse-html-why-not) - do not attempt to parse HTML with regular expressions. Your YANDEX_MONEY and UPPERCASE regexes can be very easily done without the overhead of a regular expression. UPPERCASE in particular won't work with anything other than Latin A-Z, say nothing of unicode characters in other languages. It's best to use [ICU](https://pypi.python.org/pypi/PyICU/) if you really need this functionality for all languages. Credit cards? There are [much better ways](https://en.wikipedia.org/wiki/Luhn_algorithm) of determining their correctness. Your IPV4 regex fails to account for numbers &gt;255, better off using [inet_aton and friends](https://docs.python.org/2/library/socket.html). Similar with IPV6. Your password regex - PLEASE do not use that on any production code. First off - [do NOT limit password length at all](https://stackoverflow.com/questions/98768/should-i-impose-a-maximum-length-on-passwords). If you want to prevent DDoS attacks due to utilizing say bcrypt or similar encryption methods, limit the useful length to something like 1024 characters. And absolutely do not under any circumstances limit the allowed characters - I'd be extremely frustrated that I can't use the type of passwords I typically use ("$~z4}]aZxn||k(\^NhS8B"). The only reason to limit password length is if you're storing them in a way where the encryption can be reversed, which you shouldn't do. File extension? Use `os.path.splitext`. Hex values? Do the conversion on `s.lstrip('#')`, return False on exception. Much cheaper. Zip codes? OK I guess you've set that up nicely. But better off using a database of zip codes if you're actually care about the accuracy of user input. I'm willing to bet there's some edge case in some country there that you're unaware of where your regex will fail to match. Probably. If I were doing such a thing, I'd be sure to very thoroughly research zip codes in each country I support. Hate to sound so critical, but the password regex triggered me a bit. :)
Yea, I thought the same, his split function is off by one.
Thanks for the advise. Your method of exporting to a log file would be easier but unfortunately the screen shot of the command prompt is integral to the project.
With regards to the ipv4, an address is 0-255.0-255.0-255.0-255 so as long as it matches that how is greater than 255 a problem?
That license - no chance. Sorry guys, my interest stops at the point you accost me with legalese just to see your site and find out about your program.
I have not facepalmed so hard in a while. The solution to this problem is to pick one and stick with it, not add another to the mix. &gt;This PEP is driven by the desire to have a simpler way to format strings in Python. The existing ways of formatting are either error prone, inflexible, or cumbersome. The f'' is more complex and irregular. It does literally the opposite of this, while adding another feature not backwards compatible within Python 3 itself. Why.
That they are run by the same functions underneath, but are different syntax for the same thing. That's the important bit. In fact, them being the same thing under the hood makes having both all the more redundant and silly.
Ah ok. Looking at his regex it would match things that looked like an IP adress but is not.
You need to post that file as a CSV - nobody is going to open a random xlsx file off the internet. How do we know you're not trying to drop malware? 
Hey, thank you for the info, I just updated it to a CSV. malware never crossed my mind! haha
Apparently not ;-)
Ok, that's better. CSV is much safer. It's a bit messy (that's excel for you), but I can work with it. Well... that code you are showing on SO is *vbscript* (not Python) as far as I can tell. What exactly do you need?
For a cleanup like that you're certainly right. That wasn't really my objective or use case though. I made my twitter back when I was in 7th grade and made some cringey/stupid tweets and wanted to nuke tweets with someone from a long time ago.
Oh I am sorry, my coding knowledge doesn't go passed web design. What I need is detailed in the StackExchange question. I have a dictionary in excel in which one complete dictionary entry occupies one cell. I would like to split this cell into two cells, the first being Language 1, the second being Language 2. Here is an example of the dictionary: A 1. the male or positive principle, yang 2. convex, raised 3. interjection of response 4. interjection of fear 5. vocative particle 6. a tooth in the Manchu script A A an interjection of casual response A I BUKDAN the outside edge of a piece of folded paper A JIJUN I ACANGGA a bronze identification token with raised characters used to gain admittance to a city at night A JILGAN a yang tone in music A FA SERE ONGGOLO see afanggala A SI a sound used for driving chickens or birds A TA (onom.) the sound of a commotion The output I desire: A | 1. the male or positive principle, yang 2. convex, A A | an interjection of casual response A I BUKDAN | the outside edge of a piece of folded paper A JIJUN I ACANGGA | a bronze identification token with raised characters A JILGAN | a yang tone in music A FA SERE ONGGOLO | see afanggala A SI | a sound used for driving chickens or birds A TA | (onom.) the sound of a commotion **these vertical lines are representing a cell in the B column... they are not showing up correctly on reddit. I would need a few conditions in splitting these cells. the split would need to occur either before the first occuring number in each entry (as in the first entry), before the first lower case letter, or before a "(" splitting it after the final uppercase letter in an entry would probably not work because upper case letters exist in the "Language 2" column as well. Is this possible? All help is greatly appreciated.
Don't use this. This project only provides code obfuscation! YEAR matches 1900-2099, usernames and passwords are completely arbitrary definitions, email doesn't match all emails, credit card matches a bunch of numbers separated by a hyphen, domain matches a bunch of letters separated by a dot, the list goes on. For every single one of those regex definitions I would have to look up the source to understand what the project had whimsically chosen to match.
Honestly, I suspect "why" is "because Swift has it". :-( There have been several decisions lately that seem to be in stark contrast to the principles of The Zen Of Python and have me scratching my head. I'm getting worried about Guido. Maybe being forced to use Python 2.7 at DropBox has left him bitter or out of touch or something. 
Plenty of languages have in-place string interpolation- Swift is hardly the first. You can rightfully claim that this violates `There should be one-- and preferably only one --obvious way to do it.` but judging from the failure of the previous two methods to gain a clear majority, you have to maybe just consider that they were both ugly, complex, and unreadable. And in order to fix that, `Now is better than never.`
What code page/language code is this file in? I'm hitting an error with this definition: GIOWAN 1. copper 2. section of an oldstyle Chinese book--ch&lt;81&gt;an I can only assume that the &lt;81&gt; code is not in the standard UTF-8 encoding. I have t go to bed now, but will take a look in the morning, when I get a chance.
Ah, with direct memory access and such. Agreed, that's more difficult. Python does have GPU libraries such as [numba], [accelerate] and [skcuda]. These all provide access to the GPU, and I've written [a blog post] comparing them. [a blog post]:http://scottsievert.com/blog/2016/07/01/numpy-gpu/ [numba]:http://numba.pydata.org [accelerate]:https://docs.continuum.io/accelerate/ [skcuda]:http://scikit-cuda.readthedocs.io/en/latest/
Thankyou for not choosing the "Now we have N competing standards" one
PyCharm introduced me to idea, now I use it for everything; web, java, sql, etc. 
Really? And what if you need to maintain two projects with conflicting requirements?
I think you misread the article. Continuum will always maintain their default channel providing core python and supporting packages. What they are doing is discontinuing is build support for community packages at anaconda.org. 
Depends on what features you're after. Pycharm is great if you want the kitchen sink approach. Everything built in. Git support, debugging, almost auto-evrrything, etc. You need a decent processor and RAM though. My older laptop didn't cope with pycharm too well so I went with Liclipse. It's a great little eclipse based editor with great default settings and add-ons which "just work". I know eclipse gets a lot of flack for being "slow" but in my case it worked much better on a slower computer than pycharm. Did almost everything I needed from pycharm anyway (I personally don't like git integrated into the IDE) Sublime Text also works very nicely with almost every language I've thrown at it. Mind you it's a text editor with syntax highlighing rather than an IDE. you can install plugins for it but great for quick edits and navigating code. You lose out on a bit of the automated stuff which comes with an IDE and virtualenv awareness. A few people at work use Atom but I haven't used it enough to give it a fair comparison.
no. No. NO. One thousand times NO. If you think the that the construction of a string template always takes place in the context of those variables being local, you are just wrong. Many uses of string formatting in larger applications involve constructing a template which is formatted *later* in an entirely different scope. The `x.format(...)` syntax is backwards compatible and matches the way most application do (dare i say "should") think about templates - it's a text representation to be filled in with data at a *later* time. Assuming the data is available in the same scope in which the string is created is just plain wrong. Edit: To be clear, I want Python programmers to create explicit templates (old style `'%s'` but preferably new style `'{}'`) and to eschew the new `f''{local}'` syntax because it adds a tremendous source of complexity and scope leakage. Just consider this piece of code and tell me you would ever use `f''` strings: &gt;&gt;&gt; a = 1 &gt;&gt;&gt; def foo(b): ... print(f'{a}, {b}') ... &gt;&gt;&gt; foo(2) 1, 2
&gt;This doesn't fit the definition of an IDE. You're missing a debugger Pdb and pytest.vim? &gt;, and it's not integrated. ? 
Ok here it is: https://gist.github.com/anonymous/dad5efad84a123fd10fd4d99f86de491
&gt;judging from the failure of the previous two methods to gain a clear majority, you have to maybe just consider that they were both ugly, complex, and unreadable. What are you on about? `.format` is a method just like any other&amp;mdash;so not complex&amp;mdash;and its formatting mini-language is tiny&amp;mdash;so it's not unreadable. I don't really see why people are always on about how ugly or beautiful a single bit of syntax in a programming language is, so I'm not sure how to approach you on that point at all. Taste differs there, I guess. But "neither one gaining a clear majority" is flatly wrong. `.format` was meant to be a replacement, and it's used everywhere in Python 3 code. All the "reasons" for using % in this thread were legacy personal preference of people from Python 2 and edge case speed. &gt;And in order to fix that, Now is better than never. Why yes, a minor release is the perfect place to add entirely new, non-backwards compatible features that does the same thing as what's already there. Any time you use this for the next however-long-is-reasonable-for-updating period, you're going to have to test Python's version and support the old version. Or you could just use `.format` once.
Saw the password one and was similarly triggered. Limiting complexity and length is a huge problem, this would only make it worse. Aside from that, OP, I kind of like the idea, but as others have said, most of these things aren't as simple as a regex to determine. The RegEx may be useful on the client side before doing more intensive processing on the back-end. Also, I wouldn't import this to get one RegEx, rather if I wanted to use one of them, I would copy it. Rather than making this a module it would be better for a web page, or even a wiki page so improvements could be easily made. I really commend the idea, but I don't think it is practically useful.
&gt; I really commend the idea, but I don't think it is practically useful. Same here. A library of useful regexes could be useful. After all, sites like regexlib.com exist and are found useful by folks. But you could also argue that those sites are a cancer - regular expressions are *way* over-used for problems they shouldn't be used for. This can really only be learned by experience. Way back in the day, I even made a "programming language" for automating web form stuff. I called it SHRec ("Scripted HTML Recognition"); - catchy right? ;) It was a mistake - it used regexes to find HTML stuff, and it failed whenever any nominal thing on the web page it was trying to work with changed. And that's to say nothing of catastrophic backtracking that tends to come along with parsing HTML with regexes. I think I even used regular expressions to parse the language itself. Bad times. I was just learning regular expressions, and thought they were super cool. They still are, but I limit my use of them to stuff where it makes sense. I guess my point is the alternatives are much harder learned, and I hope I didn't sound too hyper-critical of the OP. It's just that what the library currently provides happens to be a laundry list of the things that I've learned to avoid in the last 15 or so years.
We use conda in production and we use numba as well. I actually haven't figured out how to upgrade packages reliably using an environment.yml file. That is, if we bump a dependency version in there (usually in the 'pip' section), I don't know how to upgrade that package in an already-created environment. Does anyone here know how to do that?
I think I would use a batch file for this, with logging. But, with the requirements of a screenshot, I would imagine there is a program out there that can be called from a command line and screenshot based on hwnd, window title, or similar. This post lists at least a few that should do what you want: http://superuser.com/questions/75614/take-a-screen-shot-from-command-line-in-windows
Author here... When trying to wrestle through the many options I was extremely surprised that a straightforward (and modern) approach to CLI development wasn't readily available. Having previously done most of my CLI development with node.js, I'm finding that the 99% solution for CLI apps is Python. I couldn't seem to find a great "top find" article on this, so I wrote my own when I worked through the process. I hope you enjoy, and thoughts/suggestions/advice are much welcome!
Komodo Edit - easy to customize, lightweight, fast (~150M RAM normally consuming)
&gt; What are you on about? .format is a method just like any other—so not complex—and its formatting mini-language is tiny—so it's not unreadable. I don't really see why people are always on about how ugly or beautiful a single bit of syntax in a programming language is, so I'm not sure how to approach you on that point at all. Taste differs there, I guess. Take this: my_name = 'Chris' With new f-strings: print(f'My name is {my_name} and I'm awesome') If you want that with .format(), you have three options: print('My name is {my_name} and I'm awesome'.format(my_name=my_name)) print('My name is {} and I'm awesome'.format(my_name)) print('My name is {my_name} and I'm awesome'.format(**locals())) 1. Triply redundant. 2. Doesn't read left to right. 3. References a builtin function with notation unfamiliar to new users, plus limited ability to do any sort of static analysis or lexing to ensure that variables are valid. So which one of these would you suggest the community adopt, instead? This seems straightforward to me as a clear deficiency and not even remotely a matter of taste. &gt; But "neither one gaining a clear majority" is flatly wrong. .format was meant to be a replacement, and it's used everywhere in Python 3 code. All the "reasons" for using % in this thread were legacy personal preference of people from Python 2 and edge case speed. %s is used everywhere in python3 code as well... personal preference is rather the entire point- the new way isn't clearly better in any notable ways for most people, and so they never switched. Could they have removed %s and brute forced everyone to format, sure, but we'd still have the problem I described in the last paragraph. &gt; Why yes, a minor release is the perfect place to add entirely new, non-backwards compatible features that does the same thing as what's already there. Any time you use this for the next however-long-is-reasonable-for-updating period, you're going to have to test Python's version and support the old version. Or you could just use .format once. I would imagine it will get backported to previous versions of python3 as well, much like enum which was a new feature in 3.4 was. Do you have a source that says it will not be backwards compatible? I used .format() for a year professionally- still prefer %s and can't wait until f-strings.
The input file needed a *lot* of cleanup but otherwise you can do it with a bunch of regex patterns. There were 7 words/phrases with no translation given, I just made these "Unknown." [norman dictionary.txt](https://www.dropbox.com/s/yzdcguob7lz1m54/norman%20dictionary.txt?dl=0) cleaned up version [norman translations.csv](https://www.dropbox.com/s/z9ljsr4etvjfdmx/norman%20translations.csv?dl=0) split output [norman translations.txt](https://www.dropbox.com/s/ywskct2zxayxnou/norman%20translations.txt?dl=0) spaced pipe "|" format 
Have to request an extension each year, but takes about 20 minutes
it was the typo thank you! The randint rather than randrange i dont think was the cause and it ran perfectly after the typo was fixed. Thanks!
PyCharm always and forever^* ^^^^^*Until ^^^^^something ^^^^^better ^^^^^comes ^^^^^along.
If you update the environment.yml file to bump a dependency, you can then run: conda env update -f environment.yml and that will update the environment. I did a quick test of this, but I didn't check whether you actually need to be in the activated environment that's being updated or if you can depend on the env name in the file or have to use the `-n` flag.
I didn't know this was a thing!
For the love of God, *please* stop writing CLI packages for Python. We don't need any more. If argparse, docopt, click, argh, or any of the dozen other options out there don't work for you, then the problem in your code isn't a missing library, it's your approach to the problem. 
just request before it expires, and it does it instantly. i did it when i had 10 days left.
You didn't read the article..... It has nothing to do with creating a CLI package. It's just how to natively make a CLI app.
Also, depending on what the IP is for, not all are valid. For example, if you are looking for public IP addresses, there are private and localhost classes in 0-255. There are also non-routable (essentially useless) addresses, and stuff like 0.0.0.0, etc.. I just can't imagine a case where you would take input of an IP address and not want to validate it more than a regex allows.
Aha. I swear I looked for that in the docs and couldn't find it. Thank you for the help!
it was more about package setup than writing a CLI
I would bet you are on a Mac and actually running Python 2. If you're in an ide, make sure to select Python 3. If you're using terminal, "python3 my script.py"
Thank you!
Or if you want to use pip, you can type pip install -e . in your project directory.
&gt; What baffles me is peoples' inability to cut their losses by learning a multitude of skills. Rather than just be good with computers (which is easy for them), few people want to do what is hard which is learn how to work with people. It's a hard thing to learn though - I'm not even sure how someone would approach this. I know the key is to be able to understand the person in front of you - to see the world from their point of view. 
You can't uninstall with setup.py, right? That's why I usually use pip here. Though the command is a bit weird. Why did the choose -e for that flag?
 -e, --editable &lt;path/url&gt; Install a project in editable mode (i.e. setuptools "develop mode") from a local project path or a VCS url.
A great library that I use for writing CLI apps in Python is [plac](https://github.com/micheles/plac/blob/master/README.rst). It's an argument parser built on `argparse` but a couple hundred times simpler. It's almost so simple it makes my head hurt.
Don't know how this would be helpful, but for me great resource was David Beazley talks on youtube. As for books, http://shop.oreilly.com/product/0636920032519.do (Fluent Python) gave some great intro
I've been using docker for my Python dev ever since I began - never touched virtualenv. The problem I have is that Pycharm doesn't recognise that I have packages installed in docker, so auto resolution / hints, etc aren't working. Am I doing it wrong?
Why specifically 3.5.2? Your script doesn't run on 3.4? Also, try /r/learnpython next time.
These games usually have a lot of recipes so you probably want sqlite. There's a number of ways to do it. You probably want one table of (recipie/itemID, recipeName, craftingTime etc). Just header info and no components. 01, sword 02, axe 03, metal bar 04, wood block Then you probably want another table, with the rows being a tuple of (recipe id number, component, quantity). 01, 03, 10 # item 01 sword needs 10x item3 (metal) and 1x item 4 (wood) 01, 04, 1 02, 03, 5 # item 02 axe needs 5x item 3 and (metal) and 6x item 4 (wood) 02, 04, 6 Pretty standard RDMS layout. There's many other ways that'll work.
The language is named after Monty Python, so you're have way there. Know what I mean? Croydon. 
You're right. Thx
Best reply I could have hoped for 😭
It's a nice idea, but as many have mentioned, regex is a somewhat computationally expensive tool that should only be used in appropriate situations, since validation of most common types of data strings, like dates, IP addresses, and the like are almost always better handled by specialised modules. What's the point in validating a day as 01-31, if you're not basing that check on the month you're in, for example? Better to use the dateutil module and perform a more robust validation. And probably do it faster, too. Second, if you're going to use regular expressions, you should always validate that they work against both valid and invalid test data before using them, due to the simple fact that they're inherently fairly complex. Using a library module such as yours might provide access to a library of expressions, but it also obfuscates the expression itself. Third: Some of your expressions just aren't very good. Let's check out your IPv4 address match for example: IP_V4 = r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$" The above expression will match invalid IPs, such as "345.653.534.798" as a valid IP address, despite every octet exceeding the 255 maximum. It'll also only match against a full IP, and due to the start/end of string anchors being included, can't be used in the middle of another full expression. It might match valid IP "34.5.223.135", but it can't be used within another expression to match say, the URL "http://34.5.223.135:8080/page.html", and the start/end of string anchors mean that I can't even append to the regex string to match for any additional string content. Even if it was lacking these, the lack of capture groups also means that I couldn't say, use your library to extract an IP address from a string. Weirdly, you've avoided using start/end anchors and have used capture groups elsewhere in your library, meaning that this behaviour is totally inconsistent.
Try /r/learnpython. Also, do you have any code examples that illustrate what you're trying to ask?
I have absolutely no idea what you're asking about. What do you mean by "passing an object as an argument to call a method"? Why do you think it's different than "using an object to call a method"? The difference isn't obvious from your language. If you don't know the right terms to use, it might help to give an example as code.
And I firmly believe command line interfaces shouldn't be "pythonic". Pythonic implies you need to reference an API. They should be as close to what you do in the terminal as possible and you should be able to do basically whatever you want. I like docopt. I would kill myself trying to do this in argparse or clic. It's easy in docopt. Usage: mycode [-f FORMAT] INPUT [-o OUTPUT] [-s SHOT] [-m MAGNIFY] [-g GSCRIPT] [-p PSCRIPT] [-u POINTS_FNAME...] [--user_geom GEOM_FNAME...] [-q] [--groups] [--noupdate] mycode [-f FORMAT] INPUT OUTPUT [-o OUTPUT] [-s SHOT] [-m MAGNIFY] [-g GSCRIPT] [-p PSCRIPT] [-u POINTS_FNAME...] [--user_geom GEOM_FNAME...] [-q] [--groups] [--noupdate] mycode [-f FORMAT] [-i INPUT] [-o OUTPUT...] [-s SHOT] [-m MAGNIFY] [-g GSCRIPT] [-p PSCRIPT] [-u POINTS_FNAME...] [--user_geom GEOM_FNAME...] [-q] [--groups] [--noupdate] mycode -h | --help mycode -v | --version Primary Options: -f FORMAT, --format FORMAT format type (avus, cart3d, lawgs, nastran, panair, plot3d, stl, surf, tetgen, usm3d, ugrid) -i INPUT, --input INPUT path to input file -o OUTPUT, --output OUTPUT path to output file Secondary Options: -g GSCRIPT, --geomscript path to geometry script file (runs before load geometry) -p PSCRIPT, --postscript path to post script file (runs after load geometry) -s SHOT, --shots SHOT path to screenshot (only 1 for now) -m MAGNIFY, --magnify how much should the resolution on a picture be magnified [default: 5] --groups enables groups --noupdate disables the update check --user_geom GEOM_FNAME add user specified points to an alternate grid (repeatable) -u POINTS_FNAME, --user_points add user specified points to an alternate grid (repeatable) Info: -q, --quiet prints debug messages (default=True) -h, --help show this help message and exit -v, --version show program's version number and exit There's no point in learning a CLI tool that can't do that. &gt; For instance, if Click decides to change how help pages are formatted, all Click programs will automatically benefit from this. Screw them. I want that choice.
 def main(): import class new_object = class.Class() get_value(new_object) def get_value(object) print(object.get_value()) main() vs. new_object = class.Class new_object.get_value()
You should have really compares click to argparse. While click definitely looks beautiful, argparse is not so complicated to use that I would never consider it. 
2.7 is locked down solid wrt. new features, so there's going to be a problem writing code for both major releases. The renaming of stdlib fra 2.x to 3.x can be solved mostly by catching ImportError. An f-string is another beast, as a SyntaxError cannot be caught outside eval and exec. 
The PEP itself says it won't be moved to 2.7, but I was more curious about previous versions of 3.x.
Doesn't look great. Readme has zero examples and links to a PDF for documentation that I couldn't open on my phone. Went into the source docs folder for examples and found argument definitions like "...str, None...)" Unreadable. 
pdb? You must be joking. At least suggest pudb or something. 
It's a long read but maybe worth it because its co-authored by the BDFL, and you can get the code on github. I guess one advantage is that it's intended to be an example. [http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html](http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html) You could also look at [tornado](http://www.tornadoweb.org/en/stable/). I find it a little more accessible than the docs for the new stuff in the standard library.
I'm all but convinced
Neovim with a lot of plugins! * **File navigating** * ctrlp.vim * nerdtree * **Auto completion** * neomake * deoplete.vim * deoplete-jedi * **Better syntax highlighting** * vim-python-combined * **Handy tools** * vim-airline * vim-airline-themes * vim-fugitive These are not all the plugins I use, but these are the ones for Python development. I was considering maybe using utlisnips. For debugging I use pdb or pudb, depending on what want to do.
I'm pretty sure there is more than one. Most of the python learning books I read were hinting at Monty Python.
One reason of not using it .... It's slow and memory hog
You can use objects as arguments. As I say, it depends. In your example, using the object as an argument is pointless. In OOP more generally, it's very common.
There is a community edition that's free. 
There is a community edition that's free. 
Also, by the way, f-strings don't leak anything at all. The f-string is literal, so it's just syntactic sugar for the longer format string you're suggesting that people use instead: a = 1 def foo(b): print('{a}, {b}'.format(a, b)) Nothing else. &gt; Assuming the data is available in the same scope in which the string is created is just plain wrong. — No one is assuming that.
You're right about memory, you do need about 1.5G to use it with good performance. About performance: go to the /opt/pycharm/bin/ and change first three lines of pycharm64.vmoptions to -Xms356m -Xmx2048m -XX:ReservedCodeCacheSize=360m You'll probably need to adjust PyCharm root path, and remove 64 from the name of the file, if you're using 32-bit system. You may use other values, but the main thing is Xmx one, add at least 1024m there. I currently have three projects opened in PyCharm, all working smoothly and memory consumption is about 1.2G. I can live with that. 
 Guess I just need to create a blog just for presenting the features of PyCharm CE. The article does a poor job, I agree. Really don't understand, why everybody're still using their vim/emacs/awtom/sublime things. I mean, I do understand that lightweight editor is handy when you're creating a little script with, idk, three-four pages of code. But if you have a decent sized project, and everything's gradually starting to get messy, you'll need all the help from the IDE to simplify this. But I guess I won't be able to explain this properly now anyway, with my not-so-perfect english, and reddit medium=( 
They may have improved support since I last tried it but this is what I do. docker-compose up -d &lt;whatever im working on&gt; run the steps in [this post](https://docs.docker.com/engine/examples/running_ssh_service/) directly in the dev docker container using docker exec -it &lt;containerid&gt; /bin/bash setup a remote interpreter pointing to the correct python path. the image I use has a system interpreter at /usr/bin/python but the one I need is at /usr/local/bin/python Boom, auto resolution / hints working. It's a pain to setup but so far it's worked much better than the docker plugin. 
If you do webdev, it's missing [quite a bit](https://www.jetbrains.com/pycharm/features/editions_comparison_matrix.html), unfortunately. Granted you likely are missing many of those things in most other editors, at least to the same extent.
Thanks for posting this. I think these comments are actually all really useful and I think you could include these recommendations within the comments in the repo. Seeing what a regex could look like and why it's better to not have one (with alternative options) while providing references to standards documentation like RFC 2822 for email addresses could help people get started and learn best practices for a production implementation. 
I probably wouldn't use click in place of argparse for an application with a single command, but having read the examples in the docs, I could see it working a lot better than argparse for applications with multiple subcommands. I'm quite keen to try it now and see how it turns out in reality. 
Trying this myself now. Another issue is the default key bindings clash with Unity. Pycharm has the bug open for 5 years but chooses to just remove unity on all their machines. I'd really like to use key-bound features more. It may be cross-platform but good luck learning all the differences between the key bindings across the platforms!
Not quite sure what you mean by that? Explain how it'd work and I can tell you if I've seen similar.
I use pycharm, the windows version makes installing most packages easy on that OS. It's also easy to use different versions of Python. Then I have a third install separate from the IDE for Panda3d which I never got working with Pycharm.
&gt; Really don't understand, why everybody're still using their vim/emacs/awtom/sublime things. Different tools, different use cases. Personal tastes, experiences. People gradually grow into their tools, become proficient and productive. They get the job done. Is it really hard to understand? 
I work fast with vim, it still has auto completion, not as good but it's all I need. Most of Pycharm's features are nice, but not required, people have their taste, and load of features isn't necessarily good
That's much better, thank you!!
Emacs isn't an IDE. Emacs is an OS. You're probably thinking of elpy. 
If your code is so complex you can't figure out how to edit it without an IDE packed full of all the latest features, then maybe you should practice with vi for a while.
Awesome, will take a look, thanks!
I really like Pycharm but I wish it was a little more pretty looking. Their logo is very neat but the GUI is not as sexy as Sublime or Atom. 
Using a theme helps. 
Unity steals meta keys like ctrl alt and windows. So there are many to map if you have unity.
Why strings and not function references? `seek0ing = blanking(file.seek, 0)` is just as readable, and somewhat stronger typed.
You could also make it a function: `seek0ing = blanking(lambda self: self.seek(0))`.
it's a bit more typing but sure that would work
One thing you could do is forward all args/kwargs as extra args/kwargs to the first argument (which will be a callable). Then you can do both `blanking(file.seek, 0)` (will call `file.seek(obj, 0)`) or `blanking(lambda self: self.seek(0))` (will call `(lambda self: self.seek(0))(obj)`.
I actually went from PyCharm professional to Atom and then to Visual Studio Code. Your experience is not the only experience.
I'm using a Community Edition for about a year and very happy with it so far. At first I was disappointed with performance (like with any other JetBrains IDE), but SSD solved the problem.
 &gt;Honestly unless you tend to run a million things at once I don't really see the issue with high memory utilization. I think the issue is that people do run a lot of things at once. Personally when doing development I have at least 1 Vm going, my IDE, documentation, a bunch of browser tabs, Slack or something like it, plus whatever data I'm actually working with.
My favorite pycharm feature is it's ability to recognize a function from a library that's not in your venv and install it for you. Also, it helps when I keep screwing up my module design. I'm not a huge fan of the way Python handles modules and relative imports and keep getting it wrong.
Are you on an SSD? Now that I'm used to SSDs on both my work laptop and personal gaming machine, but still have to use HDD machines in certain contexts at work, machines with mechanical drives are just noticeably less responsive. To give an extreme case, I started work with a MBP with 4 GB of RAM and a mechanical HDD. I installed Parallels and the machine was unusable on both ends when I fired up Windows. Upgraded to 8 GB and largely the same. Finally I got myself upgraded to 16 GB (it was a model that officially only took up to 8 GB 4x2GB, but everyone knew it could take 16 GB 2x7GB, but the manual said only up to 8 GB because 8 GB sticks were so expensive that even Apple didn't think they could justify the markup) and things got noticeably better. But then I switched to a machine with 16 GB RAM and an SSD...I still manage to grind the entire machine to a halt (and I think that's CPU utilization issues), but most of the time with how fast SSD swap is you barely notice beyond maybe 5 seconds what's going on.
Any editor that ships with a "power saving mode" just feels wrong to me. 
[Dark on light](http://i.imgur.com/YV3oSUV.jpg).
Honestly when I've been looking at our devs who are using vim they seem to be slower than me at navigating code and have a harder time getting the full picture of a commit. It's just anecdotal but that's been my experience fairly consistently. Sublime can be set up pretty well though. But I do believe graphical tools give you an edge, at least unless you know your tooling to the hilt, which far from everyone does. Edit: Cool, let's bring on the downvotes for stating an opinion and experience. How about saying your problem with it?
when I first wrote this I didn't even have `*args` or `**kwargs` because most of these finalization methods don't take any args. I added it b/c it seemed like a good idea and made the seek example possible. I'm not sure if being able to pass in a callable is really an advantage. It transfers complexity from the implementation to the user without providing obvious benefit, but maybe I am overlooking something. Can you show a practical example of where you might use that?
Yeah, but at least it implies that something is going to be called, whereas `blanking('close')` is just complete magic.
1.5gb of ram for an editor? Fuck that.
My example in that blog post is probably too simple to show off the real power behind click. Having a few nested commands would highlight clicks' group or context features much better, which might show how it scales simpler than argparse does.
&gt;relative imports Just don't use them. 
I really dislike the subscription model for dev tools. I've paid for sublime as my default text editor but I'm not prepared to pay hundreds/thousands of pounds during my career for any one ide. So pycharm CE only for me.
Don't store it recursively. Have the recursion happen in your calculation code. recipes = { 'NobleSuit': { 'Fabric': 5, 'FancyFeather': 1, }, 'TradingClothes': { 'Fabric': 5, 'RedPowder': 10, 'BlackPowder': 10, }, 'Fabric': {'Thread': 10}, 'Thread': {'Cotton': 10}, 'FancyFeather': {'RegularFeather': 10}, }
And, it requires Java. 
Can anybody elaborate on how pycharm code completion is better than Sublime Text + Anaconda, or any other editor + auto-completion plugin.
900lb Unicorns. I love pycharm but man is it heavy.
In Python everything is an object already so that statement doesn't really make sense.
Thanks=) 
[removed]
I did read the article. I was adding a topic of conversation to the thread, since this post doesn't really offer any. 
Not everyone has the luxury to work with state of the art. With some local servers and other tools running, ram can become low very fast on a real dev-machine.
that does not change the fact that the "old way formatting" was updated to work with bytes while `.format` does not. both ways are valid ways .. I would not call the old one outdated or replaced.. it's just the old way ;) otherwise they would replace the "old way" formatting in the stdlib, wouldn't they?
Community version is apache 2.0 licensed. 
Your point is correct. I'm trying to express my position, and it's not black-or-white. Ignore it, it's my first post on reddit, I'm not quite used to this discussions. 
How much do you spend on coffee over your entire career?
Additional features such as the integrated profiler. There is a list on their website.
This is probably a paid ad, so skepticism is prudent.
&gt; I hope to get a good data analysis or other related job You're probably going to be coding for a living then.
Exactly, it's not like I'm trying to run pycharm on a raspberry pi. 
It's less dynamic in this case because your function only allows calling of member functions, not free functions. 
I do a lot of DevOps/Administration kinda stuff in addition to development. I'm already on the command line 90% of the day, having my text editor there and having it available on every remote machine I touch is wonderful. 
There's many frameworks you can learn. Pick one to know well and be familiar with the rest. **asyncio** * http://www.blog.pythonlibrary.org/2016/07/26/python-3-an-intro-to-asyncio/ **Twisted** * https://twistedmatrix.com/documents/current/core/howto/index.html * https://doc.scrapy.org/en/latest/ **Tornado** * http://www.tornadoweb.org/en/stable/index.html **Gevent** * https://www.youtube.com/watch?v=GunMToxbE0E
I use the db tool as my default now. It's soooo good compared to pgadmin.
It's not slow, and if the memory it consumes is actually an issue for you then you must be using a PC from 2001.
It's like a couple hours of work tops over the course of a year to pay for it. Do you pay for any monthly web services for your work? I do. Do you pay for an OS license for your work? I do. Do you pay for servers or hosting for your work? I do. It's just another business expense, and an extremely minor one.
This seems like a problem with Unity, to me. Currently using it, but I'm switching back to KDE as soon as I have a free weekend.
Object finalization functions are typically instance methods If you want a free function context manager why not just write a function and decorate it with `@contextmanager`? you could also provide separate factories for the two cases
I have a similar problem with unicode hex input on the Mac. It's ironic as they're primarily a Russian company and all the developer names I've ever seen on their bugtracker are slavic.
&gt; using objects as arguments There is nothing else you could pass as an argument.
And most employers pay for dev tools too. The coffee argument has always confused me. 
Visually, I doubt anything will ever match [some features of Atom](https://atom.io/packages/activate-power-mode), but you can certainly make Pycharm pretty enough for ~~regular~~ sane use.
It just works. All of the other ones I've tried routinely fail.
It had to be harder to submit this post than to just google "python", and see that there is a [download](https://www.python.org/downloads/) page with no mention of any price.
I did think of that, and on further modifications i removed it; and on another note, now that you mention it i did call it with the intention in mind of using it as a class method, should i just remake the function itself as a "normal" function in order to use it the way i did? 
They might not be referring to price. https://www.gnu.org/philosophy/free-sw.en.html Python has a GPL compliant so yes it is free. https://docs.python.org/3/license.html
[Pretty enough for me!](https://s13.postimg.org/6iu2uht0n/Screen_Shot_2016_10_22_at_1_17_47_PM.png) I think I use the same theme in Sublime, too.
Don't know why you are downvoted. But we have not been trained for paying up for digital things. Everything has been free and we have grown accustomed to free culture.
Have to agree... saying "it's all I need" is basically shorthand for "I'm comfortable handicapping myself with this clear limitation".
Holy shit, you actually use the right click menu to jump to implementation? What do you do to import a module, middle mouse click, press your foot pedal, and lower your chair?
The only reason I know of to use it over WingIDE is it has error checking in realtime. Interestingly, so does Eclipse. WingIDE has a debugger that is 100x better than PyCharm and Eclipse's is unusable as far as I'm concerned. Code completion is standard in every Python IDE. Type hinting would be nice in WingIDE, but I mainly use Python 2.7; stubs would be fine, but there is terrible documentation on those. SQL would be nice if I cared about that. The git thing is neat, but I'm on the commit early commit often mindset. I know-ish what changed. I'd rather have a quick git blame. That would be useful. Code coverage, having a package manager, and refactoring is also standard.
Well I do code on the go to and laptops can get expensive with i7s and 16gigs of RAM. Definitely Macbooks.
thank you so much sir, the problem has been solved!! 
see !! 
PyCharm has a pretty decent vim mode.
Interesting about eclipse and setup. IntelliJ was really useful when I burnt out on eclipse. I'm curious now to test things out -- have to compare Liclipse. I'm working on a new MacBook and have a really smooth experience with the Idea products. 
Did not know that thanks. Will probably give that a go for the profiler. Is the licence similar to ST, ie multi device?
I use windows on my laptop (surface book) and linux on my desktop. Developing on windows has been fine and I got emacs + tons of utilities all working. Hasn't always been straightforward though, linux is a much smoother experience. You are unlikely to run into issues you can't get past with windows unless you are doing something specialized (some emacs packages aren't ported, compiling some scientific computing packages beyond conda is hard, deploying...) People hate on windows too much, you can get very far with it.
Nothing as I can't code effectively while caffeinated. If we reduce it to any other drink, well yes I admit to drinking water regularly in order to stay alive ;)
I complain about it plenty.
Yeah. I love his podcast, but he has a habit of always adding a "oh yeah, PyCharm is so awesome" or "I personnaly use PyCharm" whenever someone brings it up or brings another IDE. Makes me wonder too if he is just passionate about this product or has an incentive to do so. 
for now... 
&gt;Try it for a while? That could tie me into a workflow that I may ultimately decide isn't worth the cost of the license and yet still regret the costly work-hours to unwind it, which is why I'm asking about it to help reduce the risk of being caught in such a situation.
You can install it on as many devices as you want, though of course you can only "use" it on one at a time (the IDE will talk on the network to see if there's another running instance using the license and tell at you to shut it down before you can launch it elsewhere).
&gt;Is python development in windows environment bearable? Sure, with anaconda python development on windows is just fine. But why not linux? If your primary requirement is python development, then why go for second or third best?
I might do ... but I also use my laptop for some software you can't get for linux. Dual boot is fine but it's still annoying to have to switch OS for different tasks.
This is amazing :D 
Atom's UI: http://i.imgur.com/GiapfdX.png I really like it. Sublime: http://imgur.com/MeX2H99 (less pretty)
I use Macs for OSX, not for their hardware. If you don't like or need OSX you don't need a Mac. Python development on Windows is perfectly fine, and you'll get the benefit of a cheaper system with far more configuration options and accessories (docks, detachable batteries, detachable tablets, etc). My personal laptops are nearly always Thinkpad X's with Linux on them and the only reason I use OSX for work is for tooling that we've designed specifically for OSX. It's all about what you prefer and are most comfortable using. With that said, not sure where you're at in your career but there are a huge number of development groups that only build developer tools for OSX/*nix, and some that only build tooling for Windows. That might be something to consider if you're job hunting. I've worked at plenty of places where if you didn't use the OS that most/all of the other developers used you'd likely not be hired as onboarding you and keeping you as productive with all the latest and greatest internally made systems/tools could be a huge task when that 1 person starts with OtherOS. Example; if I hired a person who developed on Windows today I'd have to dedicate at least a week getting our staging/testing (Kubernetes/Docker) instruments to work on his system. I'm not bashing Windows at all. I just don't have any tools for it to mesh into our current development workflow. If it's a dev shop where you just pull from a repo and write code it's a different story. Just food for thought.
Let's be clear: I would never force anyone to switch tooling. I've just noticed a pattern. And I do agree with your sentiment, it's important to know how to live without a graphical tool. But I've seen plenty of people who are downright unproductive in console tools, for reasons that are easily improved in graphical tools. That's all. Even then, people need to find that out for themselves. 
I recently switched from Notepad++ (I know, the dark ages) to VS Code, it has most of the features in the article and totally free.
The only reason I need not to use it. It isn't `open source`.
I haven't run into it recently and I tend to leave it open on my work laptop which doesn't go to sleep on the dock, so I don't know if they removed that check, tweaked it or if my switch is filtering the multicast traffic (pretty sure I have multicast helper enabled, dunno) - but I know it used to anciypme years back when I first bought IntelliJ ultimate edition in 2012 during the apocalypse sale.
I've used PyCharm and idea for java. Love both of them! Now I just need to figure out the ipython integration and I'll be sorted 
PyCharm is the dominant IDE for Python, so I don't think it's any more surprising to hear someone recommend it than it is to hear someone recommend SQLAlchemy, Django, or Scikit-learn.
I second this. I'm really impressed by VS Code for Python development. Of course, I don't work in a full python house, so others are probably better able to speak to it's deficiencies. 
Import it like any other python module and use it. See the 'usage' section in the readme. 
I actually use pdbpp. And because of that, sometime I forget if I use pdbpp or pdb
You could make the same cheapskate argument for anything on the planet that requires money, hardware or software or bare metal.
I'm curious as to your use case for massive python files. What's considered to be too large ? 
Framework integration is the big one for me. SQL completion. SQLAlchemy in the debugger and Flask / Django awareness are worth the money to me.
&gt; The only reason I need not to use it. It isn't open source. While the Ultimate editions of the IDE are not open source, the community editions [are](http://www.jetbrains.org/display/IJOS/FAQ). They use the Apache 2.0 license and have their source code available on GitHub.
VMs can use a lot of memory - another OS worth, basically. Data science and big data can as well. Games don't really use much memory.
You don't need the if statement in your for loop because the for loop will end before it reaches 8. Also, you don't manually add 1 to the variable "tries" as the for loop will automatically increment the variable by 1, starting from 0, until it is one less than the value in range() which in this case is 8. Really, you just need the second if statement to be in your for loop to test if the password is correct each time and put an else statement to print when they are wrong.
No renaming though, which kind of sucks.
 password = input("What do you want the password to be: ") username = input("What is your name: ") print("Welcome " + username + " to the Password Guessing Game. You have 8 attempts to guess my password. Good Luck!") for tries in range(8): print("You have ", 8 - tries ," tries left") guess = input("What Do you think the password is: ") if (guess == password) : print("Well Done!") if(tries&lt;1): print("It Took you", tries+1 , "attempt to guess the password.") else: print("It Took you", tries+1 , "attempts to guess the password.") break else: print("Try Again") tries += 1
jedi has renaming, which I never used anyways because grep/sed
I get an error saying: builtins.ImportError: No module named 'fuzzywuzzy'
Thanks!
PyCharm Community Edition is also completely free.
If your IDE saves your only four or five hours over a year, it has more than paid for itself... 
It looks like I got your comment while you were still writing it, so I'll follow up the new version with a second reply. &gt; I actually like and have no problem with Qt and its licensing model :) &gt; But not like the castrated version model :P Uh.... still more bad news for you. Qt uses what is arguably that exact ["castrated version model"](https://www.qt.io/licensing-comparison/).
How much does a car cost? It really depends on the web page being scrapped, and the depth and complexity of the statistics. Also your demographic could play a major roll, are you in the United States, India, South America? You could ask 100 programmers and have 100 different quotes. $500, $1000, $10000, it all depends, you should get a detailed quote from individuals and agency's .
With great power comes great responsibility. Maybe sometimes power users want a little less responsibility?
Not even that, it just gets used as a disk cache instead of filled with a program. Whoopee doo
A quick look... msg ** e I don't believe will work. You'd need to convert each letter in the string to ascii first (?) then do the pow() Also, the input fields are text, so they need to be converted to int before doing math with them e.g. int(p.get())
A reason for you to update your 286mmx. 
Add debugging to that list. Yes, you can use pdb, but it's much easier to just click the line you want to start at and run in debug mode. That's actually why I switched away from vim. 
&gt;I want the code well documented. This is a strange stipulation to make while asking that question. You might consider including a bit more information. How is the data structured? Will the data you want need to be weeded out of other data? Will it need to be altered? Is the source website reliable? Does it allow scraping? What is the source website? I understand you may not be well versed in the specifics, but I know you can provide more information than you have. You know your question is too vague for an answer, so I'm not really sure why you bothered posting it.
How do I set up the git visualization? That looks amazing. 
Do you really find the autocompletion in Jedi to be good? I find that it doesn't work most of the time. Do I need to configure it to have it work correctly with virtualenvs, custom modules, etc..? 
I use a 2GB Lubuntu VM for PHPStorm and PyCharm. It works alright for me.
PyCharm coupled with Anaconda made setup a breeze on Win7 w/o admin rights.
Yeah, generally the format is to roughly equal someone's post length, and provide a polarised view.
And that's exactly why f strings are a bad idea. They're not strings. They're little mini-interpreters that execute code.
It's pretty normal for Russians to incorporate outside of Russia. The enforcement of Russian corporate law leaves much to be desired. The founders of jetbrains and most employees are Russian. It is a de-facto Russian company.
[moviepy](http://zulko.github.io/moviepy/) might be useful to you.
I wish that more Vim users like yourself would share their configs and workflows. Vim, for me, is far short of PyCharm, and I used Vim exclusively for over a decade. I hear a lot of people talking about how Vim is as good as PyCharm, but it's top secret ninja stuff how to get it that way. Also, PyCharm's Vim emulation is really good.
&gt; Honestly unless you tend to run a million things at once I don't really see the issue with high memory utilization. Huh? If you're running a multi-processing computer, like all non-toy computers for the last 20+ years, why would you not? I've currently got 51 windows open on my computer: five terminals, seven file manager, two word processor documents, three web browser windows, twenty six text editors, one PDF viewer, and seven assorted others. And all this is in just 2 GB of memory.
Well aren't you lucky. 100GB of RAM? Some of us have 2GB of RAM.
&gt; can't you afford an extra 2GB No I can't. We're not all made of money you know.
mhm... interesting... Does it have CTRL-D ? No? Ok, moving on.
More like [$50 or $60, plus shipping](http://www.myshopping.com.au/PR--912_1_GB_PC3200_DDR_RAM__fs_847_e__).
2003 actually. Not all of us have the money to throw out a perfectly good working machine and spend another couple of thousand on a new PC every year.
Mind. Blown. 
Down-voting for posting an image instead of actual text. Programming is about writing text, not drawing pictures. You don't edit your code with Photoshop, you use a text editor. Copy and paste the relevant text, don't take a screen shot. Text can be edited, it can be pasted into the interpreter to run it, and screen-readers can work with it for the blind and visually impaired.
I've had a Mac for work for the last 8 years. Next laptop I've told myself I'll switch to linux. As someone who was educated on developing on linux, I can't imagine switching to Windows as my main dev machine. Writing quick single purpose scripts on linux just feels right, on Windows it feels like a chore and a hack and I imagine I would have a tough time (maybe that's my fault and not the OS).
- Debugging tools - Code completion - Code generation - Build tools - Deployment tools - Testing tools - Database tools - Refactoring tools - Code analysis - Framework integrations I use all of these things every single day.
You can buy a laptop for like $400 these days with 8GB+ memory. If you buy used, they're even cheaper than that. Hell two years ago I bought a 14 inch HP laptop with a dual core Core i5 and 8GB of RAM for $120 on Craigslist. Honestly I'm not sure how you can be in the software industry and not be able to afford to have more than 2GB of RAM.
That's like maxed out with a large project. And 1.5GB of RAM in 2016 is fuck all.
But...its not free... :(
I also have an SSD, but I'm still not impressed by PyCharm performance. I blame it on Java, so they will never fix it. I still use it tho. Recently I've installed new version of VS Code and I think I will transition to using it more, after a bit of configuration it's really awesome. Way better than Atom or Sublime.
Is this an example of a command line you think is good, or just one you would have trouble building with Click?
Had been using Python Tools for Visual Studio with Visual Studio Community Edition for a while and started using PyCharm recently to re-teach myself Python on and it's been amazing.
&gt; but I'm curious if you have any remaining objections to PyCharm. https://www.archlinux.org/packages/?sort=&amp;q=pycharm&amp;maintainer=&amp;flagged= vs https://www.archlinux.org/packages/?sort=&amp;q=kdevelop&amp;maintainer=&amp;flagged= Now, do you know why that is?
Good for them. Are you suggesting that poor people shouldn't program? If not, what's your point?
Question to the author: What's the difference between defining an entry point in the setup file and putting a static file in the bin/ directory and listing it under installed scripts in the setup file? I've always done the latter for my CLI apps, have I been doing it incorrectly?
&gt; I think we're thinking different things for castrated. I was thinking features. On qt, it's more about paying for non-gpl license if you don't want your software to be gpl'd. Are we? The following features are only available with a commercial license: * [Qt Quick Compiler build tool](http://doc.qt.io/QtQuickCompiler/) * [Direct on-device debugging](http://doc.qt.io/qtcreator/creator-run-settings.html#specifying-run-settings-for-embedded-devices) * [One-click deployment to embedded targets](http://doc.qt.io/QtForDeviceCreation/qtee-building-and-running.html) * [Pre-built embedded Linux image (Boot to Qt)](http://doc.qt.io/QtForDeviceCreation/qtee-about-b2qt.html) That last one seems especially odd, since arguably all of the software they would need to create that image would be open source.
My point is that you're complaining about software using what is now considered a minuscule amount of computing resources. Obviously you won't get to enjoy nice things with a ridiculously outdated machine.
and useless. :P
"I want the code well documented." No, what you want is to be able to hire another developer to work on the project six months or a year from now when your target website changes and everything stops working. This isn't about documentation (in this code), this is about building a flexible scraping pipeline using off-the-shelf packages that have established communities of users and excellent documentation. I'm sorry to break it to you, but if you are going to become a de facto software engineer manager, you're going to have to learn more about software engineering.
It's a lot more stable than VS. I use VS 2015 (w/SSDT/SSDT-BI), SSMS (VS-Based), DataGrip, WebStorm, PyCharm all daily for the past 2 years. The VS based tools crash, or lock up for minutes at a time doing god knows what. The Jetbrains tools have only crashed when I had a HD die, and they properly run tasks in the background instead of blocking the UI. There's also the support aspect - if you're dependent on these tools for your productivity then Jetbrains has paid versions which include support. And they're fairly responsive, via both their bug tracking and their support e-mail. I honestly don't know what you'd be able to get out of anyone for PTVS though. 
Eh, I can get +95% of those features on emacs/spacemacs and it doesn't kill the performance on my laptop, it has far better customizability and it works with ALL the languages and use cases I could imagine.
Oh. I was mistaken, I thought hackintosh commonly meant running another OS on a macbook itself, not running OSX on another physical system. I really like the hardware (especially the things I mentioned and the trackpad), while I don't really care for OSX itself.
Been using Pycharm for almost all of my Python based projects. It works ridiculously well. It even works pretty well with Javascript.
Thanks.
Codecademy has an interactive web course for learning Python that was helpful for me learning Python, given I had prior programming experience though. He might find that helpful! I believe their content is still free but they may have some quizzes or exams or programming assignments behind a paywall, not quite sure. If they do, don't sweat them - the free instructional problems were very helpful for me in learning Python! You can check it out here https://www.codecademy.com Edit: also, /r/learnpython might have some more links and pointers for you and your friend to look at
What you're talking about is making a program with a GUI. You would use a GUI toolkit which takes care of the business of having a window and putting buttons and things inside of it. You have many options but there is one built-in with python3 (tkinter) or python2 (Tkinter) The user also needs to have python installed unless you use some tool to bundle up everything. That is non-trivial when it comes to a) tkinter specifically and b) learning. Since you're talking about a downloadable quiz, why not just get a free account on pythonanywhere and do a flask app. A quiz hooked up to a database sounds like not only an excellent learning project but a skill that people would be looking for.
It's great!
Why buy that when my current laptop function fines though? For 99% of its tasks
There are (at least) 12 different meanings of just the adjective form of the word 'free' so you may need to be more specific.
How does it relate to dogpile.cache ? https://dogpilecache.readthedocs.io/en/latest/
Second that. Emacs + anaconda Python
Looks handy! I would encourage you to look into integrating this into numpy proper. We recently merged some significant improvements to einsum that will make it into the 1.12 release. Your work has a similar flavor: https://github.com/numpy/numpy/pull/5488
You should always post the error with full stack trace when asking for help. 
Meh...I didn't write that CLI for you. I think it's fine. Nobody that uses it complains. Not all useful interfaces are pretty. I can add colors using colorama if you want. Also, there are 1000+ downloads for every version, which I'm pretty proud of considering how complicated the library is. The fact that we might disagree about what you should do with a command line interface doesn't matter. It offers me the freedom to do whatever I want to do. That's what the job of any CLI tool should be. Yes, I'd have trouble building it with click.
Also -- on a technical note, I worry that you may pay too high a price in performance for avoiding BLAS, which is quite a bit faster for matrix multiplication than a simple for loop. Losing BLAS will negate many of the advantages of parallelism. However, it's true that numpy's matmul does not yet use use BLAS for batched matrix multiplication. If you need high performance batched matrix multiplication (and automatic differentiation) a system like TensorFlow is probably going to be a better bet.
Try also SimpleCV. You may not have a way around digging into NumPy. With DSP you'll always have a latency... Pure Python will not be quick enough for 25fps 1280x720 ... Maybe 640x480? Anyway, you'll want to start using something that uses less clock cycles per calculation and that's stuff like these libraries. Another tip is to not stay too fixed on the idea of "live". For instance, in Apple's HTTP stream spec, it is just a text file list of MPEG files swapped in as playback proceeds. So, if you can at least make a new file on disk or in memory faster than the 1x playback speed, then that is for lack of a better definition live. 
Thanks very much for the feedback, and excited for the future einsum improvements! I would definitely be interested in merging some of this back into numpy. I think one problem is that my code requires the number of threads to be explicitly specified, which I don't think we would want for einsum. I agree that if einsum/matmul ever incorporates BLAS for batched dot, then this code won't be so useful -- is this on the horizon? Also, I'm not an expert in BLAS, do you think batched dot will get a widespread BLAS implementation? I see Intel has released a batched GEMM, but no idea about alternatives like OpenBLAS. You're right, I should probably look into TensorFlow. I've been a little intimidated to try because it seems to require a reworking of my full code (my main project is working on a set of complicated Bayesian graphical models in population genetics). Whereas to compute gradients, autograd.numpy was an easy drop-in replacement for numpy, and for parallel batched matrix multiplication, my einsum2 function took half a day to write and worked as a drop-in for all my einsum calls. Anyways, I'm going to start looking into TensorFlow now, both for my larger project, and for experimenting with `tf.batched_matmul()` in this smaller project :)
IronPython comes to mind, but I have never used it and I have no idea how it works.
Clearly complaints are not heard as pros out weight cons.
Pointing out IDE flaws must be that use case.
 It can be very frustrating to use on lower powered machines. I'm probably splitting hairs here but you can't open projects across a network. So if you're using a thin client to work on a project on a main code server I'd stay away from pycharm for this reason and the performance one as well.
I tried this once a little while back. I wrote a script that increases video brightness. I used opencv and pil for the image capturing and editing, stored each modified frame as a png and used ffmpeg to stitch the png frames back together as a new file. I have no idea if this is the best way to do this. It probably isn't. [Here's my script anyway](https://github.com/joshnewlan/cool-scripts/blob/master/brighter.py). Maybe it will point you in the right direction.
Sorry about that. Can you try via the main url ? http://harfang3d.com 
Could always normalize the string before searching. &gt;&gt;&gt; s = "SpaM HAM eG Gs" &gt;&gt;&gt; s.lower().replace(" ", "") 'spamhameggs' &gt;&gt;&gt; "eggs" in s.lower().replace(" ", "") True
i was thinking the same thing, but i was thinking if this could be solved using regular expressions. i.e the re module in python. but i have no such strong grasp in regular expressions
Nice. I'd suggest doing the getattr before the try, so that failure (called closing on something without a close method?) prevents the with body from running. 
Ram is dirt cheap even in the third world countries, wtf?
I guarantee, that those plugins will be long dead before jetbrains go out of business.
Not really because they're available in my terminal.
Why the fuck are you hammering public websites with thousands of high-speed requests? Bullshit like this is why scraping has a bad name. Instead show us how to do this properly. For starters try not to rapid-fire requests in as short time as possible. Also I see nothing about optimising using cache headers (etag, expires), HEAD requests, update feeds etc.
You don't need those parentheses btw
The goal of this test was to show how much pages you can get in a certain period so you were optimising for hammering (if your software could do 10K or 100K requests in this time you'd be toting that as a good thing).
No, reason why we didn't do multi-threading test is we didn't want to abuse source website. It would give diggernaut better score, but we decided to do it in single thread.
97/100 for efficiency though, can't beat that.
&gt;you shouldn't rely on cloud infrastructure as you can compile your scraper and run on your own server or PC Seriously now. What are you talking about? In case you weren't aware: I was having a go at the fact your comparison is bullshit because "diggernaut" is your own product vs open freely-available software. 
I would disagree, as I was left wondering why you were capturing those groups.
Dude it`s free, you can write config free, test it free, build it free and use it free on you pc.
Prove it - provide some links.
Awesome. Go to their website - reg - create digger - paste config - then click compile - chose settings - compile - download and run. And say me, it`s not free?
They've posted in countless programming subreddits today and fail to see how their "analysis" is not based in any statistical fact. [and they're now complaining their solution is free](https://www.reddit.com/r/Python/comments/58y2fv/how_python_and_scrapy_are_efficient_for_web/d945qkd/), when you have to login and let them compile it for you. Madness.
Is the dev just doing the scraping and uploading, as your title suggests, or are they also running statistics on the data and doing the output to a website? A dev that does this will be paid anywhere between $20 and $200+ an hour, and the job itself can take anywhere between 5 and 100+ hours, since you've been very vague about the "statistics" and how the data is output on a website, and if said website even exists yet, or if thats's something for the dev. The scraping is likely remedial, but, if it's millions of rows, may need to distribute processing. Thus, you will pay anywhere between $100 and $20,000+ for the job. ...your post should have been well documented :P
`str.casefold` in python 3
&gt; Moore's law refers to an observation made by Intel co-founder Gordon Moore in 1965. He noticed that the number of transistors per square inch on integrated circuits had doubled every year since their invention. 12 months old is not obsolete. 13 years old, however, is exponentially slower than something from today. &gt; I can run a mail server, a web server, a file server, a GUI with dozens of applications running simultaneously, including web browsing You act like that is some sort of feat. On a typical work day I have 3-4 VM's running on my workstation which are each allocated 2-4GB of RAM. Then I have multiple Chrome windows open which are usually so stuffed full of tabs that you can't see the favicons anymore, plus my IDE, plus multiple terminals, plus a podcast/music/video, plus multiple text editors, plus a bunch of chat windows, and the list goes on .... My PC is still 3 years old and doesn't break a sweat, ever.
Free always means open source?I say it free, not open source. No need to replace the concept.
What? You are the one that replaced the concept - take a look at the comment you first replied to, where I stated: &gt; your own product vs open freely-available software. Where in that did I mention free as in price? All companies start out charging free to attract people, and then put in pricing - don't treat your potential customers like idiots. Unless you have another revenue stream in mind? Even if you did, it doesn't guarantee the software being free and available once in the instance you go bust - and then what do you do when you need to update your scraper? You'd be screwed. 
So that you can afford to spare 5 dollars worth of RAM.
It won't write files to the root directory of your application because the working directory of the calling instance is not there. Typically, this would be done by doing the relative path from your file. But since you don't want to do that, I could offer a different solution, though less elegant than the relative path; somewhere you need to set a working directory variable to the pkg/ folder. Then, whenever you want to access a file with the pkg folder being your working dir, you would just prepend the working dir variable. However, this solution is technically just using the absolute file path (it's just being dynamically set by the program).
I haven't run into any issues, and I always have pycharm professional open on both Windows and Linux. 
Huge worries there, as you cannot guarantee that happening. If your company gets bought out, you lose the right to choose what happens to the code. If your company goes bankrupt and the liquidators come in, again you lose the right to choose what happens to the code. Telling your customers any different is incredibly worrying.
This seems like a good solution for the time being! With your method, I can change `writer.py`'s location without changing the relative path to `data-raw`.
&gt; Nope. I mean, Gentoo and FreeBSD both seem to have it available... Hint: In ports, only. 
I used Python on Windows before a Mac and found it worked fine. Windows is a first class citizen in the Python world (unlike Ruby) although I did experience some issues with third party libraries as a lot of Pythonistas will develop on POSIX and not care about Windows which can be a problem.
There's [official support](https://msdn.microsoft.com/en-gb/commandline/wsl/about) for bash on Windows now so you don't need to install Vagrant (or even Cygwin).
Isn't that the point of regex? /s
&gt; Hint: In ports, only. FreeBSD has a binary package. It was on the page I linked, under the column "current package" if you run a search. [Here's some screenshots of it installing.](http://imgur.com/a/U0PZA) Are you trying to say there's some reason it shouldn't be available as a package? I mean, it's under a [GPL-compatible](https://www.gnu.org/licenses/license-list.en.html#apache2) Apache 2.0 license. What would prevent someone from packaging it?
There are always free resources online he can check out. If he is really struggling, he should post some notices at his nearest university asking for a tutor. I was paid about 40/hr for helping some students with python.
excellent point, thanks!
My post probably would have been better titled "A generic *object finalization* context manager factory".
I used to use cygwin in the age of Windows XP, not sure about its current state as in how up-to-date the packages are. In Windows 10 you can use `apt-get` and if I'm not mistaken it pulls the packages from the current Ubuntu repo.
&gt; I run cygwin on windows 10 on virtualbox on linux This phrase is confusing...
Thanx I will need to try elpy. Was using bare emacs so far.
&gt;(/s*) FTFY 
Hi Major. Thanks for listening to the podcast! I want to be clear with everyone: JetBrains does not sponsor the podcast at all. That's just my opinion I am expressing. I try to be very upfront about where and what is sponsored. That's why at the beginning of every episode, and at the end, I say who sponsored the show. There are no 'product placement' types of things going on. Best, Michael
There might be something here to help you get started. http://zulko.github.io/blog/2014/03/29/soundstretching-and-pitch-shifting-in-python/
What are you smoking? This is as short as it gets. The only reason it is this "long" is because it contains a lot of explanation. Why are you even mentioning lambdas -_-
Code golf: re.search("\s*".join("eggs"),"eGG s",re.IGNORECASE) 
Choose the platform that you will be most productive on. At the end of the day, Python will work on any major OS. I love my MacBook personally, but Linux is great as well, and even the Windows experience has greatly improved IMO.
http://pastebin.com/Gu12Hh85 Here is what I think you want. Although, the code you had worked for me anyway, not using globals to pass variables from function to function is always preferred. Here: &gt; command=lambda: getNewPassword(new_password.get(), confirm_new_password.get()) We are passing the strings within the entry boxes to the getNewPassword function, without having to use globals. The getNewPassword function, which is now: &gt; def getNewPassword(newpass, newpassconfirm) Takes the two variables newpass and newpassconfirm, and carries out operation using those variable names. Hope this helps! 
What you are looking for is a GUI toolkit. Many are available to use with python. Built-in with python (3 and 2) is tkinter. It works well, for simple GUIs, but you may need some more widgets that are not included in this toolkit. The 2nd most popular GUI in python is Qt, you can download and install it with pip (`pip install PyQt` or `pip install pyside`, pyside is more pythonic, or so I've heard, PyQt is heavier, and looks like C++ when used) both come with the Qt Designer tool that will help you built your UI, and you'll just have to code some parts to link the UI to your already existing code. The 3rd option is wxwidget, but I have not used it yet, I stick with PyQt, pyside or tkinter. I know some people like it very much, but I have not the experience to walk you through using it. The 4th, and last, option I can think of, is GTK, it's open-source, and creates simple, yet beatuiful GUIs. I have not tried it in python, only in C, but it creates GUIs much like GIMP's GUI. The python library you need to install is PyGTK. If you're looking to build games, pygame is the way to go. Its main codebase comes from the SDL C library, but it is not well adapted for quizzes...
That's most definetly helpful for more than getting started! Thank you.
Maybe it should have some facility for branches, tags and such?
http://i.imgur.com/x5DNo9e.gif
Yeah, usually a hackintosh is trying to run OS X (or macOS as they now call it) on non apple hardware? I don't know how much compatibility issues there are running Linux on a mac. I know windows is supported
hm... your example without changes works for me &gt; aaa &gt; aaa &gt; Test Most likely you don't show all the code. I think, the problem is in using global variable. Hide shared variable to class. And I'd add `show='*'` to `tkinter.Entry` to hide the password. http://pastebin.com/gwhmwE4J 
Do you get a hash of that file? 
For Django, I really recommend going through [official tutorial]( https://docs.djangoproject.com/en/1.10/intro/tutorial01/) Also the book [2 Scoops of Django](https://www.twoscoopspress.com/products/two-scoops-of-django-1-8) was really helpful for me. For Flask, I recommend [Miguel Grinberg's mega-tutorial](https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world)
Check the result of the "iwlist wlp3s0 scan" that I've posted. &gt; IE: IEEE 802.11i/WPA2 Version 1 I know that the network is vulnerable to it because I've sent deauth packets to it before using android app (Arcai.com’s Netcut). App works great when you are connected to the AP. If you need any additional info first tell me how to get it cos I'm pretty new to this. :)
Here's a link about [how to deploy Flask using setuptools](http://flask.pocoo.org/docs/0.11/patterns/distribute/). This involves creating a setup.py file where you define the dependencies and few other things. Then you build the distribution. The way I usually build my app is: * python setup.py clean --all sdist bdist_wheel Then you should have a wheel (.whl) created in your newly created dist/ directory. 
Like Taskin77 was saying, you could try to get a hash of the file, which may be faster than reading in every line of the CSV. Alternatively, if you can access any of the CSV's metadata, you can check its 'last modified date' and only update your local copy of the CSV if the modified date has changed.
lol You are a treasure-trove of cringe. You think you are getting good publicity or exposure by posting this on reddit but you are really just making yourself look very bad.
heh, what difference does it make if its homework. :) 
I don't think Wheels can do what you are wanting. Any .whl will need to reach out to PyPi to install it's required dependencies. One alternative solution might be to try using conda. Apparently the conda build framework is supposed to be both a package manager and a virtual-env python install. Here's a stack overflow link for more info: http://stackoverflow.com/questions/26019920/include-run-time-dependencies-in-python-wheels
802.11w stops unauthenticated deauths. If you are connected to the ap and authenticated it will work like the app. You will need to connect to the ap first if you want to deauth a client. 
The type hinting, context-aware refactoring, local-history and other features are not so easily found using terminal ;)
That wasn't really the point, but sure. They said, "I don't see people complaining" and I wanted to make damned sure everybody knew that yes, some of us do in fact complain, pros and cons be damned.
Hi, To my understanding, downloading and setting up the virtual environment has something to do with running your py files, but not with your text editors. I suggest dedicating a folder to keep all the virtual environments at, refer to it whenever you need to work in a specific environment. Once you have all your work ready to run (.py files) before you type "python xxxx.py" for flask , or "python manage.py runserver" for django, make sure that your virenv is activated. To activate a virenv, simply navigate to the folder where you installed them in your command prompt, and type the following : Django: "call djangoEnv/scripts/activate" Flask: "call py2FlaskEnv/Scripts/activate" &lt;&lt; or "py3FlaskEnv....." etc.. I hope this helps!
Jetbrains develop 2 products: r# and pycharm. and pycharm doesnt have too much interesting r# features. And it so sad.
TDD with Python by Harry Percival. Also, even though it's really out of date, the Django Book (online) really helped me get the basic concepts of Django. 
Great post. I love the color rotation animation!
are you planing on doing some frontend too?. I recommend for that the free code camp courses.
The problem with wheels is they're compiled for a specific platform. So you can't really distribute them for other people to install on their own systems. You could package your app as a Docker image or AMI. Or if you want something less heavy, you could look at something like http://platter.pocoo.org/dev/ to build once from PyPI, deploy many times from your local cache.
Maybe a seizure warning should be present :p
Note that as the first note in the official documentation of the current release https://docs.python.org/3.5/library/venv.html says, pyvenv has been depreciated. You should just type: python -m venv env Then I personally just run pip without sourcing via: env/bin/pip install &lt;whatever&gt; Typically I would have the pip commands in a script anyhow.
What is `item` for text? &gt; For maximum efficiency we must make sure that we are always appending but to ensure it, you make `n` times `self.buffer[1].appendleft(self.buffer[0].pop())`, which makes it O(n) - same as [`list.insert`](https://wiki.python.org/moin/TimeComplexity) A [data buffer](https://en.wikipedia.org/wiki/Data_buffer) accumulates temporary data before it moved to permanent storage. You wrote `deque` with `insert` support. Even if you can use it as a buffer (buffer doesn't need cursor) there missing option to get all the text or slice of it. It is brutal to use IndexError as condition to exit from loop
I think NumPy already does it's own batching with BLAS, but the batching is done like how `np.dot` batches, not the more useful batching of `np.matmul`.
Parse it with a datetime pattern (strptime), then format the datetime object with with a different pattern (strftime). Easy peasy. (After you consult the table for the magic pattern strings).
[toggle](https://bitbucket.org/sietsebb/dotfiles/src/tip/bin/toggle?at=default&amp;fileviewer=file-view-default): a script that will take a filename and append/remove an underscore. Very nice when you want to briefly disable a settings file, plugin, script, or somesuch. The script checks for both versions of the file, so you can use `toggle .hg/hgrc` to disable your repo's `hgrc`, and then reuse the same command to renable it. Please disregard the presumably-imperfect use of Result objects, as well as the ToggleFile class which looks stateful but doesn't update itself. I thought I'd play with OO style in this script (functional is my usual thing), so there's a few design decisions that are more experiment than best practice.
I'm halfway in the middle of learning PyGTK and I just wanted to +1 it --coming from tkinter which I love in spite of it's ugliness -- coding for GTK is not so bad. If only tkinter had a better manual DGMS, drag-n-drop from outside, and for the sake of pete just a little update into the modern age for the default style. The main thing is that you have to read the actual tk/tcl docs (not for python) and then many bits from elsewhere, examples mostly in functional style, somewhat opinionated documentation (leave out two sections on geometry-managers pack and place *because you prefer grid*). So many rules you're expected to know how to bend, like listboxes and shit... aw dang I got started ranting. NVM just +1 GTK
You are. import random import string import re alphabet = string.letters + ' ' * 10 haystack = [''.join(random.choice(alphabet) for _i in xrange(100)) for _j in xrange(1000000)] haystack[42] = haystack[42][:37] + 'Hello World' + haystack[42][48:] needle = 'helloworld' re_needle = '(?i)' + r' *'.join(needle) regex = re.compile(re_needle) %%timeit assert 1 == sum(needle in s.replace(" ", "").lower() for s in haystack) # 1 loop, best of 3: 1.25 s per loop %%timeit assert 1 == sum(bool(regex.search(s)) for s in haystack) # 1 loop, best of 3: 1.24 s per loop (I'm a bit surprised regexes aren't actually faster than two string allocations per search).
Yes it does not get better than mtime without a hash. Your method (pandas) is probably awfully slow.
Done, cheers man. No way to signal to %c that you really want AM/PM, unfortunately. Gotta actually write the format out.
`-&gt;typing.Generator` or `-&gt;types.GeneratorType`? You could also make it a generator function (like with `yield from` instead of return). Introspection should be able to tell it's a generator function, so theoretically at least it could end up in documentation or auto-completion, but I don't think that actually happens :(. I would just use generators, if people think they are getting a list but actually they get a generator, it's a pretty easy to find and fix error unless they are very new to Python. Generators aren't much like lists anyway, save for being iterable -- you can't even index them! There are a lot of other iterable types, some are even easier to confuse with lists, do you avoid returning anything except lists? So long as you are consistent, it shouldn't be a problem.
The expensive part about regular expressions in Python is compiling them. If you time that as well your times will get a lot worse. And in this case you have to assume it's not possible to cache the regex since we have no information about the input strings. Meanwhile I have no idea what this is supposed to be: `%%timeit`. Just an arbitrary placeholder or is this some fancy syntax I should know about?
Speaking of generators, I little while ago I noticed the fibonacci implementation in the sidebar. I was instantly impressed by its elegance and simplicity. It uses two of Python's strong features (generators and tuple assignment) to showcase the language's expressiveness in very few lines.
[Timing magic from IPython.](https://ipython.org/ipython-doc/3/interactive/magics.html#magic-timeit)
Disclaimer: I’ve done work for Real Python [Real Python](https://realpython.com/) has three really well written books on Python fullstack development. $60 bucks, solid deal. I am working my way through book 2, building a Flask application with SQL and server side templating. These are well put together thoughtful exercises and explanations. Book one is python fundamentals and works through some libraries (that one is a foundation for adding more web dev that comes in book 2). Book three covers Django and Angular among other frameworks concepts. Highly recommended.
What is a non-military time?
Not sure if you're serious, but... Example: 13:00 in Military time (24 hour clock) is the same as 1PM in Normal time (12 hour clock) Example 2: 01:00 (Military time) is 1AM in Normal time. 
&gt; You act like that is some sort of feat. No. I'm just saying that my computer is still perfectly serviceable. It can run a shit load of modern software -- but its going to struggle with PyCharm. That's because PyCharm is bloated and inefficient, written on the assumption that everyone has masses of memory. If folks want to say "Oh well, sorry about that, but PyCharm is not for you" that would be one thing. Okay, it is a software product aimed at a certain market. Not everything is aimed at all programmers. But instead we get a whole lot of tone-deaf, privileged attempts at guilt-tripping: "oh but its so cheap, just spend $XXX dollars for a new computer and it will work fine, upgrade your computer, its soooooo old, memory is cheap, blah blah blah". Not every one has disposable cash to spend on new hardware just for the sake of playing around as a amateur programmer. Not everyone is a professional programmer working for five figures a year. (I got told once by a single, childless programmer with no debts that he could barely scrape by on just $90K a year after tax -- seeing as I was living with a dependent adult and debts on a single income of $30K, I wasn't impressed.) You can justify spending money on new hardware? Good for you, and I mean it. But don't assume everyone else can.
I'm happy to say that if it's not for you, then no worries. If you're happy with notepad and cmd.exe, then no worries - it's no skin off my back. I just get irritated with people saying shit like "That's because PyCharm is bloated and inefficient, written on the assumption that everyone has masses of memory". Sorry bud, ~1-2GB is far from masses of memory. 
Ah, that makes sense.
And how much success have you had picking up randoms from freelancer.com? I've never needed someone, so I've never personally hired someone from there, but just about everyone who hires me has horror stories.
Great! Short and to the point
Your example can actually be simpler: (line for line in lines if not line.startswith('#')) Which is a generator ~~comprehension~~ expression and works in Python 2 and 3.
The biggest gotcha for me with iterators is trying to iterate over them twice. This often happens with an iterator-consuming function. For example: import random def randoms(n): for _ in range(n): yield random.random() def close_to_max(seq, close=3): the_max = max(seq) return [x for x in seq if the_max - x &lt; close] print(close_to_max(randoms(10))) # always empty This is certainly not a reason to avoid iterators, just something to look out for. And if you do use iterators in a library, it's good to make a point of it in a tutorial.
I tested it and it seems to work ok. But I'm not sure this is the right way. I found articles telling that `yield` is not threadsafe, but nothing about for my use-case here :(
Alternately, you can go for: def fib(): a, b = 0, 1 while True: a, b = b, a + b yield a Or if you prefer ugly one-liners: fib = ((lambda n:reduce(lambda x,n:[x[1],x[0]+x[1]], range(n),[0,1])[0])(x) for x in itertools.count())
use pipes and all your problems are gone
typing.Iterable or typing.Iterator may be even better than typing.Generator/Type
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Udacity Web Development is by far the best course I've taken. It's free. https://www.udacity.com/course/web-development--cs253
Figured it would be something like that.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
If you wanna tackle it, be my guest :)
It is what i wanted because if the hashtag have those hashtag it will return -1 otherwise it will return 0
The problem with iterators/generators is that they add state into what used to be a purely functional function. Thus making the whole thing a lot harder to understand and reason about. They obviously have some huge advantages when it comes to memory consumption, but I find that I almost always run into issues when I try to use them (e.g. can't use them twice, can't know the length, not obvious if an API returns a list of iterator, etc.). They might save you a few lines of code, but they require a lot more mental power to get right. Just look at the example, without generator it's clean and easy: lines = get_lines(f) with generators the user has to take special care: lines = list(get_lines(f)) It's very easy to type the first when you really needed the second. The worst part is that your code will continue to work just fine for a while, but at some later point you might find out that you have a generator in place where you expected a list and then have to figure out where the hell that came from. 
Correct me if I'm wrong, but the memory usage of both the iterator / non-iterator examples will be the same. The iterator example also won't work with an infinite stream. This is because you turn the iterator into a list. *edit: A more apt example might be to print the lines that don't start with '#' instead of putting them into a list. If you did this then the 'Benefits' section would be correct.
Great work. Psutil is almost too useful.
You mean `multiprocessing`'s pipe? How should I go about using this?
It is pretty hard to make the mental switch if you're used to do everything in lists. Don't just convert a single function to use generators/iterators, but go all the way. You'll find the only thing you'd really need lists for is to have an ordered or indexable collection (although I find most of the uses for indexing are better solved with iterators like zip() and islice()).
&gt; Want a set instead of a list? &gt; uniq_lines = set(get_lines(f)) This example is a bit useless, you can do exactly the same with a function returning a list, in fact the author made this very point a couple paragraphs above. EDIT: I understand that is is less performant, just pointing out the fact that the syntax is identical, so makes for a unhelpful example of ways to "use iterators to make your code nice".
You have one pipe or better a queue and put your email or a key into the pipe. The consumers are just reading the pipe. I you want to use more than one core you put the generator for emails into one process and the threaded consumers into another process. Take a look into the zmq docs. They have wonderful descriptions about such ideas, but you don't need to use zmq. If you have limited memory just limit the size of the queue.
Thanks for commenting this topic. I 'm so sorry for this inconvenience
You'll get a lot more help at /r/learnpython, especially if you format your code correctly (4 spaces. Example in the sidebar.). 
[Military time](https://en.wikipedia.org/wiki/24-hour_clock#Military_time).
&gt; (line for line in lines if not line.startswith('#')) They are yielding right from the file. ( line for line in myfile if not line.startswith("#") )
Except that turning it directly into a set from an iterator avoids keeping all the non-unique items in memory at once. This can be a significant saving if you have a lot of duplicates.
I'm guessing what you want to do is check the tweet to see if it contains any of the hashtags "#fail", "#facepalm" or "#notok", right? If that's the case, you **cannot** do this: contains_hashtags(tweet, ("#fail") or ("#facepalm") or ("#notok")) Why? Because this bit: ("#fail") or ("#facepalm") or ("#notok") does not cycle through all three options. What this does is evaluates itself **before** the `contains_hashtags()` function is called, and passes the result of the evaluation to the function. So, how would that evaluate? The `or` keyword, when used on two strings, simply returns the first string if it is not an empty string, and the second string if it is. Look at this snippet: &gt;&gt;&gt; "A" or "B" or "C" 'A' &gt;&gt;&gt; "" or "B" or "C" 'B' &gt;&gt;&gt; "" or "" or "C" 'C' So go back to this bit: ("#fail") or ("#facepalm") or ("#notok") It's simply going to return "#fail" because it's the first non empty string. That means the call to `contains_hashtags()` is the equivalent of: contains_hashtags(tweet, "#fail") That's not what you want. What you want to do is call the `contains_hashtags()` function three times, with the hashtag you want to check for as the second argument: if contains_hashtags(tweet, "#fail") or \ contains_hashtags(tweet, "#facepalm") or \ contains_hashtags(tweet, "#notok"): return -1 else: return 0 Does that make more sense? 
You can also make stateful iterators from older functions as well. Say you have a non-iterator based function that reads a record from a file and returns it and returns None when there are no more. rec = red_rec(file) while rec: do_work(rec) rec = read_rec(file) or for rec in read_rec(file): if not rec: break do_work(rec) But you could turn that into a lambda generator that automatically stopped on a particular return value. for rec in iter( lambda: read_rec(file), None ): do_work(rec)
This example is bad since mixing generators in with functions that do things like max is, honestly, dangerous. If you passed `close_to_max` an unbounded seq then your function would never end. It's an edge case where the sequence needs to be bounded and fixed or else it will break.
I understand the performance concerns, my issue was that it was in a section showing how nice you code can be with iterators, however that particular example is identical to the non-iterator version.
I'm in the scientific research field and use pyinstaller to distribute a PyQt4 GUI that uses numpy, matplotlib, gdal, and pyopengl. So no.
I would suggest Anaconda just because of the distro hopping.
Because of the interaction between `map` and `range`, each `send_mail` call gets a different argument, and therefore each `make_mail` gets a different argument. You should get the same output as if you had done `for i in range(1000000): send_mail(i)`, just (hopefully) faster because of the multiple processes. Whether that should involve duplicated output or not depends on the details you haven't shown of `make_mail`.
Is it ok if I create a local folder where I copy all python library packages, then add that local folder path to `$PYTHONPATH` environment variable?
You have to download askthecorrectsubreddit.py from /r/learnpython
 s = f"{i}" #1 s = "{}".format(i) #2 s = str(i) #3 s = format(i) #4 s = repr(i) #5 s = "%d" % i #6 s = "%d" % (i,) #7 will all sooner or later call the same function. which versions would you keep around? Personally, I find #2 .. #5 more readable. especially when converting to hex, because `format(i,'X')` is exactly what I want to do. Format a number using hexadecimal. When I want to compose a string with several variables, f-strings are the more readable option so I use that. Syntactic sugar is just that. Syntax to make something more readable. Removing the original mechanism would be silly: @deco def foo(): pass and def foo(): pass foo = deco(foo) 
Maybe it's as simple as having two functions in an API, like def lines(self): return list(self.lines_generator()) def lines_generator(self): # code with yield here Then the user can decide whether the performance/memory improvements are worth it, and it's clear in the source what the object is.
I didn't even measure {}. It seems to me, that python2.7 '%' is implemented strangely, maybe that is cygwin's fault?: $ python2.7 -mtimeit -s 'i=42' '"".join((str(i), " bottle of beer ", str(i), "bottles of beer on the wall"))' 1000000 loops, best of 3: 0.534 usec per loop $ python2.7 -mtimeit -s 'i=42' '"%d bottle of beer %d bottles of beer on the wall" % (i, i)' 1000000 loops, best of 3: 1.01 usec per loop $ python2.7 -mtimeit -s 'i=42' '"{0} bottle of beer {0} bottles of beer on the wall".format(i)' 1000000 loops, best of 3: 0.388 usec per loop $ python3.4 -mtimeit -s 'i=42' '"".join((str(i), " bottle of beer ", str(i), "bottles of beer on the wall"))' 1000000 loops, best of 3: 0.533 usec per loop $ python3.4 -mtimeit -s 'i=42' '"%d bottle of beer %d bottles of beer on the wall" % (i, i)' 1000000 loops, best of 3: 0.325 usec per loop $ python3.4 -mtimeit -s 'i=42' '"{0} bottle of beer {0} bottles of beer on the wall".format(i)' 1000000 loops, best of 3: 0.518 usec per loop I thought I read that `"".join` was very fast. Seems I was wrong. Thanks for letting me know.
I don't think MicroPython supports filesystem access? Without that, and without C extensions, you're restricted to pretty niche applications on the desktop. 5 MB is not that much in today's environment. Smaller is always nicer, and there are situations where every byte counts, but games and movie downloads can easily be multiple GB.
I don't see the big benefit (other than in the heavily constrained environments that µPy already seems to be tailored for) in reducing binary size while sacrificing compatibility, security, resilience and speed. If in general Python binaries were several GB in size or required large VMs (e.g. like Java), there might be a better argument; 1 single order of magnitude (500 kB vs. 5 MB) with several limitations on top does not really sound like a great deal to me. If you personally need this, I'm all for it and good luck, however I personally can't really imagine a large need for this on desktop platforms.
I asked there before posting here; only one post reply. I think I asked in the right one with this post.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is more-so dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community can get disenchanted with seeing the 'same, repetitive newbie' questions repeated on the sub, so you may not get the best responses over here. However, on /r/LearnPython the community is actively expecting questions from new members, and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. Whatever your question happens to be getting help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
&gt; adding C extension support [...] would open up a lot of possibilities. Support for writing C extensions against a MicroPython-specific API, or for existing C extensions targeting CPython? My understanding is that the former is already (at least partially) supported, but the latter is more-or-less impossible. MicroPython cannot support the CPython API, because it exposes internal details of CPython (e.g. reference counting) which MicroPython does not mirror.
Yes, I did understand. However, I decided to post on r/Python to have other people's take on it. Besides, I've done what that answer says before even postong, and it did not work.
&gt; I thought I read that "".join was very fast. Seems I was wrong. Thanks for letting me know. "".join is very fast compared to accumulating strings by concatenation: "".join can expand the underlying buffer in-place for O(n)~O(log n) complexity (and it correctly allocate the buffer to the right size upfront — if the source is a sized collection rather than an iterator — though I'm not sure that's the case in CPython) whereas += has to allocate a new destination buffer every time, thus having a ~O( n^2 ) profile (though CPython uses refcounting information to cheat when it can). Accumulating strings by concatenation is a common source of accidentally quadratic behaviour (and the reason why languages like C# or Java have StringBuilder types)
Of course not, I did not expect that, I just wanted some replies, and I got 'em.
&gt; sacrificing compatibility, security, resilience and speed. That MicroPython will be incompatible with some Python code is unavoidable. However, there is no reason why it must be less secure or less resilient than CPython. Also, MicroPython is already at least as fast as, if not faster than, CPython. &gt; 1 single order of magnitude (500 kB vs. 5 MB) with several limitations on top does not really sound like a great deal to me. Would it be a better proposition if MicroPython were significantly faster? Then the size comparison might be with PyPy rather than CPython, which would be a difference of 2 orders of magnitude (500KB vs 50MB).
You can always use something like this: https://vilimpoc.org/blog/2012/11/23/bundling-up-distributable-python-package-libraries-using-pip-and-zip/ TL;DR: You can use `pip install ... --target foo/` to install modules / packages in a dir. You can then zip that up and import the modules directly from the zip file. You can even include the main program in a `__main__.py` file in the zip and Python can execute it with `python foo.zip`. For additional sweetness, add a shebang to the zip and make it executable: echo '#!/usr/bin/env python' &gt; mydist cat foo.zip &gt;&gt; mydist chmod 755 mydist ./mydist 
Any chance you could give this poor guy the course for free? Will complete the course in a month or 15days.(college student) 
Duly noted. Thanks!
I think a more fundamental solution to this problem is for people learning python to assume a function's output is lazy by default. Ie don't form a habit of iterating over something more than once unless they explicitly list() or tee() it. I say this because Python 3 includes a number of iterate-returning functions in the standard library.
What MQTT code did you use?
[This one](https://github.com/micropython/micropython-lib/tree/master/umqtt.simple). the examples are really helpful to understand how to use it.
&gt; prefer ugly one-liners Please. This isn't Perl. We don't.
C'mon man it's only a tenner. He's taken time to create this course and a tenner is really not very much to ask.
Which framework does it use? 
Well over the weekend Github was affected by the DynDNS DDoS attack so it may be related to that, otherwise I think we'll need more details.
Very cool, thank you!
In Haskell, the operator `:` creates single-linked lists. The left side is the head of the list, the right side the tail. The function `zipWith` applies a function to respective elements of two lists. Parenthesis can be used to turn an operator into a regular function, so `(+)` is like `operator.add` in Python. So this defines `fibs` to be an infinite list that starts with two `1`s, and then continues with a list that is the result of adding each element of `fibs` to the following element.
Sorry mate, Udemy doesn't allow free coupons anymore, this is the lowest price I can offer unfortunately. 
Many of the large scientific libs (scipy, numpy, etc) are notably missing from the projects listing.
It uses webapp, which is very similar to Flask. It actually doesn't matter since the main objective of the course is to learn how to develop for the web with Python. The skills are transferable to any Python framework.
I just recorded a video that shows how to setup Nginx and uwsgi to serve Django projects on CentOS minimal. I haven't posted it to YouTube yet, but am planning to. It will be my first video and I am aware the quality isn't what you would get from Lynda, I do run into errors and figure them out "live"(I am not editing them out you will see me troubleshoot through them). I will let you know when it is up if you are interested. I plan on posting it sometime later this week.
I like Anaconda Spyder. I will see myself out. 
\#ThisIsWhyIDocker
Yup! Plays pretty well, although I'm still using Python 2.7 for most of my stuff so I can't say I've tested every single thing. That said, everything on my course is compatible with Python 3
I know. I am referring only to the example, which uses the same memory regardless if a generator is used or not. I have also worked with streams before and I am well aware of how they work. It's just funny because I see this type of thing often in the python world, where a person will attempt to do something with streams (like read characters line by line from a file) and then they end up loading the whole thing into memory.
Use Conda ... it will save you a lot of headache. Especially with scientific packages like numpy, scipy, etc. Just go through the Conda Test Drive tutorial, its super easy to get started with, and has a much better user experience than virtualenv and pip.
This isn't a finished list - more projects are welcome to sign it - but the slower moving, more foundational libraries like numpy are typically more conservative, so I wouldn't be surprised if they want to support Python 2 for a bit longer.
&gt;Many of the large scientific libs (scipy, numpy, etc) are notably missing from the projects listing. Only using SciPy and NumPy is going to be pretty limiting. I'd hate not having access to IPython, Jupyter Notebooks, Pandas, matplotlib, and Sympy.
Try using different backends until you find one that works. If you're getting a QXcbConnnection error it sounds like it's trying to use one of the Qt backends. I don't know if you have Qt even available, but try something less sophisticated first perhaps.
Generators have use far beyond being infinite iterators. Perhaps first and foremost, they consume very little memory making it possible to process very large datasets. Of course, we know that the dataset is finite, and we frequently use aggregation functions like sum and max.
Hey, if you want to couple that with a book searching lib (to search from keywords or isbn): https://gitlab.com/vindarel/bookshops (there's also pyisbn). Just pointing at it :] (I'm the author)
I installed VcXsrv and it's running in the background. I added the line to the bashrc file, which I edited from windows side in the hidden lxss folder. I tried to do it with gedit on linux side but got the error: error: XDG_RUNTIME_DIR not set in the environment. (gedit:10): Gtk-WARNING **: cannot open display: So another display error. Maybe I can't open any GUI, not just python plots. Anyway, when I start Bash it now says bash: /home/booga/.bashrc: Input/output error Still can't open gedit and it now says ipython isn't installed when I try to run the script Editor: I see that I wasn't supposed to edit the file from Windows side... oops back to drawing board
Just a note to anyone confused, because it's easy to glance at the page after reading the title and misinterpret what it means. &gt; the following projects have pledged to drop support for Python 2.7 no later than 2020 So this isn't a list of projects supporting Python 3, but rather a list of projects which will drop support for Python 2.
I see why you would think that but it's not like that. I've been ask multiple times how Pendulum compares to Arrow (which has been the reference library for quite some time). And even though I have a section explaining it on the github README and FAQ on the website, I thought I'd make a post explaining why Arrow is so broken so that it may help newcomers to not choose it so that they won't be bitten later, because I have and that's why I decided to start Pendulum. The end game is not to banish Arrow, if people are satisfied with it they can continue to use it. And if someone wants to take over the project, it's fine too since people will finally get something that works. In the end, I am just stating some facts and I feel bad for newcomers that don't get why Arrow does not behave as expected and advertised without getting responses from the authors of the library. There are critical issues that dates back to 2013 (https://github.com/crsmithdev/arrow/issues/72) which have not been fixed as of today. Anyway, I don't force anyone to use Pendulum, there are other libraries out there that can work too depending on your needs.