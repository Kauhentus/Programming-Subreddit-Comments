I am not entirely sure why it would be better than webdav, but either way nooo. Although FTP works great if all you want to do is store and download files.
Becoming a Buzzword Master
How is Javascript terrible in comparison to Python?
Here, I'd made it public for you: https://github.com/Bystroushaak/rss_gen But keep in mind, that it was hacked together really quickly.
https://www.reddit.com/r/Python/comments/5r7iaq/project_jupyter_statement_on_trumps_immigration/dd61pkp/ ...
Here are biggest issues of JavaScript: https://whydoesitsuck.com/why-does-javascript-suck/ 
&gt; it can't be that bad Famous last words.
I agree, I am gonna do more real word use case benchmark (no "Hello World" app) for the next round. It just takes a lot of time to collect them and come up with a good way of presenting them. I am also gonna confront pipelined and non-pipelined results and include all the things you asked for.
You can try [vulture](https://pypi.python.org/pypi/vulture) or [coverage.py](https://coverage.readthedocs.io/en/coverage-4.3.4/). There's also [django-lint](https://pypi.python.org/pypi/django-lint).
Because everybody first does that and I need to get the project out to the community to get better benchmarks and more volunteers. Designing, executing, collecting and presenting data from a benchmark is a lot of work by itself. Better benchmarks shall come and I am gonna share them with you.
Work on projects that are interesting to you. Go to meetups. Bring your resume. (Find a professional to consult on your resume). Source: worked for me.
Intriguing workflow there. That contractual requirement is a step forward and I appreciate your willingness to make that jump! 
Cool, have fun!
Nice!
please reuse all jinja2 syntax if you want adopters ;)
I find the statement bizarre and unnecessary. Keep real-life politics out of Python. 
/u/opfeels /u/rubeqoot
Electrical Engineer here. Can confirm. Satellites are built using Excel and PowerPoint
Is the speedup achieved by parallelizing multiple serial requests from a single client? Or can it really serve a million request per second from a million different clients? :)
Among all the optimizations i did pipelining reads and writes made the biggest difference because it works on the level of the biggest bottleneck which always is data I/O. I didn't do tests with a million concurrent connections or even see how fast it would saturate. There were already several requests for connection concurrency tests, gonna do them in the next round of benchmarks.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/freeformost] [A journey to make Python with HTTP screaming fast which resulted in a new web micro-framework.](https://np.reddit.com/r/freeformost/comments/5rdkvd/a_journey_to_make_python_with_http_screaming_fast/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I made a dashboard using DCjs that I thought was pretty cool. Obviously it's JavaScript, but I made my site using Python/Flask. From the following example you can see how it's easy enough to grab a csv file from somewhere and make a nice dashboard. Check out the example and tutorial here: https://dc-js.github.io/dc.js/
Making applications fast and scaling them big.
For loops and dictionaries.
Numpy?
Don't like this about PEP8 either: Method definitions inside a class are surrounded by a single blank line. I prefer two lines to clearly separate methods from logical sections within. Jeez I'm a bit grumpy today.
&gt;But more to the point, this reached the point where we felt it was reprehensible not to speak out. Huh, you've just termed [half of American citizens](http://fox61.com/2017/01/30/qu-poll-almost-half-of-american-voters-support-trumps-immigration-order/), [half of Canadian citizens](http://globalnews.ca/news/2861573/half-of-canadians-support-travel-ban-to-protect-canada-from-terrorism-poll/) and [half of Australian citizens](http://www.smh.com.au/federal-politics/political-news/half-of-all-australians-want-to-ban-muslim-immigration-poll-20160920-grkufa.html) as 'reprehensible'. While it's certainly your prerogative, I hope you've thought this through with the understanding that it's a large portion of western society that you've just termed 'reprehensible', not just 'Donald Trump and his henchmen' or what have you, and I hope you've made this decision with a clear view of how inflammatory your rhetoric may be seen to the world outside of your particular social bubble.
You don't need a space after the `-m`. Eg to make virtualenvs I type `python -mvenv env`.
Meetup.com Where do you live? If your town can't support a meetup, it might be slim pickings.
/r/learnpython
It's a computer. It computes.
Then the answer to the question of "why did you make a dashboard" won't impress anyone
/r/learnpython
You could try writing your own parser, but this is the standard in Python. If anyone will see your work, it's probably just best to use Numpy.
http://www.techempower.com/benchmarks/#section=data-r13&amp;hw=ph&amp;test=plaintext is the hello world benchmark. I realize it's not the same hardware, but it looks like you might be able to get in fairly high on that list.
Pyston kept the *python for performance* scene competitive. I agree that python 2.7 needs to go away in all these HPC implements of the language. Pyston, you will be missed. 
The moderators position is that politics on this sub is o.k. if it relates to countries that python developers originate from https://ns.reddit.com/r/Python/comments/5r7iaq/project_jupyter_statement_on_trumps_immigration/ For example
There is no competition on this scene. Those people don't try to be better for the sake of outpacing the others, they just have a problem to solve and try to find a solution. In that sense, Pyston is a bad solution.
So, not really a Python project but a C project with a Python wrapper ? You probably can wrap it for Ruby and PHP as well and have some kind of universal backend. It is going to have the same perfs with a real life server code though ? Where you perform request to sql, loop on stuff, generate templates, and hence most req/res will take more than one system call ? My guess is that it would make a great loadbalancer, but you probably can't use it the same way we use Django or Flask.
Pipelining has it's use cases although arguably it's not so important for web facing servers. HTTP is more than that. I gave examples in other responses and also in the article comments. Yes, I measured around 400,000 RPS without pipelining though I dont remember exact number now.
&gt; It computes Yes, something with zeros and ones, is it?
So, if i attach a screen and a mouse and a keyboard to it, it will basically become a super small computer? And if so, What has this got to do with python? 
# OP here, for anyone interested As per title I made a website using Flask called Tingsmen. It's currently hosted on heroku and right now sign ups are open for 1000 users only. The main Idea is that everyone can propose a "law" and if the community approves it, I will start developing it so that the website changes accordingly. I made this hoping to learn something, have fun and maybe building a good community. If you want to know more about how laws works, take a look at the [explanation page](https://tingsmen.herokuapp.com/page/Laws). Also, suggestions and critics are very appreciated, feel free to ask me anything here (or there). Enjoy! P.s. I will post this on /r/flask, I don't know other subreddits that might be interested in this, if you do, please share.
The main thing to understand is browser games are not something that runs like an executable for an operating system. Browser games are all running in JavaScript and uses Canvas2D or WebGL for the graphical part, this is a specification of HTML5 and there is no way around it (for now). I mean, there is also Flash games or Java Applet games, but I think it is not the subject. Some big game engines like Unity3D or UnrealEngine allows you to export the game you have created using her engine into a compatible HTML5 code, but this kind of process is extremely complicated, hard and time consuming to implement inside a game engine. This is why most of the game engine does not have this option. Also you should know that even if a game engine allows you to export your game into HTML5, the current best way to create a browser game is to use native HTML5 game engines, which will always produces cleaner and more optimised JavaScript code. Sadly Python does not have the best set a qualitative game engines. Not the worst, but the best game engines are clearly not built in Python. And as far as I know, the best Python game engines does not allows you to export to HTML5. That said, and as Ran4 already said it, all of this may change in the future when/if WebAssembly become something real. WebAssembly will allow to compile any code into WebAssembly code will that runs inside the browser just like JavaScript code does. This way, we will be able to convert a Python project into WebAssembly without having to deal with JavaScript code at all (well, it is not that simple but that's the idea). But does not expect it soon. It will take a long time before WebAssembly becomes stable, and game engines and browsers to implement it correctly. And then, you would also wait for most people to have a compatible browser version. So... if you haven't already learned a game engine that can export to HTML5, and really want your game to run in a browser, I would suggest you to pick an HTML5 game engine. There is a lot of them out there.
&gt; The moderators position is that politics on this sub is o.k. if it relates to countries that python developers originate from What? Don't be ridiculous. Please don't bring your politics in /r/python if there is no relevance. The other post had relevance to Python, you are just looking for trouble.
Let's be honest. You aren't from any of the affected countries.
I hope there will be. This affects us as a community, and our silence will be our damnation.
It's more like Python calling C and calling Python back. Yes, the article says at the end that this is not limited to Python and could be applied to other languages. I am actually planning to build a load balancer, reverse proxy scriptable with Python out of it. I hope to bolt it on top of PyPy once it reaches 3.5 comformane and the JIT gets tuned. That's when it's gonna get interesting for running things like Django or Flask.
loops lists and dicts are the fundamentals along with functions
Opening today a community centered website called [Tingsmen](https://tingsmen.herokuapp.com) I wrote using flask, where users choose what will be developed and how. If you want to know more, I just made a little post [here](https://redd.it/5redyx) on this subreddit, or you can head directly on the [explanation page](https://tingsmen.herokuapp.com/page/Laws) on the website. Any feedback will be very appreciated.
Why not try using [plt.subplots](http://matplotlib.org/api/pyplot_api.html?highlight=subplots#matplotlib.pyplot.subplots)? There are some basic examples in the documentation that will give you a hint. However, it seems to me that your main problem is the way you try to pass the x and y data with set_data. Also, there is a lot of verbosity in you code which a simple for loop can solve. P.S. If you have **lots** of data points, why not consider using [pyqtgraph](http://www.pyqtgraph.org/)
What? As a French citizen this has much more relevance to me than the other post. Don't be so racist to presume otherwise.
Do yourself a favor and avoid the `np.matrix` class and stick to `np.array`. The former has a tendency to sneak in hard to catch bugs in your calculation unless you are extremely careful.
That user is not part of the Jupyter team, as far as I know. He can say that on reddit, but that's not the project's position, and making a comment like that would go against our CoC if it was on a mailing list or forum we control.
As described in the statement, the founder of the project came from a country (Colombia) which probably would have been affected had US policy been like this around the turn of the millennium. And even if we don't have any core developers from those countries today, this makes it that much harder for anyone there to get involved. But the bigger point is that we don't care only about things that affect us directly. I'm not going to quote the overused 'First they came for...' thing here, but this kind of action relies on people thinking 'Why should I care, it doesn't affect me'.
So, Pyston goes the way of Unladen Swallow. I can't say I'm surprised - did Pyston have any benefits when compared to PyPy? However, like /u/V3T1N4R1, I think this is sad news for Python. Not only would an increased number of implementations be a positive thing for the language, but this news is also evidence of Dropbox, one of the largest corporate supporters of Python (and employer of the BDFL), moving away from the language.
&gt; Don't be so racist to presume otherwise. Try to not be so dumb and aggravating. France is a country, French is not a race. What the fuck do you want? What are you trying to achieve here? Are you just being an asshole to make a point?
We French are arrogant, not assholes.
Writing in C hurts. Actually I spent chasing one memory corruption bug for an entire week and I was about to abandon it. Also chasing memory leaks and reference over and undercounting bugs is not fun at all. Once I reach an important milestone I am gonna make it a reusable library with fast HTTP primitives that everybody else could reuse. I am really interesting in contributing it back, though Japronto will continue to be my playground and serve as a reference implementation of those contexts.
Both
For pipelining to work efficiently client has to burst several requests at the same time without blocking for responses after first one so if you somehow make a web client do it you can take adventage of it. Pipelining itself is only a warm-up before looking into HTTP/2.0 muxing where same techniques on the server side can be used to serve back content with less write system calls and here ordinary web clients can be used. HTTP/1.1 pipelining is sadly not widespread. It was pointed to me though there is another web server that can see speedups with it, Go fasthttp.
The problem here is that Trumps order is doing good in the world! Unfortunately some people don't like change even if that change is for the better. 
Your variables are stored in memory, you need to either write a file, use the pickle module or something like a sqlite database.
I think it would be. Amazing job!
Oh, thank you. I didn't know that
I had planned on releasing it as an opensource project focused on developing web services but it's not quite ready. If you or anyone else is really interested I'm willing to give you access to my private repo. I'm trying to avoid any attention until I feel that it's mature. Edit: I'm currently working on adding support for boost fibers. I have a private repo hosted at gitlab.com If you PM me your gitlab user name or your email address I'll invite anyone interested in taking a look. 
You can probably take them directly out of the db.
ok nice one, thank you
What we did to solve a weird situation like this is that we compiled the python app into a dynamically linked native binary with pyinstaller. If you build it with an old glibc version it is forward compatible on the same type of system. For example the binary build in centos 6 was portable to latest ubuntu... worths giving it a try. Let me know if you need more infos.
IronPython and Jython don't have the GIL. 
its often way better to bring vim to the ide, instead of trying to bring the ide to vim. PyCharm has the ideaVIM plugin and VS has the VSVim plugin. Both are great and can be configured with a vimrc file.
As far as I can tell the only benchmark you show is "hello world" which doesn't actually prove anything
I'm currently making the switch from vim to PyCharm + the IdeaVim plugin. I find that things like linting and autocomplete are much more advanced in an IDE like PyCharm than what you can get with vim plugins. For example, PyCharm uses type annotations to improve the autocomplete, and the linter checks your docstrings for things like missing function arguments. It's also nice to have things like a debugger and refactoring tools built into your development environment. Still, there's something to be said for the simplicity of vim. The default color scheme in PyCharm is completely over-the-top; there are so many different colors that it distracts from the code.
They actually did in their first attempt, then dropped it because they failed and used CPython as a base the second time around. I did 'appreciate their technical design choices'. The open source world is wonderful, but it's full of wasted effort and ego battles, and that tires me.
Alot of flight suppliers are very protective over their flight data and actively combat screen scraping. Skyscanner and the Google Flight search tool has great API's with a generous 'free' quota which may help you. 
Only if you're using C extensions. Pure python should run fine. 
It proves that others have bigger framework overhead.
This is why you docker. Just build the container, distribute the container. One OS target for development, many for deployment. Single dependency on the host becomes docker or maybe docker and a reverse proxy if you like to handle the traffic on the host first. You could keep your venv in the docker container or just install everything system level in the container. 
I'm french and I don't understand why this is posted there, no relevant for python... 
I was searching for something like this in order to migrate old java apps to python. Ever tried using it with IBM Websphere + Oracle?
Except usability? For those like you who don't understand vim and why it's superior and instead need to click the mouse pointer on "things" like little children, usability is built into vim. It's just not for everybody obviously, it's for those who seek ascension. Such an ignorant statement deserve no other comment.
How does the GIL save your butt when writing threaded code? As for your argument about shared memory, that's the case for most languages. The reason Clojure is different is because it's a LISP, which are functional languages that don't do mutability by default (which is a much more compelling argument than shared memory is broken by default). 
Converting a giant single table RedCap database into a relational structure. 
Have you heard of pex? https://github.com/pantsbuild/pex http://www.youtube.com/watch?v=NmpnGhRwsu0
Have you looked into the pex project? It has similar goals that you do. You should consider looking into it perhaps contributing there instead of starting a new project. It was open sourced by a twitter engineer, not sure how actively it's still being used there though. https://github.com/pantsbuild/pex 
Link to Github: https://github.com/pythonnet/pythonnet
This is a really interesting idea, that I have not come across before. Taking a look.
In what way do you feel vim lacks usability? 
Yes I agree, some of the features are certainly implemented better in some IDEs as oppose to vim plugins. However the tools are available to use vim as a full development environment and can make it so much more than just a standard text editor.
&gt; We are also looking into upstreaming parts of our code back to CPython, since our code is now based on theirs. :)
I made this in a day, with very little knowledge of the language. I have two issues with the program if anyone can help. I want the person creating the character to be able to choose what two ability scores to add +1 to if they choose a half-elf as a race, and I don't know how to stop the program from crashing if letters are entered. Otherwise, the program works really well, and I'm quite proud of it.
I think it depends a lot on what you plan to use vim for. I can use vim for any programming or standard text editing I can possibly imagine.. whereas if I become reliant on PyCharm, as soon as I want to write in C etc, I have to change my IDE. Adding vim to the IDE feels to me like you are removing the simplicity and flexibility that makes vim great. Also, if I want to remotely edit python on a web server (flask etc).. Using PyCharm for this could be much more of a pain to set up than simply running vim through the ssh terminal.
If your python dependencies aren't built to the system you install to, you're pretty likely to run into issues. If you went your proposed route, I'd suggest that at least you should build your library and dependencies on the versions of Ubuntu that you will be deploying to. Building on RedHat and copying files to Ubuntu won't always work, nor will building to Ubuntu 12.04 and copying to 16.04. Also keep in mind that if you provide pre-built 3rd party dependencies, the responsibility to keep those dependencies up to date with upstream vulnerability and bug patches is on yourself. (That may or not be important to you or your company/customer). Docker is really the best answer I've heard of for your specific use case. Also I'd avoid re-writing an installer script if at all possible in favor of using the existing dpkg system. You also may be able to sidestep security issues by either creating a locally hosted (local to the machine) pypi repo, or by providing the .deb package dependencies for 3rd party libraries and building to those libraries during the install. The situation you described is a bit odd, I'd want to talk to the devops team to figure out how they prefer to manage deployment and provisioning for those systems. 
Another option is to use "pip wheel" to download and build all your dependencies, then you drop the pile of wheels on the target system and install into a virtualenv there. It doesn't gain you much over a tarball of the env except that it's upgradeable (which may not matter) and it's portable (virtualenvs only work in the directory they were originally created for, you can't move them easily). ./venv1/bin/pip wheel -w build/ [-r requirements.txt or ./yourapp] virtualenv venv2 ./venv2/bin/pip install --no-index -f ./wheels [-r requirements.txt or ./yourapp]
Go type system is extremely weak, following the tradition of the C language. You can see some of the shortcomings of Go type system [here] (https://jozefg.bitbucket.io/posts/2013-08-23-leaving-go.html) Python type system (which is very new, optional typing on 3.6) is a lot more expressive: you can define generic/polymorphism types, and abstract class interfaces are more powerful than interfaces types from Go.
Hi, I rewrote the code so it would work for python3: import os import os.path import requests from bs4 import BeautifulSoup import sys from urllib.parse import urlparse import re basedir = input('What is the full directory of the folder that contains the files?') os.chdir(basedir) filetypes = ('.mp4', '.avi', '.mkv') def sort_alphanum(list): """ Sorts the video_files list into numerical order even if the file name contains letters""" convert = lambda text: int(text) if text.isdigit() else text alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ] return sorted(list, key = alphanum_key) def directory(basedir): '''renames any mp4, avi and mkv files in the target directory to ([number][extension]) format, e.g. 01.mp4, 02.mp4,...''' num_files = os.listdir(basedir) video_files = sort_alphanum([k for k in num_files if k.endswith(filetypes)]) for files in video_files: old_name, extension = os.path.splitext(files) for index, file in enumerate(video_files, 1): old_name, extension = os.path.splitext(file) new_name = '{}{}'.format(str(index).zfill(2), extension) try: os.rename(file, new_name) except (OSError,FileNotFoundError): print ('Failed to rename %s to %s') %(old_name, new_name) website() def website(): '''user to input to check from which site they wish to scrape episode name info''' print (''' Enter the website from which you wish to get the episode names from. This script can only fetch episode info from animelist, wikipedia or imdb. The links must be in the following format: https://myanimelist.net/anime/790/Ergo_Proxy/episode https://en.wikipedia.org/wiki/List_of_Buffy_the_Vampire_Slayer_episodes http://www.imdb.com/title/tt0367279/episodes?season=1 If you wish to cancel, type 'exit' ''') scrapefrom = input ('&gt;...') parsed_scrapefrom = urlparse(scrapefrom) if 'en.wikipedia.org' in parsed_scrapefrom: wikipedia(scrapefrom) elif 'myanimelist.net' in parsed_scrapefrom: animelist(scrapefrom) elif 'www.imdb.com' in parsed_scrapefrom: imdb(scrapefrom) elif 'exit' in scrapefrom: sys.exit() else: print ('\nThat\'s not a website I can scrape from, only animelist, wikipedia or imdb.') website() def wikipedia(url): '''fetching a list of episode names from wikipedia''' r = requests.get(url) soup = BeautifulSoup(r.content,'lxml') info = soup.find_all('td', {'class':'summary'}) episodenames_list = [item.text for item in info] check(episodenames_list) def animelist(url): '''fetching list of episode names from animelist''' r = requests.get(url) soup = BeautifulSoup(r.content,'lxml') info = soup.find_all('a', {'class':'fl-l fw-b '}) episodenames_list = [item.text for item in info] check(episodenames_list) def imdb(url): '''fetching a list of episode names from imdb''' r = requests.get(url) soup = BeautifulSoup(r.content,'lxml') info = soup.find_all('div', {'class':'info'}) episodenames_list = [item.contents[5].text for item in info] check(episodenames_list) def check(episodenames_list): '''ensuring that only mp4, avi and mkv files are renamed and checking the number of episodes from the website matches the number of episodes in the target directory''' num_files = os.listdir(basedir) video_files = sorted([k for k in num_files if k.endswith(filetypes)]) if len(video_files) != len(episodenames_list): print (''' The number of files in the directory do not match the number of episodes in the website's list. The number of files in your directory are {}. The number of episodes on the website are {}. Please check that you have all the correct files or that you have entered the correct link for that TV show.'''.format(len(video_files), len(episodenames_list))) answer = input('Do you still wish to continue? Yes/No \n&gt;....') if 'y' in answer: combining(episodenames_list, video_files) else: sys.exit() else: combining(episodenames_list, video_files) def combining(episodenames_list, video_files): ''' combining the name of the files in the directory with the names of the episodes captured from a website''' combined_file_name = [] for episode_name, file_name in zip(episodenames_list, video_files): episode_name.strip('"') episode_num, file_ext = os.path.splitext(file_name) combined_file_name.append('{} - {}{}'.format(episode_num, episode_name, file_ext)) rename(combined_file_name) def rename(combined_file_name): all_files = sorted(os.listdir(basedir)) files = [file for file in all_files if file.endswith(filetypes)] print ('The files will be renamed into the following format: ') for rename_check in zip(files, combined_file_name): print (rename_check) answer = input('Do you want to continue with the rename? y/n \n&gt;...') if 'y' in answer: for old_name, new_name in zip(files, combined_file_name): try: os.rename(old_name, new_name) except(OSError, FileNotFoundError): print ('Error. Failed to rename files.') directory(basedir) I had to add a new sorting function because the sorted module would not sort the files properly. For example if the file was originally called name11,name12, name 13,....name 19, name 110, name 111 etc.. the sorted() would order it as name11, name, 110, name 111,...name12, name 13,...name 19. I could not convert the name into an integer because it had both letters and numbers so i somehow managed to created my own sorting function using re, although I am not sure i fully understand it yet. With regards to the rename(), I changed it so the user could see side by side the old file names and the new file names and removed a rename confirmation in the combined() as it seemed redundant. I think I understand list comprehensions now and they do make things a lot easier and so do zip and enumerate. I've also realised how much easier it is to just pass from one function to another. 
But modern browsers do not pipeline requests. Shall I assume that the biggest bottleneck still exists when the clients are all modern browsers?
Any reason to use this over slack or discord?
I had realized I left out the divisors haha I was completely overlooking the step where you have to subtract each total. And I wasn't quite understanding the modulo remainder. I got it up and running though with the correct output, so thank you!
&gt; https://developers.google.com/qpx-express/ this?
Yes, definitely. The biggest speed up was achieved by using pipelining and most browsers dont do that unless you opt-in explicitely. This problem doesn't exist with HTTP/2.0. I hope to utilize same techniques when porting this to HTTP/2.0 to achieve similar results with browsers.
It covers/works on both. So it does not talk about anything that is Python 3 specific (yet).
Well, there are certainly better solutions out there. But I was wondering, because you posted it to /r/python, so I was expecting to see some code!
Completely off topic, but what font is used by that blog? I know very little about HTML and CSS, but I've seen various blogs like this one where the headings, e.g. "A statement of principles" have the "s" and "t" joined together. Looking at the source for the page, it says this is tagged `h1` but I can't see where the format for `h1` is defined or what typeface is being used. Can somebody help?
Debugging Cython doesn't look as easy as debugging either C or Python. Personally, I debugged the generated C code of lxml (most of it is written in Cython) and it was painful. There's apparently a [debugger extension for Cython](http://cython.readthedocs.io/en/latest/src/userguide/debugging.html) available for gdb. But it looks rather cumbersome to me...
We have always been at war with Eastasia.
Hi there. This is a presentation I did at a recent meetup about the relationship between `object` and `type`. It is heavily based on the excellent article [Python Types and Objects](http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html) by Shalabh Chaturvedi. Hope it will be useful to you, to clarify how the object model works in Python.
This is a bit unnecessary.
Now I know what is tomorrow's work.
The new string formatting and pathlib are a joy to work with.
Yep, came here to say Docker. But good luck getting to use Docker in whatever asinine operations environment OP is having to deal with. 
Pyston was a waste of time and seemed to be very Dropbox focused. Energy should be spent on PyPy from here on and especially helping the PyPy team get PyPy3 updated to support 3.5 and above.
I think its great how many of these frameworks have been popping up. The performance number presented here are almost unbelievable. This is right up there with Nginx in terms of performance. I think i'd like to see some more realistic numbers.
Has anyone missed the part about these orders being a temporary measure until a decent vetting system is in place? What would you guys prefer unrestrained infiltration of ISIL terrorists? This is exactly what is happening in Europe right now. 
this doesn't work? https://msdn.microsoft.com/en-us/library/office/jj860569.aspx
This comes up over and over. I used Vim for over a decade and invested hundreds of hours of trial and error into my .vimrc. PyCharm beats Vim on: linting, code-completion, code navigation (ie: go to definition, go to super function, list usages), refactoring, code folding (folded code keeps its highlighting, and docstrings are folded), and a bunch of other stuff that I wouldn't expect from a text editor, like debugging, graphical database viewer/editor, and, I'm sure, lots more. On top of being worse, Vim is way more expensive, costing more hours than PyCharm costs dollars. A lot of this can be blamed on the lack of community - Vim is not playing to its greatest strength, which is being free software. Vim is admittedly a better text editor than PyCharm with IdeaVim, but editing text isn't as important as the rest of the stuff in a large project. If I'm editing a script, Vim is great, but if I'm editing a large codebase, PyCharm slays Vim, even though I'd much rather use free software and I don't really buy into the "do everything" philosophy of IDE's. I'd be really happy for anybody to prove me wrong with a git repo or something that would let me just download it and start writing code as effectively as PyCharm - without hours of research, trial, and error when I need to work inside a virtualenv or do whatever random thing that inevitably has to be built into a workflow (which, typically, PyCharm just does out of the box, has documentation on how to do, or Jetbrains' support can help with).
I'm searching for something to use on a django project. `django-lint` works okay but still not the best solution. Thanks for the feedback @SomeShittyDeveloper
Came here to say this. You could use something like this (perhaps it warrans a function?): DiceList = [randrange(1,6) for i in range(4)] Stat = sum(DiceList) - min(DiceList)
gitlabs omnibus config on a vps, the a production server with a webhook server clones a repo into production and creates a docker compose file, then a daemon reboots the docker-composse. i am sure this is over engineered.
You are aware that there are already checks involved in entering the country, right? To enter as a resident, refugee, etc. takes years due to the vetting processes already in place. Also, terrorist attacks are one of the least common causes of death pretty much everywhere.
There are a lot of advantages to pyston: it's a fork of CPython so c extensions work for one. 
That's not what they did though. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
How the fuck have I been googling this for days without ever stumbling on the actual API references? What the hell!? Thank you!
This has been removed. I understand that you didn't like that other post. There was no way moderators could win in that situation. However, there's no need to make things worse.
I'm just a student, but maybe [these](https://github.com/MaximAbramchuck/awesome-interview-questions#python) can be helpful
ok, ten.!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Indeed.
I read it again and it does sound a lot harsher than I meant for it to. Low effort, easily searchable, and off topic posts annoy me a bit and they should be removed. However, I know that English may not be their first language, they may not be as informed on the same things the average reader here, and they may be new to reddit in general. My apologies /u/Ceasar_JL. I should have downvoted, reported the post, and moved on.
https://pythonbytes.fm/11 * Pipfile, pip, and virtualenv * Django 2.0 dropping Python 2.7 support * attrs for cleaner classes * Python benchmarking and profiling * Getting Python 3 into more distributions * Home automation with Home Assistant
AIUI the mods take a relaxed position on modding. I don't really give any mind to the trolls, and there isn't really a rule against trolling per se (that I am aware of), so while it is annoying, if you ignore them, it isn't really a problem is it? If there are accounts that are posting here only to troll and you don't think their submissions ever add to the discussion, then you could message the mods about the accounts.
Yeah, many still run Python 2.x, and that is understandable. Python 2.7 end of life is 2020, apparantly. I'm not sure what that entails for you or me, but it's a pretty offputting fact when trying to learn Python. http://legacy.python.org/dev/peps/pep-0373/
&gt; What do you think would be different about a new forum that would avoid the problems with existing ones (reddit, twitter, facebook, and so on)? Except for Redditt and a couple of other technical forums, none of the others allow for use of Markdown Format. It makes quite a difference when people see their own words echoed back in a direct challenge to them, especially if the forum is public. On blogs people get away with too much because of the volume and the ease with which it is able to talk past any feed back and not directly to it. Also, it would be possible to programatically write filters so that the volume could be reduced by hiding posts shorter than a tweet. A reddit.filter module function to do just that should be made available. Also, cells should be text only. It wouldn't be needed to have a person moderate such a forum, but it might also mean that abuse would be available to see for years, If I were running a jupyter notebook as a political discussion I would gently encourage people to write at length much longer than a tweet. I would be happy to end this discussion if social media sites, especially Google were to offer text-only USENET newsgroups with the editing features of rn(1). Google refuses to allow for Markdown Format in Google Groups, even though it allows viewing of its USENET archive with Markdown Format features in it because of rn(1). That is why I have asked Jupyter devs to consider the possibility of doing what social media companies refuse to do, because Jupyter already does enough. I even suggested that the Jupyter project could generate revenue by creating a server large enough to support discussions created as notebooks and encourage this as an alternative to social media. If I could find someone willing to start up a set of public text-only and free NNTP servers for domestic discussions I would do that. If you want to understand my goals, just look at USENET.
What's the best practice for updating? Uninstall and clean install or just install?
i like that convention 
First, consider separating the definition of data that will never change from the logic. For instance, you can create an array of all the stat modifiers for a given race (0 for any stat that doesn't get modified, obviously) so that instead of creating a huge logic block of if statements with directions for each individual class, it becomes generalized to using the class selection as an index into the array and modifying all values accordingly. Strength += ClassMods[Class][2] // 2 is the table index for the strength bonus You can obviously get a little more creative in how you store and process all this information, like using a dictionary instead of simple array. But most importantly, what this would allow you to do is store references to additional logic (functions) specific to a class. for logic in ClassMods[Class]["ExtraLogic"]: logic() Each of these additional bits of logic might prompt the user for more information, or perhaps just add some extra number juggling. Either way, it only runs when the appropriate class is selected and you don't have to explicitly test for it. As for input validation.... welcome to one of the most annoying and ugly parts of computer programming. Every time you stupid proof your code, God makes someone even stupider to wreck your dreams of elegant code. Instead of trying and failing to give you a good example, i'll point you to a fantastic [StackOverflow Q&amp;A](http://stackoverflow.com/questions/23294658/asking-the-user-for-input-until-they-give-a-valid-response) on the subject.
Overall everything is looking good, it is much clearer now what the program does, and the logic behind it. Notes: def sort_alphanum(list): From my very basic testing, this does seem to work. But you should not use "list" as a variable name, since this is a keyword in python. Doing this could cause errors later in the program. for def directory(basedir), it is not really necessary to pass basedir as a parameter, because basedir is a global variable. It can be read from anywhere in your program. But keep in mind that you cannot write to that variable from inside of a function unless you declare it as a global inside of that function. I see you are also experimenting with the .format() method for strings, very nice.
It's really not. It just means the langage has a sweat point like all languages. They start needing this kind of perf because they have hundred of millions of connexions. So they choose perf over the other qualities of Python. It's very ok. Most of the time, you want a language like Python to start up, and then you transition. It's perfectly natural. It's kinda crazy Python allowed them to go that far and is a testimony of the quality of the language. Now of course, it would be great if Python could provide you with Go like performance while still being 10 times easier to read and write. But the fact that it doesn't for now is not a big deal. I see a lot of people going the Go route and comming back. It's a niche language optimized to scaled up servers. For anything others than that it's average at best. You won't do data crunching in Go, geography in Go, sysadmin in Go, bench testing in Go, chores automation in Go, etc. You won't do small websites in Go because why spend twice the time of a very expensive dev to dev it when you can just buy a bigger server ? Go is not a competitor. JS is, as it's starting to be used anywhere a GUI is useful, not just the web. And that sucks. But with webassembly comming, you will be soon be able to run Python on electron, so this is going to be ok too. And JS sucks at the rest as well. We are ok, as long as we don't stop here and keep improving things.
&gt; The biggest problem to my mind is 'filter bubbles' - people group together by political leaning until they only hear from people who agree with them. Then lies that reinforce what they already think can spread easily. I don't see that adding another forum would do anything to alleviate this. You are thinking the way of social media. By self-selecting on the topic or by creating communities of friends you get the bubble. If forums are not private and topic hierarchy is relatively fixed you allow for dissidants and then debate. The best example I know is talk.origins on the USENET. That group which goes back to the origins of USENET on ARPANET in 1985 was chartered to support Creationism, an anti-evolution doctrine, but the group was never private. Creationists were not able to create a bubble and lots of them got roasted and minds changed on that group, I know directly. The reason for bubbles on social media as well as broadcast media is segmentation of media along marketing lines. As Social media wants to place marketing uses ahead of free speech and debate, which is badly needed today more than ever, it invites most of today's maladies. I even wrote to Diane Feinstein, my U.S. Senator and member of the Senate Intelligence Committee that one answer to hate speech and terrorism, and fake news since, is to break social media bubbles by forcing social media sites to offer public discussions, and in particular to force them, via having access to public networks, to run NNTP servers for text-only USENET. This would apply to all social media sites you mentioned. On sites like Reddit that already offer some desired features I would enjoin them to offer alternative static topic hierarchies. On Facebook, I would enjoin them to allow for users to fork new topics by changing the topic line. This would deal with the frustration topic owners have with off-topic and abusive comments and might also include transferring comments to public discussion. This would out hate speech and terrorists posts and otherwise dispel the illusion that comments are private, which they aren't, really. Sharing is not enough on Facebook, it is marketing, not discussion. 
This got reported a lot, and prompted a lot of discussion. It was removed for a while, and then brought back. It's currently approved. On the one hand, this is clearly more related to politics than the Python programming language. There's nothing really directly Python related in here. On the other hand, this is the stance of a major Python project, and it has an effect on that project. I am loathe to implement more rules than what we have (getting rid of obvious spam and directing "How do I... ?" questions elsewhere). I'm turning this back on the community; if a Python project releases a morality blog post like this, and you want to see it, then vote it up; if you don't then vote it down. We will not be allowing general news stories with a title like "How will this affect python developers?" I understand the frustration at seeing a post like this one if you're not an American (I am not an American), but the solution is not to submit *more* posts that you don't want to see as an example.
Are you asking which is faster? Why not just profile it?
I had a good one recently to find the shortest [pangram](https://en.wikipedia.org/wiki/Pangram) (substring with every letter) in a long string of text (so O(N) needed). The output is the substring itself as well as it's starting index. The solution is to create a dictionary with each letter as the key, and the index as the value. The dictionary is updated for each letter as you iterate over the original string, and stored as the shortest if the difference between the max and the min index is less than the previous shortest.
I tend to always work out of a non-root environment, so I just do something like `conda create -n ana36 python=3.6 anaconda` and then `source activate ana36` on osx/linux or `activate ana36` on windows. 
Discord is pretty good for text chat too, especially with bots and the newly released search feature.
FWIW I havent even seen trolling. Maybe Im not looking hard enough. Ive only noticed people posting here instead of /r/learnpython but people here can be really nice sometimes. 
It's not really. `namedtuple('Point', 'x y')` is basically equivalent to class Point(tuple): def __new__(cls, x, y): return tuple.__new__(cls, (x, y)) @property def x(self): return self[0] @property def y(self): return self[1] with some extra methods. The function `namedtuple` generates code for the named tuple class and eval()s it. You can see the code it generates by doing `namedtuple('Point', 'x y', verbose=True)`.
It is possible to create a virtualenv, install from a requirements.txt but not use the Internet at all and point pip install to a directory where you have prepared .whl packages for all your dependencies. Tarring up a virtualenv generally isn't the best idea from my experience.
I don't think it's being actively maintained at this point. They got PEP 523 into Python which was an achievement in and of itself.
Yep, I use vimfx, but there are still some websites it doesnt work well on.
Is there a specific flight supplier? 
Thanks, I wish I'd seen this yesterday...
youtube-dl has a --get-url that seems to do what you want. youtube-dl --get-url https://www.youtube.com/watch?v=dQw4w9WgXcQ Note that in spite of the name, it works on a large number of popular websites. [You can also use it as a regular python module](http://stackoverflow.com/questions/18054500/how-to-use-youtube-dl-from-a-python-program).
I linked it because it's the only kind of response I would expect when a statement is made. You expect no discussion on the matter when you put out a statement. But this isn't really that important, I'd rather focus on the following point. If I was a supporter of this decision and joined your team, would it be expected I agree with your statement, as you make it out to be the official stance of the project? Or would I just have to be fine with my name, as a member of the team, being attached to it? This is why it's best to stay away from these issues. It does nothing but create unnecessary division. Especially when people are donating their time to work on a project.
Are there enough clues in the module to figure it out, find a comment, count characters in it, skip if count &lt;= 140?
My pleasure and good luck!
&gt; On Markdown: I'm still not sure why a particular markup language would make a difference to the conversation. You seem to be referring to quoting people in a reply, but this isn't specific to Markdown; it's long been used in email and in web forums with things like bbcode. Yes, that is correct, but Markdown Format is easy to implement, I have seen very short implementations of it in perl and python, and so there really is no excuse to not have it around as it is here on Reddit and Slash Dot and Ars Techinicia. It is the quoting feature, but with attribution that is important. That existed in rn(1) in USENET 30 years ago, and it got started on e-mail user agents before that, tin, mutt, etc. 
os.getcwd() is still champ imo.
&gt; On public forums and static topic hierarchies: I see what you mean, but I think that requires that there is only one forum that everyone agrees on as the place for discussion. Otherwise, people who disagree with the dominant viewpoint on your forum will move away to other forums where they can find people who agree with them and make their viewpoint the dominant one. I don't think that this is a problem with a neutral topic hierarchy. I didn't see that it was a problem on USENET newsgroups in the 1980's. The reason is simple, as long as the thread in a discussion are not private, and given that most people want attention for their thoughts, they will come back for more, they will find the people who pay attention to them in the discussion, even if they strongly disagree with them, because they want to reengage and the topic hierachy guides then back to the place where it continues. Go look at the pan newsreader with its collapsed threads by topic line. As long as you know which public newsgroup you replied on you can get back to the original thread and any forked threads. 
&gt; On Jupyter: I'm puzzled why you think Jupyter is relevant to this. Other than using Markdown, which we use a ready-made library for, Jupyter doesn't implement anything you'd want for a communication system. There's no way to see who wrote what, no notion of replies, nothing to stop you editing what other people have said... You, know, I think that these objections are really compelling. I can see that the intent for notebooks was always for use only in a trusted, collegial commnity, and that what I suggested is really beyond that scope. My concept would need attribution so a password authentification system would need to be added, and if anyone can modify any other cell that wouldn't do, there would have to be a locking mechanism. Both of those are too much to do with what Jupyter is intended for. I can see that.
Yep, I booked direct to the airline, Virgin Australia.
It is 'sporadically' maintained as Brett described it. It was paused because they were waiting for PEP 523 to be accepted.
&gt; if you ignore them, it isn't really a problem is it? I don't know if that solves it. It may be just me but I think some users may post less and less to this sub. It's sad because there's a lot of nice people over here.
There are not many at all but there's seems to be no punishment for these people. I don't know if that's ok to give usernames here. At least one of these trolls seems to have deleted his account.
&gt; people here can be really nice sometimes. I agree. This sub is great and very welcoming. That's why I'm posting this, because I'm worried it may change if we don't do something.
It will be pretty interesting to see what happens when that date rolls closer. I'm hoping that there is an eventual move towards 3.
Forget the throwaway accounts, just try expressing an opinion that's contrary to the norm! Instant bar-fight! Case in point: *Tabs make more sense than spaces.* Pro's: One keypress, and every user will see the code as they want. (You can configure your editor as you please.) Con's: It's contrary to what has been decreed. Now, does this provoke a good discussion? No. What it does is get you downvoted to hell. *EDIT: Thanks to all the small-minded-but-large-mouthed members of the community for making my point. Who needs trolls when we have so many members who have no idea how to conduct a civil discussion?*
Simple version : It works more places, and future software now has a more uniform way to deal with paths (whether they are strings, bytes, Path objects, or even some custom/future thing) More complicated version : they added a new interface (os.PathLike). So now a path is anything that implements os.PathLike *or* is a str *or* bytes. This means that if you are writing a function like def load_file(file): , and want users to be able to pass in a string, bytes, or a Pathlike object (like Pathlib), there's now a very uniform way to do it. You call something like file = os.fspath(file) in you function. It also means that you can create your own custom path objects (although I'm still scratching my head trying to figure out a scenario in which that's actually useful) 
Apparently www.python.org uses a different cert.
Thanks.
Fair enough. I just discovered that typing "badidea" skips the block and accesses the site anyway, so it's not server-enforced at all.
Ugh keep that to yourself :) The "badidea" trick is really terrible since it's not temporary
I'm going to go out on a limb here and say [Django Reinhardt](https://en.wikipedia.org/wiki/Django_Reinhardt) was infinitely cooler than you or I.
Nope, it's pretty cool actually.
Honestly not. Terrorism is *vanishingly rare* outside of failed states and countries where the government has collapsed due to civil war or invasion. One of the most serious and respectable conservative think-tanks, the Cato Institute, [has published an analysis of the President's order](https://www.cato.org/blog/guide-trumps-executive-order-limit-migration-national-security-reasons). Their conclusion is, it is all economic pain for no security gain. The seven banned countries have not been responsible for a single American death in the USA since 1975. Meanwhile, the countries responsible for the most terrorist murders in the entire US history are off the list -- probably because Mr Trump has business interests in those countries. Trump and his team have got the American people jumping at shadows, while continuing to do business with the *real* threat: Saudi Arabia. They've already sold you out. Pick a few irrelevant scapegoats to throw under the bus to make the average Joe Sixpack feel that the President is "doing something" about terrorism, while continuing the same old business-as-usual support for the Saudis.
In python3 integer division returns floats where necessary, but truncates values down to int in python2. In python3 reduce isn't a default keyword, it was moved to functools. There's tons of differences, and many can't be solved by 2to3.
How familiar are you with how USB works? If you want to write a protocol driver for a USB device, you will benefit enormously by reading some documents/guides like [this one about USB endpoints](https://www.keil.com/pack/doc/mw/USB/html/_u_s_b__endpoints.html), and maybe supplemental stuff about the [protocol and packets](http://www.beyondlogic.org/usbnutshell/usb3.shtml). 
Thought so.
Good to know, thx.
[Piss off](https://shakycode.com/the-story-of-the-fraudulent-coder-d4c6fcf273f7#.3y4iryk3y)
Even more clever: value = sum(sorted(randrange(1, 6) for i in range(4))[1:])
Great resources thanks, I'm still confused when it says all commands are sent through EP1 out but then the command list talks about EP2 command bytes
Profiling means to write some test code using both methods and see which one takes longer under various conditions. It's useful but can be hard to do correctly.
On the warning screen that pops up, click on advanced which should then give you an option to continue to python.org (this is for chrome) Edit: Older version of chrome solution
That's how it used to work, but not any more. Do you have the latest Chrome? &gt; python.org normally uses encryption to protect your information. When Google Chrome tried to connect to python.org this time, the website sent back unusual and incorrect credentials. This may happen when an attacker is trying to pretend to be python.org, or a Wi-Fi sign-in screen has interrupted the connection. Your information is still secure because Google Chrome stopped the connection before any data was exchanged. &gt; You cannot visit python.org at the moment because the website uses HSTS. Network errors and attacks are usually temporary, so this page will probably work later. Find out more.
Isn't it just input now? Or are they different? (not being sarcastic, I just assumed input replaced raw_input) 
&gt; is a kind of (solid line): Also known as specialization or inheritance, this relationship exists between two objects when one (the subclass) is a specialized version of the other (the superclass). A snake is a kind of reptile. It has all the traits of a reptile and some specific traits which identify a snake. Terms used: subclass of, superclass of, superclass-subclass or simply is a. Formally, the defining characteristic of inheritance is the [Liskov substitution principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle): if X is a kind of Y, then it is valid to substitute X in all code where Y is expected. That is to say, for every predicate P, P(Y) implies P(X). To borrow your reptilian analogy, a snake is a kind of reptile because no matter what property P you pick (e.g. P(Z) = does Z have vertebrae?), if a reptile has property P, then a snake has the same property P. In practice, violations of the Liskov substitution principle are common because programmers tend to associate classes with everyday concepts that are not rigorously defined, leading to unexpected [paradoxes](https://en.wikipedia.org/wiki/Circle-ellipse_problem). (e.g. Reptiles crawl, but do snakes crawl?) Moreover, inheritance and mutation generally do not play well with each other.
Sexy.
TSL? 
wow, this has a lot of philosophy and mechanics in common (except it's a game) this is the first time I hear about it 
Dictionaries are your friends! Also functions. :) In any case, good work and keep it up!
Dictionary keys() items() values() also return iterators in python3
People like this irritate me to no end. As someone working to move into programming and busting my ass to actually learn this stuff using every spare minute of my time, its infuriating to see this kind of stuff and knowing that they will likely land a job over someone who is actually putting in the time. So yeah, I concur, he should piss off and stop being a Bryan.
OK, so I take it you're one of _those_ people that everybody hates to work with because they write code that only works on their machine and looks like it's been repeatedly fed through a wood chipper? Because that's what happens when you use \t
```input``` in Python2 is basically eval. If you use input(), you can do ```2+3``` and it'll return 5. The documentation even say: &gt; Equivalent to eval(raw_input(prompt)). In Python3, Python2's ```raw_input``` became ```input```.
What you quoted seems fine: commands are sent to endpoint 1 (at whatever address). Spectral data comes in via 2 and 6, other data (command results? status stuff?) comes back on endpoint 1. Is that table of "EP2" functions you refer to what you tell it (via EP1) so it dumps spectra out EP2? Just implement the simplest looking function (something with no parameters, etc) that sends some sort of reply and get that working. Build from there.
120 characters?! He's a madman!
It's also not a 121 characters wide. Pity, I expected more from just another Perl hacker. 
That's true. I should have clarified that this often works but is visually misleading. Adding parenthesis without importing `print_function` could bite someone if they tried to add a second argument or a keyword argument.
why don't you just use https://github.com/ap--/python-seabreeze
pep8 allows for up to 100 iirc... 
79
Tabs are obviously superior. 
but dude you save like 3 bytes per indentation level don't you want high performance code?
Tabs, because why would you mix them!?
I'm so glad Python comes with PEP8. It made working with different collaborators so much easier. Except for newbie python devs coming from java. fuckThatShit.setShit("fuckthat")
Because using spaces is inevitable, using tabs is not. If you're 100% sure everyone has used tabs for all indentation then you're fine, but why even bother going to that trouble? What is the advantage? All invisible characters are spaces. PERIOD.
"Node" sounds cool to you? Huh?
I'll just use pypy or whatever
https://www.python.org/dev/peps/pep-0008/#maximum-line-length "Limit all lines to a maximum of 79 characters." Yes, it goes on to later say "For code maintained exclusively or primarily by a team that can reach agreement on this issue, it is okay to increase the nominal line length from 80 to 100 characters", but that's pretty much true of any convention; if your team can all agree, then it's fine to use the standard your team agrees on. If you just say "PEP-8" with no qualifications, it's 79. As someone who prefers to have three buffers side by side in my editor, so I can have more context when browsing a code base, I really hate this trend to keep bumping up the maximum to 100 or 120.
Reddit is fundamentally designed to promote toxic behavior I think.
`:set list`
Heresy!
There are indeed tradeoffs. But I love my 80 char lines..
[removed]
You brought back so many bad memories, I hate you.
Shit, I code exclusively for myself, in an IDE and I still follow pep8. Makes it easy to have a vertical monitor too.
Agreed. If visible spaces don't bug you at all then there isn't any downside to tabs over spaces.
Content vs. presentation makes sense for coding vs. visualization by end-users. When we're just talking about coding that split doesn't exist. I would say that in Python, all whitespace before non-whitespace should usually be understood to be syntactic anyway, and so tabs shouldn't be necessary to indicate content.
There's no real standard, which is why everyone does what they feel like, and I've seen 1, 2, 4, 7 and 8 space tabs along with real tabs in various places. if you use heredocs you can use a - to make it ignore tabs at the start of line though, so you can do something like: usage() { cat &lt;&lt;-EOF Usage: foo [bar] [baz] bar - does bar stuff baz - does baz stuff EOF } and (assuming that is prefixed with tabs) it will print with zero indentation except the spaces you add (e.g. in front of bar and baz). Since built in shell features support things that only work with tabs, it seems logical that it's intended to use tabs. The space enthusiasts in bash end up with something more like this instead: usage() { echo "Usage: foo [bar] [baz]" echo "" echo " bar - does bar stuff" echo " baz - does baz stuff" } It's more useful again with large blocks of things, like a chunk of json or something that is for some reason in a shell script
It's much harder to read python code with line wraps. They are breaking indentation blocks.
Oh, python amazes me once again, thanks!
I see line widths as a guideline more than a rule. Try to stay below a certain width because it'll generally result in more readable code, but sometimes it won't and in those cases feel free to go long.
For me this guy is really good. https://pythonprogramming.net/ 
Just curious: what was the resistance to Python 3 in your company, how difficult was the transition, and how large of an organization is it? Thanks for posting.
Wait, tabs arent the norm? Bbbut they make my code look smooth and i dont have to align every fucking line by exact letter
&gt; Yes, that is perl indented with 2 spaces. Also known as the correct way to write perl
Sorry, I figured the /s on my previous comment would have been obvious, but apparently some browsers turned it into a newline. My bad.
I mostly agree. Suggesting some linewidth is sensible but 80 characters is a bit restricting. I've read code from co-workers who use line wrapping and "went to town" and it bugged me but other times I personally find 80 characters just a but too limited.
The 7 I think was a typo, and I made a PR to fix it as soon as I saw it, and tagged the original person saying 'hey, wtf is this shit? 7 spaces?' The 1 spaces was helping someone learning how to use bash in a first year university course. But yeah, tabs are useful in bash, so I use them by default so that I can use heredocs and other tab minusing features whenever I want without issues.
&gt;the correct way to write perl The correct way to write Perl is to switch to Python and never look back.
even "good" editors always end up treating the spaces in indentation individually in some ways. so your cursor ends up stuck on the 7th of 8 spaces, you press delete but then you're on the 4th of 5 spaces, etc. etc. it's a nightmare every time.
Sure thingy
Some editors will show the wrapped line with the proper indentation.
Very interesting, thanks! 
My reason for preferring 79 characters is two-fold. 1. I can tile editor windows, so I can keep related files in the same screen. 2. It forces me to break lines logically, making the code more readable.˙Long lines are a PITA to read, there's a reason why papers don't use the full page width for their articles, instead opting to laying them out in columns. For example, I loathe very wide function signatures with all arguments on the same line and prefer to put every argument on its own line. def foo(arg1, arg2="foo", arg3="bar", arg4="baz", arg5="moo", arg6="meh"): pass vs. def foo(arg1, arg2="foo", arg3="bar", arg4="baz", arg5="moo", arg6="meh): pass
Huh? Vim works just fine with spaces. I can hit tab for 4, or backspace for -4.
A lot depends on their monitors/screens at work. Mine provides monitors with 1920 pixels width which is enough to fit two 120 liners with default font sizes (in jetbrains IDEs). If If I had to fit two 150 lines I could probably do it with a font size that I wouldn't mind. I think 2 is enough, 3 is nice, but not needed as often in my experience. 
Decent points, my experience though is that many developers who like long lines try to squash as much logic as possible in a single line. And even though reading code is indeed quite a bit different than reading a paper, it does have one thing in common and that is if you need to move your eyes too much to read a line makes the line harder to read. I chose 79 because it's the length recommended by PEP8 although I find 100 also acceptable. 120 is just too long in my personal opinion.
convert them to type annotations, they're going to be shoved down our throat eventually anyway.
Out of interest, what advantages do spaces have? 
All of them? That's great news!
Portability.
If your scopes are not "aligned by the exact letter" you must have mixed tabs and spaces, which I think everyone agrees is bad :)
What a nonsensical non-argument.
&gt; In practice, violations of the Liskov substitution principle are common because programmers tend to associate classes with everyday concepts that are not rigorously defined Violations of the Liskov substitution principle are common because programmers tend to not be taught proper OOP.
Why are spaces more portable? 
The get a bigger "bigger monitor" pissing contest is a naive and dumb argument. Reading long lines sucks. Pick up a book and count the number of characters on a line. It's going to be anywhere from 45 to 90 characters long because that's what is most comfortable for readers. I do all my work in a terminal window at fullscreen. The smallest it ever is is 178 chars wide. I don't want to dedicate 2/3 of that space because someone doesn't know proper code guarding techniques or can't be bothered to break up a long list arguments.
I do CR on my phone sometimes, I can do 80 char lines ok, 120 and I'd be scrollin. There's a reason we stick with 80 despite all the screen improvements, people work in diff envs. Just because you like to set your stuff up in a particular way doesn't affect the fact that there are people hard of sight who don't want tiny text, or sometimes work from a netbook/small laptop. Besides, lines longer than 80 are a code smell, too much on one line not helpful.
Before you use those methods you will first need to import string.
O god I am glad I don't work with you. If I did a CR on your code, it'd be a one liner "PEP8 or it won't be merged". Working with others is an important part of being an adult/professional; you just sound petulant "waaa I wanna do it my way and screw everyone else". Also line wrapping makes an unholy mess.
If you can't express you concept in 80 chars, you're doing too much in one line. 80 chars is the standard, just follow the standard and get on with real work.
Tab is not a universal character like space is.
And the average Vim user spends 20 percent of his time configuring Vim plugins in every new machine he uses.
80 is a long standing standard which lined up with old terminals. Besides, just because a monitor is a certain size doesn't correlate to a person sets font sizes and lays out their work space. Some people like vertical monitors. Sometimes you need to look at code while you're on a phone or netbook. Just because you like your workspace a certain way doesn't make the standard less relevant. The entire point is that 80 lines is a lowest common denominator we've had for quite some time. Find more important things to focus on, like emacs vs vim.
I like type annotations. :-( Also why are you using a throwaway to comment on /r/Python? So silly.
Wtf is your point? There's nothing wrong with wrapping prose. Wrapping code is a horrible offense. Edit: You do realize that the web has had "responsive" design since it's inception. There's no newline where you cut off my comment, so you should have just copy-pasted the whole damn paragraph. 
Why what? 
100 is what everyone should be using! It's the perfect compromise. There's no one who NEEDS 80, because we all have bigger screens, and 120 is actually not the best for readability. When you have 100, you could still allow for the occasional long sentence (in terms of strings). It's not necessarily about actual line length, as much as it is about the complexity of the sentence. I don't even mind 300+ characters if it is just a string assignment. Note that really helps: do not fold your sentences http://imgur.com/Ty5Jscv (see the bottom left)
I've been known to tile 3x3 in some projects, especially the projects that were less than fun to maintain. But it's about more than just tiling, it's also about breaking logic into easy to understand lines. I've seen too many devs try to cram as much logic as they could in a single line which made for very difficult to read code, enforcing a shorter line length forces people to break it up.
standardisation is way better than minimal gain from tabs
Not gonna lie, that is an awesome idea. Really anyone who holds on to a "throwaway" account for over three years must be pretty amazing. (If you haven't read my username yet, it might make my comments seem less weird...)
This: print( ---&gt;'Hello', ---&gt;'World', ) Not this: print('Hello', ---&gt; 'World') _(`---&gt;` represents a tab, spaces as displayed)_
Don't ever use `eval`. `eval` will eat your cat. `eval` is dangerous. If you want a number, use `int(input(...))` instead. What you're looking for can be achieved with a list. Post your questions in /r/learnpython next time.
I actually like camelCase and PascalCase. I really dislike snake_case. The only time I use underscores in variable names IS_IN_CONSTANTS. As for setters/getters, the amount of foaming at the mouth Java programmers do regarding them is just obnoxious. C++ programmers using OOP don't make a big deal about their use.
To be fair, if you write idiomatic Python, you rarely need more than 74 characters. And eyes scan from top to bottom better than left to right.
/r/learnpython
/r/learnpython
It's not about you or what you like, it's about industry standards.
Even core python devs say 120 chars is okay to break sometimes. Don't go to such great lengths to bring that 121 line in.
Making a standard for your code is fine, but to call it an -industry- standard is another. Look at the logging module in the python standard library, and very well respected books like Al Sweigert's, both of which useCamelCase.
1920x1080 is a phone resolution. Time to upgrade your developer rig :-)
&gt; just clones their dotfiles repository or has some other way I have a dotfiles repo too. But imagine, you start off with a non-empty home directory. You can't just clone it. Either you would have to clone into a empty directory and then manually copy. Or do something like git init git remote add origin PATH/TO/REPO git fetch git checkout -t origin/master And then merge. I am pretty sure it will take more than just 2 minutes. Can you elaborate on your " some other way of setting everything up automatically". I'm curious.
why don't you file a bug
I can live with camelcase and getters, but Java design patterns and idioms in Python trigger me.
Al Sweigert's book is not respected for its adherence to coding standards, and there's a *lot* of the standard library that sucks, every single maintainer would tell you that. Not following pep8 without good reason is about as close to objectively wrong as you can get. "There should be one-- and preferably only one --obvious way to do it." and in this case, the "obvious way" is literally defined.
Thank you. 
It's getting a bit old, but here's a blog post I wrote: [So you want to write a desktop app in Python](http://takluyver.github.io/posts/so-you-want-to-write-a-desktop-app-in-python.html)
Thanks! It was a stupid beginner's mistake, I guess :)
I've posted the code and questions I used last for this: https://gist.github.com/Spindel/7ccd43b1f2f79f1bb23c70920f75cec4
Fortran?
I personaly use a git repo and xstow. So from the home directory it would be: git clone https://github.com/&lt;username&gt;/dotfiles.git cd dotfiles xstow vim Which clones my dotfiles in the dotfiles directory (so that I do not have a git repository directly in my home) and then simlinks all the vim config files into the correct places (for me that would be .vimrc, .ackrc and the .vim folder). After that I would do this xstow zsh xstow awesomewm xstow git xstow mpd xstow emacs xstow misc to setup the rest of my system. My dotfiles repository has a folder for every independent program (so 1 folder for vim and 1 for emacs). xstow just takes a folder name and then symlinks the contents of that folder into the parent of the working directory. In this case the working directory is `~/dotfiles` and `xstow vim` would then link the contents of `~/dotfiles/vim` into `~`. On the file system it looks like this: (output shortend a bit). ~ ls -a dotfiles . awesome diff.txt git .gitignore herbstluftwm lock mpd vim .. bspwm emacs .git .gitmodules i3 misc README.md zsh ~ ls -a dotfiles/vim . .. .ackrc .vim .vimrc ~ la total 22M lrwxrwxrwx 1 name group TIMESTAMP .ackrc -&gt; dotfiles/vim/.ackrc lrwxrwxrwx 1 name group TIMESTAMP .vim -&gt; dotfiles/vim/.vim -rw-rw-r-- 1 name group TIMESTAMP .viminfo lrwxrwxrwx 1 name group TIMESTAMP .vimrc -&gt; dotfiles/vim/.vimrc 
Yes, with fixed form formatting.
Yeah, I remember that. At one point I realized that Fortran code looks like that because that's how punch cards used to be formatted. Blew my mind.
Even the Python standard library is inconsistent in using snake_case. 
You seem to have missed the "without good reason" in what I wrote. [Do this](https://www.python.org/dev/peps/pep-0008/#prescriptive-naming-conventions), unless you have a *specific* and very good reason not to. Even then, "Special cases aren't special enough to break the rules."
I find 80 char lines basically punishes you for using longer descriptive variable names and encourages naming stuff "x".
I thought the correct way to write perl was one tab...
&gt; The other most common argument for tabs that no one has replied with yet is that they allow everyone to customize their indentation level. Ironically, I've heard a lot of argument stating this as a negative, because lines from a dev using 2 spaces per tab suddenly don't fit into a window of a dev using 8 spaces per tab.
I use PascalCase for classes and snake_case for functions. Is that bad?
How would you, say, align multi-line function calls without spaces?
&gt; What I don't like about elastic tabs is that it proposes a relatively complex change to all text editors. **And** all terminals.
I like [Kivy](https://kivy.org/). It presents a simple to use, batteries included framework for developing apps for any device (including iOS, which to my knowledge is the only python framework which currently supports this), providing easy methods to write DRY code, without having to do any changes (to core kivy and python methods, not OS frameworks) to your code between device implementations. The documentation is all baked right into the code, and is extremely well done. This makes learning the framework via exploration much easier to accomplish. The final thing I like about kivy is the wonderful amount of abstraction from actual graphics code needed. I almost never need to handle any sort of pixel collision coding as it is handled by the framework.
&gt; it's best to use tabs for indentation, and spaces for alignment wat. Mix tabs with spaces and if someone has set a different tab size EVERYTHING will look broken. It's basically the same as using spaces, because everyone has to use the same tab size. If you wanna use tabs, use ONLY tabs. Same goes to spaces. Tabs, however, limit the ways in which you can break long lines. For instance, you can do the style below, because it will cause problems with people with different tab sizes: very_long_function_name_with_lots_of_args(arg1, arg2, arg3, arg4, arg5) 
[According to the StackOverflow Survey from 2015](https://stackoverflow.com/research/developer-survey-2015#tech-tabsspaces) 45% of the developers prefer tabs over only 33% who prefer spaces. [And looking at the top starred repos from GitHub](https://ukupat.github.io/tabs-or-spaces/) you can see that it largely depends on the language and technology you are using. [And it's heavily discussed to this day](https://blog.codinghorror.com/death-to-the-space-infidels/)
Thanks for reading, glad you enjoyed it!
What I mean is that using spaces *somewhere* in your code cannot (reasonably) be avoided.
Can I borrow your coworker? Preferably to clone him.
It almost never happens to me. English is a great languages with many short yet descriptive names. You can use parenthesis to break chaining on several lines and use intermediary variables. Which makes your code even clearer. 99% of the time, when I see people complaining about a specific code they wrote that doesn't fit, it can be written in a better or more readable way. For the rare case where you do need it, PEP8 allows you to break the role and you can just spare a # noqa.
Giving you much more time to be smug about it.
Hey, Saleor uses Django so you can follow [Django's documentation](https://docs.djangoproject.com/en/1.10/ref/settings/#std:setting-LANGUAGES) to update your settings file (`saleor/settings.py`).
... I got annoyed with how Atom/sshfs is working for me and spent half my shift today screwing around with vim and looking at plugins. I may go back. Of course if I do, I will spend at least another half a day tinkering to get it how I like. I should probably just spend that time actually writing some useful functions. ¯\\\_(ツ)_/¯
Emacs user here, but still with dotfiles stored on github. My dotfiles repository contains a Python script that puts symlinks in all the right places, avoiding overwriting anything that is already there. For things that usually require some server-specific configuration, like .bashrc, I have a .bash_common file to be sourced from the main bashrc.
Library support
Looking at the website there's a lot going on in the backend, if you want to do this with Python then you're probably going to have to use Selenium and automate the input to the page. Flight suppliers actively combat what you are trying to do because they don't want people scanning their whole flight data. I'm assuming you have an account with Virgin/Velocity? It might be worth requesting it as a feature. 
This was more an answer to: &gt;I thought everything was spaces these days But yeah, if you use spaces your editor normally converts tabs to spaces
I work 4-6 windows up on a 13" monitor that almost invariably travels with me everywhere, and has done since I was 17. My eyesight simply isn't good enough to handle a font small enough to permit more columns or more windows. I have no interest in lugging a pocket mainframe around on my otherwise frail back, 13" is already too much. This setup has been good for handling almost any situation, grokking any complexity of codebase, except emergency spelunking the work of halfwits who have never faced the prospect of 3-way merging a trashed branch from a cafe over the telephone while some business's web app is down. (Because the sort of people who give up on line wrapping rules almost invariably are the sort who also never learned RCS properly either) That's not a make believe story, actually, it's one I've had to deal with every other year for the past decade
The correct way to write Perl is to use bash or Python instead. Or pretty much anything else. 
Oh boy, underscore vs camelcase, I just put down my tab vs spaces pitchfork. I think a lot of people who don't seem to care about style standards haven't worked on large, long-running projects. I'm one of the leads for a really big platform which runs hundreds of sites that are well up there in Alexa rank. I deal with new devs all the time, and simple pep8 stuff is like the Van Halen brown m&amp;ms for me. It's documented that new code is pep8, so when I CR a new dev's code and there's blaring issues, it's a huge red flag, I don't go any further. I take a few minutes to explain that the coding guidelines are very important and that they've placed themselves in zero tolerance probation. I find the first violation, fail the PR until the person takes the time to look closely at both. SW engineering is highly detail oriented. If you can't be arsed to follow the simple stuff, I know to keep a very close eye.
why not 7 space indentation with the 7th column being a continuation to the next line and columns 73-&gt;80 being the sequence number...??? 8-)
GNU stow works exactly the same way I think. So yes.
Based on other conversations with the team, the camelCase must be to maintain consistency with other parts of the code base. The whole point of the refactor is to improve consistency and maintainability, and they are PEP8 about everything else I am aware of. That said, if it were up to me, I might have put everything Python side of the API calls PEP8, to include snake_case vars. 
It's all good. Here's the (almost finished) [version on Python 3.6](http://learnpythonthehardway.com/python3). I bought the version on 2, but then found this and just started working through it instead. It looks like all of the code is updated, but it looks like all of the study drills aren't completely updated yet.
IMO Python &gt; Perl &gt; bash. Though I admit I haven't wrote much in the latter.
Half a day? Once?
You should post to /r/learnpython, but [Think Stats (an introduction to Probability and Statistics for Python programmers)](http://greenteapress.com/wp/think-stats-2e/) is what you're looking for.
It’s a style standard specification for Python: https://www.python.org/dev/peps/pep-0008/. At least PyCharm (an IDE) is able to check that your code is following PEP-8. It really helps when working with a larger team. Just follow the guide and style will be consistent.
Getting all the squares of positive numbers until one hundred: [num * num for num in range(100) if num % 2 == 0] Getting all the non comment upper cased line from a file: [line.upper() for line in open('/etc/fstab') if not line.startswith('#')] And let's be fair, you will use "l" for line, and "i" for num because in this context it's a disposable var you don't need to name. And of course open will be "f" because it will be in a with block and it's the usual var used for it. If with that you comprehensions is still too long, you probably should avoid one. 
Tabs do not work correctly some times. 
If your variable name is much more than 12-15 characters long, then 9 times out of 10 you could profitably shorten it. Concise is good. Variable names should be 1-2 word evocative identifiers that you remember and recognize quickly, not 3-5 word sentences. Sentence-style variable names, in my experience, aren't easier to understand, and are meaningfully harder to spot/recognize while scanning through code.
This has nothing to do with blockiness or pixels per inch. Instead, it has to do with the size of the font I can read at a certain physical distance from my computer screen. Increasing the resolution doesn't magically make that physical constraint disappear.
The thing is, I've not yet once in years of programming python seen a line of code over 100 characters long that couldn't be made more readable by shortening it. Is a 112 character long line a terrible thing? Not really. I'll get mildly annoyed when I pop your code open in a split for reference (my first time reading it) and then realize I can't see the whole line, but it's not a big deal. But I challenge you to find a line of code that's that long that wouldn't be better either with a line break or by splitting the logic across 2+ lines.
Then you split it to multiple lines. Who even wants to write the whole list comprehension to a single line if there are if-else clauses or something else in addition to plain looping.
Okay, now add 16 spaces in front of that, because that code is inside an if inside a with inside a function inside a class.
If your list comprehension is long, you should totaly line-wrap it for readability. For example compare primes = [x for x in range(2, 100) if all(x % y != 0 for y in range(2, x))] to: primes = [ x for x in range(2, 100) if all(x % y != 0 for y in range(2, x)) ] The second is, at least in my opinion, much more readable.
I'm not anal about 79 chars because sometimes it hurts readability instead of improving it. Who said anything about Java?
Not following pep8 because internal standards are different is the first header of pep8. &gt; A Foolish Consistency is the Hobgoblin of Little Minds
Nice! Does this cover the async features too like with asyncio and uvloop?
PEP8 specifies all case types, for different scenarios. Module names are camel case, classes are camel case with a leading capital, functions and methods are snake case, globals are all caps snake case, etc. When followed it makes it intuitive to know what you're working with at a glance. Without having to backtrack to figure out what something is. 
Use Sublime. The trial is the same as full version and there's no restrictions so it's basically free.
keyword being "sometimes". For those times, PEP8 actually allows you to ignore the rule. Which is what everybody sane does, and ones need to do it rarely.
You! Thank you! 
Sounds like if I want to bring in a 121-char line, I have to fight my coworker. Could be worth it.
Fanaticism of any kind is not commendable.
Except when you're using a library like ArcPy (GIS library for interfacing with Esri ArcGIS software) and some of its function names are over 40 characters long: &gt; arcpy.FeatureClassToGeodatabase_conversion( That's not the longest, by a long shot. 120 makes a lot more sense for a script that's using a lot of ArcPy functions. I'm still learning to use PEP8, but I've just given up on line length limits and using an IDE with line wrapping.
getters are a Java design pattern! They exist solely to work around limitations(language design tradeoffs) in Java.
I like how it's ambiguous if they're a mad cause 120 != 80 or cause 120 is arbitrarily way too short.
Not just PyCharm, but anybody can use [flake8](http://flake8.pycqa.org/en/latest/) in any environment for linting.
&gt;Tab is not a universal character like space is. Certainly it is. It's just a more powerful (and I would add, programmer-friendly) one, as you can make it do precisely what you want it to do. Spaces are just... spaces. Tabs are yours to command. 
&gt; Are you telling me when these people indent they press space 4 times? An even marginally competent editor, when told that indentation is (a) done using spaces and that (b) indentation is (for example) 4/indent level, will be perfectly happy to maintain your indentation level by inserting the spaces for you. If it can't do that, it's time to change editors. 
I don't believe you, If it's not in one line it isn't perl. That must be some other language. I actually don't mind two spaces at all, that's what we use in Puppet and YAML files. I can read it just fine.
Thank you 
How big is your monitor? The following is readable even on my laptop screen. If I zoom out more to fit 120 it is readable but unpleasant on my laptop but should not be unpleasant on my work monitor (24inch). https://imgur.com/a/UpPbd
People should really stop with the images of snakes when talking about Python. 
&gt; pre-PEP 8 and hasn't been changed to preserve backwards compatibility. and then even more of the standard library has snake_case aliases for the original camelCase function names.
Much of the python standard library began prior to pep8 becoming a standard. And at least part of being a good python core developer is following the style within a module. Your personal preference probably has far more to do with either what language you learned first or what language you have predominantly been using to code. But by no means is camelCase really desired over snake_case for python.
This is a big reason why 120 chars works for us. We work in a Java shop and we are all fond of longer, descriptive variable names. We also are mostly doing integration work and it involves lots of API calls, which means long URLs that are hard to read when wrapped.
What if I have good eye sights and don't want to make it bad?
go write Java then ;) /s Clearly, we do too.
Yup, but in a lot of cases that doesn't matter, or is even desired. There's a simple way to make it not do that, too, but I can't remember atm what it was. It was like putting an 'r' at the front or the likes (though, I've verified that specifically isn't what it was, just in the realm of that) I haven't touched python in about a year, so I'm getting a bit rusty... 
I have my huge 4k laptop screen in Scaled mode and I have two 1920x1080 monitors on the desk behind it. The 1080p screens display text brighter and it's easier to read monospaced code on them because the letters don't have anti-aliased edges.
Yes, pySonic was it.
Haven't looked through much of the code, but it might be a better starting point (depending on what you want to do, i.e. "fix my problem ASAP" or "learn about USB"). Fork the repo and go to town.
If you're starting off and want to learn Python for data science without faffing about: [install an Anaconda distribution](https://www.continuum.io/downloads) (get 3.6). You won't need to worry about having XCode or whatever toolchain for a while as it already includes binaries. Can 2 and 3 coexist? Yes. I have 2.6.9, 2.7.11, 2.7.12, 2.7.13, 3.2.6. 3.3.6, 3.4.5, 3.5.1, 3.5.2, and 3.6.0 currently installed on my Mac. The Python that's launched when you say `python` on the command line is whichever the shell finds first: the first in your `$PATH`. There are various methods to change what's first, virtualenvs, pyenvs, etc, but things like Anaconda can also just point to `/a/specific/path/python` and always get the one they expect. Not many packages are installed as executables or via `brew`. Almost all will come either via `pip` (or `conda` if you're using Anaconda). If it's a non-binary package with C extensions, you'll need a toolchain.
As a note, the semicolons are still valid python. For example, this is a common idiom when programming in python and debugging code: ``` import pdb; pdb.set_trace() ``` But part of the reason you've been trained to remove those semicolons is because of pep8.
Or more precisely, they are not taught OOP at all, they are taught the synxtax to write then use classes and their instances. Because it's much harder to teach the former than the later.
How is that not consistent?
They somehow managed to forget to update miniconda, lol. I updated it anyway, by installing the latest 3.5 version, then `conda install python=3.6` and manually renaming HKEY_CURRENT_USER\Software\Python\PythonCore\3.5 and stuff inside to 3.6 to make py launcher work (that's a conda bug btw imo).
It's a different tool for a different job. Java is a lot more rigid in structure, which makes it more suitable for working with extremely large codebases, especially when collaboration between hundreds of engineers that can't talk to each other is important (Android is a decent example of a "right" place for Java). You CAN do these things with Python, but it;s harder to herd the cats and you usually end up with strict conventions on how things should be written (such that it ends up looking a lot like a Java-y language).
You're welcome! Do note that the example above will take a few hours to work through with someone. It's not quite the simple "reverse a linked list" exercise. I'd suggest not using my code verbatim, but take something from your own production code, and do something similar with it. Anyhow, I hope this helps you get started for better interviewing than the traditional coding exercises. 
That's not the same as my example. Besides that even your version has 67 chars. Add 8 for indentation and 4 for a transaction and you've reached 79. What if you also have a local function and an if-statement or longer classnames/column names? You could start spending time on trying to get below 80 but I wouldn't. 
An industry standard means that when you get a new library, you won't have to stop every time to remember what its style is like.
If your list comprehension is long, you should really consider expanding it and not using a comprehension. I LOVE list comprehensions, they tickle me in the 'wow that line of code I wrote is so clever!' way. But clever lines of code aren't good for readability or maintainability. This example comprehension is pretty dense, it will take me a bit to understand how it works whether it's on one or two lines.
That's a fair point, I suppose it's language dependent too, most of my work is c++. I've done 80, and I just always find myself fighting wth it, whereas 120 I rarely have to think about
Grumpy's benchmarks were recently discussed in this subreddit. See [this](https://www.reddit.com/r/Python/comments/5mwn6a/python_can_be_more_than_100_times_faster_than/) submission, interesting stuff.
Just a learning experience. :)
This isn't true though, is it. A lot of the people learning python are doing so for a reason and one of the biggest of those reasons will be to get a job. Most companies that have been writing python for a decade or more are likely to have a huge amount of Python 2 in their codebase with absolutely no intention of attempting a migration. It is not at all a niche industry issue. 
If your screens are 16:10 instead of 16:9, I really recommend dual portrait displays. It can take a bit to get used to the bezel, but so much more screen is *in front of me*, and I get to see 140 lines at a time (if I waste a whole screen on one file) which is really handy for scrubbing through large amounts of code in a hurry. The 1200px width is also just wide enough to fit two 80 column files at a comfortable font. The portions of my screenspace that aren't taken up by code are comfortably split into halves or thirds, and no screen is too small to be useful. (Only tall, narrow windows like IM contacts really get in the way) Your favorite tiling window manager makes this excellent (I'm forced to use Windows, so I get WinDivvy, which really isn't that bad).
Tying your ability to read your code to a minimum hardware spec is crazy.
It looks good. I do wish the video were in English. Well [the website docs are in English](http://jam-py.com/docs/intro/first_project/writing_some_code.html) so I think I will check those out.
Have you tried using qt rather than inline as in here: http://stackoverflow.com/questions/19992023/how-to-pop-up-an-interactive-matplotlib-figure-in-ipython Alternatively you might be able to show the results of a command to the side of your output by playing with the css Example of changing some css: http://stackoverflow.com/questions/38783027/jupyter-notebook-display-two-pandas-tables-side-by-side
1. can applications be "mounted" within other applications? 2. Are there authentication and authorization modules? 3. What about session control? 4. What about non-database driven apps, like the Calculator on [the Nagare examples page](http://www.nagare.org/portal/)?
There is also a very good reason for using tabs.
I am still in the java course so we haven't done any of that yet but I get your point. I was just saying for basic stuff java is to extreme
Not really, or at least I've yet to see a compelling for argument.
I actually hate doing that. I have a hard time focusing on two things side by side (top/bottom is OK though). When working, I usually have one thing per monitor and then use workspaces.
 arcpy.FeatureClassToGeodatabase_conversion([ 'file1.shp', 'file2.shp'], '/path/to/file.gdb') Any particular reason you're doing that instead of: arcpy.FeatureClassToGeodatabase_conversion( ['file1.shp', 'file2.shp'], '/path/to/file.gdb') ?
We have a coding standard at work. It basically says "PEP-8 is wrong - use tabs everywhere".
Unnecessary indentation. if not meh: return with open('/etc/fstab') as f: ...
The so called *mental model* the author creates is imho purely artificial! As ``def`` is a mandatory *keyword* it is impossible to create an anonymous function *that* way. So why should one think about it that way? 
Indentation is a unit of coding. 1 atomic idea to indent the code. Tabs are representing a unit of indentation. What is better - one character that is 1-to-1 representing one unit of coding, or somewhat-randomly chosen number of characters representing one unit? Especially in a language, where indentation is representing a scope and not just for representation. Indentation unit shouldn't be able to "miss a quarter" or have 1 subunit too many. It's either there or not. The only compelling argument for spaces is "author of the language was pro it and community just dragged along". Which is a decent argument and the reason I am using spaces even though I found tabs much better. In all other languages I used tabs and it was much much more convenient. 
Good to know! Keep working on such great projects!
&gt; My .py file is set to coding utf8 in the head, and use Python 2.7 That only refers to the actual code, ie it lets you use unicode in the source code. It does not affect how python handles strings. In python2 you can directly compare unicode and string types: &gt;&gt;&gt; u"spam" == "spam" True &gt;&gt;&gt; u"späm" == "spam" False So I doubt there is a problem with matching the results; I think your problem is elsewhere. I suggest you to post your code and error message on /r/learnpython . 
For this type of question, /r/learnpython would be more appropriate. Thanks!
They are 16:10. I might try it out, though I would like to fit two 120s side by side. If the coding style at work had 80 width lines I'd probably try it out. 
https://i.imgur.com/hW0hbie.png
Thank You. I can see that my proposal is a bad idea for Jupyter. I also note the distinction about what your code does. I did investigate libraries that support Reddit, but there was too much to get through to the answer I was really after. I think that to really do what I want may take some jQuery at the browser level, to do the filtering entirely at my end. Javascript can probably count characters as well as any other language, so if a post is tweet sized, hide it. If I were to write a discussion board, I would not allow posts less than a certain size and I might not allow multimedia at all, forcing people to use their words, like talking to a toddler, most people on Social Media have devolved into toddlers with a trucker's lexicon of profanity. I might not allow for real links; maybe it imposes more discipline if people have to edit material from outside and quote from that and use link info as attribution only, or use a name for attribution.
This article is a little weird. Defining a function name has a particular meaning in the context of the namespace and how you can call it in the future. All half-decent python developers already know functions are objects, and that .__name__ is a property of that object. The interpretation 'python functions CANNOT have names' is just incorrect. Python functions CAN not have a name, but it's silly to just pretend function namespace doesn't exist.
Python 3.x doesn't *use* UTF8 but it does assume source files are UTF8. The internal representation of its string type is an implementation detail. It is far easier to handle Unicode correctly in Python 3. 
you can probably use it pretty effectively to write plugins for go programs; might not want plugins accessing all that shit anyway; probably want them doing heavy data munging that would be painful in go
I think I see a bug. If you want a random number from 1 to 6, inclusive, you should use `randint(1, 6)` or `randrange(1, 7)`.
Because it is up to the renderer how to display the code. For consistent styling that does not work
I feel your pain. I worked at a C# shop for 7 years, and still do a bit of C# occasionally. The number of semicolons that end up in my Python code and have to be cleaned up before commit is my #1 private shame.
 def example_method(with_some_args_that_are_long, and_need_line_wrapping_for_visual_consistency) That cannot be done in a way that is visually consistent across tab sizes.
That's completely orthogonal to consistency As long as you don't do visual alignments with tabs, the tab width is completely inconsequential
Why would fixing the tab width increase consistency? It's completely irrelevant how wide they are displayed
Have you tried reducing the number of factory layers? kidding.. I try to stick to 80 as much as possible (side-by-side code windows are useful sometimes), but if continuing onto the next line makes things less readable I'm happy to continue up to 120. After that, I go as far as splitting things up into multiple variables or statements. My code is rarely *that* performance critical.
 primes = [] for x in range(2, 100): if all(x % y != 0 for y in range(2, x)): primes.append(x) That's not more readable. And primes is written twice in the code (for no reason) and it doesn't read like a definition of the primes list, instead you need to follow how it is generated.
This is not indentation - this is alignment. This has to use spaces. Tabs -&gt; for indentation Spaces -&gt; alignment. This example works perfectly fine with tabs used for indentation.
Man, and people complain about *space lovers* using the spacebar too much. At least with tabs-as-spaces I can indent the above with 5-6 keypresses vs. your 15+
Is there an ETA on miniconda?
See indention styling: http://stackoverflow.com/a/15435837
PEP 498 f-strings in 3.6. I didn't like the idea at first, but that syntax saves a lot of time and makes certain pieces of code far easier to read.
Nice straw man you have there. You're using a procedural style, and then complaining about that procedural style. See u/NoLemurs comment for a good description of how to break down. candidates = range(2,100) primes = filter(lambda x: all(x % y != - for y in range(2, x)), candidates) This is a better way of organising the code with well-named intermediate variables. In a "real world" scenario, I wouldn't use the lambda. I would have an is_prime predicate with its own testing. Once you've done that, though, the original comprehension is plenty simple enough to stand alone. primes = [n for n in range(2,100) if is_prime(n)] 
Valid, just not necessary. Unless you're setting a trace on one line. If you're doing anything else with it, you shouldn't ;)
class names are camel case (well, StudlyCase), not modules
Who are all these people that can't tile windows with more than 160 char total? I have a plane jane 1080p monitor and I can do 120char side by side just fine.
You're right - modules are all lower case. No underscores, though. e.g. mymodule. 
pep8 suggests that underscores are only there to enhance_readability. Pretty sure that's just as valid for module names.
Can you run type(s) and show us the output it's very difficult (and I suspect impossible) to change the built-in functions on the built-in types, which would imply that something about that import is causing `s` to not be a `str` 
This is why "from moduleA import * " is frowned upon. So long as you simply use `import moduleA` and `import moduleB`, then to the Python interpreter, you don't have two functions called `replace`, you have one called `moduleA.replace` and one called `moduleB.replace`. 
Do you know the origin of threading? That one also uses camelcase.
This is especially interesting because I've totally used function names in meaningful ways, to create plugins and so on. For instance: @subcommand def thing1(...) @subcommand def thing2(...) ------- ./my_script.py thing1 args
OSX, I run scaled mode because I wanted to fit more on my screen and I don't know any better?
We'd need to see more code, then - if you're calling s.replace(), then that certainly should be calling the replace for whatever s is. In addition to checking the type as mentioned by /u/Lucretia, I'd try only doing one s.replace() at a time. You're assuming s.replace().replace becomes (s.replace()).replace() - I would not trust that entirely. 
Put the code on gist or pastebin somewhere together with the actual command and error as you see it. 
I am a linux user, should've mentioned that earlier.
Pastebin http://pastebin.com/uypds36y Both modules can be imported... the conflict is if I try to use this function: def fDate(date): newDate = arrow.get(date).to('US/Eastern') return newDate At no point am I calling s.replace() directly. The full error message: python DB2XML.py orders --limit 1 --indent Creating DB Connection Creating DB Connection Creating DB Connection Creating DB Connection 0it [00:00, ?it/s] Traceback (most recent call last): File "DB2XML.py", line 192, in &lt;module&gt; order2xml() File "DB2XML.py", line 153, in order2xml doc.attr(ReceivingNode="DC") File "C:\Users\AppData\Local\Programs\Python\Python36\lib\site-packages\yattag\simpledoc.py", line 36, in __exit__ dict_to_attrs(self.attrs), File "C:\Users\AppData\Local\Programs\Python\Python36\lib\site-packages\yattag\simpledoc.py", line 369, in dict_to_attrs for key,value in dct.items() File "C:\Users\AppData\Local\Programs\Python\Python36\lib\site-packages\yattag\simpledoc.py", line 369, in &lt;genexpr&gt; for key,value in dct.items() File "C:\Users\AppData\Local\Programs\Python\Python36\lib\site-packages\yattag\simpledoc.py", line 355, in attr_escape return s.replace("&amp;", "&amp;amp;").replace("&lt;", "&amp;lt;").replace('"', "&amp;quot;") TypeError: replace() takes 1 positional argument but 3 were given
I was a contractor for a Fortune 500 company that was just starting to use Python. They had a C style that called for 3 space indents, and carried it over to Python. The guy who wrote the Python coding standard (which was basically just PEP8 + 3 space indents) said some higher up wouldn't budge on it. I think the rational was "so people don't need to reconfigure their editors", which is exactly what I had to do every time I switched between their insane 3 space convention and any other Python code.
I just took a quick look at Selenium. Looks promising, I've never used it before but it make sense to use more of a testing suite rather than a scraper. I agree, there is a lot going on, when I was looking at it using Burp it got a bit confusing in spots. Thanks for the suggestion, I'll give it a go.
Mixing in one line? Yes. Mixing in their areas of responsibilities? No.
&gt;Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged. &gt;When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. _socket ).
All fixed.
The standard is from a time when having a 4-digit resolution was a luxury. My primary monitor right now is 2560*1440. I just checked in p4merge and I can fit 346 characters across three files. That's three lines of 115, and that's without even adjusting the default font (Courier, size 12), which is massive. If you're regularly doing merges on your cell phone, my apologies, but outside of that you shouldn't have much trouble. On top of that, the standard explicitly allows for longer widths and most teams seem comfortable increasing it slightly to 100 or 120. My assumption is that an 80 character limit is probably more of an exception than a standard, at this point.
This is written in a weird way, it would be much easier to build up the story from a lambda perspective.
ok, let's play. There is one more good reason to use spaces.
&gt; I'm pretty sure people who think using spaces means hammering out each space one by one don't actually write any software. Hmmm, do you enjoy looking stupid? Because statements like that make you look like a freshout-newb. &gt; Anyway, tabs vs spaces is meaningless. No, it's not. Ever blocked and copied code to put into your existing code? Spaces are a PITA. 
From the yattag source (https://github.com/leforestier/yattag/blob/master/yattag/simpledoc.py), it looks like yattag is expecting you to *only* pass numbers or strings. If it is not a string it gets converted to a string, other wise `str.replace` is called on it. You are passing in an `Arrow` object, which has its own `.replace` function with different arguments. You are getting an error because yattag is assuming the `Arrow` object is a `str` object and calling the wrong `.replace`. You have to convert your date into a string before passing it in as an attribute.
&gt; it's best to use tabs for indentation, and spaces for alignment. In theory I agree, but it's nigh on impossible to get a team to follow this well enough not to cause problems. For starters, a lot of popular IDEs do not help adherence, and sometimes actively undermine such efforts. It's often easier to just make everyone use spaces with an agreed indentation depth. Something I haven't seen mentioned yet - using tabs in source doesn't play nicely with GitHub/GitLab, as the tab width cannot be configured by the reviewer and is likely to be equivalent to eight spaces rather than the (perhaps) more common four. 
i exclusively use the second style mentioned in that answer. i like it more because you don’t have to realign your shit if you change the (otherwise alignment-defining) code before the opening brace.
&gt; the point is that it looks theoretically very reasonable and yet is completely impractical. My experience exactly. Nice idea, but both humans and IDEs make it a practical impossibility.
You can. But expecting everyone to behave in a specific way in order to see your project as you do is a risky bet.
Try using the TAB key instead of typing \t. (We'll teach you how to use the rest of the keyboard later.)
Ha cool. Didn't know about this one. Though I think it will not work in the example above. Since first line doesn't have any whitespace in front, but the second line will.
&gt;&gt; [PurePath.name](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.name) &gt;&gt; A string representing the final path component I don't know what the code is supposed to be doing in a larger context, but what the original code appeared to do is to copy `a/b/c` to `target/c`. Your refactoring will create a directory `target/a/b/c` given `p = "a/b/c"` (and fail on copy if `a != c`), and `/a/b/c` given `/a/b/c` (that is, do nothing). Either way is broken, I'm not sure if the original isn't broken as well.
&gt; arcpy.FeatureClassToGeodatabase_conversion([ &gt; 'file1.shp', 'file2.shp'], '/path/to/file.gdb') Should be: arcpy.FeatureClassToGeodatabase_conversion( [ 'file1.shp', 'file2.shp', ], '/path/to/file.gdb')
&gt; query = db.query(MyTableName).filter_by(MyTableName.the_column_name == the_variable) query = db.query(MyTableName).filter_by( MyTableName.the_column_name == the_variable )
Why not just use one line per program? You do what you feel like doing, but 80 spaces is more than enough for almost everything. Sometimes I have to break that limit and nobody gives a fuck.
That's a cool idea. I'm not a vimscript expert, but i could look into supporting this.
If your code is Python 2, you can use [Gooey](https://pypi.python.org/pypi/Gooey/) which automatically parses your program's command line arguments and creates a gui from it. I would REALLY LOVE a py3 verison of this, if anyone can point me to it?
You mean a Notebook? There's a longstanding problem with coming up with good ways to diff Notebooks. For a long time, I used hooks with that would clean the output and only commit the core code, but that would break every time a new version of the Notebook came along, with its subtle tweaks to the underlying JSON. However, the Jupyter community is actively working on this, and projects like [nbdime](http://nbdime.readthedocs.io/en/latest/) are nearly production ready, it seems. I'd give that a try.
Isn't everyone agreeing to set their editors to 4 spaces, tho? Not 3. Not 5. Either way, we're all agreeing to something. But if my 4-char-tab editor changes a document that originally used 3-char tabs, it doesn't matter. But if my 4-space-indent editor changes a document that originally used 3-space indents, there's trouble.
Wow, you found ONE way to make it work! Out of all the kind of environments out there, you think that this solves the entire problem? Instead we could all use tabs which, get this, causes no problems ANYWHERE. (Strictly speaking, this should be filed as "A way to make a stupid development decision work in spite of itself".)
I mean, I was taught that if a method needs to have a method, it should be a class.
I could be wrong but I think default python on 14.04 is Python 2.7 whereas on 16.04 it's python 3.
The same process pretty much works for everything. In OSX, it's a tiny bit different visually. In GNU/Linux, it depends on your window manager.
Well sure, also doc strings. For comments, usually it's to remind me why I made a decision.
You can do this with ease. import os For folder in directory For each file in folder os.rename file http://stackoverflow.com/questions/2759067/rename-files-in-python
Tabs are fine when you're not sharing code and reading your own. Because of that first styling method, you might encounter messed up styling.
I find it really only ever bites me if I've over-indented and have too many control structures around things. It's usually a red flag that my code needs to be simplified. And like /u/desmoulinmichel said, there are a lot of super descriptive short names. Super long descriptive names have their own readability problems, especially when you're working with a lot of non-native English speakers.
&gt; Some people still work from netbooks 162 characters across 3 files on my Macbook. So you're screwed doing a merge even with 80 character lines. Agree other than that, but I've never worked in a team that actually followed the 80 characters rule and never really expect to. And frankly, writing all of our team's code with extra line breaks to account for one guy who has unusual (dare I say stupid?) habits or can't see well seems like way more trouble than it's worth. It mostly seems like much older devs who have these unusual habits that just don't line up with modern development practices.
Is os.name platform agnostic? If so, that's another reason on my list of why I love python!
Open that script using a text editor. See what's modules the script needs. Install those modules on your machine using "pip install modulename" In case pip is not installed you can run apt-get install python-pip
The one that says Python.exe(or Python.py). im pretty sure both of those files are in the scripts folder.
With luck you'd fold and quit acting like a dickhead instead of coming out and proving you really are one, but I guess that's too much to ask from somebody with absolutely no social skills or redeemable personality traits.
OK? I don't ever see this done, and I would just build it out into a class if I needed this kind of functionality from an object, and I've never seen it done in any of the open source code I've read. But I also haven't seen everything. What's a use case where you would rather create a method with another decorator method as opposed to building a class with a decorator method? Or can you think of a project where it's been done so I can look at an example? I'd hate to think I've been hating on this code that is actually written according to standards. Well, it's definitely not written to PEP-8, but that's beside this point.
&gt; This article is a little weird. Not even that. It's just like someone entering the realms of meta programming for their first time.
Professor Dennis Freeman [from MIT's 6.01](https://www.youtube.com/watch?v=3S4cNfl0YF0&amp;list=PL9B24A6A9D5754E70) recommends [Think Python](http://greenteapress.com/wp/think-python-2e/)! You could also check out [MIT's 6.00: Introduction to Computer Science and Programming](https://www.youtube.com/watch?v=bX3jvD7XFPs&amp;list=PLB2BE3D6CA77BB8F7) by John Guttag. Cheers!
Whew, I'm really glad you asked this. It looks like you're using an outdated version of Learn Python the Hard Way (you're using Python 2.7). The author adamantly suggested Python 2.7 in the old edition. But, now, he recommends 3.6. Check out his new, 4th edition [here](https://learnpythonthehardway.org/python3/preface.html#improvements-in-the-4th-edition). Because, I'm hearing people around Reddit posit Python 2's end-of-life at 2020. And I agree. Python 3+'s where we're headed. (People were whining about the transition--because the code's different. But I think creator of Python, Guido van Rossum, would (probably) rather die than go back to 2! Because Python 3's better, it seems.) Happy coding!
Yes you are right I was thinking about google group. It is quite different from web2py. It is an event driven framework. You can see it on this video - creating first application https://www.youtube.com/watch?v=4Sd3YKSUoy4 
If you need any help, please send me a message using a form on the website http://jam-py.com/ or open an issue on github https://github.com/jam-py/jam-py
Sorry but can you try running following command pip install BeautifulSoup4
Why do you say there is an issue with this? The last piece here is that you need to get the md5 to rename each file to. Maybe hashlib would work? Python can easily iterate through items so you don't have to do it one at a time. 
Spam link! Go straight to source article from 12 August 2016 http://www.evontech.com/what-we-are-saying/entry/7-major-reasons-why-you-should-upgrade-to-ubuntu-1604.html
I have created a post about refactoring some of the backend code from classes to functions. The post explains why. http://a50.io/post/48/ Soon, I will throw all of this on github.
I'll give you one: it's the latest long-term support (LTS) release.
I'll give you a negative one, many tools still only support 14.04 as it's rock solid and is still supported. 
I see only one major reason, ZFS. You can install 4.4 kernel on 14.04LTS And all other "major" reasons nothing but ui changes, and worse, they are all minor at best... 
Sweet jesus. Shut up and let me read!
Exactly. And I whould actually probably make the open() a separate function. It was just to illustrate that even if you don't layout your code correctly it works. But of course you should go with the less indented code when possible.
Easier to read and edit. The first one allow to: - identify the 2 arguments more quickly - insert an additional element in the list more easily - let you edit one of the file to a longer name without having to refactor the code if it goes beyong 79 after that. I do use a variant of the second format if arguments are small.
thank you so much! will definitely get started with 3.6 instead :)
I do. I just compose the names. A variable is never alone. It's part of a function / method. It's part of a block. They all have names. You don't do: with csv.reader(open('/data/tree_stats.csv')) as csv_tree_stats_file: for tree_stats_csv_line in csv_tree_stats_file: You do: with csv.reader(open('/data/tree_stats.csv')) as f: for line in f: Because you have a context here. 'f' is almost a convention in a open() with block. Nobody is going to wonder what it is. Line is obviously a line of a CSV file since you just read that before. This code is in a context, you can't undestand it without it anyway, so you make use of it. However, let's say you have: numbers = (random.randint(100) for x in range(100)) group = lambda x: sum(map(int, str(x))) numbers = (math.sqrt(x) for x in numbers if group(x) == 9) In that case, it's better to be rewritten: def digits_sum(number): """ Take a number xyz and return x + y + z """ return sum(map(int, str(number))) rand_sample = (random.randint(100) for x in range(100)) sqrt_sample = (math.sqrt(x) for x in rand_sample if digits_sum(x) == 9) Here you have a longer code, but much more easier to read. More descriptive names, yet they are short. Again here I don't get belong the 79 limit. But let's say I start having very very few spaces because I'm a a code I didn't write, and in a lot of identation. I'd then take it as an opportunity to actually refactor my code. I'd do in another file: def digits_sum(number): """ Take a number xyz and return x + y + z Arguments: number (int): the number with digits to sum. It can't be a float.abs Example: &gt;&gt;&gt; digits_sum(123) 6 """ return sum(map(int, str(number))) def gen_squareroot_sample(size=100, randstart=0, randstop=100, filter_on=9): """ Generate a sample of random numbers square root Take `size` number between `randstart` and `randstop`, sum it's digits. If the resulting value is equal to `filter_on`, yield it. Arguments: size (int): the size of the pool to draw the numbers from randstart (int): the lower boundary to generate a number randstop (int): the upper boundary to generate a number filter_on (int): the value to compare to the digits_sum Returns: Generator[float] Example: &gt;&gt;&gt; list(gen_squareroot_sample(10, 0, 100, filter_on=5)) [5.291502622129181, 6.708203932499369, 7.280109889280518] """ for x in range(size): dsum = digits_sum(random.randint(randstart, randstop)) if dsum == filter_on: yield math.sqrt(x) Then: sqrt_sample = gen_squareroot_sample() Because in that case I know that the code I'm in sucks, but I'm in for the long run so i'll improve the overall quality of it. No problem of code length. Code is clean, easy to read, expressive. The IDE handles it well. My brain as well. 
Earlier today https://www.reddit.com/r/Python/comments/5rqc65/python_top_10_articles_for_the_past_year/?st=IYPG1PUS&amp;sh=6c097b91 was posted, and the first item in that is http://docs.python-guide.org/en/latest/ and the first section is about picking between 2 and 3. Short answer: 3. Also read the sidebar. And /r/learnpython (/r/python is for news, not help).
Configurable tab length has nothing to do with consistency
Thanks ptmcg for an excellent correction that stays true to my original intent. I had not read the original example carefully.
Are you trolling or something? What did you mean by what I quoted? &gt; As long as you don't do visual alignments with tabs, the tab width is completely inconsequential 
[Larry Hastings - The Gilectomy - YouTube](https://www.youtube.com/watch?v=fgWUwQVoLHo) https://www.reddit.com/r/Python/comments/4lpi1i/any_info_on_the_ongoing_gilectomy/
Most decorators are closures.
If you actually typed "space-space-space-space" instead of pressing TAB and having your editor insert the spaces, then I understand better why people advocate so furiously against spaces. I don't think anyone that prefers spaces is actually pressing space to indent, but uses the TAB-**key** to indent. I also like the fact that I can align code that runs over multiple lines. Like X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) Trying to fix that kind of indentation with tabs-only is quite difficult. And mixing spaces and tabs is of course not even allowed. 
the tab width doesn’t affect visual alignment unless you use it for visual alignment. if you indent with tabs and align with spaces, or never visually align things (e.g. by using the style i showed above), then tabs can be any width you like.
Use python to create the MD5. Save the hash in a variable, and rename the file to the variable. Repeat.
Thanks!
&gt; cs Tkanks for answer. About the former, I did try that before, but it only change inline plot to interactive, but it is not in separated window. About the latter, do you have an idea, how can I change the CSS in order to get plot figure in separated window?
I don't get it. What does this have to do with Python?
I disagree. There are many vectors to enter the python ecosystem outside of Django. A heck of a lot come in from python being an intergrated scripting language in other programs. A good example is python's popularity in the realms of graphics. Blender, the Gimp, Inkscape, Maya, Panda3D, 3dsmax. It is also integrated into a lot of games directly. EVE Online comes to mind. There are quite a few people who use python chiefly for system administration. Redhat, for example, builds all their tools in python, and any sysadmins running linux certainly are exposed to it regularly. Python is the go to language for projects like the raspberry pi, which have sold more than 10 million units. Robotics and hobby tinkerers use it all over the place due to the low barrier of entry. In my own field (geosciences), it is very commonly integrated into high end applications. ArcGIS (and QGIS) and AutoCAD being prime examples. As a geophysicist, the most common piece of software I use at work is called Geosoft Oasis Montaj. It's a $30k/seat program - and it has python integrated for scripting. If you check the [python3wos](https://python3wos.appspot.com/) site, you'll see that Django, while popular, is only the 33rd most popular package on PyPI. None of the above use cases would even be counted on that list, because those integrated python packages aren't being installed via PyPI - they're coming through some corporate installer, or the redhat package manager, or elsewhere. Not to undersell Django, but even the Django ecosystem is small compared to the larger sum of websites that are served by python without Django. The most popular Django websites are pinterest and instagram. Compare that traffic against Youtube, large chunks of Google and Yahoo, good chunks of Facebook, Dropbox (where Guido works!), and pretty much all of reddit. That said, Django does pretty much lead the pack in terms of python web frameworks. It has a lot of company though: Pylons (which I believe reddit uses)/Pyramid (Dropbox), Flask, web2py, and Zope come to mind. Anyway, I'd say probably only about 5% of developers enter the python ecosystem because of Django. That's not insignificant, but it isn't anything like a majority -- unless you're measuring based on the number of questions on StackOverflow. If you're a web developer, all you see is web development. Or if you're a scientist, you think python is just MATLAB but free. Context blinds you to where it's being used elsewhere.
I'd be interested as well!
well, it seems the book with 3.6 isn't available yet.... any other resources you would reccommend?
This sounds like punishment enough! You're forgiven for writing such long lines. The necessity to do so is part of the reason why Java will never be known for its readability.
80 chars is not about the screen space. Its about the readability of the code. The occasional 85 or 90 char line is no big deal, but if you (generic you , not you personally) regularly and consistently need more than 80 chars per line, *including* indents, that's a code smell. Your code is too deeply nested, your variable names are ridiculously too long, you're writing too much Java-like code with too many chained method calls, trying to write Perl-like one-liners, etc. This is not an absolute rule, but its a very strong possibility. Code can be too terse, as well as too verbose, and excessive line length is far worse than extra lines.
I disagree ruby got stuck with only web stuff for the most part, python is used for everything that doens't require speed. OS scripting and os tools, game and app scripting, desktop guis, web,scientific, ect.
This bit at the end was odd: "I’m pretty curious to see if this could fare well for Go or other games where AI’s still don’t play well." Surely you've heard of [AlphaGo](https://en.wikipedia.org/wiki/AlphaGo)??
Unless you write a custom pep8 filter post receive hook that can detect how spacing is written, people don't have to do anything.
 from xyz import * This is generally considered bad practice, because it imports every class, every variable of xyz into your module. If your module, or one of the others imported this way, has a (internal) variable/class of the same name it can come to conflicts. Better: 1. Only import the Classes/Functions you need --&gt; from xyz import XmlGenerater, SomeThingElse (Like this you can immediately see, if there are naming problems and future developers can do this as well) 2. import xyz --&gt; use as xyz.XmlGenerator 3. import longmodulename as lmd --&gt; use lmd.XmlGenerator 
I believe he's got a talk at pycon
Oh pex is almost exactly what I need... I'm in a windows shop, we use atlassian bamboo to build on a central build machine and then deploy to a production box. We've been just doing pip install -r requirements.txt . and basically stuffing all libs into the main directory where we execute. I really just want to build on the build machine, test on the build machine, then copy the built directory to a production machine. If only virtualenv was portable, i'd be done. And Pex sounds great, but doesn't support windows.
How can you not see the inconsistency in that case ? You sometimes use tabs sometimes use spaces. If you use spaces for indenting then you're always using spaces. It's more consistent. 
What problem are you having with `virtualenv` not being portable? Which version of Python? The production machine is Windows? 
I'm curious which features could be added to CPython. They would be for Python2 right? Which is in bug fix only so I doubt that would happen.
Thanks for the response! We are using py3.5 currently. Our production machine and our build machine are both windows. We've tried to venv env env/Scripts/activate.bat pip install -r requirements.txt venv --relocatable env We then run tests to make sure everything is all green. We then rsync the directory to the prod machine. Doesn't work - I believe due to how virtualenv is trying to find python on our build machine instead of our production machine. The path might be different. The only thing that has been working is to just do a pip install -r requirements.txt . and then copy that whole directory to prod. It works, but it means that if you want to see what's running in something you aren't familiar with, you're seeing all the libraries at the same level as your work. 
I noticed I've been downvoted for this comment which is annoying because I try and be respectful when I comment. What have I said that is wrong or contentious? I avoid saying stuff like 'x really sucks' and don't think I have hear. Perhaps saying something positive about Ruby has upset some people. If so then grow up.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
OK, well, I guess that's why. I don't ever see functional programming in Python in my production environments or in any of the open source projects I've hacked on, it's all OO. I'm also a devops person and not a developer, if I had gone to college I probably would have.
I agree. I really like(d) this sub, but I noticed that I am getting a bit weary of the tone and probably check visit it less than I once did. 
So I'm pretty sure visualization of PyMC3 is the easy part, since NX accepts anything as a node, basically. So it's definitely easy to (as you write down your model code) store each dist as a node object and define the edges. But that would be almost entirely an extraneous process. The issue is creating the network *first*, in a way that PyMC3 can take a network as input and build up the model from reading it. That's what would give something like this real flexibility. 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Both because you'll have to port some code at some point. Use the package six. For learning unicode/bytes, don't touch Python 2. It's beyond broken.
&gt; We've tried to get virtualenvs to be portable but that seems a no go. Why? For all things Windows &amp; Python my favorite Distro is [WinPython](https://winpython.github.io/) for all the reasons they list on their motivation and concept page: https://github.com/winpython/winpython/wiki/Roadmap I'm writing a tutorial on how to use WinPython and Tox to unit test projects against multiple versions of Python: https://github.com/jed-frey/WinPythonToxJenkins I don't have the Jenkins part finished yet, but could work on it if it'd be helpful. At the same time I have another set of straight forward instructions on how to get Jenkins installed and running on Windows 7 and running as 'you' (instead of service): https://github.com/jed-frey/JenkinsMatlab/blob/master/01%20-%20Install%20Jenkins.md Edit: And if you're just looking for a way to deploy stuff WinPython-Zero is an awesome solution. Rather than walk co-workers through "Install this, do this, pip install this" I'd start with a brand new WinPython install, install what I needed, make sure it worked. Remove ALL shortcuts other than "MY AWESOME PROGRAM.bat" and zip it to them. The more steps you have to get a tool to an end user the more places they'll get lost. Most people can unzip a file without a problem.
Is it possible to just to put the libraries you want python to find for a particular module in a libs directory next to that module?
It's not the same. Again, if you want to use code from 5 years ago, you might get lucky, but you're probably need to upgrade it or go on a hunt for old packages. I maintain a python 2.4 package that uses PyQt 3 wrapping fortran. It came with the OS but it's a pain to install from source. It's easier to backport my dependenies than upgrade that one. Pyinstaller lets you build an exe. I like the onefile option, but it is slower. My gui build process for a 91k line code with numpy, scipy, vtk, and pyqt as my dependencies takes a few minutes.
&gt; "Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%." A group of engineers looked at their use case. Figured out how to alleviate the pain points, made a solution that fit them and made it **open source** and people complained about it.
1. Don't ever post pictures of code. Especially not camera pictures. 2. Your `return b` is inside your loop, so the loop body only runs once. 3. Post questions in /r/learnpython next time please.
Please give usernames. I'll have a look.
Sure, this post doesn't belong in this sub, but there's no need to be a dick about it.
Anecdotal support: I did not get into development because of graphics, web development, or science. I got into Python because I needed something more powerful than Excel when my csv files started to get excessive in size. It was a recommended solution on a Stack Overflow question I posted a few years ago, since then Python took over. After the csv's it started to branch into doing full on automation work for a lot of components of our operation. Python applications currently do web applications, form generation, they communicate with the 5 API's and 1 database we utilize, it formats reports for our billing, handles multiple marketplace inventory and cost updates. Python is basically a quick business solution for us. Nothing has to be fast, it just has to work, and be easy to fix if it breaks. We would not have been able to scale up as fast or as large as we have without Python.
This is part of the docblockr-python plugin. https://packagecontrol.io/packages/DocBlockr_Python As you can see it supports sphinx formatting. { "DocblockrPython": { "formatter": "sphinx" }, "folders": [ // ... ] }
The image seems to be too small to be useful, anyone got a bigger version?
i never use spaces within leading whitespace
Perhaps the biggest difference is that I wrote PyFunctional with more focus on good data wrangling by having an interface similar to Spark RDDs/Scala collections, and less focus on purely FP ideas. Below are my thoughts on other libraries, but I haven't used them extensively so apologies if I miss something. fn.py seems to be more general FP (eg the underscore operator, tail call optimization, currying etc), and while it provides some collection operations they are not chained. Similarly, it seems like pymonad has a different focus which is more on FP for safety with collections (hence the focus on monad vs only a list-like structure, eg Just/Nothing/List), and not much focus on higher level ops (group bys, joins etc, although maybe its because python stdlib provides some?). toolz probably seems most similar from the perspective of data wrangling, but has a more FP interface than chained interface. The goal of pyrsistant seems different, and much more focused on providing efficient immutable data structure implementations from Clojure (I don't know how those work). PyFunctional's "immutability" is conceptually based on Apache Spark's lineage concept in RDDs.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Yeah I got into python due to blender and renpy
👍 thanks for the heads up. I did a search on packagecontrol.io earlier and this one didn't turn up with my search terms. I'm installing it now and I'll see how it works. 
i think you shouldnt share your client key
Really easy for me. 
This release features improved 3D rendering, with a number of updates to support modern operating systems. The use of full retinal resolution on macOS has been enabled for the first time in this release, and a number of warning messages issues on that operating system are now resolved. The pipeline has seen a number of improvements, and the Python operator interface has been improved to offer better feedback on what is happening. New features include: Support for different color palettes, and setting the default palette Support for loading a stack of TIFF images Ruler tool added to make measurements in 3D scene Improvements to Python operators including more feedback as they execute Improvements made to the reconstruction capabilities Pipeline state fully expressed, and execution of paused pipeline can be requested Python 3 now supported, but not used by default (or in the binaries) Support for retinal resolution enabled in macOS binaries Using Qt 5.8.0 with improved 3D rendering widget developed in VTK Switched to MSI installer on Windows - better integration with Windows Various improvements to the user interface, and bug fixes
We're hoping that a wide community finds useful applications for this tool. For those looking for 3D datasets of nanomaterials, we have made several available here: http://www.nature.com/articles/sdata201641
Great stuff - will try to get through all of these this weekend!
N + 1.
Great question. I haven't gotten that far into it yet. Passing the "midterm" right now. Will let you know what I can find.
An intelligent person (Okay, not you) might realize that responses taken out of context are meaningless. That same person might look at the thread of discussion and determine that the hostility started with the very first reply, which followed a most civil start. _And a really intelligent person might conclude that the responses were calculated to parallel the kind of responses that would be likely to result from those "flame on" comments._ Remember, the *VERY FIRST COMMENT* was a "For heaven's sake, USE SPACES!!!" kind of reply, nothing reasoned or reasonable. Even a moderately intelligent person (Again, not you) might come to the conclusion that context is everything, and not try to pin blame based on some out-of-context remarks. Note that no reasoned responses appeared AT ALL. None. A number featured "here's how to tailor a toolset so that it won't be so bad" meme, but not a single thoughtful "here's why spaces are superior to spaces"... I didn't create the problem, I merely setup the conditions to make it easily identifiable, and people like you showed up to provide the examples. The interwebs are most obliging: When you ask for an idiot, one appears before the words are fully out of your mouth. (Sadly, when you ask for intelligent discourse, it hardly ever manifests...)
I read through the entire API and it looks like a great library! Pretty good documentation, well-designed and to the point. The only thing I'd recommend is doing something like Lodash (my favorite JS library: https://lodash.com/) where you have a single or couple example of uses of each of your functions. It really helps noobs with the understanding and improves your reach and credibility as a solid library. You can just take your unittests and put them there as examples too if they're simple.
I'd probably just use a screenshot of some code with some dark, colorfull theme
Taking comments out of context is kind of a dick move, mate.
I didn't "take any comment out of context". I looked at them in context and was using them as examples of him being abrasive, which renders his protests about other people being abrasive moot. So yes, taken out of context, these make him sounds like a jerk. However, taken in context, they also make him sounds like a jerk. And since he cannot have a conversation without calling the person he is berating an idiot, he can leave.
I've never used SQL before, I'll have to take a look at it. Thanks. 
Answerable with ___ experience: * 1 hour: 2, 3, 5, 6 * 1 day: 7, 9, 10 * only if you needed it for some reason: 1 * meaningless: 8 * impossible: 4 Interview questions that test factoids are pretty awful, IMHO. It's better to talk about how someone would solve some sort of problem.
If you haven't learned imports, you shouldn't be trying to learn unicode. I'd teach it after I teach classes, dictionaries, lists, etc., but before decorators. &gt; as they're magic incantations Like all the imports in C++? I don't think they're magic. They're just functions.
Many thanks for your comment, I will consider putting the abc's into a separate presentation!
A lot of the buttons and interfaces look like [paraview](http://www.paraview.org/), is this related to that project at all or does it just use similar resources? 
This isn't any faster, but you could use itertools.product to make it look a bit nicer. for (box, part, line) in itertools.product(List_of_Boxes, List_of_Primary_Parts, lines_in_list):
what about if you use Emacs or Vim, any suggestions?
yeah in retrospect, things are always different 
I'm too new to python to know - is there something that python can do that VBA can't do?
tomviz uses a handful of VTK and Paraview components.
There's definitely some things that are equally easy or easier to do in vanilla python (stdlib is fair game, `collections` is awesome). The word count example is there mostly because it seems to be the canonical example of this style of programming. As far as unpythonic, definitely subjective, but I understand the sentiment. I find it most useful when chaining longer pieces of code. Here is a recent bit of code I wrote that I think demonstrates that, albeit might be hard to tell what's doing on without context of what its actually suppose to do https://github.com/Pinafore/qb/blob/3a43bb5622d0fb638dff2ced7d02d73723d704a8/qanta/guesser/abstract.py#L310
I'd just learn by looking for a fitting framework and then start reading the docs. If u are totally stuck, may try to search through some github-repos how they implemented it. But instead of copy-pasting, try to understand it and just play around with it. btw, theres a subreddit called /r/learnpython/ made for beginners. May you should ask there instead
The guide you followed had you install to /usr/src. The default python install for me is at /usr/bin/python. If I do echo $PATH It looks like /usr/bin is in higher preference than /usr/src. If you run: update-alternatives --list python What do you get? You can then change it system-wide with: update-alternatives --config python Or you can edit your ~/.bash_aliases file to point to the new version.
I was writing in Python when I did this. But I get it now. It's that kind of sub-Reddit. 
The plots look really nice and I feel like 3d plotting is a little under-served in the standard Python plotting tools. Would some of these plotting tools work independent of the larger GUI? For example, if I don't want to load up a full Tomviz interface, but just want to pop up a 3d plot (i.e. like matplotlib) - could I just call a function from TomViz to do that?
I was thinking for a moment that jupyter notebook might work. Im not sure all of your requirements will be meant though. The big issue is making the saving of everything transparent. At least for simple things though you can have everything in one file. That is code, data and output. Probably close but not good enough. Another way to address this is with a source code management system usable from Python. You would have to create unique files, commit them and then lock them for changes. If the data in and out is large i see this as the only solution. In a nut shell the script doing the computation would save the data set to Git, save a copy of itself and then the output data to the repository. There are real problems though with something like Git. The main one being accessibility ten years down the road. Plus you need acceptance from the regulators. You could do something similar by putting everything into a Zip file thus avoiding source code management systems. Speaking of Jupyter, im by far an expert on this software. In fact just started using it for some mechanical engineering. It might pay to get an experts opinion on what can and cant be done with the facility. The system was designed to solve some of the issues you brought up though. Now given all of that there are other systems out there that solve similar problems. No links for you but id try searching for self documenting software, reproducability, and other phrases. Your problem isn't unique so others have worked on it. 
I do some work with Salesforce, and because SOQL sucks (or SF sucks, couldn't say) and you can't manually join db tables on whatever you want, I end up having to zip them together in my code manually. So I eitehr have to refacotr it into 5 different functions or do this: def zip_data (x_records, y_records, z_records, a_flags): output = [] for x in x_records: for y in y_records: for z in z_records: if (int(x['id']) == int(y['id']) == int(z['id']) and a_flags[x['id']] is False): output.append({x,y,z}) return output 
So Pyston doesn't provide the speedup scale that Dropbox needs. Python just can't become Go, but many workloads would be happy with a more modest speed improvements in cPython. Would there be any lessons learned that can be pulled into cPython? 
Yeah we have to use flask. You're project looks kinda similar to what we have to do.. layout wise.. I'm gonna look into it more, thanks! 
First, is the input file sorted by box? If not, please sort it first. Then you can work box by box. Warning: Untested code. def yieldBoxes(inputFile): iterator =iter(inputFile) first_line = next(iterator) current_box = first_line['box'] box_contents = { first_line['part'] : first_line } for line in iterator: if line['box'] != current_box: yield box_contents current_box = line['box'] box_contents = {} box_contents[line['part']] = line 
&gt; has a slower startup bc it has to unpack python in memory There's a easy solution: zip with fastest compression (biggest file size), you'd ship your exe in another zip anyway.
Huh, I had it in my head it was dabeaz doing that...
I am actually aiming it to be exported into .csv. Thanks for this!
Why not Sanic?
I don't think that it is worth it. The benchmark is useless, since it uses pipelining and simple hello world. You can't use pipelining for real projects, browsers don't support it. Add some logic into request processor and you will get 10-20x slowdow, usually http server is not a bottleneck.
[Yes he is.](https://us.pycon.org/2017/schedule/presentation/118/) I am very excited to hear what he has to say.
Great show as usual Mike. Really enjoying this and the new Python Bytes podcasts. As for Flask-Diamond, it's an interesting project - it seems pretty comprehensive and thought out from what I can tell after doing the planets tutorial. I'm a little torn though, one of the main reasons I prefer flask is simply to have a deep understanding of my whole stack. Some of the things Diamond abstracts away from me, I don't feel confident using. Though I suppose that may become less of an issue if I were to invest time into learning the framework. 
I can't think of a way to use it myself, but hell, this looks amazing. Thanks for empowering Python community and keep the good work coming.
Take a look at Ansible. It may or may not be a solution. 
Maybe you should use a debugger and fix your shit instead of wasting company time refreshing cats?
I would recommend Pycharm. You sometimes here nightmare stories of perfectly legal code running fine in an IDE, but not running outside it - and vice-versa: No such worries with Pycharm, works fine out of the box, and a good update history. The Community Edition is free and very powerful.
Not bad. Happy coding!
As I don't know any better, what's the catch here?
It's often not worth building with flask instead of Django. These new things would have to have very specific types of workload to be justified. 
I use a giant perl script called dfm. Some smart BSD nerd I know told me to try it and it's pretty damn good. It has limitations, but it works. Basically, you create a config file of what dotfiles go where, with what permissions. Then you commit it and your dotfiles to a repo of your choosing. So for a new machine, you go: open web browser -&gt; browse to your repo -&gt; `git clone git@thing; cd .dotfiles; dfm install` 30 seconds and your machine is up and running and configured exactly like all your other machines. Forget about vim configuration, how about a giant i3 or xfce config file. You can go from fresh linux install to complete customized install in 3 commands.
As somebody said, browsers disable this py default.
That's a fair point, thanks for the advice.
May I ask what framework you tend to use/prefer? I like some parts of Django but dislike having to use their ORM
Try Rodeo by y-hat. Haven't tried it myself, but from the looks it should be similar to RStudio.
Well, then be prepared to waste a lot of your time! :P
And custom functions!
"With a great abstraction comes great responsibility." Nice article, especially like the visual explanation of the interactions between `__new__`, `__init__`, `__call__` etc... :)
Is your dislike of ORM's worth the trade-off you make to sooth it? 'not a big fan' is not a strong reason to kill something to big so early.
If you do a lot of IO like pulling multiple microservices and networked datababase, cache and such it is worth it though. Async IO makes it a lot easier to get concurrency.
Flask+peewee ORM.
Did you set the correct interpreter for your project?
Can't say anything about the syllabus, as they require you to provide an email before they even show it to you. That, together with the general look of the site makes it look sort of 'scammy' to me. But I don't really know. The main thing I can say is that 500$ /month seems like a lot of money to pay to learn python. There are countless great resources available for free. If what you are interested in is some kind of structure to keep you studying or some certificate at the end, I'd suggest checking out the free courses in sites like Coursera ir udacity. 
I always thought of this as the "right" way of programming in python. Not that I'm as consistent as I'd like. 
&gt; EntilZha Would you say that this release is The One?
H4
I hear this from people occasionally, and my counterargument is that a lot of people end up writing buggy (and usually vulnerable) ORMs themselves anyway to abstract away the implementation. The Django ORM can be as involved as you'd like, from managing query generation to simply wrapping the results from your own queries in a nice abstraction layer, to just managing schemas. If you take full advantage of it you get a nice place to put implementation logic to abstract yourself away from the DB further (e.g. thing.mark_as_claimed() - much easier for bigger teams), there is *no* chance to introduce SQL injections (which even Ruby on Rails' ORM doesn't fully save you from), and it supports forward and backward migrations. I'm not saying it's 100% perfect - we've all used an ORM in a loop and blown shit up, but it's better then me cobbling my own thing together (and dealing with testing + bug hunting in it), and it's actually surprisingly easy to find (and avoid) bottlenecks given [django's testing framework](https://docs.djangoproject.com/en/1.10/topics/testing/tools/#django.test.TransactionTestCase.assertNumQueries).
This week, in effort to familiarize myself with Python 3.6, I solved the first 50 Project Euler problems. Here's the [GitHub repo](https://github.com/Datamine/Project-Euler).
Thanks for the advice :) I'm really impressed with what you've built by the way.
Dont switch to japronto, it is basically a big benchmark focused flop. ITs main gains come from http pipelining which afaik is not supported in most browsers. The benchmarks are fast because most of the benchmark is calling c functions. Try adding a python object and deserializing from json and see how it goes. If you really want to, you can check sanic. But again, a framework is more than just speed. You should care about speed when you have the traffic to care about speed. In the meanwhile, care about the features and the time saving benefits that you will get by using a mature, full featured microframework like flask.
&gt;You can't use pipelining for real projects, browsers don't support it. Not everyone is building web services for browsers. 
yes i also agree we shouldn't be a bryan yet the difference between me and him is that hes a useless working man and im just a kid tryna get my classwork done 
Why don't you have PyPI downloads?
How is this any different? Instead of cheating in the hiring process you're cheating in the learning process which means you'll be getting a degree that basically vouches for you having a certain level of knowledge but in fact you don't because you paid someone to do it for you. You now get a position or a higher salary over me, someone who actually learned the skill, all because you bought a piece of paper that "certifies" a certain knowledge level. That's no different than being a Bryan. But, if it makes you feel better, we can give it a different name... How about Brian? It's the same as Bryan but just looks a bit different. 
Solutions to what ?
I must say I'm kind of annoyed with such a set of statements about PyPy - yes that might have been the case in 2013, but PyPy since has developed a lot of support for CPython C modules (including numpy), improved compatibility etc. Sure, if your software relies on really obscure details, like dictionary order, you might be off, but you cannot upgrade even to a newer version of CPython then. PyPy has also been known to run multi-milion-LOC projects that were designed for CPython. The truth is that for the vast majority of people, all they want is Python. They don't care which one and the performance problems come a lot later, when the project scales. 
The "long term" goal is making a software "similar" to Anki, but I want it to be mine :P But I'm learning how to scrap webs to get words meanings/translations/audio so I can automate some tasks. Today It's a couple scripts that just do some little things, but I hope one day to have enough time to wrap it.
This is interesting. http://git.savannah.gnu.org/cgit/stow.git/commit/?id=182acbbb64425bf95008cb6d42d266f6185032c9 Sounds like more dotfiles support.
Ok, ill check this out. Quick look on wiki and it looks like the thing i need. We have similar machine. i7-4770K@3.5GHz with 16Gb ram Is it possible to use single account for all users? Like "littlepadawan@remotehost" and inside $HOME folder for every user or something like that? Thanks!
As soon as you slap some custom code on it your performance will fall. My advice: use wheezy.web (fastest) + gevent(faster than asyncio) and you're good.
Yeah, and once they start opening each others file they can mess up each others namespaces and change objects. I would encourage staying away from that chaos. 
I have built scalable apps with Django and Flask, I really don't think this is your issue, you will hit DB bottlenecks much sooner. And asking which is better(Flask VS Django) is just a matter of taste. Django has by far more community and features, Flask is more light and easy to start with. EDIT: Instagram is running Django and they works fine :) 
flask + celery + Rabbitmq running on aws or google cloud is all you need :-) 
[Image](http://imgs.xkcd.com/comics/substitutions.png) [Mobile](https://m.xkcd.com/1288/) **Title:** Substitutions **Title-text:** INSIDE ELON MUSK'S NEW ATOMIC CAT [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1288#Explanation) **Stats:** This comic has been referenced 275 times, representing 0.1870% of referenced xkcds. ---- [Image](http://imgs.xkcd.com/comics/substitutions_2.png) [Mobile](https://m.xkcd.com/1625/) **Title:** Substitutions 2 **Title-text:** Within a few minutes, our roads will be full of uncontrollably\-swerving cars and our skies full of Amazon delivery dogs\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1625#Explanation) **Stats:** This comic has been referenced 44 times, representing 0.0299% of referenced xkcds. ---- [Image](http://imgs.xkcd.com/comics/substitutions_3.png) [Mobile](https://m.xkcd.com/1679/) **Title:** Substitutions 3 **Title-text:** BREAKING\: Channing Tatum and his friends explore haunted city [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1679#Explanation) **Stats:** This comic has been referenced 17 times, representing 0.0116% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_ddbm0ek)
&gt; Metaclasses are dark magic and if you see anyone using dark magic, they're either Dave Beazley level wizards who know what they're doing and accept being an evil genius, or they really don't know what they're doing and will regret in the future. &gt; Moral of the story, be like Dave Beazley, use the dark magic. ftfy
Neither of those things are hard. If you're using an ORM, understanding the SQL it's generating under the hood will help you every single time. And if you're not confident enough to roll your own basic security (e.g. authentication and authorization, not crypto) then you probably don't understand what the framework is doing under the hood.
You're either over thinking this, or are misunderstanding some concept. This is very easy to do, you loop through the list of files, calculate the hash, rename. Absolutely nothing complicated about this. 
Color quantization using k-means compared to a random selection approach. The color spaces considered are RGB and Lab.
You picked the least flexible example, but you can absolutely code C in any of VSCode, Atom, or SublimeText. And I'm sure all 3 of those have Vim extensions. 
I'm personally amazed something like Vim could go so long without a single person taking it upon himself to put together an IDE-esque package. Or, at the very least, a good one comparable to VSC/Atom/etc. 
Good question. "In the examples that follow we will work with a hypothetical ShoppingCart class." That suggests you're building a web app, specifically an on-line commerce app. It's usually professionals who do that sort of web development. Anyway, it's not really a criticism of the post itself. Just a momentary feeling of despair that people are paid to program and don't know this stuff. I know, I know, we all have to start somewhere. But still, I feel like I'm reading the equivalent of: "Suppose you're building a house. This is a hammer, and this is how you use it..." 
I'm working on my pet project --&gt; https://github.com/weibullguy/rtk
Yeah, it's nuts to me, too, since there seem to be so many users, and virtually every user is ostensibly a programmer. I think it's been tried before - see https://github.com/python-mode/python-mode (which, looking now, seems to have some recent updates, but says "The project needs contributors"). Spacemacs slayed that (not even close), last time I tried it, for out of the box usability, and PyCharm slayed Spacemacs. SpaceVim - I couldn't even get python syntax-folding enabled, and I have no idea why, but I assume it's full of little things like that that can cost hours each (or stay in your TODO list forever, after the first hour trying to fix it fails).
Can this tool be used for 3D rendering in general (i.e. not just tomography data)?
I can't upvote this enough. Describes my experience with Flask exactly as well as my experience with the different ORMs. My last few apps I have ended up using the ORM for all the relatively 'simple' stuff and falling back to the native library and raw SQL for the complex stuff I need to do.
Why? All I really know is VBA, and I'm self-taught, so I don't have a good frame of reference
When you put it that way, many students of mine gets it, yet when they start writing one, they can't go beyond singleton. Metaclasses are too much for a single session. 
Cool, thank you!
Depends on your app for sure but you can use sqlalchemy or raw sql if needed and you'll save time on all the super simple stuff which is the majority normally. 
Thank you Dave! Yes, that's the trade off right. I'm personally way more on the flask / pyramid side of the philosophy for my apps. I guess if you trend in that direction, you can imagine the tradeoffs for someone who likes micro frameworks. :) Cheers, Michael.
I agree startup time is sow, but how many times per day do you restart it?
"To be fair, all the contestants (including Go) were running a single-worker process." That doesn't seem fair
Working on my hobby project: a Django-like ORM for Python objects. Work is in progress, but would love to have some feedback. GitHub: https://github.com/onyb/reobject
You'll get more help on /r/learnpython
Why not create a write worker thread that reads from a Queue and sequentially performs the writes? Edit: thanks for the post. My question was purely curiosity, not trying to be snarky at all. 
The link redirects to https//www.reddit.... (colon missing after https).
This sounds interesting! This embeddable version, it pip installs within the directory?
Try it yourself: conda -n c:\locpython pandas python=3.5 Zip the content of locpython and unzip it to another pc's c: drive. This way we all have the same libs and python versions..
thanks, that works :)
There's an error in the graph though: in Python, `__init__` is called by `__call__`, not by `__new__`. And it is conditional: it will only be called if what `__new__` returns is an instance of the current class (or a subclass). That is, in pseudocode it's def __call__(cls, *args, **kwargs): instance = cls.__new__(*args, **kwargs) if isinstance(instance, cls): instance.__init__(*args, **kwargs) return instance
&gt; You know it was written by a true programmer when the first four references are StackOverflow! IDK, I'd have expected Smalltalk and [AMOP](https://en.wikipedia.org/wiki/The_Art_of_the_Metaobject_Protocol).
Oh yes of course, I just wanted to show the order of execution not which function calls which. I.e. the fact that `__call__` is called before `__new__` and `__init__` of the class but receives the instance from `__init__` and returns the instance.
It's using NLTK and so far Naive Bayes is working well enough. Each part type has specific requirements that have to be worded in specific ways. The original descriptions are all human-entered and are often a very general description. My sample set just contains manually-reviewed descriptions along with their requirement attributes saying "this part has this this and this but not this" etc. It's probably around 95% accurate currently but the sample set is still pretty small.
&gt; while `__init__` receives the instance object which it then passes back to `__call__` That's not the case though. `__init__` alters the existing object in-place, `__call__` is in control of the entire process and `__init__` can't just swap out the instance or anything only alter it. &gt; `__init__` has to receive the instance object from somewhere, hence the arrow from `__new__` to `__init__` Except `__init__` receives the instance object from `__call__`, which got it from `__new__`.
Sorry, I cannot understand. MyMeta.__call__(cls=&lt;class '__main__.MyClass2'&gt;, args=('hello',), kwargs={'a': 1, 'b': 2} MyClass2.__new__(cls=&lt;class '__main__.MyClass2'&gt;, s=hello, a=1, b=2) MyClass2.__init__(self=&lt;__main__.MyClass2 object at 0x00000132FE5A9E48&gt;, s=hello, a=1, b=2) MyMeta.__call__ return: &lt;__main__.MyClass2 object at 0x00000132FE5A9E48&gt; This is what happens, this is what I show in the graph. The arrows show that `__new__` receives the class objectas first argument, while `__init__` receives the instance object as first argument.
There's a difference between suggesting someone try swing dancing and me suggesting that understanding how SQL and security tools work make you a better developer rather than blindly relying on stuff other people have built.
Will do that, thank you. Any other tips?
&gt; In the following figure it's visually explained the whole process in case of RGB space where the final palette is composed by three colors (for Lab space is completely analogous). &gt; &gt; ... This paragraph being duplicated really threw me off for a minute. Otherwise, a very good write up. 
There's a particular convention in Python for how to write a script that is meant to execute (as opposed to code that is meant to be imported into other code). Something about "if name main" - have a Google (I'm not a Python dev, can't remember the details). 
This is very cool and well written, though we're probably well past due to drop the Lena image 
Thanks for your feedback! I think that I messed up a bit during the final adjustments, gonna fix it ASAP.
A critical part of learning to program is learning to clearly express the problem, and then working backwards. * "I need to find four consecutive natural numbers that sum up to ten!" -&gt; * "Natural numbers are positive integers from 1 up" * "I need to select a starting number" * "I need to find the three following numbers" * "I need to check if they add to ten" and so on, each time getting closer to something you can convert to code., eg def check_sum_is_10(numbers): return sum(numbers) == 10 def get_three_following_positive_integers(start): return (start, start+1, start+2, start+3) def number_is_natural(number): return number &gt; 0 I've written three of those, but "I need to select a starting number" is still too unclear to write so I now know I need to find a way to pick starting numbers and try them until I find an answer. So I'd start breaking down that step into more steps until I have an answer. Once you get good at that you then start learning how to generalise problems like "how do I find any set of consecutive integers that sum to a given total?" instead of this one specific problem. "what about negative numbers?" "what about operations other than +?" "what about decimals?" "what about complex numbers" and so on. 
No problem at all, I regularly do the same and seemingly never catch it either until someone else points it out.
&gt; The arrows show that `__new__` receives the class objectas first argument, while `__init__` receives the instance object as first argument. You've said that 4 times in a row and not once have I disagreed with that part, *that is not relevant to my point*, of course `__init__` receives the instance and `__new__` receives the class, one is an instance method and the other is a class method. What I'm telling you is that your graph gives the wrong impression of *what the call graph is*, it gives the impression that `__new__` *calls `__init__`* which *is not the case*. The graph has both arrows and numbers, the numbers obviously signal the order of execution of the various method, my issue is that the arrows are misleading, they look like a callgraph but if that's what they are they are wrong, and if that's not what they are I fail to see their point.
Yeah no. I mean if you want to learn more, then definitely give it a shot. I wouldn't put a solution like that into production though, that's a dangerous game to play
No I agree that putting your own security into prod probably isn't the best move, but understanding what's going on underneath will help you more than just using what other people have written.
'Data Science' = 'Statistics'. Also 'Machine Learning'. Remember kids, if someone knows what you are talking about, you can't get funding for it /sarcasm.
I actually have no preconceptions on swing dancing. I see what you're trying to do, and I think you're making a strawman. I'm not suggesting someone take up a new hobby, we're here because we use Python already and probably would like to be better programmers -- digging into what all these frameworks do for us makes us better programmers. You're suggesting that I take up swing dancing in some attempt to disprove my point when I say I have no interest in taking up swing dancing.
Not a terrible article, but I feel like the examples aren't really relevant to the point. Subclass dict and overwrite __str__/__repr__ and you get the same results. A better example might be a class that stores large objects with unique identifiers, so that an end user can access the full object by invoking __getattr__ / __getitem__ with the identifier. database ['x'] is a lot cleaner than next(item for item in database.objects if item.id == 'x')
Post your code and a better explaination of what the problem is in /r/learnpython.
Ah alright! Sorry. But I don't really have a code I just wanted to make the code but I don't have a frcking way of how to do it XD. 
&gt; What is it coded in? When I was learning webscraping they were using monodevelop(so I assume I can use Visual Studio), and they were using the CMD Editor Python isn't tied to an IDE like C# is, so you can use anything - Notepad, a text editor like Sublime Text or vim, an IDE like PyCharm. &gt; Is there a way to actually build/send a Python Program? For example, I know in C# which I use Visual Studio for, I can build and send a zip file to someone Look into PyInstaller or cx_Freeze. &gt; Any additional pointers you may have for newbies. Post questions in /r/learnpython next time.
Thanks, I'll look into the things you mentioned!
I'll continue learning machine learning algorithms!
Man Pyramid ain't too popular but it is a solid choice.
That's exactly what I'm doing??
I'm confused. That's exactly what the post is about.
Campus-wide power outage at the moment but try the materials from ~~http://pages.physics.cornell.edu/sethna/teaching/ComputationalMethods/~~ Edit: working link now that power is restored: http://pages.physics.cornell.edu/~myers/teaching/ComputationalMethods This is "computational methods for nonlinear systems", an introductory python course for STEM grads doing computational work. 
The time is always now. Just apply. And if you come up short try an employment agency. It's how I started and I knew very little. I was paid to learn.
Typically 3 is better. I'm not sure if it's better than 2 when it comes to socket programming. I've used 2 and 3 for doing TCP programming and they both looked to have the same options. 
This example is copied from the book Mastering Regular Expressions Python. Slash is correct as \ 
Yea $500 a month seems really scammy. Run away. Check out u/sentdex and his www.pythonprogramming.net and his youtube channel instead.
Lambda allows you to set up a temporary anonymous function. It's useful here because the command attribute is expecting a reference to a function, and function references cannot include parameters. So each lambda call is actually creating a little wrapper around the function passing in all the parameters. Two things happening here. First, I think you don't need all three parameters. See if you can come up with a single variable state rather than all those binaries. That should simplify things tremendously. Then each button will only need to pass the parameter indicating which button was pressed. Secondly, you may need to map the variable to the parameter. Look at this sample code: http://cs.iupui.edu/~aharris/230/python/demos/lambdaVar.py In my example, take a look at the lambda line: self.btns[i]["command"] = lambda i = i: self.say(i) In this case, I have an array of buttons, and i is the array index. In the lambda statement, I have to explain that i in the lambda is mapped to the i in the main program. That gets messier with three parameters, but as I say, you can write this with only one parameter and it will be a lot cleaner. 
yeah... Let's chalk this one up to me being a newbie, early morning redditing and not understanding why you made a Class object until I read through it an extra time.
Spoof a mobile user agent. Job done.
You can just have one user account and have them log into that instance. Then create folders in the directory for each student. If these are short sessions like 1-3 day seminars then I would probably take that path. If it's long term like a semester then I would write two scripts. First one would create 1-30 generic User accounts with random PW and the script should save the PW to a file. The you can take that file and distribute User and pw to the students for the semester. Second script would wipe out the user accounts for the next semester. 
PM sent.
Very helpful, thanks for sharing. I've just been working through the k-mean section in Andrew Ng's machine learning course, so I appreciate seeing the Pythonic approach to it.
I knew one of you was being cheeky!
Well yeah, but my example was a simplified version of a very complex system of decisions that we have at work (multiple ifs, database queries, etc).
https://developers.facebook.com/
Was thinking about taking the same thing. I have a call setup with them this Monday so I'll update once that comes around. Was looking at the Data Science specific course though - https://www.thinkful.com/courses/learn-data-science-online/ Having the structure and the mentorship could prove the marginal costs. 
A pomodoro timer that also does time-logging in a json file for later data analysis. [link](https://github.com/mr-ubik/pymodoro)
Put out a new release of [EasyBlogger](https://GitHub.com/raghur/easyblogger) - a cli client for blogger. Lets you post, edit, update, publish and revert blog posts in markdown from the cli
I think somewhere in your privacy options or so there is the option to see all your comments and posts listed. I would then crawl and parse that page for the links to your posts and then open the links automatically one after another and then programmatically find the delete link of each if possible.
https://github.com/dizpers/simple-mitm-proxy Finally finished assessment to apply for the new remote position - simple MITM proxy. It was my first serious touch with Python 3 usin asyncio and aiohttp. I hacked around with HTML modificaiton for several days, because regular tools (like lxml or bs4) do it in a way I don't like for this specific task.
are you talking about python 2? I'm asking, because python 3 slightly going to gradual typing
praw.ini user_agent='Keyword' Bot.py r=praw.Reddit(user_agent='Keyword') r.login(username,password) 
That's a Linux command, not a Windows command. You can't use it on Windows, unless you install all the Linux tools it calls. Try posting in /r/learnpython.
Thanks for sharing this! :) Very cool! 
[removed]
I noticed a lot of issues when using an in-memory database. The thing was that because of the multithreading, different threads was seeing different data. Could this driver remedy that?
Been working on a 2d isometric game with kivy. Finally set up automated builds with Gitlab CI, built a menu system and fixed weird issues with doors and other wall attachments sometimes being rendered on the wrong tile
we have github auth in our backlog but not sure when we get to it, hope the other registration methods are good enough for now
That is cool, but is matplotlib the best way to visualize this ? Maybe a html output with the same color highlight would be more practical, especially for serching it or printing it inside an ipython notebook. Matplotlib could still be used to generate the colorbar and place it on top of the file.
Interesting! I'd have added a note about the figure by explaining that you've applied PCA in order to represent the colors over a 2d space.
Does one have to use regex to define urls?
yes and it sucks but django team says theyre working on different procedure in the future.
Why does it suck? I'm asking because regex is a well known pattern matching toolbelt and it seems that's was is needed here. What am I missing?
Regex is very easy you haven't tried. For urls you start with little expressions and build out. What is the superior way? A *different markup* ? How many more of those do we need? 
PyCharm is exactly what you're looking for. It will also insert four spaces at a single press of the Tab key. Also, post questions in /r/learnpython next time.
&gt;Regex is very easy LMFA I suppose roofing in Miami in August is easy too. 
Cool. Inspired by matlab I guess?
You're running this on Windows? Perhaps pip is trying to update itself, which will fail because of Windows's frustrating file locking rules. Try replacing ``pip install -U`` by ``python -m pip install -U``.
Get very experienced working with databases/SQL.
Is Django a good place to start with an online chess game or would something else be more appropriate? I've done some work in anaconda but I don't know if it has what I'd need. I have the game made in command prompt, I just need a GUI and online connection.
To jump on his post, if you have a .edu email you can get the premium version of pycharm for a year +.
Using tuples here instead of short lists would likely be beneficial, and compatible with the solution provided. [["a", 6.99], ["b", 1.49], ["c", 7.99], ["d", 0.49]] [("a", 6.99), ("b", 1.49), ("c", 7.99), ("d", 0.49)] 
I prefer regex to any other path routing scheme I've seen. But there seems to be lots of people who for some reason view regular expressions as some sort of evil and obscure black magic. When you do something wrong, you will not get a nice exception message and traceback. Luckily, it's very straightforward to write tests to check that your routing works as intended. Unfortunately the people who view regex as evil, often think that writing tests also is black magic.
Didn't know Eclipse also supported Python, TIL. Will try all of them when I get some time. Thanks!
Hi. As a math and CS teacher, after *many* researchs of the ultimate IDE my answer is very clear : 1. Spyder (you can get it separately or with the Anaconda distribution, which I highly recommend). 2. Sublime Text 3 : the best of the best for EVERYTHING (not only Python). For students 1 is more easy (to instal, to use, etc.). For teachers, scientists, developers, hackers, 2 is definitely more powerful. Regards, -- PB
For games you want websockets 
If you're used to Visual Studio you might like to give this [Python Tools for Visual Studio](http://microsoft.github.io/PTVS/) a try.
Error:IndexError: string index out of range I get an error by this code: s = input("put a string:") count = 0 n = 0 while (n &lt; len(s)): if (s[n] == "b" and s[n+1] == "o" and s[n+2] == "b"): count += 1 n = n + 1 else: n+=1 print("Number of times bob occurs is:" + str(count)) can you explain it to me&gt;
With people using all different IDEs I guess it's on my own to find my favorite. I will try Spyder and look into Sublime Text 3 too since that's what senior at school use for C programming. Thanks for the kind response!
That's really interesting. I'd definitely check out the IDE when it's done
With databases supporting JSON data types and tools like ToroDB mongo has no conceivable advantages 
 $ python pyheat --pyfile test_program.py python: can't open file 'pyheat': [Errno 2] No such file or directory $ python -m pyheat --pyfile test_program.py Traceback (most recent call last): File "/home/kossak/anaconda3/lib/python3.6/runpy.py", line 193, in _run_module_as_main "__main__", mod_spec) File "/home/kossak/anaconda3/lib/python3.6/runpy.py", line 85, in _run_code exec(code, run_globals) File "/home/kossak/apps/pyheat/pyheat.py", line 155, in &lt;module&gt; main(arguments) File "/home/kossak/apps/pyheat/pyheat.py", line 144, in main pyheat.create_heatmap() File "/home/kossak/apps/pyheat/pyheat.py", line 55, in create_heatmap self.__fetch_heatmap_data_from_profile() File "/home/kossak/apps/pyheat/pyheat.py", line 97, in __fetch_heatmap_data_from_profile for line_num in xrange(1, self.pyfile.length + 1): NameError: name 'xrange' is not defined 
The community version is still great. The professional version just has some nice quirks but you probably won't make use of them when just starting out. Sentdex has great tutorials. Here's a link to his beginner series: https://www.youtube.com/playlist?list=PLQVvvaa0QuDe8XSftW-RAxdo6OmaeL85M
Will be watching them on following weekends, thanks!
I also prefer WingIDE over Pycharm, Eclipse, and Visual Studio for Python development.
Have you? Built a django application with automated tests? If the django team actually agrees I'd love to hear their rationale and proposed solution! 
[Here's the GitHub link, for the supremely lazy](https://github.com/tuxotaku/chains-invent-insanity) 
Is there really any reason to start using Mongo nowadays? My personal experience is... I wouldnt use it ever again, and I read bad stuff about it everywhere on the internets too.
Yes, that's correct. You might want to look into [Requests](http://docs.python-requests.org/en/master/) for easier HTTP. Also, post questions in /r/learnpython please.
What do you mean by explicit routes?
I don't much experience with Django but I've had to build some pretty intensive data applications that it quickly became very obvious SQLAlchemy wasn't the right tool. These were mostly ETL type applications though and I don't really think that is the point of SQLAlchemy anyway.
There is one major language that has done this in the last decade or so. This will make many people gun shy as once was one too many times. 
&gt; This tutorial states that it uses Python 3 because that's not the default assumption.
Made it python3 compatible which should resolve your xrange errror. Also made it a pip installable. Please refer to https://github.com/csurfer/pyheat/blob/master/README.md#usage for help.
I regularly see people do regexes that match `whatever.html`: since `.` is a special character that actually matches "whatever💩html". Regex is an okay tool, but for URLs, you typically just want to be able to match slugs and ID numbers. Regex ends up being an attractive nuisance for problems. 
PyCharm. Hands down.
I also got: &gt; A sex goblin with a tragic back story. 
I don't mean that it's not optional, I mean that _if_ you want run Matlab with any urgency _then_ you must use profiling. Because of how slowly Matlab runs in comparison to... any other language really, then profiling is not optional if you want Matlab to run well. (Octave is the only example of a language slower than Matlab that comes to mind, which is ironic because it's a Matlab clone) 
r/learnpython and read the fscking sidebar. 
noobs should read the sidebar which points you to /r/learnpython
&gt; Stifling a giggle at the abortion clinic A true card against humanity, no doubt.
In one of the examples he wrote: print item So he also uses 2
I just meant that SQLAlchemy is much more capable and you can go much further with it than the Django ORM. 
&gt; Because of how slowly Matlab runs in comparison to... any other language really [Citation Needed] I just knocked out a quick, straight forward and easy example: Matlab (inv): a=rand(N); b=rand(N,1); C = inv(a)*b; Matlab (\\): a=rand(N); b=rand(N,1); C = a\b; Python w/Numpy: a=np.random.rand(N, N) b=np.random.rand(N, 1) np.linalg.inv(a)*b | N | Matlab (inv) | Matlab (\\) | Python/Numpy | |----|--------------|------------|--------------| | 100 | 0.003983 | 0.001572 | 0.009 | | 1000 | 0.176714 | 0.066201 | 0.291 | | 10000 | 44.159154 | 15.464327 | 61.481 | Then searching google for benchmarks: It shows Matlab faster other than when 'relying on the "canned" OLS functions': http://rlhick.people.wm.edu/posts/comparing-the-speed-of-matlab-versus-pythonnumpy-partii.html NASA shows it depends on what you're running: https://modelingguru.nasa.gov/docs/DOC-1762 With Matlab beating Numpy in stuff like Matrix Multiplication (Stuff people buy MATrix LABoratory for): | | | | n=1000 | n=1200 | n=1500 | |--------|-----------|----------|--------|--------|--------| | NumPy | intrinsic | function | 6.1 | 10.48 | 29.31 | | Matlab | intrinsic | function | 0.548 | 0.714 | 0.97 | And I will point out that it's NumPy doing that, not Python. Without Numpy Python looks to be quite slow like in example 3: | Compilers/Packages | n=50 | n=100 | |--------------------|----------|----------| | Python | 31.9193 | 509.859 | | NumPy | 0.41324 | 4.19535 | | Matlab | 0.460252 | 5.483992 | Where I wouldn't say Matlab is really running "that slowly" since Numpy and Matlab are both orders of magnitude slower than optimized Fortran which ran the above n=50 at 0.036s. And that doesn't account for the verbosity required to write in Numpy vs Matlab. They're designed for quick and dirty prototyping and programs. (Otherwise you'd be writing in C or Fortran). In my experience I much prefer writing any engineering work in Matlab just for the amount of brackets [] I save making matrices and the other stuff I can ignore. That also doesn't account for the stuff you literally can't do in Python. The toolboxes exist and cost money for a reason and there isn't anything close. I'll even use Python to call my Matlab to run stuff just so I don't have to write it in Python. But Matlab isn't meant to be a general purpose language like Python is. So no, profiling is not 'required' to make Matlab run fast any more than it's "required" in Python.
At least he's trying 
The best
no 3.5 tho
Your comment was absolutely not taken as criticism, which is also welcome btw. I haven't used Matlab but have used Octave, but mostly for large array multiplications and such. Didn't know something like this could be achieved in it. Either ways wanted this tool to be quick and easy.
Right, then the issue is with the toolchain you're using. I tried your command on my system and it ran fine... Windows 7, bash + gnu tools via Cmder+git-for-windows (http://cmder.net/). Python 3.6.0, pip 9.0.1
For an overview of mathematical operators, see https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex You can implement the formula with just those, but you can also look at the [math module](https://docs.python.org/3/library/math.html) for some other goodies you might need. [Input](https://docs.python.org/3/library/functions.html#input) is a function, you can use it on Python 3. On Python 2 it's unsafe, use `raw_input`. All the links above have a lot of very important information. I suggest you spend some time on those. Ask here if you need help.
You can use a single table single column with json data types and mySQL/pg will behave like a nosql db
random is part of the python standard libraries (https://docs.python.org/3/library/). Have you tried importing it? Does it throw an error?
`randint()` is a function. You need to use something like `random.randint(0, 100)`.
What throws an error?
Reminder to look into this
That code is wayyy too complicated for what you're trying to do. Look up the string methods. There is a way easier way to do it. You need to learn the docs tho. Do it without a loop.
&gt; Committing suicide at the abortion clinic.
try this: import random x = random.random() print(x)
Python is case-sensitive. You want: import random email='your_email{}@gmail.com'.format(random.getrandbits(40)) or from random import getrandbits email = 'your_email+{}@gmail.com'.format(getrandbits(40)) 
Thank you guys!
In the future go for /r/learnpython. Those folks are great.
How could I integrate this into my git workflow? Add commit hooks?
Being hunted like a little bitch.
Yeah I mean OP hasn't even made the slightest of efforts here.
I still don't see the benefit of this over the other automated tools. I think pylint would have caught all of the bad formatting in the examples. Am I wrong? Can someone show me some concrete examples?
I've actually seen this one a couple of times during testing.
Reddit is not your homework army. 
&gt; getting eaten out on the floor like a goddamn family for once Nice work mate
you should make it generate a bunch at one time, check the ones you like and "print as pdf"
Pylint flags formatting, but it doesn't correct the errors - no? Autopep8 fixes some things, but it looks like this thing goes a bit beyond pep8.
&gt;A cop who is so cool that he rides on a tiger made of his own children. ffs I'm crying
Snorting coke off a man's nose. Jizzing into a Sega Genesis and pressing the transmute button. The Dance of the Nipples
&gt; Sharpening a foam broadsword on a dying man. ... yes
&gt; Jizzing into a Sega Genesis and pressing the transmute button. Isn't this how Sega came up with the 32X? 
Bug: the ñ in piñata doesn't render correctly
Using these in tinder pick up lines would be the best thing ever. Also TIL what a Markov Chain is, very cool. Very neat OP!
Thanks for the reply - also somewhat off topic, have you looked at the 'amix awesome vimrc', and if so, do you know of a tutorial for it other than just reading the .vimrc and docs for all the included plugins?
Fun Fact: Markov Chains are at the centre of the same tech that runs the autocomplete on your phone. :)
Thanks! This was my first time in a while actually trying to throw together a web application all on my own.
Awesome! I might fork the project on Github! 
I use this - it's great for formatting those little changes that you make ie. aligning lists, function parameters, automatically breaking up lines that are too long, etc. I use the [snippet](https://github.com/google/yapf/blob/master/plugins/yapf.vim) from the official yapf repo to integrate YAPF with vim, then I just visually select something, hit &lt;leader&gt;-a and bam - all pep8 and nice.
That's cool. Thanks for info. We are mostly using numpy, scipy and astropy/pyfits and functions like numerical integration, interpolation, root findings and stuff like that so we dont need some crazy machine for that.
You might want to adjust down the maximum parameters, I got a 502 trying to do the max cards with max attempts.
Dirty math, I love it.
Maybe something like [this](https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/auto-suggestion.py)?
&gt; Eclipse As a note, for Eclipse, you need to install the PyDev plugin (http://www.pydev.org) or get LiClipse (http://www.liclipse.com), which is a distribution of Eclipse with PyDev builtin.
Seems like PyCharm is surely one of the favorites. Thanks!
I am intrigued by this line: `visible=model.counter.value &gt;= 10` because at first glance it looks like this would evaluate only once, but obviously something saves the relation and not just the value. I skimmed the source code but couldn't see any obvious solution, but I guess something in `counter.value` knows about the `&gt;=` operator? Edit: Also, cool project! :)
Pylint might catch them, YAPF fixes them.
I would have used latex with a jinja2 template. I do this for my resume, for example.
"The basic suffering that pervades all of the toilet and latching onto your taint." Appreciate the taint
We could use this as passphrase generator. 
Excellent work /u/TuxOtaku
That'd be the way. It'd be trivial to make a precommit hook script for it.
Ah! I missed the part where the node tree was rebuilt on every render. Now it makes sense. Thanks!
I think I may have done this already, but just never pushed the code. Finding the sweet spots here was one of the trickier parts in developing this app.
Inp is the input filename and out is the output filename so you just pass the names you want to your convert function
I learned Python for 2 reasons: * I wanted a language capable of running natively on Linux. I don't know the current state of C#/.NET on Linux, but at the time Mono seemed like putting a plaster on a wound. * I wanted to diversify my knowledge and tools. Python's syntax was simpler and it had a big community. Now, with a bit more of perspective, I would say that: * C# is a great language and it's very powerful. I like its syntax very much; it's similar to Java, but it's much more modern. Before learning Python, I thought that it was the best language in the world. [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet) also thinks so. * C#/.NET has one big advantage: Visual Studio. It's simply the best IDE. And its debugger is very powerful. * C#/.NET has one big disadvantage: it was originally developed only for Windows. So it's very mature on that platform, but probably not as much on Linux. * Python is mostly cross-platform - at least more than C#/.NET. * Python's syntax is a joy to work with. It's much simpler than any other language I've personally tried. It's refreshing. For this reason, I code faster in Python than in C#. * Python has very cool features like [comprehensions](https://docs.python.org/3/tutorial/datastructures.html#tut-listcomps).
That's a pretty broad question. To start with, what's your age group and what sort of maths education have you had to this point?
Would you mind if i used elements of this for a education project I'm trying to build? I'm just learning so idk how this works but i love the idea of something fun and simple 
Go for it man! It's open source for a reason. :) Just remember to abide by the license (which is also on the github repo, natch)
How did you generate the list of training samples? Did you have to do a lot of manual cleanup or were you able to find that text file somewhere?
Thanks! Half the trick lies in finding a suitably large training set, so I'm always curious about that part of the process. Pretty simple app when it comes down to it - kinda nice when a learning projects explodes on reddit ;-)
Yeah that's really what this was. I've got a bunch of other projects that are going to lean pretty heavily on machine learning (Markov chains especially), so this was just me getting my feet wet. Having said that though, I'm not stopping here; there'll be more features to come in this app (like the ability to save card sets to PDF, and some UI/UX changes, among other things).
Thanks!
Ahhhhh I'm so excited to be tiptoeing into this community :D
I found this post quite interesting. It's easy to get fooled by an incorrect use of [lru_cache](https://docs.python.org/3/library/functools.html#functools.lru_cache), and I learned it [the hard way](https://benbernardblog.com/tracking-down-a-freaky-python-memory-leak/#apotentiallytroublesomedecoratorfunctoolslru_cache). Until I read this post though, I hadn't given much thought to the problem described in this post because I've never had to cache web service requests/responses with Flask. But it's really good to know; *lru_cache* is global, but there's still one instance per worker. I know that I'll need to be more cautious next time.
Weird. I've just tried it again and I'm still getting a 404. For example: http://a50.io/tagsearch/django/1/
The systematic destruction of an Iraqi child.
That's not a valid standalone Python script, so there's either some missing code or it was written as a plugin\extension for some other tool. But we should be able to make it work. I'm assuming you're on Windows, so you'll need to [download Python 2.7](https://www.python.org/downloads/) and install it, if you don't already have it. Open up IDLE - this is Python's built-in code editor - it will be in the Start Menu near all the other Python stuff. Once in IDLE, press Ctrl + N to create a new file. Type in inp = r"c:\path\to\original.bmp" out = r"c:\path\to\new.bmp" but type in the file paths between the quotation marks of the files you actually want to use. Then, hit enter to make sure you've dropped down to the next line and then paste in all the code you received. Press F5 to run the code. If you haven't already, it will make you save your code - it doesn't matter where you save it. That should do it. Note: I haven't actually tested this so if it doesn't work \ you accidentally launch nuclear missiles, uh...sorry?
&gt; Stuffing my balls into a girl's butt to make $2,000 from home. 
Hey I fixed it. It was only happening when viewing posts. Thanks for the heads up. Let me know if you still have problems. 
Sounds like a pretty solid plan. I'm sure the people over in /r/NSFW411 would appreciate this.
If you have hierarchical, non-tabular data that will not require a lot of complex queries then use NoSQL
dont
One approach I've been trying is to output my data in reStructuredText format and then use [rst2pdf](https://github.com/rst2pdf/rst2pdf). This also allowed me to use [docutils](http://docutils.sourceforge.net/) to output to lots of other formats (doc, html, etc...).
YAPF formats your codebase in specified style, which helps you enforce consistency across your codebase. That makes it great utility for folk who are working with years old codebases.
You can use PyPDF2 or rst2pdf. If you have access to the shell on the server you can run executable commands from python you can use wkhtmltopdf. About breaking the page if you will use wkhtmltopdf you can set the break after your calculation at specific row using page-break-before:always; 
Something I noticed recently is that, especially with pandas and matplotlib, you don't have to be into data science/analytics to have some fun with this stuff. I think "data science" is thrown around too much, and can turn people off of it before they even play around. So for others looking into this stuff (pandas) you don't have to have a burning desire to do anything data sciency. It is fun though to play around with pandas and matplotlib.
Great points, thank you for sharing, I definitely agree. Pandas is a very Pythonic package in its simplicity. 
You can register routes later, ala Django, just more explicitly. The decorators (Flask.route and Blueprint.route) are for simplicity's sake. They're just thin wrappers around `Flask.add_url_rule` 
Brilliant. I think the David Bowie appears only on one card so you'll always have "David Bowie flying". So it might be cool to maybe use nltk or something to tokenise the input as well. I'm not a NLP guy, so it's just an idle thought.
Computational Methods for Nonlinear Systems Working link: http://pages.physics.cornell.edu/~myers/teaching/ComputationalMethods/ 
Yes. That is the easiest approach to do one-hot encoding in pandas. There are other options though - especially if there are a lot of unique values.
Right -- so an in-memory database exists only for the connection that opened it. Unless you're explicit about using the same connection across multiple threads, you're going to get different in-memory databases for each connection/thread.
wow! I had no idea this was a thing! You get gold, sir. I'm definitely going to add this in at some point. :D
&gt; Florida man material. LOL I should totally write a "Florida Man Headline" app using Markov (and perhaps now nltk as well...thanks /u/SeaMothersTale!)
Subscribed to your channel about a year ago. Just wanna say please keep up the good work as your channel is one of the few where I actually feel I'm learning something! 
"The destruction of an orphans mouth" Jesus Christ.... 
my bad I scrolled through it on mobile and didnt see it.
Dude you made by boring sem fun. Thanks for the videos man. Keep posting. Kudos.
Awesome! Will for sure check this out. 
I've gone through some of your older videos and really loved the practical approach, there aren't enough ML resources out there with practical examples. Thanks for publishing these!
Did IDLE give you any error messages? I haven't used Python with GIMP, so I don't know how that fits together, but it sounds likely that that is where the script came from.
Love your videos man! I have learned so much from watching your videos since I started with Python... Keep up the good work, Thank you!!
I'm impressed. Python 2 and 3 mixed. The extremely useful 'error'. Return zero is there is an error and carry on processing. What can possibly go wrong?
Neat. I'll remember this next time I'm working with text files. Your little example code block is awesome btw, that's the way to get people using your library. Right to the point 
The code is available on Github: https://github.com/kadnan/OlxScraper
No it isn't unless you're putting a newbie at the mercy of 'input' instead of 'raw_input'.
I've been wanting to play around with Python and finances, so this is perfect! Now I just need to find the time to devote to it...
Hey Harrison, I've been watching your video series for a couple of years now, and you're great. I'm finishing up my Bachelor's in Mathematics this year, and your series are, at least in my opinion, equivalent (and even more digestible) than most of the programming/Python/Data courses I have taken. So thanks for everything you do. For others who might be skeptical: these videos are top tier Python/Data Science lessons. I recommend them.
&gt; A complete inability to form meaningful relationships. &gt; Peeing into a volcano. &gt; Syrupy sex with a giant box. &gt; Rubbing chocolate pudding all over the bloody carpet. &gt; A madman who lives in a monkey suit. &gt; Liking big butts and not by the color of their character. &gt; Sucking all the milk out of your anus. &gt; Forcing a handjob for science.
&gt; 70,000 gamers sweating and farting all over Bill Cosby's nipples.
Yeah so do most people, it's not hard. &gt;problem is IDGAF sorry to hear about your problem.
Cool stuff. You may also want to check out Rob Carver's [Systematic Trading](https://www.amazon.com/Systematic-Trading-designing-trading-investing/dp/0857194453) and his project, [pysystemtrade](HTTPS://github.com/robcarver17/pysystemtrade).
Man, those are all WAY too real. I'm half expecting /r/WTF to have posts depicting at LEAST three of those.
They are doing exactly this in /r/subredditsimulator: https://www.reddit.com/user/FloridaMan_SS/submitted/?sort=top So good...
WingIDE has historically had a much better debugger than PyCharm. I haven't used PyCharm in the last 2 years and I know they've improved PyCharm since then, so I can't comment on current parity.
The `range()` function and the `print()` function are built-in; you don't need to import anything. This will be a 2-line program. If you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. 
It might run but it is **NOT** recommended to use 'input', especially for a newbie. E.g. see [Simple explanation of security issues related to input() vs raw_input()](http://stackoverflow.com/questions/31175820/simple-explanation-of-security-issues-related-to-input-vs-raw-input).
Sweet tutorial. 
[plumbum](https://github.com/tomerfiliba/plumbum) doesn't have fancy `zip` handling, but it's had excellent convenient file reading/writing for a long time now, both local and via ssh. That first Flametree example could be similarly done as: from plumbum import local with local.cwd('texts/poems'): poem_text = (local.cwd / 'the_raven.txt').read() new_text = poem_text.replace('raven', 'seagull') (local.cwd / 'the_seagull.txt').write(new_text) And path/file objects can be created with `local.path('texts/poems')`. Different from Flametree, this will not auto-create these if they don't exist, but those objects have methods like `touch`, `mkdir`, `exists`, `is_dir`, `is_file`, `is_symlink`, `list`, `walk`, etc. Those objects also subclass `str`, so all string methods work on them, and they can be passed anywhere strings are expected (it will look like the absolute path).
Are you...maybe confusing Quantopian with Quandl? There are no tokens with Quantopian, but there are on Quandl...and what you describes sounds just like Quandl since they used to have a LOT more free data than they do now. Balance sheet data is available, for free, from Quantopian in a back test, paper trade, and even live trading. Make sure you're not confusing the two. The amount of free data on Quantopian is pretty staggering, and pricing is down to the minute. 
Thanks! I'm glad to see this is still being developed. I think the reStructuredText ecosystem is lacking, and while `rst2pdf` is great, it's under-developed. The language itself is very good though, and I look forward to this project's growth. The best reST editor I've found so far is Sublime Text with RestructuredText Improved and RestructuredText (RST) Snippets packages. Anyone know something even better?
Hey I'm a long time follower on youtube of your stuff ! I hope you will enjoy making these awesome for a while to come. And thanks for making them !
I played around with ReportLab a bit trying to make a certain type of label with barcodes on them. I found the ReportLab docs to be a bit frustrating, but there are invoice-generating libraries on pypi that use ReportLab and make pretty decent examples. All that to say yeah, that'd probably work for OP's purpose. My label maker thing did basically what OP's wanting except for one record per page.
&gt; Holding down a child and farting inside an airtight steel dome. Yup this site is bookmarked now.
thanks! But for x in soup.findAll(tag, kwargs): for key in kwargs: x.pop(key, None) gives TypeError: 'NoneType' object is not callable 
Ok well thanks for your help. I'm just going to do a for loop because that is just insanity.
In a court of law I'd back [PurdueME06](https://www.reddit.com/user/PurdueME06) every time.
I learned loads as well! keep up the good work!
The more I look at this code, the more it's missing things. I think you best bet is to go back and ask this person who gave you this code how you are supposed to use it. 
Heh I just found you a week ago, love the way you approach things, very nice. 
I'm working on showing Windows 10 Toast Notifications using Python. https://github.com/jithurjacob/Windows-10-Toast-Notifications 
/r/learnpython would be perfect for this. 
Just start applying for positions, best way to learn is on the job!
Github gists should be good for this, or a straight up repo. Other than that... this here Reddit thing.
For the GUI question, it is based on Kivy which should handle all of your UI needs really cleanly. Also, post your question on /r/kivy and you might get answers to your other questions since the KivEnt dev is active there and is also a core member of the Kivy team for a while now I believe.
Great stuff! I'm relatively new to quantopian and only have a light history with programming. I started watching your videos and really appreciate the clarity you provide in walking through your thought process behind each concept. As I'm still in the process of getting the hang of things I've learned of quantopians change in 2016 to quantopian 2 (?) and the addition of pipelines. Since then I stated getting a bit confused on how to ensure that I only learn the updated content when building my first rest algo. Any suggestions or thoughts on a good learning structure/ outline for someone to start with? My current priority is to try to get a better understanding of the basic process flow and framework of an algo with a simple strategy trigger. This way I can mentally map out each piece of the algo better. Sorry, kind of ran on a bit. Either way, thanks for your contributions to the community!
1. You can arbitrarily layer any number of GameSystems inside GameViews. You can see a setup for several layers of parallax renderers here: https://github.com/Kovak/YACS/blob/master/yacs.kv 2. You can use Kivy for all of the GUI system needs! I typically place my KivEnt GameWorld widget behind or in front of a regular Kivy application. 3. I'm not certain on this one, I think it might load the whole map into memory. You should check with udiboy1209 on irc or open an issue about it on the repo. I have a quadtree based culling solution for entities in the game I am developing atm. (closed source no example for that one unfortunately) I'll look into if I can open-source the quadtree part.
Where "nice code is nice", ultimately software is meant to do something. It sounds like that meets the requirement! That's awesome!
It would never even reach the hearing.
Hey brother I checked your github and think we have some work in common. Also I live in Atlanta. Check me out: https://github.com/geoffclapp Lets have a beer at a python meetup or something.
Were you there last month? Was pretty cool. I am going again this thursday. I'll buy you a beer if we spot each other!
A brew for you and your beard then!
Long time subscriber and big fan. Thanks a lot for what you're doing (that too for free). This series esp is something I was looking forward too as want to try my hands on Quantopian.
Loading dependencies from `requirements.txt` is [often frowned upon](https://stackoverflow.com/questions/14399534/reference-requirements-txt-for-the-install-requires-kwarg-in-setuptools-setup-p) (scroll past the top answer)
exactly this, thank you. 
i also tried this: import math seq1=['A', 'T', 'C', 'G', 'G', 'A', 'T', 'C', 'G', 'G', 'G', 'C', 'A'] seq2=['G', 'G', 'G'] m=seq1 n=seq2 best=-1 mis=float("inf") x=0 for i in m: for j in n: if j is not [i+j]: x=x+1 if x&lt;mis: x=mis best=[j] print x print best
Ooh, I'm very interested in this. I was a day trader for a few years, and worked on wall street for a couple decades. 
Really meaningful to hear this, thank you! 
[https://codereview.stackexchange.com/](https://codereview.stackexchange.com/)
Thanks!
great series. Thanks Are there any plans in future to make a detailed web development series using Django? 
CPython uses something called `pymalloc` by default: https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOC &gt; Python has a pymalloc allocator optimized for small objects (smaller or equal to 512 bytes) with a short lifetime. It uses memory mappings called “arenas” with a fixed size of 256 KB. It falls back to PyMem_RawMalloc() and PyMem_RawRealloc() for allocations larger than 512 bytes. 
Sounds interesting. Is this something your doing at work? Healthcare possibly? 
Just as a heads up, the `Crayon` plugin you're using you can easily click "don't highlight" at the top right when you're inserting blocks so you can clearly [show differences between code and text blocks](http://www.codecalamity.com/?p=243). 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Try doing your own homework?
true the best way to learn is to do
All credit to you for the idea! There's a discord CAH bot with a bunch of non-standard community expansions with answers that are pretty fun to add into the base word list as well! https://github.com/z64/dah-cards
Thanks! I also want to either upgrade it with other themes or use some other plugin as I don't like this blueish theme much
Generators still don't make sense to me, and lambdas are still sorcery. D:
Generator for me is, first of all, elegant state holder for reenterable "function".
thx just became a millionair
thx
I'm building a search engine in python as part of my Information Retrieval course. I have done tokenizing, stemming, forward indexing and inverse index so far. Its been an interesting experience.
"[0,m-n]" means "a list with two elements, 0 and m-n" in Python, not the range you were looking for. Look up the range() function if you really need to use ranges. 
I would like to know more about your project. May be we could do something together.
/r/learnpython 
Buy a gog book, read samples and descriptions from official site, ask at https://www.reddit.com/r/learnpython , take a time, try out all the examples and over time you can it write self.
&gt; for key in kwargs: &gt; x.pop(key, None) Ah, d'oh. you need to use `.attrs` to access the actual dict x.attrs.pop(key, None) You could use `del x[key]` but that can throw a `KeyError` if you try to delete a key that does not exist. 
Came here to recommend notebook myself. Regarding the framework: this is what I have done when faced with similar problems in past: https://github.com/amitu/amitu-putils/blob/master/amitu/putils/stack.py The idea is there is a "cache file". You decorate your functions with the `gen` decorator. When the function is called for the first time (with given input), the actual function is executed, and subsequently the cached response is returned. The cache is stored on disc, so it is preserved across restarts. 
I think you should be calling DestroyIcon on that LoadImage, I would also put a try finally around that createwindow to make sure the hwnd is deleted no matter what. Also i'm not sure why your're doing a sleep, its not needed.
Iterators aren't really functional, they are by definition stateful.
It's like you read my mind 
Think of `lambda` like `def`, except there's no name involved,there's no return statement and you're limited to one expression (the result of such is the return value). These two are interchangeable from a usability standpoint: def add_one(x): return x + 1 add_one = lambda x: x + 1 They don't seem very useful when you first encounter them, but they're great for things like sort keys or small callbacks. some_list.sort(key=lambda x: abs(x/2)) Sort the list based on the absolute value of whatever half of each value is (contrived example). They're also good for simple filter functions: filter(lambda x: x.startswith('hello'), some_iter) As for generators, they do lazy iteration. Let's say you needed to process every mp3 you have in a certain directory. You don't want to open up 250000 files at once, that's crazy. However, you can find them, and `yield` each one: def find(basedir, valid_types=valid_types): '''Utilize os.walk to only select out the files we'd like to potentially parse and yield them one at a time.''' basedir = os.path.abspath(basedir) for current, dirs, files in os.walk(basedir): if not files: continue for file in files: if file.endswith(valid_types): yield os.path.join(os.path.abspath(current), file) For an analogy, think of `return` like a stop button. Once you press it, you're done. If you need to use that function again, you have to start from the beginning. `yield` is like a pause button, you press, go do something else for a bit, and then you can hit play again to get some more data.
1. Tooling: stats, analyzing, making GUI. Anything not related with not installing the thing. If you run your own copy of pypi, it's way easier to parse all requirements files than to run all setup.py files. If you want to get informations on the packages of your 200 servers, ssh grep is easier than a complex python script. 2. Same answer. You may wana bash or perl your way through. 3. it's rarely the case. The entire JS ecosystem runs on package.json, a static file, and it works. Same for rust with toml files. Python has a mini requirement language embeded in requirements.txt which is enough for 99% of the time.
Yep, I was doing some research on interfacing a couple different applications by automatically converting exported files to an EDI format for import into the other application.
Before getting into your arguments, let me clarify mine (something I need to get into the habit of doing in the first place). What I mean by an object validating itself is ensuring it is impossible to create an internally inconsistent object. If you have a Payment object that accepts an amount, currency, datetime and account, you can ensure that you never create a payment with a non-positive amount: class Payment: def __new__(cls, amount, currency, when, account): if amount &lt;= 0: raise ValueError("Amount must be greater than 0") If you need to ensure that payments are only within a certain delta, you can do that in that object. Yes, you can do this in your validation layer -- you should, too -- but that won't save you from a programming error behind there. If you have an autopayment system setup that has an error in it, it could create a payment of $0 because the account owes $0 when it ran. Whoops, probably no harm there. But what if some how the account owed -$1000.00? You probably have a separate system setup to issue automatic refunds, and that works but your buggy autopay also runs and issues a refund of $1000 to the account as well. Free $1000 for that person. This is what I mean by an object validating itself, it never allows an invalid initial state for what it can control. &gt; Marshmallow can validate anything, serialized or not. It let you build complexe data schema, then you can validate incoming data against those schema. And serialize / deserialize or build forms on top of it if you need, but that's not required. Yes Marshmallow can do that, but it's primary use is as a serialization library. I would question its use as just a validator in an application. &gt; Depends. If you data validation requires a side effect (db query, http request, fs look up), you don't want to put that in your objects. All of these can be done before hand, and they should be done before even considering creating an object. If you need to be sure that an object a field's value is one found in some config table in the database, do that before you even get to the object creation. &gt; Also, validation may be contextual. An object may accept any int (datetime object), but in the context of the date of birth, you want to avoid the a date in the future. What's to stop from checking that the datetime is not in the future in the object creation? Yes, that introduces some non-determinism into your object creation, but every attempt I've made at abstracting datetime validation away has ended in abject failure. Again, this can also be done before hand, but it's worth ensuring that your object doesn't begin in a bad state. &gt; Don't confuse data validation and runtime validation. The first one ensure the sanity of your data set, the second one prevent bugs. Ultimately, these are the same goal, at least to me. Both prevent the garbage in, garbage out problem.
"Doubt" is not the word you are looking for. You want "question". 
This doesn't answer your question directly, but I just wanted to recommend [pyenv](https://github.com/yyuu/pyenv) as being a really great tool if you want/need to manage multiple python versions on one machine. It lets you do stuff like say "when I ask for `python` use *this* version (maybe it's 2.7.1), but when I ask for `python3` use *this* one (maybe it's 3.5.2), oh and in this directory when I ask for `python` use *this other* version instead (maybe it's 3.4.1), etc. Apparently it works well with anaconda too though I haven't tried that.
I think you should post this here: https://www.reddit.com/r/learnpython/ If you are about to ask a question, please consider r/learnpython. Homework-style questions will be removed, and you'll be encouraged to post there instead. Please don't use URL shorteners Posting code to this subreddit: Add 4 extra spaces before each line of code def fibonacci(): a, b = 0, 1 while True: yield a a, b = b, a + b
This isn't really a pitfall of gunicorn, it's an issue because of python's GIL. Effectively Python cannot share memory across processes (gunicorn is just an example of one way to fork processes), which would be required for this to work. IIRC ruby has the same issue. Regardless of that though, it's pretty common to need a centralized caching solution that survives application restarts, multiple instances, multiple hosts, etc. I favor redis, but memcached is another great solution.
what open source projects need help? all of them. most of them have contribution guides. for example: https://docs.djangoproject.com/en/dev/internals/contributing/ google for "contributing *whatever you want*"
It seems weird to me that marshmallow doesn't even get a mention here [Awesome Python Data Validation](https://awesome-python.com/#data-validation) as it seems mature, with version 2.12.2 released only a week ago, yet seven other libraries are listed. Simply no one from the marshmallow fan club has flagged it up to the site owner(s)? Perhaps somebody should?
I started working professionaly on Django development last year, and one of the first tutorials I watched was yours. Thanks!
You might want to go into the different kinds of descriptors and how they're resolved. * Data descriptor: defines a get and set. These receive the higest priority in resolution, even over an instance attribute with the same name. * Non data descriptor: defines only get (e.g. classmethod or staticmethod). These receive the lowest priority. The way they're resolved is Python searches the MRO for a data descriptor with the given name, if none is fine if looks for an instance attribute with that name, then for a non data descriptor, finally it calls getattr if one is present. All of this is managed through `object.__getattribute__` which is why you should never override that unless you're 1000% sure you need to and know how to (otherwise you'll create infinite recursion and that just sucks). 
Because it's hostile and not constructive?
/r/learnpython your problem is around the 158th character
Great rundown on generators but please lay off the gigantic 9gag memes 
but it's true what he says. the top answer questions the same thing, that there isn't a problem that this api would solve. without any constructive contribution. looking at the api it just looks cumbersome and not really making anything considerably easier. &gt;As an illustration, here is how to use Flametree to read a file texts/poems/the_raven.txt, replace all occurences of the word "raven" by "seagull" in the text, and write the result to a new file the_seagull.txt in the same folder: from flametree import file_tree with file_tree("texts") as root: poem_text = root.poems.the_raven_txt.read() new_text = poem_text.replace("raven", "seagull") root.poems._file("the_seagull.txt").write(new_text) particularly `poem_text = root.poems.the_raven_txt.read()` looks bad. why would i be accessing files like that and not by a string that represents their name. first i thought i'm not reading correctly, "what is the_raven_txt? a variable"? but no, he has filenames translate to attributes where he uses a function sanitize_name : non_alphanum_regexpr = re.compile(r"[^a-zA-Z\d]") def sanitize_name(name): """Return the name with all non-alphanumerics replaced by '_'. """ if name[0] in "0123456789": name = "_" + name return re.sub(non_alphanum_regexpr, "_", name) later he does: self.__dict__[sanitize_name(subdir._name)] = subdir ... self.__dict__[sanitize_name(f._name)] = f very awkward thing to do. `os.path.join(rootdir, "poems", "the_raven.txt")` doesn't look all that bad. constructive enough? it's really better to use `os.listdir` or `os.walk` and some sane tree structure (you can mirror a filesystem structure into a tree and reconstruct the path of a file by taking the list of its ancestors and join that with `os.path.join` for instance; you can do that internally, but like that it doesn't seem like a good idea to do stuff like that).
Considering your problem is rather simple, I recommend using PyAudio and scipy to perform your analysis. I spent a good few weeks play around with the different python audio modules and this is the pairing i settled on. The sounddevice module is better for recording/capturing. If your simply importing a sound file, it's a toss up between pyaudio and sounddevice in my book. 
My first pull request to [OpenWorm](http://www.openworm.org/) was merged! Adding gene expression data from a recent paper I was an author on to [PyOpenWorm](https://github.com/openworm/pyopenworm) and improving the way that it gets added to the database.
I... don't care. You can say all that without being an ass. You can say it constructively. It's called "participating in civilized society."
I am working on a script to keep my Reddit account (saved posts) in sync with Pocket. Ever since I've found out about the hard limit of 1000 posts I have wanted to keep a backup of my saved posts and comments. Moreover for people on mobile who don't necessarily share and save to pocket all the time this can be a nice utility. Just run it once a week or so and have all your saved posts backed up to pocket with appropriate tags. Previously I created a script to help you search through your saved posts which again is something that Reddit doesn't offer. (A shameless brag [here](https://github.com/vihanggodbole/Search-for-reddit-saved-posts) :P)
Figuring out how to deploy Selenium and a web scraping app to AWS Lambda using Zappa. 
You poor bastard....
A bit :P But some of the things on the list are easy and some are absolutely doable.
if you don't care stop trolling a subreddit where you don't want to participate. if you can't deal with criticism that may just be your problem. being able to deal with criticism without taking it personally is part of "participating in civilized society".
I'm developing an automation suite that prepares the environment, then builds and executes tests against network devices in an Evolved Packet Core (I work in telecom) and collects and summarizes the results for general consumption. I got ahead of myself last week and wrote a few hundred lines of code without unittests; this week, I need to build back my code coverage. I'm learning the intricacies of mock.patch, now. 
Like?
Really? Glad I'm not the only one who thinks that way then. I'll probably have it ready by tomorrow and post it here or in /r/learnpython.
I would suggest you put together some use cases; gather more support; search the [python-ideas mailing list](https://groups.google.com/forum/#!forum/python-ideas). The python-ideas mailing list is probably where you could go further...
Just finished an introduction of [Reusables](http://www.codecalamity.com/) and now working on the follow up posts. 
You don't want python
Yup, I'm using them on purpose to match the undocumented pseudo-code of "wouldn't this be prettier if it worked?", which may very well be greedy (or maybe not). I also left off the beginning caret, and a significant portion of the end. As you well know, if you want non-greedy, add a question mark to each group. There's that very small trade-off in legibility for the customization I was talking about. But you did a great job deflecting. If you care to respond with how your solution would handle the (not uncommon) problem I mentioned, or if you care to argue why pattern matching isn't necessary, I'm all ears. 
Everything's working fine now. Keep up the great work!
&gt; Tell /r/python what you're working on this week! Java programming. :-(
What initially caught my attention was the example used throughout the course (a stock portfolio). Using the example below, he walks through different scenarios while increasing the difficulty (goes from scripts, functions, classes including Inheritance, Encapsulation, iterators and Generators, Coroutines, etc), and explains everything along the way. For example, he’s like what If this was a csv file and I wanted to read it? What if I wanted to create data quality checks? What if I wanted to create a class to handle reading this file? What if I wanted to create a class to output the portfolio in html? Csv file? So on, and so on. Even though I didn't really understand anything past classes (until I watched the video like 10 times), I was reassured by who was presenting (Beazley seems to be kind of a rockstar in Python community) and ultimately decided that what he was talking about was worth knowing. https://www.amazon.com/Python-Essential-Reference-David-Beazley/dp/0672329786 example used in course: name, date, shares, price AA,2007-06-11,100,32.20 IBM,2007-05-13,50,91.10 CAT,2006-09-23,150,83.44 MSFT,2007-05-17,200,51.23 GE,2006-02-01,95,40.37 MSFT,2006-10-31,50,65.10 IBM,2006-07-09,100,70.44 
I will worship you for the rest of my life dear python God! But just by curiosity, how would you use the del x[key]? If you have a stack account, you could just copy past your last answer here http://stackoverflow.com/questions/41792761/calling-and-using-an-attribute-stored-in-variable-using-beautifulsoup-4
Been training a speech to text model with tensorflow. It's still going. Also, if anybody has any audio training data, I'd greatly appreciate it
Nothing else comes close. 
First of all it should have been changed to Python 3. I think you agree. Secondly one can introduce the new name and keep the old with a deprecation. No need at all to break your code. At least not for a few major versions. 
&gt; First of all it should have been changed to Python 3. I think you agree. You would be incorrect. It doesn't bother me one iota. &gt; Secondly one can introduce the new name and keep the old with a deprecation. No need at all to break your code. At least not for a few major versions. Ah! Clutter! There's that PHP smell. Pass. 
Writing tests for an existing, cobbled-together collection of scripts that I now support. 
working on Miguel's mega-flask tutorial also building a restful web service in flask 
You missed python-mode.el from your list, which is probably the most widely-used and fully-featured. Development here: https://launchpad.net/python-mode Info: https://www.emacswiki.org/emacs/ProgrammingWithPythonModeDotEl 
you can use my setup as inspiration: https://github.com/kootenpv/emp (probably won't work immediately, not sure)
Yes, I do!
Running code from PyPI, at least for the most popular modules, is something that is relatively safe and is done by millions of developers every day. You are implicitly trusting the project/developer who uploads modules to PyPI, but there would be a rather large stink raised if someone abused that trust. (Again, this applies to large/popular packages; if you're installing more obscure modules from some random person, maybe more concern is called for.) Note that you don't have to worry about third parties modifying the module between you and PyPI because they are checked against SHA1 hashes (at least assuming you're using pip) and the hashes are transmitted over TLS with an appropriate certificate. Python has no sandboxing capabilities. If you truly need to run untrusted code, you need to either do it in a VM or on a machine that you've isolated from the network and which doesn't store anything locally. (It's possible to use pip to download the modules without installing them from a machine with internet access and then copying them over to the destination machine and installing them with pip, so the lack of network access on the machine doesn't preclude using PyPI.) 
PHP is not fixing things and being inconsistent. I think you are confused at what is bad. 
PHP fixes things all the time. They also leave the broken stuff in for *years*. Then one day, when they actually have to remove the broken things, they have flamewars about breaking people's forums and blogs. No thanks. Inconsistency is inevitable. All languages have them. It's a necessary factor of growth. We can't just break everything every time the consistency is off. My recommendation: fix yourself. You will never find the perfect programming language. Learn to deal with inconsistency. If that's not good enough for you, then fork it and show us how it's done.
The second. Not implicit eval. Look at f strings. There is no implicit eval there.
Or install free VS 2015 [C++], or the compiler/build tools package, and it will mostly build. For the few special snowflakes there is great binary repo: http://www.lfd.uci.edu/~gohlke/pythonlibs/ (lots of 32&amp;64bit wheels for pythons 2.7-3.6)
No. It doesn't violate function encapsulation any more than keyword arguments generally violates them.
Every application you install is a potential security risk, wether from Microsoft or from pip. The advantage of python is that you can review the code. Virtualisation makes sense when you have independent apps like websites.
I left a comment on that issue. Here's the tox.ini issue (closed) where they eventually decided not to use setup.cfg for some reason. https://github.com/tox-dev/tox/issues/297 I think people are at least aware there's a problem. I hope we can find a solution. I think that solution for now is setup.cfg. Maybe one day there will be a pysettings.toml, Pipfile or whatever.
I'm not sure I understand the problem, but it seems like you're almost there. I would do something like this. import random passwordtest = open('gadsby.txt', 'r').read() tried_set = set() # a set of strings that you have found convert = passwordtest.split().replace('o', '0') password = random.choice(convert) + random.choice(convert) + random.choice(convert) with open('test.txt', 'a') as myfile: while password not in tried_set: tried_set.add(password) myfile.write('{}\n'.format(password)) password = random.choice(convert) + random.choice(convert) + random.choice(convert) myfile.write('{}\n'.format(password)) This may be what you're looking for. I did a few things here. * create tried_set so that I can check what passwords I have created already and not add the same passwords to test.txt. * create convert so that I do not have to split a potentially large file over and over again which could slow down the program a lot. * then I just run through a while loop creating new passwords and adding it to test.txt until I find a password that I already made. * append the last password to the text file after the while loop exits. This could take a while depending on how big gadsby.txt is 
I'd like to know what circumstance this could happen in.
Trivial. `.read()` the text; remove punctuation and convert to lowercase; cast to `set` to remove duplicates; use`itertools.permutations()` to get all permutations; finally iterate over them; writing each on a new line.
Wow. Thanks for the detailed response. We do have a secure network. And I guess the traffic is being monitored. I can't even use pip - I tried configuring the proxy, but I think it's using NTLM authentication. I don't know how to configure pip to work with that. I will have to download all the packages manually I guess. Thanks again for the detailed information. I will be using a lot of it tomorrow in my talk to my manager. 
As someone who's been disconnected from Python for a couple of years now, why is it so popular for data science applications (ex. fintech)? I've noticed that many prefer to use Python to mine and analyze large datasets. Is it the eco-system? The speed? It's simplicity as a language?
Which of the arguments in his function aren't keyword arguments?
Well no because 1. that function signature is invalid 2. When the hell are you going to remove a `*args` from a function like this 3. What kind of situation are you in where you're refactoring a function so that instead of taking arguments a, b, and c, it now takes a, b, and d, and does more or less the same thing. I don't mean "what circumstance could you write an example program that shows this wart", I mean "what circumstance could this wart actually appear in practice", because I can't think of one. Further, your revision is still open to similar problems: Assume I have a function def foo(*, a=..., b=..., c=...): pass If this is called as `foo(a, c, b)` -&gt; `foo(a=a, b=b, c=c)`, then the signature is revised to def foo(a, b, c) we end up with `foo(a, c, b)` at the call site, which is now `foo(a=a, b=c, c=b)`, potentially silently and wrongly.
Such a low bar. 
The same as plot(x=x, y=y, color=color) In both cases. Seems like you're arguing my point at this stage? Because "plot(y, x, color)" would almost certainly be a typo which my suggestion would catch. 
Lol, I feel like I need a disclaimer now -- Do appropriate research and make an educated decision for yourself. The views expressed in my prior comment are not intended to be a complete plan of action and may expose your organization to harm. Also, if you have a secure network, I'd imagine that you have security/network admins. It's definitely worth talking to people within your organization that have a stake in your organization's security. They might help you solve the pip issue too, which would be better than trying to hack stuff together.
Keyword ONLY. It's a thing in Python 3. Look it up. 