OK, thanks. To elaborate, I didn't go further with Django yet mostly out of time constraints and wanting to work on other stuff first, but yes, I did feel a little defeatist, but only because I couldn't see far enough to know whether I was going down the wrong road with Django or not. I was not looking forward to installing, beginning at square 1, etc., only to find that Django was not what I needed. It took me a while to even know whether I needed a web framework at *all*, because I had got it into my head that Django et al. were used to build online newspaper-like sites, whereas I wanted a "desktop GUI' in the browser sort of effect. Now I realize that I will need a Javascript widget toolkit for that (like Dojo) and I will *still* need the web framework to handle the backend, so I am less reticent to goof around with Django. Again, thanks for the slap, and I'll give it a go when I get a block of time.
&gt; You should generally avoid using range() in for loops Why is that? 
Real Python actually looks really good, I might go ahead and buy it, what have you done/how far have you gone in it?
[Here's a link](http://reda.io/1g7xMwL) for those who'd like to view it in one piece.
So let's say I have a list var: &gt; foo = [ "bar0", "bar1", "bar2" ] It's better to do: &gt; for x in foo: &gt; &gt; action(x) Not: &gt; for x in range (0, len(foo)): &gt; &gt; action(foo[x]) I've personally been using the second method because it lets me keep track of my position in the list, should I need that later on. Is there a better way to keep track of the position in the list? You say code smell, is there a scenario where using the second method might trigger a bug? Or is that because using this method when you don't have to (as you say, a situation where you don't care about the index) is just not efficient? p.s. Thanks for the reply :)
If you end up doing anything cool with Kivy, please x-post it to /r/kivy.
quick question about the main page; &gt; ... the new Open Office XML format. Surely they mean the [*Office Open* XML format](https://en.wikipedia.org/wiki/Office_Open_XML), yes? ^(/me grumbles about microsoft polluting the language deliberately to cause confusion)
http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html $XDG_CONFIG_HOME should be used as the config directory, and if not set it defaults to $HOME/.config. I know many applications still chuck their config in ~/.application_name, but I thought people knew that this is the wrong way to do it. A library like this should really default to using best practices...
Best news of the day!!!!
OK, I wasn't sure if I should post that publicly, but that guy actually messaged me in private and offered to teach me how to "monetize" whatever it is he's doing in return for programming the thing for him. He also mentioned "black hat SEO". I don't want to post the full exchange, because that's still private information, but he mentioned something called "private network building". Maybe someone more knowledgeable with SEO can figure out what he was going to do. If you do, please reply. I'm curious now. Oh, and I told him to get the duck out, obviously. Edit: exact wording : &gt; it's essentially a tool that helps identify something that's a corner-stone in private network building, which is one of two major blackhat methods to search marketing (it's the long-term method).
considering the headline, a long single paragraph post is quite the irony
Interesting. I might wait for others to try, debug it, beta test it for me before I switch in like a year or two.
&gt; initially developed to decrease the time taken by dependency installation by caching the dependencies and consulting the cache before downloading from pypi buldout does it, has done it since forever.... [buildout] eggs-directory = /home/you/.buildout/eggs download-cache = /home/you/.buildout/dlcache [read more](http://jacobian.org/writing/more-buildout-notes/)
I went googling because I didn't believe this. And this is what I found. http://www.tekrevue.com/tip/disable-app-nap-os-x-mavericks/ 
Thanks for letting me know.
 Yep, this is what i found, too. But i don't know what the domain should be for a macports installation of python2.7, and my googlefu has proved inadequate here. How do i determine this? Ninja edit: i couldn't believe it either, but there it is. Point being - bring back Steve Jobs. Non-ninja edit: the suggested fix here doesn't appear to solve the problem.
`enumerate` is what you're looking for: for index, item in enumerate(foo): action(item)
It is likely `org.python.python`. You can check by looking in the file `Library/Frameworks/Python.framework/Versions/Current/Resources/Python.app/Content/Info.plist` for the `CFBundleIdentifier` key.
&gt; Library/Frameworks/Python.framework/Versions/Current/Resources/Python.app/Content/Info.plist For other people using macport, this path is preceeded by /opt/, so it's: /opt/local/Library/Frameworks/Python.framework/Versions/Current/Resources/Python.app/Contents/Info.plist The identifier is indeed org.python.python . I'm trying this now, and will let you know how it goes. 
For someone who sounds into Python you sure eschew whitespace a lot.
did you mean os.environ.get('my_env_var', config.get('database', 'dsn')) 
I've used this service quite a bit to set up automated scripts for various purposes. I like it a lot.
xlsxwriter is faster, way more memory efficient and may have better compatibility with numpy. The memory efficiency is huge, if you take a big dataframe (say 300K rows x 100 columns) and try to dump it, takes multiple GB of memory!
 Doesn't appear to have worked. I ran: defaults write python.python.org NSAppSleepDisabled -bool YES and then started my code. After a half hour away from my desk, the fans were off, and the code was stalled. Boo. I made sure to call python, rather than ipython, so ... either i have the wrong identifier, or ... i dunno. Any other ideas? 
pandas dev here - I'm hoping to move us to xlsxwriter by default soon (though we'll continue supporting openpyxl), because the perf characteristics seem to be much better.
thanks for the heads up. this confirms my rule of thumb: "don't be an early adopter when it comes to work stuff". 
Ah, alright. I see what you mean. Thanks, I see I've used it for one of them, but not the other.
Looks very nice. On the other hand, I created a terminal and typed commands. I think it went too fast, because the terminal eventually froze up, and then stopped responding to input, just entering a return every time I pressed enter (but ignoring the other stuff I typed.). Still, shows promise.
No, it's trivial to run `flake8` inside of travis-ci.
Yes!! So much easier over Heroku!!!!
Is anyone there? 
Yes, I might. You can do it with Travis, but finding the report buried in a text log isn't terribly convenient, and I don't think there's any good way to compare the results from one run to the next to highlight new problems. I've just started using coveralls for a similar reason. Personally, I find pep8 annoyingly picky. My checker of choice is pyflakes, because it tells me about things that might affect how my code works, not about formatting.
Very very cool. :)
+1 for the Udacity courses. I did the Web Programming course and it showed me what was awesome about Python (previously a PHP developer). You build things as part of the course and the exam is building something else again. Cannot recommend this enough.
It also broke my ipython notebook from starting, although regular ipython works.
pyflakes/flymake in Emacs.
I just skimmed the Wikipedia and I'm still confused. Was this weird language really deliberate by Microsoft?
My bad, this post was more of a frustrated ramble
pylint when using pvdev for eclipse
Can you try running it via caffeinate? $ caffeinate python your_long_script.py 
Not exactly...
&gt; defaults write python.python.org NSAppSleepDisabled -bool YES It should be org.python.python just like it is in the CFBundleIdentifier. I have been running python in the background with no issues and I haven't changed anything. I don't run any overnight processing tasks however.
I agree - it's a balance (though I really appreciate 79 character line width). My original motivation was to have a way to automatically know if someone's PR might be introducing issues.
For anyone using the free [Anaconda](http://continuum.io/anaconda) distribution of Python, we just built a package for openpyxl, and you can easily install it by typing: conda install openpyxl For those *not* using Anaconda... what are you waiting for? :-)
Well it was useful.
What's left is python
Needs a bit of love in the discovery department but seems like its moving in the right direction - http://i.imgur.com/q5CsZcV.png - Warning that png is 2.8MB. I tried with the draw module initially but ended up culling all of the classes via a `grep | ws cleanup` and than some quick manual cuts. Also some of the `system.modules[]` calls are better off with `system.modules.get(name, {})` to avoid key errors. edit: Tried one more using fdp instead of dot for layout manager, it looks like the grapher GRAPHED everything in sys.modules ( ~~5.8MB~~ 16.5MB png ), unfortunately everything is black but class name. edit - edit - Couldn't leave well alone, here's a screenshot of the 16MB png of ctypes, boto, inspect, my library, and a lot of other ancillary classes - http://i.imgur.com/J2WuLMg.png hand to change the node start header to use real colors ( was defaults to "" ) but then it all started rendering.
This isn't true. AppNap only works with Cocoa based GUI applications. &gt; Though Cocoa applications are signed up for App Nap by default and must opt out if they don’t want it, the existence of the aforementioned private system calls means that any other kind of executable that is not a normal GUI Cocoa application is not eligible for App Nap. From this ars review: http://arstechnica.com/apple/2013/10/os-x-10-9/14/#app-nap-policy
If you want to work with web technologies, but have a desktop app, check out my library [WebUI](https://pypi.python.org/pypi/WebUI).
Oops! I've just rerun the 'while True: print time.ctime()' test having tried this, and still no joy. 
Try the test that i described. (Note that it does mean leaving the computer unattended for 30 mins.)
GPLv3 eh? I guess you didn't want pip to incorporate those improvements, really.
Do I have to leave the computer unattended? Or just the application? It sounds more like your computer sleeping in the former case. Mine is configured for 10 minutes of inactivity. I'll report back in either case.
hrm this may explain why my ipython sessions always lock up for a bit, thanks for this!
Looks fine guys, it didn't miss a second in 45 minutes. I think it's your own hibernate settings. https://gist.github.com/kevinastone/999ba61b63db07397b7d Just to clarify, I use the stock python (v2.7.5) in OSX Mavericks. I set my display and sleep setting to never.
I'm sorry I didn't remember to include the issue number as `#nn` in my commit message!!! [EDIT] https://github.com/pydata/pandas/commit/372226c
Honestly, the thing that MIGHT be causing it is that the console /terminal you are running in is getting app nap'ed, which might cause any subprocesses of it (aka python) to also go to sleep. When you are saying that it goes to sleep, are you completely hiding the terminal window / minimizing it?
Travis support for e.g. https://github.com/klen/pylama (PEP8, PEP257, PyFlakes, Mccabe, Pylint, gjslint) would be really cool. An XML or JSON reporting format (like JUnit XML) would be really helpful; but (not having looked) it shouldn't be too difficult to write a line-based parser for the existing console output.
If the terminal it's running in is sleeping, it's more likely that the python script is blocking on the synchronous print statement. Because the terminal is sleeping, the standard-output pipe stops getting flushed.
Odd. I just tried setting my hibernate to 2 mins, and waited 5: the display blacked as expected, but there was with no time lost. I took this to suggest that hibernate's not the problem, but was about to try the 'never' hibernation. I'll have to do that at home, so i'll let you know how it goes in an hour or so.
So, my code does use matplotlib, but the frontend is set to MacOSX. On the other hand, i get the same behaviour with the simple 'print ctime()' script, so that can't be it...?
pypa = Python Packaging Authority Source: https://github.com/pypa/virtualenv Documentation: http://www.virtualenv.org/en/latest/ (http://virtualenv.rtfd.org/) --- Source: http://hg.python.org/cpython/file/3.3/Lib/venv Documentation: http://docs.python.org/3/library/venv.html (http://python.readthedocs.org/en/latest/library/venv.html)
Can you reproduce this behavior using Terminal.app?
You didn't mention which platform you would like to spend your time developing your own GUI for, because of themes.
BInary caching seems like a good thing, but can also be done with pip, using the wheel format.
I guess you want to use Queue and not LifoQueue, because we want a queue here, not stack. 
That sounds like your display turned off but your computer skipped the hibernate. The other thing to consider is that AppNap can adjust timer responses (trying to combine them into a single wake-up), so you're `time.sleep()` test might still be susceptible (even though my short test result above didn't show any deviations). If you allow me to guess, I'd suggest what's actually happening is that by upgrading to Mavericks, your Mac is now able to hibernate where it wasn't previously (due to a driver or some background process). Setting your computer to never sleep using Energy Saver or a program like `Caffeine` will fix.
If you use virtualenv, here is how to have a download cache for pip: Create the file `~/.pip/pip.conf` and edit it: [install] download-cache = ~/.pip/download_cache 
Because it's a generic programming language. There's so much chance, 'cause it's so easy for someone to write something that does it in another way.
Insofar as you should understand 90% of for i in xrange(3): print(i**2) sure, but if you come up against something you don't understand, poke around with it, mess with the REPL, google for similar issues, read the docs, post on forums, etc. The strength of Python, in my opinion, is the MASSIVE friendly userbase.
Is there a package or procedure to have one local repo and just symlink packages into each virtualenv?
http://hnify.herokuapp.com/get/top returns: 500 Interal Server Error. The others work just fine? 
Just bought my first book on programming ever, this one.
web2py is a great platform. Using the built-in rocket server is easy, but in my experience doing a proper a wide-scale deployment required some specialist experience and knowledge (that I don't have). Looks like pythonanywhere has addressed this. Console worked fine for me.
Another dev here. At the risk of sounding a little defensive, the console really does work fine most of the time. We use it every day to build PythonAnywhere itself, I use it to run vim, and it's pretty reliable. There's a bunch of stupid workarounds that I've got so used to that it's probably hard for me to be objective about (ctrl+shift+v pastes, and multiline paste doesn't work, and it sometimes does get a bit crashy if you splurge too much output at it, but a ctrl+c and a refresh usually fixes it). But overall, let me assure you that the terminal does not "show promise", it is fully usable for real work. oh dear. that turned out very defensive in the end. ahem. What I meant to say was "thanks for the feedback and for the encouragement, it's much appreciated!"
I think you said it pretty well. As a PA user, the whole system takes getting used to. But remember, you are using a remote IDE, hosting and terminal that you are paying pretty much nothing (or literally nothing) for.
You would have to use a feature from the OS to bind the shortcut to execute the Python script. This is OS dependent. The script could then do what ever you want. For Windows see [Create keyboard shortcuts to open programs](http://windows.microsoft.com/en-us/windows7/create-keyboard-shortcuts-to-open-programs).
Yes, it's possible to program anything, but why? Every major OS already has a program like that. Windows has Launchy. OSX has Spotlight. Linux has Synapse.
My only real issue with it is that it is a crutch to me and I have no idea how to move my Flask app to another server where I'd have to configure it.
Assigning keyboard shortcuts to the programs he wants to launch is simpler.
&gt; However, even after this is done, if i try running the following code: while True : print time.ctime() time.sleep( 10 ) Instead of printing to stdout, try writing to a file and see if that works. Reason being, if your terminal app is sleeping the python process may not be capable of printing to stdout: with open('python-output.txt', 'a') as f: while True : f.write(time.ctime()) time.sleep( 10 ) (You could also try using the logging module, but this is probably easier for your purposes).
It is heavily KV focused, it only mentions that you dont need .kv files.
Does it run web2py scheduler?
Another rule of thumb... Dont believe everything you read on the internet by some random dude.
Or search on Windows
It is better for the community to add this functionality to pip.
&gt;but why? to learn how to do it?
&gt; Does it run web2py scheduler? It can do, but right now you have to register and configure a scheduled task inside the main PythonAnywhere interface. It would be neat if we auto-created that for you, I'll add that to our to-do list.
If you're OK with Windows-only, check out [pyHook](http://sourceforge.net/projects/pyhook/) for monitoring system events.
Good point. I work on Linux, and it would be nice if I could share prototypes easily with some colleagues who are on Windows, but Linux is all I really care about.
Personally, I'm very glad to see more people taking a second look at the python logging module and coming up with something different. Ending up with multiple alternatives is fine. Though it would be useful if there was a bigger effort to compare &amp; contrast alternatives in cases like this.
I gave up on Docopt for this year - implementing just mildly complex scenarios that were trivial in argparse were a nightmare in Doctopt. Given that Doctopt is evolving that will hopefully change next year. But maybe not - the concept that documentation should be 100% driven from an argument specification language has its flaws. So does the concept that everyone knows this argument specification language and it's always the easiest way to do things.
&gt; Spotlight Alfred 
Yes it is! Though I'd just use xmonad ;-)
There are already projects to do this: http://www.reddit.com/r/Python/comments/1llhuv/my_fun_labor_day_project_a_lightweight_pure/
Ick, the kv language is one of the things I ended up liking the least about Kivy. Hope it teaches it well.
or just go straight for win32: http://stackoverflow.com/questions/5592500/detecting-key-presses-using-win32api-in-python
Yes. But why would you? Take a look at [the best application launchers for windows](http://lifehacker.com/5835770/the-best-application-launcher-for-windows).
This sounds remarkably similar to a Linux program called "dmenu". Definitely possible.
I second this. Autoit is wonderful for this kind of automation. Python is great for everything else. But yes you can do this with Python.
Correction: web2py is the *best* platform.
why are you using flask???? flask doesnt give you anything. web2py is a full stack framework that you can also use for anything flask gives you.
Yeah, there are already programs that doe this such as Launchy
Seems like too many people using it. Took down the Heroku instance.
I have used Launchy - http://www.launchy.net/ It is Open Source, so you could download the code and attempt to convert it to another language and see how it is implemented in their code. Source Tarball: http://www.launchy.net/downloads/src/launchy-2.5.tar.gz
Sure, go try! If you are fine with just Windows you can use win32 bindings which should let you listen to keybindings.. or you might be able to make a GUI program with an invisible window. 
The problem I have with that is that it won't run as a daemon/service so I have to either have some kind of cron job making sure that it's running or keep checking myself, both are precisely the kind of fiddling I would like to avoid. Of course you make good points but that could be configured in the web2py admin, a config file, some other interface, or something of the sort. Granted the first option would require changes in web2py too. 
Dammit. I use IPython every day. So the IPython server starts up, but you can't open up the .ipynb files?
Good point. Perhaps this can help? http://mmonit.com/monit/
My usecase is different. I don't run over night jobs on my Mac. I have an ESX cluster with Linux VMs on it for that stuff. But one thing I noticed on my mini is that the temperature dropped by at least 20C since I installed Maverics. I love it. I know because I watch my temp, and under normal workloads [this used to show high 80s in C](http://i.imgur.com/cE1QbZK.png)
What did you dislike about it? I find it a great advantage, but I'm interested to understand the opposing opinion. Regardless, it's probably worth noting for anyone else reading that you *can* use kivy in pure python if you like (though I admit it isn't so well documented), and it still works fine as a framework. The kv language abstracts away the construction/description of widget trees and binding relations between widget properties, which lets the program structure be described much more clearly, easily and concisely than with pure python syntax. At least, that's the opinion of the developers and reason for creating the language, and I've found I agree.
Just looked at my history for the last week. ~20 lines per day all week last week, and then 400 lines yesterday and today combined. Last week was debugging running deployments testing, and today I wrote a new utility. It basically varies greatly on the complexity of the project, code reuse (sometimes less is more). And there are days where I delete code lines without adding any. Been writing python for 11 years.
Next up: how can I write a device driver in Javascript?
What's the difference between autoit and autohotkey? I only know the latter.
They share a common heritage but have evolved separately. AutoIt's language is more BASIC-like, while AutoHotKey is more like an unholy hybrid of C (curly braces), BASIC, and... bizarreness. They have very similar features, though. I use AutoHotKey but only because I happened to run across it first.
whatever i love that crazy language... AHK4Lyfedawg!
Yeah I love AHK's libary - you can do practically anything to Windows, incredibly easily - but the way that language handles literals is *ridiculous*.
And the comma after the command name... which you don't actually need anymore, but which is in all the examples anyway! And how sometimes variable values are substituted into the command before it's executed, and sometimes not! Dude named Lexicos released a fork called AutoHotkey_L which I switched to because it has hashtables... looks like that's now the main version being developed.
You can also use [Autohotkey](http://www.autohotkey.com/).
Heeeeey! I made dat! :) Next update will have template matching! To OP, I highly recommend you see this project through to the end. One of the very first "big" projects I did with Python was related to Windows automation (I build a bot which 'played' a web game called Burrito Bison ([Shameless Plug)](http://www.youtube.com/watch?v=V7UO53ajBc0). Even though the code is *remarkably* embarrassing now, I learned a hell of a lot about the standard library, and how things fit together in general. Some general tips for what you want to do: Firstly, with regards to launching the program, there are a few ways you could go about it. [Pyhook](http://sourceforge.net/apps/mediawiki/pyhook/index.php?title=Main_Page). This lets you hook into system events like mouse clicks and keyboard stuff. Using this library, you could have you program listen for the key combo of your choice. The other option, which would likely be a lot easier, is to simply to build your program normally, and then assign it a keyboard shortcut in the OS. In Windows (I'm not sure about the other OSs), you can assign an arbitrary `Ctrl` + `alt` + `letter` combo to launch something. For the part of the program lets you enter commands, this could either be on the command line with Python's `input` function, or, if you want to get fancy (which I suggest!) you can use a GUI library to give your program some polish. Building a GUI is a fast track to learning how classes work, so it's definitely work checking out if you're still a newbie. There are lots of options for GUI libraries. Lots of people like PySide, or PyQt. I'm personally partial to WxPython. I'd suggest staying away from the built in TK just because, well, it's hideous. For everything else (starting programs, shutting down windows, etc..) the [Microsoft Developer Network (MSDN)](http://msdn.microsoft.com/en-us/library/windows/desktop/aa376883(v=vs.85).aspx) will be your best friend. Just about anything you want to accomplish in Windows can be done from Python via PyWin32, or by manually loading libraries via ctypes. 
Downvoting not for your opinion but for your completely content-free post.
I tested a few times today. I use Python 2.7.5 compiled via MacPorts and use iTerm. I cannot reproduce this behavior. Everything works well on my machines with no napping.
I came here to suggest AHK, I'm surprised I had to scroll that much.
We do have a "Scheduled tasks" option, and we've worked with some of our users to use that to keep something running constantly. But I agree that if you need the app name then that a default configuration wouldn't work perfectly. 
No worries mate. Its all good. Will check back in once I put up the other articles. Enjoy your week!
Well, that's true!
Hi! I wrote curdling! :) When I started working on this project I didn't even think about that. The license was actually the last thing I thought about. Someone just opened an issue[0] today pointing out that it could be a problem. I'm definitely open to change the license if it helps anyone. [0] https://github.com/clarete/curdling/issues/33
Link ?
Sounds like what you really want is a terminal interface ;)
That's actually worse than that. Pip will only cache tarballs, so every time you install a package, it might skip the download if you have the package cached, but it will *always* build the package; That's why it is always slow to install packages like lxml using pip. On curdling (and buildout), the package will be compiled and the binary will be cached.
I agree with you and I'm even considering opening a pull request that adds that to pip. But I have to reiterate that this is actually one of the simplest features curdling has and the most exciting ones are pretty hard to implement on pip, like the concurrency model for example.
without reading the context, yes.
True, good point. Could you give an example or two where Docopt struggles with certain scenarios?
The package will be installed correctly in your virtualenv. What you gain is that pip won't download the package again and again if it's in the cache.
What do you mean by "environment variables folder" or "add the folder to your environment variables"?? I am guessing that you mean a folder on your Path environment variable? "Path" is a particular environment variable but there are plenty of environment variables other than "Path". 
Awesome. Great find. You sir/ma'am, are awesome.
IMHO, I would be concerned about said colleagues becoming attached to an infeasible GUI theme which they might have to waste time re-learning. Much more economical to use an existing set of standard GUI widgets (with Python bindings) which they already understand how to operate... e.g. Qt, Gnome, Tk, wxWidgets, CSS/JS frameworks. * https://en.wikipedia.org/wiki/Comparison_of_X_Window_System_desktop_environments#Default_programs_packaged * https://en.wikipedia.org/wiki/List_of_widget_toolkits * https://en.wikipedia.org/wiki/CSS_frameworks * https://en.wikipedia.org/wiki/Balsamiq#See_also * http://matplotlib.org/xkcd/gallery.html ... http://www.agilemodeling.com/essays/barelyGoodEnough.html
Or use Launchy to capture the input and send it to the Python program. http://cybernetnews.com/launchy-125-adds-customizable-commands/
Sure, here's a few: * validation - docopt provides none, and instead recommends other products like schema for validation. This causes numerous problems: complexity, duplication of code, difficulty in reading schema vs something very simple in opt/argparse. * multiple identical options - say you want to process N number of files and allow the user to precede each with a -f flag. This is very simple for argparse, but I couldn't get it to work after spending hours on it with docopt. * complex CLIs with high usability requirements - it turns out that the documentation created by docopt is often very difficult to understand and non-optimal from a UI perspective. The fact that it's taking advantage of an ANSI standard for the CLI is not very helpful if almost nobody understands the standard. I'm sure I'll end up using it again in the future. But after two experiments I've discovered that the case against Argparse isn't the slamdunk it was described as: the doctopt codebase is no longer the tiny bit of code it started as, and has bloated significantly as it has been required to handle more edge cases. Meanwhile its functional gaps, limited documentation, poor help it creates make it just not worthwhile to me. Which means argparse wins for me - as long as I avoid its tarpits: namely conflict_handler, sub-parsers and formatter-classes.
That would be fair comment if the point of this collaboration wasn't entirely about coming up with a novel and intuitive solution to a problem that has defied standard GUI approaches. The point of our work is not to build a production interface, but to have an EXTREMELY flexible environment in which to rapidly sketch and implement non-standard controls and widgets, and then pass the experiments around for mutual examination. That's why I'm asking around for obscure or special-purpose GUI and gfx libraries.
I have completed the Flask tutorial (to-do lists). I am now re-doing the same on my own and learn more about CSS.
At it's heart, it's Yet Another Language to know and remember. I found it complicated troubleshooting, and made it more difficult to go back to old code and get up to speed. In addition, other people need to learn KV to debug my code, as opposed to being able to muddle through it in pure python. The troubleshooting is no small task, as over half the examples that ship with Kivy don't work, and even duplicating a working example was no guarantee that it would work in your script. When I got something working in Python, it worked and kept working. I kept trying to go back to KV, but the most I got working was a loader script to replace the default textures on a slider knob. I 100% agree that the pure python script was much larger and less clean, but in the end I had a lot less headaches than when I worked with even simple KV scripts. I'm not a python expert, I've only been doing daily code in python for half a year, and my Kivy work was 2-3 months ago. Maybe I'd find it easier now. I still find it annoying that for every item of documentation, it doesn't show both the KV and python styles. That would have helped immensely with me trying to use KV.
Thanks for the examples. I'm particularly surprised that it wouldn't have support for multiple identical parameters (I haven't looked into the library enough to see if there's some way to do that). I agree the validation problem is also a big one. I can't really imagine a good way to handle that without the checks yourself, which is certainly not elegant at all.
Yes but then the trick is memorizing all of them, which would be not so fun if there are a large number. He also can't do something like adding launch options, i.e. in his program he could do something like "chrome reddit.com" which he could parse out to open Chrome and navigate to reddit.
cannot add much, but I too have been working with Flask for about a week. I have some of the same questions and I look forward to some of the responses. 
Without even reading this, I'm going to say "Yes" because it's python. It can do anything!
If you have any specific questions that need answering, feel free to list them. Everything in my list works, and appears to work correctly, so I don't feel like a complete noob :) ..a whole day of the week was spent figuring how how to get websockets and regular URLs to work on the same server; someone should blog that.
Whoah, that's a lot of stuff to cover. From a glance I see a few things I'd do differently: * I'd go with Flask for "normal" Web stuff, Tornado/Twisted for "real-time" (e.g. WebSockets) stuff and nginx/varnish/haproxy for routing between the two. * If your app needs to issue HTTP requests to remote APIs, I'd ditch requests and use Tornado/Twisted instead. They're asynchronous by default which means they'll be able to handle large numbers of concurrent remote-API-calling requests. * Work on your target (i.e. the one you'll be using in production) DB - you'll be able to tweak DB settings earlier in development. * Integrating Beaker into Flask is a PITA (been there, done that) and I'd avoid it. Hell, I've ported Flask cookie-based sessions to Tornado once and it worked as a charm when sharing sessions between the two, * Frontend stuff is beyond me - I'm usually hiding myself behind nginx and don't give a damn about frontend devs and their magic ;). As far as the rest goes: * Each time I have to combine Flask and Tornado/Twisted I do config this way - both apps share a single common config file (carrying e.g. SQLAlchemy URL and handled by flask.Config) and both apps have separate config files which carry app-specific settings. While this may look dirty, I find it easier as I avoid hacking around differences in config files settings/conventions. * Best way to handle AJAX/JSON/WebSockets - the frameworks at hand have all the stuff you need to do it properly. * Jinja vs frontend templates - both have their uses and you should separate responsibilities based on your app. If you want to do a one-page app then I'd recommend dropping server-side templating. * If you use HTTPS you may worry about security less. Still, you have to protect your data. * I've done "API for my APIs" once. It was a nightmare, but the only reasonable way at the time. Bear in mind that you'll need to write **a lot** of glue code. * "internal REST api to get data from the ORM into more simple views" - I'm not sure I follow this one. * Where to do data crunching? We could talk about it for days over litres of beverages ;). All depends on the case at hand. * I generally prefer server-side input validation. Don't throw away frontend validation, though. Sometimes it's more reasonable to validate on both ends. * Signed cookies are reliable as long as you don't store any sensitive info, e.g. don't store the entire User model object (potentially leaking sensitive info). Store User.id in session cookie and fetch the User object from the DB when needed. * Server setup - lots of stuff to cover. I usually depend on a "real" admin ;). * Testing sessions is easy - just write a dumb endpoint that dumps the session (don't forget to disable it in production!). Testing cache is tricky, but doable - call an endpoint that uses the cache, validate the cache after receiving response, reset the cache. * Keeping projects in sync - I usually develop on local machine and update test/staging/production/whatever servers when I feel there's need to do it. * .pyc files shouldn't be used as security measure. They're merely there to speed up the app launch. * What are you overlooking - too much to predict at this point ;). Hope this helps. Good luck! 
The dilemma I have is to create virtenv per project or per project type. e.g. If I am doing scientific programming I do not need to reinstall the scipy stack over and over again so I just use that stack and edit the requirements. It would be alot nicer to create virtualenvs per project for namesapce reasons without having to reinstall the packages all over again. If a package is installed once and the interpreter does not change is it really necessary to reinstalling (adding bloat) packages into a new virtualenv? Is sumbolic linking of packages that difficult that no one is considering this? Not trying to be a nag on this but rather find out why a symbolic linking system might not work.
That shouldn't stop someone who wants to learn how to do something themselves.
wha?
I haven't seen any form (any input) validation library in your list. It's nice to have one. I'm personally using [flatland](http://discorporate.us/projects/flatland/) but I'm pretty sure there are some better stuff out there. It can help to separate your validation concerns in a separate module.
Can you really write a thousand lines of code a day? I'm not a real developer, but I do quite a bit of data analysis type stuff with python. In a typical 8-hour sit, I might be able to manage 2 or maybe 3 hundred lines of working code. Makes me wonder if I'm actually a bit dim...
Nice one, I'm majoring soon and this is probably going to be useful. I'm interested in learning from the more experienced ones
I have done just this, and this is my approach (though I haven't used python specifically).. Create a folder anywhere (I use c:\tools), add it to your PATH variable, and leverage that already existing win+R run command. You might need to fiddle with file associations and path extensions to allow you to run a python script straightaway from cmd. Make an 'open' script in that folder that runs commands based on the arguments passed to it. Like I said I have not used Python, rather cmd scripts and shortcuts. I believe that shortcuts pass arguments through pretty well.. I point a ssh shortcut to kitty and can run ssh root@server and it passes the args just fine. I personally don't like the idea of hijacking the built in keys... But that might just be me
If you just want the functionality, maybe check out http://www.bayden.com/slickrun/ If you're after the skillz, by all means do it. And post it here when you're done!
Append the folder you wish to run programs from to the PATH variable, separated by ';' example: &gt; PATH = C:\WINDOWS\System32;C:\Python27; This would allow you to run programs in those folders regardless of which folder you're currently CD'd into.
Some really great stuff. The only nitpick I have is that the requests library is very easy to do concurrency with, [using async.get()](http://docs.python-requests.org/en/v0.10.6/user/advanced/#asynchronous-requests). 
This is a fair point, but the OP wants to call remote APIs from within a Web app. In this case I generally lean towards Tornado/Twisted. Flask hosted be Gunicorn with gevent workers can do async I/O, but I find IOLoop/reactor apporach more stable under heavy loads. Nevertheless, your info about being able to make Requests async is interesting. Thanks for your comment.
For an example app that does exactly what OP wants, try [GNOME Do](http://cooperteam.net/).
[Here you go.](http://en.wikipedia.org/wiki/Time_complexity)
Someone please make a benchmark Tulip vs Gevent vs Tornado vs Bjoern. http://nichol.as/benchmark-of-python-web-servers This need to be updated.
ansible || saltstack ftw.
Right. I think that is what the commenter above intended. Somehow I think he was referring to Path as "environment variables". I'm afraid that the suggestion "The program you want to run has to be in an environment variables folder (google it)" isn't going to be much help to someone who googles for &lt;environment variables folder&gt; :-). "Path" was the bit of magic that he was missing. 
AutoHotKey is a fork from AutoIT (back in ~2003?) and his focussed more on Hotkeys. It's pretty awesome. Even just for that: http://www.autohotkey.com/docs/Hotstrings.htm
Wow, lots of questions! &gt; Input Validation? Client or server side? How do I do this correctly? Both. Client side to provide your users with a clean and responsive experience, and then server side to keep your data clean and secure. &gt; Fabric to deploy with a Git pull. We deploy using Jenkins. &gt;Knockout.js for client framework &gt; Bootstrap for styling &gt;JQuery and Underscore for DOM manipulation Any reason for that combination? Unless your doing some simple databinding, I find Knockout tends to feel pretty restrictive pretty fast. That being said, it's definitely easier to pick up for someone whose still starting out with front end development. Frameworks like Ember and Angular might be better, but YMMV. &gt; When to use Jinja and when to use Knockout...do I template in the variables, or pipe them to Javascript variables through AJAX requests? Depends on what you're going for: have you ruled out a single page application? If so, maybe have your static pages separated based on layout and overall function and handle the rest in JS. I'd answer more specifically, but you seem to be talking about something very specific without providing much else in terms of information.
B-but muh python 2 libraries 
If you're doing something relatively simple you might just use JSON. I recently had a case where I needed to pass a list as an argument between a couple of different scripts; I didn't want to get involved with something like pickling because my operation already involved a ton of reads/writes to disk (on a 5400 RPM drive). json.dumps and json.loads did exactly what I needed them to.
We thought it would help us with a few needs (e.g. horizontal scalability). Honestly, I'm beginning to think it was a huge mistake, but time will tell. 
...have more than likely already moved on. Move on with them.
I don't know if this is what he meant, but in Powershell you actually do refer to the environment variables as though they were in a folder: cd env: dir $env:path # show it $env:path += ";c:\app"
I hope I can delete some lines every day.
We use Fabric at work. I haven't taken a peak under the covers, but it appears to work.
I don't think so... The amount of downvotes trying to reason with python 2 developers to switch already
Thanks. Will do. It looks promising.
Yes. Check out pyHook. Just Google "pyHook keylogger" and modify the code. Start you python script at startup using .bat files (which can be scheduled to run at startup/login). Also, instead of using the .py extension use the .pyw extension (this runs without a command prompt popup). I did this with a python security script that runs on my laptop. I send it commands via email (screen cap, key log, audio record, get IP, take a webcam pic, etc) and it then sends the results to my phone via SMTP. This script is started at login by a .bat file once an internet connection is detected using another .bat file. 
It's kind of a hush-hush project, but everyone's answers have been great! Lots refactor in the coming days :)
Big fan.
I for one am looking forward to reading part 2 of this.
I've just spent more time looking into Amazon web products than I ever meant to. This should come in handy for an app that I'd like to develop. Just going to have to figure out how to test it locally before deploying. I also have to figure out how to program the damn thing. I'm so rusty/newb-ish. :/
On encrypted cookies: They're reliable until someone gets on your computer after you leave or sniffs you packets containing them. It's a good idea to have them expire reasonably periodically, especially for exceptionally security sensitive stuff.
Much of this stuff is far beyond anything I know about. However, on caching and sessions: Run in firefox, download and install firebug, hit F12, make requests. You you have to do some basic clicking around, but you can see both the requests firefox made and the responses the server gave. With caching and sessions the client can always just choose to not participate, so the only thing you can really control is whether the server is doing what it is supposed to/expected to. If you aren't getting cookies in your response, your request cookies are getting ignored, you are requesting unchanged pages with proper requests and getting 200 replys, or other kinds of request response mismatch stuff, then you know something is up. Server side caching I can't help with.
Trust me, Ruby on Rails is 500x more magical than Django. For the most part, if you want something to happen in Django, you're going to be typing at least one line of code to make it happen. But as with any framework, there will be a lot of things going on "under the hood", even in a microframework like Bottle or Flask. If you really want to know the gritty details, you can simply look at the framework's source code.
As a fellow Tornado lover, this is a great comment! I just have one small nit: &gt; Just learn how set_secure_cookie() works and you'll be fine/happy (it uses encrypted cookies which is best practices) The cookies are base64 encoded and signed but not *encrypted*. Just a small distinction, but it means that anybody with the cookie can read what you put in it but that they are safe from external tampering.
In regards to a lot of your deployment questions, I've found http://twelvefactor.net has some really solid recommendations. I used to shy away from the recommendation of using environment variables but I've recently embraced it and it's pretty easy.
I think that must be http://12factor.net/ ??
oops, yeah! I should probably check my links...
I'll probably get abused for suggesting this but I use Web2Py which gives out-of-the-box sesions, ajax, templating, front end jQuery and bootstrap, and IDE, version management, cache, DAL which is portable and auto-migrates. I could go on... Yes, I have worked on ground-up sites with a toolset like the one you have assembled. Most of the time deciding how to implement things which are common to all apps, such as distributed transactions and secure cookies, less time actually building. My 2c. Edit: spelling. 
Ok, wait, stop, breathe. Way too much stuff going on in your app. The key to this whole gig is to keep things simple, when you add so many different components you're just asking for trouble. Disclaimer: At the bottom of this post I'm going to talk about all the things I've deliberately removed and why you might want them back in. Don't get too excited early. **Lets start with the basics** Flask is good, use that. SQLAlchemy is fine, Requests is ok, Jinja2, Bootstrap, JQuery and Underscore fine. **For the rest** 1. Flask offers sessions, you don't need beaker. 2. Don't cache things, so remove Flask-Cache. 3. Avoid fancy client-side unless you have an actual, critical need for it that cannot be met reasonably by doing server-side. This gets rid of websockets as well, so we can dump Tornado entirely. Ok, now you're thinking "WTF, you don't know shit about my problem and you just dumped half the tech stack". Yes, I know, but you didn't specify and there's a good chance you can do without any of the above. The simplicity will win you enormous value initially. **Specific questions with simple answers** * Configuration. Just use the normal config setup that Flask gives you. * Sensitive data should never be in plain view. Passwords go in one direction, to the database via bcrypt or PBKDF2, there are no other ways. * HTTPS everything. Configure your web server to refuse or redirect everything to HTTPS. There is nothing else, only HTTPS, this includes all static assets. * Other encryption - Aside from passwords via bcrypt or PBKDF2, there is no other encryption because you are not sending anything else sensitive out of the server. The session cookie stores one thing and one thing only - the ID of the user it represents. * Internal REST interfaces etc - No, no and no. SQLAlchemy gives you a model, build your interface on that internal to python. * Input validation - WTForms or similar on the server side. * Testing sessions - Use the defaults, don't store anything but the user ID and you don't need to check it. **Now lets talk about some of the larger issues.** Firstly, you're trying to both build a web app and run a server at the same time. This isn't efficient, and they're very different skill sets. Look into Heroku or similar PAAS providers to see if someone else can do your operational work for you. Secondly there are some application problems you've kinda skipped over: logging, monitoring and exception handling. You may want to investigate services like Papertrail (logging), Pingdom (monitoring) and Errormator (exception and performance) to deal with this crap for you. In terms of deployment process, this will depend on how you finally decide to host. If you sensibly get a PAAS they will provide a deployment pattern for you, just build around that. Under no circumstances should you be editing live on the server. You also skipped over testing. I'm gonna assume that's because you've got it all handled and you don't need any help, but if it isn't, Flask offers you a nice test structure to work off. Finally, don't use SQLite, it's no good for this shit, not designed for it. Use PostgreSQL and you're set. **Ok, now we discuss the bits I pulled out and why** Lets talk about the big stuff first. I ripped out Websockets and client-side frameworks in one fell swoop without any consideration whatsoever for what you're building. There's a really simple reason for that: they're really hard, and they're rarely a win. They're rarely a win because for the most part people use them to build stuff you could have done just fine server-side. Sure it's a bit slower, not quite as fancy, but you could have done it and it would have served the purpose. They're really hard because they involve a level of interaction with the browser which is vastly less certain, and less supported, than the standard server mode. For example, Flask offers an elegant test harness for testing your application...server side. If you want to test ajax requests, dynamic client shit etc, it's no use to you anymore. You're going to have to build around selenium, deal with waiting for page renders, network latency, handling multiple active processes at the same time during tests, tracing errors through not just multiple code levels but the test harness, the browser, the network, the async server or sync server and then the database. Fancy client-side shit makes testing hard. Hard testing doesn't get done. No testing = bugs everywhere and sad unhappy users and programmers. The same logic applies to debugging. What else did I rip out? caching. I ripped out caching because with very rare exceptions caching should be the *last* thing you do, when you cannot eek out any more performance from your application, not the first thing you do. The reason for this is that getting caching right is rarely a win, and it's really hard. It's rarely a win because most apps never reach the level where the number of reads gives them a win on retrieving from cache. Keep in mind that a modern database can deliver thousands of queries a second without breaking a sweat if they're even moderately well indexed. It's really hard because caching adds coherency issues. When you cache data you can find yourself delivering the wrong stuff to the client, it's out of date, which leads to calculations based on the wrong information or parts of the page being more up to date than others. It can get many times worse depending on what you cache and how you flush it, with locking issues and poor choices of key. it also makes a lot of operations indeterminate, complicating your testing scenarios and making dealing with bug reports more difficult (What was cached at the time of the report? is that relevant?) Finally I ripped out a lot of stuff from the questions list because it isn't relevant if you simplify this way. I also didn't talk about the tools, they're fine, PyCharm works for me. **Finally** As a personal note, I totally understand the desire to use these fancy things and make the best app you can make, but as a professional web developer who has been doing this stuff for 17 years now I cannot impress upon you enough that web development is hard enough all by itself, you do not need to take the hard road for the challenge.
Which is now open-sourced at: https://github.com/yinwang0/pysonar2
Is there a reason you seem so excited about the new hotness?
&gt; Everyone has forgotten why monkey patching is bad, just that it is, Where are the tests for this? 
http://www.reddit.com/r/Python/comments/1ph6h3/video_tulip_async_io_for_python_3/
The pep plugin for sublime, lets you disable rule-by rule. So it only shows what you want.
Depends what you're writing. Don't feel dim. You've missed my point if you are still judging yourself by lines of code. It is honestly meaningless. If you were fleshing out a new GUI. It wouldn't be hard to bang out 1000 lines. It's all boiler plate and doesn't require much thought. Why then would that make the GUI programmer "better" than the guy who wrote 50 lines of dense, highly complex numerical algebra? It wouldn't.
Why would someone need ajax, jQuery and bootstrap support in a server side framework? That's client side stuff. Also an IDE? Yeah, I'm totally going to use a different development enviroment for every library.
Great answer, except for this part: &gt;If you're using jQuery + Bootstrap why would you choose KnockoutJS? Either choose KnockoutJS or jQuery + Boostrap. Because the former is a much more fully-featured framework for basically building your own custom equivalent to Bootstrap. Bootstrap provides some nice presets, and a few ui elements, but it's not, in any way, equivalent to Knockout. I don't see any overlap in functionalty at all. Oh and this should be clarified too: &gt;Also feel free to copy &amp; paste it's dependencies (notably, the RUDict() which I myself copied from somewhere else). They're all in that same file. But the code is licenced under AGPL, so you can't just copy and paste it. 
I just got started with it for a small project of mine. I'm not doing much with it (just running unit tests and copying files to a server), but I had it up and running in under 30 minutes. I can't vouch for any crazy corner cases, but for what I'm doing with it, it's flawless.
It slightly terrifies me that this is the only comment to mention PBKDF2. Just adding that [passlib](http://pythonhosted.org/passlib/new_app_quickstart.html) is an excellent library for dealing with password hashing if your framework doesn't do it for you.
I must emphasise this is a personal thing and it may not apply to everyone 1) Easy to work with when building flask apps 2) Vim keybinds 3) Excellent color scheme - Darcula (small things) 4) Inbuilt python debugger (I have even left pudb behind) 5) out of the box trello and Gist integration 
We use fabric to bootstrap an ansible install, although for our use case we could do the bootstrapping using makeself. http://megastep.org/makeself/ 
That's a problem with all cookies, encrypted or not. If you can sniff a cookie you can replay it.
Replay attacks are also possible. Always assume that any signed cookie you hand out may be given back to you at any point in the future, even if you believe you've deleted or overwritten it.
&gt; The session cookie stores one thing and one thing only - the ID of the user it represents. Storing the user's ID in a cookie is a potential security risk, a signed cookie *should* be fine but it still doesn't beat tracking sessions rather than users and then hitting the database to find out what user is logged into a given session. In the event a user's cookies were stolen you would be able to invalidate the session ID and the user can simply re-authenticate for a new one.
I'm sure you are just making a point (and a good one) but Flask's cookies are signed using the secret key config.
The event loop itself could work on Python 2 no problem, but the rest relies on yield from. You mean it could have been done not using that syntax?
except for the reliance on yield from
If someone "is on your computer" without your knowledge cookies are the least of your security problems.
It seems that HN is down itself.
The point I was trying to make with Bootstrap VS KnockoutJS (which I completely failed in making, apparently) is that Bootstrap is a pre-packaged set of (pretty) UI elements (and CSS) that you can hook into from your web app. KnockoutJS is built for making *your own* UI elements (among other capabilities) that can perform the same functions. So let's say I want to have a modal dialog that displays a table of data (from my server). I can use Bootstrap's [modal](http://getbootstrap.com/2.3.2/javascript.html#modals) and hookup functions to the content inside (Bootstrap's UI elements have plenty of hooks) *or* I could write my own modal (in HTML/CSS) and use KnockoutJS to keep the content inside in sync with what's on my server (or some other data source). Having said that, I know you can combine the two: Use a Bootstrap modal and fill it with content that's controlled via KnockoutJS. I guess I just don't see the point. Putting together UI elements like modals/dialogs/tables is not rocket science and you're going to want to customize the hell out of them anyway. So why not just use pure KnockoutJS? Why bother with Bootstrap at all?
You know, you're right (doh): They're not encrypted. They're signed using the server's `cookie_secret`. So a client could decode it but they wouldn't be able to modify it. So my other statement still holds true (thank goodness): &gt; If just one bit is off the whole cookie will fail validation and be scrapped. 
You're absolutely right. This is why SSL/TLS is so important. It's also why you need to ensure you're using secure cipher suites as well. I forget which is which but some popular/common ciphers don't regularly change keys which makes replay attacks possible--even though the traffic is encrypted. It's also a good idea to regularly rotate session identifiers or at least make them expire after a reasonable period (whatever is "reasonable" is subjective and really depends on the situation).
Gracias amigo!
Hate it.
Here's the follow-up: **Misc Notes** * How to keep your project in sync: Just write yourself a little rsync alias: alias syncproj='rsync -ave ssh . lightshadow@someserver:/path/to/project/directory/' Personally, I do all my development on a Linux workstation (Kubuntu) so I don't have to 'push' anything to test stuff. I just go to my browser and reload the page. Tornado's `--debug=True` command line option has it automatically reloading itself whenever you make a change to the code so a page reload is usually all that's necessary. There's some serious advantages to having your client and server running the same OS. * If PyCharm is giving you issues just use something else. I personally use kate (KDE Advanced Text Editor) with the Python plugins (pate). It automatically checks my code with pyflakes whenever I save which is awesome. The other advantage of Kate is the great built-in terminal that's always right there at the bottom of the view. I keep it running ipython for the most part. * Nobody distributes .pyc files. It's not a good idea as they're specific to the version of Python that was used to create them. Instead, if you want to keep your source (mostly) hidden just use something like [cxFreeze](http://cx-freeze.sourceforge.net/). I would argue that keeping your source code hidden doesn't really provide benefits that outweigh the negatives. Just because people can view your source doesn't mean that the code is "free". Businesses that copy code without permission *get caught*. They're just one whistleblower/disgruntled employee away from an expensive lawsuit/settlement where they have to pay *you* :) * Bitcoins: Their value fluctuates quite a lot but they appear to be becoming more and more accepted/used every day. If you're concerned about their value dropping just make your prices in USD and perform lookups of the current exchange rate before performing the transaction. Then when the transaction is complete use an exchange to convert the BTC back to USD. * Failing gracefully is easy with Tornado since it uses a fancy `stack_context` mechanism to ensure that exceptions don't crash the whole server. They merely get logged (often over and over again because of your bug, haha). Other than that "failing gracefully" is a huge topic in of itself. * What are you overlooking? The difficulties of dependencies. The more dependencies your app has the more difficult it will be to get it up and running on someone else's system. There's also a lot to be said about keeping your architecture as simple as possible. That's not always an option but it is a good idea to *try* to keep dependencies to a minimum. If you only need *that one function* from Framework X just copy *that one function* or make your own version of it. Just be sure that you check that the license allows copying and make a note of it in your code (a comment above the function/class itself is usually fine). If all else fails just email the author. I give people permission to use portions of my code all the time! * Logging is complicated but Python's logging module can handle pretty much any scenario. These days I like to keep separate log files for each *scope* (e.g. server transfer logs, user action logs, etc). I also like to [include JSON-encoded information](https://github.com/liftoff/GateOne/blob/master/gateone/golog.py#L49) (metadata) in the logs to give each line *context*. For example, if a user is logged in why *not* log their username with every log message they end up generating? As long as you stay consistent with your log format it will be easy to parse those log messages later and having that JSON metadata could be super duper useful. That's it. I believe I answered all the questions :)
&gt; it's an SSH wrapper with some useful bells and whistles. How does it differ from Paramiko?
If you need to use a proper configuration management framework then go with Ansible (or SaltStack, others), then Fabric is not the tool for your job. But if your primary requirement is just orchestration, Fabric is a better and lighter choice. From what I remember Ansible and Fabric both depend on wrappers around Paramiko module for remote control of nodes, so capability and stability for control is similar for both. The only question that remains is for you to answer. What you actually wanna achieve... Full Proof Configuration Management OR Remote System Orchestration for general work.
You should give a look to OpenStack-dev project "hacking" https://github.com/openstack-dev/hacking It's there mainly to keep a check on certain practice enforcement from developer end.
Silk Road 2.0. Got it :)
I store my database connection string (which includes the password) as an environment variable in the OS. The apps can get to it easily and you don't have to remember to change the settings when you migrate from dev to test to staging to prod. It also makes deploying to hosts like heroku pretty seamless. Finally, you don't have to worry about backing plaintext passwords out of your git repository! 20 def getConn(): 21 urlparse.uses_netloc.append("postgres") 22 url = urlparse.urlparse(os.environ["DATABASE_URL"]) 23 conn = psycopg2.connect( 24 database = url.path[1:], 25 user=url.username, 26 password=url.password, 27 host=url.hostname, 28 port=url.port 29 ) 
Awesome. Any volunteers to make a vim plugin?
Thank you very much guys
probably not because of this api. :p
`yield from` would like a word with you :p. Guido said in this that he wished that `yield from` made it into 2.7, but it didn't, so its &gt;= 3.3
Thank you! 
What is the significance of this over the single dispatch generic function annotation in the functools stdlib package? Other than function annotation (which are cool!)
If you're just trying to get a project site up and running, a simple self-signed HTTPS setup should be fine. However, since you mention that you're looking into security - doing HTTPS properly has some complexity to it that is not always obvious at first. [These guys](https://owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet) have some good advice on the more technical aspects. 
Take chances! Make mistakes! Get messy!
No pip install? What does it do over the current tools available? (pyflakes, pylint)
Yin Wang is awesome and his work on programming languages and type inference is super impressive. We've been using his PySonar (v1) to build a global index of Python code and it works far better than we or anyone would have expected, for a dynamic language. Here are some examples of what PySonar can do: * [Finding everywhere a function is used](https://sourcegraph.com/hg.python.org/cpython/symbols/python/Lib/logging/getLogger) * [Python stdlib, sorted by most-used functions](https://sourcegraph.com/hg.python.org/cpython) * [All usages of the Django URL render_to_response function](https://sourcegraph.com/github.com/django/django/symbols/python/django/shortcuts/render_to_response) * [All usages of the Flask @app.route decorator](https://sourcegraph.com/github.com/mitsuhiko/flask/symbols/python/flask/app/Flask/route) This is all done using PySonar v1-based static analysis on Python code. PySonar v2 is even better.
To make it installable with pip, it'd likely need to be ported away from Java. The blog post explains what it offers. Edit: same content, but removed the link.
Embed a javascript VM inside a C/C++ device driver with O/S provided hooks re-exported to JavaScript. It's not even that hard to picture. It would however be grossly inefficient and stupid.
&gt; Is there a reason you seem so excited about the new hotness? I don't get it, what do you mean? I am excited about working technology. Guido is the one pushing new hotness that nobody needs.
It's built on top of paramiko and has bells, whistles, and I think a kitchen sink. Joking aside, Fabric + cuisine is environment aware as well as making basic tasks like "is this packaged installed in aptitude", "build a virtualenv here if it doesn't exist", "execute this command with this CWD". Slightly more powerful is its integration with Jinja2 which allows for generating and deploying templated configuration files ( not really specific to config ). I use/used ansible and am switching over to salt stack BUT I don't see my company's use of Fabric being diminished as its still ideal for application deploys and a lot of simple tasks ( stop all workers on all worker servers ) along with adhoc mass queries like `fabric -R group_django -P -- '/srv/env/pip freeze | grep somepackage ` which would allow me to verify all machines have the same version of somepackage.
Thank you for such a great response -- I agree that I may have over complicated things a bit, and I think a lot of it stems from inexperience with the libraries. The only qualm I have is about the caching...I'm using it in the IOLoop to reduce my external API calls, that are basically PPR. The loop pulls the external data and caches it so when clients request the data it doesn't have to make another external call for every client. Maybe I'm cheap, but I'm trying to save my request credits :/
I wrote an encrypt and decrypt function using AES .. but it's hardly comprehensive. Thanks for the library suggestion :)
The only two values in my cookies are the user_id and session_secret. If the user_id is valid but the session_secret doesn't match the stored secret when the session was issued the whole transaction is rejected; and vice versa.
I love getting permission for stuff in writing :)
Have you tried running cProfile against both applications? It will probably give you a decent idea of what is eating the most time for each of them.
Thanks!
Yes, it should also be updated with a proper benchmark app, not a simple example. What everyone says (and I tend to believe in my own experience) is that when your app is non trivial all wsgi work almos the same.
haha, I know. I actually agree with you ~ I'm only using Tornado for its IOLoop and WebSockets .....and I guess HTTPServer. The Flask app runs as a Tornado server but then I can stick functions into the periodic callbacks. Plus, websockets were just one class that extend a tornado class. I've used tornado as the server before and it's incredibly fast.
&lt;.&lt; .... &gt;.&gt; .... o//
[Here is a basic demo](http://nbviewer.ipython.org/url/gist.github.com/jsvine/8f70fa7cde2cd247fad3/raw/3fdab5fc64ac01d013815a9c2530820f3e42523c/mplstyle-example-01.ipynb).
cProfile them on your machine since i get the same average of FPS with both frameworks . 
How does that prevent you from accomplishing your objectives?
will try profiling later. Can you try to keep increasing the number of squares until a noticeable drop in FPS? And when that drop occurs, which framework runs faster?
Do not use AES for password storage. For that matter, don't use anything else than PBKDF2, BCrypt, or Scrypt. Passlib is a good idea, and Werkzeug (which comes with Flask) also has something similar in its security module.
It's great but unfortunately in java, which is out of bounds for most python programmers (emacs, vim, textmate, sublime text, gedit, wingide and idle users). :(
Please supply a squares.png or the resolution. since just made one 64x64 greyscale one and it could heavily depend on the image resolution.
I used 16x16 red square. Made with paint.
Wait, since when did RES show blog posts as self posts?
https://code.google.com/p/pyglet/source/browse/#hg%2Ftests
&gt; The session cookie stores one thing and one thing only - the ID of the user it represents. The session cookie only stores a session id. On the server, there is a db table that relates that session id with a user id.
Well it has worked with twitter for a while, looks like they expanded it to tumblr (which sort of makes sense... just not in this case) It's more that tumblr is a social network than a blogging platform.
Very interesting work, but it'd be nice if the title mentioned it was recently open sourced. The post itself is from 2010, so people who heard of PySonar then may not realize why this is being posted now.
This is true if you're using database-backed sessions, default Flask ones don't. I completely agree with you btw, but to add that would be to complicate a picture I was trying to make simpler.
That'd be one of the exceptions :) that's an entirely appropriate time to cache a response.
They use different backends, which use different graphical subsystems. What are you running the test on? You might just have a crappy GPU which doesn't support the methods OpenGL (pyglet) wants to use, so it falls back onto crappier ones, whereas SDL (pygame) would fall back to different methods. Contrary to popular belief, both SDL and OpenGL have hardware accelerated graphics modes. However, pygame doesn't use it by default, and depending on your GPU and CPU, it can be faster that way.
The user's session secret, not the server instance. Sorry for the ambiguity.
I use Fabric only for automating small, quick tasks that need to run remotely. For anything even remotely complicated I use Ansible. Ansible is faster and the playbooks are simple text files describing each stuff. It's much easier to trace what's happening and debug issues with certain hosts. Fabric quickly becomes a nightmare to maintain for complex deployments and configurations because it wasn't really built for that.
Code? Just showing the website is totally pointless in a programming related subreddit like this one.
I'm just getting my feet wet with flask mysel, lots to think about here! Can you elaborate on this part? &gt;Internal REST interfaces etc - No, no and no. SQLAlchemy gives you a model, build your interface on that internal to python. I'm not sure I follow the concept of an internal rest interface, is the idea that you would actually have your app make REST calls against itself to pass data around? Is that a pattern? What's the benefit? Also, you seem well informed on this stuff. Outside of /r/python where do you go to stay up to date?
I don't insist. I was just pointing out. You can make such a website in any language and any framework. The interesting part is *how* you did it with Flask (because you explicitly said you used it). But you ~~didn't~~ still don't provide the code. So what was the intention of posting your link?
The intention was to provide a web service for a common task + I provided a Python code that demonstrates how you can call it from your own script.
This is pretty neat. I just started using pandas to do data analysis but I usually export the data to excel to do finalization and graphing since the matplotlib graphs are quite ugly.
Generally even the craziest REST people would normally not have the app call itself to pass data around, but it's not uncommon for people to have this sequence of thoughts: * The interface to my data store / internal service should have validation and things * I might want to have lots of different simple processes interacting with it * They should do this consistently * Therefore I should have an interface to it * I think I'll make it a REST app of its own Now, in a big federated architecture there is some logic to this. When you have a loose coupling between the teams developing components, both in space and time, having firm validated interfaces to common services is a definite Yes. However a REST interface comes with a number of downsides. Four of those are critical in this case: 1. Interfaces must be very carefully designed to ensure the transmission not only of the data required, but the intent behind it. This is Hard, and does not adapt well to a changing environment. This applies regardless of whether it's REST or not, but the issue is enormously complicated by... 2. Interfaces are concrete. That is, in a similar way to concrete, they're easy to pour into place, but very difficult to change. When code is difficult to change, developers typically do the bare minimum required and this leads rapidly to the abuse of the interface. 3. REST interfaces are limited. An in-program interface can return control or generate an error in any number of ways, it can use callbacks, yield generators, return opaque objects, raise exceptions or look up registered services. A REST interface can do some of those things, usually poorly and inefficiently. 4. Finally, remote interfaces are hard to debug. Once you remove code from the current context of your program, pretty much all your tool support goes out the window. Some REST advocates have pushed the network-based visibility of the protocol as a win but I've never been sure how that could be better than having the interface in-process and simply using a debugger that can show me the entire stack in one go. So in the case where you do not have a loose coupling between teams developing against the API, using REST for it has serious downsides, and no upsides. Thus my advice never to do it. With regard to staying well informed, I keep track of all the new stuff happening using a combination of popurls.com (the pinboard feed is particularlly good), IRC (some freenode channels, #pyramid is particularly good if you're ok with strong opinions, some private) and otherwise from specific problem solving I'm doing myself. Much of the technical stuff I find ends up on https://pinboard.in/u:phirate 
the rough way to tackle this is to * draw the menu somewhere in your code * detect on-click events * figure out if the click was on your menu and where. (use the mouse coordinates provided by pygame)
Are you asking how to run a python file? Sorry, it seems kind of confusing based on the post.
Since I have to go... I'll add this, I typed this before I made my other post. I'm not exactly sure what you're asking. If you're asking how to run a python program, you can download the web installer from their site. After you install it, ADD IT TO YOUR PATH, go to control panel, system, advanced system settings, environment variables, scroll down and go to Path. Add a ';C:\Python33' or ';C:\Python27', depending on your version. After this, open the command prompt and type in 'python', if it opens the interpreter it worked. So exit out of the interpreter by CTRL+Z and then change directories to your python file. 'dir' will show that directory's contents and 'cd {directory}' will change directory to that directory. When you're in the directory of the Python file, type python pythonfile.py and that should run it.
So ultimately this isn't Python-based sandboxing but using a Linux sandboxing features from Python.
I understand what you are talking about here but it seems to me there would be an easier way. I have checked through the documentation and looked at a few other libraries but I just don't see anything. Maybe I am not considering the right logical solution behind this.
This reminds me of my final project in my grad OpSys class. We created a per-process syscall table and enabled a process to patch its own table. The table would be inherited when forked, so the parent process could create a sandboxed child process. We also allowed replacing syscalls with custom handlers added via kernel module. Our demo program replaced the standard write call with one that converted everything to uppercase. If you then used it to fork a shell process, it was kind of like using an old school command line. It sounds like seccomp is a much more reasonable and limited way of achieving the most important feature (sandboxing), without the extra bells and whistles associated with our school project.
**Update:** I've added another web service that extracts all images from a web page ([see here](https://ancient-crag-7938.herokuapp.com/all_images)).
if you want to do it somewhat easier you make a class that tackles all three for you, that way adding more buttons is relatively cheap. another solution would be to find a GUI library that plays nice with pygame.
As compared to *Excel*, of all things??? You and I sure have different senses of style, man...
That's super cool. How does PySonar deal with runtime dynamic dispatch? e.g. class A(object): def foo(self): return 'hello' a=A() b='oo' c = getattr(a, 'f'+b, lambda: 3) Could PySonar find out what `c()` is?
Dispatching was definitely inspired by `singledispatch`. There are a few obvious advantages to `dispatching`: * Supports overloading on any combination of arguments, and because it uses annotations, they are checked as both positional and keyword arguments. * `singledispatch` only supports matching on type. `dispatching` allows for dispatching by type, unary predicate, or value comparison. * `dispatching` supports Python 3.3, and I'm going to be adding support for Python 3.2 via the [`funcsigs`](https://pypi.python.org/pypi/funcsigs) module. `singledispatch`is only in the stdlib of Python 3.4. * Because `dispatching` uses annotations, and not only the first positional argument, it can be applied to class methods as well as standalone functions. In fairness, here are the advantages to `singledispatch`: * Doesn't use any fancy Python 3 features (like annotations), and so can (and has) been easily [ported](https://pypi.python.org/pypi/singledispatch) to Python 2.6+. * Currently supports a `dispatch` attribute, which looks up which function will be called for a given type^(1). My library doesn't currently have any such functionality. * There's currently no way to retrieve a particular original function in `dispatching`^(1). There are a few other things to note, that aren't clear advantages for one or the other: * `singledispatch`'s `register` decorator returns the original function, and requires you to call the original `singledispatch` method to get the dispatch behavior. `DispatchGroup.dispatch` decorator returns a wrapper, so that calling any of the registered methods triggers a dispatched call, and any of the registered functions can be used to register additional function. * `dispatch` uses simple, ordered matching. The first function that matches the type signature will be called. Because `singledispatch` only selects on the type of a single argument, it has a more elaborate matching algorithm, based on the argument's `mro`. ^(1) this is on my todo list.
Isn't this only one style, currently?
I actually don't know if PySonar 1 or 2 happens to have the rules that would allow it to do that, but that particular example is definitely doable statically. If you perform constant folding, then you have c = getattr(a, 'foo', lambda: 3) and then you can have a rule to handle getattr (which would know that a.foo exists and discard the default `lambda: 3`). Where it gets sketchy is when there's ambiguity. If you want to test it, you could try making a new GitHub repo and then accessing it via Sourcegraph (wait a minute for it to process after you first open it) to see if PySonar does handle that. I'd guess not. But feel free to play around and try to test the limits of PySonar's type inference on Sourcegraph. :)
while it's a good topic to practice python, but it's a bad thread for this subreddit. It's ok for these kind of quesion pop up sometimes, but it's a disaster if these kept flux in.
It was just an oversight. We get pinged all the time by people with requests for packages, and the Anaconda and conda build team consists of 1 (very talented) guy, who also has other things on his plate. :-) We put a huge ton of mostly invisible effort into building and maintaining these binary packages and a high-quality installer on Windows, because we truly care about the adoption and widespread use of the Python stack in scientific and data analysis. We would not intentionally subvert that primary mission or cripple it in any way. Besides, IOPro's main appeal at this point is on the memory and compute efficiency side of things - not Excel access.
How about doing your homework yourself? You don't learn when somebody else does it.
If you're going to ask people to do your homework: 1) Don't do it at the last minute 2) **If you are about to ask a question, please consider r/learnpython** 3) Ask general questions instead of asking for a solution you can turn in (for example: "How can you tell if a string has more than one word in it?")
1. okay, but its not homework, just practice problems, that im trying to learn. 2. okay new to reddit sorta, and just searched python. 3. sorry dont really know python lingo yet. just started my first course ever. i just said before 11 because i was planning on going to bed early tonight.
Seems like it should would be able to, from there it looks quite easy to to collapse and trace. I've written a compiler myself but not necessarily a live analyzer that stores states as the user edits code, so I imagine there's much logic to efficiently perform path tracing with intervention of the editing code.
quickstart: http://tmuxp.readthedocs.org/en/latest/quickstart.html examples: http://tmuxp.readthedocs.org/en/latest/examples.html background: Learning python and teamocil / tmuxinator didn't do what I wanted. There was nothing as close for [python yet](https://github.com/wraithan/pytmux/issues/11). I took a fresh approach, instead of looking into teamocil and tmuxinator, I tried to make tmux panes, windows and sessions into an ORM. tmuxp utilizes 'pane_id', 'window_id' and 'session_id' (introduced in 1.8) to create a pythonic [api](http://tmuxp.readthedocs.org/en/latest/api.html) of the server, sessions, windows, and panes. The [tests](https://github.com/tony/tmuxp/tree/master/tmuxp/testsuite) are written against a real tmux server, here is the [travis file](http://tmuxp.readthedocs.org/en/latest/developing.html#travis-ci). Currently it runs against 1.8 and the latest git. Freezing sessions: $ tmuxp freeze sessionname can freeze a session into YAML or JSON. There is a lot of room for optimization and fixing here, there really is no such thing as perfect freeze - but it can definitely bootstrap a configuration. Converting sessions to and from JSON and YAML: $ tmuxp convert &lt;filename&gt; tmuxp will offer to translate json to yaml, and yaml to json. Import sessions from teamocil / tmuxinator: $ tmuxp import teamocil &lt;filename&gt; $ tmuxp import tmuxinator &lt;filename&gt; 
Yes constants could be folded, however `'oo'` as an example here could come from anywhere, maybe some complex evaluation that gradually gets you `'oo'` as a result.
Thanks for your comment. I am sorry for the formatting error. I will fix it. Don't get personal if you don't know me. I will try to improve myself. This is not the first time I am writing a blog. I have written for IBM DeveloperWorks , Developer.com and many other. This might be a bad blog according to you but saying I am bad developer is too much. You should better mind your language. Help improve others rather than saying rubbish things.
yeah, people on the internet are going to be jerks. you should probably know that by now... get over it. you've got a job w/ IBM, RedHat, whatever, and mr. internet toughguy probably has taken one CS class at community college.
Yes I agree with you. But I found it to be extreme.
Internet is a bitch. Many people, frustrated because of things not related to you in any way, go onto the internet and whine about something, just to let off some steam. Or someone wants to prove their really, really smart, and don't know any other way than to bash someone else. Sadly, it's a simple continuation of childhood bullying, the principles are the same. What can you do about it? Be polite, ask them to do the same, or else ignore. If someone has a valid point and wants to help you, he should be a gentleman and explain what he thinks you're doing wrong, not shout out that you're bad and should know better.
Hey man - I ran a blog for a while and had the odd jerk having a go at my style. I say think of the silent majority that like your work and visit your site regularly eagerly awaiting an update or a new blog post. Think of this people not the vocal minority who's opinions carry little weight.
I was about to buy this thing, and stopped. Is there a good reason why this can't be made available for OSX 10.7.x? I'll get around to upgrading eventually, no doubt, but it would be nice if I could use your product now. It looks very promising. 
I didn't get personal. And I didn't say you are a bad developer. I didn't because I neither know you as a person nor as a developer. I got to know you as a blogger/writer. And I was criticizing only that. I guess I should rephrase what I said or explain it. I meant to say that I expected more from a developer with 8 years experience. I didn't mean to judge you as a developer based on what I've read. And I was pointing out only one issue I had with your text. There are more, and maybe I can do a full review after work today.
No problem. I found your comment very harsh. May be blog didn't met your expectation and thats fine but saying how can I work for RedHat without knowing me and my development skills is not right. I am trying to learn something everyday and blogging about that. I am not trying to be perfect. I could have explained code more or talked about advance features of Flask. But I avoided that because I was reviewing a book and didn't want to share all the information I read in book. My only goal is to learn and share.
&gt; [...] but saying how can I work for RedHat without knowing me and my development skills is not right. Sorry, I didn't mean to say that. That's a misunderstanding. It was to two things combined with an *and*, not a chain of causation. So I was **not** implying something like *"How can this guy even work for RedHat??"*. I was simply listing two things I know about you.
I will try to do better job next time. I would like to hear what you expected from blog.
as an independent Mac developer I would never start a new software project still supporting an OS X version lower than the most current version (i.e. Mavericks). When you start supporting an old OS users will expect you to continue supporting it. With Apple's rapid release cycles and steadily improving API's it becomes a big burden to be limited to using the old stuff. Also it lowers the overall user experience for all users because new stuff (e.g. popovers, view based tableviews etc.) can not be used without much trouble Sure if you are in a big company you have to support older operating systems, but as an independent developer you don't have to. You may slightly limit the potential market for your app, but that's nothing compared to the development and testing effort necessary to support older operating systems. Also now that OS X Mavericks is free...
That's a good catch, thank you. I will -2 and -8 tomorrow (8pm by me now) and post back when it's available to test. In the interim if possible, if session loading works, does detaching and reattaching `tmux -2 attach` work? (trying to verify if -2 is a client or server level argument)
This looks really awesome A "tmux session manager", for lack of a better term, has become an integral part of my workflow for quite some time now. I've tried both teamocil and tmuxinator and settled on tmuxinator for reasons I can't really recall right now (it was some time ago), but there were always a few things that tmuxinator didn't do (or did differently than I'd like). I've thought of contributing to it, but as soon as I saw erb files generating shell scripts I just ran away. I also considered writing my own in python, but I never got around to it. I took a look through tmuxp's code and this is pretty much exactly what I wanted to write myself. The ORM makes it look easy to contribute to it (even though I thing it's misnamed) and, as far as I can tell, tmuxp already covers most of my gripes with tmuxinator out of the box. The only thing that didn't quite work for me is the converter, but my config files are pretty small, so I can just rewrite them. Thanks for this project and great work! PS. You might want to consider splitting the ORM part in a separate package. I can see it being useful independently for interfacing with tmux.
Agree, can only see [this one] (https://github.com/jsvine/mplstyle/blob/master/mplstyle/styles/simple.py). I think that having a sensible and nice looking default style would be great, usually dealing with stuff like ticklabels and stuff. I don't usually want to be changing things myself, the default should be good enough
Thank you for the feedback, I am very grateful, it means so much to me man. 1. A copy of the config being converted and the expected / desired output could help me improve the converter. 2. I will look investigate decoupling the CLI from the ORM into separate pypi packages. This seems appropriate for the future and fairly easy to do at this stage.
Cool, but fails on a space in the project name: Using "Hello World" for example: &gt; (Pdb) python: can't open file '/Users/josh/Desktop/Hello': [Errno 2] No such file or directory &gt; Exit status: 512 It also fails when manually changing "Command" from: &gt; $(PROJECT_SOURCE_DIR)/main.py to &gt; /Users/josh/Desktop/Hello\ World/source/main.py
This looks really, really interesting! Can't wait to play with it. Thank you!
Developer of Exedore here. Thanks for the bug report. I fixed this issue for the next rev :). Edit: fixed in 0.1.2. Now available.
Yeah, it's unlikely to handle the case where it can't statically determine the attr name through constant folding alone. But if such a trick appeared in a common library, and there were no workarounds, we would probably try to make it handle it.
ah okay - sounds good. So conda doesn't just hook into PyPI by default? That must be time consuming!
I'm interested to see how [Laravel](http://laravel.com/) performs.
Looks good. Is there going to be a Mac App Store version?
me too
The standard suggestion is a program that generates and suggests project ideas. But since that's cliche, you could go a step further and create a program that generates programs that suggest ideas - you could even get into genetic programming to make them compete, evolving towards the ultimate idea suggestion algorithm!
Most of us have the opposite problem: too many project ideas and not enough time to implement them. http://www.dreamincode.net/forums/topic/78802-martyr2s-mega-project-ideas-list/
Actually, a program that looks at your reddit history and suggests relevant project ideas would be pretty cool.
No. This is not a science benchmark. You can't compare Django vs. Express if you've got confounding variables like using different data stores. https://speakerdeck.com/alex/benchmarking
he could use https://github.com/mapbox/node-sqlite3 and test both setups with sqlite :memory:, that'll be a little less skewed.
awesome thanks for the help, i got it !
thank you :)
What is wxPython Phoenix? is it a subproject of wxPython for python3 ?
this website does a much more thorough job of benchmarking the various frameworks. http://www.techempower.com/benchmarks/
Your advice may make sense for small backends, but for larger ones, the importance of loose coupling among many systems begins to dominate. Even there, inside individual services, your advice to use the language tools is reasonable, but once you get to a larger federation of services, it begins to break down. For reference, read this: http://apievangelist.com/2012/01/12/the-secret-to-amazons-success-internal-apis/
It is the newest version of wxPython, codname "Phoenix" because it is getting a major overhaul and will be "reborn" like the mythical Phoenix was. One feature is that it will be compatible with Python 3. See this page for details: http://wiki.wxpython.org/ProjectPhoenix 
This looks really promising for an early release. I’ll definitely be keeping an eye on this. Are there any plans to integrate tools like pyflakes and a pep8 validator? One thing that completely threw me: No tooltip labels on the buttons. Something about the app was frustrating me and it took a while to work out why - I guess I take those tooltips for granted when exploring a new app and I felt lost when they weren’t there.
Great suggestions, thanks! As evidenced by the extremely timid version number, I realize the app is light on features currently. I consider this first release a minimally viable product that I hope to improve.
Fleshlight statistics program?
Downloading now. But I have an unrelated gripe: why does every Mac App icon have to be tilted ever-so-slightly to the left?
Totally agree with your design decisions. Curious, though. You say you're inspired by Xcode, and Xcode is in the App Store. Does this mean that Apple is violating their own rules? 
Agreed 100%. Trying to create a safe, sandboxed version of Python is like trying to create a safe, sandboxed version of Java. Which you can see with Java applets...which have resulted in tens of millions of malware infections worldwide due to sandbox bypasses.
Thanks! Yes, a single-window Django IDE is my ultimate goal. :) 
Holy goodness, it's a Todd Ditchendorf joint. w00t. Pretty much all of his stuff is Instabuy for me. Keep doing the good work, Todd.
Yeah, you pretty much said ALL that.
&gt; but it packs some seriously power beneath the hood. Man, read your blog posts before your post them
Reading comprehension fail. Troll status: terrible.
Is it possible to do UI development with this method? I mean is it possible to build some kind of browsers that retreive remote programs from the web, and execute them in a secure way? The article says chromium, use that, so I expect the answer to be yes. If it it so, how would you handle access to local ressources (network, database) ? Is there any issue with GUI rendering, does it need special priviliege too?
You(?) forgot to close the file.
Try something like this: import urllib.request url = "http://search.twiter.com/search.json?q=obama" response = urllib.request.urlopen(url)
thanks, it worked!!now im getting different error.yay!! 
File will/should be closed when f is garbage collected after the function returns.
Pretty sure the comment you're replying to has: &gt; Now, in a big federated architecture there is some logic to this. When you have a loose coupling between the teams developing components, both in space and time, having firm validated interfaces to common services is a definite Yes. :)
Can we use network sockets and eval?
try making use of ipython when learning new APIs it's interactive and its awesome tab completion and built-in help will make it much easier for you
 import antigravity
I tried that URL and got this: &gt;{"errors": [{"message": "The Twitter REST API v1 is no longer active. Please migrate to API v1.1. https://dev.twitter.com/docs/api/1.1/overview", "code": 68}]} Looks like you need to update your search URL to newer, supported one.
I like the glowy graphs...
Not enough to make a point. "Cute", you might think. Not "oh I must hire this person IMMEDIATELY, the mastery of indentation beguiles me."
i would love to see the GUI looking more like the Xcode 5.
Does `-2` work in version 0.0.31? `tmuxp -2 load &lt;filename&gt;` Edit: also, another fix in v0.0.33. I'm still thinking of sure-fire way to integrate this into unit tests, if it doesn't work let me know.
Not guaranteed on alternative implementations of Python, is it? 
Yep, I think the new Twitter api is all oauth too.
[link](http://www.python-requests.org/en/latest/)
You can use [this](https://pypi.python.org/pypi/tweepy/) library.
But that is just sloppy programming when you can just use a context manager. This is his elevator pitch on the back of a business card, poor programming shouldn't be the first thing a programmer sees.
There is always a close before the file object i gc'd, but you can't be sure that will happen until interpreter shutdown in the degenerate case.
nice works! with so many products under your belt, how do you find time to sleep? :)
I second this. Even more highly recommend ipython notebook, makes it easier to chunk your code and see what your previous commands were.
These are really cool. Unfortunately my version would be like this: def mystery_function(**trade_secrets): """ Yes, I know it's different from what you got in Excel when you did it manually. You're welcome. """ # redacted due to NDA return result
That could be a fun social experiment. Print up some code that connects to a server and evals the text it gets back, then track how many people try it and send them back a message telling them how insane that is. After you install a keylogger and steal their identities, obviously.
I feel like the original way is best. A with statement would be bad since it would force an indentation layer. A close method is unnecessary since it will happen automatically, and won't add anything. The resource usage isn't worth thinking about as it's a premature optimisation.
Tell that to /proc/sys/fs/file-max
This is a read-only file object, so that doesn't matter. What *does* matter is that there is no guarantee the finalizer will run at *any* time prior to termination of the program. PyPy does not reference count, and is dependent on regular garbage collection. It makes no guarantees about when garbage collection will happen. Thus you should never rely on finalizers for anything. Similarly, never use `finally` or `with` blocks in generators unless you can statically prove the block will be exited in all code paths that enter it (because otherwise you're relying on the generator's finalizer to preserve the semantics of the block). Generally, that means not having a `yield` inside the `with` or corresponding `try`.
Looks could be done in fewer lines: def parse_fastq(filename): l=map(str.rstrip, open(filename)) return dict(zip(l[0::4], l[1::4])) You can further optimize the code using `izip`+`islice` or generator expression or py3k {} expression.
I'm probably not the target audience exactly (but I did purchase a license), but I was hoping that the bottom pane/window would be an active interpreter like the spyder IDE. So, /u/itod47, if you plan on adding more features, that would be one I would welcome a great deal!
Thanks. Yes, absolutely. I would like to add this.
That's right, there's no theming features at all for the syntax highlighting yet. That is currently a very high priority. It will be one of the next non-bug-fix updates to appear in the app. (Again, the version number should give you an idea of how complete I consider the app currently. Release early, release often!)
Awesome! If there is anything I can do to help (testing, attempting to break), let me know :)
Maybe I'm dating myself, but in general, it's a bad idea to let the GC manage things like file handles.
dude, if you're going to rely on that, I'm not taking your card. Why not use the *with* idiom, then?
Activity Monitor.app reports that Xcode 5 is not sandboxed.
 from __future__ import antigravity
Makes think this is a terrible idea because it can only showcase the mistakes they make and a snippet doesn't really convey anything positive or useful about the person.
I would like reddit bot help ! As in I want one and am learning! Of course this is five months old and i just saw that. 
https://en.wikipedia.org/wiki/FASTQ_format &gt;FASTQ format is a text-based format for storing both a biological sequence (usually nucleotide sequence) and its corresponding quality scores. Both the sequence letter and quality score are encoded with a single ASCII character for brevity. It was originally developed at the Wellcome Trust Sanger Institute to bundle a FASTA sequence and its quality data, but has recently become the de facto standard for storing the output of high throughput sequencing instruments such as the Illumina Genome Analyzer.[1] &gt;A FASTQ file containing a single sequence might look like this: @SEQ_ID GATTTGGGGTTCAAAGCAGTATCGATCAAATAGTAAATCCATTTGTTCAACTCACAGTTT + !''*((((***+))%%%++)(%%%%).1***-+*''))**55CCF&gt;&gt;&gt;&gt;&gt;&gt;CCCCCCC65 &gt;The character '!' represents the lowest quality while '~' is the highest. Here are the quality value characters in left-to-right increasing order of quality (ASCII): !"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ I'm curious who the hell thought it was a good idea to use this? Hey look, yet another data format that people can't read! It's not a multiple of 2 or 10 and breaks strings without escape characters. Awesome!
&gt; _`abcdefghijklmnopqrstuvwxyz{|}~
Thanks! Sorry, there's absolutely no theming features yet. This is a very high priority feature. As for the quotes bug, that's fixed in 0.1.2. Now available.
You tried small text bot, you tried.
Hey, thanks for the feedback and reference! I'm in the process of choosing which stack for my next project. So my objective was to find out how the stack performs, not only individual elements. I was really curious about what Node.js+MongoDB fuss is all about. Sure you can do speedtest like this: http://www.niwi.be/2013/02/18/python-node-http-performance/ It says Node outperforms Python by a factor of 2 but in my test case it doesn't. It's good to know that but it's not what I needed. So yeah, this isn't a science benchmark, but it's a real world performance test. Another result that I found it interesting is that when I try to get the first 10 posts, Express stack was ~3 times faster than Django stack. Switching to getting the last 10 rows, which is a more common case, they're going side-by-side.
Its actually a pretty brilliant idea. The quality scores line up perfectly with the nucleotides. For some reason, people hate binary formats but surely aren't going to read all 100 million reads that come off the machine. Plus text compresses really nice, especially when the majority of your characters are ACGTs. Everyone wins!
I love iPython, I've been using it for years. I tried switching to BPython a little while ago and I just couldn't get into it so I'm back on iPython. That being said, it really bothers me that you can't nest scope in it. It only comes up every so often, but it's super annoying when it does.
Strings of nucleotides are almost never going to be read by a human. 
After I read the blog I came to the comments to say exactly what you said...
&gt; Guido, in his Pycon keynote Q&amp;A, mentioned how it would be difficult for traditional web frameworks like Django to completely adapt to an event driven model The truth is, every WSGI based web framework can not do server push nor server side events. Gevent? That's a hack where you spawn a greenthread right before return In typical ["share-nothing" philosophy](https://docs.djangoproject.com/en/dev/faq/general/#does-django-scale) can not handle cross-request server side states. Let alone scaling server side states to multiple remote, distributed nodes. A more sophisticated scalable solution would be like Mongrel 2.
(This is the scariest thing I could think of, run it python file.py 1000)
You are probably using python3. In python3, you need to use urllib.request.urlopen, not urllib.urlopen. As you continue on to make additional parts of your app, you might check out Sourcegraph (https://sourcegraph.com). It's code search that also shows you usage examples to help you quickly figure out how to use functions. For instance, a lot of people wrap the call to urlopen in a try/except: https://sourcegraph.com/hg.python.org/cpython/symbols/python/Lib/urllib/urlopen Here's a link to the popular requests module that mic4ael suggested: https://sourcegraph.com/github.com/kennethreitz/requests/symbols/python/requests
This would be a good question to post over in /r/learnpython along with a sample of your code and the operating system you're using.
Assuming you're on Windows, start a command prompt, navigate to the folder your script is in then run `python [scriptname].py`. For example if I have a script called `TestScriptPleaseIgnore.py` on my desktop I would do this in the command prompt: `C:\Users\BinaryRockStar&gt; cd Desktop` `C:\Users\BinaryRockStar\Desktop&gt; python TestScriptPleaseIgnore.py` `... Your script's output will appear here ...` 
it probably does run. a python program will run in a matter of microseconds, so if you don't have any stopping points in your program, it can end faster than you can read it. 
&gt;How do I fix this so that I can run my program? You are running your program, it's just that it's finishing before you can see it. What you need to do is run the program in a [shell](http://en.wikipedia.org/wiki/Shell_(computing\)), such as command prompt or the python shell in [IDLE](http://www.python.org/getit/)
I don't think he can afford another indent level. He might be able to change the comment but the other line can't really be shortened without messing up the readability. Could he not simply get read of the cn = None line? The first branch is guaranteed to be hit before the second, right? Then add a close at the end.
Only on a business card is it a bad thing. Otherwise it should always be used.
I prefer your list comprehension, but his `dict(zip())` is more elegant in my opinion.
For anyone like me who had problems copy/pasting it due to the author useing tabs as opposed to spaces: from sys import argv as _ from time import time as __ yolo_ = chr(90+5) yolo__ = chr(99+10) yolo___ = chr(100-3) yolo____ = chr(210/2) yolo_____ = chr(55*2) ______yolo = yolo_+yolo_+yolo__+yolo___+yolo____+yolo_____+yolo_+yolo_ lol_ = False; False = True; True = lol_;___________33 = 0;___________one = 2;___________two = 1;___________yolo = ______yolo;_______________ = lambda ________________________, _________________________: ________________________.add(_________________________) __x = chr(32) __x_ = chr(116) __x__ = chr(105) __x___ = chr(109) __x____ = chr(101) __x_____ = chr(110) __x______ = chr(115) __x_______ = chr(99) __x________ = chr(111) __x_________ = chr(100) __x__________ = chr(58) ___x_ = chr(37) ___x__ = chr(115) _x = __x _x_ = __x_+__x__+__x___+__x____ _x__ = __x__+__x_____ _x___ = __x______+__x____+__x_______+__x________+__x_____+__x_________+__x______ _x____ = _x_+_x+_x__+_x+_x___+__x__________+_x+___x_ +___x__ def ___(____, _____): for ______ in _____: if not (____ == ______ or ____ % ______): return True _______________(_____, ____) return ____ def _______(____): _____ = set([2]) _________, __________ = ___________one, ___________33 while False: if ___(_________, _____): __________ += ___________two if __________ == ____: return _____ _________ += ___________two if __name__ == ___________yolo: ____________________ = __() print sorted(list(_______(int(_[1])))) print _x____ % (str(__() - ____________________)) 
&gt; It sounds like you expected this additional module to unify existing code and re-implement protocols for you? Well I was expecting for this module to not exist to start with an instead a gevent or eventlet like approach to be encouraged. &gt; Is there a magical adapter? Yes it is called monkeypatching. It sounds dirty and nasty but it is done in one place at the top of the file then can reuse any library that uses threads, socket, subprocesses anything you want. 
thank you both. 
Im loving Ipython, thankss!!
Wow thanks so much for this... sourcegraph seems very resourceful. 
i might end up using this, i've been trying to use other library but no success. 
&gt; it really bothers me that you can't nest scope in it Can you elaborate? IPython lets you do whatever you can do in Python, so I'm not sure what you mean... also, either IPython or ipython, please.(I'm an IPython developer). * Source: I'm an IPython developer.
It doesn't matter how big the indents are as long as they're consistent, right? So just go from 4 spaces to 3.
Or, track how many people view the file using curl/wget instead of running eval on it. I think urllib has a custom user agent, so that would be possible.
From previous experience with tmuxinator, attaching with -2 passed did not change it to 256 colour
Yeah, ditto. We're not exactly the target audience, perhaps, but I don't think it reflects that well. Separately, I also don't see the particular use of a FQ parser that leaves the @ character in the sequence ID :p
i recommend that you use requests. http://docs.python-requests.org/en/latest/index.html you dont have to but i personaly believe its better.
This is normal: http://docs.python.org/3/tutorial/floatingpoint.html
I've done some small scale apps with gevent-socketio in conjunction with django, but integration between the two was cumbersome, and I have pretty serious doubts about scalability (not much of an issue for my app that only needs to support a few hundred users). I'd be quite intrigued to see django come up with a standard way to do this. 
&gt; go from 4 spaces to 3. Blasphemy.
Am I the only one getting an index out of range at print sorted(list(_______(int(_[1])))) ??
dafuq is this
Well for a starter, it's not my code. As for not using the with statement, well depends on the interpreter version you need to support. With is in Cpython 2.6 (2.5 if importing from future.) I usually close my open files as soon as possible myself. I normally write the open statement followed by the close() call and then put my other code "in-between". An old habit from 14 years of perl. I use try…finally when writing code that can throw. For trivial scripts however, I tend to let the GC clean it up but then again, these scripts are mostly single use. If they're not single use then they get command-line options, basic error handling and all that other stuff that adds half an hour to the programming time and save hours when you reuse it down the line.
I agree for extensions that aren't pure Python (though openpyxl is pure Python). Windows is awful for building those extensions, I've found Linux/OS X to be pretty easy to manage. I'm hoping wheel format will start to make these things easier. Side note - what's the problem with using the binaries that packages provide themselves?
OP - I'm going to come at you from the business/entrepreneurial standpoint, because you're about to make the MASSIVE mistake I made 1.5 years ago and am still paying for to this day. If this is your own project, you need to take a step back and limit your scope by about tenfold. You are trying to take on too much, and you are setting yourself up for a massive amount of stress, non-progress, and hair loss. Go and research the word "MVP", or Minimum Viable Product. The /r/startups guys throw the phrase around a lot - understand what it really means. A great book to read is *Nail it, Then Scale It*. Also, *Getting Real* by the 37 Signals guys. If this is *not* your own project, then you need to limit the scope of your client so that you can get first things first. You need to decide what is REALLY needed to get v0.1 out the door and in front of users so you can get their REAL feedback. Do you need XYZ ridiculous feature to get a minimum feature set out the door? What about feature PDQ? I'm going to tell you that the answer is NO. Just get the MINIMUM viable product out. Simplify your requirements by 10x. Then consider simplifying by another 10x. After you have a minimum codebase out, and users express interest, then you can add incrementally via smart version control - it's a web app, not a shipped software product. Trust me. You don't want to go down this path and try to eat an entire elephant in one bite. One of the biggest mistakes of my life, and I don't wish it upon anyone. Start simple.
&gt; Well for a starter, it's not my code. I'm aware. I was speaking in general terms. I know you don't need to set an entire text harness or over-engineer for a simple script but open/close and other things are simply mandatory. IMO. Perhaps I'm more strict because my main language is c++ but it's just the general "finish what you do: if you open, close. If you allocate, deallocate) That's why i suggested the with idiom. If you (I'm speaking in general) tend to forget these things, make a habit of using it.
Why don't you ask this on Quora?
Nope, I am too. Python2.
At work so I can't ELI5 now, but here's some great info on floating points http://docs.python.org/3.3/tutorial/floatingpoint.html &gt; It’s important to realize that this is, in a real sense, an illusion: you’re simply rounding the display of the true machine value. &gt; &gt; One illusion may beget another. For example, since 0.1 is not exactly 1/10, summing three values of 0.1 may not yield exactly 0.3, either: &gt; &gt; &gt; .1 + .1 + .1 == .3 &gt; False &gt; Also, since the 0.1 cannot get any closer to the exact value of 1/10 and 0.3 cannot get any closer to the exact value of 3/10, then pre-rounding with round() function cannot help: &gt; &gt; &gt; round(.1, 1) + round(.1, 1) + round(.1, 1) == round(.3, 1) &gt; False &gt; Though the numbers cannot be made closer to their intended exact values, the round() function can be useful for post-rounding so that results with inexact values become comparable to one another: &gt; &gt; &gt; round(.1 + .1 + .1, 10) == round(.3, 10) &gt; True &gt; Binary floating-point arithmetic holds many surprises like this. The problem with “0.1” is explained in precise detail below, in the “Representation Error” section.
I just found out that if you do need exact decimal fractions, there is the [decimal module](http://docs.python.org/2/library/decimal.html) in the standard library.
Horstmann, Cay S. (2013-01-01). Python for Everyone (Page 439). Wiley. Kindle Edition. Did you know that the Kindle program automagically adds a citation to any text copied from a book? I didn't (until now). Edit - Holy carp. This post is in the top 5 of all time on /r/python. I... I don't even know how to react.
This will be a little difficult to explain like you're five because it involves some concepts that most five year olds won't be able to grasp, but I will do my best to keep it as clear as possible. The thing to remember while reading the text below is that the short answer is ultimately because of "inverse powers of two". Before we talk decimals let's talk integers, numbers without decimal points. The computer represents any integer you want to express as a binary number. This means that any integer you use in your program is a sum of powers of two. Representing 2 is very easy, because that's two to the first power (2^1). If you want to represent 3 the system uses 2^1 (2) + 2^0 (1). Ten (10) is 2^3 (8) + 2^1 (2). To represent a decimal value the system does a very similar thing. When dealing with decimals the system tries to add up inverse powers of two (1/2, 1/4, 1/8, 1/16, 1/32, ...) until it reaches the value you WANTED as closely as possible. Some numbers are exactly representable by inverse powers of two, such as 0.5. 0.5 is 5/10 which reduces to 1/2. Other numbers (most) are NOT exactly obtainable by adding inverse powers of two. That's why (0.1 + 0.1 + 0.1) == 0.3 yields a False equivalancy yet (0.25 + 0.25) == 0.5 will yield a True. For nitty gritty information on it look up IEEE 754 which is the standard for representing floating point values. http://en.wikipedia.org/wiki/IEEE_floating_point I hope that helps!
I'm tempted to buy that book, take a picture of that text, blow it up, and hang it on my wall.
He already is at 3 spaces.
I like [this one](http://www.pythonforbeginners.com/cheatsheet/python-mechanize-cheat-sheet/) because it separates the few main functions and has syntax highlighting
Rather than running it in the background, why don't you assign a keyboard shortcut to launch the script and handle everything beyond that yourself. I did something like this in ubuntu for controlling music playback. Check [this](https://gist.github.com/Bolt64/7268539) out.
I think I'll just drop [PEP 8](http://www.python.org/dev/peps/pep-0008/) here and leave quietly.
I couldn't agree more with your concerns. After working with python apps with huge dependency trees, I would say that the worst problem we have is that there's no way to depend on different versions of the same library in the same environment in python. So, virtualenv came along to allow users to create completely separate environments. We still can't depend on different versions of the same library with virtual environments, but at least we have one environment for each application we want to run, decreasing the chances of depending on the same library. The actually fix for this problem would be changing how the import system works to allow things like this: &gt;&gt;&gt; from library at 1.2 import symbol But in parallel, other parts of this ecosystem could definitely be improved. Curdling is an attempt to improve the find/build/dependency-resolution cycle but not limited to it. Anything that improves packaging in general is an important subject for Curdling. A glimpse of how virtualenv works https://github.com/clarete/curdling/issues/27#issuecomment-27327185 Thanks for your comments, glad to see exactly where we have the most urgent steps to improve
Imagine someone asked you to write down the following equation without using fractions: `1/3 + 1/3 + 1/3 = 1` You would have to write `0.33333 + 0.33333 + 0.33333 = 1` even though it isn't true in the strictest sense. You wanted to write `1/3` but you couldn't, so you wrote `0.33333`. If you later ask someone else whether this equation is correct, he will rightly answer no, since `0.33333 + 0.33333 + 0.33333 = 0.99999`. This is exactly what is happening here. When python sees `0.1` it can't represent it exactly, so it stores `0.100000000000000005`. When it sees `0.3` it stores `0.299999999999999988`. So when you later come back and ask if `0.100000000000000005 + 0.100000000000000005 + 0.100000000000000005 = 0.299999999999999988` it will correctly answer False. The only difference is that python is lying to you when it prints out the numbers. So, even though the number it stores is `0.100000000000000005` it will print `0.1` for your viewing pleasure! PS. This is not specific to python, since most programming languages work the same way. If you want exact decimal math you can use the `decimal` module.
Because no benefit can ever come from seeking a little guidance in an area you have little to no experience with. Nope. Not even a little bit. All forms of mentoring and guidance are absolutely useless. Centuries of empirical evidence must all be wrong about that one.
I get it running Python 2.5.
Dude. NSFW tag, PLEASE!
"Explain like I'm five"? When you were five, did you understand fractions at all?
Edit: It previously didn't write the output. Edit2: It now seems to fully conform to the requirements for the input/output, which is to use files for everything, not pipes. Takes censor file as argument 1, takes file as stdin, and write file to stdout. Edit3: Loads it into a set, even though it's not really required. Editwhatever: Made it work again. import sys t = open(sys.argv[1]).read() for c in set(open(sys.argv[2]).read().split()): t=t.replace(c,"*"*len(c)) open(sys.argv[3],"w").write(t) Fairly short, I have tested it (not very well) ~~Raw file size with 4 space indents is 149 bytes. Can anyone else do shorter?~~ Edit: That's for strict compliance of the requirements. Below program is the shortest I can do, using stdin and stdout to read and write the file. If you want to try to write a short program, I would try for the shortest possible, not the shortest that's compliant. from sys import * t = stdin.read() for c in open(argv[1]).read().split(): t=t.replace(c,"*"*len(c)) stdout.write(t) Edit: Used from sys import * to save 5 bytes: 120 bytes Edit: Only used one space to indent, and used print(t) because it's shorter: 108 bytes Edit: Removed the indent as you don't need it: 106 bytes from sys import * t=stdin.read() for c in open(argv[1]).read().split():t=t.replace(c,"*"*len(c)) print(t)
Like he's 5, guys. 0.1 is a called a floating point number, rather than a normal number like 3 which is an integer. Computers don't represent floating point numbers like the way you type them. So, a computer might represent 0.1 as 0.100000000000001 "by accident". It may just as likely be 0.099999999999999999 as well. With floating point numbers, you should *never* assume the number will be exactly what you think it should be. Therefore, you really shouldn't ever do x==y with floating point numbers. You shouldn't even do x&lt;y either. If you must do comparisons like that, add a little "epsilon": 0.000001. And continue to remember your answer still won't be perfect. So, for your example, best you could do is: 0.1+0.1+0.1 &gt;= (0.3-0.00001) and 0.1+0.1+0.1&lt;=(0.3+0.00001) If you absolutely must do comparisons of that sort, perhaps for currency calculations, then either use "fixed point" by converting to cents by int(round(100*MyPrice)) or use the Decimal type built into python.
No problem, I'm actually one of the creators of Sourcegraph, so let us know if you have any feedback!
Why shouldn't I use AES? Isn't it saltable, or?
Haven't looked too closely but there is a requirement to load the censored vocab into a set
Because for a computer 0.1 is not 1/10 but the closest approximation of 1/10 it can represent in base 2. In is the same in every programming language. You can store "1/10" in python with Decimal("0.1") and Decimal("0.1")+Decimal("0.1")+Decimal("0.1") == Decimal("0.3"). Every 5 years old knows that! ;-)
In his case, the set is a string. It gets converted to a list with split() making it an even more literal set.
It gives the game away with "places them in a set".
You have to give it a command line argument. (A number)
C++ == Rock and Roll?
Line 2 doesn't work. It should be t=open(sys.argv[1].read()) Nevertheless, it's a solution although it ignores the situation where the capitalization is different between the text and the dictionary (e.g., the dictionary might include "C++" but would miss "c++" in the text). My other comment is that shorter!=better, especially in a descriptive language like Python. However, you could save a few bytes by using "from sys import argv", and by putting multiple statements per line.
What *is* this doing? It returns near instantly for 1 and 2, but 3 computes for so long that I just kill it. I don't even want to think about how long 1000 would take. (I tried it too, but killed it early)
Yes but searching membership in a list requires a linear search each time. Set lookups are constant time.
Fixed it.
I'm doing 2, a strict one, and a one which is as short as I can make it. Feel free to try to make the short one shorter.
 t = sys.argv[1].read() What happens when you .read() straight from sys.argv? I thought .read() was a method that only worked on files. I tried this on the interactive python thingie and it gave me an error since `str` objects don't have that method.
Your solution doesn't build a set which is required by the prompt. Here's my go, shooting for brevity rather than readability or efficiency. It's your same approach though, which I think will be terser than any other approach in the python standard library. In my solution, you run it by providing two files on STDIN: first is the transformed input, second is the censoring list. from sys import stdin, stdout t = stdin.read() for w in set(l.split() for l in stdin): t = t.replace(w, "*"*len(w)) stdout.write(t) 
Ditto. I absorb this stuff. Too many learning materials offer only "here are the instructions on how to do such-and-such" without teaching **why**. Basic instructions don't stick around in the brain for long. I prefer to understand, *What* something is. *Why* something is. *Where/When* something is. *How* something is, etc. Planes, trains, automobiles and bicycles are all great for getting my butt from point A to point B. But if I'm only going down the block....
*++
If that wasn't bad enough, the chapter is called "Sets and Dictionaries"
You need to search in order to make the replacements. 
hah, I went to school with that guy's kid! he's written a bunch of Java books (used to work for Sun), didn't know he was writing Python books now.
Right tool for the job. You're not going to be able to run Python on a microcontroller.
To be fair you don't run c++ on a microcontroller
Are you on a potato? (Spoiler: it calculates N prime numbers). On my i5-3570k, I can generate 1,000 primes in 0.0353808403015 seconds.
By that reasoning, do you explicitly "del" local variables before returning from a function to save memory usage? The file object, just like any local variable, is reference counted and destroyed when its reference drops to 0, assuming a ref-counted version of Python, which the vast majority of Python usage. Are you opening 500 files one by one and assignment them to the same local? The previous will get closed as soon as assign the new file object. When should you explicitly free your resources? When you are writing to a file and passing a reference by its filename (e.g. you open a file for writing, write some stuff and call an external command -- oops, your file might not yet have been flushed.) 
I've got the same issue as Marky. 1 and 2 works fine, 3 stalls. Python version 2.7.2
Might be 2.7.2? I'm on 2.7.3. Weeeeeiiiirrrrdddd...
SEX
C++!
There's a great paper on this, it's called *What Every Computer Scientist Should Know About Floating-Point Arithmetic* by David Goldberg in one of the ACM publications in 1991. Sun/Oracle are nice enough to publish it as an appendix in their Numerical Computation Guide: http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html Bottom-line, floating point numbers are approximations because there's no finite sets of them. 
I see what you did there... 0.300000000000000004 is the correct IEEE-754 representation of 0.3 in a double precision float. Of course, you probably borrowed it from http://docs.python.org/2/tutorial/floatingpoint.html
Search is being done on text, not the list of censored words.
I was thinking of ways to make it into a one-liner all-generators last night, but couldn't come up with anything. Duplicating the iterator object. then zipping them, clever, perhaps too clever, but still. You could still use a dictionary comprehension, should have the same performance as a generator expression + `dict`. I also prefer unpacking to indexing. x = {k.rstrip('\n'): v.rstrip('\n')) for k, v, *_ in izip_longest(*([iter(open("data2.txt"))]*4))}
Aah... yes, of course. This is why we'd use non-reversible hashing functions, right?
Because some of them are dicks and don't realize that you sometimes need more than one tool. There is always this big language wars, and operatingsystem wars, motherboard wars, gpu wars, texteditor wars etc etc etc
It isn't. I fixed it.
C++ is _bad_ass.
Oh, I thought it was just the braces.
Would you believe I just googled "splot"?
Yes. Yes I should be.
Sure you do. C++ without exceptions can be quite nice for microcontroller work.
Not that people in the Python community have a high opinion of Java, but the distaste for C++ is because it revels in low-level details, complexity, and a myriad of ways to solve the same problem. All of those are in direct conflict with the Python aesthetic.
Hrm. I haven't tested this. import re badwords = set(open("badwords").readlines()) def replacer(match): candidate = match.group(1) if candidate in badwords: return "*" * len(candidate) else: return candidate out_text = re.sub("\b(.*?)\b", replacer, in_text) I'm not sure about backslash-bee matching a plus, for instance. I could split on whitespace, I guess.
you mean "sex and drugs", not "python and C++", right?
The illocution of "Explain like I'm five" obviously is a request for a simple explanation. Are you one of those people who only answer "Yes." when asked if they have the time?
In general, it's easy to get an open source codebase and start making changes. Calibre is on Github, which is the biggest code hosting platform for open source, so there are plenty of people who understand that. You could probably pay a programmer the going rate to make the changes you want. It's hard to judge how long it would take someone without knowing about that, but the Calibre developers may be able to give you an estimate of whether it's an afternoon's work or a month of work. There's not really any marketplace for this sort of service that I know of - again, asking on mailing lists connected to the project is the only thing I can suggest. The tricky question is whether the project accepts the changes. If they do, then you just pay a one time cost. If not, someone would have to keep reapplying the changes to later releases, so your father could get updated versions. That's easier than making the changes in the first place, but it still requires some technical skills. The smaller the changes, and the more you communicate with the project developers, the more likely they are to accept them.
Java!
Hate? Grouping something with sex and drugs is a compliment. While I appreciate the joke, it could have used better wording. Perhaps a list of brain diseases? 
at the risk of sounding stupid: What would you run on a micocontroller if not c/c++? Aren't for example Arduinos programmed in it?
Thanks, that's helpful information. 
I posted my brain disease comment before I clicked the link, but apparently I was quite right. At least I think being delusional could be chalked up to a disease. 
A cl***ic exercise.
In my experience you normally write regular c. Someone else commented that it is possible to do with c++. I just have never seen it/don't think its that common.
Here's mine: from sys import * c = open(argv[1]).read().split() for r in stdin: print reduce(lambda a, b: a.replace(b, '*' * len(b)), c, r) And has less pipe blockage than some of the other solutions.
v2 from sys import * with open(argv[1]) as f: global c c = f.read().split() for t in stdin: print reduce(lambda a, b:a.replace(b, '*' * len(b)), c, t)
Woops. &gt;.&gt;
Yes. There's no magic key that can invert the hash, except for the original input. The goal is to make sure it's extremely difficult to retrieve it when you only have the couple (salt,hash).
Ok, this is weird... I was also having the same problem and I think it is because I was using /u/AnkhMorporkian's version. When I used your version it worked :)
Like he's 5...
1. Here's about all I know: calibre uses dict.org as its dictionary. i.e. The dictionary isn't a local file. 2. The code that is used to interface with that dictionary is in tools/dictclient.py and, in my install of calibre, is 313 lines. Combined this says: If the dictionary is on dict.org and you want to use a different one, it's probably easy. If there isn't a suitable dictionary on dict.org, you'll need to extend the dictclient class (which shouldn't be too hard given the original is 300-ish lines) and make sure you can encode/store the dictionary choice parameters (can't tell if this is hard/easy until you look at the python code). 
Mobileread.com is the place where you want to ask about Calibre. There is an active support forum for the product and the lead developer and others are quite active. Calibre is a fairly large program so your best bet is a developer who is already familiar with the code. I think the real issue you are going to run into is legal. These dictionaries are surely under copyright law. Good luck with getting a publisher to let you make their dictionary available in an open source program. That would mean the open source program would have to know how to crack the DRM around the product or make it's content available in plain text. 
http://www.youtube.com/watch?v=jsW-atvN9y0#t=22
Yeah i know there are always programming language wars, but why particularly C++?
I do not possess the time, but I could tell you what it is.
"I don't know whats going on but I'm ready!" -Eezyville's penis
Just think of floating point numbers as approximations. You can't compare them without allowing for some slop. In your case, you'd want to check that 0.1+0.1+0.1 is really super close to 0.3, instead of exactly equal. Like this: abs((0.1+0.1+0.1) - 0.3) &lt; 0.00001
Yeah, it's "everyone gets a comment day", but seriously, thanks! This sub has some good guys. 
Yup, thank you. I knew this, heh, but somehow I forgot. Thanks though.
There are clearly defined rules how floating point numbers work. If you know them, you can rely on them. They're complicated, so you would need to spend some time learning them, but pretending as though their behaviour were completely arbitrary is nothing but FUD.
This version is somehow broken. I suspect you got the indention wrong somewhere. 
Yep. Ankhmorpork's version is broken.
Sex, drugs, and C++. Sounds like a birthday party in the making.
Often the 3D output will be frame limited to say 60fps. It may well be that pygame is now (although of course you will only see 60fps.
I'll be darned. Same thing here. Host and virtual machine exhibit same behavior. Original (github version) works. /u/AnkhMorporkian's version just consumes CPU cycles if argument &gt; 2.
- basic - .NET Micro Framework - SomeJavaVM - Oberon - anything that has been ported to the platform
But.... Cython??
Ruby*
Sure, why not? Maybe not on an 8-bit AVR, but a more beefy 32-bit ARM Cortex-M class device can run a bytecode interpreter for something like Python. I'm the project manager on Owl, a system that does exactly that. http://embeddedpython.org/
Of course there's clearly defined rules. What's your point? Do you know the rules? I'll answer that for you: you don't. No one does. Because no one has to. Even if you knew the rules, it still wouldn't make programming around them any more deterministic. Unless you're entering literals into your program, your floating point numbers will be coming from elsewhere, either user input or computed. You will not have the luxury of knowing whether it is 3.000000000001 or 2.9999999999 because you won't even know it is the number 3. And even if you *did* know the number was 3 neither you, me, nor anyone else will bother computing what it's exact nearest floating point representation is *because it is irrelevant*. So, again, what exactly are you getting at? That computers are *precise* and *deterministic*? Excellent insight. Didn't know that before. 
I run c++ on a microcontroller for my schools robotics. It's perhaps not the most optimal route, but it certainly works well.
You can absolutely use C++ for Arduino and it is a much smoother experience. Here is [one project](https://github.com/rogerskw/Theseus) I did that controls a robot and uses A* to find the shortest path in a maze. [Video of it in action](http://www.youtube.com/watch?v=1VXoluSUObM)
C is common as the exclusive language on many platforms. C compilers are significantly easier to create, though microcontroller producers will give you C++ compilers for an extra cost, though.
This isn't REST at all. You're manually defining the URL structure and you're sticking verbs in the URLs. [Read this](http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven).
looks like you're changing parts of words when they might not be entirely bad words e.g. sextuplets. You're going to then need regex so that it can figure out punctuation isn't part of a word
give pyinstaller a try, i believe it's more updated. You can also catch the pyinstaller guy at IRC #pyinstaller edit: py2exe....Christ...almost 5 years now since last modified
&gt; Or is there an easier more automated way of installing it and other libraries? Thankfully, yes. Once you know the tools, linux becomes far easier for python than Windows, imho... (there is a *lot* more support for linux in general). Try reading (or skimming, if you're in a rush) over the first few sections of [this](https://python-packaging-user-guide.readthedocs.org/en/latest/) guide. It will show you how to get started installing things in python-land. The guide as a whole isn't complete yet, but it is intended to become the official source of knowledge on python packaging and installation (e.g, numpy and scipy being packages). 
The funnier joke, imo, would have been: &gt; Write a "censor" program that first reads a file with "bad words" such as "\*\*\*", "\*\*\*\*\*", "\*\*\*", and so on, places them [...]
Many people have covered the representation of floating point numbers are sums of binary fractions pretty well. I'd like to add to your "also about 0.1+0.1=0.2" that seems to be missing from the comments so far. It is because the closest representation of 0.2 in IEEE-754 is exactly double the closest IEEE-754 representation of 0.1, but 0.3 is too far away from three times the IEEE-754 representation of 0.1, so a different representation is used that is closer to 0.3 but happens to actually be smaller than it. Running this: from decimal import Decimal print Decimal.from_float(0.1) print Decimal.from_float(0.2) print Decimal.from_float(0.3) prints: 0.1000000000000000055511151231257827021181583404541015625 0.200000000000000011102230246251565404236316680908203125 0.299999999999999988897769753748434595763683319091796875 Notice how the second line is exactly double the first line, but if we were to triple the first line it would be further away from 0.3 than the third line.
&gt;The truth is, **every WSGI based web framework** can not do server push nor server side events. i wish I could up vote this more. &gt;A more sophisticated scalable solution would be like Mongrel 2. yes agreed 
So many unnecessary "quotes"
&gt; Do you know the rules? I'll answer that for you: you don't. No one does. [This is a 23-page document](http://754r.ucbtest.org/standards/754.pdf), with relatively large fonts. It's not at all impossible to read and understand it all.
Because you need a massive amount of runtime support and metadata for the stack unwinding.
Ah, the Scunthorpe problem....
That might actually be funnier as the Scunthit problem, since there will only be one pass.
Check out [this[(http://stackoverflow.com/q/17528976/198633) and [this](http://stackoverflow.com/q/16675634/198633)
One thing that consistently works for me is: sudo python setup.py build install
awesome!! thanks for the tip ill give it a try! as for py2exe i just googled and grabbed the one that seemed easiest to use.... worked great for all my console based scripts, but def doesnt like easygui
There are several ways to work with the sandbox. When you have a central project file then you can use document-scoped bookmarks inside the project file for each .py source file. Another technique is to maintain a set of application level security-scoped bookmarks to each project directory. Use the standard open dialog to allow the user to specify which project directories may be accessed. I've implemented application-level bookmarks for my editor SciTE which is available through the App Store. Here's a page on the UI to this: http://www.scintilla.org/Sandbox.html
The thing is that the *other* major selling point of node.js is "full stack js", i.e. you get to use the same language on the server that you send off to the client. And only js can do that currently, at least without some truly awful emulation hacks. That said, I think I would still very much enjoy using this new thing.
If you think tulip's cool, wait and 'til you see PyParallel's async module ;-) It was born out of the same discussions on python-ideas. The kicker: it's actually does asynchronous I/O. Not single-threaded faux-async via non-blocking sockets and an I/O multiplexing method. The other kicker: it was also able to remove the GIL and have all cores executing threads concurrently. And I didn't even need to remove the GIL! ;-) You can read more about PyParallel [here](https://speakerdeck.com/trent/parallelizing-the-python-interpreter-an-alternate-approach-to-async). That's quite an old presentation though and is out of date. Luckily, I have a new one in the works, and will be presenting it at [PyData in NYC this Sunday](http://pydata.org/nyc2013/abstracts/#125). TL;DR check out PyParallel's [async.HttpServer implementation](http://hg.python.org/sandbox/trent/file/0e70a0caa1c0/Lib/async/http/server.py), that's actually async, and will exploit all cores, with no slowdown to single threaded code, no multiprocessing IPC overhead, and a faster code execution during parallel callbacks due to some unique side-effects of my thread-local memory management techniques.
Nobody suggested the best way to do this yet. I'm assuming you're using Windows, because CMD.EXE is a Windows program. Now, when you want to run a python script, here is what you do: * Go to the folder where the script is saved, or if it's on the desktop go to the desktop. * Make sure no files or folders are selected. * Hold down the shift key, and right click somewhere in the folder (but not on any files.) * Choose the hidden menu option, "open command window here." * Now you have a CMD window already in the same folder as the script you want to run. * Type the location of python.exe followed by your script name. This might look like C:\Python27\python.exe my_script.py or python my_script.py if you have the python install folder in your PATH (instructions [here](http://superuser.com/questions/143119/how-to-add-python-to-the-windows-path).) The reason you have to do this is because python scripts are not themselves executed. Instead, the python interpreter is launched, and if you provide it a script it will run it one line at a time. The reason you are seeing that behavior when you double-click the file is because the python installer associates the .py extension with python.exe. So it runs, but closes immediately afterwards. I would recommend that you change the association to be with your favorite text editor instead (right click -&gt; open with -&gt; find text editor executable -&gt; check "always do this for files of this type.") 
It would, that's true. But I've never had anyone from Scunthit Primary ring me to say they suddenly can't get any of their email. True story, alas. Oh, naive email filtering based on word blacklists, how I don't miss supporting you.
That makes sense! Thanks!
No, there are exceptions: you can't use exceptions.
DNA sequences are really long and unicode is twice the bits per character as ASCII. I don't think they're going for something you can read or where they even care about escape characters. It's going to be parsed by a machine anyway. The goal seems to be getting all the data (of which there's a ton) into the smallest file possible. Also according to [this](https://en.wikipedia.org/wiki/FASTQ_format#Encoding) it's up to 60 levels depending on the system. I suppose they just use the others either for future methods that may produce higher scores or just in case maybe. Edit: Although if no one is going to read it I don't know why they'd bother with a text format to begin with.
People seriously use .net on microcontrollers? What the fuck?
explain your magic!
Yes, it makes sense in some cases. Apparently it is so surprising that the "pythonistas" around here got mad at it. .netmf: * http://www.netmf.com/ java: * http://www.rtjcom.com/main.php?p=ovr * http://dmitry.gr/index.php?r=05.Projects&amp;proj=12.%20uJ%20-%20a%20micro%20JVM oberon: * http://www.astrobe.com/default.htm eLua: * http://www.eluaproject.net/
I hate WSGI. Why wasn't it just HTTP? fukn easy_stpd.
Yeah, this article is years old. Where did you find this article, and why is it news? Flask recently hit Version 1 IIRC, and this is very out of date.
in Python2.x module: datetime time logging urllib2? library: twisted others: unicode GIL
God, have some decency. 
I'm learning Python as my first "real" language. (I've done some HTML and Javascript before) And I plan on moving over to C++ afterwards. Why not be proficient in both?
If you're just learning, my recommendation is to get Anaconda. http://continuum.io/downloads That's Python with a package management system and all the scientific libraries both installed and integrated. You can do it yourself, but it's going to be a pain - and this is both faster and less error prone. 
[Just uploaded a much newer presentation](https://speakerdeck.com/trent/parallelizing-the-python-interpreter-the-quest-for-true-multi-core-concurrency)... enjoy!
I want to write a script that will generate something like this based on data I plan on collecting, but I have no idea what the name of the type of graphical representation I'm after is - and I haven't been able to find out. Basically where circles (nodes) of varying diameter (where size is based on a variable) are connected to each other based on some condition. I was hoping matplotlib or similar could be used, but I can't figure out the name of this type of graph or chart or what have you. I don't mind writing a solution myself in pygame or something, it would still be nice to know the name so that I can research about it. Thanks for the help Also if anyone has a link to a list of all of the different graphs/charts that matplotlib can put out that would be awesome, I thought there was one around on their website but I had trouble finding it.
Isn't this the Pentium thing? Why the never called Pentium 586?
You should look at networkx: http://networkx.github.io/
says you
He also wrote C++ books.
C. The Arduino's AVR, the ATmega MCUs, and PIC-based controllers are all usually done in C. I do have an OOPic that could compile Java and BASIC as well...But C is used most frequently because it's capable of being very lightweight and powerful if the developer knows how to optimize it. This is/was important because these small MCUs are slow and usually have very little memory. With the ARM Cortex processors becoming cheaper and more common, that stuff is going right out the window. While it's still important to write clean code, we're now working with processor speeds and memory that is a massive step up over the older stuff. For example, [you can buy this ODROID for $135](http://www.hardkernel.com/renewal_2011/products/prdt_info.php?g_code=G135235611947)...1.7 Ghz quad-core cpu, 2GB of RAM, on-board graphics and audio, USB 2, UART, etc. It's a full-fledged computer with roughly a 3.7"x3.7" footprint. This is a higher-end model, I've seen ARM development boards for as cheap as $12. Total game changer when you need something small for robotics and other size/power consumption sensitive projects.
It's called a shitty mess.
No, this is just how floats are supposed to work. The famous [Pentium bug](http://www.cs.earlham.edu/~dusko/cs63/fdiv.html) was discovered long after the brand name was introduced. The reason for coming up with 'Pentium' was that Intel wanted to prevent competitors from giving compatible CPUs similar names, but couldn't trademark '586'.
OMG you can actually open more then one file in one with block??
I think C++ is useful to know, it changes the way you think about the behavior of your variables/names/objects/whatever, and lets you look at the language (python) with a level of detail that's easy to miss when you only know python. I've been learning c++, and it has changed how I think about python, and given me a knowledge with which I can look deeper into how python works. That said, if I ever had to write something, if I could do it in python I would say "fuck you c++, I'm hanging with the homies tonight" in a heartbeat, because c++ is a bitch to write.
Click the OK ****on to continue.
Anyone know how this compares to selenium webdriver?
Mind your language, dude.
Sure, but even if you couldn't, you could just nest two blocks, or use stuff from contextlib. (I think this is a recent addition and that much of the point was to obsolete the contextlib stuff :) )
As an alternative to networkx, you can generate a DOT script from python and have [graphviz](http://www.graphviz.org/) handle graph layout and rendering. The twopi and circo layout models in particular focus on radial layouts like the ones from your example.
Nnnnooooooooo Never sudo pip anything.
Not with that attitude!
Version: 2.7x IDE: Komodo notebook: Ipython notebook learning?: "Learn python the hard way" - Zed Shaw 
Thanks, what are your opinions on Sublime Text? Also, what exactly is a notebook? edit: Thank you for the book recommendation!
I haven't tested it either, but 'C++' would need to be escaped using re.escape 
Coming from a C and Python background, C++ has (seems to have?) a lot of arcane syntax and ugly bits. C++ as it is usually written is not terribly elegant. That said, it's still orders of magnitude better than the verbose mess that is Java.
Codecademy.com
... THIS CHANGES EVERYTHING. The number of places I've used with open("readfile") as infile: with open("writefile", "w") as outfile: ... wow. `with open("readfile") as infile, open("writefile") as outfile:` That's brilliant. It makes sense that Python lets that happen, too.
Thank you!
OMG, dude, NSFL, please! 
TextMate 2, python 2.5, 2.6, but mostly 2.7, 3.3. TextMate is a nice extendible editor with a python bundle. Syntax highlighting works for everything except python 3 function annotations. The only thing I miss about sublime text is the keyboard shortcut to also select the next instance of the text you have currently selected, otherwise I prefer TextMate.
Thanks mate! I'll check out textmate. One question, what's the difference between versions of Python and why use more than one version? 
I think 2.5 and 2.6 came with my system, I never really use them. Most of my development was in 2.7 as 3.x didn't have all the modules I needed, but it does now so I'm checking it out! [edit] Apart from the upgrade to python 3, the differences are incremental. Python 3 is a large upgrade that breaks backwards compatibility in order to bring some key design changes. 
Ah, that makes much more sense! Thanks for the information. 
Well the biggest problem you have is that 95% servers trying to do these things are running on linux, not Windows. Unless you want to suggest everyone start buying Windows licenses as well as losing a great deal of support, your solution hardly caters to anyone even if it's technically grand. Nevertheless, afaik Guido has [made use](https://code.google.com/p/tulip/source/browse/overlapped.c) of Windows IOCP in tulip, not select. That's about the only C extension code he wrote for the project. So it seems you're being a bit disingenuous to the current situation in your slides. Does PyParallel work as performantly on linux sockets?
Search virtualenv and virtualenvwrapper right now! They're an absolute requirement for the preservation of your sanity. 
A million times this. Those are the only Python packages I install in the base system, and then I manage *everything* else from inside the virtualenv. That's a very common Python pattern. 
I love BBEdit. You can also use it's free alternative Text Wrangler. 
I didn't find this article I just pointed out the year of it. 
I use Vim, but that's a whole rabbit hole to go down. One of my former coworkers used Sublime Text for Python editing and it seemed hyper slick, ie good auto completion, good support for formatting etc. Things you can set up in Vim, but take long (and honestly I've never gotten the auto completion to work that well). Best of all their are Vim key bindings for Sublime :) You may also want to check out Pycharm if you want a full blown IDE. I don't have a lot of experience with it, but Idea (the IDE it's based on) is a solid product. For books, Mark Pilgrims Dive Into Python is excellent and freely available online. For installing more up to date versions of Python, I would recommend Homebrew, if you aren't already using it.
there were reasons. and wsgi was created by smart people to solve a problem. try implementing your own gateway interface and see how far you get. 
If you're learning to code and it is your first programming language, I would suggest that you not worry about the software you use to write the code and just focus on writing and understanding your code. Any text editor will do. If it has syntax highlighting, that is helpful, but TextEdit or Nano will be fine. You don't need auto completion, code validation or breakpoints right now - they will just hide the subtleties that you need to learn. All you need is Terminal.app and whatever version of Python you have installed already. I second the recommendation of Learn Python the Hard Way. Also, Google for 'Code like a Pythonista'.
Yes sorry, that was directed more towards OP and because your comment was relevant. I made it a reply...
&gt; Well the biggest problem you have is that 95% servers trying to do these things are running on linux, not Windows. [Windows still leads Linux in server market share by 3%](http://en.wikipedia.org/wiki/Usage_share_of_operating_systems#Servers). &gt; Unless you want to suggest everyone start buying Windows licenses as well as losing a great deal of support, your solution hardly caters to anyone even if it's technically grand. My argument is that the Windows kernel provides a technically superior environment for asynchronous socket I/O versus contemporary UNIX kernels. This can be seen in raw performance comparisons between a, say, Tornado/Twisted based HTTP server implementation on Linux versus my async version on Windows (on identical hardware). Solaris and AIX both saw the light and implemented completion-based asynchronous IO support -- hopefully this work will motivate the Linux and BSD folk to do the same. (MegaPipe is a step in the right direction.) &gt; Nevertheless, afaik Guido has made use of Windows IOCP in tulip, not select. That's about the only C extension code he wrote for the project. So it seems you're being a bit disingenuous to the current situation in your slides. I was shocked when I realized how badly Twisted/Tulip etc were all using IOCP. They were treating it as if it were select(); i.e. calling it in an event loop as if it were a normal IO multiplexing syscall. That is the most retarded way to use IOCP. The whole single-threaded non-blocking sockets with an event multiplex is retarded on Windows. It's literally the worst thing you could possibly do. &gt; Does PyParallel work as performantly on linux sockets? Until Linux has something analogous to IOCP, overlapped IO, and proper, non-signal-based asynchronous I/O notification mechanisms (tightly coupled to the thread dispatching mechanisms of the kernel), then there's no comparison. 
and you would still write bad code!
That looks to be nearly perfect for my needs, thanks very much for bringing that to my attention.
This was originally a conference talk, there wasn't really time for any more information.
ecmascript too!
don't do c++. Don't follow the hype man. Learn C. Good C programmers can learn and do ANYTHING.
So was Corba. Too smart. I should, really i should. ---- Edit: Finished, calling it HTTP 2.0 and it composes perfectly with all other HTTP systems.
True, the wsgi server hands data using wsgi but this not True for circus which doesn't make any assumption regarding the application protocol.
Sometimes things only work with sudo pip, though...
I know this is wrong, but the implementation feels like the "ref counted version of STM" only the t manager forces linearizability? If you only add a subset of parallel semantics you could make your job way easier. Like only writing to main thread objects if they are commutative see the work on CRDTs and LVars. I love the large page hack. This is really cool work but it strikes me as pins and needles. Difficult, error prone, and a set of semantics that Guido definitely wouldn't go for. Thoughts? The funcs in the work queues strikes me as a little web workerish (which is awesome). If the Python VM was re-enterant I think a lot of this would be much more tractable. It looks like nearly everything you have outlined is implementable in multiprocessing though (aside from main thread writes?).
only c++ programmers like c++. It's this blindness that thinks because something is complicated it must be good?
In this case we have Sublime and PyCharm though, both very solid bets. He did right to ask; a shitty editor will make any language, even something as sweet as Python, feel like a punishment. :) 
there will be no lack of C++ or C programmers. There will however be a lack of good programmers in those languages. Writing good code in python, ruby, perl, etc. is far easier. The quality of your program will be better and development will be significantly faster. the C++ community seems to have this mindset (and they won't admit it) that complicated == better. 
It doesn't look hard at all on Matplotlib. If you show me what the input data might look like, I could give it a shot. Does the position of the nodes convey soemthing?
I used to have this in mind, too. I have some casual interest in linguistics, but what stopped me is realisation that I need solid math and stats knowledge to really find this useful.
What sort of stuff do you want to do with NLTK? Linguistics is a huge field.
The only language I don't even put time into bashing is PHP, except just now. ---- C++ is a fine language and getting better with every decade.
I have an acquaintance who -- as it turns out -- is working on a PhD and wants to analyze some speeches over a 50 year time period (it's a very long story, and I won't bore people with the details of the project). Nonetheless, I volunteered to help him analyze them using NLTK. I told him, however, that the questions and interpretations are on him. So that's my road forward. Similarly, if you live near a university you might consider volunteering to help a grad student whose project involves analyzing some corpus of text, being sure to caveat it with the fact that you will just provide the software piece, not to semantic insights or whatever.
&gt;--system-site-packages Welp... looks like we found the problem =)
Eesh, would that I could, but I'm already spread pretty thin. It's a good thought though, especially my lab is right next to the psycholinguistics lab. Maybe they can give me an overview. For the most part, though, I think I'll be trying to learn this on my own out of books and a lot of practice...
I'm not 100% sure yet. It mainly seems like an interesting field. I do have a particular interest in natural language generation, but my understanding is that this is a particularly difficult problem, so I'm hoping to start with something simpler. One idea I had was to make a simple script to fetch topics from a given forum and try summarize each topic into one word, so something like "Where should I go on vacation?" would be tagged as `travel`. Silly and pointless, but simple(ish) and well-defined.
Wow, this looks great! Thank you very much!
or on Linux you could use xdg-open &lt;url&gt; I'm sure the other OSes have something similar. I suppose I didn't read the title closely enough, I thought it was to *create* a website with a one-liner, i.e. python -m SimpleHTTPServer 
&gt; robot game has some gaping security holes That was my first thought as soon as I read the title
Are you looking to sell your services as: 1. A Python programmer to clients looking for that specific skill (eg, contracting for a company that uses Python), or 2. As a person that just happens to use Python to provide software for clients that wouldn't know Python from ColdFusion?
I wish I could be more helpful but this is what you must do: 1. Somehow get your first client. 2. Do a good job. 3. Socialize. It's a tough recipe for someone who just wanted to code, but there it is. Once you somehow bootstrap there will be no shortage of work. You will become increasingly specialized and known in a community as the guy you go to for the hyper-specific whatever.
The [Python Text Processing with NLTK 2.0 Cookbook](http://www.packtpub.com/python-text-processing-nltk-20-cookbook/book) is rather helpful.
What is the killer feature you wait from compiler and translators of Python to Javascript ? Performance, Conformance, Support, anything I miss?
Got any guides on this? I love both and I started making a C++ application that I plan to integrate some Python, but have no clue how to go about it. Thanks in advance!
Depends how complex you want to make it. An easy method would be to have a large amount of training phrases, with you tagging them. You then have a dict for every tag, and every time a word comes up that's tagged with something, you add 1 to every word's score in the tagged dictonary. Then, when you get a specific phrase, you get all the scores, order them, and select the highest. That's what the thing is most likely. Obviously, this isn't the most accurate way to do it, but it's the simplest.
Maybe if you're learning or need testing code, but most of these are simply a 'No' for official projects. You gotta understand that performance on this platform is very important and scripting languages often perform poorly without some decent hardware. This isn't Intel or even ARM or PPC. These are for very low power, usually integrated systems.
All of my jobs have come through the relationships and reputation built during previous work. How do you get started then? Get yourself a public presence through the open source community by contributing code, participating in conferences and mailing lists, blogging, etc. Another related piece of advice: most clients are stuck in their own world and have a rough time connecting how your technical skills apply to their domain. Do your homework, learn their language, connect the dots for them and act like a peer rather than a hired technician. 
I personally use [macports](https://www.macports.org/). As far as IDEs go, I've always stuck with vim, however, [pycharm](http://www.jetbrains.com/pycharm/) is nice and so is [spyder](https://code.google.com/p/spyderlib/). I like using ports mainly because I've become used to it and I feel it's very simple to use. Examples: sudo port install py27-ipython sudo port install py27-numpy The installation goes into /opt/local and does not interfere with the setup that os X comes with. Hope that helps. 
Hit up your regional python users group and network. Check out the Hacker News "freelance" thread* each month. * every couple of months a thread like this one comes around - https://news.ycombinator.com/item?id=3412901
Why not just require that the code is run on your own machine, and use HTTP? It would be a lot slower, but no security issues.
ok no problem. please tell literally everyone to do this, and when you see anyone posting here suggesting 'sudo pip install' please show them the light.
Yeah, I thought about doing something similar using a naive Bayesian classifier. I may as well give it a whirl. To run with my "trave" example, it might also be fun to try to detect where people are planning on travelling...
I shall spread the Good News of the gospel of PIP!
So one important thing to realize is much computational linguistics uses ridiculously simplified models of language relatively often. Clustering of natural language (which is what that would be) is often done simply on a word-by-word (for a definition of "word" being the item between spaces — a "word" in a linguistic sense is *really hard* to define) basis; language identification is often done on a this-character-follows-this-character basis; etc. Don't be put off by this — unquestionably having a knowledge of linguistics helps to consider the quality of these simplifications. Things like clustering have a big overlap with machine learning (it just happens the objects you're clustering are linguistic and not numeric), thus an understanding of machine learning will undoubtedly help. If you wish to start to look into linguistics itself, be warned that many secondary sources will pick a theory from a primary source (and quite possibly developments thereof) and teach it as if it were the only way of doing something — many (most?) American schools teach Chomskyan grammars as if they are the grammars of relevance, despite the theories being questioned by many.
I've got 1 &amp; 2 covered. 3 is an ongoing problem. Who is my market? Where do they hang out? And I mean "hang out" figuratively. I'm not limiting myself by geography. In fact, I prefer remote work.
Go to coding events, like hackathons or companies that host these events or conferences. Socialize there, or start a local python meetup!
Noted. Thank you.
&gt;or on Linux you could use xdg-open Good, I learned something new - xdf-open. Thanks. &gt;I thought it was to create a website with a one-liner No, it is to open URLs, not serve sites. I just got the idea from seeing the webbrowser module used in the antigravity module, actually. I didn't really have an urgent need to do what the one-liner does. But thought it would be fun to create it, as a shortcut to open frequently visited sites - from the command line. 
My pleasure. I'm glad I could help.
Before I comment, I should say I am not a freelancer but I am included as a consultant (a contract employee). More so, I do not currently work in python but I have lots of experience supporting groups in python as a "cowboy coder". I think the first concern here is you want to break out as a freelancer or consultant and you want to focus purely on python? Sure we can find you places to look for just that kind of work (such as [freelancer/python](http://www.freelancer.com/jobs/Python/1/)) . However, to really play the freelancer game and hopefully one day be a independent consultant requires a lot of expertise. Often consultants are more like full stack developers, having a great understanding of System Admin, Database Admin, a few frameworks in their bag of tricks, and a plethora of languages to work from. Python is a great language, for prototyping, and this why I have some great experience supporting groups with it. However, in the big ecosystem of things Python is a great place to start but the worst place to finish. As a computer expert your job is to constantly grow and challenge yourself which is key as an independent (you cannot just ride the corporate process like some organisations). In the end, the best way to network is to work real software development jobs and leave a good impression. Overtime, maybe one of these jobs will lead you to a place where you can start working part time (cut out some of the fluff). From there you can start working some freelance jobs on the side and soon enough these experiences will give you enough. On an aside, be careful. As a freelancer, you're everybody. You're the accountant, the salesman, the quality assurance, everything. You have to take care of a lot to make sure you stay healthy and sane while also doing a lot to make sure you don't pick up the wrong kinds of customers (the kind that won't pony up). This is a challenging path your looking into and I wish you the best of luck! I think this is the "The Road Not Taken", so I think the rewards can be immense. PS. My understanding between a freelancer and a consultant is that freelancer are doing short small jobs (plenty of python work there) but a consultant is working on bigger systems with complex problems (we see a good bit less python). For me, I love the "hacker" mind but to go from freelancer to consultant without going through a more structured software development environment requires the best and most persistent of hacker minds (a real passion for independent learning). EDIT: The idea of looking for a Python meetup is great too. I have never had the pleasure of pair-programming but a lot of problems can be easily solved just by talking them out with people. Make sure to network with the community of developers some in addition to networking with clients.
Contact larger companies known for python development. See if the would like to outsource some of their smaller projects to you.
I'm aware of all that. These are valid choices when you are developing code for a microcontroller simply because you need your solution to be embedded or, in general, when it fits your requirements. You can call the native code when you need the performance, just like it is done in python. As it always is in any kind of engineering, there are trade-offs.
The trouble with this reasoning is that the Internet itself is a "distant location." If someone is accessing your site from a cellular radio their IP address will change *constantly* and requiring your user to regularly re-authenticate over such a slow location would basically make your web app useless. There's a lot of other reasons why you can't use the IP address as an identifier. As a general rule, never use it as a mechanism to identify or distinguish clients.
circus + websockets library make it possible to build a pool of websocket applications. No need for a specific server, circus is handling the pooling and socket sharing. This solution is different from one where you use socket.io where you need WSGI to support other long pooling methods. howto: http://www.hypermove.net/notes/2013/suprm-python-3-websockets-and-circus/index.html
That sounds like it would require both robot owners to keep their scripts running indefinitely. Then there are issues with latency, unless it is turn based. And disconnects if people terminate their scripts mid-match. Aside from the security issues, the OPs design sounds like the least hassle and most fun implementation.
On windows you can just type `start &lt;url&gt;` in cmd/ps to open that url in default browser or create internet shortcut and execute that.
This is sort of business 101 for just about any business. The latter part is really tough for anyone who is an introvert. You absolutely need some social skills to be a decent independent contractor where your skillset isn't needed by every Tom, Dick and Jane. To add, though: a) Become an active participant within "the community". Github is a great way to start creating a space, but a better way is through a portfolio. b) Look outside of the "python"-specific box and look for ways of applying a python solution to meet a problem (customers generally don't care what technology that's employed provided it meets their needs) c) Marketing the hell out of yourself and invest in teaching yourself marketing. It sounds like you think your niche market is South Florida, but I might argue that your Market is anyone that connects to the internet. You can certainly focus on South Florida but I think you'll have to get out of your house to make this work. Effective marketing builds trust. d) Don't be afraid to wine and dine. Especially for non-technical people, a social event is something that helps build trust. e) Other thoughts that are not time effective but can build out your business: linkedin.com, github.com, freelancer.com, odesk.com, bitbucket.com, etc. Having bodies of work for display and/or recommendations can help entice people. f) Teach: If anything starts to work for you, maybe you should consider writing what does work down in a way to help other people -- possibly creating some sort of a social website that actually connects developers to projects. This is another way to affect "the community". 
Wow! I'm currently using wakari.io, but Sagemath Cloud does real-time collaboration. I was collaborating an IPython notebook with someone and he can see what I'm typing and executing...live! I know it is in beta, but it can take a while for it to generate an IPython notebook. But props to the people working on Sagemath, this is truly a great service they have created. I'm impressed!
So probably the most important thing to realise if you're trying to do stuff with a large data set is that most things you probably think are linguistic universals (i.e., things that occur in all languages) probably aren't. Even what you think is true of English — probably isn't. Dialectal variation can be extreme. (And where do you draw the line as to what is English and what is not — is Scots English, for example?) r/linguistics has [an FAQ](http://reddit.com/r/linguistics/comments/tua48/faq_i_want_to_learn_more_about_linguistics_where/) on where to start, but note that there is a tendency to lean towards the American school of thought (undoubtedly because many have been through the US colleges where it is often taught exclusively), even though it's not universally accepted throughout even the English-speaking world. r/linguistics has a good list of related subs, several of which deal with comp.ling., in its sidebar. If you follow those through, you might find some good resources there.
I just use boost.python, it is pretty straightforward. 
Blogging about python topics and giving talks at meetups and conferences would be a good way to show potential clients you know what you're talking about. You can point to this material when you're trying to bring them on.
I recommend getting a Python distribution such as [Anaconda](http://continuum.io/) or [Canopy](http://enthought.com/) which include by default a whole bunch of stuff you'd probably end up attempting to build yourself anyway. Let these other guys take the hassle of building it for you. IDE's were designed for languages like C/C++, Java, etc that have a compile stage. They add functionality like code completion and refactoring which works great with such statically-typed languages because everything is deterministic. Python on the other hand is dynamically typed and interpreted (not compiled) so you don't get much benefit from an IDE. It does have great built-in introspection though which can help IDE's provide subsets of their full functionality, so hey if you feel more comfortable with PyCharm than IDLE, go for it. You don't need to have just one, btw, but you'll probably find yourself gravitating towards the one you know best. My own Mac has: * Anaconda, with 2.7 and 3.3 environments * Apple's built-in 2.7 * homebrewed 3.3 * MacVim 7.4 snapshot 72 with perl, luajit, and python 3 (my custom 'brew edit') * TextMate 2 * Sublime Text 2 * Pycharm CE I mostly keep mate &amp; st around in case homebrew ever screws up Vim, as they're both functional editors. TextMate is kind-of the classic Mac text editor, it and BBEdit have been around for decades (before OSX). ST2 I have out of morbid curiosity, it is ugly and wrong on so many levels, but lots of "Windows Notepad" people love it. The two other main things to get from homebrew are iterm2 and the_silver_searcher. iterm2 will give you 256 colour support in the terminal (better than the built-in Terminal) amongst other things, and the_silver_searcher is simply the best "programmer's grep" ever made in the history of mankind. It'll integrate with most editors or you can just run it from the terminal (the command from it is 'ag') Why do I have so many python's? * No need to mess with the system python, Apple can change that without screwing me over * Anaconda has almost everything I need, and in the workplace I can advocate a python environment with commercial support. * Sometimes homebrewed apps won't work properly with the Anaconda python due to library dependencies. e.g. in Mavericks the system libstdc++ library was completely changed and you cannot link tools together that have been compiled with different kinds of it. Like my first point, I work around dependencies on third parties. Back to the editing though, pick a tool and learn it backwards. Nobody these days cares what it is - if they do you're in the wrong place. You're going to be spending a lot of time with this tool when programming, so know it better than your family. 
Thanks, i'll probably just ignore the notebook concept till a later date when i become familiar with the language.
I think i like the fact that i can also use Sublime for other languages in the future so i won't have to become familiar with a new program :)
I'll check it out, but i think i may just stick with Sublime.
Thanks for the input guys, and i appreciate what you said @chronug but i think i will be using a editor like Sublime :)
I'll check this out when i get a chance, thanks dude!
I believe i have used Text Wrangler when i did some html stuff at school, thanks!
* https://gist.github.com/westurner/3265445 * http://docs.continuum.io/anaconda/ * http://docs.enthought.com/canopy/
Oh look, it's down.
PI?
You made two mistakes: 1) hourly billing, and 2) getting paid 100% in arrears.
What about books, e-books, and presentations (i.e. slideshare or speaker deck)?
All great points, and I already do many of them. My introversion will certainly be the most difficult to overcome.
Books and ebooks can be good. They take a little longer to absorb, so that might be a higher barrier to entry, but I don't have much experience. Can't hurt. Presentation slides are as useful without the presentation video/audio. You can only convey so much through slides, lose a lot of context, and they're really only good when used in conjunction with an actual presentation.
I recently overhauled my website, focusing on the blog aspect. I've seen a bump in traffic already. I just need to commit to writing something at least once a week. I just need to figure out exactly who my audience/market is.
If you have decent numbers coming to your site, maybe you can post a poll there, "why are you visiting?". Even if you only get a few responses, maybe that will give you some insight.
This is an important post because it highlights the problems with the business side of the profession. The problems described above aren't at all uncommon. 
https://en.wikipedia.org/wiki/Principal_investigator
Thank you, honestly I was hoping my post could serve as a "reality check" to anyone thinking it's as easy as hanging an "Open For Business" sign on the door and thinking all the finer details will work themselves out.
Have a look at [Anaconda](https://store.continuum.io/cshop/anaconda/) or [Canopy](https://www.enthought.com/products/canopy/) for installations of Python that come with lots of packages. As for IDE, check out the recently released community edition of [PyCharm](http://www.jetbrains.com/pycharm/download/) to get started.
Here's another option for you if you have questions like this in the future: many open source projects are pretty friendly, so you can also pose a question like this to the user (and, if necessary, developer) mailing list or IRC channel. You'll get a particularly good response if you volunteer yourself to do the work :) Get a Github account and you can post issues and/or contribute code.
Step 1: Under price (go to fee if you have to) Step 2: Get another client, raise your rates a bit Step 3: Repeat step 2 until you can't raise your rates any longer.
Yes, and you negotiate terms, not your fee. Offer options. Don't like option 3 or it's too expensive? That's why I have option 2 :)
Only kids with lemonade stands think that way...or the delusional.
I want to be able to use `yield from` so bad.
per download fee would be a net negative - better to charge per seat. Otherwise, you're penalizing people who don't save your wheel and making it harder to include it as part of a build script...
caffeinate is operating on the process, it doesn't care about a GUI drawing windows and whether or not they are visible. It's the Apple standard way in ML to tell the OS to not sleep while the given command is running. 
`getattr` is somewhat unpythonic, no? Plus, `getattr` is nearly equivalent to: try: return obj.property except AttributeError: if default: return default raise And hasattr is the same thing but returning True/False.
A variation of that appears in things that use BaseHTTPHandler. To be specific, the getattr(self, 'do_' + method)() items.
With regards to marketing: I'm not saying that anyone should do exactly what I do, consider who you're trying to sell yourself to when putting your marketing together. That said, I tutor math and physics for middle school-college kids, and in my advertising I arguably basically caricature myself as some sort of stereotypical nerdling. I primarily advertise myself on a site that asks you to write a mini-bio of yourself, and one of the sections is to talk about your hobbies. Most of my hobbies section is talking about my love of sci-fi. Nothing on there is false, but you figure that the average person figures someone good at math and science is some sort of sci-fi nerdling, so I play it up to get the clients.
WSGI is ok, it's just the CGI style environs and request-response mode that killed it.
I have a five-year-old son. Here's an ELI(actually)5. Wow, that's a great question! How do you think that happened? No, the computer is not broken. It works that way. It works funny. Tell me what 0.1 means. Well, what if that's how old a baby is, 0.1 years? Yeah, it's an amount of time that, if you had ten of them, those ten would make one year. First you're 0.1 years old, then 0.2 years old, then 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, and finally you have your first birthday. (How this goes in real life: Where are you going? Hey, turn the TV off and let's talk some more. Hey, can you hear me? Oh well... OK, let's pretend it doesn't end that way.) OK, what if we had to write everyone's age as a number of months? How many months are in one year? Right, twelve! And if you have ten months, that's not enough to make a year, right? But we have to write months. Someone asks how much is 0.1 years plus 0.1 years plus 0.1 years. How much is one plus one plus one? Sure, it's three! And 0.1 years plus 0.1 years plus 0.1 years is really 0.3 years. How many months is kind of close to 0.1 years? Well, I would say one month. So, 0.1 years plus 0.1 years is kind of close to one month plus one month. How much is that? Right, two months. That's kind of close to 0.2 years. You know how your eight-year-old sister was talking about "five and above, give it a shove - four and below, let it go?" I know it will be a while before you're in third grade like her. You heard her say it. OK, that's called "rounding". It's what we mean with numbers when we say "kind of close". Now, what about 0.1 years plus 0.1 years plus 0.1 years? Yup, you told me before that it's really 0.3 years. And that's kind of close to three months. But if we had to do it with months, we could say it's kind of close to one month plus one month plus one month. But that's really 0.25 years, and some months like February are short ones, so maybe it's a little less than that - "four and below, let it go." So the answer with months could be that it's kind of close to 0.2 years instead of 0.3 years. So oops, we accidentally said that 0.1 + 0.1 + 0.1 == 0.3 is false. OK, well, computers don't really count in months, but what they really do is kind of like that. That's what I meant when I said that they work funny. EDIT: a typo plus oops, I didn't know before how to make paragraphs
For a professional or advanced amateur, yes. For someone who is learning how to program? Doesn't seem like you'll need it when you're only working with standard modules and making Fibonacci functions. 
Sublime is a pretty good editor. It's what I use at work. You should also get to know nano (also known as pico) just because sometimes it's faster to program in Terminal.app than to open a file in your real text editor.
Python 3 changed the `print` statement into a function. In other words, instead of writing `print "Hello."` you write `print("Hello.")`. The latter is more consistent with how everything else in Python works, so `print` isn't a special case: it's the same style that you use to write to a file or take a square root. But that means all old code is broken in Python 3. Fortunately, it's been out for a couple of years, so most software is available in Python 2 and Python 3 flavors. Just learn whatever your book/website uses, then go back and learn the other one after you get done. It only takes a couple hours to learn all the small differences, besides the big one, which is `print`.
Mac version is `open http://example.com`
Meetups are a great way to engage. Could do a lot with them. If everyone is doing .net work, befriend an open-minded .net developer. Do a meetup on Intro to Django from the perspective of an ASP.net MVC developer or something. Great way to solidify yourself as a local knowledge base.
i have yet to meet an open-minded .net developer down here.
Being a freelance developer is helpful. But being a freelance application architect (or insert some fancy word here) is better. People have business problems. They want IT solutions. They don't know what it is, but they know it could be aided with software. With the smaller clients, you *are* the IT dept. You pretty much are going to be the dude to: - analyse the problem - discuss possible solutions - architect the solution - manage the project - coordinate with clients - develop the product - handle production deployments - and maintain the product Being able to do all of that makes you very valuable.
Sure. Display your skills concretely (Github, online blog, portfolio). Know what you're talking about in your proposal (explain the problem). Show them that you can solve your problem(explain in detail how you propose to fix the problem, even note libs that you will use to solve a particular subset). Have fun with the massive amounts of cash you'll make when you discover I just truly gave you the key. Making money is child's play to me now, and I grew up poor so I'm fucking loving it. It's more simple than it seems. You're welcome.
the one secret weird trick that has always worked for me: if you speak at an event, or write a blog post that's interesting enough to get onto the front page of HN or something, and you mention that you're looking for work -&gt; usually someone reading is looking and they'll contact you.
Readability. That´s the strength of python, isn.t it ?
Django
Please be more informative in your answer. /u/PoddyOne was clearly asking how to identify useful skills, not "what popular libraries should I learn?" Django might be an example of a library worhth knowing, but explaining why this is would be better.
Django isn't a library, it's a web framework, and the most popular one at that. If you want to be more employable, knowing how it works and having some experience with it is a very good idea.
My bad. From a glance it seemed like another 'what should I learn' post. My advice to Op would be to scan.Indeed.com to see what is trending in the job market, see what is in demand, etc. Also, PUGs are great.
Primary investigators. Graduate students don't generally have their own grant money, but their advisers almost certainly do. 
I would like to see a similar list for Flask too.
I'm not sure about grappelli being that useful, but a big upvote for all the rest.
I would check big popular open source projects (using Python, obviously) that include contributions from big companies as there's potential there. Then learn how their community work and how you can contribute. Try to get involved. Also is not just about trends but getting involved at the right time. If a project is new or not ready for production there are more opportunities to contribute. Some projects to look at: OpenStack (several sub-projects), Ansible and Salt. These are all "cloud" related and I don't think is a coincidence.
On [Green Tea Press](http://www.greenteapress.com) are several free 200+ page books on more specialized Python uses. They're very well polished and updated frequently. The same author of [Think Python](http://www.greenteapress.com/thinkpython/thinkpython.html) and Think Java has also written these using Python to structure the books' examples: * [Think Complexity](http://www.greenteapress.com/complexity/index.html) - *Exploring complexity science with Python* (which the author says "picks up where Think Python leaves off") * [Think Stats](http://www.greenteapress.com/thinkstats/index.html) - *Probability and statistics for programmers* * [Think Bayes](http://www.greenteapress.com/thinkbayes/index.html) - *Bayesian statistics in Python* These books get very high praise for their brief but lucid examples which turn out to actually be relevant to how one might use Python professionally. This, as opposed to those 1000+ page doorstops often used as college textbooks which all repetitively teach mundane examples like how to find a factorial recursively, or manipulate the string "spam." EDIT: Forgot to mention, these books are *not* strictly math books, but rather Python books that use programming as a means to "bypass" having to first study the math in question. From the Think Bayes page: &gt; *This book uses Python code instead of math, and discrete approximations instead of continuous mathematics. As a result, what would be an integral in a math book becomes a summation, and most operations on probability distributions are simple loops.*
Yep window_owl is right - I've edited the question to try and make it more clear that this is meant as more of a discussion, rather than 'HEP ME!'
&gt; what's the problem with using the binaries that packages provide themselves? Oftentimes they work fine. Other times they don't, because of things like conflicting FORTRAN compilers, slight differences in C ABIs of underlying packages (Numpy, Scipy, Pandas, etc.), conflicting shared library setups on the build machine versus the machine it's being installed on, etc. etc. The problem is kind of fundamental, in that the idea that there can be a "package" at all is sort of a pipe dream unless people have a common base. For Linux systems, that's what distribution vendors provide - but anyone who then installs things from other sources is heading into dangerous waters. Language ecosystems can do this by completely breaking from the C runtime, e.g. the JVM world and its JARs, or they can use a broader common runtime infrastructure. The latter is what we are doing for Python with our distribution.
Allen Downey is awesome.
django-debug-toolbar anyone?
My guess is the overhead incurred by the multiprocessing.Queue IPC mechanism is just several times larger than the actual calculation (fugil). Remember that calling .put() on the Queue probably has to serialize the message somehow, stuff it in a domain socket, the other process has to pick it up and pass the return value back again via the socket. All this waiting for I/O and moving memory around is way harder than a few numeric operations. A better use for parmap() would be something with a small input (e.g. a file path) and a much larger set of operations (e.g. resizing a 2000x2000 image) to be executed by the other processes. edit: p.s. it doesn't get more python-y than a list comprehension :-)
It's not just C++. But C++ is a misunderstood language, and it can be ugly and inelegant. Many people are judging it from reading really bad code, and bad code examples in some books. 
Awesome, thanks again!
That's not a bad idea at all
I was a volunteer ("buddy") at RuPy. I'm in the academy, not in the industry.
I've been using the start command on Windows for some time now, but only to open files with their associated programs. Didn't know it could be used to open URLs too. Cool.
Hmm that makes sense, thanks! I'll need to run it via dis and figure out what's going on. In "production" I'm using parmap() to wrap socket.gethostbyname() and the parallel version bests a serial one by ... well I gave up waiting for the serial one to even finish ;) So it was quite a surprise to fail this unittest and particularly by such a large margin. p.s. By python-y I meant it running mostly in Python rather than loop-friendly C, not "pythonic" (written to suit someone's personal tastes) 
Depending on what specific field you are in, you can narrow down your focus to that. I work in bioinformatics, so I usually end up experimenting with biopython, pysam and pyvcf, among others. You say you are a research student - what do you research? Do you do any numerical work( something numpy, scipy and matplotlib are useful for)? Do you do any statistical work (R.py, pandas, etc)? Ask yourself, "what kind of data do I deal with?", or "how do I manage the data I deal with?", or "how do I present or visualize the data I deal with?" If I were you, I'd find a focus and look there....
Seriously. Who is this god among men who writes incredible books and then just gives them away.
Please msg me. I'd like to learn more about what you do. Thanks!
I haven't used it myself but you can use http://kivy.org/
Find a related technology that you like and focus on using python in that technology. For instance, HTML/CSS/Javascript is an obvious choice, but Openstack is real hot right now. Learning how to develop against Openstack is a highly sought after skill. I'm sure there are other technologies as well. 
Cool. I think that open command is there on Linux too.
Thank you.I saw that the other day but not tried it yet. If anyone got an expience with kivy ill be glad to know. 
Check the jobs/careers page of websites of companies you'd want to work for. See what skills they're looking for. But mostly I lurk in programming forums :) A few things to learn to make yourself more employable: Software Engineering/project management. You should try to get some experience with both agile and waterfall methodologies. If you can get projects done well, on time, in a team or alone, then what technologies you know won't matter as much (you can study up when you're going for a specific job). Communication - More important than a specific technology is how well you understand the ones you do know. And the only heuristic an employer has for that is how well you communicate about it. JavaScript - Assuming you're going to be developing Web applications, they'll need a client side. Other languages - Chances are not everything a company uses will be written in Python, and knowing other languages will make it easier to learn the whole system and troubleshoot problems, as well as give you insight into how Python works. 
That's what I've noticed too. Furthermore, I think 'web dev' would be the easiest to get into without large auxiliary pools of knowledge (math/sys admin). If OP has a good understanding of fundamental data structures and algorithms (basically just for interviews), then I suggest OP go learn the Django framework after which she'll be decently employable while also being able to jump over to Ruby on the Rails without much trouble, which further opens job opportunities.
I'm also very interested int he scientific Python bit, but since I don't have much math/science skeelz, I'm gonna start with web dev which should be easier to get into.
&gt; bioinformatics Could you talk a little more about this? What did you study in school? What experience did you have when entering this field? How does you compensation compare to other cs jobs? 
I originally found a job ad (an academic job) about 10 years ago, and applied (this after having worked as a systems engineer doing hardware and doing software dev in the payments industry for a few years). At the time, most of the code was a mix of shell, perl, and C/C++. The work I was involved in was calling genes on a mix of different types of drosophila, fungi, and a couple human chromosomes. Usually we'd have a few programs written in C that did all of the heavy work, and would write glue code and pipelines in perl. Eventually, the human genome project started to wind down, and much of the work started to focus cancer genetics and personalized medicine. Now, this is where most of the work is. I originally studied chemistry and then electrical engineering in school. The compensation varies - if you are in academia, depending on your experience and degree, expect to be paid between $40k-70k, Private industry goes between $60k-$100k. There is an interesting mix of degrees for the people doing the work, though you'll mostly run into folks with compbio or cs degrees.
This is horrible advice. You are reducing yourself to a commodity.
Practice I guess. I that sounds trite, but doing stuff in my free time, having stuff on github, etc, made me more desirable to employers. Also learning another language helped, once I thought I was ok with where i was in python, learning some ruby helped me a bit for a certain job. 
Learn the basics behind web development with Python - e.g., scraping, HTTP, REST, SQL - and of course Flask and Django. Learn Flask first as you will have a better understanding of how Django works under the hood. The course [Real Python](http://www.realpython.com) covers all this and more. I am the author. Once you get up to speed on development, pick and project and go with it. Either fork an open source project and build on it, or start your own from scratch. You will learn so much during that process. Learning by doing. Best of luck.
This approach rapidly finds your market rate. If you're uncomfortable selling your work for an hourly rate, you shouldn't be consulting/freelancing.
Pythonic isn't about personal taste. It's a recommended style, curated by the Python community.
It's almost completely worthless to invest your time in niche programming specializations as a way to be more "employable". If you want to increase your chances of landing a job, learn how to create a professional network and how to communicate effectively. If you want to increase the odds that you'll be good at a job you haven't applied for yet, then by all means invest time in niche specializations. But being good at something and being more likely to land a job doing it are very, very different things.
its the default
That should have said "at market rate" not necessarily hourly. If you know enough about your clients to be able to price to their ROI, then sure that's a valid method. I find it to be immensely simpler though to have an hourly (or daily or weekly depending) rate that I adjust based on demand and my willingness to do paid work. If I under charge for value on one project, I increase my ability to charge on the next while giving my clients outstanding ROI. A different approach may work better for you, but calling an approach that is different from yours "terrible advice" is myopic and childish.
as a newbie I find it hugely intimidating when people start posting massive lists of "must have" plugins when I'm barely grappling with the official thing just saying
Thanks a lot for the info. I've got a quarter left in my CS degree and I'm trying to figure out what the heck to do. I really like the idea on working on something that feels like I'm contributing to human progress.
Great, thanks for the input. I think I phased my question badly. I was hoping other people would tell me how they stay relevant, rather than advice on building a career.
None of these plugins is mandatory to get a django project running. They are merely enhancements: things that make your life easier, take care of repeating tasks, etc. If you are just getting started, leave the plugins aside for now. Once, you are comfortable with bare django, you can look for plugins that might be helpful with your project (either in general or for a special task).
Coz ... It is veasy to implement and uses scikit-learn + ipython (parallel). I am going to use it in my project.
Hi razzmataz - I decided not to mention my area in the top post so this could stay non-specific to me, but I think that kind of backfired. Broadly, I work on numerical statistics. I'm very familiar with pandas, numpy etc. 
I'm in. I've been messing around with Flask and Django a bit in my free time. I know basic python, Html, css, and javascript. 
I fear you're leaving a tremendous amount of money on the table. Please read this, and let me know your thoughts: http://www.amazon.com/Value-Based-Fees-Charge-Youre-Worth/dp/0470275847
Thanks for the feedback! I'll definitely look into your suggestions! 
I think there are basically two options. The first is [kivy](http://kivy.org/#home), as others have mentioned. Kivy itself is actually nothing specific to android, it's a cross-platform graphical framework, but it's developers created and maintain a [python-for-android](https://github.com/kivy/python-for-android) project (plus some related tools) that make it very easy to build and deploy an android apk with a kivy interface. You can also access android's apis with pyjnius, some of which is abstracted as a python interface. The second is the [pygame subset for android](http://pygame.renpy.org/). I know much less about the state of their tools/framework, but it seems to be possible to create an android gui and package it as an apk, and they have some integration with android apis. Perhaps someone else can elaborate on this. Personally, I've used kivy and I think it's great. I found it well documented and with a great community if you check out their irc or mailing lists. It's great to be able to develop on the desktop (no emulators etc.) and have the same program run perfectly on android!
As others mentioned you can use kivy, but honestly I find it easier to just use java - it's not that hard, even without prior experience with java, and is much better for android development, you will also find much more documentation/tutorials for android development in java than in python/kivy.
I think Pyro4 is quite not the same player. As far as I understand its features, it's a python to remote python library with many batteries included. pyjrpc OTOH is a minimalistic implementation of the jsonrpc spec, whichever language the client is implemented in, regardless of the transport layer. It's more comparable to using the SimpleJSONRPCDispatcher Object from jsonrpclib (https://github.com/joshmarshall/jsonrpclib).
The reddit hug of love strikes again.
web.py is another really good one to start... http://webpy.org/ and was developed by Aaron Swartz, points for that hehe anyway, it is really easy to migrate between them, even to Twisted, if your application needs some assync performance... I know this post it's not about what to learn, but django book is really informative, and a great "python for web 101". www.djangobook.com 
I'm a little confused by the “naked exception for cleanup” example in the post. Why would you write it that way instead of using try/finally?
I think it is better to talk about the danger of greedily trapping and hiding all exceptions. We call this kind of thing a "diaper pattern".
There's no strict definition. The simplest meaning though is: simple, idiomatic, and stylistically conformant code, as judged by the Python community at large. The video linked below by Raymond Hettinger gives some good examples regarding the "simple" and "idiomatic" part; when there are multiple ways to accomplish one task, often in Python there is one "right way" of writing it. For the style part, read and abide by PEP8: http://www.python.org/dev/peps/pep-0008/
I've been putting learning webdev off for way too long so I'll keep an eye on this
Apologies if it's not a useful response. However you phrase your question, I think there's a very fine line between how to stay relevant professionally and what skills to focus on building. Are you wondering more about how people make connections in the Python scene or how they land more "current" jobs? EDIT: Ah, now I see your rephrased question. How about this: don't read those books, you probably already know everything there is to know about them. Write your own book. That way, the Python community will come to you.
Ah alright… pretty cool none the less.
On the last day I gave a lightning talk, here is the [summary](http://teropa.info/blog/2013/10/13/rupy-2013-sunday-lightning-talks.html) of the session. My talk was about PrimCom.
Article first states &gt; No Naked Excepts Then states: &gt; As with every rule, there are a few exceptions. The first is when you’re allowing exceptions to propagate. =========== I know the title of this post is the same as the actual article but it's still misleading.
I have to warn you, the academic space is in a bit of pain because NIH is cutting back funding, and also due to the sequester and other government related funding nonsense. That said, there's still a few small companies here and there that are doing alright.
Pick something you haven't done before, and try expanding into that. Scrapy? flask? fabric? There's a ton of different things to play with.
sign me up, I tinker with stuff along these lines on a daily basis. May as well help and be helped in the process.
Let's have a try.
Great, thanks! See the edit to my post above.
Welcome! Not sure, but see edit to my post above--probably a blog. Suggestions welcome.
Feel free to join in!
Great, welcome. No idea really how it will work, I'm just improvising. Maybe through a blog. Your suggestions as to how to do it are welcome. See edit to my post above.
In you are! Thanks. See edit to post above.
If only there were a way to highlight a block of code and get a list of all the exceptions it would throw...
Any site that can be written in one of the languages commonly used for web development can be written in any of the others.
Perhaps a subreddit? A blog has more growth potential, but a subreddit might foster more interactivity (e.g. "See what I did!") and critiquing. Either way, keep us updated. I'm definitely interested, although I'm a bit torn between Python webdev and iOS developement right now.
i would like to join as well 
I am doing this now. I am taking the Udacity CS-253 course which covers this exact thing. Oh and it is taught by Steve Huffman, co-founder of a little website called www.reddit.com https://www.udacity.com/course/cs253
Haha, maybe not quite THAT competent ;-) But no, it was a really useful response, was just trying to clarify.
Ty for the tip!
Subreddit would be better imo. One less thing to 'register', 'login', keep track etc.
&gt; Yes it is called monkeypatching. It sounds dirty and nasty but it is done in one place at the top of the file * https://en.wikipedia.org/wiki/Monkey_patch#Pitfalls * https://en.wikipedia.org/wiki/Side_effect_(computer_science) * https://en.wikipedia.org/wiki/Action_at_a_distance_(computer_programming) * https://en.wikipedia.org/wiki/Logic_puzzle#Logic_grid_puzzles * http://redd.it/1drv59#c9tfxgd . * https://twistedmatrix.com/documents/current/api/twisted.python.monkey.MonkeyPatcher.html * http://eventlet.net/doc/patching.html * http://www.gevent.org/gevent.monkey.html ... I guess when I said 'magical adapter', I meant something for adapting a [`twisted.internet.interfaces.ITransport`](https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITransport.html) to [`asyncio.transports.Transport`](https://code.google.com/p/tulip/source/browse/asyncio/transports.py); or is it too difficult to work with callbacks and `yield from`s at the same time?
I have been thinking about doing something like this myself for a bit. I use Flask, know HTML, CSS, enough JS to get me in trouble, and a some other relevant stuff. Do you have a project in mind? If not could I suggest building an application that would assist in the communication for a project like this...a basic blog, wiki, CMS of sorts for collaboratively learning? I'm not sure how you'd go about it with Django, but I have built fairly simple CMSs in Flask.
You wouldn't.
No, even when doing a global error handler of some kind you need to use "except Exception:" because not everything inherits from Exception (KeyboardInterrupt, MemoryError, StopIteration, etc, things even an error handler shouldn't try to handle).
In Python 2, old-style classes can be used as exceptions. So if you're working with old code and you need a global error handler, you may need a naked except to catch those. In Python 3, all exceptions have to inherit from BaseException, so `except Exception:` should work. Minor correction: MemoryError and StopIteration *do* inherit from Exception. The things that don't are KeyboardInterrupt, SystemExit, and GeneratorExit. The inheritance hierarchy is [documented here](http://docs.python.org/2/library/exceptions.html#exception-hierarchy).
&gt; MongoRedis is a software level drop-in replacement for RedisPy that operates on top of mongodb. The goal is to give you the simplicity of redis commands like set, get, expire without needing that extra dependency in your stack. So your audience is people who already use MongoDB but aren't willing to throw Redis into the stack? That's honestly a pretty small audience... if you've already commited to a schema-less datastore, you're probably savy enough to run an extra `apt-get install redis-server` command.
Code looks good, but I'm really failing to see the point. You're getting the worst of both worlds here: none of Redis's awesome optimized data structures (sets, sorted sets, hashes, lists), plus Mongo's speed disadvantage. Yet you aren't getting any of Mongo's complex queries or operators. This kind of just looks like "MongoDB with support for field expiration and an API for getting and setting keys." Redis's distribution support can't be *that* bad that you would need a solution like this. Don't lots of big companies run clusters of Redis servers and operate just fine?
In a dynamic language like python you generally can't know.
pylint found this error in gallery_get.py: 160 try: 161 file = urllib.urlopen(info.path) 162 srcsize = int(file.headers.get("content-length")) 163 file.close() 164 except: 165 print "Skipping " + existingFile + " (couldn't compare file size)" 166 return True existingFile isn't defined anywhere. good job though 
Thanks for catching that, fixed and updated!
No problem! Have you seen pylint? it's available through pip. It checks your code against standard formatting and can help catch little errors like that. pylint -E file.py will show you just the errors, but everything else is worth looking at too. [R]efactor for a “good practice” metric violation [C]onvention for coding standard violation [W]arning for stylistic problems, or minor programming issues [E]rror for important programming issues (i.e. most probably bug) [F]atal for errors which prevented further processing
Nice, I was familiar with lint for C++, but I didn't know about pylint. I could definitely use a tool like that, so I'll check it out.
"Pockemon exception handling" sounds cooler. It's named this way cause you gotta catch them all )
Django might be a good option if your site will have a lot of common stuff, like users, an admin interface, saving images for later use, stuff like that. If it's going to be a simple interface, I'd probably look into either Flask or Bottle + SQL Alchemy (if applicable) + Pillow.
Thanks for the suggestions. This is a simple application, and I would like to keep it lean if possible.
I assume you know how to generate the images because serving the result is the easy part. (check your caching headers though) django can certainly do it but it may be overkill. You'd get django.forms and possibly the ORM to (let users) slice the data but a whole lot else you probably won't need. bottle and flask are other options (and there are several more). These combined w/ WTForms (I have no experience w/ it but I understand it does much the same as django.forms) can help sanitize user input.
Thanks, I think I'll start looking at Flask and Bottle.
The battlelog is written in python already using the http://www.planetframework.com/ by http://www.esn.me/
I'd use either PIL or Pygame to generate the image, and Twisted's web interface to server the image. But if creating the image takes to much time then the asynchronous nature of twisted may hold you back.
 class decorator(object): "Let's take the magic out of decorators with arguments" def __init__(self, foo): "Called when the decorator is created" self.foo = foo def __call__(self, f): "Called when a function is decorated" @functools.wraps(f) def wrapped(*args, **kwargs): return self.foo, f(*args, **kwargs) return wrapped @decorator(1) def return_two(): return 2
Compare that to: @decorator def prepend(call, foo): return foo, call()
I'm in, I know python, html, and css, and would love to learn more. For the structure I like the subreddit idea. 
Sounds good to me. I already know Django and Javascript. but I'm not so hot on any js libs. I'm perfectly willing to tutor a few topics as well, if you like. Addition to your edit: Why set up a blog when we can just set up a sub-reddit?
So my opinion is the opposite of what most people say in here. A lot of people say Django's too big or whatever because it has a lot of included components and therefore Django is not a good fit for small projects. In my opinion, your reasoning should be the opposite. Small projects really don't require the flexibility of loosely coupled components frameworks like Flask give you. Django would allow you to skirt around the issue of a small codebase and a small time to development by filling in a lot of the blanks easily.
Bullshit. "Pythonic" is extremely subjective. Some people pretend it means "passes PEP8 inspectors" but they'd be lying.
Yeah - use [python for facebook](https://github.com/pythonforfacebook/facebook-sdk) to get access to facebook via python.
if you except: pass, consider using contextlib.suppress
&gt; I like the way Windows helps me every step of the way... Until their pre-packaged list of things you may or may not want to do with your computer runs out and you're left wishing you actually had a machine you could work with.
Thanks. The image will be generated by some 3D rendering code, which already works as a standalone.
Checkout Tinyrpc https://github.com/mbr/tinyrpc it is also minimalistic, supports json-rpc2 and is well divided in transport, protocol and dispatcher. 
I have a scientific data visualizer in Django using matplotlib. I basically create the images on the fly whenever an image file is requested, based on its name. The trick is to just threat image files as python files, which is pretty much the basic for any operation. The image itself only exists as a data stream, never as an actual file. All data resides on a external database. Unfortunately I did it in my first week programming in Python, so the code looks terrible.
Funny I was thinking of writing something like this last week. I'm not sure how much I like moving args and kwargs to that call object but I guess it's needed for when you want to pass args to your decorator. Nice one
How many sessions so far? Since you said you're tutoring him, I am inferring that there has been at least one. What is his comprehension currently? What have you gone over with him so far? Did he struggle? What exactly does thinking computationally entail? There are many factors to this and it might help to pinpoint the exact goal first. I would say let the code be the teaching tool. Teach him to be very liberal with the print statement so that he can see what's going on. DO NOT do a bunch of "Enter XYZ" prompting programs where you take user input. It's a waste of time initially. You want to be manually changing the value in the code - running it and seeing what changed - and repeating a lot. This is slowed down drastically with user-input style teaching. Make user input a specific topic that simply focuses on getting various user inputs and explain to him that he's not to use it while developing the program because he will waste his time. Instead save it for when it's ready for use.
Please treat this as a fun hack and don't ever use it in production code.
I would use the turtle module. Do a search for "python turtle module tutorial" this will turn up a good amount of resources. The premise is that you place a turtle on a canvas and use functions to control where the turtle walks. If the turtle is using a pen to draw as it walks, etc. The idea is that you teach the student how to draw shapes programatically. For example, you can for example create for-loops that have the turtle walk 50 pixels and turn left, repeating this 4 times would make a square, etc. The module is included in the standard library (also a plus) You can level up these lessons for example on every 3rd iteration of the loop the distance the turtle walks increases by 10, and repeats like 100 times. this way the turtle is actually walking in a spiral because the sides of the square grow. Doing circles may be hard because of notions like PI not being clear to children that young (computers often use radians) My advice would be to do the programs for the shapes yourself. Then have the student experiment with tweaking the variables. There may be some good tutorials that actually have a decent curriculum using turtle already. EDIT- also the turtle module supports setting your own graphic for the turtle ( I recommend doing this, you don't have to use the turtle you can use any small image. Meaning you can make the atmosphere more like a game where the student is controlling a robot inside the computer) 
That's just asking way too much of me. ;)
Gotta use it *somewhere* ! ;)
Pose some questions for him that can only easily be answered by writing a computer program. That's the best way to motivate learning, in my opinion, make the student _NEED_ to learn something in order to answer a practical question. Example Question: What is the sum of all the odd numbers between 33 and 1333? Example Answer: total = 0 for i in range(13, 1333, 2): total += i print total there's nothing intrinsically too complicated for a third grader in there but it will help teach about the control flow structures of programming (for loop in this case), and it will help highlight that computer programs are used for things that humans find too tedious to do. 
That's pretty freaking cool. I have been working on a package you REALLY wouldn't want to use in a production. A series of functions that use exec to generate numbers of variables and assign them to things.
You can follow the progress here: https://github.com/dbrgn/tangible
I would start off with MIT's Scratch and then progress to Python.
ahah you have bug.
length of writing arguments like this one: "3 words being too much to type" when even the lamest text editors have some sort of auto complete (or you could set up a template) is absurd. The most important parts of programming are thinking, more than writing. Improve on your typing speed or set proper helper tools if you think extra typing slows down your process.
Please note, this is just some silly experimentation, any argument from typing efficiency is completely in jest. No need to take it seriously :)
You wouldn't even write it with try/finally. This is what the with statement and context managers are for.
Open up a Python interpreter, and run: import this That outputs the Zen of Python, which is the basis of Pythonic thinking. It's a bit abstract, but you can pick up the practice of it easily. Things like "flat is better than nested" mean that if you have if statements inside of for loops inside of with statements, you probably need to refactor your code by splitting the inside bits into functions. Basically, build your code to make full use of Python as a language, and the standard libraries (esp things like itertools, functools, contextlib, etc), while making sure your code is really simple to read and understand even without the help of IDEs, and you're most of the way to being Pythonic.
Python is fairly good at systems level scripting on Unix-like operating systems. I use Bash until I require an associative array, then I port to Python. This is usually around line 5 of the script. (Bash does associative arrays but I prefer Python.)
Thanks for the help :D
I taught Python to a group of 4th and 5th graders last year. It worked fairly well. I used some exercises from [Invent Your Own Computer Games With Python](http://inventwithpython.com), which kept them interested. I think the people recommending turtle have good points as well. However, I also highly recommend the [Scratch](http://scratch.mit.edu) programming language. When I look at Scratch, I see lots of limitations as to what I can define and use as a programming language. However, to the eyes of an elementary school student, being able to change the icons and backgrounds is a big deal, and the sections I did on Scratch were *way* more successful than Python.
To add to the above points, Python is best at being a human-readable language. The original insight was that we spend a little time programming and a lot of time debugging, essentially looking at other people's code (or re-reading our own). That makes Python applicaitons easy to maintain, debug, and extend. 
Python is good at anything that do not require maximum performances, real time capabilities, legacy stuff constraining language, or specific libraries/elements not accessible from Python in a decent way. As others said, Python is also a good glue language. That can be said from many other languages such as ruby, of course Here at work we use python for anything that do not require a specific language, mainly because the result is pretty readable, more and more people know python enough to hack scripts, and it run nearly flawlessly on Linux and Windows. AFAIK, we had to port only one program to C/C++ due to performances. In all other cases, the python proof-of-concept program ended as the final product, for the lack of any reason to do otherwise. 
Really? When I first looked at decorators, I thought: it's that simple? Neat. These "painless" decorators just make me think: what is going on here?
Using ABCs to me always feels like you're trying to create a weird sort of static typing in a language that was never designed to have it. It's not real static typing in any case, the error is still encountered at runtime and could easily still be missed if you happen to not instantiate the class that run (actually, is there any reason ABC metaclass doesn't throw an error on class definition rather than instantiation? This seems strictly more useful, and it should be easily possible with metaclasses... I suppose people still want to add methods to their classes dynamically?) The NotImplementedError solution seems much more pythonic; if a particular class's method that you haven't implemented is never used in the program anyway, that class could be said to implement the specified interface for the purposes of that program. I won't go out and say "you should never use ABCs," obviously it's your code and it's worked out quite well for many people. What I would say is, if you feel like you really need that kind of safety in your program, perhaps you should be considering using a properly statically typed language?
This is the right way to start. My sister started learning to program with the LOGO turtle module (the python module is the same) around 3rd grade, and it was the perfect level of fun/programming for her.
Because sometimes ye cannot get ye flask?
Python is very quick to write, which means that it's much easier to get an idea from your head down onto paper, as it were. By the same token, it's very quick to rapidly prototype many ideas, even if you later want to cement them later into a faster language.
http://code.google.com/p/rur-ple Used successfully in many schools.
fair enough, I was just making what I consider an important point. All too often, I see arguments of length or speed of writing when that's not really relevant. It's those type of arguments that lead to chaotic use of single letter variables, for example.
The real win of that article is the comment that points out the `wrapt` library. http://wrapt.readthedocs.org/en/latest/
You shouldn't need to use a list comprehension here. The code you provided will make a list with the exact same elements as the list range generates. Also you can do: sum(xrange(33, 1333, 2)) Using xrange instead of range should be more performant in that it yields each number from the sequence as needed rather than building up a complete list in memory. Keep thinking with comprehensions though, they're pretty darned powerful!
Take someone without a lot of programming experience. Teach him a programming language to perform a task. Read the 2000 lines of code he's written. With Python there's a much higher chance this code will be intelligible than in any other language I've ever encountered.
Unlike a lot of AI frameworks in python, this one is actually well coded and documented. Nice work.
\*Pokémon
[**+TurboGears**](https://plus.google.com/115723575598932631951) [_2013-11-04T17:18:55.790Z_](https://plus.google.com/115723575598932631951/posts/K7Mc8vYz76S) &gt; &gt;TurboGears 2.3.1 is now available on PyPi! &gt; &gt;Major Changes: &gt; &gt;* Improved Hooks support, tg.hooks is now in charge of hooks management and provides a clear API to create custom hooks and notify them. Documentation is available at [http://turbogears.readthedocs.org/en/latest/turbogears/hooks.html](http://turbogears.readthedocs.org/en/latest/turbogears/hooks.html) &gt; &gt;* Configuration Milestones: Configuration process is now divided in milestones for which it is possible to register actions that will be formed when the milestone is reached [http://turbogears.readthedocs.org/en/latest/turbogears/configuration/appconfig.html#configuration-milestones](http://turbogears.readthedocs.org/en/latest/turbogears/configuration/appconfig.html#configuration-milestones) &gt; &gt;* Controller Wrappers and Hooks can now be easily registered for a specific controller, this makes possible to customize third party controllers behavior without subclassing. &gt; &gt;* Expositions are now enabled lazily when the renderers_ready milestone is reached. This unbinds the order of declaration of controllers (and expositions) from the configuration process &gt; &gt;* Application Wrappers are now resolved lazily when all of them are registered, this makes possible to register wrappers in a position that depends on wrappers that will be registered later &gt; &gt;* Validation Errors Reporting has been cleaned up and validation errors and informations are now all reported inside request.validation (tmpl_context.form_errors and tmpl_context.form_values are still available for backward compatibility) &gt; &gt;* Streaming responses support has been improved to cope with custom WSGI servers like the one provided by gevent-socketio &gt; &gt;* Usage of request local objects has been reduced even more inside the framework to provide faster and more decoupled parts &gt; &gt;* In the process of providing a cleaner configuration flow some AppConfig methods which are not supposed to be overridden has been renamed to make them "private". &gt; &gt;Most projects should work out of the box, upgrade documentation is available at [http://turbogears.readthedocs.org/en/latest/cookbook/upgrading.html#from-2-3-to-2-3-1](http://turbogears.readthedocs.org/en/latest/cookbook/upgrading.html#from-2-3-to-2-3-1) &gt; &gt;Complete ChangeLog is available at [https://raw.github.com/TurboGears/tg2/master/CHANGES.txt](https://raw.github.com/TurboGears/tg2/master/CHANGES.txt)
I'd agree with this. I teach with Python, but I think for that age level Scratch would be better. You might check out Alice as well. That can be a lot of fun for kids.
I like the idea, I'm in
I think he was referring to your typo in the starting point of your range. (13 != 33 : ) )
Pssh, this level of hackery is nothing compared to [django-htmlpurifier](https://github.com/kz26/django-htmlpurifier). Because there's nothing wrong at all with calling PHP from Python. Did I tell you that I am using this in production?
[Our tutorial! It uses turtles!](http://opentechschool.github.io/python-beginners/)
xrange is preferred when you don't know if you will need the entire list. in this case we know that we do need the entire list so there is no reason to use xrange over range. 
How did ".... ???? PROFIT" start? I've seen it in so many places. Do you know where was the first time it was used?
underpants gnomes 
[Know your meme: ???? PROFIT!!!!](http://knowyourmeme.com/memes/profit)
I have been programming with my son on and off from the age of 9 (not sure how old a 3rd-grader is since I'm Swedish). Scratch has been working quite well. The major benefit with Scratch is that you can't do any syntactic errors so he's been able to spend a lot of time exploring it on his own. With Python we have mostly been programming together (pair programming sort of). The stuff that he has enjoyed doing the most is simple input and output, like: &gt; What is your name? John &gt; Hello John It's been cool when the machine "talks back". Doing string manipulation has also been fun, like enter a few words, the program randomizes the order of the characters and you should guess which word it was. But the most fun exercise so far has been programming a guessing game. The program thinks of a number between 1 and 100 and you should guess it. If you guess wrong the program tells you whether your guess was too high or too low. Once you guess the correct number, the program tells you how many guesses you made. After a while you realise what algorithm you should use. Now, turn the tables and write a program that guesses a number that you "randomize". My son found this to be absolutely intriguing, trying to get the program to "think" and once it was implemented (took a lot of trying) he could to compete with it. So now we are looking at implementing other small games (for example dices) and see if we can create programs that play the game. Very very interesting.
* http://www.codecademy.com/en/tracks/python * http://www.greenteapress.com/thinkpython/ * http://www.corestandards.org/Math/Content/3/introduction * https://www.khanacademy.org/math/cc-third-grade-math
https://www.khanacademy.org/science/computer-science (Python Programming)
import antigravity
I think the Python logo would look better on a t-shirt than any code you could come up with.
 SyntaxError: invalid syntax
`sum` is the name of a built-in function (ex.: `print sum([1,5,4])`). It would be better to choose a different variable name.
Already exists, but always a good one: `import this`
Coming from mostly PHP, Javascript, Java, Python is a godsend. It immediately boosted my productivity and creativity through expression due to it's intuitive syntax. I just love writing a whole bunch of python code and with my heart pounding in anticipation I click run and to my surprise, no errors from forgetting a semicolon somewhere or paranthesis but best of all is the elegant expressive freedom I get with it. "Do I think this python code does what I think it does?" More often yes without re-running, fixing stuff, and repeat. It just works. It has all the wheels invented for you, there are libraries that match up to Java, if not better, in terms of activity, readability, learning curve. I have yet to get into the OOP side of Python yet but because it's so productive and expressive, I often find for most of my projects just a procedural script is good enough. Don't get me started with Javascript....it's a nice relief after working on Meteor and node.js....I found out that the benefit from node.js vs Python Twisted or Flask or web2py is not significant enough for me to continue working with node.js and npm....because as there's lot of npm modules it's already been done in Python...."They already did it on Simpsons" as the saying goes I say to a node.js developer, "They already did it in Python". PIP compared to Java and NPM, are stable, and easy to hack....good luck with hundreds of coffeescript, javascript code using weird .prototype syntax to extend class methods....JS belongs on the client side browser not Server-side as Python is a much more elegant, mature, and an economical solution than say Jetty or LAMP or Node.js
Not code, but "You like dicts?". I've realized saying that out loud may cause confusion.
If PHP wasn't supposed to be called from python why do they both start with P?
Well, the first one's always rough... Maybe next time you should get to the meat in the video a little sooner? I shouldn't have to scan through 30 minutes before getting to the first slide... If you right-click the video and select Copy URL at current time, you can post that link next time. I am curious how well you know python to be doing this. Perhaps instead of going for a "this is feature x" and "this is feature y", you join in with the group on a simple program that you can all enjoy doing which has a design phase. With this, you give each of the students a particular section or concept to research in order for you ladies to get the program done. Then, each of you does a quick 3 minute presentation and demonstration on what was learned. This way it's less of a spotlight position with insufficient experience. Plus the group will benefit greatly by having a more collaborative environment. Try it out next time. 
Poor Tweak. 
 import this
Truly this is the Age of ReadTheDocs
I'm thinking that one might be interpreted as inappropriate for a school t-shirt, particularly with female students...
in Production, no less!
"Hey babe, you could use some decorators!"
This sounds pretty sweet. I'd participate in it!
good point, will change original post
Replacing LaTeX is a big mission, but a Python-based tool that can produce decent PDFs without the huge complexity of TeX is interesting. Have you thought of writing an IPython Notebook converter? About the performance: have you profiled it, to see which bits of the code are taking the most time?
I felt it necessary to give you a shining spot on the /r/ProgrammingHorror front page... You now have your [own thread](http://www.reddit.com/r/programminghorror/comments/1pwe6i/because_theres_nothing_wrong_at_all_with_calling/)!
Great, thanks. I created a subreddit just now (see edit above), and will start posting...something...soon. Thanks for the suggestions. It's totally amorphous right now, but it's great to have some camaraderie. Stay tuned. 
Yep, I went with the subreddit idea (see edit to post). 
dicts['head'] = 'you' 
OK, subreddit posted. http://www.reddit.com/r/30minPyWebDevClub/ Stay tuned on that frequency...
Great, thanks! And subreddit posted: http://www.reddit.com/r/30minPyWebDevClub/ Stay tuned on that frequency...
Right you are! http://www.reddit.com/r/30minPyWebDevClub/ Stay tuned on that frequency...
OK, great! The subreddit is up: http://www.reddit.com/r/30minPyWebDevClub/ Stay tuned on that frequency...
Sure thing. The subreddit is now up: http://www.reddit.com/r/30minPyWebDevClub/ Stay tuned on that frequency...
Awesome, thanks. OK, subreddit is up: http://www.reddit.com/r/30minPyWebDevClub/ Stay tuned on that frequency...
OK, great--subreddit is up! http://www.reddit.com/r/30minPyWebDevClub/ Stay tuned on that frequency...
The subreddit idea was the big winner. Sounds fine to me. Thanks very much for the offer to tutor and help out--that's great. The subreddit is up: http://www.reddit.com/r/30minPyWebDevClub/ Stay tuned on that frequency...
Trello is a good idea, too. For now, it seemed that most wanted a subreddit, so I just did that. I'm totally playing by ear. We could try other tools later on. Thanks, and here's the subreddit: http://www.reddit.com/r/30minPyWebDevClub/ Stay tuned on that frequency...
Great, see you here, then: http://www.reddit.com/r/30minPyWebDevClub/ Stay tuned on that frequency...
Awesome, head over to the subreddit and I'll be posting more at some point soon. http://www.reddit.com/r/30minPyWebDevClub/ 
 from clothes import Shirt
Wow, lets not go throwing NameErrors around! dict(head='you') 
How about just three greater than's: &gt;&gt;&gt; 
I think technically you still use less memory with xrange in this case because the entire list doesn't need to exist at once, but for such a small list it's a trivial difference.
Expletives are insufficient here. This is one of the most heinous pieces of Python code I have read in over 10 years of using this language. I never considered using `ctypes` to monkeypatch a base type. Terrifying. Sick hack!
super()
gethostbyname() is slow. It needs to talk to a name server which will probably have to recurse its way down the internets many times. We're talking about easily tens of milliseconds of networking overheads. Doing a bit of math however takes, at best, nano-seconds. It is quite possibly more expensive to do the context switches into kernel land to move the actual request into the Queue then to compute a little bit of trivial math.
How about this? class Programmer(Human): def __init__(self, name): self.name = name self.awesome = True me = Programmer(input("Name: ")) P.S. That's Python 3, some adjustments may be required for Python 2
So far my favorite one. Although I'm stuck between that, and "from closet import shirt"
Well done, bravo! The old theme was good too, of course.
Figuerd this may be appropriate: A few other people and I *just* wrote a FUSE filesystem with python this weekend at a hackathon. It's not super polished - we were on a strict deadline - but I figured if people click on an article about a FUSE filesystem in python on reddit they may be interested: [redditvfs](https://github.com/redditvfs/redditvfs). The idea is you can access reddit through a filesystem - subreddits are directories, you upvote with `echo '+1' &gt; votes`, etc. EDIT: `cat` -&gt; `echo`
scraping web pages for pictures of cats, but all enterprise and shit. also... science
&gt; if you except: pass /killyourself
indent = 4*' '?
Fucking brilliant! 
Isn't FUSE already slow, without running in Python?
My 7yo has been playing with Hopscotch on the ipad... 
(can't say how much difference Python makes) You won't reach the same speed as a kernelspace driver, yes. Depends on your use case if that is a problem. (e. g. my online backups would probably not limitied by FUSE, but still by my internet connection) -&gt; if you write a disk-filesystem or really need highest performance, learn how to write a kernel driver. If not, why not start with FUSE and maybe even Python and try if it is enough?
Python is a good fit for this. I think there already are reddit modules for Python, file download in simple form is already in the standard library. So I would look at what format I get from the API, then figure out how to parse that (HTML? then use beautiful soup) and get the URLs to download. Probably distribute the download over multiple Threads with a Queue for parallelization.
Who do you know that smugly looks down on other languages from a python perspective? You're thinking of haskell or smalltalk maybe.
An entire web framework? (in a small font, multiple columns but still...)
If they are using your library without checking for that kind of magic, why couldn't you pwn them without going through all the trouble of overriding system libraries. 
I don't understand... Python is very insecure as it is, isn't it? How would allowing callable modules make it any worse? If you're importing malicious modules you're fucked either way, or am I wrong?
 python -m SimpleHTTPServer 8000
Nice. But I worry that I'm letting anyone type in a name for 'me.'
Thanks. I am looking at Bottle for now, but I am sure I'll be looking into twisted at some point.
[Think Python](http://greenteapress.com/thinkpython/html/index.html) and [Dive into Python 3](http://www.diveinto.org/python3/) are two good books both available freely online.
One thing I really didn't like about raising NotImplementedError in the baseclass is that you have to know not to call super() in the subclass. Still waiting for my employer to move off of 2.5, but the abc module seems to work with super().
`Production Hypertext Production`?
Good work by good people lead by a good man. Congrats.
Well, conventional I/O is cooperatively scheduled, like node.js or fibers or C# await, so can involve a lot less scheduling overhead. I don't know much about FUSE, but being in usermode would necessitate process scheduler overheads that are pretty high already. Wasn't this one of the main reasons for Linux following a monolithic kernel design?
Check out the [docs.](http://pythonhosted.org/tweepy/html/) It's really easy, I made a twitter bot with this library.
That is incredibly cool.
I have to say that this actually looks impressive; LaTeX has a lot going for it, and most efforts to "do better" fall well short, but this actually seems pretty promising. The catch, of course, is that TeX has decades of packages accreted that let it do, well, everything and that can be hard to compete with. This looks like a pretty solid core however, and looks like it would support packages and extensions well. As for the performance, which the author is currently disappointed with ... I dare say some profiling and Cython (or even just coding a few bits in C) can remedy that, and that can be done as and when needed. I look forward to seeing where this project goes.
thanks! this seems to be the best one out there.
 python3 -m http.server
Thanks!
I would change your example... def greet(name): print 'Hello, %s!' % name or def greet(name): print('Hello, {}!'.format(name))
 self.shirt = Shirt(color='blue', size='L') self.pants = None 
 for item in ['coffee', 'beer', 'bacon']: consume(item) 
you could try [one of these 'one liners'](https://wiki.python.org/moin/Powerful%20Python%20One-Liners) **edit**: another idea would be a [short quine](https://www.google.de/search?q=python+quine)
not bool(False or False == False) 
The official tutorial, Dive Into Python, and then the book Learning Python.
My favorite python shirt: from __future__ import braces
Running .net or java on a microcontroller is like trying to compile python/ruby/lua/go/perl/php/insert-high-level-hipster-language-here to javascript for use in a web browser
The most important thing I used to learn Python (and any other language for that matter) was a useful project. If you've got that then you can't go wrong.
http://www.maydesigns.com/ - That's written in Python 2.7 w/Django, Almost all of the actual content is dynamically generated based of user input. I am no longer associated with it, so specifics would likely be some sort of contract/NDA violation.
Python wasn't my first language, so I just used Stack Overflow mostly, and google. I had to write a script, so SO showed me a hello world program, then I wondered why my print statements gave me exceptions, and SO told me I was using python 3.x, etc until SO started telling me things like why python inheritance doesn't act like C++ Like /u/silmaril8n said, the most important thing to learn a language is a project to motivate you, the rest will follow from google.
Python isn't used to make professional games. It's a nice language to write in, but that's just not it's strength. 
You beat me to it...
 def day(life): yield life
I have always just googled, which usually led to the official documentation, then i would look for examples (why does the official documentation not have examples most of the time?).
I'm impressed. I hate fighting with LaTeX. As long as you can provide good support for writing research papers, maybe I'll end up writing my dissertation in this :)
**import this**
That sounds interesting. You should consider putting it up on the web.
[done](http://www.reddit.com/r/flask/comments/1pv9xi/flask_plugins_you_shouldnt_start_without/)
I suppose this is a good example, it was posted here a few days ago. https://github.com/ddelemeny/pyjrpc The problem is mapping a string to a function, you might be inclined to write something like this def process(method, args): if method == 'add': add(*args) elif method =='sub': sub(*args) But with dictionaries you can use something like this methods = {'add': add, 'sub': sub} def process(method, args): methods[method](*args) The second version doesn't require the if block to be hard coded and the dictionary mapping strings to functions can be passed to the program as a argument.
In languages like C++ you tend to find yourself writing classes (or structs, same thing) left and right. For example, if I had to store a list of names (first and last) and ages, I'd probably write something like this: struct Person { std::string first_name, last_name; unsigned age; } ... std::vector&lt;Person&gt; people; Person p("Bob", "Smith", 23); people.push_back(p); In Python it's completely unnecessary to write a class to do things like that, you can just use a dict: people = [] people.append({'first_name': 'Bob', 'last_name': 'Smith', 'age': 23}) Dicts are like ad hoc structs that can have any number and type of members. There's no reason to have to decide up front what they're going to hold; if you want a new member, you just add it. They are incredibly versatile for clumping various bits of data together, and they should form the core of all your data structures. Classes in Python are in fact just some syntactic sugar on top of dicts -- every time you access an instance method or instance variable, it's really just a dict lookup. And just look through the standard library at all the APIs that take or return dicts (or more generically, *mappings*, an abstract type of which `dict` is a particular implementation.) 
from this import me
I would wear this one: from Reddit import frontPage def wittyOriginalIdea(): for post in frontPage: yield post Reddit, cynicism, and a generator function. 
Interview questions. If you have extensive knowledge of the functions available, any interview question can be solved easily and quickly. I program in C/C++ most of the time, but if I get asked an interview type of question, I always go for python. Question: Write a function, that when given an array, prints all possible combinations of elements. Python: from itertools import permutations def combo(array): for case in permutations(array, len(array)): print case C/C++: Nope. Not even close.
http://upload.wikimedia.org/wikipedia/commons/a/a3/GrassRake.jpg
 """ I have written a truly remarkable python script which this t-shirt is too small to contain. """
I'm still quite low on the Python skill level, too many off periods. I have read most of Learning Python (older edition on 2.7 I think), did some of LPTHW, did some of the [udacity intro to CS](https://www.udacity.com/courses). A few weeks ago I finished [Learn to Program](https://www.coursera.org/course/programming1) on coursera (highly recommend this), and at the moment I'm half way into [Interactive Programming](https://www.coursera.org/course/interactivepython) which is fun and informative. The good part about these online courses is that you get some specific goals each week, that are realistic. When I try myself to start a project its either to hard or not interesting to me. Since there are so many modules and documentation available for Python its easy to get overwhelmed in the amount of options you have. Biggest fail I had so far was attempting [Coding the matrix](https://www.coursera.org/course/matrix). This course was WAY over my level. The presentation video they had made it look much easier than it is. They downplay the need of prior linear algebra knowledge, and its probably a good idea to have at least some university level math under your belt.
Not even PEP8 ...
Awesome work, I like the idea of restructured text input. Seems like pdf.js really doesn't like the output files though, might be something to look into eventually...
Bit late, but hopefully helpful. I'm not sure modifying Calibre is the best solution for your problem. What I'd recommend is using separate dictionary software, or different reading software (Calibre's built-in reader is awful). Amazon's Kindle reading app, for example, has *truly excellent*, single-language dictionaries built in. You just right-click on a word, and up pops the Oxford English Dictionary (or the Duden if the book is German). You'd have to make sure Calibre has the ebooks in .mobi format (or another Kindle-supported format), but that's simple enough.
Oh my god! As a female I can literally feel your rape stare. THIS is why I need feminism in programming. SUCH a misogynistic pig!
Yeah, it was like that for me mostly, but I was lucky that I accidentally landed on [Idiomatic Python](http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html) and some page explaining *for comprehensions/gen expressions* and itertools early in my relationship with Python. That was huge help because after I learned this "basic" stuff reading trough SO answers was breeze. [Ipython Notebook](http://ipython.org/notebook.html) is super useful for trying out language features.
fork my dongle?
 pass 
I'm pretty sure Eve Online uses stackless python for a good part of their code.
Recently I wrote very similar script (~60 lines of code). The only module i used was requests for downloading images and getting api requests. You should also look into reddit and imgur apis (most of the images on reddit are hosted on imgur). http://www.reddit.com/dev/api http://api.imgur.com/ 
I would say the classes and functions are less than readable right now: http://django-payments.readthedocs.org/en/latest/modules.html
This is slightly unrelated, but does anyone know how to create a block device from Python?
(Engrish alert) SO is a place for specific questions with specific answers. Yours is pretty wide, because it needs a deep explanation of many complex concepts (state, sync, lag compensation, ...). You need to learn more about game networking. I recommend you to find a specific tutorial on real-time game networking. If the game is real-time, you probably want to have the game state updated in every client and server, and use the network connection to confirm and resync the clients. Actually, is a lot more complex than that... You need a tutorial or some course about it. And you will need to change stuff in your program. Lots... Anyway, 1-2 seconds is a lot. Something else is happening there...
"You like fish dicts?" "What are you, a gay fish python dev?"
Maybe try building a statistical engine and then use it to solve some computational biology problems at http://rosalind.info/problems/list-view/ Some problems will be better solved with Dicts and some won't, either way there are some cool problems to solve.
ಠ_ಠ Why is it tagged xhamster?
You could, potentially, unwittingly put stuff in the importing module's namespace even in Python. It's just not the default like it is in Ruby and co.
Write a FUSE filesystem exposing a single file and attach it to a loop device :-)
screenshots wanted!
I originally meant it as a joke and went looking for a more serious alternative. It turns out that this is probably the best way to do it. Certainly the most portable: http://en.wikipedia.org/wiki/Filesystem_in_Userspace#Ports 