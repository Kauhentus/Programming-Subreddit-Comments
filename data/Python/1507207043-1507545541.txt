&gt; In the doc, examples are often given in Python command line interface format. Good! Does one need to read more? 
&gt; Dropbox I know is one. They actually ported the code to Go - https://blogs.dropbox.com/tech/2014/07/open-sourcing-our-go-libraries/ : &gt; About a year ago, we decided to migrate our performance-critical backends from Python to Go to leverage better concurrency support and faster execution speed. This was a massive effort–around 200,000 lines of Go code–undertaken by a small team of engineers. At this point, we have successfully moved major parts of our infrastructure to Go.
Moving an existing codebase to Python 3 from 2 can be a daunting task, These resources were created by fellow developers who've previously gone through the process and have advice for making it less painful. Python 3 Porting is an entire book with details for how to upgrade your existing projects and libraries to Python 3.x. Moving from Python 2 to Python 3 is a PDF cheatsheet for porting your Python code. The official porting code to [python rstrip](http://codinglio.com/strip-python-lstrip-and-rstrip/) page links to resources on porting Python code as well as underlying C implementations. There is also a quick reference for writting code with Python 2 and 3 compatibility. Django and Python 3 How to Setup pyenv for Multiple Pythons is a screencast showing how to run both Python 2 and 3 for different projects using pyenv. Upgrading to Python 3 with Zero Downtime supplies advice on transitioning a large existing Python 2 web application to Python 3. Their process involved upgrading dependencies, testing and deploying the new version before going back to clean up unnecessary code created by the transition.
If you simply use the system's *apt-get install* mechanism to install python3, you will not get the latest version. You might only get a Python 3.5.x version. These are my compilation notes: [Build Python 3.6.3 on Raspberry Pi 3](https://github.com/jftuga/universe/blob/master/Build_Py3_on_Rpi3.md) 
[removed]
Good article
The reason a lot of doc is written in command line notion is because that syntax will generate a test if run in doctest.
Their Pycon talk on the whole transition (+ why they chose Python in the first place) is pretty awesome. Link from when they start talking about Python 2 -&gt; 3: https://youtu.be/66XoCk79kjM?t=720
[Instagram did it](https://www.youtube.com/watch?v=66XoCk79kjM)
Thank you for the suggestion I have tried this way from cpython cimport array import array . . cdef array.array lst = array.array ('i',[1, 2, 3]) cdef array.array combs = array.array ('i',[]) but its showing this error &gt;TypeError: an integer is required Do you have any suggestion for alternative to itertools and xrange 
The entire visual effects and animation industry will start porting from python 2 to python 3 next year. That's a lot of code to port during many high cost productions so it will be an interesting time
Great reading, we always say that Python is "batteries included", but sometimes it's hard to include those batteries! ;)
This question is much better suited for /r/learnpython But it sounds like you answered your own question. Flask (or Bottle if you want to keep it even simpler) would be easy enough. Just a simple get and post method to change the number. You would probably want to make sure to launch it in its own thread though. Otherwise you will block at the launch of the web service. 
Wow, I did wonder when Maya would move.
Companies get a lot bigger than Instagram. Coke, IBM, GM, GE, etc.
this does not help me.I know this is some kind of python error, generally it should work. it is not an out of bag error. can you help me to find cross_val_score using a randomforestclassifier.
TCP socket
The VFX reference platform has it scheduled for next year. Add a year or two to that as studios make their slow shift over to it. I'm thinking by python 2 EOL we should be done.
I was speaking in terms of daily traffic, but yes you are correct.
That's only one suggestion in the linked article. But of course you're right, that is an implementation detail in doctest. However I don't really see a benefit in using docstring examples as tests for the code.
Yeah, in my opinion the other sections are more interesting and constructive. The first suggestion doesn't really belong at the top of the article.
It let's you show the user what the code should do, and allows you to verify that it actually does it at the same time. It's not ideal for every situation, but when it suitable it's a very efficient tool.
If we're talking web-platforms: Facebook, WhatsApp, Google and so on. Waaaay bigger than Instagram. Still an impressive rollout though.
Which shouldn't be a problem for most users, though? ;)
I agree, its a nice feature to have but you sacrifice being able to easily copy and run the examples which is an unnecessary irritation for beginners. At least Ipython has a solution for this: it removes the "&gt;&gt;&gt;". 
How do they integrate python into a web service? What framework?
yeah thats my next stop for sure. like I said, im just barely scratching the surface of Python. 
ill tryin that and see what comes up.
Benchmarks? 
Either is Nvidia it seems. 
I don't think most people realize how industry really works. Most Fortune 500 companies don't advertise this stuff let alone tell people what code base they're on.
What is Traceback output?
Correct.
I think they're using Flask (I think they transitioned away from Django). I'm pretty sure they're pure Python except for the bits that need to be optimized. Then they fall back to Cython? I'm forgetting details of the PyCon 2017 keynote. Search that for more details.
There are microbenchmarks at http://speed.pypy.org whuch show a 6-7 time speed up, The question is how much your code can be jitted. The JIT compiler cannot "see" insude of code compiled in C, so on workloads that heavily depend on c extension packages like NumPy you may even see a slow down if the code crosses the python-to-c border often. Please give it a shot in your real-world code and lets us know what happened
It doesnt give any errors
Python 2 to 3 migration is a big effort at Yelp, and they have released some tools to help with that effort on [the yelp github page](https://github.com/yelp). EG: https://github.com/Yelp/undebt EDIT: Actually I think some of the engineers had released some of the tools, not all by Yelp itself. For instance, Anthony Sottile released some, like https://github.com/asottile/pyupgrade
Hoorah, I shall be trying this with a bunch of streaming ETL workloads tomorrow. We saw decent returns on 5.8 but ended up adding a whole bunch of Cython to speed up some transformations (basically just did them in C) so had to ditch it. Turns out you can now have your cake and eat it.
&gt; The JIT compiler cannot "see" insude of code compiled in C, so on workloads that heavily depend on c extension packages like NumPy you may even see a slow down if the code crosses the python-to-c border often. Disclaimer: I am not a PyPy user, I use Numpy and Pandas a lot. Otherwise, we use Python for Django rest apps, and general helper functions here and there. Considering that Pandas relies heavily on NumPy, what's the benefit of adding support to it? Is there a reason for me to try PyPy for my compute-intensive code? 
Please let the PyPy team know on IRC #pypy or pypy-dev mailing list how it goes. Good or bad we love to get feedback about real world usage on complete systems. We have ideas of how people use PyPy, but data on open-source usage is hard to come by, and every user is a valuable data point
Thanks!
Kaggle, but its not really about Python
They're still using Django. [They upgraded from Django 1.3 to 1.8 during their Python 2 to 3 migration.](https://youtu.be/66XoCk79kjM?t=1427)
If your code works fine as it is and you are happy with how it looks, I think you won't gain much from PyPy. There are algorithms which cannot be written in a Numpy-compatible way, and there are others where you can do it, but the resulting code looks ugly. Python is about readability, and I always felt that Numpy, as great as it is, is a step away from that. That's why I would love to see more PyPy.
We recommend you try it out and let us know. The cost is low, You need to set up a virtualenv and pip install into it your third-party stack, and then run your tests. You may be surprised how much time pandas spends in python massaging data around, and it may change the way you view the whole "do I restructure this to be fast" second pass through your functioning prototype code. What would your day look like if that prototype was fast enough?
No luck... lt does not like file_name.re.sub
Pandas still does a lot of stuff in Python, so it's resonable to expect some speedups. However, depending on your workloads, it's quite possible that the contexts switches eat up all the benefits.
If PyPy some day works as intended, then we will not need Code compiled in C anymore. :) Or at least much less.
Does PyPy support PyQt?
TypeError: 'str' object is not callable
I would suggest doing those transformations in C and then calling them with cffi. That way you can have both PyPy speedups everywhere else and have carefully tuned C code for stuff that you want hand-controlled
No
Interesting. Is there a particular reason why things are moving now?
Just great, a 12 year old article written by a complete burke.
First thing - calm down. If you need a 1 hour SLA, you need to be paying someone to provide it. You are relying on the kindness of strangers to assist you here and at those other sites. Second thing - what is happening? I don't see a good description of what is and is not happening on either of those. You mention part of the information in those, but not enough to give me the full picture.
Python 2 has it's end of life coming up and the VFX reference platform agreed that it's basically now or never.
Not yet? Any UI frameworks that work on PyPy?
Yes its old, but (in my opinion) many of the criticized points are still valid. 
Does it support SWIG based C/C++ wrappers ? 
Well shit, guess I won't try this out. 
Read a file every second containing the constant. Change the file using flask. Don't overcomplicate this.
&gt;Let's try again, why don't you do something about it on the Python bug &gt;tracker? I'm sorry; do I have commit access to the Python source code? There's nothing that needs to be done on the bug tracker. &gt;Did you bother to read the entire Python issue? Did you see this &gt;msg287407 which says I don't have time to fix the issue right away. Yes, that was back in February, and whatever else that person wants to change, the patch the Gentoo people came up fixes the compilation error right now. Again, the compilation fails due to an issue with **nested comments**. &gt;Python's copy of blake2 needs some manual massaging and tweaking.? It might, but that has nothing to do with what causes the compilation error. I've got the source code on my machine. I've applied the patch. The patch solves the compilation error. Any other code cleanup this person wants to do is a separate issue that has nothing to do with the compilation failure. &gt;You expect somebody to fix it A gentoo maintainer already fixed it; I just want someone with commit access to apply the patch. &gt; but can't even be bothered to flag it up, bloody marvellous, but you do &gt;have time to complain about it. What exactly do you want me to do? The bug was assigned to someone who said in February that they want to do more work on the unit and don't have time. It was never assigned to anyone else, despite being initially classified as a blocking bug (which makes sense if it prevents compilation on a whole class of CPUs). The only thing that's been done is to downgrade the status so they could release two more patches without fixing this problem. And yet again, the patch to fix the problem was already created and submitted by Gentoo about eight months ago. How do you propose I remedy this situation? There's already a fix, I can't assign the bug to someone else with the time to apply it, and the powers that be decided to downgrade the status of the bug with the thinking that since it didn't block 3.6.1 it shouldn't block anything else either. 
because it's much limited? 
/r/learnpython is the best place for this :)
https://bitbucket.org/amauryfa/wxpython-cffi uses cffi to interface with wxpython. We recommend cffi instead of SWIG. It is both fast and fully supported while SWIG is neither.
&gt; the confusion between the various string types needed to die, for instance As opposed to the confusion between the [4](https://www.python.org/dev/peps/pep-0498/#abstract) different string formatting methods now available? 
Just check it out, i think it will do, Thank you! 
Okay, thanks for answering. wxpython isn't very good unfortunately. One day, I hope that we will have a more Pythonic UI library than PyQt. (E.g., it would use the new asyncio event loop and context managers instead of begin/end methods.)
Looks good. If you want some code critique post this on /r/learnpython. 
Thank, I will.
I suggest moving on to Python3.6 as it has an import backwards compatible change `f"{str}ings"`. As of now most Python3.7 code will run on Python3.6 but not the same for Python3.5
&gt; What would your day look like if that prototype was fast enough? All your prototypes are fast enough if you're too lazy to optimize (like me!)
OK I'll see if I can reformat your code, because I think I see what you're asking. If I'm wrong, let me know. class Character(object): def __init__(self): self.name = name This example will not work because `name` (on the right side of the equal sign) is never declared. `self` is declared in the function's arguments, so it exists. A single equals sign does an __assignment__ operation rather than a comparison. meaning the value on the right gets assigned to the value on the left. Now looking at your second example... class Character(object): def __init__(self, name): self.name = name In the `__init__` function, `name` is declared in the arguments, so it exists in the space inside the function as well as `self`. 
Yes, as opposed to that. The formatting methods are all obviously visually distinct (unlike hidden type information on stringlikes), and don't cause hard to diagnose bugs that involve tracing variables' entire lifetimes to find out how they were initialized.
As the others suggested, /r/learnpython would be a better place to ask this question. However, I've decided to give a real answer now out of boredom. So. What is the difference between class Character(object): def __init__(self): self.name = name and class Character2(object): def __init__(self, name): self.name = name ? The first version would give you a `NameError` the moment you tried to call it (eg. `player = Character()`). That's the only difference. Why does it give an error? Because Python has no clue what `self.name = name` means as there is no variable called "name" in scope. If you want to use this version, replace `name` with, say, `None` or even an empty string instead, like so: def __init__(self): self.name = None Personally, though, I prefer the latter of your two examples as you can instantly name the player object: player = Character2("John Doe") print(player.name) # John Doe Also, if you use Python 3 you don't need to use `object` as a base class; the following would be equivalent: class Character2: def __init__(self, name): self.name = name (For this post I decided to call your second example Character2 just to avoid misconceptions.) 
I love pypy so much. In many cases you get essentially a significant speed up for free. 
Do you know if it supports kivy?
Could it support gobject-introspection?
&gt;Work sponsored by a Mozilla grant continues on PyPy3.5; we continue on the path to the goal of a complete python 3.5 implementation. Of course the bug fixes and performance enhancements mentioned above are part of both PyPy2.7 and PyPy3.5 beta. Anyone know if there's any kind of rough ETA on when this might be completed?
How far away is 3.6 support?
https://morepypy.blogspot.com/2016/08/pypy-gets-funding-from-mozilla-for.html?showComment=1470818793581#c2122829706475782371
Great. That should be the number 1 item in your readme, with some more specifics of course Everyone has heard of NLTK. It is the standard python NLP library. If you want to prove the value of your alternative, compare it to what people know rather than forcing them to do an in-depth analysis of both libraries on their own - which most peo won't do. Show us plots with benchmark comparisons. List some gaps which NLTK leaves which your library fills. Say what kind of person benefits from your library over NLTK.
&gt; suggest PyPy 3 has supported f strings since [ver 5.7](http://pypy.readthedocs.io/en/latest/release-v5.7.0.html)
It supports Tkinter. ...what? It's a... solid... framework. 
I have had very few problems with wxPython myself. It works quite well across all 3 desktop operating systems
Why do you want to do this yourself rather than use one of the programs already available? 
Could use some screnshare stuff
I’m trying to get the hang of python and creating my own ideas to write programs. I’d like to have a portfolio of custom projects.
Please elaborate lol I'm desperate 
Well, like a screen share app. Load it on your phone and onto your pie and there ya go 
I'm a total beginner could you point me in the right direction. Do you have a name for these apps
Not sure at this point. That was back when iOS 5 jailbreak was new. There's a bunch tho 
OK. Look into the PIL module. It can read images (not videos) and build an animated gif for you, although it's not really that intuitive. Visit us in /r/learnpython if you get stuck. 
Sounds like an impressive feat altogether.
Ahh, good, so it's finally begun. We should have been starting down that path at least 2 years ago. This is gonna *hurt*.
Take a look at this. Its a couple of years old, but may do what you are looking for. https://www.cultofmac.com/387018/how-to-set-up-airplay-mirroring-on-a-raspberry-pi/
Yeah I seen that the issue with that method is I would like to be able to mirror whatever is happening on the iPhone to the raspberry pi display without having to be on the same network so it would work outside of my house that's why I said bonus points for a solution that uses a USB connection. Thanks for chiming in tho I appreciate it
In Python, you can use `time.time()` to see the absolute system time. Check at the beginning and end of the script, and subtracting the two gives the total time it took in seconds.
Here's a nice rundown of the differences: https://opensource.com/article/17/4/pyqt-versus-wxpython
You could cheat a bit by converting the number to a string and use the last character. But I feel you misunderstood something about those error values.
Working on a side project to get more comfortable with Python and to put on my resume I guess? I've been working on something similar to unroll.me with Gmail's API. It was quite challenging in the beginning since I was new to python but once I got the authentication down it isn't so bad. I've also been looking into Flask since I wanted to make it a web app. Right now my script logs you into your gmail via oauth2 and then iterates through every email checking for a List-Unsubscribe header. At the end of the script, I'm left with 2 Lists of from headers and unsubscribe headers. I recently implemented multi threading since iterating through every message took way too long. I'm using 20 threads and it sped up my script soo much. Now I am working on populating my html template on flask with a chart listing every spam email.
&gt; But %10 doesn't work for numbers with decimals and only integers? Sure it does. &gt;&gt;&gt; 87.01 % 10 7.010000000000005 It's just that it's susceptible to floating point errors. As soon as you convert the input to a float, it becomes a crap shoot if you will be able to find the last number of the decimal input. You will need to work with the string, and parse out the last character and the position of the period. 
Die SWIG die
So what is your question regarding to python? 
Thank you for posting 3 datacamp tutorials in this subreddit in a day.
I love wxPython. Why do you say its not very good?
I wrote [a related article](http://journalpanic.com/post/wrapping-subprocesses-in-asyncio/) on the topic not long ago. I'd also recommend recommend taking a look at [zerorpc](http://www.zerorpc.io/)
Well that's exactly what I was waiting for, goodbye CPython, hello PyPy from me!
If the last digit is 1 wouldn't half of that digit be .5 ?
/r/learnpython is a great community for these types of questions
/r/learnpython
Thanks, however they say that CPU time may be quite different than the actual run time. If you make a request to website, any time that it has to wait for the site to respond doesn't use any CPU so for me running a scraper, the difference is likely to be substantial.
Yea he needs a little more information. Like, are these the expected values for: 10000000 == 0? or 5000000? 10000000.0 == 0? 87.31 == 0.155? or 0.005? 87.310 == 0? or 0.005? or 0.155? 87.310019 == 0.0000045? or 0.185009? ?
Here's a quick trick I drummed up. * Get the thing in scientific notation (one decimal infront of the dot) using `x/10**ceil(log10(x)-1)` * Continue subtacting the forward most decimal using `int(x)`, and then multiply by ten. Check if the result is sufficiently close to 0. * Keep track of how many times you do step two, and what log10(x) was. When it is close enough to zero, you're at your last significant figure. You can also calculate the magnitude.
Here's a quick trick I drummed up. * Get the thing in scientific notation (one decimal infront of the dot) using `x/10**ceil(log10(x)-1)` * Continue subtacting the forward most decimal using `int(x)`, and then multiply by ten. Check if the result is sufficiently close to 0. * Keep track of how many times you do step two, and what log10(x) was. When it is close enough to zero, you're at your last significant figure. You can also calculate the magnitude.
I see. If that is the case, you could write property or something to wrap around your request function that can sum up how much time was spent waiting around.
Piling on to say if you’re doing anything with Twitter, tweetpy is awesome. 
I wrote this a few years ago because I use the 'units' program so much. This allows me to do repeat calculations with the same units. $ unit (? to ?) &gt; 100 m ft 100 m = 328.08399 ft 100 m = (1 / 0.003048) ft (m to ft) &gt; 250 250 m = 820.20997 ft 250 m = (1 / 0.0012192) ft (m to ft) &gt; 1234 1234 m = 4048.5564 ft 1234 m = (1 / 0.00024700162) ft Requires 'units' to be installed. https://gist.github.com/novel-yet-trivial/e72abf167a36d3f746fdecce35ed0959
made a [new post](https://www.reddit.com/r/Python/comments/74hma6/i_dont_understand_arguments/) there for /u/Wishwashbash 
Only have Python 2 on my phone, but this *should* work in 3: from decimal import Decimal def uncert(n): d = Decimal(n) digits, exp = d.as_tuple()[1:] u = digits[-1] / 2 * 10 ** exp return "{0} ± {1}".format(n, u) print(uncert("87.01")) Note that this assumes your numbers are normalized fixed precision strings (i.e. no trailing zero (i.e. "87.010") and you mean exactly "87.01" and not the machine's floating point approximation of that).
Pop a usb WiFi adapter into the pi and use it as an access point. Connect the iPhone and you can use it anywhere. https://learn.adafruit.com/setting-up-a-raspberry-pi-as-a-wifi-access-point/overview
I have the raspberry pi 3 it has built in wifi and Bluetooth I think the adapter is unnecessary. The mission is to get whatever is going on on my iPhone to mirror onto the raspberry pi display 
Interesting. So you just keep it open in your terminal and use it to do conversions anytime you need to?
Linear algebra!
Linebra. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'Linear algebra!'.)
On days when I need to do a lot of conversions, yes. 
😎 
holy moly. exactly what i was looking for. thank you so much i dont know how to thank you. you just made me earn an A on this assignment!!!! :DDDD
Not many choices. You didn't mention Spyder. For minimal and easy to use, there's Thonny.
Oh I'm well aware of their differences. Thanks! O would pick either of them over Tkinter
&gt; Facebook You 'tarded?
It sounds like you are going to love Jupyter. https://jupyter.org/ https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks or maybe even both at the same time? https://github.com/Calysto/matlab_kernel
Try scaling the float by powers of ten so that, while you are manipulating it, you are dealing with integers and then undo the scaling at the end. 
yeah i want to use those '@' operators dude! 
YMMV, give it a shot and let the SWIG and PyPy devs know the results. There is an open issue [0] on SWIG to generate python CFFI wrappers instead of C-API ones (not to be confused with lisp CFFI, which is the inspiration for the python one), which would greatly improve the speed as well as the compatibility. [0] https://github.com/swig/swig/issues/922
:D Thanks!
Anaconda and then use spyder. You have an ipython console right there as well as inline graphs, pictures etc. It's a pretty solid scientific IDE overall and widely used. 
You can already use them in 3.5 https://python.org/dev/peps/pep-0465
[removed]
Working on my first independent coding project. Making snake in Python with Pygame 
Where are you learning from? Super interested but not sure where to start 
I tried to benchmark one pandas function that I use too often and is too slow: [to_datetime](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html). Recently I tried speed up using Dask but without success. On a Series of 3M date strings pandas usually takes about 10 min to convert, using Dask with 4/8/16 partition took 20+ minutes and CPUs usage wasn't getting nowhere near 100%. So I downloaded pypy3 v5.9 installed numpy and pandas with pip and ran few tests, all seems to work. My test code looks like the following: `import pandas as pd` `df = pd.read_csv("big_table.csv", delimiter=";", low_memory=True)` `df.datetime_column = pd.to_datetime(df.datetime_column)` While python3 runs the code without problem, pypy throws an exception: `ValueError: only single character unicode strings can be converted to Py_UCS4, got length 0` So next step was to try pypy2 since pypy3 is beta as noted on their site. Couldn't get to install pandas with pip, got the following exception: `Exception: Cython-generated file 'pandas/_libs/lib.c' not found. Cython is required to compile pandas from a development branch. Please install Cython or download a release package of pandas.` Still looking in ways to speed up this functions or eventually I will need to make a workaround with joblib. **Update**: got pandas to work with pypy2, needed to create a virtualenv without pip and installed it manually: `mkvirtualenv pypy_test -p \path\to\pypy2 --no-pip --no-wheel --no-setuptools` ###Results | Implementation | Time | |:-------------------------------------|--------:| | Python 3.5.4rc1 (debian compilation) | 653.45s | | PyPy2 v5.9 (ubuntu binary from site) | 381.18s | `python test.py 653.45s user 1.32s system 99% cpu 10:58.36 total` `pypy test.py 381.18s user 2.86s system 97% cpu 6:32.86 total` big_table.csv has around 3M lines and 20 columns with a total of 600MB. Ran on an i5-4200U (1.60GHz).
This is interesting, however, I use docopt module for argument processing in a lot of my scripts. Would pipeable coexist with docopt or do we have to resort to some workarounds?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
One big caveat is they don't use the ORM, which is what a lot of people think of in Django. https://www.youtube.com/watch?v=lx5WQjXLlq8 Talks from DjangoCon - Instagram 2016
A set of Model Enterprise Usage Rules (Meurpyl) to ease the adoption of Python in the financial services context. [PDF](https://drive.google.com/file/d/0B7gDDyKBmu83VFdLMGNpRWtBdVk/view?usp=sharing) [Code](https://github.com/theonaun/meurpyl)
This will show you both elapsed and cpu time, broken down by function. https://docs.python.org/3.6/library/profile.html or maybe https://docs.python.org/3.6/library/timeit.html#module-timeit 
You maybe should be using infer_datetime_format=True, which the documentation indicates gives a significant speedup. Moving on to the PyPy errors: Googling the ValueError suggests using sep=' ' (that is a single space between the quotes) [0], dunno why this shows up on PyPy and not cpython, would need to see your csv file to help more. As for the missing Cython error, try "pip install cython dateutils numpy" before installing pandas, it should install cython 0.27.1 [0] https://stackoverflow.com/questions/38256402/valueerror-only-single-character-unicode-strings-can-be-converted-to-py-ucs4-g
For real. I can't ever go back to a world without f-strings.
Use imagio. It's the right way to do it and it's easy.
Thanks for the input() guys! 
its probably insignificant but this looks like what you want https://docs.python.org/3/library/os.html#os.times import os import time print(os.times()) time.sleep(10) print(os.times()) c = time.time() while time.time() &lt; c + 1: pass print(os.times()) $ python main.py (0.02, 0.0, 0.0, 0.0, 17183117.91) (0.02, 0.0, 0.0, 0.0, 17183127.92) (1.02, 0.0, 0.0, 0.0, 17183128.92) User time is only increased during the loop, not the sleep
How close is PyPy3.5 to working with numpy and pandas? My entire code base at work is Python 3 (3.6, but I can easily replace f-strings and 3.6-style type hints), and I've got a couple of projects that could benefit from using PyPy, even if it's a bit crashy or somewhat incomplete.
&gt;You maybe should be using infer_datetime_format=True, which the documentation indicates gives a significant speedup. To be fair I almost always need pass the format and set "errors" parameter to "coerce" since too often I get a small percentage of dates in different formats. But it may be worth trying. As I updated the parent comment, got pypy2's pandas to work. I can't share the data since it is from a client, but on the weekend I will try to hunt down one buggy line and check it. It doesn't seems to be the same error as reported in stackoverflow since python3.5 handle it. The results were a pretty decent speed boost. I never used pypy before and I don't think it fits as a drop in replacement for me since I depend on sklearn, tensorflow and pytorch to work but I'll keep an eye on it.
May I ask how did you install those Python? dmg files from python.org?
Part of programming is learning how to troubleshoot and debug. Generally, asking for help with an issue should be a final resort as waiting for a response not only takes a while but robs you of the chance to fix it yourself. Also you should not be developing financials using live API code. You're going to accidentally a bitcoin into oblivion.
If I recall correctly, yes.
type "which pip3" to see where it is actually pointing to. Follow any symlinks if necessary. Then type "echo $PATH", to figure out WHY it's pointing at the wrong thing. If necessary re-order your paths using your bash startup script. My advice (once you understand and fix this) is to just use the version of python3 in [homebrew](https://brew.sh/). You will save yourself a lot of headaches down the road (especially if you ever have to compile any python packages against other libraries)
 which pip3 /Library/Frameworks/Python.framework/Versions/2.7/bin/pip3 Then echo $PATH /Library/Frameworks/Python.framework/Versions/2.7/bin:/Library/Frameworks/Python.framework/Versions/3.6/bin:/Users/Me/.nvm/versions/node/v8.0.0/bin:/Library/Frameworks/Python.framework/Versions/2.7/bin:/Users/Me/.rvm/gems/ruby-2.1.1/bin:/Users/Me/.rvm/gems/ruby-2.1.1@global/bin:/Users/Me/.rvm/rubies/ruby-2.1.1/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Postgres.app/Contents/Versions/latest/bin:/Users/Me/.rvm/bin:/usr/local/bin:/usr/local/bin:/Users/Me/.rvm/bin:/usr/local/bin:/usr/local/bin I'm not quite sure what the cho is telling me. Seems to be printing out an entire bash file. I commented out both the PATHs for 2.7 and 3.6 in my bash file, and now it's falling back on a python3 install from anaconda under my user profile. Seems to work.
I am doing the andrew ng course from coursera and to implement the algorithms in python, I am just refering to siraj raval's youtube channel. It's helping me 
CAn it play well with OpenCV, Sklearn and scipy?
Prototype? Nah, more like productiontype.
It means exactly what it says. Exceptions need to inherit from `BaseException` (and more preferably, the `Exception` class) And post this kind of questions on /r/learnpython
 So would it work if I change the except clause to be except Exception as e: ?
I’m assuming you created the `BadZipFile` class. You will need to make that class inherit from `Exception`
I'm using the BadZipFile that is provided by the zipfile module itself. 
Then it sounds like you have a pull request to make so you can fix it for the community.
Everything is here in terms of the module im using. The exception is at the top of this page. I don't know how to go about fixing this. It could just be an issue with the way my code is written. https://docs.python.org/3/library/zipfile.html 
I can’t see what caused the error at a glance, for your purpose you can just use a blank `except:` clause then. You should put your import on the top of the file, and not in the function. And your two import lines for `zipfile` is redundant, pick one import style. (`import zipfile` or `from zipfile import ZipFile, BadZipFile`) Other than that I recommend you checkout /r/learnpython , they have a lot of useful resources for learning.
**Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year!** \#1: [90% Python in 90 minutes](https://np.reddit.com/r/learnpython/comments/661o5a/90_python_in_90_minutes/) \#2: [Python 201 Book is Free for 48 hours](https://np.reddit.com/r/learnpython/comments/5814lw/python_201_book_is_free_for_48_hours/) \#3: [Python 101 Book FREE for 48 hours!](https://np.reddit.com/r/learnpython/comments/5bmaz0/python_101_book_free_for_48_hours/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
I'd try moving all of the import statements out of the function. If nothing else, it's generally better form to put all imports at the top of the file. That's pretty weird though. What do you get if you type this into the python console? `print(BadZipFile.__bases__)` (Also, you should move the `z.close()` line into a finally block, or use a context manager around ZipFile.)
I think the issue is that since im doing a mass download of stock files by date. I have a nested for loop to loop through all the days between 2006 till now, some of the days are not trading days so no file exists. So I'm guessing z=zipfile.ZipFile(io.BytesIO(page.content)) should be a none type. Not sure what to code in to detect a none type or an empty zip file?
so how can i get the source code of a page, that i have opened in chrome? i need to use the source code of the opened tab, because ive already did it, that selenium opens the page itself and logs in, but that takes lots of time.
So when you type pip3 now you are running the copy in /Library/Frameworks/Python.framework/Versions/2.7/bin/ but you *probably* want to run the copy sitting in (I'm guessing here, only you know what you actually want) : /Library/Frameworks/Python.framework/Versions/3.6/bin So to remedy this, you need to adjust your path so that /Library/Frameworks/Python.framework/Versions/3.6/bin **comes** **before** /Library/Frameworks/Python.framework/Versions/2.7/bin alternately: just use the full path to python (i.e. /Library/Frameworks/Python.framework/Versions/3.6/bin/python) to create a venv (e.g. go to any directory you can write to, run /Library/Frameworks/Python.framework/Versions/3.6/bin/python -m venv insertvenvnamehere), activate it, and then everything should be self-consistent while within that venv. This way you don't mess with the paths in case something else in your system already depends on them being this particular wacky way. 
It sounds like you want a database.
The main concern here is that processing JSON files partially is difficult, and while you could, in theory, stream them, this would amount to a full scan for most searches. Likewise, partial updates are next to impossible, especially when things change size, so you basically have to load each JSON file into memory as a whole, do your processing, and write it back to disc. This is not efficient, no matter how you do it. Instead, look into databases. SQLite is easy to set up (no server needed, just a library).
This is the problem with skimming a post quickly on a phone while on a train; I'm hoping that I read your original post correctly and this is a lab assignment you're trying to print answers with quickly, not a coding assignment. If it's the latter, you might get an A in this one, but unless you understand what it's doing it won't be of much help to your future assignments.
The code works on on my laptop with python 3.5.3. Although your try isnt doing anything... zipfile.ZiFile is going to raise the exception, you need to move that up one line to actually do anything
A constructor can't return None. You should check if page.content is empty first. But none of that would have anything to do with BadZipFile not being a child class of Exception, which it should be.
I plan to create an API so I needed JSON files so I don't have to make server side database calls. Is there a way to asynchronously retrieve database information while also serving API calls? The only way I know how to do this is with AJAX. I'm currently using Python to parse the raw data and generate new data files. I would be serving the API calls with PHP, probably. The data doesn't change and isn't updated, if that changes anything, so I wouldn't be making many edits. Of course, if I choose to update the format or add new entries**, I would have to rewrite them all but wouldn't I have to do that in any case? **new entries, as in, new bits of data for each entry. There are a few computed values being stored and I plan to definitely add more. On the plus side, this would mean updates to the data would be seamless since it would happen one at a time? 
[removed]
An API, rather by definition, is a server side function that takes user input and returns data, right? So why avoid a server side database call? Or, more to the point, why avoid a server side database call but instead do potentially tens of thousands of server side disk access calls, which are **far** slower? The response above is correct, you are describing a database problem, specifically -- if your use case is *exactly* as you describe -- a document store, like [MongoDB](https://www.mongodb.com).
I think I would loop over the resultset in the same single thread and send every record 1 by 1 to a threadpoolexecutor/processpoolexecutor/whatever other parallel invocation stuff you have. Then the bit of code which processes a record doesn't need the database anymore, does it?
Hm, I'll look into MongoDB. Never worked with anything besides SQL, I'm assuming MongoDB is compatible with Laravel.
But it's basically just shorthand for `'{Foo}'.format(**locals())`
No. Brython is a beautiful experiment, but loading the entirety of Brython just to get the language runtime is 600ko (135ko gzipped). So basically you are loading something that is 7 time bigger than Vue.js, without even having a framework yet. This does not even include the stdlib. Brython works well, but it's not practical. If you want to do client side, you'll have to learn JS for now. 
There are.an infinite number of ways to skin a cat.y team stores slow moving config.files continuing no sensitive information in json config files within a got repo exactly as you do today. Individual developers are guaranteed to have an updated config profile because our code runs within a docker and the first step of the runtime file is the pull operation. It syncs to a local mount and the time out is set very low so it will move on quickly if the server is unavailable That is the lazy approach, works great. A more complex approach is to manage secrets using a centralized config.managment. vault is a commonly used example of that. We use docker secrets coupled with swarm but it is a bit clunky.
🤔🤔🤔🤔🤔🤔🤔🤔
I've no direct idea, I've always felt that php was the ugliest and most masochistic language out there bar Java, but it's pretty much compatible with any language for which there's a client library, and I'm sure you'll find there's one out there for php too.
You seem confused. &gt; I plan to create an API so I needed JSON files so I don't have to make server side database calls. You don't need JSON files to build an API; you just need data from *somewhere*, and a way to convert it to JSON. Either way, you will have to go to some sort of data store on the server - file storage works, but in your case it seems very inefficient and too much work, because you will basically be implementing an ad-hoc database yourself. Either way, the basic architecture for an API is this: - Have a HTTP server - Read requests, parse request path, method, and body; route to handler functions based on request path and method (e.g. `GET /users/tdammers` would route to `getUser("tobias")` - In a GET handler, make the appropriate database calls, read the result, and return it from the handler. - In a POST handler, read the request body, validate it, make the appropriate database calls to insert or update rows with the information from the request body, then return a suitable redirect from the handler, or a 2xx response that indicates success. - When the handler returns, take any body data it returns and format it as JSON, and compose a suitable HTTP response from it. Something like `flask` takes care of the HTTP parts for you, so you can concentrate on writing just the handlers, but the general architecture is still the same otherwise. &gt; Is there a way to asynchronously retrieve database information while also serving API calls? The only way I know how to do this is with AJAX. AJAX is a client-side technique, it has nothing to do with the server. On the server, you will be using some sort of HTTP library or an external HTTP server with an interface like WSGI; these are all built to handle multiple requests in parallel, and you don't need, nor want, asynchronous execution within one request. You just go in one straight line of execution: read request from client -&gt; parse request -&gt; route to handler -&gt; read body &amp; arguments -&gt; do database stuff and logic -&gt; assemble response -&gt; send response to client. No need to do anything asynchronous here. On the client, i.e., JavaScript, it's a different story, but that's, well, a different story altogether. &gt; I'm currently using Python to parse the raw data and generate new data files. I would be serving the API calls with PHP, probably. The data doesn't change and isn't updated, if that changes anything, so I wouldn't be making many edits. Why PHP, though? And why the whole preprocessing? You're making your life harder than it needs to be. Just store the raw data somewhere, preferably in a database for easier querying, and then write an API using, say, `flask`, that runs the required transformations on the fly. &gt; On the plus side, this would mean updates to the data would be seamless since it would happen one at a time? Yes. But there are more advantages. For example: you can write a schema for your database that enforces certain things, e.g., a column that is supposed to hold a number can only ever hold a number, inserting something that's not a number will be an error (i.e., columns are typed). Or a column that is supposed to refer to something else can only be inserted if that something else exists, and removing the something else is only allowed once you've removed the reference to it (this is called a foreign key constraint). Off-the-shelf database engines are also really good at indexing things, so you can easily query tables with millions, if not billions, of rows in them, without causing much of a delay. If you do it right, finding a handful of rows in a terabyte-sized table can still be done in a matter of milliseconds; you're not going to pull this off with a bunch of JSON files and a query engine you wrote yourself.
Playing with `locals()` and `globals()` looks usually like a code smell to me \^^
AIUI a fair amount of their code still runs on Python, but the most critical parts run on Go. The part that is still Python is being ported to Python 3.
Does 3.5 get numpy too? The announcement is unclear.
Sorry I was unclear, I also plan to have a web app that will display the data. I know you don't explicitly need json for an API but I wanted async chart updating and other async features that require AJAX calls. I figured since I would need json files, I would also just use them to store the data for api calls. I plan to use PHP to develop the website and figure that I will also develop the api with it as well. And to my knowledge, you need a full page refresh for a database call? If I were to store the data in a db and then use flask to convert it to json, that would require a page refresh? I'm still exploring options and open to anything though. I have only gotten to the point where I'm parsing the data dumps and have it written to a second file that stores it in a slightly cleaner format. Storage isn't too big of an issue at this point since the original data files are about 160gb and with the reformatted versions, it might be close to a total of 500gb. I've also looked into storing multiple records in json and then referencing the file line? Doing this programmatically might be a little tricky though and might need to be macguyver'd
Precisely this. Paralelize only the processing part, not the DB access. You can use Pool's map() method, for example: from multiprocessing import Pool def process_row(row): # do your processing here return processed_row rows = query_db() with Pool(processes=4) as pool: processed_rows = pool.map(process_row, rows) 
Yeah I started with PHP and know about all the new javascript tech out there like mean stacks but I wanted to just get pretty good with 1 language. I've been on and off with php for 2 years or so now so I'm most comfortable with it. My friend has been trying to convince me to just learn Django but I'm already too deep in the closet to come out
Django is often overkill, it's sort of batteries and the kitchen sink and a duck farm for eggs ... I like Flask for smaller, focused apps and APIs, so if Laravel is the PHP equivalent of Flask then use that, and may the gods have mercy.
https://ideone.com/ikNKp3 works as you can see. I suspect that you're not actually running the code you copypasted, like maybe you're doing something like "except BadZipFile**()** as e:", or have another catch clause you omitted for brevity or something. Like, Python complains that you are trying to catch something that is not an Exception somewhere. It should tell you the exact line where you're doing that, so go to that line and see what you're doing there.
driver.page_source I think
PyPy 3.5 supports f strings
Thank, you, I never thought of that. 
&gt; My project involves storing many unique python dictionaries that need to be indexed easily, based on an arbitrary ID number. The user will query for a specific # and they'll get all the data associated with that. As such, I'm not if the logic to search for the proper file (assuming they contain multiple entries) would be very feasible. Sounds like you want to rebuild to elasticsearch. It is a search engine and does exactly what you describe. &gt; My data consists of 200,000+ unique python dictionaries. Unique in what form? Different values or different keys at all? Different values, put them into a database under and use the query and aggregate functionality of the database. Different keys, have a look into elasticsearch, but that means more overhead for performat searches.
[Pandas](http://pandas.pydata.org/) in a [Jupyter](http://jupyter.org/) [Notebook](http://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/what_is_jupyter.html). Happy to help.
just downloaded PyCharm and start learning
That's Python syntax with Python semantics, though, and the OP was asking about Python syntax with Lua semantics.
Usually you'd provide a link to a statement where you'd get that from.
Answering my own question, I found that if I use `session.bind.execute()` instead of `session.execute()`, it works with unbound params too! https://stackoverflow.com/questions/11579273/sqlalchemy-0-7-8-raw-string-queries-issue-with-params
Consider [couchdb](http://couchdb.apache.org/).
I use Python programs on my desktop all the time, does that not count as client side? Unless you mean *in browser*, in which case you need to: * convince browser vendors to adopt it * hope they implement a standard version * introduce DOM handling in the UI * convince developers it's a good idea * get buy in from developers * deal with browser processing models (they're uis, so think asyncio not standard sync processing) And probably other things that I'm not thinking of. Given the headache that is cross browser CSS and JS support, I doubt Python would stand a snowball's chance in hell of being adopted even if a majority of devs wanted it.
Or a document store depending on how structured the json is. Or just use postgres and get both. 
Another approach would be to just pass `**locals()` if your variable name is the same as your parameter name. 
&gt; Python is the Java implementation of the python programming language What? Should that be C instead of Java?
Has the frozenness gotten more strict in the last few versions? Im currently on 16.2 iirc (whichever release was right before the hashing behavior change). In trying to upgrade, not only did I realize I had some (apparently) incorrect hashing options but I started getting frozen errors that I couldn't reconcile immediately! In both cases probably latent bugs, even if I don't have the time to deal with the fallout of fixing them!
This thing smells a little of trying to move classic software to cloud. What do you mean with "distributed to several users"? You distribute the code itself? Do they run their own deploys? Do they all have AWS accounts with all the stuff configured you need to get Lambda's working? (VPC, NAT, public/private subnets and all that jazz?) I'd recommend to forget whatever workflow you have right now, reassess your goals and business requirements and re-architecture cleanly for cloud on that, instead of wrangling everything as is.
Check the sidebar on /r/learnpython
Please don't use time.time for timing things, it uses gettimeofday which is susceptible to time changes from NTP etc. Use time.perf_counter which is CPU time and will only go forwards. https://blog.habets.se/2010/09/gettimeofday-should-never-be-used-to-measure-time.html
Thanks :) Is there any Python simulator sites?
Simulator for what? Python has a REPL. 
This is just so wrong. There is absolutely no need to get browser vendors to adopt it. Just as browser venders have not adopted TypeScript, CoffeeScript, ClojureScript, etc. You just need the ability to transpile the Python to JS and you're good to go. Creating such a transpiler is obviously no easy task but there is absolutely no need to get vendor buy in. Additionally, there is no need to get buy in from developers - there are already plenty of Python developers. Existing JS developers wouldn't switch but that is just fine. Now, is it worth it? I can't answer that. I love Python but I'd probably keep using TypeScript for my webdev related work even if Python were an option.
A stand-alone* executable *comes with 600mb of folders full of never-used packages which it won't work without
according to http://www.vfxplatform.com/ it is supposed to be 2019 edit: target is 2019, so indeed we will start porting to 3 next year. Hopefully
Ok...Thank you :)
True, you can do that, but what's really the gain of taking a Python code base and compiling it to javascript? Now you need to deal with the headaches of two languages -- and you still need to solve the DOM problem. Whereas with Typescript, you only deal with some of the headaches that come from Javascript and most of the pain points can be dealt with at compile time rather than shoddy bug reports from users.
I found this to be a nice interview going into why the matplotlib documentation is in the state that it is. I did like his message towards the end that if you use it you can help contribute towards better documentation.
The platform is standardized for the year following it. So 2019 means it'll be formalized and released in 2018 etc.. For example, Maya 2017 and the VFX reference platform of 2017 came out in 2016 for the shift to qt5. Either way it will take a while to shift the industry over. It's not a small change by any means.
Like I said, I'm not sure that it would be worth it. I also said that writing a transpiler would be no easy task. There would be lots of kinks to iron out. With all that said, it would be a lot easier path forward than trying to get vendor support.
You can also force it to be one file, in which case all that junk is inside the exe.
There are already several Python to Javascript transpilers. At least [Transcrypt](http://transcrypt.org/) is used in production, and it seem to be quite decent to work with. 
As someone who has messed with this and even sold software that uses this compile method, I would just avoid making it a habit and pick up C# or something.
Yeah, I like TypeScript a lot. Like I said, it may not be worth writing a transpiler for Python. And based on your comment it seems like it probably isn't.
you dont need that for python. If you go to code academy you can learn the basics and its simple. I am using that right now. Also, if he likes games, there is https://codecombat.com/ and ti teaches you to program while being interactive with the code. 
So reimplementing numpy, sklearn and all the libraries from python or what?
If you mean an online interpreter, there's repl.it: https://repl.it/languages/python3
Interesting, looks like they borrowed the idea from Wolfram! Looks pretty neat though!
You should give cython a try
he did said its not worthy goal, he said that at the time he was working for google he was asked not to invest in the subject. as other suggested its not that simple, and some attempts were maid, not sure if I would use them for production code. browser world is too coupled with JS, doesn't seem it would change anytime soon. (even that I would love to have python insted of JS)
And takes 3 minutes to start.
For me it's the class-style syntax for typing.NamedTuple
Having several implementations of transpilers will probably make it easier to find one that is a snug fit for any given project. However., someone need to have a big itch to scratch, to begin building a new implementation. 
Oops, I misread your first comment. I read transcrypt as TypeScript for whatever reason. Transcrypt seems interesting. I'll look into it!
Invent Your Own Computer Games With Python http://inventwithpython.com/chapters/
This is exactly what I tried first. I ran the query and got a result set. I then sent each record in the resultset to my subprocesses. When I do that, part of the data in the record is missing, one of which is the XML field and the property that is holding the reference to a joined table that was in the result. So I assume that each resultset record is some type of SQLAlchemy object and when it is passed to the subprocess that data isn’t available. 
This is exactly what I did. However it doesn’t work as “rows” is some type of SQLAlchemy object that doesn’t like to be passed around to subprocesses. I’ll try to write up a MWE.
JS is the assembler code of today. And while x86 assembly isn't what most people spend huge amounts of time writing and debugging, we're somehow still able to develop and debug code on that target. Even today, with sourcemaps you have a decent chance of debugging your client side code without having an intimate relationship with JS. 
:D Have a nice friday. 
Wolfram Alpha? That came out in 2008. IPython came out in 2001, not sure when the original IPython Notebook(which is now Jupyter) came out though.
You might want to make sure that those things are eagerly loaded. Every relationship will be lazy loaded by default in sqlalchemy. session.query(X).options(joinedload(x.relationship) Not sure why the xml field wouldn't come. What is it declared as? Just a varchar? It would only happen if you specified deferred loading http://docs.sqlalchemy.org/en/rel_0_9/orm/loading_columns.html#deferred-column-loading
Wolfram Mathematica 
Wolfrathematica. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'Wolfram Mathematica'.)
&gt; classes that do not inherit from BaseException So if the problem is that it doesnt inherit from BaseException...
Ah, ok.
I tried PyInstaller this week. Microsoft Defender kept blocking it while doing pip. Any recommendations on how to avoid setting off AV?
Wonder how long before reddit is forced to offer better anti-bot spam features. At this rate we're going to have bots that reply with the time you commented in 12 different time zones.
Thanks. I’ll try that. The XML field is a “custom type”. This is what I’m seeing in the debugger before and after. https://i.stack.imgur.com/iu1Qn.png After it hits the subprocess. https://i.stack.imgur.com/fNefl.png No, it is just an object. This is how I made my XML type. https://stackoverflow.com/questions/43333410/sqlalchemy-declaring-custom-userdefinedtype-for-xml-in-mssql
Doesn't have to be. I build my executables in a docker container with no preinstalled packages outside of pip, or a fresh virtual machine for Windows. They're usually about 20mb, and run pretty fast. I also package them as one file.
automate the boring stuff with python is a REALLY good book. the book is also on the said website for free.
Arent TS and CS subsets of JS though?
Some libraries I use on the regular wtih my projects: pandas, Flask, SQLAlchemy, click, jinja, requests, BeautifulSoup, nose, Celery, Arrow. And this list is not exhaustive. Good luck re-writing these in C# or any other language. If you do have all this in a statically typed language, I would LOVE to hear it because tbh my biggest gripe with Python is that it isn't statically typed. (mypy is good, but I prefer static typing)
I can't speak for CS but TS is a superset of JS. Edit: from what I remember though CS is neither a subset nor a superset but just has fundamentally different syntax.
I understand what you're saying; I'm suggesting your goal with python to make it a portable .exe with a bunch of machine learning libraries isn't a realistic one and it will give you a headache. If that's what you're doing, you should just learn to deploy everything quickly and easily with a script or .yml or something with docker, not compile it.
We're aiming end of this year
Try looking into python scientific libraries, they will give you most of the functionalities of Matlab. Alternatively, if you like the "pre packaged" feel of matlab and the tools surrounding it and don't mind the limitations try learning R, it's faster, more feature rich, open source (implicitly free) and there are some nice idees built around it. As far as python ides go... well, pycharm (I find) is among the best in terms of resource consumption. You could use a text editor + python plugin (for example atom), but that would likely be even worse for your machine performance wise. For quick programs you could try going for things like kate or vim, just a plain text editor, I'm afraid a lot of times it's the "Ide features" themselves (linting, highlighting, autocompletion, indexing... etc) that make it run slow and a lot of the underlying tools used by these ides for the same language are more or less the same.
So the options(joinedload()) worked for the one column that is a reference. However, the raw_xml column is still a problem. 
I'm not even thinking about that. Everything that I code on python I make it open source. If I wanted something for production I would just do things with tensor flow in C
&gt; I think if you build the .pdf version of our docs, it’s like 3,000 pages—and I would say the library has maybe half the documentation it really needs. Jesus H. Christ that's a lot of documentation. No wonder he can't fix it, that's a job for about 10 people full time for 6-12 months. Maybe we should set up a crowdfunded drive to revamp the documentation of MPL...
All the languages you mention have been designed for this use. Python has not. Transpiling Python to JS involves a lot of overhead due to the runtime you need to get the semantics right. Doing this involves a significant amount of effort just to get any code to execute and then you still need an ecosystem of libraries and frameworks. This will also take significant amount of space and it would be slower. Meanwhile JavaScript is getting better and is starting to look suspiciously like Python in some areas. Python in the Browser makes no sense because even in the best case scenario, you'll still be worse off than with JavaScript, something that has so many resources behind it that you can't catch up with it. 
Yup, I agree. It's probably not worth it. Still a lot more feasible than getting browser vendor support. But not worth it.
I guess it's not related to PyInstaller at all. Getting alert/ blocked by Microsoft Defender is a general issue for any exe (with no publisher data) specially in recent version of windows. `Code signing` is required (I think its a money making plan disguised in security improvement) for exe's in latest Windows to remove this kind of alert/blocking! You will have to invest some bucks on buying certificates for `code signing`. For example, you may try: [Digicert [1]](https://www.digicert.com/code-signing/). Also, read this [Stackoverflow question [2]](https://stackoverflow.com/questions/252226/signing-a-windows-exe-file) to learn more about how to sign a WIndows EXE file. [1] https://www.digicert.com/code-signing/ [2] https://stackoverflow.com/questions/252226/signing-a-windows-exe-file
I made once a small wordpad with PyQt4 as a prototype for a new kind of user interface and I've built an exe from it. The exe takes 27 MB and Qt4 dlls take another 10 MB. Therefore a basic Qt application with no extra dependencies (no numpy nor whatever, but only pyqt4) should be ~40 MB. And it takes 2 seconds to start. Just to give an idea.
Linux
And for addition, I also recently made with pyinstaller an exe from a flask microservice with no dependency exception for OLE automation. The result is 5 MB.
&gt; Kdevelop Hey interesting find!. Looks damn neat! Its overwhelming to open? What do you mean? it is not as fast as PyCharm or VSC? What are the plugins I am supposed to be using? 
Im fairly sure it's because the _Element object (what etree.fromstring(value) returns) is not pickleable ( I think, but there's no erros, so maybe multiprocessing does something else than simple pickling... ) As I know it, multiprocessing will normally pickle objects to transfer them between processes, so it won't work well. If you turn the raw_xml to a string it would work fine. However, what i'm unclear about is why multiprocessing raises no exceptions. So to recap. The raw_xml is no database issue. It is fetched correctly from the database. The problem is that your custom type converts it to another object of the _Element class and such an object is not able to be transferred between processes correctly.
Docker is certainly valid for tools, but if you re building a desktop app for a home consumer end-user then docker is impractical. 
You need to remove them by reinstalling python and/or deleting things out of the python directory. One problem is people put imports at the top and imports are evaluated immediately. So following the trace, we find matplotlib imports Tk, Qt, and wx, when we only need one backend. Furthermore, there are optional packages, even when they're requirements for full package use. Picking on matplotlib even more, if I'm making xy plots, why do I need dependencies for plotting time data? Just delete it. On my standard install of python, an exe I build is 180 MB. On my reduced install, it's 60 MB. It uses PyQt, VTK, numpy, scipy, and matplotlib, so it's no slouch. Most of that is VTK for 3d rendering of things I don't use because I haven't deleted their dlls. It's also bigger than it should be because I target multiple versions of windows, so there are extra VS dlls.
The container is only to provide a clean build environment, the executable is used outside the container like any other program. 
ah makes sense. Unfortunately don’t want to move that field to a string since it is an XML field in the database and it gets used as an lxml object in other places in the code. Only thing I can think of is sending some type of ID to my subprocess and let it query the tables for the data internally. Not sure if all of the sessions created in the process will start stepping on each other though. The only time it raises an exception is when my processor inside of my code tries to access the raw_xml object that isn’t available. 
ok, that's a fair comment. i assumed from first reading you were shipping with docker, but you're not.
you could only temporarily send the xml as a string with etree.tostring, and once it has arrived in the subprocess you can turn it back to xml with etree.fromstring(value) just like how it goes to and from the database. For reference from multiprocessing.forking import ForkingPickler import io buf = io.BytesIO() ForkingPickler(buf, pickle.HIGHEST_PROTOCOL).dump(your_db_object) loaded = pickle.loads(buf.getvalue()) this is (kinda) how multiprocessing will deal with your object. You see that 'loaded' will not have the raw_xml anymore. I think pickling doesn't raise the exception because of the highest protocol, it would normally raise exceptions with default protocol 0. But, that's just how multiprocessing works.
What is the best practice for python?
Excellent! Thanks for the response!
Have you tried using Cython for that purpose then? It still won't enforce full typing, but if you put a type on something it has to stay that type throughout your code or it won't compile. And it can speed up your code, and working with C libraries becomes much easier.
Ahhh. That’s a good idea! I’ll try to do that and see what happens! 
FreeCodeCamp: Learning Python from zero to hero https://medium.freecodecamp.org/learning-python-from-zero-to-hero-120ea540b567
Great! Thank you :)
Brilliant! Thanks
That's Great! Thanks :)
interesting strategy, i shall give this a go. 
Thanks, but where I am getting stuck at is: pip install pyinstaller It begins downloading and installing then Windows Defender starts notifying but blink on and off quickly. The install then starts giving errors that it could not find files, which makes sense if AV blocked something. I go to Defender and even though it notified me I'm not seeing a list of files blocked. I am using Anaconda, tried to do it only via python. Yesterday, I purchased MS Visual Studio 2017 for a different company project but saw the Python feature, was going to see it will install there. I also remember a few weeks back r/hacking stated a popular python library had been compromised, but I was unable to find it.
**Here's a sneak peek of /r/hacking using the [top posts](https://np.reddit.com/r/hacking/top/?sort=top&amp;t=year) of the year!** \#1: [CSO of Equifax](https://i.redd.it/fau2uq9jmylz.jpg) | [1446 comments](https://np.reddit.com/r/hacking/comments/70cv5w/cso_of_equifax/) \#2: [Better check](https://i.redd.it/44sw0j7iw83z.jpg) | [288 comments](https://np.reddit.com/r/hacking/comments/6gthy8/better_check/) \#3: [Security is also an important part of development.](https://i.redd.it/v4fqmj7pwr4z.jpg) | [306 comments](https://np.reddit.com/r/hacking/comments/6id21g/security_is_also_an_important_part_of_development/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
Do you have a CS degree? I've been thinking about trying to get into network administration but I am pursuing a finance degree. Finance is cool but I don't see myself doing grunt work like Excel data entry or something mundane and working up the ladder for 15 years before I can get somewhere. I've been playing with my own home network for a little bit and started my own web server too running off a LAMP stack. Relevant for a job application? Or is it just kinda peanuts to an elephant? 
Pip is your friend. Typing &gt;pip Should give you instructions to install pip. Or just: &gt;sudo apt-get install python3-pip Note, I specified python3 since I'm too lazy to make my default version python3 from 2.7. If you just run: &gt;sudo apt-get install python-pip It will install pip to whichever default version you're using. So keep in mind you need to install it to the correct version so your pip will install the modules to the correct area. Then either: &gt;import someModule Or &gt;from someModule import someFunction Or to get all functions from a module: &gt;from someModule import *
Linkedin is putting a lot of effort to move to Python 3: * https://speakerdeck.com/pybay/2017-bringing-python-3-to-linkedin * https://www.youtube.com/watch?time_continue=4&amp;v=TH4CDUyY3lM
Maybe 300ms? I use the PyInstaller all-in-one executable for a command line tool I call frequently and the tool runs to completion in 1s.
Another option to try cx_Freeze. https://anthony-tuininga.github.io/cx_Freeze/
Another alternative is [dataset](https://dataset.readthedocs.io/en/latest/) which will make SQLAlechmy behave kind-of like a document store (except it will add columns as needed so it may not be ideal).
Yes, I read it too. Maybe you are also talking about that article: https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/ I read it on HN some weeks ago [read HN comments here](https://news.ycombinator.com/item?id=15272394)
A pointless job, since nobody would bother to read it. This is a COMMON problem across all of python. The documentation style in python is just WRONG for its proposed purpose. It is documentation for the PROGRAMMERS of the module, not for the USERS of the module. There are many many pages to hate on, but I'll take one that should exemplify the obvious failings: [logging](https://docs.python.org/3/library/logging.html) You open up the logging page and what is the first thing you see... documentation about `Logger objects`... what are those... well lets look at the methods and then there is a long list of methods. 99% of which nobody ever uses. The point of a logger is to allow you to log shit. I just need to know about `warning/error/critical/info/debug/exception` that is it. Then you get Handler objects. Evidently I need a Logger and a Handler, but what is the relationship between the two? How do I fit the two pieces together. Formatters... FUCK, how much more shit do I need to write a log message to a file? Why shouldn't I just use `print`? And it goes on and on and on forever... I'm still scrolling to this day trying to get to the end of the documentation on logging. And that is why I go to stackoverflow for examples of how to use the damn thing. Python documentation is documentation not for USERS, but for the PROGRAMMERS themselves. They document all their methods at the spot they have written the method to say "this is what the method should be doing" so that when they go back and read the actual code of the method they can verify that the method does what they think it does, and that ultimately the finished product does what they think it does. USERS don't care about that shit. They want you to hide all their internal details and abstractions. They want to know how to use the tool. If they need the tool to do something complicated then they can open the code and look at all the other methods they haven't used, and find out what they really need. Only a small fraction of the methods in a class ever really need external user facing documentation, and yet python's style is to dump the entire fucking mess into your lap and say "read the docs." I'd rather just read the fucking code.
Can't you use Wine somehow to create .exe's? That would (maybe) be an easy way to create Windows executables on Linux systems once you've set it up. Edit: phrasing
Delete Windows? 
1. Start with WinPython-Zero. 2. Create a venv with a complete requirements file. 3. Profit (of not having a 600 mb folder). 
Try something with a gui
very useful
Thanks!
You'll have to use JavaScript to do that.
i rather use nuitka. everything else seems horribly inferior.
Assuming he/she is still in early grades at school, it doesn't really matter much whether they learn python or ruby. All they have to learn the concepts and should become like a fun learning. You can check out below few websites, these are specifically focus for kids learning. * https://scratch.mit.edu/ * https://code.org/ 
Note that, depending on exactly which page of the `logging` docs you find, there should be a link to a HOWTO/cookbook somewhere at the top. I definitely agree with the overall sentiment though.
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Overwhelming being a that there is so many features and options that it can be a little difficult to see how to get started of find some of the more basic things. Honestly, Kdevelop is great on Linux, but the ports to the the other platforms suck. I think they have some prebuilt binaries now. For me, just having the kdevelop5-plugin-python3 package is enough. It has things like semantic analysis, type checking and some other stuff I've never seen on any other python IDE. It has the most incredibly well thought out architecture. I love the Hold Alt for all sorts of insights, and the integrated documentation viewer that can even just pull up a webview if that's what you have available. That all said, it's impossible to get configured so that everything works as it should. Semantic code analysis requires the generation of special documentation (it does it for you, but you need to manually specify the modules to generate and then click the button) and so on and so forth. It's the one open source project I most want to donate to, but can't justify donating to since they're lacking the spit and polish that let's me recommend it to most people. Too many features, not enough polish. Give it a go if you have a weekend free to properly configure it.
I'm pretty sure the PyInstaller docs say "make a virtualenv with only the stuff you actually need first."
Yes the tutorial, and the cookbook is the actual documentation. The problem with the docstring crap pushed by PEP 257 and encouraged by linters, is that programmers go through the exercise of adding docstrings to every class and method in their code and think: "I've written the documentation." No you haven't. You've written a specification for yourself. You haven't even begun the process of writing documentation, which is a completely different thing. And so in the end it never gets written. Users ask for documentation, programmers point them to specification, and users say: "But that is a million pages of crap I don't care about" and the programmers say "Well I already did the work, I ain't doing anymore." I'd rather they NOT write their docstrings and be willing to work with people on writing something useful instead of burning themselves out on a bunch of useless specification work. 
I couldn't disagree with you more. &gt; You open up the logging page and what is the first thing you see... Well, the first thing I see when I open that link is &gt; This module defines functions and classes which implement a flexible event logging system for applications and libraries. &gt; &gt; The key benefit of having the logging API provided by a standard library module is that all Python modules can participate in logging, so your application log can include your own messages integrated with messages from third-party modules. &gt; &gt; The module provides a lot of functionality and flexibility. If you are unfamiliar with logging, the best way to get to grips with it is to see the tutorials (see the links on the right). &gt; &gt; The basic classes defined by the module, together with their functions, are listed below. &gt; &gt; * Loggers expose the interface that application code directly uses. &gt; * Handlers send the log records (created by loggers) to the appropriate destination. &gt; * Filters provide a finer grained facility for determining which log records to output. &gt; * Formatters specify the layout of log records in the final output. The first section of the documentation you linked to instructs users to read the tutorials, which are front and center in this documentation. It also lists the objects that you are complaining about not knowing how they fit together. To me, this reads as very useful documentation. &gt; Formatters... FUCK, how much more shit do I need to write a log message to a file? Why shouldn't I just use print? It's explained in the _second_ sentence of the documentation that you think is crap. &gt; And that is why I go to stackoverflow for examples of how to use the damn thing. You could try the cookbook, it's linked right below the links for the tutorials. --- I will agree with you that not all documentation is this thorough, plenty of other modules would benefit from having API, basic usage, advanced usage, and cookbook pages.
Sounds like you want [Sentry](https://sentry.io/welcome/).
Something like this? https://bpaste.net/show/985c1a853a1d BTW this should really be in /r/learnpython
If you can run your script from a bash console (if you're planning to schedule it then I guess you can :-) then you can use the Linux `time` command. $ time python -c "for ii in range(100000): pass" real 0m0.020s user 0m0.016s sys 0m0.004s The total CPU time used will be the sum of the `user` and `sys` numbers.
I like it. It runs on Windows, Linux, and OS X. It's free. It's easy for junior team members to pick up, but extensible enough for me. The built-in terminal is pretty good. Linter's built-in. And so on. At the end of the day, it's a tool, and I tell my team members to use whatever. But it's my go-to recommendation.
Can cython be compiled into an executable. 
Hey Agoose77 That doesnt seem to work for me, and didnt know this topic had ot be in learnpython, mybad. I'll make a post there, ty for telling me! 
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
Yes. Sentry is perfect for this. If you already use logging module, integrating Sentry is quite easy. Sentry provides a log handler. The end result is you will get alert when you log warning/error. Sentry has web panel, supports more than one project. One thing, though, is you have to purchase the SaaS service or host a Sentry server yourself.
The true documentation of the logging module is certainly the tutorial/cookbook. However if you google for "python logging documentation" the page you pull up is this API reference, and an API reference is not documentation. And yes they have these comments at the top of the page, but they haven't formatted the page for the readers. There is no subtitle for those opening paragraphs and so if people read it at all, they start with &gt; This module defines functions and classes which BOILERPLATE BOILERPLATE BOILERPLATE &gt; The key benefit of having the logging API provided by a standard library module is that all Python modules can participate in logging,BOILERPLATE BOILERPLATE BOILERPLATE and having wasted their time reading two paragraphs (technically sentences) that told them nothing, they skip to the first numbered section. If they do try to read the next paragraph/sentence they read the vacuous statement that "The module provides a lot of functionality and flexibility." In other news the sky is blue, and roses are red, and I am certainly not going to read the next sentence. Simply put this "documentation" which is stripped out of the docstrings, and has not been formatted for end users. Care has not been given to how it will be received by the end user. Compare it to this: -------- ***FOR NEW USERS*** If you are unfamiliar with logging, the best way to get to grips with it is to see the [tutorials](http://hyperlink/motherfuckers). ***FOR EXPERIENCE USERS*** This module defines functions and classes which implement a flexible event logging system for applications and libraries. The key benefit of having the logging API provided by a standard library module is that all Python modules can participate in logging, so your application log can include your own messages integrated with messages from third-party modules. The module provides a lot of functionality and flexibility, and there are many classes and methods, but the primary classes defined by the module, together with their functions, are listed below. * Loggers expose the interface that application code directly uses. * Handlers send the log records (created by loggers) to the appropriate destination. * Filters provide a finer grained facility for determining which log records to output. * Formatters specify the layout of log records in the final output. --------------------------- I can nitpick further and critique stuff like: "(see the links on the right)" which isn't guaranteed to be true (because it depends on screen space and browser layout, and also assumes that the reader isn't blind). In fact the entire opening section straight up disappears when I have my phone make the page mobile friendly. If they want to do this right that landing page should be nothing but a list of 4 links for the tutorial, advanced tutorial, cookbook, and then last of all the API reference.
I used to use vs code but I use atom now. I think I like vs code better
Vim :)
&gt; There is no subtitle for those opening paragraphs and so if people read it at all, they start with &gt; &gt;&gt; This module defines functions and classes which BOILERPLATE BOILERPLATE BOILERPLATE &gt;&gt; &gt;&gt; The key benefit of having the logging API provided by a standard library module is that all Python modules can participate in logging,BOILERPLATE BOILERPLATE BOILERPLATE If my teammates couldn't read an entire sentence before giving up I would try to get a different job. Seriously, you're making the assumption that just because the information _you_ want to see as a _new user_ is in the first 7 words? Give people some more credit. &gt; and having wasted their time reading two paragraphs that told them nothing, they skip to the first numbered section. So advocate that in this case they should have 16.6.1 Introduction ... 16.6.2 Logger Objects Which is a pretty minor change if you ask me. It still assumes that users can't read this documentation without maximum hand holding. &gt; Simply put this "documentation" which is stripped out of the docstrings, and has not been formatted for end users. Well, if you click on the link to the source code that's right there, you'll see that this page was not just stripped out of the docstrings of the module and was in fact written in a separate location. Specifically, [this](https://github.com/python/cpython/blob/3.6/Doc/library/logging.rst) file. &gt; I can nitpick further and critique stuff like: "(see the links on the right)" which isn't guaranteed to be true (because it depends on screen space and browser layout, and also assumes that the reader isn't blind). In fact the entire opening section straight up disappears when I have my phone make the page mobile friendly. Those are fair criticisms. They're also very much nitpicks. I don't write my documentation with a layout that is friendly for screen readers either. I also don't write my documentation to work well on phones, because no one on my team writes code on their phone. &gt; If they want to do this right that landing page should be nothing but a list of 4 links for the tutorial, advanced tutorial, cookbook, and then last of all the API reference. Or they could just have this same page, but with the links to the tutorial, advanced tutorial, and cookbook in-line with the introduction, and put a section header on the introduction. That seems like it would solve the majority of your issues with this "bad" documentation.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [python/cpython/.../**logging.rst** (3.6 → 051295a)](https://github.com/python/cpython/blob/051295a8c57cc649fa5eaa43526143984a147411/Doc/library/logging.rst) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply do057l2.)^.
Spyder is my only IDE for Python.
both are very good tools. I personally prefer VScode. But I used Pycharm a lot too and I can say nothing negative about it.
We analyze exome and genome using django and celery. Took 2 weeks of my time to port. No service interruption occurred and it was a 3 year old codebase. 
https://github.com/averagesecurityguy/scripts
What exactly are you trying to do? You can use a decorator to determine the HTML that is shown based on login status. Otherwise, you can't update the HTML or css without javascript
Looks like I am going to have to give VS Code a whirl.
Awesome! Great sites. This thread has inspired me to re-launch my non-profit foundation...previously we helped young people in media skills will now focus on coding. All I need now are some laptops...i've got lots of ideas to make it fun! Thanks.
I've been using VSCode for all my learning. When I start a serious project, I'll pull up PyCharm for that. My computer is pretty dated, so it does make a difference. I'm not sure how it works out in a production setting, but it's great for my learning.
It helps, but it doesn't get rid of everything. You can make it much smaller very easily by wiping your Python.
Ok - now I don't feel so bad putting in 'emacs'
Yes
When I try to load an hrd-image using the imageio module in Python 3 I get the error message ValueError: Could not find a format to read the specified file in mode 'i'. Do you know what that means or how to solve it?
Ok, having that ``TypedDict`` in stdlib.typing module would be really nice...
Wow! Docopt is really cool. I was not aware of it before. It is hard for me to imagine how it would be used in conjunction with pipeable. The primary use of pipeable is to read from stdin (though it is possible to read from sys.argv[]). The way it works is that pipeable will first try to read from stdin. If stdin is empty then it will try to read from the command line. By default docopt reads from sys.argv[] and parses the input. Is there a case where you'd need to accept input from both? If so I think we could make it work.
A Slack Bot with the `slacker` library is pretty functional it you need notifications while you are away from the computer and I regularly incorporate completion/progress/error notifications in long running processes. You would want to combine this with actual tools to process the logs. 
Jupyter notebooks and Spyder tend to be my go-tos. Other alternatives include Rodeo from Yhat and the JupyterLabs beta. 
I just need to figure out how to fully stop all processes. When there's an error in my input or something, even after pressing "terminate all process" the code was still running. I'd need to restart VS code again. 
Me too thanks! Used to use code and it's a fine editor but I wanted to tap into the magnificent raw editing power of vim and boy did I find it. Also between vim, code, atom, and sublime, vim is the only open source one that's not electron based. 
You should! /s
It's the best traditional general purpose text editor out there imo. IDEs are usually bloated and too monolithic. Vim and emacs require learning and aren't really ready out of the box. Code has good default features and a package manager. Superb product as in all
Maybe they mean Jython?
The HDR image is not a standard format like JPEG. You need to read it using Photoshop or other HDR software like Photomatix. But of course, you can look at the tone mapped image. 
Jesus H. Christ is it really this difficult? You don't need commit access to the Python source code, just go onto the bug tracker and remind somebody that it needs doing as they might have forgotten about it.
In that case I look forward to all the patches that you will be presenting on the Python bug tracker to remedy the situation.
&gt; However, Amazon being as sloppy as they are with their data, we are getting some non-ascii characters in the name and address fields. Stuff like "José Ramírez" or "Björn Jërgen." I'd like to replace these with "Jose Ramirez" and "Bjorn Jergen." This is nothing to do with Amazon being sloppy, they are just using real world 21st century data, so I suggest you bend with the breeze or you're likely to reap the hurricane or typhoon.
&gt; You just need the ability to transpile the Python to JS and you're good to go. Creating such a transpiler is obviously no easy task This article [How to convert Python to JavaScript (and back again)](https://www.infoworld.com/article/3209651/python/how-to-convert-python-to-javascript-and-back-again.html) lists four tools that can do just that. 
&gt; It still assumes that users can't read this documentation without maximum hand holding. It depends on your aim. If your aim is conciseness then obviously you must sacrifice some legibility, but if you are dropping 20+ page documents on people... you need to be prepared to hold some hands. Both the logging API and the tutorial weigh in at over 20 pages (when I pasted them into word YMMD). So these aren't extremely concise and tightly edited documents. They can afford to waste some ink on proper section headers and formatting tricks to draw attention to the appropriate elements.
Agree 100%. IMO Matlab’s documentation is a great example of how to write documentation targeted at users rather than developers (that is - aimed at developers on the Matlab platform rather than developers of Matlab). It particular, it leans heavily on example usage which I find is extremely helpful for users
&gt; I can’t see what caused the error at a glance, for your purpose you can just use a blank except: clause then. That is really bad advice, a blank `except:` should never be used as it hides all sorts of things, the worst being that when testing you can't even stop a rouge program with CTRL-C.
Yeah, it's slower because it needs to decompress in the temp folder.
/r/vim
You are correct in that this has nothing to do with Amazon being sloppy, but it does not change the fact that Amazon IS sloppy. While they provide a great service for consumers, they make it hell on the vendors with inconsistency and arcane policies. 
yes, i do
I started with atom and found VSCode similar but nicer
Hello I have also just started this course and happy to work alongside and help one another out. 
Yes I do. I like the balance between not being too bloated or too simple. It is also nice how they are improving the product every month. All settings are in one json file. But most of all - git integration. They implemented it most correctly, exactly how it should be done.
You should know that the body of an email message cannot carry arbitrary data so you will need to encode it to a pure text form such as base64. Here is an example: https://stackoverflow.com/questions/30043215/attach-file-like-object-to-email-python-3
Exactly what I was hoping for. This is great, thank you!
Thanks, I'm new here so I appreciate the link. I'll use that for things like this going forward
Nuitka is getting really nice. And it has the advantage of actually compiling your code, so the source is truly hidden.
Writing a script to filter some large csv files for a database
I have an old version of Visual Studio (2012) installed on my work machine, but I've been unable to get current versions of Python into it (I think it doesn't support anything after 3.2) so I haven't been able to use it for that. I liked it for Visual Basic coding, so I figure it would be nice if I could get python in there too, but unfortunately we're just behind the curve here.
Take a look at https://pypi.python.org/pypi/Unidecode It does what you want to do. Make sure you are also specifying the correct encoding in your script. ("# coding: utf-8" at the top of the python script.) &gt;However, Amazon being as sloppy as they are with their data, we are getting some non-ascii characters in the name and address fields. lol... Unicode is THE standard. It's not sloppiness, it's them doing their job.
I like it better than Pycharm and Sublime. It’s pretty much someone taking all of Sublime’s best ideas and adding a Microsoft budget to it. It’s lightweight and multilingual with solid Python support, whereas Pycharm is all Python. The plugins seem better quality than Sublime where I could never get a compatible set of plugins working together. Pycharm is clunky by comparison and the keybindings always seem unexpected. 
Used PyCharm for a good while, really enjoyed it. The main negative I found was how long it took to start. Other than that it was great and if you are looking for a more fully featured IDE I would recommend it. My licence expired though so I gave a bit of time playing around with other editors and found VS Code worked just as well so that's what I use for Python development now.
Absolutely. One of my favourite tools ever.
That's a ton man. Can you sum up the purpose of all of them before I go through them? 
This is about Visial Studio Code, which is a different editor than Visual Studio.
It's hard to know what you can use to trigger a call without knowing your environment.. are you on Linux? Windows? iOS? Android? What kind of phone system do you have access to? Is this a VOIP/SIP call, or a regular telephone network? If it's a regular network.. do you have a modem hooked up? Basically we need to know more ;-)
It's 2017, learn to unicode.
What has Amazon being sloppy got to do with people entering their own names in their own languages? Why should people from around the world be forced into using ASCII when unicode has existed for years?
I’m the only one who uses Jupiter notebook? Ok :) I just like how modular each piece is, so I can selectively run pieces of the whole over and over during testing without running it all each time. 
Does anyone know if you can do debugging in it? I also like to use pycharm and get the in-scope python console and object evaluation while debugging and viewing pandas dataframes, it's so useful. Does it also do refactoring? 
 choice = input("Enter Menu Choice:") #Added text, this can be removed. age = input("Enter Age:") age = int(age) #changes age to an integer alcage = 21 if choice == "S": # I seperated the if/then statements, probably not needed. if age &lt; alcage: print("Vegetable Juice") elif age &gt;= alcage: print("Cabernet") elif choice == "T": if age &lt; alcage: print("Cranberry Juice") elif age &gt;= alcage: print("Chardonnay") elif choice == "B": if age &lt; alcage: print("Soda") elif age &gt;= alcage: print("IPA") else: print("Invalid Menu Selection") I took a few liberties, but I think this'll do it. Your code will cause an error comparing the age to a number because input() stores values as a string, not an integer. No problem, though. Also, S, T, and B should have quotes around them in the if statement to designate it as a string we're comparing the string inside "choice" to. I also made it so if the age is 21, alcoholic beverages are served. If you want to change this so it's 21 or lower for non-alcoholic beverages like in your description, just change alcage to 22. (I just assumed alcoholic beverages were served if they're 21 or older.)
Ah, then I'm just way off base, sorry about that.
This is a great release. Two major features (protocols and TypedDict) to support structural subtyping.
[Visual Studio Code](https://code.visualstudio.com/)
I like VScode. I actually swapped from pycharm a couple months back when they released the official support for python in vs2017. Give it a go. Its a sort of hefty download (on my slow net), so if you have shoddy internet as well I would head to a local coffee shop or somewhere of the sorts with a laptop and snag it. Best of luck. 
Since logging is a python module used for programming python code, isn't then suposed to be for programmers to begin with?
The problem with Jupyter is that, as soon as you move from a single script to a multi-script project, Jupyter notebooks get in the way. You can't import functions/classes from one notebook to another out of the box, you need to write code simply to get that working. Once you start getting into the realms of multi-module projects, you should use .py files instead like everyone else because it's just better. Instead of relying on Jupyter notebook cells for modularity, try instead to use functions and modules to achieve the same thing if not already. This will allow for proper automated testing within a separate script.
Vscode and most electron apps are hard on memory. It also can't be trusted. Unless you build it and every plugin yourself. If you don't care about that then sure it isn't bad at all.
Yes i know blank except is bad, however the code appears to be an one off script and that's the quickest fix I thouhgt of at the time. Perhaps printing out the error is better but I was too tired to think at the time.
I drive a car, doesn't mean I want the mechanics manual in my glove compartment. So yes I am a programmer, but I'm not paid to write logging frameworks. I'm paid to do statistical analysis of data, and I occasionally need to write a warning or debug message. I need like 4 functions or of that whole mess.
Well I'm sure that creating those tolls was no easy task.
Looking at the updates for the latest version (1.17), that is amazing amount of resources being spent for something that is FREE! PyCharm is great but VS Code is leading them all I think! 
If you want to code python, then you need to know how to program using python, which means you will need documentation for programmers. I honestly don't even understand the concept of a User to begin with, in the context of a module API. APIs are suposed to be used by programmers... Just RTFM and don't be lazy. 
What do you mean "can't be trusted"?
Absolutely. The debugging is my favorite part of what code offers compared to sublime. 
It's git integration is the best for me. So simple.
["scripts I use for pentesting engagements"](https://github.com/averagesecurityguy/scripts/blob/master/README.md) 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [averagesecurityguy/scripts/.../**README.md** (master → b413a2c)](https://github.com/averagesecurityguy/scripts/blob/b413a2c666a96584c7fdb64d8babc7f3312a7d32/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply do0j7tw.)^.
I visited the World Company in Lawrence on a college field trip sometime around the spring of 2007. It would have been somewhere around the version 0.96 days. Anyway, back then I was a PHP guy and had never touched Python. But after meeting those guys, I went home and tried out Python and Django. And I've been using it ever since :)
You could also use intellij, it has a python plugin which works great. 
&gt; It is documentation for the PROGRAMMERS of the module, not for the USERS of the module. Which is where Matlab shines in the corporate environment. I love Python, I use it everywhere but jesus is Matlab's documentation so much better.
You are right I think I will give that a shot when I have the time. Although to be honest, I'm not really sure how serious that critic will be taken. As you say yourself, this article is 12 years old and I'm sure these points have been raised already. Still no reason not to try. Edit: Do you think it would be wise to start with contacting docs@python.org as stated [here](https://github.com/python/cpython/tree/master/Doc)? Edit2: To answer my own question: according to this [blog post](https://eli.thegreenplace.net/2011/07/12/helping-improve-the-documentation-of-python) that may be the right way to go.
If you're going to be that paranoid, [why stop there](https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf)? Building it yourself doesn't help.
Should’ve clarified. I convert all Jupyter files to .py after testing for your reasons stated above. It’s just a great debugging and testing environment for rapid development. 
I used to use cx_Freeze to deploy internal applications at work. Configuration for certain packages like numpy, pandas, and pytz became a nightmare to setup and upgrade. I started just setting up virtual environments and writing batch scrips for users to launch applications.
An API user is someone who writes code that uses the API. They don't write the API themselves. An API developer is someone who writes the API. There, now you understand
Interesting that people have been complaining about the pandas docs. I've always found them pretty good – missing a few things here and there, sure, but not as badly as a lot of other libraries I use (statsmodels for example)
I used sublime and atom before and VSCode is better than both of them for me. 
+1 for VS Code with Python and full stack dev. It melds the layers very well. HTML templates are much easier to follow in VSC. Monthly updates are great too. 
If I'm writing a gui, I try to stick to tk, which is in the standard lib. No noticable performance impact as far as I can tell.
If you want something that runs leaner than Electron Kdevelop has amazing Python integration and mostly the same feature set as most other popular ides.
I started with Atom. I _want_ to like Atom. But I agree after trying VSCode for a while it just feels like a better Atom. I prefer Pycharm Community Edition over VSCode for writing Python, though. I fee like I fight with code completion on VSCode and Atom more than it helps me.
That's a rather patronizing view of "users". Every documentation has a "reference" part, which is what you linked for `logging`. Reference docs are for people who are already know their way around the library, but need to look up or confirm some details that they had forgotten, or to understand some edge case behavior, or for the curious minded to understand *why* a given example works. Unless the documentation is just plain bad, I would not advocate using the code as a substitute for documentation because they might contain implementation details that shouldn't be relied upon. The counterpart are the tutorials and examples, which are meant for beginners who have little to no familiarity. They introduce very basic concepts, offer a selection of examples, etc. so the user can get acquainted to the style of the library. They are almost never exhaustive − if you want to do anything out of the box, you have to learn how the examples work by cross-referencing the reference docs and build an understanding of how the pieces fit together. Any well documented project needs both kinds of documentation. What is unfortunate is that tutorials don’t tend to get as much as attention as they should, or that they tend to become out of date very quickly.
I've loved the idea, but I haven't had a lot of luck with the packages I need compiling without error. 
As far as I know, there isn't a pythonic way of creating a standalone executable. The official way to distribute your app is to create a package or wheel. https://packaging.python.org/tutorials/distributing-packages/ That being said, I like standalone executables, and use pyinstaller 
Yeah because trusting Microsoft to protect your privacy is equivalent to trusting the GNU compiler. Funny.
I haven't found anything that can touch pycharm. Vscode is nice, but it's code inspection for python is subpar. While pycharm is a lot slower, it's code inspection is soo much better, it's not even a comparison. It also has great got commit and great git resolve tools
This reference style of documentation is still very useful, though. Problem is, it's a poor substitute for a manual. Great documentation should have both - method references but also tutorials and examples as a primary point of entry.
I also use atom. It's a nice hackable editor.
I love python, but I use Go if I need binaries that run anywhere 
As a loud and proud user, I hardly think it is patronizing. It's what I want. If I need to I am fully capable of reading the raw source code of the modules I use. I just have other priorities. I'm happy to leave the office early with code that works, than to leave the office late because I had to fully understand some module I imported before I could really use it. 
I keep sublime as my go-to for reformatting wizardry. It's multi cursor support is still best in class. Vs code is better for general development right now tho.
I wrote a script to scrape public comments from the Federal Communications Commission (FCC) Express Comments Filing System (ECFS): https://github.com/zyocum/scrape_fcc_ecfs It took several hours, but I was able to collect all ~22 million comments on docket item 17-108 "Restoring Internet Freedom". I’m interested in doing some analysis (as others have done) of which comments were submitted by astroturfing efforts.
Linux Need to connect or make calls to and receive calls from a regular phone network, example Airtel, Vodafone (these are equivalent to Verizon, t-mobil, if you're from the US). No modern, use Wi-Fi
Great article, thanks.
Heck yeah! If you use anaconda, use these options to use an anaconda prompt instead of powershell/cmd/bash (where {{conda path}} is where conda is installed) "python.pythonPath": "{{conda path}}\\python.exe", ( or "python.pythonPath": "{{conda path}}\\envs\\{{conda env}}\\python.exe", "terminal.integrated.shell.windows": "C:\\Windows\\System32\\cmd.exe", "terminal.integrated.shellArgs.windows": ["/K", "{{conda path}}\\Scripts\\activate.bat {{conda path}}"]
There's a [Jupyter plugin](https://github.com/DonJayamanne/pythonVSCode/wiki/Jupyter-\(IPython\)) which lets you selectively run different parts of the code. It's not exactly like a notebook, it's more like Matlab's cell mode.
IntelliJ for serious Python work. VS Code for light editing and other stuff
vim is really good.
There's a PyCharm community version now if you didn't know. My student license ends in January and I was looking into cost when I stumbled upon the community version.
Jupyter is our team's replacement for excel for statistical analysis. It's perfect. 
I've had similar results with cx_freeze for my own PyQt4 application. 40 MB for the whole thing with the QT dlls taking a significant portion of the space.
If you're that tinfoil-hat paranoid, how can you trust your hardware? 
Nuitka doesn't make standalones yet, does it? (in other words, everything in one file).
Yeah, I use VS Code after only having experience with C# and visual studio. The code completion has taken some getting used to.
Thanks for the kind words!
I use VSCode a lot now, I used to use Spyder. What I really would like to see is ConEmu as the terminal in VSCode.
Use something like mailjet, it's free for under &lt;6000 calls
Mathworks has like 3000 employees though. Open source funding like NumFocus is a step in the right direction, but most of the people who are implementing the core parts of scientific Python aren't being paid for that. Some are, mostly Continuum and Canopy employees, but most aren't.
I use Sublime Text 3 and PyCharm. I find VS Code and Electron/Atom sluggish and bloated. 
Well why would users care about the documentation for any of these packages anyway? Wouldn't they want to know how to use the final product?
Python can't be the only language you know guys.
These are pretty cool. I'm sure they help you a ton. 
Oh yes, Python, JS, html, css. I love saying this because I was so anti-ms as a teenager and into my 20s. But now I have a microsoft repo on my Fedora laptop. I've left vim after some 15 years of using it exclusively. All because of vsc. It's a great product. My only beef is that it tries to do too much with the built-in terminal. Being a true linux geek I am not about to leave my custom terminal for anyone elses. So I'd rather have integrations or help for working with my own terminal than to use theirs. I'm not after an IDE, but vsc is definitely better than vanilla vim.
is it possible to configure an editor in pycharm to automatically [python rstrip](http://codinglio.com/strip-python-lstrip-and-rstrip/) remove whitespaces in blank lines and trailing whitespaces when saving a file. 
Seems like you've answered you own question so all I can offer is the best of luck :-)
This is actually why I use VSCode. It’s Vim keybinding extensions are top notch. Better than anything I have used in Sublime or Atom. I came from Vim and still use it daily, but VSCode with Vim keybindings is just even better, best of both worlds.
Quality article. 👍👍👍
Also worth noting, among an apple, an orange, a banana and a Ford F-150, the F-150 is the only one that is a truck and is not plant based.
That was excellent
I was using VS Code for python for a while, but then hit a showstopper bug on Linux - it's been reported, but not handled in any way for more than 2 months now. So, I went back to PyCharm, and actually my expectations from using VS Code for so long forced me to learn how to do a lot of things better in PyCharm, and now I don't think I could go back. At least with PyCharm there's commercial support. VS Code python support seems to be all via third parties, and it does not seem to get the same attention that the general VS code editor does. All issues I reported to the main VS code repo were handled VERY quickly. But multiple issues filed with python extensions just kind of lingered.
Whats the best way of removing the unused files and packages? I usually import for example the things I need from PyQT and it automatically copies the whole package into the built directory. I have a clean python install and all third party packages are in a venv.
Nginx is a front-end webserver and reverse proxy that's efficient and deals with a lot of security issues, so it's always recommended to have it as the entry point for every web app. It takes a beating way better than python would. Gunicorn/uwsgi are HTTP servers designed to run WSGI (python standard interface for HTTP applications) in production. It manages python processes, load-balancing between them, async event loops, etc. Gevent/Eventlet/AsyncIO/uvloop are event loops for asynchronous IO. gevent and eventlet are based on greenlets, which are an older primitive for suspending functions implemented in C. AsyncIO is the new standard library for asynchronous IO, based on generators instead of greenlets. It ships with a reference implementation of an event loop, but offers an interface for user-implemented loops as well. Uvloop is an alternative event loop implementation for asyncio, based on a very fast C event loop called libuv, which is the basis of nodejs too. Your application code doesn't need to change, since you're writing against the asyncio interface, and only changing the underlying event loop implementation. Sanic is just a web app framework, inspired by flask, but designed to work with asyncio by default. The reason you can't really use uwsgi/gunicorn directly with asyncio code is that the wsgi standard is incompatible with the newer async/await primitives. The wsgi callback is by definition a synchronous standard python function, so the web server can't await on it. This isn't an issue with gevent because the greenlet abstraction is more magical, as it allows you to suspended any python function, even the wsgi callback, so the web server can just spawn a greenlet running the callback for each request and they'll happily suspend and resume until they are finished. To use asyncio efficiently in production you would need something analogous to gunicorn/uwsgi, but I don't know if there's one that's production ready yet. 
The VSCode python debugging bits can be a bit buggy. The Python extension is NOT supported by MS, it's a third party dev, unfortunately. And, for the most part, it's [just one guy](https://github.com/DonJayamanne/pythonVSCode/graphs/contributors). So, if you hit a bug, don't expect much. 
vs code is faster than pycharm, its convenient to quickly look around project.but pycharm is more stable.
Have a clean install for starters. Then look at the packages you have installed and decide if you need them all. Delete it, build it, see if it works and repeat. Then read the build log and see what it found. Google what that funny package asteroid does. Why the heck is nose included? Go delete those pieces from site packages. Build and test. Often this is enough. Now look at the names of the big DLLs. Do you really need HTML stuff in your desktop app? Delete and rebuild. Most of the monster packages have large submodules. If you can stay within a submodule, your build will be smaller.
If all you do is Python, I think PyCharm holds a slight edge over VSCode. Everything is there out of the box, and it just integrates well with Python (duh). VSCode lets you work with nearly every language though, with a very rich featureset out of the box and with just a handful of plugins you can add every other feature you want. I value that in an editor, since I prefer using just one environment for all my programming instead of having several setups to learn and maintain for each language. Atom and Sublime are other contenders, but I think VSCode works better.
Makes sense. That's probably the best way of going about it. A lot of people keep their code exclusively in Jupyter notebooks though, which I think isn't the best in the long term.
You can. The easiest way to do this is with "ajax". You'll want to pick a javascript library to accommodate this. Django on its own can not do this. Django compiles and returns the template. It is not stateful.
Thank you for your response! Is it enough to see if my app starts after deleting a module? Or do I need more coverage to be safe.
I think in this context, developers = Python core developers and users = normal Python devs.
It is officially supported now, isn’t it?
I'm going to get hated on, but what they need to do is try get their documentation on the level of Mathematica. It's in my opinion the gold standard for documentation for users. If you can just give it a browse. Sure the language is strange, but the documentation is orgasmic. 
In what way? Python debug support is entirely dependent on an extension developed by [DonJayamanne](https://github.com/DonJayamanne), he's pretty much the sole active contributor to the repo, and does not appear to work for MS. I don't mean to minimize his contributions (or anyone elses), as I think the extension is great - but there's a big difference between the support you will get on VS Code core issues and an extension with a team of (mainly) one behind it. There's at least a dozen active contributers to the core repo [here](https://github.com/Microsoft/vscode/graphs/contributors). And yes, it is buggy - if you include an .envFile on Linux it takes all of your ENV variables and re-asseses them, splitting them on a `=`. Which means that anyone who has LS_COLORS defined will get an error when they go to debug, as outlined [here](https://github.com/DonJayamanne/pythonVSCode/issues/1104).
That depends on your app. Are your imports at the top? How do the modules you need get imported (e.g., at import time vs runttime)? Opening your 5 windows is probably good enough depending on how the imports trace. It helps to know your code and what part your hacking on (what could deleting matplotlib dependencies affect?). Often you'll find x is required, but if I get rid of y, x is not required. For my 3d render, it has a command line for me to enter a geometry and results file. I have shortcuts for most things that I test frequently. The menus I stress less about because I put my gui imports at the top. Never had a problem with the menus assuming it loaded. So yes, test, but probably not everything each time. I'm just trying to test the dependencies aren't broken.
Thank you for your help! I will try to shrink it that way.
I use pycharm and it's been great so far. My only gripe is that it is a little heavy on resource usage, and can become nonresponsive when indexing a large number of files (eg after git checkout) which is frustrating. 
Yeah, it works great, keeps everything nice and organised, got integration is good. Not tried any debugging, not sure if that's an option...
Doubt it would be useful... Javascript already here, and the biggest trouble it has to me wouldn't be corrected by python... Then again, it wouldn't be Guido's effort to make it a browser enabled script language, but the browsers... 
There's nothing to discuss here. All of this is personal opinion presented in an obviouly intentionally inflammatory way, with no facts to back it up.
if you still have any kind of academic email address you can renew it
I have been using VS Code for a year now on Fedora mainly for Python develpment. I am curious what bug you encountered?
Could you share your personal opinion? I dont know anything about other languages or what "a good language" looks like. 
Python is a good language. It's not just used by "new programmers" - it's used by Google, Dropbox, Reddit, Instagram and millions of other people. It's also a very good teaching language, because it doesn't require learning obscure syntax to get started, and doesn't vomit incomprehensible errors at you (most of the time, anyway). "Proper encapsulation tools" is subjective, and using exceptions for "normal program flow" is flat out not true.
Thanks, so you dont think it will give me bad habits when i move on to a new language? 
There is option for that in pycharm settings. No need for separate program.
So if I understood this right, in a Django project, when I write `workers = cpu_count() * 2 + 1` on 1 CPU, that means there are 3 gevent processes, and each gevent process decides on its own how many requests to juggle? Say one request asks for a long database query, does gevent see this somehow and start working on another request in the meantime? My understanding of async is basically that but with less processes, so now I'm wondering what the difference is if gevent is also async? &gt; Sanic is just a web app framework, inspired by flask, but designed to work with asyncio by default .... To use asyncio efficiently in production you would need something analogous to gunicorn/uwsgi, but I don't know if there's one that's production ready yet. Sanic has two options for deployment: 1. Run it directly with `app.run(host='0.0.0.0', port=1337, workers=4)` - I thought this was an inefficient method like Django's `runserver`, but there's no warning about it so maybe it's the proper/recommended method? 2. [Use Gunicorn](http://sanic.readthedocs.io/en/latest/sanic/deploying.html#running-via-gunicorn) - but we've established that Gunicorn is for WSGI, while async that needs ASGI, so does this method disable the async in Sanic or something? e: Found a [relevant issue](https://github.com/channelcat/sanic/issues/250) that suggests WSGI was abandoned because of poor performance, but apparently it's now supported... no comments on performance with it in the docs unfortunately
I used to take photos for vacation rentals. We used to have to shoot balcony shots into the sun all of the time and then stack them later when we edited them. This is cool!
I thought multi cursor was easy on Vs code :/ just alt + click ?
No, it will not.
It might be the case is that CoffeeScript is _isomorphic_ to a strict subset of Javascript. That would be the case if there are certain valid Javascript programs that CoffeeScript would never generate.
The first one got me. print str*2 if str == "Hello World!" Shouldn't this raise a syntax error? A ternary operator requires a fallback value, does it not? Also, why Python 2 if this is targeted for beginners? Aren't most of them currently learning Python 3? EDIT: You also used only one `=` in your comparison; try multiplying an assignment operation. &gt;&gt;&gt; s = "Hello, World!" &gt;&gt;&gt; print(s*2 if s = "Hello, World!") SyntaxError: invalid syntax
Who cares, you use typing for dev, you can pip install it in 2 secs. It's not like you need to distribute it.
Yes, finally mypy is now usable !
This reeks off "Only Java exists and has ever existed."
The question is poorly stated. It should read something like &gt; Assuming `str` equals "Hello World!", what is the output of `print str * 2` I'd also like to point out that the choices for the second question are: * getkeys() * key() * keys() * one of the above I chose "one of the above", but was told it was incorrect; I'd like my money back. `keys()` definitely was one of the above choices. 
Yes. You could use notepad if you wanted to. 
Could you explain this? Is Java super hard to understand? 
What has this do do with anything? It just seams like whoever wrote that is so used to Java that they's kind of brainwashed themself into thinking anything that is not Java is wrong.
Really? I tried that and found it can't even do the basics properly. Like :sp, :vs, or filename auto-completion with any file command, and so on.
You must be joking!!! It will give you good habits, how to write lovely, simple, clean code that you and other people will be able to read months or even years after it was written. The drivel you quote was clearly written by somebody who has never bothered to read The Zen Of Python. I'll leave you to find it and report back :-)
I dont know, i dont know anything. Im trying to understand why you think it is a Java guy and not a.. C guy or whatever :) 
This is uplifting to hear :) i choose to believe you guys, as i clearly know to little about programming to make my own conclusions about how great a language is :) 
Well you could export it in an standard format like openexr
It's not 'tinfoil-hat paranoid' to not trust Microsoft. They literally put keyloggers into Windows 10.
I do all my backend work in VS and all my JavaScript/typescript in vscode. They compliment each other well. 
Can we have a link to the original comments please as my google fu has let me down :-(
Try using phantomJS with selenium to login and then grab the file?
https://www.reddit.com/r/learnprogramming/comments/74mjxn/want_to_learn_a_lowerlevel_language_should_i/
Thanks. I want to know if it can be done only using python. Maybe I will give PhantomJS a try if I exhausted all possibilities. 
I've got a simple text based game I'm writing as my first project. No where near done, but I'm happy with how it is so far. https://pastebin.com/wP1JBu2Y Feedback is always welcome.
With a deeply recursive structure - like I might have - comparing ids could be a pain. Besides I am not trying to prove the deepcopy works here - I am able to prove that deepcopy works on each individual member structure - I want to prove that deepcopy was called on an instance - so I can mock out the member classes and just test the operations on the parent.
Yes - but most/all of my attributes at this level are simple strings etc.
Again this is proving that the copy works - which I can prove already for each of my child attributes. I am testing the parent class - and I want to prove that it tries to deepcopy it's children - while still mocking out the child classes.
Not sure how that would work in my case. The child classes are all mocked - and therefore deepcopy on the instance simply returns the same object.
Not sure how that would work in my case. The child classes are all mocked - and therefore deepcopy on the instance simply returns the same object.
Disclaimer: This is not an official Google product [1] [1]https://github.com/PAIR-code/facets
Sounds to me like you need to do some research into what your local phone companies have for computer integration... Most likely they have VOIP, SIP or mobile apps, which you can take advantage of. Maybe a web app you can use to dial from.. You'll have to ask them! Good luck :-)
Let me try to explain I have a parent class - call it Q, and a set of other classes which are child classes of Q - call them A,B,C,D. I don't want to test A,B,C &amp; D - I do that elsewhere. Here I want to test Q - and prove that when i do operations on Q that it does the right things on A,B,C &amp; D - I do that by mocking out A,B,C &amp; D; and this works in all cases apart from deepcopy. I can't find a way to prove that Q attempts to deepcopy A,B,C,D - but since they are mocked out deepcopy on them returns the same instance, but there is no way to assert any calls on the __deepcopy__ method 
I never said it did everything. VSCode already has keyboard combinations for all of these. If you are a super power Vim user then sure this probably won’t be a good replacement. I wouldn’t say using screen splitting is “the basics” since it is pretty rarely used. At least with everyone I have ever worked with. Though I’ve seen tmux with Vim. Anyway, the command structure is fairly simple. You’d probably have to spend all of 15 minutes to add those.
Yes - that will test that the objects are different - but if the Copied class is inside another class - and mocked out, the is test doesn't work.
shudders a little - I would prefer I didn't have special attributes just to support testing.
Most people that trade fx want the quick and easy way to do things, but not me. You should only read your forex rates directly from the broker that you will trade thru, as these rates can vary quite a bit between data sources. The best ( and free) way to get fx rates into a python program is to use metatrader to create your own online or local data feed. Metatrader allows creation of DLL, so the possibilities are limitless.
Indeed, although apparently the platform randomises the order of the answer every single time. That being the case, "one of the above" doesn't make sense in the first place. :p. The second question is also poorly stated, albeit less so than the first one: it wants a function, not a method.
It's also not python, it's Polymer (built in JS) and Typescript...
You should only mock up the parts of the system that are irrelevant to the current test. Your test should run the code that does the child object's deepcopying, so you should'nt mock them for this test.
You should only mock up the parts of the system that are irrelevant to the current test. If your test involves the code that does the child object's deepcopying, so you shouldn't mock them for this test.
Anything can be created with Python, it's Turing complete. Whether it's a _good idea_ is a whole other question. For desktop apps and web backend, Python is generally a good choice. For web, you will also have to learn HTML/CSS/Javascript to build the frontend, no matter what language your backend is in. For mobile apps, native languages (C# on Windows, Java/Kotlin on Android, ObjC/Swift on iOS) are generally a better option.
Thanks man!
The comment might be right for that person. For me the newer syntax is easier to read. The old one makes me wonder: 'What the hell is the modulo of a string and a tuple?' The new syntax lets me ignore the content of the string while instantly realising: 'Someone is doing something to that poor string.' And if I am not familiar with the syntax I at least know what function I have to read up on: format, while with the old syntax I am totally lost as what to search for in the documentation.
Wait, why are you linking to a quiz for Python 2? 
Does VScode support remote interpreter and autoupload to a server when you edit the files? I don't think so. I could be wrong but I doubt it. What about viewing databases? 
I plan to. I'm diving right into grad school if all goes well
the --portable parameter does that.
That's just the front-end visualizer. It does have some python in it if you dig into the source paths.
First of all - amazing work. Really impressive. Second - I see that you used prints to stdout to capture frame information. def log(msg): print('[LIVEPYTHON_TRACER] %s' % msg) sys.stdout.flush() @debounce(0.01) def log_frame(frame, should_update_source): log(json.dumps(generate_call_event(frame, should_update_source))) Could a python program that prints other stuff to the stdout cause a problem?
Thanks! Printing to stdout a poor hack done for convenience - I should be creating a separate socket connection instead. You won't have any problems unless you prefix what you print with "[LIVEPYTHON_TRACER]".
&gt; I should be creating a separate socket connection instead. Yeah! That would be a good idea. I think Nodejs works reasonably well with sockets too.
Just googling that, found this, from 2013: &gt; Right now, it will create a folder "_python" with DLLs, and "_python.zip" with standard library modules used along to the "your-program.exe". Copy these to another machine, without a Python installation, and it will (should) work. Making that statement fully true may need refinements, as some DLL dependencies might not be defined yet. So that's not a standalone. A standalone to me is a single file. Has the portable option changed somewhere else such that now it is a single file?
oh! i'm talking linux here. in linux it drops a /dist/ directory and gives a single executable in the parent, where i execute nuitka. i'm sorry for forgetting that it might be different in windows, though please make sure your information isn't out of date.
The only correct answer. 🖖🏻 https://media0.giphy.com/media/f5BwvEFBcgzU4/200w.gif
I see. But if I'm understanding you, there's still a folder in the Linux version, so even there it's not a standalone.
It was [specific to the launch.json and specifying an envFIle](https://github.com/DonJayamanne/pythonVSCode/issues/1104), so a lot of people likely won't run into it. We use Docker with .env files for everything, so we ran into it a lot. I tried a couple of variations of other debug setups, but none really cut it. 
What of the folder named python and the "statistics generator" files?
The workers setting probably means the number of processes to use. That is the number of python interpreters the server will run to handle requests. ideally you only need one process per processor core, there's no reason to have more. The async_connections setting from gunicorn (when async_worker = gevent) means how many concurrent requests each spawned process will handle at once. To be able to do django db queries and the like asynchronously with gevent, it relies on monkeypatching the standard library networking libraries. Just put these lines in your wsgi entry point, BEFORE importing any other module: import gevent.monkey gevent.monkey.patch_all() and magically almost everything will be concurrency friendly. I personally wouldn't use something like sanic in a production environment. It's still highly experimental. But you should be ok using its own run method, as long as you're not exposing it directly to the internet, you'd only need some other way to manage multiple python processes. 
This guy does SQL queries.
Data analyst can mean a variety of things each depending on the company you work for. What I would recommend is looking at job postings on a website like Indeed.com and see what skills are referenced the most. As far as Python, I would make sure you pick up the 2nd edition of Python for Data Analysis. Best of luck!
Yes, numpy works on pypy3.5.
numpy and pandas mostly work on pypy3.5. Please try it, and report any issues you encounter. BTW, pypy3.5 has f-strings, so you won't need to replace them.
I would also check out the Django framework, if you intend to use Python with those web apps. 
There's a ton of information on learning python in r/learnpython, and a ton of career advice in r/cscareerquestions.
I mostly use matplotlib or origin (or the open source alternative sciDAVis). Matplotlib is a python module with a lot of options that works really well with numpy. Origin is like an advance, graph-oriented version of Excel. 
I’ve totally missed the point of the PEP, even after reading the rationale. *Why* would you want to distribute type information without the implementation? It makes sense to do so in C++, where you need a header in order to consume a static library.
It's definitely not the ideal solution. You could write a new class in your test, add the attribute, and only have it exist in the test, but again that's a lot of work.
 import inspect import sys get_current_module = lambda: sys.modules[inspect.stack()[1].frame.f_globals['__name__']] 
Are you using Python 3?
this did not save the way i wanted it too. the ^ is pointing at the y of the file type 
2.4.1 should i be using 3?
Why are you using Python 2.4.1 specifically? That's an ancient version.
because I have the programming knowledge of a 2 year old. I was looking at a Python tutorial online and that was the link it gave me 
What tutorial are you looking at?
http://sthurlow.com/python/lesson01/ 
This is ancient. Don't use it. Try something like [this](https://leanpub.com/python_101) instead.
random thought, to allow developing to an interface without requiring that code to actually exist locally I could see it being useful for developing stuff in cases where you don't have a local copy of the production server plus sometimes a third party would like to stub out a package without dealing with stubborn maintainers - - - note: I'm guessing for a bunch of this, I always get confused when I see the word "resolution" and "path" in a PEP but regardless, this also refers to first parties, since there is 3 ways to type a thing (inline, external file, and external folder containing stubs), but there isn't a decided way how to say "this package that is already installed, provides these type stubs at this location", in the inline case, that can be fixed with `--follow-imports` in mypy, but in the external folder case, you need to find each folder, and then throw that in `MYPYPATH` which isn't exactly feesable so this is like, "hey, this is a way for packages to say, my types are here" to solve that
thank you 
Currently working on a script to sort my download folder, recognizing film from series, putting all the series into the same folder, sorting tutorials from the rest of videos, software in their own folders, etc
To format your code, write a line that isn't indented: Then any number of lines that are Indented at least 4 spaces. Then a line that isn't indented. 
There's something frightfully depressing about the fact that the example dataset used is data about mass shootings. That that's so ubiquitous that it makes sense to use it as an example.
My entire post is indented. 
You don't say what's wrong with it.
Exactly - and I am not trying to test that the object gets copyied correctly - that is tested elsewhere in the suite. Here I am trying to prove that the parent class does the right thing - and that includes invoking deep copy on it's children - regardless of what those children are. I think the ONLY solution is to refactor the code on ALL of my classes (current around 20) so that they have a copy method - and they are responsible for deepcopying themselves. That way I can prove that the parent class calls the copy method and can test each class with mocked out children. My intuition is that you should test each class with **all** of it's dependencies mocked out - and then also do integration testing where you test the API with everything in place (with maybe only external sources mocked up so you can control data and error conditions). Thank you for trying to help - it is appreciated.
I can already see many things that are wrong, but what I'd like to know: what is it supposed to do, and why in such a garbled, unpythonic way? To fix this thing pretty much requires a re-write. Is this some last minute homework project after not paying any attention in class? 
Yes, which is why -- for me at least in the iOS app -- the only part of your post that is in `code formatting` is: import sys And all your code in snake case looks_like_this. You have to have the unindented line above and below the indented code block.
Recommended steps to fix: 0) Stop playing games all day and pay attention in class. 1) Learn basic Python syntax and libraries. 2) learn SQLite or similar for all the storage-related stuff this wants to do. 
What isn't? [r/learnpython](https://www.reddit.com/r/learnpython) 
What's wrong with PyAutoGui? That library is great and has always worked for me. 
Not sure about iOS, but it works correctly on the web and in Boost on Android. I'll add the extra lines just in case.
Might just be the iOS app, as it appears correct in Safari... still I'm pretty sure I saw it mentioned somewhere on the formatting code for Reddit link, one line of unindented text before and after every code block. At the same time the iOS app doesn't respect escape characters at all, so it's probably just the app's formatter being buggy.
What is AOP in this context? I googled "AOP programming" and I get "aspect oriented programming". Is that what you meant?
Hi there, from the /r/Python mods. We have removed this post as it is not suited to the /r/Python subreddit proper, however it should be very appropriate for our sister subreddit /r/LearnPython. We **highly encourage** you to re-submit your post over on there. The reason for the removal is that /r/Python is dedicated to discussion of Python news, projects, uses and debates. It is not designed to act as Q&amp;A or FAQ board. The regular community is not a fan of "how do I..." questions, so you will not get the best responses over here. On /r/LearnPython the community is actively expecting questions and are looking to help. You can expect far more understanding, encouraging and insightful responses over there. No matter what level of question you have, if you are looking for help with Python, you should get good answers. If you have a question to do with homework or an assignment of any kind, please make sure to read their sidebar rules **before** submitting your post. If you have any questions or doubts, feel free to reply or send a modmail to us with your concerns. Warm regards, and best of luck with your Pythoneering!
While I came from programming older languages, when it came to python, I felt behind the times and like I'd never grasp it. I started slowly by trying out: https://docs.python.org/3/tutorial/index.html Once I had a very basic grasp on it, I started trying challenges and the arcade on Codefights.com. Coming across something you CAN'T do can often lead to learning how you can by reading documentation and tutorials relevant to your current problem. Stackoverflow.com can be your friend, too, sometimes. I'm still considering myself rather poor at the -entire- language, but I'm capable enough now to get things done, even if probably in convoluted ways that other coders would look at and go, "Ew." (Does everyone feel that way about their code? I do.) Take it slow and don't be afraid to fool around. Try messing with examples and get a feel for what works (though sometimes, figuring out what -doesn't- helps more.) I find that when I learn a new command or technique, making a program about it that does as much as I possibly can manage and saving it for future reference is also a good thing. You can always come back to it and add, or perhaps use a piece of your own code later.
Personally I use Sublime; it has the packages and functionality I need, is much faster than VSCode(Atom is slow AF, doesn't even count). If I didn't get Sublime when it cost $15, I'd most likely use VSCode. For example PyCharm is way too heavy for my tastes. 
Is there any reason you aren't using the standard library? Couldn't you just use the `csv` module and change the delimiter to `\t`? * https://docs.python.org/3/library/csv.html#csv.reader * https://docs.python.org/3/library/csv.html#csv.DictReader 
Seaborn or bokeh if you are not presenting on a webpage. D3.js, vis.js or plotly otherwise.
The closest thing I’ve seen to AOP in python is implemented with decorators, but even that’s not really AOP. I’d say generally it’s not a thing in python because we generally favor being explicit (rather than implicit) and AOP tends to often be implicit and invisible when looking directly at some code. Though it’s certainly possible since you can inspect/edit classes at runtime or use a meta class to customize behavior in a similar way.
Yes, you can. However you’ll lose the intelligent completion in templates and such (probably not a big deal as you’re starting out - but it can definitely be helpful to have pro later on.)
Heroku
You could use https://amazonlightsail.com/ with RDS.
Yes! That's exactly it.
This is exactly what I meant by rookie mistakes. Thank you!
I suggest that you are making the biggest rookie mistake of all, as in not using the most important tool that is available to us all, the search engine. It doesn't matter whether it's google, yahoo, bing, duckduckgo or any other, it should always be your first port of call. Compare the time taken to write and test your code against typing `python parse tsv file` into your favourite search engine? It's hopefully a complete no brainer :-)
I've had some fun with this tool.
I've since realized that. As I said I've been coding in JavaScript for the past few months, so it's taking a while to get out of the "everything must be done by hand" mindset. 
I have it on good authority that people who post Python 2 links here are in great danger of catching lassa fever, or even worse, being placed in The Comfy Chair :-)
haha my mistake! I only did it because I saw `xrange` being used in OP's code but I will go update the links now. 
No problem!
I would survey a number of presentations from the PyCon and PyData conferences. see http://pyvideo.org/speakers.html I recommend anything by Raymond Hettinger, Alex Martelli, Brandon Rhodes, David Beazley, and of course, Guido van Rossum. https://us.pycon.org/2017/schedule/talks/list/ 
I AM THE CLI COMMANDER
Currently, I'm thinking about how to organize a Distributed Simulation Framework (for simulating large cities and the people in them.) Need to figure out how to organize all my datatypes.
If you like ipython a lot you'll probably love ptipython even better
1. [r/learnpython/](https://www.reddit.com/r/learnpython/). 2. [The Python Tutorial](https://docs.python.org/3/tutorial/index.html#the-python-tutorial)
If you’re just starting to learn to code, I recommend CodeCademy’s course on Python. It’s free, but I believe they’re using Python 2.7 which is a bit outdated by now, but should be enough to teach you everything you need to know. Part of learning any new programming language is studying the documentation, which for Python is found here: https://docs.python.org/3/ You can also check out similar questions and answers on StackOverflow. Functions are defined like this: ‘def myFunction( myParameter ):’ ... where ‘myParameter’ is anything passed into the function when it’s called. You’ll want your parameter to be ‘n’ for your first two functions, because they will return different things based on whatever ‘n’ is. Note that you can reference your parameter(s) from anywhere in your function. You’ll likely want different functions for each different operation that you do as well (summing squares, summing cubes, etc, should be different functions). Loops are written like this: ‘for i in range( startingNumber, stoppingNumber ):’ ... where ‘i’ is your iterator, meaning it counts up from ‘startingNumber’ (inclusive) to ‘stoppingNumber’ (exclusive). Ex: ‘for i in range( 1, 20 ):’ means that ‘i’ will count up from 1 to 19 every time it loops. Exponentiation is calculated with the ‘**’ operation, so ‘2**3’ would be two cubed, or 2*2*2. ‘2**n’ would be 2 to the n’th power, or 2*2*2...*2 n times. Since you’re using a loop to calculate the sum, you’ll need a variable, which should be declared before the loop, and iterated upon within the loop. You declare variables by writing ‘myVariable = myValue’. For your purposes, to keep a running total of a sum, you’ll want to: 1. Create a variable to be your sum 2. Set the sum to be zero (because you’ve not added anything yet) 3. Iterate and update it within your loop, which looks like this: ‘sum = sum + value’. What this does is calculate the value of ‘sum + value’ then assign that to sum. The length of a list is given by the ‘len()’ function, which is written as ‘len( myList ). You’ll need this, because the length of a list is also the number of numbers, which you’ll need to calculate an average. An average is the sum divided by the number of numbers, remember. Be careful when iterating over your list with a loop, because lists in Python start at 0, not 1. So if you have a list like ‘[ 1, 2, 3]’, then ‘1’ is the 0th item in the list, ‘2’ is the 1st item in the list, an so on. Lists are indexed by writing ‘myList[ index ]’, where ‘index’ is the position of the item in the list. For example, using the previous list, the statement ‘myList[1]’ would return 2. When you’re finished, be sure to return the result of your calculation, which is done by writing ‘return result’, where ‘result’ is some variable. Sorry for formatting, I’m on mobile. Also, I’m not sure this subreddit is meant for this kind of thing, but I hope I was helpful.
@cephalopod1 : Here is a usage scenario that I was envisioning for the scripts that I currently have (that use docopt) to potentially leverage pipeable: The scripts I have transform xml in a number of different ways, namely: delete, insert, filter-out specific parts of the input xml (supplied as a docopt option at the moment) along with XPath expressions that identify the XML elements (also as a docopt option) and simply dump the output xml to stdout. I currently redirect stdout to a file. The file generated thusly becomes the input for the next script and so on. Each of these scripts currently operate on their own and support a number of docopt options. It is fairly common for me to take the output file of one of these scripts and supply it as input to the next script in my workflow pipeline. What would be really nice is a way to pipe the output of one these scripts right into another script along with the docopt options it supports without having to create intermediate files. This is where your pipeable library piqued my interest. Ideally, I would like the scripts that I have to support docopt as well as pipeable, but it does not appear that they can coexist as they stand. As far as I understand, docopt will attempt to parse everything supplied in the command line. I've seen other command line argument parser libraries (like argparse) that can be set up to parse only the defined arguments and ignore the rest. However, I like the readability of docopt better than argparse so I stick with docopt as much as possible. Anyway, it would be nice to truely be able to use my current scripts in a piped fashion using pipeable. example: dmd -i inputFile.xml -c configFile.yaml | fmd -f filtersFile.yaml &gt; final_result.xml here 'dmd' takes an input xml file and a config file as arguments and outputs xml to stdout. This is then piped to 'fmd' which uses the piped in xml as input (currently I use a -i option for it to read from a file, but with pipeable that would become unnecessary right?) and a -f option to read in a filters file which specify additional parameters for the 'fmd' script. Thanks for sharing the library.
Yo also interested 🤙
Last time I checked, VS code was written in JS and uses Electron, essentially a web browser as main engine. This can't be light. Sublime, unlike the rest of the bunch, is mostly written in C++. That's what I call light.
We have a Flask app where I work, which we use for infrastructure automation (automated server builds and such). We knew we'd want to use a MySQL database, so I went with SQLAlchemy, but not Flask-SQLAlchemy, because I wanted to be able to switch web frameworks without having to rip out all the DB stuff. Everything worked great until we hooked up Gunicorn to serve the app. I also have a job that uses Multiprocessing to scrape inventory data. When you have several Python instances accessing the DB at the same time, you run into a lot of issues with the SQLAlchemy Session and how it handles connections. I've been fighting "MySQL server has gone away" and "commands out of sync" for months. I've been searching the docs, searching StackOverflow, trying all kinds of different things, and it's been extremely frustrating. Supposedly Flask-SQLAlchemy handles all this, but in my research, I'm finding people having the same issues even with Flask-SQLAlchemy. Again, the issue doesn't happen until you try setting up multiple WSGI server (like Gunicorn) workers, or start using Multiprocessing where several jobs are hitting the DB at once.
For real!? I just assumed that since they appeared in CPython 3.6 that PyPy wouldn't get them until 3.6. That's awesome!
I mean, sure. The `format` method has always been an option. It's the syntactic sugar that I crave.
This is just gorgeous -- I can't wait to mess around with this
It just didn't work. Couldn't figure out what was wrong. Wish it had worked as it is easier to use
codecademy
Mass shootings aren't ubiquitous at all. Almost entirely contained in a single country, in fact.
Cool project
So, if I'm understanding correctly, this should already work just fine. Pipeable will read from stdin by default and bind the xml read from stdin to the input in the decorated function. Inside of the decorated function you can handle your command line arguments as you normally would with docopt.
Yep! It has a phenomenal vim mode!
I really like [this tool](http://lmgtfy.com/?q=data+visualization+python).
Great read and a bunch of non-python things I'll definitely try. Regarding the python tooling, are they that good? I feel like I'm a bit of a Python purest, so my knee jerk reaction is to say "bah humbug" and not use them, sticking to my shell scripting and makefiles to do this type of work. Are they that good? They just don't feel 'global' like the rudimentary ways I mentioned.
please elaborate -- I had thought otherwise
seaborn
I highly recommend SoloLearn, it is both an app and a website. It has python, plus about a dozen other languages as well. Gets you to a point that you are pretty well versed, and if you really wanted to you could easily finish the whole program within a day, though I can not say I would choose to do it that way. 
Are you following Andrew Ng's Course? I finished it in matlab this summer and I have been rewriting the whole thing in python for the past 2 months
The idea is that the package maintainer may not want to add typing to a package, but there are those that wish to type check code using the library. 
This might seem silly, but having a real physical paper book will help you a lot. I'm sure Amazon is full of cheap used O'Reilly books. They have pencil drawings of animals on their covers.
Thank you sir much for making this. It's a great teaching tool for my students. 
And... what? Why is that impressive? Corporations around the world update java like 8x a month.
Yes. I am doing that course 
Rename your file. I suspect import requests is importing itself basically duplicating the result. I did something similar before by naming my file math.py and importing math module that caused similar confusing or unexpected behavior.
Your javas out of dates! Pay Oracles. 
I thought Facebook used PHP
Pretty mediocre looking dude
Yep that was it, thanks. It's funny, this is the second time I'v done this by accident, but I had some other unexpected behaviour back then. Similar to your `math.py` situation
From google how about [ConnectionPools](https://urllib3.readthedocs.io/en/1.4/pools.html) `maxsize` or [requests.adapters.HTTPAdapter](http://docs.python-requests.org/en/latest/api/) `pool_connections` and `pool_maxsize`.
Yeah I just got into the habit of naming my files something unique or adding my_ to the name if I'm messing around or testing something out.
Hire me and I'll reactivate my facebook.
In 17 years of using Python I recall very little discussion of AOP so it likes like you're relatively speaking alone. Having said that there is a list here [Open Source Aspect-Oriented Frameworks in Python](http://pythonsource.com/open-source/aspect-oriented-frameworks) but I've no idea how up to date that is. Google shows up several more so it looks like you pays yer money, you takes yer choice, sorry :-( Edit:- another thought is to check those libraries that are on [pypi](https://pypi.python.org/pypi) and go for the one with the highest number of downloads.
... then just fork the library? It's like saying "the package maintainer doesn't want to provide docstrings, so let's have a way to package docstrings separately". If that sounds silly it's because it is.
Statically typed PHP on the front end, Python for backend services.
Even if this functionally were not available in the csv module, it is generally a bad idea to parse things char by char. If you need to parse some custom text based format for which there is no library support you should generally read entire lines by iterating over the file with a for loop and use use string methods like str.split, str.partition etc. It is more readable and faster. 
Clearly continuous integration at its best as that's pretty much a three day cycle for get release, test it and roll it out. 
No... Just no, Oracle.
[A list of Python parsing tools](https://github.com/webmaven/python-parsing-tools) should come in handy depending on your needs, far better than re-inventing square wheels :-)
[Ned Batchelder](https://nedbatchelder.com/) is another name that springs straight to my mind.
This dude is a python core developer.
These are mostly for heavyweight parsing of complex grammars. I am talking about the countless ad-hoc simple text formats out there. 
I knew if I checked your post history I'd find some stupid shit. As it turns out, yeah, your most frequented subs are TheNewRight and The_Donald. I wonder why nobody from these subs can contain their vapid stupidity to their respective subs.. 
Fair comment. Like you I tend to reach for the string methods first, but if you (plural) want to drive yourself nuts you can always reach for the `re module` and the sedatives :-)
Hey guys, I just released a pretty cool project on github that some of you might find fun to play with. https://github.com/matdombrock/receiver_zero It's a simple way to implement desktop remote control with python. For example I used it to build a remote app for controlling YT playing on my PC from my phone.
Python doesn't actually follow semver so I hope Facebook QA'd everything adequately instead of the "fuck it ship it" attitude I have towards deploys.
https://media.giphy.com/media/M3Qeggqng1cOs/giphy.gif
Dude I noticed the same thing too. Like almost every vapid comment I came across was always written by people from the_gonad.
Ha, FB only gets 3.6 while Google has had 3.7 for a decade!
My recommendation is to use Pandas. It's the one package everybody should know about, especially when working with tabular data. 
Also consider using Pandas. It'll change your life. 
Conflating the inappropriate comment about someone's looks with the poster's politics is disingenuous at best. There's plenty of left wing idiots as well as right wing idiots. Criticize the behaviour, not the politics. 
I've used Amazon and their RDS. Just using the Postgres interface. That said, set up a full VPS for yourself just for the learning experience as well. I mix and match between different companies and different infrastructure designs so that I can show my versatility. Sometimes I have S3, other times I'm using a Digital Ocean Droplet, on Azure I have a full VPS etc. It seems to impress people enough. I even have a stupid little project with overkill load balancing setup just to show I can scale. It's not a must but consider it. 
I don't get this comment
I'm inclined to agree with you, HOWEVER, when I see a low-effort and ignorant comment such as OPs, I can't help but guess their political leaning. As it turns out, about 75% of the time I'm right and they're regular posters on some right-wing sub. This isn't to say all right-wingers are ignorant. It's just an observation that points to reddit users who are more willing to post such ignorant comments are more likely to frequent those subs. Edit: As an aside, I will never not criticize politics. Politics is built upon criticism and challenging one-another's ideals. However, I will say that this sub is not the place to discuss politics, so I do generally refrain from entering political discussion in subs such as this.
All frames are instrumented. This is not the interesting part of the knowledge. You only want to know which were actually executed and change the value of the flag in those cases. 
Surely this isn’t the best way to put it? Most FB frontends aren’t static HTML docs but JS applications. In such a case it’s inaccurate to say that PHP is used on the frontend because the role of the templating engine is greatly diminished. PHP (or its variants) is used in the backend as well where its role is probably greater anyway, no? I haven’t got a good grasp of the current situation, but I remember reading that Python was used for infrastructure management, service configurations etc. So you might be able to say that the PHP code was more user facing than the Python code. But both of them are still major backend languages. 
Are you serious? Corporations are generally the ones that are known for being the slowest to upgrade. Google is still using python 2.
2.7*
You took a behaviour unrelated to politics or any political ideal or specific policy, made a conclusion based on pure anecdote and used that to attack the ambiguous 'right wing' which is, more accurately, a stand-in for whomever you disagree with. 
Thanks, just added this to my `wsgi.py`. I gotta ask though, if there was previously no concurrency without this monkey patch, then what's the point of having the database on a separate machine, since only one of them would ever be doing work at any given time while the other is waiting? (Assuming there's only 1 app server and 1 db server) &gt; I personally wouldn't use something like sanic in a production environment. It's still highly experimental. What kind of things could go wrong? I looked through the source code for Sanic and it all looks pretty straight-forward, there doesn't seem to be any magic going on (unlike APIStar's dependency injection which looks quite complicated). I actually really like Sanic's style/philosophy over APIStar, so I'm excited to start using Sanic as soon as it's suitable for a production environment.
That folder just holds the stuff for compiling. I didn't need that to run the executable.
&gt; The question is poorly stated Not only that but it's really bad practice to override the name of a built-in like `str`. I didn't bother with the rest, especially as it's Python 2 anyway.
Wow, some really interesting features to check out!
I'm talking in terms of convenience 😑
Pycharm Community Edition will work fine. VSCode is a good choice as a free alternative also. VSCode will start up a little quicker, as far as convenience goes. I still use VSCode despite some pylint issues. I haven't noticed any auto complete issues, however I may be missing them.
Mrs. May said after meeting Donald Trump that after many years of waiting she'd finally found Mr. Right. It was such a pity that his first name was `Alt`.
I use regular expressions when necessary. Simple string methods are not only good for your sanity but also frequently \*much\* faster.
I made no conclusion from his initial post. I guessed, I checked and I was correct. That's all there is to it it. Your assumption that I label anyone I disagree with as someone who is right-wing has no merit, and now you're the one jumping to conclusions. 
True. It has some python but not nearly enough to call it a python tool. The title in OPs link omits python. 
Having some scripts in python doesn't make something a python tool. There's nothing wrong with the product, the title of the post is just wrong. A visualization and analysis tool where none of the visualization and only some of the analysis is done in python can't be called a python tool. 
If you're starting out, languages that may give you hard-to-shake bad habits are JavaScript and PHP. I say this as someone who's made a living using both. Python is just about ideal as a first language. The syntax and semantics are clean, it's readable, there are a ton of good, stable libraries, and you can program just about any kind of application with it: web, desktop, data processing, machine learning, scientific computations, system administration, network, etc.
Those are two separate issues. One is what it means to roll out new framework/language tools with a short release cycle. The other is what it means to *upgrade* a massive code base between incompatible language versions. Google is an industry leader in DevOps, they can roll out Python vNext easily. Google is also an industry leader in large Python code bases, those have a totally different cost/benefit picture move at a different pace.
Thank you very much! Do you have any tips for things you could do before/while learning JS to avoid getting bad habits, or will the fact that i would know python by that point make me "immune" to these? 
Thank you very much! Do you have any tips for things you could do before/while learning JS to avoid getting bad habits, or will the fact that i would know python by that point make me "immune" to these? 
Code that facilitates loading webpages and user ui is frontend, PHP is directly involved in that. Javascript isn't used for server operations, any communication with the python backend is through the PHP frontend.
Use a list. If the columns need to be determined based on user input, you can do `filter = [getattr(models.foobar.c, column['name'])==column['value'] for columns in columns] and call `.where(*filter)`
"This post is from some person of this political persuasion, therefore anyone associated with that political persuasion is the same as this person." That is your argument, the conclusion being everyone from the aforementioned right wing subs are indecent because "I've seen it lots of people from the sub behave like this." You turned indecent behaviour into pushing your politics. 
&gt; val.update(b val) Can't `b` only be used with string constants? And I thought you wanted to update with `msg` anyway.
interesting, but totally not secure.
The impressive part is that all their machines are actually running Python 3.
I think so, but using this line of code it yields a syntax error. Do you know an alternative?
The string categorical value - feature is very handy! Love the improvement.
He made a gay comment (talks about the looks of a guy) so evidently he's a Trump supporter.
Putting a pre-release into production seems...moronic? Let the world test it for you for a week. What's the rush?
WTF Corp do you work at? That’s simply not true and I effing worked at Sun and had to constantly beg corporate customers to upgrade to a JVM that was at least less than a year old.
Also, not mentioned there but still: fixed a bug that prevented use in wxPython apps
3.6.3 is not a prerelease. It is a bugfix release.
It hasn't been released yet. It is pre-release.
Have you tried hashlib? import hashlib val = hashlib.sha256() ... 
In this case backend/frontend separation is not about client/server but about infrastructure (internal) servers versus web services (the latter are of course consumed by JS clients).
Defense.
Thanks a lot mate! Guess, I overlooked a very basic facility in Python.
Semver isn't a guarantee of compatibility. You'd have to test everything anyway.
That's a special case because Python 3 isn't backward compatible.
Got it ! Thank you so much man. Is there a blockchain- smart contacts tutorial/link/subreddit you know of ? I'm looking for them currently.
In the infrastructure jargon, front-end is what is serving real-time data to users, while back-end is every process behind the scenes like crons, batches, task queues and so on. Whether JS or HTML are used isn't relevant as it only indicates whether your front-end instances are serving HTML directly or JSON for the JS to consume. PHP isn't a templating language.
Any decent editor or IDE should have displayed a warning for this. Pycharm certainly does.
no thats FSB, they made a shitty port of KGB to go proprietary.
I personally have never found much reason to use BeautifulSoup and would probably go straight for lxml.html for this. Jinja2 would help with the substitution quite a bit and the output would still be "just HTML", but if you're against that I won't push TOO hard. 
Use `filter_by` instead and you can treat the query columns as strings. That said, usually you should know which columns to filter in advance. If you don’t, there may be an architectural problem. 
In JavaScript, NPM has taken over and no one does anything by hand anymore. (I think it’s gone too far and more should be done by hand, but it’s still the trend.)
They load the page on the client side using a js library called React. 
Python for Ops and sysadmin, and CI?
Being slow isn't inherent to the Python language. PyPy can compete with both Java and C on benchmarks where Java can compete with C.
That is an awesome update. There are several new features that I could be using right away. 
I'm building an app (leaning towards mobile, but might do web) for a cribbage game that one can play with friends and keeps detailed statistics. Current game runs and plays fine in terminal, simulating discards, am finishing setting up database inserts and whatnot. I learned a cool postgres (not sure if this is only in postgres, might be sql) function `RETURNING` that returns values upon insert, so I'm using that to fetch SERIAL primary keys and use them as foreign keys in other tables. Will probably have to do quite a bit of refactoring as I'm going to need an API, which will be my first time building one. I'll have a friend help me by writing the js code or whatever is used to build the app while I focus on getting the game functionality to work. 
Would be interested in seeing this. I recently got my u/n password stolen and someone spammed me with thousands and newsletter signups in hopes that I overlook the cash out email I received when they tried taking money from that website they had my credentials for. I'm still getting ~50 spam emails a day from these newsletters and a couple sneak through spam and it's a pain overall. Have been too lazy to mod a different gmail script that reads all my emails to find unsubscribe links and auto "click"
Cron or task scheduler is your friend
Yeah, past tense. And if you think about the logistics and sheer scale, this is actually really impressive, even just got a bug fix release.
I'm aware of this, but Facebook itself doesn't run on javascript. In my opinion, and it is just my opinion, the visible user experience is entirely separate from the frontend and backend, but all parts communicate and interact. How would you (the collective) classify the difference between Facebook's javascript website, the PHP code running through Hack providing the data used by said website, and the Python software and scripts sorting and managing data behind the scenes?
There are some jokes that just just don't land. This is am example of one that never took off first.
It's far easier to rollout Java upgrades since Java packages are pre-built and well-tested and available in common distro repos. New versions of Python must be compiled from source against your distro, tested in your own environment and distributed via local repos. It's not HARD or anything but that still involves maintanership cost which I think most companies want to avoid.
Fewer things to trip up a beginner. Forget a semi-colon? See how well GCC helps with that.
[This](https://hackernoon.com/learn-blockchains-by-building-one-117428612f46) is exactly what you are looking for
It depends on what your programming goal is and how you define 'easy'. If you're a researcher writing purpose-driven code, Python is easy because it has a straightforward syntax, lots of domain-specific libraries, good enough memory management behind the scenes, and doesn't need to be compiled. All those support the user and make it easier for them to achieve their goal quickly and easily. However, contrast that with a use case for C that I deal with daily. Easy for me means super-lean, super-efficient use of memory, easy integration with bits of assembly code, cross-processor transportability, and teeny-tiny footprints for my code because of storage limitations. I've certainly never found there to be a lack of incredibly useful C libraries, and there are more of them (by at least an order of magnitude) than I've ever seen for a language like Python, simply because the use cases for C are radically more diverse. C is much easier to use than Python in these cases. The use case determines what's easiest for the user to learn and use. A language is going to seem easy if it allows you to produce code using instructions that match the existing means of describing a problem without requiring additional actions that aren't part of the original problem. An easy language will provide the user with tools that perform the solution steps to their problem, ideally without having to reinvent the wheel. An easy language will also have the tools available for the user so that when they *do* have to invent the wheel, the structure of the language is an asset rather than any obstacle to success. As you can see, an end-user is going to find a language like Python easier to learn and use while an application programmer may find C/C++/Java easier. As more end-users get involved in writing programs that are highly customized to their needs but have limited audiences, I suspect languages like Python will become even more user-friendly. End-user developed applications have skyrocketed over the last decade, which is awesome. That's a trend that will probably continue until we get to a point where AI-based code generation is a viable alternative for those users. Meanwhile, programming tools for developers will continue follow that same path too. Whether they are working purely with open source tools or are entrenched in Visual Studio, their languages will continue to grow in ways that are easier for them to usr as well. Ultimately, it's all in the way that you need to use it. 
Is this about learning, or shipping a product quickly? Fundamentally it is about abstractions. Imagine operating a car. You need to learn to drive. Or you can add a layer that separates you from the car, by hiring a driver. This makes your life and tasks a lot easier. The disadvantage - its slower to react to your wishes than if you were at the controls, and you have no direct control (your driver won't permit you to take some potentially illegal shortcut). C for example gives you direct control over the metal. Forget the steering wheel. You can poke the engine with a stick to make it go. Or you could build a steering wheel and pedals in C to make your life easier. Or you could build a driver in C and be like Python... but then you have exactly the same problems that python has, namely you gave up control and added a time delay between your brain and the car.
Who are you quoting? Also you're right on at least one point: I always assume someone from those subs is a shit person. Those communities are so outwardly toxic that someone who didn't also revel in their own ignorance wouldn't frequent them. I've got plenty of friends and acquaintances who lean right, all of them are reasonable and can form reasonable arguments and exactly none of them visit those subs. Want to prove me wrong? You're attempting to do so within a comment chain started by one of their users saying some dumb shit.
Mixing skillsets is where the real money is, in my unsolicited opinion. Take your finance degree and couple it with some good it certs and youll be a top candidate for a developer for finance related applications, a dba in a finance company, an application admin like salesforce at a finance company, and you can build your own python tools to automate the mundane parts of those roles. There are lots of IT folks working in finance, medical, logistics, etc without any real knowledge of that specific industry. 
Yes and I find it hard to believe that's the case.
Awesome. Still waiting on [traitlets](https://github.com/matplotlib/matplotlib/issues/8035), which are hopefully the end of `set_` and `get_` methods in matplotlib.
Sorry, I accidentally the wrong word, but my point remains: Knowing what frames were executed is a *very small subset* of what you need to know which parts of the program were covered.
When did Python do a bad version bump?
I hope they have a good rollback plan- we rolled forward to python 2.7.14 and had a [hell of a week](https://github.com/sphinx-doc/sphinx/issues/4006) because of it.
&gt; Like almost every vapid comment I came across was always written by people from the_gonad. Why has this account only got 5 posts to its name?
Not an American. I made this account because I changed phone and don't remember the password for my old account lol.
&gt;Statically typed PHP on the front end, Python for backend services. The PHP is technically half PHP and half Hack. Also don't forget the Haskell on the back end. They've made some large contributions to the Haskell compiler while using it. Pretty neat stuff
I work in Infrastructure automation and I've literally never heard this. What you're describing as a backend sounds like a service.
It's not as simple as that, but in familiar terms yes.
I mean, this is why we test.
Go to http://codepad.org/Z0GCNOoW But, I strongly encourage you to learn programming and be able to do your homework on your own. Python is a good language to start with. I'm afraid this will attract flak from the fellow redditors here :)
Awesome! I don't know how much experience you have with Python, but if you need any help, I've done exercises 1-6 in python on my [github](https://github.com/manvillej) If you get stuck, I am definitely willing to help out
Defense Corp? That sounds like an evil company in a shitty comic book
People drink while on reddit
Python was developed by developers, for developers, with no marketing department providing input.
Well I think you need to explain that a little more. PyPy can sometimes compete with C on benchmarks because PyPy is literally translated *into* C
PyPy itself is compiled by translating a subset of Python into C, but it doesn't translate user code into C, it has a JIT compiler.
Pretty much huh. I am doing an academic project that requires the use of AOP principles. I will have to do with what Python has then. Thank you for the links!
Bridgekeeper: What... is the air-speed velocity of an unladen swallow? Use this website to get more questions... http://www.retrojunk.com/content/child/quote/page/210/monty-python-and-the-holy-grail
The iOS app has terrible code formatting. For example, `a` and `b` are misformatted on iOS because there are two inline code samples in one paragraph. I reported the bug at least a year ago, but they have not fixed it. 
Still no OpenGL backend?
This website content is the length of perhaps, 1/10 of a single chapter in Wes McKinney's (creator of Pandas) book about Pandas (http://wesmckinney.com/). If you want to get into pandas semi-seriously, this only scratches the surface. Do yourself a favor and buy his book or check out safaribooksonline. Disclaimer: have no affiliation with any company/person I wrote about here. 
Also this release refactors a lot of the documentation and uses new docs infrastructure under the hood. There is now a separate page for [examples](http://matplotlib.org/gallery/index.html) and [tutorials](http://matplotlib.org/tutorials/index.html). There's also a proper API page for functions/methods/etc with a mini-gallery of examples that use that function/method/etc at the bottom. E.g., here's the [`plt.imshow` page](http://matplotlib.org/api/_as_gen/matplotlib.pyplot.imshow.html#matplotlib.pyplot.imshow).
this should be issue #1 in the python bug tracker
What is the rationale for that?
If only I had that voxels function a month ago. I had to solve that exact problem messing around in pyqtgraph. 
/u/Ph0X gets the joke
First and foremost 3D visualization which is currently broken in matplotlib because z-buffer is missing (can be implemented in software in principle but would be excruciatingly slow). Try plotting two intersecting surfaces in 3D and you are going to get a mess since matplotlib cannot figure out which part of which surface is supposed to be in front and which in the back.
This guy gets it
I look forward to seeing you provide it. That will be your contribution to a project that was started so many years ago by the late J. D. Hunter.
It's not that they've done a bad version bump, it's that they just don't follow it. Python pushes out breaking changes and removals (a reasonable amount of time after deprecation, of course) in minor versions, or new features in patch versions (like default values in `typing.NamedTuple` in 3.6.1). Not that semver protects from the possibility of regression, but it does give a better sense of the scope of changes in a version bump. For an average user I'm sure this isn't a problem at all, but I have to imagine a company as large as Facebook doesn't fit that profile. Even something as small as a bump in the patch version should necessitate a decent smoke test of the whole stack, and I find it hard to believe that's been done in such a short timeframe. But maybe I'm just jealous I don't work somewhere that treats tech debt as a first-class priority.
It sorely needs additional devs...lots of people reporting bugs but not enough people taking the initiative to fix them. 
Autoupload to a server? Viewing databases? There is no way either of those features will make it into a product that it supposed to be a powerful text editor. Not really sure how you could call either essential to have for Python development, and they're better served by SQL Developer, SQL Server Management Studio, DropBox, etc... Remote interpreter, I agree is essential
Facebook is a huge project, they use everything. Python is mostly used for configurations but afaik Instagram back-end is Python.
There was a time when Google App Engine made a difference between what they called "front-end instances" and "back-end instances". Front-end instances had limitations such as a 30 second timeout for a request to respond and, as such, were made to handle web requests; whereas back-end instances were made to handle things typical of services and had no such short timeouts (among many other things). While the two types of instances have been deprecated in favor of what they call "modules" (services, really), the jargon is still employed in the Google Cloud Platform world, and, as I understand it, it's this jargon /u/GhettoDuk was using.
I was just trying to understand the relevance of specifically mentioning Facebook.
The point of running a database in a separate machine is mostly separation of concerns. Databases have very different hardware requirements than web applications, and you usually don't want to couple them together. For instance you can easily scale your web app by running it in more machines behind a load balancer, which you couldn't do if there were a database running alongside it. Web apps almost always need concurrency to perform properly. You want to be able to handle requests while another request is just hanging there idle. About Sanic, the framework itself is quite simple, but the deployment options are still very immature for asyncio based applications. There are a lot of security/performance tweaks available in wsgi containers, and eventually you'll run into a situation where you'll need them, even in a small application. Of course, you don't need to worry as much if you're running the application behind nginx anyway.
It is a huge challenge for big companies with large code bases to be up-to-date with latest versions of the tech they use. This might be hard to understand if you have never worked at that scale.
What happens when you open a command prompt and just run the command `jupyter`?
Yeah, I've noticed that one as well. Shame, as the website on Safari is about as pleasant as auto-castration.
Sounds good, thanks for the info. It'd be great (for Windows users) if the Nuitka community did make it such that it, in the words on the blog, "We may improve it in the future to meld everything into one executable for even easier deployment." 
If you do a lot of server work? The autoupload is really helpful and most of the time when you do server work you also do database work too. So that database feauture helps a lot cuz you can run sql queries and stuff through pycharm. What im trying to get at really is. The reason why some people think VSCode is better because all they only ever use the community edition and not knowing about the pro features of pycharm. Dont get me wrong I like VSCode. I use it when I practice writing C and C++ but for making applications in python? Nothing comes close to pycharm. 
Not really, just don't over think it and just start writing programs. That's the only way to become proficient. Do learn about, and get into the habit of, something called unit testing.
something something evil corp
There are plenty of reasons for reassigning a variable. Otherwise it is no point making it a variable in the first place. Just continue with the Codecadamy tutorials and it will become more clear soon.
Thanks, but perhaps there's a real-world example you can think of? This just sounds to me like debugging the code means you have to look for multiple instances of the variable. One where it was initially defined and then any and all where it was re-defined to something else.
That's exactly what he said...
theres all sorts of reasons, storing a score, count of something, last input, username are just a few i thought of very quickly, the point of variables is in the name, they are meant to be variable, as you do more advanced work you'll see just how useful being able to change a variable is!
Exciting.
Holy shit, there is some unique drama going on in this thread.
Matplotlib is so fucking dope!
Thanks! Slowly but surely I start to gain some understanding. Key word is definitely, "Slowly"
You're not wrong. Often, each new thing you calculate means something new, so it should have a new name. But sometimes you need several lines of code to decide what the value of a variable should be, and that code sometimes looks better if you assign to the same name in several places. The pattern that I often find myself writing looks like: spam = get_existing_spam() if spam is None: spam = create_new_spam() spam.process() This way, it doesn't matter whether the object I'm ultimately processing came from `get_existing_spam()` or `create_new_spam()`. Either way, by the time we get to the processing code, `spam` refers to "the object we've decided to process", and we don't have to worry about how we got there any more.
Let me change your life: [bpython](https://www.bpython-interpreter.org)
An example: Imagine that you are making a game where the player gains one score each match he wins. It would make sense to store the score in a variable, with a new value each time.
Great, thank you.
Okay, this makes sense. This way the variable name doesn't have to change, but the relationship to a changing number doesn't.
It's the things that you don't need to worry about at first. * No need to explicitly define input types. * No need to write a "main" to run something simple. * No need to learn about the compiler. * No need to understand the stack vs. heap distinction. * No need to include/import libraries for containers, since the most useful ones are already there. Strings are especially nice to use compared to C and Java. * No need to worry about encapsulation. * No need to use polymorphic inheritance to achieve polymorphic behavior. There some other benefits with the way the language is designed: * There are predefined rules on how you should style your code. * The style results in code that is very easy to analyze, and makes it easy to read other peoples. * The choice of words over symbols helps a lot. `if im_hungry and im_tired` in Python vs. `if (im_hungry &amp;&amp; im_tired){} in C. * 
Exactly! As you progress in your course this will make a lot of sense. For further questions /r/learnpython is the recommended subreddit. Good luck!
Wow how did they manually update the installation on every server one at a time? //Small shop IT manager mode off
Does the new polar stuff mean we can plot negative r values now?
Ooooh, yes please!
Making a module that downloads historical Environment Canada weather data and provides various plots of the information. Uses Pandas and Matplotlib. 
The directory I had installed Anaconda to was marked as hidden for some odd reason. Switching that fixed the problem. Thank you!
Interview prep! Data structures and algos. :)
Indeed, a whole bunch of stuff I want to try. Great work.
bpython isn't any better than ptpython.
The structure you're missing is the `elif`. Simply put: if x &gt; 1: print(4) elif x &gt; 7: print(0) else: print(-1) In this case, if I enter 8, the `if` is true, so it runs the if, and prints 4. The `elif` doesn't run, because a previous block already ran.
You need to add practise sessions of your own where you solve problems that are relevant be to you. Ie a calculator for a specific problem you encounter, or a script to donate a otherwise boring task.
Let's say I had code calculating the number of beers in my fridge, and then I grabbed a beer. 
I have zero background experience or education in anything computers or programming. I decided about 3 weeks ago to stop wasting time playing games on my phone and learn something useful instead. I chose Python after much paralysis by analysis. And I don’t feel like I am “getting it” at all. Feel like I’m in way over my head and perhaps made the wrong decision. Couple observations: 1) Math isn’t exactly my strong suit. So maybe I’m lacking the basic logical thinking process and skills needed to be successful here. 2) I don’t have any goals or something I need to work towards. Just took it up as a hobby and don’t have a destination in mind. 
IMO most people need a project where they have some sort of vested interest in to really have programming concepts click. School doesn't really help much for the reasons you've stated, you get bored too easily. To give you an example, I really wasn't interested in programming until I was tasked with making a game where a user could generate a maze and then a robot had to solve the maze. Ironically, I did this as a final project in high school.
It will take time. Nothing worth having comes easy..... You know how the rest goes :) I'm a largely self taught programmer. It took me about 6 months to get really familiar. It's been about a year and I can now build websites with Django and have done some deep learning kaggle contests with Keras. When you start off, just stick to one language. Once you get a hang of that try other programming languages. The first is always the hardest. It will get easier. Python's a great first language. Check out Learn Python The Hard Way by Zed Shaw. It's an amazing resource. Read other people's code on GitHub. Watch videos of other programmers build stuff. Copy it, mess around with it. Become friends with a great programmer and learn from them. Become friends with a novice programmer and teach them. Trust me this will not only help someone else but also make you more proficient in your craft. Solve problems on HackerRank, CodeChef, Leetcode. Just try changing stuff in the code that you've already written and observe how the program runs. Break the code on purpose. Just tinker around like how a child would. All the best! :)
link please?
That's strange I thought I started the thread as a link. Anyways I've added the link to the post. Thanks for the heads up.
Programming is definitely something that clicks. I remember the day that I fully appreciated what a hash table was. If you're learning through examples, here are a few useful behaviours: * Take the code you're copying, and try to modify it to do something slightly different. Either you'll succeed and cement your understanding, or fail, and uncover some holes. * Every failure is a learning opportunity. * Imagine how you would explain new concepts to someone who's just starting out. 
As the people at SO mentioned, you're not running the code in Python. Try running it in Python.
How can I make PyPy to work with Numpy? I cannot import it.
Imo easiest way to learn is to do something practical. For me it was games. First i looked at some tutorials, then started experimenting with pygame and looking what i could do with lists of data and other things (more then 2 years ago).
Yep. Instagram is now the largest Django app out there
You're delay appears to be one millionth of a microsecond, which is a picosecond. It probably takes more time to calculate the delay than the time you're trying to delay by.
Glad you were able to figure it out. Also, in the future, you should post questions liked this to /r/learnpython. This sub is for news, articles, etc. The sidebar has some good resources. People will get cranky with you if you ask questions here in the future. 
**Here's a sneak peek of /r/learnpython using the [top posts](https://np.reddit.com/r/learnpython/top/?sort=top&amp;t=year) of the year!** \#1: [90% Python in 90 minutes](https://np.reddit.com/r/learnpython/comments/661o5a/90_python_in_90_minutes/) \#2: [Python 201 Book is Free for 48 hours](https://np.reddit.com/r/learnpython/comments/5814lw/python_201_book_is_free_for_48_hours/) \#3: [Python 101 Book FREE for 48 hours!](https://np.reddit.com/r/learnpython/comments/5bmaz0/python_101_book_free_for_48_hours/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
... and? Any company that uses one language and one language only is wasting their own time.
The most important skill for being a developer is the ability to manage frustration. You don't need crazy smarts or super math skillz, you just need to be able to repeatedly attack problems from different directions without letting yourself get discouraged. It takes practice, but if you accept that it's frustrating sometimes and work your way gradually towards a goal, you can do it! https://nedbatchelder.com//blog/201709/beginners_and_experts.html
Thanks for the heads up
Indeed. Why ever do it. Don't! You'll be a much happier and better programmer if you get in the habit of never reassigning a variable. Instead, look to the functional programming style for alternatives which are easier to understand and far less buggy.
You could use Fraps, it has a much clearer FPS counter.
I'd say, sure, some data storage structure should be mutated, but not a variable.
Well, as long as you trust the people on your home network then it should be fine, but yeah I agree. There should be a note on the GitHub page saying that it's not secure and that I'm planning to add basic authentication soon.
What you're describing exists in C++ as a `const` variable. These are guaranteed to never change. In Python, there is an convention where variables in all caps (`VARIABLE`) are not supposed to be changed. What you may fail to appreciate is that all data is variables. If you want to count the number of entries in a list, you loop through it and increment your variable. The number of cases where a variable shouldn't be modified is very small compared to the everyday use.
Thanks!
Any reason why pandas' [to_latex\(\)](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_latex.html) isn't enough? I'm legitimately asking, as I've never worked with LaTeX or used this function. 
That's for when I run it without my function in it. The first set of results is the result when my function is ran in it. I was trying to show that my function slows it down and the offset of the timer then varies between 0.8 and 1.2 seconds. My goal is to have this function run as close to every 1 second as possible.
Fuck yes. I'm now an expert in Python. I actually give conferences to other experts. And I remember how fucking lost I was when I started. That doesn't mean programming is for you. It may not be, and perfectly be alright if not. But being completly lost at the begining is absolutly normal. Some people get it quick. Some people need a looooong time. Of course, having terrible teachers and courses doesn't help, and most teachers and courses are terrible.
Built in terminal is a killer feature for me. Visual studio should have this too. I work mostly with C# and I do all my git operations in the terminal because I don't like and don't trust Visual Studio built in git support. 
Well, here's how I'd approach it: * Record the time. * Run the function. * Record time 2. * Calculate the difference. * Sleep for 1 second, minus the difference. * Repeat.
So you're saying that Facebook uses Salt stack?
Ah good thinking! I'll give that a go now and see the results. 
I disagree: there are popular languages which strongly discourage mutable data (Elixir), and others which outright don't allow it (Haskell). It's easily possible to count the number of items in a list in either of those languages without a variable. And in Python as well.
I'm a simple man, I see David Beazley I click the link.
My favorite pattern for this is the short-circuit `or`. I forget if Python supports this kind of syntax: `spam = get_existing_spam() || create_new_spam()`
Well, I suppose it comes down to opinion. There's a benefit to having mutable data, and one for immutable data. At the end of the day, a lot of it may come down to how variables are stored in high-level languages. The meaning of "variable" is something which may vary. The way Python stores variables is in hashes of names to values. Strings are immutable, and lists are not.
Thank you all very much for the encouragement. This wasn't a bunch of feel good responses, there was some great info posted that shored me up and I appreciate it. I am not completely defeated. I licked the problem that motivated this post and am driving on through the rest of my homework. I can't really deviate from the course right now because work/school/family take all of my time but, after I finish this course, I am going to work on things that make more sense to me than the labs I must complete now. Have a great rest of your weekend :)
Link is down, 404
start by googling "python random" or "python3 random", depending on which one you're using...
It works as long as we don't need to distinguish between different kinds of objects that are false in a Boolean context. E.g. if an empty array `[]` is a valid value for `spam`, we need the longer version to distinguish between `[]` and `None`. The longer version may also be more readable, especially if the `get_existing_spam` and `create_new_spam` operations are lengthy blocks of code instead of single short function calls.
This is 99% of programming. 
Well, sometimes I like to use non-random numbers, so let's say this is 80% of programming. :D
I don't care to prove you wrong about the sub. You may be right, they could all be idiots. Connecting the poor behaviour to the other subs achieves what? Are you calling for a brigade on the /r/The_Donald? Why bring it up when you didn't need to? The behaviour should be called out on its own without an attempt to connect it to an other group of people. 
Ha! I guess that's fair. 
oh look! i found a tutorial. . . . I Think 
So after make this i will be 99% of a programmer! lol
&gt; Any reason why pandas' to_latex() isn't enough? To be honest, I didn't know this exists (and I use pandas for lots of things). If I did, I probably wouldn't even start making tably. Thanks for letting me know about it, I might use it as an inspiration to maybe add some more functionality in the future....
The last 1% is always the hardest.
Random number generation algorithms are not a very good place to start if you want to do it from scratch. If you want to generate random numbers, you can write something like this: from random import randint print(randint()) The first line searches the random tool, and tries to find the function randint, which stands for random integer. The second line "calls" randint, basically asking it to run and show the results.
Nice package; was just looking for something like this the other day. One idea for an improvement is to have the `&amp;` aligned in the LaTeX source output. 
Got it. I figured that was likely the case. pandas just has SO MUCH stuff built into it. I discovered this the other day as I looked for a bytes function. In any case, I do like your code. Plus, having a pure csv -&gt; latex module may be helpful to a lot of people if they don't need/want the entire pandas library.
&gt; I just feel like I am just copying new code out of the book and inserting it into old without really understanding it. Copy and modifying is a lot easier than creating something from scratch. 
Your site readme is completely broken on mobile.
alright i got that to work to give a random value between 1 and 100. but id like to know what the line "from random import randint" did in python. When i say I'm new. I'm reading a PDF titled "Python 101" and I'm only as far as creating dictionaries. 
Thanks @cephalopod1, As you pointed out, I think the key is to handle the docopt options inside the decorated function. I wasn't thinking along those lines as I typically handle the docopt options in a main() method and hence my concern about whether or not this would work. I'll give it a go with a sample script or two and follow up with my findings.
Thanks! I'd love to hear any feedback!
If you're doing this as a learning project, great...but there are many programs out there already that do this.
The import statement is used to tell the code "I want to use code from somewhere else". In this case, I'm asking Python to look for a collection of code named "random". Then, I'm asking it to look in that codebase for a function named "randint", and if it's available, let me use it.
Going beyond SimPy?
It's a jupyter notebook.
Find something in your daily life or work that really annoys you or others, or that is very wasteful.
Ok fine, his notebook is broken on mobile.
It's githubs fault, unfortunately 
So in layman's terms: Theres a preset tool within python named random with a few different commands one of them being randint which if given two different numerical values will choose one between the two? 
Really liked the example of validating constant values inside a function body, it definitely gives me ideas for using this kind of metaprogramming more broadly (than just decorators) for verifying the logical consistency of code and providing early, good error messages for consumers of the libraries I write. 
me too!
You probably want time.monotonic or time.perfcounter instead of time.time If it has to be mega accurate you might want to not use a managed language, and write c as you can talk to the metal. but http has random delays from network access anyway, so how accurate do you need it? there's also threading.Timer
Precisely. `from x import y` is just a way of saying "I want to have access to `y`, which is in `x`". Every language has a system similar to this. Otherwise, you'd have to do everything from scratch. Imagine if surgeons had to mine iron, and forge their own scalpel. 
You may have more luck with http://nbviewer.jupyter.org/github/hchasestevens/posts/blob/master/notebooks/the-decorators-they-wont-tell-you-about.ipynb#blob_contributors_box
Yah I just switched it to desktop version at the bottom and it was fine. I was just letting you know.
Sublime Text is only an editor. You'd either need to use a shell to run your code, or an extension for Sublime Text that runs your code.
cool! so now i need to figure out how to ask for a randint between two undefined values. &lt;-- I think but i also need to create a space to enter those values 
As long as the two variables you need can be figured out before randint, you won't have a problem. 
Assuming you use windows you will need to add python to your path( This may have been done in your installion) then use " python.exe $myfilename.py ". Make sure to use full path to your file or use the "cd" command to change your directory. Alternatively you may want to consider using an IDE such as pycharm or visual studio to run your code from within the program. 
At the start of this year, with no coding experience, loops looked incomprehensible to me. A month or two later I could read and write list comprehensions. Keep at it, be persistent, expose yourself to it everyday, it will eventually click.
So am i going to use "if" conditional statements here? for example if (value1)&gt;(value2) print(randint((value1,value2))) 
also how are you creating those text boxes such as you did "from x import y" 
Sorry, I’m on a Mac!
If you know your boundaries, you could use an `if` statement to ensure the values are in order. I would do something like: upper = max(value1, value2) lower = min(value1, value2) randint(lower, upper) 
Use a real computer.
When I started programming I remember intently studying the anatomy of a function. It was a JavaScript tutorial (on the old WebMonkey site IIRC) and I couldn't work out what was special about each word. I did things like changing the keyword `function` and wondering why it wasn't work. For the first few months I was talking about function _perimeters_ to my friend and he used to laugh at me. Basically don't sweat it. If you have an interest in the subject keep trying and things will click :)
Well I'm on your mom's now.
Good stuff!
okay so you're assigning upper and lower as strings. I get that then by inserting values you are allowing them to be equal to a number in that range? 
Not quite. Here I'm assuming that `value`s are integers. If they are strings I'd use `value1 = int(input("some prompt"))` for the two values. Then, I'm using `max` and `min` to find which value is largest and which is smallest. Once we know that, we can use `randint` safely.
wait, before you reply to that. I just looked at the max min functions in python. i think thats where my confusion is. Because i don't see the need to use those two functions. Because the numbers of the RNG will be given by the user. 
I called out the users of a couple known-toxic subs for what they are, therefore that must mean I'm calling for a brigade on both those subs? You've done nothing but reach for conclusions as to my motives, and each time they're taken to one extreme or another. I assure you my only motive was calling out an idiot who decided to critique a developers appearance rather than address the topic of the OP. It's about being mature and understanding what's appropriate for discussion and what's not. At the end of the day, however, reddit provides a voice to all regardless of their level of tact or social etiquette. This doesn't make them immune to criticism as an individual or as a group.
Take a look at [SublimeREPL](https://sublimerepl.readthedocs.io/en/latest/)
Oh okay so if given the prompt to select two numbers and the user chooses 100 and 10, you're telling python to define which is the max and min before inputting them into the randint function 
Have you tried ctrl-b? To be honest I can't remember setting up my sublime 3, but that is the command to run the code - so long as it is .py file.
Exactly. Although it's up to you whether or not you should correct their input or let it fail.
You said &gt; Decorators are often described as "functions which take functions and return functions", a description which is notable in that, technically speaking, not a single word of it is true Then you proceed to demonstrate how that description is word by word true, wtf. 
Personally, I advise to look for opportunities to _replace_ a value, rather than change it.
Your definition of "real" seems to be weird.
decorators + generators == &lt;mindblown.gif&gt; def call(f): return f() @list @call def fib(): a, b = 0, 1 for _ in range(10): yield a a, b = b, a + b print(fib) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
&gt; I always assume someone from those subs is a shit person. &gt; I assure you my only motive was calling out an idiot who decided to critique a developers appearance rather than address the topic of the OP. If your only motive was to call out an idiot, then why did you link it back to some arbitrary (political) sub this 'idiot' is affiliated with? * The comment on /r/The_Donald is irrelevant to the behaviour with respect to the context (/r/python). * The reason for calling out /r/The_Donald is because "As an aside, I will never not criticize politics. Politics is built upon criticism and challenging one-another's ideals."; Who are you challenging in this instance? Do you link all poor behaviour back to the person's politics? Do you callout your own 'bad' behaviour and link it back to your politics? * You used pure anecdote. If I was so inclined I could go find every person who I deem to be an 'idiot' look at their post history and correlate it with some idiotic left-wing subreddit. There's so much bias going on your process of identifying 'where these idiots are coming from' that it's completely arbitrary. The fact is the comment was of poor taste, and you conflated (based on very weak 'evidence') the behaviour of the poster with an arbitrary trait of said poster. That is disingenuous. 
This is awesome! Thank you
Read to the end. 
I did, still the description is true
Have you tried on Tools → Build? 
Coffeescript is a subset of garbage
okay cool. now how do i leave that input open to be filled in later? Would it work if I said "if x is in [list1] and y is in [list1] then max (x,y) and min (x,y) and randint(lower, upper)?
That was basically my exact experience: no education for it, and failed my stats class. I ran into wall after wall and felt super defeated because I felt like I was missing that special something. What ended up working for me was doing just about every tutorial I could find off 'python beginner tutorial', even if I knew everything on there. Then I'd find a new tutorial that introduced a new word like 'class' or 'method' and then go to town on *those* tutorials 'python beginner class tutorial'. Eventually I built up a basic enough knowledge set that I started doing other things that I could think of, like downloading images off imgur and making simple calculators, and whatever else I found interesting. Now, five or six years later, programming is still tough, but I've got it down to the point where I can approach arbitrary problems and have a reasonable idea of how to approach it, which is a lot of fun. tl;dr same situation, it worked out well, do more tutorials.
You are basically telling a computer how to do math. But in a way it understands. If you look at it as math can describe virtually everything. It becomes easier. Programming is more about logic and how different ideas fit together. You just use math to describe it. Like others have said. Find a project that grasps your interest. Start out small with making it [i]just work[/i]. Then slowly build from there. You’ll eventually learn to build modular so that these snippets of code can be reused. My first big project was when freshmen year in college. I needed to learn the terminal. So I built a shell within a shell that helps you learn commands. 
I was there! I got to talk to him a bit about Python, Chicago vs. NYC and other things. Super nice guy.
I was able to import issues from my Trac instance into it while preserving timestamps and resolutions.
I wrote an OpenGL library that deals with passing your numpy arrays to OpenGL 4 shaders. I wouldn't mind open-sourcing it if people would help with development.
Oh I know, school project tho :p
I’ve tried that, it sort of works, but when I run a program that requires a user input it doesn’t allow that. 
He has met James Powell the day before the talk... Oh no this could end in a very strange future! I'll wait for it.
Programming is actually easy. It's learning how to get from point a to b is the hard part If you know nothing about cars and I asked you to rebuild an engine by week's end you'd be so stressed out. If you first learn to change the oil. Then move to rotating the tires. After that replacing the brakes, your slowly learning about the car to rebuild the engine. Even those little steps at least you'd know where the engine is So start small and progress. 
Thanks! 
Thanks!
True. 
Really nice article - it's rare to see decorators explained so clearly. For the registry use of decorators, an idiom I've seen that makes a lot of sense is to make the registry an attribute of the decorator. So instead of having a module constant `FUNCTION_REGISTRY`, you just set `registered.registry = []` after defining it, and use `registered.registry` in place of `FUNCTION_REGISTRY`. This avoids having anything unecessary in the global namespace, and also means that another module importing the decorator can peek at the registry if it has some reason to want to. I'd leave the blog post as is of course - this just complicates an already potentially confusing topic, but I thought I'd mention it in case anyone was interested.
If you need help with learning more Python, the book I started out with is called Python for Kids. https://www.amazon.com/Python-Kids-Playful-Introduction-Programming/dp/1593274076 This is the book I started out with in 2012 when I was 17 and never coded before then. Now I'm a software engineer at a top 10 fortune 500 company. It's never too late to start!
Python is fantastic and my go to programming language. Have you ever coded in C++? For example in C++ you have to manually reverse a string with a for loop etc.. In python, all you have to do is type in .reverse() and the string is reversed for you. or to reverse a string in python you can do string[::-1] and it will reverse the string. Reason why I love python is that you can focus on the problem you are dealing with more than trying to reverse a string etc.. But it is still good to learn on how to do it manually so you know how it works. But C++ code does running faster than Python code when dealing with large files. 
If you need help with learning more Python, the book I started out with is called Python for Kids. https://www.amazon.com/Python-Kids-Playful-Introduction-Programming/dp/1593274076 This is the book I started out with in 2012 when I was 17 and never coded before then. Now I'm a software engineer at a top 10 fortune 500 company. It's never too late to start and it will eventually click! I was in your position one day!
Yes. Programming is hard, and anybody that says otherwise is selling something (probably a ‘coding boot camp’). It takes time and much repetition, and you will feel like you are crossing a valley of despair. That’s where most people give up and turn aside. So don’t be that person. Persist. Do hard things over and over. Your understanding will grow, but *only* by doing, not studying. The only qualities that matter to your success are persistence and curiosity. If you don’t have those, quit. I’m not kidding here. Most of all, absolutely nobody can tell you if it’s right (or wrong) for you. Ignore people who do. You will have to enter the valley and make the crossing alone. Then you will know.
The one that kinda blew my mind was @len just being used over the top of a function to return the length of the function name. Silly, but it shows an interesting fact.
If you need help with learning more Python, the book I started out with is called Python for Kids. https://www.amazon.com/Python-Kids-Playful-Introduction-Programming/dp/1593274076 This is the book I started out with in 2012 when I was 17 and never coded before then. Now I'm a software engineer at a top 10 fortune 500 company. It's never too late to start and it will eventually click! I was in your position one day!
filter_by() is an ORM Query convenience function and that example is using a Core select() that only has "where()", there's not right now a "where_by()" method. 
This is a high effort defense of my low effort shit post, commendable. I'll concede it wasn't in particularly good taste, but the retort was an obvious non sequitor, ex consensus. It's a bit comical I think, even a blatant thoughtless troll post can devolve into a political arguement. 
This is a high effort defense of my low effort shit post, commendable. I'll concede it wasn't in particularly good taste, but the retort was an obvious non sequitor, ex consensus. It's a bit comical I think, even a blatant thoughtless troll post can devolve into a political arguement. 
This is a high effort defense of my low effort shit post, commendable. I'll concede it wasn't in particularly good taste, but the retort was an obvious non sequitor, ex consensus. It's a bit comical I think, even a blatant thoughtless troll post can devolve into a political arguement. 
This is a high effort defense of my low effort shit post, commendable. I'll concede it wasn't in particularly good taste, but the retort was an obvious non sequitor, ex consensus. It's a bit comical I think, even a blatant thoughtless troll post can devolve into a political arguement. 
This is a high effort defense of my low effort shit post, commendable. I'll concede it wasn't in particularly good taste, but the retort was an obvious non sequitor, ex consensus. It's a bit comical I think, even a blatant thoughtless troll post can devolve into a political arguement. 
This is a high effort defense of my low effort shit post, commendable. I'll concede it wasn't in particularly good taste, but the retort was an obvious non sequitor, ex consensus. It's a bit comical I think, even a blatant thoughtless troll post can devolve into a political arguement. 
Hmm... when you start decorating class declarations, I tend to think it's time to start working with metaclasses instead, but whatever works, works. I love metaprogramming but I think I've used it badly just as often as I've used it well, in that I've picked it as a design for something where a simpler design would've sufficed completely fine. The end product works... but shit, it could've been easier to read.
I'll say what I like when I like. I hope you health improves. Good luck with all of that It's a difficult road. 
Working on a simple web API to output aggregated statistics from a game. Right now I am just trying to figure out the best way to cache results. I am thinking of using crons to generate the responses every hour (or day depending on the endpoint), caching them with memcached, and having the flask based api just output the previously cached data.
Thanks . Should be helpful for the Python transition.
Awsome! thank you
This part should be fixed or scrapped: &gt; `processed_list` is a list, and `special_var` has remained unchanged thanks to Python's function scoping rules. Sure, but the exact same thing happens if you leave the decorator off. Great intro otherwise. For the sake of completeness (and preventing misunderstandings about the existing material), the addition of a little bit about decorators with arguments would be neat.
Cool! One thing I would love is to be able to specify units for each column as well. So that they appear before the \midrule (or equivalent). I haven't really come across anything yet where I could supply a proper unit for ech column and have it handled neatly. 
This might be my most favorite thing ever
I don't think Python will ever really be replaced at this point. At least, not for a hundred years or so. Python's weakness is (still) threading. There is a class of problem that can't be solved easily in Python due to the GIL. If we could somehow combine Go and Python, that would be a fantastic language. I'm saying if we could run Python programs (maybe with a few minor changes) and have built-in coroutines and channels. I wish Google had done that instead of making a new language from scratch (I think they actually did try, and failed to convince people to move forward with the idea).
His mom's... what?
did you mean something like this? In [6]: a = 1 In [7]: b = 2 In [8]: True if a &lt; b and a &gt; 0 else False Out[8]: True In [9]: True if a &lt; b else False Out[9]: True
Not really. I am talking about method overloading in classes. I apologize for the shorthand in the OP. I will now write out some code: class Fuck: def __init__(self, ...): # whatever def __eq__(self, other): # whatever I want self == other to mean def __lt__(self, other): # whatever I want self &lt; other to mean # My question is, do I have to write out all of the following methods every time? def __ne__(self, other): return not self == other def __le__(self, other): return self &lt; other or self == other def __gt__(self, other): return not self &lt;= other def __ge__(self, other): return not self &lt; other # ... other methods ...
[Atom.io](https://atom.io) is another alternative to Sublime, with [script](https://atom.io/packages/script) package, allows you to test your code by running it in Atom. 
* Integrating Mood Tracking into https://github.com/jeffshek/betterself 
I found that useful when I was working with physical objects. Sometimes, the device wouldn't respond properly. I had all this code written out, so I just wrote a decorator that applied to an already-decorated method to raise an interrupt for me after a given time.
Didn't check, but wouldn't it give you a warning about modifying a global?
Computer
Those are the *rich comparison* operators, and no that's why the [functools module](https://docs.python.org/3/library/functools.html) provides the **total_ordering** decorator; you need only define two of the rich comparison operators and it sets all the rest.
Python's biggest strengths come from its library support. You can find a basic easy to use library to do most things. So if you look at Ruby and Python, both are great languages to read, just luck ended on Python's side. That being said, Julia has done exceptionally well in the last three years against Python in computationally heavy (aka, finance lol) areas that still required fast code iterations. 
That being said ... if you were Wes McKinney, you'd be a god amongst men in this forum. :)
Thank you. That's exactly what I needed to know.
I remember when I first saw the Dev screen for vba while in an excel workbook. I was in awe. Lol. my first coding language became VBA. I learned by finding a need for something, then learned all I could to build it. Watched videos on YouTube, looked at freebie books.. I skipped around a lot. Didn't have any structure, but now I'm on my third language- python. I bought a raspberry Pi, and trying to figure what project I want to do to learn it. Just gotta find that stuff that gets you going" to do it. Understanding it comes by experience I think.
^ is more optimistic than me about Python in its current form. Arguably the trend is now much more strongly back towards *static typing* than it was when Python was created. There are just too many advantages, beyond the obvious ones like speed. In larger projects it catches errors that can go unnoticed for years in dynamic languages. This is part of why **TypeScript** and **Elm** exist on the EcmaScript (aka but incorrectly known as JavasScript) side of things; static typing just makes the world better in the long run, and type annotations simply aren't enough. I think we may well start to see similar ideas on the Python side, with statically typed variants that transpile to standard Python, except unlike Ecma there isn't the compelling argument for the Python interpreter that there definitely is for the browser, and similarly unlike Java there isn't the at times aggravating ubiquity of the JVM. Also there's already languages out there that take ideas from Python and run with them in a different direction; Go and Julia both emphasize readability but sidestep historical issues with the Python interpreter, the fixing of which in Python would definitely break backward compatibility and require some pretty deep changes to the language. There's no reason to believe that a language that has Python's strengths but sidestep it's weaknesses won't arrive on the scene; if there was a Haskell as easy to read as Python, I think it'd almost instantly draw away a huge number of big corporate users. So I think Python and it's code will be around for quite some time, but the one thing that it's done that undermines its longevity is be so easy to read and grasp that (unlike say Fortran, C, or COBOL) anything vital written in Python can be re-implemented easily in pretty much any other language.
Personally I disagree, I think if you're thinking of a metaclass, try to get it to work with a decorator *if at all possible* first. 
Well, think about it like that. The application could be anything. I mean what the server is running is not important. Don't focus on that. Once you have that out of the way, it's basically hosting some application on some server somewhere. Once you that down, you just spin up a server like, on amazon, or digitalocean, or &lt;insert_whatever_cloudprovider&gt;, and install the application of your desire. If you search like that, you'll find plenty of hosting software in Python for various hosting providers. I hope that helped. :)
essentially any graphics library that can draw a line can do that. you just have to know your math
&gt; Nice package; was just looking for something like this the other day. Thank you! Hope you find it useful. &gt; One idea for an improvement is to have the &amp;'s aligned in the LaTeX source output. Just to make sure, you mean something like this: long column name &amp; short one &amp; third one \\ 123 &amp; 97 &amp; 323 \\ 11 &amp; 329 &amp; 118 \\ ?
&gt; One thing I would love is to be able to specify units for each column as well. So that they appear before the \midrule (or equivalent). Would something like this work: You pass the units `-u m kg m/s` and in the table you get Radius &amp; Mass &amp; Speed \\ [m] &amp; [kg] &amp; [m/s] \\ \midrule or you had something else in mind?
Ok, so I've updated the server to use a server password now, soon I want to implement TLS, but this is a lot better than nothing right? 
No, because that code doesn't go anywhere near that global; it assigns to a completely different (local) variable. Referencing that variable *before* assignment would be an error, but the assignment itself is fine.
This is not correct terminology: there is a Python *module* in the *standard library* that exports a **randint** *function*. A *module* doesn't correspond to a tool as such, it's a collection of *functions*, *classes*, and other *objects*. Those could be thought of as tools, or pieces you build tools out of, there being no particular definition of "tool" in Python. In addition to modules there are also *packages*, which can be though of as collections of modules. The *standard library* is the collection of mmodules and packages that ship with Python, meaning that they're always available with a fresh install of Python and no third-party code being installed as well. There are *many* modules and packages available from 3rd parties via PyPy and Github and elsewhere, but the standard library is always present (though to confuse things some modules and functions exist only on say Linux or Windows or Mac). It's important to understand this fairly early on, because it helps explain what happens if you get errors during an import statement. Also, to be precise about it, when you say `from x import y` what Python does is search every directory in **sys.path** (the **sys** module is a builtin module that keeps track of variables specific to your computer system and Python itself, among other things) and looks for a file or package called *x*, then when it finds it immediately interprets the entire file and brings in whatever is named **y** within it... if there is no **x** available, or no **y** within **x**, then Python will throw an error.
Just going to point out that if you use the **random** module you're not *creating* a random number generator, you're just *using* one that already exists. Also, good pseudo-random number generators are *hard*, like so hard people have spent entire careers on them. To see a very simple intro to why, read [this](https://www.google.co.uk/amp/s/cdsmith.wordpress.com/2011/10/10/build-your-own-simple-random-numbers/amp/).
&lt;nitpicking&gt;Traditionally, the Fibonacci sequence starts with 1, 1, not 0, 1.&lt;/nitpicking&gt;
Haskell is as easy to read a Python. It's really only Haskellers' penchant for single letter variable names (and single later *type*-variable names) that make Haskell code harder to read.
There is a guide here http://pypy.org/download.html
Would this be of any interest to anyone out there?
Haskell is indeed easy *enough* to read *once* you understand the quite complex conventions, the basics of recursion, and at least the concept of currying... but to a newcomer it's **much** more opaque, and the single letter variables (which I'd argue aren't so much a penchant as a badge of honor for having made it over the Dwarf Fortress-esque learning curve) just make it harder without good reason. You can read most simple Python code with just the concept of functions, loops, and variables under your belt, in Haskell you're almost immediately going to start wondering what in God's name an Applicative is. But more importantly I'd also consider the runtime error messages and traceback thrown by a language to be core to the language, and Haskell's exceptions are, shall we say, *esoteric* in their approach to communication. Once you've made it over that curve, it's not the worst I've ever seen, but it comes close.
Just recently there was an article analysing codebases on github. Static types made a neglible 1%-2% difference on the error rate at most. At the cost of a much lower development rate.
What's giving you the timing results? Of it's apache logs, you should be aware that it logs when the connection closes, so if your function takes non zero and possibly variable time then this is to be expected
matplotlib core dev here. There is some serious ongoing effort in this direction (https://github.com/matplotlib/matplotlib/pull/8917) but it's still going to take a while...
You're right. Thanks!
matplotlib core dev here. I don't think anyone in the core team is really interested in pushing into this direction these days. However, I have recently done some work implementing a feature-complete new backend from scratch (https://github.com/anntzer/mplcairo) so I'd be happy to provide some guidance to anyone who'd want to work on an OpenGL backend (not that I have a lot of knowledge about OpenGL, but I should at least be able to help with the "talking with matplotlib" part).
"Over 36.3%" does not mean "All", calm your horses OP
Love to see a link to the article, but I'm guessing an inherent flaw in any approach to trying to quantify this to that sort of conclusion is that you could only possibly make that determination via either a) static analysis, which doesn't work at all well with finding errors in dynamically typed languages and can't account for errors never made in a static language where an IDE can offer accurate code completion and write-time corrections, or b) anaylising reported errors, which implicitly skips the unreported and as yet unknown ones, which -- if they're type mismatch errors -- are already known to not exist in the static code base at all if it compiles. Of course the error rate isn't huge -- I'd hazard to guess that the vast majority of Python code is statically typed in practice, it's just not enforced by the language -- but the reason most newer languages are trumpeting static typing is precisely because it allows better and faster verification and more useful tooling in the IDE itself. The argument that dynamic is faster than static has never been true -- it doesn't take substantially longer to type, especially when the static language can offer consistent and meaningful code completion -- though interpreted is generally faster than compiled when it comes to iteration, and there's sufficient evidence to back that up. But what too often gets overlooked is what you gain in iteration speed you lose on writing way, way more tests, and you simply cannot reason about your core as well. TypeScript ultimately provides a strongly and statically typed way of writing for an interpreted runtime, and it's getting huge backing and interest from major players specifically because it eliminates so many of the problems that dynamic + interpreted brings to larger code bases. Type mismatch errors are a tiny portion of that problem, though being able to eliminate them from consideration entirely isn't a small gain.
Also, ask for help! I am still pretty amateur, however if there is one thing that I have learned it is to know when to ask for help. Whether it be from friends or stackexchange, getting a fresh perspective on an issue is always a good idea if you are really stuck. 
Neat! Why stdout instead of print? 
Nice post but this is playing with fire: @print_when_applied def never_called(): import os os.system('rm -rf /') The fire of someone else who didn't pay attention, granted, but nevertheless.
Because in Python 2 there's no way to avoid the implicit new line character, which would result in one word per line.
That's awesome! Thanks for linking the issue. Now I know where to check to see the progress.
in 2.7 you can use `@apply` which is builtin.
Please don't put your disclaimers in the title.
Not to my knowledge. You?
i dont do python daily but when i need it usualy for some project or i have to solve something that python is better at then other languages. so my sugestion is do you have some problem that you have to solve. then solve it in python. learning something just for the sake of learning for me always made me forget it right away, but using that learned let me understand it and keep the knowledge.
Check out pycontracts for decorator based very flexible validation fun. The default error messages suck though. 
`print 'Jack',` does it (although a bit weird looking and still puts a space at the end)
For the benefit of those who believe that the sole criteria of any programming language is how quickly it runs, the following is from the `total_ordering` docs:- *Note - While this decorator makes it easy to create well behaved totally ordered types, it does come at the cost of slower execution and more complex stack traces for the derived comparison methods. If performance benchmarking indicates this is a bottleneck for a given application, implementing all six rich comparison methods instead is likely to provide an easy speed boost.*
I wouldn't do it this way with global variables, but rather, start a celery task that would execute the celery crawil job. The alternative is to use scrapyd which sucks but ok on smaller scales.
Have you tried eta? From celery doc, &gt;&gt;&gt; from datetime import datetime, timedelta &gt;&gt;&gt; tomorrow = datetime.utcnow() + timedelta(days=1) &gt;&gt;&gt; fn.apply_async((2, 2), eta=tomorrow)
are you running a celery-beat process?
[Audio in Python](https://wiki.python.org/moin/Audio/).
Unless you've got a very old version of rm that's unlikely to return anything but an error. Add in `--no-preserve-root` on the other hand...
Ah, thanks, didn't know that.
You could try using the Python version of [Processing](https://processing.org) located [here](http://py.processing.org/). Although I have only used the main version which uses Java, you may be able to create the animations you want with a little patience. [Here](https://gfycat.com/GlaringDefensiveBlackbear) is an example of what is possible. 
Note that if `fib` takes arguments, a more advanced version of `call` is needed. I wrote this a while ago: # adapted from: # https://github.com/shazow/unstdlib.py/blob/master/unstdlib/standard/list_.py#L149 def wrap_value(*wrappers): """ A decorator which wraps a function's return value in the given wrapper function(s). Useful when an algorithm can be expressed more cleanly as a generator but the function should return a list, array, sum, etc. """ def wrap_return(fn): @functools.wraps(fn) def wrap_helper(*args, **kwargs): value = fn(*args,**kwargs) for wrapper in reversed(wrappers): value = wrapper(value) return value return wrap_helper return wrap_return 
That is indeed perfectly true, there is a small runtime cost... but if the *sole* criteria is performance, you've chosen unwisely with selecting Python before even making it to the chocks. The advantage of **total_ordering** is that you get to only have to write and maintain two functions from which the others can be derived, the price you pay for this is a performance hit, though the effect will only usually become noticeable when instantiating *lots* of them. It's a tradeoff to be aware of, for sure.
I'm interested to know what sorts of things you'd need to scrape from Twitter. I've never used it, but isn't everything accessible via their API?
You are absolutely not stupid. I felt the exact same why when I started out with Python. I remember thinking that I am never going to understand this, but after using it for the last 3.5 years I am very comfortable. Some resources that I thought were cool. - Learn python the hard way. - learnxinyminutes -python (highlights key concepts) - http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html (many more cant think right now, stackoverflow is your friend...) 
Still, it'd be better to (not) call something safe, like `ls -A`. Someone might, just might, screw it up and it's just best not to.
That's the joke.
mplcairo states that the pycairo based backend is slow. Any idea why that is the case?
I know you're talented at identifying jokes, but you see... that's the joke.
Try build with options 
Thanks. I'll take a look.
Would be interesting to see a baseline for pickle as well.
&gt; Arguably the trend is now much more strongly back towards static typing than it was when Python was created. There are just too many advantages, beyond the obvious ones like speed. Being able to defer type definitions until runtime affords a lot more flexibility and power especially when building stuff like frameworks, ORMs, etc. This isn't necessarily power that you want in the hands of a beginner, but it sure is useful for building tools that beginners use to multiply their productivity. This is why many nominally statically typed languages like Java, C#, etc. have dynamic typing built in as a feature. On the other hand, I've listened to people rave about Haskell for nearly 15 years. The only software that I have knowingly "used" in all that time was written with Haskell is (allegedly) Facebook's spam filter. &gt;if there was a Haskell as easy to read as Python, I think it'd almost instantly draw away a huge number of big corporate users. So why is F# so niche? It ticks all of your boxes and it's backed by a corporate favorite.